----STARTUP---- (9 November 2020 17:13:21) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-Portfolio1/CuisUniversity-4384.image!

!Portfolio methodsFor: 'transactions' stamp: 'DB 11/9/2020 17:57:06' prior: 50877184 overrides: 50874785!
transactions

	| transactions |
	transactions := OrderedCollection new.
	assets do: [:anAsset | transactions addAll: (anAsset transactions)].
	^transactions.! !
!Portfolio methodsFor: 'transactions' stamp: 'DB 11/9/2020 17:57:11' prior: 50877328 overrides: 50874785!
transactions

	| transactions |
	transactions := OrderedCollection new.
	
	assets do: [:anAsset | transactions addAll: (anAsset transactions)].
	
	^transactions.! !
!Portfolio methodsFor: 'transactions' stamp: 'DB 11/9/2020 17:57:27' prior: 50877337 overrides: 50874785!
transactions

	| transactions |
	transactions := OrderedCollection new.
	
	assets do: [:anAsset | transactions addAll: anAsset transactions].
	
	^transactions.! !
!Portfolio methodsFor: 'transactions' stamp: 'DB 11/9/2020 18:03:04' prior: 50877346 overrides: 50874785!
transactions

	| transactions |
	transactions := OrderedCollection new.
	
	"assets do: [:anAsset | transactions addAll: anAsset transactions]."
	assets do: [:anAsset |anAsset addTransactionsTo: transactions.]
	
	^transactions.! !
!Portfolio methodsFor: 'transactions' stamp: 'DB 11/9/2020 18:04:17'!
addTransactionsTo: aCollectionOfTransactionss

	aCollectionOfTransactionss addAll: self transactions ! !
!Portfolio methodsFor: 'transactions' stamp: 'DB 11/9/2020 18:04:26' prior: 50877365!
addTransactionsTo: aCollectionOfTransactionss

	aCollectionOfTransactionss addAll: self transactions ! !

!classRemoval: #ReceptiveAccount stamp: 'DB 11/9/2020 18:58:34'!
Asset subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'DB 11/9/2020 18:58:34'!
Asset subclass: #Portfolio
	instanceVariableNames: 'assets'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Asset stamp: 'DB 11/9/2020 18:58:34'!
Object subclass: #Asset
	instanceVariableNames: 'parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'DB 11/9/2020 18:58:35'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'DB 11/9/2020 18:58:35'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'DB 11/9/2020 18:58:35'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'DB 11/9/2020 18:58:35'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'DB 11/9/2020 18:58:36'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /Users/dbenitez/uba/2c2020-IS1/2020-2c/18-Portfolio1/Portfolio-Solucion.st----!

TestCase subclass: #TestTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TestTransfer category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 19:19:16'!
TestCase subclass: #TestTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 19:24:10'!
Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TestTransfer methodsFor: 'nil' stamp: 'DB 11/9/2020 19:24:21'!
test01 

	| receiver sender transfer |
	transfer := Transfer new.
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	transfer! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:25:17' prior: 50878166!
test01 

	| receiver sender transfer |
	
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	transfer := Transfer from: sender to: receiver amount: 200.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:26:32' prior: 50878174!
test01 

	| receiver sender transfer |
	
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	transfer := Transfer from: sender to: receiver amount: 200.
	
	self assert: sender balance = -200.
	self assert: receiver balance = 200.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:28:33' prior: 50878183!
test01 

	| receiver sender transfer |
	
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Deposit register: sender on: 300.
	
	transfer := Transfer from: sender to: receiver amount: 200.
	
	self assert: sender balance = -200.
	self assert: receiver balance = 200.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:29:05' prior: 50878194!
test01 

	| receiver sender transfer |
	
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Deposit register: 300 on: sender.
	
	transfer := Transfer from: sender to: receiver amount: 200.
	
	self assert: sender balance = -200.
	self assert: receiver balance = 200.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:30:35' prior: 50878207!
test01 

	| receiver sender transfer |
	
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Deposit register: 300 on: sender.
	Transfer register: 200 from: sender to: receiver.
	
	self assert: sender balance = -200.
	self assert: receiver balance = 200.! !

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 19:33:08'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:38:48' prior: 50878220!
test01 

	| receiver sender transfer |
	
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	
	Transfer register: 200 from: sender to: receiver.
	
	transfer := Transfer new.
	transfer register: 200 from: sender to: receiver.
	
	self assert: sender balance = -200.
	self assert: receiver balance = 200.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:41:41' prior: 50878245!
test01 

	| receiver sender |
	
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.

	Transfer register: 200 from: sender to: receiver.
	
	self assert: sender balance = -200.
	self assert: receiver balance = 200.
	
	! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 19:42:05'!
ERROR!

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 19:42:05'!
ERROR!
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/9/2020 19:42:23'!
register: aSmallInteger from: aReceptiveAccount to: aReceptiveAccount3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeRegister: aSmallInteger from: aReceptiveAccount to: aReceptiveAccount3 ! !
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/9/2020 19:44:40' prior: 50878274!
register: amount from: aSender to: aReceiver

	Deposit register: amount on: aReceiver. 
	Withdraw register: amount on: aSender.
	
	! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 19:44:55'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:44:58' prior: 50878259!
test01 

	| receiver sender |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.

	Transfer register: 200 from: sender to: receiver.
	
	self assert: sender balance = -200.
	self assert: receiver balance = 200.
	
	! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 19:45:02'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:48:04' prior: 50878296!
test01 

	| receiver sender |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.

	Transfer register: 200 from: sender to: receiver.
	
	self assert: sender balance = -200.
	self assert: receiver balance = 200.
	
	! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:50:07' prior: 50878309!
test01 

	| receiver sender |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.

	Transfer register: 200 from: sender to: receiver.
	
	self assert: sender balance = -200.
	self assert: receiver balance = 200.
	
	
	Transfer register: 200 from: receiver to: sender.
	! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:50:17' prior: 50878320!
test01 

	| receiver sender |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.

	Transfer register: 200 from: sender to: receiver.
	
	self assert: sender balance = -200.
	self assert: receiver balance = 200.
	
	
	Transfer register: 200 from: receiver to: sender.
	self assert: sender balance = 0.
	self assert: receiver balance = 0.
	! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 19:50:21'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:50:38' prior: 50878333!
test01 

	| receiver sender |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.

	Transfer register: 200 from: sender to: receiver.
	
	self assert: sender balance = -200.
	self assert: receiver balance = 200.
	
	Transfer register: 200 from: receiver to: sender.
	self assert: sender balance = 0.
	self assert: receiver balance = 0.
	! !

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions transfers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 19:51:01'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions transfers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 19:51:49'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:53:46'!
test02 

	| account  report |
	
	account := ReceptiveAccount new.
	
	report := account summary
	
	self assert: report isEmpty ! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:54:17' prior: 50878390!
test02 

	| account  report |
	
	account := ReceptiveAccount new.
	
	report := account summary.
	
	self assert: report isEmpty ! !

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 19:54:20'!
ERROR!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 19:54:20'!
ERROR!
!Account methodsFor: 'reports' stamp: 'DB 11/9/2020 19:54:46'!
summary
	self shouldBeImplemented.! !
!Account methodsFor: 'reports' stamp: 'DB 11/9/2020 19:54:56' prior: 50878409!
summary
	self subclassResponsibility .! !

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 19:54:57'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 19:55:37' overrides: 50878413!
summary

	^OrderedCollection new.! !

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 19:55:44'!
PASSED!

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 19:55:55'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 19:55:55'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:57:59' prior: 50878398!
test02 

	| account  report |
	
	account := ReceptiveAccount new.
	
	report := account summary.
	
	Deposit register: 200 on: account.
	
	self assert: (report at: 1) equals: 'Deposit for 200'.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:58:10'!
test03 

	| account  report |
	
	account := ReceptiveAccount new.
	
	report := account summary.
	
	Deposit register: 200 on: account.
	
	self assert: (report at: 1) equals: 'Deposit for 200'.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:53:46' prior: 50878431!
test02 

	| account  report |
	
	account := ReceptiveAccount new.
	
	report := account summary
	
	self assert: report isEmpty ! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 19:58:39'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 19:58:39'!
ERROR!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 19:58:39'!
ERROR!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 19:58:58'!
ERROR!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:59:18' prior: 50878450!
test02 

	| account  report |
	
	account := ReceptiveAccount new.
	
	report := account summary.
	
	self assert: report isEmpty ! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 19:59:23'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 19:59:23'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 19:59:23'!
ERROR!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 19:59:23'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 20:00:40' prior: 50878420 overrides: 50878413!
summary

	| sum |
	sum := OrderedCollection new.
	
	sum add: 'Deposit for 200'.
	
	^sum! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 20:00:52' prior: 50878484 overrides: 50878413!
summary

	| summary |
	summary := OrderedCollection new.
	
	summary add: 'Deposit for 200'.
	
	^summary! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 20:01:35' prior: 50878491 overrides: 50878413!
summary

	| summary |
	summary := OrderedCollection new.
	
	transactions ifEmpty: [^summary].
	
	summary add: 'Deposit for 200'.
	
	^summary! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 20:01:40'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 20:01:40'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 20:01:40'!
ERROR!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 20:01:40'!
ERROR!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 20:02:18' prior: 50878440!
test03 

	| account  report |
	
	account := ReceptiveAccount new.
	Deposit register: 200 on: account.
	
	report := account summary.

	self assert: (report at: 1) equals: 'Deposit for 200'.! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 20:02:21'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 20:02:21'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 20:02:21'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 20:02:59' prior: 50878515!
test03 

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	
	report := account summary.

	self assert: (report at: 1) equals: 'Deposit for 200'.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 20:03:18' prior: 50878531!
test03 

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	
	report := account summary.

	self assert: (report at: 1) equals: 'Extraction for 200'.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 20:03:30'!
test04

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	
	report := account summary.

	self assert: (report at: 1) equals: 'Extraction for 200'.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 20:02:59' prior: 50878541!
test03 

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	
	report := account summary.

	self assert: (report at: 1) equals: 'Deposit for 200'.! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 20:03:43'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 20:03:43'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 20:03:43'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 20:03:43'!
FAILURE!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 20:03:43'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 20:05:55' prior: 50878498 overrides: 50878413!
summary

	| summary |
	summary := OrderedCollection new.
	
	transactions ifEmpty: [^summary].
	
	((transactions at: 1) isKindOf: Withdraw) ifTrue: [summary add: 'Extraction for 200'.].
	((transactions at: 1) isKindOf: Deposit ) ifTrue: [summary add: 'Deposit for 200'.].

	
	^summary! !

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 20:05:56'!
PASSED!

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 20:06:00'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 20:06:00'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 20:06:00'!
FAILURE!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 20:06:00'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 20:06:00'!
FAILURE!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 20:06:21' prior: 50878560!
test03 

	| account  report |
	
	account := ReceptiveAccount new.
	Deposit register: 200 on: account.
	
	report := account summary.

	self assert: (report at: 1) equals: 'Deposit for 200'.! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 20:06:27'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 20:06:27'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 20:06:27'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 20:06:27'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 20:08:07'!
test05

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	Deposit register: 400 on: account.
	
	report := account summary.

	self assert: (report at: 1) equals: 'Extraction for 200'.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 20:08:33' prior: 50878626!
test05

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	Deposit register: 400 on: account.
	
	report := account summary.

	self assert: (report at: 1) equals: 'Deposit for 200'.
	self assert: (report at: 2) equals: 'Extraction for 200'.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 20:09:29' prior: 50878637!
test05

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	Deposit register: 400 on: account.
	
	report := account summary.

	self assert: (report at: 1) equals: 'Extraction for 200'.
	self assert: (report at: 2) equals: 'Deposit for 200'.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 20:09:54' prior: 50878649!
test05

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	Deposit register: 400 on: account.
	
	report := account summary.

	self assert: report size = 2.
	self assert: (report at: 1) equals: 'Extraction for 200'.
	self assert: (report at: 2) equals: 'Deposit for 400'.! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 20:09:57'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 20:09:57'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 20:09:57'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 20:09:57'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 20:09:57'!
FAILURE!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 20:09:57'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 20:12:01' prior: 50878582 overrides: 50878413!
summary

	| summary |
	summary := OrderedCollection new.

	transactions ifEmpty: [^summary].
	
	((transactions at: 1) isKindOf: Withdraw) ifTrue: [summary add: 'Extraction for 200'.].
	((transactions at: 1) isKindOf: Deposit ) ifTrue: [summary add: 'Deposit for 200'.].

	transactions do: [:aTransaction |
		(aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'Extraction for ', aTransaction value.].
		(aTransaction isKindOf: Deposit ) ifTrue: [summary add: 'Deposit for ' , aTransaction value.].
	]
	
	^summary! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 20:12:13' prior: 50878689 overrides: 50878413!
summary

	| summary |
	summary := OrderedCollection new.

	transactions do: [:aTransaction |
		(aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'Extraction for ', aTransaction value.].
		(aTransaction isKindOf: Deposit ) ifTrue: [summary add: 'Deposit for ' , aTransaction value.].
	]
	
	^summary! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 20:12:19' prior: 50878709 overrides: 50878413!
summary

	| summary |
	summary := OrderedCollection new.

	transactions do: [:aTransaction |
		(aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'Extraction for ', aTransaction value.].
		(aTransaction isKindOf: Deposit ) ifTrue: [summary add: 'Deposit for ' , aTransaction value.].
	].
	
	^summary! !

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 20:12:23'!
ERROR!

'hols' , 'chau'!

'hols' , 200!

'hols' , 200 asString !

'hols ' , 200 asString !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 20:13:59' prior: 50878723 overrides: 50878413!
summary

	| summary |
	summary := OrderedCollection new.

	transactions do: [:aTransaction |
		(aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'Extraction for ', aTransaction value asString.].
		(aTransaction isKindOf: Deposit ) ifTrue: [summary add: 'Deposit for ' , aTransaction value asString.].
	].
	
	^summary! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 20:14:04'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 20:14:04'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 20:14:04'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 20:14:04'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 20:14:04'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 20:15:48'!
test06SalidaTransferencia

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.

	report := receiver summary.	
	self assert: report size = 2.
	self assert: (report at: 1) equals: 'Extraction for 200'.
	self assert: (report at: 2) equals: 'Deposit for 400'.
	
	report := sender summary.
	self assert: report size = 2.
	self assert: (report at: 1) equals: 'Extraction for 200'.
	self assert: (report at: 2) equals: 'Deposit for 400'.

	! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 20:17:51' prior: 50878767!
test06SalidaTransferencia

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.

	report := receiver summary.	
	self assert: report size = 1.
	self assert: (report at: 1) equals: 'Entry by transfer of 200'.
	
	report := sender summary.
	self assert: report size = 1.
	self assert: (report at: 1) equals: 'Output by transfer 200'.

	! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 20:18:20' prior: 50878786!
test06SalidaTransferencia

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Transfer register: 200 from: sender  to: receiver.

	report := receiver summary.	
	self assert: report size = 1.
	self assert: (report at: 1) equals: 'Entry by transfer of 200'.
	
	report := sender summary.
	self assert: report size = 1.
	self assert: (report at: 1) equals: 'Output by transfer 200'.

	! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 20:18:38' prior: 50878801!
test06SalidaTransferencia

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Transfer register: 200 from: sender to: receiver.

	report := receiver summary.	
	self assert: report size = 1.
	self assert: (report at: 1) equals: 'Entry by transfer of 200'.
	
	report := sender summary.
	self assert: report size = 1.
	self assert: (report at: 1) equals: 'Output by transfer 200'.

	! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 20:18:46'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 20:18:46'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 20:18:46'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 20:18:46'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 20:18:46'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 20:18:46'!
FAILURE!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 20:18:46'!
FAILURE!

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 20:26:01'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 20:27:20' prior: 50878742 overrides: 50878413!
summary

	| summary |
	summary := OrderedCollection new.

	transactions do: [:aTransaction |
		(aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'Extraction for ', aTransaction value asString.].
		(aTransaction isKindOf: Deposit ) ifTrue: [summary add: 'Deposit for ' , aTransaction value asString.].
		" (aTransaction isKindOf: Transfer) "
	].
	
	^summary! !

AccountTransaction subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 20:27:34'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #Transfer
	instanceVariableNames: 'sender receiver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 20:28:00'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: 'sender receiver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Transfer
	instanceVariableNames: 'sender receiver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 20:34:54'!
Object subclass: #Transfer
	instanceVariableNames: 'sender receiver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 20:59:19'!
ProtoObject subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 20:59:30'!
ProtoObject subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/9/2020 20:58:58' prior: 50878286!
register: amount from: aSender to: aReceiver



	TransferDeposit register: amount on: aReceiver. 
	TransferWithdraw register: amount on: aSender.
	
	! !
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/9/2020 20:59:36' prior: 50878933!
register: amount from: aSender to: aReceiver

	TransferDeposit register: amount on: aReceiver. 
	TransferWithdraw register: amount on: aSender.
	
	! !

AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'sender receiver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 21:00:16'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'sender receiver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 21:00:22'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 21:00:25'!
TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 21:03:08' prior: 50878866 overrides: 50878413!
summary

	| summary |
	summary := OrderedCollection new.

	transactions do: [:aTransaction |
		
		
		(aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'Extraction for ', aTransaction value asString.].
		(aTransaction isKindOf: Deposit ) ifTrue: [summary add: 'Deposit for ' , aTransaction value asString.].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [summary add: '', aTransaction value asString]
		" (aTransaction isKindOf: Transfer) "
	].
	
	^summary! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 21:03:39' prior: 50878989 overrides: 50878413!
summary

	| summary |
	summary := OrderedCollection new.

	transactions do: [:aTransaction |
		
		(aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'Extraction for ', aTransaction value asString.].
		(aTransaction isKindOf: Deposit ) ifTrue: [summary add: 'Deposit for ' , aTransaction value asString.].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [summary add: 'Entry by transfer of ', aTransaction value asString]
		" (aTransaction isKindOf: Transfer) "
	].
	
	^summary! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 21:04:18' prior: 50879008 overrides: 50878413!
summary

	| summary |
	summary := OrderedCollection new.

	transactions do: [:aTransaction |
		
		(aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'Extraction for ', aTransaction value asString.].
		(aTransaction isKindOf: Deposit ) ifTrue: [summary add: 'Deposit for ' , aTransaction value asString.].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [summary add: 'Entry by transfer of ', aTransaction value asString].
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [summary add: 'Output by transfer ', aTransaction value asString]
		
	].
	
	^summary! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:04:26'!
ERROR!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:04:26'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:04:26'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:04:26'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:04:26'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:04:26'!
ERROR!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:04:39'!
ERROR!
!TransferDeposit class methodsFor: 'nil' stamp: 'DB 11/9/2020 21:05:58'!
for: aValue

	^ self new initializeFor: aValue ! !
!TransferWithdraw class methodsFor: 'nil' stamp: 'DB 11/9/2020 21:06:03'!
for: aValue

	^ self new initializeFor: aValue ! !

AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 21:06:29'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferDeposit methodsFor: 'nil' stamp: 'DB 11/9/2020 21:06:37'!
initializeFor: aValue

	value := aValue ! !
!TransferWithdraw methodsFor: 'nil' stamp: 'DB 11/9/2020 21:06:44'!
initializeFor: aValue

	value := aValue ! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:06:48'!
ERROR!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:06:48'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:06:48'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:06:48'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:06:48'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:06:48'!
ERROR!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:06:52'!
ERROR!
!TransferDeposit methodsFor: 'nil' stamp: 'DB 11/9/2020 21:07:17' prior: 50879086!
initializeFor: aValue

	value := aValue ! !
!TransferWithdraw methodsFor: 'nil' stamp: 'DB 11/9/2020 21:07:22' prior: 50879090!
initializeFor: aValue

	value := aValue ! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:07:25'!
ERROR!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:07:25'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:07:25'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:07:25'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:07:25'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:07:25'!
ERROR!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:07:28'!
ERROR!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:07:55'!
ERROR!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:08:04'!
ERROR!
!TransferDeposit methodsFor: 'nil' stamp: 'DB 11/9/2020 21:08:55' overrides: 50878044!
value

	^ value! !
!TransferWithdraw methodsFor: 'nil' stamp: 'DB 11/9/2020 21:09:02' overrides: 50878044!
value

	^ value! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:09:06'!
ERROR!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:09:06'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:09:06'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:09:06'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:09:06'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:09:06'!
PASSED!

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:09:06'!
ERROR!
!TransferDeposit methodsFor: 'nil' stamp: 'DB 11/9/2020 21:09:32' overrides: 50878048!
affectBalance: aBalance

	^aBalance + value ! !
!TransferWithdraw methodsFor: 'nil' stamp: 'DB 11/9/2020 21:09:44' overrides: 50878048!
affectBalance: aBalance

	^aBalance - value ! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:09:52'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:09:52'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:09:52'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:09:52'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:09:52'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:09:52'!
PASSED!

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:09:59'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:09:59'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:09:59'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:09:59'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:09:59'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:09:59'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:10:50' prior: 50878818!
test06SalidaTransferencia

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Transfer register: 200 from: sender to: receiver.

	report := receiver summary.	
	self assert: report size = 1.
	self assert: (report at: 1) equals: 'Entry by transfer of 200'.
	
	report := sender summary.
	self assert: report size = 1.
	self assert: (report at: 1) equals: 'Output by transfer 200'.

	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 21:12:06' prior: 50879027 overrides: 50878413!
summary

	| summary |
	summary := OrderedCollection new.
	
	

	transactions do: [:aTransaction |
		
		(aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'Extraction for ', aTransaction value asString.].
		(aTransaction isKindOf: Deposit ) ifTrue: [summary add: 'Deposit for ' , aTransaction value asString.].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [summary add: 'Entry by transfer of ', aTransaction value asString].
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [summary add: 'Output by transfer ', aTransaction value asString]
		
	].

	summary add: 'Balance = ' , self balance asString 
	
	^summary! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:12:14'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:12:14'!
ERROR!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:12:14'!
ERROR!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:12:14'!
ERROR!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:12:14'!
ERROR!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:12:14'!
ERROR!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:13:20' prior: 50878467!
test02 

	| account  report |
	
	account := ReceptiveAccount new.
	
	report := account summary.
	
	self assert: 1 equals: report size. 
	self assert: 'Balance = 0' equals: (report at: 1).! !

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:13:23'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 21:13:35' prior: 50879224 overrides: 50878413!
summary

	| summary |
	summary := OrderedCollection new.
	
	

	transactions do: [:aTransaction |
		
		(aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'Extraction for ', aTransaction value asString.].
		(aTransaction isKindOf: Deposit ) ifTrue: [summary add: 'Deposit for ' , aTransaction value asString.].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [summary add: 'Entry by transfer of ', aTransaction value asString].
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [summary add: 'Output by transfer ', aTransaction value asString]
		
	].

	summary add: 'Balance = ' , self balance asString.
	
	^summary! !

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:13:36'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:15:08' prior: 50878608!
test03 

	| account  report |
	
	account := ReceptiveAccount new.
	Deposit register: 200 on: account.
	
	report := account summary.

	self assert: 2 equals: (report size).
	self assert: (report at: 1) equals: 'Deposit for 200'.
	self assert: (report at: 2) equals: 'Balance = 200'.! !

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:15:09'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:15:30' prior: 50878550!
test04

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	
	report := account summary.
	
	self assert: 2 equals: (report size).
	self assert: (report at: 1) equals: 'Deposit for 200'.
	self assert: (report at: 1) equals: 'Extraction for 200'.! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:15:35'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:15:35'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:15:35'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:15:35'!
FAILURE!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:15:35'!
FAILURE!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:15:35'!
FAILURE!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:16:05' prior: 50879313!
test04

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	
	report := account summary.
	
	self assert: 3 equals: (report size).
	
	self assert: (report at: 1) equals: 'Deposit for 200'.
	self assert: (report at: 1) equals: 'Extraction for 200'.
	self assert: (report at: 1) equals: 'Deposit for 200'.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:16:24' prior: 50879340!
test04

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	
	report := account summary.
	
	self assert: 3 equals: (report size).
	
	self assert: (report at: 1) equals: 'Deposit for 200'.
	self assert: (report at: 2) equals: 'Extraction for 200'.
	self assert: (report at: 3) equals: 'Balance = 0'.! !

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:16:27'!
FAILURE!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:16:27'!
FAILURE!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:16:51' prior: 50879354!
test04

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	
	report := account summary.
	
	self assert: 3 equals: (report size).
	
	self assert: (report at: 2) equals: 'Extraction for 200'.
	self assert: (report at: 3) equals: 'Balance = -200'.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:16:58' prior: 50879373!
test04

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	
	report := account summary.
	
	self assert: 2 equals: (report size).
	
	self assert: (report at: 1) equals: 'Extraction for 200'.
	self assert: (report at: 2) equals: 'Balance = -200'.! !

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:17:04'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:17:28' prior: 50878661!
test05

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	Deposit register: 400 on: account.
	
	report := account summary.

	self assert: report size = 3.
	self assert: (report at: 1) equals: 'Extraction for 200'.
	self assert: (report at: 2) equals: 'Deposit for 400'.
	self assert: (report at: 2) equals: 'Balance = 200'.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:17:30' prior: 50879401!
test05

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	Deposit register: 400 on: account.
	
	report := account summary.

	self assert: report size = 3.
	self assert: (report at: 1) equals: 'Extraction for 200'.
	self assert: (report at: 2) equals: 'Deposit for 400'.
	self assert: (report at: 3) equals: 'Balance = 200'.! !

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:17:33'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:17:38'!
FAILURE!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:17:38'!
FAILURE!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:17:51' prior: 50879206!
test06SalidaTransferencia

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Transfer register: 200 from: sender to: receiver.

	report := receiver summary.	
	self assert: report size = 2.
	self assert: (report at: 1) equals: 'Entry by transfer of 200'.
	
	report := sender summary.
	self assert: report size = 2.
	self assert: (report at: 1) equals: 'Output by transfer 200'.

	! !

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:17:54'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:18:27' prior: 50879439!
test06SalidaTransferencia

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Transfer register: 200 from: sender to: receiver.

	report := receiver summary.	
	self assert: report size = 2.
	self assert: (report at: 1) equals: 'Entry by transfer of 200'.
	self assert: (report at: 2) equals: 'Balance = 200'.
	
	report := sender summary.
	self assert: report size = 2.
	self assert: (report at: 1) equals: 'Output by transfer 200'.
	self assert: (report at: 2) equals: 'Balance = -200'.
	! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:18:31'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:18:31'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:18:31'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:18:31'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:18:31'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:18:31'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:21:21'!
test07

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 20 from: receiver to: sender.
	Transfer register: 30 from: sender to: receiver.

	report := receiver summary.	
	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Entry by transfer of 200'.
	self assert: (report at: 2) equals: 'Balance = 200'.

	! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:23:15' prior: 50879493!
test07

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 20 from: receiver to: sender.
	Transfer register: 30 from: sender to: receiver.

	report := receiver summary.	
	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Deposit for 100'.
	self assert: (report at: 2) equals: 'Extraction for 50'.
	self assert: (report at: 3) equals: 'Output by transfer 20'.
	self assert: (report at: 3) equals: 'Entry by transfer of 30'.
	self assert: (report at: 3) equals: 'Balance = 60'.

	! !

!testRun: #TestTransfer #test07 stamp: 'DB 11/9/2020 21:23:18'!
FAILURE!

!testRun: #TestTransfer #test07 stamp: 'DB 11/9/2020 21:23:18'!
FAILURE!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:24:23' prior: 50879511!
test07

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 20 from: receiver to: sender.
	Transfer register: 30 from: sender to: receiver.

	report := receiver summary.	
	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Deposit for 100'.
	self assert: (report at: 2) equals: 'Extraction for 50'.
	self assert: (report at: 3) equals: 'Output by transfer 20'.
	self assert: (report at: 4) equals: 'Entry by transfer of 30'.
	self assert: (report at: 5) equals: 'Balance = 60'.

	! !

!testRun: #TestTransfer #test07 stamp: 'DB 11/9/2020 21:24:24'!
PASSED!

!testRun: #TestTransfer #test07 stamp: 'DB 11/9/2020 21:24:35'!
PASSED!
!AccountTransaction methodsFor: 'balance' stamp: 'DB 11/9/2020 21:27:35'!
affectTransfer: aNeto

	self subclassResponsibility ! !
!Deposit methodsFor: 'balance' stamp: 'DB 11/9/2020 21:27:57' overrides: 50879566!
affectTransfer: aNeto

	^aNeto ! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:28:22' overrides: 50879566!
affectTransfer: aNeto

	^aNeto + value ! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:28:36' overrides: 50879566!
affectTransfer: aNeto

	^aNeto - value ! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'DB 11/9/2020 21:29:19'!
transferNet

	^transactions 
		inject: 0
		into: [ :transferNet :transaction | transaction affectTransfer: transferNet ]! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:30:10'!
test08

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 20 from: receiver to: sender.
	Transfer register: 30 from: sender to: receiver.

	report := receiver summary.	
	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Deposit for 100'.
	self assert: (report at: 2) equals: 'Extraction for 50'.
	self assert: (report at: 3) equals: 'Output by transfer 20'.
	self assert: (report at: 4) equals: 'Entry by transfer of 30'.
	self assert: (report at: 5) equals: 'Balance = 60'.
	
	self assert: 10 equals: (receiver transferNet )

	! !

!testRun: #TestTransfer #test08 stamp: 'DB 11/9/2020 21:30:14'!
ERROR!

!testRun: #TestTransfer #test08 stamp: 'DB 11/9/2020 21:30:14'!
ERROR!
!Withdraw methodsFor: 'balance' stamp: 'DB 11/9/2020 21:30:54' overrides: 50879566!
affectTransfer: aNeto
	^aNeto! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:31:00'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:31:00'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:31:00'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:31:00'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:31:00'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:31:00'!
PASSED!

!testRun: #TestTransfer #test07 stamp: 'DB 11/9/2020 21:31:00'!
PASSED!

!testRun: #TestTransfer #test08 stamp: 'DB 11/9/2020 21:31:00'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:32:49'!
test02Transfer

	| account  |
	
	account := ReceptiveAccount new.


	Transfer register: 200 from: account to: account.
	
	! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:32:54' prior: 50879644!
test02Transfer

	| account  |
	
	account := ReceptiveAccount new.

	Transfer register: 200 from: account to: account.
	
	! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:36:43' prior: 50879651!
test02Transfer

	| account  |
	
	account := ReceptiveAccount new.

	
	
	self should: [Transfer register: 200 from: account to: account.] 
	 	raise: Error  
		description: Transfer senderAndReceiverCantBeTheSameAccountErrorDescription 
	
	! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:36:50' prior: 50879658!
test02Transfer

	| account  |
	
	account := ReceptiveAccount new.

	self should: [Transfer register: 200 from: account to: account.] 
	 	raise: Error  
		description: Transfer senderAndReceiverCantBeTheSameAccountErrorDescription 
	
	! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:36:53'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:36:53'!
PASSED!

!testRun: #TestTransfer #test02Transfer stamp: 'DB 11/9/2020 21:36:53'!
ERROR!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:36:53'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:36:53'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:36:53'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:36:53'!
PASSED!

!testRun: #TestTransfer #test07 stamp: 'DB 11/9/2020 21:36:53'!
PASSED!

!testRun: #TestTransfer #test08 stamp: 'DB 11/9/2020 21:36:53'!
PASSED!

!testRun: #TestTransfer #test02Transfer stamp: 'DB 11/9/2020 21:36:53'!
ERROR!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:37:09'!
senderAndReceiverCantBeTheSameAccountErrorDescription
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:37:38' prior: 50879703!
senderAndReceiverCantBeTheSameAccountErrorDescription
	^'sender and receiver can be the same account'! !

!testRun: #TestTransfer #test02Transfer stamp: 'DB 11/9/2020 21:37:40'!
FAILURE!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:38:19'!
signalSenderAndReceiverCantBeTheSameAccount
	self error: self senderAndReceiverCantBeTheSameAccountErrorDescription ! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:38:25'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:38:25'!
PASSED!

!testRun: #TestTransfer #test02Transfer stamp: 'DB 11/9/2020 21:38:25'!
FAILURE!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:38:25'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:38:25'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:38:25'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:38:25'!
PASSED!

!testRun: #TestTransfer #test07 stamp: 'DB 11/9/2020 21:38:25'!
PASSED!

!testRun: #TestTransfer #test08 stamp: 'DB 11/9/2020 21:38:25'!
PASSED!

!testRun: #TestTransfer #test02Transfer stamp: 'DB 11/9/2020 21:38:25'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/9/2020 21:39:04' prior: 50878941!
register: amount from: aSender to: aReceiver


	aSender= aReceiver ifTrue: [^self signalSenderAndReceiverCantBeTheSameAccount ].

	TransferDeposit register: amount on: aReceiver. 
	TransferWithdraw register: amount on: aSender.
	
	! !

!testRun: #TestTransfer #test02Transfer stamp: 'DB 11/9/2020 21:39:07'!
PASSED!

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:39:10'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:39:10'!
PASSED!

!testRun: #TestTransfer #test02Transfer stamp: 'DB 11/9/2020 21:39:10'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:39:10'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:39:10'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:39:10'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:39:10'!
PASSED!

!testRun: #TestTransfer #test07 stamp: 'DB 11/9/2020 21:39:10'!
PASSED!

!testRun: #TestTransfer #test08 stamp: 'DB 11/9/2020 21:39:10'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:40:17'!
test03zero

	| account  |
	
	account := ReceptiveAccount new.

	self should: [Transfer register: 0 from: account to: account.] 
	 	raise: Error  
		description: Transfer cantTransferNegativeOrZeroAmountErrorDescription 
	
	! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:40:25'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:40:25'!
PASSED!

!testRun: #TestTransfer #test02Transfer stamp: 'DB 11/9/2020 21:40:25'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:40:25'!
PASSED!

!testRun: #TestTransfer #test03zero stamp: 'DB 11/9/2020 21:40:25'!
ERROR!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:40:25'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:40:25'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:40:25'!
PASSED!

!testRun: #TestTransfer #test07 stamp: 'DB 11/9/2020 21:40:25'!
PASSED!

!testRun: #TestTransfer #test08 stamp: 'DB 11/9/2020 21:40:25'!
PASSED!

!testRun: #TestTransfer #test03zero stamp: 'DB 11/9/2020 21:40:25'!
ERROR!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:40:37'!
cantTransferNegativeOrZeroAmountErrorDescription
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:40:59' prior: 50879819!
cantTransferNegativeOrZeroAmountErrorDescription
	^'cant transfer negative or zeor amount'! !

!testRun: #TestTransfer #test03zero stamp: 'DB 11/9/2020 21:41:01'!
PASSED!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:41:32'!
signalCantTransferNegativeOrZeroAmount
	^self error: self cantTransferNegativeOrZeroAmountErrorDescription ! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:41:36'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:41:36'!
PASSED!

!testRun: #TestTransfer #test02Transfer stamp: 'DB 11/9/2020 21:41:36'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:41:36'!
PASSED!

!testRun: #TestTransfer #test03zero stamp: 'DB 11/9/2020 21:41:36'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:41:36'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:41:36'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:41:36'!
PASSED!

!testRun: #TestTransfer #test07 stamp: 'DB 11/9/2020 21:41:36'!
PASSED!

!testRun: #TestTransfer #test08 stamp: 'DB 11/9/2020 21:41:36'!
PASSED!

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:41:44'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:41:44'!
PASSED!

!testRun: #TestTransfer #test02Transfer stamp: 'DB 11/9/2020 21:41:44'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:41:44'!
PASSED!

!testRun: #TestTransfer #test03zero stamp: 'DB 11/9/2020 21:41:44'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:41:44'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:41:44'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:41:44'!
PASSED!

!testRun: #TestTransfer #test07 stamp: 'DB 11/9/2020 21:41:44'!
PASSED!

!testRun: #TestTransfer #test08 stamp: 'DB 11/9/2020 21:41:44'!
PASSED!

!testRun: #TestTransfer #test03zero stamp: 'DB 11/9/2020 21:42:02'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:43:15' prior: 50879783!
test03zero

	| account1  account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	self should: [Transfer register: 0 from: account2 to: account2.] 
	 	raise: Error  
		description: Transfer cantTransferNegativeOrZeroAmountErrorDescription 
	
	! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:43:19' prior: 50879890!
test03zero

	| account1  account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	self should: [Transfer register: 0 from: account1 to: account2.] 
	 	raise: Error  
		description: Transfer cantTransferNegativeOrZeroAmountErrorDescription 
	
	! !

!testRun: #TestTransfer #test03zero stamp: 'DB 11/9/2020 21:43:24'!
FAILURE!

!testRun: #TestTransfer #test03zero stamp: 'DB 11/9/2020 21:43:24'!
FAILURE!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:43:50' prior: 50879825!
cantTransferNegativeOrZeroAmountErrorDescription
	^'cant transfer negative or zero amount'! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:43:55'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:43:55'!
PASSED!

!testRun: #TestTransfer #test02Transfer stamp: 'DB 11/9/2020 21:43:55'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:43:55'!
PASSED!

!testRun: #TestTransfer #test03zero stamp: 'DB 11/9/2020 21:43:55'!
FAILURE!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:43:55'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:43:55'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:43:55'!
PASSED!

!testRun: #TestTransfer #test07 stamp: 'DB 11/9/2020 21:43:55'!
PASSED!

!testRun: #TestTransfer #test08 stamp: 'DB 11/9/2020 21:43:55'!
PASSED!

!testRun: #TestTransfer #test03zero stamp: 'DB 11/9/2020 21:43:55'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/9/2020 21:44:46' prior: 50879749!
register: amount from: aSender to: aReceiver


	aSender= aReceiver ifTrue: [^self signalSenderAndReceiverCantBeTheSameAccount ].
	
	amount <= 0 ifTrue: [^self signalCantTransferNegativeOrZeroAmount ].

	TransferDeposit register: amount on: aReceiver. 
	TransferWithdraw register: amount on: aSender.
	
	! !
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/9/2020 21:44:50' prior: 50879952!
register: amount from: aSender to: aReceiver

	aSender= aReceiver ifTrue: [^self signalSenderAndReceiverCantBeTheSameAccount ].
	
	amount <= 0 ifTrue: [^self signalCantTransferNegativeOrZeroAmount ].

	TransferDeposit register: amount on: aReceiver. 
	TransferWithdraw register: amount on: aSender.
	
	! !

!testRun: #TestTransfer #test03zero stamp: 'DB 11/9/2020 21:44:53'!
PASSED!

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:44:59'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:44:59'!
PASSED!

!testRun: #TestTransfer #test02Transfer stamp: 'DB 11/9/2020 21:44:59'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:44:59'!
PASSED!

!testRun: #TestTransfer #test03zero stamp: 'DB 11/9/2020 21:44:59'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:44:59'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:44:59'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:44:59'!
PASSED!

!testRun: #TestTransfer #test07 stamp: 'DB 11/9/2020 21:44:59'!
PASSED!

!testRun: #TestTransfer #test08 stamp: 'DB 11/9/2020 21:44:59'!
PASSED!

----SNAPSHOT----(9 November 2020 22:45:33) CuisUniversity-4384.image priorSource: 17461430!

----QUIT----(9 November 2020 22:45:35) CuisUniversity-4384.image priorSource: 17547287!

----STARTUP---- (10 November 2020 19:39:45) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-Portfolio1/CuisUniversity-4384.image!


!classRemoval: #Transfer stamp: 'DB 11/10/2020 19:42:49'!
Object subclass: #Transfer
	instanceVariableNames: 'sender receiver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Withdraw stamp: 'DB 11/10/2020 19:42:49'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferWithdraw stamp: 'DB 11/10/2020 19:42:49'!
TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferDeposit stamp: 'DB 11/10/2020 19:42:50'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferTransaction stamp: 'DB 11/10/2020 19:42:50'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'DB 11/10/2020 19:42:50'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'DB 11/10/2020 19:42:50'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'DB 11/10/2020 19:42:51'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'DB 11/10/2020 19:42:51'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'DB 11/10/2020 19:42:51'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TestTransfer stamp: 'DB 11/10/2020 19:42:51'!
TestCase subclass: #TestTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'DB 11/10/2020 19:42:52'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'DB 11/10/2020 19:42:52'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----End fileIn of /Users/dbenitez/uba/2c2020-IS1/2020-2c/18-Portfolio1/Portfolio-Solucion.st----!

TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 19:44:38'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 19:46:46'!
Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'nil' stamp: 'DB 11/10/2020 19:46:40'!
test01

	| sender receiver |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 200 from: sender to: receiver.
	
	self assert: -200 equals: sender balance.
	self assert: 200 equals: receiver balance.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 19:46:49' prior: 50880836!
test01

	| sender receiver |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 200 from: sender to: receiver.
	
	self assert: -200 equals: sender balance.
	self assert: 200 equals: receiver balance.
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 19:48:28'!
test01TransferAffectBalance

	| sender receiver |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 200 from: sender to: receiver.
	
	self assert: -200 equals: sender balance.
	self assert: 200 equals: receiver balance.
	! !

!methodRemoval: TransferTest #test01 stamp: 'DB 11/10/2020 19:48:28'!
test01

	| sender receiver |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 200 from: sender to: receiver.
	
	self assert: -200 equals: sender balance.
	self assert: 200 equals: receiver balance.
	!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 19:48:38'!
ERROR!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 19:48:38'!
ERROR!
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/10/2020 19:48:50'!
register: aSmallInteger from: aReceptiveAccount to: aReceptiveAccount3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeRegister: aSmallInteger from: aReceptiveAccount to: aReceptiveAccount3 ! !
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/10/2020 19:51:13' prior: 50880885!
register: amount from: aSender to: aReceiver
 
	Deposit register: amount on: aReceiver.
	Withdraw register: amount on: aSender.! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 19:51:14'!
PASSED!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 19:51:17'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 19:51:44'!
test02SenderAndReceiverCantBeTheSameAccount

	| sender receiver |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 200 from: sender to: receiver.
	
	self assert: -200 equals: sender balance.
	self assert: 200 equals: receiver balance.
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 19:53:19' prior: 50880910!
test02SenderAndReceiverCantBeTheSameAccount

	| account |
	
	account := ReceptiveAccount new.
	
	self should: [Transfer register: 200 from: account to: account]
		raise: Error 
		description: Transfer senderAndReceiverCantBeTheSameAccountErrorDescription.! !

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 19:53:24'!
ERROR!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 19:53:24'!
ERROR!
!Transfer class methodsFor: 'error handling' stamp: 'DB 11/10/2020 19:53:41'!
senderAndReceiverCantBeTheSameAccountErrorDescription
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'error handling' stamp: 'DB 11/10/2020 19:54:05' prior: 50880940!
senderAndReceiverCantBeTheSameAccountErrorDescription
	^'Sender and receiver cant be the same account'! !

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 19:54:07'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/10/2020 19:56:34' prior: 50880897!
register: amount from: aSender to: aReceiver

	aSender = aReceiver ifTrue: [^self signalSenderAndReceiverCantBeTheSameAccount].
 
	Deposit register: amount on: aReceiver.
	Withdraw register: amount on: aSender.! !

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 19:56:37'!
PASSED!
!Transfer class methodsFor: 'error handling' stamp: 'DB 11/10/2020 19:57:01'!
signalAndReceiverCantBeTheSameAccount
	^self error: self senderAndReceiverCantBeTheSameAccountErrorDescription 
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 19:57:07'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 19:57:07'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 19:58:39'!
test03TransferAmountCantBeZeroOrNegative

	| sender receiver |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	self should: [Transfer register: 0 from: sender to: receiver]
		raise: Error 
		description: Transfer signalCantTransferNegativeOrZeroAmount.! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 19:58:49'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 19:58:49'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 19:58:49'!
ERROR!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 19:58:49'!
ERROR!
!Transfer class methodsFor: 'error handling' stamp: 'DB 11/10/2020 19:58:57'!
signalCantTransferNegativeOrZeroAmount
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'error handling' stamp: 'DB 11/10/2020 19:59:33' prior: 50881007!
signalCantTransferNegativeOrZeroAmount
	^'Cant transfer zero or negative amount'! !

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 19:59:34'!
FAILURE!
!Transfer class methodsFor: 'error handling' stamp: 'DB 11/10/2020 20:00:03'!
CantTransferNegativeOrZeroAmountErrorDescription
	^'Cant transfer zero or negative amount'! !
!Transfer class methodsFor: 'error handling' stamp: 'DB 11/10/2020 20:00:29' prior: 50881013!
signalCantTransferNegativeOrZeroAmount
	^self error: self CantTransferNegativeOrZeroAmountErrorDescription ! !
!Transfer class methodsFor: 'error handling' stamp: 'DB 11/10/2020 20:00:40'!
cantTransferNegativeOrZeroAmountErrorDescription
	^'Cant transfer zero or negative amount'! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:00:40' prior: 50881028!
signalCantTransferNegativeOrZeroAmount
	^self error: self cantTransferNegativeOrZeroAmountErrorDescription ! !

!methodRemoval: Transfer class #CantTransferNegativeOrZeroAmountErrorDescription stamp: 'DB 11/10/2020 20:00:40'!
CantTransferNegativeOrZeroAmountErrorDescription
	^'Cant transfer zero or negative amount'!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:00:47'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 20:00:47'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:00:47'!
ERROR!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:00:47'!
ERROR!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:00:55'!
ERROR!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:01:01'!
ERROR!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:02:02' prior: 50880982!
test03TransferAmountCantBeZeroOrNegative

	| sender receiver |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	self should: [Transfer register: 0 from: sender to: receiver]
		raise: Error 
		description: Transfer cantTransferNegativeOrZeroAmountErrorDescription .! !
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/10/2020 20:02:45' prior: 50880956!
register: amount from: aSender to: aReceiver

	aSender = aReceiver ifTrue: [^self signalAndReceiverCantBeTheSameAccount ].
	
	amount < 0 ifTrue: [^self signalCantTransferNegativeOrZeroAmount ].
 
	Deposit register: amount on: aReceiver.
	Withdraw register: amount on: aSender.! !

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:02:46'!
FAILURE!

amount < 0!
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/10/2020 20:03:45' prior: 50881087!
register: amount from: aSender to: aReceiver

	aSender = aReceiver ifTrue: [^self signalAndReceiverCantBeTheSameAccount ].
	
	amount <= 0 ifTrue: [^self signalCantTransferNegativeOrZeroAmount ].
 
	Deposit register: amount on: aReceiver.
	Withdraw register: amount on: aSender.! !

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:03:48'!
PASSED!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:03:51'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 20:03:51'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:03:51'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:07:14'!
test04

	| sender receiver transfer |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	transfer := Transfer register: 200 from: sender to: receiver.
	
	self assert: (sender hasRegistered: transfer withdrawTransaction).
	self assert: (receiver hasRegistered: transfer depositTransaction).! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:10:46'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 20:10:46'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:10:46'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'DB 11/10/2020 20:10:46'!
ERROR!

!testRun: #TransferTest #test04 stamp: 'DB 11/10/2020 20:10:46'!
ERROR!
!Transfer class methodsFor: 'accessing' stamp: 'DB 11/10/2020 20:10:56'!
withdrawTransaction
	self shouldBeImplemented.! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:13:46'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 20:13:46'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:13:46'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'DB 11/10/2020 20:13:46'!
ERROR!

!testRun: #TransferTest #test04 stamp: 'DB 11/10/2020 20:13:46'!
ERROR!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 20:14:57'!
Transfer class
	instanceVariableNames: 'withdrawTransaction'!
!Transfer class methodsFor: 'accessing' stamp: 'DB 11/10/2020 20:14:55' prior: 50881155!
withdrawTransaction
	^withdrawTransaction! !

!testRun: #TransferTest #test04 stamp: 'DB 11/10/2020 20:14:59'!
FAILURE!

!testRun: #TransferTest #test04 stamp: 'DB 11/10/2020 20:15:18'!
FAILURE!

!testRun: #TransferTest #test04 stamp: 'DB 11/10/2020 20:15:18'!
FAILURE!
!Transfer methodsFor: 'nil' stamp: 'DB 11/10/2020 20:17:27'!
initializeFrom: aSenderAccoutn to: aReceiverAccount


	! !

Transfer class
	instanceVariableNames: 'depositTransaction withdrawTransaction'!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 20:17:40'!
Transfer class
	instanceVariableNames: 'depositTransaction withdrawTransaction'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:18:04' prior: 50881190!
initializeFrom: aSenderAccount to: aReceiverAccount

	



	! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 20:18:25'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 20:20:28'!
Object subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 20:20:32'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawTransaction depositTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 20:20:36'!
Object subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:20:19' prior: 50881203!
initializeFrom: aSenderAccount to: aReceiverAccount

	withdrawTransaction := TransferWithdraw register: self on: aSenderAccount .
	depositTransaction := TransferDeposit register: self on: aReceiverAccount.
	
	! !

AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 20:22:07'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 20:22:14'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 20:22:19'!
TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 20:23:36'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTransaction class methodsFor: 'nil' stamp: 'DB 11/10/2020 20:26:25' overrides: 50880732!
register: aTransfer on: account

	| transaction |
	
	transaction := self for: aTransfer.
	account register: transaction.
		
	^ transaction! !
!TransferDeposit class methodsFor: 'nil' stamp: 'DB 11/10/2020 20:26:53'!
for: aTransfer

	^ self new initializeFor: aTransfer ! !
!TransferWithdraw class methodsFor: 'nil' stamp: 'DB 11/10/2020 20:27:15'!
for: aTransfer

	^ self new initializeFor: aTransfer ! !

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 20:27:50'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferDeposit methodsFor: 'nil' stamp: 'DB 11/10/2020 20:27:48'!
initializeFor: aTransfer 
	transfer := aTransfer ! !

TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 20:28:02'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 20:28:07'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferWithdraw methodsFor: 'nil' stamp: 'DB 11/10/2020 20:28:21'!
initializeFor: aTransfer 
	transfer := aTransfer ! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:28:54' overrides: 50880718!
affectBalance: aBalance

	^aBalance - transfer value! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:29:14' overrides: 50880718!
affectBalance: aBalance
	^aBalance + transfer value! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 20:29:57'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawTransaction depositTransaction amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:30:03'!
initializeWith: anAmount From: aSenderAccount to: aReceiverAccount

	amount := anAmount.
	withdrawTransaction := TransferWithdraw register: self on: aSenderAccount .
	depositTransaction := TransferDeposit register: self on: aReceiverAccount.
	
	! !

!methodRemoval: Transfer #initializeFrom:to: stamp: 'DB 11/10/2020 20:30:11'!
initializeFrom: aSenderAccount to: aReceiverAccount

	withdrawTransaction := TransferWithdraw register: self on: aSenderAccount .
	depositTransaction := TransferDeposit register: self on: aReceiverAccount.
	
	!
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/10/2020 20:30:22' prior: 50881103!
register: amount from: aSender to: aReceiver

	

	aSender = aReceiver ifTrue: [^self signalAndReceiverCantBeTheSameAccount ].
	
	amount <= 0 ifTrue: [^self signalCantTransferNegativeOrZeroAmount ].
 
	Deposit register: amount on: aReceiver.
	Withdraw register: amount on: aSender.! !
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/10/2020 20:31:02' prior: 50881400!
register: amount from: aSender to: aReceiver

	aSender = aReceiver ifTrue: [^self signalAndReceiverCantBeTheSameAccount ].
	
	amount <= 0 ifTrue: [^self signalCantTransferNegativeOrZeroAmount ].
	! !
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/10/2020 20:31:21' prior: 50881412!
register: amount from: aSender to: aReceiver

	aSender = aReceiver ifTrue: [^self signalAndReceiverCantBeTheSameAccount ].
	
	amount <= 0 ifTrue: [^self signalCantTransferNegativeOrZeroAmount ].
	
! !
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/10/2020 20:32:36' prior: 50881422!
register: amount from: aSender to: aReceiver

	aSender = aReceiver ifTrue: [^self signalAndReceiverCantBeTheSameAccount ].
	
	amount <= 0 ifTrue: [^self signalCantTransferNegativeOrZeroAmount ].
	
	^self new initializeWith: amount From: aSender to: aReceiver.
	
! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:34:06'!
ERROR!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 20:34:06'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:34:06'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'DB 11/10/2020 20:34:06'!
ERROR!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:34:10'!
ERROR!
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:34:53' prior: 50881362 overrides: 50880718!
affectBalance: aBalance

	^aBalance - transfer amount! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:35:01' prior: 50881367 overrides: 50880718!
affectBalance: aBalance
	^aBalance + transfer amount! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:35:21'!
amount
	^amount
	
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:35:27'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 20:35:27'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:35:27'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'DB 11/10/2020 20:35:27'!
ERROR!

!testRun: #TransferTest #test04 stamp: 'DB 11/10/2020 20:35:27'!
ERROR!

!methodRemoval: Transfer class #withdrawTransaction stamp: 'DB 11/10/2020 20:35:45'!
withdrawTransaction
	^withdrawTransaction!
!Transfer methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:36:05'!
withdrawTransaction

	^withdrawTransaction 
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:36:16'!
depositTransaction

	^depositTransaction 
	
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:36:24'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 20:36:24'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:36:24'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'DB 11/10/2020 20:36:24'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:38:08'!
test04TransferTransactionesWereRegisteredInTheAccounts

	| sender receiver transfer |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	transfer := Transfer register: 200 from: sender to: receiver.
	
	self assert: (sender hasRegistered: transfer withdrawTransaction).
	self assert: (receiver hasRegistered: transfer depositTransaction).! !

!methodRemoval: TransferTest #test04 stamp: 'DB 11/10/2020 20:38:08'!
test04

	| sender receiver transfer |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	transfer := Transfer register: 200 from: sender to: receiver.
	
	self assert: (sender hasRegistered: transfer withdrawTransaction).
	self assert: (receiver hasRegistered: transfer depositTransaction).!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:44:12'!
test05

	| sender receiver transfer |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	transfer := Transfer register: 200 from: sender to: receiver.
	
	
	self assert: (sender hasRegistered: transfer withdrawTransaction).
	self assert: (receiver hasRegistered: transfer depositTransaction).! !

----SNAPSHOT----(10 November 2020 20:46:52) CuisUniversity-4384.image priorSource: 17547380!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:49:29' prior: 50881541!
test05

	| sender receiver transfer |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	transfer := Transfer register: 200 from: sender to: receiver.
	
	
	self assert: 1 equals: sender transactions.
	self assert: 1 equals: receiver transactions.
	
	self assert: transfer equals: (sender transactions at: 1) transfer.
	self assert: transfer equals: (receiver transactions at: 1) transfer.
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:49:35'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 20:49:35'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:49:35'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 20:49:35'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'DB 11/10/2020 20:49:35'!
FAILURE!

!testRun: #TransferTest #test05 stamp: 'DB 11/10/2020 20:49:35'!
FAILURE!

!testRun: #TransferTest #test05 stamp: 'DB 11/10/2020 20:49:53'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:50:02' prior: 50881557!
test05

	| sender receiver transfer |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	transfer := Transfer register: 200 from: sender to: receiver.
	
	self assert: 1 equals: sender transactions.
	self assert: 1 equals: receiver transactions.
	
	self assert: transfer equals: (sender transactions at: 1) transfer.
	self assert: transfer equals: (receiver transactions at: 1) transfer.
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:50:06'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 20:50:06'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:50:06'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 20:50:06'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'DB 11/10/2020 20:50:06'!
FAILURE!

!testRun: #TransferTest #test05 stamp: 'DB 11/10/2020 20:50:06'!
FAILURE!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:50:18'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 20:50:18'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:50:18'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 20:50:18'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'DB 11/10/2020 20:50:18'!
FAILURE!

!testRun: #TransferTest #test05 stamp: 'DB 11/10/2020 20:50:18'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:51:32' prior: 50881594!
test05

	| sender receiver transfer |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	transfer := Transfer register: 200 from: sender to: receiver.
	
	self assert: 1 equals: sender transactions size.
	self assert: 1 equals: receiver transactions size.
 	
	self assert: transfer equals: (sender transactions at: 1) transfer.
	self assert: transfer equals: (receiver transactions at: 1) transfer.
	
	! !

!testRun: #TransferTest #test05 stamp: 'DB 11/10/2020 20:51:34'!
ERROR!
!TransferTransaction methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:51:56'!
transfer
	self shouldBeImplemented.
	^transfer! !
!TransferTransaction methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:52:02' prior: 50881666!
transfer
	^transfer! !

!testRun: #TransferTest #test05 stamp: 'DB 11/10/2020 20:52:04'!
PASSED!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:52:08'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 20:52:08'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:52:08'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 20:52:08'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'DB 11/10/2020 20:52:08'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:53:00'!
test05SenderAndReceiverHaveTheSameTransfer

	| sender receiver transfer |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	transfer := Transfer register: 200 from: sender to: receiver.
	
	self assert: 1 equals: sender transactions size.
	self assert: 1 equals: receiver transactions size.
 	
	self assert: transfer equals: (sender transactions at: 1) transfer.
	self assert: transfer equals: (receiver transactions at: 1) transfer.
	
	! !

!methodRemoval: TransferTest #test05 stamp: 'DB 11/10/2020 20:53:00'!
test05

	| sender receiver transfer |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	transfer := Transfer register: 200 from: sender to: receiver.
	
	self assert: 1 equals: sender transactions size.
	self assert: 1 equals: receiver transactions size.
 	
	self assert: transfer equals: (sender transactions at: 1) transfer.
	self assert: transfer equals: (receiver transactions at: 1) transfer.
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:55:48'!
test06SummaryReportForEmptyAccountReturnsOnlyBalance

	| account report |
	
	account := ReceptiveAccount new.
	
	report := account summary.
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:55:58'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 20:55:58'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:55:58'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 20:55:58'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 20:55:58'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 20:55:58'!
ERROR!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 20:55:58'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:56:07'!
summary
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:56:49' prior: 50881761!
summary
	| summary |
	summary := OrderedCollection new.
	
	summary add: 'Balance = 0'.
	^summary.! !

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 20:56:53'!
PASSED!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:56:56'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 20:56:56'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:56:56'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 20:56:56'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 20:56:56'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 20:56:56'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:57:46'!
test07SummaryReportForDepositReturnsBalanceAndDeposit

	| account report |
	
	account := ReceptiveAccount new.
	
	report := account summary.
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:58:08' prior: 50881797!
test07SummaryReportForDepositReturnsBalanceAndDeposit

	| account report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	report := account summary.
 	
	self assert: 2 equals: report size.
	
	self assert: 'Balance = 0' equals: (report at: 1)
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:58:49' prior: 50881808!
test07SummaryReportForDepositReturnsBalanceAndDeposit

	| account report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	report := account summary.
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 0' equals: (report at: 2)
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:58:52'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 20:58:52'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:58:52'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 20:58:52'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 20:58:52'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 20:58:52'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 20:58:52'!
FAILURE!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 20:58:52'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:00:01' prior: 50881766!
summary
	| summary |
	summary := OrderedCollection new.
	
	summary add: 'Deposit for 100'.
	
	summary add: 'Balance = ' , self balance asString .
	^summary.! !

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:00:02'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:00:13' prior: 50881820!
test07SummaryReportForDepositReturnsBalanceAndDeposit

	| account report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	report := account summary.
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 21:00:18'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 21:00:18'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 21:00:18'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 21:00:18'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 21:00:18'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 21:00:18'!
FAILURE!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:00:18'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 21:00:18'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:01:12' prior: 50881862!
summary
	| summary |
	summary := OrderedCollection new.
	
	transactions ifNotEmpty: [summary add: 'Deposit for 100'.]
	
	
	summary add: 'Balance = ' , self balance asString .
	^summary.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:01:15' prior: 50881916!
summary
	| summary |
	summary := OrderedCollection new.
	
	transactions ifNotEmpty: [summary add: 'Deposit for 100'.].
	
	
	summary add: 'Balance = ' , self balance asString .
	^summary.! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 21:01:20'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 21:01:20'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 21:01:20'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 21:01:20'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 21:01:20'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 21:01:20'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:01:20'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:04:17'!
test08SummaryReportForWithdrawReturnsBalanceAndWithdraw

	| account report |
	
	account := ReceptiveAccount new.
	Withdraw register: 50 on: account.
	
	report := account summary.
 	
	self assert: 2 equals: report size.
	self assert: 'Extraction for 50' equals: (report at: 1).
	self assert: 'Balance = -50' equals: (report at: 2)
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 21:04:20'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 21:04:20'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 21:04:20'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 21:04:20'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 21:04:21'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 21:04:21'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:04:21'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/10/2020 21:04:21'!
FAILURE!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/10/2020 21:04:21'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:06:45' prior: 50881926!
summary
	| summary |
	summary := OrderedCollection new.
	
	transactions do: [ :aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: ['Deposit for ' , aTransaction value.].
		(aTransaction isKindOf: Withdraw ) ifTrue: ['Extraction for ', aTransaction value.]
		
	].
	summary add: 'Balance = ' , self balance asString .
	^summary.! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 21:06:53'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 21:06:53'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 21:06:53'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 21:06:53'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 21:06:53'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 21:06:53'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:06:53'!
ERROR!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/10/2020 21:06:53'!
ERROR!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:07:04'!
ERROR!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:08:20'!
ERROR!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:08:28'!
ERROR!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:08:32'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:09:06' prior: 50882007!
summary
	| summary |
	summary := OrderedCollection new.
	
	transactions do: [ :aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: ['Deposit for ' , aTransaction value asString.].
		(aTransaction isKindOf: Withdraw ) ifTrue: ['Extraction for ', aTransaction value asString.]
		
	].
	summary add: 'Balance = ' , self balance asString .
	^summary.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:09:14' prior: 50882065!
summary
	| summary |
	summary := OrderedCollection new.
	
	transactions do: [ :aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: ['Deposit for ' , aTransaction value asString].
		(aTransaction isKindOf: Withdraw ) ifTrue: ['Extraction for ', aTransaction value asString].
	].
	summary add: 'Balance = ' , self balance asString .
	^summary.! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 21:09:18'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 21:09:18'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 21:09:18'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 21:09:18'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 21:09:18'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 21:09:18'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:09:18'!
FAILURE!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/10/2020 21:09:18'!
FAILURE!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:09:21'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:10:10' prior: 50882080!
summary
	| summary |
	summary := OrderedCollection new.
	
	transactions do: [ :aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: [summary add: 'Deposit for ' , aTransaction value asString].
		(aTransaction isKindOf: Withdraw ) ifTrue: [summary add: 'Extraction for ', aTransaction value asString].
	].
	summary add: 'Balance = ' , self balance asString .
	^summary.! !

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:10:15'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/10/2020 21:10:20'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:11:13'!
test09SummaryReportForTransferReturnsBalanceAndTransferTransaction

	| account report |
	
	account := ReceptiveAccount new.
	Withdraw register: 50 on: account.
	
	report := account summary.
 	
	self assert: 2 equals: report size.
	self assert: 'Extraction for 50' equals: (report at: 1).
	self assert: 'Balance = -50' equals: (report at: 2)
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:12:39' prior: 50882149!
test09SummaryReportForTransferReturnsBalanceAndTransferTransaction

	| sender receiver report |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 60 from: sender to: receiver.
	
	report := sender summary.
 	
	self assert: 2 equals: report size.
	self assert: 'Extraction for 50' equals: (report at: 1).
	self assert: 'Balance = -50' equals: (report at: 2).
	
	report := receiver summary.
 	
	self assert: 2 equals: report size.
	self assert: 'Extraction for 50' equals: (report at: 1).
	self assert: 'Balance = -50' equals: (report at: 2)
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:14:08' prior: 50882163!
test09SummaryReportForTransferReturnsBalanceAndTransferTransaction

	| sender receiver report |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 60 from: sender to: receiver.
	
	report := sender summary.
 	
	self assert: 2 equals: report size.
	self assert: 'Output bytransfer of 60' equals: (report at: 1).
	self assert: 'Balance = -60' equals: (report at: 2).
	
	report := receiver summary.
 	
	self assert: 2 equals: report size.
	self assert: 'Entry by transfer of 30' equals: (report at: 1).
	self assert: 'Balance = 60' equals: (report at: 2)
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 21:14:14'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 21:14:14'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 21:14:14'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 21:14:14'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 21:14:14'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 21:14:14'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:14:14'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/10/2020 21:14:14'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/10/2020 21:14:14'!
FAILURE!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/10/2020 21:14:14'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:16:53' prior: 50882127!
summary
	| summary |
	summary := OrderedCollection new.
	
	transactions do: [ :aTransaction | | aMessage |
		(aTransaction isKindOf: Deposit) ifTrue: [aMessage := 'Deposit for '].
		(aTransaction isKindOf: Withdraw ) ifTrue: [aMessage := 'Extraction for '].	
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [aMessage := 'Output by transfer of '].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [aMessage := 'Entry by transfer of '].		
		
		summary add: aMessage, aTransaction value asString.
	].
	summary add: 'Balance = ' , self balance asString .
	^summary.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:16:57' prior: 50882244!
summary
	| summary |
	summary := OrderedCollection new.
	
	transactions do: [ :aTransaction | | aMessage |
		(aTransaction isKindOf: Deposit) ifTrue: [aMessage := 'Deposit for '].
		(aTransaction isKindOf: Withdraw ) ifTrue: [aMessage := 'Extraction for '].	
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [aMessage := 'Output by transfer of '].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [aMessage := 'Entry by transfer of '].		
		summary add: aMessage, aTransaction value asString.
	].
	summary add: 'Balance = ' , self balance asString .
	^summary.! !

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/10/2020 21:16:58'!
ERROR!
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:17:29' overrides: 50880714!
value
	^transfer amount! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:17:46' overrides: 50880714!
value
	^transfer amount! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 21:17:49'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 21:17:49'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 21:17:49'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 21:17:49'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 21:17:49'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 21:17:49'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:17:49'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/10/2020 21:17:49'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/10/2020 21:17:49'!
FAILURE!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/10/2020 21:17:49'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:18:02' prior: 50882185!
test09SummaryReportForTransferReturnsBalanceAndTransferTransaction

	| sender receiver report |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 60 from: sender to: receiver.
	
	report := sender summary.
 	
	self assert: 2 equals: report size.
	self assert: 'Output by transfer of 60' equals: (report at: 1).
	self assert: 'Balance = -60' equals: (report at: 2).
	
	report := receiver summary.
 	
	self assert: 2 equals: report size.
	self assert: 'Entry by transfer of 30' equals: (report at: 1).
	self assert: 'Balance = 60' equals: (report at: 2)
	
	! !

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/10/2020 21:18:04'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:18:17' prior: 50882338!
test09SummaryReportForTransferReturnsBalanceAndTransferTransaction

	| sender receiver report |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 60 from: sender to: receiver.
	
	report := sender summary.
 	
	self assert: 2 equals: report size.
	self assert: 'Output by transfer of 60' equals: (report at: 1).
	self assert: 'Balance = -60' equals: (report at: 2).
	
	report := receiver summary.
 	
	self assert: 2 equals: report size.
	self assert: 'Entry by transfer of 60' equals: (report at: 1).
	self assert: 'Balance = 60' equals: (report at: 2)
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 21:18:20'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 21:18:20'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 21:18:20'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 21:18:20'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 21:18:20'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 21:18:20'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:18:20'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/10/2020 21:18:20'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/10/2020 21:18:20'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:18:35' prior: 50882266!
summary
	| summary |
	summary := OrderedCollection new.
	
	transactions do: [ :aTransaction | | aMessage |
		(aTransaction isKindOf: Deposit) ifTrue: [aMessage := 'Deposit for '].
		(aTransaction isKindOf: Withdraw ) ifTrue: [aMessage := 'Extraction for '].	
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [aMessage := 'Output by transfer of '].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [aMessage := 'Entry by transfer of '].		
		summary add: aMessage, aTransaction value asString.
	].

	summary add: 'Balance = ' , self balance asString .
	^summary.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:20:12'!
transferNet

	| net |
	
	
	
	transactions do: [ :aTransaction | | aMessage |
	
	
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [aMessage := 'Output by transfer of '].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [aMessage := 'Entry by transfer of '].		
	
	].

	^net.! !

!methodRemoval: ReceptiveAccount #transferNet stamp: 'DB 11/10/2020 21:20:27'!
transferNet

	| net |
	
	
	
	transactions do: [ :aTransaction | | aMessage |
	
	
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [aMessage := 'Output by transfer of '].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [aMessage := 'Entry by transfer of '].		
	
	].

	^net.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:21:06'!
test09TransferNet

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 20 from: receiver to: sender.
	Transfer register: 30 from: sender to: receiver.

	report := receiver summary.	
	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Deposit for 100'.
	self assert: (report at: 2) equals: 'Extraction for of 50'.
	self assert: (report at: 3) equals: 'Output by transfer 20'.
	self assert: (report at: 4) equals: 'Entry by transfer of 30'.
	self assert: (report at: 5) equals: 'Balance = 60'.
	
	self assert: 10 equals: (receiver transferNet ).
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 21:21:10'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 21:21:10'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 21:21:10'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 21:21:10'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 21:21:10'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 21:21:10'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:21:10'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/10/2020 21:21:10'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/10/2020 21:21:10'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/10/2020 21:21:10'!
FAILURE!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/10/2020 21:21:10'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:21:29' prior: 50882463!
test09TransferNet

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 20 from: receiver to: sender.
	Transfer register: 30 from: sender to: receiver.

	report := receiver summary.	
	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Deposit for 100'.
	self assert: (report at: 2) equals: 'Extraction for 50'.
	self assert: (report at: 3) equals: 'Output by transfer of 20'.
	self assert: (report at: 4) equals: 'Entry by transfer of 30'.
	self assert: (report at: 5) equals: 'Balance = 60'.
	
	self assert: 10 equals: (receiver transferNet ).
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 21:21:33'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 21:21:33'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 21:21:33'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 21:21:33'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 21:21:33'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 21:21:33'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:21:33'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/10/2020 21:21:33'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/10/2020 21:21:33'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/10/2020 21:21:33'!
ERROR!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/10/2020 21:21:33'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:21:41'!
transferNet
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:25:48' prior: 50882590!
transferNet
	| net |
	net := 0.
	
	transactions do: [ :aTransaction | 
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [net := net + aTransaction value].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [net := net - aTransaction value].		
	].
	^net.! !

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/10/2020 21:25:52'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:27:16' prior: 50882527!
test09TransferNet

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 30 from: receiver to: sender.
	Transfer register: 20 from: sender to: receiver.

	report := receiver summary.	
	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Deposit for 100'.
	self assert: (report at: 2) equals: 'Extraction for 50'.
	self assert: (report at: 3) equals: 'Output by transfer of 20'.
	self assert: (report at: 4) equals: 'Entry by transfer of 30'.
	self assert: (report at: 5) equals: 'Balance = 60'.
	
	self assert: 10 equals: (receiver transferNet ).
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 21:27:20'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 21:27:20'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 21:27:20'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 21:27:20'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 21:27:20'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 21:27:20'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:27:20'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/10/2020 21:27:20'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/10/2020 21:27:20'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/10/2020 21:27:20'!
FAILURE!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/10/2020 21:27:20'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:27:34' prior: 50882609!
test09TransferNet

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 20 from: receiver to: sender.
	Transfer register: 30 from: sender to: receiver.

	report := receiver summary.	
	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Deposit for 100'.
	self assert: (report at: 2) equals: 'Extraction for 50'.
	self assert: (report at: 3) equals: 'Output by transfer of 20'.
	self assert: (report at: 4) equals: 'Entry by transfer of 30'.
	self assert: (report at: 5) equals: 'Balance = 60'.
	
	self assert: 10 equals: (sender transferNet ).
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 21:27:36'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 21:27:36'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 21:27:36'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 21:27:36'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 21:27:36'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 21:27:37'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:27:37'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/10/2020 21:27:37'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/10/2020 21:27:37'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/10/2020 21:27:37'!
PASSED!

----SNAPSHOT----(10 November 2020 21:27:41) CuisUniversity-4384.image priorSource: 17596892!

----QUIT----(10 November 2020 21:27:43) CuisUniversity-4384.image priorSource: 17634637!

----STARTUP---- (12 November 2020 17:39:19) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-Portfolio1/CuisUniversity-4384.image!


Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'DB 11/12/2020 21:14:33'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #SummaryReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #SummaryReport category: 'Portfolio-Solucion' stamp: 'DB 11/12/2020 21:14:47'!
Report subclass: #SummaryReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Report methodsFor: 'nil' stamp: 'DB 11/12/2020 21:16:21'!
xxxDeposit: aDeposit
	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:16:40'!
xxxTransferDeposit: aTransferDeposit
	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:17:33'!
xxxTransferWithdraw: aTransferWithdraw
	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:17:39'!
xxxWithdraw: aTransferWithdraw
	self subclassResponsibility ! !
!SummaryReport methodsFor: 'nil' stamp: 'DB 11/12/2020 21:18:02'!
summary

	^OrderedCollection new.! !

Object subclass: #Report
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'DB 11/12/2020 21:19:26'!
Object subclass: #Report
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #SummaryReport category: 'Portfolio-Solucion' stamp: 'DB 11/12/2020 21:22:39'!
Report subclass: #SummaryReport
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:22:37' prior: 50882785!
summary

	
	summary := OrderedCollection new.
	transactions do: [ :aTransaction | 
		aTransaction xxx: self.
	].
	^summary.! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:22:44' prior: 50882809!
summary

	summary := OrderedCollection new.
	transactions do: [ :aTransaction | 
		aTransaction xxx: self.
	].
	^summary.! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:23:35' overrides: 50882765!
xxxDeposit: aDeposit
	summary! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:25:23' prior: 50882825 overrides: 50882765!
xxxDeposit: aDeposit
	summary add: 'Deposit for ', aDeposit value asString .
	
	"(aTransaction isKindOf: Deposit) ifTrue: [aMessage := 'Deposit for '].
		(aTransaction isKindOf: Withdraw ) ifTrue: [aMessage := 'Extraction for '].	
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [aMessage := 'Output by transfer of '].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [aMessage := 'Entry by transfer of '].		
		summary add: aMessage, aTransaction value asString."! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:25:38' overrides: 50882780!
xxxWithdraw: aDeposit
	summary add: 'Extraction for ', aDeposit value asString .
	
	"(aTransaction isKindOf: Deposit) ifTrue: [aMessage := 'Deposit for '].
		(aTransaction isKindOf: Withdraw ) ifTrue: [aMessage := 'Extraction for '].	
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [aMessage := 'Output by transfer of '].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [aMessage := 'Entry by transfer of '].		
		summary add: aMessage, aTransaction value asString."! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:26:00' overrides: 50882775!
xxxTransferWithdraw: aDeposit
	summary add: 'Output by transfer of ', aDeposit value asString .
	
	"(aTransaction isKindOf: Deposit) ifTrue: [aMessage := 'Deposit for '].
		(aTransaction isKindOf: Withdraw ) ifTrue: [aMessage := 'Extraction for '].	
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [aMessage := 'Output by transfer of '].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [aMessage := 'Entry by transfer of '].		
		summary add: aMessage, aTransaction value asString."! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:26:15' overrides: 50882770!
xxxTransferDeposit: aDeposit
	summary add: 'Entry by transfer of ', aDeposit value asString .
	
	"(aTransaction isKindOf: Deposit) ifTrue: [aMessage := 'Deposit for '].
		(aTransaction isKindOf: Withdraw ) ifTrue: [aMessage := 'Extraction for '].	
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [aMessage := 'Output by transfer of '].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [aMessage := 'Entry by transfer of '].		
		summary add: aMessage, aTransaction value asString."! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:26:19' prior: 50882887 overrides: 50882770!
xxxTransferDeposit: aDeposit
	summary add: 'Entry by transfer of ', aDeposit value asString .! !
!AccountTransaction methodsFor: 'balance' stamp: 'DB 11/12/2020 21:26:42'!
xxx: aReport

	self subclassResponsibility ! !
!Deposit methodsFor: 'balance' stamp: 'DB 11/12/2020 21:27:42' overrides: 50882913!
xxx: aReport
	aReport xxxDeposit: self! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:28:14' overrides: 50882913!
xxx: aReport
	aReport xxxTransferDeposit: self! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:28:38' overrides: 50882913!
xxx: aReport
	aReport xxxTransferWithdraw: self! !
!Withdraw methodsFor: 'initialization' stamp: 'DB 11/12/2020 21:28:53' overrides: 50882913!
xxx: aReport
	aReport xxxWithdraw: self! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:29:19' prior: 50882817!
summary

	transactions do: [ :aTransaction | 
		aTransaction xxx: self.
	].
	^summary.! !
!SummaryReport methodsFor: 'nil' stamp: 'DB 11/12/2020 21:29:31' overrides: 16896425!
initialize

	summary := OrderedCollection new.! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:31:27'!
initializeWith: aTransactions

	summary := OrderedCollection new.
	! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:31:36' prior: 50882949!
initializeWith: aTransactions

	summary := OrderedCollection new.
	transactions := aTransactions 
	! !
!SummaryReport class methodsFor: 'nil' stamp: 'DB 11/12/2020 21:33:29'!
with: transactions

	| report |
	report := self new initializeWith: transactions
	^report.! !
!SummaryReport class methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:33:38' prior: 50882961!
with: transactions

	| report |
	report := self new initializeWith: transactions.
	^report.! !
!SummaryReport class methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:33:59' prior: 50882968!
with: transactions

	^self new initializeWith: transactions.! !

!methodRemoval: SummaryReport #initialize stamp: 'DB 11/12/2020 21:34:10'!
initialize

	summary := OrderedCollection new.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:35:10' prior: 50881726!
test06SummaryReportForEmptyAccountReturnsOnlyBalance

	| account report |
	
	account := ReceptiveAccount new.
	
	
	report := (SummaryReport with: account transactions) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:35:15' prior: 50882984!
test06SummaryReportForEmptyAccountReturnsOnlyBalance

	| account report |
	
	account := ReceptiveAccount new.
	
	report := (SummaryReport with: account transactions) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:35:38' prior: 50882938!
summary

	transactions do: [ :aTransaction | 
		aTransaction xxx: self.
	].
	^summary.! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:35:55' prior: 50883008!
summary

	transactions do: [ :aTransaction | 
		aTransaction xxx: self.
	].
	summary add: 'Balance = ' , self balance asString .
	^summary.! !

Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'DB 11/12/2020 21:36:26'!
Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:36:43' prior: 50882955!
initializeWith: anAccount

	summary := OrderedCollection new.
	account := anAccount 
	! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:37:00' prior: 50883014!
summary

	account transactions do: [ :aTransaction | 
		aTransaction xxx: self.
	].
	summary add: 'Balance = ' , account balance asString .
	^summary.! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/12/2020 21:37:12'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/12/2020 21:37:12'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/12/2020 21:37:12'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/12/2020 21:37:12'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/12/2020 21:37:12'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/12/2020 21:37:12'!
ERROR!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/12/2020 21:37:12'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/12/2020 21:37:12'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/12/2020 21:37:12'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/12/2020 21:37:12'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/12/2020 21:37:12'!
ERROR!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:37:23' prior: 50882996!
test06SummaryReportForEmptyAccountReturnsOnlyBalance

	| account report |
	
	account := ReceptiveAccount new.
	
	report := (SummaryReport with: account) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	! !

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/12/2020 21:37:25'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/12/2020 21:37:29'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:37:50' prior: 50881874!
test07SummaryReportForDepositReturnsBalanceAndDeposit

	| account report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	report := (SummaryReport with: account) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:37:54' prior: 50881960!
test08SummaryReportForWithdrawReturnsBalanceAndWithdraw

	| account report |
	
	account := ReceptiveAccount new.
	Withdraw register: 50 on: account.
	
	report := (SummaryReport with: account) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Extraction for 50' equals: (report at: 1).
	self assert: 'Balance = -50' equals: (report at: 2)
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:38:16' prior: 50882364!
test09SummaryReportForTransferReturnsBalanceAndTransferTransaction

	| sender receiver report |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 60 from: sender to: receiver.
	
	report := (SummaryReport with: sender) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Output by transfer of 60' equals: (report at: 1).
	self assert: 'Balance = -60' equals: (report at: 2).
	
	report := (SummaryReport with: receiver) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Entry by transfer of 60' equals: (report at: 1).
	self assert: 'Balance = 60' equals: (report at: 2)
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/12/2020 21:38:20'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/12/2020 21:38:20'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/12/2020 21:38:20'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/12/2020 21:38:20'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/12/2020 21:38:20'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/12/2020 21:38:20'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/12/2020 21:38:20'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/12/2020 21:38:20'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/12/2020 21:38:20'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/12/2020 21:38:20'!
PASSED!

!methodRemoval: ReceptiveAccount #summary stamp: 'DB 11/12/2020 21:39:20'!
summary
	| summary |
	summary := OrderedCollection new.
	
	transactions do: [ :aTransaction | | aMessage |
		(aTransaction isKindOf: Deposit) ifTrue: [aMessage := 'Deposit for '].
		(aTransaction isKindOf: Withdraw ) ifTrue: [aMessage := 'Extraction for '].	
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [aMessage := 'Output by transfer of '].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [aMessage := 'Entry by transfer of '].		
		summary add: aMessage, aTransaction value asString.
	].

	summary add: 'Balance = ' , self balance asString .
	^summary.!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/12/2020 21:39:27'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/12/2020 21:39:27'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/12/2020 21:39:27'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/12/2020 21:39:27'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/12/2020 21:39:27'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/12/2020 21:39:27'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/12/2020 21:39:27'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/12/2020 21:39:27'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/12/2020 21:39:27'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/12/2020 21:39:27'!
ERROR!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/12/2020 21:39:27'!
ERROR!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:40:04' prior: 50882673!
test09TransferNet

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 20 from: receiver to: sender.
	Transfer register: 30 from: sender to: receiver.
	
	report := (SummaryReport with: receiver) summary. 

	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Deposit for 100'.
	self assert: (report at: 2) equals: 'Extraction for 50'.
	self assert: (report at: 3) equals: 'Output by transfer of 20'.
	self assert: (report at: 4) equals: 'Entry by transfer of 30'.
	self assert: (report at: 5) equals: 'Balance = 60'.
	
	self assert: 10 equals: (sender transferNet ).
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/12/2020 21:40:09'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/12/2020 21:40:09'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/12/2020 21:40:09'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/12/2020 21:40:09'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/12/2020 21:40:09'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/12/2020 21:40:09'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/12/2020 21:40:09'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/12/2020 21:40:09'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/12/2020 21:40:09'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/12/2020 21:40:09'!
PASSED!

Report subclass: #TransferNet
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'DB 11/12/2020 21:40:55'!
Report subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'nil' stamp: 'DB 11/12/2020 21:42:07'!
transferNet
	
	! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:42:32' prior: 50883330!
transferNet
	
	account do: [
		
	]! !

Report subclass: #TransferNet
	instanceVariableNames: 'net'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'DB 11/12/2020 21:42:45'!
Report subclass: #TransferNet
	instanceVariableNames: 'net'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:43:02' prior: 50883334!
transferNet
	
	account transactions do: [ :aTransaction | 
		aTransaction xxx: self.
	].
	
	^net.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:43:08' prior: 50883350!
transferNet
	
	account transactions do: [ :aTransaction | 
		aTransaction xxx: self.
	].
	^net.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:43:29' overrides: 50882765!
xxxDeposit: aDeposit
	! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:43:57' overrides: 50882770!
xxxTransferDeposit: aDeposit
	net := net + aDeposit value.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:44:44' overrides: 50882775!
xxxTransferWithdraw: aTransferWithdraw
	net := net - aTransferWithdraw value.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:44:54' overrides: 50882780!
xxxWithdraw: aDeposit
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:45:10' prior: 50883253!
test09TransferNet

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 20 from: receiver to: sender.
	Transfer register: 30 from: sender to: receiver.
	
	report := (SummaryReport with: receiver) summary. 

	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Deposit for 100'.
	self assert: (report at: 2) equals: 'Extraction for 50'.
	self assert: (report at: 3) equals: 'Output by transfer of 20'.
	self assert: (report at: 4) equals: 'Entry by transfer of 30'.
	self assert: (report at: 5) equals: 'Balance = 60'.
	
	self assert: 10 equals: (Transfer sender transferNet ).
	
	! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:45:31'!
initializeWith: anAccount

	net := 0.
	account := anAccount 
	! !
!TransferNet class methodsFor: 'nil' stamp: 'DB 11/12/2020 21:46:11'!
with: anAccount

	^self new initializeWith: anAccount.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:50:42' prior: 50883384!
test09TransferNet

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 20 from: receiver to: sender.
	Transfer register: 30 from: sender to: receiver.
	
	report := (SummaryReport with: receiver) summary. 

	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Deposit for 100'.
	self assert: (report at: 2) equals: 'Extraction for 50'.
	self assert: (report at: 3) equals: 'Output by transfer of 20'.
	self assert: (report at: 4) equals: 'Entry by transfer of 30'.
	self assert: (report at: 5) equals: 'Balance = 60'.
	
	self assert: 10 equals: (TransferNet with: sender transferNet ).
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/12/2020 21:50:45'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/12/2020 21:50:45'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/12/2020 21:50:45'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/12/2020 21:50:45'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/12/2020 21:50:45'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/12/2020 21:50:45'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/12/2020 21:50:45'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/12/2020 21:50:45'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/12/2020 21:50:45'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/12/2020 21:50:45'!
FAILURE!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/12/2020 21:50:45'!
FAILURE!

!methodRemoval: ReceptiveAccount #transferNet stamp: 'DB 11/12/2020 21:51:39'!
transferNet
	| net |
	net := 0.
	
	transactions do: [ :aTransaction | 
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [net := net + aTransaction value].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [net := net - aTransaction value].		
	].
	^net.!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/12/2020 21:51:47'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/12/2020 21:51:47'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/12/2020 21:51:47'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/12/2020 21:51:47'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/12/2020 21:51:47'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/12/2020 21:51:47'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/12/2020 21:51:47'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/12/2020 21:51:47'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/12/2020 21:51:47'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/12/2020 21:51:47'!
ERROR!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/12/2020 21:51:47'!
ERROR!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/12/2020 21:52:54'!
ERROR!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:53:10' prior: 50883420!
test09TransferNet

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 20 from: receiver to: sender.
	Transfer register: 30 from: sender to: receiver.
	
	report := (SummaryReport with: receiver) summary. 

	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Deposit for 100'.
	self assert: (report at: 2) equals: 'Extraction for 50'.
	self assert: (report at: 3) equals: 'Output by transfer of 20'.
	self assert: (report at: 4) equals: 'Entry by transfer of 30'.
	self assert: (report at: 5) equals: 'Balance = 60'.
	
	self assert: 10 equals: ((TransferNet with: sender) transferNet ).
	
	! !

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/12/2020 21:53:13'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:53:37' prior: 50883536!
test09TransferNet

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 20 from: receiver to: sender.
	Transfer register: 30 from: sender to: receiver.
	
	report := (SummaryReport with: receiver) summary. 

	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Deposit for 100'.
	self assert: (report at: 2) equals: 'Extraction for 50'.
	self assert: (report at: 3) equals: 'Output by transfer of 20'.
	self assert: (report at: 4) equals: 'Entry by transfer of 30'.
	self assert: (report at: 5) equals: 'Balance = 60'.
	
	self assert: 10 equals: ((TransferNet with: receiver) transferNet ).
	
	! !

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/12/2020 21:53:39'!
PASSED!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/12/2020 21:53:42'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/12/2020 21:53:42'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/12/2020 21:53:42'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/12/2020 21:53:42'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/12/2020 21:53:42'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/12/2020 21:53:42'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/12/2020 21:53:42'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/12/2020 21:53:42'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/12/2020 21:53:42'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/12/2020 21:53:42'!
PASSED!

!classRenamed: #TransferNet as: #TransferNetReport stamp: 'DB 11/12/2020 21:56:24'!
Smalltalk renameClassNamed: #TransferNet as: #TransferNetReport!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:56:25' prior: 50883566!
test09TransferNet

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 20 from: receiver to: sender.
	Transfer register: 30 from: sender to: receiver.
	
	report := (SummaryReport with: receiver) summary. 

	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Deposit for 100'.
	self assert: (report at: 2) equals: 'Extraction for 50'.
	self assert: (report at: 3) equals: 'Output by transfer of 20'.
	self assert: (report at: 4) equals: 'Entry by transfer of 30'.
	self assert: (report at: 5) equals: 'Balance = 60'.
	
	self assert: 10 equals: ((TransferNetReport with: receiver) transferNet ).
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/12/2020 21:56:41'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/12/2020 21:56:41'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/12/2020 21:56:41'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/12/2020 21:56:41'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/12/2020 21:56:41'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/12/2020 21:56:41'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/12/2020 21:56:41'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/12/2020 21:56:41'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/12/2020 21:56:41'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/12/2020 21:56:41'!
PASSED!

----End fileIn of /Users/dbenitez/uba/2c2020-IS1/2020-2c/14-Numeros/Solucion/Numero-Solution-3.st----!

----QUIT----(13 November 2020 10:04:31) CuisUniversity-4384.image priorSource: 17634731!

----STARTUP---- (14 November 2020 15:32:16) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-Portfolio1/CuisUniversity-4384.image!

!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:38:25' prior: 50882830 overrides: 50882765!
xxxDeposit: aDeposit
	summary add: 'Deposit for ', aDeposit value asString.! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:39:00' prior: 50883040!
summary

	account xxx: self.
	summary add: 'Balance = ' , account balance asString .
	^summary.! !
!Account methodsFor: 'transactions' stamp: 'DB 11/14/2020 15:39:36'!
xxx: aReport

	self transactions do: [ :aTransaction | 
		aTransaction xxx: self.
	].! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/14/2020 15:39:49'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/14/2020 15:39:49'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/14/2020 15:39:49'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/14/2020 15:39:49'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/14/2020 15:39:49'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/14/2020 15:39:49'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 15:39:49'!
ERROR!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/14/2020 15:39:49'!
ERROR!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/14/2020 15:39:49'!
ERROR!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/14/2020 15:39:49'!
ERROR!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 15:39:53'!
ERROR!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 15:40:13'!
ERROR!
!Account methodsFor: 'transactions' stamp: 'DB 11/14/2020 15:41:16' prior: 50884630!
xxx: aReport

	self transactions do: [ :aTransaction | 
		aTransaction xxx: aReport.
	].! !

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 15:41:22'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/14/2020 15:41:24'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/14/2020 15:41:25'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/14/2020 15:41:25'!
PASSED!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/14/2020 15:41:30'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/14/2020 15:41:30'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/14/2020 15:41:30'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/14/2020 15:41:30'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/14/2020 15:41:30'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/14/2020 15:41:30'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 15:41:30'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/14/2020 15:41:30'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/14/2020 15:41:30'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/14/2020 15:41:30'!
PASSED!
!TransferNetReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:41:57' prior: 50883357!
transferNet

	account xxx: self.
	^net.! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/14/2020 15:42:00'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/14/2020 15:42:00'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/14/2020 15:42:00'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/14/2020 15:42:00'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/14/2020 15:42:00'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/14/2020 15:42:00'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 15:42:00'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/14/2020 15:42:00'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/14/2020 15:42:00'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/14/2020 15:42:00'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:43:20'!
test10Summary

	| portfolio report |
	
	portfolio := Portfolio new.
	

	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:43:52' prior: 50884775!
test10Summary

	| portfolio report |
	
	portfolio := Portfolio new.

	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/14/2020 15:43:55'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/14/2020 15:43:55'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/14/2020 15:43:55'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/14/2020 15:43:55'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/14/2020 15:43:55'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/14/2020 15:43:55'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 15:43:55'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/14/2020 15:43:55'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/14/2020 15:43:55'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/14/2020 15:43:55'!
PASSED!

!testRun: #TransferTest #test10Summary stamp: 'DB 11/14/2020 15:43:55'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:44:00' prior: 50884786!
test10Summary

	| portfolio report |
	
	portfolio := Portfolio new.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:44:57'!
test11Summary

	| account portfolio report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:45:51' prior: 50884844!
test11Summary

	| account portfolio report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 2 equals: report size.
	self assert: '' equals: (report at: 1). 
	self assert: 'Balance = 0' equals: (report at: 2)
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:46:17' prior: 50884857!
test11Summary

	| account portfolio report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 0' equals: (report at: 2)
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/14/2020 15:46:19'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/14/2020 15:46:19'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/14/2020 15:46:19'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/14/2020 15:46:19'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/14/2020 15:46:19'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/14/2020 15:46:19'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 15:46:19'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/14/2020 15:46:19'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/14/2020 15:46:19'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/14/2020 15:46:19'!
PASSED!

!testRun: #TransferTest #test10Summary stamp: 'DB 11/14/2020 15:46:19'!
PASSED!

!testRun: #TransferTest #test11Summary stamp: 'DB 11/14/2020 15:46:19'!
FAILURE!

!testRun: #TransferTest #test11Summary stamp: 'DB 11/14/2020 15:46:19'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:46:25' prior: 50884871!
test11Summary

	| account portfolio report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/14/2020 15:46:28'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/14/2020 15:46:28'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/14/2020 15:46:28'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/14/2020 15:46:28'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/14/2020 15:46:28'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/14/2020 15:46:28'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 15:46:29'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/14/2020 15:46:29'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/14/2020 15:46:29'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/14/2020 15:46:29'!
PASSED!

!testRun: #TransferTest #test10Summary stamp: 'DB 11/14/2020 15:46:29'!
PASSED!

!testRun: #TransferTest #test11Summary stamp: 'DB 11/14/2020 15:46:29'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:47:38'!
test12Summary

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio report |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:48:44' prior: 50884984!
test12Summary

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio report |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	report := (SummaryReport with: composedPortofolio) summary. 
 	
	self assert: 3 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 50' equals: (report at: 3)
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:49:03' prior: 50885007!
test12Summary

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio report |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	report := (SummaryReport with: composedPortofolio) summary. 
 	
	self assert: 3 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Extraction for 50' equals: (report at: 2).
	self assert: 'Balance = 50' equals: (report at: 3)
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/14/2020 15:49:06'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/14/2020 15:49:06'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/14/2020 15:49:06'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/14/2020 15:49:06'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/14/2020 15:49:06'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/14/2020 15:49:06'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 15:49:06'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/14/2020 15:49:06'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/14/2020 15:49:06'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/14/2020 15:49:06'!
PASSED!

!testRun: #TransferTest #test10Summary stamp: 'DB 11/14/2020 15:49:06'!
PASSED!

!testRun: #TransferTest #test11Summary stamp: 'DB 11/14/2020 15:49:06'!
PASSED!

!testRun: #TransferTest #test12Summary stamp: 'DB 11/14/2020 15:49:06'!
PASSED!
!Deposit methodsFor: 'balance' stamp: 'DB 11/14/2020 15:53:18'!
doit: aReport
	aReport xxxDeposit: self! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:53:18'!
doit: aReport
	aReport xxxTransferDeposit: self! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:53:18'!
doit: aReport
	aReport xxxTransferWithdraw: self! !
!AccountTransaction methodsFor: 'balance' stamp: 'DB 11/14/2020 15:53:18'!
doit: aReport

	self subclassResponsibility ! !
!Withdraw methodsFor: 'initialization' stamp: 'DB 11/14/2020 15:53:18' overrides: 50885114!
doit: aReport
	aReport xxxWithdraw: self! !

!methodRemoval: Deposit #xxx: stamp: 'DB 11/14/2020 15:53:18'!
xxx: aReport
	aReport xxxDeposit: self!

!methodRemoval: TransferDeposit #xxx: stamp: 'DB 11/14/2020 15:53:18'!
xxx: aReport
	aReport xxxTransferDeposit: self!

!methodRemoval: TransferWithdraw #xxx: stamp: 'DB 11/14/2020 15:53:18'!
xxx: aReport
	aReport xxxTransferWithdraw: self!

!methodRemoval: AccountTransaction #xxx: stamp: 'DB 11/14/2020 15:53:18'!
xxx: aReport

	self subclassResponsibility !

!methodRemoval: Withdraw #xxx: stamp: 'DB 11/14/2020 15:53:18'!
xxx: aReport
	aReport xxxWithdraw: self!
!Account methodsFor: 'transactions' stamp: 'DB 11/14/2020 15:53:45'!
doit: aReport

	self transactions do: [ :aTransaction | 
		aTransaction xxx: aReport.
	].! !
!TransferNetReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:53:45' prior: 50884735!
transferNet

	account doit: self.
	^net.! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:53:45' prior: 50884624!
summary

	account doit: self.
	summary add: 'Balance = ' , account balance asString .
	^summary.! !
!Account methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:53:45' prior: 50885141!
doit: aReport

	self transactions do: [ :aTransaction | 
		aTransaction xxx: aReport.
	].! !

!methodRemoval: Account #xxx: stamp: 'DB 11/14/2020 15:53:45'!
xxx: aReport

	self transactions do: [ :aTransaction | 
		aTransaction xxx: aReport.
	].!
!Account methodsFor: 'transactions' stamp: 'DB 11/14/2020 15:56:04'!
reportTo: aReport

	self transactions do: [ :aTransaction | 
		aTransaction xxx: aReport.
	].! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:56:04' prior: 50885153!
summary

	account reportTo: self.
	summary add: 'Balance = ' , account balance asString .
	^summary.! !
!TransferNetReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:56:04' prior: 50885148!
transferNet

	account reportTo: self.
	^net.! !

!methodRemoval: Account #doit: stamp: 'DB 11/14/2020 15:56:04'!
doit: aReport

	self transactions do: [ :aTransaction | 
		aTransaction xxx: aReport.
	].!
!Deposit methodsFor: 'balance' stamp: 'DB 11/14/2020 15:56:28'!
reportTo: aReport
	aReport xxxDeposit: self! !
!Withdraw methodsFor: 'initialization' stamp: 'DB 11/14/2020 15:56:28'!
reportTo: aReport
	aReport xxxWithdraw: self! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:56:28'!
reportTo: aReport
	aReport xxxTransferDeposit: self! !
!AccountTransaction methodsFor: 'balance' stamp: 'DB 11/14/2020 15:56:28'!
reportTo: aReport

	self subclassResponsibility ! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:56:28' overrides: 50885206!
reportTo: aReport
	aReport xxxTransferWithdraw: self! !

!methodRemoval: Deposit #doit: stamp: 'DB 11/14/2020 15:56:28'!
doit: aReport
	aReport xxxDeposit: self!

!methodRemoval: Withdraw #doit: stamp: 'DB 11/14/2020 15:56:28'!
doit: aReport
	aReport xxxWithdraw: self!

!methodRemoval: TransferDeposit #doit: stamp: 'DB 11/14/2020 15:56:28'!
doit: aReport
	aReport xxxTransferDeposit: self!

!methodRemoval: AccountTransaction #doit: stamp: 'DB 11/14/2020 15:56:28'!
doit: aReport

	self subclassResponsibility !

!methodRemoval: TransferWithdraw #doit: stamp: 'DB 11/14/2020 15:56:28'!
doit: aReport
	aReport xxxTransferWithdraw: self!
!Report methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:57:10'!
reportADeposit: aDeposit
	self subclassResponsibility ! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:57:10' overrides: 50885234!
reportADeposit: aDeposit
	summary add: 'Deposit for ', aDeposit value asString.! !
!TransferNetReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:57:10' overrides: 50885234!
reportADeposit: aDeposit
	! !

!methodRemoval: Report #xxxDeposit: stamp: 'DB 11/14/2020 15:57:10'!
xxxDeposit: aDeposit
	self subclassResponsibility !

!methodRemoval: SummaryReport #xxxDeposit: stamp: 'DB 11/14/2020 15:57:10'!
xxxDeposit: aDeposit
	summary add: 'Deposit for ', aDeposit value asString.!

!methodRemoval: TransferNetReport #xxxDeposit: stamp: 'DB 11/14/2020 15:57:10'!
xxxDeposit: aDeposit
	!
!Report methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:57:32'!
reportATransferDeposit: aTransferDeposit
	self subclassResponsibility ! !
!TransferNetReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:57:32' overrides: 50885261!
reportATransferDeposit: aDeposit
	net := net + aDeposit value.! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:57:32' overrides: 50885261!
reportATransferDeposit: aDeposit
	summary add: 'Entry by transfer of ', aDeposit value asString .! !

!methodRemoval: Report #xxxTransferDeposit: stamp: 'DB 11/14/2020 15:57:32'!
xxxTransferDeposit: aTransferDeposit
	self subclassResponsibility !

!methodRemoval: TransferNetReport #xxxTransferDeposit: stamp: 'DB 11/14/2020 15:57:32'!
xxxTransferDeposit: aDeposit
	net := net + aDeposit value.!

!methodRemoval: SummaryReport #xxxTransferDeposit: stamp: 'DB 11/14/2020 15:57:32'!
xxxTransferDeposit: aDeposit
	summary add: 'Entry by transfer of ', aDeposit value asString .!
!Report methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:57:52'!
reportATransferWithdraw: aTransferWithdraw
	self subclassResponsibility ! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:57:52' overrides: 50885294!
reportATransferWithdraw: aDeposit
	summary add: 'Output by transfer of ', aDeposit value asString .
	
	"(aTransaction isKindOf: Deposit) ifTrue: [aMessage := 'Deposit for '].
		(aTransaction isKindOf: Withdraw ) ifTrue: [aMessage := 'Extraction for '].	
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [aMessage := 'Output by transfer of '].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [aMessage := 'Entry by transfer of '].		
		summary add: aMessage, aTransaction value asString."! !
!TransferNetReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:57:52' overrides: 50885294!
reportATransferWithdraw: aTransferWithdraw
	net := net - aTransferWithdraw value.! !

!methodRemoval: Report #xxxTransferWithdraw: stamp: 'DB 11/14/2020 15:57:52'!
xxxTransferWithdraw: aTransferWithdraw
	self subclassResponsibility !

!methodRemoval: SummaryReport #xxxTransferWithdraw: stamp: 'DB 11/14/2020 15:57:52'!
xxxTransferWithdraw: aDeposit
	summary add: 'Output by transfer of ', aDeposit value asString .
	
	"(aTransaction isKindOf: Deposit) ifTrue: [aMessage := 'Deposit for '].
		(aTransaction isKindOf: Withdraw ) ifTrue: [aMessage := 'Extraction for '].	
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [aMessage := 'Output by transfer of '].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [aMessage := 'Entry by transfer of '].		
		summary add: aMessage, aTransaction value asString."!

!methodRemoval: TransferNetReport #xxxTransferWithdraw: stamp: 'DB 11/14/2020 15:57:52'!
xxxTransferWithdraw: aTransferWithdraw
	net := net - aTransferWithdraw value.!
!TransferNetReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:58:09'!
reportAWithdraw: aDeposit
	! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:58:09'!
reportAWithdraw: aDeposit
	summary add: 'Extraction for ', aDeposit value asString .
	
	"(aTransaction isKindOf: Deposit) ifTrue: [aMessage := 'Deposit for '].
		(aTransaction isKindOf: Withdraw ) ifTrue: [aMessage := 'Extraction for '].	
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [aMessage := 'Output by transfer of '].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [aMessage := 'Entry by transfer of '].		
		summary add: aMessage, aTransaction value asString."! !
!Report methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:58:09'!
reportAWithdraw: aTransferWithdraw
	self subclassResponsibility ! !

!methodRemoval: TransferNetReport #xxxWithdraw: stamp: 'DB 11/14/2020 15:58:09'!
xxxWithdraw: aDeposit
	!

!methodRemoval: SummaryReport #xxxWithdraw: stamp: 'DB 11/14/2020 15:58:09'!
xxxWithdraw: aDeposit
	summary add: 'Extraction for ', aDeposit value asString .
	
	"(aTransaction isKindOf: Deposit) ifTrue: [aMessage := 'Deposit for '].
		(aTransaction isKindOf: Withdraw ) ifTrue: [aMessage := 'Extraction for '].	
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [aMessage := 'Output by transfer of '].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [aMessage := 'Entry by transfer of '].		
		summary add: aMessage, aTransaction value asString."!

!methodRemoval: Report #xxxWithdraw: stamp: 'DB 11/14/2020 15:58:09'!
xxxWithdraw: aTransferWithdraw
	self subclassResponsibility !
!Deposit methodsFor: 'balance' stamp: 'DB 11/14/2020 15:58:35' prior: 50885192 overrides: 50885206!
reportTo: aReport
	aReport reportADeposit: self! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:58:44' prior: 50885201 overrides: 50885206!
reportTo: aReport
	aReport reportATransferDeposit: self! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:58:52' prior: 50885211 overrides: 50885206!
reportTo: aReport
	aReport reportATransferWithdraw: self! !
!Withdraw methodsFor: 'initialization' stamp: 'DB 11/14/2020 15:59:02' prior: 50885196 overrides: 50885206!
reportTo: aReport
	aReport reportAWithdraw: self! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/14/2020 15:59:07'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/14/2020 15:59:07'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/14/2020 15:59:07'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/14/2020 15:59:07'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/14/2020 15:59:07'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/14/2020 15:59:07'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 15:59:07'!
ERROR!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/14/2020 15:59:07'!
ERROR!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/14/2020 15:59:07'!
ERROR!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/14/2020 15:59:07'!
ERROR!

!testRun: #TransferTest #test10Summary stamp: 'DB 11/14/2020 15:59:07'!
PASSED!

!testRun: #TransferTest #test11Summary stamp: 'DB 11/14/2020 15:59:07'!
ERROR!

!testRun: #TransferTest #test12Summary stamp: 'DB 11/14/2020 15:59:07'!
ERROR!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 15:59:10'!
ERROR!
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:59:51' prior: 50885357 overrides: 50885375!
reportAWithdraw: aDeposit
	summary add: 'Extraction for ', aDeposit value asString .! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:59:56' prior: 50885300 overrides: 50885294!
reportATransferWithdraw: aDeposit
	summary add: 'Output by transfer of ', aDeposit value asString .! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/14/2020 16:00:03'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/14/2020 16:00:03'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/14/2020 16:00:03'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/14/2020 16:00:03'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/14/2020 16:00:03'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/14/2020 16:00:03'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 16:00:03'!
ERROR!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/14/2020 16:00:03'!
ERROR!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/14/2020 16:00:03'!
ERROR!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/14/2020 16:00:03'!
ERROR!

!testRun: #TransferTest #test10Summary stamp: 'DB 11/14/2020 16:00:03'!
PASSED!

!testRun: #TransferTest #test11Summary stamp: 'DB 11/14/2020 16:00:03'!
ERROR!

!testRun: #TransferTest #test12Summary stamp: 'DB 11/14/2020 16:00:03'!
ERROR!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 16:00:05'!
ERROR!
!Account methodsFor: 'transactions' stamp: 'DB 11/14/2020 16:00:30' prior: 50885169!
reportTo: aReport

	self transactions do: [ :aTransaction | 
		aTransaction reportTo: aReport.
	].! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/14/2020 16:00:34'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/14/2020 16:00:34'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/14/2020 16:00:34'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/14/2020 16:00:34'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/14/2020 16:00:34'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/14/2020 16:00:34'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 16:00:34'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/14/2020 16:00:34'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/14/2020 16:00:34'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/14/2020 16:00:34'!
PASSED!

!testRun: #TransferTest #test10Summary stamp: 'DB 11/14/2020 16:00:34'!
PASSED!

!testRun: #TransferTest #test11Summary stamp: 'DB 11/14/2020 16:00:34'!
PASSED!

!testRun: #TransferTest #test12Summary stamp: 'DB 11/14/2020 16:00:34'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:01:52'!
test10SummaryReportPortfolioWithoutAccounts

	| portfolio report |
	
	portfolio := Portfolio new.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	! !

!methodRemoval: TransferTest #test10Summary stamp: 'DB 11/14/2020 16:01:52'!
test10Summary

	| portfolio report |
	
	portfolio := Portfolio new.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:02:11'!
test10SummaryPortfolioWithoutAccounts

	| portfolio report |
	
	portfolio := Portfolio new.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	! !

!methodRemoval: TransferTest #test10SummaryReportPortfolioWithoutAccounts stamp: 'DB 11/14/2020 16:02:11'!
test10SummaryReportPortfolioWithoutAccounts

	| portfolio report |
	
	portfolio := Portfolio new.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:03:22'!
test10SummaryOfPortfolioWithoutAccountsHasOnlyBalance

	| portfolio report |
	
	portfolio := Portfolio new.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	! !

!methodRemoval: TransferTest #test10SummaryPortfolioWithoutAccounts stamp: 'DB 11/14/2020 16:03:22'!
test10SummaryPortfolioWithoutAccounts

	| portfolio report |
	
	portfolio := Portfolio new.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:06:56'!
test11SummaryOfPortfolioWithOneAccount

	| account portfolio report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	
	! !

!methodRemoval: TransferTest #test11Summary stamp: 'DB 11/14/2020 16:06:56'!
test11Summary

	| account portfolio report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:07:54'!
test12SummaryOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio report |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	report := (SummaryReport with: composedPortofolio) summary. 
 	
	self assert: 3 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Extraction for 50' equals: (report at: 2).
	self assert: 'Balance = 50' equals: (report at: 3)
	
	! !

!methodRemoval: TransferTest #test12Summary stamp: 'DB 11/14/2020 16:07:54'!
test12Summary

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio report |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	report := (SummaryReport with: composedPortofolio) summary. 
 	
	self assert: 3 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Extraction for 50' equals: (report at: 2).
	self assert: 'Balance = 50' equals: (report at: 3)
	
	!

TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportTest category: 'Portfolio-Solucion' stamp: 'DB 11/14/2020 16:20:06'!
TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportTest methodsFor: 'nil' stamp: 'DB 11/14/2020 16:20:40'!
test06SummaryReportForEmptyAccountReturnsOnlyBalance

	| account report |
	
	account := ReceptiveAccount new.
	
	report := (SummaryReport with: account) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:20:53' prior: 50885742!
test06SummaryReportForEmptyAccountReturnsOnlyBalance

	| account report |
	
	account := ReceptiveAccount new.
	
	report := (SummaryReport with: account) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:21:06'!
test07SummaryReportForDepositReturnsBalanceAndDeposit

	| account report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	report := (SummaryReport with: account) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:21:20'!
test08SummaryReportForWithdrawReturnsBalanceAndWithdraw

	| account report |
	
	account := ReceptiveAccount new.
	Withdraw register: 50 on: account.
	
	report := (SummaryReport with: account) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Extraction for 50' equals: (report at: 1).
	self assert: 'Balance = -50' equals: (report at: 2)
	
	! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:21:33'!
test09SummaryReportForTransferReturnsBalanceAndTransferTransaction

	| sender receiver report |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 60 from: sender to: receiver.
	
	report := (SummaryReport with: sender) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Output by transfer of 60' equals: (report at: 1).
	self assert: 'Balance = -60' equals: (report at: 2).
	
	report := (SummaryReport with: receiver) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Entry by transfer of 60' equals: (report at: 1).
	self assert: 'Balance = 60' equals: (report at: 2)
	
	! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:21:46'!
test10SummaryOfPortfolioWithoutAccountsHasOnlyBalance

	| portfolio report |
	
	portfolio := Portfolio new.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:22:06'!
test11SummaryOfPortfolioWithOneAccount

	| account portfolio report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	
	! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:22:21'!
test12SummaryOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio report |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	report := (SummaryReport with: composedPortofolio) summary. 
 	
	self assert: 3 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Extraction for 50' equals: (report at: 2).
	self assert: 'Balance = 50' equals: (report at: 3)
	
	! !

!methodRemoval: TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/14/2020 16:22:29'!
test06SummaryReportForEmptyAccountReturnsOnlyBalance

	| account report |
	
	account := ReceptiveAccount new.
	
	report := (SummaryReport with: account) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	!

!methodRemoval: TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 16:22:34'!
test07SummaryReportForDepositReturnsBalanceAndDeposit

	| account report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	report := (SummaryReport with: account) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	
	!

!methodRemoval: TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/14/2020 16:22:39'!
test08SummaryReportForWithdrawReturnsBalanceAndWithdraw

	| account report |
	
	account := ReceptiveAccount new.
	Withdraw register: 50 on: account.
	
	report := (SummaryReport with: account) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Extraction for 50' equals: (report at: 1).
	self assert: 'Balance = -50' equals: (report at: 2)
	
	!

!methodRemoval: TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/14/2020 16:22:42'!
test09SummaryReportForTransferReturnsBalanceAndTransferTransaction

	| sender receiver report |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 60 from: sender to: receiver.
	
	report := (SummaryReport with: sender) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Output by transfer of 60' equals: (report at: 1).
	self assert: 'Balance = -60' equals: (report at: 2).
	
	report := (SummaryReport with: receiver) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Entry by transfer of 60' equals: (report at: 1).
	self assert: 'Balance = 60' equals: (report at: 2)
	
	!

!methodRemoval: TransferTest #test09TransferNet stamp: 'DB 11/14/2020 16:22:45'!
test09TransferNet

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 20 from: receiver to: sender.
	Transfer register: 30 from: sender to: receiver.
	
	report := (SummaryReport with: receiver) summary. 

	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Deposit for 100'.
	self assert: (report at: 2) equals: 'Extraction for 50'.
	self assert: (report at: 3) equals: 'Output by transfer of 20'.
	self assert: (report at: 4) equals: 'Entry by transfer of 30'.
	self assert: (report at: 5) equals: 'Balance = 60'.
	
	self assert: 10 equals: ((TransferNetReport with: receiver) transferNet ).
	
	!

!methodRemoval: TransferTest #test10SummaryOfPortfolioWithoutAccountsHasOnlyBalance stamp: 'DB 11/14/2020 16:22:49'!
test10SummaryOfPortfolioWithoutAccountsHasOnlyBalance

	| portfolio report |
	
	portfolio := Portfolio new.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	!

!methodRemoval: TransferTest #test11SummaryOfPortfolioWithOneAccount stamp: 'DB 11/14/2020 16:22:51'!
test11SummaryOfPortfolioWithOneAccount

	| account portfolio report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	
	!

!methodRemoval: TransferTest #test12SummaryOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'DB 11/14/2020 16:22:56'!
test12SummaryOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio report |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	report := (SummaryReport with: composedPortofolio) summary. 
 	
	self assert: 3 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Extraction for 50' equals: (report at: 2).
	self assert: 'Balance = 50' equals: (report at: 3)
	
	!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/14/2020 16:23:00'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/14/2020 16:23:00'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/14/2020 16:23:00'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/14/2020 16:23:00'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/14/2020 16:23:00'!
PASSED!

!testRun: #ReportTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/14/2020 16:23:04'!
PASSED!

!testRun: #ReportTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 16:23:04'!
PASSED!

!testRun: #ReportTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/14/2020 16:23:04'!
PASSED!

!testRun: #ReportTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/14/2020 16:23:04'!
PASSED!

!testRun: #ReportTest #test10SummaryOfPortfolioWithoutAccountsHasOnlyBalance stamp: 'DB 11/14/2020 16:23:04'!
PASSED!

!testRun: #ReportTest #test11SummaryOfPortfolioWithOneAccount stamp: 'DB 11/14/2020 16:23:04'!
PASSED!

!testRun: #ReportTest #test12SummaryOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'DB 11/14/2020 16:23:04'!
PASSED!

TestCase subclass: #PortfolioReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioReportTest category: 'Portfolio-Solucion' stamp: 'DB 11/14/2020 16:23:36'!
TestCase subclass: #PortfolioReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #PortfolioReportTest as: #PortfolioBinaryTreeReportTest stamp: 'DB 11/14/2020 16:23:58'!
Smalltalk renameClassNamed: #PortfolioReportTest as: #PortfolioBinaryTreeReportTest!

!classRenamed: #PortfolioBinaryTreeReportTest as: #PortfolioTreeReportTest stamp: 'DB 11/14/2020 16:24:31'!
Smalltalk renameClassNamed: #PortfolioBinaryTreeReportTest as: #PortfolioTreeReportTest!
!PortfolioTreeReportTest methodsFor: 'nil' stamp: 'DB 11/14/2020 16:24:44'!
test01! !

!methodRemoval: PortfolioTreeReportTest #test01 stamp: 'DB 11/14/2020 16:25:03'!
test01!
!PortfolioTreeReportTest methodsFor: 'nil' stamp: 'DB 11/14/2020 16:26:32'!
test01TreeReportForEmptyPortfolioReturnsEmptyReport

	| account report |
	
	account := ReceptiveAccount new.
	
	report := (SummaryReport with: account) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	! !

!classDefinition: #FamilyTreeReport category: 'Portfolio-Solucion' stamp: 'DB 11/14/2020 16:34:18'!
Object subclass: #FamilyTreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:31:59' prior: 50886091!
test01TreeReportForEmptyPortfolioReturnsEmptyReport

	|  portfolio report |
	
	portfolio :=  Portfolio named: 'Empty Portfolio'.
	
	report := (FamilyTreeReport with: portfolio) report. 
 	
	self assert: 1 equals: report size.
	self assert:  'Empty Portfolio' equals: (report at: 1)

	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 16:35:15'!
ERROR!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 16:35:15'!
ERROR!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:36:03'!
named: aName

	^self new 
		named: aName.! !

Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'DB 11/14/2020 16:37:11'!
Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'initialization' stamp: 'DB 11/14/2020 16:38:20'!
initializeWith: aName

	accounts := OrderedCollection new.
	parents := OrderedCollection new.
	name := aName ! !

----SNAPSHOT----(14 November 2020 16:38:37) CuisUniversity-4384.image priorSource: 17694697!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:38:47' prior: 50886130!
named: aName

	^self new initializeWith: aName.! !
!ReceptiveAccount class methodsFor: 'no messages' stamp: 'DB 11/14/2020 16:39:22'!
named: aName

	^self new initializeWith: aName.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/14/2020 16:39:54'!
initializWith: aName
	name  := aName ! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 16:40:16'!
ERROR!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 16:40:16'!
ERROR!
!FamilyTreeReport class methodsFor: 'nil' stamp: 'DB 11/14/2020 16:40:57'!
with: aPortfolio

	^self initializeWith: aPortfolio 
	! !

!classDefinition: #FamilyTreeReport category: 'Portfolio-Solucion' stamp: 'DB 11/14/2020 16:41:31'!
Object subclass: #FamilyTreeReport
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!FamilyTreeReport methodsFor: 'nil' stamp: 'DB 11/14/2020 16:41:29'!
initializaWith: aPortfolio
	portfolio := aPortfolio .! !
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:42:15'!
report 
	^OrderedCollection new.! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 16:42:22'!
ERROR!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 16:42:22'!
ERROR!
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:42:59'!
initializeWith: aPortfolio
	portfolio := aPortfolio .! !

!methodRemoval: FamilyTreeReport #initializaWith: stamp: 'DB 11/14/2020 16:42:59'!
initializaWith: aPortfolio
	portfolio := aPortfolio .!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 16:43:09'!
ERROR!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 16:43:09'!
ERROR!
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:43:50' prior: 50886207!
initializeWith: aPortfolio
	portfolio := aPortfolio .! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 16:43:55'!
ERROR!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 16:43:55'!
ERROR!
!FamilyTreeReport class methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:44:29' prior: 50886178!
with: aPortfolio

	^self new initializeWith: aPortfolio 
	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 16:44:37'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 16:44:37'!
FAILURE!
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:48:02' prior: 50886195!
report 
	| report |
	report := OrderedCollection new.
	
	report add: portfolio name.

	^report! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/14/2020 16:48:29' overrides: 16882612!
name

	^name! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'DB 11/14/2020 16:48:34' overrides: 16882612!
name

	^name! !
!Account methodsFor: 'balance' stamp: 'DB 11/14/2020 16:48:47' overrides: 16882612!
name

	self subclassResponsibility ! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 16:49:07'!
PASSED!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:51:46'!
test02TreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	
	report := (FamilyTreeReport with: portfolio) report. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  'Cuenta mia' equals: (report at: 2)

	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 17:01:46'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/14/2020 17:01:46'!
ERROR!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/14/2020 17:01:46'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/14/2020 17:02:16'!
initializeWith: aName
	name  := aName ! !

!methodRemoval: ReceptiveAccount #initializWith: stamp: 'DB 11/14/2020 17:02:16'!
initializWith: aName
	name  := aName !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 17:02:32'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/14/2020 17:02:32'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/14/2020 17:02:32'!
FAILURE!
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 17:13:57' prior: 50886253!
report 
	| report |
	report := OrderedCollection new.
	
	report add: portfolio name.
	report add: portfolio children 

	^report! !
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 17:14:49' prior: 50886326!
report 
	| report |
	report := OrderedCollection new.
	
	report add: portfolio name.
	
	portfolio xxx: self.
	
	

	^report! !
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 17:15:41'!
addMe: aName in: aParent

	aParent add: aName! !
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 17:16:30' prior: 50886341!
addMe: aName in: aParent

	| childs dic |
	childs := dic found: aParent

	childs add: aName! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/14/2020 17:20:14'!
xxx: aReport

	aReport addMeAsParent: aReport name.
	accounts do: [:anAccount |
		
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: anAccount name to: self name].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount xxx: aReport]
				
	]
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/14/2020 17:20:54' prior: 50886352!
xxx: aReport

	aReport addMeAsParent: aReport name.
	accounts do: [:anAccount |
		
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (anAccount name) to: (self name)].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount xxx: aReport]
				
	]
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/14/2020 17:24:20'!
xxx: aReport myParent: myParent

	aReport  addMe: (self name) to: myParent
	accounts do: [:anAccount |
		
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (anAccount name) to: (self name)].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount xxx: aReport]
				
	].
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/14/2020 17:37:51' prior: 50886375!
xxx: aReport myParent: myParent

	aReport  addMe: (self name) to: myParent
	accounts do: [:anAccount |
		
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (anAccount name) to: (self name)].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount xxx: aReport myParent: self name]
				
	].
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/14/2020 18:03:41'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/14/2020 18:03:41'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/14/2020 18:03:41'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/14/2020 18:03:41'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/14/2020 18:03:41'!
PASSED!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/14/2020 18:14:03'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/14/2020 18:14:03'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/14/2020 18:14:03'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/14/2020 18:14:03'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/14/2020 18:14:03'!
PASSED!

!testRun: #ReportTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/14/2020 18:14:24'!
PASSED!

!testRun: #ReportTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 18:14:24'!
PASSED!

!testRun: #ReportTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/14/2020 18:14:24'!
PASSED!

!testRun: #ReportTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/14/2020 18:14:24'!
PASSED!

!testRun: #ReportTest #test10SummaryOfPortfolioWithoutAccountsHasOnlyBalance stamp: 'DB 11/14/2020 18:14:24'!
PASSED!

!testRun: #ReportTest #test11SummaryOfPortfolioWithOneAccount stamp: 'DB 11/14/2020 18:14:24'!
PASSED!

!testRun: #ReportTest #test12SummaryOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'DB 11/14/2020 18:14:24'!
PASSED!

!classRenamed: #ReportTest as: #SummaryReportTest stamp: 'DB 11/14/2020 18:15:06'!
Smalltalk renameClassNamed: #ReportTest as: #SummaryReportTest!

TestCase subclass: #TransferNetReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetReportTest category: 'Portfolio-Solucion' stamp: 'DB 11/14/2020 18:15:16'!
TestCase subclass: #TransferNetReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----SNAPSHOT----(14 November 2020 18:15:34) CuisUniversity-4384.image priorSource: 17744048!

----QUIT----(14 November 2020 18:15:41) CuisUniversity-4384.image priorSource: 17754435!

----STARTUP---- (16 November 2020 10:53:49) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-Portfolio1/CuisUniversity-4384.image!


!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 10:58:01'!
ERROR!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 10:58:01'!
ERROR!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 10:58:12'!
ERROR!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 10:58:12'!
ERROR!
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:48:02' prior: 50886334!
report 
	| report |
	report := OrderedCollection new.
	
	report add: portfolio name.

	^report! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 11:00:01'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:00:01'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:00:01'!
FAILURE!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:01:54' prior: 50886277!
test02TreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	
	report := (FamilyTreeReport with: portfolio) report. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  '			Cuenta mia' equals: (report at: 2)

	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:02:30' prior: 50886523!
test02TreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	portfolio add: myAccount.
	
	report := (FamilyTreeReport with: portfolio) report. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  '			Cuenta mia' equals: (report at: 2)

	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 11:03:11'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:03:11'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:03:11'!
FAILURE!
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:04:44' prior: 50886504!
report 

	portfolio xxx: self.
	
	! !

!classDefinition: #FamilyTreeReport category: 'Portfolio-Solucion' stamp: 'DB 11/16/2020 11:05:17'!
Object subclass: #FamilyTreeReport
	instanceVariableNames: 'portfolio report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:05:15' prior: 50886225!
initializeWith: aPortfolio
	portfolio := aPortfolio.
	report := OrderedCollection new.! !
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:05:52' prior: 50886570!
report 

	portfolio xxx: self.
	
	
	! !
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:06:27' prior: 50886589!
report 

	portfolio xxx: self.
	^report.
	! !
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:07:55'!
addMeAsParent: name.

	report add name.

	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 11:13:40' prior: 50886364!
xxx: aReport

	aReport addMeAsParent: aReport name.
	accounts do: [:anAccount |
		
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: ('		',anAccount name) to: (self name)].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount xxx: aReport]
				
	]
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 11:14:43'!
xxx: aReport with: tabs

	aReport addMeAsParent: aReport name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (tabs,anAccount name) to: (self name)].
	]
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 11:14:55' prior: 50886615!
xxx: aReport with: tabs

	aReport addMeAsParent: aReport name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (tabs,'-',anAccount name) to: (self name)].
	]
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 11:15:04' prior: 50886625!
xxx: aReport with: tabs

	aReport addMeAsParent: aReport name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (tabs,'-',anAccount name)].
	]
	! !

!methodRemoval: Portfolio #xxx:myParent: stamp: 'DB 11/16/2020 11:15:42'!
xxx: aReport myParent: myParent

	aReport  addMe: (self name) to: myParent
	accounts do: [:anAccount |
		
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (anAccount name) to: (self name)].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount xxx: aReport myParent: self name]
				
	].
	!
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 11:16:04' prior: 50886604!
xxx: aReport

	aReport addMeAsParent: aReport name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: ('-',anAccount name)].
	]
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 11:16:20' prior: 50886656!
xxx: aReport

	aReport addMe: aReport name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: ('-',anAccount name)].
	]
	! !

!methodRemoval: FamilyTreeReport #addMe:in: stamp: 'DB 11/16/2020 11:35:56'!
addMe: aName in: aParent

	| childs dic |
	childs := dic found: aParent

	childs add: aName!
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:36:25'!
addMe: name.

	report add name.

	! !

!methodRemoval: FamilyTreeReport #addMeAsParent: stamp: 'DB 11/16/2020 11:36:25'!
addMeAsParent: name.

	report add name.

	!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 11:37:07'!
ERROR!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:37:07'!
ERROR!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 11:37:09'!
ERROR!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 11:37:41'!
ERROR!
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:39:06' prior: 50886679!
addMe: name.

	report add: name.

	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 11:39:12'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:39:12'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 11:39:14'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 11:39:56'!
FAILURE!
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 11:40:53' prior: 50886665!
xxx: aReport

	aReport addMe: (self name).
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: ('-',anAccount name)].
	]
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 11:41:03' prior: 50886725!
xxx: aReport

	aReport addMe: self name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: ('-',anAccount name)].
	]
	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 11:41:20'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:41:20'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:41:20'!
FAILURE!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:41:35' prior: 50886540!
test02TreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	portfolio add: myAccount.
	
	report := (FamilyTreeReport with: portfolio) report. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  '	-Cuenta mia' equals: (report at: 2)

	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 11:41:39'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:41:39'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:41:39'!
FAILURE!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:42:48' prior: 50886755!
test02TreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	portfolio add: myAccount.
	
	report := (FamilyTreeReport with: portfolio) report. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  '	-Cuenta mia' equals: (report at: 2)

	! !

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:43:01'!
FAILURE!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:43:17' prior: 50886785!
test02TreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	portfolio add: myAccount.
	
	report := (FamilyTreeReport with: portfolio) report. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  '-Cuenta mia' equals: (report at: 2)

	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 11:43:20'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:43:20'!
PASSED!
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 11:44:56' prior: 50886734!
xxx: aReport

	aReport addMe: self name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (Character tab asString,anAccount name)].
	]
	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 11:45:40'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:45:40'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:45:40'!
FAILURE!
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 11:46:33' prior: 50886832!
xxx: aReport

	aReport addMe: self name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: Character tab asString,(anAccount name)].
	]
	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 11:46:39'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:46:39'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:46:39'!
FAILURE!

Character tab asString,(anAccount name)!

Character tab asString!
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 11:48:51' prior: 50886853!
xxx: aReport

	aReport addMe: self name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: '<t>',(anAccount name)].
	]
	! !

'<t>',(anAccount name)!

(String tab),(anAccount name)!

'Name ', String tab, ' Age ', String tab, ' Occupation'!

 String tab!

'Here is<t>a tab and<n>a blank line'!

	'Here is<t>a tab and<n>a blank line'!

	Character tab.!

	Character tab asString.!

	String tab!
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 11:55:56' prior: 50886876!
xxx: aReport

	aReport addMe: self name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (Character tab asString),(anAccount name)].
	].
	
	
	
	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:56:08' prior: 50886807!
test02TreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	portfolio add: myAccount.
	
	report := (FamilyTreeReport with: portfolio) report. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  Character tab asString,'Cuenta mia' equals: (report at: 2)

	! !

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:56:10'!
PASSED!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 11:56:14'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:56:14'!
PASSED!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:56:37'!
test03TreeReportForPortfolioWithMoreThanOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	portfolio add: myAccount.
	
	report := (FamilyTreeReport with: portfolio) report. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  Character tab asString,'Cuenta mia' equals: (report at: 2)

	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:59:16' prior: 50886933!
test03TreeReportForPortfolioWithMoreThanOneChildReturnsA

	|  familyPorfolio childPortfolio report childAccount |
	
	familyPorfolio :=  Portfolio named: 'Portfolio de la familia'.
	childPortfolio := Portfolio named: 'Portfolio de hijos'.
	
	childAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPorfolio add: childAccount.
	familyPorfolio add: childPortfolio.
	
	report := (FamilyTreeReport with: familyPorfolio) report. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  Character tab asString,'Cuenta mia' equals: (report at: 2)
	
	Portfolio de la familia
   Cuenta Mia
   Portfolio de hijos
      Cuenta de Juan
      Cuenta de Angeles

	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:00:19' prior: 50886952!
test03TreeReportForPortfolioWithMoreThanOneChildReturnsA

	|  familyPorfolio childPortfolio report childAccount |
	
	familyPorfolio :=  Portfolio named: 'Portfolio de la familia'.
	childPortfolio := Portfolio named: 'Portfolio de hijos'.
	
	childAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPorfolio add: childAccount.
	familyPorfolio add: childPortfolio.
	
	report := (FamilyTreeReport with: familyPorfolio) report. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert:  Character tab asString,Character tab asString,'Portfolio de hijos' equals: (report at: 2).	
	
Portfolio de la familia
   Cuenta Mia
   Portfolio de hijos
      Cuenta de Juan
      Cuenta de Angeles

	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:02:55' prior: 50886978!
test03TreeReportForPortfolioWithMoreThanOneChildReturnsA

	|  familyPorfolio childPortfolio report  angelesAccount childAccount juansAccount |
	
	familyPorfolio :=  Portfolio named: 'Portfolio de la familia'.
	childPortfolio := Portfolio named: 'Portfolio de hijos'.
	
	childAccount := ReceptiveAccount named: 'Cuenta mia'.
	juansAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angelesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	
	childPortfolio add: juansAccount.
	childPortfolio add: angelesAccount.
	
	familyPorfolio add: childAccount.
	familyPorfolio add: childPortfolio.
	
	report := (FamilyTreeReport with: familyPorfolio) report. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert:  Character tab asString,'Portfolio de hijos' equals: (report at: 3).	
	self assert:  Character tab asString,Character tab asString,'Cuenta de Juan' equals: (report at: 4).	
	self assert:  Character tab asString,Character tab asString,'Cuenta de Angeles' equals: (report at: 5).	
	
Portfolio de la familia
   Cuenta Mia
   Portfolio de hijos
      Cuenta de Juan
      Cuenta de Angeles

	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:03:28' prior: 50887008!
test03TreeReportForPortfolioWithMoreThanOneChildReturnsA

	|  familyPorfolio childPortfolio report  angelesAccount childAccount juansAccount |
	
	familyPorfolio :=  Portfolio named: 'Portfolio de la familia'.
	childPortfolio := Portfolio named: 'Portfolio de hijos'.
	
	childAccount := ReceptiveAccount named: 'Cuenta mia'.
	juansAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angelesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	
	childPortfolio add: juansAccount.
	childPortfolio add: angelesAccount.
	
	familyPorfolio add: childAccount.
	familyPorfolio add: childPortfolio.
	
	report := (FamilyTreeReport with: familyPorfolio) report. 
 	
	self assert: 5 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert:  Character tab asString,'Portfolio de hijos' equals: (report at: 3).	
	self assert:  Character tab asString,Character tab asString,'Cuenta de Juan' equals: (report at: 4).	
	self assert:  Character tab asString,Character tab asString,'Cuenta de Angeles' equals: (report at: 5).	


	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 12:03:32'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 12:03:32'!
PASSED!

!testRun: #PortfolioTreeReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturnsA stamp: 'DB 11/16/2020 12:03:32'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturnsA stamp: 'DB 11/16/2020 12:03:32'!
FAILURE!
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 12:24:05' prior: 50886893!
xxx: aReport

	aReport addMe: self name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (Character tab asString),(anAccount name)].
		(anAccount isKindOf: Portfolio) ifTrue: [aReport addMe: (Character tab asString),(anAccount name)].
	].
	
	
	
	! !

!classRenamed: #FamilyTreeReport as: #PortfolioTreeReport stamp: 'DB 11/16/2020 12:24:53'!
Smalltalk renameClassNamed: #FamilyTreeReport as: #PortfolioTreeReport!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:24:53' prior: 50886903!
test02TreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	portfolio add: myAccount.
	
	report := (PortfolioTreeReport with: portfolio) report. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  Character tab asString,'Cuenta mia' equals: (report at: 2)

	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:24:53' prior: 50887051!
test03TreeReportForPortfolioWithMoreThanOneChildReturnsA

	|  familyPorfolio childPortfolio report  angelesAccount childAccount juansAccount |
	
	familyPorfolio :=  Portfolio named: 'Portfolio de la familia'.
	childPortfolio := Portfolio named: 'Portfolio de hijos'.
	
	childAccount := ReceptiveAccount named: 'Cuenta mia'.
	juansAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angelesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	
	childPortfolio add: juansAccount.
	childPortfolio add: angelesAccount.
	
	familyPorfolio add: childAccount.
	familyPorfolio add: childPortfolio.
	
	report := (PortfolioTreeReport with: familyPorfolio) report. 
 	
	self assert: 5 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert:  Character tab asString,'Portfolio de hijos' equals: (report at: 3).	
	self assert:  Character tab asString,Character tab asString,'Cuenta de Juan' equals: (report at: 4).	
	self assert:  Character tab asString,Character tab asString,'Cuenta de Angeles' equals: (report at: 5).	


	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:24:53' prior: 50886110!
test01TreeReportForEmptyPortfolioReturnsEmptyReport

	|  portfolio report |
	
	portfolio :=  Portfolio named: 'Empty Portfolio'.
	
	report := (PortfolioTreeReport with: portfolio) report. 
 	
	self assert: 1 equals: report size.
	self assert:  'Empty Portfolio' equals: (report at: 1)

	! !
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:25:15'!
familyTreeReport 

	portfolio xxx: self.
	^report.
	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:25:15' prior: 50887143!
test03TreeReportForPortfolioWithMoreThanOneChildReturnsA

	|  familyPorfolio childPortfolio report  angelesAccount childAccount juansAccount |
	
	familyPorfolio :=  Portfolio named: 'Portfolio de la familia'.
	childPortfolio := Portfolio named: 'Portfolio de hijos'.
	
	childAccount := ReceptiveAccount named: 'Cuenta mia'.
	juansAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angelesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	
	childPortfolio add: juansAccount.
	childPortfolio add: angelesAccount.
	
	familyPorfolio add: childAccount.
	familyPorfolio add: childPortfolio.
	
	report := (PortfolioTreeReport with: familyPorfolio) familyTreeReport. 
 	
	self assert: 5 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert:  Character tab asString,'Portfolio de hijos' equals: (report at: 3).	
	self assert:  Character tab asString,Character tab asString,'Cuenta de Juan' equals: (report at: 4).	
	self assert:  Character tab asString,Character tab asString,'Cuenta de Angeles' equals: (report at: 5).	


	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:25:15' prior: 50887182!
test01TreeReportForEmptyPortfolioReturnsEmptyReport

	|  portfolio report |
	
	portfolio :=  Portfolio named: 'Empty Portfolio'.
	
	report := (PortfolioTreeReport with: portfolio) familyTreeReport. 
 	
	self assert: 1 equals: report size.
	self assert:  'Empty Portfolio' equals: (report at: 1)

	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:25:15' prior: 50887124!
test02TreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	portfolio add: myAccount.
	
	report := (PortfolioTreeReport with: portfolio) familyTreeReport. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  Character tab asString,'Cuenta mia' equals: (report at: 2)

	! !

!methodRemoval: PortfolioTreeReport #report stamp: 'DB 11/16/2020 12:25:15'!
report 

	portfolio xxx: self.
	^report.
	!
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:25:39' prior: 50887194!
familyTreeReport 

	portfolio xxx: self tabs: ''.
	^report.
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 12:26:38' prior: 50887106!
xxx: aReport

	aReport addMe: self name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (Character tab asString),(anAccount name)].
		(anAccount isKindOf: Portfolio) ifTrue: [aReport addMe: (Character tab asString),(anAccount name)].
	].
	
	
	
	! !
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:27:06' prior: 50887276!
familyTreeReport 

	portfolio familyTree: self tabs: ''.
	^report.
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 12:27:46'!
familyTree: aReport tabs: tabs

	aReport addMeAsParent: aReport name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (tabs,'-',anAccount name)].
	]
	! !

!methodRemoval: Portfolio #xxx:with: stamp: 'DB 11/16/2020 12:27:46'!
xxx: aReport with: tabs

	aReport addMeAsParent: aReport name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (tabs,'-',anAccount name)].
	]
	!
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 12:28:26' prior: 50887299!
familyTree: aReport tabs: tabs

	aReport addMe: tabs,self name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (Character tab asString),(anAccount name)].
		(anAccount isKindOf: Portfolio) ifTrue: [aReport addMe: (Character tab asString),(anAccount name)].
	].
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 12:29:18' prior: 50887317!
familyTree: aReport tabs: tabs

	aReport addMe: tabs,self name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: tabs,(Character tab asString),(anAccount name)].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount familyTree: aReport tabs: tabs,(Character tab asString)].
	].
	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 12:29:34'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 12:29:34'!
PASSED!

!testRun: #PortfolioTreeReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturnsA stamp: 'DB 11/16/2020 12:29:34'!
PASSED!
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:31:14'!
addMeAsParent: aPortfolio tabs: tabs

	report add: aPortfolio name.
	aPortfolio familyTreeReport: aPortfolio tabs: tabs.

	! !
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:31:36' prior: 50887356!
addMeAsParent: aPortfolio tabs: tabs

	report add: aPortfolio name.
	aPortfolio familyTree: aPortfolio tabs: tabs.

	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 12:32:06' prior: 50887330!
familyTree: aReport tabs: tabs

	aReport addMeAsParent: self tabs: tabs.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: tabs,(Character tab asString),(anAccount name)].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount familyTree: aReport tabs: tabs,(Character tab asString)].
	].
	! !

!methodRemoval: Portfolio #xxx: stamp: 'DB 11/16/2020 12:32:50'!
xxx: aReport

	aReport addMe: self name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (Character tab asString),(anAccount name)].
		(anAccount isKindOf: Portfolio) ifTrue: [aReport addMe: (Character tab asString),(anAccount name)].
	].
	
	
	
	!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 12:33:00'!
ERROR!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 12:33:00'!
ERROR!

!testRun: #PortfolioTreeReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturnsA stamp: 'DB 11/16/2020 12:33:01'!
ERROR!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 12:33:05'!
ERROR!
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 12:37:12' prior: 50887371!
familyTree: aReport tabs: tabs


	aReport addMe: tabs,self name.
	"aReport addMe: self name tabs: tabs."
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: tabs,(Character tab asString),(anAccount name)].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount familyTree: aReport tabs: tabs,(Character tab asString)].
	].
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 12:37:14' prior: 50887412!
familyTree: aReport tabs: tabs

	aReport addMe: tabs,self name.
	"aReport addMe: self name tabs: tabs."
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: tabs,(Character tab asString),(anAccount name)].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount familyTree: aReport tabs: tabs,(Character tab asString)].
	].
	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 12:37:37'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 12:37:37'!
PASSED!

!testRun: #PortfolioTreeReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturnsA stamp: 'DB 11/16/2020 12:37:37'!
PASSED!
!TransferNetReportTest methodsFor: 'nil' stamp: 'DB 11/16/2020 12:41:06'!
test06SummaryReportForEmptyAccountReturnsOnlyBalance

	| account report |
	
	account := ReceptiveAccount new.
	
	report := (TransferNetReport with: account) net. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	! !
!TransferNetReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:41:45' prior: 50887453!
test06SummaryReportForEmptyAccountReturnsOnlyBalance

	| account report |
	
	account := ReceptiveAccount new.
	
	report := (TransferNetReport with: account) transferNet. 
 	
	self assert: 0 equals: report.
	! !

!testRun: #TransferNetReportTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/16/2020 12:41:49'!
PASSED!
!TransferNetReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:42:33'!
test02TransferNetReportForDepositReturnsBalanceAndDeposit

	| account report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	report := (TransferNetReport with: account) transferNet. 
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	! !
!TransferNetReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:42:39'!
test02TransferNetReportForDepositReturnsZero

	| account report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	report := (TransferNetReport with: account) transferNet. 
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	! !

!methodRemoval: TransferNetReportTest #test02TransferNetReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/16/2020 12:42:42'!
test02TransferNetReportForDepositReturnsBalanceAndDeposit

	| account report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	report := (TransferNetReport with: account) transferNet. 
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	!
!TransferNetReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:43:04' prior: 50887494!
test02TransferNetReportForDepositReturnsZero

	| account report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	report := (TransferNetReport with: account) transferNet. 
 	
	self assert: 0 equals: report.	! !

!testRun: #TransferNetReportTest #test02TransferNetReportForDepositReturnsZero stamp: 'DB 11/16/2020 12:43:07'!
PASSED!

!testRun: #TransferNetReportTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/16/2020 12:43:07'!
PASSED!
!TransferNetReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:43:17'!
test01SummaryReportForEmptyAccountReturnsOnlyBalance

	| account report |
	
	account := ReceptiveAccount new.
	
	report := (TransferNetReport with: account) transferNet. 
 	
	self assert: 0 equals: report.
	! !

!methodRemoval: TransferNetReportTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/16/2020 12:43:17'!
test06SummaryReportForEmptyAccountReturnsOnlyBalance

	| account report |
	
	account := ReceptiveAccount new.
	
	report := (TransferNetReport with: account) transferNet. 
 	
	self assert: 0 equals: report.
	!

!classRenamed: #TransferNetReportTest as: #ReportTransferNetTest stamp: 'DB 11/16/2020 12:43:56'!
Smalltalk renameClassNamed: #TransferNetReportTest as: #ReportTransferNetTest!

!classRenamed: #SummaryReportTest as: #ReportSummaryTest stamp: 'DB 11/16/2020 12:44:10'!
Smalltalk renameClassNamed: #SummaryReportTest as: #ReportSummaryTest!
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:45:20'!
test03TransferNetReportForWithdrawReturnsZero

	| account report |
	
	account := ReceptiveAccount new.
	Withdraw register: 50 on: account.
	
	report := (TransferNetReport with: account) transferNet . 
 	
	self assert: 2 equals: report size.
	self assert: 'Extraction for 50' equals: (report at: 1).
	self assert: 'Balance = -50' equals: (report at: 2)
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:45:36' prior: 50887574!
test03TransferNetReportForWithdrawReturnsZero

	| account report |
	
	account := ReceptiveAccount new.
	Withdraw register: 50 on: account.
	
	report := (TransferNetReport with: account) transferNet . 
 	
	self assert: 0 equals: report
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:45:50'!
test01TransferNetReportForEmptyAccountReturnsOnlyBalance

	| account report |
	
	account := ReceptiveAccount new.
	
	report := (TransferNetReport with: account) transferNet. 
 	
	self assert: 0 equals: report.
	! !

!methodRemoval: ReportTransferNetTest #test01SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/16/2020 12:45:50'!
test01SummaryReportForEmptyAccountReturnsOnlyBalance

	| account report |
	
	account := ReceptiveAccount new.
	
	report := (TransferNetReport with: account) transferNet. 
 	
	self assert: 0 equals: report.
	!
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:46:47'!
test04TransferNetReportForATransferReturnsNetBalance

	| sender receiver report |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 60 from: sender to: receiver.
	
	report := (SummaryReport with: sender) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Output by transfer of 60' equals: (report at: 1).
	self assert: 'Balance = -60' equals: (report at: 2).
	
	report := (SummaryReport with: receiver) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Entry by transfer of 60' equals: (report at: 1).
	self assert: 'Balance = 60' equals: (report at: 2)
	
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:47:35' prior: 50887620!
test04TransferNetReportForATransferReturnsNetBalance

	| sender receiver report |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 60 from: sender to: receiver.
	
	report := (TransferNetReport with: sender) summary. 
 	
	self assert: -60 equals: report.
	
	report := (TransferNetReport with: receiver) summary. 
 	
	self assert: 60 equals: report.
	! !

!testRun: #ReportTransferNetTest #test01TransferNetReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/16/2020 12:47:38'!
PASSED!

!testRun: #ReportTransferNetTest #test02TransferNetReportForDepositReturnsZero stamp: 'DB 11/16/2020 12:47:38'!
PASSED!

!testRun: #ReportTransferNetTest #test03TransferNetReportForWithdrawReturnsZero stamp: 'DB 11/16/2020 12:47:38'!
PASSED!

!testRun: #ReportTransferNetTest #test04TransferNetReportForATransferReturnsNetBalance stamp: 'DB 11/16/2020 12:47:38'!
ERROR!

!testRun: #ReportTransferNetTest #test04TransferNetReportForATransferReturnsNetBalance stamp: 'DB 11/16/2020 12:47:38'!
ERROR!
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:47:48' prior: 50887644!
test04TransferNetReportForATransferReturnsNetBalance

	| sender receiver report |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 60 from: sender to: receiver.
	
	report := (TransferNetReport with: sender) transferNet . 
 	
	self assert: -60 equals: report.
	
	report := (TransferNetReport with: receiver) transferNet. 
 	
	self assert: 60 equals: report.
	! !

!testRun: #ReportTransferNetTest #test01TransferNetReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/16/2020 12:47:51'!
PASSED!

!testRun: #ReportTransferNetTest #test02TransferNetReportForDepositReturnsZero stamp: 'DB 11/16/2020 12:47:51'!
PASSED!

!testRun: #ReportTransferNetTest #test03TransferNetReportForWithdrawReturnsZero stamp: 'DB 11/16/2020 12:47:51'!
PASSED!

!testRun: #ReportTransferNetTest #test04TransferNetReportForATransferReturnsNetBalance stamp: 'DB 11/16/2020 12:47:51'!
PASSED!
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:48:58'!
test10TransferNetOfAPortfolioWithoutAccountsReturnsZero

	| portfolio report |
	
	portfolio := Portfolio new.
	
	report := (TransferNetReport with: portfolio) transferNet. 
 	
	self assert: 0 equals: report.
	
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:49:08'!
test5TransferNetOfAPortfolioWithoutAccountsReturnsZero

	| portfolio report |
	
	portfolio := Portfolio new.
	
	report := (TransferNetReport with: portfolio) transferNet. 
 	
	self assert: 0 equals: report.
	
	! !

!methodRemoval: ReportTransferNetTest #test10TransferNetOfAPortfolioWithoutAccountsReturnsZero stamp: 'DB 11/16/2020 12:49:08'!
test10TransferNetOfAPortfolioWithoutAccountsReturnsZero

	| portfolio report |
	
	portfolio := Portfolio new.
	
	report := (TransferNetReport with: portfolio) transferNet. 
 	
	self assert: 0 equals: report.
	
	!
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:49:13'!
test05TransferNetOfAPortfolioWithoutAccountsReturnsZero

	| portfolio report |
	
	portfolio := Portfolio new.
	
	report := (TransferNetReport with: portfolio) transferNet. 
 	
	self assert: 0 equals: report.
	
	! !

!methodRemoval: ReportTransferNetTest #test5TransferNetOfAPortfolioWithoutAccountsReturnsZero stamp: 'DB 11/16/2020 12:49:13'!
test5TransferNetOfAPortfolioWithoutAccountsReturnsZero

	| portfolio report |
	
	portfolio := Portfolio new.
	
	report := (TransferNetReport with: portfolio) transferNet. 
 	
	self assert: 0 equals: report.
	
	!

!testRun: #ReportTransferNetTest #test01TransferNetReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/16/2020 12:49:19'!
PASSED!

!testRun: #ReportTransferNetTest #test02TransferNetReportForDepositReturnsZero stamp: 'DB 11/16/2020 12:49:19'!
PASSED!

!testRun: #ReportTransferNetTest #test03TransferNetReportForWithdrawReturnsZero stamp: 'DB 11/16/2020 12:49:19'!
PASSED!

!testRun: #ReportTransferNetTest #test04TransferNetReportForATransferReturnsNetBalance stamp: 'DB 11/16/2020 12:49:19'!
PASSED!

!testRun: #ReportTransferNetTest #test05TransferNetOfAPortfolioWithoutAccountsReturnsZero stamp: 'DB 11/16/2020 12:49:19'!
PASSED!
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:50:18'!
test06TransferNetOfAPortfolioWithOneAccountReturnsTransferNetAccountValue

	| account portfolio report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	
	
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:50:41' prior: 50887784!
test06TransferNetOfAPortfolioWithOneAccountReturnsTransferNetAccountValue

	| account portfolio report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	report := (TransferNetReport with: portfolio) transferNet. 
 	
	self assert: 0 equals: report.
	
	! !

!testRun: #ReportTransferNetTest #test01TransferNetReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/16/2020 12:50:43'!
PASSED!

!testRun: #ReportTransferNetTest #test02TransferNetReportForDepositReturnsZero stamp: 'DB 11/16/2020 12:50:43'!
PASSED!

!testRun: #ReportTransferNetTest #test03TransferNetReportForWithdrawReturnsZero stamp: 'DB 11/16/2020 12:50:43'!
PASSED!

!testRun: #ReportTransferNetTest #test04TransferNetReportForATransferReturnsNetBalance stamp: 'DB 11/16/2020 12:50:43'!
PASSED!

!testRun: #ReportTransferNetTest #test05TransferNetOfAPortfolioWithoutAccountsReturnsZero stamp: 'DB 11/16/2020 12:50:43'!
PASSED!

!testRun: #ReportTransferNetTest #test06TransferNetOfAPortfolioWithOneAccountReturnsTransferNetAccountValue stamp: 'DB 11/16/2020 12:50:43'!
PASSED!
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:51:47'!
test07TransferNetOfAPortfolioWithOneAccountReturnsTransferNetAccountValue

	| account portfolio report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:54:04' prior: 50887839!
test07TransferNetOfAPortfolioWithOneAccountReturnsTransferNetAccountValue

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio report |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	report := (TransferNetReport with: composedPortofolio) transferNet. 
 	
	self assert: 10 equals: report size.
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:58:03'!
test07TransferNetOfAPortfolioWithMoreThanOneAccountReturnsTransferNetAccountValue

	| simplePortfolioAccount |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	Withdraw register: 50 on: simplePortfolioAccount.
	
	
	! !

!methodRemoval: ReportTransferNetTest #test07TransferNetOfAPortfolioWithOneAccountReturnsTransferNetAccountValue stamp: 'DB 11/16/2020 12:58:13'!
test07TransferNetOfAPortfolioWithOneAccountReturnsTransferNetAccountValue

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio report |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	report := (TransferNetReport with: composedPortofolio) transferNet. 
 	
	self assert: 10 equals: report size.
	!
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:59:05' prior: 50887879!
test07TransferNetOfAPortfolioWithMoreThanOneAccountReturnsTransferNetAccountValue

	| sender reciever receiver transfer |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	Deposit register: 100 on: sender.
	Withdraw register: 50 on: sender.
	
	transfer := Transfer register: 20 from: sender to: receiver.
	
	
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:59:19' prior: 50887916!
test07TransferNetOfAPortfolioWithMoreThanOneAccountReturnsTransferNetAccountValue

	| sender receiver transfer |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	Deposit register: 100 on: sender.
	Withdraw register: 50 on: sender.
	
	transfer := Transfer register: 20 from: sender to: receiver.
	
	
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:59:41' prior: 50887930!
test07TransferNetOfAPortfolioWithMoreThanOneAccountReturnsTransferNetAccountValue

	| sender receiver transfer |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	Deposit register: 100 on: sender.
	Withdraw register: 50 on: sender.
	
	transfer := Transfer register: 20 from: sender to: receiver.
	transfer := Transfer register: 30 from: receiver to: sender.	
	
	
	
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 13:00:18' prior: 50887944!
test07TransferNetOfAPortfolioWithMoreThanOneAccountReturnsTransferNetAccountValue

	| sender receiver transfer report |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	Deposit register: 100 on: sender.
	Withdraw register: 50 on: sender.
	
	transfer := Transfer register: 20 from: sender to: receiver.
	transfer := Transfer register: 30 from: receiver to: sender.	
	
	report := (TransferNetReport with: sender) transferNet.
	
	
	
	
	
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 13:00:49' prior: 50887960!
test07TransferNetOfAPortfolioWithMoreThanOneAccountReturnsTransferNetAccountValue

	| sender receiver transfer report |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	Deposit register: 100 on: sender.
	Withdraw register: 50 on: sender.
	
	transfer := Transfer register: 20 from: sender to: receiver.
	transfer := Transfer register: 30 from: receiver to: sender.	
	
	report := (TransferNetReport with: sender) transferNet.
	
	self assert: 10 equals: report.
	
	
	
	
	
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 13:01:00' prior: 50887978!
test07TransferNetOfAPortfolioWithMoreThanOneAccountReturnsTransferNetAccountValue

	| sender receiver report |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	Deposit register: 100 on: sender.
	Withdraw register: 50 on: sender.
	
	Transfer register: 20 from: sender to: receiver.
	Transfer register: 30 from: receiver to: sender.	
	
	report := (TransferNetReport with: sender) transferNet.
	
	self assert: 10 equals: report.
	
	
	
	
	
	! !

!testRun: #ReportTransferNetTest #test07TransferNetOfAPortfolioWithMoreThanOneAccountReturnsTransferNetAccountValue stamp: 'DB 11/16/2020 13:01:08'!
PASSED!

!testRun: #ReportTransferNetTest #test01TransferNetReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/16/2020 13:01:11'!
PASSED!

!testRun: #ReportTransferNetTest #test02TransferNetReportForDepositReturnsZero stamp: 'DB 11/16/2020 13:01:11'!
PASSED!

!testRun: #ReportTransferNetTest #test03TransferNetReportForWithdrawReturnsZero stamp: 'DB 11/16/2020 13:01:11'!
PASSED!

!testRun: #ReportTransferNetTest #test04TransferNetReportForATransferReturnsNetBalance stamp: 'DB 11/16/2020 13:01:11'!
PASSED!

!testRun: #ReportTransferNetTest #test05TransferNetOfAPortfolioWithoutAccountsReturnsZero stamp: 'DB 11/16/2020 13:01:11'!
PASSED!

!testRun: #ReportTransferNetTest #test06TransferNetOfAPortfolioWithOneAccountReturnsTransferNetAccountValue stamp: 'DB 11/16/2020 13:01:11'!
PASSED!

!testRun: #ReportTransferNetTest #test07TransferNetOfAPortfolioWithMoreThanOneAccountReturnsTransferNetAccountValue stamp: 'DB 11/16/2020 13:01:11'!
PASSED!
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 13:05:07'!
assertTransferNetAccount: anAccount value: expectedValue
 	
	self assert: expectedValue equals: (TransferNetReport with: anAccount) transferNet..
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 13:05:29' prior: 50887600!
test01TransferNetReportForEmptyAccountReturnsOnlyBalance

	| account |
	
	account := ReceptiveAccount new.
	
	self assertTransferNetAccount: account value: 0.! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 13:05:49' prior: 50887524!
test02TransferNetReportForDepositReturnsZero

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	self assertTransferNetAccount: account value: 0.! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 13:06:01' prior: 50887589!
test03TransferNetReportForWithdrawReturnsZero

	| account |
	
	account := ReceptiveAccount new.
	Withdraw register: 50 on: account.
	
	self assertTransferNetAccount: account value: 0.
	
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 13:06:37' prior: 50887680!
test04TransferNetReportForATransferReturnsNetBalance

	| sender receiver |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 60 from: sender to: receiver.
	
	self assertTransferNetAccount: sender value: -60.
	self assertTransferNetAccount: receiver value: 60.
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 13:06:51' prior: 50887743!
test05TransferNetOfAPortfolioWithoutAccountsReturnsZero

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assertTransferNetAccount: portfolio value: 0.
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 13:07:18' prior: 50887801!
test06TransferNetOfAPortfolioWithOneAccountReturnsTransferNetAccountValue

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assertTransferNetAccount: portfolio value: 0.
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 13:07:39' prior: 50887997!
test07TransferNetOfAPortfolioWithMoreThanOneAccountReturnsTransferNetAccountValue

	| sender receiver |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	Deposit register: 100 on: sender.
	Withdraw register: 50 on: sender.
	
	Transfer register: 20 from: sender to: receiver.
	Transfer register: 30 from: receiver to: sender.	
	
	self assertTransferNetAccount: sender value: 10.
	
	
	
	
	! !

!testRun: #ReportTransferNetTest #test01TransferNetReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/16/2020 13:07:43'!
PASSED!

!testRun: #ReportTransferNetTest #test02TransferNetReportForDepositReturnsZero stamp: 'DB 11/16/2020 13:07:43'!
PASSED!

!testRun: #ReportTransferNetTest #test03TransferNetReportForWithdrawReturnsZero stamp: 'DB 11/16/2020 13:07:43'!
PASSED!

!testRun: #ReportTransferNetTest #test04TransferNetReportForATransferReturnsNetBalance stamp: 'DB 11/16/2020 13:07:43'!
PASSED!

!testRun: #ReportTransferNetTest #test05TransferNetOfAPortfolioWithoutAccountsReturnsZero stamp: 'DB 11/16/2020 13:07:43'!
PASSED!

!testRun: #ReportTransferNetTest #test06TransferNetOfAPortfolioWithOneAccountReturnsTransferNetAccountValue stamp: 'DB 11/16/2020 13:07:43'!
PASSED!

!testRun: #ReportTransferNetTest #test07TransferNetOfAPortfolioWithMoreThanOneAccountReturnsTransferNetAccountValue stamp: 'DB 11/16/2020 13:07:43'!
PASSED!

!testRun: #ReportSummaryTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/16/2020 13:07:47'!
PASSED!

!testRun: #ReportSummaryTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/16/2020 13:07:47'!
PASSED!

!testRun: #ReportSummaryTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/16/2020 13:07:47'!
PASSED!

!testRun: #ReportSummaryTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/16/2020 13:07:47'!
PASSED!

!testRun: #ReportSummaryTest #test10SummaryOfPortfolioWithoutAccountsHasOnlyBalance stamp: 'DB 11/16/2020 13:07:47'!
PASSED!

!testRun: #ReportSummaryTest #test11SummaryOfPortfolioWithOneAccount stamp: 'DB 11/16/2020 13:07:47'!
PASSED!

!testRun: #ReportSummaryTest #test12SummaryOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'DB 11/16/2020 13:07:47'!
PASSED!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/16/2020 13:07:51'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/16/2020 13:07:51'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/16/2020 13:07:51'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/16/2020 13:07:51'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/16/2020 13:07:51'!
PASSED!

!methodRemoval: PortfolioTreeReport #addMeAsParent:tabs: stamp: 'DB 11/16/2020 13:17:08'!
addMeAsParent: aPortfolio tabs: tabs

	report add: aPortfolio name.
	aPortfolio familyTree: aPortfolio tabs: tabs.

	!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 13:17:14'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 13:17:14'!
PASSED!

!testRun: #PortfolioTreeReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturnsA stamp: 'DB 11/16/2020 13:17:14'!
PASSED!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 13:17:40'!
test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport

	|  portfolio report |
	
	portfolio :=  Portfolio named: 'Empty Portfolio'.
	
	report := (PortfolioTreeReport with: portfolio) familyTreeReport. 
 	
	self assert: 1 equals: report size.
	self assert:  'Empty Portfolio' equals: (report at: 1)

	! !

!classDefinition: #PortfolioSpeicalTreeReport category: 'Portfolio-Solucion' stamp: 'DB 11/16/2020 13:18:04'!
Object subclass: #PortfolioSpeicalTreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 13:17:59' prior: 50888230!
test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport

	|  portfolio report |
	
	portfolio :=  Portfolio named: 'Empty Portfolio'.
	
	report := (PortfolioSpeicalTreeReport with: portfolio) specialTreeReport. 
 	
	self assert: 1 equals: report size.
	self assert:  'Empty Portfolio' equals: (report at: 1)

	! !

!classRenamed: #PortfolioSpeicalTreeReport as: #PortfolioSpecialTreeReport stamp: 'DB 11/16/2020 13:18:27'!
Smalltalk renameClassNamed: #PortfolioSpeicalTreeReport as: #PortfolioSpecialTreeReport!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 13:18:28' prior: 50888252!
test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport

	|  portfolio report |
	
	portfolio :=  Portfolio named: 'Empty Portfolio'.
	
	report := (PortfolioSpecialTreeReport with: portfolio) specialTreeReport. 
 	
	self assert: 1 equals: report size.
	self assert:  'Empty Portfolio' equals: (report at: 1)

	! !

----SNAPSHOT----(16 November 2020 13:28:35) CuisUniversity-4384.image priorSource: 17754529!
!PortfolioSpecialTreeReport class methodsFor: 'no messages' stamp: 'DB 11/16/2020 13:35:55'!
with: aPortfolio

	^self new initializeWith: aPortfolio 
	! !

!classDefinition: #PortfolioSpecialTreeReport category: 'Portfolio-Solucion' stamp: 'DB 11/16/2020 13:36:36'!
Object subclass: #PortfolioSpecialTreeReport
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioSpecialTreeReport category: 'Portfolio-Solucion' stamp: 'DB 11/16/2020 13:36:39'!
Object subclass: #PortfolioSpecialTreeReport
	instanceVariableNames: 'portfolio report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioSpecialTreeReport methodsFor: 'nil' stamp: 'DB 11/16/2020 13:36:34'!
initializeWith: aPortfolio
	portfolio := aPortfolio.
	report := OrderedCollection new.! !

----SNAPSHOT----(16 November 2020 13:41:55) CuisUniversity-4384.image priorSource: 17812283!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 15:33:22'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 15:33:22'!
PASSED!

!testRun: #PortfolioTreeReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturnsA stamp: 'DB 11/16/2020 15:33:22'!
PASSED!

!testRun: #PortfolioTreeReportTest #test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 15:33:22'!
ERROR!

!testRun: #PortfolioTreeReportTest #test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 15:33:22'!
ERROR!

!testRun: #PortfolioTreeReportTest #test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 15:33:31'!
ERROR!
!PortfolioSpecialTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:33:41'!
specialTreeReport
	self shouldBeImplemented.! !
!PortfolioSpecialTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:34:21' prior: 50888344!
specialTreeReport

	report add: portfolio name.
	^report! !

!testRun: #PortfolioTreeReportTest #test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 15:34:22'!
PASSED!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 15:34:25'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 15:34:25'!
PASSED!

!testRun: #PortfolioTreeReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturnsA stamp: 'DB 11/16/2020 15:34:25'!
PASSED!

!testRun: #PortfolioTreeReportTest #test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 15:34:25'!
PASSED!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:34:38'!
test04SpecialTreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	portfolio add: myAccount.
	
	report := (PortfolioTreeReport with: portfolio) familyTreeReport. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  Character tab asString,'Cuenta mia' equals: (report at: 2)

	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:35:57'!
test05SpecialTreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	portfolio add: myAccount.
	
	report := (PortfolioTreeReport with: portfolio) familyTreeReport. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  Character tab asString,'Cuenta mia' equals: (report at: 2)

	! !

!methodRemoval: PortfolioTreeReportTest #test04SpecialTreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 15:35:57'!
test04SpecialTreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	portfolio add: myAccount.
	
	report := (PortfolioTreeReport with: portfolio) familyTreeReport. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  Character tab asString,'Cuenta mia' equals: (report at: 2)

	!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:36:54' prior: 50888394!
test05SpecialTreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount. 
	portfolio add: myAccount.
	
	report := (PortfolioTreeReport with: portfolio) familyTreeReport. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  Character tab asString,'Cuenta mia' equals: (report at: 2)

	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:37:34' prior: 50888432!
test05SpecialTreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount. 
	Withdraw register: 50 on: myAccount.
	portfolio add: myAccount.
	
	report := (PortfolioTreeReport with: portfolio) familyTreeReport. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  Character tab asString,'Cuenta mia' equals: (report at: 2)

	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:38:47' prior: 50888452!
test05SpecialTreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount. 
	Withdraw register: 50 on: myAccount.
	portfolio add: myAccount.
	
	report := (PortfolioSpecialTreeReport with: portfolio) familyTreeReport. 
 	
	self assert: 5 equals: report size.
	self assert: 'Portfolio de la familia' equals: (report at: 1).
	self assert: Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Cuenta mia' equals: (report at: 2).	

	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:40:39' prior: 50888473!
test05SpecialTreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount. 
	Withdraw register: 50 on: myAccount.
	portfolio add: myAccount.
	
	report := (PortfolioSpecialTreeReport with: portfolio) familyTreeReport. 
 	
	
	self assert: 5 equals: report size.
	self assert: 'Portfolio de la familia' equals: (report at: 1).
	self assert: Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Deposit for 100' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Extraction for 50' equals: (report at: 2).	

	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 15:40:53'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 15:40:53'!
PASSED!

!testRun: #PortfolioTreeReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturnsA stamp: 'DB 11/16/2020 15:40:53'!
PASSED!

!testRun: #PortfolioTreeReportTest #test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 15:40:53'!
PASSED!

!testRun: #PortfolioTreeReportTest #test05SpecialTreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 15:40:53'!
ERROR!

!testRun: #PortfolioTreeReportTest #test05SpecialTreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 15:40:53'!
ERROR!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:41:15' prior: 50888501!
test05SpecialTreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount. 
	Withdraw register: 50 on: myAccount.
	portfolio add: myAccount.
	
	report := (PortfolioSpecialTreeReport with: portfolio) specialTreeReport. 
 	
	
	self assert: 5 equals: report size.
	self assert: 'Portfolio de la familia' equals: (report at: 1).
	self assert: Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Deposit for 100' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Extraction for 50' equals: (report at: 2).	

	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 15:41:18'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 15:41:18'!
PASSED!

!testRun: #PortfolioTreeReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturnsA stamp: 'DB 11/16/2020 15:41:18'!
PASSED!

!testRun: #PortfolioTreeReportTest #test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 15:41:18'!
PASSED!

!testRun: #PortfolioTreeReportTest #test05SpecialTreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 15:41:18'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test05SpecialTreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 15:41:18'!
FAILURE!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:41:32' prior: 50888554!
test05SpecialTreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount. 
	Withdraw register: 50 on: myAccount.
	portfolio add: myAccount.
	
	report := (PortfolioSpecialTreeReport with: portfolio) specialTreeReport. 
 	
	
	self assert: 4 equals: report size.
	self assert: 'Portfolio de la familia' equals: (report at: 1).
	self assert: Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Deposit for 100' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Extraction for 50' equals: (report at: 2).	

	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:41:52' prior: 50888607!
test05SpecialTreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount. 
	Withdraw register: 50 on: myAccount.
	portfolio add: myAccount.
	
	report := (PortfolioSpecialTreeReport with: portfolio) specialTreeReport. 
 	
	
	self assert: 5 equals: report size.
	self assert: 'Portfolio de la familia' equals: (report at: 1).
	self assert: Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Deposit for 100' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Extraction for 50' equals: (report at: 2).	
	self assert: Character tab asString, Character tab asString,'Balance = 50' equals: (report at: 2).

	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 15:41:55'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 15:41:55'!
PASSED!

!testRun: #PortfolioTreeReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturnsA stamp: 'DB 11/16/2020 15:41:55'!
PASSED!

!testRun: #PortfolioTreeReportTest #test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 15:41:55'!
PASSED!

!testRun: #PortfolioTreeReportTest #test05SpecialTreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 15:41:55'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test05SpecialTreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 15:41:55'!
FAILURE!
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 15:42:13'!
specialfamilyTree: aReport tabs: tabs

	aReport addMe: tabs,self name.
	"aReport addMe: self name tabs: tabs."
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: tabs,(Character tab asString),(anAccount name)].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount familyTree: aReport tabs: tabs,(Character tab asString)].
	].
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 15:42:21' prior: 50888690!
specialfamilyTree: aReport tabs: tabs

	aReport addMe: tabs,self name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: tabs,(Character tab asString),(anAccount name)].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount familyTree: aReport tabs: tabs,(Character tab asString)].
	].
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 15:45:15' prior: 50888705!
specialfamilyTree: aReport tabs: tabs

	aReport addMe: tabs,self name.
	accounts do: [:anAccount | |report|
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			aReport addMe: tabs,(Character tab asString),(anAccount name).
			
			report := (SummaryReport with: anAccount) summary.
			
			report do: [ :aDetail |
				aReport addMe: tabs,(Character tab asString),(Character tab asString), aDetail.
			]
			
		].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount familyTree: aReport tabs: tabs,(Character tab asString)].
	].
	! !
!PortfolioSpecialTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:45:51' prior: 50888349!
specialTreeReport

	
	portfolio familyTree: self tabs: ''.
	^report.
	! !
!PortfolioSpecialTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:45:56' prior: 50888740!
specialTreeReport

	
	portfolio specialfamilyTree: self tabs: ''.
	^report.
	! !
!PortfolioSpecialTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:46:00' prior: 50888746!
specialTreeReport

	portfolio specialfamilyTree: self tabs: ''.
	^report.
	! !
!PortfolioSpecialTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:46:28'!
addMe: name.

	report add: name.

	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 15:46:33'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 15:46:33'!
PASSED!

!testRun: #PortfolioTreeReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturnsA stamp: 'DB 11/16/2020 15:46:33'!
PASSED!

!testRun: #PortfolioTreeReportTest #test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 15:46:33'!
PASSED!

!testRun: #PortfolioTreeReportTest #test05SpecialTreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 15:46:33'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test05SpecialTreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 15:46:33'!
FAILURE!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:47:01' prior: 50888635!
test05SpecialTreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount. 
	Withdraw register: 50 on: myAccount.
	portfolio add: myAccount.
	
	report := (PortfolioSpecialTreeReport with: portfolio) specialTreeReport. 
 	
	
	self assert: 5 equals: report size.
	self assert: 'Portfolio de la familia' equals: (report at: 1).
	self assert: Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Deposit for 100' equals: (report at: 3).
	self assert: Character tab asString, Character tab asString,'Extraction for 50' equals: (report at: 4).	
	self assert: Character tab asString, Character tab asString,'Balance = 50' equals: (report at: 5).

	! !

!testRun: #PortfolioTreeReportTest #test05SpecialTreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 15:47:03'!
PASSED!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:47:30'!
test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount. 
	Withdraw register: 50 on: myAccount.
	portfolio add: myAccount.
	
	report := (PortfolioSpecialTreeReport with: portfolio) specialTreeReport. 
 	
	
	self assert: 5 equals: report size.
	self assert: 'Portfolio de la familia' equals: (report at: 1).
	self assert: Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Deposit for 100' equals: (report at: 3).
	self assert: Character tab asString, Character tab asString,'Extraction for 50' equals: (report at: 4).	
	self assert: Character tab asString, Character tab asString,'Balance = 50' equals: (report at: 5).

	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:47:40' prior: 50888823!
test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount. 
	Withdraw register: 50 on: myAccount.
	portfolio add: myAccount.
	
	report := (PortfolioSpecialTreeReport with: portfolio) specialTreeReport. 
 	
	self assert: 5 equals: report size.
	self assert: 'Portfolio de la familia' equals: (report at: 1).
	self assert: Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Deposit for 100' equals: (report at: 3).
	self assert: Character tab asString, Character tab asString,'Extraction for 50' equals: (report at: 4).	
	self assert: Character tab asString, Character tab asString,'Balance = 50' equals: (report at: 5).

	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:48:11'!
test05SpecialTreeReportForPortfolioWithOneChildReturns

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount. 
	Withdraw register: 50 on: myAccount.
	portfolio add: myAccount.
	
	report := (PortfolioSpecialTreeReport with: portfolio) specialTreeReport. 
 	
	
	self assert: 5 equals: report size.
	self assert: 'Portfolio de la familia' equals: (report at: 1).
	self assert: Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Deposit for 100' equals: (report at: 3).
	self assert: Character tab asString, Character tab asString,'Extraction for 50' equals: (report at: 4).	
	self assert: Character tab asString, Character tab asString,'Balance = 50' equals: (report at: 5).

	! !

!methodRemoval: PortfolioTreeReportTest #test05SpecialTreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 15:48:11'!
test05SpecialTreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount. 
	Withdraw register: 50 on: myAccount.
	portfolio add: myAccount.
	
	report := (PortfolioSpecialTreeReport with: portfolio) specialTreeReport. 
 	
	
	self assert: 5 equals: report size.
	self assert: 'Portfolio de la familia' equals: (report at: 1).
	self assert: Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Deposit for 100' equals: (report at: 3).
	self assert: Character tab asString, Character tab asString,'Extraction for 50' equals: (report at: 4).	
	self assert: Character tab asString, Character tab asString,'Balance = 50' equals: (report at: 5).

	!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:48:17'!
test03TreeReportForPortfolioWithMoreThanOneChildReturns

	|  familyPorfolio childPortfolio report  angelesAccount childAccount juansAccount |
	
	familyPorfolio :=  Portfolio named: 'Portfolio de la familia'.
	childPortfolio := Portfolio named: 'Portfolio de hijos'.
	
	childAccount := ReceptiveAccount named: 'Cuenta mia'.
	juansAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angelesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	
	childPortfolio add: juansAccount.
	childPortfolio add: angelesAccount.
	
	familyPorfolio add: childAccount.
	familyPorfolio add: childPortfolio.
	
	report := (PortfolioTreeReport with: familyPorfolio) familyTreeReport. 
 	
	self assert: 5 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert:  Character tab asString,'Portfolio de hijos' equals: (report at: 3).	
	self assert:  Character tab asString,Character tab asString,'Cuenta de Juan' equals: (report at: 4).	
	self assert:  Character tab asString,Character tab asString,'Cuenta de Angeles' equals: (report at: 5).	


	! !

!methodRemoval: PortfolioTreeReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturnsA stamp: 'DB 11/16/2020 15:48:17'!
test03TreeReportForPortfolioWithMoreThanOneChildReturnsA

	|  familyPorfolio childPortfolio report  angelesAccount childAccount juansAccount |
	
	familyPorfolio :=  Portfolio named: 'Portfolio de la familia'.
	childPortfolio := Portfolio named: 'Portfolio de hijos'.
	
	childAccount := ReceptiveAccount named: 'Cuenta mia'.
	juansAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angelesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	
	childPortfolio add: juansAccount.
	childPortfolio add: angelesAccount.
	
	familyPorfolio add: childAccount.
	familyPorfolio add: childPortfolio.
	
	report := (PortfolioTreeReport with: familyPorfolio) familyTreeReport. 
 	
	self assert: 5 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert:  Character tab asString,'Portfolio de hijos' equals: (report at: 3).	
	self assert:  Character tab asString,Character tab asString,'Cuenta de Juan' equals: (report at: 4).	
	self assert:  Character tab asString,Character tab asString,'Cuenta de Angeles' equals: (report at: 5).	


	!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:48:21'!
test02TreeReportForPortfolioWithOneChildReturns

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	portfolio add: myAccount.
	
	report := (PortfolioTreeReport with: portfolio) familyTreeReport. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  Character tab asString,'Cuenta mia' equals: (report at: 2)

	! !

!methodRemoval: PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 15:48:21'!
test02TreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	portfolio add: myAccount.
	
	report := (PortfolioTreeReport with: portfolio) familyTreeReport. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  Character tab asString,'Cuenta mia' equals: (report at: 2)

	!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:48:57' prior: 50888855!
test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount. 
	Withdraw register: 50 on: myAccount.
	portfolio add: myAccount.
	
	report := (PortfolioSpecialTreeReport with: portfolio) specialTreeReport. 
 	
	self assert: 5 equals: report size.
	self assert: 'Portfolio de la familia' equals: (report at: 1).
	self assert: Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Deposit for 100' equals: (report at: 3).
	self assert: Character tab asString, Character tab asString,'Extraction for 50' equals: (report at: 4).	
	self assert: Character tab asString, Character tab asString,'Balance = 50' equals: (report at: 5).
	self assert: Character tab asString,'Portfolio de hijos' equals: (report at: 2).

	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:50:38' prior: 50889065!
test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild

	|  familyPorfolio childPortfolio report  angelesAccount childAccount juansAccount anotherAccount portfolio |
	
	familyPorfolio :=  Portfolio named: 'Portfolio de la familia'.
	childPortfolio := Portfolio named: 'Portfolio de hijos'.
	
	childAccount := ReceptiveAccount named: 'Cuenta mia'.
	juansAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angelesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	anotherAccount := ReceptiveAccount named: 'Ahother account'.
	
	Deposit register: 40 on: juansAccount .
	Withdraw register: 10 on: juansAccount .
	
	Transfer register: 50 from: angelesAccount  to: anotherAccount. 
	
	childPortfolio add: juansAccount.
	childPortfolio add: angelesAccount.
	
	familyPorfolio add: childAccount.
	familyPorfolio add: childPortfolio.
	
	
	report := (PortfolioSpecialTreeReport with: portfolio) specialTreeReport. 
 	
	self assert: 5 equals: report size.
	self assert: 'Portfolio de la familia' equals: (report at: 1).
	self assert: Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Deposit for 100' equals: (report at: 3).
	self assert: Character tab asString, Character tab asString,'Extraction for 50' equals: (report at: 4).	
	self assert: Character tab asString, Character tab asString,'Balance = 50' equals: (report at: 5).
	self assert: Character tab asString,'Portfolio de hijos' equals: (report at: 2).

	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:52:53' prior: 50889099!
test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild

	|  familyPorfolio childPortfolio report  angelesAccount childAccount juansAccount anotherAccount portfolio |
	
	familyPorfolio :=  Portfolio named: 'Portfolio de la familia'.
	childPortfolio := Portfolio named: 'Portfolio de hijos'.
	
	childAccount := ReceptiveAccount named: 'Cuenta mia'.
	juansAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angelesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	anotherAccount := ReceptiveAccount named: 'Ahother account'.
	
	Deposit register: 40 on: juansAccount .
	Withdraw register: 10 on: juansAccount .
	
	Transfer register: 50 from: angelesAccount  to: anotherAccount. 
	
	childPortfolio add: juansAccount.
	childPortfolio add: angelesAccount.
	
	familyPorfolio add: childAccount.
	familyPorfolio add: childPortfolio.
	
	
	report := (PortfolioSpecialTreeReport with: portfolio) specialTreeReport. 
 	
	self assert: 5 equals: report size.
	self assert: 'Portfolio de la familia' equals: (report at: 1).
	self assert: Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Deposit for 100' equals: (report at: 3).
	self assert: Character tab asString, Character tab asString,'Extraction for 50' equals: (report at: 4).	
	self assert: Character tab asString, Character tab asString,'Balance = 50' equals: (report at: 5).
	self assert: Character tab asString,'Portfolio de hijos' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Cuenta de Juan' equals: (report at: 3).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Deposit for 40' equals: (report at: 3).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Extraction for 10' equals: (report at: 4).	
	self assert: Character tab asString, Character tab asString,Character tab asString,'Balance = 30' equals: (report at: 5).	
	self assert: Character tab asString, Character tab asString,'Cuenta de Angeles' equals: (report at: 3).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Deposit for 40' equals: (report at: 3).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Balance = 30' equals: (report at: 5).	

	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:54:41' prior: 50889150!
test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild

	|  familyPorfolio childPortfolio report  angelesAccount childAccount juansAccount anotherAccount |
	
	familyPorfolio :=  Portfolio named: 'Portfolio de la familia'.
	childPortfolio := Portfolio named: 'Portfolio de hijos'.
	
	childAccount := ReceptiveAccount named: 'Cuenta mia'.
	juansAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angelesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	anotherAccount := ReceptiveAccount named: 'Ahother account'.
	
	Deposit register: 40 on: juansAccount .
	Withdraw register: 10 on: juansAccount .
	
	Transfer register: 50 from: angelesAccount  to: anotherAccount. 
	
	childPortfolio add: juansAccount.
	childPortfolio add: angelesAccount.
	
	familyPorfolio add: childAccount.
	familyPorfolio add: childPortfolio.
	
	
	report := (PortfolioSpecialTreeReport with: familyPorfolio) specialTreeReport. 
 	
	self assert: 5 equals: report size.
	self assert: 'Portfolio de la familia' equals: (report at: 1).
	self assert: Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Deposit for 100' equals: (report at: 3).
	self assert: Character tab asString, Character tab asString,'Extraction for 50' equals: (report at: 4).	
	self assert: Character tab asString, Character tab asString,'Balance = 50' equals: (report at: 5).
	self assert: Character tab asString,'Portfolio de hijos' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Cuenta de Juan' equals: (report at: 3).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Deposit for 40' equals: (report at: 3).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Extraction for 10' equals: (report at: 4).	
	self assert: Character tab asString, Character tab asString,Character tab asString,'Balance = 30' equals: (report at: 5).	
	self assert: Character tab asString, Character tab asString,'Cuenta de Angeles' equals: (report at: 3).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Output by transfer of 50' equals: (report at: 3).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Balance = -50' equals: (report at: 5).	

	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:55:15' prior: 50889227!
test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild

	|  familyPorfolio childPortfolio report  angelesAccount childAccount juansAccount anotherAccount |
	
	familyPorfolio :=  Portfolio named: 'Portfolio de la familia'.
	childPortfolio := Portfolio named: 'Portfolio de hijos'.
	
	childAccount := ReceptiveAccount named: 'Cuenta mia'.
	juansAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angelesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	anotherAccount := ReceptiveAccount named: 'Ahother account'.
	
	Deposit register: 40 on: juansAccount .
	Withdraw register: 10 on: juansAccount .
	
	Transfer register: 50 from: angelesAccount  to: anotherAccount. 
	
	childPortfolio add: juansAccount.
	childPortfolio add: angelesAccount.
	
	familyPorfolio add: childAccount.
	familyPorfolio add: childPortfolio.
	
	
	report := (PortfolioSpecialTreeReport with: familyPorfolio) specialTreeReport. 
 	
	self assert: 5 equals: report size.
	self assert: 'Portfolio de la familia' equals: (report at: 1).
	self assert: Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Deposit for 100' equals: (report at: 3).
	self assert: Character tab asString, Character tab asString,'Extraction for 50' equals: (report at: 4).	
	self assert: Character tab asString, Character tab asString,'Balance = 50' equals: (report at: 5).
	self assert: Character tab asString,'Portfolio de hijos' equals: (report at: 6).
	self assert: Character tab asString, Character tab asString,'Cuenta de Juan' equals: (report at: 7).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Deposit for 40' equals: (report at: 8).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Extraction for 10' equals: (report at: 9).	
	self assert: Character tab asString, Character tab asString,Character tab asString,'Balance = 30' equals: (report at: 10).	
	self assert: Character tab asString, Character tab asString,'Cuenta de Angeles' equals: (report at: 11).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Output by transfer of 50' equals: (report at: 12).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Balance = -50' equals: (report at: 13).	

	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 15:55:19'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 15:55:19'!
PASSED!

!testRun: #PortfolioTreeReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturns stamp: 'DB 11/16/2020 15:55:19'!
PASSED!

!testRun: #PortfolioTreeReportTest #test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 15:55:19'!
PASSED!

!testRun: #PortfolioTreeReportTest #test05SpecialTreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 15:55:19'!
PASSED!

!testRun: #PortfolioTreeReportTest #test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild stamp: 'DB 11/16/2020 15:55:19'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild stamp: 'DB 11/16/2020 15:55:19'!
FAILURE!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:55:31' prior: 50889304!
test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild

	|  familyPorfolio childPortfolio report  angelesAccount childAccount juansAccount anotherAccount |
	
	familyPorfolio :=  Portfolio named: 'Portfolio de la familia'.
	childPortfolio := Portfolio named: 'Portfolio de hijos'.
	
	childAccount := ReceptiveAccount named: 'Cuenta mia'.
	juansAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angelesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	anotherAccount := ReceptiveAccount named: 'Ahother account'.
	
	Deposit register: 40 on: juansAccount .
	Withdraw register: 10 on: juansAccount .
	
	Transfer register: 50 from: angelesAccount  to: anotherAccount. 
	
	childPortfolio add: juansAccount.
	childPortfolio add: angelesAccount.
	
	familyPorfolio add: childAccount.
	familyPorfolio add: childPortfolio.
	
	
	report := (PortfolioSpecialTreeReport with: familyPorfolio) specialTreeReport. 
 	
	self assert: 13 equals: report size.
	self assert: 'Portfolio de la familia' equals: (report at: 1).
	self assert: Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Deposit for 100' equals: (report at: 3).
	self assert: Character tab asString, Character tab asString,'Extraction for 50' equals: (report at: 4).	
	self assert: Character tab asString, Character tab asString,'Balance = 50' equals: (report at: 5).
	self assert: Character tab asString,'Portfolio de hijos' equals: (report at: 6).
	self assert: Character tab asString, Character tab asString,'Cuenta de Juan' equals: (report at: 7).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Deposit for 40' equals: (report at: 8).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Extraction for 10' equals: (report at: 9).	
	self assert: Character tab asString, Character tab asString,Character tab asString,'Balance = 30' equals: (report at: 10).	
	self assert: Character tab asString, Character tab asString,'Cuenta de Angeles' equals: (report at: 11).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Output by transfer of 50' equals: (report at: 12).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Balance = -50' equals: (report at: 13).	

	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 15:55:36'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 15:55:36'!
PASSED!

!testRun: #PortfolioTreeReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturns stamp: 'DB 11/16/2020 15:55:36'!
PASSED!

!testRun: #PortfolioTreeReportTest #test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 15:55:36'!
PASSED!

!testRun: #PortfolioTreeReportTest #test05SpecialTreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 15:55:36'!
PASSED!

!testRun: #PortfolioTreeReportTest #test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild stamp: 'DB 11/16/2020 15:55:36'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild stamp: 'DB 11/16/2020 15:55:36'!
FAILURE!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:57:23' prior: 50889411!
test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild

	|  familyPorfolio childPortfolio report  angelesAccount childAccount juansAccount anotherAccount |
	
	familyPorfolio :=  Portfolio named: 'Portfolio de la familia'.
	childPortfolio := Portfolio named: 'Portfolio de hijos'.
	
	childAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 60 on: childAccount.
	Withdraw register: 30 on: childAccount.
	
	juansAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angelesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	anotherAccount := ReceptiveAccount named: 'Ahother account'.
	
	Deposit register: 40 on: juansAccount .
	Withdraw register: 10 on: juansAccount .
	
	Transfer register: 50 from: angelesAccount  to: anotherAccount. 
	
	childPortfolio add: juansAccount.
	childPortfolio add: angelesAccount.
	
	familyPorfolio add: childAccount.
	familyPorfolio add: childPortfolio.
	
	
	report := (PortfolioSpecialTreeReport with: familyPorfolio) specialTreeReport. 
 	
	self assert: 13 equals: report size.
	self assert: 'Portfolio de la familia' equals: (report at: 1).
	self assert: Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Deposit for 100' equals: (report at: 3).
	self assert: Character tab asString, Character tab asString,'Extraction for 50' equals: (report at: 4).	
	self assert: Character tab asString, Character tab asString,'Balance = 50' equals: (report at: 5).
	self assert: Character tab asString,'Portfolio de hijos' equals: (report at: 6).
	self assert: Character tab asString, Character tab asString,'Cuenta de Juan' equals: (report at: 7).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Deposit for 40' equals: (report at: 8).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Extraction for 10' equals: (report at: 9).	
	self assert: Character tab asString, Character tab asString,Character tab asString,'Balance = 30' equals: (report at: 10).	
	self assert: Character tab asString, Character tab asString,'Cuenta de Angeles' equals: (report at: 11).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Output by transfer of 50' equals: (report at: 12).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Balance = -50' equals: (report at: 13).	

	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:57:47' prior: 50889518!
test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild

	|  familyPorfolio childPortfolio report  angelesAccount childAccount juansAccount anotherAccount |
	
	familyPorfolio :=  Portfolio named: 'Portfolio de la familia'.
	childPortfolio := Portfolio named: 'Portfolio de hijos'.
	
	childAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 60 on: childAccount.
	Withdraw register: 30 on: childAccount.
	
	juansAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angelesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	anotherAccount := ReceptiveAccount named: 'Ahother account'.
	
	Deposit register: 40 on: juansAccount .
	Withdraw register: 10 on: juansAccount .
	
	Transfer register: 50 from: angelesAccount  to: anotherAccount. 
	
	childPortfolio add: juansAccount.
	childPortfolio add: angelesAccount.
	
	familyPorfolio add: childAccount.
	familyPorfolio add: childPortfolio.
	
	
	report := (PortfolioSpecialTreeReport with: familyPorfolio) specialTreeReport. 
 	
	self assert: 13 equals: report size.
	self assert: 'Portfolio de la familia' equals: (report at: 1).
	self assert: Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Deposit for 60' equals: (report at: 3).
	self assert: Character tab asString, Character tab asString,'Extraction for 20' equals: (report at: 4).	
	self assert: Character tab asString, Character tab asString,'Balance = 40' equals: (report at: 5).
	self assert: Character tab asString,'Portfolio de hijos' equals: (report at: 6).
	self assert: Character tab asString, Character tab asString,'Cuenta de Juan' equals: (report at: 7).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Deposit for 40' equals: (report at: 8).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Extraction for 10' equals: (report at: 9).	
	self assert: Character tab asString, Character tab asString,Character tab asString,'Balance = 30' equals: (report at: 10).	
	self assert: Character tab asString, Character tab asString,'Cuenta de Angeles' equals: (report at: 11).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Output by transfer of 50' equals: (report at: 12).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Balance = -50' equals: (report at: 13).	

	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 15:57:51' prior: 50889598!
test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild

	|  familyPorfolio childPortfolio report  angelesAccount childAccount juansAccount anotherAccount |
	
	familyPorfolio :=  Portfolio named: 'Portfolio de la familia'.
	childPortfolio := Portfolio named: 'Portfolio de hijos'.
	
	childAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 60 on: childAccount.
	Withdraw register: 20 on: childAccount.
	
	juansAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angelesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	anotherAccount := ReceptiveAccount named: 'Ahother account'.
	
	Deposit register: 40 on: juansAccount .
	Withdraw register: 10 on: juansAccount .
	
	Transfer register: 50 from: angelesAccount  to: anotherAccount. 
	
	childPortfolio add: juansAccount.
	childPortfolio add: angelesAccount.
	
	familyPorfolio add: childAccount.
	familyPorfolio add: childPortfolio.
	
	
	report := (PortfolioSpecialTreeReport with: familyPorfolio) specialTreeReport. 
 	
	self assert: 13 equals: report size.
	self assert: 'Portfolio de la familia' equals: (report at: 1).
	self assert: Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Deposit for 60' equals: (report at: 3).
	self assert: Character tab asString, Character tab asString,'Extraction for 20' equals: (report at: 4).	
	self assert: Character tab asString, Character tab asString,'Balance = 40' equals: (report at: 5).
	self assert: Character tab asString,'Portfolio de hijos' equals: (report at: 6).
	self assert: Character tab asString, Character tab asString,'Cuenta de Juan' equals: (report at: 7).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Deposit for 40' equals: (report at: 8).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Extraction for 10' equals: (report at: 9).	
	self assert: Character tab asString, Character tab asString,Character tab asString,'Balance = 30' equals: (report at: 10).	
	self assert: Character tab asString, Character tab asString,'Cuenta de Angeles' equals: (report at: 11).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Output by transfer of 50' equals: (report at: 12).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Balance = -50' equals: (report at: 13).	

	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 15:58:01'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 15:58:01'!
PASSED!

!testRun: #PortfolioTreeReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturns stamp: 'DB 11/16/2020 15:58:01'!
PASSED!

!testRun: #PortfolioTreeReportTest #test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 15:58:01'!
PASSED!

!testRun: #PortfolioTreeReportTest #test05SpecialTreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 15:58:01'!
PASSED!

!testRun: #PortfolioTreeReportTest #test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild stamp: 'DB 11/16/2020 15:58:01'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild stamp: 'DB 11/16/2020 15:58:01'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild stamp: 'DB 11/16/2020 15:59:00'!
FAILURE!
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 15:59:49' prior: 50888719!
specialfamilyTree: aReport tabs: tabs

	aReport addMe: tabs,self name.
	accounts do: [:anAccount | |report|
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			aReport addMe: tabs,(Character tab asString),(anAccount name).
			
			report := (SummaryReport with: anAccount) summary.
			
			report do: [ :aDetail |
				aReport addMe: tabs,(Character tab asString),(Character tab asString), aDetail.
			]
			
		].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount specialfamilyTree: aReport tabs: tabs,(Character tab asString)].
	].
	! !

!testRun: #PortfolioTreeReportTest #test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild stamp: 'DB 11/16/2020 15:59:51'!
FAILURE!
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 16:00:25' prior: 50889791!
specialfamilyTree: aReport tabs: tabs

	aReport addMe: tabs,self name.
	accounts do: [:anAccount | |report|
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			aReport addMe: tabs,(Character tab asString),(anAccount name).
			
			report := (SummaryReport with: anAccount) summary.
			
			report do: [ :aDetail |
				aReport addMe: tabs,(Character tab asString),(Character tab asString), aDetail.
			]
			
		].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount specialfamilyTree: aReport tabs: tabs,(Character tab asString)].
	].
	aReport addMe: tabs, self balance.
	! !

!testRun: #PortfolioTreeReportTest #test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild stamp: 'DB 11/16/2020 16:00:29'!
ERROR!
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 16:00:54' prior: 50889816!
specialfamilyTree: aReport tabs: tabs

	aReport addMe: tabs,self name.
	accounts do: [:anAccount | |report|
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			aReport addMe: tabs,(Character tab asString),(anAccount name).
			
			report := (SummaryReport with: anAccount) summary.
			
			report do: [ :aDetail |
				aReport addMe: tabs,(Character tab asString),(Character tab asString), aDetail.
			]
			
		].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount specialfamilyTree: aReport tabs: tabs,(Character tab asString)].
	].
	aReport addMe: tabs, self balance.
	! !

!testRun: #PortfolioTreeReportTest #test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild stamp: 'DB 11/16/2020 16:01:19'!
ERROR!
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 16:02:31' prior: 50889842!
specialfamilyTree: aReport tabs: tabs

	aReport addMe: tabs,self name.
	accounts do: [:anAccount | |report|
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			aReport addMe: tabs,(Character tab asString),(anAccount name).
			
			report := (SummaryReport with: anAccount) summary.
			
			report do: [ :aDetail |
				aReport addMe: tabs,(Character tab asString),(Character tab asString), aDetail.
			]
			
		].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount specialfamilyTree: aReport tabs: tabs,(Character tab asString)].
	].
	aReport addMe: tabs, 'Balance = ',(self balance asString).
	! !

!testRun: #PortfolioTreeReportTest #test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild stamp: 'DB 11/16/2020 16:02:34'!
ERROR!

self balance asString!

 report size!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:04:31' prior: 50889678!
test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild

	|  familyPorfolio childPortfolio report  angelesAccount childAccount juansAccount anotherAccount |
	
	familyPorfolio :=  Portfolio named: 'Portfolio de la familia'.
	childPortfolio := Portfolio named: 'Portfolio de hijos'.
	
	childAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 60 on: childAccount.
	Withdraw register: 20 on: childAccount.
	
	juansAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angelesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	anotherAccount := ReceptiveAccount named: 'Ahother account'.
	
	Deposit register: 40 on: juansAccount .
	Withdraw register: 10 on: juansAccount .
	
	Transfer register: 50 from: angelesAccount  to: anotherAccount. 
	
	childPortfolio add: juansAccount.
	childPortfolio add: angelesAccount.
	
	familyPorfolio add: childAccount.
	familyPorfolio add: childPortfolio.
	
	
	report := (PortfolioSpecialTreeReport with: familyPorfolio) specialTreeReport. 
 	
	self assert: 15 equals: report size.
	self assert: 'Portfolio de la familia' equals: (report at: 1).
	self assert: Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Deposit for 60' equals: (report at: 3).
	self assert: Character tab asString, Character tab asString,'Extraction for 20' equals: (report at: 4).	
	self assert: Character tab asString, Character tab asString,'Balance = 40' equals: (report at: 5).
	self assert: Character tab asString,'Portfolio de hijos' equals: (report at: 6).
	self assert: Character tab asString, Character tab asString,'Cuenta de Juan' equals: (report at: 7).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Deposit for 40' equals: (report at: 8).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Extraction for 10' equals: (report at: 9).	
	self assert: Character tab asString, Character tab asString,Character tab asString,'Balance = 30' equals: (report at: 10).	
	self assert: Character tab asString, Character tab asString,'Cuenta de Angeles' equals: (report at: 11).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Output by transfer of 50' equals: (report at: 12).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Balance = -50' equals: (report at: 13).	
	self assert: Character tab asString, Character tab asString,'Balance = -50' equals: (report at: 14).	
	self assert: Character tab asString,'Balance = -50' equals: (report at: 15).	
	! !

!testRun: #PortfolioTreeReportTest #test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild stamp: 'DB 11/16/2020 16:04:53'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild stamp: 'DB 11/16/2020 16:07:03'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild stamp: 'DB 11/16/2020 16:07:24'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild stamp: 'DB 11/16/2020 16:08:02'!
FAILURE!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:08:17' prior: 50889896!
test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild

	|  familyPorfolio childPortfolio report  angelesAccount childAccount juansAccount anotherAccount |
	
	familyPorfolio :=  Portfolio named: 'Portfolio de la familia'.
	childPortfolio := Portfolio named: 'Portfolio de hijos'.
	
	childAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 60 on: childAccount.
	Withdraw register: 20 on: childAccount.
	
	juansAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angelesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	anotherAccount := ReceptiveAccount named: 'Ahother account'.
	
	Deposit register: 40 on: juansAccount .
	Withdraw register: 10 on: juansAccount .
	
	Transfer register: 50 from: angelesAccount  to: anotherAccount. 
	
	childPortfolio add: juansAccount.
	childPortfolio add: angelesAccount.
	
	familyPorfolio add: childAccount.
	familyPorfolio add: childPortfolio.
	
	
	report := (PortfolioSpecialTreeReport with: familyPorfolio) specialTreeReport. 
 	
	self assert: 15 equals: report size.
	self assert: 'Portfolio de la familia' equals: (report at: 1).
	self assert: Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Deposit for 60' equals: (report at: 3).
	self assert: Character tab asString, Character tab asString,'Extraction for 20' equals: (report at: 4).	
	self assert: Character tab asString, Character tab asString,'Balance = 40' equals: (report at: 5).
	self assert: Character tab asString,'Portfolio de hijos' equals: (report at: 6).
	self assert: Character tab asString, Character tab asString,'Cuenta de Juan' equals: (report at: 7).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Deposit for 40' equals: (report at: 8).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Extraction for 10' equals: (report at: 9).	
	self assert: Character tab asString, Character tab asString,Character tab asString,'Balance = 30' equals: (report at: 10).	
	self assert: Character tab asString, Character tab asString,'Cuenta de Angeles' equals: (report at: 11).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Output by transfer of 50' equals: (report at: 12).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Balance = -50' equals: (report at: 13).	
	self assert: Character tab asString, Character tab asString,'Balance = -20' equals: (report at: 14).	
	self assert: Character tab asString,'Balance = -50' equals: (report at: 15).	
	! !

!testRun: #PortfolioTreeReportTest #test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild stamp: 'DB 11/16/2020 16:08:18'!
FAILURE!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:08:50' prior: 50889999!
test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild

	|  familyPorfolio childPortfolio report  angelesAccount childAccount juansAccount anotherAccount |
	
	familyPorfolio :=  Portfolio named: 'Portfolio de la familia'.
	childPortfolio := Portfolio named: 'Portfolio de hijos'.
	
	childAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 60 on: childAccount.
	Withdraw register: 20 on: childAccount.
	
	juansAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angelesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	anotherAccount := ReceptiveAccount named: 'Ahother account'.
	
	Deposit register: 40 on: juansAccount .
	Withdraw register: 10 on: juansAccount .
	
	Transfer register: 50 from: angelesAccount  to: anotherAccount. 
	
	childPortfolio add: juansAccount.
	childPortfolio add: angelesAccount.
	
	familyPorfolio add: childAccount.
	familyPorfolio add: childPortfolio.
	
	
	report := (PortfolioSpecialTreeReport with: familyPorfolio) specialTreeReport. 
 	
	self assert: 15 equals: report size.
	self assert: 'Portfolio de la familia' equals: (report at: 1).
	self assert: Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Deposit for 60' equals: (report at: 3).
	self assert: Character tab asString, Character tab asString,'Extraction for 20' equals: (report at: 4).	
	self assert: Character tab asString, Character tab asString,'Balance = 40' equals: (report at: 5).
	self assert: Character tab asString,'Portfolio de hijos' equals: (report at: 6).
	self assert: Character tab asString, Character tab asString,'Cuenta de Juan' equals: (report at: 7).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Deposit for 40' equals: (report at: 8).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Extraction for 10' equals: (report at: 9).	
	self assert: Character tab asString, Character tab asString,Character tab asString,'Balance = 30' equals: (report at: 10).	
	self assert: Character tab asString, Character tab asString,'Cuenta de Angeles' equals: (report at: 11).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Output by transfer of 50' equals: (report at: 12).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Balance = -50' equals: (report at: 13).	
	self assert: Character tab asString, Character tab asString,'Balance = -20' equals: (report at: 14).	
	self assert: Character tab asString,'Balance = 20' equals: (report at: 15).	
	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:09:32' prior: 50890089!
test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild

	|  familyPorfolio childPortfolio report  angelesAccount childAccount juansAccount anotherAccount |
	
	familyPorfolio :=  Portfolio named: 'Portfolio de la familia'.
	childPortfolio := Portfolio named: 'Portfolio de hijos'.
	
	childAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 60 on: childAccount.
	Withdraw register: 20 on: childAccount.
	
	juansAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angelesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	anotherAccount := ReceptiveAccount named: 'Ahother account'.
	
	Deposit register: 40 on: juansAccount .
	Withdraw register: 10 on: juansAccount .
	
	Transfer register: 50 from: angelesAccount  to: anotherAccount. 
	
	childPortfolio add: juansAccount.
	childPortfolio add: angelesAccount.
	
	familyPorfolio add: childAccount.
	familyPorfolio add: childPortfolio.
	
	
	report := (PortfolioSpecialTreeReport with: familyPorfolio) specialTreeReport. 
 	
	self assert: 15 equals: report size.
	self assert: 'Portfolio de la familia' equals: (report at: 1).
	self assert: Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Deposit for 60' equals: (report at: 3).
	self assert: Character tab asString, Character tab asString,'Extraction for 20' equals: (report at: 4).	
	self assert: Character tab asString, Character tab asString,'Balance = 40' equals: (report at: 5).
	self assert: Character tab asString,'Portfolio de hijos' equals: (report at: 6).
	self assert: Character tab asString, Character tab asString,'Cuenta de Juan' equals: (report at: 7).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Deposit for 40' equals: (report at: 8).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Extraction for 10' equals: (report at: 9).	
	self assert: Character tab asString, Character tab asString,Character tab asString,'Balance = 30' equals: (report at: 10).	
	self assert: Character tab asString, Character tab asString,'Cuenta de Angeles' equals: (report at: 11).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Output by transfer of 50' equals: (report at: 12).
	self assert: Character tab asString, Character tab asString,Character tab asString,'Balance = -50' equals: (report at: 13).	
	self assert: Character tab asString, Character tab asString,'Balance = -20' equals: (report at: 14).	
	self assert: Character tab asString,'Balance = 20' equals: (report at: 15).	
	! !

!testRun: #PortfolioTreeReportTest #test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild stamp: 'DB 11/16/2020 16:10:08'!
FAILURE!
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 16:12:15' prior: 50889868!
specialfamilyTree: aReport tabs: tabs

	aReport addMe: tabs,self name.
	accounts do: [:anAccount | |report|
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			aReport addMe: tabs,(Character tab asString),(anAccount name).
			
			report := (SummaryReport with: anAccount) summary.
			
			report do: [ :aDetail |
				aReport addMe: tabs,(Character tab asString),(Character tab asString), aDetail.
			]
			
		].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount specialfamilyTree: aReport tabs: tabs,(Character tab asString)].
	].
	aReport addMe: tabs,(Character tab asString), 'Balance = ',(self balance asString).
	! !

!testRun: #PortfolioTreeReportTest #test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild stamp: 'DB 11/16/2020 16:12:19'!
PASSED!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 16:12:21'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 16:12:21'!
PASSED!

!testRun: #PortfolioTreeReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturns stamp: 'DB 11/16/2020 16:12:21'!
PASSED!

!testRun: #PortfolioTreeReportTest #test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 16:12:21'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test05SpecialTreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 16:12:21'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild stamp: 'DB 11/16/2020 16:12:21'!
PASSED!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:12:55' prior: 50888272!
test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport

	|  portfolio report |
	
	portfolio :=  Portfolio named: 'Empty Portfolio'.
	
	report := (PortfolioSpecialTreeReport with: portfolio) specialTreeReport. 
 	
	self assert: 2 equals: report size.
	self assert:  'Empty Portfolio' equals: (report at: 1).
	self assert:  'Balance = 0' equals: (report at: 2).

	! !

!testRun: #PortfolioTreeReportTest #test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 16:12:56'!
FAILURE!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:13:16' prior: 50890316!
test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport

	|  portfolio report |
	
	portfolio :=  Portfolio named: 'Empty Portfolio'.
	
	report := (PortfolioSpecialTreeReport with: portfolio) specialTreeReport. 
 	
	self assert: 2 equals: report size.
	self assert:  'Empty Portfolio' equals: (report at: 1).
	self assert:  Character tab asString,'Balance = 0' equals: (report at: 2).

	! !

!testRun: #PortfolioTreeReportTest #test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 16:13:17'!
PASSED!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:13:44' prior: 50888886!
test05SpecialTreeReportForPortfolioWithOneChildReturns

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	Deposit register: 100 on: myAccount. 
	Withdraw register: 50 on: myAccount.
	portfolio add: myAccount.
	
	report := (PortfolioSpecialTreeReport with: portfolio) specialTreeReport. 
 	
	
	self assert: 6 equals: report size.
	self assert: 'Portfolio de la familia' equals: (report at: 1).
	self assert: Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert: Character tab asString, Character tab asString,'Deposit for 100' equals: (report at: 3).
	self assert: Character tab asString, Character tab asString,'Extraction for 50' equals: (report at: 4).	
	self assert: Character tab asString, Character tab asString,'Balance = 50' equals: (report at: 5).
	self assert: Character tab asString, 'Balance = 50' equals: (report at: 6).

	! !

!testRun: #PortfolioTreeReportTest #test05SpecialTreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 16:13:45'!
PASSED!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 16:13:48'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 16:13:48'!
PASSED!

!testRun: #PortfolioTreeReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturns stamp: 'DB 11/16/2020 16:13:48'!
PASSED!

!testRun: #PortfolioTreeReportTest #test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 16:13:48'!
PASSED!

!testRun: #PortfolioTreeReportTest #test05SpecialTreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 16:13:48'!
PASSED!

!testRun: #PortfolioTreeReportTest #test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild stamp: 'DB 11/16/2020 16:13:48'!
PASSED!
!Portfolio methodsFor: 'reports' stamp: 'DB 11/16/2020 16:14:29' prior: 50887427!
familyTree: aReport tabs: tabs

	aReport addMe: tabs,self name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: tabs,(Character tab asString),(anAccount name)].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount familyTree: aReport tabs: tabs,(Character tab asString)].
	].
	! !
!Account methodsFor: 'transactions' stamp: 'DB 11/16/2020 16:15:48'!
reportTreeTo: aReport

	self transactions do: [ :aTransaction | 
		aTransaction reportTo: aReport.
	].! !
!Account methodsFor: 'transactions' stamp: 'DB 11/16/2020 16:16:14' prior: 50890431!
reportTreeTo: aReport

	self transactions do: [ :aTransaction | 
		aTransaction reportTo: aReport.
	].
! !
!Portfolio methodsFor: 'reports' stamp: 'DB 11/16/2020 16:19:39' prior: 50890263!
specialfamilyTree: aReport tabs: tabs



	aReport addMe: tabs,self name.
	accounts do: [:anAccount | |report|
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			aReport addMe: tabs,(Character tab asString),(anAccount name).
			
			report := (SummaryReport with: anAccount) summary.
			
			report do: [ :aDetail |
				aReport addMe: tabs,(Character tab asString),(Character tab asString), aDetail.
			]
			
		].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount specialfamilyTree: aReport tabs: tabs,(Character tab asString)].
	].
	aReport addMe: tabs,(Character tab asString), 'Balance = ',(self balance asString).
	! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'DB 11/16/2020 16:21:16' overrides: 50885536!
reportTo: aReport
	aReport reportAsReceptiveAccount: self. 
	
	! !
!Portfolio methodsFor: 'reports' stamp: 'DB 11/16/2020 16:23:16'!
reportTo: aReport tabs: tabs
	aReport reportAsPortfolio: self tabs: tabs.
	accounts do: [:anAccount |
		aReport reportTo: aReport.
	].
	! !
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:23:52' prior: 50887294!
familyTreeReport 

	portfolio reportTo: self tabs: ''.
	^report.
	! !
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:24:21'!
reportAsReceptiveAccount: anAccount


	portfolio reportTo: self tabs: ''.
	^report.
	! !
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:24:27'!
reportAsReceptiveAccount: anAccount tabs: tabs.


	portfolio reportTo: self tabs: ''.
	^report.
	! !
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:25:06' prior: 50890490!
reportAsReceptiveAccount: anAccount tabs: tabs.

	self addMe: tabs,(Character tab asString),(anAccount name)
	! !
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:25:07' prior: 50890497!
reportAsReceptiveAccount: anAccount tabs: tabs.
	self addMe: tabs,(Character tab asString),(anAccount name)
	! !
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:25:14'!
reportAsPortfolioAccount: anAccount tabs: tabs.
	self addMe: tabs,(Character tab asString),(anAccount name)
	! !

!methodRemoval: PortfolioTreeReport #reportAsReceptiveAccount: stamp: 'DB 11/16/2020 16:25:19'!
reportAsReceptiveAccount: anAccount


	portfolio reportTo: self tabs: ''.
	^report.
	!
!Portfolio methodsFor: 'reports' stamp: 'DB 11/16/2020 16:27:17' prior: 50890471!
reportTo: aReport tabs: tabs
	aReport reportAsPortfolioPrefix: self tabs: tabs.
	accounts do: [:anAccount |
		aReport reportTo: aReport.
	].
	aReport reportAsPortfolioPostfix: self tabs: tabs.
	! !
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:27:44'!
reportAsPortfolioPrefix: anAccount tabs: tabs.
	self addMe: tabs,(Character tab asString),(anAccount name)
	! !

!methodRemoval: PortfolioTreeReport #reportAsPortfolioAccount:tabs: stamp: 'DB 11/16/2020 16:27:44'!
reportAsPortfolioAccount: anAccount tabs: tabs.
	self addMe: tabs,(Character tab asString),(anAccount name)
	!
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:27:53'!
reportAsPortfolioPostfix: anAccount tabs: tabs.
	
	! !
!Account methodsFor: 'transactions' stamp: 'DB 11/16/2020 16:31:21'!
tabs: tabs reportTo: aReport

	self transactions do: [ :aTransaction | 
		aTransaction reportTo: aReport.
	].! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'DB 11/16/2020 16:31:21' overrides: 50890549!
tabs: tabs reportTo: aReport
	aReport reportAsReceptiveAccount: self. 
	
	! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:31:21' prior: 50885176!
summary

	account tabs: tabs reportTo: self.
	summary add: 'Balance = ' , account balance asString .
	^summary.! !
!TransferNetReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:31:21' prior: 50885183!
transferNet

	account tabs: tabs reportTo: self.
	^net.! !
!Account methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:31:21' prior: 50890549!
tabs: tabs reportTo: aReport

	self transactions do: [ :aTransaction | 
		aTransaction reportTo: aReport.
	].! !

!methodRemoval: Account #reportTo: stamp: 'DB 11/16/2020 16:31:21'!
reportTo: aReport

	self transactions do: [ :aTransaction | 
		aTransaction reportTo: aReport.
	].!

!methodRemoval: ReceptiveAccount #reportTo: stamp: 'DB 11/16/2020 16:31:21'!
reportTo: aReport
	aReport reportAsReceptiveAccount: self. 
	
	!
!ReceptiveAccount methodsFor: 'composition' stamp: 'DB 11/16/2020 16:31:43'!
reportTo: aReport tabs: tabs 
	aReport reportAsReceptiveAccount: self tabs: tabs.
	
	! !

!methodRemoval: ReceptiveAccount #tabs:reportTo: stamp: 'DB 11/16/2020 16:31:48'!
tabs: tabs reportTo: aReport
	aReport reportAsReceptiveAccount: self. 
	
	!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 16:33:03'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 16:33:03'!
ERROR!

!testRun: #PortfolioTreeReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturns stamp: 'DB 11/16/2020 16:33:03'!
ERROR!

!testRun: #PortfolioTreeReportTest #test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 16:33:03'!
PASSED!

!testRun: #PortfolioTreeReportTest #test05SpecialTreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 16:33:03'!
PASSED!

!testRun: #PortfolioTreeReportTest #test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild stamp: 'DB 11/16/2020 16:33:03'!
PASSED!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 16:33:08'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 16:33:08'!
ERROR!

!testRun: #PortfolioTreeReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturns stamp: 'DB 11/16/2020 16:33:08'!
ERROR!

!testRun: #PortfolioTreeReportTest #test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 16:33:08'!
PASSED!

!testRun: #PortfolioTreeReportTest #test05SpecialTreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 16:33:08'!
PASSED!

!testRun: #PortfolioTreeReportTest #test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild stamp: 'DB 11/16/2020 16:33:08'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 16:33:24'!
ERROR!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 16:33:52'!
ERROR!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 16:34:00'!
ERROR!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 16:34:07'!
ERROR!
!Portfolio methodsFor: 'reports' stamp: 'DB 11/16/2020 16:34:31' prior: 50890523!
reportTo: aReport tabs: tabs
	aReport reportAsPortfolioPrefix: self tabs: tabs.
	accounts do: [:anAccount |
		aReport reportTo: aReport tabs: tabs.
	].
	aReport reportAsPortfolioPostfix: self tabs: tabs.
	! !

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 16:34:52'!
ERROR!
!Portfolio methodsFor: 'reports' stamp: 'DB 11/16/2020 16:35:06' prior: 50890666!
reportTo: aReport tabs: tabs
	aReport reportAsPortfolioPrefix: self tabs: tabs.
	accounts do: [:anAccount |
		anAccount reportTo: aReport tabs: tabs.
	].
	aReport reportAsPortfolioPostfix: self tabs: tabs.
	! !

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 16:35:48'!
FAILURE!

Object subclass: #PortfolioReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioReport category: 'Portfolio-Solucion' stamp: 'DB 11/16/2020 16:37:22'!
Object subclass: #PortfolioReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

PortfolioReport subclass: #PortfolioSpecialTreeReport
	instanceVariableNames: 'portfolio report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioSpecialTreeReport category: 'Portfolio-Solucion' stamp: 'DB 11/16/2020 16:37:33'!
PortfolioReport subclass: #PortfolioSpecialTreeReport
	instanceVariableNames: 'portfolio report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

PortfolioReport subclass: #PortfolioTreeReport
	instanceVariableNames: 'portfolio report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTreeReport category: 'Portfolio-Solucion' stamp: 'DB 11/16/2020 16:37:39'!
PortfolioReport subclass: #PortfolioTreeReport
	instanceVariableNames: 'portfolio report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:38:05' prior: 50890532!
reportAsPortfolioPrefix: anAccount tabs: tabs.
	self addMe: tabs,anAccount name
	! !

!classRenamed: #PortfolioTreeReportTest as: #PortfolioReportTest stamp: 'DB 11/16/2020 16:38:31'!
Smalltalk renameClassNamed: #PortfolioTreeReportTest as: #PortfolioReportTest!

!testRun: #PortfolioReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 16:38:35'!
PASSED!

!testRun: #PortfolioReportTest #test02TreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 16:38:35'!
PASSED!

!testRun: #PortfolioReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturns stamp: 'DB 11/16/2020 16:38:35'!
FAILURE!

!testRun: #PortfolioReportTest #test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 16:38:35'!
PASSED!

!testRun: #PortfolioReportTest #test05SpecialTreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 16:38:35'!
PASSED!

!testRun: #PortfolioReportTest #test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild stamp: 'DB 11/16/2020 16:38:35'!
PASSED!

!testRun: #PortfolioReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturns stamp: 'DB 11/16/2020 16:38:35'!
FAILURE!

!testRun: #PortfolioReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 16:38:50'!
PASSED!

!testRun: #PortfolioReportTest #test02TreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 16:38:54'!
PASSED!

!testRun: #PortfolioReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturns stamp: 'DB 11/16/2020 16:38:57'!
FAILURE!

!testRun: #PortfolioReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturns stamp: 'DB 11/16/2020 16:38:57'!
FAILURE!
!Portfolio methodsFor: 'reports' stamp: 'DB 11/16/2020 16:41:12' prior: 50890679!
reportTo: aReport tabs: tabs
	aReport reportAsPortfolioPrefix: self tabs: tabs.
	accounts do: [:anAccount |
		anAccount reportTo: aReport tabs:(Character tab asString), tabs.
	].
	aReport reportAsPortfolioPostfix: self tabs: tabs.
	! !
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:41:25' prior: 50890504!
reportAsReceptiveAccount: anAccount tabs: tabs.
	self addMe: tabs,(anAccount name)
	! !

!testRun: #PortfolioReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 16:42:00'!
PASSED!

!testRun: #PortfolioReportTest #test02TreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 16:42:00'!
PASSED!

!testRun: #PortfolioReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturns stamp: 'DB 11/16/2020 16:42:00'!
PASSED!

!testRun: #PortfolioReportTest #test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 16:42:00'!
PASSED!

!testRun: #PortfolioReportTest #test05SpecialTreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 16:42:00'!
PASSED!

!testRun: #PortfolioReportTest #test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild stamp: 'DB 11/16/2020 16:42:00'!
PASSED!
!PortfolioSpecialTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:42:30' prior: 50888752!
specialTreeReport

	portfolio reportTo: self tabs: ''.
	^report.
	! !
!PortfolioSpecialTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:42:57'!
reportAsReceptiveAccount: anAccount tabs: tabs.
	self addMe: tabs,(anAccount name)! !
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:44:03' prior: 50890801!
reportAsReceptiveAccount: anAccount tabs: tabs.
	self addMe: tabs,(anAccount name).
			
	report := (SummaryReport with: anAccount) summary.
			
	report do: [ :aDetail |
		self addMe: tabs,(Character tab asString), aDetail.
	].! !
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:44:08' prior: 50890844!
reportAsReceptiveAccount: anAccount tabs: tabs.
	self addMe: tabs,(anAccount name).
			
	report := (SummaryReport with: anAccount) summary.
	report do: [ :aDetail |
		self addMe: tabs,(Character tab asString), aDetail.
	].! !
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:44:20' prior: 50890855!
reportAsReceptiveAccount: anAccount tabs: tabs| detail |
.
	self addMe: tabs,(anAccount name).
			
	detail := (SummaryReport with: anAccount) summary.
	detail do: [ :aDetail |
		self addMe: tabs,(Character tab asString), aDetail.
	].! !
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:44:29' prior: 50890866!
reportAsReceptiveAccount: anAccount tabs: tabs

	| detail |.
	self addMe: tabs,(anAccount name).
			
	detail := (SummaryReport with: anAccount) summary.
	detail do: [ :aDetail |
		self addMe: tabs,(Character tab asString), aDetail.
	].! !
!PortfolioSpecialTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:44:59' prior: 50890838!
reportAsReceptiveAccount: anAccount tabs: tabs

	| detail |.
	self addMe: tabs,(anAccount name).
			
	detail := (SummaryReport with: anAccount) summary.
	detail do: [ :aDetail |
		self addMe: tabs,(Character tab asString), aDetail.
	].! !
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:41:25' prior: 50890877!
reportAsReceptiveAccount: anAccount tabs: tabs.
	self addMe: tabs,(anAccount name)
	! !
!PortfolioSpecialTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:45:30'!
reportAsPortfolioPostfix: anAccount tabs: tabs.
	
	! !
!PortfolioSpecialTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:46:05' prior: 50890905!
reportAsPortfolioPostfix: anAccount tabs: tabs.
	
	self addMe: tabs,(Character tab asString), 'Balance = ',(self balance asString).! !
!PortfolioSpecialTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:46:33'!
reportAsPortfolioPrefix: anAccount tabs: tabs.
	self addMe: tabs,anAccount name
	! !

!testRun: #PortfolioReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 16:46:45'!
PASSED!

!testRun: #PortfolioReportTest #test02TreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 16:46:45'!
PASSED!

!testRun: #PortfolioReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturns stamp: 'DB 11/16/2020 16:46:45'!
PASSED!

!testRun: #PortfolioReportTest #test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 16:46:45'!
ERROR!

!testRun: #PortfolioReportTest #test05SpecialTreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 16:46:45'!
ERROR!

!testRun: #PortfolioReportTest #test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild stamp: 'DB 11/16/2020 16:46:45'!
ERROR!

!testRun: #PortfolioReportTest #test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 16:46:48'!
ERROR!
!PortfolioSpecialTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:47:30' prior: 50890911!
reportAsPortfolioPostfix: anAccount tabs: tabs.
	
	self addMe: tabs,(Character tab asString), 'Balance = ',(anAccount balance asString).! !

!testRun: #PortfolioReportTest #test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 16:47:32'!
PASSED!

!testRun: #PortfolioReportTest #test05SpecialTreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 16:47:33'!
PASSED!

!testRun: #PortfolioReportTest #test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild stamp: 'DB 11/16/2020 16:47:34'!
PASSED!

!methodRemoval: Portfolio #specialfamilyTree:tabs: stamp: 'DB 11/16/2020 16:47:50'!
specialfamilyTree: aReport tabs: tabs



	aReport addMe: tabs,self name.
	accounts do: [:anAccount | |report|
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			aReport addMe: tabs,(Character tab asString),(anAccount name).
			
			report := (SummaryReport with: anAccount) summary.
			
			report do: [ :aDetail |
				aReport addMe: tabs,(Character tab asString),(Character tab asString), aDetail.
			]
			
		].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount specialfamilyTree: aReport tabs: tabs,(Character tab asString)].
	].
	aReport addMe: tabs,(Character tab asString), 'Balance = ',(self balance asString).
	!

!methodRemoval: Portfolio #familyTree:tabs: stamp: 'DB 11/16/2020 16:47:55'!
familyTree: aReport tabs: tabs

	aReport addMe: tabs,self name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: tabs,(Character tab asString),(anAccount name)].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount familyTree: aReport tabs: tabs,(Character tab asString)].
	].
	!
!PortfolioReport methodsFor: 'no messages' stamp: 'DB 11/16/2020 16:49:12'!
reportAsPortfolioPostfix: anAccount tabs: tabs
	self subclassResponsibility .! !
!PortfolioReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:49:14' prior: 50891008!
reportAsPortfolioPostfix: anAccount tabs: tabs
	self subclassResponsibility.! !
!PortfolioReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:49:30' prior: 50891014!
reportAsPortfolioPostfix: anAccount tabs: tabs
	self subclassResponsibility.! !
!PortfolioSpecialTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:49:43' prior: 50890954 overrides: 50891020!
reportAsPortfolioPostfix: anAccount tabs: tabs
	
	self addMe: tabs,(Character tab asString), 'Balance = ',(anAccount balance asString).! !
!PortfolioSpecialTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:49:48' prior: 50890919!
reportAsPortfolioPrefix: anAccount tabs: tabs
	self addMe: tabs,anAccount name
	! !
!PortfolioReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:49:57'!
reportAsPortfolioPrefix: anAccount tabs: tabs
	self subclassResponsibility.! !
!PortfolioReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:50:26'!
reportAsReceptiveAccount: anAccount tabs: tabs
	self subclassResponsibility.! !
!PortfolioReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:50:56'!
addMe: name| report |
.

	report add: name.! !

PortfolioReport subclass: #PortfolioSpecialTreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioSpecialTreeReport category: 'Portfolio-Solucion' stamp: 'DB 11/16/2020 16:51:07'!
PortfolioReport subclass: #PortfolioSpecialTreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

PortfolioReport subclass: #PortfolioTreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTreeReport category: 'Portfolio-Solucion' stamp: 'DB 11/16/2020 16:51:13'!
PortfolioReport subclass: #PortfolioTreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #PortfolioReport
	instanceVariableNames: 'portfolio report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:51:30' prior: 50891053!
addMe: name! !

Object subclass: #PortfolioReport
	instanceVariableNames: 'portfolio report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioReport category: 'Portfolio-Solucion' stamp: 'DB 11/16/2020 16:51:36'!
Object subclass: #PortfolioReport
	instanceVariableNames: 'portfolio report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:51:46' prior: 50891089!
addMe: name
	! !
!PortfolioReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:51:57' prior: 50891106!
addMe: name
	report add: name.! !

!methodRemoval: PortfolioSpecialTreeReport #addMe: stamp: 'DB 11/16/2020 16:52:05'!
addMe: name.

	report add: name.

	!

!methodRemoval: PortfolioTreeReport #addMe: stamp: 'DB 11/16/2020 16:52:10'!
addMe: name.

	report add: name.

	!

!testRun: #PortfolioReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 16:52:15'!
PASSED!

!testRun: #PortfolioReportTest #test02TreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 16:52:15'!
PASSED!

!testRun: #PortfolioReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturns stamp: 'DB 11/16/2020 16:52:15'!
PASSED!

!testRun: #PortfolioReportTest #test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 16:52:15'!
PASSED!

!testRun: #PortfolioReportTest #test05SpecialTreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 16:52:15'!
PASSED!

!testRun: #PortfolioReportTest #test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild stamp: 'DB 11/16/2020 16:52:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DB 11/16/2020 16:52:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 11/16/2020 16:52:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/16/2020 16:52:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DB 11/16/2020 16:52:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DB 11/16/2020 16:52:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DB 11/16/2020 16:52:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DB 11/16/2020 16:52:20'!
PASSED!

!testRun: #ReportSummaryTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/16/2020 16:52:25'!
PASSED!

!testRun: #ReportSummaryTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/16/2020 16:52:25'!
PASSED!

!testRun: #ReportSummaryTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/16/2020 16:52:25'!
PASSED!

!testRun: #ReportSummaryTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/16/2020 16:52:25'!
PASSED!

!testRun: #ReportSummaryTest #test10SummaryOfPortfolioWithoutAccountsHasOnlyBalance stamp: 'DB 11/16/2020 16:52:25'!
PASSED!

!testRun: #ReportSummaryTest #test11SummaryOfPortfolioWithOneAccount stamp: 'DB 11/16/2020 16:52:25'!
PASSED!

!testRun: #ReportSummaryTest #test12SummaryOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'DB 11/16/2020 16:52:25'!
PASSED!

!testRun: #ReportTransferNetTest #test01TransferNetReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/16/2020 16:52:28'!
PASSED!

!testRun: #ReportTransferNetTest #test02TransferNetReportForDepositReturnsZero stamp: 'DB 11/16/2020 16:52:28'!
PASSED!

!testRun: #ReportTransferNetTest #test03TransferNetReportForWithdrawReturnsZero stamp: 'DB 11/16/2020 16:52:28'!
PASSED!

!testRun: #ReportTransferNetTest #test04TransferNetReportForATransferReturnsNetBalance stamp: 'DB 11/16/2020 16:52:28'!
PASSED!

!testRun: #ReportTransferNetTest #test05TransferNetOfAPortfolioWithoutAccountsReturnsZero stamp: 'DB 11/16/2020 16:52:28'!
PASSED!

!testRun: #ReportTransferNetTest #test06TransferNetOfAPortfolioWithOneAccountReturnsTransferNetAccountValue stamp: 'DB 11/16/2020 16:52:28'!
PASSED!

!testRun: #ReportTransferNetTest #test07TransferNetOfAPortfolioWithMoreThanOneAccountReturnsTransferNetAccountValue stamp: 'DB 11/16/2020 16:52:28'!
PASSED!
!PortfolioReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:53:01'!
initializeWith: aPortfolio
	portfolio := aPortfolio.
	report := OrderedCollection new.! !
!PortfolioReport class methodsFor: 'nil' stamp: 'DB 11/16/2020 16:53:33'!
with: aPortfolio

	^self new initializeWith: aPortfolio 
	! !

!methodRemoval: PortfolioSpecialTreeReport class #with: stamp: 'DB 11/16/2020 16:53:42'!
with: aPortfolio

	^self new initializeWith: aPortfolio 
	!

!methodRemoval: PortfolioTreeReport class #with: stamp: 'DB 11/16/2020 16:53:47'!
with: aPortfolio

	^self new initializeWith: aPortfolio 
	!

!methodRemoval: PortfolioTreeReport #initializeWith: stamp: 'DB 11/16/2020 16:53:58'!
initializeWith: aPortfolio
	portfolio := aPortfolio.
	report := OrderedCollection new.!

!methodRemoval: PortfolioSpecialTreeReport #initializeWith: stamp: 'DB 11/16/2020 16:54:03'!
initializeWith: aPortfolio
	portfolio := aPortfolio.
	report := OrderedCollection new.!
!PortfolioSpecialTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:55:18' prior: 50891035 overrides: 50891041!
reportAsPortfolioPrefix: anAccount tabs: tabs

	self addMe: tabs,anAccount name
	! !
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 16:55:43' prior: 50890899 overrides: 50891047!
reportAsReceptiveAccount: anAccount tabs: tabs.
	self addMe: tabs,anAccount name
	! !

!testRun: #PortfolioReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 16:55:55'!
PASSED!

!testRun: #PortfolioReportTest #test02TreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 16:55:55'!
PASSED!

!testRun: #PortfolioReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturns stamp: 'DB 11/16/2020 16:55:55'!
PASSED!

!testRun: #PortfolioReportTest #test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 16:55:55'!
PASSED!

!testRun: #PortfolioReportTest #test05SpecialTreeReportForPortfolioWithOneChildReturns stamp: 'DB 11/16/2020 16:55:55'!
PASSED!

!testRun: #PortfolioReportTest #test06SpecialTreeReportForPortfolioWithOneChildAndPorfolioChild stamp: 'DB 11/16/2020 16:55:55'!
PASSED!

----SNAPSHOT----(16 November 2020 16:55:58) CuisUniversity-4384.image priorSource: 17813273!