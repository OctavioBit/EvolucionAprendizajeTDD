----STARTUP---- (30 November 2020 18:03:28) as /home/doraserver/CuisUniversity/CuisUniversity-4383.image!


TestCase subclass: #RESTInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RESTInterfaceTest category: 'TusLibros' stamp: 'EMI 11/30/2020 18:05:27'!
TestCase subclass: #RESTInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterfaceTest methodsFor: 'nil' stamp: 'EMI 11/30/2020 18:06:57'!
test01CanCreateCartUsingValidIDAndPassword! !

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'EMI 11/30/2020 18:08:45'!
Object subclass: #RESTInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/30/2020 18:08:35' prior: 50924798!
test01CanCreateCartUsingValidIDAndPassword
	| interface |
	interface _ RESTInterface new.
	
	interface createCart: self validClientID withPassword: self validClientPassword.
	! !

!testRun: #RESTInterfaceTest #test01CanCreateCartUsingValidIDAndPassword stamp: 'EMI 11/30/2020 18:08:57'!
ERROR!
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 18:09:16'!
validClientID
	self shouldBeImplemented.! !
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 18:09:33' prior: 50924822!
validClientID
	^1.! !

!testRun: #RESTInterfaceTest #test01CanCreateCartUsingValidIDAndPassword stamp: 'EMI 11/30/2020 18:09:36'!
ERROR!
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 18:09:50'!
validClientPassword
	self shouldBeImplemented.! !
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 18:10:01' prior: 50924834!
validClientPassword
	^'1234'.! !

!testRun: #RESTInterfaceTest #test01CanCreateCartUsingValidIDAndPassword stamp: 'EMI 11/30/2020 18:10:02'!
ERROR!
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 18:10:15'!
createCart: aSmallInteger withPassword: aString 
	self shouldBeImplemented.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 18:10:29' prior: 50924846!
createCart: anID withPassword: aPassword
	self shouldBeImplemented.! !

!testRun: #RESTInterfaceTest #test01CanCreateCartUsingValidIDAndPassword stamp: 'EMI 11/30/2020 18:10:30'!
ERROR!
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 18:10:54' prior: 50924827!
validClientID
	^'1'.! !

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'EMI 11/30/2020 18:11:55'!
Object subclass: #RESTInterface
	instanceVariableNames: 'priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 18:11:52' prior: 50924852!
createCart: anID withPassword: aPassword
	^Cart createUsingPriceList: priceList.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 18:12:30' prior: 50924872!
createCart: anID withPassword: aPassword
	^'1'.! !

!testRun: #RESTInterfaceTest #test01CanCreateCartUsingValidIDAndPassword stamp: 'EMI 11/30/2020 18:12:42'!
PASSED!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 18:14:36' prior: 50924810!
test01CanCreateCartUsingValidIDAndPassword
	| interface cartID |
	interface _ RESTInterface new.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	self assert: (interface listCart: cartID) isEmpty.! !

!testRun: #RESTInterfaceTest #test01CanCreateCartUsingValidIDAndPassword stamp: 'EMI 11/30/2020 18:14:41'!
ERROR!
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 18:14:49'!
listCart: aString 
	self shouldBeImplemented.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 18:14:55' prior: 50924900!
listCart: aCartID
	self shouldBeImplemented.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 18:15:04' prior: 50924905!
listCart: aCartID
	^Dictionary new.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 18:16:18' prior: 50924910!
listCart: aCartID
	^Bag new.! !

!testRun: #RESTInterfaceTest #test01CanCreateCartUsingValidIDAndPassword stamp: 'EMI 11/30/2020 18:16:27'!
PASSED!

!testRun: #RESTInterfaceTest #test01CanCreateCartUsingValidIDAndPassword stamp: 'EMI 11/30/2020 18:16:27'!
PASSED!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 18:16:42'!
test01CanCreateEmptyCartUsingValidIDAndPassword
	| interface cartID |
	interface _ RESTInterface new.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	self assert: (interface listCart: cartID) isEmpty.! !

!methodRemoval: RESTInterfaceTest #test01CanCreateCartUsingValidIDAndPassword stamp: 'EMI 11/30/2020 18:16:42'!
test01CanCreateCartUsingValidIDAndPassword
	| interface cartID |
	interface _ RESTInterface new.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	self assert: (interface listCart: cartID) isEmpty.!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 18:17:09'!
test02CannotCreateCartUsingInvalidIDOrPassword
	| interface cartID |
	interface _ RESTInterface new.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	self assert: (interface listCart: cartID) isEmpty.! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 18:19:20' prior: 50924947!
test02CannotCreateCartUsingInvalidIDOrPassword
	| interface cartID |
	interface _ RESTInterface new.
	
	self should: [cartID _ interface createCart: self invalidClientID withPassword: self validClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: interface class cannotCreateCartWithInvalidID].
	
	self should: [cartID _ interface createCart: self validClientID withPassword: self invalidClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: interface class cannotCreateCartWithInvalidPassword].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 18:19:36' prior: 50924958!
test02CannotCreateCartUsingInvalidIDOrPassword
	| interface |
	interface _ RESTInterface new.
	
	self should: [interface createCart: self invalidClientID withPassword: self validClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: interface class cannotCreateCartWithInvalidID].
	
	self should: [interface createCart: self validClientID withPassword: self invalidClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: interface class cannotCreateCartWithInvalidPassword].
	! !

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 18:19:42'!
ERROR!
!RESTInterface class methodsFor: 'errorMessages' stamp: 'EMI 11/30/2020 18:20:03'!
cannotCreateCartWithInvalidID
	self shouldBeImplemented.! !
!RESTInterface class methodsFor: 'errorMessages' stamp: 'EMI 11/30/2020 18:20:24' prior: 50925005!
cannotCreateCartWithInvalidID
	^'Cannot create cart with invalid ID'.! !

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 18:20:29'!
FAILURE!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 18:21:15'!
FAILURE!
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 18:22:01'!
invalidClientID
	^Object new.! !
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 18:22:08' prior: 50925023!
invalidClientID
	^Object new.! !
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 18:22:16'!
invalidClientPassword
	^Object new.! !
!RESTInterface class methodsFor: 'errorMessages' stamp: 'EMI 11/30/2020 18:22:35'!
cannotCreateCartWithInvalidPassword
	^'Cannot create cart with invalid password'.! !

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 18:22:43'!
FAILURE!

Object subclass: #RESTInterface
	instanceVariableNames: 'authenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'EMI 11/30/2020 18:25:08'!
Object subclass: #RESTInterface
	instanceVariableNames: 'authenticator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 18:26:52' prior: 50924878!
createCart: anID withPassword: aPassword
	| password |
	password _ authenticator at:anID ifAbsent:[].
	password = aPassword ifFalse:[].
	
	^'1'.! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 18:27:46' prior: 50924980!
test02CannotCreateCartUsingInvalidIDOrPassword
	| interface |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator.
	
	self should: [interface createCart: self invalidClientID withPassword: self validClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: interface class cannotCreateCartWithInvalidID].
	
	self should: [interface createCart: self validClientID withPassword: self invalidClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: interface class cannotCreateCartWithInvalidPassword].
	! !

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 18:27:57'!
ERROR!
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 18:28:07'!
defaultAuthenticator
	self shouldBeImplemented.! !
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 18:28:30' prior: 50925090!
defaultAuthenticator
	^Dictionary with: self validClientID -> self validClientPassword.! !

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 18:28:31'!
ERROR!
!RESTInterface class methodsFor: 'instance creation' stamp: 'EMI 11/30/2020 18:28:37'!
withAuthenticator: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithAuthenticator: aDictionary ! !
!RESTInterface class methodsFor: 'instance creation' stamp: 'EMI 11/30/2020 18:28:52' prior: 50925105!
withAuthenticator: anAuthenticator 
	^self new initializeWithAuthenticator: anAuthenticator ! !

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 18:28:54'!
ERROR!
!RESTInterface methodsFor: 'initialization' stamp: 'EMI 11/30/2020 18:29:13'!
initializeWithAuthenticator: anAuthenticator 
	self shouldBeImplemented.
	authenticator := anAuthenticator.! !
!RESTInterface methodsFor: 'initialization' stamp: 'EMI 11/30/2020 18:29:19' prior: 50925124!
initializeWithAuthenticator: anAuthenticator 
	authenticator := anAuthenticator.! !

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 18:29:20'!
FAILURE!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 18:29:23'!
FAILURE!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 18:29:25'!
PASSED!

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 11/30/2020 18:29:25'!
ERROR!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 18:29:25'!
FAILURE!
!RESTInterface methodsFor: 'initialization' stamp: 'EMI 11/30/2020 18:29:44' prior: 50925131!
initializeWithAuthenticator: anAuthenticator 
	authenticator := anAuthenticator.! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 18:30:03' prior: 50924925!
test01CanCreateEmptyCartUsingValidIDAndPassword
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	self assert: (interface listCart: cartID) isEmpty.! !

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 18:30:11'!
FAILURE!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 18:30:15'!
FAILURE!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 18:30:18'!
PASSED!

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 11/30/2020 18:30:18'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 18:30:18'!
FAILURE!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 18:30:18'!
FAILURE!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 18:30:20'!
FAILURE!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 18:30:22'!
PASSED!
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 18:31:13' prior: 50925056!
createCart: anID withPassword: aPassword
	| password |
	password _ authenticator at:anID ifAbsent:[^Error signal: self class cannotCreateCartWithInvalidID.].
	password = aPassword ifFalse:[^Error signal: self class cannotCreateCartWithInvalidPassword.].
	
	^'1'.! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 11/30/2020 18:31:16'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 18:31:16'!
PASSED!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 18:32:51'!
test03CannotListCartUsingInvalidCartID
	| interface |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator.
	
	self should: [interface createCart: self invalidClientID withPassword: self validClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: interface class cannotCreateCartWithInvalidID].
	
	self should: [interface createCart: self validClientID withPassword: self invalidClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: interface class cannotCreateCartWithInvalidPassword].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 18:33:45' prior: 50925223!
test03CannotListCartUsingInvalidCartID
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator.
	cartID _ interface createCart: self invalidClientID withPassword: self validClientPassword.
	self should: [interface listCart: cartID]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: interface class cannotListCartWithInvalidCartID].
	! !
!RESTInterface class methodsFor: 'errorMessages' stamp: 'EMI 11/30/2020 18:34:14'!
cannotListCartWithInvalidCartID
	^'Cannot list cart with invalid cart ID'.! !
!RESTInterface class methodsFor: 'errorMessages' stamp: 'EMI 11/30/2020 18:34:19' prior: 50925261!
cannotListCartWithInvalidCartID
	^'Cannot list cart using invalid cart ID'.! !

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 11/30/2020 18:34:31'!
ERROR!
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 18:35:27' prior: 50924914!
listCart: aCartID
	aCartID = 1 ifFalse: [^Error signal: RESTInterface cannotListCartWithInvalidCartID].
	^Bag new.! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 11/30/2020 18:35:31'!
ERROR!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 18:35:31'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 11/30/2020 18:35:31'!
ERROR!
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 18:35:50' prior: 50925276!
listCart: aCartID
	aCartID = '1' ifFalse: [^Error signal: RESTInterface cannotListCartWithInvalidCartID].
	^Bag new.! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 11/30/2020 18:35:52'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 18:35:52'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 11/30/2020 18:35:52'!
ERROR!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 11/30/2020 18:35:52'!
ERROR!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 18:36:06' prior: 50925245!
test03CannotListCartUsingInvalidCartID
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	self should: [interface listCart: cartID]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: interface class cannotListCartWithInvalidCartID].
	! !

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 11/30/2020 18:36:07'!
FAILURE!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 18:36:39' prior: 50925315!
test03CannotListCartUsingInvalidCartID
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	self should: [interface listCart: '2']
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: interface class cannotListCartWithInvalidCartID].
	! !

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 11/30/2020 18:36:46'!
PASSED!

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 11/30/2020 18:36:46'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 18:36:46'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 11/30/2020 18:36:46'!
PASSED!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 18:37:21'!
test04CanAddOneElementToValidCart
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	self should: [interface listCart: '2']
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: interface class cannotListCartWithInvalidCartID].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 18:39:46' prior: 50925365!
test04CanAddOneElementToValidCart
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 5.
	
	self assert: (interface listCart: cartID) size equals: 1.! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 18:39:54' prior: 50925381!
test04CanAddOneElementToValidCart
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	self assert: (interface listCart: cartID) size equals: 1.! !

!testRun: #RESTInterfaceTest #test04CanAddOneElementToValidCart stamp: 'EMI 11/30/2020 18:40:25'!
ERROR!
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 18:40:34'!
validProductName
	self shouldBeImplemented.! !
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 18:40:44' prior: 50925413!
validProductName
	^'El Principote'.! !

!testRun: #RESTInterfaceTest #test04CanAddOneElementToValidCart stamp: 'EMI 11/30/2020 18:40:46'!
ERROR!
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 18:40:54'!
addToCart: aString productName: aString2 quantity: aSmallInteger 
	self shouldBeImplemented.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 18:41:17' prior: 50925425!
addToCart: aCartID productName: aProductName quantity: aProductAmount
	self shouldBeImplemented.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 18:41:52' prior: 50925431!
addToCart: aCartID productName: aProductName quantity: aProductAmount
	^self.! !

!testRun: #RESTInterfaceTest #test04CanAddOneElementToValidCart stamp: 'EMI 11/30/2020 18:41:54'!
FAILURE!
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 18:43:52' prior: 50925204!
createCart: anID withPassword: aPassword
	| password |
	password _ authenticator at:anID ifAbsent:[^Error signal: self class cannotCreateCartWithInvalidID.].
	password = aPassword ifFalse:[^Error signal: self class cannotCreateCartWithInvalidPassword.].
	^'1'.! !
!RESTInterface class methodsFor: 'instance creation' stamp: 'EMI 11/30/2020 18:44:49'!
withAuthenticator: anAuthenticator withPriceList2: withPriceList  
	^self new initializeWithAuthenticator: anAuthenticator ! !

!methodRemoval: RESTInterface class #withAuthenticator: stamp: 'EMI 11/30/2020 18:44:49'!
withAuthenticator: anAuthenticator 
	^self new initializeWithAuthenticator: anAuthenticator !
!RESTInterface class methodsFor: 'instance creation' stamp: 'EMI 11/30/2020 18:44:58'!
withAuthenticator: anAuthenticator withPriceList: withPriceList  
	^self new initializeWithAuthenticator: anAuthenticator ! !

!methodRemoval: RESTInterface class #withAuthenticator:withPriceList2: stamp: 'EMI 11/30/2020 18:44:58'!
withAuthenticator: anAuthenticator withPriceList2: withPriceList  
	^self new initializeWithAuthenticator: anAuthenticator !
!RESTInterface class methodsFor: 'instance creation' stamp: 'EMI 11/30/2020 18:45:02' prior: 50925470!
withAuthenticator: anAuthenticator withPriceList: aPriceList  
	^self new initializeWithAuthenticator: anAuthenticator ! !
!RESTInterface methodsFor: 'initialization' stamp: 'EMI 11/30/2020 18:45:35'!
initializeWithAuthenticator: anAuthenticator withPriceList: aPriceList  
	authenticator := anAuthenticator.! !
!RESTInterface class methodsFor: 'as yet unclassified' stamp: 'EMI 11/30/2020 18:45:35' prior: 50925485!
withAuthenticator: anAuthenticator withPriceList: aPriceList  
	^self new initializeWithAuthenticator: anAuthenticator withPriceList: aPriceList ! !

!methodRemoval: RESTInterface #initializeWithAuthenticator: stamp: 'EMI 11/30/2020 18:45:35'!
initializeWithAuthenticator: anAuthenticator 
	authenticator := anAuthenticator.!

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'EMI 11/30/2020 18:45:46'!
Object subclass: #RESTInterface
	instanceVariableNames: 'authenticator priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterface methodsFor: 'initialization' stamp: 'EMI 11/30/2020 18:45:45' prior: 50925492!
initializeWithAuthenticator: anAuthenticator withPriceList: aPriceList  
	authenticator := anAuthenticator.
	priceList _ aPriceList.! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 18:46:16' prior: 50925162!
test01CanCreateEmptyCartUsingValidIDAndPassword
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	self assert: (interface listCart: cartID) isEmpty.! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 18:47:02' prior: 50925528!
test01CanCreateEmptyCartUsingValidIDAndPassword
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	self assert: (interface listCart: cartID) isEmpty.! !
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 18:47:30'!
defaultPriceList
	^Dictionary with: 'El Principote' -> 50.! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 18:47:52' prior: 50925064!
test02CannotCreateCartUsingInvalidIDOrPassword
	| interface |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList.
	
	self should: [interface createCart: self invalidClientID withPassword: self validClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: interface class cannotCreateCartWithInvalidID].
	
	self should: [interface createCart: self validClientID withPassword: self invalidClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: interface class cannotCreateCartWithInvalidPassword].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 18:47:57' prior: 50925335!
test03CannotListCartUsingInvalidCartID
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator  withPriceList: self defaultPriceList.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	self should: [interface listCart: '2']
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: interface class cannotListCartWithInvalidCartID].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 18:48:03' prior: 50925396!
test04CanAddOneElementToValidCart
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator  withPriceList: self defaultPriceList.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	self assert: (interface listCart: cartID) size equals: 1.! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 18:48:07' prior: 50925599!
test04CanAddOneElementToValidCart
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	self assert: (interface listCart: cartID) size equals: 1.! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 18:48:11' prior: 50925582!
test03CannotListCartUsingInvalidCartID
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	self should: [interface listCart: '2']
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: interface class cannotListCartWithInvalidCartID].
	! !

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'EMI 11/30/2020 18:48:37'!
Object subclass: #RESTInterface
	instanceVariableNames: 'authenticator priceList carritos'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 18:48:36' prior: 50925446!
createCart: anID withPassword: aPassword
	| password |
	password _ authenticator at:anID ifAbsent:[^Error signal: self class cannotCreateCartWithInvalidID.].
	password = aPassword ifFalse:[^Error signal: self class cannotCreateCartWithInvalidPassword.].
	carritos _ Cart createUsingPriceList: priceList.
	^'1'.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 18:49:11' prior: 50925437!
addToCart: aCartID productName: aProductName quantity: aProductAmount
	carritos add: aProductName amount: aProductAmount.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 18:49:27' prior: 50925294!
listCart: aCartID
	aCartID = '1' ifFalse: [^Error signal: RESTInterface cannotListCartWithInvalidCartID].
	^carritos contents.! !

!testRun: #RESTInterfaceTest #test04CanAddOneElementToValidCart stamp: 'EMI 11/30/2020 18:49:32'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 11/30/2020 18:49:36'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 18:49:38'!
PASSED!

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 11/30/2020 18:49:41'!
PASSED!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 18:50:03'!
test05CanAddMoreThanOneElementToValidCart
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	self assert: (interface listCart: cartID) size equals: 1.! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 18:50:32' prior: 50925697!
test05CanAddMoreThanOneElementToValidCart
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	interface addToCart: cartID productName: self anotherValidProductName quantity: 4.
	
	self assert: (interface listCart: cartID) size equals: 5.! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 18:53:53'!
test05CanHaveMoreThanOneValidCart
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	interface addToCart: cartID productName: self anotherValidProductName quantity: 4.
	
	self assert: (interface listCart: cartID) size equals: 5.! !

!methodRemoval: RESTInterfaceTest #test05CanAddMoreThanOneElementToValidCart stamp: 'EMI 11/30/2020 18:53:53'!
test05CanAddMoreThanOneElementToValidCart
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	interface addToCart: cartID productName: self anotherValidProductName quantity: 4.
	
	self assert: (interface listCart: cartID) size equals: 5.!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 18:54:47' prior: 50925731!
test05CanHaveMoreThanOneValidCart
	| interface cartID cartID2 |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	cartID2 _ interface createCart: self anotherValidClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self anotherValidProductName quantity: 5.
	
	self assert: (interface listCart: cartID) size equals: 1.
	self assert: (interface listCart: cartID2) size equals: 5.! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 18:54:55' prior: 50925768!
test05CanHaveMoreThanOneValidCart
	| interface cartID cartID2 |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	cartID2 _ interface createCart: self anotherValidClientID withPassword: self validClientPassword.
	interface addToCart: cartID2 productName: self anotherValidProductName quantity: 5.
	
	self assert: (interface listCart: cartID) size equals: 1.
	self assert: (interface listCart: cartID2) size equals: 5.! !

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 11/30/2020 18:55:09'!
ERROR!
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 18:55:18'!
anotherValidClientID
	self shouldBeImplemented.! !
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 18:55:25' prior: 50925818!
anotherValidClientID
	^'2'.! !

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 11/30/2020 18:55:26'!
ERROR!
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 18:55:52' prior: 50925095!
defaultAuthenticator
	^Dictionary with: self validClientID -> self validClientPassword with: self anotherValidClientID -> self validClientPassword.! !

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 11/30/2020 18:56:15'!
ERROR!
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 18:56:23'!
anotherValidProductName
	self shouldBeImplemented.! !
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 18:56:35' prior: 50925841!
anotherValidProductName
	^'El principito'.! !

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 11/30/2020 18:56:36'!
ERROR!
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 18:57:03' prior: 50925553!
defaultPriceList
	^Dictionary with: 'El Principote' -> 50 with: 'El principito' -> 100.! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 11/30/2020 18:57:09'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 18:57:09'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 11/30/2020 18:57:09'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneElementToValidCart stamp: 'EMI 11/30/2020 18:57:09'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 11/30/2020 18:57:09'!
FAILURE!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 11/30/2020 18:57:09'!
FAILURE!

Object subclass: #RESTInterface
	instanceVariableNames: 'authenticator priceList carritos currentCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'EMI 11/30/2020 18:58:02'!
Object subclass: #RESTInterface
	instanceVariableNames: 'authenticator priceList carritos currentCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterface methodsFor: 'initialization' stamp: 'EMI 11/30/2020 18:58:17' prior: 50925520!
initializeWithAuthenticator: anAuthenticator withPriceList: aPriceList  
	authenticator := anAuthenticator.
	priceList _ aPriceList.
	currentCartID _ 0.
	carritos _ Dictionary new.! !

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'EMI 11/30/2020 18:58:30'!
Object subclass: #RESTInterface
	instanceVariableNames: 'authenticator priceList carts currentCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'EMI 11/30/2020 18:58:31' prior: 50925895!
initializeWithAuthenticator: anAuthenticator withPriceList: aPriceList  
	authenticator := anAuthenticator.
	priceList _ aPriceList.
	currentCartID _ 0.
	carts _ Dictionary new.! !
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'EMI 11/30/2020 18:58:31' prior: 50925656!
createCart: anID withPassword: aPassword
	| password |
	password _ authenticator at:anID ifAbsent:[^Error signal: self class cannotCreateCartWithInvalidID.].
	password = aPassword ifFalse:[^Error signal: self class cannotCreateCartWithInvalidPassword.].
	carts _ Cart createUsingPriceList: priceList.
	^'1'.! !
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'EMI 11/30/2020 18:58:31' prior: 50925676!
listCart: aCartID
	aCartID = '1' ifFalse: [^Error signal: RESTInterface cannotListCartWithInvalidCartID].
	^carts contents.! !
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'EMI 11/30/2020 18:58:31' prior: 50925669!
addToCart: aCartID productName: aProductName quantity: aProductAmount
	carts add: aProductName amount: aProductAmount.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 18:59:28' prior: 50925922!
createCart: anID withPassword: aPassword
	| password |
	password _ authenticator at:anID ifAbsent:[^Error signal: self class cannotCreateCartWithInvalidID.].
	password = aPassword ifFalse:[^Error signal: self class cannotCreateCartWithInvalidPassword.].
	carts add: (self newCartID -> Cart createUsingPriceList: priceList).
	^'1'.! !
!RESTInterface methodsFor: 'private' stamp: 'EMI 11/30/2020 19:01:07'!
newCartID
	| cartID |
	cartID _ currentCartID.
	currentCartID _ currentCartID + 1.
	^cartID.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 19:01:42' prior: 50925950!
createCart: anID withPassword: aPassword
	| password cartID |
	password _ authenticator at:anID ifAbsent:[^Error signal: self class cannotCreateCartWithInvalidID.].
	password = aPassword ifFalse:[^Error signal: self class cannotCreateCartWithInvalidPassword.].
	cartID _ self newCartID.
	carts add: (cartID -> Cart createUsingPriceList: priceList).
	^cartID.! !
!RESTInterface methodsFor: 'initialization' stamp: 'EMI 11/30/2020 19:01:49' prior: 50925913!
initializeWithAuthenticator: anAuthenticator withPriceList: aPriceList  
	authenticator := anAuthenticator.
	priceList _ aPriceList.
	currentCartID _ 1.
	carts _ Dictionary new.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 19:02:31' prior: 50925943!
addToCart: aCartID productName: aProductName quantity: aProductAmount
	| cart |
	cart _ carts at: aCartID ifAbsent:[].
	cart add: aProductName amount: aProductAmount.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 19:03:24' prior: 50925935!
listCart: aCartID
	(carts includesKey: aCartID) ifFalse: [^Error signal: RESTInterface cannotListCartWithInvalidCartID].
	^(carts at: aCartID) contents.! !

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 11/30/2020 19:03:35'!
ERROR!
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 19:04:31' prior: 50925969!
createCart: anID withPassword: aPassword
	| password cartID |
	password _ authenticator at:anID ifAbsent:[^Error signal: self class cannotCreateCartWithInvalidID.].
	password = aPassword ifFalse:[^Error signal: self class cannotCreateCartWithInvalidPassword.].
	cartID _ self newCartID.
	carts add: cartID -> (Cart createUsingPriceList: priceList).
	^cartID.! !

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 11/30/2020 19:04:36'!
PASSED!

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 11/30/2020 19:04:42'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 19:04:42'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 11/30/2020 19:04:42'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneElementToValidCart stamp: 'EMI 11/30/2020 19:04:42'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 11/30/2020 19:04:42'!
PASSED!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 19:06:08' prior: 50925792!
test05CanHaveMoreThanOneValidCart
	| interface cartID cartID2 |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	cartID2 _ interface createCart: self anotherValidClientID withPassword: self validClientPassword.
	interface addToCart: cartID2 productName: self anotherValidProductName quantity: 5.
	
	self assert: (interface listCart: cartID) size equals: 1.
	self assert: ((interface listCart: cartID) includes: self validProductName).
	self assert: (interface listCart: cartID2) size equals: 5.
	self assert: ((interface listCart: cartID2) includes: self anotherValidProductName).
! !

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 11/30/2020 19:06:09'!
PASSED!

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 11/30/2020 19:06:09'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 19:06:09'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 11/30/2020 19:06:09'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneElementToValidCart stamp: 'EMI 11/30/2020 19:06:09'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 11/30/2020 19:06:10'!
PASSED!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 19:08:10'!
test06CannotAddProductToCartWithInvalidCartID
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	self assert: (interface listCart: cartID) size equals: 1.! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 19:08:25'!
test04CanAddOneProductToValidCart
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	self assert: (interface listCart: cartID) size equals: 1.! !

!methodRemoval: RESTInterfaceTest #test04CanAddOneElementToValidCart stamp: 'EMI 11/30/2020 19:08:25'!
test04CanAddOneElementToValidCart
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	self assert: (interface listCart: cartID) size equals: 1.!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 19:08:36' prior: 50926097!
test06CannotAddProductToCartWithInvalidCartID
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: '11111' productName: self validProductName quantity: 1.
	
	self assert: (interface listCart: cartID) size equals: 1.! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 19:09:53' prior: 50926144!
test06CannotAddProductToCartWithInvalidCartID
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	self should: [interface addToCart: '11111' productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidID].! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 19:10:47' prior: 50926160!
test06CannotAddProductToCartWithInvalidCartID
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	self should: [interface addToCart: '11111' productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidID].! !

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 11/30/2020 19:10:57'!
ERROR!
!RESTInterface class methodsFor: 'errorMessages' stamp: 'EMI 11/30/2020 19:11:12'!
cannotAddProductToCartWithInvalidID
	self shouldBeImplemented.! !
!RESTInterface class methodsFor: 'errorMessages' stamp: 'EMI 11/30/2020 19:11:38' prior: 50926202!
cannotAddProductToCartWithInvalidID
	^'Cannot add product to cart with invalid CartID'.! !

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 11/30/2020 19:11:41'!
FAILURE!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/30/2020 19:12:08' prior: 50926179!
test06CannotAddProductToCartWithInvalidCartID
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	self should: [interface addToCart: '11111' productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartID].! !
!RESTInterface class methodsFor: 'errorMessages' stamp: 'EMI 11/30/2020 19:12:40'!
cannotAddProductToCartWithInvalidCartID
	^'Cannot add product to cart with invalid CartID'.! !

!methodRemoval: RESTInterface class #cannotAddProductToCartWithInvalidID stamp: 'EMI 11/30/2020 19:12:40'!
cannotAddProductToCartWithInvalidID
	^'Cannot add product to cart with invalid CartID'.!
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 19:13:23' prior: 50925993!
addToCart: aCartID productName: aProductName quantity: aProductAmount
	| cart |
	cart _ carts at: aCartID ifAbsent:[^Error signal: self class cannotAddProductToCartWithInvalidCartID.].
	cart add: aProductName amount: aProductAmount.! !

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 11/30/2020 19:13:29'!
PASSED!

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 11/30/2020 19:13:32'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 19:13:32'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 11/30/2020 19:13:32'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 11/30/2020 19:13:32'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 11/30/2020 19:13:32'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 11/30/2020 19:13:32'!
PASSED!

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 11/30/2020 19:13:38'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 19:13:38'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 11/30/2020 19:13:38'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 11/30/2020 19:13:38'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 11/30/2020 19:13:38'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 11/30/2020 19:13:38'!
PASSED!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 19:16:09'!
test07CanCheckoutProductsOfAValidCart
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	self should: [interface addToCart: '11111' productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartID].! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 19:16:59' prior: 50926306!
test07CanCheckoutProductsOfAValidCart
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 19:19:08' prior: 50926325!
test07CanCheckoutProductsOfAValidCart
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.
	
	interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 19:22:22' prior: 50926340!
test07CanCheckoutProductsOfAValidCart
	| interface cartID transactionID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.
	
	transactionID _ interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.

	self should: [interface listCart: cartID]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotListCartWithInvalidCartID].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 19:22:36' prior: 50926359!
test07CanCheckoutProductsOfAValidCart
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.
	
	interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.

	self should: [interface listCart: cartID]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotListCartWithInvalidCartID].
	! !

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 11/30/2020 19:22:53'!
ERROR!
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 19:23:02'!
validCardNumber
	self shouldBeImplemented.! !
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 19:23:16' prior: 50926413!
validCardNumber
	^'123456789'! !

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 11/30/2020 19:23:17'!
ERROR!
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 19:23:29'!
validCardDate
	self shouldBeImplemented.! !
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 19:23:49' prior: 50926425!
validCardDate
	^(GregorianMonthOfYear current) previous.! !
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 19:23:59' prior: 50926430!
validCardDate
	^(GregorianMonthOfYear current) next.! !
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 19:24:58' prior: 50926435!
validCardDate
	| date |
	date _ (GregorianMonthOfYear current) next.
	^date monthNumber, date yearNumber.! !

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 11/30/2020 19:25:02'!
ERROR!

c year.!

c year.!

c yearNumber.!

c year number.!
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 19:26:10' prior: 50926440!
validCardDate
	| date |
	date _ (GregorianMonthOfYear current) next.
	^date monthNumber, date year number.! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 11/30/2020 19:26:13'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 19:26:13'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 11/30/2020 19:26:13'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 11/30/2020 19:26:13'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 11/30/2020 19:26:13'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 11/30/2020 19:26:13'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 11/30/2020 19:26:13'!
ERROR!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 11/30/2020 19:26:13'!
ERROR!
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 19:26:33' prior: 50926452!
validCardDate
	| date |
	date _ (GregorianMonthOfYear current) next.
	^date monthNumber asString, date year number asString.! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 11/30/2020 19:26:36'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 19:26:36'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 11/30/2020 19:26:36'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 11/30/2020 19:26:36'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 11/30/2020 19:26:36'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 11/30/2020 19:26:36'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 11/30/2020 19:26:36'!
ERROR!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 11/30/2020 19:26:36'!
ERROR!
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 19:26:46'!
validCardOwnerName
	self shouldBeImplemented.! !
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 19:26:57' prior: 50926522!
validCardOwnerName
	^'El Principe'.! !

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 11/30/2020 19:27:01'!
ERROR!
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 19:27:09'!
checkout: aSmallInteger withCardNumber: aString withCardExpDate: aString3 withCardOwnerName: aString4 
	self shouldBeImplemented.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 19:27:38' prior: 50926534!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDateString withCardOwnerName: aCardOwnerName
	self shouldBeImplemented.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 19:28:08' prior: 50926541!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDateString withCardOwnerName: aCardOwnerName
	| cart |
	cart _ carts at: aCartID ifAbsent:[].! !
!RESTInterface class methodsFor: 'instance creation' stamp: 'EMI 11/30/2020 19:30:45'!
withAuthenticator: anAuthenticator withPriceList: aPriceList withCashier: aCashier   
	^self new initializeWithAuthenticator: anAuthenticator withPriceList: aPriceList ! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/30/2020 19:30:45' prior: 50925558!
test02CannotCreateCartUsingInvalidIDOrPassword
	| interface |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList withCashier: self defaultCashier.
	
	self should: [interface createCart: self invalidClientID withPassword: self validClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: interface class cannotCreateCartWithInvalidID].
	
	self should: [interface createCart: self validClientID withPassword: self invalidClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: interface class cannotCreateCartWithInvalidPassword].
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/30/2020 19:30:45' prior: 50925631!
test03CannotListCartUsingInvalidCartID
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList withCashier: self defaultCashier.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	self should: [interface listCart: '2']
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: interface class cannotListCartWithInvalidCartID].
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/30/2020 19:30:45' prior: 50926113!
test04CanAddOneProductToValidCart
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList withCashier: self defaultCashier.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	self assert: (interface listCart: cartID) size equals: 1.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/30/2020 19:30:45' prior: 50926048!
test05CanHaveMoreThanOneValidCart
	| interface cartID cartID2 |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList withCashier: self defaultCashier.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	cartID2 _ interface createCart: self anotherValidClientID withPassword: self validClientPassword.
	interface addToCart: cartID2 productName: self anotherValidProductName quantity: 5.
	
	self assert: (interface listCart: cartID) size equals: 1.
	self assert: ((interface listCart: cartID) includes: self validProductName).
	self assert: (interface listCart: cartID2) size equals: 5.
	self assert: ((interface listCart: cartID2) includes: self anotherValidProductName).
! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/30/2020 19:30:45' prior: 50925540!
test01CanCreateEmptyCartUsingValidIDAndPassword
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList withCashier: self defaultCashier.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	self assert: (interface listCart: cartID) isEmpty.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/30/2020 19:30:45' prior: 50926385!
test07CanCheckoutProductsOfAValidCart
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList withCashier: self defaultCashier.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.
	
	interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.

	self should: [interface listCart: cartID]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotListCartWithInvalidCartID].
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 11/30/2020 19:30:45' prior: 50926218!
test06CannotAddProductToCartWithInvalidCartID
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList withCashier: self defaultCashier.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	self should: [interface addToCart: '11111' productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartID].! !

!methodRemoval: RESTInterface class #withAuthenticator:withPriceList: stamp: 'EMI 11/30/2020 19:30:45'!
withAuthenticator: anAuthenticator withPriceList: aPriceList  
	^self new initializeWithAuthenticator: anAuthenticator withPriceList: aPriceList !
!RESTInterface methodsFor: 'initialization' stamp: 'EMI 11/30/2020 19:31:20'!
initializeWithAuthenticator: anAuthenticator withPriceList: aPriceList withCashier: aCashier   
	authenticator := anAuthenticator.
	priceList _ aPriceList.
	currentCartID _ 1.
	carts _ Dictionary new.! !
!RESTInterface class methodsFor: 'as yet unclassified' stamp: 'EMI 11/30/2020 19:31:20' prior: 50926557!
withAuthenticator: anAuthenticator withPriceList: aPriceList withCashier: aCashier   
	^self new initializeWithAuthenticator: anAuthenticator withPriceList: aPriceList withCashier: aCashier ! !

!methodRemoval: RESTInterface #initializeWithAuthenticator:withPriceList: stamp: 'EMI 11/30/2020 19:31:20'!
initializeWithAuthenticator: anAuthenticator withPriceList: aPriceList  
	authenticator := anAuthenticator.
	priceList _ aPriceList.
	currentCartID _ 1.
	carts _ Dictionary new.!

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'EMI 11/30/2020 19:31:41'!
Object subclass: #RESTInterface
	instanceVariableNames: 'authenticator priceList carts currentCartID cashier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterface methodsFor: 'initialization' stamp: 'EMI 11/30/2020 19:31:38' prior: 50926726!
initializeWithAuthenticator: anAuthenticator withPriceList: aPriceList withCashier: aCashier   
	authenticator _ anAuthenticator.
	priceList _ aPriceList.
	currentCartID _ 1.
	carts _ Dictionary new.
	cashier _ aCashier.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 19:35:35' prior: 50926549!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDateString withCardOwnerName: aCardOwnerName
	| cart card date salesBook |
	salesBook _ OrderedCollection new.
	cart _ carts at: aCartID ifAbsent:[].
	date _ GregorianMonthOfYear current.
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: (self formatDate: aCardDateString).
	cashier checkout: cart usingCard: card onDate: date usingSalesBook: salesBook.
	
	^'1'.! !

s copyFrom: 1 to: s size + 1. 'aaaaaaaaaaaaaa' !
!RESTInterface methodsFor: 'private' stamp: 'EMI 11/30/2020 19:38:51'!
formatDate: aDateString
	| monthNumber yearNumber |
	monthNumber _ (aDateString copyFrom: 1 to: 2) asInteger. 
	yearNumber _ (aDateString copyFrom: 3 to: 6) asInteger.
	^GregorianMonthOfYear yearNumber: yearNumber monthNumber: monthNumber.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 19:39:00' prior: 50926773!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDateString withCardOwnerName: aCardOwnerName
	| cart card date salesBook |
	salesBook _ OrderedCollection new.
	cart _ carts at: aCartID ifAbsent:[].
	date _ GregorianMonthOfYear current.
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: (self formatDate: aCardDateString).
	cashier checkout: cart usingCard: card onDate: date usingSalesBook: salesBook.
	^'1'.! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 19:39:28' prior: 50926672!
test07CanCheckoutProductsOfAValidCart
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.
	
	interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.

	self should: [interface listCart: cartID]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotListCartWithInvalidCartID].
	! !
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 11/30/2020 19:40:16'!
defaultCashier
	^Cashier withPriceList: self defaultPriceList withMerchantProcessor: AlwaysValidMerchantProcessorSimulator new.! !

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 11/30/2020 19:40:31'!
FAILURE!
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 19:41:35' prior: 50926803!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDateString withCardOwnerName: aCardOwnerName
	| cart card date salesBook |
	salesBook _ OrderedCollection new.
	cart _ carts at: aCartID ifAbsent:[].
	date _ GregorianMonthOfYear current.
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: (self formatDate: aCardDateString).
	cashier checkout: cart usingCard: card onDate: date usingSalesBook: salesBook.
	
	carts removeKey: aCartID.
	^'1'.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 19:41:42' prior: 50926858!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDateString withCardOwnerName: aCardOwnerName
	| cart card date salesBook |
	salesBook _ OrderedCollection new.
	cart _ carts at: aCartID ifAbsent:[].
	date _ GregorianMonthOfYear current.
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: (self formatDate: aCardDateString).
	cashier checkout: cart usingCard: card onDate: date usingSalesBook: salesBook.
	carts removeKey: aCartID.
	^'1'.! !

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 11/30/2020 19:41:57'!
PASSED!

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 11/30/2020 19:42:00'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 19:42:00'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 11/30/2020 19:42:00'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 11/30/2020 19:42:00'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 11/30/2020 19:42:00'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 11/30/2020 19:42:00'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 11/30/2020 19:42:00'!
PASSED!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 19:42:32'!
test08CannotCheckoutProductsOfAnInvalidCart
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.
	
	interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.

	self should: [interface listCart: cartID]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotListCartWithInvalidCartID].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 19:42:49' prior: 50926922!
test08CannotCheckoutProductsOfAnInvalidCart
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.
	
	interface checkout: '10000' withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.

	self should: [interface listCart: cartID]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotListCartWithInvalidCartID].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 19:43:05' prior: 50926948!
test08CannotCheckoutProductsOfAnInvalidCart
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.

	self should: [interface checkout: '10000' withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotListCartWithInvalidCartID].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 19:43:18' prior: 50926974!
test08CannotCheckoutProductsOfAnInvalidCart
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.

	self should: [interface checkout: '10000' withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotCheckoutCartWithInvalidCartID].
	! !

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 11/30/2020 19:43:32'!
ERROR!
!RESTInterface class methodsFor: 'error messages' stamp: 'EMI 11/30/2020 19:43:43'!
cannotCheckoutCartWithInvalidCartID
	self shouldBeImplemented.! !
!RESTInterface class methodsFor: 'error messages' stamp: 'EMI 11/30/2020 19:44:13' prior: 50927028!
cannotCheckoutCartWithInvalidCartID
	^'Cannot checkout cart with invalid cartID'.! !

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 11/30/2020 19:44:15'!
FAILURE!
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 19:44:53' prior: 50926876!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDateString withCardOwnerName: aCardOwnerName
	| cart card date salesBook |
	salesBook _ OrderedCollection new.
	cart _ carts at: aCartID ifAbsent:[^Error signal: self class cannotCheckoutCartWithInvalidCartID.].
	date _ GregorianMonthOfYear current.
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: (self formatDate: aCardDateString).
	cashier checkout: cart usingCard: card onDate: date usingSalesBook: salesBook.
	carts removeKey: aCartID.
	^'1'.! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 11/30/2020 19:44:56'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 19:44:56'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 11/30/2020 19:44:56'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 11/30/2020 19:44:56'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 11/30/2020 19:44:56'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 11/30/2020 19:44:56'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 11/30/2020 19:44:56'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 11/30/2020 19:44:56'!
PASSED!

----SNAPSHOT----(30 November 2020 19:45:04) CuisUniversity-4383.image priorSource: 18980165!

----SNAPSHOT----(30 November 2020 20:02:43) CuisUniversity-4383.image priorSource: 19054102!

----QUIT----(30 November 2020 20:02:51) CuisUniversity-4383.image priorSource: 19054196!

----STARTUP---- (30 November 2020 20:21:05) as /home/doraserver/CuisUniversity/CuisUniversity-4383.image!

!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 20:34:49' prior: 50927043!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDateString withCardOwnerName: aCardOwnerName
	| cart card date salesBook |
	salesBook _ OrderedCollection new.
	cart _ carts at: aCartID ifAbsent:[^Error signal: self class cannotCheckoutCartWithInvalidCartID.].
	date _ GregorianMonthOfYear current.
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: (self formatDate: aCardDateString).
	cashier checkout: cart usingCard: card onDate: date usingSalesBook: salesBook.
	carts removeKey: aCartID.! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 20:35:31'!
test09CanListPurchasesMadeBValidUser
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.

	self should: [interface checkout: '10000' withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotCheckoutCartWithInvalidCartID].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 20:35:50' prior: 50927124!
test09CanListPurchasesMadeBValidUser
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.

	interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.

	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 20:37:07' prior: 50927149!
test09CanListPurchasesMadeBValidUser
	| interface cartID result |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.

	interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.
	
	result _ interface listPurchases: self validClientID withPassword: self validClientPassword.
	
	self deny: result isEmpty.

	! !

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 11/30/2020 20:37:13'!
ERROR!
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 20:37:20'!
listPurchases: aString withPassword: aString2 
	self shouldBeImplemented.! !

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'EMI 11/30/2020 20:40:53'!
Object subclass: #RESTInterface
	instanceVariableNames: 'authenticator priceList carts currentCartID cashier purchasesByClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 20:40:50' prior: 50927197!
listPurchases: aClientID withPassword: aPassword
	| password purchases bill |
	password _ authenticator at: aClientID ifAbsent:[].
	(password = aPassword) ifFalse: [].
	
	purchases _ purchasesByClient at: aClientID.
	
	bill _ 0.
	purchases do: [:anItem | bill _ bill + priceList at: anItem].
	
	^(purchases asOrderedCollection) add: bill.
	! !
!RESTInterface methodsFor: 'initialization' stamp: 'EMI 11/30/2020 20:41:15' prior: 50926763!
initializeWithAuthenticator: anAuthenticator withPriceList: aPriceList withCashier: aCashier   
	authenticator _ anAuthenticator.
	priceList _ aPriceList.
	currentCartID _ 1.
	carts _ Dictionary new.
	purchasesByClient _ Dictionary new.
	cashier _ aCashier.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 20:42:00' prior: 50927104!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDateString withCardOwnerName: aCardOwnerName
	| cart card date salesBook |
	salesBook _ OrderedCollection new.
	cart _ carts at: aCartID ifAbsent:[^Error signal: self class cannotCheckoutCartWithInvalidCartID.].
	date _ GregorianMonthOfYear current.
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: (self formatDate: aCardDateString).
	cashier checkout: cart usingCard: card onDate: date usingSalesBook: salesBook.
	
	carts removeKey: aCartID.! !

Object subclass: #RESTInterface
	instanceVariableNames: 'authenticator priceList carts currentCartID cashier purchasesByClient clientIDbyCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'EMI 11/30/2020 20:42:39'!
Object subclass: #RESTInterface
	instanceVariableNames: 'authenticator priceList carts currentCartID cashier purchasesByClient clientIDbyCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterface methodsFor: 'initialization' stamp: 'EMI 11/30/2020 20:42:51' prior: 50927225!
initializeWithAuthenticator: anAuthenticator withPriceList: aPriceList withCashier: aCashier   
	authenticator _ anAuthenticator.
	priceList _ aPriceList.
	currentCartID _ 1.
	carts _ Dictionary new.
	purchasesByClient _ Dictionary new.
	clientIDbyCartID _ Dictionary new.
	cashier _ aCashier.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 20:43:15' prior: 50926012!
createCart: anID withPassword: aPassword
	| password cartID |
	password _ authenticator at:anID ifAbsent:[^Error signal: self class cannotCreateCartWithInvalidID.].
	password = aPassword ifFalse:[^Error signal: self class cannotCreateCartWithInvalidPassword.].
	cartID _ self newCartID.
	carts add: cartID -> (Cart createUsingPriceList: priceList).
	clientIDbyCartID add: cartID->anID.
	^cartID.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 20:44:30' prior: 50927236!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDateString withCardOwnerName: aCardOwnerName
	| cart card date salesBook clientID|
	salesBook _ OrderedCollection new.
	cart _ carts at: aCartID ifAbsent:[^Error signal: self class cannotCheckoutCartWithInvalidCartID.].
	date _ GregorianMonthOfYear current.
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: (self formatDate: aCardDateString).
	cashier checkout: cart usingCard: card onDate: date usingSalesBook: salesBook.
	clientID _ clientIDbyCartID at: aCartID.
	(purchasesByClient at: clientID) addAll: cart contents.
	carts removeKey: aCartID.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 20:46:36' prior: 50927301!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDateString withCardOwnerName: aCardOwnerName
	| cart card date salesBook clientID|
	salesBook _ OrderedCollection new.
	cart _ carts at: aCartID ifAbsent:[^Error signal: self class cannotCheckoutCartWithInvalidCartID.].
	date _ GregorianMonthOfYear current.
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: (self formatDate: aCardDateString).
	cashier checkout: cart usingCard: card onDate: date usingSalesBook: salesBook.
	clientID _ clientIDbyCartID at: aCartID.
	(purchasesByClient at: clientID) addAll: cart contents.
	carts removeKey: aCartID.
	clientIDbyCartID removeKey: aCartID.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 20:48:51' prior: 50927324!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDateString withCardOwnerName: aCardOwnerName
	| cart card date salesBook clientID|
	salesBook _ OrderedCollection new.
	cart _ carts at: aCartID ifAbsent:[^Error signal: self class cannotCheckoutCartWithInvalidCartID.].
	date _ GregorianMonthOfYear current.
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: (self formatDate: aCardDateString).
	cashier checkout: cart usingCard: card onDate: date usingSalesBook: salesBook.
	clientID _ clientIDbyCartID at: aCartID.
	(purchasesByClient at: clientID ifAbsent: [purchasesByClient add: clientID->Bag new]) addAll: cart contents.
	carts removeKey: aCartID.
	clientIDbyCartID removeKey: aCartID.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 20:49:07' prior: 50927211!
listPurchases: aClientID withPassword: aPassword
	| password purchases bill |
	password _ authenticator at: aClientID ifAbsent:[].
	(password = aPassword) ifFalse: [].
	
	purchases _ purchasesByClient at: aClientID ifAbsent:[].
	
	bill _ 0.
	purchases do: [:anItem | bill _ bill + priceList at: anItem].
	
	^(purchases asOrderedCollection) add: bill.
	! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 20:49:59' prior: 50927349!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDateString withCardOwnerName: aCardOwnerName
	| cart card date salesBook clientID|
	salesBook _ OrderedCollection new.
	cart _ carts at: aCartID ifAbsent:[^Error signal: self class cannotCheckoutCartWithInvalidCartID.].
	date _ GregorianMonthOfYear current.
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: (self formatDate: aCardDateString).
	cashier checkout: cart usingCard: card onDate: date usingSalesBook: salesBook.
	clientID _ clientIDbyCartID at: aCartID.
	(purchasesByClient at: clientID) addAll: cart contents.
	carts removeKey: aCartID.
	clientIDbyCartID removeKey: aCartID.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 20:50:40' prior: 50927285!
createCart: anID withPassword: aPassword
	| password cartID |
	password _ authenticator at:anID ifAbsent:[^Error signal: self class cannotCreateCartWithInvalidID.].
	password = aPassword ifFalse:[^Error signal: self class cannotCreateCartWithInvalidPassword.].
	cartID _ self newCartID.
	carts add: cartID -> (Cart createUsingPriceList: priceList).
	clientIDbyCartID add: cartID->anID.
	(purchasesByClient includesKey: anID) ifFalse: [purchasesByClient add: anID->(Bag new)].
	^cartID.! !

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 11/30/2020 20:51:11'!
ERROR!
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 20:52:08' prior: 50927375!
listPurchases: aClientID withPassword: aPassword
	| password purchases bill result|
	password _ authenticator at: aClientID ifAbsent:[].
	(password = aPassword) ifFalse: [].
	
	purchases _ purchasesByClient at: aClientID ifAbsent:[].
	
	bill _ 0.
	purchases do: [:anItem | bill _ bill + priceList at: anItem].
	
	result _ purchases asOrderedCollection.
	result add: bill.
	^result
	! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 11/30/2020 20:52:13'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 20:52:13'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 11/30/2020 20:52:13'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 11/30/2020 20:52:13'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 11/30/2020 20:52:13'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 11/30/2020 20:52:13'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 11/30/2020 20:52:13'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 11/30/2020 20:52:13'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 11/30/2020 20:52:13'!
PASSED!

t _ Bag new.
t add: 2; add: 2; add:2; add:1; add:1.!

t.!

t asOrderedCollection.!

t do:[:a | a].!

t do:[:a | a].!
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 21:00:04' prior: 50927436!
listPurchases: aClientID withPassword: aPassword
	| password purchases bill products result|
	password _ authenticator at: aClientID ifAbsent:[].
	(password = aPassword) ifFalse: [].
	
	purchases _ purchasesByClient at: aClientID ifAbsent:[].
	
	bill _ 0.
	purchases do: [:anItem | bill _ bill + priceList at: anItem].
	
	result _ OrderedCollection new.
	products _ purchases asSet.
	products do:[:aProduct | result add: aProduct. 
					     result add: (purchases occurrencesOf: aProduct)].
	result add: bill.
	^result
	! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 11/30/2020 21:00:12'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 21:00:12'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 11/30/2020 21:00:12'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 11/30/2020 21:00:12'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 11/30/2020 21:00:12'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 11/30/2020 21:00:12'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 11/30/2020 21:00:12'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 11/30/2020 21:00:12'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 11/30/2020 21:00:12'!
PASSED!
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 21:04:25' prior: 50927487!
listPurchases: aClientID withPassword: aPassword
	| password purchases bill products result|
	password _ authenticator at: aClientID ifAbsent:[].
	(password = aPassword) ifFalse: [].
	
	result _ OrderedCollection new.
	purchases _ purchasesByClient at: aClientID ifAbsent:[^result].
	
	bill _ 0.
	purchases do: [:anItem | bill _ bill + priceList at: anItem].
	
	
	products _ purchases asSet.
	products do:[:aProduct | result add: aProduct. 
					     result add: (purchases occurrencesOf: aProduct)].
	result add: bill.
	^result
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 21:05:15'!
test10CannotListPurchasesUsingInvalidClientIDOrPassword
	| interface cartID result |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.

	interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.
	
	result _ interface listPurchases: self validClientID withPassword: self validClientPassword.
	
	self deny: result isEmpty.

	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 21:07:53' prior: 50927557!
test10CannotListPurchasesUsingInvalidClientIDOrPassword
	| interface cartID result |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.

	interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.
	
	self should: [interface listPurchases: self invalidClientID withPassword: self validClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotListPurchasesUsingInvalidID].
	
	self should: [interface listPurchases: self validClientID withPassword: self invalidClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotListPurchasesUsingInvalidPassword].


	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 11/30/2020 21:08:04' prior: 50927582!
test10CannotListPurchasesUsingInvalidClientIDOrPassword
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.

	interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.
	
	self should: [interface listPurchases: self invalidClientID withPassword: self validClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotListPurchasesUsingInvalidID].
	
	self should: [interface listPurchases: self validClientID withPassword: self invalidClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotListPurchasesUsingInvalidPassword].


	! !

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 11/30/2020 21:08:06'!
FAILURE!
!RESTInterface class methodsFor: 'error messages' stamp: 'EMI 11/30/2020 21:08:41'!
cannotListPurchasesUsingInvalidID
	^'Cannot ListPurchases using invalid ID'.! !
!RESTInterface class methodsFor: 'error messages' stamp: 'EMI 11/30/2020 21:09:18'!
cannotListPurchasesUsingInvalidPassword
	^'Cannot ListPurchases using invalid password'.! !

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 11/30/2020 21:09:25'!
FAILURE!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 11/30/2020 21:09:25'!
FAILURE!
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 21:10:01' prior: 50927538!
listPurchases: aClientID withPassword: aPassword
	| password purchases bill products result|
	password _ authenticator at: aClientID ifAbsent:[^Error signal: self class cannotListPurchasesUsingInvalidID.].
	(password = aPassword) ifFalse: [].
	
	result _ OrderedCollection new.
	purchases _ purchasesByClient at: aClientID ifAbsent:[^result].
	
	bill _ 0.
	purchases do: [:anItem | bill _ bill + priceList at: anItem].
	
	
	products _ purchases asSet.
	products do:[:aProduct | result add: aProduct. 
					     result add: (purchases occurrencesOf: aProduct)].
	result add: bill.
	^result
	! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 11/30/2020 21:10:19' prior: 50927679!
listPurchases: aClientID withPassword: aPassword
	| password purchases bill products result|
	password _ authenticator at: aClientID ifAbsent:[^Error signal: self class cannotListPurchasesUsingInvalidID.].
	(password = aPassword) ifFalse: [^Error signal: self class cannotListPurchasesUsingInvalidPassword.].
	
	result _ OrderedCollection new.
	purchases _ purchasesByClient at: aClientID ifAbsent:[^result].
	
	bill _ 0.
	purchases do: [:anItem | bill _ bill + priceList at: anItem].
	
	
	products _ purchases asSet.
	products do:[:aProduct | result add: aProduct. 
					     result add: (purchases occurrencesOf: aProduct)].
	result add: bill.
	^result
	! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 11/30/2020 21:10:25'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 11/30/2020 21:10:25'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 11/30/2020 21:10:25'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 11/30/2020 21:10:25'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 11/30/2020 21:10:25'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 11/30/2020 21:10:25'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 11/30/2020 21:10:25'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 11/30/2020 21:10:25'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 11/30/2020 21:10:25'!
PASSED!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 11/30/2020 21:10:25'!
PASSED!

----SNAPSHOT----(30 November 2020 21:12:20) CuisUniversity-4383.image priorSource: 19054290!

----QUIT----(30 November 2020 21:12:29) CuisUniversity-4383.image priorSource: 19075508!

----STARTUP---- (1 December 2020 19:36:33) as /home/doraserver/CuisUniversity/CuisUniversity-4383.image!

!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/1/2020 19:40:40'!
test11CannotAddProductToExpiredCart
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList withCashier: self defaultCashier.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	self should: [interface addToCart: '11111' productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartID].! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/1/2020 19:41:08' prior: 50927769!
test11CannotAddProductToExpiredCart
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	self should: [interface addToCart: '11111' productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartID].! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/1/2020 19:45:17' prior: 50927789!
test11CannotAddProductToExpiredCart
	| interface cartID clock |
	clock _ self defaultClock.
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier
						    withClock: clock.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	clock foward30Min.
	
	self should: [interface addToCart: '11111' productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartID].! !

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/1/2020 19:45:26'!
ERROR!
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 12/1/2020 19:45:34'!
defaultClock
	self shouldBeImplemented.! !

DateAndTime current.!

DateAndTime now.!

DateAndTime now.!

DateAndTime now + 30.!

DateAndTime now + DateAndTime nowUpToSeconds.!

DateAndTime nowUpToSeconds.!

Time now.!
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 12/1/2020 19:53:35' prior: 50927836!
defaultClock
	^[DateAndTime now].! !

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/1/2020 19:53:37'!
ERROR!
!RESTInterface class methodsFor: 'instance creation' stamp: 'EMI 12/1/2020 19:54:15'!
withAuthenticator: anAuthenticator withPriceList: aPriceList withCashier: aCashier withClock: aClock    
	^self new initializeWithAuthenticator: anAuthenticator withPriceList: aPriceList withCashier: aCashier ! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/1/2020 19:54:15' prior: 50926999!
test08CannotCheckoutProductsOfAnInvalidCart
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier withClock: self defaultClock.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.

	self should: [interface checkout: '10000' withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotCheckoutCartWithInvalidCartID].
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/1/2020 19:54:15' prior: 50926610!
test04CanAddOneProductToValidCart
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList withCashier: self defaultCashier withClock: self defaultClock.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	self assert: (interface listCart: cartID) size equals: 1.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/1/2020 19:54:15' prior: 50926591!
test03CannotListCartUsingInvalidCartID
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList withCashier: self defaultCashier withClock: self defaultClock.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	self should: [interface listCart: '2']
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: interface class cannotListCartWithInvalidCartID].
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/1/2020 19:54:15' prior: 50927170!
test09CanListPurchasesMadeBValidUser
	| interface cartID result |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier withClock: self defaultClock.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.

	interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.
	
	result _ interface listPurchases: self validClientID withPassword: self validClientPassword.
	
	self deny: result isEmpty.

	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/1/2020 19:54:15' prior: 50926566!
test02CannotCreateCartUsingInvalidIDOrPassword
	| interface |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList withCashier: self defaultCashier withClock: self defaultClock.
	
	self should: [interface createCart: self invalidClientID withPassword: self validClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: interface class cannotCreateCartWithInvalidID].
	
	self should: [interface createCart: self validClientID withPassword: self invalidClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: interface class cannotCreateCartWithInvalidPassword].
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/1/2020 19:54:15' prior: 50926627!
test05CanHaveMoreThanOneValidCart
	| interface cartID cartID2 |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList withCashier: self defaultCashier withClock: self defaultClock.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	cartID2 _ interface createCart: self anotherValidClientID withPassword: self validClientPassword.
	interface addToCart: cartID2 productName: self anotherValidProductName quantity: 5.
	
	self assert: (interface listCart: cartID) size equals: 1.
	self assert: ((interface listCart: cartID) includes: self validProductName).
	self assert: (interface listCart: cartID2) size equals: 5.
	self assert: ((interface listCart: cartID2) includes: self anotherValidProductName).
! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/1/2020 19:54:15' prior: 50926698!
test06CannotAddProductToCartWithInvalidCartID
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList withCashier: self defaultCashier withClock: self defaultClock.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	self should: [interface addToCart: '11111' productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartID].! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/1/2020 19:54:15' prior: 50926821!
test07CanCheckoutProductsOfAValidCart
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier withClock: self defaultClock.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.
	
	interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.

	self should: [interface listCart: cartID]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotListCartWithInvalidCartID].
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/1/2020 19:54:15' prior: 50927619!
test10CannotListPurchasesUsingInvalidClientIDOrPassword
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier withClock: self defaultClock.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.

	interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.
	
	self should: [interface listPurchases: self invalidClientID withPassword: self validClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotListPurchasesUsingInvalidID].
	
	self should: [interface listPurchases: self validClientID withPassword: self invalidClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotListPurchasesUsingInvalidPassword].


	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/1/2020 19:54:15' prior: 50926657!
test01CanCreateEmptyCartUsingValidIDAndPassword
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList withCashier: self defaultCashier withClock: self defaultClock.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	self assert: (interface listCart: cartID) isEmpty.! !

!methodRemoval: RESTInterface class #withAuthenticator:withPriceList:withCashier: stamp: 'EMI 12/1/2020 19:54:15'!
withAuthenticator: anAuthenticator withPriceList: aPriceList withCashier: aCashier   
	^self new initializeWithAuthenticator: anAuthenticator withPriceList: aPriceList withCashier: aCashier !
!RESTInterface methodsFor: 'initialization' stamp: 'EMI 12/1/2020 19:54:42'!
initializeWithAuthenticator: anAuthenticator withPriceList: aPriceList withCashier: aCashier withClock: aClock    
	authenticator _ anAuthenticator.
	priceList _ aPriceList.
	currentCartID _ 1.
	carts _ Dictionary new.
	purchasesByClient _ Dictionary new.
	clientIDbyCartID _ Dictionary new.
	cashier _ aCashier.! !
!RESTInterface class methodsFor: 'as yet unclassified' stamp: 'EMI 12/1/2020 19:54:42' prior: 50927854!
withAuthenticator: anAuthenticator withPriceList: aPriceList withCashier: aCashier withClock: aClock    
	^self new initializeWithAuthenticator: anAuthenticator withPriceList: aPriceList withCashier: aCashier withClock: aClock ! !

!methodRemoval: RESTInterface #initializeWithAuthenticator:withPriceList:withCashier: stamp: 'EMI 12/1/2020 19:54:42'!
initializeWithAuthenticator: anAuthenticator withPriceList: aPriceList withCashier: aCashier   
	authenticator _ anAuthenticator.
	priceList _ aPriceList.
	currentCartID _ 1.
	carts _ Dictionary new.
	purchasesByClient _ Dictionary new.
	clientIDbyCartID _ Dictionary new.
	cashier _ aCashier.!

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'EMI 12/1/2020 19:54:52'!
Object subclass: #RESTInterface
	instanceVariableNames: 'authenticator priceList carts currentCartID cashier purchasesByClient clientIDbyCartID clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterface methodsFor: 'initialization' stamp: 'EMI 12/1/2020 19:54:49' prior: 50928122!
initializeWithAuthenticator: anAuthenticator withPriceList: aPriceList withCashier: aCashier withClock: aClock    
	authenticator _ anAuthenticator.
	priceList _ aPriceList.
	currentCartID _ 1.
	carts _ Dictionary new.
	purchasesByClient _ Dictionary new.
	clientIDbyCartID _ Dictionary new.
	cashier _ aCashier.
	clock _ aClock.! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/1/2020 19:55:18' prior: 50928059!
test10CannotListPurchasesUsingInvalidClientIDOrPassword
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier 
						    withClock: self defaultClock.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.

	interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.
	
	self should: [interface listPurchases: self invalidClientID withPassword: self validClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotListPurchasesUsingInvalidID].
	
	self should: [interface listPurchases: self validClientID withPassword: self invalidClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotListPurchasesUsingInvalidPassword].


	! !

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/1/2020 19:55:22'!
ERROR!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/1/2020 19:55:29'!
ERROR!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/1/2020 19:55:29'!
ERROR!

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/1/2020 19:55:40'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/1/2020 19:55:40'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/1/2020 19:55:40'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/1/2020 19:55:40'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/1/2020 19:55:40'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/1/2020 19:55:40'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/1/2020 19:55:40'!
ERROR!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/1/2020 19:55:40'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/1/2020 19:55:40'!
ERROR!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/1/2020 19:55:40'!
ERROR!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/1/2020 19:55:40'!
ERROR!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/1/2020 19:55:44'!
ERROR!

GregorianMonthOfYear current monthNumber.!

GregorianMonthOfYear current next monthNumber.!
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 12/1/2020 19:59:38' prior: 50926487!
validCardDate
	| date month |
	date _ (GregorianMonthOfYear current) next.
	month _ date monthNumber asString.
	^month, date year number asString.! !
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 12/1/2020 20:00:38' prior: 50928278!
validCardDate
	| date month |
	date _ (GregorianMonthOfYear current) next.
	month _ date monthNumber asString.
	(month size = 1) ifTrue:[month _ '0',month].
	^month, date year number asString.! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/1/2020 20:00:45'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/1/2020 20:00:45'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/1/2020 20:00:45'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/1/2020 20:00:45'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/1/2020 20:00:45'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/1/2020 20:00:45'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/1/2020 20:00:45'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/1/2020 20:00:45'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/1/2020 20:00:45'!
PASSED!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/1/2020 20:00:45'!
PASSED!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/1/2020 20:00:45'!
ERROR!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/1/2020 20:00:45'!
ERROR!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/1/2020 20:01:54' prior: 50927810!
test11CannotAddProductToExpiredCart
	| interface cartID clock |
	clock _ self defaultClock.
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier
						    withClock: clock.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	clock _ self foward30Min: clock.
	
	self should: [interface addToCart: '11111' productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartID].! !

100 minutes!

DateAndTime now + 30 minutes!
!RESTInterfaceTest methodsFor: 'nil' stamp: 'EMI 12/1/2020 20:04:28'!
foward30Min: aClock
	^[DateAndTime now + 30 minutes].
! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/1/2020 20:04:39'!
foward30Min
	^[DateAndTime now + 30 minutes].
! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/1/2020 20:04:39' prior: 50928338!
test11CannotAddProductToExpiredCart
	| interface cartID clock |
	clock _ self defaultClock.
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier
						    withClock: clock.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	clock _ self foward30Min.
	
	self should: [interface addToCart: '11111' productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartID].! !

!methodRemoval: RESTInterfaceTest #foward30Min: stamp: 'EMI 12/1/2020 20:04:39'!
foward30Min: aClock
	^[DateAndTime now + 30 minutes].
!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/1/2020 20:05:09' prior: 50928372!
test11CannotAddProductToExpiredCart
	| interface cartID clock |
	clock _ self defaultClock.
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier
						    withClock: clock.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	self foward30Min: clock.
	
	self should: [interface addToCart: '11111' productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartID].! !

!methodRemoval: RESTInterfaceTest #foward30Min stamp: 'EMI 12/1/2020 20:05:56'!
foward30Min
	^[DateAndTime now + 30 minutes].
!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/1/2020 20:06:15' prior: 50928400!
test11CannotAddProductToExpiredCart
	| interface cartID clock |
	clock _ self defaultClock.
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier
						    withClock: clock.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	clock foward30minutes.
	
	self should: [interface addToCart: '11111' productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartID].! !

!classDefinition: #Clock category: 'TusLibros' stamp: 'EMI 12/1/2020 20:06:51'!
Object subclass: #Clock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 12/1/2020 20:06:38' prior: 50927846!
defaultClock
	^Clock now.! !

Object subclass: #Clock
	instanceVariableNames: 'time'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Clock category: 'TusLibros' stamp: 'EMI 12/1/2020 20:07:03'!
Object subclass: #Clock
	instanceVariableNames: 'time'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Clock class methodsFor: 'nil' stamp: 'EMI 12/1/2020 20:07:29'!
now
	^self new initialize.! !
!Clock methodsFor: 'nil' stamp: 'EMI 12/1/2020 20:07:44' overrides: 16896425!
initialize
	time _ DateAndTime now.! !
!Clock methodsFor: 'nil' stamp: 'EMI 12/1/2020 20:08:20'!
now
	^time now.! !
!Clock methodsFor: 'as yet unclassified' stamp: 'EMI 12/1/2020 20:09:23' prior: 50928474 overrides: 16896425!
initialize
	time _ [DateAndTime now].! !
!Clock methodsFor: 'as yet unclassified' stamp: 'EMI 12/1/2020 20:09:53'!
foward30Minutes
	time _ [DateAndTime now + 30 minutes].! !
!Clock methodsFor: 'as yet unclassified' stamp: 'EMI 12/1/2020 20:09:59' prior: 50928478!
now
	^time value.! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/1/2020 20:11:39' prior: 50928427!
test11CannotAddProductToExpiredCart
	| interface cartID clock |
	clock _ self defaultClock.
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier
						    withClock: clock.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	clock foward30Minutes.
	
	self should: [interface addToCart: '11111' productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartID].! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/1/2020 20:12:52' prior: 50928496!
test11CannotAddProductToExpiredCart
	| interface cartID clock |
	clock _ self defaultClock.
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier
						    withClock: clock.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	clock foward30Minutes.
	
	self should: [interface addToCart: '11111' productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotUseAnExpiredCartID].! !

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/1/2020 20:12:59'!
ERROR!
!RESTInterface class methodsFor: 'error messages' stamp: 'EMI 12/1/2020 20:13:10'!
cannotUseAnExpiredCartID
	self shouldBeImplemented.! !
!RESTInterface class methodsFor: 'error messages' stamp: 'EMI 12/1/2020 20:13:27' prior: 50928545!
cannotUseAnExpiredCartID
	^'Cannot use an expired cart ID.'.! !

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/1/2020 20:13:28'!
FAILURE!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/1/2020 20:13:44' prior: 50928519!
test11CannotAddProductToExpiredCart
	| interface cartID clock |
	clock _ self defaultClock.
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier
						    withClock: clock.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	clock foward30Minutes.
	
	self should: [interface addToCart: cartID productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotUseAnExpiredCartID].! !

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/1/2020 20:13:45'!
FAILURE!

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'EMI 12/1/2020 20:14:51'!
Object subclass: #RESTInterface
	instanceVariableNames: 'authenticator priceList carts currentCartID cashier purchasesByClient clientIDbyCartID clock cartIDLastTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/1/2020 20:14:49' prior: 50927414!
createCart: anID withPassword: aPassword
	| password cartID |
	password _ authenticator at:anID ifAbsent:[^Error signal: self class cannotCreateCartWithInvalidID.].
	password = aPassword ifFalse:[^Error signal: self class cannotCreateCartWithInvalidPassword.].
	cartID _ self newCartID.
	carts add: cartID -> (Cart createUsingPriceList: priceList).
	clientIDbyCartID add: cartID->anID.
	(purchasesByClient includesKey: anID) ifFalse: [purchasesByClient add: anID->(Bag new)].
	cartIDLastTimeUsed add: cartID -> clock now.
	^cartID.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/1/2020 20:16:49' prior: 50926249!
addToCart: aCartID productName: aProductName quantity: aProductAmount
	| cart lastUsed |
	cart _ carts at: aCartID ifAbsent:[^Error signal: self class cannotAddProductToCartWithInvalidCartID.].
	lastUsed _ cartIDLastTimeUsed at: aCartID.
	(clock now > (lastUsed + 30 minutes)) ifTrue: [
		^Error signal: self class cannotUseAnExpiredCartID.
	].
	cart add: aProductName amount: aProductAmount.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/1/2020 20:17:41' prior: 50928615!
addToCart: aCartID productName: aProductName quantity: aProductAmount
	| cart lastUsed |
	cart _ carts at: aCartID ifAbsent:[^Error signal: self class cannotAddProductToCartWithInvalidCartID.].
	lastUsed _ cartIDLastTimeUsed at: aCartID.
	(clock now > (lastUsed + 30 minutes)) ifTrue: [
		cartIDLastTimeUsed.
		^Error signal: self class cannotUseAnExpiredCartID.
	].
	cart add: aProductName amount: aProductAmount.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/1/2020 20:18:25' prior: 50928630!
addToCart: aCartID productName: aProductName quantity: aProductAmount
	| cart lastUsed |
	cart _ carts at: aCartID ifAbsent:[^Error signal: self class cannotAddProductToCartWithInvalidCartID.].
	lastUsed _ cartIDLastTimeUsed at: aCartID.
	(clock now > (lastUsed + 30 minutes)) ifTrue: [
		cartIDLastTimeUsed removeKey: aCartID.
		carts removeKey: aCartID.
		clientIDbyCartID removeKey: aCartID.
		^Error signal: self class cannotUseAnExpiredCartID.
	].
	cart add: aProductName amount: aProductAmount.! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/1/2020 20:19:49' prior: 50928559!
test11CannotAddProductToExpiredCart
	| interface cartID clock |
	clock _ self defaultClock.
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier
						    withClock: clock.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	clock foward30Minutes.
	
	self should: [interface addToCart: cartID productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotUseAnExpiredCartID].
	
	self should: [interface addToCart: cartID productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartID].
	! !

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/1/2020 20:20:04'!
ERROR!
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/1/2020 20:20:17' prior: 50928595!
createCart: anID withPassword: aPassword
	| password cartID |
	password _ authenticator at:anID ifAbsent:[^Error signal: self class cannotCreateCartWithInvalidID.].
	password = aPassword ifFalse:[^Error signal: self class cannotCreateCartWithInvalidPassword.].
	cartID _ self newCartID.
	carts add: cartID -> (Cart createUsingPriceList: priceList).
	clientIDbyCartID add: cartID->anID.
	(purchasesByClient includesKey: anID) ifFalse: [purchasesByClient add: anID->(Bag new)].
	cartIDLastTimeUsed add: (cartID -> clock now).
	^cartID.! !

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/1/2020 20:20:18'!
ERROR!
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/1/2020 20:20:32' prior: 50928698!
createCart: anID withPassword: aPassword
	| password cartID |
	password _ authenticator at:anID ifAbsent:[^Error signal: self class cannotCreateCartWithInvalidID.].
	password = aPassword ifFalse:[^Error signal: self class cannotCreateCartWithInvalidPassword.].
	cartID _ self newCartID.
	carts add: cartID -> (Cart createUsingPriceList: priceList).
	clientIDbyCartID add: cartID->anID.
	(purchasesByClient includesKey: anID) ifFalse: [purchasesByClient add: anID->(Bag new)].
	cartIDLastTimeUsed add: (cartID -> (clock now)).
	^cartID.! !

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/1/2020 20:20:33'!
ERROR!
!RESTInterface methodsFor: 'initialization' stamp: 'EMI 12/1/2020 20:21:32' prior: 50928169!
initializeWithAuthenticator: anAuthenticator withPriceList: aPriceList withCashier: aCashier withClock: aClock    
	authenticator _ anAuthenticator.
	priceList _ aPriceList.
	currentCartID _ 1.
	carts _ Dictionary new.
	purchasesByClient _ Dictionary new.
	clientIDbyCartID _ Dictionary new.
	cartIDLastTimeUsed _ Dictionary new.
	cashier _ aCashier.
	clock _ aClock.! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/1/2020 20:21:35'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/1/2020 20:21:35'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/1/2020 20:21:35'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/1/2020 20:21:35'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/1/2020 20:21:35'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/1/2020 20:21:35'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/1/2020 20:21:35'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/1/2020 20:21:35'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/1/2020 20:21:35'!
PASSED!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/1/2020 20:21:35'!
PASSED!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/1/2020 20:21:35'!
PASSED!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/1/2020 20:23:09'!
test12CannotCheckoutAnExpiredCart
	| interface cartID clock |
	clock _ self defaultClock.
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier
						    withClock: clock.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	clock foward30Minutes.
	
	self should: [interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotUseAnExpiredCartID].
	
	self should: [interface addToCart: cartID productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartID].
	! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/1/2020 20:25:24' prior: 50928646!
addToCart: aCartID productName: aProductName quantity: aProductAmount
	| cart lastUsed |
	cart _ carts at: aCartID ifAbsent:[^Error signal: self class cannotAddProductToCartWithInvalidCartID.].
	lastUsed _ cartIDLastTimeUsed at: aCartID.
	(clock now > (lastUsed + 30 minutes)) ifTrue: [
		cartIDLastTimeUsed removeKey: aCartID.
		carts removeKey: aCartID.
		clientIDbyCartID removeKey: aCartID.
		^Error signal: self class cannotUseAnExpiredCartID.
	].
	cartIDLastTimeUsed at: aCartID put: clock now.
	cart add: aProductName amount: aProductAmount.! !
!RESTInterface methodsFor: 'nil' stamp: 'EMI 12/1/2020 20:26:32'!
checkCartExpiration: aCartID! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/1/2020 20:26:50' prior: 50928832!
addToCart: aCartID productName: aProductName quantity: aProductAmount
	| cart |
	cart _ carts at: aCartID ifAbsent:[^Error signal: self class cannotAddProductToCartWithInvalidCartID.].

	cartIDLastTimeUsed at: aCartID put: clock now.
	cart add: aProductName amount: aProductAmount.! !
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'EMI 12/1/2020 20:27:34' prior: 50928852!
checkCartExpiration: aCartID
	| lastUsed |
	lastUsed _ cartIDLastTimeUsed at: aCartID.
	(clock now > (lastUsed + 30 minutes)) ifTrue: [
		cartIDLastTimeUsed removeKey: aCartID.
		carts removeKey: aCartID.
		clientIDbyCartID removeKey: aCartID.
		^false.
	].
	^true.! !
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'EMI 12/1/2020 20:27:42' prior: 50928868!
checkCartExpiration: aCartID
	| lastUsed |
	lastUsed _ cartIDLastTimeUsed at: aCartID.
	(clock now > (lastUsed + 30 minutes)) ifTrue: [
		cartIDLastTimeUsed removeKey: aCartID.
		carts removeKey: aCartID.
		clientIDbyCartID removeKey: aCartID.
		^true.
	].
	^false.! !
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'EMI 12/1/2020 20:27:53'!
isCartExpired: aCartID
	| lastUsed |
	lastUsed _ cartIDLastTimeUsed at: aCartID.
	(clock now > (lastUsed + 30 minutes)) ifTrue: [
		cartIDLastTimeUsed removeKey: aCartID.
		carts removeKey: aCartID.
		clientIDbyCartID removeKey: aCartID.
		^true.
	].
	^false.! !

!methodRemoval: RESTInterface #checkCartExpiration: stamp: 'EMI 12/1/2020 20:27:53'!
checkCartExpiration: aCartID
	| lastUsed |
	lastUsed _ cartIDLastTimeUsed at: aCartID.
	(clock now > (lastUsed + 30 minutes)) ifTrue: [
		cartIDLastTimeUsed removeKey: aCartID.
		carts removeKey: aCartID.
		clientIDbyCartID removeKey: aCartID.
		^true.
	].
	^false.!
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/1/2020 20:28:15' prior: 50928856!
addToCart: aCartID productName: aProductName quantity: aProductAmount
	| cart |
	cart _ carts at: aCartID ifAbsent:[^Error signal: self class cannotAddProductToCartWithInvalidCartID.].
	(self isCartExpired: aCartID) ifTrue: [^Error signal: self class cannotUseAnExpiredCartID.].
	cartIDLastTimeUsed at: aCartID put: clock now.
	cart add: aProductName amount: aProductAmount.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/1/2020 20:29:31' prior: 50927389!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDateString withCardOwnerName: aCardOwnerName
	| cart card date salesBook clientID|
	salesBook _ OrderedCollection new.
	
	cart _ carts at: aCartID ifAbsent:[^Error signal: self class cannotCheckoutCartWithInvalidCartID.].
	(self isCartExpired: aCartID) ifTrue: [^Error signal: self class cannotUseAnExpiredCartID.].
	cartIDLastTimeUsed at: aCartID put: clock now.
	
	date _ GregorianMonthOfYear current.
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: (self formatDate: aCardDateString).
	cashier checkout: cart usingCard: card onDate: date usingSalesBook: salesBook.
	
	clientID _ clientIDbyCartID at: aCartID.
	(purchasesByClient at: clientID) addAll: cart contents.
	carts removeKey: aCartID.
	clientIDbyCartID removeKey: aCartID.
	cartIDLastTimeUsed removeKey: aCartID.! !

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/1/2020 20:30:04'!
PASSED!

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/1/2020 20:30:04'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/1/2020 20:30:04'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/1/2020 20:30:04'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/1/2020 20:30:04'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/1/2020 20:30:04'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/1/2020 20:30:04'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/1/2020 20:30:04'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/1/2020 20:30:04'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/1/2020 20:30:04'!
PASSED!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/1/2020 20:30:04'!
PASSED!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/1/2020 20:30:04'!
PASSED!

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/1/2020 20:30:04'!
PASSED!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/1/2020 20:30:21'!
test13CannotListAnExpiredCart
	| interface cartID clock |
	clock _ self defaultClock.
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier
						    withClock: clock.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	clock foward30Minutes.
	
	self should: [interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotUseAnExpiredCartID].
	
	self should: [interface addToCart: cartID productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartID].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/1/2020 20:30:57' prior: 50929004!
test13CannotListAnExpiredCart
	| interface cartID clock |
	clock _ self defaultClock.
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier
						    withClock: clock.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	clock foward30Minutes.
	
	self should: [interface listCart: cartID]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotUseAnExpiredCartID].
	
	self should: [interface addToCart: cartID productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartID].
	! !

!testRun: #RESTInterfaceTest #test13CannotListAnExpiredCart stamp: 'EMI 12/1/2020 20:31:04'!
FAILURE!
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/1/2020 20:31:34' prior: 50926001!
listCart: aCartID
	(carts includesKey: aCartID) ifFalse: [^Error signal: RESTInterface cannotListCartWithInvalidCartID].
	(self isCartExpired: aCartID) ifTrue: [^Error signal: self class cannotUseAnExpiredCartID.].
	cartIDLastTimeUsed at: aCartID put: clock now.
	^(carts at: aCartID) contents.! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/1/2020 20:32:30'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/1/2020 20:32:30'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/1/2020 20:32:30'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/1/2020 20:32:30'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/1/2020 20:32:30'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/1/2020 20:32:30'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/1/2020 20:32:30'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/1/2020 20:32:30'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/1/2020 20:32:30'!
PASSED!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/1/2020 20:32:30'!
PASSED!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/1/2020 20:32:30'!
PASSED!

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/1/2020 20:32:30'!
PASSED!

!testRun: #RESTInterfaceTest #test13CannotListAnExpiredCart stamp: 'EMI 12/1/2020 20:32:30'!
PASSED!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/1/2020 20:34:06'!
test14UsingCartResetsClockExpiration
	| interface cartID clock |
	clock _ self defaultClock.
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier
						    withClock: clock.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	clock foward30Minutes.
	
	self should: [interface listCart: cartID]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotUseAnExpiredCartID].
	
	self should: [interface addToCart: cartID productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartID].
	! !
!Clock methodsFor: 'clock operations' stamp: 'EMI 12/1/2020 20:36:02'!
fowardMinutes: aMinutesAmount
	(aMinutesAmount > 0 and:[aMinutesAmount isInteger]) ifFalse: [^Error signal: self class minutesAmountMustBePositiveInteger.].
	time _ [DateAndTime now + aMinutesAmount minutes].! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/1/2020 20:36:39' prior: 50929130!
test14UsingCartResetsClockExpiration
	| interface cartID clock |
	clock _ self defaultClock.
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier
						    withClock: clock.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	clock fowardMinutes: 15 minutes.
	
	self should: [interface listCart: cartID]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotUseAnExpiredCartID].
	
	self should: [interface addToCart: cartID productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartID].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/1/2020 20:36:58' prior: 50929171!
test14UsingCartResetsClockExpiration
	| interface cartID clock |
	clock _ self defaultClock.
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier
						    withClock: clock.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	clock fowardMinutes: 15.
	
	self should: [interface listCart: cartID]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotUseAnExpiredCartID].
	
	self should: [interface addToCart: cartID productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartID].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/1/2020 20:37:24' prior: 50929202!
test14UsingCartResetsClockExpiration
	| interface cartID clock |
	clock _ self defaultClock.
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier
						    withClock: clock.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.

	clock fowardMinutes: 15.
	
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	self should: [interface listCart: cartID]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotUseAnExpiredCartID].
	
	self should: [interface addToCart: cartID productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartID].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/1/2020 20:38:13' prior: 50929233!
test14UsingCartResetsClockExpiration
	| interface cartID clock |
	clock _ self defaultClock.
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier
						    withClock: clock.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.

	clock fowardMinutes: 15.
	
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	clock fowardMinutes: 15.
	
	self deny: (interface listCart: cartID) isEmpty.

	! !

!testRun: #RESTInterfaceTest #test14UsingCartResetsClockExpiration stamp: 'EMI 12/1/2020 20:38:59'!
PASSED!

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/1/2020 20:39:00'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/1/2020 20:39:00'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/1/2020 20:39:00'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/1/2020 20:39:00'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/1/2020 20:39:00'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/1/2020 20:39:00'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/1/2020 20:39:00'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/1/2020 20:39:00'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/1/2020 20:39:00'!
PASSED!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/1/2020 20:39:00'!
PASSED!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/1/2020 20:39:00'!
PASSED!

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/1/2020 20:39:00'!
PASSED!

!testRun: #RESTInterfaceTest #test13CannotListAnExpiredCart stamp: 'EMI 12/1/2020 20:39:00'!
PASSED!

!testRun: #RESTInterfaceTest #test14UsingCartResetsClockExpiration stamp: 'EMI 12/1/2020 20:39:00'!
PASSED!

Object subclass: #Authenticator
	instanceVariableNames: 'validIdentities'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Authenticator category: 'TusLibros' stamp: 'EMI 12/1/2020 20:42:14'!
Object subclass: #Authenticator
	instanceVariableNames: 'validIdentities'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 12/1/2020 20:43:11' prior: 50925830!
defaultAuthenticator
	| validUsers |
	validUsers _ Dictionary with: self validClientID -> self validClientPassword with: self anotherValidClientID -> self validClientPassword.
	^Authenticator withUsers: validUsers.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/1/2020 20:44:19' prior: 50928721!
createCart: anID withPassword: aPassword
	| cartID |
	authenticator checkUser: anID withPassword: aPassword.
	
	cartID _ self newCartID.
	carts add: cartID -> (Cart createUsingPriceList: priceList).
	clientIDbyCartID add: cartID->anID.
	(purchasesByClient includesKey: anID) ifFalse: [purchasesByClient add: anID->(Bag new)].
	cartIDLastTimeUsed add: (cartID -> (clock now)).
	^cartID.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/1/2020 20:44:53' prior: 50927701!
listPurchases: aClientID withPassword: aPassword
	| purchases bill products result|
	authenticator checkUser: aClientID withPassword: aPassword.
	
	result _ OrderedCollection new.
	purchases _ purchasesByClient at: aClientID ifAbsent:[^result].
	
	bill _ 0.
	purchases do: [:anItem | bill _ bill + priceList at: anItem].
	
	
	products _ purchases asSet.
	products do:[:aProduct | result add: aProduct. 
					     result add: (purchases occurrencesOf: aProduct)].
	result add: bill.
	^result
	! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/1/2020 20:45:03'!
ERROR!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/1/2020 20:45:03'!
ERROR!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/1/2020 20:45:03'!
ERROR!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/1/2020 20:45:03'!
ERROR!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/1/2020 20:45:03'!
ERROR!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/1/2020 20:45:03'!
ERROR!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/1/2020 20:45:03'!
ERROR!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/1/2020 20:45:03'!
ERROR!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/1/2020 20:45:03'!
ERROR!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/1/2020 20:45:03'!
ERROR!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/1/2020 20:45:03'!
ERROR!

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/1/2020 20:45:03'!
ERROR!

!testRun: #RESTInterfaceTest #test13CannotListAnExpiredCart stamp: 'EMI 12/1/2020 20:45:03'!
ERROR!

!testRun: #RESTInterfaceTest #test14UsingCartResetsClockExpiration stamp: 'EMI 12/1/2020 20:45:03'!
ERROR!

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/1/2020 20:45:05'!
ERROR!
!Authenticator class methodsFor: 'instance creation' stamp: 'EMI 12/1/2020 20:45:13'!
withUsers: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithUsers: aDictionary ! !
!Authenticator class methodsFor: 'instance creation' stamp: 'EMI 12/1/2020 20:45:27' prior: 50929445!
withUsers: aUsersDictionary 
	^self new initializeWithUsers: aUsersDictionary ! !
!Authenticator class methodsFor: 'instance creation' stamp: 'EMI 12/1/2020 20:45:29' prior: 50929454!
withUsers: aUsersDictionary 
	^self new initializeWithUsers: aUsersDictionary. ! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/1/2020 20:45:33'!
ERROR!

!classDefinition: #Authenticator category: 'TusLibros' stamp: 'EMI 12/1/2020 20:45:55'!
Object subclass: #Authenticator
	instanceVariableNames: 'validIdentities usersDictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Authenticator methodsFor: 'initialization' stamp: 'EMI 12/1/2020 20:45:55'!
initializeWithUsers: aUsersDictionary 
	self shouldBeImplemented.
	usersDictionary := aUsersDictionary.! !
!Authenticator methodsFor: 'initialization' stamp: 'EMI 12/1/2020 20:46:03' prior: 50929477!
initializeWithUsers: aUsersDictionary 
	usersDictionary _ aUsersDictionary.! !
!Authenticator methodsFor: 'initialization' stamp: 'EMI 12/1/2020 20:46:25' prior: 50929484!
initializeWithUsers: aUsersDictionary 
	validIdentities _ aUsersDictionary.! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/1/2020 20:46:27'!
ERROR!
!Authenticator methodsFor: 'testing' stamp: 'EMI 12/1/2020 20:46:45'!
checkUser: aString withPassword: aString2 
	self shouldBeImplemented.! !
!Authenticator methodsFor: 'testing' stamp: 'EMI 12/1/2020 20:48:21' prior: 50929499!
checkUser: aClientID withPassword: aPassword
	| password |
	password _ validIdentities at: aClientID ifAbsent:[^Error signal: self class cannotOperateUsingInvalidClientID].
	(password = aPassword ) ifFalse: [self class cannotOperateUsingInvalidPassword.].! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/1/2020 20:48:26'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/1/2020 20:48:31'!
FAILURE!
!Authenticator class methodsFor: 'nil' stamp: 'EMI 12/1/2020 20:49:09'!
cannotOperateUsingInvalidClientID
	^'Cannot operate using invalid Client ID'.! !
!Authenticator class methodsFor: 'as yet unclassified' stamp: 'EMI 12/1/2020 20:49:22'!
cannotOperateUsingInvalidPassword
	^'Cannot operate using invalid password'.! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/1/2020 20:49:36'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/1/2020 20:49:36'!
FAILURE!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/1/2020 20:49:36'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/1/2020 20:49:36'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/1/2020 20:49:36'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/1/2020 20:49:36'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/1/2020 20:49:36'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/1/2020 20:49:36'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/1/2020 20:49:36'!
PASSED!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/1/2020 20:49:36'!
FAILURE!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/1/2020 20:49:36'!
PASSED!

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/1/2020 20:49:36'!
PASSED!

!testRun: #RESTInterfaceTest #test13CannotListAnExpiredCart stamp: 'EMI 12/1/2020 20:49:36'!
PASSED!

!testRun: #RESTInterfaceTest #test14UsingCartResetsClockExpiration stamp: 'EMI 12/1/2020 20:49:36'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/1/2020 20:49:40'!
FAILURE!
!Authenticator methodsFor: 'testing' stamp: 'EMI 12/1/2020 20:52:14' prior: 50929504!
checkUser: aClientID withPassword: aPassword
	| password |
	password _ validIdentities at: aClientID ifAbsent:[^false].
	(password = aPassword ) ifFalse: [^false].
	^true.! !
!Authenticator methodsFor: 'testing' stamp: 'EMI 12/1/2020 20:48:21' prior: 50929586!
checkUser: aClientID withPassword: aPassword
	| password |
	password _ validIdentities at: aClientID ifAbsent:[^Error signal: self class cannotOperateUsingInvalidClientID].
	(password = aPassword ) ifFalse: [self class cannotOperateUsingInvalidPassword.].! !
!Authenticator methodsFor: 'testing' stamp: 'EMI 12/1/2020 20:54:47' prior: 50929595!
checkUser: aClientID withPassword: aPassword
	| password |
	password _ validIdentities at: aClientID ifAbsent:[^Error signal: self class cannotOperateUsingInvalidClientID].
	(password = aPassword ) ifFalse: [^Error signal: self class cannotOperateUsingInvalidPassword.].! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/1/2020 20:57:20' prior: 50929359!
createCart: anID withPassword: aPassword
	| cartID |
	authenticator checkUser: anID withPassword: aPassword.
	
	cartID _ self newCartID.
	carts add: cartID -> (Cart createUsingPriceList: priceList).
	clientIDbyCartID add: cartID->anID.
	(purchasesByClient includesKey: anID) ifFalse: [purchasesByClient add: anID->(Bag new)].
	cartIDLastTimeUsed add: (cartID -> (clock now)).
	^cartID.! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/1/2020 20:57:50' prior: 50927954!
test02CannotCreateCartUsingInvalidIDOrPassword
	| interface |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList withCashier: self defaultCashier withClock: self defaultClock.
	
	self should: [interface createCart: self invalidClientID withPassword: self validClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Authenticator cannotOperateUsingInvalidClientID].
	
	self should: [interface createCart: self validClientID withPassword: self invalidClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: interface class cannotCreateCartWithInvalidPassword].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/1/2020 20:58:16' prior: 50929633!
test02CannotCreateCartUsingInvalidIDOrPassword
	| interface |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList withCashier: self defaultCashier withClock: self defaultClock.
	
	self should: [interface createCart: self invalidClientID withPassword: self validClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Authenticator cannotOperateUsingInvalidClientID].
	
	self should: [interface createCart: self validClientID withPassword: self invalidClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Authenticator cannotOperateUsingInvalidPassword].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/1/2020 20:58:39' prior: 50928183!
test10CannotListPurchasesUsingInvalidClientIDOrPassword
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier 
						    withClock: self defaultClock.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.

	interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.
	
	self should: [interface listPurchases: self invalidClientID withPassword: self validClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Authenticator cannotOperateUsingInvalidClientID].
	
	self should: [interface listPurchases: self validClientID withPassword: self invalidClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotListPurchasesUsingInvalidPassword].


	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/1/2020 20:58:52' prior: 50929684!
test10CannotListPurchasesUsingInvalidClientIDOrPassword
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier 
						    withClock: self defaultClock.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.

	interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.
	
	self should: [interface listPurchases: self invalidClientID withPassword: self validClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Authenticator cannotOperateUsingInvalidClientID].
	
	self should: [interface listPurchases: self validClientID withPassword: self invalidClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Authenticator cannotOperateUsingInvalidPassword ].


	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/1/2020 20:58:54' prior: 50929722!
test10CannotListPurchasesUsingInvalidClientIDOrPassword
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier 
						    withClock: self defaultClock.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.

	interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.
	
	self should: [interface listPurchases: self invalidClientID withPassword: self validClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Authenticator cannotOperateUsingInvalidClientID].
	
	self should: [interface listPurchases: self validClientID withPassword: self invalidClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: Authenticator cannotOperateUsingInvalidPassword].


	! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/1/2020 20:59:00'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/1/2020 20:59:00'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/1/2020 20:59:00'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/1/2020 20:59:00'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/1/2020 20:59:00'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/1/2020 20:59:00'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/1/2020 20:59:00'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/1/2020 20:59:00'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/1/2020 20:59:00'!
PASSED!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/1/2020 20:59:00'!
PASSED!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/1/2020 20:59:00'!
PASSED!

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/1/2020 20:59:00'!
PASSED!

!testRun: #RESTInterfaceTest #test13CannotListAnExpiredCart stamp: 'EMI 12/1/2020 20:59:00'!
PASSED!

!testRun: #RESTInterfaceTest #test14UsingCartResetsClockExpiration stamp: 'EMI 12/1/2020 20:59:00'!
PASSED!

Object subclass: #Authenticator
	instanceVariableNames: 'validIdentities'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Authenticator category: 'TusLibros' stamp: 'EMI 12/1/2020 20:59:27'!
Object subclass: #Authenticator
	instanceVariableNames: 'validIdentities'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRenamed: #Authenticator as: #AuthenticatorSimulator stamp: 'EMI 12/1/2020 20:59:36'!
Smalltalk renameClassNamed: #Authenticator as: #AuthenticatorSimulator!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/1/2020 20:59:36' prior: 50929759!
test10CannotListPurchasesUsingInvalidClientIDOrPassword
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier 
						    withClock: self defaultClock.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.

	interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.
	
	self should: [interface listPurchases: self invalidClientID withPassword: self validClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: AuthenticatorSimulator cannotOperateUsingInvalidClientID].
	
	self should: [interface listPurchases: self validClientID withPassword: self invalidClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: AuthenticatorSimulator cannotOperateUsingInvalidPassword].


	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/1/2020 20:59:37' prior: 50929349!
defaultAuthenticator
	| validUsers |
	validUsers _ Dictionary with: self validClientID -> self validClientPassword with: self anotherValidClientID -> self validClientPassword.
	^AuthenticatorSimulator withUsers: validUsers.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/1/2020 20:59:37' prior: 50929659!
test02CannotCreateCartUsingInvalidIDOrPassword
	| interface |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList withCashier: self defaultCashier withClock: self defaultClock.
	
	self should: [interface createCart: self invalidClientID withPassword: self validClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: AuthenticatorSimulator cannotOperateUsingInvalidClientID].
	
	self should: [interface createCart: self validClientID withPassword: self invalidClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: AuthenticatorSimulator cannotOperateUsingInvalidPassword].
	! !

Object subclass: #Market
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Market category: 'TusLibros' stamp: 'EMI 12/1/2020 21:05:36'!
Object subclass: #Market
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Market class methodsFor: 'nil' stamp: 'EMI 12/1/2020 21:07:27'!
withPriceList: aPriceList withMerchantProcessor: aMerchantProcessor
	^self new initializeWith: aPriceList withMerchantProcessor: aMerchantProcessor.! !

!classDefinition: #Market category: 'TusLibros' stamp: 'EMI 12/1/2020 21:08:30'!
Object subclass: #Market
	instanceVariableNames: 'priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Market category: 'TusLibros' stamp: 'EMI 12/1/2020 21:08:31'!
Object subclass: #Market
	instanceVariableNames: 'priceList merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Market category: 'TusLibros' stamp: 'EMI 12/1/2020 21:08:33'!
Object subclass: #Market
	instanceVariableNames: 'priceList merchantProcessor cashier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Market methodsFor: 'nil' stamp: 'EMI 12/1/2020 21:08:27'!
initializeWith: aPriceList withMerchantProcessor: aMerchantProcessor
	priceList _ aPriceList.
	merchantProcessor _ aMerchantProcessor.
	cashier _ Cashier withPriceList: aPriceList withMerchantProcessor: aMerchantProcessor.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/1/2020 21:12:10' prior: 50929618!
createCart: anID withPassword: aPassword
	| cartID |
	authenticator checkUser: anID withPassword: aPassword.
	
	cartID _ self newCartID.
	carts add: cartID -> (Cart createUsingPriceList: priceList).

	clientIDbyCartID add: cartID->anID.
	(purchasesByClient includesKey: anID) ifFalse: [purchasesByClient add: anID->(Bag new)].
	cartIDLastTimeUsed add: (cartID -> (clock now)).
	^cartID.! !

----SNAPSHOT----(1 December 2020 21:14:11) CuisUniversity-4383.image priorSource: 19075602!

----QUIT----(1 December 2020 21:15:01) CuisUniversity-4383.image priorSource: 19147205!

----STARTUP---- (2 December 2020 16:37:05) as /home/doraserver/CuisUniversity/CuisUniversity-4383.image!

!AuthenticatorSimulator class methodsFor: 'error messages' stamp: 'EMI 12/2/2020 16:37:25'!
cannotOperateUsingInvalidClientIDMessage
	^'Cannot operate using invalid Client ID'.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 16:37:25' prior: 50929863!
test10CannotListPurchasesUsingInvalidClientIDOrPassword
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier 
						    withClock: self defaultClock.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.

	interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.
	
	self should: [interface listPurchases: self invalidClientID withPassword: self validClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: AuthenticatorSimulator cannotOperateUsingInvalidClientIDMessage].
	
	self should: [interface listPurchases: self validClientID withPassword: self invalidClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: AuthenticatorSimulator cannotOperateUsingInvalidPassword].


	! !
!AuthenticatorSimulator methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 16:37:25' prior: 50929606!
checkUser: aClientID withPassword: aPassword
	| password |
	password _ validIdentities at: aClientID ifAbsent:[^Error signal: self class cannotOperateUsingInvalidClientIDMessage].
	(password = aPassword ) ifFalse: [^Error signal: self class cannotOperateUsingInvalidPassword.].! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 16:37:25' prior: 50929912!
test02CannotCreateCartUsingInvalidIDOrPassword
	| interface |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList withCashier: self defaultCashier withClock: self defaultClock.
	
	self should: [interface createCart: self invalidClientID withPassword: self validClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: AuthenticatorSimulator cannotOperateUsingInvalidClientIDMessage].
	
	self should: [interface createCart: self validClientID withPassword: self invalidClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: AuthenticatorSimulator cannotOperateUsingInvalidPassword].
	! !

!methodRemoval: AuthenticatorSimulator class #cannotOperateUsingInvalidClientID stamp: 'EMI 12/2/2020 16:37:25'!
cannotOperateUsingInvalidClientID
	^'Cannot operate using invalid Client ID'.!
!AuthenticatorSimulator class methodsFor: 'error messages' stamp: 'EMI 12/2/2020 16:37:37'!
cannotOperateUsingInvalidPasswordMessage
	^'Cannot operate using invalid password'.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 16:37:37' prior: 50930068!
test02CannotCreateCartUsingInvalidIDOrPassword
	| interface |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList withCashier: self defaultCashier withClock: self defaultClock.
	
	self should: [interface createCart: self invalidClientID withPassword: self validClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: AuthenticatorSimulator cannotOperateUsingInvalidClientIDMessage].
	
	self should: [interface createCart: self validClientID withPassword: self invalidClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: AuthenticatorSimulator cannotOperateUsingInvalidPasswordMessage].
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 16:37:37' prior: 50930017!
test10CannotListPurchasesUsingInvalidClientIDOrPassword
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier 
						    withClock: self defaultClock.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.

	interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.
	
	self should: [interface listPurchases: self invalidClientID withPassword: self validClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: AuthenticatorSimulator cannotOperateUsingInvalidClientIDMessage].
	
	self should: [interface listPurchases: self validClientID withPassword: self invalidClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: AuthenticatorSimulator cannotOperateUsingInvalidPasswordMessage].


	! !
!AuthenticatorSimulator methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 16:37:37' prior: 50930056!
checkUser: aClientID withPassword: aPassword
	| password |
	password _ validIdentities at: aClientID ifAbsent:[^Error signal: self class cannotOperateUsingInvalidClientIDMessage].
	(password = aPassword ) ifFalse: [^Error signal: self class cannotOperateUsingInvalidPasswordMessage.].! !

!methodRemoval: AuthenticatorSimulator class #cannotOperateUsingInvalidPassword stamp: 'EMI 12/2/2020 16:37:37'!
cannotOperateUsingInvalidPassword
	^'Cannot operate using invalid password'.!
!RESTInterface class methodsFor: 'error messages' stamp: 'EMI 12/2/2020 16:39:03'!
cannotAddProductToCartWithInvalidCartIDMessage
	^'Cannot add product to cart with invalid CartID'.! !
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 16:39:03' prior: 50928913!
addToCart: aCartID productName: aProductName quantity: aProductAmount
	| cart |
	cart _ carts at: aCartID ifAbsent:[^Error signal: self class cannotAddProductToCartWithInvalidCartIDMessage.].
	(self isCartExpired: aCartID) ifTrue: [^Error signal: self class cannotUseAnExpiredCartID.].
	cartIDLastTimeUsed at: aCartID put: clock now.
	cart add: aProductName amount: aProductAmount.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 16:39:03' prior: 50928665!
test11CannotAddProductToExpiredCart
	| interface cartID clock |
	clock _ self defaultClock.
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier
						    withClock: clock.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	clock foward30Minutes.
	
	self should: [interface addToCart: cartID productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotUseAnExpiredCartID].
	
	self should: [interface addToCart: cartID productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartIDMessage].
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 16:39:03' prior: 50928011!
test06CannotAddProductToCartWithInvalidCartID
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList withCashier: self defaultCashier withClock: self defaultClock.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	self should: [interface addToCart: '11111' productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartIDMessage].! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 16:39:03' prior: 50928798!
test12CannotCheckoutAnExpiredCart
	| interface cartID clock |
	clock _ self defaultClock.
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier
						    withClock: clock.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	clock foward30Minutes.
	
	self should: [interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotUseAnExpiredCartID].
	
	self should: [interface addToCart: cartID productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartIDMessage].
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 16:39:03' prior: 50929038!
test13CannotListAnExpiredCart
	| interface cartID clock |
	clock _ self defaultClock.
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier
						    withClock: clock.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	clock foward30Minutes.
	
	self should: [interface listCart: cartID]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotUseAnExpiredCartID].
	
	self should: [interface addToCart: cartID productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartIDMessage].
	! !

!methodRemoval: RESTInterface class #cannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/2/2020 16:39:03'!
cannotAddProductToCartWithInvalidCartID
	^'Cannot add product to cart with invalid CartID'.!
!RESTInterface class methodsFor: 'error messages' stamp: 'EMI 12/2/2020 16:39:16'!
cannotCheckoutCartWithInvalidCartIDMessage
	^'Cannot checkout cart with invalid cartID'.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 16:39:16' prior: 50927864!
test08CannotCheckoutProductsOfAnInvalidCart
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier withClock: self defaultClock.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.

	self should: [interface checkout: '10000' withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotCheckoutCartWithInvalidCartIDMessage].
	! !
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 16:39:16' prior: 50928928!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDateString withCardOwnerName: aCardOwnerName
	| cart card date salesBook clientID|
	salesBook _ OrderedCollection new.
	
	cart _ carts at: aCartID ifAbsent:[^Error signal: self class cannotCheckoutCartWithInvalidCartIDMessage.].
	(self isCartExpired: aCartID) ifTrue: [^Error signal: self class cannotUseAnExpiredCartID.].
	cartIDLastTimeUsed at: aCartID put: clock now.
	
	date _ GregorianMonthOfYear current.
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: (self formatDate: aCardDateString).
	cashier checkout: cart usingCard: card onDate: date usingSalesBook: salesBook.
	
	clientID _ clientIDbyCartID at: aCartID.
	(purchasesByClient at: clientID) addAll: cart contents.
	carts removeKey: aCartID.
	clientIDbyCartID removeKey: aCartID.
	cartIDLastTimeUsed removeKey: aCartID.! !

!methodRemoval: RESTInterface class #cannotCheckoutCartWithInvalidCartID stamp: 'EMI 12/2/2020 16:39:16'!
cannotCheckoutCartWithInvalidCartID
	^'Cannot checkout cart with invalid cartID'.!
!RESTInterface class methodsFor: 'error messages' stamp: 'EMI 12/2/2020 16:39:25'!
cannotCreateCartWithInvalidIDMessage
	^'Cannot create cart with invalid ID'.! !

!methodRemoval: RESTInterface class #cannotCreateCartWithInvalidID stamp: 'EMI 12/2/2020 16:39:25'!
cannotCreateCartWithInvalidID
	^'Cannot create cart with invalid ID'.!
!RESTInterface class methodsFor: 'error messages' stamp: 'EMI 12/2/2020 16:39:37'!
cannotCreateCartWithInvalidPasswordMessage
	^'Cannot create cart with invalid password'.! !

!methodRemoval: RESTInterface class #cannotCreateCartWithInvalidPassword stamp: 'EMI 12/2/2020 16:39:37'!
cannotCreateCartWithInvalidPassword
	^'Cannot create cart with invalid password'.!
!RESTInterface class methodsFor: 'error messages' stamp: 'EMI 12/2/2020 16:39:49'!
cannotListCartWithInvalidCartIDMessage
	^'Cannot list cart using invalid cart ID'.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 16:39:49' prior: 50928032!
test07CanCheckoutProductsOfAValidCart
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier withClock: self defaultClock.
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.
	
	interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.

	self should: [interface listCart: cartID]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotListCartWithInvalidCartIDMessage].
	! !
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 16:39:49' prior: 50929072!
listCart: aCartID
	(carts includesKey: aCartID) ifFalse: [^Error signal: RESTInterface cannotListCartWithInvalidCartIDMessage].
	(self isCartExpired: aCartID) ifTrue: [^Error signal: self class cannotUseAnExpiredCartID.].
	cartIDLastTimeUsed at: aCartID put: clock now.
	^(carts at: aCartID) contents.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 16:39:49' prior: 50927909!
test03CannotListCartUsingInvalidCartID
	| interface cartID |
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator withPriceList: self defaultPriceList withCashier: self defaultCashier withClock: self defaultClock.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	self should: [interface listCart: '2']
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: interface class cannotListCartWithInvalidCartIDMessage].
	! !

!methodRemoval: RESTInterface class #cannotListCartWithInvalidCartID stamp: 'EMI 12/2/2020 16:39:49'!
cannotListCartWithInvalidCartID
	^'Cannot list cart using invalid cart ID'.!
!RESTInterface class methodsFor: 'error messages' stamp: 'EMI 12/2/2020 16:39:57'!
cannotListPurchasesUsingInvalidIDMessage
	^'Cannot ListPurchases using invalid ID'.! !

!methodRemoval: RESTInterface class #cannotListPurchasesUsingInvalidID stamp: 'EMI 12/2/2020 16:39:57'!
cannotListPurchasesUsingInvalidID
	^'Cannot ListPurchases using invalid ID'.!
!RESTInterface class methodsFor: 'error messages' stamp: 'EMI 12/2/2020 16:40:05'!
cannotListPurchasesUsingInvalidPasswordMessage
	^'Cannot ListPurchases using invalid password'.! !

!methodRemoval: RESTInterface class #cannotListPurchasesUsingInvalidPassword stamp: 'EMI 12/2/2020 16:40:05'!
cannotListPurchasesUsingInvalidPassword
	^'Cannot ListPurchases using invalid password'.!
!RESTInterface class methodsFor: 'error messages' stamp: 'EMI 12/2/2020 16:40:17'!
cannotUseAnExpiredCartIDMessage
	^'Cannot use an expired cart ID.'.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 16:40:17' prior: 50930213!
test11CannotAddProductToExpiredCart
	| interface cartID clock |
	clock _ self defaultClock.
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier
						    withClock: clock.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	clock foward30Minutes.
	
	self should: [interface addToCart: cartID productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotUseAnExpiredCartIDMessage].
	
	self should: [interface addToCart: cartID productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartIDMessage].
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 16:40:17' prior: 50930266!
test12CannotCheckoutAnExpiredCart
	| interface cartID clock |
	clock _ self defaultClock.
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier
						    withClock: clock.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	clock foward30Minutes.
	
	self should: [interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotUseAnExpiredCartIDMessage].
	
	self should: [interface addToCart: cartID productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartIDMessage].
	! !
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 16:40:17' prior: 50930197!
addToCart: aCartID productName: aProductName quantity: aProductAmount
	| cart |
	cart _ carts at: aCartID ifAbsent:[^Error signal: self class cannotAddProductToCartWithInvalidCartIDMessage.].
	(self isCartExpired: aCartID) ifTrue: [^Error signal: self class cannotUseAnExpiredCartIDMessage.].
	cartIDLastTimeUsed at: aCartID put: clock now.
	cart add: aProductName amount: aProductAmount.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 16:40:17' prior: 50930301!
test13CannotListAnExpiredCart
	| interface cartID clock |
	clock _ self defaultClock.
	interface _ RESTInterface withAuthenticator: self defaultAuthenticator 
						    withPriceList: self defaultPriceList 
						    withCashier: self defaultCashier
						    withClock: clock.
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	clock foward30Minutes.
	
	self should: [interface listCart: cartID]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotUseAnExpiredCartIDMessage].
	
	self should: [interface addToCart: cartID productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartIDMessage].
	! !
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 16:40:17' prior: 50930372!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDateString withCardOwnerName: aCardOwnerName
	| cart card date salesBook clientID|
	salesBook _ OrderedCollection new.
	
	cart _ carts at: aCartID ifAbsent:[^Error signal: self class cannotCheckoutCartWithInvalidCartIDMessage.].
	(self isCartExpired: aCartID) ifTrue: [^Error signal: self class cannotUseAnExpiredCartIDMessage.].
	cartIDLastTimeUsed at: aCartID put: clock now.
	
	date _ GregorianMonthOfYear current.
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: (self formatDate: aCardDateString).
	cashier checkout: cart usingCard: card onDate: date usingSalesBook: salesBook.
	
	clientID _ clientIDbyCartID at: aCartID.
	(purchasesByClient at: clientID) addAll: cart contents.
	carts removeKey: aCartID.
	clientIDbyCartID removeKey: aCartID.
	cartIDLastTimeUsed removeKey: aCartID.! !
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 16:40:17' prior: 50930466!
listCart: aCartID
	(carts includesKey: aCartID) ifFalse: [^Error signal: RESTInterface cannotListCartWithInvalidCartIDMessage].
	(self isCartExpired: aCartID) ifTrue: [^Error signal: self class cannotUseAnExpiredCartIDMessage.].
	cartIDLastTimeUsed at: aCartID put: clock now.
	^(carts at: aCartID) contents.! !

!methodRemoval: RESTInterface class #cannotUseAnExpiredCartID stamp: 'EMI 12/2/2020 16:40:17'!
cannotUseAnExpiredCartID
	^'Cannot use an expired cart ID.'.!

Object subclass: #TestObjectsFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestObjectsFactory category: 'TusLibros' stamp: 'EMI 12/2/2020 16:40:52'!
Object subclass: #TestObjectsFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestObjectsFactory methodsFor: 'object creation' stamp: 'EMI 12/2/2020 16:42:40'!
validCardDate
	^self.! !
!TestObjectsFactory methodsFor: 'object creation' stamp: 'EMI 12/2/2020 16:42:56' prior: 50930708!
validCardDate
	| date month |
	date _ (GregorianMonthOfYear current) next.
	month _ date monthNumber asString.
	(month size = 1) ifTrue:[month _ '0',month].
	^month, date year number asString.! !
!TestObjectsFactory methodsFor: 'object creation' stamp: 'EMI 12/2/2020 16:43:11'!
anotherValidClientID
	^'2'.! !
!TestObjectsFactory methodsFor: 'object creation' stamp: 'EMI 12/2/2020 16:43:22'!
anotherValidProductName
	^'El principito'.! !
!TestObjectsFactory methodsFor: 'object creation' stamp: 'EMI 12/2/2020 16:43:38'!
defaultAuthenticator
	| validUsers |
	validUsers _ Dictionary with: self validClientID -> self validClientPassword with: self anotherValidClientID -> self validClientPassword.
	^AuthenticatorSimulator withUsers: validUsers.! !
!TestObjectsFactory methodsFor: 'object creation' stamp: 'EMI 12/2/2020 16:43:52'!
defaultCashier
	^Cashier withPriceList: self defaultPriceList withMerchantProcessor: AlwaysValidMerchantProcessorSimulator new.! !
!TestObjectsFactory methodsFor: 'object creation' stamp: 'EMI 12/2/2020 16:44:02'!
defaultClock
	^Clock now.! !
!TestObjectsFactory methodsFor: 'object creation' stamp: 'EMI 12/2/2020 16:44:13'!
defaultPriceList
	^Dictionary with: 'El Principote' -> 50 with: 'El principito' -> 100.! !
!TestObjectsFactory methodsFor: 'nil' stamp: 'EMI 12/2/2020 16:44:23'!
invalidClientID
	^Object new.! !
!TestObjectsFactory methodsFor: 'object creation' stamp: 'EMI 12/2/2020 16:44:33'!
invalidClientPassword
	^Object new.! !
!TestObjectsFactory methodsFor: 'object creation' stamp: 'EMI 12/2/2020 16:44:50'!
validCardNumber
	^'123456789'! !
!TestObjectsFactory methodsFor: 'object creation' stamp: 'EMI 12/2/2020 16:45:04'!
validCardOwnerName
	^'El Principe'.! !
!TestObjectsFactory methodsFor: 'object creation' stamp: 'EMI 12/2/2020 16:45:14'!
validClientID
	^'1'.! !
!TestObjectsFactory methodsFor: 'object creation' stamp: 'EMI 12/2/2020 16:49:49'!
validClientPassword
	^'1234'.! !
!TestObjectsFactory methodsFor: 'object creation' stamp: 'EMI 12/2/2020 16:50:00'!
validProductName
	^'El Principote'.! !

!classDefinition: #RESTInterfaceTest category: 'TusLibros' stamp: 'EMI 12/2/2020 16:50:37'!
TestCase subclass: #RESTInterfaceTest
	instanceVariableNames: 'factory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 12/2/2020 16:50:35' overrides: 16927572!
setUp
	factory _ TestObjectsFactory new.! !

!classDefinition: #RESTInterfaceTest category: 'TusLibros' stamp: 'EMI 12/2/2020 16:52:01'!
TestCase subclass: #RESTInterfaceTest
	instanceVariableNames: 'factory defaultClock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterfaceTest methodsFor: 'aux' stamp: 'EMI 12/2/2020 16:51:58' prior: 50930793 overrides: 16927572!
setUp
	factory _ TestObjectsFactory new.
	defaultClock _ factory defaultClock.! !

!classDefinition: #RESTInterfaceTest category: 'TusLibros' stamp: 'EMI 12/2/2020 16:54:07'!
TestCase subclass: #RESTInterfaceTest
	instanceVariableNames: 'factory defaultClock int'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterfaceTest methodsFor: 'setup' stamp: 'EMI 12/2/2020 16:54:05' prior: 50930806 overrides: 16927572!
setUp
	factory _ TestObjectsFactory new.
	defaultClock _ factory defaultClock.
	int _ RESTInterface withAuthenticator: factory defaultAuthenticator withPriceList: factory defaultPriceList withCashier: factory defaultCashier withClock: defaultClock.! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 16:54:52' prior: 50928097!
test01CanCreateEmptyCartUsingValidIDAndPassword
	| cartID |	
	cartID _ int createCart: self validClientID withPassword: self validClientPassword.
	self assert: (int listCart: cartID) isEmpty.! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 16:55:08' prior: 50930106!
test02CannotCreateCartUsingInvalidIDOrPassword
	self should: [int createCart: self invalidClientID withPassword: self validClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: AuthenticatorSimulator cannotOperateUsingInvalidClientIDMessage].
	
	self should: [int createCart: self validClientID withPassword: self invalidClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: AuthenticatorSimulator cannotOperateUsingInvalidPasswordMessage].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 16:55:26' prior: 50930479!
test03CannotListCartUsingInvalidCartID
	| cartID |
	cartID _ int createCart: self validClientID withPassword: self validClientPassword.
	self should: [int listCart: '2']
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: int class cannotListCartWithInvalidCartIDMessage].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 16:55:40' prior: 50930860!
test03CannotListCartUsingInvalidCartID
	int createCart: self validClientID withPassword: self validClientPassword.
	self should: [int listCart: '2']
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: int class cannotListCartWithInvalidCartIDMessage].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 16:55:56' prior: 50927891!
test04CanAddOneProductToValidCart
	| cartID |
	cartID _ int createCart: self validClientID withPassword: self validClientPassword.
	int addToCart: cartID productName: self validProductName quantity: 1.
	
	self assert: (int listCart: cartID) size equals: 1.! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 16:56:13' prior: 50927980!
test05CanHaveMoreThanOneValidCart
	| interface cartID cartID2 |
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	cartID2 _ interface createCart: self anotherValidClientID withPassword: self validClientPassword.
	interface addToCart: cartID2 productName: self anotherValidProductName quantity: 5.
	
	self assert: (interface listCart: cartID) size equals: 1.
	self assert: ((interface listCart: cartID) includes: self validProductName).
	self assert: (interface listCart: cartID2) size equals: 5.
	self assert: ((interface listCart: cartID2) includes: self anotherValidProductName).
! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 16:57:07' prior: 50930896!
test05CanHaveMoreThanOneValidCart
	| cartID cartID2 |
	
	cartID _ int createCart: self validClientID withPassword: self validClientPassword.
	int addToCart: cartID productName: self validProductName quantity: 1.
	
	cartID2 _ int createCart: self anotherValidClientID withPassword: self validClientPassword.
	int addToCart: cartID2 productName: self anotherValidProductName quantity: 5.
	
	self assert: (int listCart: cartID) size equals: 1.
	self assert: ((int listCart: cartID) includes: self validProductName).
	self assert: (int listCart: cartID2) size equals: 5.
	self assert: ((int listCart: cartID2) includes: self anotherValidProductName).
! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 16:57:19' prior: 50930244!
test06CannotAddProductToCartWithInvalidCartID
	| cartID |
	cartID _ int createCart: self validClientID withPassword: self validClientPassword.
	
	self should: [int addToCart: '11111' productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartIDMessage].! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 16:57:28' prior: 50930945!
test06CannotAddProductToCartWithInvalidCartID
	int createCart: self validClientID withPassword: self validClientPassword.
	
	self should: [int addToCart: '11111' productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartIDMessage].! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 16:57:48' prior: 50930438!
test07CanCheckoutProductsOfAValidCart
	| cartID |
	cartID _ int createCart: self validClientID withPassword: self validClientPassword.
	
	int addToCart: cartID productName: self anotherValidProductName quantity: 1.
	
	int checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.

	self should: [int listCart: cartID]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotListCartWithInvalidCartIDMessage].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 16:58:07' prior: 50930345!
test08CannotCheckoutProductsOfAnInvalidCart
	| cartID |
	cartID _ int createCart: self validClientID withPassword: self validClientPassword.
	
	int addToCart: cartID productName: self anotherValidProductName quantity: 1.

	self should: [int checkout: '10000' withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotCheckoutCartWithInvalidCartIDMessage].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 16:58:29' prior: 50927928!
test09CanListPurchasesMadeBValidUser
	| cartID result |
	
	cartID _ int createCart: self validClientID withPassword: self validClientPassword.
	
	int addToCart: cartID productName: self anotherValidProductName quantity: 1.

	int checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.
	
	result _ int listPurchases: self validClientID withPassword: self validClientPassword.
	
	self deny: result isEmpty.

	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 16:58:52' prior: 50930133!
test10CannotListPurchasesUsingInvalidClientIDOrPassword
	| cartID |
	cartID _ int createCart: self validClientID withPassword: self validClientPassword.
	
	int addToCart: cartID productName: self anotherValidProductName quantity: 1.

	int checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.
	
	self should: [int listPurchases: self invalidClientID withPassword: self validClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: AuthenticatorSimulator cannotOperateUsingInvalidClientIDMessage].
	
	self should: [int listPurchases: self validClientID withPassword: self invalidClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: AuthenticatorSimulator cannotOperateUsingInvalidPasswordMessage].


	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 16:59:26' prior: 50930534!
test11CannotAddProductToExpiredCart
	| cartID |
	cartID _ int createCart: self validClientID withPassword: self validClientPassword.
	
	defaultClock foward30Minutes.
	
	self should: [int addToCart: cartID productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotUseAnExpiredCartIDMessage].
	
	self should: [int addToCart: cartID productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartIDMessage].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 16:59:57' prior: 50930565!
test12CannotCheckoutAnExpiredCart
	| cartID |
	cartID _ int createCart: self validClientID withPassword: self validClientPassword.
	int addToCart: cartID productName: self validProductName quantity: 1.
	
	defaultClock foward30Minutes.
	
	self should: [int checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotUseAnExpiredCartIDMessage].
	
	self should: [int addToCart: cartID productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartIDMessage].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 17:00:40' prior: 50930616!
test13CannotListAnExpiredCart
	| cartID |
	cartID _ int createCart: self validClientID withPassword: self validClientPassword.
	int addToCart: cartID productName: self validProductName quantity: 1.
	
	defaultClock foward30Minutes.
	
	self should: [int listCart: cartID]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotUseAnExpiredCartIDMessage].
	
	self should: [int addToCart: cartID productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartIDMessage].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 17:01:04' prior: 50929264!
test14UsingCartResetsClockExpiration
	| cartID |
	cartID _ int createCart: self validClientID withPassword: self validClientPassword.

	defaultClock fowardMinutes: 15.
	
	int addToCart: cartID productName: self validProductName quantity: 1.
	
	defaultClock fowardMinutes: 15.
	
	self deny: (int listCart: cartID) isEmpty.

	! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/2/2020 17:01:06'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/2/2020 17:01:06'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/2/2020 17:01:06'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/2/2020 17:01:06'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/2/2020 17:01:06'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/2/2020 17:01:06'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/2/2020 17:01:06'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/2/2020 17:01:06'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/2/2020 17:01:06'!
PASSED!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/2/2020 17:01:06'!
PASSED!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/2/2020 17:01:06'!
PASSED!

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/2/2020 17:01:06'!
PASSED!

!testRun: #RESTInterfaceTest #test13CannotListAnExpiredCart stamp: 'EMI 12/2/2020 17:01:06'!
PASSED!

!testRun: #RESTInterfaceTest #test14UsingCartResetsClockExpiration stamp: 'EMI 12/2/2020 17:01:06'!
PASSED!

!classDefinition: #RESTInterfaceTest category: 'TusLibros' stamp: 'EMI 12/2/2020 17:01:20'!
TestCase subclass: #RESTInterfaceTest
	instanceVariableNames: 'factory defaultClock interface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 17:01:20' prior: 50930995!
test08CannotCheckoutProductsOfAnInvalidCart
	| cartID |
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.

	self should: [interface checkout: '10000' withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotCheckoutCartWithInvalidCartIDMessage].
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 17:01:20' prior: 50930873!
test03CannotListCartUsingInvalidCartID
	interface createCart: self validClientID withPassword: self validClientPassword.
	self should: [interface listCart: '2']
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: interface class cannotListCartWithInvalidCartIDMessage].
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 17:01:20' prior: 50931115!
test13CannotListAnExpiredCart
	| cartID |
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	defaultClock foward30Minutes.
	
	self should: [interface listCart: cartID]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotUseAnExpiredCartIDMessage].
	
	self should: [interface addToCart: cartID productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartIDMessage].
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 17:01:20' prior: 50931065!
test11CannotAddProductToExpiredCart
	| cartID |
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	defaultClock foward30Minutes.
	
	self should: [interface addToCart: cartID productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotUseAnExpiredCartIDMessage].
	
	self should: [interface addToCart: cartID productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartIDMessage].
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 17:01:20' prior: 50931015!
test09CanListPurchasesMadeBValidUser
	| cartID result |
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.

	interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.
	
	result _ interface listPurchases: self validClientID withPassword: self validClientPassword.
	
	self deny: result isEmpty.

	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 17:01:20' prior: 50930831!
test01CanCreateEmptyCartUsingValidIDAndPassword
	| cartID |	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	self assert: (interface listCart: cartID) isEmpty.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 17:01:20' prior: 50930840!
test02CannotCreateCartUsingInvalidIDOrPassword
	self should: [interface createCart: self invalidClientID withPassword: self validClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: AuthenticatorSimulator cannotOperateUsingInvalidClientIDMessage].
	
	self should: [interface createCart: self validClientID withPassword: self invalidClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: AuthenticatorSimulator cannotOperateUsingInvalidPasswordMessage].
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 17:01:20' prior: 50930960!
test06CannotAddProductToCartWithInvalidCartID
	interface createCart: self validClientID withPassword: self validClientPassword.
	
	self should: [interface addToCart: '11111' productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartIDMessage].! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 17:01:20' prior: 50931034!
test10CannotListPurchasesUsingInvalidClientIDOrPassword
	| cartID |
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.

	interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.
	
	self should: [interface listPurchases: self invalidClientID withPassword: self validClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: AuthenticatorSimulator cannotOperateUsingInvalidClientIDMessage].
	
	self should: [interface listPurchases: self validClientID withPassword: self invalidClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: AuthenticatorSimulator cannotOperateUsingInvalidPasswordMessage].


	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 17:01:20' prior: 50931138!
test14UsingCartResetsClockExpiration
	| cartID |
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.

	defaultClock fowardMinutes: 15.
	
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	defaultClock fowardMinutes: 15.
	
	self deny: (interface listCart: cartID) isEmpty.

	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 17:01:20' prior: 50930975!
test07CanCheckoutProductsOfAValidCart
	| cartID |
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	
	interface addToCart: cartID productName: self anotherValidProductName quantity: 1.
	
	interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName.

	self should: [interface listCart: cartID]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotListCartWithInvalidCartIDMessage].
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 17:01:20' prior: 50930820 overrides: 16927572!
setUp
	factory _ TestObjectsFactory new.
	defaultClock _ factory defaultClock.
	interface _ RESTInterface withAuthenticator: factory defaultAuthenticator withPriceList: factory defaultPriceList withCashier: factory defaultCashier withClock: defaultClock.! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 17:01:20' prior: 50931088!
test12CannotCheckoutAnExpiredCart
	| cartID |
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	defaultClock foward30Minutes.
	
	self should: [interface checkout: cartID withCardNumber: self validCardNumber withCardExpDate: self validCardDate withCardOwnerName: self validCardOwnerName]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotUseAnExpiredCartIDMessage].
	
	self should: [interface addToCart: cartID productName: self validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartIDMessage].
	! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 17:01:20' prior: 50930921!
test05CanHaveMoreThanOneValidCart
	| cartID cartID2 |
	
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	cartID2 _ interface createCart: self anotherValidClientID withPassword: self validClientPassword.
	interface addToCart: cartID2 productName: self anotherValidProductName quantity: 5.
	
	self assert: (interface listCart: cartID) size equals: 1.
	self assert: ((interface listCart: cartID) includes: self validProductName).
	self assert: (interface listCart: cartID2) size equals: 5.
	self assert: ((interface listCart: cartID2) includes: self anotherValidProductName).
! !
!RESTInterfaceTest methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 17:01:20' prior: 50930885!
test04CanAddOneProductToValidCart
	| cartID |
	cartID _ interface createCart: self validClientID withPassword: self validClientPassword.
	interface addToCart: cartID productName: self validProductName quantity: 1.
	
	self assert: (interface listCart: cartID) size equals: 1.! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 17:01:38' prior: 50931312!
test01CanCreateEmptyCartUsingValidIDAndPassword
	| cartID |	
	cartID _ interface createCart: factory validClientID withPassword: factory validClientPassword.
	self assert: (interface listCart: cartID) isEmpty.! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 17:01:53' prior: 50931322!
test02CannotCreateCartUsingInvalidIDOrPassword
	self should: [interface createCart: factory invalidClientID withPassword: factory validClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: AuthenticatorSimulator cannotOperateUsingInvalidClientIDMessage].
	
	self should: [interface createCart: factory validClientID withPassword: factory invalidClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: AuthenticatorSimulator cannotOperateUsingInvalidPasswordMessage].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 17:02:21' prior: 50931230!
test03CannotListCartUsingInvalidCartID
	interface createCart: factory validClientID withPassword: factory validClientPassword.
	self should: [interface listCart: '2']
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: interface class cannotListCartWithInvalidCartIDMessage].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 17:02:37' prior: 50931492!
test04CanAddOneProductToValidCart
	| cartID |
	cartID _ interface createCart: factory validClientID withPassword: factory validClientPassword.
	interface addToCart: cartID productName: factory validProductName quantity: 1.
	
	self assert: (interface listCart: cartID) size equals: 1.! !

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/2/2020 17:02:38'!
PASSED!

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/2/2020 17:02:38'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/2/2020 17:02:38'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/2/2020 17:02:38'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/2/2020 17:02:38'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/2/2020 17:02:38'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/2/2020 17:02:38'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/2/2020 17:02:38'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/2/2020 17:02:38'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/2/2020 17:02:38'!
PASSED!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/2/2020 17:02:38'!
PASSED!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/2/2020 17:02:38'!
PASSED!

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/2/2020 17:02:38'!
PASSED!

!testRun: #RESTInterfaceTest #test13CannotListAnExpiredCart stamp: 'EMI 12/2/2020 17:02:38'!
PASSED!

!testRun: #RESTInterfaceTest #test14UsingCartResetsClockExpiration stamp: 'EMI 12/2/2020 17:02:38'!
PASSED!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 17:03:37' prior: 50931466!
test05CanHaveMoreThanOneValidCart
	| cartID cartID2 |
	
	cartID _ interface createCart: factory validClientID withPassword: factory validClientPassword.
	interface addToCart: cartID productName: factory validProductName quantity: 1.
	
	cartID2 _ interface createCart: factory anotherValidClientID withPassword: self validClientPassword.
	interface addToCart: cartID2 productName: factory anotherValidProductName quantity: 5.
	
	self assert: (interface listCart: cartID) size equals: 1.
	self assert: ((interface listCart: cartID) includes: factory validProductName).
	self assert: (interface listCart: cartID2) size equals: 5.
	self assert: ((interface listCart: cartID2) includes: factory anotherValidProductName).
! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 17:04:02' prior: 50931343!
test06CannotAddProductToCartWithInvalidCartID
	interface createCart: factory validClientID withPassword: factory validClientPassword.
	
	self should: [interface addToCart: '11111' productName: factory validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartIDMessage].! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 17:04:18' prior: 50931404!
test07CanCheckoutProductsOfAValidCart
	| cartID |
	cartID _ interface createCart: factory validClientID withPassword: factory validClientPassword.
	
	interface addToCart: cartID productName: factory anotherValidProductName quantity: 1.
	
	interface checkout: cartID withCardNumber: factory validCardNumber withCardExpDate: factory validCardDate withCardOwnerName: factory validCardOwnerName.

	self should: [interface listCart: cartID]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotListCartWithInvalidCartIDMessage].
	! !

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/2/2020 17:04:19'!
PASSED!

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/2/2020 17:04:19'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/2/2020 17:04:19'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/2/2020 17:04:19'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/2/2020 17:04:19'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/2/2020 17:04:19'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/2/2020 17:04:19'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/2/2020 17:04:19'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/2/2020 17:04:19'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/2/2020 17:04:19'!
PASSED!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/2/2020 17:04:19'!
PASSED!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/2/2020 17:04:19'!
PASSED!

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/2/2020 17:04:19'!
PASSED!

!testRun: #RESTInterfaceTest #test13CannotListAnExpiredCart stamp: 'EMI 12/2/2020 17:04:19'!
PASSED!

!testRun: #RESTInterfaceTest #test14UsingCartResetsClockExpiration stamp: 'EMI 12/2/2020 17:04:19'!
PASSED!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 17:04:32' prior: 50931209!
test08CannotCheckoutProductsOfAnInvalidCart
	| cartID |
	cartID _ interface createCart: factory validClientID withPassword: factory validClientPassword.
	
	interface addToCart: cartID productName: factory anotherValidProductName quantity: 1.

	self should: [interface checkout: '10000' withCardNumber: factory validCardNumber withCardExpDate: factory validCardDate withCardOwnerName: factory validCardOwnerName.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotCheckoutCartWithInvalidCartIDMessage].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 17:04:50' prior: 50931292!
test09CanListPurchasesMadeBValidUser
	| cartID result |
	
	cartID _ interface createCart: factory validClientID withPassword: factory validClientPassword.
	
	interface addToCart: cartID productName: factory anotherValidProductName quantity: 1.

	interface checkout: cartID withCardNumber: factory validCardNumber withCardExpDate: factory validCardDate withCardOwnerName: factory validCardOwnerName.
	
	result _ interface listPurchases: factory validClientID withPassword: factory validClientPassword.
	
	self deny: result isEmpty.

	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 17:05:09' prior: 50931358!
test10CannotListPurchasesUsingInvalidClientIDOrPassword
	| cartID |
	cartID _ interface createCart: factory validClientID withPassword: factory validClientPassword.
	
	interface addToCart: cartID productName: factory anotherValidProductName quantity: 1.

	interface checkout: cartID withCardNumber: factory validCardNumber withCardExpDate: factory validCardDate withCardOwnerName: factory validCardOwnerName.
	
	self should: [interface listPurchases: factory invalidClientID withPassword: factory validClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: AuthenticatorSimulator cannotOperateUsingInvalidClientIDMessage].
	
	self should: [interface listPurchases: factory validClientID withPassword: factory invalidClientPassword.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: AuthenticatorSimulator cannotOperateUsingInvalidPasswordMessage].


	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 17:05:20' prior: 50931268!
test11CannotAddProductToExpiredCart
	| cartID |
	cartID _ interface createCart: factory validClientID withPassword: factory validClientPassword.
	
	defaultClock foward30Minutes.
	
	self should: [interface addToCart: cartID productName: factory validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotUseAnExpiredCartIDMessage].
	
	self should: [interface addToCart: cartID productName: factory validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartIDMessage].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 17:05:36' prior: 50931438!
test12CannotCheckoutAnExpiredCart
	| cartID |
	cartID _ interface createCart: factory validClientID withPassword: factory validClientPassword.
	interface addToCart: cartID productName: factory validProductName quantity: 1.
	
	defaultClock foward30Minutes.
	
	self should: [interface checkout: cartID withCardNumber: factory validCardNumber withCardExpDate: factory validCardDate withCardOwnerName: factory validCardOwnerName]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotUseAnExpiredCartIDMessage].
	
	self should: [interface addToCart: cartID productName: factory validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartIDMessage].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 17:05:45' prior: 50931243!
test13CannotListAnExpiredCart
	| cartID |
	cartID _ interface createCart: factory validClientID withPassword: factory validClientPassword.
	interface addToCart: cartID productName: factory validProductName quantity: 1.
	
	defaultClock foward30Minutes.
	
	self should: [interface listCart: cartID]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotUseAnExpiredCartIDMessage].
	
	self should: [interface addToCart: cartID productName: factory validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartIDMessage].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 17:05:53' prior: 50931390!
test14UsingCartResetsClockExpiration
	| cartID |
	cartID _ interface createCart: factory validClientID withPassword: factory validClientPassword.

	defaultClock fowardMinutes: 15.
	
	interface addToCart: cartID productName: factory validProductName quantity: 1.
	
	defaultClock fowardMinutes: 15.
	
	self deny: (interface listCart: cartID) isEmpty.

	! !

!testRun: #RESTInterfaceTest #test14UsingCartResetsClockExpiration stamp: 'EMI 12/2/2020 17:05:54'!
PASSED!

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/2/2020 17:05:54'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/2/2020 17:05:54'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/2/2020 17:05:54'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/2/2020 17:05:54'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/2/2020 17:05:54'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/2/2020 17:05:54'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/2/2020 17:05:54'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/2/2020 17:05:54'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/2/2020 17:05:54'!
PASSED!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/2/2020 17:05:54'!
PASSED!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/2/2020 17:05:54'!
PASSED!

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/2/2020 17:05:54'!
PASSED!

!testRun: #RESTInterfaceTest #test13CannotListAnExpiredCart stamp: 'EMI 12/2/2020 17:05:54'!
PASSED!

!testRun: #RESTInterfaceTest #test14UsingCartResetsClockExpiration stamp: 'EMI 12/2/2020 17:05:54'!
PASSED!
!TestObjectsFactory methodsFor: 'object creation' stamp: 'EMI 12/2/2020 17:06:13'!
invalidCartID
	^Object new.! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 17:06:36' prior: 50931639!
test06CannotAddProductToCartWithInvalidCartID
	interface createCart: factory validClientID withPassword: factory validClientPassword.
	
	self should: [interface addToCart: factory invalidCartID productName: factory validProductName quantity: 1.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotAddProductToCartWithInvalidCartIDMessage].! !

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/2/2020 17:06:38'!
PASSED!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 17:06:54' prior: 50931728!
test08CannotCheckoutProductsOfAnInvalidCart
	| cartID |
	cartID _ interface createCart: factory validClientID withPassword: factory validClientPassword.
	
	interface addToCart: cartID productName: factory anotherValidProductName quantity: 1.

	self should: [interface checkout: factory invalidCartID withCardNumber: factory validCardNumber withCardExpDate: factory validCardDate withCardOwnerName: factory validCardOwnerName.]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotCheckoutCartWithInvalidCartIDMessage].
	! !

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/2/2020 17:06:55'!
PASSED!

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/2/2020 17:06:55'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/2/2020 17:06:55'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/2/2020 17:06:55'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/2/2020 17:06:55'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/2/2020 17:06:55'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/2/2020 17:06:55'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/2/2020 17:06:55'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/2/2020 17:06:55'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/2/2020 17:06:55'!
PASSED!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/2/2020 17:06:55'!
PASSED!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/2/2020 17:06:55'!
PASSED!

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/2/2020 17:06:55'!
PASSED!

!testRun: #RESTInterfaceTest #test13CannotListAnExpiredCart stamp: 'EMI 12/2/2020 17:06:55'!
PASSED!

!testRun: #RESTInterfaceTest #test14UsingCartResetsClockExpiration stamp: 'EMI 12/2/2020 17:06:55'!
PASSED!
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 17:07:10' prior: 50931613!
test05CanHaveMoreThanOneValidCart
	| cartID cartID2 |
	
	cartID _ interface createCart: factory validClientID withPassword: factory validClientPassword.
	interface addToCart: cartID productName: factory validProductName quantity: 1.
	
	cartID2 _ interface createCart: factory anotherValidClientID withPassword: factory validClientPassword.
	interface addToCart: cartID2 productName: factory anotherValidProductName quantity: 5.
	
	self assert: (interface listCart: cartID) size equals: 1.
	self assert: ((interface listCart: cartID) includes: factory validProductName).
	self assert: (interface listCart: cartID2) size equals: 5.
	self assert: ((interface listCart: cartID2) includes: factory anotherValidProductName).
! !

----SNAPSHOT----(2 December 2020 17:07:33) CuisUniversity-4383.image priorSource: 19147298!
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/2/2020 17:07:48' prior: 50930600!
addToCart: aCartID productName: aProductName quantity: aProductAmount
	| cart |
	
	cart _ carts at: aCartID ifAbsent:[^Error signal: self class cannotAddProductToCartWithInvalidCartIDMessage.].
	
	(self isCartExpired: aCartID) ifTrue: [^Error signal: self class cannotUseAnExpiredCartIDMessage.].
	
	cartIDLastTimeUsed at: aCartID put: clock now.
	
	cart add: aProductName amount: aProductAmount.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/2/2020 17:09:04' prior: 50930679!
listCart: aCartID
	(carts includesKey: aCartID) ifFalse: [^Error signal: RESTInterface cannotListCartWithInvalidCartIDMessage].
	
	(self isCartExpired: aCartID) ifTrue: [^Error signal: self class cannotUseAnExpiredCartIDMessage.].
	
	cartIDLastTimeUsed at: aCartID put: clock now.
	
	^(carts at: aCartID) contents.! !

!classDefinition: #Market category: 'TusLibros' stamp: 'EMI 12/2/2020 17:15:04'!
Object subclass: #Market
	instanceVariableNames: 'priceList merchantProcessor cashier carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Market methodsFor: 'nil' stamp: 'EMI 12/2/2020 17:15:00'!
lendCart
	| cartID |
	cartID _ self generateCartID.
	carts add: cartID->(Cart createUsingPriceList: priceList).
	^cartID! !
!Market methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 17:15:33'!
returnCart: aCartID
	carts removeKey: aCartID.
	! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/2/2020 18:14:11' prior: 50930648!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDate withCardOwnerName: aCardOwnerName
	| cart card date salesBook clientID|
	salesBook _ OrderedCollection new.
	
	cart _ carts at: aCartID ifAbsent:[^Error signal: self class cannotCheckoutCartWithInvalidCartIDMessage.].
	(self isCartExpired: aCartID) ifTrue: [^Error signal: self class cannotUseAnExpiredCartIDMessage.].
	cartIDLastTimeUsed at: aCartID put: clock now.
	
	date _ GregorianMonthOfYear current.
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: aCardDate.
	cashier checkout: cart usingCard: card onDate: date usingSalesBook: salesBook.
	
	clientID _ clientIDbyCartID at: aCartID.
	(purchasesByClient at: clientID) addAll: cart contents.
	carts removeKey: aCartID.
	clientIDbyCartID removeKey: aCartID.
	cartIDLastTimeUsed removeKey: aCartID.! !
!TestObjectsFactory methodsFor: 'object creation' stamp: 'EMI 12/2/2020 18:14:47' prior: 50930712!
validCardDate
	^(GregorianMonthOfYear current) next.
	! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/2/2020 18:14:52'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/2/2020 18:14:52'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/2/2020 18:14:52'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/2/2020 18:14:52'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/2/2020 18:14:52'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/2/2020 18:14:52'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/2/2020 18:14:52'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/2/2020 18:14:52'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/2/2020 18:14:52'!
PASSED!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/2/2020 18:14:52'!
PASSED!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/2/2020 18:14:52'!
PASSED!

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/2/2020 18:14:52'!
PASSED!

!testRun: #RESTInterfaceTest #test13CannotListAnExpiredCart stamp: 'EMI 12/2/2020 18:14:52'!
PASSED!

!testRun: #RESTInterfaceTest #test14UsingCartResetsClockExpiration stamp: 'EMI 12/2/2020 18:14:52'!
PASSED!

!methodRemoval: RESTInterface #formatDate: stamp: 'EMI 12/2/2020 18:15:16'!
formatDate: aDateString
	| monthNumber yearNumber |
	monthNumber _ (aDateString copyFrom: 1 to: 2) asInteger. 
	yearNumber _ (aDateString copyFrom: 3 to: 6) asInteger.
	^GregorianMonthOfYear yearNumber: yearNumber monthNumber: monthNumber.!

!methodRemoval: RESTInterfaceTest #anotherValidClientID stamp: 'EMI 12/2/2020 18:15:41'!
anotherValidClientID
	^'2'.!

!methodRemoval: RESTInterfaceTest #anotherValidProductName stamp: 'EMI 12/2/2020 18:15:41'!
anotherValidProductName
	^'El principito'.!

!methodRemoval: RESTInterfaceTest #defaultAuthenticator stamp: 'EMI 12/2/2020 18:15:41'!
defaultAuthenticator
	| validUsers |
	validUsers _ Dictionary with: self validClientID -> self validClientPassword with: self anotherValidClientID -> self validClientPassword.
	^AuthenticatorSimulator withUsers: validUsers.!

!methodRemoval: RESTInterfaceTest #defaultCashier stamp: 'EMI 12/2/2020 18:15:41'!
defaultCashier
	^Cashier withPriceList: self defaultPriceList withMerchantProcessor: AlwaysValidMerchantProcessorSimulator new.!

!methodRemoval: RESTInterfaceTest #defaultClock stamp: 'EMI 12/2/2020 18:15:41'!
defaultClock
	^Clock now.!

!methodRemoval: RESTInterfaceTest #defaultPriceList stamp: 'EMI 12/2/2020 18:15:41'!
defaultPriceList
	^Dictionary with: 'El Principote' -> 50 with: 'El principito' -> 100.!

!methodRemoval: RESTInterfaceTest #invalidClientID stamp: 'EMI 12/2/2020 18:15:41'!
invalidClientID
	^Object new.!

!methodRemoval: RESTInterfaceTest #invalidClientPassword stamp: 'EMI 12/2/2020 18:15:41'!
invalidClientPassword
	^Object new.!

!methodRemoval: RESTInterfaceTest #validCardDate stamp: 'EMI 12/2/2020 18:15:41'!
validCardDate
	| date month |
	date _ (GregorianMonthOfYear current) next.
	month _ date monthNumber asString.
	(month size = 1) ifTrue:[month _ '0',month].
	^month, date year number asString.!

!methodRemoval: RESTInterfaceTest #validCardNumber stamp: 'EMI 12/2/2020 18:15:41'!
validCardNumber
	^'123456789'!

!methodRemoval: RESTInterfaceTest #validCardOwnerName stamp: 'EMI 12/2/2020 18:15:41'!
validCardOwnerName
	^'El Principe'.!

!methodRemoval: RESTInterfaceTest #validClientID stamp: 'EMI 12/2/2020 18:15:41'!
validClientID
	^'1'.!

!methodRemoval: RESTInterfaceTest #validClientPassword stamp: 'EMI 12/2/2020 18:15:41'!
validClientPassword
	^'1234'.!

!methodRemoval: RESTInterfaceTest #validProductName stamp: 'EMI 12/2/2020 18:15:41'!
validProductName
	^'El Principote'.!

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/2/2020 18:15:49'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/2/2020 18:15:49'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/2/2020 18:15:49'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/2/2020 18:15:49'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/2/2020 18:15:49'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/2/2020 18:15:49'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/2/2020 18:15:49'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/2/2020 18:15:49'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/2/2020 18:15:49'!
PASSED!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/2/2020 18:15:49'!
PASSED!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/2/2020 18:15:49'!
PASSED!

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/2/2020 18:15:49'!
PASSED!

!testRun: #RESTInterfaceTest #test13CannotListAnExpiredCart stamp: 'EMI 12/2/2020 18:15:49'!
PASSED!

!testRun: #RESTInterfaceTest #test14UsingCartResetsClockExpiration stamp: 'EMI 12/2/2020 18:15:49'!
PASSED!
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/2/2020 18:16:10' prior: 50932072!
addToCart: aCartID productName: aProductName quantity: aProductAmount
	| cart |
	
	cart _ carts at: aCartID ifAbsent:[^Error signal: self class cannotAddProductToCartWithInvalidCartIDMessage.].
	(self isCartExpired: aCartID) ifTrue: [^Error signal: self class cannotUseAnExpiredCartIDMessage.].
	
	cartIDLastTimeUsed at: aCartID put: clock now.
	
	cart add: aProductName amount: aProductAmount.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/2/2020 18:16:17' prior: 50932120!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDate withCardOwnerName: aCardOwnerName
	| cart card date salesBook clientID|
	salesBook _ OrderedCollection new.
	
	cart _ carts at: aCartID ifAbsent:[^Error signal: self class cannotCheckoutCartWithInvalidCartIDMessage.].
	(self isCartExpired: aCartID) ifTrue: [^Error signal: self class cannotUseAnExpiredCartIDMessage.].
	
	cartIDLastTimeUsed at: aCartID put: clock now.
	
	date _ GregorianMonthOfYear current.
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: aCardDate.
	cashier checkout: cart usingCard: card onDate: date usingSalesBook: salesBook.
	
	clientID _ clientIDbyCartID at: aCartID.
	(purchasesByClient at: clientID) addAll: cart contents.
	carts removeKey: aCartID.
	clientIDbyCartID removeKey: aCartID.
	cartIDLastTimeUsed removeKey: aCartID.! !
!Market methodsFor: 'nil' stamp: 'EMI 12/2/2020 18:25:37'!
checkoutCart: aCartID usingCard: aCard
	| cart salesBook |
	salesBook _ OrderedCollection new.
	cart _ carts at: aCartID.
	cashier checkout: cart usingCard: aCard onDate: (GregorianMonthOfYear current) usingSalesBook: salesBook.! !

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'EMI 12/2/2020 18:28:20'!
Object subclass: #RESTInterface
	instanceVariableNames: 'authenticator priceList carts currentCartID cashier purchasesByClient clientIDbyCartID clock cartIDLastTimeUsed market'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/2/2020 18:28:17' prior: 50932346!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDate withCardOwnerName: aCardOwnerName
	| cart card clientID|
	
	cart _ carts at: aCartID ifAbsent:[^Error signal: self class cannotCheckoutCartWithInvalidCartIDMessage.].
	(self isCartExpired: aCartID) ifTrue: [^Error signal: self class cannotUseAnExpiredCartIDMessage.].
	
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: aCardDate.
	market checkoutCart: aCartID usingCard: card.
	
	clientID _ clientIDbyCartID at: aCartID.
	(purchasesByClient at: clientID) addAll: cart contents.
	
	market returnCart: aCartID.
	
	clientIDbyCartID removeKey: aCartID.
	cartIDLastTimeUsed removeKey: aCartID.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/2/2020 18:29:38' prior: 50929986!
createCart: anID withPassword: aPassword
	| cartID |
	authenticator checkUser: anID withPassword: aPassword.
	
	cartID _ market lendCart.

	clientIDbyCartID add: cartID->anID.
	(purchasesByClient includesKey: anID) ifFalse: [purchasesByClient add: anID->(Bag new)].
	cartIDLastTimeUsed add: (cartID -> (clock now)).
	^cartID.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/2/2020 18:31:19' prior: 50932331!
addToCart: aCartID productName: aProductName quantity: aProductAmount
	| cart |
	
	cart _ carts at: aCartID ifAbsent:[^Error signal: self class cannotAddProductToCartWithInvalidCartIDMessage.].
	(self isCartExpired: aCartID) ifTrue: [^Error signal: self class cannotUseAnExpiredCartIDMessage.].
	
	cartIDLastTimeUsed at: aCartID put: clock now.
	
	market addToCart: aCartID productName: aProductName quantity: aProductAmount.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/2/2020 18:31:36' prior: 50932434!
addToCart: aCartID productName: aProductName quantity: aProductAmount
	carts at: aCartID ifAbsent:[^Error signal: self class cannotAddProductToCartWithInvalidCartIDMessage.].
	(self isCartExpired: aCartID) ifTrue: [^Error signal: self class cannotUseAnExpiredCartIDMessage.].
	
	cartIDLastTimeUsed at: aCartID put: clock now.
	
	market addToCart: aCartID productName: aProductName quantity: aProductAmount.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/2/2020 18:32:45' prior: 50932088!
listCart: aCartID
	(carts includesKey: aCartID) ifFalse: [^Error signal: RESTInterface cannotListCartWithInvalidCartIDMessage].
	
	(self isCartExpired: aCartID) ifTrue: [^Error signal: self class cannotUseAnExpiredCartIDMessage.].
	
	cartIDLastTimeUsed at: aCartID put: clock now.
	
	^(market cartContents: aCartID).! !
!Market methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 18:34:06'!
cartContents: aCartID
	^(carts at: aCartID) contents.! !
!Market methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 18:34:47'!
isCart: aCartID
	^carts includesKey: aCartID.! !
!Market methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 18:36:36' prior: 50932479!
cartContents: aCartID
	(self isCart: aCartID) ifFalse:[^Error signal: self class cannotGetCartContentsWithInvalidCartID].
	^(carts at: aCartID) contents.! !

!classDefinition: #Market category: 'TusLibros' stamp: 'EMI 12/2/2020 18:37:34'!
Object subclass: #Market
	instanceVariableNames: 'priceList merchantProcessor cashier carts currentCartID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Market methodsFor: 'nil' stamp: 'EMI 12/2/2020 18:37:32'!
generateCartID
	| res |
	res _ currentCartID.
	currentCartID _ currentCartID + 1.
	^res.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/2/2020 18:39:05' prior: 50932450!
addToCart: aCartID productName: aProductName quantity: aProductAmount
	(market isCart: aCartID) ifFalse: [^Error signal: self class cannotAddProductToCartWithInvalidCartIDMessage.].
	(self isCartExpired: aCartID) ifTrue: [^Error signal: self class cannotUseAnExpiredCartIDMessage.].
	
	cartIDLastTimeUsed at: aCartID put: clock now.
	
	market addToCart: aCartID productName: aProductName quantity: aProductAmount.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/2/2020 18:39:46' prior: 50932396!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDate withCardOwnerName: aCardOwnerName
	| cart card clientID|
	
	cart _ carts at: aCartID ifAbsent:[^Error signal: self class cannotCheckoutCartWithInvalidCartIDMessage.].
	(self isCartExpired: aCartID) ifTrue: [^Error signal: self class cannotUseAnExpiredCartIDMessage.].
	
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: aCardDate.
	market checkoutCart: aCartID usingCard: card.
	
	clientID _ clientIDbyCartID at: aCartID.
	(purchasesByClient at: clientID) addAll: (market cartContents: aCartID).
	
	market returnCart: aCartID.
	
	clientIDbyCartID removeKey: aCartID.
	cartIDLastTimeUsed removeKey: aCartID.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/2/2020 18:40:13' prior: 50932526!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDate withCardOwnerName: aCardOwnerName
	| card clientID|
	
	(market isCart: aCartID) ifFalse: [^Error signal: self class cannotCheckoutCartWithInvalidCartIDMessage.].
	(self isCartExpired: aCartID) ifTrue: [^Error signal: self class cannotUseAnExpiredCartIDMessage.].
	
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: aCardDate.
	market checkoutCart: aCartID usingCard: card.
	
	clientID _ clientIDbyCartID at: aCartID.
	(purchasesByClient at: clientID) addAll: (market cartContents: aCartID).
	
	market returnCart: aCartID.
	
	clientIDbyCartID removeKey: aCartID.
	cartIDLastTimeUsed removeKey: aCartID.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/2/2020 18:41:04' prior: 50932466!
listCart: aCartID
	(market isCart: aCartID) ifFalse: [^Error signal: RESTInterface cannotListCartWithInvalidCartIDMessage].
	
	(self isCartExpired: aCartID) ifTrue: [^Error signal: self class cannotUseAnExpiredCartIDMessage.].
	
	cartIDLastTimeUsed at: aCartID put: clock now.
	
	^(market cartContents: aCartID).! !
!RESTInterface methodsFor: 'private' stamp: 'EMI 12/2/2020 18:41:41' prior: 50928891!
isCartExpired: aCartID
	| lastUsed |
	lastUsed _ cartIDLastTimeUsed at: aCartID.
	(clock now > (lastUsed + 30 minutes)) ifTrue: [
		cartIDLastTimeUsed removeKey: aCartID.
		market returnCart: aCartID.
		clientIDbyCartID removeKey: aCartID.
		^true.
	].
	^false.! !

!methodRemoval: RESTInterface #newCartID stamp: 'EMI 12/2/2020 18:41:56'!
newCartID
	| cartID |
	cartID _ currentCartID.
	currentCartID _ currentCartID + 1.
	^cartID.!
!RESTInterface methodsFor: 'initialization' stamp: 'EMI 12/2/2020 18:42:47' prior: 50928745!
initializeWithAuthenticator: anAuthenticator withPriceList: aPriceList withCashier: aCashier withClock: aClock    
	authenticator _ anAuthenticator.
	priceList _ aPriceList.
	currentCartID _ 1.
	carts _ Dictionary new.
	purchasesByClient _ Dictionary new.
	clientIDbyCartID _ Dictionary new.
	cartIDLastTimeUsed _ Dictionary new.
	cashier _ aCashier.
	clock _ aClock.
	market _ Market withPriceList: aPriceList withMerchantProcessor: AlwaysValidMerchantProcessorSimulator new.! !
!RESTInterface methodsFor: 'initialization' stamp: 'EMI 12/2/2020 18:43:10' prior: 50932606!
initializeWithAuthenticator: anAuthenticator withPriceList: aPriceList withCashier: aCashier withClock: aClock    
	authenticator _ anAuthenticator.
	priceList _ aPriceList.
	purchasesByClient _ Dictionary new.
	clientIDbyCartID _ Dictionary new.
	cartIDLastTimeUsed _ Dictionary new.
	cashier _ aCashier.
	clock _ aClock.
	market _ Market withPriceList: aPriceList withMerchantProcessor: AlwaysValidMerchantProcessorSimulator new.! !
!Market methodsFor: 'initialization' stamp: 'EMI 12/2/2020 18:43:41' prior: 50929976!
initializeWith: aPriceList withMerchantProcessor: aMerchantProcessor
	priceList _ aPriceList.
	merchantProcessor _ aMerchantProcessor.
	cashier _ Cashier withPriceList: aPriceList withMerchantProcessor: aMerchantProcessor.
	currentCartID _ 1.! !
!Market methodsFor: 'initialization' stamp: 'EMI 12/2/2020 18:44:00' prior: 50932641!
initializeWith: aPriceList withMerchantProcessor: aMerchantProcessor
	priceList _ aPriceList.
	merchantProcessor _ aMerchantProcessor.
	cashier _ Cashier withPriceList: aPriceList withMerchantProcessor: aMerchantProcessor.
	currentCartID _ 1.
	carts _ Dictionary new.! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/2/2020 18:45:20'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/2/2020 18:45:20'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/2/2020 18:45:20'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/2/2020 18:45:20'!
ERROR!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/2/2020 18:45:20'!
ERROR!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/2/2020 18:45:20'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/2/2020 18:45:20'!
ERROR!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/2/2020 18:45:20'!
ERROR!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/2/2020 18:45:20'!
ERROR!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/2/2020 18:45:20'!
ERROR!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/2/2020 18:45:20'!
PASSED!

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/2/2020 18:45:20'!
ERROR!

!testRun: #RESTInterfaceTest #test13CannotListAnExpiredCart stamp: 'EMI 12/2/2020 18:45:20'!
ERROR!

!testRun: #RESTInterfaceTest #test14UsingCartResetsClockExpiration stamp: 'EMI 12/2/2020 18:45:20'!
ERROR!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/2/2020 18:45:22'!
ERROR!
!Market methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 18:46:44'!
addToCart: aCartID productName: aProductName quantity: aProductAmount
	| cart |
	cart _ carts at: aCartID.
	cart add: aProductName amount: aProductAmount.! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/2/2020 18:46:49'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/2/2020 18:46:49'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/2/2020 18:46:49'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/2/2020 18:46:49'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/2/2020 18:46:49'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/2/2020 18:46:49'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/2/2020 18:46:49'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/2/2020 18:46:49'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/2/2020 18:46:49'!
PASSED!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/2/2020 18:46:49'!
PASSED!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/2/2020 18:46:49'!
PASSED!

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/2/2020 18:46:49'!
PASSED!

!testRun: #RESTInterfaceTest #test13CannotListAnExpiredCart stamp: 'EMI 12/2/2020 18:46:49'!
PASSED!

!testRun: #RESTInterfaceTest #test14UsingCartResetsClockExpiration stamp: 'EMI 12/2/2020 18:46:49'!
PASSED!

----SNAPSHOT----(2 December 2020 18:46:53) CuisUniversity-4383.image priorSource: 19213362!

----QUIT----(2 December 2020 18:47:15) CuisUniversity-4383.image priorSource: 19235869!

----STARTUP---- (2 December 2020 21:56:26) as /home/doraserver/CuisUniversity/CuisUniversity-4383.image!


Object subclass: #RESTInterface
	instanceVariableNames: 'authenticator priceList carts currentCartID cashier purchasesByClient clientIDbyCartID clock cartIDLastTimeUsed market lastTransactionID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'EMI 12/2/2020 22:10:47'!
Object subclass: #RESTInterface
	instanceVariableNames: 'authenticator priceList carts currentCartID cashier purchasesByClient clientIDbyCartID clock cartIDLastTimeUsed market lastTransactionID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterface methodsFor: 'initialization' stamp: 'EMI 12/2/2020 22:11:00' prior: 50932624!
initializeWithAuthenticator: anAuthenticator withPriceList: aPriceList withCashier: aCashier withClock: aClock    
	authenticator _ anAuthenticator.
	priceList _ aPriceList.
	purchasesByClient _ Dictionary new.
	clientIDbyCartID _ Dictionary new.
	cartIDLastTimeUsed _ Dictionary new.
	cashier _ aCashier.
	clock _ aClock.
	market _ Market withPriceList: aPriceList withMerchantProcessor: AlwaysValidMerchantProcessorSimulator new.
	lastTransactionID _ 1.! !
!RESTInterface methodsFor: 'private' stamp: 'EMI 12/2/2020 22:11:55'!
nextTransactionID
	| transactionID |
	transactionID _ lastTransactionID.
	lastTransactionID _ lastTransactionID + 1.
	^transactionID.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/2/2020 22:12:39' prior: 50932551!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDate withCardOwnerName: aCardOwnerName
	| card clientID|
	
	(market isCart: aCartID) ifFalse: [^Error signal: self class cannotCheckoutCartWithInvalidCartIDMessage.].
	(self isCartExpired: aCartID) ifTrue: [^Error signal: self class cannotUseAnExpiredCartIDMessage.].
	
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: aCardDate.
	market checkoutCart: aCartID usingCard: card.
	
	clientID _ clientIDbyCartID at: aCartID.
	(purchasesByClient at: clientID) addAll: (market cartContents: aCartID).
	
	market returnCart: aCartID.
	
	clientIDbyCartID removeKey: aCartID.
	cartIDLastTimeUsed removeKey: aCartID.
	^self nextTransactionID.! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 22:13:19'!
test15DifferentCheckoutsAreMadeByDifferentTransactions
	| cartID |
	cartID _ interface createCart: factory validClientID withPassword: factory validClientPassword.
	
	interface addToCart: cartID productName: factory anotherValidProductName quantity: 1.
	
	interface checkout: cartID withCardNumber: factory validCardNumber withCardExpDate: factory validCardDate withCardOwnerName: factory validCardOwnerName.

	self should: [interface listCart: cartID]
	raise: Error
	withExceptionDo: [:anError | self assert: anError messageText equals: RESTInterface cannotListCartWithInvalidCartIDMessage].
	! !
!RESTInterfaceTest methodsFor: 'tests' stamp: 'EMI 12/2/2020 22:14:41' prior: 50932851!
test15DifferentCheckoutsAreMadeByDifferentTransactions
	| cartID transactionID1 transactionID2 |
	cartID _ interface createCart: factory validClientID withPassword: factory validClientPassword.
	
	interface addToCart: cartID productName: factory anotherValidProductName quantity: 1.
	
	transactionID1 _ interface checkout: cartID withCardNumber: factory validCardNumber withCardExpDate: factory validCardDate withCardOwnerName: factory validCardOwnerName.
	
	cartID _ interface createCart: factory validClientID withPassword: factory validClientPassword.
	
	interface addToCart: cartID productName: factory anotherValidProductName quantity: 1.
	
	transactionID2 _ interface checkout: cartID withCardNumber: factory validCardNumber withCardExpDate: factory validCardDate withCardOwnerName: factory validCardOwnerName.

	self deny: (transactionID1 = transactionID2).
	! !

!testRun: #RESTInterfaceTest #test15DifferentCheckoutsAreMadeByDifferentTransactions stamp: 'EMI 12/2/2020 22:14:44'!
PASSED!

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/2/2020 22:14:44'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/2/2020 22:14:44'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/2/2020 22:14:44'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/2/2020 22:14:44'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/2/2020 22:14:44'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/2/2020 22:14:44'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/2/2020 22:14:44'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/2/2020 22:14:44'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/2/2020 22:14:44'!
PASSED!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/2/2020 22:14:44'!
PASSED!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/2/2020 22:14:44'!
PASSED!

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/2/2020 22:14:44'!
PASSED!

!testRun: #RESTInterfaceTest #test13CannotListAnExpiredCart stamp: 'EMI 12/2/2020 22:14:44'!
PASSED!

!testRun: #RESTInterfaceTest #test14UsingCartResetsClockExpiration stamp: 'EMI 12/2/2020 22:14:44'!
PASSED!

!testRun: #RESTInterfaceTest #test15DifferentCheckoutsAreMadeByDifferentTransactions stamp: 'EMI 12/2/2020 22:14:44'!
PASSED!
!RESTInterface class methodsFor: 'instance creation' stamp: 'EMI 12/2/2020 22:15:28'!
withAuthenticator: anAuthenticator withMarket: aMarket withClock: aClock    
	^self new initializeWithAuthenticator: anAuthenticator withMarket: aMarket withClock: aClock ! !
!RESTInterface methodsFor: 'initialization' stamp: 'EMI 12/2/2020 22:16:08'!
initializeWithAuthenticator: anAuthenticator withMarket: aMarket withClock: aClock    
	authenticator _ anAuthenticator.
	purchasesByClient _ Dictionary new.
	clientIDbyCartID _ Dictionary new.
	cartIDLastTimeUsed _ Dictionary new.
	clock _ aClock.
	market _ aMarket.
	lastTransactionID _ 1.! !
!TestObjectsFactory methodsFor: 'object creation' stamp: 'EMI 12/2/2020 22:16:57'!
defaultMarket
	^Market withPriceList: self defaultPriceList  withMerchantProcessor: AlwaysValidMerchantProcessorSimulator new.! !
!TestObjectsFactory methodsFor: 'object creation' stamp: 'EMI 12/2/2020 22:17:00' prior: 50932980!
defaultMarket
	^Market withPriceList: self defaultPriceList withMerchantProcessor: AlwaysValidMerchantProcessorSimulator new.! !
!RESTInterfaceTest methodsFor: 'setup' stamp: 'EMI 12/2/2020 22:17:41' prior: 50931426 overrides: 16927572!
setUp
	factory _ TestObjectsFactory new.
	defaultClock _ factory defaultClock.
	interface _ RESTInterface withAuthenticator: factory defaultAuthenticator withMarket: factory defaultMarket withClock: defaultClock.! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/2/2020 22:17:43'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/2/2020 22:17:44'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/2/2020 22:17:44'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/2/2020 22:17:44'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/2/2020 22:17:44'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/2/2020 22:17:44'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/2/2020 22:17:44'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/2/2020 22:17:44'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/2/2020 22:17:44'!
ERROR!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/2/2020 22:17:44'!
PASSED!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/2/2020 22:17:44'!
PASSED!

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/2/2020 22:17:44'!
PASSED!

!testRun: #RESTInterfaceTest #test13CannotListAnExpiredCart stamp: 'EMI 12/2/2020 22:17:44'!
PASSED!

!testRun: #RESTInterfaceTest #test14UsingCartResetsClockExpiration stamp: 'EMI 12/2/2020 22:17:44'!
PASSED!

!testRun: #RESTInterfaceTest #test15DifferentCheckoutsAreMadeByDifferentTransactions stamp: 'EMI 12/2/2020 22:17:44'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/2/2020 22:17:44'!
ERROR!
!Market methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 22:18:32'!
priceOf: aProductName
	^priceList.! !
!Market methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 22:18:41' prior: 50933062!
priceOf: aProductName
	^priceList at: aProductName.! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/2/2020 22:18:44'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/2/2020 22:18:44'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/2/2020 22:18:44'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/2/2020 22:18:44'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/2/2020 22:18:44'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/2/2020 22:18:44'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/2/2020 22:18:44'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/2/2020 22:18:44'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/2/2020 22:18:44'!
ERROR!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/2/2020 22:18:44'!
PASSED!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/2/2020 22:18:44'!
PASSED!

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/2/2020 22:18:44'!
PASSED!

!testRun: #RESTInterfaceTest #test13CannotListAnExpiredCart stamp: 'EMI 12/2/2020 22:18:44'!
PASSED!

!testRun: #RESTInterfaceTest #test14UsingCartResetsClockExpiration stamp: 'EMI 12/2/2020 22:18:44'!
PASSED!

!testRun: #RESTInterfaceTest #test15DifferentCheckoutsAreMadeByDifferentTransactions stamp: 'EMI 12/2/2020 22:18:44'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/2/2020 22:18:44'!
ERROR!
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/2/2020 22:19:09' prior: 50929374!
listPurchases: aClientID withPassword: aPassword
	| purchases bill products result|
	authenticator checkUser: aClientID withPassword: aPassword.
	
	result _ OrderedCollection new.
	purchases _ purchasesByClient at: aClientID ifAbsent:[^result].
	
	bill _ 0.
	purchases do: [:anItem | bill _ bill + market priceOf: anItem].
	
	
	products _ purchases asSet.
	products do:[:aProduct | result add: aProduct. 
					     result add: (purchases occurrencesOf: aProduct)].
	result add: bill.
	^result
	! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/2/2020 22:19:11'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/2/2020 22:19:11'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/2/2020 22:19:11'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/2/2020 22:19:11'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/2/2020 22:19:11'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/2/2020 22:19:11'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/2/2020 22:19:11'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/2/2020 22:19:11'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/2/2020 22:19:11'!
ERROR!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/2/2020 22:19:11'!
PASSED!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/2/2020 22:19:11'!
PASSED!

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/2/2020 22:19:11'!
PASSED!

!testRun: #RESTInterfaceTest #test13CannotListAnExpiredCart stamp: 'EMI 12/2/2020 22:19:11'!
PASSED!

!testRun: #RESTInterfaceTest #test14UsingCartResetsClockExpiration stamp: 'EMI 12/2/2020 22:19:11'!
PASSED!

!testRun: #RESTInterfaceTest #test15DifferentCheckoutsAreMadeByDifferentTransactions stamp: 'EMI 12/2/2020 22:19:11'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/2/2020 22:19:11'!
ERROR!

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/2/2020 22:20:02'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/2/2020 22:20:02'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/2/2020 22:20:02'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/2/2020 22:20:02'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/2/2020 22:20:02'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/2/2020 22:20:02'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/2/2020 22:20:02'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/2/2020 22:20:02'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/2/2020 22:20:02'!
ERROR!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/2/2020 22:20:02'!
PASSED!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/2/2020 22:20:02'!
PASSED!

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/2/2020 22:20:02'!
PASSED!

!testRun: #RESTInterfaceTest #test13CannotListAnExpiredCart stamp: 'EMI 12/2/2020 22:20:02'!
PASSED!

!testRun: #RESTInterfaceTest #test14UsingCartResetsClockExpiration stamp: 'EMI 12/2/2020 22:20:02'!
PASSED!

!testRun: #RESTInterfaceTest #test15DifferentCheckoutsAreMadeByDifferentTransactions stamp: 'EMI 12/2/2020 22:20:02'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/2/2020 22:20:02'!
ERROR!
!TestObjectsFactory methodsFor: 'object creation' stamp: 'EMI 12/2/2020 22:20:20' prior: 50930725!
anotherValidProductName
	^'El Principito'.! !
!TestObjectsFactory methodsFor: 'object creation' stamp: 'EMI 12/2/2020 22:20:57' prior: 50930751!
defaultPriceList
	^Dictionary with: (self anotherValidProductName) -> 50 with: (self validProductName) -> 100.! !
!TestObjectsFactory methodsFor: 'object creation' stamp: 'EMI 12/2/2020 22:21:27' prior: 50933265!
defaultPriceList
	^Dictionary with: (self validProductName) -> 50 with: (self anotherValidProductName) -> 100.! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/2/2020 22:21:30'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/2/2020 22:21:30'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/2/2020 22:21:30'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/2/2020 22:21:30'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/2/2020 22:21:30'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/2/2020 22:21:30'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/2/2020 22:21:30'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/2/2020 22:21:30'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/2/2020 22:21:30'!
ERROR!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/2/2020 22:21:30'!
PASSED!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/2/2020 22:21:30'!
PASSED!

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/2/2020 22:21:30'!
PASSED!

!testRun: #RESTInterfaceTest #test13CannotListAnExpiredCart stamp: 'EMI 12/2/2020 22:21:30'!
PASSED!

!testRun: #RESTInterfaceTest #test14UsingCartResetsClockExpiration stamp: 'EMI 12/2/2020 22:21:30'!
PASSED!

!testRun: #RESTInterfaceTest #test15DifferentCheckoutsAreMadeByDifferentTransactions stamp: 'EMI 12/2/2020 22:21:30'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/2/2020 22:21:30'!
ERROR!
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/2/2020 22:22:00' prior: 50933128!
listPurchases: aClientID withPassword: aPassword
	| purchases bill products result|
	authenticator checkUser: aClientID withPassword: aPassword.
	
	result _ OrderedCollection new.
	purchases _ purchasesByClient at: aClientID ifAbsent:[^result].
	
	bill _ 0.
	purchases do: [:anItem | bill _ bill + (market priceOf: anItem)].
	
	
	products _ purchases asSet.
	products do:[:aProduct | result add: aProduct. 
					     result add: (purchases occurrencesOf: aProduct)].
	result add: bill.
	^result
	! !

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/2/2020 22:22:02'!
PASSED!

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/2/2020 22:22:06'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/2/2020 22:22:06'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/2/2020 22:22:06'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/2/2020 22:22:06'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/2/2020 22:22:06'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/2/2020 22:22:06'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/2/2020 22:22:06'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/2/2020 22:22:06'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/2/2020 22:22:06'!
PASSED!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/2/2020 22:22:06'!
PASSED!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/2/2020 22:22:06'!
PASSED!

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/2/2020 22:22:06'!
PASSED!

!testRun: #RESTInterfaceTest #test13CannotListAnExpiredCart stamp: 'EMI 12/2/2020 22:22:06'!
PASSED!

!testRun: #RESTInterfaceTest #test14UsingCartResetsClockExpiration stamp: 'EMI 12/2/2020 22:22:06'!
PASSED!

!testRun: #RESTInterfaceTest #test15DifferentCheckoutsAreMadeByDifferentTransactions stamp: 'EMI 12/2/2020 22:22:06'!
PASSED!
!Clock class methodsFor: 'nil' stamp: 'EMI 12/2/2020 22:44:16'!
minutesAmountMustBePositiveIntegerMessage
	^'Minutes amount must be a positive integer.'.! !

Object subclass: #CartSession
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'EMI 12/2/2020 22:50:22'!
Object subclass: #CartSession
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartSession class methodsFor: 'nil' stamp: 'EMI 12/2/2020 22:50:44'!
of: aCart
	^self new initialize: aCart.! !
!CartSession methodsFor: 'nil' stamp: 'EMI 12/2/2020 22:51:01'!
initialize: aCart
	cart _ aCart.! !

!classDefinition: #CartSession category: 'TusLibros' stamp: 'EMI 12/2/2020 22:53:07'!
Object subclass: #CartSession
	instanceVariableNames: 'cart clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'EMI 12/2/2020 22:53:08'!
Object subclass: #CartSession
	instanceVariableNames: 'cart clock lastUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartSession methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 22:53:05'!
initialize: aCart withClock: aClock
	cart _ aCart.
	clock _ aClock.
	lastUsed _ aClock now.
	! !

!methodRemoval: CartSession #initialize: stamp: 'EMI 12/2/2020 22:53:14'!
initialize: aCart
	cart _ aCart.!
!CartSession class methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 22:53:44'!
of: aCart withClock: aClock
	^self new initialize: aCart withClock: aClock.! !

!methodRemoval: CartSession class #of: stamp: 'EMI 12/2/2020 22:53:48'!
of: aCart
	^self new initialize: aCart.!
!CartSession methodsFor: 'nil' stamp: 'EMI 12/2/2020 22:54:16'!
add: anItem
	! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 22:54:27' prior: 50933467!
add: anItem
	cart add: anItem.! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 22:54:49' prior: 50933471!
add: anItem
	self isExpired.
	self updateLastUse.
	cart add: anItem.! !
!Market class methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 22:56:33'!
cannotGetCartContentsWithInvalidCartID
	^'Cannot get cart contents with invalid CartID'.! !

!methodRemoval: RESTInterface class #withAuthenticator:withPriceList:withCashier:withClock: stamp: 'EMI 12/2/2020 22:57:15'!
withAuthenticator: anAuthenticator withPriceList: aPriceList withCashier: aCashier withClock: aClock    
	^self new initializeWithAuthenticator: anAuthenticator withPriceList: aPriceList withCashier: aCashier withClock: aClock !
!CartSession methodsFor: 'nil' stamp: 'EMI 12/2/2020 22:58:02'!
add: anItem amount: aNumberOfItems
	cart add: anItem amount: aNumberOfItems.! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'EMI 12/2/2020 22:58:17'!
isExpired
	! !

!methodRemoval: RESTInterface #initializeWithAuthenticator:withPriceList:withCashier:withClock: stamp: 'EMI 12/2/2020 22:59:17'!
initializeWithAuthenticator: anAuthenticator withPriceList: aPriceList withCashier: aCashier withClock: aClock    
	authenticator _ anAuthenticator.
	priceList _ aPriceList.
	purchasesByClient _ Dictionary new.
	clientIDbyCartID _ Dictionary new.
	cartIDLastTimeUsed _ Dictionary new.
	cashier _ aCashier.
	clock _ aClock.
	market _ Market withPriceList: aPriceList withMerchantProcessor: AlwaysValidMerchantProcessorSimulator new.
	lastTransactionID _ 1.!

Object subclass: #RESTInterface
	instanceVariableNames: 'authenticator currentCartID purchasesByClient clientIDbyCartID clock cartIDLastTimeUsed market lastTransactionID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'EMI 12/2/2020 22:59:46'!
Object subclass: #RESTInterface
	instanceVariableNames: 'authenticator currentCartID purchasesByClient clientIDbyCartID clock cartIDLastTimeUsed market lastTransactionID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #Market
	instanceVariableNames: 'priceList merchantProcessor cashier carts currentCartID usedCartIDs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Market category: 'TusLibros' stamp: 'EMI 12/2/2020 23:04:24'!
Object subclass: #Market
	instanceVariableNames: 'priceList merchantProcessor cashier carts currentCartID usedCartIDs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Market methodsFor: 'initialization' stamp: 'EMI 12/2/2020 23:04:36' prior: 50932652!
initializeWith: aPriceList withMerchantProcessor: aMerchantProcessor
	priceList _ aPriceList.
	merchantProcessor _ aMerchantProcessor.
	cashier _ Cashier withPriceList: aPriceList withMerchantProcessor: aMerchantProcessor.
	currentCartID _ 1.
	carts _ Dictionary new.
	usedCartIDs _ Set new.! !
!Market methodsFor: 'private' stamp: 'EMI 12/2/2020 23:05:34' prior: 50932504!
generateCartID
	| res |
	(usedCartIDs isEmpty) ifFalse: [^usedCartIDs ].
		res _ currentCartID.
	currentCartID _ currentCartID + 1.
	^res.! !
!Market methodsFor: 'private' stamp: 'EMI 12/2/2020 23:05:37' prior: 50933568!
generateCartID
	| res |
	(usedCartIDs isEmpty) ifFalse: [^usedCartIDs ].
	res _ currentCartID.
	currentCartID _ currentCartID + 1.
	^res.! !

as _ OrderedCollection with: 1 with: 2 with: 3.!

as last!

as first!

as removeLast!

as removeLast; removeLast!

as removeLast; removeLast; removeLast!

as at:2!

as at: 1!

as at: 5!

as _ OrderedCollection with: 1 with: 2 with: 3.!

as removeLast;removeLast!
!Market methodsFor: 'initialization' stamp: 'EMI 12/2/2020 23:09:08' prior: 50933556!
initializeWith: aPriceList withMerchantProcessor: aMerchantProcessor
	priceList _ aPriceList.
	merchantProcessor _ aMerchantProcessor.
	cashier _ Cashier withPriceList: aPriceList withMerchantProcessor: aMerchantProcessor.
	currentCartID _ 1.
	carts _ Dictionary new.
	usedCartIDs _ OrderedCollection new.! !
!Market methodsFor: 'private' stamp: 'EMI 12/2/2020 23:09:26' prior: 50933575!
generateCartID
	| res |
	(usedCartIDs isEmpty) ifFalse: [^usedCartIDs removeFirst].
	res _ currentCartID.
	currentCartID _ currentCartID + 1.
	^res.! !
!Market methodsFor: 'cart managment' stamp: 'EMI 12/2/2020 23:09:45' prior: 50932115!
returnCart: aCartID
	usedCartIDs addLast: aCartID.
	carts removeKey: aCartID.
	! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/2/2020 23:10:09'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/2/2020 23:10:09'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/2/2020 23:10:09'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/2/2020 23:10:09'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/2/2020 23:10:09'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/2/2020 23:10:09'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/2/2020 23:10:09'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/2/2020 23:10:09'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/2/2020 23:10:09'!
PASSED!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/2/2020 23:10:09'!
PASSED!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/2/2020 23:10:09'!
PASSED!

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/2/2020 23:10:09'!
PASSED!

!testRun: #RESTInterfaceTest #test13CannotListAnExpiredCart stamp: 'EMI 12/2/2020 23:10:09'!
PASSED!

!testRun: #RESTInterfaceTest #test14UsingCartResetsClockExpiration stamp: 'EMI 12/2/2020 23:10:09'!
PASSED!

!testRun: #RESTInterfaceTest #test15DifferentCheckoutsAreMadeByDifferentTransactions stamp: 'EMI 12/2/2020 23:10:09'!
PASSED!

----SNAPSHOT----(2 December 2020 23:10:33) CuisUniversity-4383.image priorSource: 19235962!
!Clock methodsFor: 'clock operations' stamp: 'EMI 12/2/2020 23:11:54' prior: 50929161!
fowardMinutes: aMinutesAmount
	(aMinutesAmount > 0 and:[aMinutesAmount isInteger]) ifFalse: [^Error signal: self class minutesAmountMustBePositiveIntegerMessage.].
	time _ [DateAndTime now + aMinutesAmount minutes].! !

----SNAPSHOT----(2 December 2020 23:12:10) CuisUniversity-4383.image priorSource: 19264625!

----STARTUP---- (3 December 2020 16:09:55) as /home/doraserver/CuisUniversity/CuisUniversity-4383.image!


!classRemoval: #TestObjectsFactory stamp: 'EMI 12/3/2020 16:10:02'!
Object subclass: #TestObjectsFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #RESTInterface stamp: 'EMI 12/3/2020 16:10:03'!
Object subclass: #RESTInterface
	instanceVariableNames: 'authenticator currentCartID purchasesByClient clientIDbyCartID clock cartIDLastTimeUsed market lastTransactionID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #OnlyChecksIDsMerchantProcessorSimulator stamp: 'EMI 12/3/2020 16:10:04'!
MerchantProcessorSimulator subclass: #OnlyChecksIDsMerchantProcessorSimulator
	instanceVariableNames: 'validIDs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #OnlyChecksIDsAndNamesMerchantProcessorSimulator stamp: 'EMI 12/3/2020 16:10:05'!
MerchantProcessorSimulator subclass: #OnlyChecksIDsAndNamesMerchantProcessorSimulator
	instanceVariableNames: 'registeredNamesForIDs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #OnlyChecksIDsAndFundsMerchantProcessorSimulator stamp: 'EMI 12/3/2020 16:10:05'!
MerchantProcessorSimulator subclass: #OnlyChecksIDsAndFundsMerchantProcessorSimulator
	instanceVariableNames: 'registeredFundsForIDs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #AlwaysValidMerchantProcessorSimulator stamp: 'EMI 12/3/2020 16:10:06'!
MerchantProcessorSimulator subclass: #AlwaysValidMerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProcessorSimulator stamp: 'EMI 12/3/2020 16:10:07'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Market stamp: 'EMI 12/3/2020 16:10:08'!
Object subclass: #Market
	instanceVariableNames: 'priceList merchantProcessor cashier carts lastNewCartID usedCartIDs clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'EMI 12/3/2020 16:10:09'!
Object subclass: #CreditCard
	instanceVariableNames: 'id expirationDate name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Clock stamp: 'EMI 12/3/2020 16:10:10'!
Object subclass: #Clock
	instanceVariableNames: 'time'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'EMI 12/3/2020 16:10:11'!
Object subclass: #Cashier
	instanceVariableNames: 'priceListDictionary merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartSession stamp: 'EMI 12/3/2020 16:10:11'!
Object subclass: #CartSession
	instanceVariableNames: 'cart clock lastUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'EMI 12/3/2020 16:10:12'!
Object subclass: #Cart
	instanceVariableNames: 'items amount priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #AuthenticatorSimulator stamp: 'EMI 12/3/2020 16:10:13'!
Object subclass: #AuthenticatorSimulator
	instanceVariableNames: 'validIdentities'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #RESTInterfaceTest stamp: 'EMI 12/3/2020 16:10:14'!
TestCase subclass: #RESTInterfaceTest
	instanceVariableNames: 'factory defaultClock interface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'EMI 12/3/2020 16:10:15'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'EMI 12/3/2020 16:10:16'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'listaPrecios salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'EMI 12/3/2020 16:10:17'!
TestCase subclass: #CartTest
	instanceVariableNames: 'catalogue carrito'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/doraserver/CuisUniversity/TusLibros-3.st----!

!classRemoval: #CartSession stamp: 'EMI 12/3/2020 16:10:57'!
Object subclass: #CartSession
	instanceVariableNames: 'cart clock lastUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterface methodsFor: 'private' stamp: 'EMI 12/3/2020 16:11:46' prior: 50936111!
isCartExpired: aCartID
	| lastUsed |
	lastUsed _ cartIDLastTimeUsed at: aCartID.
	(clock now > (lastUsed + 30 minutes)) ifTrue: [
		cartIDLastTimeUsed removeKey: aCartID.
		market returnCart: aCartID.
		clientIDbyCartID removeKey: aCartID.
		^Error signal: self class cannotUseAnExpiredCartIDMessage.
	].! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:11:55' prior: 50936027!
addToCart: aCartID productName: aProductName quantity: aProductAmount
	(market isCart: aCartID) ifFalse: [^Error signal: self class cannotAddProductToCartWithInvalidCartIDMessage.].
	self isCartExpired: aCartID.
	
	cartIDLastTimeUsed at: aCartID put: clock now.
	
	market addToCart: aCartID productName: aProductName quantity: aProductAmount.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:12:05' prior: 50936043!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDate withCardOwnerName: aCardOwnerName
	| card clientID|
	
	(market isCart: aCartID) ifFalse: [^Error signal: self class cannotCheckoutCartWithInvalidCartIDMessage.].
	self isCartExpired: aCartID.
	
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: aCardDate.
	market checkoutCart: aCartID usingCard: card.
	
	clientID _ clientIDbyCartID at: aCartID.
	(purchasesByClient at: clientID) addAll: (market cartContents: aCartID).
	
	market returnCart: aCartID.
	
	clientIDbyCartID removeKey: aCartID.
	cartIDLastTimeUsed removeKey: aCartID.
	^self nextTransactionID.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:12:18' prior: 50936081!
listCart: aCartID
	(market isCart: aCartID) ifFalse: [^Error signal: RESTInterface cannotListCartWithInvalidCartIDMessage].
	
	self isCartExpired: aCartID.
	
	cartIDLastTimeUsed at: aCartID put: clock now.
	
	^(market cartContents: aCartID).! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/3/2020 16:12:22'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/3/2020 16:12:22'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/3/2020 16:12:22'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/3/2020 16:12:22'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/3/2020 16:12:22'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/3/2020 16:12:22'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/3/2020 16:12:22'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/3/2020 16:12:22'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/3/2020 16:12:22'!
PASSED!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/3/2020 16:12:22'!
PASSED!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/3/2020 16:12:22'!
PASSED!

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/3/2020 16:12:22'!
PASSED!

!testRun: #RESTInterfaceTest #test13CannotListAnExpiredCart stamp: 'EMI 12/3/2020 16:12:22'!
PASSED!

!testRun: #RESTInterfaceTest #test14UsingCartResetsClockExpiration stamp: 'EMI 12/3/2020 16:12:22'!
PASSED!

!testRun: #RESTInterfaceTest #test15DifferentCheckoutsAreMadeByDifferentTransactions stamp: 'EMI 12/3/2020 16:12:22'!
PASSED!
!RESTInterface methodsFor: 'private' stamp: 'EMI 12/3/2020 16:12:41'!
checkHasCartExpired: aCartID
	| lastUsed |
	lastUsed _ cartIDLastTimeUsed at: aCartID.
	(clock now > (lastUsed + 30 minutes)) ifTrue: [
		cartIDLastTimeUsed removeKey: aCartID.
		market returnCart: aCartID.
		clientIDbyCartID removeKey: aCartID.
		^Error signal: self class cannotUseAnExpiredCartIDMessage.
	].! !
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'EMI 12/3/2020 16:12:41' prior: 50936319!
addToCart: aCartID productName: aProductName quantity: aProductAmount
	(market isCart: aCartID) ifFalse: [^Error signal: self class cannotAddProductToCartWithInvalidCartIDMessage.].
	self checkHasCartExpired: aCartID.
	
	cartIDLastTimeUsed at: aCartID put: clock now.
	
	market addToCart: aCartID productName: aProductName quantity: aProductAmount.! !
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'EMI 12/3/2020 16:12:41' prior: 50936333!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDate withCardOwnerName: aCardOwnerName
	| card clientID|
	
	(market isCart: aCartID) ifFalse: [^Error signal: self class cannotCheckoutCartWithInvalidCartIDMessage.].
	self checkHasCartExpired: aCartID.
	
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: aCardDate.
	market checkoutCart: aCartID usingCard: card.
	
	clientID _ clientIDbyCartID at: aCartID.
	(purchasesByClient at: clientID) addAll: (market cartContents: aCartID).
	
	market returnCart: aCartID.
	
	clientIDbyCartID removeKey: aCartID.
	cartIDLastTimeUsed removeKey: aCartID.
	^self nextTransactionID.! !
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'EMI 12/3/2020 16:12:41' prior: 50936357!
listCart: aCartID
	(market isCart: aCartID) ifFalse: [^Error signal: RESTInterface cannotListCartWithInvalidCartIDMessage].
	
	self checkHasCartExpired: aCartID.
	
	cartIDLastTimeUsed at: aCartID put: clock now.
	
	^(market cartContents: aCartID).! !

!methodRemoval: RESTInterface #isCartExpired: stamp: 'EMI 12/3/2020 16:12:41'!
isCartExpired: aCartID
	| lastUsed |
	lastUsed _ cartIDLastTimeUsed at: aCartID.
	(clock now > (lastUsed + 30 minutes)) ifTrue: [
		cartIDLastTimeUsed removeKey: aCartID.
		market returnCart: aCartID.
		clientIDbyCartID removeKey: aCartID.
		^Error signal: self class cannotUseAnExpiredCartIDMessage.
	].!
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:13:47' prior: 50936068!
createCart: anID withPassword: aPassword
	| cartID |
	authenticator checkUser: anID withPassword: aPassword.
	
	cartID _ market lendCart.

	clientIDbyCartID add: cartID->anID.
	
	(purchasesByClient includesKey: anID) ifFalse: [purchasesByClient add: anID->(Bag new)].
	
	cartIDLastTimeUsed add: (cartID -> (clock now)).
	
	^cartID.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:14:26'!
beginCartSession: cartID

	^ cartIDLastTimeUsed add: (cartID -> (clock now))! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:14:26' prior: 50936495!
createCart: anID withPassword: aPassword
	| cartID |
	authenticator checkUser: anID withPassword: aPassword.
	
	cartID _ market lendCart.

	clientIDbyCartID add: cartID->anID.
	
	(purchasesByClient includesKey: anID) ifFalse: [purchasesByClient add: anID->(Bag new)].
	
	self beginCartSession: cartID.
	
	^cartID.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:15:23'!
updateCartSession: aCartID

	^ cartIDLastTimeUsed at: aCartID put: clock now! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:15:23' prior: 50936433!
addToCart: aCartID productName: aProductName quantity: aProductAmount
	(market isCart: aCartID) ifFalse: [^Error signal: self class cannotAddProductToCartWithInvalidCartIDMessage.].
	self checkHasCartExpired: aCartID.
	
	self updateCartSession: aCartID.
	
	market addToCart: aCartID productName: aProductName quantity: aProductAmount.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:15:53'!
endCartSession: aCartID

	^ cartIDLastTimeUsed removeKey: aCartID! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:15:53' prior: 50936448!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDate withCardOwnerName: aCardOwnerName
	| card clientID|
	
	(market isCart: aCartID) ifFalse: [^Error signal: self class cannotCheckoutCartWithInvalidCartIDMessage.].
	self checkHasCartExpired: aCartID.
	
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: aCardDate.
	market checkoutCart: aCartID usingCard: card.
	
	clientID _ clientIDbyCartID at: aCartID.
	(purchasesByClient at: clientID) addAll: (market cartContents: aCartID).
	
	market returnCart: aCartID.
	
	clientIDbyCartID removeKey: aCartID.
	self endCartSession: aCartID.
	^self nextTransactionID.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:16:02' prior: 50936550!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDate withCardOwnerName: aCardOwnerName
	| card clientID|
	
	(market isCart: aCartID) ifFalse: [^Error signal: self class cannotCheckoutCartWithInvalidCartIDMessage.].
	self checkHasCartExpired: aCartID.
	
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: aCardDate.
	market checkoutCart: aCartID usingCard: card.
	
	clientID _ clientIDbyCartID at: aCartID.
	(purchasesByClient at: clientID) addAll: (market cartContents: aCartID).
	
	market returnCart: aCartID.
	
	clientIDbyCartID removeKey: aCartID.
	
	self endCartSession: aCartID.
	
	^self nextTransactionID.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:16:18' prior: 50936574!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDate withCardOwnerName: aCardOwnerName
	| card clientID|
	
	(market isCart: aCartID) ifFalse: [^Error signal: self class cannotCheckoutCartWithInvalidCartIDMessage.].
	self checkHasCartExpired: aCartID.
	
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: aCardDate.
	market checkoutCart: aCartID usingCard: card.
	
	clientID _ clientIDbyCartID at: aCartID.
	(purchasesByClient at: clientID) addAll: (market cartContents: aCartID).
	
	self endCartSession: aCartID.
	clientIDbyCartID removeKey: aCartID.
	market returnCart: aCartID.
	
	^self nextTransactionID.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:17:00' prior: 50936472!
listCart: aCartID
	(market isCart: aCartID) ifFalse: [^Error signal: RESTInterface cannotListCartWithInvalidCartIDMessage].
	
	self checkHasCartExpired: aCartID.
	self updateCartSession: aCartID.
	
	^(market cartContents: aCartID).! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:17:15' prior: 50936532!
addToCart: aCartID productName: aProductName quantity: aProductAmount
	(market isCart: aCartID) ifFalse: [^Error signal: self class cannotAddProductToCartWithInvalidCartIDMessage.].
	
	self checkHasCartExpired: aCartID.
	self updateCartSession: aCartID.
	
	market addToCart: aCartID productName: aProductName quantity: aProductAmount.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:17:27' prior: 50936622!
listCart: aCartID
	(market isCart: aCartID) ifFalse: [^Error signal: self class cannotListCartWithInvalidCartIDMessage].
	
	self checkHasCartExpired: aCartID.
	self updateCartSession: aCartID.
	
	^(market cartContents: aCartID).! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:19:54'!
giveCart: anID to: cartID

	^ clientIDbyCartID add: cartID->anID! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:19:54' prior: 50936514!
createCart: anID withPassword: aPassword
	| cartID |
	authenticator checkUser: anID withPassword: aPassword.
	
	cartID _ market lendCart.

	self giveCart: anID to: cartID.
	
	(purchasesByClient includesKey: anID) ifFalse: [purchasesByClient add: anID->(Bag new)].
	
	self beginCartSession: cartID.
	
	^cartID.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:20:12' prior: 50936661!
createCart: anID withPassword: aPassword
	| cartID |
	authenticator checkUser: anID withPassword: aPassword.
	
	cartID _ market lendCart.

	self giveCart: cartID to: anID.
	
	(purchasesByClient includesKey: anID) ifFalse: [purchasesByClient add: anID->(Bag new)].
	
	self beginCartSession: cartID.
	
	^cartID.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:20:57'!
clientUsingCart: aCartID

	^ clientIDbyCartID at: aCartID! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:20:57' prior: 50936598!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDate withCardOwnerName: aCardOwnerName
	| card clientID|
	
	(market isCart: aCartID) ifFalse: [^Error signal: self class cannotCheckoutCartWithInvalidCartIDMessage.].
	self checkHasCartExpired: aCartID.
	
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: aCardDate.
	market checkoutCart: aCartID usingCard: card.
	
	clientID _ self clientUsingCart: aCartID.
	(purchasesByClient at: clientID) addAll: (market cartContents: aCartID).
	
	self endCartSession: aCartID.
	clientIDbyCartID removeKey: aCartID.
	market returnCart: aCartID.
	
	^self nextTransactionID.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:21:49'!
fromClientTakeCart: aCartID

	^ clientIDbyCartID removeKey: aCartID! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:21:49' prior: 50936691!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDate withCardOwnerName: aCardOwnerName
	| card clientID|
	
	(market isCart: aCartID) ifFalse: [^Error signal: self class cannotCheckoutCartWithInvalidCartIDMessage.].
	self checkHasCartExpired: aCartID.
	
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: aCardDate.
	market checkoutCart: aCartID usingCard: card.
	
	clientID _ self clientUsingCart: aCartID.
	(purchasesByClient at: clientID) addAll: (market cartContents: aCartID).
	
	self endCartSession: aCartID.
	self fromClientTakeCart: aCartID.
	market returnCart: aCartID.
	
	^self nextTransactionID.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:22:31' prior: 50936093!
listPurchases: aClientID withPassword: aPassword
	| purchases bill products result|
	authenticator checkUser: aClientID withPassword: aPassword.
	
	result _ OrderedCollection new.
	purchases _ purchasesByClient at: aClientID ifAbsent:[result add: 0.^result].
	
	bill _ 0.
	purchases do: [:anItem | bill _ bill + (market priceOf: anItem)].
	
	
	products _ purchases asSet.
	products do:[:aProduct | result add: aProduct. 
					     result add: (purchases occurrencesOf: aProduct)].
	result add: bill.
	^result
	! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:23:57'!
hasClientMadeAPurchase: anID

	^ purchasesByClient includesKey: anID! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:23:57' prior: 50936674!
createCart: anID withPassword: aPassword
	| cartID |
	authenticator checkUser: anID withPassword: aPassword.
	
	cartID _ market lendCart.

	self giveCart: cartID to: anID.
	
	(self hasClientMadeAPurchase: anID) ifFalse: [purchasesByClient add: anID->(Bag new)].
	
	self beginCartSession: cartID.
	
	^cartID.! !
!RESTInterface methodsFor: 'private' stamp: 'EMI 12/3/2020 16:27:32'!
registePurchaseMadeBy: aClientID of: aCartID! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:27:44' prior: 50936719!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDate withCardOwnerName: aCardOwnerName
	| card clientID|
	
	(market isCart: aCartID) ifFalse: [^Error signal: self class cannotCheckoutCartWithInvalidCartIDMessage.].
	self checkHasCartExpired: aCartID.
	
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: aCardDate.
	market checkoutCart: aCartID usingCard: card.
	
	clientID _ self clientUsingCart: aCartID.
	
	
	self endCartSession: aCartID.
	self fromClientTakeCart: aCartID.
	market returnCart: aCartID.
	
	^self nextTransactionID.! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:28:03' prior: 50936784!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDate withCardOwnerName: aCardOwnerName
	| card clientID|
	
	(market isCart: aCartID) ifFalse: [^Error signal: self class cannotCheckoutCartWithInvalidCartIDMessage.].
	self checkHasCartExpired: aCartID.
	
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: aCardDate.
	market checkoutCart: aCartID usingCard: card.
	
	clientID _ self clientUsingCart: aCartID.
	self registePurchaseMadeBy: clientID of: aCartID.
	
	
	self endCartSession: aCartID.
	self fromClientTakeCart: aCartID.
	market returnCart: aCartID.
	
	^self nextTransactionID.! !
!RESTInterface methodsFor: 'private' stamp: 'EMI 12/3/2020 16:28:17' prior: 50936779!
registePurchaseMadeBy: aClientID of: aCartID
	(purchasesByClient at: aClientID) addAll: (market cartContents: aCartID).! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:28:40' prior: 50936805!
checkout: aCartID withCardNumber: aCardNumber withCardExpDate: aCardDate withCardOwnerName: aCardOwnerName
	| card clientID|
	
	(market isCart: aCartID) ifFalse: [^Error signal: self class cannotCheckoutCartWithInvalidCartIDMessage.].
	self checkHasCartExpired: aCartID.
	
	card _ CreditCard of: aCardOwnerName withID: aCardNumber withExpirationDate: aCardDate.
	market checkoutCart: aCartID usingCard: card.
	
	clientID _ self clientUsingCart: aCartID.
	self registePurchaseMadeBy: clientID of: aCartID.
	
	self endCartSession: aCartID.
	self fromClientTakeCart: aCartID.
	market returnCart: aCartID.
	
	^self nextTransactionID.! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/3/2020 16:28:44'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/3/2020 16:28:44'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/3/2020 16:28:44'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/3/2020 16:28:44'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/3/2020 16:28:44'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/3/2020 16:28:44'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/3/2020 16:28:44'!
ERROR!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/3/2020 16:28:44'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/3/2020 16:28:44'!
ERROR!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/3/2020 16:28:44'!
ERROR!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/3/2020 16:28:44'!
FAILURE!

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/3/2020 16:28:44'!
FAILURE!

!testRun: #RESTInterfaceTest #test13CannotListAnExpiredCart stamp: 'EMI 12/3/2020 16:28:44'!
FAILURE!

!testRun: #RESTInterfaceTest #test14UsingCartResetsClockExpiration stamp: 'EMI 12/3/2020 16:28:44'!
PASSED!

!testRun: #RESTInterfaceTest #test15DifferentCheckoutsAreMadeByDifferentTransactions stamp: 'EMI 12/3/2020 16:28:44'!
ERROR!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/3/2020 16:28:52'!
ERROR!
!RESTInterface methodsFor: 'private' stamp: 'EMI 12/3/2020 16:29:42' prior: 50936656!
giveCart: cartID to: anID

	^ clientIDbyCartID add: cartID->anID! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/3/2020 16:29:43'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/3/2020 16:29:43'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/3/2020 16:29:43'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/3/2020 16:29:43'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/3/2020 16:29:43'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/3/2020 16:29:43'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/3/2020 16:29:43'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/3/2020 16:29:43'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/3/2020 16:29:43'!
PASSED!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/3/2020 16:29:43'!
PASSED!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/3/2020 16:29:43'!
PASSED!

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/3/2020 16:29:43'!
PASSED!

!testRun: #RESTInterfaceTest #test13CannotListAnExpiredCart stamp: 'EMI 12/3/2020 16:29:43'!
PASSED!

!testRun: #RESTInterfaceTest #test14UsingCartResetsClockExpiration stamp: 'EMI 12/3/2020 16:29:43'!
PASSED!

!testRun: #RESTInterfaceTest #test15DifferentCheckoutsAreMadeByDifferentTransactions stamp: 'EMI 12/3/2020 16:29:43'!
PASSED!

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/3/2020 16:30:04'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/3/2020 16:30:04'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/3/2020 16:30:04'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/3/2020 16:30:04'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/3/2020 16:30:04'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/3/2020 16:30:04'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/3/2020 16:30:04'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/3/2020 16:30:04'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/3/2020 16:30:04'!
PASSED!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/3/2020 16:30:04'!
PASSED!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/3/2020 16:30:04'!
PASSED!

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/3/2020 16:30:04'!
PASSED!

!testRun: #RESTInterfaceTest #test13CannotListAnExpiredCart stamp: 'EMI 12/3/2020 16:30:04'!
PASSED!

!testRun: #RESTInterfaceTest #test14UsingCartResetsClockExpiration stamp: 'EMI 12/3/2020 16:30:04'!
PASSED!

!testRun: #RESTInterfaceTest #test15DifferentCheckoutsAreMadeByDifferentTransactions stamp: 'EMI 12/3/2020 16:30:04'!
PASSED!
!Market class methodsFor: 'error messages' stamp: 'EMI 12/3/2020 16:30:36'!
cannotGetCartContentsWithInvalidCartIDMessage
	^'Cannot get cart contents with invalid CartID'.! !
!Market methodsFor: 'as yet unclassified' stamp: 'EMI 12/3/2020 16:30:36' prior: 50935733!
cartContents: aCartID
	(self isCart: aCartID) ifFalse:[^Error signal: self class cannotGetCartContentsWithInvalidCartIDMessage].
	^(carts at: aCartID) contents.! !

!methodRemoval: Market class #cannotGetCartContentsWithInvalidCartID stamp: 'EMI 12/3/2020 16:30:36'!
cannotGetCartContentsWithInvalidCartID
	^'Cannot get cart contents with invalid CartID'.!

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/3/2020 16:30:42'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/3/2020 16:30:42'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/3/2020 16:30:42'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/3/2020 16:30:42'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/3/2020 16:30:42'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/3/2020 16:30:42'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/3/2020 16:30:42'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/3/2020 16:30:42'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/3/2020 16:30:42'!
PASSED!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/3/2020 16:30:42'!
PASSED!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/3/2020 16:30:42'!
PASSED!

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/3/2020 16:30:42'!
PASSED!

!testRun: #RESTInterfaceTest #test13CannotListAnExpiredCart stamp: 'EMI 12/3/2020 16:30:42'!
PASSED!

!testRun: #RESTInterfaceTest #test14UsingCartResetsClockExpiration stamp: 'EMI 12/3/2020 16:30:42'!
PASSED!

!testRun: #RESTInterfaceTest #test15DifferentCheckoutsAreMadeByDifferentTransactions stamp: 'EMI 12/3/2020 16:30:42'!
PASSED!
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:32:33'!
clientHasNoPurchases: anID

	^ purchasesByClient add: anID->(Bag new)! !
!RESTInterface methodsFor: 'API' stamp: 'EMI 12/3/2020 16:32:33' prior: 50936767!
createCart: anID withPassword: aPassword
	| cartID |
	authenticator checkUser: anID withPassword: aPassword.
	
	cartID _ market lendCart.

	self giveCart: cartID to: anID.
	
	(self hasClientMadeAPurchase: anID) ifFalse: [self clientHasNoPurchases: anID].
	
	self beginCartSession: cartID.
	
	^cartID.! !

!classDefinition: #RESTInterface category: 'TusLibros' stamp: 'EMI 12/3/2020 16:33:27'!
Object subclass: #RESTInterface
	instanceVariableNames: 'authenticator currentCartID purchasesByClient clientIDbyCartID clock cartSessions market lastTransactionID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'EMI 12/3/2020 16:33:27' prior: 50936420!
checkHasCartExpired: aCartID
	| lastUsed |
	lastUsed _ cartSessions at: aCartID.
	(clock now > (lastUsed + 30 minutes)) ifTrue: [
		cartSessions removeKey: aCartID.
		market returnCart: aCartID.
		clientIDbyCartID removeKey: aCartID.
		^Error signal: self class cannotUseAnExpiredCartIDMessage.
	].! !
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'EMI 12/3/2020 16:33:27' prior: 50936545!
endCartSession: aCartID

	^ cartSessions removeKey: aCartID! !
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'EMI 12/3/2020 16:33:27' prior: 50936129!
initializeWithAuthenticator: anAuthenticator withMarket: aMarket withClock: aClock    
	authenticator _ anAuthenticator.
	purchasesByClient _ Dictionary new.
	clientIDbyCartID _ Dictionary new.
	cartSessions _ Dictionary new.
	clock _ aClock.
	market _ aMarket.
	lastTransactionID _ 1.! !
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'EMI 12/3/2020 16:33:27' prior: 50936508!
beginCartSession: cartID

	^ cartSessions add: (cartID -> (clock now))! !
!RESTInterface methodsFor: 'as yet unclassified' stamp: 'EMI 12/3/2020 16:33:27' prior: 50936526!
updateCartSession: aCartID

	^ cartSessions at: aCartID put: clock now! !

!testRun: #RESTInterfaceTest #test01CanCreateEmptyCartUsingValidIDAndPassword stamp: 'EMI 12/3/2020 16:33:54'!
PASSED!

!testRun: #RESTInterfaceTest #test02CannotCreateCartUsingInvalidIDOrPassword stamp: 'EMI 12/3/2020 16:33:54'!
PASSED!

!testRun: #RESTInterfaceTest #test03CannotListCartUsingInvalidCartID stamp: 'EMI 12/3/2020 16:33:54'!
PASSED!

!testRun: #RESTInterfaceTest #test04CanAddOneProductToValidCart stamp: 'EMI 12/3/2020 16:33:54'!
PASSED!

!testRun: #RESTInterfaceTest #test05CanHaveMoreThanOneValidCart stamp: 'EMI 12/3/2020 16:33:54'!
PASSED!

!testRun: #RESTInterfaceTest #test06CannotAddProductToCartWithInvalidCartID stamp: 'EMI 12/3/2020 16:33:54'!
PASSED!

!testRun: #RESTInterfaceTest #test07CanCheckoutProductsOfAValidCart stamp: 'EMI 12/3/2020 16:33:54'!
PASSED!

!testRun: #RESTInterfaceTest #test08CannotCheckoutProductsOfAnInvalidCart stamp: 'EMI 12/3/2020 16:33:54'!
PASSED!

!testRun: #RESTInterfaceTest #test09CanListPurchasesMadeBValidUser stamp: 'EMI 12/3/2020 16:33:54'!
PASSED!

!testRun: #RESTInterfaceTest #test10CannotListPurchasesUsingInvalidClientIDOrPassword stamp: 'EMI 12/3/2020 16:33:54'!
PASSED!

!testRun: #RESTInterfaceTest #test11CannotAddProductToExpiredCart stamp: 'EMI 12/3/2020 16:33:54'!
PASSED!

!testRun: #RESTInterfaceTest #test12CannotCheckoutAnExpiredCart stamp: 'EMI 12/3/2020 16:33:54'!
PASSED!

!testRun: #RESTInterfaceTest #test13CannotListAnExpiredCart stamp: 'EMI 12/3/2020 16:33:54'!
PASSED!

!testRun: #RESTInterfaceTest #test14UsingCartResetsClockExpiration stamp: 'EMI 12/3/2020 16:33:54'!
PASSED!

!testRun: #RESTInterfaceTest #test15DifferentCheckoutsAreMadeByDifferentTransactions stamp: 'EMI 12/3/2020 16:33:54'!
PASSED!

----SNAPSHOT----(3 December 2020 16:34:01) CuisUniversity-4383.image priorSource: 19290002!

----QUIT----(3 December 2020 16:34:16) CuisUniversity-4383.image priorSource: 19378280!