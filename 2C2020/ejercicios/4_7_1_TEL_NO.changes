

----STARTUP---- (1 November 2020 17:24:15) as W:\cuisParcial\CuisUniversity-4384.image!


----End fileIn of W:\IS1-master\17-TerniLapilli\Terni Lapilli.st----!

TerniLapilli subclass: #FinishedTerniLapilli
	instanceVariableNames: 'turn playerX playerO occupiedXPositions occupiedOPositions isOver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

TerniLapilli subclass: #FinishedTerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #FinishedTerniLapilli category: 'Terni Lapilli' stamp: 'MMT 11/1/2020 17:26:55'!
TerniLapilli subclass: #FinishedTerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

TerniLapilli subclass: #NotFinishedTerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #NotFinishedTerniLapilli category: 'Terni Lapilli' stamp: 'MMT 11/1/2020 17:27:05'!
TerniLapilli subclass: #NotFinishedTerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli class methodsFor: 'initialization' stamp: 'MMT 11/1/2020 17:28:55'!
canHandle! !

!methodRemoval: TerniLapilli class #canHandle stamp: 'MMT 11/1/2020 17:29:18'!
canHandle!
!TerniLapilli class methodsFor: 'initialization' stamp: 'MMT 11/1/2020 17:29:46'!
canHandle: aTerniLapilli

! !
!TerniLapilli class methodsFor: 'initialization' stamp: 'MMT 11/1/2020 17:29:57'!
for: aTerniLapilli

! !
!TerniLapilli class methodsFor: 'initialization' stamp: 'MMT 11/1/2020 17:30:04'!
stateFor: aTerniLapilli

! !
!TerniLapilli class methodsFor: 'initialization' stamp: 'MMT 11/1/2020 17:31:01' prior: 50890811!
canHandle: aTerniLapilli

	^ self subclassResponsibility 
! !
!TerniLapilli class methodsFor: 'initialization' stamp: 'MMT 11/1/2020 17:32:07' prior: 50890815!
for: aTerniLapilli

	^ self new initializeFor: aTerniLapilli 

! !
!TerniLapilli class methodsFor: 'initialization' stamp: 'MMT 11/1/2020 17:33:15' prior: 50890819!
stateFor: aTerniLapilli

	^(self subclasses detect: [:aTerniLapilliClass | aTerniLapilliClass canHandle: aTerniLapilli ]) for: aTerniLapilli! !

!classRemoval: #FinishedTerniLapilli stamp: 'MMT 11/1/2020 17:36:53'!
TerniLapilli subclass: #FinishedTerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #NotFinishedTerniLapilli stamp: 'MMT 11/1/2020 17:37:01'!
TerniLapilli subclass: #NotFinishedTerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Object subclass: #TerniLapilliState
	instanceVariableNames: 'turn playerX playerO occupiedXPositions occupiedOPositions isOver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliState category: 'Terni Lapilli' stamp: 'MMT 11/1/2020 17:37:15'!
Object subclass: #TerniLapilliState
	instanceVariableNames: 'turn playerX playerO occupiedXPositions occupiedOPositions isOver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

TerniLapilliState subclass: #FinishedTerniLapilliState
	instanceVariableNames: 'turn playerX playerO occupiedXPositions occupiedOPositions isOver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

TerniLapilliState subclass: #FinishedTerniLapilliState
	instanceVariableNames: 'terniLapilli'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #FinishedTerniLapilliState category: 'Terni Lapilli' stamp: 'MMT 11/1/2020 17:37:46'!
TerniLapilliState subclass: #FinishedTerniLapilliState
	instanceVariableNames: 'terniLapilli'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Object subclass: #TerniLapilliState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliState category: 'Terni Lapilli' stamp: 'MMT 11/1/2020 17:38:02'!
Object subclass: #TerniLapilliState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

TerniLapilliState subclass: #FinishedTerniLapilliState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #FinishedTerniLapilliState category: 'Terni Lapilli' stamp: 'MMT 11/1/2020 17:38:10'!
TerniLapilliState subclass: #FinishedTerniLapilliState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Object subclass: #TerniLapilliState
	instanceVariableNames: 'terniLapilli'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliState category: 'Terni Lapilli' stamp: 'MMT 11/1/2020 17:38:15'!
Object subclass: #TerniLapilliState
	instanceVariableNames: 'terniLapilli'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

TerniLapilliState subclass: #NotFinishedTerniLapilliState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #NotFinishedTerniLapilliState category: 'Terni Lapilli' stamp: 'MMT 11/1/2020 17:38:22'!
TerniLapilliState subclass: #NotFinishedTerniLapilliState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilliState class methodsFor: 'initialization' stamp: 'MMT 11/1/2020 17:39:21'!
canHandle: aTerniLapilli

	^ self subclassResponsibility.! !
!TerniLapilliState class methodsFor: 'initialization' stamp: 'MMT 11/1/2020 17:39:32'!
for: aTerniLapilli

	! !
!TerniLapilliState class methodsFor: 'initialization' stamp: 'MMT 11/1/2020 17:39:43'!
stateFor: aTerniLapilli
	! !
!TerniLapilliState class methodsFor: 'initialization' stamp: 'MMT 11/1/2020 17:39:55' prior: 50890951!
stateFor: aTerniLapilli
	
	! !
!TerniLapilliState class methodsFor: 'initialization' stamp: 'MMT 11/1/2020 17:40:29' prior: 50890947!
for: aTerniLapilli

	^ self new initializeFor: aTerniLapilli! !
!TerniLapilliState class methodsFor: 'initialization' stamp: 'MMT 11/1/2020 17:41:01' prior: 50890956!
stateFor: aTerniLapilli

	^ self subclass detect
	
	! !
!TerniLapilliState class methodsFor: 'initialization' stamp: 'MMT 11/1/2020 17:42:29' prior: 50890967!
stateFor: aTerniLapilli

	^ (self subclasses detect:[:aTerniLapilliState | aTerniLapilliState canHandle: aTerniLapilli]) for: aTerniLapilli 
	
	! !
!TerniLapilliState class methodsFor: 'initialization' stamp: 'MMT 11/1/2020 17:42:34' prior: 50890972!
stateFor: aTerniLapilli

	^ (self subclasses detect: [:aTerniLapilliState | aTerniLapilliState canHandle: aTerniLapilli]) for: aTerniLapilli 
	
	! !
!TerniLapilliState class methodsFor: 'initialization' stamp: 'MMT 11/1/2020 17:42:38' prior: 50890980!
stateFor: aTerniLapilli

	^ (self subclasses detect: [:aTerniLapilliState | aTerniLapilliState canHandle: aTerniLapilli]) for: aTerniLapilli. 
	
	! !
!TerniLapilliState methodsFor: 'initialization' stamp: 'MMT 11/1/2020 17:43:12'!
initializeFor: aTerniLapilli

	terniLapilli := aTerniLapilli ! !
!FinishedTerniLapilliState class methodsFor: 'no messages' stamp: 'MMT 11/1/2020 17:44:18' overrides: 50890942!
canHandle: aTerniLapilli

	^ aTerniLapilli isOver.! !
!FinishedTerniLapilliState methodsFor: 'no messages' stamp: 'MMT 11/1/2020 17:44:55'!
canHandle: aTerniLapilli

	^ aTerniLapilli  isOver.! !
!NotFinishedTerniLapilliState class methodsFor: 'no messages' stamp: 'MMT 11/1/2020 17:45:33' overrides: 50890942!
canHandle: aTerniLapilli

	^ aTerniLapilli  isOver not! !
!NotFinishedTerniLapilliState class methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 17:45:35' prior: 50891013 overrides: 50890942!
canHandle: aTerniLapilli

	^ aTerniLapilli  isOver not.! !

!methodRemoval: FinishedTerniLapilliState #canHandle: stamp: 'MMT 11/1/2020 17:48:07'!
canHandle: aTerniLapilli

	^ aTerniLapilli  isOver.!
!FinishedTerniLapilliState methodsFor: 'no messages' stamp: 'MMT 11/1/2020 17:48:43'!
move! !
!TerniLapilli methodsFor: 'private' stamp: 'MMT 11/1/2020 17:51:28' prior: 50890694!
playerXmovesThePieceIn: aPosition to: anotherPosition
	
	( self isOver ) ifTrue: [ self error: TerniLapilli canNotPlayIfGameIsOver ].
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedXPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedXPositions add: anotherPosition.
	
	turn := playerO.
	
	self seeIfPlayerXhasAWinningCondition .! !
!TerniLapilli methodsFor: 'private' stamp: 'MMT 11/1/2020 17:53:50'!
the: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition toWinWith: aCertainCondition
	
	( self isOver ) ifTrue: [ self error: TerniLapilli canNotPlayIfGameIsOver ].
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedXPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedXPositions add: anotherPosition.
	
	turn := playerO.
	
	self seeIfPlayerXhasAWinningCondition .! !
!TerniLapilli methodsFor: 'private' stamp: 'MMT 11/1/2020 17:54:15' prior: 50891049!
the: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition toWinWith: aCertainCondition
	
	( self isOver ) ifTrue: [ self error: TerniLapilli canNotPlayIfGameIsOver ].
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	hisPieces remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	hisPieces add: anotherPosition.
	
	turn := aPlayer.
	
	self seeIfPlayerXhasAWinningCondition .! !
!TerniLapilli methodsFor: 'private' stamp: 'MMT 11/1/2020 17:55:28' prior: 50891068!
the: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition toWinWith: aCertainCondition
	
	( self isOver ) ifTrue: [ self error: TerniLapilli canNotPlayIfGameIsOver ].
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	hisPieces remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	hisPieces add: anotherPosition.
	
	turn := aPlayer.
	
	self seeIfPlayerXhasAWinningCondition .! !
!TerniLapilli methodsFor: 'testing' stamp: 'MMT 11/1/2020 17:58:19'!
has: aPlayer WonWith: aCertainPiecesInBoard
	
	| anOccupiedPosition |
	
	(occupiedOPositions size < 3) ifTrue: [ ^false ].
	
	anOccupiedPosition := occupiedOPositions detect: [ :aPosition | true].
	
	^ (occupiedOPositions allSatisfy: [ :aPosition | (anOccupiedPosition x = aPosition x)])  or:
		(occupiedOPositions allSatisfy: [ :aPosition | (anOccupiedPosition y = aPosition y)]) or:
		(self winsDiagonally: occupiedOPositions)! !
!TerniLapilli methodsFor: 'testing' stamp: 'MMT 11/1/2020 17:58:38' prior: 50891105!
has: aPlayer WonWith: aCertainPiecesInBoard
	
	| anOccupiedPosition |
	
	(aCertainPiecesInBoard size < 3) ifTrue: [ ^false ].
	
	anOccupiedPosition := aCertainPiecesInBoard detect: [ :aPosition | true].
	
	^ (aCertainPiecesInBoard allSatisfy: [ :aPosition | (anOccupiedPosition x = aPosition x)])  or:
		(aCertainPiecesInBoard allSatisfy: [ :aPosition | (anOccupiedPosition y = aPosition y)]) or:
		(self winsDiagonally: aCertainPiecesInBoard)! !
!TerniLapilli methodsFor: 'testing' stamp: 'MMT 11/1/2020 17:59:33' prior: 50890547!
hasPlayerOWon
	
	^ self has: playerO WonWith: occupiedOPositions. 
	
	"| anOccupiedPosition |
	
	(occupiedOPositions size < 3) ifTrue: [ ^false ].
	
	anOccupiedPosition := occupiedOPositions detect: [ :aPosition | true].
	
	^ (occupiedOPositions allSatisfy: [ :aPosition | (anOccupiedPosition x = aPosition x)])  or:
		(occupiedOPositions allSatisfy: [ :aPosition | (anOccupiedPosition y = aPosition y)]) or:
		(self winsDiagonally: occupiedOPositions)"! !

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'MMT 11/1/2020 17:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'MMT 11/1/2020 17:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'MMT 11/1/2020 17:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'MMT 11/1/2020 17:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'MMT 11/1/2020 17:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'MMT 11/1/2020 17:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'MMT 11/1/2020 17:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'MMT 11/1/2020 17:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'MMT 11/1/2020 17:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'MMT 11/1/2020 17:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'MMT 11/1/2020 17:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'MMT 11/1/2020 17:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'MMT 11/1/2020 17:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'MMT 11/1/2020 17:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'MMT 11/1/2020 17:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'MMT 11/1/2020 17:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'MMT 11/1/2020 17:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'MMT 11/1/2020 17:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'MMT 11/1/2020 17:59:39'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'MMT 11/1/2020 17:59:39'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonally stamp: 'MMT 11/1/2020 17:59:39'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerCanWinWithAMovement stamp: 'MMT 11/1/2020 17:59:39'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerCanNotPlaceAPieceIfGameIsOver stamp: 'MMT 11/1/2020 17:59:39'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerCanNotMoveAPieceIfGameIsOver stamp: 'MMT 11/1/2020 17:59:39'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'MMT 11/1/2020 18:00:42' prior: 50890562!
hasPlayerXWon
	
	| anOccupiedPosition |
	
	(occupiedXPositions size < 3) ifTrue: [ ^false ].
	
	anOccupiedPosition := occupiedXPositions detect: [ :aPosition | true].
	
	^ (occupiedXPositions allSatisfy: [ :aPosition | (anOccupiedPosition x = aPosition x)])  or:
		(occupiedXPositions allSatisfy: [ :aPosition | (anOccupiedPosition y = aPosition y)]) or:
		(self winsDiagonally: occupiedXPositions).! !
!TerniLapilli methodsFor: 'private -- testing' stamp: 'MMT 11/1/2020 18:01:15' prior: 50890718!
seeIfPlayerOhasAWinningCondition
	
	isOver := self has: playerO WonWith: occupiedOPositions.! !
!TerniLapilli methodsFor: 'private -- testing' stamp: 'MMT 11/1/2020 18:06:13'!
seeIfCertainPlayerWon: aPlayer
	
	isOver := self has: playerO WonWith: occupiedOPositions.! !
!TerniLapilli methodsFor: 'private -- testing' stamp: 'MMT 11/1/2020 18:07:15'!
seeIfCertainPlayerWon: aPlayer with: certainPiecesOcuppied
	
	isOver := self has: aPlayer WonWith: certainPiecesOcuppied
	.! !

!methodRemoval: TerniLapilli #seeIfCertainPlayerWon: stamp: 'MMT 11/1/2020 18:07:21'!
seeIfCertainPlayerWon: aPlayer
	
	isOver := self has: playerO WonWith: occupiedOPositions.!
!TerniLapilli methodsFor: 'private' stamp: 'MMT 11/1/2020 18:08:31' prior: 50891087!
the: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition toWinWith: certainOcuppiedPieces
	
	( self isOver ) ifTrue: [ self error: TerniLapilli canNotPlayIfGameIsOver ].
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	hisPieces remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	hisPieces add: anotherPosition.
	
	turn := aPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: certainOcuppiedPieces! !
!TerniLapilli methodsFor: 'private' stamp: 'MMT 11/1/2020 18:08:34' prior: 50891278!
the: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition toWinWith: certainOcuppiedPieces
	
	( self isOver ) ifTrue: [ self error: TerniLapilli canNotPlayIfGameIsOver ].
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	hisPieces remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	hisPieces add: anotherPosition.
	
	turn := aPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: certainOcuppiedPieces.! !
!TerniLapilli methodsFor: 'operations' stamp: 'MMT 11/1/2020 18:09:11' prior: 50890532!
playerXMovesFrom: aPosition to: anotherPosition
	
	playerX movesThePieceIn: aPosition to: anotherPosition.! !
!TerniLapilli methodsFor: 'private' stamp: 'MMT 11/1/2020 18:09:43'!
the: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition toTryWinWith: certainOcuppiedPieces
	
	( self isOver ) ifTrue: [ self error: TerniLapilli canNotPlayIfGameIsOver ].
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	hisPieces remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	hisPieces add: anotherPosition.
	
	turn := aPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: certainOcuppiedPieces.! !

!methodRemoval: TerniLapilli #the:movesFrom:ThePieceIn:to:toWinWith: stamp: 'MMT 11/1/2020 18:09:53'!
the: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition toWinWith: certainOcuppiedPieces
	
	( self isOver ) ifTrue: [ self error: TerniLapilli canNotPlayIfGameIsOver ].
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	hisPieces remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	hisPieces add: anotherPosition.
	
	turn := aPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: certainOcuppiedPieces.!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 18:12:14' prior: 50890216!
test10PlayerCanNotMoveMoreThanOnePosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (-1@-1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ juego playerXMovesFrom: (0@-1) to: (0@1). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'MMT 11/1/2020 18:12:19'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'MMT 11/1/2020 18:12:23'!
PASSED!
!TerniLapilli methodsFor: 'operations' stamp: 'MMT 11/1/2020 18:12:56'!
the: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition 
	
	( self isOver ) ifTrue: [ self error: TerniLapilli canNotPlayIfGameIsOver ].
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	hisPieces remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	hisPieces add: anotherPosition.
	
	turn := aPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: hisPieces .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 18:14:39' prior: 50891362!
test10PlayerCanNotMoveMoreThanOnePosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (-1@-1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ | occupiedXPieces | juego playerX movesFrom: occupiedXPieces ThePieceIn: (0@-1) to: (0@1) . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 18:15:46' prior: 50891403!
test10PlayerCanNotMoveMoreThanOnePosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (-1@-1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [ | occupiedXPieces | juego playerX movesFrom: occupiedXPieces ThePieceIn: (0@-1) to: (0@1) . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !

!methodRemoval: TerniLapilli #the:movesFrom:ThePieceIn:to:toTryWinWith: stamp: 'MMT 11/1/2020 18:16:05'!
the: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition toTryWinWith: certainOcuppiedPieces
	
	( self isOver ) ifTrue: [ self error: TerniLapilli canNotPlayIfGameIsOver ].
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	hisPieces remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	hisPieces add: anotherPosition.
	
	turn := aPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: certainOcuppiedPieces.!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 18:17:24' prior: 50891421!
test10PlayerCanNotMoveMoreThanOnePosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (-1@-1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	self 
		should: [  juego the: juego playerX movesFrom: juego occupiedXPositions ThePieceIn: (0@-1) to: (0@1) . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 18:18:57' prior: 50891459!
test10PlayerCanNotMoveMoreThanOnePosition
	
	| juego playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (-1@-1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	playerX = juego playerX.
	 
	
	self 
		should: [  juego the: juego playerX movesFrom: juego occupiedXPositions ThePieceIn: (0@-1) to: (0@1) . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 18:19:16' prior: 50891477!
test10PlayerCanNotMoveMoreThanOnePosition
	
	| juego playerX occupiedXPositions |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (-1@-1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	playerX = juego playerX.
	occupiedXPositions = juego occupiedXPositions.
	 
	
	self 
		should: [  juego the: juego playerX movesFrom: juego occupiedXPositions ThePieceIn: (0@-1) to: (0@1) . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 18:19:56' prior: 50891496!
test10PlayerCanNotMoveMoreThanOnePosition
	
	| juego playerX occupiedXPositions |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (-1@-1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	playerX = juego playerX.
	occupiedXPositions = juego occupiedXPositions.
	 
	
	self 
		should: [  juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (0@-1) to: (0@1) . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilli methodsFor: 'accessing' stamp: 'MMT 11/1/2020 18:20:21'!
occupiedXPositions

 	^ occupiedXPositions! !
!TerniLapilli methodsFor: 'accessing' stamp: 'MMT 11/1/2020 18:20:32'!
occupiedOPositions

 	^ occupiedOPositions! !

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'MMT 11/1/2020 18:20:41'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 18:21:50' prior: 50890232!
test11PlayerCanNotMoveAPieceOutsideTheBoard
	
	| juego playerX occupiedXPositions |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	playerX := juego playerX.
	occupiedXPositions := juego occupiedXPositions
	
	self 
		should: [ juego playerXMovesFrom: (0@0) to: (0@4). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 18:22:15' prior: 50891517!
test10PlayerCanNotMoveMoreThanOnePosition
	
	| juego playerX occupiedXPositions |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (-1@-1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	playerX := juego playerX.
	occupiedXPositions := juego occupiedXPositions.
	 
	
	self 
		should: [  juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (0@-1) to: (0@1) . ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'MMT 11/1/2020 18:22:17'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 18:23:04' prior: 50891549!
test11PlayerCanNotMoveAPieceOutsideTheBoard
	
	| juego playerX occupiedXPositions |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	playerX := juego playerX.
	occupiedXPositions := juego occupiedXPositions.
	
	self 
		should: [juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (0@0) to: (0@4).]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'MMT 11/1/2020 18:23:07'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 18:23:24' prior: 50890297!
test15PlayerCanMoveFromCenterToAnyEmptyPosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	juego playerXMovesFrom: (0@0) to: (-1@0).
	
	
	self assert: (juego isOccupied: (-1@0)).
	self assert: (juego isPlaying: juego playerO)
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 18:24:03' prior: 50891618!
test15PlayerCanMoveFromCenterToAnyEmptyPosition
	
	| juego occupiedXPositions playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	playerX := juego playerX.
	occupiedXPositions := juego occupiedXPositions.
	
	
	juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (0@0) to: (0@4).
	
	
	
	self assert: (juego isOccupied: (-1@0)).
	self assert: (juego isPlaying: juego playerO)
	
	! !

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'MMT 11/1/2020 18:24:10'!
ERROR!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'MMT 11/1/2020 18:24:10'!
ERROR!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 18:24:33' prior: 50891633!
test15PlayerCanMoveFromCenterToAnyEmptyPosition
	
	| juego occupiedXPositions playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	playerX := juego playerX.
	occupiedXPositions := juego occupiedXPositions.
	
	
	juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (0@0) to: (-1@0).
	
	
	
	self assert: (juego isOccupied: (-1@0)).
	self assert: (juego isPlaying: juego playerO)
	
	! !

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'MMT 11/1/2020 18:24:35'!
FAILURE!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'MMT 11/1/2020 18:24:35'!
FAILURE!
!TerniLapilli methodsFor: 'operations' stamp: 'MMT 11/1/2020 19:09:23'!
the: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition AndTurnGoesTo: anotherPlayer
	
	( self isOver ) ifTrue: [ self error: TerniLapilli canNotPlayIfGameIsOver ].
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	hisPieces remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	hisPieces add: anotherPosition.
	
	turn := anotherPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: hisPieces .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 19:10:24' prior: 50891569!
test10PlayerCanNotMoveMoreThanOnePosition
	
	| juego playerX occupiedXPositions player0 |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (-1@-1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	playerX := juego playerX.
	player0 := juego player0.
	occupiedXPositions := juego occupiedXPositions.
	 
	
	self 
		should: [ | playerO |  juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (0@-1) to: (0@1) AndTurnGoesTo: playerO. ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 19:11:10' prior: 50891705!
test10PlayerCanNotMoveMoreThanOnePosition
	
	| juego playerX occupiedXPositions playerO |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (-1@-1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	playerX := juego playerX.
	playerO := juego player0.
	occupiedXPositions := juego occupiedXPositions.
	 
	
	self 
		should: [juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (0@-1) to: (0@1) AndTurnGoesTo: playerO. ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'MMT 11/1/2020 19:11:14'!
ERROR!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'MMT 11/1/2020 19:11:14'!
ERROR!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 19:11:23' prior: 50891728!
test10PlayerCanNotMoveMoreThanOnePosition
	
	| juego playerX occupiedXPositions playerO |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (-1@-1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	playerX := juego playerX.
	playerO := juego playerO.
	occupiedXPositions := juego occupiedXPositions.
	 
	
	self 
		should: [juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (0@-1) to: (0@1) AndTurnGoesTo: playerO. ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'MMT 11/1/2020 19:11:24'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 19:12:34' prior: 50891594!
test11PlayerCanNotMoveAPieceOutsideTheBoard
	
	| juego playerX occupiedXPositions playerO |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	playerX := juego playerX.
	playerO  := juego playerO.
	occupiedXPositions := juego occupiedXPositions.
	
	self 
		should: [juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (0@0) to: (0@4) AndTurnGoesTo: playerO .]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 19:13:55' prior: 50891660!
test15PlayerCanMoveFromCenterToAnyEmptyPosition
	
	| juego occupiedXPositions playerX playerO|
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	
	
	juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (0@0) to: (-1@0).
	
	
	
	self assert: (juego isOccupied: (-1@0)).
	self assert: (juego isPlaying: juego playerO)
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 19:14:17' prior: 50891807!
test15PlayerCanMoveFromCenterToAnyEmptyPosition
	
	| juego occupiedXPositions playerX playerO|
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	
	
	juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (0@0) to: (-1@0) AndChangeTurnTo: playerO .
	
	
	
	self assert: (juego isOccupied: (-1@0)).
	self assert: (juego isPlaying: juego playerO)
	
	! !
!TerniLapilli methodsFor: 'operations' stamp: 'MMT 11/1/2020 19:14:35'!
the: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition ChangeTurnTo: anotherPlayer
	
	( self isOver ) ifTrue: [ self error: TerniLapilli canNotPlayIfGameIsOver ].
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	hisPieces remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	hisPieces add: anotherPosition.
	
	turn := anotherPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: hisPieces .! !

!methodRemoval: TerniLapilli #the:movesFrom:ThePieceIn:to:AndTurnGoesTo: stamp: 'MMT 11/1/2020 19:14:44'!
the: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition AndTurnGoesTo: anotherPlayer
	
	( self isOver ) ifTrue: [ self error: TerniLapilli canNotPlayIfGameIsOver ].
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	hisPieces remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	hisPieces add: anotherPosition.
	
	turn := anotherPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: hisPieces .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 19:15:01' prior: 50891758!
test10PlayerCanNotMoveMoreThanOnePosition
	
	| juego playerX occupiedXPositions playerO |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (-1@-1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	playerX := juego playerX.
	playerO := juego playerO.
	occupiedXPositions := juego occupiedXPositions.
	 
	
	self 
		should: [juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (0@-1) to: (0@1) ChangeTurnTo: playerO. ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilli methodsFor: 'operations' stamp: 'MMT 11/1/2020 19:15:51'!
the: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition AndChangeTurnTo: anotherPlayer
	
	( self isOver ) ifTrue: [ self error: TerniLapilli canNotPlayIfGameIsOver ].
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	hisPieces remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	hisPieces add: anotherPosition.
	
	turn := anotherPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: hisPieces .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 19:15:52' prior: 50891888!
test10PlayerCanNotMoveMoreThanOnePosition
	
	| juego playerX occupiedXPositions playerO |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (-1@-1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	playerX := juego playerX.
	playerO := juego playerO.
	occupiedXPositions := juego occupiedXPositions.
	 
	
	self 
		should: [juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (0@-1) to: (0@1) AndChangeTurnTo: playerO. ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !

!methodRemoval: TerniLapilli #the:movesFrom:ThePieceIn:to:ChangeTurnTo: stamp: 'MMT 11/1/2020 19:15:52'!
the: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition ChangeTurnTo: anotherPlayer
	
	( self isOver ) ifTrue: [ self error: TerniLapilli canNotPlayIfGameIsOver ].
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	hisPieces remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	hisPieces add: anotherPosition.
	
	turn := anotherPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: hisPieces .!

!methodRemoval: TerniLapilli #the:movesFrom:ThePieceIn:to: stamp: 'MMT 11/1/2020 19:16:14'!
the: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition 
	
	( self isOver ) ifTrue: [ self error: TerniLapilli canNotPlayIfGameIsOver ].
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	hisPieces remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	hisPieces add: anotherPosition.
	
	turn := aPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: hisPieces .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 19:16:51' prior: 50891784!
test11PlayerCanNotMoveAPieceOutsideTheBoard
	
	| juego playerX occupiedXPositions playerO |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	playerX := juego playerX.
	playerO  := juego playerO.
	occupiedXPositions := juego occupiedXPositions.
	
	self 
		should: [juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (0@0) to: (0@4) AndChangeTurnTo: playerO .]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'MMT 11/1/2020 19:17:05'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 19:18:37' prior: 50890311!
test16PlayerCanMoveFromAnywhereToAdjacentPosition
	
	| juego occupiedOPositions occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	occupiedOPositions := juego occupiedOPositions.
	
	
	juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (0@0) to: (-1@0) AndChangeTurnTo: playerO .
	juego the: playerO movesFrom: occupiedOPositions ThePieceIn: (1@1) to: (1@0) AndChangeTurnTo: playerX .
	
	self assert: (juego isOccupied: (1@0)).
	self assert: (juego isPlaying: juego playerX)
	
	! !

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'MMT 11/1/2020 19:18:45'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 19:20:15' prior: 50890327!
test17PlayerXWinsVertically
	
	| juego occupiedXPositions playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (0@-1).
	
	playerX := juego playerX.
	occupiedXPositions := juego occupiedXPositions. 
	
	self assert: (juego has: playerX WonWith: occupiedXPositions).
	self assert: (juego isOver)
	
	! !

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'MMT 11/1/2020 19:20:20'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 19:21:19' prior: 50890338!
test18PlayerOWinsVertically
	
	| juego occupiedOPositions playerO |
	
	juego := TerniLapilli new.
	
	juego putXAt: (1@-1).
	juego putOAt: (0@0).
	juego putXAt: (1@1).
	juego putOAt: (0@1).
	juego putXAt: (-1@-1).
	juego putOAt: (0@-1).
	
	playerO := juego playerO.
	occupiedOPositions := juego occupiedOPositions. 
	
	self assert: (juego has: playerO WonWith: occupiedOPositions).
	self assert: (juego isOver)
	
	! !

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'MMT 11/1/2020 19:21:23'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 19:21:56' prior: 50890350!
test19PlayerXWinsHorizontally
	
	| juego occupiedXPositions playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (1@0).
	juego putOAt: (1@1).
	juego putXAt: (-1@0).
	
	playerX := juego playerX.
	occupiedXPositions := juego occupiedXPositions. 
	
	self assert: (juego has: playerX WonWith: occupiedXPositions ).
	self assert: (juego isOver)
	
	! !

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'MMT 11/1/2020 19:22:01'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 19:22:40' prior: 50890361!
test20PlayerWinsDiagonally
	
	| juego occupiedXPositions playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (-1@-1).
	juego putOAt: (1@0).
	juego putXAt: (1@1).
	
	playerX := juego playerX.
	occupiedXPositions := juego occupiedXPositions. 
	
	self assert: (juego has: playerX WonWith: occupiedXPositions).
	self assert: (juego isOver)
	
	! !

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonally stamp: 'MMT 11/1/2020 19:22:45'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 19:23:39' prior: 50890372!
test21PlayerCanWinWithAMovement
	
	| juego occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@0).
	juego putXAt: (0@1).
	juego putOAt: (-1@1).
	juego putXAt: (1@-1).
	juego putOAt: (-1@-1).
	
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	
	
	juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (1@-1) to: (0@-1) AndChangeTurnTo: playerO .
	
	
	self assert: (juego hasPlayerXWon).
	self assert: (juego isOver)
	
	! !

!testRun: #TerniLapilliTest #test21PlayerCanWinWithAMovement stamp: 'MMT 11/1/2020 19:23:45'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 19:25:00' prior: 50890385!
test22PlayerCanNotPlaceAPieceIfGameIsOver
	
	| juego occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (0@-1).
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	
	
	
	self assert: (juego has: playerX WonWith: occupiedXPositions).
	self assert: (juego isOver).
	self
		should: [ juego putOAt: (1@0) ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: TerniLapilli canNotPlayIfGameIsOver = anError messageText ]
	
	! !

!testRun: #TerniLapilliTest #test22PlayerCanNotPlaceAPieceIfGameIsOver stamp: 'MMT 11/1/2020 19:25:08'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 19:26:19' prior: 50890401!
test23PlayerCanNotMoveAPieceIfGameIsOver
	
	| juego occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (-1@1).
	juego putOAt: (0@0).
	juego putXAt: (1@1).
	juego putOAt: (0@1).
	juego putXAt: (1@-1).
	juego putOAt: (0@-1).
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	
	
	juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (-1@1) to: (-1@0) AndChangeTurnTo: playerO .
	
	self
		should: [juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (-1@1) to: (-1@0) AndChangeTurnTo: playerO. ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: TerniLapilli canNotPlayIfGameIsOver = anError messageText ]
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 19:26:31' prior: 50892172!
test23PlayerCanNotMoveAPieceIfGameIsOver
	
	| juego occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (-1@1).
	juego putOAt: (0@0).
	juego putXAt: (1@1).
	juego putOAt: (0@1).
	juego putXAt: (1@-1).
	juego putOAt: (0@-1).
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	
	
	self
		should: [juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (-1@1) to: (-1@0) AndChangeTurnTo: playerO. ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: TerniLapilli canNotPlayIfGameIsOver = anError messageText ]
	
	! !

!testRun: #TerniLapilliTest #test23PlayerCanNotMoveAPieceIfGameIsOver stamp: 'MMT 11/1/2020 19:26:33'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 19:26:52' prior: 50890264!
test13PlayerCanNotMoveAPieceToAnOccupiedPosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	
	self 
		should: [ juego playerXMovesFrom: (0@0) to: (0@-1). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 19:27:10' prior: 50892224!
test13PlayerCanNotMoveAPieceToAnOccupiedPosition
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	
	self 
		should: [ juego playerXMovesFrom: (0@0) to: (0@-1). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 19:27:30' prior: 50892241!
test13PlayerCanNotMoveAPieceToAnOccupiedPosition
	
	| juego occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	
	
	juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (0@0) to: (0@-1) AndChangeTurnTo: playerO .
	
	
	self 
		should: [ juego playerXMovesFrom: (0@0) to: (0@-1). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 19:27:40' prior: 50892258!
test13PlayerCanNotMoveAPieceToAnOccupiedPosition
	
	| juego occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	
	
	juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (0@0) to: (0@-1) AndChangeTurnTo: playerO .
	
	
	self 
		should: [juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (0@0) to: (0@-1) AndChangeTurnTo: playerO .]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'MMT 11/1/2020 19:27:43'!
ERROR!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'MMT 11/1/2020 19:27:43'!
ERROR!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 19:27:50' prior: 50892283!
test13PlayerCanNotMoveAPieceToAnOccupiedPosition
	
	| juego occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	
	
	
	self 
		should: [juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (0@0) to: (0@-1) AndChangeTurnTo: playerO .]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'MMT 11/1/2020 19:27:51'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 19:28:06' prior: 50890248!
test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard
	
	| juego |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).


	self 
		should: [ juego playerXMovesFrom: (-1@0) to: (-1@-1). ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 19:28:35' prior: 50890280!
test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner
	
	| juego occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	
	
	juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (0@1) to: (-1@0) AndChangeTurnTo: playerO .
	
	self 
		should: [juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (0@1) to: (-1@0) AndChangeTurnTo: playerO.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 19:28:51' prior: 50892361!
test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner
	
	| juego occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	
	
	self 
		should: [juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (0@1) to: (-1@0) AndChangeTurnTo: playerO.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 19:29:52' prior: 50892344!
test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard
	
	| juego occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).

	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	
	
	juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (-1@0) to: (-1@-1) AndChangeTurnTo: playerO .

	self 
		should: [juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (-1@0) to: (-1@-1) AndChangeTurnTo: playerO.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 19:30:09' prior: 50892411!
test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard
	
	| juego occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).

	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	
	
	self 
		should: [juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (-1@0) to: (-1@-1) AndChangeTurnTo: playerO.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'MMT 11/1/2020 19:30:12'!
PASSED!

!methodRemoval: TerniLapilli #playerXMovesFrom:to: stamp: 'MMT 11/1/2020 19:30:55'!
playerXMovesFrom: aPosition to: anotherPosition
	
	playerX movesThePieceIn: aPosition to: anotherPosition.!

!methodRemoval: TerniLapilli #playerOMovesFrom:to: stamp: 'MMT 11/1/2020 19:30:58'!
playerOMovesFrom: aPosition to: anotherPosition
	
	playerO movesThePieceIn: aPosition to: anotherPosition.!

----SNAPSHOT----(1 November 2020 19:31:01) CuisUniversity-4384.image priorSource: 17870287!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'MMT 11/1/2020 19:31:05'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'MMT 11/1/2020 19:31:05'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'MMT 11/1/2020 19:31:06'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'MMT 11/1/2020 19:31:06'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'MMT 11/1/2020 19:31:06'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'MMT 11/1/2020 19:31:06'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'MMT 11/1/2020 19:31:06'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'MMT 11/1/2020 19:31:06'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'MMT 11/1/2020 19:31:06'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'MMT 11/1/2020 19:31:06'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'MMT 11/1/2020 19:31:06'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'MMT 11/1/2020 19:31:06'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'MMT 11/1/2020 19:31:06'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'MMT 11/1/2020 19:31:06'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'MMT 11/1/2020 19:31:06'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'MMT 11/1/2020 19:31:06'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'MMT 11/1/2020 19:31:06'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'MMT 11/1/2020 19:31:06'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'MMT 11/1/2020 19:31:06'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'MMT 11/1/2020 19:31:06'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonally stamp: 'MMT 11/1/2020 19:31:06'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerCanWinWithAMovement stamp: 'MMT 11/1/2020 19:31:06'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerCanNotPlaceAPieceIfGameIsOver stamp: 'MMT 11/1/2020 19:31:06'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerCanNotMoveAPieceIfGameIsOver stamp: 'MMT 11/1/2020 19:31:06'!
PASSED!

!methodRemoval: TerniLapilli #playerOmovesThePieceIn:to: stamp: 'MMT 11/1/2020 19:31:35'!
playerOmovesThePieceIn: aPosition to: anotherPosition

	(self isOver) ifTrue: [ self error: TerniLapilli canNotPlayIfGameIsOver ].
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedOPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedOPositions add: anotherPosition.
	
	turn := playerX.
	
	self seeIfPlayerOhasAWinningCondition .!

!methodRemoval: TerniLapilli #playerXmovesThePieceIn:to: stamp: 'MMT 11/1/2020 19:31:40'!
playerXmovesThePieceIn: aPosition to: anotherPosition
	
	( self isOver ) ifTrue: [ self error: TerniLapilli canNotPlayIfGameIsOver ].
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	occupiedXPositions remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	occupiedXPositions add: anotherPosition.
	
	turn := playerO.
	
	self seeIfPlayerXhasAWinningCondition .!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'MMT 11/1/2020 19:31:44'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'MMT 11/1/2020 19:31:44'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'MMT 11/1/2020 19:31:44'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'MMT 11/1/2020 19:31:44'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'MMT 11/1/2020 19:31:44'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'MMT 11/1/2020 19:31:44'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'MMT 11/1/2020 19:31:44'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'MMT 11/1/2020 19:31:44'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'MMT 11/1/2020 19:31:44'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'MMT 11/1/2020 19:31:44'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'MMT 11/1/2020 19:31:44'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'MMT 11/1/2020 19:31:44'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'MMT 11/1/2020 19:31:44'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'MMT 11/1/2020 19:31:44'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'MMT 11/1/2020 19:31:44'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'MMT 11/1/2020 19:31:44'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'MMT 11/1/2020 19:31:44'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'MMT 11/1/2020 19:31:44'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'MMT 11/1/2020 19:31:44'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'MMT 11/1/2020 19:31:44'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonally stamp: 'MMT 11/1/2020 19:31:44'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerCanWinWithAMovement stamp: 'MMT 11/1/2020 19:31:44'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerCanNotPlaceAPieceIfGameIsOver stamp: 'MMT 11/1/2020 19:31:45'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerCanNotMoveAPieceIfGameIsOver stamp: 'MMT 11/1/2020 19:31:45'!
PASSED!
!TerniLapilli methodsFor: 'private' stamp: 'MMT 11/1/2020 19:34:51'!
the: aPlayer PlacesAPieceIn: aPosition AndAddItTo: hisOccupiedPieces AndChangeTurnTo: anotherPlayer
	
	(self isOver) ifTrue: [ self error: TerniLapilli canNotPlayIfGameIsOver ].
	
	self thePlayer: aPlayer canPlaceAPieceIn: aPosition.
	
	hisOccupiedPieces add: aPosition.
	
	turn := anotherPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: hisOccupiedPieces .! !

!methodRemoval: TerniLapilli #playerOPlacesAPieceIn: stamp: 'MMT 11/1/2020 19:35:01'!
playerOPlacesAPieceIn: aPosition 
	
	(self isOver) ifTrue: [ self error: TerniLapilli canNotPlayIfGameIsOver ].
	
	self thePlayer: playerO canPlaceAPieceIn: aPosition.
	
	occupiedOPositions add: aPosition.
	
	turn := playerX.
	
	self seeIfPlayerOhasAWinningCondition .!

!methodRemoval: TerniLapilli #playerXPlacesAPieceIn: stamp: 'MMT 11/1/2020 19:35:05'!
playerXPlacesAPieceIn: aPosition 

	(self isOver) ifTrue: [ self error: TerniLapilli canNotPlayIfGameIsOver ].
	
	self thePlayer: playerX canPlaceAPieceIn: aPosition.
	
	occupiedXPositions add: aPosition.
	
	turn := playerO.
	
	self seeIfPlayerXhasAWinningCondition .!
!TerniLapilli methodsFor: 'operations' stamp: 'MMT 11/1/2020 19:35:47' prior: 50890538!
putOAt: aPosition
	
	playerO placesAPieceIn: aPosition! !
!TerniLapilli methodsFor: 'operations' stamp: 'MMT 11/1/2020 19:36:47' prior: 50892711!
putOAt: aPosition
	
	
	self the: playerO PlacesAPieceIn: aPosition AndAddItTo: occupiedOPositions AndChangeTurnTo: playerX. 
	! !
!TerniLapilli methodsFor: 'operations' stamp: 'MMT 11/1/2020 19:37:09' prior: 50890543!
putXAt: aPosition
	
	self the: playerX PlacesAPieceIn: aPosition AndAddItTo: occupiedXPositions AndChangeTurnTo: playerO.! !

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'MMT 11/1/2020 19:37:20'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'MMT 11/1/2020 19:37:20'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'MMT 11/1/2020 19:37:20'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'MMT 11/1/2020 19:37:20'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'MMT 11/1/2020 19:37:20'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'MMT 11/1/2020 19:37:20'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'MMT 11/1/2020 19:37:20'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'MMT 11/1/2020 19:37:20'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'MMT 11/1/2020 19:37:20'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'MMT 11/1/2020 19:37:20'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'MMT 11/1/2020 19:37:20'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'MMT 11/1/2020 19:37:21'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'MMT 11/1/2020 19:37:21'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'MMT 11/1/2020 19:37:21'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'MMT 11/1/2020 19:37:21'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'MMT 11/1/2020 19:37:21'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'MMT 11/1/2020 19:37:21'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'MMT 11/1/2020 19:37:21'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'MMT 11/1/2020 19:37:21'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'MMT 11/1/2020 19:37:21'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonally stamp: 'MMT 11/1/2020 19:37:21'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerCanWinWithAMovement stamp: 'MMT 11/1/2020 19:37:21'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerCanNotPlaceAPieceIfGameIsOver stamp: 'MMT 11/1/2020 19:37:21'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerCanNotMoveAPieceIfGameIsOver stamp: 'MMT 11/1/2020 19:37:21'!
PASSED!

!methodRemoval: TerniLapilli #hasPlayerOWon stamp: 'MMT 11/1/2020 19:38:21'!
hasPlayerOWon
	
	^ self has: playerO WonWith: occupiedOPositions. 
	
	"| anOccupiedPosition |
	
	(occupiedOPositions size < 3) ifTrue: [ ^false ].
	
	anOccupiedPosition := occupiedOPositions detect: [ :aPosition | true].
	
	^ (occupiedOPositions allSatisfy: [ :aPosition | (anOccupiedPosition x = aPosition x)])  or:
		(occupiedOPositions allSatisfy: [ :aPosition | (anOccupiedPosition y = aPosition y)]) or:
		(self winsDiagonally: occupiedOPositions)"!

!methodRemoval: TerniLapilli #hasPlayerXWon stamp: 'MMT 11/1/2020 19:38:28'!
hasPlayerXWon
	
	| anOccupiedPosition |
	
	(occupiedXPositions size < 3) ifTrue: [ ^false ].
	
	anOccupiedPosition := occupiedXPositions detect: [ :aPosition | true].
	
	^ (occupiedXPositions allSatisfy: [ :aPosition | (anOccupiedPosition x = aPosition x)])  or:
		(occupiedXPositions allSatisfy: [ :aPosition | (anOccupiedPosition y = aPosition y)]) or:
		(self winsDiagonally: occupiedXPositions).!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/1/2020 19:39:00' prior: 50892123!
test21PlayerCanWinWithAMovement
	
	| juego occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@0).
	juego putXAt: (0@1).
	juego putOAt: (-1@1).
	juego putXAt: (1@-1).
	juego putOAt: (-1@-1).
	
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	
	
	juego the: playerX movesFrom: occupiedXPositions ThePieceIn: (1@-1) to: (0@-1) AndChangeTurnTo: playerO .
	
	
	self assert: (juego has: playerX WonWith: occupiedXPositions ).
	self assert: (juego isOver)
	
	! !

!methodRemoval: TerniLapilli #seeIfPlayerXhasAWinningCondition stamp: 'MMT 11/1/2020 19:39:26'!
seeIfPlayerXhasAWinningCondition
	
	isOver := self hasPlayerXWon.!

!methodRemoval: TerniLapilli #seeIfPlayerOhasAWinningCondition stamp: 'MMT 11/1/2020 19:39:28'!
seeIfPlayerOhasAWinningCondition
	
	isOver := self has: playerO WonWith: occupiedOPositions.!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'MMT 11/1/2020 19:39:32'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'MMT 11/1/2020 19:39:32'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'MMT 11/1/2020 19:39:32'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'MMT 11/1/2020 19:39:32'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'MMT 11/1/2020 19:39:32'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'MMT 11/1/2020 19:39:32'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'MMT 11/1/2020 19:39:32'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'MMT 11/1/2020 19:39:32'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'MMT 11/1/2020 19:39:32'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'MMT 11/1/2020 19:39:32'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'MMT 11/1/2020 19:39:32'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'MMT 11/1/2020 19:39:32'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'MMT 11/1/2020 19:39:32'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'MMT 11/1/2020 19:39:32'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'MMT 11/1/2020 19:39:32'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'MMT 11/1/2020 19:39:32'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'MMT 11/1/2020 19:39:32'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'MMT 11/1/2020 19:39:32'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'MMT 11/1/2020 19:39:32'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'MMT 11/1/2020 19:39:32'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonally stamp: 'MMT 11/1/2020 19:39:32'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerCanWinWithAMovement stamp: 'MMT 11/1/2020 19:39:32'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerCanNotPlaceAPieceIfGameIsOver stamp: 'MMT 11/1/2020 19:39:32'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerCanNotMoveAPieceIfGameIsOver stamp: 'MMT 11/1/2020 19:39:32'!
PASSED!
!TerniLapilliState methodsFor: 'nil' stamp: 'MMT 11/1/2020 19:42:16'!
d! !

!methodRemoval: TerniLapilliState #d stamp: 'MMT 11/1/2020 19:42:27'!
d!
!TerniLapilli methodsFor: 'operations' stamp: 'MMT 11/1/2020 19:43:34' prior: 50891910!
the: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition AndChangeTurnTo: anotherPlayer
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	hisPieces remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	hisPieces add: anotherPosition.
	
	turn := anotherPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: hisPieces .! !
!TerniLapilli methodsFor: 'operations' stamp: 'MMT 11/1/2020 19:44:27'!
playerTriesToPlayWhenGameIsOver

	self error: TerniLapilli canNotPlayIfGameIsOver.! !
!TerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 19:46:43'!
movePiece

	^ self subclassResponsibility.! !
!TerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 19:46:56'!
placePiece

	^ self subclassResponsibility.! !
!FinishedTerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 19:47:45' overrides: 50892984!
movePiece

	^ terniLapilli playerTriesToPlayWhenGameIsOver.! !
!FinishedTerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 19:47:53' overrides: 50892989!
placePiece

	^ terniLapilli playerTriesToPlayWhenGameIsOver.! !
!NotFinishedTerniLapilliState methodsFor: 'no messages' stamp: 'MMT 11/1/2020 19:52:42'!
move: aPlayer PieceFrom: hisPieces In: aPosition To: anotherPosition AndChangeTurnTo: anotherPlayer

	

	^ terniLapilli the: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition AndChangeTurnTo:anotherPlayer. ! !
!FinishedTerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 19:53:12'!
move: aPlayer PieceFrom: hisPieces In: aPosition To: anotherPosition AndChangeTurnTo: anotherPlayer

	^ terniLapilli playerTriesToPlayWhenGameIsOver.! !

!methodRemoval: FinishedTerniLapilliState #movePiece stamp: 'MMT 11/1/2020 19:53:15'!
movePiece

	^ terniLapilli playerTriesToPlayWhenGameIsOver.!

!methodRemoval: FinishedTerniLapilliState #move stamp: 'MMT 11/1/2020 19:53:19'!
move!
!FinishedTerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 19:53:45'!
place: aPlayer PieceFrom: hisPieces To: aPosition AndChangeTurnTo: anotherPlayer

	^ terniLapilli playerTriesToPlayWhenGameIsOver.! !

!methodRemoval: FinishedTerniLapilliState #placePiece stamp: 'MMT 11/1/2020 19:53:51'!
placePiece

	^ terniLapilli playerTriesToPlayWhenGameIsOver.!
!NotFinishedTerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 19:54:36'!
place: aPlayer PieceFrom: hisPieces To: aPosition AndChangeTurnTo: anotherPlayer

	^ terniLapilli the: aPlayer PlacesAPieceIn: aPosition  AndAddItTo: hisPieces AndChangeTurnTo: anotherPlayer. ! !

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'MMT 11/1/2020 19:54:54'!
PASSED!
!TerniLapilli methodsFor: 'private' stamp: 'MMT 11/1/2020 19:55:26' prior: 50892674!
the: aPlayer PlacesAPieceIn: aPosition AndAddItTo: hisOccupiedPieces AndChangeTurnTo: anotherPlayer
	
	
	self thePlayer: aPlayer canPlaceAPieceIn: aPosition.
	
	hisOccupiedPieces add: aPosition.
	
	turn := anotherPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: hisOccupiedPieces .! !

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'MMT 11/1/2020 19:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'MMT 11/1/2020 19:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'MMT 11/1/2020 19:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'MMT 11/1/2020 19:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'MMT 11/1/2020 19:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'MMT 11/1/2020 19:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'MMT 11/1/2020 19:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'MMT 11/1/2020 19:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'MMT 11/1/2020 19:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'MMT 11/1/2020 19:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'MMT 11/1/2020 19:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'MMT 11/1/2020 19:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'MMT 11/1/2020 19:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'MMT 11/1/2020 19:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'MMT 11/1/2020 19:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'MMT 11/1/2020 19:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'MMT 11/1/2020 19:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'MMT 11/1/2020 19:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'MMT 11/1/2020 19:55:32'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'MMT 11/1/2020 19:55:32'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonally stamp: 'MMT 11/1/2020 19:55:32'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerCanWinWithAMovement stamp: 'MMT 11/1/2020 19:55:32'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerCanNotPlaceAPieceIfGameIsOver stamp: 'MMT 11/1/2020 19:55:32'!
FAILURE!

!testRun: #TerniLapilliTest #test23PlayerCanNotMoveAPieceIfGameIsOver stamp: 'MMT 11/1/2020 19:55:32'!
FAILURE!
!TerniLapilli methodsFor: 'private' stamp: 'MMT 11/1/2020 19:56:22'!
state 

	^TerniLapilliState stateFor: self! !
!TerniLapilli methodsFor: 'initialization' stamp: 'MMT 11/1/2020 19:57:29'!
initializeWith: aTerniLapilliState

	"state := aDoorState"
! !
!TerniLapilli methodsFor: 'operations' stamp: 'MMT 11/1/2020 20:01:15'!
he: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition AndChangeTurnTo: anotherPlayer
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	hisPieces remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	hisPieces add: anotherPosition.
	
	turn := anotherPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: hisPieces .! !
!TerniLapilli methodsFor: 'operations' stamp: 'MMT 11/1/2020 20:01:33' prior: 50892962!
the: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition AndChangeTurnTo: anotherPlayer
	
	^ self state! !
!TerniLapilli methodsFor: 'operations' stamp: 'MMT 11/1/2020 20:02:09' prior: 50893177!
the: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition AndChangeTurnTo: anotherPlayer
	
	^ self state the: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition AndChangeTurnTo: anotherPlayer.! !
!TerniLapilli methodsFor: 'operations' stamp: 'MMT 11/1/2020 20:03:13'!
move: aPlayer PieceFrom: hisPieces In: aPosition to: anotherPosition AndChangeTurnTo: anotherPlayer
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	hisPieces remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	hisPieces add: anotherPosition.
	
	turn := anotherPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: hisPieces .! !

!methodRemoval: TerniLapilli #move:PieceFrom:In:to:AndChangeTurnTo: stamp: 'MMT 11/1/2020 20:03:32'!
move: aPlayer PieceFrom: hisPieces In: aPosition to: anotherPosition AndChangeTurnTo: anotherPlayer
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	hisPieces remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	hisPieces add: anotherPosition.
	
	turn := anotherPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: hisPieces .!
!TerniLapilli methodsFor: 'operations' stamp: 'MMT 11/1/2020 20:06:44'!
beforeWinningthe: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition AndChangeTurnTo: anotherPlayer
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	hisPieces remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	hisPieces add: anotherPosition.
	
	turn := anotherPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: hisPieces .! !

!methodRemoval: TerniLapilli #he:movesFrom:ThePieceIn:to:AndChangeTurnTo: stamp: 'MMT 11/1/2020 20:06:49'!
he: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition AndChangeTurnTo: anotherPlayer
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	hisPieces remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	hisPieces add: anotherPosition.
	
	turn := anotherPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: hisPieces .!
!NotFinishedTerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:07:41' prior: 50893006!
move: aPlayer PieceFrom: hisPieces In: aPosition To: anotherPosition AndChangeTurnTo: anotherPlayer

	

	^ terniLapilli beforeWinningthe: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition  
	                  AndChangeTurnTo:anotherPlayer. ! !
!TerniLapilli methodsFor: 'operations' stamp: 'MMT 11/1/2020 20:08:03'!
beforeWinning: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition AndChangeTurnTo: anotherPlayer
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	hisPieces remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	hisPieces add: anotherPosition.
	
	turn := anotherPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: hisPieces .! !
!NotFinishedTerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:08:03' prior: 50893262!
move: aPlayer PieceFrom: hisPieces In: aPosition To: anotherPosition AndChangeTurnTo: anotherPlayer

	

	^ terniLapilli beforeWinning: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition  
	                  AndChangeTurnTo:anotherPlayer. ! !

!methodRemoval: TerniLapilli #beforeWinningthe:movesFrom:ThePieceIn:to:AndChangeTurnTo: stamp: 'MMT 11/1/2020 20:08:03'!
beforeWinningthe: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition AndChangeTurnTo: anotherPlayer
	
	(self isValidMoveFrom: aPosition to: anotherPosition) ifFalse: [ self error: TerniLapilli canNotDoAnInvalidMove ].
	
	hisPieces remove: aPosition ifAbsent: [self error: TerniLapilli canNotDoAnInvalidMove].
	
	hisPieces add: anotherPosition.
	
	turn := anotherPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: hisPieces .!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'MMT 11/1/2020 20:08:27'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'MMT 11/1/2020 20:08:27'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'MMT 11/1/2020 20:08:28'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'MMT 11/1/2020 20:08:28'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'MMT 11/1/2020 20:08:28'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'MMT 11/1/2020 20:08:28'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'MMT 11/1/2020 20:08:28'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'MMT 11/1/2020 20:08:28'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'MMT 11/1/2020 20:08:28'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'MMT 11/1/2020 20:08:28'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'MMT 11/1/2020 20:08:28'!
FAILURE!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'MMT 11/1/2020 20:08:28'!
FAILURE!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'MMT 11/1/2020 20:08:28'!
FAILURE!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'MMT 11/1/2020 20:08:28'!
FAILURE!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'MMT 11/1/2020 20:08:28'!
FAILURE!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'MMT 11/1/2020 20:08:28'!
ERROR!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'MMT 11/1/2020 20:08:28'!
ERROR!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'MMT 11/1/2020 20:08:28'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'MMT 11/1/2020 20:08:28'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'MMT 11/1/2020 20:08:28'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonally stamp: 'MMT 11/1/2020 20:08:28'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerCanWinWithAMovement stamp: 'MMT 11/1/2020 20:08:28'!
ERROR!

!testRun: #TerniLapilliTest #test22PlayerCanNotPlaceAPieceIfGameIsOver stamp: 'MMT 11/1/2020 20:08:28'!
FAILURE!

!testRun: #TerniLapilliTest #test23PlayerCanNotMoveAPieceIfGameIsOver stamp: 'MMT 11/1/2020 20:08:28'!
FAILURE!
!TerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:10:48'!
move: aPlayer PieceFrom: hisPieces In: aPosition To: anotherPosition AndChangeTurnTo: anotherPlayer

	^ self subclassResponsibility.! !

!methodRemoval: TerniLapilliState #movePiece stamp: 'MMT 11/1/2020 20:10:51'!
movePiece

	^ self subclassResponsibility.!
!TerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:11:03'!
place: aPlayer PieceFrom: hisPieces To: aPosition AndChangeTurnTo: anotherPlayer

	^ self subclassResponsibility.! !

!methodRemoval: TerniLapilliState #placePiece stamp: 'MMT 11/1/2020 20:11:06'!
placePiece

	^ self subclassResponsibility.!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'MMT 11/1/2020 20:11:11'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'MMT 11/1/2020 20:11:11'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'MMT 11/1/2020 20:11:11'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'MMT 11/1/2020 20:11:11'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'MMT 11/1/2020 20:11:11'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'MMT 11/1/2020 20:11:11'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'MMT 11/1/2020 20:11:11'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'MMT 11/1/2020 20:11:11'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'MMT 11/1/2020 20:11:11'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'MMT 11/1/2020 20:11:11'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'MMT 11/1/2020 20:11:11'!
FAILURE!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'MMT 11/1/2020 20:11:11'!
FAILURE!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'MMT 11/1/2020 20:11:11'!
FAILURE!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'MMT 11/1/2020 20:11:11'!
FAILURE!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'MMT 11/1/2020 20:11:11'!
FAILURE!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'MMT 11/1/2020 20:11:11'!
ERROR!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'MMT 11/1/2020 20:11:11'!
ERROR!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'MMT 11/1/2020 20:11:11'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'MMT 11/1/2020 20:11:11'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'MMT 11/1/2020 20:11:11'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonally stamp: 'MMT 11/1/2020 20:11:12'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerCanWinWithAMovement stamp: 'MMT 11/1/2020 20:11:12'!
ERROR!

!testRun: #TerniLapilliTest #test22PlayerCanNotPlaceAPieceIfGameIsOver stamp: 'MMT 11/1/2020 20:11:12'!
FAILURE!

!testRun: #TerniLapilliTest #test23PlayerCanNotMoveAPieceIfGameIsOver stamp: 'MMT 11/1/2020 20:11:12'!
FAILURE!
!TerniLapilli methodsFor: 'operations' stamp: 'MMT 11/1/2020 20:13:26'!
move: aPlayer sFrom: hisPieces ThePieceIn: aPosition to: anotherPosition AndChangeTurnTo: anotherPlayer
	
	^ self state the: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition AndChangeTurnTo: anotherPlayer.! !

!methodRemoval: TerniLapilli #move:sFrom:ThePieceIn:to:AndChangeTurnTo: stamp: 'MMT 11/1/2020 20:13:51'!
move: aPlayer sFrom: hisPieces ThePieceIn: aPosition to: anotherPosition AndChangeTurnTo: anotherPlayer
	
	^ self state the: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition AndChangeTurnTo: anotherPlayer.!
!TerniLapilli methodsFor: 'operations' stamp: 'MMT 11/1/2020 20:14:09'!
move: aPlayer PieceFrom: hisPieces In: aPosition To: anotherPosition AndChangeTurnTo: anotherPlayer
	
	
	^ self state move: aPlayer PieceFrom: hisPieces In: aPosition To: anotherPosition AndChangeTurnTo: anotherPlayer.! !
!TerniLapilli methodsFor: 'operations' stamp: 'MMT 11/1/2020 20:15:52' prior: 50893184!
the: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition AndChangeTurnTo: anotherPlayer
	
	^ self state the: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition AndChangeTurnTo: anotherPlayer.
	
	"move: aPlayer PieceFrom: hisPieces In: aPosition To: anotherPosition AndChangeTurnTo: anotherPlayer"! !

!methodRemoval: TerniLapilli #move:PieceFrom:In:To:AndChangeTurnTo: stamp: 'MMT 11/1/2020 20:16:00'!
move: aPlayer PieceFrom: hisPieces In: aPosition To: anotherPosition AndChangeTurnTo: anotherPlayer
	
	
	^ self state move: aPlayer PieceFrom: hisPieces In: aPosition To: anotherPosition AndChangeTurnTo: anotherPlayer.!
!TerniLapilli methodsFor: 'operations' stamp: 'MMT 11/1/2020 20:16:31'!
move: aPlayer PieceFrom: hisPieces In: aPosition To: anotherPosition AndChangeTurnTo: anotherPlayer
	
	^ self state the: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition AndChangeTurnTo: anotherPlayer.
	
	"move: aPlayer PieceFrom: hisPieces In: aPosition To: anotherPosition AndChangeTurnTo: anotherPlayer"! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:16:31' prior: 50891930!
test10PlayerCanNotMoveMoreThanOnePosition
	
	| juego playerX occupiedXPositions playerO |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (-1@-1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	playerX := juego playerX.
	playerO := juego playerO.
	occupiedXPositions := juego occupiedXPositions.
	 
	
	self 
		should: [juego move: playerX PieceFrom: occupiedXPositions In: (0@-1) To: (0@1) AndChangeTurnTo: playerO. ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:16:31' prior: 50893534!
the: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition AndChangeTurnTo: anotherPlayer
	
	^ self state move: aPlayer PieceFrom: hisPieces In: aPosition To: anotherPosition AndChangeTurnTo: anotherPlayer.
	
	"move: aPlayer PieceFrom: hisPieces In: aPosition To: anotherPosition AndChangeTurnTo: anotherPlayer"! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:16:31' prior: 50892016!
test16PlayerCanMoveFromAnywhereToAdjacentPosition
	
	| juego occupiedOPositions occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	occupiedOPositions := juego occupiedOPositions.
	
	
	juego move: playerX PieceFrom: occupiedXPositions In: (0@0) To: (-1@0) AndChangeTurnTo: playerO .
	juego move: playerO PieceFrom: occupiedOPositions In: (1@1) To: (1@0) AndChangeTurnTo: playerX .
	
	self assert: (juego isOccupied: (1@0)).
	self assert: (juego isPlaying: juego playerX)
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:16:31' prior: 50892317!
test13PlayerCanNotMoveAPieceToAnOccupiedPosition
	
	| juego occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	
	
	
	self 
		should: [juego move: playerX PieceFrom: occupiedXPositions In: (0@0) To: (0@-1) AndChangeTurnTo: playerO .]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:16:31' prior: 50892437!
test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard
	
	| juego occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).

	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	
	
	self 
		should: [juego move: playerX PieceFrom: occupiedXPositions In: (-1@0) To: (-1@-1) AndChangeTurnTo: playerO.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:16:31' prior: 50892843!
test21PlayerCanWinWithAMovement
	
	| juego occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@0).
	juego putXAt: (0@1).
	juego putOAt: (-1@1).
	juego putXAt: (1@-1).
	juego putOAt: (-1@-1).
	
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	
	
	juego move: playerX PieceFrom: occupiedXPositions In: (1@-1) To: (0@-1) AndChangeTurnTo: playerO .
	
	
	self assert: (juego has: playerX WonWith: occupiedXPositions ).
	self assert: (juego isOver)
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:16:31' prior: 50891828!
test15PlayerCanMoveFromCenterToAnyEmptyPosition
	
	| juego occupiedXPositions playerX playerO|
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	
	
	juego move: playerX PieceFrom: occupiedXPositions In: (0@0) To: (-1@0) AndChangeTurnTo: playerO .
	
	
	
	self assert: (juego isOccupied: (-1@0)).
	self assert: (juego isPlaying: juego playerO)
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:16:31' prior: 50892388!
test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner
	
	| juego occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	
	
	self 
		should: [juego move: playerX PieceFrom: occupiedXPositions In: (0@1) To: (-1@0) AndChangeTurnTo: playerO.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:16:31' prior: 50892198!
test23PlayerCanNotMoveAPieceIfGameIsOver
	
	| juego occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (-1@1).
	juego putOAt: (0@0).
	juego putXAt: (1@1).
	juego putOAt: (0@1).
	juego putXAt: (1@-1).
	juego putOAt: (0@-1).
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	
	
	self
		should: [juego move: playerX PieceFrom: occupiedXPositions In: (-1@1) To: (-1@0) AndChangeTurnTo: playerO. ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: TerniLapilli canNotPlayIfGameIsOver = anError messageText ]
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:16:31' prior: 50891990!
test11PlayerCanNotMoveAPieceOutsideTheBoard
	
	| juego playerX occupiedXPositions playerO |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@1).
	juego putXAt: (0@-1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (1@0).
	
	playerX := juego playerX.
	playerO  := juego playerO.
	occupiedXPositions := juego occupiedXPositions.
	
	self 
		should: [juego move: playerX PieceFrom: occupiedXPositions In: (0@0) To: (0@4) AndChangeTurnTo: playerO .]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:16:32' prior: 50893557!
move: aPlayer PieceFrom: hisPieces In: aPosition To: anotherPosition AndChangeTurnTo: anotherPlayer
	
	^ self state move: aPlayer PieceFrom: hisPieces In: aPosition To: anotherPosition AndChangeTurnTo: anotherPlayer.
	
	"move: aPlayer PieceFrom: hisPieces In: aPosition To: anotherPosition AndChangeTurnTo: anotherPlayer"! !

!methodRemoval: TerniLapilli #the:movesFrom:ThePieceIn:to:AndChangeTurnTo: stamp: 'MMT 11/1/2020 20:16:32'!
the: aPlayer movesFrom: hisPieces ThePieceIn: aPosition to: anotherPosition AndChangeTurnTo: anotherPlayer
	
	^ self state move: aPlayer PieceFrom: hisPieces In: aPosition To: anotherPosition AndChangeTurnTo: anotherPlayer.
	
	"move: aPlayer PieceFrom: hisPieces In: aPosition To: anotherPosition AndChangeTurnTo: anotherPlayer"!
!TerniLapilli methodsFor: 'operations' stamp: 'MMT 11/1/2020 20:16:43' prior: 50893794!
move: aPlayer PieceFrom: hisPieces In: aPosition To: anotherPosition AndChangeTurnTo: anotherPlayer
	
	^ self state move: aPlayer PieceFrom: hisPieces In: aPosition To: anotherPosition AndChangeTurnTo: anotherPlayer.
	
	! !

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'MMT 11/1/2020 20:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'MMT 11/1/2020 20:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'MMT 11/1/2020 20:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'MMT 11/1/2020 20:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'MMT 11/1/2020 20:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'MMT 11/1/2020 20:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'MMT 11/1/2020 20:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'MMT 11/1/2020 20:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'MMT 11/1/2020 20:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'MMT 11/1/2020 20:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'MMT 11/1/2020 20:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'MMT 11/1/2020 20:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'MMT 11/1/2020 20:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'MMT 11/1/2020 20:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'MMT 11/1/2020 20:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'MMT 11/1/2020 20:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'MMT 11/1/2020 20:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'MMT 11/1/2020 20:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'MMT 11/1/2020 20:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'MMT 11/1/2020 20:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonally stamp: 'MMT 11/1/2020 20:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerCanWinWithAMovement stamp: 'MMT 11/1/2020 20:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerCanNotPlaceAPieceIfGameIsOver stamp: 'MMT 11/1/2020 20:16:51'!
FAILURE!

!testRun: #TerniLapilliTest #test23PlayerCanNotMoveAPieceIfGameIsOver stamp: 'MMT 11/1/2020 20:16:51'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerCanNotPlaceAPieceIfGameIsOver stamp: 'MMT 11/1/2020 20:16:51'!
FAILURE!
!TerniLapilli methodsFor: 'private' stamp: 'MMT 11/1/2020 20:17:46' prior: 50893058!
the: aPlayer PlacesAPieceIn: aPosition AndAddItTo: hisOccupiedPieces AndChangeTurnTo: anotherPlayer
	
	"place: aPlayer PieceFrom: hisPieces To: aPosition AndChangeTurnTo: anotherPlayer"
	
	
	self thePlayer: aPlayer canPlaceAPieceIn: aPosition.
	
	hisOccupiedPieces add: aPosition.
	
	turn := anotherPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: hisOccupiedPieces .! !
!TerniLapilli methodsFor: 'private' stamp: 'MMT 11/1/2020 20:18:29'!
place: aPlayer PieceFrom: aPosition To: hisOccupiedPieces AndChangeTurnTo: anotherPlayer
	
	"place: aPlayer PieceFrom: hisPieces To: aPosition AndChangeTurnTo: anotherPlayer"
	
	
	self thePlayer: aPlayer canPlaceAPieceIn: aPosition.
	
	hisOccupiedPieces add: aPosition.
	
	turn := anotherPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: hisOccupiedPieces .! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:18:30' prior: 50892716!
putOAt: aPosition
	
	
	self place: playerO PieceFrom: aPosition To: occupiedOPositions AndChangeTurnTo: playerX. 
	! !
!NotFinishedTerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:18:30' prior: 50893045 overrides: 50893413!
place: aPlayer PieceFrom: hisPieces To: aPosition AndChangeTurnTo: anotherPlayer

	^ terniLapilli place: aPlayer PieceFrom: aPosition  To: hisPieces AndChangeTurnTo: anotherPlayer. ! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:18:30' prior: 50892723!
putXAt: aPosition
	
	self place: playerX PieceFrom: aPosition To: occupiedXPositions AndChangeTurnTo: playerO.! !

!methodRemoval: TerniLapilli #the:PlacesAPieceIn:AndAddItTo:AndChangeTurnTo: stamp: 'MMT 11/1/2020 20:18:30'!
the: aPlayer PlacesAPieceIn: aPosition AndAddItTo: hisOccupiedPieces AndChangeTurnTo: anotherPlayer
	
	"place: aPlayer PieceFrom: hisPieces To: aPosition AndChangeTurnTo: anotherPlayer"
	
	
	self thePlayer: aPlayer canPlaceAPieceIn: aPosition.
	
	hisOccupiedPieces add: aPosition.
	
	turn := anotherPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: hisOccupiedPieces .!
!TerniLapilli methodsFor: 'private' stamp: 'MMT 11/1/2020 20:18:40' prior: 50893930!
place: aPlayer PieceFrom: aPosition To: hisOccupiedPieces AndChangeTurnTo: anotherPlayer
	
	
	self thePlayer: aPlayer canPlaceAPieceIn: aPosition.
	
	hisOccupiedPieces add: aPosition.
	
	turn := anotherPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: hisOccupiedPieces .! !
!NotFinishedTerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:22:23'!
place: aPlayer PieceTo: aPosition AndPutItIn: hisPieces AndChangeTurnTo: anotherPlayer

	^ terniLapilli beforeWinning: aPlayer PlacesPieceTo: aPosition  AndPutItIn: hisPieces AndChangeTurnTo: anotherPlayer. ! !

!methodRemoval: NotFinishedTerniLapilliState #place:PieceTo:AndPutItIn:AndChangeTurnTo: stamp: 'MMT 11/1/2020 20:23:03'!
place: aPlayer PieceTo: aPosition AndPutItIn: hisPieces AndChangeTurnTo: anotherPlayer

	^ terniLapilli beforeWinning: aPlayer PlacesPieceTo: aPosition  AndPutItIn: hisPieces AndChangeTurnTo: anotherPlayer. !
!TerniLapilli methodsFor: 'private' stamp: 'MMT 11/1/2020 20:24:04'!
place: aPlayer PieceTo: aPosition AndPutItIn: hisOccupiedPieces AndChangeTurnTo: anotherPlayer
	
	
	self thePlayer: aPlayer canPlaceAPieceIn: aPosition.
	
	hisOccupiedPieces add: aPosition.
	
	turn := anotherPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: hisOccupiedPieces .! !
!FinishedTerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:24:04'!
place: aPlayer PieceTo: hisPieces AndPutItIn: aPosition AndChangeTurnTo: anotherPlayer

	^ terniLapilli playerTriesToPlayWhenGameIsOver.! !
!NotFinishedTerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:24:04'!
place: aPlayer PieceTo: hisPieces AndPutItIn: aPosition AndChangeTurnTo: anotherPlayer

	^ terniLapilli place: aPlayer PieceFrom: aPosition  To: hisPieces AndChangeTurnTo: anotherPlayer. ! !
!TerniLapilliState methodsFor: 'operations' stamp: 'MMT 11/1/2020 20:24:04'!
place: aPlayer PieceTo: hisPieces AndPutItIn: aPosition AndChangeTurnTo: anotherPlayer

	^ self subclassResponsibility.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:24:04' prior: 50893945!
putOAt: aPosition
	
	
	self place: playerO PieceTo: aPosition AndPutItIn: occupiedOPositions AndChangeTurnTo: playerX. 
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:24:04' prior: 50893962!
putXAt: aPosition
	
	self place: playerX PieceTo: aPosition AndPutItIn: occupiedXPositions AndChangeTurnTo: playerO.! !
!NotFinishedTerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:24:04' prior: 50893953 overrides: 50893413!
place: aPlayer PieceFrom: hisPieces To: aPosition AndChangeTurnTo: anotherPlayer

	^ terniLapilli place: aPlayer PieceTo: aPosition  AndPutItIn: hisPieces AndChangeTurnTo: anotherPlayer. ! !
!NotFinishedTerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:24:04' prior: 50894036 overrides: 50894045!
place: aPlayer PieceTo: hisPieces AndPutItIn: aPosition AndChangeTurnTo: anotherPlayer

	^ terniLapilli place: aPlayer PieceTo: aPosition  AndPutItIn: hisPieces AndChangeTurnTo: anotherPlayer. ! !

!methodRemoval: TerniLapilli #place:PieceFrom:To:AndChangeTurnTo: stamp: 'MMT 11/1/2020 20:24:04'!
place: aPlayer PieceFrom: aPosition To: hisOccupiedPieces AndChangeTurnTo: anotherPlayer
	
	
	self thePlayer: aPlayer canPlaceAPieceIn: aPosition.
	
	hisOccupiedPieces add: aPosition.
	
	turn := anotherPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: hisOccupiedPieces .!

!methodRemoval: FinishedTerniLapilliState #place:PieceFrom:To:AndChangeTurnTo: stamp: 'MMT 11/1/2020 20:24:05'!
place: aPlayer PieceFrom: hisPieces To: aPosition AndChangeTurnTo: anotherPlayer

	^ terniLapilli playerTriesToPlayWhenGameIsOver.!

!methodRemoval: NotFinishedTerniLapilliState #place:PieceFrom:To:AndChangeTurnTo: stamp: 'MMT 11/1/2020 20:24:05'!
place: aPlayer PieceFrom: hisPieces To: aPosition AndChangeTurnTo: anotherPlayer

	^ terniLapilli place: aPlayer PieceTo: aPosition  AndPutItIn: hisPieces AndChangeTurnTo: anotherPlayer. !

!methodRemoval: TerniLapilliState #place:PieceFrom:To:AndChangeTurnTo: stamp: 'MMT 11/1/2020 20:24:05'!
place: aPlayer PieceFrom: hisPieces To: aPosition AndChangeTurnTo: anotherPlayer

	^ self subclassResponsibility.!
!NotFinishedTerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:25:01' prior: 50894078 overrides: 50894045!
place: aPlayer PieceTo: hisPieces AndPutItIn: aPosition AndChangeTurnTo: anotherPlayer

	^ terniLapilli place: aPlayer PieceTo: aPosition  AndPutItIn: hisPieces AndChangeTurnTo: anotherPlayer. ! !
!TerniLapilliState methodsFor: 'operations' stamp: 'MMT 11/1/2020 20:25:38'!
beforeWinning: aPlayer PlacesPieceTo: hisPieces AndPutItIn: aPosition AndChangeTurnTo: anotherPlayer

	^ self subclassResponsibility.! !
!TerniLapilli methodsFor: 'private' stamp: 'MMT 11/1/2020 20:25:38'!
beforeWinning: aPlayer PlacesPieceTo: aPosition AndPutItIn: hisOccupiedPieces AndChangeTurnTo: anotherPlayer
	
	
	self thePlayer: aPlayer canPlaceAPieceIn: aPosition.
	
	hisOccupiedPieces add: aPosition.
	
	turn := anotherPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: hisOccupiedPieces .! !
!FinishedTerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:25:38' overrides: 50894134!
beforeWinning: aPlayer PlacesPieceTo: hisPieces AndPutItIn: aPosition AndChangeTurnTo: anotherPlayer

	^ terniLapilli playerTriesToPlayWhenGameIsOver.! !
!NotFinishedTerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:25:38' overrides: 50894134!
beforeWinning: aPlayer PlacesPieceTo: hisPieces AndPutItIn: aPosition AndChangeTurnTo: anotherPlayer

	^ terniLapilli place: aPlayer PieceTo: aPosition  AndPutItIn: hisPieces AndChangeTurnTo: anotherPlayer. ! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:25:38' prior: 50894052!
putOAt: aPosition
	
	
	self beforeWinning: playerO PlacesPieceTo: aPosition AndPutItIn: occupiedOPositions AndChangeTurnTo: playerX. 
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:25:38' prior: 50894059!
putXAt: aPosition
	
	self beforeWinning: playerX PlacesPieceTo: aPosition AndPutItIn: occupiedXPositions AndChangeTurnTo: playerO.! !
!NotFinishedTerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:25:38' prior: 50894125 overrides: 50894045!
place: aPlayer PieceTo: hisPieces AndPutItIn: aPosition AndChangeTurnTo: anotherPlayer

	^ terniLapilli beforeWinning: aPlayer PlacesPieceTo: aPosition  AndPutItIn: hisPieces AndChangeTurnTo: anotherPlayer. ! !
!NotFinishedTerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:25:38' prior: 50894163 overrides: 50894134!
beforeWinning: aPlayer PlacesPieceTo: hisPieces AndPutItIn: aPosition AndChangeTurnTo: anotherPlayer

	^ terniLapilli beforeWinning: aPlayer PlacesPieceTo: aPosition  AndPutItIn: hisPieces AndChangeTurnTo: anotherPlayer. ! !

!methodRemoval: TerniLapilliState #place:PieceTo:AndPutItIn:AndChangeTurnTo: stamp: 'MMT 11/1/2020 20:25:38'!
place: aPlayer PieceTo: hisPieces AndPutItIn: aPosition AndChangeTurnTo: anotherPlayer

	^ self subclassResponsibility.!

!methodRemoval: TerniLapilli #place:PieceTo:AndPutItIn:AndChangeTurnTo: stamp: 'MMT 11/1/2020 20:25:38'!
place: aPlayer PieceTo: aPosition AndPutItIn: hisOccupiedPieces AndChangeTurnTo: anotherPlayer
	
	
	self thePlayer: aPlayer canPlaceAPieceIn: aPosition.
	
	hisOccupiedPieces add: aPosition.
	
	turn := anotherPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: hisOccupiedPieces .!

!methodRemoval: FinishedTerniLapilliState #place:PieceTo:AndPutItIn:AndChangeTurnTo: stamp: 'MMT 11/1/2020 20:25:39'!
place: aPlayer PieceTo: hisPieces AndPutItIn: aPosition AndChangeTurnTo: anotherPlayer

	^ terniLapilli playerTriesToPlayWhenGameIsOver.!

!methodRemoval: NotFinishedTerniLapilliState #place:PieceTo:AndPutItIn:AndChangeTurnTo: stamp: 'MMT 11/1/2020 20:25:39'!
place: aPlayer PieceTo: hisPieces AndPutItIn: aPosition AndChangeTurnTo: anotherPlayer

	^ terniLapilli beforeWinning: aPlayer PlacesPieceTo: aPosition  AndPutItIn: hisPieces AndChangeTurnTo: anotherPlayer. !
!TerniLapilli methodsFor: 'private' stamp: 'MMT 11/1/2020 20:26:41'!
place: aPlayer PieceTo: aPosition AndPutItIn: hisOccupiedPieces AndChangeTurnTo: anotherPlayer
	
	
	self thePlayer: aPlayer canPlaceAPieceIn: aPosition.
	
	hisOccupiedPieces add: aPosition.
	
	turn := anotherPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: hisOccupiedPieces .! !
!TerniLapilliState methodsFor: 'operations' stamp: 'MMT 11/1/2020 20:26:42'!
place: aPlayer PieceTo: hisPieces AndPutItIn: aPosition AndChangeTurnTo: anotherPlayer

	^ self subclassResponsibility.! !
!FinishedTerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:26:42' overrides: 50894260!
place: aPlayer PieceTo: hisPieces AndPutItIn: aPosition AndChangeTurnTo: anotherPlayer

	^ terniLapilli playerTriesToPlayWhenGameIsOver.! !
!NotFinishedTerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:26:42' overrides: 50894260!
place: aPlayer PieceTo: hisPieces AndPutItIn: aPosition AndChangeTurnTo: anotherPlayer

	^ terniLapilli beforeWinning: aPlayer PlacesPieceTo: aPosition  AndPutItIn: hisPieces AndChangeTurnTo: anotherPlayer. ! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:26:42' prior: 50894173!
putOAt: aPosition
	
	
	self place: playerO PieceTo: aPosition AndPutItIn: occupiedOPositions AndChangeTurnTo: playerX. 
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:26:42' prior: 50894181!
putXAt: aPosition
	
	self place: playerX PieceTo: aPosition AndPutItIn: occupiedXPositions AndChangeTurnTo: playerO.! !
!NotFinishedTerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:26:42' prior: 50894201 overrides: 50894134!
beforeWinning: aPlayer PlacesPieceTo: hisPieces AndPutItIn: aPosition AndChangeTurnTo: anotherPlayer

	^ terniLapilli place: aPlayer PieceTo: aPosition  AndPutItIn: hisPieces AndChangeTurnTo: anotherPlayer. ! !
!NotFinishedTerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:26:42' prior: 50894277 overrides: 50894260!
place: aPlayer PieceTo: hisPieces AndPutItIn: aPosition AndChangeTurnTo: anotherPlayer

	^ terniLapilli place: aPlayer PieceTo: aPosition  AndPutItIn: hisPieces AndChangeTurnTo: anotherPlayer. ! !

!methodRemoval: TerniLapilli #beforeWinning:PlacesPieceTo:AndPutItIn:AndChangeTurnTo: stamp: 'MMT 11/1/2020 20:26:42'!
beforeWinning: aPlayer PlacesPieceTo: aPosition AndPutItIn: hisOccupiedPieces AndChangeTurnTo: anotherPlayer
	
	
	self thePlayer: aPlayer canPlaceAPieceIn: aPosition.
	
	hisOccupiedPieces add: aPosition.
	
	turn := anotherPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: hisOccupiedPieces .!

!methodRemoval: TerniLapilliState #beforeWinning:PlacesPieceTo:AndPutItIn:AndChangeTurnTo: stamp: 'MMT 11/1/2020 20:26:42'!
beforeWinning: aPlayer PlacesPieceTo: hisPieces AndPutItIn: aPosition AndChangeTurnTo: anotherPlayer

	^ self subclassResponsibility.!

!methodRemoval: FinishedTerniLapilliState #beforeWinning:PlacesPieceTo:AndPutItIn:AndChangeTurnTo: stamp: 'MMT 11/1/2020 20:26:42'!
beforeWinning: aPlayer PlacesPieceTo: hisPieces AndPutItIn: aPosition AndChangeTurnTo: anotherPlayer

	^ terniLapilli playerTriesToPlayWhenGameIsOver.!

!methodRemoval: NotFinishedTerniLapilliState #beforeWinning:PlacesPieceTo:AndPutItIn:AndChangeTurnTo: stamp: 'MMT 11/1/2020 20:26:42'!
beforeWinning: aPlayer PlacesPieceTo: hisPieces AndPutItIn: aPosition AndChangeTurnTo: anotherPlayer

	^ terniLapilli place: aPlayer PieceTo: aPosition  AndPutItIn: hisPieces AndChangeTurnTo: anotherPlayer. !
!FinishedTerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:27:00' prior: 50894268 overrides: 50894260!
place: aPlayer PieceTo: aPosition AndPutItIn: hisPieces AndChangeTurnTo: anotherPlayer

	^ terniLapilli playerTriesToPlayWhenGameIsOver.! !
!NotFinishedTerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:27:33' prior: 50894313 overrides: 50894260!
place: aPlayer PieceTo: hisPieces AndPutItIn: aPosition AndChangeTurnTo: anotherPlayer

	^ terniLapilli beforeWinning: aPlayer PlacesPieceTo: aPosition  AndPutItIn: hisPieces AndChangeTurnTo: anotherPlayer. ! !
!TerniLapilli methodsFor: 'private' stamp: 'MMT 11/1/2020 20:28:25'!
beforeWinning: aPlayer PlacesPieceTo: aPosition AndPutItIn: hisOccupiedPieces AndChangeTurnTo: anotherPlayer
	
	
	self thePlayer: aPlayer canPlaceAPieceIn: aPosition.
	
	hisOccupiedPieces add: aPosition.
	
	turn := anotherPlayer.
	
	self seeIfCertainPlayerWon: aPlayer with: hisOccupiedPieces .! !
!TerniLapilli methodsFor: 'private' stamp: 'MMT 11/1/2020 20:28:49' prior: 50894248!
place: aPlayer PieceTo: aPosition AndPutItIn: hisOccupiedPieces AndChangeTurnTo: anotherPlayer
	
	
	^ self state place: aPlayer PieceTo: aPosition AndPutItIn: hisOccupiedPieces AndChangeTurnTo: anotherPlayer.! !

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'MMT 11/1/2020 20:28:55'!
ERROR!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'MMT 11/1/2020 20:29:08'!
ERROR!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'MMT 11/1/2020 20:29:11'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'MMT 11/1/2020 20:29:13'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'MMT 11/1/2020 20:29:15'!
ERROR!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'MMT 11/1/2020 20:29:15'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'MMT 11/1/2020 20:29:18'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'MMT 11/1/2020 20:29:18'!
ERROR!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'MMT 11/1/2020 20:29:22'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'MMT 11/1/2020 20:29:25'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'MMT 11/1/2020 20:29:27'!
ERROR!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'MMT 11/1/2020 20:29:27'!
ERROR!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'MMT 11/1/2020 20:29:33'!
ERROR!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'MMT 11/1/2020 20:29:33'!
ERROR!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'MMT 11/1/2020 20:29:38'!
ERROR!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'MMT 11/1/2020 20:29:38'!
ERROR!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'MMT 11/1/2020 20:29:43'!
ERROR!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'MMT 11/1/2020 20:29:43'!
ERROR!
!NotFinishedTerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MMT 11/1/2020 20:30:24' prior: 50894374 overrides: 50894260!
place: aPlayer PieceTo: aPosition AndPutItIn: hisPieces AndChangeTurnTo: anotherPlayer

	^ terniLapilli beforeWinning: aPlayer PlacesPieceTo: aPosition  AndPutItIn: hisPieces AndChangeTurnTo: anotherPlayer. ! !

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'MMT 11/1/2020 20:30:33'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'MMT 11/1/2020 20:30:33'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'MMT 11/1/2020 20:30:33'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'MMT 11/1/2020 20:30:33'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'MMT 11/1/2020 20:30:33'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'MMT 11/1/2020 20:30:33'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'MMT 11/1/2020 20:30:33'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'MMT 11/1/2020 20:30:33'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'MMT 11/1/2020 20:30:33'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'MMT 11/1/2020 20:30:33'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'MMT 11/1/2020 20:30:33'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'MMT 11/1/2020 20:30:33'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'MMT 11/1/2020 20:30:33'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'MMT 11/1/2020 20:30:33'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'MMT 11/1/2020 20:30:33'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'MMT 11/1/2020 20:30:33'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'MMT 11/1/2020 20:30:33'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'MMT 11/1/2020 20:30:33'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'MMT 11/1/2020 20:30:33'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'MMT 11/1/2020 20:30:33'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonally stamp: 'MMT 11/1/2020 20:30:33'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerCanWinWithAMovement stamp: 'MMT 11/1/2020 20:30:33'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerCanNotPlaceAPieceIfGameIsOver stamp: 'MMT 11/1/2020 20:30:33'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerCanNotMoveAPieceIfGameIsOver stamp: 'MMT 11/1/2020 20:30:33'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'MMT 11/1/2020 20:31:36'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'MMT 11/1/2020 20:31:38'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'MMT 11/1/2020 20:31:38'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'MMT 11/1/2020 20:31:38'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'MMT 11/1/2020 20:31:38'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'MMT 11/1/2020 20:31:38'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'MMT 11/1/2020 20:31:38'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'MMT 11/1/2020 20:31:38'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'MMT 11/1/2020 20:31:38'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'MMT 11/1/2020 20:31:38'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'MMT 11/1/2020 20:31:38'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'MMT 11/1/2020 20:31:38'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'MMT 11/1/2020 20:31:38'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'MMT 11/1/2020 20:31:38'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'MMT 11/1/2020 20:31:38'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'MMT 11/1/2020 20:31:38'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'MMT 11/1/2020 20:31:38'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'MMT 11/1/2020 20:31:38'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerXWinsVertically stamp: 'MMT 11/1/2020 20:31:38'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerOWinsVertically stamp: 'MMT 11/1/2020 20:31:39'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'MMT 11/1/2020 20:31:39'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerWinsDiagonally stamp: 'MMT 11/1/2020 20:31:39'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerCanWinWithAMovement stamp: 'MMT 11/1/2020 20:31:39'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerCanNotPlaceAPieceIfGameIsOver stamp: 'MMT 11/1/2020 20:31:39'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerCanNotMoveAPieceIfGameIsOver stamp: 'MMT 11/1/2020 20:31:39'!
PASSED!

----SNAPSHOT----(1 November 2020 20:33:11) CuisUniversity-4384.image priorSource: 17946382!

----QUIT----(1 November 2020 20:36:15) CuisUniversity-4384.image priorSource: 18015634!

----STARTUP---- (2 November 2020 01:01:06) as W:\cuisParcial\CuisUniversity-4384.image!

!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/2/2020 01:03:39'!
test15PlayerCanNotMovePieceFromOtherPlayer
	
	| juego occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	
	
	self 
		should: [juego move: playerX PieceFrom: occupiedXPositions In: (-1@-1) To: (-1@0) AndChangeTurnTo: playerO.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !

!testRun: #TerniLapilliTest #test15PlayerCanNotMovePieceFromOtherPlayer stamp: 'MMT 11/2/2020 01:03:42'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/2/2020 01:04:08'!
test16PlayerCanNotMovePieceFromOtherPlayer
	
	| juego occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	
	
	self 
		should: [juego move: playerX PieceFrom: occupiedXPositions In: (-1@-1) To: (-1@0) AndChangeTurnTo: playerO.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	! !

!methodRemoval: TerniLapilliTest #test15PlayerCanNotMovePieceFromOtherPlayer stamp: 'MMT 11/2/2020 01:04:09'!
test15PlayerCanNotMovePieceFromOtherPlayer
	
	| juego occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	
	
	self 
		should: [juego move: playerX PieceFrom: occupiedXPositions In: (-1@-1) To: (-1@0) AndChangeTurnTo: playerO.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: (TerniLapilli canNotDoAnInvalidMove = anError messageText)
			]
	
	!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/2/2020 01:04:21'!
test17PlayerCanMoveFromAnywhereToAdjacentPosition
	
	| juego occupiedOPositions occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	occupiedOPositions := juego occupiedOPositions.
	
	
	juego move: playerX PieceFrom: occupiedXPositions In: (0@0) To: (-1@0) AndChangeTurnTo: playerO .
	juego move: playerO PieceFrom: occupiedOPositions In: (1@1) To: (1@0) AndChangeTurnTo: playerX .
	
	self assert: (juego isOccupied: (1@0)).
	self assert: (juego isPlaying: juego playerX)
	
	! !

!methodRemoval: TerniLapilliTest #test16PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'MMT 11/2/2020 01:04:21'!
test16PlayerCanMoveFromAnywhereToAdjacentPosition
	
	| juego occupiedOPositions occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (0@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (-1@1).
	juego putOAt: (-1@-1).
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	occupiedOPositions := juego occupiedOPositions.
	
	
	juego move: playerX PieceFrom: occupiedXPositions In: (0@0) To: (-1@0) AndChangeTurnTo: playerO .
	juego move: playerO PieceFrom: occupiedOPositions In: (1@1) To: (1@0) AndChangeTurnTo: playerX .
	
	self assert: (juego isOccupied: (1@0)).
	self assert: (juego isPlaying: juego playerX)
	
	!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/2/2020 01:04:30'!
test18PlayerXWinsVertically
	
	| juego occupiedXPositions playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (0@-1).
	
	playerX := juego playerX.
	occupiedXPositions := juego occupiedXPositions. 
	
	self assert: (juego has: playerX WonWith: occupiedXPositions).
	self assert: (juego isOver)
	
	! !

!methodRemoval: TerniLapilliTest #test17PlayerXWinsVertically stamp: 'MMT 11/2/2020 01:04:30'!
test17PlayerXWinsVertically
	
	| juego occupiedXPositions playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (0@-1).
	
	playerX := juego playerX.
	occupiedXPositions := juego occupiedXPositions. 
	
	self assert: (juego has: playerX WonWith: occupiedXPositions).
	self assert: (juego isOver)
	
	!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/2/2020 01:04:39'!
test19PlayerOWinsVertically
	
	| juego occupiedOPositions playerO |
	
	juego := TerniLapilli new.
	
	juego putXAt: (1@-1).
	juego putOAt: (0@0).
	juego putXAt: (1@1).
	juego putOAt: (0@1).
	juego putXAt: (-1@-1).
	juego putOAt: (0@-1).
	
	playerO := juego playerO.
	occupiedOPositions := juego occupiedOPositions. 
	
	self assert: (juego has: playerO WonWith: occupiedOPositions).
	self assert: (juego isOver)
	
	! !

!methodRemoval: TerniLapilliTest #test18PlayerOWinsVertically stamp: 'MMT 11/2/2020 01:04:39'!
test18PlayerOWinsVertically
	
	| juego occupiedOPositions playerO |
	
	juego := TerniLapilli new.
	
	juego putXAt: (1@-1).
	juego putOAt: (0@0).
	juego putXAt: (1@1).
	juego putOAt: (0@1).
	juego putXAt: (-1@-1).
	juego putOAt: (0@-1).
	
	playerO := juego playerO.
	occupiedOPositions := juego occupiedOPositions. 
	
	self assert: (juego has: playerO WonWith: occupiedOPositions).
	self assert: (juego isOver)
	
	!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/2/2020 01:04:48'!
test20PlayerXWinsHorizontally
	
	| juego occupiedXPositions playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (1@0).
	juego putOAt: (1@1).
	juego putXAt: (-1@0).
	
	playerX := juego playerX.
	occupiedXPositions := juego occupiedXPositions. 
	
	self assert: (juego has: playerX WonWith: occupiedXPositions ).
	self assert: (juego isOver)
	
	! !

!methodRemoval: TerniLapilliTest #test19PlayerXWinsHorizontally stamp: 'MMT 11/2/2020 01:04:48'!
test19PlayerXWinsHorizontally
	
	| juego occupiedXPositions playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (1@0).
	juego putOAt: (1@1).
	juego putXAt: (-1@0).
	
	playerX := juego playerX.
	occupiedXPositions := juego occupiedXPositions. 
	
	self assert: (juego has: playerX WonWith: occupiedXPositions ).
	self assert: (juego isOver)
	
	!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/2/2020 01:04:59'!
test21PlayerWinsDiagonally
	
	| juego occupiedXPositions playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (-1@-1).
	juego putOAt: (1@0).
	juego putXAt: (1@1).
	
	playerX := juego playerX.
	occupiedXPositions := juego occupiedXPositions. 
	
	self assert: (juego has: playerX WonWith: occupiedXPositions).
	self assert: (juego isOver)
	
	! !

!methodRemoval: TerniLapilliTest #test20PlayerWinsDiagonally stamp: 'MMT 11/2/2020 01:04:59'!
test20PlayerWinsDiagonally
	
	| juego occupiedXPositions playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (-1@-1).
	juego putOAt: (1@0).
	juego putXAt: (1@1).
	
	playerX := juego playerX.
	occupiedXPositions := juego occupiedXPositions. 
	
	self assert: (juego has: playerX WonWith: occupiedXPositions).
	self assert: (juego isOver)
	
	!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/2/2020 01:05:07'!
test22PlayerCanWinWithAMovement
	
	| juego occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@0).
	juego putXAt: (0@1).
	juego putOAt: (-1@1).
	juego putXAt: (1@-1).
	juego putOAt: (-1@-1).
	
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	
	
	juego move: playerX PieceFrom: occupiedXPositions In: (1@-1) To: (0@-1) AndChangeTurnTo: playerO .
	
	
	self assert: (juego has: playerX WonWith: occupiedXPositions ).
	self assert: (juego isOver)
	
	! !

!methodRemoval: TerniLapilliTest #test21PlayerCanWinWithAMovement stamp: 'MMT 11/2/2020 01:05:07'!
test21PlayerCanWinWithAMovement
	
	| juego occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@0).
	juego putXAt: (0@1).
	juego putOAt: (-1@1).
	juego putXAt: (1@-1).
	juego putOAt: (-1@-1).
	
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	
	
	juego move: playerX PieceFrom: occupiedXPositions In: (1@-1) To: (0@-1) AndChangeTurnTo: playerO .
	
	
	self assert: (juego has: playerX WonWith: occupiedXPositions ).
	self assert: (juego isOver)
	
	!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/2/2020 01:05:13'!
test23PlayerCanNotPlaceAPieceIfGameIsOver
	
	| juego occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (0@-1).
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	
	
	
	self assert: (juego has: playerX WonWith: occupiedXPositions).
	self assert: (juego isOver).
	self
		should: [ juego putOAt: (1@0) ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: TerniLapilli canNotPlayIfGameIsOver = anError messageText ]
	
	! !

!methodRemoval: TerniLapilliTest #test22PlayerCanNotPlaceAPieceIfGameIsOver stamp: 'MMT 11/2/2020 01:05:13'!
test22PlayerCanNotPlaceAPieceIfGameIsOver
	
	| juego occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (0@0).
	juego putOAt: (1@-1).
	juego putXAt: (0@1).
	juego putOAt: (1@1).
	juego putXAt: (0@-1).
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	
	
	
	self assert: (juego has: playerX WonWith: occupiedXPositions).
	self assert: (juego isOver).
	self
		should: [ juego putOAt: (1@0) ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: TerniLapilli canNotPlayIfGameIsOver = anError messageText ]
	
	!
!TerniLapilliTest methodsFor: 'testing' stamp: 'MMT 11/2/2020 01:05:20'!
test24PlayerCanNotMoveAPieceIfGameIsOver
	
	| juego occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (-1@1).
	juego putOAt: (0@0).
	juego putXAt: (1@1).
	juego putOAt: (0@1).
	juego putXAt: (1@-1).
	juego putOAt: (0@-1).
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	
	
	self
		should: [juego move: playerX PieceFrom: occupiedXPositions In: (-1@1) To: (-1@0) AndChangeTurnTo: playerO. ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: TerniLapilli canNotPlayIfGameIsOver = anError messageText ]
	
	! !

!methodRemoval: TerniLapilliTest #test23PlayerCanNotMoveAPieceIfGameIsOver stamp: 'MMT 11/2/2020 01:05:20'!
test23PlayerCanNotMoveAPieceIfGameIsOver
	
	| juego occupiedXPositions playerO playerX |
	
	juego := TerniLapilli new.
	
	juego putXAt: (-1@1).
	juego putOAt: (0@0).
	juego putXAt: (1@1).
	juego putOAt: (0@1).
	juego putXAt: (1@-1).
	juego putOAt: (0@-1).
	
	playerX := juego playerX.
	playerO := juego playerO .
	occupiedXPositions := juego occupiedXPositions.
	
	
	self
		should: [juego move: playerX PieceFrom: occupiedXPositions In: (-1@1) To: (-1@0) AndChangeTurnTo: playerO. ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: TerniLapilli canNotPlayIfGameIsOver = anError messageText ]
	
	!

----QUIT----(2 November 2020 01:05:25) CuisUniversity-4384.image priorSource: 18015727!

----STARTUP---- (2 November 2020 05:25:29) as W:\cuisParcial\CuisUniversity-4384.image!


----QUIT----(2 November 2020 05:25:44) CuisUniversity-4384.image priorSource: 18027956!

----STARTUP---- (2 November 2020 14:46:07) as W:\cuisParcial\CuisUniversity-4384.image!


!methodRemoval: TerniLapilli #initializeWith: stamp: 'MMT 11/2/2020 14:50:49'!
initializeWith: aTerniLapilliState

	"state := aDoorState"
!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'MMT 11/2/2020 14:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsWithXTurn stamp: 'MMT 11/2/2020 14:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterXPlaysIsOTurn stamp: 'MMT 11/2/2020 14:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterOPlaysIsXTurn stamp: 'MMT 11/2/2020 14:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test04XCanNotPlayInOTurn stamp: 'MMT 11/2/2020 14:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test05OCanNotPlayInXTurn stamp: 'MMT 11/2/2020 14:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test06XCanNotPlacePieceOutsideTheBoard stamp: 'MMT 11/2/2020 14:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test07OCanNotPlacePieceOutsideTheBoard stamp: 'MMT 11/2/2020 14:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPlacePieceOnOccupiedPosition stamp: 'MMT 11/2/2020 14:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test09EachPlayerCanNotPlaceMoreThanThreePieces stamp: 'MMT 11/2/2020 14:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerCanNotMoveMoreThanOnePosition stamp: 'MMT 11/2/2020 14:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerCanNotMoveAPieceOutsideTheBoard stamp: 'MMT 11/2/2020 14:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerCanNotMoveAPieceThatIsNotOnTheBoard stamp: 'MMT 11/2/2020 14:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerCanNotMoveAPieceToAnOccupiedPosition stamp: 'MMT 11/2/2020 14:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerCanNotDoADiagonalMoveIfItIsNotFromCenterOrCorner stamp: 'MMT 11/2/2020 14:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerCanMoveFromCenterToAnyEmptyPosition stamp: 'MMT 11/2/2020 14:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCanNotMovePieceFromOtherPlayer stamp: 'MMT 11/2/2020 14:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerCanMoveFromAnywhereToAdjacentPosition stamp: 'MMT 11/2/2020 14:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXWinsVertically stamp: 'MMT 11/2/2020 14:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOWinsVertically stamp: 'MMT 11/2/2020 14:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXWinsHorizontally stamp: 'MMT 11/2/2020 14:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerWinsDiagonally stamp: 'MMT 11/2/2020 14:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerCanWinWithAMovement stamp: 'MMT 11/2/2020 14:50:54'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerCanNotPlaceAPieceIfGameIsOver stamp: 'MMT 11/2/2020 14:50:54'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerCanNotMoveAPieceIfGameIsOver stamp: 'MMT 11/2/2020 14:50:54'!
PASSED!

----SNAPSHOT----(2 November 2020 14:56:10) CuisUniversity-4384.image priorSource: 18028135!

----STARTUP---- (2 November 2020 16:33:44) as W:\cuisParcial\CuisUniversity-4384.image!


----QUIT----(2 November 2020 16:33:55) CuisUniversity-4384.image priorSource: 18031160!