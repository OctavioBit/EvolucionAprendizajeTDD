

----STARTUP---- (9 November 2020 16:20:18) as /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/imagenportfolio1/CuisUniversity-4384.image!


----End fileIn of /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/isw1-2c2020-ejercicios/18-Portfolio1/Portfolio-Ejercicio.st----!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioIsZero stamp: 'am 11/9/2020 16:20:52'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneFinancialProductIsBalanceOfThatAccount stamp: 'am 11/9/2020 16:20:52'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioWithMoreThanOneFinancialProductIsSumOfBalances stamp: 'am 11/9/2020 16:20:52'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioHasRegisteredNoTransactions stamp: 'am 11/9/2020 16:20:52'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithOneFinancialProductRegistersATransactionOfThatAccount stamp: 'am 11/9/2020 16:20:52'!
PASSED!

!testRun: #PortfolioTest #test06APortfolioWithMoreThanOneFinancialProductRegistersAllTransactions stamp: 'am 11/9/2020 16:20:52'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasNoTransactions stamp: 'am 11/9/2020 16:20:52'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneFinancialProductHasTheTransactionsOfThatAccount stamp: 'am 11/9/2020 16:20:52'!
PASSED!

!testRun: #PortfolioTest #test09APortfolioWithMoreThanOneFinancialProductHasTheTransactionsOfItsAccounts stamp: 'am 11/9/2020 16:20:52'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioShouldNotAddItself stamp: 'am 11/9/2020 16:20:52'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioShouldNotAddAnOwnerPortfolio stamp: 'am 11/9/2020 16:20:52'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioShouldNotAddFinancialProductIfTheyBothBelongToAnotherPortfolio stamp: 'am 11/9/2020 16:20:52'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioShouldNotAddAnotherPortfolioWhenTheyBothOwnAFinancialProduct stamp: 'am 11/9/2020 16:20:52'!
PASSED!

!testRun: #PortfolioTest #test14APortfolioShouldNotAddAnotherFinancialProductWhenTheyAreOwnedIndirectlyByAnotherPortfolio stamp: 'am 11/9/2020 16:20:52'!
PASSED!

!testRun: #PortfolioTest #test15APortfolioShouldNotAddAPortfolioWhenTheyBothOwnTheSameFinancialProductIndirectly stamp: 'am 11/9/2020 16:20:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'am 11/9/2020 16:20:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'am 11/9/2020 16:20:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'am 11/9/2020 16:20:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'am 11/9/2020 16:20:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'am 11/9/2020 16:20:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'am 11/9/2020 16:20:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'am 11/9/2020 16:20:52'!
PASSED!

----STARTUP---- (10 November 2020 10:23:41) as /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/imagenportfolio2/CuisUniversity-4384.image!


----End fileIn of /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/2020-2c/18-Portfolio1/Portfolio-Solucion.st----!

!classDefinition: #Transfer category: 'Portfolio' stamp: 'AM 11/10/2020 10:27:21'!
Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/10/2020 10:27:16'!
test08
	
	| aReceivingAccount aSendingAccount |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	
	self assert: aSendingAccount 	balance equals: -100.
! !

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 10:27:33'!
ERROR!
!Transfer class methodsFor: 'instance creation' stamp: 'AM 11/10/2020 10:27:40'!
from: aReceptiveAccount to: aReceptiveAccount2 for: aSmallInteger 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFrom: aReceptiveAccount to: aReceptiveAccount2 for: aSmallInteger ! !
!Transfer class methodsFor: 'instance creation' stamp: 'AM 11/10/2020 10:27:54' prior: 50868509!
from: aSendingReceptiveAccount to: aReceivingReceptiveAccount for: aValue 
	
	^self new initializeFrom: aSendingReceptiveAccount to: aReceivingReceptiveAccount for: aValue ! !

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 10:27:56'!
ERROR!

!classDefinition: #Transfer category: 'Portfolio' stamp: 'AM 11/10/2020 10:28:07'!
Object subclass: #Transfer
	instanceVariableNames: 'sendingReceptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #Transfer category: 'Portfolio' stamp: 'AM 11/10/2020 10:28:07'!
Object subclass: #Transfer
	instanceVariableNames: 'sendingReceptiveAccount receivingReceptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #Transfer category: 'Portfolio' stamp: 'AM 11/10/2020 10:28:07'!
Object subclass: #Transfer
	instanceVariableNames: 'sendingReceptiveAccount receivingReceptiveAccount value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!Transfer methodsFor: 'initializing' stamp: 'AM 11/10/2020 10:28:07'!
initializeFrom: aSendingReceptiveAccount to: aReceivingReceptiveAccount for: aValue 
	self shouldBeImplemented.
	sendingReceptiveAccount := aSendingReceptiveAccount.
	receivingReceptiveAccount := aReceivingReceptiveAccount.
	value := aValue.! !

!classDefinition: #OutgoingTransfer category: 'Portfolio' stamp: 'AM 11/10/2020 10:28:21'!
Object subclass: #OutgoingTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #IncomingTransfer category: 'Portfolio' stamp: 'AM 11/10/2020 10:28:26'!
Object subclass: #IncomingTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!Transfer methodsFor: 'initializing' stamp: 'AM 11/10/2020 10:28:16' prior: 50868554!
initializeFrom: aSendingReceptiveAccount to: aReceivingReceptiveAccount for: aValue 

	OutgoingTransfer for: aSendingReceptiveAccount transfer: self.
	IncomingTransfer for: aReceivingReceptiveAccount transfer: self. 
	value := aValue.! !

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 10:28:28'!
ERROR!
!OutgoingTransfer class methodsFor: 'instance creation' stamp: 'AM 11/10/2020 10:28:58'!
for: aReceptiveAccount transfer: aTransfer 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aReceptiveAccount transfer: aTransfer ! !
!OutgoingTransfer class methodsFor: 'instance creation' stamp: 'AM 11/10/2020 10:29:02' prior: 50868592!
for: aReceptiveAccount transfer: aTransfer 
	
	^self new initializeFor: aReceptiveAccount transfer: aTransfer ! !

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 10:29:03'!
ERROR!

!classDefinition: #OutgoingTransfer category: 'Portfolio' stamp: 'AM 11/10/2020 10:29:13'!
Object subclass: #OutgoingTransfer
	instanceVariableNames: 'receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #OutgoingTransfer category: 'Portfolio' stamp: 'AM 11/10/2020 10:29:13'!
Object subclass: #OutgoingTransfer
	instanceVariableNames: 'receptiveAccount transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!OutgoingTransfer methodsFor: 'initializing' stamp: 'AM 11/10/2020 10:29:13'!
initializeFor: aReceptiveAccount transfer: aTransfer 
	self shouldBeImplemented.
	receptiveAccount := aReceptiveAccount.
	transfer := aTransfer.! !
!OutgoingTransfer methodsFor: 'initializing' stamp: 'AM 11/10/2020 10:29:22' prior: 50868626!
initializeFor: aReceptiveAccount transfer: aTransfer 
	
	receptiveAccount := aReceptiveAccount.
	receptiveAccount registerTransfer: self.
	transfer := aTransfer.! !

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 10:29:27'!
ERROR!
!ReceptiveAccount methodsFor: 'registering' stamp: 'AM 11/10/2020 10:29:43'!
registerTransfer: anOutgoingTransfer 
	self shouldBeImplemented.! !

!classDefinition: #ReceptiveAccount category: 'Portfolio' stamp: 'AM 11/10/2020 10:30:14'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!ReceptiveAccount methodsFor: 'registering' stamp: 'AM 11/10/2020 10:30:12' prior: 50868645!
registerTransfer: aTransfer 
	
	transfer add: aTransfer! !

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 10:30:16'!
ERROR!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'AM 11/10/2020 10:30:53' prior: 50868326 overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.
	transfer := OrderedCollection new.! !

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 10:30:57'!
ERROR!
!IncomingTransfer class methodsFor: 'instance creation' stamp: 'AM 11/10/2020 10:31:23'!
for: aReceptiveAccount transfer: aTransfer 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aReceptiveAccount transfer: aTransfer ! !
!IncomingTransfer class methodsFor: 'instance creation' stamp: 'AM 11/10/2020 10:31:33' prior: 50868675!
for: aReceptiveAccount transfer: aTransfer 
	
	^self new initializeFor: aReceptiveAccount transfer: aTransfer ! !

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 10:31:35'!
ERROR!

!classDefinition: #IncomingTransfer category: 'Portfolio' stamp: 'AM 11/10/2020 10:31:49'!
Object subclass: #IncomingTransfer
	instanceVariableNames: 'receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #IncomingTransfer category: 'Portfolio' stamp: 'AM 11/10/2020 10:31:50'!
Object subclass: #IncomingTransfer
	instanceVariableNames: 'receptiveAccount transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!IncomingTransfer methodsFor: 'initializing' stamp: 'AM 11/10/2020 10:31:50'!
initializeFor: aReceptiveAccount transfer: aTransfer 
	self shouldBeImplemented.
	receptiveAccount := aReceptiveAccount.
	transfer := aTransfer.! !
!IncomingTransfer methodsFor: 'initializing' stamp: 'AM 11/10/2020 10:31:53' prior: 50868709!
initializeFor: aReceptiveAccount transfer: aTransfer 
	
	receptiveAccount := aReceptiveAccount.
	receptiveAccount registerTransfer: self.
	transfer := aTransfer.! !

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 10:31:55'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'AM 11/10/2020 10:32:35' prior: 50868349 overrides: 50868154!
balance

	| result |
	result := transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ].
	
	result := result + (transfer inject: 0 into: [:currentBalance :aTransfer |
		aTransfer affectBalance: currentBalance.
		]).
		
	^result! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 10:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 10:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 10:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 10:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 10:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 10:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 10:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 10:32:37'!
ERROR!

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 10:32:37'!
ERROR!
!OutgoingTransfer methodsFor: 'balance' stamp: 'AM 11/10/2020 10:32:48'!
affectBalance: aSmallInteger 
	self shouldBeImplemented.! !
!OutgoingTransfer methodsFor: 'balance' stamp: 'AM 11/10/2020 10:33:02' prior: 50868772!
affectBalance: aBalance
	
	^aBalance + (transfer value) 
	! !

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 10:33:03'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 10:33:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 10:33:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 10:33:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 10:33:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 10:33:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 10:33:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 10:33:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 10:33:16'!
ERROR!

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 10:33:16'!
ERROR!

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 10:33:29'!
ERROR!
!Transfer methodsFor: 'nil' stamp: 'AM 11/10/2020 10:34:16' overrides: 16881508!
value
	^ value! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 10:34:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 10:34:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 10:34:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 10:34:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 10:34:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 10:34:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 10:34:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 10:34:20'!
FAILURE!

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 10:34:20'!
FAILURE!
!OutgoingTransfer methodsFor: 'balance' stamp: 'AM 11/10/2020 10:34:48' prior: 50868777!
affectBalance: aBalance
	
	^aBalance - (transfer value) 
	! !

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 10:34:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 10:34:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 10:34:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 10:34:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 10:34:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 10:34:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 10:34:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 10:34:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 10:34:53'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/10/2020 10:35:06'!
test09
	
	| aReceivingAccount aSendingAccount |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	
	self assert: aReceivingAccount 	balance equals: 100.
! !

!testRun: #ReceptiveAccountTest #test09 stamp: 'AM 11/10/2020 10:35:43'!
ERROR!
!IncomingTransfer methodsFor: 'balance' stamp: 'AM 11/10/2020 10:35:55'!
affectBalance: aSmallInteger 
	self shouldBeImplemented.! !
!IncomingTransfer methodsFor: 'balance' stamp: 'AM 11/10/2020 10:36:08' prior: 50868904!
affectBalance: aBalance 
	
	^aBalance + (transfer value)! !

!testRun: #ReceptiveAccountTest #test09 stamp: 'AM 11/10/2020 10:36:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 10:36:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 10:36:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 10:36:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 10:36:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 10:36:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 10:36:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 10:36:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 10:36:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'AM 11/10/2020 10:36:09'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/10/2020 10:36:17'!
test10
	
	| aReceivingAccount aSendingAccount |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	Transfer from: aReceivingAccount to: aSendingAccount for: 100.
	
	self assert: aSendingAccount 	balance equals: 0.
! !

!testRun: #ReceptiveAccountTest #test10 stamp: 'AM 11/10/2020 10:36:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 10:36:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 10:36:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 10:36:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 10:36:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 10:36:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 10:36:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 10:36:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 10:36:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'AM 11/10/2020 10:36:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'AM 11/10/2020 10:36:19'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/10/2020 10:36:28'!
test11
	
	| aReceivingAccount aSendingAccount transfer |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	transfer := Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	
	self assert: (aReceivingAccount 	hasRegistered: transfer deposit).
	self assert: (aSendingAccount 	hasRegistered: transfer withdrawal).! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'AM 11/10/2020 10:36:34'!
ERROR!
!Transfer methodsFor: 'accessing' stamp: 'AM 11/10/2020 10:36:46'!
deposit
	self shouldBeImplemented.! !

!classDefinition: #Transfer category: 'Portfolio' stamp: 'AM 11/10/2020 10:36:55'!
Object subclass: #Transfer
	instanceVariableNames: 'sendingReceptiveAccount receivingReceptiveAccount value incoming'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!Transfer methodsFor: 'accessing' stamp: 'AM 11/10/2020 10:36:53' prior: 50869015!
deposit
	
	^ incoming! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'AM 11/10/2020 10:36:58'!
FAILURE!

!classDefinition: #Transfer category: 'Portfolio' stamp: 'AM 11/10/2020 10:37:22'!
Object subclass: #Transfer
	instanceVariableNames: 'sendingReceptiveAccount receivingReceptiveAccount value incoming outgoing'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!Transfer methodsFor: 'initializing' stamp: 'AM 11/10/2020 10:37:20' prior: 50868579!
initializeFrom: aSendingReceptiveAccount to: aReceivingReceptiveAccount for: aValue 

	outgoing := OutgoingTransfer for: aSendingReceptiveAccount transfer: self.
	incoming := IncomingTransfer for: aReceivingReceptiveAccount transfer: self. 
	value := aValue.! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'AM 11/10/2020 10:37:23'!
FAILURE!
!ReceptiveAccount methodsFor: 'testing' stamp: 'AM 11/10/2020 10:38:01' prior: 50868356 overrides: 50868146!
hasRegistered: aTransaction

	^ (transactions includes: aTransaction) or: [
		transfer includes: aTransaction ]
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 10:38:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 10:38:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 10:38:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 10:38:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 10:38:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 10:38:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 10:38:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 10:38:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'AM 11/10/2020 10:38:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'AM 11/10/2020 10:38:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'AM 11/10/2020 10:38:04'!
ERROR!

!testRun: #ReceptiveAccountTest #test11 stamp: 'AM 11/10/2020 10:38:04'!
ERROR!
!Transfer methodsFor: 'accesing' stamp: 'AM 11/10/2020 10:38:18'!
withdrawal
	self shouldBeImplemented.! !
!Transfer methodsFor: 'accesing' stamp: 'AM 11/10/2020 10:38:27' prior: 50869103!
withdrawal
	
	^ outgoing! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'AM 11/10/2020 10:38:31'!
PASSED!

!classDefinition: #Pata category: 'Portfolio' stamp: 'AM 11/10/2020 10:38:46'!
Object subclass: #Pata
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #IncomingTransfer category: 'Portfolio' stamp: 'AM 11/10/2020 10:38:46'!
Pata subclass: #IncomingTransfer
	instanceVariableNames: 'receptiveAccount transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

Pata subclass: #Outgoing
	instanceVariableNames: 'receptiveAccount transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #Outgoing category: 'Portfolio' stamp: 'AM 11/10/2020 10:42:11'!
Pata subclass: #Outgoing
	instanceVariableNames: 'receptiveAccount transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!Outgoing methodsFor: 'nil' stamp: 'AM 11/10/2020 10:43:08'!
initializeFor: aReceptiveAccount transfer: aTransfer 
	
	receptiveAccount := aReceptiveAccount.
	receptiveAccount registerTransfer: self.
	transfer := aTransfer.! !
!Outgoing methodsFor: 'as yet unclassified' stamp: 'AM 11/10/2020 10:43:20'!
affectBalance: aBalance
	
	^aBalance - (transfer value) 
	! !
!Outgoing class methodsFor: 'nil' stamp: 'AM 11/10/2020 10:43:29'!
for: aReceptiveAccount transfer: aTransfer 
	
	^self new initializeFor: aReceptiveAccount transfer: aTransfer ! !
!Transfer methodsFor: 'initializing' stamp: 'AM 11/10/2020 10:44:03' prior: 50869043!
initializeFrom: aSendingReceptiveAccount to: aReceivingReceptiveAccount for: aValue 

	outgoing := Outgoing for: aSendingReceptiveAccount transfer: self.
	incoming := IncomingTransfer for: aReceivingReceptiveAccount transfer: self. 
	value := aValue.! !

!classRemoval: #OutgoingTransfer stamp: 'AM 11/10/2020 10:44:12'!
Object subclass: #OutgoingTransfer
	instanceVariableNames: 'receptiveAccount transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRenamed: #Outgoing as: #OutgoingTransfer stamp: 'AM 11/10/2020 10:44:19'!
Smalltalk renameClassNamed: #Outgoing as: #OutgoingTransfer!
!Transfer methodsFor: 'as yet unclassified' stamp: 'AM 11/10/2020 10:44:20' prior: 50869159!
initializeFrom: aSendingReceptiveAccount to: aReceivingReceptiveAccount for: aValue 

	outgoing := OutgoingTransfer for: aSendingReceptiveAccount transfer: self.
	incoming := IncomingTransfer for: aReceivingReceptiveAccount transfer: self. 
	value := aValue.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 10:44:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 10:44:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 10:44:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 10:44:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 10:44:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 10:44:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 10:44:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 10:44:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'AM 11/10/2020 10:44:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'AM 11/10/2020 10:44:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'AM 11/10/2020 10:44:26'!
PASSED!

Pata subclass: #OutgoingTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #OutgoingTransfer category: 'Portfolio' stamp: 'AM 11/10/2020 10:44:51'!
Pata subclass: #OutgoingTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #IncomingTransfer category: 'Portfolio' stamp: 'AM 11/10/2020 10:45:03'!
Pata subclass: #IncomingTransfer
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #Pata category: 'Portfolio' stamp: 'AM 11/10/2020 10:45:04'!
Object subclass: #Pata
	instanceVariableNames: 'receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #IncomingTransfer category: 'Portfolio' stamp: 'AM 11/10/2020 10:45:10'!
Pata subclass: #IncomingTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #Pata category: 'Portfolio' stamp: 'AM 11/10/2020 10:45:11'!
Object subclass: #Pata
	instanceVariableNames: 'receptiveAccount transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!Pata methodsFor: 'initializing' stamp: 'AM 11/10/2020 10:45:29'!
initializeFor: aReceptiveAccount transfer: aTransfer 
	
	receptiveAccount := aReceptiveAccount.
	receptiveAccount registerTransfer: self.
	transfer := aTransfer.! !

!methodRemoval: IncomingTransfer #initializeFor:transfer: stamp: 'AM 11/10/2020 10:45:29'!
initializeFor: aReceptiveAccount transfer: aTransfer 
	
	receptiveAccount := aReceptiveAccount.
	receptiveAccount registerTransfer: self.
	transfer := aTransfer.!

!methodRemoval: OutgoingTransfer #initializeFor:transfer: stamp: 'AM 11/10/2020 10:45:37'!
initializeFor: aReceptiveAccount transfer: aTransfer 
	
	receptiveAccount := aReceptiveAccount.
	receptiveAccount registerTransfer: self.
	transfer := aTransfer.!
!ReceptiveAccount methodsFor: 'balance' stamp: 'AM 11/10/2020 10:46:25' prior: 50868729 overrides: 50868154!
balance

	| result |
	result := transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ].! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'AM 11/10/2020 10:46:31' prior: 50869293 overrides: 50868154!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ].! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'AM 11/10/2020 10:46:38' prior: 50869058 overrides: 50868146!
hasRegistered: aTransaction

	^ transactions includes: aTransaction
! !
!ReceptiveAccount methodsFor: 'registering' stamp: 'AM 11/10/2020 10:46:51' prior: 50868658!
registerTransfer: aTransfer 
	
	transactions add: aTransfer! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 10:46:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 10:46:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 10:46:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 10:46:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 10:46:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 10:46:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 10:46:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 10:46:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'AM 11/10/2020 10:46:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'AM 11/10/2020 10:46:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'AM 11/10/2020 10:46:54'!
PASSED!
!Pata methodsFor: 'initializing' stamp: 'AM 11/10/2020 10:47:17' prior: 50869268!
initializeFor: aReceptiveAccount transfer: aTransfer 
	
	receptiveAccount := aReceptiveAccount.
	receptiveAccount register: self.
	transfer := aTransfer.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 10:47:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 10:47:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 10:47:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 10:47:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 10:47:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 10:47:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 10:47:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 10:47:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'AM 11/10/2020 10:47:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'AM 11/10/2020 10:47:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'AM 11/10/2020 10:47:24'!
PASSED!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'AM 11/10/2020 10:47:37' prior: 50868666 overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.! !

!methodRemoval: ReceptiveAccount #registerTransfer: stamp: 'AM 11/10/2020 10:47:52'!
registerTransfer: aTransfer 
	
	transactions add: aTransfer!
!Pata methodsFor: 'initializing' stamp: 'AM 11/10/2020 10:49:29' prior: 50869357!
initializeFor: aReceptiveAccount transfer: aTransfer 
	
	receptiveAccount := aReceptiveAccount.
	receptiveAccount register: self.
	transfer := aTransfer.
	
	Pata changeSuperclassTo: AccountTransaction ! !
!Pata methodsFor: 'initializing' stamp: 'AM 11/10/2020 10:50:01' prior: 50869413!
initializeFor: aReceptiveAccount transfer: aTransfer 
	
	receptiveAccount := aReceptiveAccount.
	receptiveAccount register: self.
	transfer := aTransfer.! !

AccountTransaction subclass: #PataReal
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #PataReal category: 'Portfolio' stamp: 'AM 11/10/2020 10:51:27'!
AccountTransaction subclass: #PataReal
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

PataReal subclass: #Incoming
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #Incoming category: 'Portfolio' stamp: 'AM 11/10/2020 10:51:48'!
PataReal subclass: #Incoming
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

PataReal subclass: #Outgoing
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #Outgoing category: 'Portfolio' stamp: 'AM 11/10/2020 10:51:54'!
PataReal subclass: #Outgoing
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #PataReal category: 'Portfolio' stamp: 'AM 11/10/2020 10:52:31'!
AccountTransaction subclass: #PataReal
	instanceVariableNames: 'value receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #PataReal category: 'Portfolio' stamp: 'AM 11/10/2020 10:52:33'!
AccountTransaction subclass: #PataReal
	instanceVariableNames: 'value receptiveAccount transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!PataReal methodsFor: 'nil' stamp: 'AM 11/10/2020 10:52:28'!
initializeFor: aReceptiveAccount transfer: aTransfer 
	
	receptiveAccount := aReceptiveAccount.
	receptiveAccount register: self.
	transfer := aTransfer.! !
!Incoming methodsFor: 'nil' stamp: 'AM 11/10/2020 10:52:43' overrides: 50868388!
affectBalance: aBalance 
	
	^aBalance + (transfer value)! !
!Outgoing methodsFor: 'nil' stamp: 'AM 11/10/2020 10:52:51' overrides: 50868388!
affectBalance: aBalance
	
	^aBalance - (transfer value) 
	! !
!PataReal methodsFor: 'as yet unclassified' stamp: 'AM 11/10/2020 10:53:47'!
for: aReceptiveAccount transfer: aTransfer 
	
	^self new initializeFor: aReceptiveAccount transfer: aTransfer ! !

!methodRemoval: PataReal #for:transfer: stamp: 'AM 11/10/2020 10:53:53'!
for: aReceptiveAccount transfer: aTransfer 
	
	^self new initializeFor: aReceptiveAccount transfer: aTransfer !
!PataReal class methodsFor: 'nil' stamp: 'AM 11/10/2020 10:53:59'!
for: aReceptiveAccount transfer: aTransfer 
	
	^self new initializeFor: aReceptiveAccount transfer: aTransfer ! !
!Transfer methodsFor: 'initializing' stamp: 'AM 11/10/2020 10:54:21' prior: 50869182!
initializeFrom: aSendingReceptiveAccount to: aReceivingReceptiveAccount for: aValue 

	outgoing := Outgoing for: aSendingReceptiveAccount transfer: self.
	incoming := Incoming for: aReceivingReceptiveAccount transfer: self. 
	value := aValue.! !

!classRemoval: #OutgoingTransfer stamp: 'AM 11/10/2020 10:54:27'!
Pata subclass: #OutgoingTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #IncomingTransfer stamp: 'AM 11/10/2020 10:54:32'!
Pata subclass: #IncomingTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #Pata stamp: 'AM 11/10/2020 10:54:37'!
Object subclass: #Pata
	instanceVariableNames: 'receptiveAccount transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 10:54:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 10:54:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 10:54:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 10:54:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 10:54:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 10:54:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 10:54:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 10:54:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'AM 11/10/2020 10:54:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'AM 11/10/2020 10:54:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'AM 11/10/2020 10:54:46'!
PASSED!

!classRenamed: #PataReal as: #Pata stamp: 'AM 11/10/2020 10:54:58'!
Smalltalk renameClassNamed: #PataReal as: #Pata!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 10:59:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 10:59:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 10:59:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 10:59:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 10:59:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 10:59:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 10:59:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 10:59:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'AM 11/10/2020 10:59:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'AM 11/10/2020 10:59:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'AM 11/10/2020 10:59:41'!
PASSED!

----QUIT----(10 November 2020 10:59:59) CuisUniversity-4384.image priorSource: 17155564!

----STARTUP---- (10 November 2020 22:15:55) as /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/imagenportfolio2/CuisUniversity-4384.image!


!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 22:16:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 22:16:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 22:16:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 22:16:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 22:16:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 22:16:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 22:16:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 22:16:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'AM 11/10/2020 22:16:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'AM 11/10/2020 22:16:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'AM 11/10/2020 22:16:08'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/10/2020 22:18:24'!
test12
	
	| aReceivingAccount aSendingAccount transfer |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	transfer := Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	
	self assert: (aReceivingAccount 	hasRegistered: transfer deposit).
	self assert: (aSendingAccount 	hasRegistered: transfer withdrawal).! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/10/2020 22:19:07' prior: 50868948!
test10
	
	| aReceivingAccount aSendingAccount |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	Transfer from: aReceivingAccount to: aSendingAccount for: 50.
	
	self assert: aSendingAccount 	balance equals: 0.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/10/2020 22:19:13' prior: 50869679!
test10
	
	| aReceivingAccount aSendingAccount |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	Transfer from: aReceivingAccount to: aSendingAccount for: 50.
	
	self assert: aSendingAccount 	balance equals: -50.
! !

!testRun: #ReceptiveAccountTest #test10 stamp: 'AM 11/10/2020 22:19:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 22:19:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 22:19:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 22:19:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 22:19:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 22:19:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 22:19:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 22:19:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 22:19:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'AM 11/10/2020 22:19:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'AM 11/10/2020 22:19:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'AM 11/10/2020 22:19:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'AM 11/10/2020 22:19:14'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/10/2020 22:23:37' prior: 50869664!
test12
	
	| aReceivingAccount aSendingAccount transfer deposit witdrawal |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	transfer := Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	
	deposit := transfer deposit.
	witdrawal := transfer deposit.
	
	self assert: (aReceivingAccount 	hasRegistered: transfer deposit).
	self assert: (aSendingAccount 	hasRegistered: transfer withdrawal).! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/10/2020 22:24:19' prior: 50869747!
test12
	
	| aReceivingAccount aSendingAccount transfer deposit withdrawal |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	transfer := Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	
	deposit := transfer deposit.
	withdrawal := transfer deposit.
	
	self assert: deposit transfer equals: transfer.
	self assert: withdrawal transfer equals: transfer.! !

!testRun: #ReceptiveAccountTest #test12 stamp: 'AM 11/10/2020 22:24:42'!
ERROR!

!testRun: #ReceptiveAccountTest #test12 stamp: 'AM 11/10/2020 22:25:21'!
ERROR!
!Incoming methodsFor: 'accessing' stamp: 'AM 11/10/2020 22:25:35'!
transfer
	self shouldBeImplemented.! !
!Incoming methodsFor: 'accessing' stamp: 'AM 11/10/2020 22:25:40' prior: 50869785!
transfer

	^ transfer! !

!testRun: #ReceptiveAccountTest #test12 stamp: 'AM 11/10/2020 22:25:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 22:25:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 22:25:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 22:25:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 22:25:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 22:25:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 22:25:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 22:25:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 22:25:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'AM 11/10/2020 22:25:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'AM 11/10/2020 22:25:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'AM 11/10/2020 22:25:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'AM 11/10/2020 22:25:42'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/10/2020 22:26:08' prior: 50869764!
test12
	
	| aReceivingAccount aSendingAccount transfer deposit withdrawal |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	transfer := Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	
	deposit := transfer deposit.
	withdrawal := transfer withdrawal .
	
	self assert: deposit transfer equals: transfer.
	self assert: withdrawal transfer equals: transfer.! !

!testRun: #ReceptiveAccountTest #test12 stamp: 'AM 11/10/2020 22:26:09'!
ERROR!
!Outgoing methodsFor: 'accessing' stamp: 'AM 11/10/2020 22:26:27'!
transfer
	self shouldBeImplemented.! !
!Outgoing methodsFor: 'accessing' stamp: 'AM 11/10/2020 22:26:30' prior: 50869853!
transfer
	^ transfer! !

!testRun: #ReceptiveAccountTest #test12 stamp: 'AM 11/10/2020 22:26:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 22:26:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 22:26:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 22:26:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 22:26:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 22:26:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 22:26:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 22:26:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 22:26:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'AM 11/10/2020 22:26:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'AM 11/10/2020 22:26:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'AM 11/10/2020 22:26:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'AM 11/10/2020 22:26:34'!
PASSED!
!Pata methodsFor: 'accessing' stamp: 'AM 11/10/2020 22:26:46'!
transfer
	^ transfer! !

!methodRemoval: Outgoing #transfer stamp: 'AM 11/10/2020 22:26:47'!
transfer
	^ transfer!

!methodRemoval: Incoming #transfer stamp: 'AM 11/10/2020 22:26:54'!
transfer

	^ transfer!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/10/2020 22:32:17'!
test13
	
	
	| anAccount |
	anAccount := ReceptiveAccount new.
	
	self should: [ Transfer from: anAccount to: anAccount for: 100 ]
		raise: Error
		withMessageText: Transfer canNotTransferWhenSenderAndReceiverAreTheSameAccountErrorDescription.
		! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/10/2020 22:32:28' prior: 50869911!
test13
	
	| anAccount |
	
	anAccount := ReceptiveAccount new.
	
	self should: [ Transfer from: anAccount to: anAccount for: 100 ]
		raise: Error
		withMessageText: Transfer canNotTransferWhenSenderAndReceiverAreTheSameAccountErrorDescription.
		! !

!testRun: #ReceptiveAccountTest #test13 stamp: 'AM 11/10/2020 22:32:28'!
ERROR!
!Transfer class methodsFor: 'error descriptions' stamp: 'AM 11/10/2020 22:32:54'!
canNotTransferWhenSenderAndReceiverAreTheSameAccountErrorDescription
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'error descriptions' stamp: 'AM 11/10/2020 22:33:49' prior: 50869935!
canNotTransferWhenSenderAndReceiverAreTheSameAccountErrorDescription
	^ 'Can not transfer from an account to itself'! !

!testRun: #ReceptiveAccountTest #test13 stamp: 'AM 11/10/2020 22:34:18'!
FAILURE!

!testRun: #ReceptiveAccountTest #test13 stamp: 'AM 11/10/2020 22:34:26'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 22:34:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 22:34:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 22:34:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 22:34:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 22:34:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 22:34:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 22:34:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 22:34:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'AM 11/10/2020 22:34:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'AM 11/10/2020 22:34:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'AM 11/10/2020 22:34:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'AM 11/10/2020 22:34:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'AM 11/10/2020 22:34:41'!
FAILURE!

!testRun: #ReceptiveAccountTest #test13 stamp: 'AM 11/10/2020 22:34:41'!
FAILURE!
!Transfer class methodsFor: 'error descriptions' stamp: 'AM 11/10/2020 22:35:06'!
canNotTransferFromAnAccountToItselfErrorDescription
	^ 'Can not transfer from an account to itself'! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'AM 11/10/2020 22:35:06' prior: 50869922!
test13
	
	| anAccount |
	
	anAccount := ReceptiveAccount new.
	
	self should: [ Transfer from: anAccount to: anAccount for: 100 ]
		raise: Error
		withMessageText: Transfer canNotTransferFromAnAccountToItselfErrorDescription.
		! !

!methodRemoval: Transfer class #canNotTransferWhenSenderAndReceiverAreTheSameAccountErrorDescription stamp: 'AM 11/10/2020 22:35:06'!
canNotTransferWhenSenderAndReceiverAreTheSameAccountErrorDescription
	^ 'Can not transfer from an account to itself'!

!testRun: #ReceptiveAccountTest #test13 stamp: 'AM 11/10/2020 22:35:18'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'AM 11/10/2020 22:41:38' prior: 50868520!
from: aSendingReceptiveAccount to: aReceivingReceptiveAccount for: aValue 
	
	aSendingReceptiveAccount = aReceivingReceptiveAccount ifTrue: [ self canNotTransferFromAnAccountToItselfErrorDescription ].
	
	^self new initializeFrom: aSendingReceptiveAccount to: aReceivingReceptiveAccount for: aValue ! !

!testRun: #ReceptiveAccountTest #test13 stamp: 'AM 11/10/2020 22:41:42'!
FAILURE!

!testRun: #ReceptiveAccountTest #test13 stamp: 'AM 11/10/2020 22:41:55'!
FAILURE!

!testRun: #ReceptiveAccountTest #test13 stamp: 'AM 11/10/2020 22:42:09'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'AM 11/10/2020 22:42:25' prior: 50870026!
from: aSendingReceptiveAccount to: aReceivingReceptiveAccount for: aValue 
	
	aSendingReceptiveAccount = aReceivingReceptiveAccount ifTrue: [ ^ self canNotTransferFromAnAccountToItselfErrorDescription ].
	
	^self new initializeFrom: aSendingReceptiveAccount to: aReceivingReceptiveAccount for: aValue ! !

!testRun: #ReceptiveAccountTest #test13 stamp: 'AM 11/10/2020 22:42:28'!
FAILURE!

!testRun: #ReceptiveAccountTest #test13 stamp: 'AM 11/10/2020 22:42:55'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'AM 11/10/2020 22:43:13' prior: 50870047!
from: aSendingReceptiveAccount to: aReceivingReceptiveAccount for: aValue 
	
	aSendingReceptiveAccount = aReceivingReceptiveAccount ifTrue: [ ^ self error: self canNotTransferFromAnAccountToItselfErrorDescription ].
	
	^self new initializeFrom: aSendingReceptiveAccount to: aReceivingReceptiveAccount for: aValue ! !

!testRun: #ReceptiveAccountTest #test13 stamp: 'AM 11/10/2020 22:43:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 22:43:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 22:43:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 22:43:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 22:43:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 22:43:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 22:43:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 22:43:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 22:43:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'AM 11/10/2020 22:43:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'AM 11/10/2020 22:43:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'AM 11/10/2020 22:43:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'AM 11/10/2020 22:43:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'AM 11/10/2020 22:43:17'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/10/2020 22:43:56'!
test14
	
	| aReceivingAccount aSendingAccount |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	self should: [ Transfer from: aSendingAccount to: aReceivingAccount for: 0 ]
		raise: Error
		withMessageText: Transfer canNotTransferFromAnAccountToItselfErrorDescription.
		! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/10/2020 22:45:27' prior: 50870122!
test14
	
	| aReceivingAccount aSendingAccount |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	self should: [ Transfer from: aSendingAccount to: aReceivingAccount for: 0 ]
		raise: Error
		withMessageText: Transfer canNotTransferNonPositiveAmountErrorDescription.
		! !

!testRun: #ReceptiveAccountTest #test14 stamp: 'AM 11/10/2020 22:45:33'!
ERROR!
!Transfer class methodsFor: 'error descriptions' stamp: 'AM 11/10/2020 22:45:53'!
canNotTransferNonPositiveAmountErrorDescription
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'error descriptions' stamp: 'AM 11/10/2020 22:46:05' prior: 50870150!
canNotTransferNonPositiveAmountErrorDescription
	^ 'Can not transfer when amount is not a positive value'! !

!testRun: #ReceptiveAccountTest #test14 stamp: 'AM 11/10/2020 22:46:10'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'AM 11/10/2020 22:47:09' prior: 50870065!
from: aSendingReceptiveAccount to: aReceivingReceptiveAccount for: aValue 
	
	aSendingReceptiveAccount = aReceivingReceptiveAccount ifTrue: [ ^ self error: self canNotTransferFromAnAccountToItselfErrorDescription ].
	aValue <= 0 ifTrue: [ ^ self error: self canNotTransferNonPositiveAmountErrorDescription ].
	
	^self new initializeFrom: aSendingReceptiveAccount to: aReceivingReceptiveAccount for: aValue ! !

!testRun: #ReceptiveAccountTest #test14 stamp: 'AM 11/10/2020 22:47:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 22:47:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 22:47:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 22:47:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 22:47:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 22:47:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 22:47:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 22:47:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 22:47:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'AM 11/10/2020 22:47:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'AM 11/10/2020 22:47:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'AM 11/10/2020 22:47:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'AM 11/10/2020 22:47:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'AM 11/10/2020 22:47:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'AM 11/10/2020 22:47:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 22:47:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 22:47:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 22:47:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 22:47:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 22:47:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 22:47:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 22:47:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 22:47:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'AM 11/10/2020 22:47:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'AM 11/10/2020 22:47:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'AM 11/10/2020 22:47:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'AM 11/10/2020 22:47:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'AM 11/10/2020 22:47:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'AM 11/10/2020 22:47:21'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/10/2020 22:47:25'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/10/2020 22:47:25'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/10/2020 22:47:25'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/10/2020 22:47:25'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/10/2020 22:47:25'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/10/2020 22:47:25'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/10/2020 22:47:25'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/10/2020 22:47:26'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/10/2020 22:47:26'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/10/2020 22:47:26'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/10/2020 22:47:26'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/10/2020 22:47:26'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/10/2020 22:47:26'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/10/2020 22:47:26'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/10/2020 22:47:26'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/10/2020 22:52:56'!
test08AccountThatSendsTransferHasItsBalanceDecreased
	
	| aReceivingAccount aSendingAccount |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	
	self assert: aSendingAccount 	balance equals: -100.
! !

!methodRemoval: ReceptiveAccountTest #test08 stamp: 'AM 11/10/2020 22:52:56'!
test08
	
	| aReceivingAccount aSendingAccount |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	
	self assert: aSendingAccount 	balance equals: -100.
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/10/2020 22:53:39'!
test08BalanceShouldBeDecreasedOnTransferSendingAccount
	
	| aReceivingAccount aSendingAccount |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	
	self assert: aSendingAccount 	balance equals: -100.
! !

!methodRemoval: ReceptiveAccountTest #test08AccountThatSendsTransferHasItsBalanceDecreased stamp: 'AM 11/10/2020 22:53:39'!
test08AccountThatSendsTransferHasItsBalanceDecreased
	
	| aReceivingAccount aSendingAccount |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	
	self assert: aSendingAccount 	balance equals: -100.
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/10/2020 22:54:00'!
test09BalanceSHouldBeIncreasedOnTrasnferReceivingAccount
	
	| aReceivingAccount aSendingAccount |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	
	self assert: aReceivingAccount 	balance equals: 100.
! !

!methodRemoval: ReceptiveAccountTest #test09 stamp: 'AM 11/10/2020 22:54:00'!
test09
	
	| aReceivingAccount aSendingAccount |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	
	self assert: aReceivingAccount 	balance equals: 100.
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/10/2020 22:54:26'!
test09BalanceShouldBeIncreasedOnTransferReceivingAccount
	
	| aReceivingAccount aSendingAccount |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	
	self assert: aReceivingAccount 	balance equals: 100.
! !

!methodRemoval: ReceptiveAccountTest #test09BalanceSHouldBeIncreasedOnTrasnferReceivingAccount stamp: 'AM 11/10/2020 22:54:27'!
test09BalanceSHouldBeIncreasedOnTrasnferReceivingAccount
	
	| aReceivingAccount aSendingAccount |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	
	self assert: aReceivingAccount 	balance equals: 100.
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/10/2020 22:54:59'!
test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers
	
	| aReceivingAccount aSendingAccount |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	Transfer from: aReceivingAccount to: aSendingAccount for: 50.
	
	self assert: aSendingAccount 	balance equals: -50.
! !

!methodRemoval: ReceptiveAccountTest #test10 stamp: 'AM 11/10/2020 22:54:59'!
test10
	
	| aReceivingAccount aSendingAccount |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	Transfer from: aReceivingAccount to: aSendingAccount for: 50.
	
	self assert: aSendingAccount 	balance equals: -50.
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/10/2020 22:55:33'!
test11AccountsRegisterTransfersThatAffectThem
	
	| aReceivingAccount aSendingAccount transfer |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	transfer := Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	
	self assert: (aReceivingAccount 	hasRegistered: transfer deposit).
	self assert: (aSendingAccount 	hasRegistered: transfer withdrawal).! !

!methodRemoval: ReceptiveAccountTest #test11 stamp: 'AM 11/10/2020 22:55:33'!
test11
	
	| aReceivingAccount aSendingAccount transfer |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	transfer := Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	
	self assert: (aReceivingAccount 	hasRegistered: transfer deposit).
	self assert: (aSendingAccount 	hasRegistered: transfer withdrawal).!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/10/2020 22:56:37' prior: 50870456!
test11AccountsRegisterTransfersThatAffectThem
	
	| aReceivingAccount aSendingAccount transfer |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	transfer := Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	
	self assert: (aReceivingAccount 	hasRegistered: transfer deposit).
	self deny:   (aSendingAccount 	hasRegistered: transfer deposit).
	self assert: (aSendingAccount 	hasRegistered: transfer withdrawal).
	self deny: (aReceivingAccount 	hasRegistered: transfer withdrawal).! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/10/2020 22:56:39' prior: 50870486!
test11AccountsRegisterTransfersThatAffectThem
	
	| aReceivingAccount aSendingAccount transfer |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	transfer := Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	
	self assert: (aReceivingAccount 	hasRegistered: transfer deposit).
	self deny:   (aSendingAccount 	hasRegistered: transfer deposit).
	self assert: (aSendingAccount 	hasRegistered: transfer withdrawal).
	self deny:   (aReceivingAccount 	hasRegistered: transfer withdrawal).! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/10/2020 22:56:44' prior: 50870506!
test11AccountsRegisterTransfersThatAffectThem
	
	| aReceivingAccount aSendingAccount transfer |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	transfer := Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	
	self assert: (aReceivingAccount 	hasRegistered: transfer deposit).
	self deny:   (aSendingAccount 	hasRegistered: transfer deposit).
	
	self assert: (aSendingAccount 	hasRegistered: transfer withdrawal).
	self deny:   (aReceivingAccount 	hasRegistered: transfer withdrawal).! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/10/2020 22:57:01' prior: 50870526!
test11AccountsRegisterTransfersThatAffectThem
	
	| aReceivingAccount aSendingAccount transfer |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	transfer := Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	
	self assert: (aReceivingAccount 	hasRegistered: transfer deposit).
	self deny:   (aSendingAccount   	hasRegistered: transfer deposit).
	
	self assert: (aSendingAccount 	  hasRegistered: transfer withdrawal).
	self deny:   (aReceivingAccount 	hasRegistered: transfer withdrawal).! !

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/10/2020 22:57:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 22:57:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 22:57:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 22:57:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 22:57:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 22:57:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 22:57:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 22:57:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/10/2020 22:57:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/10/2020 22:57:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/10/2020 22:57:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/10/2020 22:57:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test12 stamp: 'AM 11/10/2020 22:57:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'AM 11/10/2020 22:57:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'AM 11/10/2020 22:57:04'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/10/2020 22:57:48'!
test12TransferComponentsKnowTheirTransfer
	
	| aReceivingAccount aSendingAccount transfer deposit withdrawal |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	transfer := Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	
	deposit := transfer deposit.
	withdrawal := transfer withdrawal .
	
	self assert: deposit transfer equals: transfer.
	self assert: withdrawal transfer equals: transfer.! !

!methodRemoval: ReceptiveAccountTest #test12 stamp: 'AM 11/10/2020 22:57:48'!
test12
	
	| aReceivingAccount aSendingAccount transfer deposit withdrawal |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	transfer := Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	
	deposit := transfer deposit.
	withdrawal := transfer withdrawal .
	
	self assert: deposit transfer equals: transfer.
	self assert: withdrawal transfer equals: transfer.!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/10/2020 22:58:45'!
test14TransferShouldNotHaveNonPositiveValue
	
	| aReceivingAccount aSendingAccount |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	self should: [ Transfer from: aSendingAccount to: aReceivingAccount for: 0 ]
		raise: Error
		withMessageText: Transfer canNotTransferNonPositiveAmountErrorDescription.
		! !

!methodRemoval: ReceptiveAccountTest #test14 stamp: 'AM 11/10/2020 22:58:45'!
test14
	
	| aReceivingAccount aSendingAccount |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	self should: [ Transfer from: aSendingAccount to: aReceivingAccount for: 0 ]
		raise: Error
		withMessageText: Transfer canNotTransferNonPositiveAmountErrorDescription.
		!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/10/2020 22:59:05'!
test13AnAccountSHouldNotTransferToItself
	
	| anAccount |
	
	anAccount := ReceptiveAccount new.
	
	self should: [ Transfer from: anAccount to: anAccount for: 100 ]
		raise: Error
		withMessageText: Transfer canNotTransferFromAnAccountToItselfErrorDescription.
		! !

!methodRemoval: ReceptiveAccountTest #test13 stamp: 'AM 11/10/2020 22:59:05'!
test13
	
	| anAccount |
	
	anAccount := ReceptiveAccount new.
	
	self should: [ Transfer from: anAccount to: anAccount for: 100 ]
		raise: Error
		withMessageText: Transfer canNotTransferFromAnAccountToItselfErrorDescription.
		!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/10/2020 22:59:13'!
test13AnAccountShouldNotTransferToItself
	
	| anAccount |
	
	anAccount := ReceptiveAccount new.
	
	self should: [ Transfer from: anAccount to: anAccount for: 100 ]
		raise: Error
		withMessageText: Transfer canNotTransferFromAnAccountToItselfErrorDescription.
		! !

!methodRemoval: ReceptiveAccountTest #test13AnAccountSHouldNotTransferToItself stamp: 'AM 11/10/2020 22:59:13'!
test13AnAccountSHouldNotTransferToItself
	
	| anAccount |
	
	anAccount := ReceptiveAccount new.
	
	self should: [ Transfer from: anAccount to: anAccount for: 100 ]
		raise: Error
		withMessageText: Transfer canNotTransferFromAnAccountToItselfErrorDescription.
		!

!classRenamed: #Pata as: #TransferComponent stamp: 'AM 11/10/2020 22:59:30'!
Smalltalk renameClassNamed: #Pata as: #TransferComponent!

!classRenamed: #Incoming as: #ReceivingTransferComponent stamp: 'AM 11/10/2020 23:01:48'!
Smalltalk renameClassNamed: #Incoming as: #ReceivingTransferComponent!
!Transfer methodsFor: 'as yet unclassified' stamp: 'AM 11/10/2020 23:01:49' prior: 50869514!
initializeFrom: aSendingReceptiveAccount to: aReceivingReceptiveAccount for: aValue 

	outgoing := Outgoing for: aSendingReceptiveAccount transfer: self.
	incoming := ReceivingTransferComponent for: aReceivingReceptiveAccount transfer: self. 
	value := aValue.! !

!classRenamed: #Outgoing as: #SendingTransferComponent stamp: 'AM 11/10/2020 23:02:16'!
Smalltalk renameClassNamed: #Outgoing as: #SendingTransferComponent!
!Transfer methodsFor: 'as yet unclassified' stamp: 'AM 11/10/2020 23:02:17' prior: 50870732!
initializeFrom: aSendingReceptiveAccount to: aReceivingReceptiveAccount for: aValue 

	outgoing := SendingTransferComponent for: aSendingReceptiveAccount transfer: self.
	incoming := ReceivingTransferComponent for: aReceivingReceptiveAccount transfer: self. 
	value := aValue.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 23:02:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 23:02:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 23:02:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 23:02:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 23:02:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 23:02:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 23:02:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/10/2020 23:02:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/10/2020 23:02:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/10/2020 23:02:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/10/2020 23:02:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/10/2020 23:02:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/10/2020 23:02:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/10/2020 23:02:29'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/10/2020 23:02:32'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/10/2020 23:02:33'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/10/2020 23:02:33'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/10/2020 23:02:33'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/10/2020 23:02:33'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/10/2020 23:02:33'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/10/2020 23:02:33'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/10/2020 23:02:33'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/10/2020 23:02:33'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/10/2020 23:02:33'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/10/2020 23:02:33'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/10/2020 23:02:33'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/10/2020 23:02:33'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/10/2020 23:02:33'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/10/2020 23:02:33'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/10/2020 23:05:01'!
test15
! !
!ReceptiveAccountTest methodsFor: 'tests - reports' stamp: 'AM 11/10/2020 23:06:52' prior: 50870872!
test15

	| anEmptyAccount |
	anEmptyAccount := ReceptiveAccount new.
	
	self assert: anEmptyAccount accountSummary size equals: 1.
	self assert: anEmptyAccount accountSummary includes: 'balance = 0'.! !
!ReceptiveAccountTest methodsFor: 'tests - reports' stamp: 'AM 11/10/2020 23:07:02' prior: 50870876!
test15

	| anEmptyAccount |
	
	anEmptyAccount := ReceptiveAccount new.
	
	self assert: anEmptyAccount accountSummary size equals: 1.
	self assert: anEmptyAccount accountSummary includes: 'balance = 0'.! !

!testRun: #ReceptiveAccountTest #test15 stamp: 'AM 11/10/2020 23:07:20'!
ERROR!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AM 11/10/2020 23:07:34'!
accountSummary
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'AM 11/10/2020 23:07:54' prior: 50870898!
accountSummary
	
	^ { 'balance = 0' }! !

!testRun: #ReceptiveAccountTest #test15 stamp: 'AM 11/10/2020 23:07:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 23:07:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 23:07:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 23:07:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 23:07:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 23:07:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 23:07:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 23:07:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/10/2020 23:07:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/10/2020 23:07:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/10/2020 23:07:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/10/2020 23:07:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/10/2020 23:07:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/10/2020 23:07:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/10/2020 23:07:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'AM 11/10/2020 23:07:56'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests - reports' stamp: 'AM 11/10/2020 23:12:02'!
test16

	| anAccount expectedAccountSummary |
	
	anAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	
	expectedAccountSummary := { 'Deposit for 10'. 'balance = 10' }.
	
	self assert: anAccount accountSummary equals: expectedAccountSummary.! !
!ReceptiveAccountTest methodsFor: 'tests - reports' stamp: 'AM 11/10/2020 23:13:18' prior: 50870966!
test16

	| anAccount expectedAccountSummary |
	
	anAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	
	expectedAccountSummary := { 'Dep�sito por 10'. 'Balance = 10' }.
	
	self assert: anAccount accountSummary equals: expectedAccountSummary.! !
!ReceptiveAccountTest methodsFor: 'tests - reports' stamp: 'AM 11/10/2020 23:13:25' prior: 50870886!
test15

	| anEmptyAccount |
	
	anEmptyAccount := ReceptiveAccount new.
	
	self assert: anEmptyAccount accountSummary size equals: 1.
	self assert: anEmptyAccount accountSummary includes: 'Balance = 0'.! !

!testRun: #ReceptiveAccountTest #test16 stamp: 'AM 11/10/2020 23:13:31'!
FAILURE!

!testRun: #ReceptiveAccountTest #test15 stamp: 'AM 11/10/2020 23:13:37'!
FAILURE!

!testRun: #ReceptiveAccountTest #test15 stamp: 'AM 11/10/2020 23:13:37'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AM 11/10/2020 23:13:55' prior: 50870903!
accountSummary
	
	^ { 'Balance = 0' }! !

!testRun: #ReceptiveAccountTest #test15 stamp: 'AM 11/10/2020 23:13:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'AM 11/10/2020 23:14:11'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AM 11/10/2020 23:15:56' prior: 50871007!
accountSummary
	
	| result |
	result := OrderedCollection new.
	transactions ifNotEmpty: [ result add: 'Dep�sito por 10' ].
	result add: 'Balance = ', self balance.
	^ result ! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'AM 11/10/2020 23:16:01' prior: 50871017!
accountSummary
	
	| result |
	
	result := OrderedCollection new.
	transactions ifNotEmpty: [ result add: 'Dep�sito por 10' ].
	result add: 'Balance = ', self balance.
	^ result ! !

!testRun: #ReceptiveAccountTest #test16 stamp: 'AM 11/10/2020 23:16:04'!
ERROR!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AM 11/10/2020 23:16:30' prior: 50871026!
accountSummary
	
	| result |
	
	result := OrderedCollection new.
	transactions ifNotEmpty: [ result add: 'Dep�sito por 10' ].
	result add: 'Balance = ', self balance printString.
	^ result ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 23:16:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 23:16:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 23:16:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 23:16:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 23:16:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 23:16:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 23:16:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/10/2020 23:16:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/10/2020 23:16:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/10/2020 23:16:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/10/2020 23:16:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/10/2020 23:16:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/10/2020 23:16:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/10/2020 23:16:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'AM 11/10/2020 23:16:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'AM 11/10/2020 23:16:32'!
FAILURE!

!testRun: #ReceptiveAccountTest #test16 stamp: 'AM 11/10/2020 23:16:32'!
FAILURE!

self balance printString!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AM 11/10/2020 23:17:31' prior: 50871037!
accountSummary
	
	| result |
	
	result := OrderedCollection new.
	transactions ifNotEmpty: [ result add: 'Dep�sito por 10' ].
	result add:  ('Balance = ', self balance printString).
	^ result ! !

('Balance = ', self balance printString)!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AM 11/10/2020 23:17:48' prior: 50871109!
accountSummary
	
	| result |
	
	result := OrderedCollection new.
	transactions ifNotEmpty: [ result add: 'Dep�sito por 10' ].
	result add:  'Balance = ', self balance printString.
	^ result ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 23:19:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 23:19:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 23:19:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 23:19:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 23:19:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 23:19:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 23:19:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/10/2020 23:19:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/10/2020 23:19:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/10/2020 23:19:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/10/2020 23:19:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/10/2020 23:19:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/10/2020 23:19:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/10/2020 23:19:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'AM 11/10/2020 23:19:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'AM 11/10/2020 23:19:03'!
FAILURE!

!testRun: #ReceptiveAccountTest #test16 stamp: 'AM 11/10/2020 23:19:03'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests - reports' stamp: 'AM 11/10/2020 23:20:02' prior: 50870978!
test16

	| anAccount expectedAccountSummary |
	
	anAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	
	expectedAccountSummary := { 'Dep�sito por 10'. 'Balance = 10' }.
	
	self assert: expectedAccountSummary equals: anAccount accountSummary.! !

!testRun: #ReceptiveAccountTest #test16 stamp: 'AM 11/10/2020 23:20:04'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AM 11/10/2020 23:20:33' prior: 50871120!
accountSummary
	
	| result |
	
	result := OrderedCollection new.
	transactions ifNotEmpty: [ result add: 'Dep�sito por 10' ].
	result add:  ('Balance = ', self balance printString).
	^ result ! !

!testRun: #ReceptiveAccountTest #test16 stamp: 'AM 11/10/2020 23:20:41'!
FAILURE!

expectedAccountSummary!
!ReceptiveAccountTest methodsFor: 'tests - reports' stamp: 'AM 11/10/2020 23:21:43' prior: 50871191!
test16

	| anAccount expectedAccountSummary |
	
	anAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10' with:  'Balance = 10'.
	
	self assert: expectedAccountSummary equals: anAccount accountSummary.! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'AM 11/10/2020 23:21:57' prior: 50871205!
accountSummary
	
	| result |
	
	result := OrderedCollection new.
	transactions ifNotEmpty: [ result add: 'Dep�sito por 10' ].
	result add:  'Balance = ', self balance printString.
	^ result ! !

!testRun: #ReceptiveAccountTest #test16 stamp: 'AM 11/10/2020 23:22:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 23:22:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 23:22:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 23:22:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 23:22:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 23:22:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 23:22:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 23:22:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/10/2020 23:22:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/10/2020 23:22:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/10/2020 23:22:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/10/2020 23:22:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/10/2020 23:22:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/10/2020 23:22:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/10/2020 23:22:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'AM 11/10/2020 23:22:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'AM 11/10/2020 23:22:05'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests - reports' stamp: 'AM 11/10/2020 23:22:33'!
test17

	| anAccount expectedAccountSummary anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	Withdraw register: 10  on: anAccount.
	Deposit register: 10  on: anAccount.
	Deposit register: 10  on: anAccount.
	
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10' with:  'Balance = 10'.
	
	self assert: expectedAccountSummary equals: anAccount accountSummary.! !
!ReceptiveAccountTest methodsFor: 'tests - reports' stamp: 'AM 11/10/2020 23:23:18' prior: 50871301!
test17

	| anAccount expectedAccountSummary anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	Withdraw register: 40  on: anAccount.
	Transfer from: anAccount to: anotherAccount for: 100.
	Transfer from: anotherAccount to: anAccount for: 50.
	
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10' with:  'Balance = 10'.
	
	self assert: expectedAccountSummary equals: anAccount accountSummary.! !
!ReceptiveAccountTest methodsFor: 'tests - reports' stamp: 'AM 11/10/2020 23:25:16' prior: 50871319!
test17

	| anAccount expectedAccountSummary anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	Withdraw register: 40  on: anAccount.
	Transfer from: anAccount to: anotherAccount for: 100.
	Transfer from: anotherAccount to: anAccount for: 50.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10'
												with: 'Extracci�n por 40'
												with: 'Salida por transferencia de 100'
												with: 'Entrada por transferencia de 50'
												with: 'Balance = -80'.! !
!ReceptiveAccountTest methodsFor: 'tests - reports' stamp: 'AM 11/10/2020 23:25:42' prior: 50871338!
test17

	| anAccount expectedAccountSummary anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	Withdraw register: 40  on: anAccount.
	Transfer from: anAccount to: anotherAccount for: 100.
	Transfer from: anotherAccount to: anAccount for: 50.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10'
												with: 'Extracci�n por 40'
												with: 'Salida por transferencia de 100'
												with: 'Entrada por transferencia de 50'
												with: 'Balance = -80'.
												
	self assert: anAccount accountSummary equals: expectedAccountSummary .! !

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/10/2020 23:25:45'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests - reports' stamp: 'AM 11/10/2020 23:27:35' prior: 50871360!
test17

	| anAccount expectedAccountSummary anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	Withdraw register: 40  on: anAccount.
	Transfer from: anAccount to: anotherAccount for: 100.
	Transfer from: anotherAccount to: anAccount for: 50.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10'
												with: 'Extracci�n por 40'
												with: 'Salida por transferencia de 100'
												with: 'Entrada por transferencia de 50'
												with: 'Balance = -80'.
												
	self assert: anAccount accountSummary size equals: 5.
	self assert: anAccount accountSummary last equals: 'Balance = -80'.! !
!ReceptiveAccountTest methodsFor: 'tests - reports' stamp: 'AM 11/10/2020 23:28:08' prior: 50871387!
test17

	| anAccount expectedAccountSummary anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	Withdraw register: 40  on: anAccount.
	Transfer from: anAccount to: anotherAccount for: 100.
	Transfer from: anotherAccount to: anAccount for: 50.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10'
												with: 'Extracci�n por 40'
												with: 'Salida por transferencia de 100'
												with: 'Entrada por transferencia de 50'
												with: 'Balance = -80'.
												
	self assert: anAccount accountSummary size equals: 5.
	self assert: anAccount accountSummary last equals: 'Balance = -80'.
	self assert: anAccount accountSummary includes: expectedAccountSummary.
	! !
!ReceptiveAccountTest methodsFor: 'tests - reports' stamp: 'AM 11/10/2020 23:28:18' prior: 50871413!
test17

	| anAccount expectedAccountSummary anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	Withdraw register: 40  on: anAccount.
	Transfer from: anAccount to: anotherAccount for: 100.
	Transfer from: anotherAccount to: anAccount for: 50.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10'
												with: 'Extracci�n por 40'
												with: 'Salida por transferencia de 100'
												with: 'Entrada por transferencia de 50'
												with: 'Balance = -80'.
												
	self assert: anAccount accountSummary size equals: 5.
	self assert: anAccount accountSummary includes: expectedAccountSummary.
	self assert: anAccount accountSummary last equals: 'Balance = -80'.
	! !

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/10/2020 23:28:24'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AM 11/10/2020 23:32:13' prior: 50871230!
accountSummary
	
	| result |
	
	result := OrderedCollection new.
	transactions do: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [ result add: 'Dep�sito por 10' ].
		(aTransaction isKindOf: Withdraw) ifTrue: [ result add: 'Extracci�n por 40' ].
		(aTransaction isKindOf: ReceivingTransferComponent ) ifTrue: [ result add: 'Deposito por 100' ].
		(aTransaction isKindOf: SendingTransferComponent) ifTrue: [ result add: 'Salida por transferencia 50' ].].
	result add:  'Balance = ', self balance printString.
	^ result ! !

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/10/2020 23:32:17'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests - reports' stamp: 'AM 11/10/2020 23:35:27' prior: 50871441!
test17

	| anAccount expectedAccountSummary anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	Withdraw register: 40  on: anAccount.
	Transfer from: anAccount to: anotherAccount for: 100.
	Transfer from: anotherAccount to: anAccount for: 50.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10'
												with: 'Extracci�n por 40'
												with: 'Salida por transferencia de 100'
												with: 'Entrada por transferencia de 50'
												with: 'Balance = -80'.
												
	self assert: (anAccount accountSummary hasEqualElements: expectedAccountSummary).
	self assert: anAccount accountSummary last equals: 'Balance = -80'.
	! !

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/10/2020 23:35:29'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AM 11/10/2020 23:36:17' prior: 50871472!
accountSummary
	
	| result |
	
	result := OrderedCollection new.
	transactions do: [ :aTransaction | 
		(aTransaction isKindOf: Deposit) ifTrue: [ result add: 'Dep�sito por 10' ].
		(aTransaction isKindOf: Withdraw) ifTrue: [ result add: 'Extracci�n por 40' ].
		(aTransaction isKindOf: ReceivingTransferComponent ) ifTrue: [ result add: 'Entrada por transferencia de 50' ].
		(aTransaction isKindOf: SendingTransferComponent) ifTrue: [ result add: 'Salida por transferencia de 100' ].].
	result add:  'Balance = ', self balance printString.
	^ result ! !

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/10/2020 23:36:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 23:36:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 23:36:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 23:36:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 23:36:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 23:36:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 23:36:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 23:36:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/10/2020 23:36:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/10/2020 23:36:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/10/2020 23:36:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/10/2020 23:36:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/10/2020 23:36:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/10/2020 23:36:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/10/2020 23:36:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'AM 11/10/2020 23:36:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'AM 11/10/2020 23:36:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/10/2020 23:36:24'!
PASSED!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AM 11/10/2020 23:37:20' prior: 50871524!
accountSummary
	
	| result |
	
	result := OrderedCollection new.
	transactions do: [ :aTransaction | aTransaction addToAccountSummary: result ].
		"(aTransaction isKindOf: Deposit) ifTrue: [ result add: 'Dep�sito por 10' ].
		(aTransaction isKindOf: Withdraw) ifTrue: [ result add: 'Extracci�n por 40' ].
		(aTransaction isKindOf: ReceivingTransferComponent ) ifTrue: [ result add: 'Entrada por transferencia de 50' ].
		(aTransaction isKindOf: SendingTransferComponent) ifTrue: [ result add: 'Salida por transferencia de 100' ].]."
	result add:  'Balance = ', self balance printString.
	^ result ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 23:37:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 23:37:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 23:37:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 23:37:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 23:37:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 23:37:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 23:37:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/10/2020 23:37:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/10/2020 23:37:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/10/2020 23:37:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/10/2020 23:37:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/10/2020 23:37:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/10/2020 23:37:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/10/2020 23:37:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'AM 11/10/2020 23:37:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'AM 11/10/2020 23:37:25'!
ERROR!

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/10/2020 23:37:25'!
ERROR!

!testRun: #ReceptiveAccountTest #test16 stamp: 'AM 11/10/2020 23:37:28'!
ERROR!
!AccountTransaction methodsFor: 'reports' stamp: 'AM 11/10/2020 23:37:51'!
addToAccountSummary: anOrderedCollection 
	self shouldBeImplemented.! !
!AccountTransaction methodsFor: 'reports' stamp: 'AM 11/10/2020 23:38:08' prior: 50871695!
addToAccountSummary: anAccountSUmmary 
	
	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'reports' stamp: 'AM 11/10/2020 23:38:10' prior: 50871701!
addToAccountSummary: anAccountSUmmaru 
	
	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'reports' stamp: 'AM 11/10/2020 23:38:17' prior: 50871707!
addToAccountSummary: anAccountSummary
	
	self subclassResponsibility ! !

!testRun: #ReceptiveAccountTest #test16 stamp: 'AM 11/10/2020 23:38:19'!
ERROR!
!Deposit methodsFor: 'reports' stamp: 'AM 11/10/2020 23:38:35' overrides: 50871713!
addToAccountSummary: anOrderedCollection 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'reports' stamp: 'AM 11/10/2020 23:39:01' prior: 50871721 overrides: 50871713!
addToAccountSummary: anOrderedCollection 
	^ 'Dep�sito por ', value! !

!testRun: #ReceptiveAccountTest #test16 stamp: 'AM 11/10/2020 23:39:03'!
ERROR!
!Deposit methodsFor: 'reports' stamp: 'AM 11/10/2020 23:39:16' prior: 50871727 overrides: 50871713!
addToAccountSummary: anOrderedCollection 
	^ 'Dep�sito por ', value printString! !

!testRun: #ReceptiveAccountTest #test16 stamp: 'AM 11/10/2020 23:39:18'!
FAILURE!
!Deposit methodsFor: 'reports' stamp: 'AM 11/10/2020 23:40:12' prior: 50871735 overrides: 50871713!
addToAccountSummary: anAccountSummary 
	^ anAccountSummary add: 'Dep�sito por ', value printString! !

!testRun: #ReceptiveAccountTest #test16 stamp: 'AM 11/10/2020 23:40:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/10/2020 23:40:20'!
ERROR!
!Withdraw methodsFor: 'reports' stamp: 'AM 11/10/2020 23:40:37' overrides: 50871713!
addToAccountSummary: anOrderedCollection 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'reports' stamp: 'AM 11/10/2020 23:41:52' prior: 50871755 overrides: 50871713!
addToAccountSummary: anAccountSummary
	
	^ anAccountSummary add: 'Extracci�n por ', value printString ! !

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/10/2020 23:41:54'!
ERROR!
!SendingTransferComponent methodsFor: 'reports' stamp: 'AM 11/10/2020 23:42:09' overrides: 50871713!
addToAccountSummary: anOrderedCollection 
	self shouldBeImplemented.! !
!SendingTransferComponent methodsFor: 'reports' stamp: 'AM 11/10/2020 23:42:37' prior: 50871770 overrides: 50871713!
addToAccountSummary: anAccountSummary
 
	anAccountSummary add: 'Salida por transferencia de ', value printString! !

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/10/2020 23:42:39'!
ERROR!
!ReceivingTransferComponent methodsFor: 'reports' stamp: 'AM 11/10/2020 23:42:53' overrides: 50871713!
addToAccountSummary: anOrderedCollection 
	self shouldBeImplemented.! !
!ReceivingTransferComponent methodsFor: 'reports' stamp: 'AM 11/10/2020 23:43:20' prior: 50871786 overrides: 50871713!
addToAccountSummary: anAccountSummary

	anAccountSummary add: 'Etrada por transferencia de ', value printString ! !

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/10/2020 23:43:24'!
FAILURE!

anAccount accountSummary!
!ReceivingTransferComponent methodsFor: 'reports' stamp: 'AM 11/10/2020 23:44:43' prior: 50871792 overrides: 50871713!
addToAccountSummary: anAccountSummary

	anAccountSummary add: 'Etrada por transferencia de ', self value printString ! !
!SendingTransferComponent methodsFor: 'reports' stamp: 'AM 11/10/2020 23:44:51' prior: 50871776 overrides: 50871713!
addToAccountSummary: anAccountSummary
 
	anAccountSummary add: 'Salida por transferencia de ', self value printString! !

AccountTransaction subclass: #TransferComponent
	instanceVariableNames: 'receptiveAccount transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #TransferComponent category: 'Portfolio' stamp: 'AM 11/10/2020 23:45:06'!
AccountTransaction subclass: #TransferComponent
	instanceVariableNames: 'receptiveAccount transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!TransferComponent methodsFor: 'nil' stamp: 'AM 11/10/2020 23:45:29' overrides: 50868384!
value
	^ transfer value! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 23:45:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 23:45:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 23:45:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 23:45:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 23:45:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 23:45:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 23:45:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/10/2020 23:45:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/10/2020 23:45:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/10/2020 23:45:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/10/2020 23:45:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/10/2020 23:45:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/10/2020 23:45:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/10/2020 23:45:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'AM 11/10/2020 23:45:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'AM 11/10/2020 23:45:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/10/2020 23:45:36'!
FAILURE!

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/10/2020 23:45:36'!
FAILURE!

anAccount accountSummary!
!ReceivingTransferComponent methodsFor: 'reports' stamp: 'AM 11/10/2020 23:46:17' prior: 50871803 overrides: 50871713!
addToAccountSummary: anAccountSummary

	anAccountSummary add: 'Entrada por transferencia de ', self value printString ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/10/2020 23:46:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 23:46:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/10/2020 23:46:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/10/2020 23:46:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/10/2020 23:46:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/10/2020 23:46:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/10/2020 23:46:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/10/2020 23:46:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/10/2020 23:46:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/10/2020 23:46:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/10/2020 23:46:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/10/2020 23:46:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/10/2020 23:46:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/10/2020 23:46:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'AM 11/10/2020 23:46:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test16 stamp: 'AM 11/10/2020 23:46:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/10/2020 23:46:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/10/2020 23:46:57'!
PASSED!
!PortfolioTest methodsFor: 'tests - reports' stamp: 'AM 11/10/2020 23:47:38'!
test16! !
!PortfolioTest methodsFor: 'tests - reports' stamp: 'AM 11/10/2020 23:49:37' prior: 50871973!
test16

	| aPortfolio |
	aPortfolio := Portfolio new.
	
	self assert: aPortfolio accountSummary equals: 'Balance = 0'.! !
!PortfolioTest methodsFor: 'tests - reports' stamp: 'AM 11/10/2020 23:49:41' prior: 50871977!
test16

	| aPortfolio |
	
	aPortfolio := Portfolio new.
	
	self assert: aPortfolio accountSummary equals: 'Balance = 0'.! !

!testRun: #PortfolioTest #test16 stamp: 'AM 11/10/2020 23:49:43'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/10/2020 23:49:53'!
accountSummary
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/10/2020 23:50:05' prior: 50871993!
accountSummary
	
	^ 'Balance = 0'.! !

!testRun: #PortfolioTest #test16 stamp: 'AM 11/10/2020 23:50:07'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/10/2020 23:50:07'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/10/2020 23:50:07'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/10/2020 23:50:07'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/10/2020 23:50:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/10/2020 23:50:07'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/10/2020 23:50:07'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/10/2020 23:50:07'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/10/2020 23:50:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/10/2020 23:50:07'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/10/2020 23:50:07'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/10/2020 23:50:07'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/10/2020 23:50:07'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/10/2020 23:50:07'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/10/2020 23:50:07'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/10/2020 23:50:07'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AM 11/10/2020 23:50:07'!
PASSED!
!Account methodsFor: 'nil' stamp: 'AM 11/10/2020 23:50:28'!
accountSummary
	self subclassResponsibility ! !
!Account methodsFor: 'as yet unclassified' stamp: 'AM 11/10/2020 23:50:30' prior: 50872064!
accountSummary

	self subclassResponsibility ! !
!PortfolioTest methodsFor: 'tests - reports' stamp: 'AM 11/10/2020 23:56:17' prior: 50871984!
test16

	| aPortfolio anAccount anotherAccount expectedAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
	
	self assert: aPortfolio accountSummary last equals: 'Balance = 80'.
	self assert: (aPortfolio accountSummary hasEqualElements: expectedAccountSummary).! !

!testRun: #PortfolioTest #test16 stamp: 'AM 11/10/2020 23:56:26'!
FAILURE!
!PortfolioTest methodsFor: 'tests - reports' stamp: 'AM 11/10/2020 23:49:41' prior: 50872074!
test16

	| aPortfolio |
	
	aPortfolio := Portfolio new.
	
	self assert: aPortfolio accountSummary equals: 'Balance = 0'.! !
!PortfolioTest methodsFor: 'tests - reports' stamp: 'AM 11/10/2020 23:56:51'!
test17

	| aPortfolio anAccount anotherAccount expectedAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
	
	self assert: aPortfolio accountSummary last equals: 'Balance = 80'.
	self assert: (aPortfolio accountSummary hasEqualElements: expectedAccountSummary).! !

!testRun: #PortfolioTest #test17 stamp: 'AM 11/10/2020 23:56:54'!
FAILURE!
!PortfolioTest methodsFor: 'tests - reports' stamp: 'AM 11/10/2020 23:57:24' prior: 50872109!
test17

	| aPortfolio anAccount anotherAccount expectedAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
	
	self assert: 'Balance = 80' equals:  aPortfolio accountSummary last.
	self assert: (aPortfolio accountSummary hasEqualElements: expectedAccountSummary).! !

!testRun: #PortfolioTest #test17 stamp: 'AM 11/10/2020 23:57:28'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/10/2020 23:57:54' prior: 50871998 overrides: 50872069!
accountSummary
	
	^ { 'Balance = 80' }.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/10/2020 23:58:42' prior: 50872165 overrides: 50872069!
accountSummary
	
	^ { 'Balance = ', self balance printString }! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'AM 11/10/2020 23:58:58' prior: 50871609 overrides: 50872069!
accountSummary
	
	| result |
	
	result := OrderedCollection new.
	transactions do: [ :aTransaction | aTransaction addToAccountSummary: result ].
	result add:  'Balance = ', self balance printString.
	^ result ! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'AM 11/10/2020 23:59:21' prior: 50872176 overrides: 50872069!
accountSummary
	
	| accountSummary |
	
	accountSummary := OrderedCollection new.
	transactions do: [ :aTransaction | aTransaction addToAccountSummary: accountSummary ].
	accountSummary add:  'Balance = ', self balance printString.
	^ accountSummary ! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'AM 11/10/2020 23:59:26' prior: 50872187 overrides: 50872069!
accountSummary
	
	| accountSummary |
	
	accountSummary := OrderedCollection new.
	
	transactions do: [ :aTransaction | aTransaction addToAccountSummary: accountSummary ].
	accountSummary add:  'Balance = ', self balance printString.
	
	^ accountSummary ! !

!testRun: #PortfolioTest #test17 stamp: 'AM 11/10/2020 23:59:34'!
FAILURE!
!PortfolioTest methodsFor: 'tests - reports' stamp: 'AM 11/10/2020 23:59:50' prior: 50872102!
test16

	| aPortfolio |
	
	aPortfolio := Portfolio new.
	
	self assert: aPortfolio accountSummary equals: { 'Balance = 0' }.! !

!testRun: #PortfolioTest #test16 stamp: 'AM 11/10/2020 23:59:52'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/10/2020 23:59:52'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/10/2020 23:59:52'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/10/2020 23:59:52'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/10/2020 23:59:52'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/10/2020 23:59:52'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/10/2020 23:59:52'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/10/2020 23:59:52'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/10/2020 23:59:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/10/2020 23:59:52'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/10/2020 23:59:52'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/10/2020 23:59:52'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/10/2020 23:59:52'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/10/2020 23:59:52'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/10/2020 23:59:52'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/10/2020 23:59:52'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AM 11/10/2020 23:59:52'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'AM 11/10/2020 23:59:52'!
FAILURE!

!testRun: #PortfolioTest #test17 stamp: 'AM 11/10/2020 23:59:52'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 00:03:49' prior: 50872170 overrides: 50872069!
accountSummary
	
	| accountSummary |
	accountSummary := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsToAccountSummary: accountSummary ].
	{ 'Balance = ', self balance printString }! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 00:04:07' prior: 50872288 overrides: 50872069!
accountSummary
	
	| accountSummary |
	accountSummary := OrderedCollection new.
	
	accounts do: [ :anAccount | anAccount addTransactionsToAccountSummary: accountSummary ].
	
	{ 'Balance = ', self balance printString }! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 00:04:14' prior: 50872299 overrides: 50872069!
accountSummary
	
	| accountSummary |
	
	accountSummary := OrderedCollection new.
	
	accounts do: [ :anAccount | anAccount addTransactionsToAccountSummary: accountSummary ].
	
	{ 'Balance = ', self balance printString }! !

!testRun: #PortfolioTest #test17 stamp: 'AM 11/11/2020 00:04:16'!
ERROR!
!Account methodsFor: 'reports' stamp: 'AM 11/11/2020 00:04:41'!
addTransactionsToAccountSummary: anOrderedCollection 
	self shouldBeImplemented.! !
!Account methodsFor: 'reports' stamp: 'AM 11/11/2020 00:04:47' prior: 50872322!
addTransactionsToAccountSummary: anOrderedCollection 
	
	self subclassResponsibility ! !
!Account methodsFor: 'reports' stamp: 'AM 11/11/2020 00:05:09' prior: 50872328!
addTransactionsToAccountSummary: anAccountSummary 
	
	self subclassResponsibility ! !

!testRun: #PortfolioTest #test17 stamp: 'AM 11/11/2020 00:05:11'!
ERROR!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AM 11/11/2020 00:05:26' overrides: 50872334!
addTransactionsToAccountSummary: anOrderedCollection 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'AM 11/11/2020 00:06:20' prior: 50872342 overrides: 50872334!
addTransactionsToAccountSummary: anAccountSummary 
	
	transactions do: [ :aTransaction | aTransaction addToAccountSummary: anAccountSummary ].! !

!testRun: #PortfolioTest #test17 stamp: 'AM 11/11/2020 00:06:21'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 00:07:15' prior: 50872310 overrides: 50872069!
accountSummary
	
	| accountSummary |
	
	accountSummary := OrderedCollection new.
	
	accounts do: [ :anAccount | anAccount addTransactionsToAccountSummary: accountSummary ].
	
	accountSummary add:  'Balance = ', self balance printString.
	
	^accountSummary ! !

!testRun: #PortfolioTest #test17 stamp: 'AM 11/11/2020 00:07:17'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/11/2020 00:07:23'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/11/2020 00:07:23'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/11/2020 00:07:23'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/11/2020 00:07:23'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/11/2020 00:07:23'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/11/2020 00:07:23'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/11/2020 00:07:23'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/11/2020 00:07:23'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/11/2020 00:07:23'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/11/2020 00:07:23'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/11/2020 00:07:23'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/11/2020 00:07:23'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/11/2020 00:07:23'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/11/2020 00:07:23'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/11/2020 00:07:23'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AM 11/11/2020 00:07:23'!
FAILURE!

!testRun: #PortfolioTest #test17 stamp: 'AM 11/11/2020 00:07:23'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AM 11/11/2020 00:07:23'!
FAILURE!
!PortfolioTest methodsFor: 'tests - reports' stamp: 'AM 11/11/2020 00:07:55' prior: 50872213!
test16

	| aPortfolio |
	
	aPortfolio := Portfolio new.
	
	self assert: (aPortfolio accountSummary hasEqualElements: { 'Balance = 0' } )! !

!testRun: #PortfolioTest #test16 stamp: 'AM 11/11/2020 00:07:57'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/11/2020 00:07:57'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/11/2020 00:07:57'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/11/2020 00:07:57'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/11/2020 00:07:57'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/11/2020 00:07:57'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/11/2020 00:07:57'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/11/2020 00:07:57'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/11/2020 00:07:57'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/11/2020 00:07:57'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/11/2020 00:07:57'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/11/2020 00:07:57'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/11/2020 00:07:57'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/11/2020 00:07:57'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/11/2020 00:07:57'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/11/2020 00:07:57'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AM 11/11/2020 00:07:57'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'AM 11/11/2020 00:07:57'!
PASSED!
!PortfolioTest methodsFor: 'tests - reports' stamp: 'AM 11/11/2020 00:09:52'!
test18

	| aPortfolio anAccount anotherAccount expectedAccountSummary anotherPortfolio |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	anotherPortfolio := Portfolio new.
	anotherPortfolio add: anAccount.
	anotherPortfolio add: anotherAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	
	self assert: 'Balance = 80' equals:  aPortfolio accountSummary last.
	self assert: (aPortfolio accountSummary hasEqualElements: expectedAccountSummary).! !
!PortfolioTest methodsFor: 'tests - reports' stamp: 'AM 11/11/2020 00:10:09' prior: 50872511!
test18

	| aPortfolio anAccount anotherAccount expectedAccountSummary anotherPortfolio |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	anotherPortfolio := Portfolio new.
	anotherPortfolio add: anAccount.
	anotherPortfolio add: anotherAccount.
	
	aPortfolio add: anotherPortfolio.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	
	self assert: 'Balance = 80' equals:  aPortfolio accountSummary last.
	self assert: (aPortfolio accountSummary hasEqualElements: expectedAccountSummary).! !

!testRun: #PortfolioTest #test18 stamp: 'AM 11/11/2020 00:10:11'!
ERROR!
!Portfolio methodsFor: 'reports' stamp: 'AM 11/11/2020 00:10:27' overrides: 50872334!
addTransactionsToAccountSummary: anOrderedCollection 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'reports' stamp: 'AM 11/11/2020 00:11:05' prior: 50872570 overrides: 50872334!
addTransactionsToAccountSummary: anOrderedCollection 
	
	accounts do: [: anAccount | anAccount addTransactionsToAccountSummary: anOrderedCollection ]! !
!Portfolio methodsFor: 'reports' stamp: 'AM 11/11/2020 00:11:21' prior: 50872576 overrides: 50872334!
addTransactionsToAccountSummary: anAccountSummary 
	
	accounts do: [: anAccount | anAccount addTransactionsToAccountSummary: anAccountSummary ]! !

!testRun: #PortfolioTest #test18 stamp: 'AM 11/11/2020 00:11:24'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/11/2020 00:11:24'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/11/2020 00:11:24'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/11/2020 00:11:24'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/11/2020 00:11:24'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/11/2020 00:11:24'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/11/2020 00:11:24'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/11/2020 00:11:24'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/11/2020 00:11:24'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/11/2020 00:11:24'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/11/2020 00:11:24'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/11/2020 00:11:24'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/11/2020 00:11:24'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/11/2020 00:11:24'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/11/2020 00:11:24'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/11/2020 00:11:24'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AM 11/11/2020 00:11:24'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'AM 11/11/2020 00:11:24'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'AM 11/11/2020 00:11:24'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests - reports' stamp: 'AM 11/11/2020 00:15:23'!
test15EmptyReceptiveAccountShouldHaveZeroBalanceInAccountSummary

	| anEmptyAccount |
	
	anEmptyAccount := ReceptiveAccount new.
	
	self assert: anEmptyAccount accountSummary size equals: 1.
	self assert: anEmptyAccount accountSummary includes: 'Balance = 0'.! !

!methodRemoval: ReceptiveAccountTest #test15 stamp: 'AM 11/11/2020 00:15:23'!
test15

	| anEmptyAccount |
	
	anEmptyAccount := ReceptiveAccount new.
	
	self assert: anEmptyAccount accountSummary size equals: 1.
	self assert: anEmptyAccount accountSummary includes: 'Balance = 0'.!
!ReceptiveAccountTest methodsFor: 'tests - reports' stamp: 'AM 11/11/2020 00:16:22'!
test15EmptyReceptiveAccountsAccountSummaryShouldOnlyHaveZeroBalance

	| anEmptyAccount |
	
	anEmptyAccount := ReceptiveAccount new.
	
	self assert: anEmptyAccount accountSummary size equals: 1.
	self assert: anEmptyAccount accountSummary includes: 'Balance = 0'.! !

!methodRemoval: ReceptiveAccountTest #test15EmptyReceptiveAccountShouldHaveZeroBalanceInAccountSummary stamp: 'AM 11/11/2020 00:16:22'!
test15EmptyReceptiveAccountShouldHaveZeroBalanceInAccountSummary

	| anEmptyAccount |
	
	anEmptyAccount := ReceptiveAccount new.
	
	self assert: anEmptyAccount accountSummary size equals: 1.
	self assert: anEmptyAccount accountSummary includes: 'Balance = 0'.!
!ReceptiveAccountTest methodsFor: 'tests - reports' stamp: 'AM 11/11/2020 00:16:54'!
test15EmptyReceptiveAccountsSummaryAccountShouldOnlyHaveZeroBalance

	| anEmptyAccount |
	
	anEmptyAccount := ReceptiveAccount new.
	
	self assert: anEmptyAccount accountSummary size equals: 1.
	self assert: anEmptyAccount accountSummary includes: 'Balance = 0'.! !

!methodRemoval: ReceptiveAccountTest #test15EmptyReceptiveAccountsAccountSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/11/2020 00:16:54'!
test15EmptyReceptiveAccountsAccountSummaryShouldOnlyHaveZeroBalance

	| anEmptyAccount |
	
	anEmptyAccount := ReceptiveAccount new.
	
	self assert: anEmptyAccount accountSummary size equals: 1.
	self assert: anEmptyAccount accountSummary includes: 'Balance = 0'.!
!ReceptiveAccountTest methodsFor: 'tests - reports' stamp: 'AM 11/11/2020 00:17:30'!
test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance

	| anEmptyAccount |
	
	anEmptyAccount := ReceptiveAccount new.
	
	self assert: anEmptyAccount accountSummary size equals: 1.
	self assert: anEmptyAccount accountSummary includes: 'Balance = 0'.! !

!methodRemoval: ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryAccountShouldOnlyHaveZeroBalance stamp: 'AM 11/11/2020 00:17:30'!
test15EmptyReceptiveAccountsSummaryAccountShouldOnlyHaveZeroBalance

	| anEmptyAccount |
	
	anEmptyAccount := ReceptiveAccount new.
	
	self assert: anEmptyAccount accountSummary size equals: 1.
	self assert: anEmptyAccount accountSummary includes: 'Balance = 0'.!
!ReceptiveAccountTest methodsFor: 'tests - reports' stamp: 'AM 11/11/2020 00:18:28'!
test16AnAccountWithOneTransactionShowsItInSummaryWithAffectedBalance

	| anAccount expectedAccountSummary |
	
	anAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10' with:  'Balance = 10'.
	
	self assert: expectedAccountSummary equals: anAccount accountSummary.! !

!methodRemoval: ReceptiveAccountTest #test16 stamp: 'AM 11/11/2020 00:18:28'!
test16

	| anAccount expectedAccountSummary |
	
	anAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10' with:  'Balance = 10'.
	
	self assert: expectedAccountSummary equals: anAccount accountSummary.!
!ReceptiveAccountTest methodsFor: 'tests - reports' stamp: 'AM 11/11/2020 00:18:56'!
test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance

	| anAccount expectedAccountSummary |
	
	anAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10' with:  'Balance = 10'.
	
	self assert: expectedAccountSummary equals: anAccount accountSummary.! !

!methodRemoval: ReceptiveAccountTest #test16AnAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/11/2020 00:18:56'!
test16AnAccountWithOneTransactionShowsItInSummaryWithAffectedBalance

	| anAccount expectedAccountSummary |
	
	anAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10' with:  'Balance = 10'.
	
	self assert: expectedAccountSummary equals: anAccount accountSummary.!

----QUIT----(11 November 2020 00:21:41) CuisUniversity-4384.image priorSource: 17215021!

----STARTUP---- (11 November 2020 22:34:10) as /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/imagenportfolio2/CuisUniversity-4384.image!


!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/11/2020 22:34:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/11/2020 22:34:25'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests - account summary' stamp: 'AM 11/11/2020 22:40:16'!
test18

	| anEmptyAccount |
	
	anEmptyAccount := ReceptiveAccount new.
	
	self assert: anEmptyAccount netTransfer equals: 0.! !

!testRun: #ReceptiveAccountTest #test18 stamp: 'AM 11/11/2020 22:40:36'!
ERROR!
!Account methodsFor: 'reports' stamp: 'AM 11/11/2020 22:40:51'!
netTransfer
	self shouldBeImplemented.! !
!Account methodsFor: 'reports' stamp: 'AM 11/11/2020 22:41:00' prior: 50872953!
netTransfer
	
	self subclassResponsibility ! !

!testRun: #ReceptiveAccountTest #test18 stamp: 'AM 11/11/2020 22:41:02'!
ERROR!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AM 11/11/2020 22:41:10' overrides: 50872957!
netTransfer
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'AM 11/11/2020 22:41:17' prior: 50872964 overrides: 50872957!
netTransfer
	
	^ 0! !

!testRun: #ReceptiveAccountTest #test18 stamp: 'AM 11/11/2020 22:41:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/11/2020 22:41:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/11/2020 22:41:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/11/2020 22:41:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/11/2020 22:41:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/11/2020 22:41:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/11/2020 22:41:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/11/2020 22:41:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/11/2020 22:41:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/11/2020 22:41:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/11/2020 22:41:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/11/2020 22:41:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/11/2020 22:41:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/11/2020 22:41:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/11/2020 22:41:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/11/2020 22:41:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/11/2020 22:41:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/11/2020 22:41:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'AM 11/11/2020 22:41:19'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests - account summary' stamp: 'AM 11/11/2020 22:43:47'!
test19

	| anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anAccount to: anotherAccount for: 500.
	
	self assert: anAccount netTransfer equals: -500.
	self assert: anotherAccount netTransfer equals: 500.! !

!testRun: #ReceptiveAccountTest #test19 stamp: 'AM 11/11/2020 22:44:01'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AM 11/11/2020 22:44:28' prior: 50872969 overrides: 50872957!
netTransfer
	
	^ self balance! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/11/2020 22:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/11/2020 22:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/11/2020 22:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/11/2020 22:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/11/2020 22:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/11/2020 22:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/11/2020 22:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/11/2020 22:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/11/2020 22:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/11/2020 22:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/11/2020 22:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/11/2020 22:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/11/2020 22:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/11/2020 22:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/11/2020 22:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/11/2020 22:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/11/2020 22:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'AM 11/11/2020 22:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test19 stamp: 'AM 11/11/2020 22:44:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test19 stamp: 'AM 11/11/2020 22:44:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/11/2020 22:44:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/11/2020 22:44:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/11/2020 22:44:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/11/2020 22:44:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/11/2020 22:44:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/11/2020 22:44:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/11/2020 22:44:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/11/2020 22:44:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/11/2020 22:44:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/11/2020 22:44:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/11/2020 22:44:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/11/2020 22:44:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/11/2020 22:44:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/11/2020 22:44:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/11/2020 22:44:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/11/2020 22:44:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/11/2020 22:44:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'AM 11/11/2020 22:44:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test19 stamp: 'AM 11/11/2020 22:44:36'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests - net transfer' stamp: 'AM 11/11/2020 22:45:27'!
test20

	| anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anAccount to: anotherAccount for: 500.
	Deposit register: 50 on: anAccount.
	Withdraw register: 20 on: anAccount.
	
	self assert: anAccount netTransfer equals: -500.
	! !
!ReceptiveAccountTest methodsFor: 'tests - net transfer' stamp: 'AM 11/11/2020 22:46:08' prior: 50873207!
test20

	| anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anotherAccount to: anAccount for: 500.
	Deposit register: 50 on: anAccount.
	Withdraw register: 20 on: anAccount.
	
	self assert: anAccount netTransfer equals: -500.
	! !

!testRun: #ReceptiveAccountTest #test20 stamp: 'AM 11/11/2020 22:46:10'!
FAILURE!
!ReceptiveAccount methodsFor: 'reports' stamp: 'AM 11/11/2020 22:50:15' prior: 50873059 overrides: 50872957!
netTransfer
	
	^ transactions inject: 0 into: [:currentTransferNet :aTransaction | | result |
		result := currentTransferNet.
		(aTransaction isKindOf: ReceivingTransferComponent) ifTrue: [ result := currentTransferNet + aTransaction value].
		(aTransaction isKindOf: SendingTransferComponent) ifTrue: [ result := currentTransferNet - aTransaction value].
		result. 
		 ]! !

!testRun: #ReceptiveAccountTest #test20 stamp: 'AM 11/11/2020 22:50:19'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests - net transfer' stamp: 'AM 11/11/2020 22:50:31' prior: 50873220!
test20

	| anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anotherAccount to: anAccount for: 500.
	Deposit register: 50 on: anAccount.
	Withdraw register: 20 on: anAccount.
	
	self assert: anAccount netTransfer equals: 500.
	! !

!testRun: #ReceptiveAccountTest #test20 stamp: 'AM 11/11/2020 22:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/11/2020 22:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/11/2020 22:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/11/2020 22:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/11/2020 22:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/11/2020 22:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/11/2020 22:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/11/2020 22:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/11/2020 22:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/11/2020 22:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/11/2020 22:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/11/2020 22:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/11/2020 22:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/11/2020 22:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/11/2020 22:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/11/2020 22:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/11/2020 22:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/11/2020 22:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'AM 11/11/2020 22:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test19 stamp: 'AM 11/11/2020 22:50:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'AM 11/11/2020 22:50:33'!
PASSED!

Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #Report category: 'Portfolio' stamp: 'AM 11/11/2020 22:51:24'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

Report subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #AccountSummary category: 'Portfolio' stamp: 'AM 11/11/2020 22:51:39'!
Report subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

Report subclass: #NetTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #NetTransfer category: 'Portfolio' stamp: 'AM 11/11/2020 22:51:46'!
Report subclass: #NetTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!PortfolioTest methodsFor: 'tests - account summary' stamp: 'AM 11/11/2020 23:00:36'!
test19

	| aPortfolio |
	
	aPortfolio := Portfolio new.
	
	self assert: aPortfolio netTransfer equals: 0.! !

!testRun: #PortfolioTest #test19 stamp: 'AM 11/11/2020 23:00:46'!
ERROR!
!Portfolio methodsFor: 'report' stamp: 'AM 11/11/2020 23:00:59' overrides: 50872957!
netTransfer
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'report' stamp: 'AM 11/11/2020 23:01:02' prior: 50873383 overrides: 50872957!
netTransfer
	
	^0! !

!testRun: #PortfolioTest #test19 stamp: 'AM 11/11/2020 23:01:03'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/11/2020 23:01:03'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/11/2020 23:01:03'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/11/2020 23:01:03'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/11/2020 23:01:03'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/11/2020 23:01:03'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/11/2020 23:01:03'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/11/2020 23:01:03'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/11/2020 23:01:03'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/11/2020 23:01:03'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/11/2020 23:01:03'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/11/2020 23:01:03'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/11/2020 23:01:03'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/11/2020 23:01:03'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/11/2020 23:01:03'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/11/2020 23:01:03'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AM 11/11/2020 23:01:03'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'AM 11/11/2020 23:01:03'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'AM 11/11/2020 23:01:03'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'AM 11/11/2020 23:01:03'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'AM 11/11/2020 23:01:06'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/11/2020 23:01:06'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/11/2020 23:01:06'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/11/2020 23:01:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/11/2020 23:01:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/11/2020 23:01:06'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/11/2020 23:01:06'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/11/2020 23:01:06'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/11/2020 23:01:06'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/11/2020 23:01:06'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/11/2020 23:01:06'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/11/2020 23:01:06'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/11/2020 23:01:06'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/11/2020 23:01:06'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/11/2020 23:01:06'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/11/2020 23:01:06'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AM 11/11/2020 23:01:06'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'AM 11/11/2020 23:01:06'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'AM 11/11/2020 23:01:06'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'AM 11/11/2020 23:01:06'!
PASSED!
!PortfolioTest methodsFor: 'tests - account summary' stamp: 'AM 11/11/2020 23:01:15'!
test20

	| aPortfolio anAccount anotherAccount expectedAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
	
	self assert: 'Balance = 80' equals:  aPortfolio accountSummary last.
	self assert: (aPortfolio accountSummary hasEqualElements: expectedAccountSummary).! !
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/11/2020 23:03:28' prior: 50873530!
test20

	| aPortfolio anAccount anotherAccount expectedAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anAccount to: anotherAccount for: 100.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
	
	self assert: 'Balance = 80' equals:  aPortfolio accountSummary last.
	self assert: (aPortfolio accountSummary hasEqualElements: expectedAccountSummary).! !
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/11/2020 23:04:05' prior: 50873556!
test20

	| aPortfolio anAccount anotherAccount expectedAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anAccount to: anotherAccount for: 100.
	
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
	
	self assert: 'Balance = 80' equals:  aPortfolio accountSummary last.
	self assert: (aPortfolio accountSummary hasEqualElements: expectedAccountSummary).! !
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/11/2020 23:07:21' prior: 50873580!
test20

	| aPortfolio anAccount anotherAccount |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anAccount to: anotherAccount for: 100.
	
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
	
	self assert: -50 equals: aPortfolio netTransfer.! !

!testRun: #PortfolioTest #test20 stamp: 'AM 11/11/2020 23:07:47'!
FAILURE!
!Portfolio methodsFor: 'report' stamp: 'AM 11/11/2020 23:10:25' prior: 50873388 overrides: 50872957!
netTransfer
	
	^accounts sum: [:anAccount | anAccount netTransfer ] ifEmpty: [ 0 ].! !

!testRun: #PortfolioTest #test20 stamp: 'AM 11/11/2020 23:10:31'!
FAILURE!
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/11/2020 23:11:04' prior: 50873599!
test20

	| aPortfolio anAccount anotherAccount |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anAccount to: anotherAccount for: 100.
	
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
	
	self assert: 50 equals: aPortfolio netTransfer.! !

!testRun: #PortfolioTest #test20 stamp: 'AM 11/11/2020 23:11:24'!
FAILURE!
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/11/2020 23:12:39' prior: 50873626!
test20

	| aPortfolio anAccount anotherAccount yetAnother |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	yetAnother := ReceptiveAccount new.
	
	Transfer from: yetAnother to: anAccount for: 40.
	
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anAccount to: anotherAccount for: 100.
	
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
	
	self assert: 50 equals: aPortfolio netTransfer.! !
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/11/2020 23:12:50' prior: 50873644!
test20

	| aPortfolio anAccount anotherAccount yetAnother |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	yetAnother := ReceptiveAccount new.
	
	Transfer from: yetAnother to: anAccount for: 40.
	
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anAccount to: anotherAccount for: 100.
	
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
	
	self assert: 40 equals: aPortfolio netTransfer.! !

!testRun: #PortfolioTest #test20 stamp: 'AM 11/11/2020 23:12:52'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/11/2020 23:12:52'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/11/2020 23:12:52'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/11/2020 23:12:52'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/11/2020 23:12:52'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/11/2020 23:12:52'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/11/2020 23:12:52'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/11/2020 23:12:52'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/11/2020 23:12:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/11/2020 23:12:52'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/11/2020 23:12:52'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/11/2020 23:12:52'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/11/2020 23:12:52'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/11/2020 23:12:52'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/11/2020 23:12:52'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/11/2020 23:12:52'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AM 11/11/2020 23:12:52'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'AM 11/11/2020 23:12:52'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'AM 11/11/2020 23:12:52'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'AM 11/11/2020 23:12:52'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AM 11/11/2020 23:12:52'!
PASSED!
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/11/2020 23:13:48'!
test21

	| aPortfolio anAccount anotherAccount anotherPortfolio |
	
	aPortfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anotherAccount to: anAccount for: 100.
	
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
	
	self assert: 40 equals: aPortfolio netTransfer.! !
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/11/2020 23:14:17' prior: 50873749!
test21

	| aPortfolio anAccount anotherAccount anotherPortfolio |
	
	aPortfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anotherAccount to: anAccount for: 100.
	
	anotherPortfolio add: anAccount.
	aPortfolio add: anotherPortfolio.
	aPortfolio add: anotherAccount.
	
	self assert: 40 equals: aPortfolio netTransfer.! !
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/11/2020 23:14:20' prior: 50873765!
test21

	| aPortfolio anAccount anotherAccount anotherPortfolio |
	
	aPortfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anotherAccount to: anAccount for: 100.
	
	anotherPortfolio add: anAccount.
	aPortfolio add: anotherPortfolio.
	aPortfolio add: anotherAccount.
	
	self assert: 0 equals: aPortfolio netTransfer.! !

!testRun: #PortfolioTest #test21 stamp: 'AM 11/11/2020 23:14:22'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/11/2020 23:14:22'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/11/2020 23:14:22'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/11/2020 23:14:22'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/11/2020 23:14:22'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/11/2020 23:14:22'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/11/2020 23:14:22'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/11/2020 23:14:22'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/11/2020 23:14:22'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/11/2020 23:14:22'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/11/2020 23:14:22'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/11/2020 23:14:22'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/11/2020 23:14:22'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/11/2020 23:14:22'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/11/2020 23:14:22'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/11/2020 23:14:22'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AM 11/11/2020 23:14:22'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'AM 11/11/2020 23:14:22'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'AM 11/11/2020 23:14:22'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'AM 11/11/2020 23:14:22'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AM 11/11/2020 23:14:22'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AM 11/11/2020 23:14:22'!
PASSED!

!methodRemoval: PortfolioTest #test20 stamp: 'AM 11/11/2020 23:16:21'!
test20

	| aPortfolio anAccount anotherAccount yetAnother |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	yetAnother := ReceptiveAccount new.
	
	Transfer from: yetAnother to: anAccount for: 40.
	
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anAccount to: anotherAccount for: 100.
	
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
	
	self assert: 40 equals: aPortfolio netTransfer.!

!methodRemoval: PortfolioTest #test21 stamp: 'AM 11/11/2020 23:16:22'!
test21

	| aPortfolio anAccount anotherAccount anotherPortfolio |
	
	aPortfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anotherAccount to: anAccount for: 100.
	
	anotherPortfolio add: anAccount.
	aPortfolio add: anotherPortfolio.
	aPortfolio add: anotherAccount.
	
	self assert: 0 equals: aPortfolio netTransfer.!
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/11/2020 23:16:55' prior: 50873374!
test19

	| aPortfolio anAccount |
	
	anAccount := ReceptiveAccount new.
	aPortfolio := Portfolio with: anAccount.
	
	self assert: aPortfolio netTransfer equals: 0.! !
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/11/2020 23:17:47' prior: 50873904!
test19

	| aPortfolio anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	aPortfolio := Portfolio with: anAccount.
	
	
	
	self assert: aPortfolio netTransfer equals: 0.! !
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/11/2020 23:18:10' prior: 50873913!
test19

	| aPortfolio anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount for: 100.
	aPortfolio := Portfolio with: anAccount.
	
	
	
	self assert: aPortfolio netTransfer equals: 0.! !
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/11/2020 23:18:11' prior: 50873924!
test19

	| aPortfolio anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount for: 100.
	
	aPortfolio := Portfolio with: anAccount.
	
	
	
	self assert: aPortfolio netTransfer equals: 0.! !
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/11/2020 23:18:15' prior: 50873936!
test19

	| aPortfolio anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount for: 100.
	
	aPortfolio := Portfolio with: anAccount.
	
	
	
	self assert: aPortfolio netTransfer equals: -100.! !
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/11/2020 23:00:36' prior: 50873948!
test19

	| aPortfolio |
	
	aPortfolio := Portfolio new.
	
	self assert: aPortfolio netTransfer equals: 0.! !
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/11/2020 23:18:41'!
test20

	| aPortfolio anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount for: 100.
	
	aPortfolio := Portfolio with: anAccount.
	
	
	
	self assert: aPortfolio netTransfer equals: -100.! !
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/11/2020 23:19:07'!
test21

	| aPortfolio anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount for: 100.
	
	aPortfolio := Portfolio with: anAccount with: anotherAccount.
	
	
	
	self assert: aPortfolio netTransfer equals: -100.! !
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/11/2020 23:19:13' prior: 50873979!
test21

	| aPortfolio anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount for: 100.
	
	aPortfolio := Portfolio with: anAccount with: anotherAccount.
	
	
	
	self assert: aPortfolio netTransfer equals: 0.! !

!testRun: #PortfolioTest #test21 stamp: 'AM 11/11/2020 23:19:15'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/11/2020 23:19:15'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/11/2020 23:19:15'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/11/2020 23:19:15'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/11/2020 23:19:15'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/11/2020 23:19:15'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/11/2020 23:19:15'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/11/2020 23:19:15'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/11/2020 23:19:15'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/11/2020 23:19:15'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/11/2020 23:19:15'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/11/2020 23:19:15'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/11/2020 23:19:15'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/11/2020 23:19:15'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/11/2020 23:19:15'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/11/2020 23:19:15'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AM 11/11/2020 23:19:15'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'AM 11/11/2020 23:19:15'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'AM 11/11/2020 23:19:15'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'AM 11/11/2020 23:19:15'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AM 11/11/2020 23:19:15'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AM 11/11/2020 23:19:15'!
PASSED!
!AccountSummary class methodsFor: 'nil' stamp: 'AM 11/11/2020 23:22:08'!
for: anAccount

	anAccount reportFor: self.! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:23:06'!
reportWhenReceptiveAccount: aReceptiveAccount
	
	! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:23:12'!
reportWhenPortfolio: aReceptiveAccount
	
	! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:23:29'!
reportWhenWithdraw: aReceptiveAccount
	
	! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:23:34'!
reportWhenDeposit: aReceptiveAccount
	
	! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:23:39' prior: 50874088!
reportWhenPortfolio: aPortfolio
	
	! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:23:45' prior: 50874098!
reportWhenDeposit: aDeposit
	
	! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:23:51' prior: 50874093!
reportWhenWithdraw: aWithdraw
	
	! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:25:00'!
reportWhenSendingTransferComponent: aSendingTransferComponent
	
	! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:25:10'!
reportWhenReceivingTransferComponent: aReceivingTransferComponent
	
	! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:26:41' prior: 50874078!
for: anAccount

	| accountSummary |
	accountSummary := OrderedCollection new.
	anAccount reportFor: self.
	^ accountSummary.! !

AccountSummary class
	instanceVariableNames: 'accountSummary'!

AccountSummary class
	instanceVariableNames: 'accountSummary'!

AccountSummary class
	instanceVariableNames: ''!

!classDefinition: 'AccountSummary class' category: 'Portfolio' stamp: 'AM 11/11/2020 23:27:32'!
AccountSummary class
	instanceVariableNames: ''!

AccountSummary!

AccountSummary class!

!classDefinition: 'AccountSummary class' category: 'Portfolio' stamp: 'AM 11/11/2020 23:29:15'!
AccountSummary class
	instanceVariableNames: 'account_summary'!
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:29:11' prior: 50874128!
for: anAccount

	account_summary := OrderedCollection new.
	anAccount reportFor: self.
	^ account_summary.! !

!classDefinition: 'AccountSummary class' category: 'Portfolio' stamp: 'AM 11/11/2020 23:29:22'!
AccountSummary class
	instanceVariableNames: 'accountSummary'!
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:29:22' prior: 50874152!
for: anAccount

	accountSummary := OrderedCollection new.
	anAccount reportFor: self.
	^ accountSummary.! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:29:29' prior: 50874164!
for: anAccount

	accountSummary := OrderedCollection new.
	anAccount reportFor: self.
	
	^ accountSummary.! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:30:21' prior: 50874108!
reportWhenDeposit: aDeposit
	
	accountSummary add: 'Dep�sito por ', aDeposit value printString
	
	! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:31:34' prior: 50874113!
reportWhenWithdraw: aWithdraw

	accountSummary add: 'Extracci�n por ', aWithdraw value printString 
	
	! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:33:30' prior: 50874185!
reportWhenWithdraw: aWithdraw

	accountSummary add: 'Extracci�n por ', aWithdraw value printString.
	
	
	! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:34:13' prior: 50874117!
reportWhenSendingTransferComponent: aSendingTransferComponent
 
	accountSummary add: 'Salida por transferencia de ', aSendingTransferComponent value printString
	
	! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:35:15' prior: 50874083!
reportWhenReceptiveAccount: aReceptiveAccount
	
	aReceptiveAccount transactions do: [ :aTransaction | aTransaction addToAccountSummary: accountSummary ].
	accountSummary add:  'Balance = ', self balance printString.
	
	! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:35:41' prior: 50874208!
reportWhenReceptiveAccount: aReceptiveAccount
	
	aReceptiveAccount transactions do: [ :aTransaction | aTransaction reportFor: self ].
	accountSummary add:  'Balance = ', self balance printString.
	
	! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:36:51' prior: 50874219!
reportWhenReceptiveAccount: aReceptiveAccount
	
	aReceptiveAccount transactions do: [ :aTransaction | aTransaction reportFor: self ].
	
	! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:37:00' prior: 50874171!
for: anAccount

	accountSummary := OrderedCollection new.
	
	anAccount reportFor: self.
	accountSummary add:  'Balance = ', self balance printString.
	
	^ accountSummary.! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:37:03' prior: 50874237!
for: anAccount

	accountSummary := OrderedCollection new.
	
	anAccount reportFor: self.
	
	accountSummary add:  'Balance = ', self balance printString.
	
	^ accountSummary.! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:37:54' prior: 50874103!
reportWhenPortfolio: aPortfolio

	aPortfolio accounts do: [ :anAccount | anAccount addTransactionsToAccountSummary: accountSummary ].
	
	! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:38:22' prior: 50874255!
reportWhenPortfolio: aPortfolio

	aPortfolio accounts do: [ :anAccount | anAccount reportFor: self ].
	
	! !
!Portfolio methodsFor: 'nil' stamp: 'AM 11/11/2020 23:39:47'!
accounts
	^ accounts copy! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:40:17' prior: 50874122!
reportWhenReceivingTransferComponent: aReceivingTransferComponent
 
	accountSummary add: 'Salida por transferencia de ', aReceivingTransferComponent value printString
	
	! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:40:20' prior: 50874274!
reportWhenReceivingTransferComponent: aReceivingTransferComponent
 
	accountSummary add: 'Entrada por transferencia de ', aReceivingTransferComponent value printString
	
	! !
!Portfolio methodsFor: 'nil' stamp: 'AM 11/11/2020 23:41:59'!
reportFor: anAccountSummary

	anAccountSummary reportWhenPortfolio: self.! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'AM 11/11/2020 23:42:35'!
reportFor: anAccountSummary

	anAccountSummary reportWhenReceptiveAccount: self.! !
!ReceptiveAccountTest methodsFor: 'tests - account summary' stamp: 'AM 11/11/2020 23:43:23' prior: 50872727!
test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance

	| anEmptyAccount |
	
	anEmptyAccount := ReceptiveAccount new.
	
	self assert: (AccountSummary for: anEmptyAccount) size equals: 1.
	self assert: (AccountSummary for: anEmptyAccount) includes: 'Balance = 0'.! !

!testRun: #ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/11/2020 23:43:26'!
ERROR!
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:45:03' prior: 50874246!
for: anAccount

	accountSummary := OrderedCollection new.
	
	anAccount reportFor: self.
	
	accountSummary add:  'Balance = ', anAccount balance printString.
	
	^ accountSummary.! !

!testRun: #ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/11/2020 23:45:05'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests - account summary' stamp: 'AM 11/11/2020 23:45:27' prior: 50872777!
test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance

	| anAccount expectedAccountSummary |
	
	anAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10' with:  'Balance = 10'.
	
	self assert: expectedAccountSummary equals: (AccountSummary for: anAccount).! !

!testRun: #ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/11/2020 23:45:28'!
ERROR!

!testRun: #ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/11/2020 23:45:37'!
ERROR!
!AccountTransaction methodsFor: 'reports' stamp: 'AM 11/11/2020 23:45:50'!
reportFor: aClass 
	self shouldBeImplemented.! !
!AccountTransaction methodsFor: 'reports' stamp: 'AM 11/11/2020 23:46:23' prior: 50874358!
reportFor: anAccountSummary

	anAccountSummary reportWhenDeposit: self.
	
	! !

!testRun: #ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/11/2020 23:46:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/11/2020 23:46:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/11/2020 23:46:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/11/2020 23:46:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/11/2020 23:46:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/11/2020 23:46:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/11/2020 23:46:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/11/2020 23:46:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/11/2020 23:46:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/11/2020 23:46:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/11/2020 23:46:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/11/2020 23:46:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/11/2020 23:46:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/11/2020 23:46:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/11/2020 23:46:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/11/2020 23:46:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/11/2020 23:46:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/11/2020 23:46:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'AM 11/11/2020 23:46:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test19 stamp: 'AM 11/11/2020 23:46:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'AM 11/11/2020 23:46:25'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests - account summary' stamp: 'AM 11/11/2020 23:46:52' prior: 50871495!
test17

	| anAccount expectedAccountSummary anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	Withdraw register: 40  on: anAccount.
	Transfer from: anAccount to: anotherAccount for: 100.
	Transfer from: anotherAccount to: anAccount for: 50.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10'
												with: 'Extracci�n por 40'
												with: 'Salida por transferencia de 100'
												with: 'Entrada por transferencia de 50'
												with: 'Balance = -80'.
												
	self assert: ((AccountSummary for: anAccount) hasEqualElements: expectedAccountSummary).
	self assert: (AccountSummary for: anAccount) last equals: 'Balance = -80'.
	! !

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/11/2020 23:46:54'!
FAILURE!
!AccountTransaction methodsFor: 'reports' stamp: 'AM 11/11/2020 23:47:25' prior: 50874363!
reportFor: anAccountSummary

	self subclassResponsibility 
	
	! !
!Deposit methodsFor: 'reports' stamp: 'AM 11/11/2020 23:47:52' overrides: 50874477!
reportFor: anAccountSummary

	anAccountSummary reportWhenDeposit: self.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/11/2020 23:47:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/11/2020 23:47:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/11/2020 23:47:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/11/2020 23:47:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/11/2020 23:47:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/11/2020 23:47:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/11/2020 23:47:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/11/2020 23:47:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/11/2020 23:47:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/11/2020 23:47:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/11/2020 23:47:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/11/2020 23:47:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/11/2020 23:47:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/11/2020 23:47:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/11/2020 23:47:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/11/2020 23:47:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/11/2020 23:47:57'!
ERROR!

!testRun: #ReceptiveAccountTest #test18 stamp: 'AM 11/11/2020 23:47:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test19 stamp: 'AM 11/11/2020 23:47:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'AM 11/11/2020 23:47:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/11/2020 23:47:57'!
ERROR!
!Withdraw methodsFor: 'reports' stamp: 'AM 11/11/2020 23:48:08' overrides: 50874477!
reportFor: aClass 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'reports' stamp: 'AM 11/11/2020 23:48:30' prior: 50874563 overrides: 50874477!
reportFor: anAccountSummary

	anAccountSummary reportWhenWithdraw: self.! !

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/11/2020 23:48:31'!
ERROR!
!SendingTransferComponent methodsFor: 'reports' stamp: 'AM 11/11/2020 23:48:44' overrides: 50874477!
reportFor: aClass 
	self shouldBeImplemented.! !
!SendingTransferComponent methodsFor: 'reports' stamp: 'AM 11/11/2020 23:49:31' prior: 50874577 overrides: 50874477!
reportFor: anAccountSummary

	^ anAccountSummary reportWhenSendingTransferComponent: self.! !

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/11/2020 23:49:32'!
ERROR!
!ReceivingTransferComponent methodsFor: 'reports' stamp: 'AM 11/11/2020 23:49:42' overrides: 50874477!
reportFor: aClass 
	self shouldBeImplemented.! !
!ReceivingTransferComponent methodsFor: 'reports' stamp: 'AM 11/11/2020 23:50:03' prior: 50874592 overrides: 50874477!
reportFor: anAccountSummary
	
	anAccountSummary reportWhenReceivingTransferComponent: self.! !

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/11/2020 23:50:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/11/2020 23:50:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/11/2020 23:50:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/11/2020 23:50:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/11/2020 23:50:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/11/2020 23:50:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/11/2020 23:50:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/11/2020 23:50:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/11/2020 23:50:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/11/2020 23:50:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/11/2020 23:50:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/11/2020 23:50:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/11/2020 23:50:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/11/2020 23:50:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/11/2020 23:50:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/11/2020 23:50:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/11/2020 23:50:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/11/2020 23:50:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'AM 11/11/2020 23:50:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test19 stamp: 'AM 11/11/2020 23:50:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'AM 11/11/2020 23:50:10'!
PASSED!
!PortfolioTest methodsFor: 'tests - account summary' stamp: 'AM 11/11/2020 23:50:36' prior: 50872439!
test16

	| aPortfolio |
	
	aPortfolio := Portfolio new.
	
	self assert: ((AccountSummary for: aPortfolio) hasEqualElements: { 'Balance = 0' } )! !

!testRun: #PortfolioTest #test16 stamp: 'AM 11/11/2020 23:50:37'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/11/2020 23:50:37'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/11/2020 23:50:37'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/11/2020 23:50:37'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/11/2020 23:50:37'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/11/2020 23:50:37'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/11/2020 23:50:37'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/11/2020 23:50:37'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/11/2020 23:50:37'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/11/2020 23:50:37'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/11/2020 23:50:37'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/11/2020 23:50:37'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/11/2020 23:50:37'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/11/2020 23:50:37'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/11/2020 23:50:37'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/11/2020 23:50:37'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AM 11/11/2020 23:50:37'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'AM 11/11/2020 23:50:37'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'AM 11/11/2020 23:50:37'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'AM 11/11/2020 23:50:37'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AM 11/11/2020 23:50:37'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AM 11/11/2020 23:50:37'!
PASSED!
!PortfolioTest methodsFor: 'tests - account summary' stamp: 'AM 11/11/2020 23:51:05' prior: 50872137!
test17

	| aPortfolio anAccount anotherAccount expectedAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
	
	self assert: 'Balance = 80' equals:  aPortfolio accountSummary last.
	self assert: ((AccountSummary for: aPortfolio) hasEqualElements: expectedAccountSummary).! !
!PortfolioTest methodsFor: 'tests - account summary' stamp: 'AM 11/11/2020 23:51:17' prior: 50874762!
test17

	| aPortfolio anAccount anotherAccount expectedAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
	
	self assert: 'Balance = 80' equals: (AccountSummary for: aPortfolio) last.
	self assert: ((AccountSummary for: aPortfolio) hasEqualElements: expectedAccountSummary).! !

!testRun: #PortfolioTest #test17 stamp: 'AM 11/11/2020 23:51:19'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/11/2020 23:51:19'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/11/2020 23:51:19'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/11/2020 23:51:19'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/11/2020 23:51:19'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/11/2020 23:51:19'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/11/2020 23:51:19'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/11/2020 23:51:19'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/11/2020 23:51:19'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/11/2020 23:51:19'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/11/2020 23:51:19'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/11/2020 23:51:19'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/11/2020 23:51:19'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/11/2020 23:51:19'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/11/2020 23:51:19'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/11/2020 23:51:19'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AM 11/11/2020 23:51:19'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'AM 11/11/2020 23:51:19'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'AM 11/11/2020 23:51:19'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'AM 11/11/2020 23:51:19'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AM 11/11/2020 23:51:19'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AM 11/11/2020 23:51:19'!
PASSED!
!PortfolioTest methodsFor: 'tests - account summary' stamp: 'AM 11/11/2020 23:51:34' prior: 50872539!
test18

	| aPortfolio anAccount anotherAccount expectedAccountSummary anotherPortfolio |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	anotherPortfolio := Portfolio new.
	anotherPortfolio add: anAccount.
	anotherPortfolio add: anotherAccount.
	
	aPortfolio add: anotherPortfolio.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	
	self assert: 'Balance = 80' equals:  (AccountSummary for: aPortfolio) last.
	self assert: ((AccountSummary for: aPortfolio) hasEqualElements: expectedAccountSummary).! !

!testRun: #PortfolioTest #test18 stamp: 'AM 11/11/2020 23:51:36'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/11/2020 23:51:36'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/11/2020 23:51:36'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/11/2020 23:51:36'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/11/2020 23:51:36'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/11/2020 23:51:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/11/2020 23:51:36'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/11/2020 23:51:36'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/11/2020 23:51:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/11/2020 23:51:36'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/11/2020 23:51:36'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/11/2020 23:51:36'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/11/2020 23:51:36'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/11/2020 23:51:36'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/11/2020 23:51:36'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/11/2020 23:51:36'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AM 11/11/2020 23:51:36'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'AM 11/11/2020 23:51:36'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'AM 11/11/2020 23:51:36'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'AM 11/11/2020 23:51:36'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AM 11/11/2020 23:51:36'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AM 11/11/2020 23:51:36'!
PASSED!

!methodRemoval: Account #accountSummary stamp: 'AM 11/11/2020 23:52:06'!
accountSummary

	self subclassResponsibility !

!methodRemoval: Account #addTransactionsToAccountSummary: stamp: 'AM 11/11/2020 23:52:15'!
addTransactionsToAccountSummary: anAccountSummary 
	
	self subclassResponsibility !

!methodRemoval: Portfolio #accountSummary stamp: 'AM 11/11/2020 23:52:28'!
accountSummary
	
	| accountSummary |
	
	accountSummary := OrderedCollection new.
	
	accounts do: [ :anAccount | anAccount addTransactionsToAccountSummary: accountSummary ].
	
	accountSummary add:  'Balance = ', self balance printString.
	
	^accountSummary !

!methodRemoval: ReceptiveAccount #accountSummary stamp: 'AM 11/11/2020 23:52:42'!
accountSummary
	
	| accountSummary |
	
	accountSummary := OrderedCollection new.
	
	transactions do: [ :aTransaction | aTransaction addToAccountSummary: accountSummary ].
	accountSummary add:  'Balance = ', self balance printString.
	
	^ accountSummary !

!methodRemoval: Deposit #addToAccountSummary: stamp: 'AM 11/11/2020 23:52:52'!
addToAccountSummary: anAccountSummary 
	^ anAccountSummary add: 'Dep�sito por ', value printString!

!methodRemoval: AccountTransaction #addToAccountSummary: stamp: 'AM 11/11/2020 23:52:56'!
addToAccountSummary: anAccountSummary
	
	self subclassResponsibility !

!methodRemoval: ReceptiveAccount #addTransactionsToAccountSummary: stamp: 'AM 11/11/2020 23:53:04'!
addTransactionsToAccountSummary: anAccountSummary 
	
	transactions do: [ :aTransaction | aTransaction addToAccountSummary: anAccountSummary ].!

!methodRemoval: ReceivingTransferComponent #addToAccountSummary: stamp: 'AM 11/11/2020 23:53:14'!
addToAccountSummary: anAccountSummary

	anAccountSummary add: 'Entrada por transferencia de ', self value printString !

!methodRemoval: SendingTransferComponent #addToAccountSummary: stamp: 'AM 11/11/2020 23:53:18'!
addToAccountSummary: anAccountSummary
 
	anAccountSummary add: 'Salida por transferencia de ', self value printString!

!methodRemoval: Withdraw #addToAccountSummary: stamp: 'AM 11/11/2020 23:53:21'!
addToAccountSummary: anAccountSummary
	
	^ anAccountSummary add: 'Extracci�n por ', value printString !
!Report class methodsFor: 'nil' stamp: 'AM 11/11/2020 23:55:12'!
for: anAccount

	self subclassResponsibility! !
!Report class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:55:22'!
reportWhenDeposit: aDeposit

	self subclassResponsibility! !
!Report class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:55:28'!
reportWhenPortfolio: aPortfolio

	self subclassResponsibility! !
!Report class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:55:34'!
reportWhenReceivingTransferComponent: aReceivingTransferComponent

	self subclassResponsibility! !
!Report class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:55:40'!
reportWhenReceptiveAccount: aReceptiveAccount

	self subclassResponsibility! !
!Report class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:55:48'!
reportWhenSendingTransferComponent: aSendingTransferComponent

	self subclassResponsibility! !
!Report class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:55:54'!
reportWhenWithdraw: aWithdraw

	self subclassResponsibility! !
!ReceptiveAccountTest methodsFor: 'tests - net transfer' stamp: 'AM 11/11/2020 23:56:29' prior: 50872944!
test18

	| anEmptyAccount |
	
	anEmptyAccount := ReceptiveAccount new.
	
	self assert: (NetTransfer for: anEmptyAccount) equals: 0.! !

!testRun: #ReceptiveAccountTest #test18 stamp: 'AM 11/11/2020 23:56:31'!
ERROR!
!NetTransfer class methodsFor: 'aa' stamp: 'AM 11/11/2020 23:56:48' overrides: 50875058!
for: aReceptiveAccount 
	self shouldBeImplemented.! !
!NetTransfer class methodsFor: 'aa' stamp: 'AM 11/11/2020 23:57:37' prior: 50875106 overrides: 50875058!
for: anAccount

	| netTransfer |
	netTransfer := 0.
	anAccount reportFor: self. 
	
	! !
!NetTransfer class methodsFor: 'aa' stamp: 'AM 11/11/2020 23:57:47' prior: 50875111 overrides: 50875058!
for: anAccount

	| netTransfer |
	netTransfer := 0.
	anAccount reportFor: self. 
	^ netTransfer 
	
	! !

!testRun: #ReceptiveAccountTest #test18 stamp: 'AM 11/11/2020 23:57:50'!
ERROR!
!NetTransfer class methodsFor: 'aaa' stamp: 'AM 11/11/2020 23:58:00' overrides: 50875079!
reportWhenReceptiveAccount: aReceptiveAccount 
	self shouldBeImplemented.! !
!NetTransfer class methodsFor: 'aaa' stamp: 'AM 11/11/2020 23:58:43' prior: 50875127 overrides: 50875079!
reportWhenReceptiveAccount: aReceptiveAccount 
	
	aReceptiveAccount transactions do: [:aTransaction | aTransaction reportFor: self ]! !

!testRun: #ReceptiveAccountTest #test18 stamp: 'AM 11/11/2020 23:58:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/11/2020 23:58:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/11/2020 23:58:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/11/2020 23:58:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/11/2020 23:58:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/11/2020 23:58:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/11/2020 23:58:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/11/2020 23:58:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/11/2020 23:58:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/11/2020 23:58:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/11/2020 23:58:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/11/2020 23:58:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/11/2020 23:58:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/11/2020 23:58:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/11/2020 23:58:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/11/2020 23:58:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/11/2020 23:58:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/11/2020 23:58:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'AM 11/11/2020 23:58:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test19 stamp: 'AM 11/11/2020 23:58:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'AM 11/11/2020 23:58:44'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests - net transfer' stamp: 'AM 11/11/2020 23:59:02' prior: 50873044!
test19

	| anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anAccount to: anotherAccount for: 500.
	
	self assert:(NetTransfer for: anAccount) equals: -500.
	self assert: anotherAccount netTransfer equals: 500.! !
!ReceptiveAccountTest methodsFor: 'tests - net transfer' stamp: 'AM 11/11/2020 23:59:09' prior: 50875217!
test19

	| anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anAccount to: anotherAccount for: 500.
	
	self assert:(NetTransfer for: anAccount) equals: -500.
	self assert: (NetTransfer for: anAccount) equals: 500.! !

!testRun: #ReceptiveAccountTest #test19 stamp: 'AM 11/11/2020 23:59:11'!
ERROR!
!NetTransfer class methodsFor: 'as yet unclassified' stamp: 'AM 11/11/2020 23:59:22' overrides: 50875084!
reportWhenSendingTransferComponent: aSendingTransferComponent 
	self shouldBeImplemented.! !
!NetTransfer class methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:00:00' prior: 50875245 overrides: 50875084!
reportWhenSendingTransferComponent: aSendingTransferComponent 
	
	| netTransfer |
	netTransfer := netTransfer - aSendingTransferComponent value! !

!classDefinition: 'NetTransfer class' category: 'Portfolio' stamp: 'AM 11/12/2020 00:00:44'!
NetTransfer class
	instanceVariableNames: 'sd'!

!classDefinition: 'NetTransfer class' category: 'Portfolio' stamp: 'AM 11/12/2020 00:00:46'!
NetTransfer class
	instanceVariableNames: 'sd netTransfera'!
!NetTransfer class methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:00:42' prior: 50875252 overrides: 50875084!
reportWhenSendingTransferComponent: aSendingTransferComponent 
	
	sd.
	netTransfera := netTransfera + aSendingTransferComponent value! !
!NetTransfer class methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:01:01' prior: 50875270 overrides: 50875084!
reportWhenSendingTransferComponent: aSendingTransferComponent 
	
	netTransfera := netTransfera + aSendingTransferComponent value! !
!NetTransfer class methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:01:23' prior: 50875279 overrides: 50875084!
reportWhenSendingTransferComponent: aSendingTransferComponent 
	
	netTransfera := netTransfera + aSendingTransferComponent value! !
!NetTransfer class methodsFor: 'aa' stamp: 'AM 11/12/2020 00:01:38' prior: 50875118 overrides: 50875058!
for: anAccount

	netTransfera := 0.
	anAccount reportFor: self. 
	^ netTransfera
	
	! !

!classDefinition: 'NetTransfer class' category: 'Portfolio' stamp: 'AM 11/12/2020 00:01:44'!
NetTransfer class
	instanceVariableNames: 'sd netTransfer'!
!NetTransfer class methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:01:44' prior: 50875287 overrides: 50875084!
reportWhenSendingTransferComponent: aSendingTransferComponent 
	
	netTransfer := netTransfer + aSendingTransferComponent value! !
!NetTransfer class methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:01:44' prior: 50875295 overrides: 50875058!
for: anAccount

	netTransfer := 0.
	anAccount reportFor: self. 
	^ netTransfer
	
	! !

!testRun: #ReceptiveAccountTest #test19 stamp: 'AM 11/12/2020 00:01:47'!
FAILURE!
!NetTransfer class methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:02:05' prior: 50875307 overrides: 50875084!
reportWhenSendingTransferComponent: aSendingTransferComponent 
	
	netTransfer := netTransfer - aSendingTransferComponent value! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/12/2020 00:02:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 00:02:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 00:02:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/12/2020 00:02:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/12/2020 00:02:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/12/2020 00:02:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/12/2020 00:02:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/12/2020 00:02:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/12/2020 00:02:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/12/2020 00:02:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/12/2020 00:02:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/12/2020 00:02:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/12/2020 00:02:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/12/2020 00:02:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/12/2020 00:02:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/12/2020 00:02:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/12/2020 00:02:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'AM 11/12/2020 00:02:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test19 stamp: 'AM 11/12/2020 00:02:10'!
FAILURE!

!testRun: #ReceptiveAccountTest #test20 stamp: 'AM 11/12/2020 00:02:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test19 stamp: 'AM 11/12/2020 00:02:10'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 00:02:31' prior: 50875230!
test19

	| anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anAccount to: anotherAccount for: 500.
	
	self assert:(NetTransfer for: anAccount) equals: -500.
	self assert: (NetTransfer for: anotherAccount) equals: 500.! !

!testRun: #ReceptiveAccountTest #test19 stamp: 'AM 11/12/2020 00:02:32'!
ERROR!
!NetTransfer class methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:02:46' overrides: 50875073!
reportWhenReceivingTransferComponent: aReceivingTransferComponent 
	self shouldBeImplemented.! !
!NetTransfer class methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:03:14' prior: 50875425 overrides: 50875073!
reportWhenReceivingTransferComponent: aReceivingTransferComponent 
	
	netTransfer := netTransfer + aReceivingTransferComponent value! !

!testRun: #ReceptiveAccountTest #test19 stamp: 'AM 11/12/2020 00:03:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/12/2020 00:03:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 00:03:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 00:03:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/12/2020 00:03:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/12/2020 00:03:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/12/2020 00:03:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/12/2020 00:03:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/12/2020 00:03:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/12/2020 00:03:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/12/2020 00:03:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/12/2020 00:03:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/12/2020 00:03:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/12/2020 00:03:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/12/2020 00:03:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/12/2020 00:03:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/12/2020 00:03:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/12/2020 00:03:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'AM 11/12/2020 00:03:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test19 stamp: 'AM 11/12/2020 00:03:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'AM 11/12/2020 00:03:16'!
PASSED!
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 00:03:31' prior: 50873961!
test19

	| aPortfolio |
	
	aPortfolio := Portfolio new.
	
	self assert: (NetTransfer for: aPortfolio) equals: 0.! !

!testRun: #PortfolioTest #test19 stamp: 'AM 11/12/2020 00:03:32'!
ERROR!
!NetTransfer class methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:03:42' overrides: 50875068!
reportWhenPortfolio: aPortfolio 
	self shouldBeImplemented.! !
!NetTransfer class methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:04:38' prior: 50875525 overrides: 50875068!
reportWhenPortfolio: aPortfolio 
	
	aPortfolio accounts do: [ :anAccount | anAccount reportFor: self ]! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test19 stamp: 'AM 11/12/2020 00:04:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'AM 11/12/2020 00:04:42'!
PASSED!
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 00:04:59' prior: 50873967!
test20

	| aPortfolio anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount for: 100.
	
	aPortfolio := Portfolio with: anAccount.
	
	
	
	self assert: (NetTransfer for: aPortfolio) equals: -100.! !

!testRun: #PortfolioTest #test20 stamp: 'AM 11/12/2020 00:05:00'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/12/2020 00:05:00'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/12/2020 00:05:00'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/12/2020 00:05:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/12/2020 00:05:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/12/2020 00:05:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/12/2020 00:05:00'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/12/2020 00:05:00'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/12/2020 00:05:00'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/12/2020 00:05:00'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/12/2020 00:05:00'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/12/2020 00:05:00'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/12/2020 00:05:00'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/12/2020 00:05:00'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/12/2020 00:05:00'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/12/2020 00:05:00'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AM 11/12/2020 00:05:00'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'AM 11/12/2020 00:05:00'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'AM 11/12/2020 00:05:00'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'AM 11/12/2020 00:05:00'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AM 11/12/2020 00:05:00'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AM 11/12/2020 00:05:00'!
PASSED!
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 00:05:14' prior: 50873992!
test21

	| aPortfolio anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount for: 100.
	
	aPortfolio := Portfolio with: anAccount with: anotherAccount.
	
	
	
	self assert: (NetTransfer for: aPortfolio) equals: 0.! !

!testRun: #PortfolioTest #test21 stamp: 'AM 11/12/2020 00:05:15'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/12/2020 00:05:15'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/12/2020 00:05:15'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/12/2020 00:05:15'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/12/2020 00:05:15'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/12/2020 00:05:15'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/12/2020 00:05:15'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/12/2020 00:05:15'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/12/2020 00:05:15'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/12/2020 00:05:15'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/12/2020 00:05:15'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/12/2020 00:05:15'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/12/2020 00:05:15'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/12/2020 00:05:15'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/12/2020 00:05:15'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/12/2020 00:05:15'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AM 11/12/2020 00:05:15'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'AM 11/12/2020 00:05:15'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'AM 11/12/2020 00:05:15'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'AM 11/12/2020 00:05:15'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AM 11/12/2020 00:05:15'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AM 11/12/2020 00:05:15'!
PASSED!

!methodRemoval: Account #netTransfer stamp: 'AM 11/12/2020 00:05:32'!
netTransfer
	
	self subclassResponsibility !
!ReceptiveAccountTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 00:05:54' prior: 50873254!
test20

	| anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anotherAccount to: anAccount for: 500.
	Deposit register: 50 on: anAccount.
	Withdraw register: 20 on: anAccount.
	
	self assert: (NetTransfer for: anAccount) equals: 500.
	! !

!methodRemoval: Portfolio #netTransfer stamp: 'AM 11/12/2020 00:06:05'!
netTransfer
	
	^accounts sum: [:anAccount | anAccount netTransfer ] ifEmpty: [ 0 ].!

!methodRemoval: ReceptiveAccount #netTransfer stamp: 'AM 11/12/2020 00:06:09'!
netTransfer
	
	^ transactions inject: 0 into: [:currentTransferNet :aTransaction | | result |
		result := currentTransferNet.
		(aTransaction isKindOf: ReceivingTransferComponent) ifTrue: [ result := currentTransferNet + aTransaction value].
		(aTransaction isKindOf: SendingTransferComponent) ifTrue: [ result := currentTransferNet - aTransaction value].
		result. 
		 ]!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/12/2020 00:06:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 00:06:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 00:06:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/12/2020 00:06:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/12/2020 00:06:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/12/2020 00:06:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/12/2020 00:06:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/12/2020 00:06:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/12/2020 00:06:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/12/2020 00:06:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/12/2020 00:06:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/12/2020 00:06:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/12/2020 00:06:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/12/2020 00:06:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/12/2020 00:06:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/12/2020 00:06:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/12/2020 00:06:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'AM 11/12/2020 00:06:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test19 stamp: 'AM 11/12/2020 00:06:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'AM 11/12/2020 00:06:32'!
ERROR!

!testRun: #ReceptiveAccountTest #test20 stamp: 'AM 11/12/2020 00:06:32'!
ERROR!
!NetTransfer class methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:06:45' overrides: 50875063!
reportWhenDeposit: aDeposit 
	self shouldBeImplemented.! !
!NetTransfer class methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:06:51' prior: 50875969 overrides: 50875063!
reportWhenDeposit: aDeposit ! !

!testRun: #ReceptiveAccountTest #test20 stamp: 'AM 11/12/2020 00:06:52'!
ERROR!
!NetTransfer class methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:07:02' overrides: 50875090!
reportWhenWithdraw: aWithdraw 
	self shouldBeImplemented.! !
!NetTransfer class methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:07:05' prior: 50875982 overrides: 50875090!
reportWhenWithdraw: aWithdraw ! !

!testRun: #ReceptiveAccountTest #test20 stamp: 'AM 11/12/2020 00:07:06'!
PASSED!

NetTransfer class
	instanceVariableNames: 'netTransfer'!

!classDefinition: 'NetTransfer class' category: 'Portfolio' stamp: 'AM 11/12/2020 00:07:29'!
NetTransfer class
	instanceVariableNames: 'netTransfer'!
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:09:15' prior: 50874283 overrides: 50875073!
reportWhenReceivingTransferComponent: aReceivingTransferComponent
 
	accountSummary add: 'Entrada por transferencia de ', aReceivingTransferComponent value asString
	
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test19 stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AM 11/12/2020 00:09:17'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AM 11/12/2020 00:09:17'!
PASSED!
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:09:22' prior: 50876003 overrides: 50875073!
reportWhenReceivingTransferComponent: aReceivingTransferComponent
 
	accountSummary add: 'Entrada por transferencia de ', aReceivingTransferComponent value printString
	
	! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:09:29' prior: 50876157 overrides: 50875073!
reportWhenReceivingTransferComponent: aReceivingTransferComponent
 
	accountSummary add: 'Entrada por transferencia de ', aReceivingTransferComponent value asString
	
	! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:09:39' prior: 50876167 overrides: 50875073!
reportWhenReceivingTransferComponent: aReceivingTransferComponent
 
	accountSummary add: 'Entrada por transferencia de ', aReceivingTransferComponent value printString
	
	! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:10:03' prior: 50876177 overrides: 50875073!
reportWhenReceivingTransferComponent: aReceivingTransferComponent
 
	accountSummary add: 'Entrada por transferencia de ', aReceivingTransferComponent value asString
	
	! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:10:08' prior: 50874178 overrides: 50875063!
reportWhenDeposit: aDeposit
	
	accountSummary add: 'Dep�sito por ', aDeposit value asString
	
	! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:10:19' prior: 50874192 overrides: 50875090!
reportWhenWithdraw: aWithdraw

	accountSummary add: 'Extracci�n por ', aWithdraw value asString.
	
	
	! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:10:28' prior: 50874320 overrides: 50875058!
for: anAccount

	accountSummary := OrderedCollection new.
	
	anAccount reportFor: self.
	
	accountSummary add:  'Balance = ', anAccount balance asString.
	
	^ accountSummary.! !
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:10:47' prior: 50874199 overrides: 50875084!
reportWhenSendingTransferComponent: aSendingTransferComponent
 
	accountSummary add: 'Salida por transferencia de ', aSendingTransferComponent value asString
	
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test19 stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AM 11/12/2020 00:10:49'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AM 11/12/2020 00:10:49'!
PASSED!
!AccountSummary class methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:11:58' prior: 50876212 overrides: 50875058!
for: anAccount

	accountSummary := OrderedCollection new.
	
	anAccount reportFor: self.
	accountSummary add:  'Balance = ', anAccount balance asString.
	
	^ accountSummary.! !
!Report methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:15:26'!
for: anAccount

	self subclassResponsibility! !

!methodRemoval: Report class #for: stamp: 'AM 11/12/2020 00:15:26'!
for: anAccount

	self subclassResponsibility!
!Report methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:15:34'!
reportWhenDeposit: aDeposit

	self subclassResponsibility! !

!methodRemoval: Report class #reportWhenDeposit: stamp: 'AM 11/12/2020 00:15:34'!
reportWhenDeposit: aDeposit

	self subclassResponsibility!
!Report methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:15:38'!
reportWhenPortfolio: aPortfolio

	self subclassResponsibility! !

!methodRemoval: Report class #reportWhenPortfolio: stamp: 'AM 11/12/2020 00:15:38'!
reportWhenPortfolio: aPortfolio

	self subclassResponsibility!
!Report methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:15:43'!
reportWhenReceivingTransferComponent: aReceivingTransferComponent

	self subclassResponsibility! !

!methodRemoval: Report class #reportWhenReceivingTransferComponent: stamp: 'AM 11/12/2020 00:15:43'!
reportWhenReceivingTransferComponent: aReceivingTransferComponent

	self subclassResponsibility!
!Report methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:15:49'!
reportWhenReceptiveAccount: aReceptiveAccount

	self subclassResponsibility! !

!methodRemoval: Report class #reportWhenReceptiveAccount: stamp: 'AM 11/12/2020 00:15:49'!
reportWhenReceptiveAccount: aReceptiveAccount

	self subclassResponsibility!
!Report methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:15:56'!
reportWhenSendingTransferComponent: aSendingTransferComponent

	self subclassResponsibility! !

!methodRemoval: Report class #reportWhenSendingTransferComponent: stamp: 'AM 11/12/2020 00:15:56'!
reportWhenSendingTransferComponent: aSendingTransferComponent

	self subclassResponsibility!
!Report methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:16:04'!
reportWhenWithdraw: aWithdraw

	self subclassResponsibility! !

!methodRemoval: Report class #reportWhenWithdraw: stamp: 'AM 11/12/2020 00:16:04'!
reportWhenWithdraw: aWithdraw

	self subclassResponsibility!

Report subclass: #AccountSummary
	instanceVariableNames: 'accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #AccountSummary category: 'Portfolio' stamp: 'AM 11/12/2020 00:17:15'!
Report subclass: #AccountSummary
	instanceVariableNames: 'accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

AccountSummary class
	instanceVariableNames: ''!

!classDefinition: 'AccountSummary class' category: 'Portfolio' stamp: 'AM 11/12/2020 00:17:36'!
AccountSummary class
	instanceVariableNames: ''!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:17:44' overrides: 50876384!
for: anAccount

	accountSummary := OrderedCollection new.
	
	anAccount reportFor: self.
	accountSummary add:  'Balance = ', anAccount balance asString.
	
	^ accountSummary.! !

!methodRemoval: AccountSummary class #for: stamp: 'AM 11/12/2020 00:17:44'!
for: anAccount

	accountSummary := OrderedCollection new.
	
	anAccount reportFor: self.
	accountSummary add:  'Balance = ', anAccount balance asString.
	
	^ accountSummary.!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:17:50' overrides: 50876392!
reportWhenDeposit: aDeposit
	
	accountSummary add: 'Dep�sito por ', aDeposit value asString
	
	! !

!methodRemoval: AccountSummary class #reportWhenDeposit: stamp: 'AM 11/12/2020 00:17:51'!
reportWhenDeposit: aDeposit
	
	accountSummary add: 'Dep�sito por ', aDeposit value asString
	
	!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:18:02' overrides: 50876401!
reportWhenPortfolio: aPortfolio

	aPortfolio accounts do: [ :anAccount | anAccount reportFor: self ].
	
	! !

!methodRemoval: AccountSummary class #reportWhenPortfolio: stamp: 'AM 11/12/2020 00:18:02'!
reportWhenPortfolio: aPortfolio

	aPortfolio accounts do: [ :anAccount | anAccount reportFor: self ].
	
	!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:18:06' overrides: 50876410!
reportWhenReceivingTransferComponent: aReceivingTransferComponent
 
	accountSummary add: 'Entrada por transferencia de ', aReceivingTransferComponent value asString
	
	! !

!methodRemoval: AccountSummary class #reportWhenReceivingTransferComponent: stamp: 'AM 11/12/2020 00:18:06'!
reportWhenReceivingTransferComponent: aReceivingTransferComponent
 
	accountSummary add: 'Entrada por transferencia de ', aReceivingTransferComponent value asString
	
	!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:18:10' overrides: 50876422!
reportWhenReceptiveAccount: aReceptiveAccount
	
	aReceptiveAccount transactions do: [ :aTransaction | aTransaction reportFor: self ].
	
	! !

!methodRemoval: AccountSummary class #reportWhenReceptiveAccount: stamp: 'AM 11/12/2020 00:18:10'!
reportWhenReceptiveAccount: aReceptiveAccount
	
	aReceptiveAccount transactions do: [ :aTransaction | aTransaction reportFor: self ].
	
	!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:18:14' overrides: 50876433!
reportWhenSendingTransferComponent: aSendingTransferComponent
 
	accountSummary add: 'Salida por transferencia de ', aSendingTransferComponent value asString
	
	! !

!methodRemoval: AccountSummary class #reportWhenSendingTransferComponent: stamp: 'AM 11/12/2020 00:18:14'!
reportWhenSendingTransferComponent: aSendingTransferComponent
 
	accountSummary add: 'Salida por transferencia de ', aSendingTransferComponent value asString
	
	!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:18:19' overrides: 50876445!
reportWhenWithdraw: aWithdraw

	accountSummary add: 'Extracci�n por ', aWithdraw value asString.
	
	
	! !

!methodRemoval: AccountSummary class #reportWhenWithdraw: stamp: 'AM 11/12/2020 00:18:19'!
reportWhenWithdraw: aWithdraw

	accountSummary add: 'Extracci�n por ', aWithdraw value asString.
	
	
	!

Report subclass: #NetTransfer
	instanceVariableNames: 'netTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #NetTransfer category: 'Portfolio' stamp: 'AM 11/12/2020 00:18:36'!
Report subclass: #NetTransfer
	instanceVariableNames: 'netTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

NetTransfer class
	instanceVariableNames: ''!

!classDefinition: 'NetTransfer class' category: 'Portfolio' stamp: 'AM 11/12/2020 00:18:40'!
NetTransfer class
	instanceVariableNames: ''!
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:18:45' overrides: 50876384!
for: anAccount

	netTransfer := 0.
	anAccount reportFor: self. 
	^ netTransfer
	
	! !

!methodRemoval: NetTransfer class #for: stamp: 'AM 11/12/2020 00:18:45'!
for: anAccount

	netTransfer := 0.
	anAccount reportFor: self. 
	^ netTransfer
	
	!
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:18:53' overrides: 50876392!
reportWhenDeposit: aDeposit ! !

!methodRemoval: NetTransfer class #reportWhenDeposit: stamp: 'AM 11/12/2020 00:18:53'!
reportWhenDeposit: aDeposit !
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:18:59' overrides: 50876401!
reportWhenPortfolio: aPortfolio 
	
	aPortfolio accounts do: [ :anAccount | anAccount reportFor: self ]! !

!methodRemoval: NetTransfer class #reportWhenPortfolio: stamp: 'AM 11/12/2020 00:18:59'!
reportWhenPortfolio: aPortfolio 
	
	aPortfolio accounts do: [ :anAccount | anAccount reportFor: self ]!
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:19:04' overrides: 50876410!
reportWhenReceivingTransferComponent: aReceivingTransferComponent 
	
	netTransfer := netTransfer + aReceivingTransferComponent value! !

!methodRemoval: NetTransfer class #reportWhenReceivingTransferComponent: stamp: 'AM 11/12/2020 00:19:04'!
reportWhenReceivingTransferComponent: aReceivingTransferComponent 
	
	netTransfer := netTransfer + aReceivingTransferComponent value!
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:19:09' overrides: 50876422!
reportWhenReceptiveAccount: aReceptiveAccount 
	
	aReceptiveAccount transactions do: [:aTransaction | aTransaction reportFor: self ]! !

!methodRemoval: NetTransfer class #reportWhenReceptiveAccount: stamp: 'AM 11/12/2020 00:19:09'!
reportWhenReceptiveAccount: aReceptiveAccount 
	
	aReceptiveAccount transactions do: [:aTransaction | aTransaction reportFor: self ]!
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:19:13' overrides: 50876433!
reportWhenSendingTransferComponent: aSendingTransferComponent 
	
	netTransfer := netTransfer - aSendingTransferComponent value! !

!methodRemoval: NetTransfer class #reportWhenSendingTransferComponent: stamp: 'AM 11/12/2020 00:19:13'!
reportWhenSendingTransferComponent: aSendingTransferComponent 
	
	netTransfer := netTransfer - aSendingTransferComponent value!
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:19:18' overrides: 50876445!
reportWhenWithdraw: aWithdraw ! !

!methodRemoval: NetTransfer class #reportWhenWithdraw: stamp: 'AM 11/12/2020 00:19:18'!
reportWhenWithdraw: aWithdraw !
!Report methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:21:05'!
generateReportFor: anAccount

	self subclassResponsibility! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:21:05' overrides: 50876682!
generateReportFor: anAccount

	accountSummary := OrderedCollection new.
	
	anAccount reportFor: self.
	accountSummary add:  'Balance = ', anAccount balance asString.
	
	^ accountSummary.! !
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:21:05' overrides: 50876682!
generateReportFor: anAccount

	netTransfer := 0.
	anAccount reportFor: self. 
	^ netTransfer
	
	! !

!methodRemoval: Report #for: stamp: 'AM 11/12/2020 00:21:05'!
for: anAccount

	self subclassResponsibility!

!methodRemoval: AccountSummary #for: stamp: 'AM 11/12/2020 00:21:05'!
for: anAccount

	accountSummary := OrderedCollection new.
	
	anAccount reportFor: self.
	accountSummary add:  'Balance = ', anAccount balance asString.
	
	^ accountSummary.!

!methodRemoval: NetTransfer #for: stamp: 'AM 11/12/2020 00:21:05'!
for: anAccount

	netTransfer := 0.
	anAccount reportFor: self. 
	^ netTransfer
	
	!
!SendingTransferComponent methodsFor: 'reports' stamp: 'AM 11/12/2020 00:24:15' prior: 50874583 overrides: 50874477!
reportFor: anAccountSummary

	anAccountSummary reportWhenSendingTransferComponent: self.! !
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:24:59' prior: 50876698 overrides: 50876682!
generateReportFor: anAccount

	netTransfer := 0.
	anAccount reportFor: self. 
	
	^ netTransfer
	
	! !
!AccountTransaction methodsFor: 'reports' stamp: 'AM 11/12/2020 00:25:56'!
report: anAccountSummary

	self subclassResponsibility 
	
	! !
!SendingTransferComponent methodsFor: 'reports' stamp: 'AM 11/12/2020 00:25:56' overrides: 50876734!
report: anAccountSummary

	anAccountSummary reportWhenSendingTransferComponent: self.! !
!Withdraw methodsFor: 'reports' stamp: 'AM 11/12/2020 00:25:56' overrides: 50876734!
report: anAccountSummary

	anAccountSummary reportWhenWithdraw: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:25:56'!
report: anAccountSummary

	anAccountSummary reportWhenPortfolio: self.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:25:56'!
report: anAccountSummary

	anAccountSummary reportWhenReceptiveAccount: self.! !
!ReceivingTransferComponent methodsFor: 'reports' stamp: 'AM 11/12/2020 00:25:56' overrides: 50876734!
report: anAccountSummary
	
	anAccountSummary reportWhenReceivingTransferComponent: self.! !
!Deposit methodsFor: 'reports' stamp: 'AM 11/12/2020 00:25:56' overrides: 50876734!
report: anAccountSummary

	anAccountSummary reportWhenDeposit: self.! !
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:25:56' prior: 50876728 overrides: 50876682!
generateReportFor: anAccount

	netTransfer := 0.
	anAccount report: self. 
	
	^ netTransfer
	
	! !
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:25:57' prior: 50876616 overrides: 50876401!
reportWhenPortfolio: aPortfolio 
	
	aPortfolio accounts do: [ :anAccount | anAccount report: self ]! !
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:25:57' prior: 50876644 overrides: 50876422!
reportWhenReceptiveAccount: aReceptiveAccount 
	
	aReceptiveAccount transactions do: [:aTransaction | aTransaction report: self ]! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:25:57' prior: 50876534 overrides: 50876422!
reportWhenReceptiveAccount: aReceptiveAccount
	
	aReceptiveAccount transactions do: [ :aTransaction | aTransaction report: self ].
	
	! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:25:57' prior: 50876688 overrides: 50876682!
generateReportFor: anAccount

	accountSummary := OrderedCollection new.
	
	anAccount report: self.
	accountSummary add:  'Balance = ', anAccount balance asString.
	
	^ accountSummary.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:25:57' prior: 50876503 overrides: 50876401!
reportWhenPortfolio: aPortfolio

	aPortfolio accounts do: [ :anAccount | anAccount report: self ].
	
	! !

!methodRemoval: AccountTransaction #reportFor: stamp: 'AM 11/12/2020 00:25:57'!
reportFor: anAccountSummary

	self subclassResponsibility 
	
	!

!methodRemoval: SendingTransferComponent #reportFor: stamp: 'AM 11/12/2020 00:25:57'!
reportFor: anAccountSummary

	anAccountSummary reportWhenSendingTransferComponent: self.!

!methodRemoval: Withdraw #reportFor: stamp: 'AM 11/12/2020 00:25:57'!
reportFor: anAccountSummary

	anAccountSummary reportWhenWithdraw: self.!

!methodRemoval: Portfolio #reportFor: stamp: 'AM 11/12/2020 00:25:57'!
reportFor: anAccountSummary

	anAccountSummary reportWhenPortfolio: self.!

!methodRemoval: ReceptiveAccount #reportFor: stamp: 'AM 11/12/2020 00:25:57'!
reportFor: anAccountSummary

	anAccountSummary reportWhenReceptiveAccount: self.!

!methodRemoval: ReceivingTransferComponent #reportFor: stamp: 'AM 11/12/2020 00:25:57'!
reportFor: anAccountSummary
	
	anAccountSummary reportWhenReceivingTransferComponent: self.!

!methodRemoval: Deposit #reportFor: stamp: 'AM 11/12/2020 00:25:57'!
reportFor: anAccountSummary

	anAccountSummary reportWhenDeposit: self.!
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:26:19'!
reportFor: anAccount

	netTransfer := 0.
	anAccount report: self. 
	
	^ netTransfer
	
	! !
!Report methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:26:19'!
reportFor: anAccount

	self subclassResponsibility! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:26:19' overrides: 50876862!
reportFor: anAccount

	accountSummary := OrderedCollection new.
	
	anAccount report: self.
	accountSummary add:  'Balance = ', anAccount balance asString.
	
	^ accountSummary.! !

!methodRemoval: NetTransfer #generateReportFor: stamp: 'AM 11/12/2020 00:26:19'!
generateReportFor: anAccount

	netTransfer := 0.
	anAccount report: self. 
	
	^ netTransfer
	
	!

!methodRemoval: Report #generateReportFor: stamp: 'AM 11/12/2020 00:26:19'!
generateReportFor: anAccount

	self subclassResponsibility!

!methodRemoval: AccountSummary #generateReportFor: stamp: 'AM 11/12/2020 00:26:19'!
generateReportFor: anAccount

	accountSummary := OrderedCollection new.
	
	anAccount report: self.
	accountSummary add:  'Balance = ', anAccount balance asString.
	
	^ accountSummary.!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/12/2020 00:26:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 00:26:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 00:26:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/12/2020 00:26:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/12/2020 00:26:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/12/2020 00:26:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/12/2020 00:26:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/12/2020 00:26:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/12/2020 00:26:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/12/2020 00:26:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/12/2020 00:26:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/12/2020 00:26:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/12/2020 00:26:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/12/2020 00:26:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/12/2020 00:26:21'!
ERROR!

!testRun: #ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/12/2020 00:26:21'!
ERROR!

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/12/2020 00:26:21'!
ERROR!

!testRun: #ReceptiveAccountTest #test18 stamp: 'AM 11/12/2020 00:26:21'!
ERROR!

!testRun: #ReceptiveAccountTest #test19 stamp: 'AM 11/12/2020 00:26:21'!
ERROR!

!testRun: #ReceptiveAccountTest #test20 stamp: 'AM 11/12/2020 00:26:21'!
ERROR!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/12/2020 00:26:21'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/12/2020 00:26:21'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/12/2020 00:26:21'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/12/2020 00:26:21'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/12/2020 00:26:21'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/12/2020 00:26:21'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/12/2020 00:26:21'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/12/2020 00:26:21'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/12/2020 00:26:21'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/12/2020 00:26:21'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/12/2020 00:26:21'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/12/2020 00:26:21'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/12/2020 00:26:21'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/12/2020 00:26:22'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/12/2020 00:26:22'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AM 11/12/2020 00:26:22'!
ERROR!

!testRun: #PortfolioTest #test17 stamp: 'AM 11/12/2020 00:26:22'!
ERROR!

!testRun: #PortfolioTest #test18 stamp: 'AM 11/12/2020 00:26:22'!
ERROR!

!testRun: #PortfolioTest #test19 stamp: 'AM 11/12/2020 00:26:22'!
ERROR!

!testRun: #PortfolioTest #test20 stamp: 'AM 11/12/2020 00:26:22'!
ERROR!

!testRun: #PortfolioTest #test21 stamp: 'AM 11/12/2020 00:26:22'!
ERROR!

!testRun: #ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/12/2020 00:26:25'!
ERROR!
!Report methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:28:31'!
reportDeposit: aDeposit

	self subclassResponsibility! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:28:32' overrides: 50877042!
reportDeposit: aDeposit
	
	accountSummary add: 'Dep�sito por ', aDeposit value asString
	
	! !
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:28:32' overrides: 50877042!
reportDeposit: aDeposit ! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:28:32' prior: 50876768 overrides: 50876734!
report: anAccountSummary

	anAccountSummary reportDeposit: self.! !

!methodRemoval: Report #reportWhenDeposit: stamp: 'AM 11/12/2020 00:28:32'!
reportWhenDeposit: aDeposit

	self subclassResponsibility!

!methodRemoval: AccountSummary #reportWhenDeposit: stamp: 'AM 11/12/2020 00:28:32'!
reportWhenDeposit: aDeposit
	
	accountSummary add: 'Dep�sito por ', aDeposit value asString
	
	!

!methodRemoval: NetTransfer #reportWhenDeposit: stamp: 'AM 11/12/2020 00:28:32'!
reportWhenDeposit: aDeposit !
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:28:45'!
reportPortfolio: aPortfolio 
	
	aPortfolio accounts do: [ :anAccount | anAccount report: self ]! !
!Report methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:28:45'!
reportPortfolio: aPortfolio

	self subclassResponsibility! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:28:45' overrides: 50877084!
reportPortfolio: aPortfolio

	aPortfolio accounts do: [ :anAccount | anAccount report: self ].
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:28:46' prior: 50876751!
report: anAccountSummary

	anAccountSummary reportPortfolio: self.! !

!methodRemoval: NetTransfer #reportWhenPortfolio: stamp: 'AM 11/12/2020 00:28:46'!
reportWhenPortfolio: aPortfolio 
	
	aPortfolio accounts do: [ :anAccount | anAccount report: self ]!

!methodRemoval: Report #reportWhenPortfolio: stamp: 'AM 11/12/2020 00:28:46'!
reportWhenPortfolio: aPortfolio

	self subclassResponsibility!

!methodRemoval: AccountSummary #reportWhenPortfolio: stamp: 'AM 11/12/2020 00:28:46'!
reportWhenPortfolio: aPortfolio

	aPortfolio accounts do: [ :anAccount | anAccount report: self ].
	
	!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:28:54'!
reportReceivingTransferComponent: aReceivingTransferComponent
 
	accountSummary add: 'Entrada por transferencia de ', aReceivingTransferComponent value asString
	
	! !
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:28:54'!
reportReceivingTransferComponent: aReceivingTransferComponent 
	
	netTransfer := netTransfer + aReceivingTransferComponent value! !
!Report methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:28:55'!
reportReceivingTransferComponent: aReceivingTransferComponent

	self subclassResponsibility! !
!ReceivingTransferComponent methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:28:55' prior: 50876762 overrides: 50876734!
report: anAccountSummary
	
	anAccountSummary reportReceivingTransferComponent: self.! !

!methodRemoval: AccountSummary #reportWhenReceivingTransferComponent: stamp: 'AM 11/12/2020 00:28:55'!
reportWhenReceivingTransferComponent: aReceivingTransferComponent
 
	accountSummary add: 'Entrada por transferencia de ', aReceivingTransferComponent value asString
	
	!

!methodRemoval: NetTransfer #reportWhenReceivingTransferComponent: stamp: 'AM 11/12/2020 00:28:55'!
reportWhenReceivingTransferComponent: aReceivingTransferComponent 
	
	netTransfer := netTransfer + aReceivingTransferComponent value!

!methodRemoval: Report #reportWhenReceivingTransferComponent: stamp: 'AM 11/12/2020 00:28:55'!
reportWhenReceivingTransferComponent: aReceivingTransferComponent

	self subclassResponsibility!
!Report methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:29:04'!
reportReceptiveAccount: aReceptiveAccount

	self subclassResponsibility! !
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:29:04' overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	aReceptiveAccount transactions do: [:aTransaction | aTransaction report: self ]! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:29:04' overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount
	
	aReceptiveAccount transactions do: [ :aTransaction | aTransaction report: self ].
	
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:29:04' prior: 50876756!
report: anAccountSummary

	anAccountSummary reportReceptiveAccount: self.! !

!methodRemoval: Report #reportWhenReceptiveAccount: stamp: 'AM 11/12/2020 00:29:04'!
reportWhenReceptiveAccount: aReceptiveAccount

	self subclassResponsibility!

!methodRemoval: NetTransfer #reportWhenReceptiveAccount: stamp: 'AM 11/12/2020 00:29:04'!
reportWhenReceptiveAccount: aReceptiveAccount 
	
	aReceptiveAccount transactions do: [:aTransaction | aTransaction report: self ]!

!methodRemoval: AccountSummary #reportWhenReceptiveAccount: stamp: 'AM 11/12/2020 00:29:04'!
reportWhenReceptiveAccount: aReceptiveAccount
	
	aReceptiveAccount transactions do: [ :aTransaction | aTransaction report: self ].
	
	!
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:29:13'!
reportSendingTransferComponent: aSendingTransferComponent 
	
	netTransfer := netTransfer - aSendingTransferComponent value! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:29:13'!
reportSendingTransferComponent: aSendingTransferComponent
 
	accountSummary add: 'Salida por transferencia de ', aSendingTransferComponent value asString
	
	! !
!Report methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:29:13'!
reportSendingTransferComponent: aSendingTransferComponent

	self subclassResponsibility! !
!SendingTransferComponent methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:29:13' prior: 50876740 overrides: 50876734!
report: anAccountSummary

	anAccountSummary reportSendingTransferComponent: self.! !

!methodRemoval: NetTransfer #reportWhenSendingTransferComponent: stamp: 'AM 11/12/2020 00:29:13'!
reportWhenSendingTransferComponent: aSendingTransferComponent 
	
	netTransfer := netTransfer - aSendingTransferComponent value!

!methodRemoval: AccountSummary #reportWhenSendingTransferComponent: stamp: 'AM 11/12/2020 00:29:13'!
reportWhenSendingTransferComponent: aSendingTransferComponent
 
	accountSummary add: 'Salida por transferencia de ', aSendingTransferComponent value asString
	
	!

!methodRemoval: Report #reportWhenSendingTransferComponent: stamp: 'AM 11/12/2020 00:29:13'!
reportWhenSendingTransferComponent: aSendingTransferComponent

	self subclassResponsibility!
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:29:22'!
reportWithdraw: aWithdraw ! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:29:22'!
reportWithdraw: aWithdraw

	accountSummary add: 'Extracci�n por ', aWithdraw value asString.
	
	
	! !
!Report methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:29:22'!
reportWithdraw: aWithdraw

	self subclassResponsibility! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 00:29:22' prior: 50876746 overrides: 50876734!
report: anAccountSummary

	anAccountSummary reportWithdraw: self.! !

!methodRemoval: NetTransfer #reportWhenWithdraw: stamp: 'AM 11/12/2020 00:29:22'!
reportWhenWithdraw: aWithdraw !

!methodRemoval: AccountSummary #reportWhenWithdraw: stamp: 'AM 11/12/2020 00:29:22'!
reportWhenWithdraw: aWithdraw

	accountSummary add: 'Extracci�n por ', aWithdraw value asString.
	
	
	!

!methodRemoval: Report #reportWhenWithdraw: stamp: 'AM 11/12/2020 00:29:22'!
reportWhenWithdraw: aWithdraw

	self subclassResponsibility!

!methodRemoval: Portfolio #addTransactionsToAccountSummary: stamp: 'AM 11/12/2020 00:40:01'!
addTransactionsToAccountSummary: anAccountSummary 
	
	accounts do: [: anAccount | anAccount addTransactionsToAccountSummary: anAccountSummary ]!

----QUIT----(12 November 2020 00:41:33) CuisUniversity-4384.image priorSource: 17316986!

----STARTUP---- (12 November 2020 19:53:13) as /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/imagenportfolio2/CuisUniversity-4384.image!


!classDefinition: #AccountSummary category: 'Portfolio' stamp: 'AM 11/12/2020 20:56:08'!
Report subclass: #AccountSummary
	instanceVariableNames: 'accountSummary anAccounta'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 20:56:00' prior: 50876867 overrides: 50876862!
reportFor: anAccount

	accountSummary := OrderedCollection new.
	
	anAccounta report: self.
	accountSummary add:  'Balance = ', anAccounta balance asString.
	
	^ accountSummary.! !

!classDefinition: #NetTransfer category: 'Portfolio' stamp: 'AM 11/12/2020 20:56:18'!
Report subclass: #NetTransfer
	instanceVariableNames: 'netTransfer anAccounta'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 20:56:14' prior: 50876856 overrides: 50876862!
reportFor: anAccount

	netTransfer := 0.
	anAccounta report: self. 
	
	^ netTransfer
	
	! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 20:56:48'!
reportFor

	accountSummary := OrderedCollection new.
	
	anAccounta report: self.
	accountSummary add:  'Balance = ', anAccounta balance asString.
	
	^ accountSummary.! !
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 20:56:48'!
reportFor

	netTransfer := 0.
	anAccounta report: self. 
	
	^ netTransfer
	
	! !
!Report methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 20:56:48'!
reportFor

	self subclassResponsibility! !

!methodRemoval: AccountSummary #reportFor: stamp: 'AM 11/12/2020 20:56:48'!
reportFor: anAccount

	accountSummary := OrderedCollection new.
	
	anAccounta report: self.
	accountSummary add:  'Balance = ', anAccounta balance asString.
	
	^ accountSummary.!

!methodRemoval: NetTransfer #reportFor: stamp: 'AM 11/12/2020 20:56:48'!
reportFor: anAccount

	netTransfer := 0.
	anAccounta report: self. 
	
	^ netTransfer
	
	!

!methodRemoval: Report #reportFor: stamp: 'AM 11/12/2020 20:56:48'!
reportFor: anAccount

	self subclassResponsibility!

!classDefinition: #NetTransfer category: 'Portfolio' stamp: 'AM 11/12/2020 20:57:10'!
Report subclass: #NetTransfer
	instanceVariableNames: 'netTransfer account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 20:57:10' prior: 50877355 overrides: 50877360!
reportFor

	netTransfer := 0.
	account report: self. 
	
	^ netTransfer
	
	! !

!classDefinition: #AccountSummary category: 'Portfolio' stamp: 'AM 11/12/2020 20:57:35'!
Report subclass: #AccountSummary
	instanceVariableNames: 'accountSummary account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 20:57:35' prior: 50877347 overrides: 50877360!
reportFor

	accountSummary := OrderedCollection new.
	
	account report: self.
	accountSummary add:  'Balance = ', account balance asString.
	
	^ accountSummary.! !

Report subclass: #NetTransfer
	instanceVariableNames: 'netTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #NetTransfer category: 'Portfolio' stamp: 'AM 11/12/2020 20:57:43'!
Report subclass: #NetTransfer
	instanceVariableNames: 'netTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #AccountSummary category: 'Portfolio' stamp: 'AM 11/12/2020 20:57:51'!
Report subclass: #AccountSummary
	instanceVariableNames: 'accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #Report category: 'Portfolio' stamp: 'AM 11/12/2020 20:57:51'!
Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!Report class methodsFor: 'nil' stamp: 'AM 11/12/2020 20:58:17'!
for: anAccount

	^ self new initializeFor: anAccount! !
!Report methodsFor: 'nil' stamp: 'AM 11/12/2020 20:58:38'!
initializeFor: anAccount
	
	account := anAccount! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 20:58:58'!
report

	accountSummary := OrderedCollection new.
	
	account report: self.
	accountSummary add:  'Balance = ', account balance asString.
	
	^ accountSummary.! !
!NetTransfer methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 20:58:58'!
report

	netTransfer := 0.
	account report: self. 
	
	^ netTransfer
	
	! !
!Report methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 20:58:58'!
report

	self subclassResponsibility! !

!methodRemoval: AccountSummary #reportFor stamp: 'AM 11/12/2020 20:58:58'!
reportFor

	accountSummary := OrderedCollection new.
	
	account report: self.
	accountSummary add:  'Balance = ', account balance asString.
	
	^ accountSummary.!

!methodRemoval: NetTransfer #reportFor stamp: 'AM 11/12/2020 20:58:58'!
reportFor

	netTransfer := 0.
	account report: self. 
	
	^ netTransfer
	
	!

!methodRemoval: Report #reportFor stamp: 'AM 11/12/2020 20:58:58'!
reportFor

	self subclassResponsibility!

!classRenamed: #Report as: #Reporter stamp: 'AM 11/12/2020 20:59:20'!
Smalltalk renameClassNamed: #Report as: #Reporter!

!classRenamed: #AccountSummary as: #AccountSummaryReporter stamp: 'AM 11/12/2020 20:59:29'!
Smalltalk renameClassNamed: #AccountSummary as: #AccountSummaryReporter!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 20:59:30' prior: 50874888!
test18

	| aPortfolio anAccount anotherAccount expectedAccountSummary anotherPortfolio |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	anotherPortfolio := Portfolio new.
	anotherPortfolio add: anAccount.
	anotherPortfolio add: anotherAccount.
	
	aPortfolio add: anotherPortfolio.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	
	self assert: 'Balance = 80' equals:  (AccountSummaryReporter for: aPortfolio) last.
	self assert: ((AccountSummaryReporter for: aPortfolio) hasEqualElements: expectedAccountSummary).! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 20:59:30' prior: 50874447!
test17

	| anAccount expectedAccountSummary anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	Withdraw register: 40  on: anAccount.
	Transfer from: anAccount to: anotherAccount for: 100.
	Transfer from: anotherAccount to: anAccount for: 50.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10'
												with: 'Extracci�n por 40'
												with: 'Salida por transferencia de 100'
												with: 'Entrada por transferencia de 50'
												with: 'Balance = -80'.
												
	self assert: ((AccountSummaryReporter for: anAccount) hasEqualElements: expectedAccountSummary).
	self assert: (AccountSummaryReporter for: anAccount) last equals: 'Balance = -80'.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 20:59:30' prior: 50874680!
test16

	| aPortfolio |
	
	aPortfolio := Portfolio new.
	
	self assert: ((AccountSummaryReporter for: aPortfolio) hasEqualElements: { 'Balance = 0' } )! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 20:59:30' prior: 50874334!
test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance

	| anAccount expectedAccountSummary |
	
	anAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10' with:  'Balance = 10'.
	
	self assert: expectedAccountSummary equals: (AccountSummaryReporter for: anAccount).! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 20:59:30' prior: 50874303!
test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance

	| anEmptyAccount |
	
	anEmptyAccount := ReceptiveAccount new.
	
	self assert: (AccountSummaryReporter for: anEmptyAccount) size equals: 1.
	self assert: (AccountSummaryReporter for: anEmptyAccount) includes: 'Balance = 0'.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 20:59:30' prior: 50874788!
test17

	| aPortfolio anAccount anotherAccount expectedAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
	
	self assert: 'Balance = 80' equals: (AccountSummaryReporter for: aPortfolio) last.
	self assert: ((AccountSummaryReporter for: aPortfolio) hasEqualElements: expectedAccountSummary).! !

!classRenamed: #NetTransfer as: #NetTransferReporter stamp: 'AM 11/12/2020 20:59:49'!
Smalltalk renameClassNamed: #NetTransfer as: #NetTransferReporter!
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 20:59:50' prior: 50875861!
test20

	| anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anotherAccount to: anAccount for: 500.
	Deposit register: 50 on: anAccount.
	Withdraw register: 20 on: anAccount.
	
	self assert: (NetTransferReporter for: anAccount) equals: 500.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 20:59:50' prior: 50875770!
test21

	| aPortfolio anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount for: 100.
	
	aPortfolio := Portfolio with: anAccount with: anotherAccount.
	
	
	
	self assert: (NetTransferReporter for: aPortfolio) equals: 0.! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 20:59:50' prior: 50875409!
test19

	| anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anAccount to: anotherAccount for: 500.
	
	self assert:(NetTransferReporter for: anAccount) equals: -500.
	self assert: (NetTransferReporter for: anotherAccount) equals: 500.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 20:59:50' prior: 50875683!
test20

	| aPortfolio anAccount anotherAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount for: 100.
	
	aPortfolio := Portfolio with: anAccount.
	
	
	
	self assert: (NetTransferReporter for: aPortfolio) equals: -100.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 20:59:50' prior: 50875515!
test19

	| aPortfolio |
	
	aPortfolio := Portfolio new.
	
	self assert: (NetTransferReporter for: aPortfolio) equals: 0.! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 20:59:50' prior: 50875096!
test18

	| anEmptyAccount |
	
	anEmptyAccount := ReceptiveAccount new.
	
	self assert: (NetTransferReporter for: anEmptyAccount) equals: 0.! !
!ReceptiveAccountTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 21:04:20' prior: 50877644!
test19

	| anAccount anotherAccount anAccountNetTransferReport |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anAccount to: anotherAccount for: 500.
	anAccountNetTransferReport := (NetTransferReporter for: anAccount) netTransfer.
	
	self assert:(NetTransferReporter for: anAccount) equals: -500.
	self assert: (NetTransferReporter for: anotherAccount) equals: 500.! !
!ReceptiveAccountTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 21:04:41' prior: 50877686!
test19

	| anAccount anotherAccount anAccountNetTransferReport |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anAccount to: anotherAccount for: 500.
	anAccountNetTransferReport := (NetTransferReporter for: anAccount) netTransfer.
	
	self assert: anAccountNetTransferReport equals: -500.
	self assert: (NetTransferReporter for: anotherAccount) equals: 500.! !
!ReceptiveAccountTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 21:04:53' prior: 50877703!
test19

	| anAccount anotherAccount anAccountNetTransferReport anotherAccountNetTransferReport |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anAccount to: anotherAccount for: 500.
	anAccountNetTransferReport := (NetTransferReporter for: anAccount) netTransfer.
	anotherAccountNetTransferReport := (NetTransferReporter for: anotherAccount) netTransfer.
	
	self assert: anAccountNetTransferReport equals: -500.
	self assert: (NetTransferReporter for: anotherAccount) equals: 500.! !
!ReceptiveAccountTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 21:05:04' prior: 50877720!
test19

	| anAccount anotherAccount anAccountNetTransferReport anotherAccountNetTransferReport |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anAccount to: anotherAccount for: 500.
	anAccountNetTransferReport := (NetTransferReporter for: anAccount) netTransfer.
	anotherAccountNetTransferReport := (NetTransferReporter for: anotherAccount) netTransfer.
	
	self assert: anAccountNetTransferReport equals: -500.
	self assert: anotherAccountNetTransferReport equals: 500.! !
!NetTransferReporter methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 21:05:14'!
netTransfer

	netTransfer := 0.
	account report: self. 
	
	^ netTransfer
	
	! !
!AccountSummaryReporter methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 21:05:26'!
accountSummary

	accountSummary := OrderedCollection new.
	
	account report: self.
	accountSummary add:  'Balance = ', account balance asString.
	
	^ accountSummary.! !
!ReceptiveAccountTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 21:06:16' prior: 50877616!
test20

	| anAccount anotherAccount anAccountNetTransferReport |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anotherAccount to: anAccount for: 500.
	Deposit register: 50 on: anAccount.
	Withdraw register: 20 on: anAccount.
	
	anAccountNetTransferReport := (NetTransferReporter for: anAccount) netTransfer.
	
	self assert: (NetTransferReporter for: anAccount) equals: 500.
	! !
!ReceptiveAccountTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 21:07:13' prior: 50877775!
test20

	| anAccount anotherAccount anAccountNetTransferReport |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anotherAccount to: anAccount for: 500.
	Deposit register: 50 on: anAccount.
	Withdraw register: 20 on: anAccount.
	
	anAccountNetTransferReport := (NetTransferReporter for: anAccount) netTransfer.
	
	self assert: anAccountNetTransferReport equals: 500.
	! !
!ReceptiveAccountTest methodsFor: 'tests - account summary' stamp: 'AM 11/12/2020 21:08:14' prior: 50877571!
test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance

	| anEmptyAccount anEmptyAccountSummaryAccount |
	
	anEmptyAccount := ReceptiveAccount new.
	
	anEmptyAccountSummaryAccount := (AccountSummaryReporter for: anEmptyAccount) accountSummary.
	
	self assert: (AccountSummaryReporter for: anEmptyAccount) size equals: 1.
	self assert: (AccountSummaryReporter for: anEmptyAccount) includes: 'Balance = 0'.! !
!ReceptiveAccountTest methodsFor: 'tests - account summary' stamp: 'AM 11/12/2020 21:08:29' prior: 50877809!
test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance

	| anEmptyAccount anEmptyAccountSummaryAccount |
	
	anEmptyAccount := ReceptiveAccount new.
	
	anEmptyAccountSummaryAccount := (AccountSummaryReporter for: anEmptyAccount) accountSummary.
	
	self assert: anEmptyAccountSummaryAccount size equals: 1.
	self assert: anEmptyAccountSummaryAccount includes: 'Balance = 0'.! !
!ReceptiveAccountTest methodsFor: 'tests - account summary' stamp: 'AM 11/12/2020 21:09:21' prior: 50877555!
test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance

	| anAccount expectedAccountSummary anAccountSummaryAccount |
	
	anAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10' with:  'Balance = 10'.
	anAccountSummaryAccount :=  (AccountSummaryReporter for: anAccount) accountSummary.
	
	self assert: expectedAccountSummary equals: anAccountSummaryAccount.! !
!ReceptiveAccountTest methodsFor: 'tests - account summary' stamp: 'AM 11/12/2020 21:12:05' prior: 50877518!
test17

	| anAccount expectedAccountSummary anotherAccount anAccountSummaryAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	Withdraw register: 40  on: anAccount.
	Transfer from: anAccount to: anotherAccount for: 100.
	Transfer from: anotherAccount to: anAccount for: 50.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10'
												with: 'Extracci�n por 40'
												with: 'Salida por transferencia de 100'
												with: 'Entrada por transferencia de 50'
												with: 'Balance = -80'.
												
	anAccountSummaryAccount := (AccountSummaryReporter for: anAccount) accountSummary.
												
	self assert: (anAccountSummaryAccount hasEqualElements: expectedAccountSummary).
	self assert: anAccountSummaryAccount last equals: 'Balance = -80'.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/12/2020 21:12:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 21:12:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 21:12:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/12/2020 21:12:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/12/2020 21:12:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/12/2020 21:12:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/12/2020 21:12:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/12/2020 21:12:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/12/2020 21:12:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/12/2020 21:12:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/12/2020 21:12:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/12/2020 21:12:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/12/2020 21:12:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/12/2020 21:12:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/12/2020 21:12:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/12/2020 21:12:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/12/2020 21:12:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'AM 11/12/2020 21:12:11'!
FAILURE!

!testRun: #ReceptiveAccountTest #test19 stamp: 'AM 11/12/2020 21:12:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'AM 11/12/2020 21:12:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'AM 11/12/2020 21:12:11'!
FAILURE!
!PortfolioTest methodsFor: 'tests - account summary' stamp: 'AM 11/12/2020 21:12:52' prior: 50877546!
test16

	| aPortfolio anEmptyAccountSummaryAccount |
	
	aPortfolio := Portfolio new.
	
	anEmptyAccountSummaryAccount := (AccountSummaryReporter for: aPortfolio) accountSummary.
	
	self assert: ((AccountSummaryReporter for: aPortfolio) hasEqualElements: { 'Balance = 0' } )! !
!PortfolioTest methodsFor: 'tests - account summary' stamp: 'AM 11/12/2020 21:13:02' prior: 50877967!
test16

	| aPortfolio anEmptyAccountSummaryAccount |
	
	aPortfolio := Portfolio new.
	
	anEmptyAccountSummaryAccount := (AccountSummaryReporter for: aPortfolio) accountSummary.
	
	self assert: (anEmptyAccountSummaryAccount hasEqualElements: { 'Balance = 0' } )! !
!PortfolioTest methodsFor: 'tests - account summary' stamp: 'AM 11/12/2020 21:13:26' prior: 50877979!
test16

	| aPortfolio anEmptyPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anEmptyPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) accountSummary.
	
	self assert: (anEmptyPortfolioAccountSummary hasEqualElements: { 'Balance = 0' } )! !
!PortfolioTest methodsFor: 'tests - account summary' stamp: 'AM 11/12/2020 21:13:43' prior: 50877584!
test17

	| aPortfolio anAccount anotherAccount expectedAccountSummary aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
		
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) accountSummary.

	self assert: 'Balance = 80' equals: (AccountSummaryReporter for: aPortfolio) last.
	self assert: ((AccountSummaryReporter for: aPortfolio) hasEqualElements: expectedAccountSummary).! !
!PortfolioTest methodsFor: 'tests - account summary' stamp: 'AM 11/12/2020 21:14:07' prior: 50878003!
test17

	| aPortfolio anAccount anotherAccount expectedAccountSummary aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
		
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) accountSummary.

	self assert: 'Balance = 80' equals:aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).! !
!PortfolioTest methodsFor: 'tests - account summary' stamp: 'AM 11/12/2020 21:14:39' prior: 50877488!
test18

	| aPortfolio anAccount anotherAccount expectedAccountSummary anotherPortfolio aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	anotherPortfolio := Portfolio new.
	anotherPortfolio add: anAccount.
	anotherPortfolio add: anotherAccount.
	
	aPortfolio add: anotherPortfolio.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) accountSummary.


	self assert: 'Balance = 80' equals:  aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).! !
!ReceptiveAccountTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 21:15:32' prior: 50877678!
test18

	| anEmptyAccount emptyAccountNetTransfer |
	
	anEmptyAccount := ReceptiveAccount new.
	
	emptyAccountNetTransfer :=  (NetTransferReporter for: anEmptyAccount) netTransfer.
	
	self assert: emptyAccountNetTransfer equals: 0.! !
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 21:16:13' prior: 50877670!
test19

	| aPortfolio emptyPortfolioNetTransfer |
	
	aPortfolio := Portfolio new.
	
	emptyPortfolioNetTransfer :=  (NetTransferReporter for: aPortfolio) netTransfer.

	self assert: (NetTransferReporter for: aPortfolio) equals: 0.! !
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 21:16:20' prior: 50878106!
test19

	| anEmptyPortfolio emptyPortfolioNetTransfer |
	
	anEmptyPortfolio := Portfolio new.
	
	emptyPortfolioNetTransfer :=  (NetTransferReporter for: anEmptyPortfolio) netTransfer.

	self assert: (NetTransferReporter for: anEmptyPortfolio) equals: 0.! !
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 21:16:30' prior: 50878117!
test19

	| anEmptyPortfolio emptyPortfolioNetTransfer |
	
	anEmptyPortfolio := Portfolio new.
	
	emptyPortfolioNetTransfer :=  (NetTransferReporter for: anEmptyPortfolio) netTransfer.

	self assert:  emptyPortfolioNetTransfer equals: 0.! !
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 21:16:55' prior: 50877657!
test20

	| aPortfolio anAccount anotherAccount aPortfolioNetTransfer |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount for: 100.
	
	aPortfolio := Portfolio with: anAccount.
	
	aPortfolioNetTransfer :=  (NetTransferReporter for: aPortfolio) netTransfer.

	
	self assert: aPortfolioNetTransfer equals: -100.! !
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 21:17:28' prior: 50877630!
test21

	| aPortfolio anAccount anotherAccount aPortfolioNetTransfer |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount for: 100.
	
	aPortfolio := Portfolio with: anAccount with: anotherAccount.
	
	aPortfolioNetTransfer :=  (NetTransferReporter for: aPortfolio) netTransfer.
	
	self assert: aPortfolioNetTransfer equals: 0.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/12/2020 21:17:36'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/12/2020 21:17:36'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/12/2020 21:17:36'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/12/2020 21:17:36'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/12/2020 21:17:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/12/2020 21:17:36'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/12/2020 21:17:36'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/12/2020 21:17:37'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/12/2020 21:17:37'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/12/2020 21:17:37'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/12/2020 21:17:37'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/12/2020 21:17:37'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/12/2020 21:17:37'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/12/2020 21:17:37'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/12/2020 21:17:37'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AM 11/12/2020 21:17:37'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'AM 11/12/2020 21:17:37'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'AM 11/12/2020 21:17:37'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'AM 11/12/2020 21:17:37'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AM 11/12/2020 21:17:37'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AM 11/12/2020 21:17:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/12/2020 21:17:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 21:17:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 21:17:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/12/2020 21:17:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/12/2020 21:17:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/12/2020 21:17:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/12/2020 21:17:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/12/2020 21:17:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/12/2020 21:17:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/12/2020 21:17:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/12/2020 21:17:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/12/2020 21:17:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/12/2020 21:17:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/12/2020 21:17:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/12/2020 21:17:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/12/2020 21:17:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'AM 11/12/2020 21:17:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'AM 11/12/2020 21:17:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test19 stamp: 'AM 11/12/2020 21:17:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'AM 11/12/2020 21:17:39'!
PASSED!

!methodRemoval: NetTransferReporter #report stamp: 'AM 11/12/2020 21:18:37'!
report

	netTransfer := 0.
	account report: self. 
	
	^ netTransfer
	
	!

!methodRemoval: AccountSummaryReporter #report stamp: 'AM 11/12/2020 21:18:47'!
report

	accountSummary := OrderedCollection new.
	
	account report: self.
	accountSummary add:  'Balance = ', account balance asString.
	
	^ accountSummary.!

!methodRemoval: Reporter #report stamp: 'AM 11/12/2020 21:18:57'!
report

	self subclassResponsibility!
!AccountSummaryReporter methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 21:19:13'!
report

	accountSummary := OrderedCollection new.
	
	account report: self.
	accountSummary add:  'Balance = ', account balance asString.
	
	^ accountSummary.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 21:19:13' prior: 50877991!
test16

	| aPortfolio anEmptyPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anEmptyPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.
	
	self assert: (anEmptyPortfolioAccountSummary hasEqualElements: { 'Balance = 0' } )! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 21:19:13' prior: 50877826!
test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance

	| anEmptyAccount anEmptyAccountSummaryAccount |
	
	anEmptyAccount := ReceptiveAccount new.
	
	anEmptyAccountSummaryAccount := (AccountSummaryReporter for: anEmptyAccount) report.
	
	self assert: anEmptyAccountSummaryAccount size equals: 1.
	self assert: anEmptyAccountSummaryAccount includes: 'Balance = 0'.! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 21:19:14' prior: 50877861!
test17

	| anAccount expectedAccountSummary anotherAccount anAccountSummaryAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	Withdraw register: 40  on: anAccount.
	Transfer from: anAccount to: anotherAccount for: 100.
	Transfer from: anotherAccount to: anAccount for: 50.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10'
												with: 'Extracci�n por 40'
												with: 'Salida por transferencia de 100'
												with: 'Entrada por transferencia de 50'
												with: 'Balance = -80'.
												
	anAccountSummaryAccount := (AccountSummaryReporter for: anAccount) report.
												
	self assert: (anAccountSummaryAccount hasEqualElements: expectedAccountSummary).
	self assert: anAccountSummaryAccount last equals: 'Balance = -80'.
	! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 21:19:14' prior: 50877842!
test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance

	| anAccount expectedAccountSummary anAccountSummaryAccount |
	
	anAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10' with:  'Balance = 10'.
	anAccountSummaryAccount :=  (AccountSummaryReporter for: anAccount) report.
	
	self assert: expectedAccountSummary equals: anAccountSummaryAccount.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 21:19:14' prior: 50878033!
test17

	| aPortfolio anAccount anotherAccount expectedAccountSummary aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
		
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.

	self assert: 'Balance = 80' equals:aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 21:19:14' prior: 50878062!
test18

	| aPortfolio anAccount anotherAccount expectedAccountSummary anotherPortfolio aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	anotherPortfolio := Portfolio new.
	anotherPortfolio add: anAccount.
	anotherPortfolio add: anotherAccount.
	
	aPortfolio add: anotherPortfolio.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.


	self assert: 'Balance = 80' equals:  aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).! !

!methodRemoval: AccountSummaryReporter #accountSummary stamp: 'AM 11/12/2020 21:19:14'!
accountSummary

	accountSummary := OrderedCollection new.
	
	account report: self.
	accountSummary add:  'Balance = ', account balance asString.
	
	^ accountSummary.!
!NetTransferReporter methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 21:19:29'!
report

	netTransfer := 0.
	account report: self. 
	
	^ netTransfer
	
	! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 21:19:29' prior: 50878095!
test18

	| anEmptyAccount emptyAccountNetTransfer |
	
	anEmptyAccount := ReceptiveAccount new.
	
	emptyAccountNetTransfer :=  (NetTransferReporter for: anEmptyAccount) report.
	
	self assert: emptyAccountNetTransfer equals: 0.! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 21:19:29' prior: 50877792!
test20

	| anAccount anotherAccount anAccountNetTransferReport |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anotherAccount to: anAccount for: 500.
	Deposit register: 50 on: anAccount.
	Withdraw register: 20 on: anAccount.
	
	anAccountNetTransferReport := (NetTransferReporter for: anAccount) report.
	
	self assert: anAccountNetTransferReport equals: 500.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 21:19:29' prior: 50878129!
test19

	| anEmptyPortfolio emptyPortfolioNetTransfer |
	
	anEmptyPortfolio := Portfolio new.
	
	emptyPortfolioNetTransfer :=  (NetTransferReporter for: anEmptyPortfolio) report.

	self assert:  emptyPortfolioNetTransfer equals: 0.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 21:19:29' prior: 50878140!
test20

	| aPortfolio anAccount anotherAccount aPortfolioNetTransfer |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount for: 100.
	
	aPortfolio := Portfolio with: anAccount.
	
	aPortfolioNetTransfer :=  (NetTransferReporter for: aPortfolio) report.

	
	self assert: aPortfolioNetTransfer equals: -100.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 21:19:29' prior: 50878156!
test21

	| aPortfolio anAccount anotherAccount aPortfolioNetTransfer |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount for: 100.
	
	aPortfolio := Portfolio with: anAccount with: anotherAccount.
	
	aPortfolioNetTransfer :=  (NetTransferReporter for: aPortfolio) report.
	
	self assert: aPortfolioNetTransfer equals: 0.! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 21:19:29' prior: 50877740!
test19

	| anAccount anotherAccount anAccountNetTransferReport anotherAccountNetTransferReport |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anAccount to: anotherAccount for: 500.
	anAccountNetTransferReport := (NetTransferReporter for: anAccount) report.
	anotherAccountNetTransferReport := (NetTransferReporter for: anotherAccount) report.
	
	self assert: anAccountNetTransferReport equals: -500.
	self assert: anotherAccountNetTransferReport equals: 500.! !

!methodRemoval: NetTransferReporter #netTransfer stamp: 'AM 11/12/2020 21:19:29'!
netTransfer

	netTransfer := 0.
	account report: self. 
	
	^ netTransfer
	
	!
!Reporter methodsFor: 'nil' stamp: 'AM 11/12/2020 21:19:40'!
report
	self subclassResponsibility ! !
!Reporter methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 21:19:41' prior: 50878585!
report

	self subclassResponsibility ! !
!NetTransferReporter methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 21:23:09' prior: 50877078 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	^ aPortfolio accounts do: [ :anAccount | anAccount report: self ].
	
	"aPortfolio onAccountsDo: [ :anAccount | anAccount report: self ]"! !
!ReceptiveAccountTest methodsFor: 'tests - account summary' stamp: 'AM 11/12/2020 21:26:30'!
test17AReceptiveAccountWithEveryTransactionRetrievesExpectedAccountSummary

	| anAccount expectedAccountSummary anotherAccount anAccountSummaryAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	Withdraw register: 40  on: anAccount.
	Transfer from: anAccount to: anotherAccount for: 100.
	Transfer from: anotherAccount to: anAccount for: 50.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10'
												with: 'Extracci�n por 40'
												with: 'Salida por transferencia de 100'
												with: 'Entrada por transferencia de 50'
												with: 'Balance = -80'.
												
	anAccountSummaryAccount := (AccountSummaryReporter for: anAccount) report.
												
	self assert: (anAccountSummaryAccount hasEqualElements: expectedAccountSummary).
	self assert: anAccountSummaryAccount last equals: 'Balance = -80'.
	! !

!methodRemoval: ReceptiveAccountTest #test17 stamp: 'AM 11/12/2020 21:26:30'!
test17

	| anAccount expectedAccountSummary anotherAccount anAccountSummaryAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	Withdraw register: 40  on: anAccount.
	Transfer from: anAccount to: anotherAccount for: 100.
	Transfer from: anotherAccount to: anAccount for: 50.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10'
												with: 'Extracci�n por 40'
												with: 'Salida por transferencia de 100'
												with: 'Entrada por transferencia de 50'
												with: 'Balance = -80'.
												
	anAccountSummaryAccount := (AccountSummaryReporter for: anAccount) report.
												
	self assert: (anAccountSummaryAccount hasEqualElements: expectedAccountSummary).
	self assert: anAccountSummaryAccount last equals: 'Balance = -80'.
	!
!ReceptiveAccountTest methodsFor: 'tests - account summary' stamp: 'AM 11/12/2020 21:27:04'!
test17AReceptiveAccountWithEveryTransactionShowsThemInAccountSummaryAffectingBalance

	| anAccount expectedAccountSummary anotherAccount anAccountSummaryAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	Withdraw register: 40  on: anAccount.
	Transfer from: anAccount to: anotherAccount for: 100.
	Transfer from: anotherAccount to: anAccount for: 50.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10'
												with: 'Extracci�n por 40'
												with: 'Salida por transferencia de 100'
												with: 'Entrada por transferencia de 50'
												with: 'Balance = -80'.
												
	anAccountSummaryAccount := (AccountSummaryReporter for: anAccount) report.
												
	self assert: (anAccountSummaryAccount hasEqualElements: expectedAccountSummary).
	self assert: anAccountSummaryAccount last equals: 'Balance = -80'.
	! !

!methodRemoval: ReceptiveAccountTest #test17AReceptiveAccountWithEveryTransactionRetrievesExpectedAccountSummary stamp: 'AM 11/12/2020 21:27:04'!
test17AReceptiveAccountWithEveryTransactionRetrievesExpectedAccountSummary

	| anAccount expectedAccountSummary anotherAccount anAccountSummaryAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	Withdraw register: 40  on: anAccount.
	Transfer from: anAccount to: anotherAccount for: 100.
	Transfer from: anotherAccount to: anAccount for: 50.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10'
												with: 'Extracci�n por 40'
												with: 'Salida por transferencia de 100'
												with: 'Entrada por transferencia de 50'
												with: 'Balance = -80'.
												
	anAccountSummaryAccount := (AccountSummaryReporter for: anAccount) report.
												
	self assert: (anAccountSummaryAccount hasEqualElements: expectedAccountSummary).
	self assert: anAccountSummaryAccount last equals: 'Balance = -80'.
	!
!ReceptiveAccountTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 21:27:38'!
test18AnEmptyReceptiveAccountHasZeroNetTransfer

	| anEmptyAccount emptyAccountNetTransfer |
	
	anEmptyAccount := ReceptiveAccount new.
	
	emptyAccountNetTransfer :=  (NetTransferReporter for: anEmptyAccount) report.
	
	self assert: emptyAccountNetTransfer equals: 0.! !

!methodRemoval: ReceptiveAccountTest #test18 stamp: 'AM 11/12/2020 21:27:39'!
test18

	| anEmptyAccount emptyAccountNetTransfer |
	
	anEmptyAccount := ReceptiveAccount new.
	
	emptyAccountNetTransfer :=  (NetTransferReporter for: anEmptyAccount) report.
	
	self assert: emptyAccountNetTransfer equals: 0.!
!ReceptiveAccountTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 21:28:19'!
test19TransfersAffectCorrectlyNetTransfer

	| anAccount anotherAccount anAccountNetTransferReport anotherAccountNetTransferReport |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anAccount to: anotherAccount for: 500.
	anAccountNetTransferReport := (NetTransferReporter for: anAccount) report.
	anotherAccountNetTransferReport := (NetTransferReporter for: anotherAccount) report.
	
	self assert: anAccountNetTransferReport equals: -500.
	self assert: anotherAccountNetTransferReport equals: 500.! !

!methodRemoval: ReceptiveAccountTest #test19 stamp: 'AM 11/12/2020 21:28:19'!
test19

	| anAccount anotherAccount anAccountNetTransferReport anotherAccountNetTransferReport |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anAccount to: anotherAccount for: 500.
	anAccountNetTransferReport := (NetTransferReporter for: anAccount) report.
	anotherAccountNetTransferReport := (NetTransferReporter for: anotherAccount) report.
	
	self assert: anAccountNetTransferReport equals: -500.
	self assert: anotherAccountNetTransferReport equals: 500.!
!ReceptiveAccountTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 21:28:53'!
test20JustTransfersAffectNetTransfersInReceptieAccount

	| anAccount anotherAccount anAccountNetTransferReport |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anotherAccount to: anAccount for: 500.
	Deposit register: 50 on: anAccount.
	Withdraw register: 20 on: anAccount.
	
	anAccountNetTransferReport := (NetTransferReporter for: anAccount) report.
	
	self assert: anAccountNetTransferReport equals: 500.
	! !

!methodRemoval: ReceptiveAccountTest #test20 stamp: 'AM 11/12/2020 21:28:53'!
test20

	| anAccount anotherAccount anAccountNetTransferReport |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anotherAccount to: anAccount for: 500.
	Deposit register: 50 on: anAccount.
	Withdraw register: 20 on: anAccount.
	
	anAccountNetTransferReport := (NetTransferReporter for: anAccount) report.
	
	self assert: anAccountNetTransferReport equals: 500.
	!
!ReceptiveAccountTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 21:29:03'!
test20JustTransfersAffectNetTransfersInReceptiveAccount

	| anAccount anotherAccount anAccountNetTransferReport |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anotherAccount to: anAccount for: 500.
	Deposit register: 50 on: anAccount.
	Withdraw register: 20 on: anAccount.
	
	anAccountNetTransferReport := (NetTransferReporter for: anAccount) report.
	
	self assert: anAccountNetTransferReport equals: 500.
	! !

!methodRemoval: ReceptiveAccountTest #test20JustTransfersAffectNetTransfersInReceptieAccount stamp: 'AM 11/12/2020 21:29:03'!
test20JustTransfersAffectNetTransfersInReceptieAccount

	| anAccount anotherAccount anAccountNetTransferReport |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anotherAccount to: anAccount for: 500.
	Deposit register: 50 on: anAccount.
	Withdraw register: 20 on: anAccount.
	
	anAccountNetTransferReport := (NetTransferReporter for: anAccount) report.
	
	self assert: anAccountNetTransferReport equals: 500.
	!
!ReceptiveAccountTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 21:29:10'!
test19TransfersAffectCorrectlyNetTransferInReceptiveAccount

	| anAccount anotherAccount anAccountNetTransferReport anotherAccountNetTransferReport |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anAccount to: anotherAccount for: 500.
	anAccountNetTransferReport := (NetTransferReporter for: anAccount) report.
	anotherAccountNetTransferReport := (NetTransferReporter for: anotherAccount) report.
	
	self assert: anAccountNetTransferReport equals: -500.
	self assert: anotherAccountNetTransferReport equals: 500.! !

!methodRemoval: ReceptiveAccountTest #test19TransfersAffectCorrectlyNetTransfer stamp: 'AM 11/12/2020 21:29:10'!
test19TransfersAffectCorrectlyNetTransfer

	| anAccount anotherAccount anAccountNetTransferReport anotherAccountNetTransferReport |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anAccount to: anotherAccount for: 500.
	anAccountNetTransferReport := (NetTransferReporter for: anAccount) report.
	anotherAccountNetTransferReport := (NetTransferReporter for: anotherAccount) report.
	
	self assert: anAccountNetTransferReport equals: -500.
	self assert: anotherAccountNetTransferReport equals: 500.!
!PortfolioTest methodsFor: 'tests - account summary' stamp: 'AM 11/12/2020 21:29:45'!
test16AnEmptyPortfolioJustShowsZeroBalanceInAccountSummary

	| aPortfolio anEmptyPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anEmptyPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.
	
	self assert: (anEmptyPortfolioAccountSummary hasEqualElements: { 'Balance = 0' } )! !

!methodRemoval: PortfolioTest #test16 stamp: 'AM 11/12/2020 21:29:46'!
test16

	| aPortfolio anEmptyPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anEmptyPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.
	
	self assert: (anEmptyPortfolioAccountSummary hasEqualElements: { 'Balance = 0' } )!
!PortfolioTest methodsFor: 'tests - account summary' stamp: 'AM 11/12/2020 21:30:22'!
test17APortfolioWithReceptiveAccountsShowsTheTransactionsOfThem

	| aPortfolio anAccount anotherAccount expectedAccountSummary aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
		
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.

	self assert: 'Balance = 80' equals:aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).! !

!methodRemoval: PortfolioTest #test17 stamp: 'AM 11/12/2020 21:30:22'!
test17

	| aPortfolio anAccount anotherAccount expectedAccountSummary aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
		
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.

	self assert: 'Balance = 80' equals:aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).!
!PortfolioTest methodsFor: 'tests - account summary' stamp: 'AM 11/12/2020 21:30:39'!
test17APortfolioWithReceptiveAccountsShowsTheirTransactions

	| aPortfolio anAccount anotherAccount expectedAccountSummary aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
		
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.

	self assert: 'Balance = 80' equals:aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).! !

!methodRemoval: PortfolioTest #test17APortfolioWithReceptiveAccountsShowsTheTransactionsOfThem stamp: 'AM 11/12/2020 21:30:40'!
test17APortfolioWithReceptiveAccountsShowsTheTransactionsOfThem

	| aPortfolio anAccount anotherAccount expectedAccountSummary aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
		
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.

	self assert: 'Balance = 80' equals:aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).!
!PortfolioTest methodsFor: 'tests - account summary' stamp: 'AM 11/12/2020 21:31:09'!
test18APortfolioWithPortfolioShowsTheTransactionsOfAllTheReceptiveAccounts

	| aPortfolio anAccount anotherAccount expectedAccountSummary anotherPortfolio aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	anotherPortfolio := Portfolio new.
	anotherPortfolio add: anAccount.
	anotherPortfolio add: anotherAccount.
	
	aPortfolio add: anotherPortfolio.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.


	self assert: 'Balance = 80' equals:  aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).! !

!methodRemoval: PortfolioTest #test18 stamp: 'AM 11/12/2020 21:31:09'!
test18

	| aPortfolio anAccount anotherAccount expectedAccountSummary anotherPortfolio aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	anotherPortfolio := Portfolio new.
	anotherPortfolio add: anAccount.
	anotherPortfolio add: anotherAccount.
	
	aPortfolio add: anotherPortfolio.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.


	self assert: 'Balance = 80' equals:  aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).!
!PortfolioTest methodsFor: 'tests - account summary' stamp: 'AM 11/12/2020 21:31:33'!
test17APortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance

	| aPortfolio anAccount anotherAccount expectedAccountSummary aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
		
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.

	self assert: 'Balance = 80' equals:aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).! !

!methodRemoval: PortfolioTest #test17APortfolioWithReceptiveAccountsShowsTheirTransactions stamp: 'AM 11/12/2020 21:31:33'!
test17APortfolioWithReceptiveAccountsShowsTheirTransactions

	| aPortfolio anAccount anotherAccount expectedAccountSummary aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
		
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.

	self assert: 'Balance = 80' equals:aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).!
!PortfolioTest methodsFor: 'tests - account summary' stamp: 'AM 11/12/2020 21:31:43'!
test16AnEmptyPortfolioOnlyShowsZeroBalanceInAccountSummary

	| aPortfolio anEmptyPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anEmptyPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.
	
	self assert: (anEmptyPortfolioAccountSummary hasEqualElements: { 'Balance = 0' } )! !

!methodRemoval: PortfolioTest #test16AnEmptyPortfolioJustShowsZeroBalanceInAccountSummary stamp: 'AM 11/12/2020 21:31:43'!
test16AnEmptyPortfolioJustShowsZeroBalanceInAccountSummary

	| aPortfolio anEmptyPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anEmptyPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.
	
	self assert: (anEmptyPortfolioAccountSummary hasEqualElements: { 'Balance = 0' } )!
!PortfolioTest methodsFor: 'tests - account summary' stamp: 'AM 11/12/2020 21:31:55'!
test18APortfolioWithPortfolioShowsTheTransactionsOfAllTheReceptiveAccountsAndBalance

	| aPortfolio anAccount anotherAccount expectedAccountSummary anotherPortfolio aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	anotherPortfolio := Portfolio new.
	anotherPortfolio add: anAccount.
	anotherPortfolio add: anotherAccount.
	
	aPortfolio add: anotherPortfolio.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.


	self assert: 'Balance = 80' equals:  aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).! !

!methodRemoval: PortfolioTest #test18APortfolioWithPortfolioShowsTheTransactionsOfAllTheReceptiveAccounts stamp: 'AM 11/12/2020 21:31:55'!
test18APortfolioWithPortfolioShowsTheTransactionsOfAllTheReceptiveAccounts

	| aPortfolio anAccount anotherAccount expectedAccountSummary anotherPortfolio aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	anotherPortfolio := Portfolio new.
	anotherPortfolio add: anAccount.
	anotherPortfolio add: anotherAccount.
	
	aPortfolio add: anotherPortfolio.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.


	self assert: 'Balance = 80' equals:  aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).!
!PortfolioTest methodsFor: 'tests - account summary' stamp: 'AM 11/12/2020 21:32:31'!
test17APortfolioWithReceptiveAccountsShowsAccountSummary

	| aPortfolio anAccount anotherAccount expectedAccountSummary aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
		
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.

	self assert: 'Balance = 80' equals:aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).! !

!methodRemoval: PortfolioTest #test17APortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/12/2020 21:32:31'!
test17APortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance

	| aPortfolio anAccount anotherAccount expectedAccountSummary aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
		
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.

	self assert: 'Balance = 80' equals:aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).!
!PortfolioTest methodsFor: 'tests - account summary' stamp: 'AM 11/12/2020 21:32:42'!
test18APortfolioWithPortfolioShowsAccountSummary

	| aPortfolio anAccount anotherAccount expectedAccountSummary anotherPortfolio aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	anotherPortfolio := Portfolio new.
	anotherPortfolio add: anAccount.
	anotherPortfolio add: anotherAccount.
	
	aPortfolio add: anotherPortfolio.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.


	self assert: 'Balance = 80' equals:  aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).! !

!methodRemoval: PortfolioTest #test18APortfolioWithPortfolioShowsTheTransactionsOfAllTheReceptiveAccountsAndBalance stamp: 'AM 11/12/2020 21:32:42'!
test18APortfolioWithPortfolioShowsTheTransactionsOfAllTheReceptiveAccountsAndBalance

	| aPortfolio anAccount anotherAccount expectedAccountSummary anotherPortfolio aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	anotherPortfolio := Portfolio new.
	anotherPortfolio add: anAccount.
	anotherPortfolio add: anotherAccount.
	
	aPortfolio add: anotherPortfolio.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.


	self assert: 'Balance = 80' equals:  aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).!
!PortfolioTest methodsFor: 'tests - account summary' stamp: 'AM 11/12/2020 21:33:10'!
test18APortfolioWithPortfoliosShowsAccountSummary

	| aPortfolio anAccount anotherAccount expectedAccountSummary anotherPortfolio aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	anotherPortfolio := Portfolio new.
	anotherPortfolio add: anAccount.
	anotherPortfolio add: anotherAccount.
	
	aPortfolio add: anotherPortfolio.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.


	self assert: 'Balance = 80' equals:  aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).! !

!methodRemoval: PortfolioTest #test18APortfolioWithPortfolioShowsAccountSummary stamp: 'AM 11/12/2020 21:33:10'!
test18APortfolioWithPortfolioShowsAccountSummary

	| aPortfolio anAccount anotherAccount expectedAccountSummary anotherPortfolio aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	anotherPortfolio := Portfolio new.
	anotherPortfolio add: anAccount.
	anotherPortfolio add: anotherAccount.
	
	aPortfolio add: anotherPortfolio.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.


	self assert: 'Balance = 80' equals:  aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).!
!PortfolioTest methodsFor: 'tests - account summary' stamp: 'AM 11/12/2020 21:33:50'!
test18PortfolioAccountSummaryIsCalculatedRecurively

	| aPortfolio anAccount anotherAccount expectedAccountSummary anotherPortfolio aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	anotherPortfolio := Portfolio new.
	anotherPortfolio add: anAccount.
	anotherPortfolio add: anotherAccount.
	
	aPortfolio add: anotherPortfolio.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.


	self assert: 'Balance = 80' equals:  aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).! !

!methodRemoval: PortfolioTest #test18APortfolioWithPortfoliosShowsAccountSummary stamp: 'AM 11/12/2020 21:33:50'!
test18APortfolioWithPortfoliosShowsAccountSummary

	| aPortfolio anAccount anotherAccount expectedAccountSummary anotherPortfolio aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	anotherPortfolio := Portfolio new.
	anotherPortfolio add: anAccount.
	anotherPortfolio add: anotherAccount.
	
	aPortfolio add: anotherPortfolio.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.


	self assert: 'Balance = 80' equals:  aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).!
!PortfolioTest methodsFor: 'tests - account summary' stamp: 'AM 11/12/2020 21:33:55'!
test18PortfolioAccountSummaryIsCalculatedRecursively

	| aPortfolio anAccount anotherAccount expectedAccountSummary anotherPortfolio aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	anotherPortfolio := Portfolio new.
	anotherPortfolio add: anAccount.
	anotherPortfolio add: anotherAccount.
	
	aPortfolio add: anotherPortfolio.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.


	self assert: 'Balance = 80' equals:  aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).! !

!methodRemoval: PortfolioTest #test18PortfolioAccountSummaryIsCalculatedRecurively stamp: 'AM 11/12/2020 21:33:55'!
test18PortfolioAccountSummaryIsCalculatedRecurively

	| aPortfolio anAccount anotherAccount expectedAccountSummary anotherPortfolio aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	anotherPortfolio := Portfolio new.
	anotherPortfolio add: anAccount.
	anotherPortfolio add: anotherAccount.
	
	aPortfolio add: anotherPortfolio.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.


	self assert: 'Balance = 80' equals:  aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).!
!PortfolioTest methodsFor: 'tests - account summary' stamp: 'AM 11/12/2020 21:34:41'!
test16AccountSummaryOfEmptyPortfolioOnlyShowsZeroBalance

	| aPortfolio anEmptyPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anEmptyPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.
	
	self assert: (anEmptyPortfolioAccountSummary hasEqualElements: { 'Balance = 0' } )! !

!methodRemoval: PortfolioTest #test16AnEmptyPortfolioOnlyShowsZeroBalanceInAccountSummary stamp: 'AM 11/12/2020 21:34:41'!
test16AnEmptyPortfolioOnlyShowsZeroBalanceInAccountSummary

	| aPortfolio anEmptyPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anEmptyPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.
	
	self assert: (anEmptyPortfolioAccountSummary hasEqualElements: { 'Balance = 0' } )!
!PortfolioTest methodsFor: 'tests - account summary' stamp: 'AM 11/12/2020 21:35:25'!
test17AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance

	| aPortfolio anAccount anotherAccount expectedAccountSummary aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
		
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.

	self assert: 'Balance = 80' equals:aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).! !

!methodRemoval: PortfolioTest #test17APortfolioWithReceptiveAccountsShowsAccountSummary stamp: 'AM 11/12/2020 21:35:25'!
test17APortfolioWithReceptiveAccountsShowsAccountSummary

	| aPortfolio anAccount anotherAccount expectedAccountSummary aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
		
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.

	self assert: 'Balance = 80' equals:aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).!
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 21:36:44'!
test19NetTransferOfEmptyPortfolioIsZero

	| anEmptyPortfolio emptyPortfolioNetTransfer |
	
	anEmptyPortfolio := Portfolio new.
	
	emptyPortfolioNetTransfer :=  (NetTransferReporter for: anEmptyPortfolio) report.

	self assert:  emptyPortfolioNetTransfer equals: 0.! !

!methodRemoval: PortfolioTest #test19 stamp: 'AM 11/12/2020 21:36:44'!
test19

	| anEmptyPortfolio emptyPortfolioNetTransfer |
	
	anEmptyPortfolio := Portfolio new.
	
	emptyPortfolioNetTransfer :=  (NetTransferReporter for: anEmptyPortfolio) report.

	self assert:  emptyPortfolioNetTransfer equals: 0.!
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 21:37:10'!
test20NetTransferOfPortfolioWithReceptiveAccountsIsTheirSumOfNetTransfers

	| aPortfolio anAccount anotherAccount aPortfolioNetTransfer |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount for: 100.
	
	aPortfolio := Portfolio with: anAccount.
	
	aPortfolioNetTransfer :=  (NetTransferReporter for: aPortfolio) report.

	
	self assert: aPortfolioNetTransfer equals: -100.! !

!methodRemoval: PortfolioTest #test20 stamp: 'AM 11/12/2020 21:37:10'!
test20

	| aPortfolio anAccount anotherAccount aPortfolioNetTransfer |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount for: 100.
	
	aPortfolio := Portfolio with: anAccount.
	
	aPortfolioNetTransfer :=  (NetTransferReporter for: aPortfolio) report.

	
	self assert: aPortfolioNetTransfer equals: -100.!
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 21:37:33'!
test21NetTransferIsCalculatedRecursivelyInAPortfolio

	| aPortfolio anAccount anotherAccount aPortfolioNetTransfer |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount for: 100.
	
	aPortfolio := Portfolio with: anAccount with: anotherAccount.
	
	aPortfolioNetTransfer :=  (NetTransferReporter for: aPortfolio) report.
	
	self assert: aPortfolioNetTransfer equals: 0.! !

!methodRemoval: PortfolioTest #test21 stamp: 'AM 11/12/2020 21:37:33'!
test21

	| aPortfolio anAccount anotherAccount aPortfolioNetTransfer |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount for: 100.
	
	aPortfolio := Portfolio with: anAccount with: anotherAccount.
	
	aPortfolioNetTransfer :=  (NetTransferReporter for: aPortfolio) report.
	
	self assert: aPortfolioNetTransfer equals: 0.!
!Transfer methodsFor: 'accesing' stamp: 'AM 11/12/2020 21:39:08'!
receiving
	
	^ outgoing! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 21:39:08' prior: 50870620!
test12TransferComponentsKnowTheirTransfer
	
	| aReceivingAccount aSendingAccount transfer deposit withdrawal |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	transfer := Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	
	deposit := transfer deposit.
	withdrawal := transfer receiving .
	
	self assert: deposit transfer equals: transfer.
	self assert: withdrawal transfer equals: transfer.! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 21:39:08' prior: 50870546!
test11AccountsRegisterTransfersThatAffectThem
	
	| aReceivingAccount aSendingAccount transfer |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	transfer := Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	
	self assert: (aReceivingAccount 	hasRegistered: transfer deposit).
	self deny:   (aSendingAccount   	hasRegistered: transfer deposit).
	
	self assert: (aSendingAccount 	  hasRegistered: transfer receiving).
	self deny:   (aReceivingAccount 	hasRegistered: transfer receiving).! !

!methodRemoval: Transfer #withdrawal stamp: 'AM 11/12/2020 21:39:08'!
withdrawal
	
	^ outgoing!

!classDefinition: #Transfer category: 'Portfolio' stamp: 'AM 11/12/2020 21:39:14'!
Object subclass: #Transfer
	instanceVariableNames: 'sendingReceptiveAccount receivingReceptiveAccount value incoming receiving'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 21:39:14' prior: 50879768!
receiving
	
	^ receiving! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 21:39:15' prior: 50870749!
initializeFrom: aSendingReceptiveAccount to: aReceivingReceptiveAccount for: aValue 

	receiving := SendingTransferComponent for: aSendingReceptiveAccount transfer: self.
	incoming := ReceivingTransferComponent for: aReceivingReceptiveAccount transfer: self. 
	value := aValue.! !
!Transfer methodsFor: 'accessing' stamp: 'AM 11/12/2020 21:39:28'!
sending
	
	^ incoming! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 21:39:28' prior: 50879773!
test12TransferComponentsKnowTheirTransfer
	
	| aReceivingAccount aSendingAccount transfer deposit withdrawal |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	transfer := Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	
	deposit := transfer sending.
	withdrawal := transfer receiving .
	
	self assert: deposit transfer equals: transfer.
	self assert: withdrawal transfer equals: transfer.! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 21:39:28' prior: 50879791!
test11AccountsRegisterTransfersThatAffectThem
	
	| aReceivingAccount aSendingAccount transfer |
	
	aSendingAccount := ReceptiveAccount new.
	aReceivingAccount := ReceptiveAccount new.
	
	transfer := Transfer from: aSendingAccount to: aReceivingAccount for: 100.
	
	self assert: (aReceivingAccount 	hasRegistered: transfer sending).
	self deny:   (aSendingAccount   	hasRegistered: transfer sending).
	
	self assert: (aSendingAccount 	  hasRegistered: transfer receiving).
	self deny:   (aReceivingAccount 	hasRegistered: transfer receiving).! !

!methodRemoval: Transfer #deposit stamp: 'AM 11/12/2020 21:39:28'!
deposit
	
	^ incoming!

!classDefinition: #Transfer category: 'Portfolio' stamp: 'AM 11/12/2020 21:39:34'!
Object subclass: #Transfer
	instanceVariableNames: 'sendingReceptiveAccount receivingReceptiveAccount value sending receiving'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 21:39:34' prior: 50879838!
sending
	
	^ sending! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 21:39:34' prior: 50879827!
initializeFrom: aSendingReceptiveAccount to: aReceivingReceptiveAccount for: aValue 

	receiving := SendingTransferComponent for: aSendingReceptiveAccount transfer: self.
	sending := ReceivingTransferComponent for: aReceivingReceptiveAccount transfer: self. 
	value := aValue.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/12/2020 21:39:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 21:39:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 21:39:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/12/2020 21:39:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/12/2020 21:39:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/12/2020 21:39:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/12/2020 21:39:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/12/2020 21:39:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/12/2020 21:39:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/12/2020 21:39:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/12/2020 21:39:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/12/2020 21:39:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/12/2020 21:39:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/12/2020 21:39:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/12/2020 21:39:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/12/2020 21:39:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test17AReceptiveAccountWithEveryTransactionShowsThemInAccountSummaryAffectingBalance stamp: 'AM 11/12/2020 21:39:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test18AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/12/2020 21:39:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test19TransfersAffectCorrectlyNetTransferInReceptiveAccount stamp: 'AM 11/12/2020 21:39:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test20JustTransfersAffectNetTransfersInReceptiveAccount stamp: 'AM 11/12/2020 21:39:37'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/12/2020 21:39:40'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/12/2020 21:39:40'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/12/2020 21:39:40'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/12/2020 21:39:40'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/12/2020 21:39:40'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/12/2020 21:39:40'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/12/2020 21:39:40'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/12/2020 21:39:40'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/12/2020 21:39:40'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/12/2020 21:39:40'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/12/2020 21:39:40'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/12/2020 21:39:40'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/12/2020 21:39:40'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/12/2020 21:39:40'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/12/2020 21:39:40'!
PASSED!

!testRun: #PortfolioTest #test16AccountSummaryOfEmptyPortfolioOnlyShowsZeroBalance stamp: 'AM 11/12/2020 21:39:40'!
PASSED!

!testRun: #PortfolioTest #test17AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/12/2020 21:39:40'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/12/2020 21:39:40'!
PASSED!

!testRun: #PortfolioTest #test19NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/12/2020 21:39:40'!
PASSED!

!testRun: #PortfolioTest #test20NetTransferOfPortfolioWithReceptiveAccountsIsTheirSumOfNetTransfers stamp: 'AM 11/12/2020 21:39:40'!
PASSED!

!testRun: #PortfolioTest #test21NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/12/2020 21:39:40'!
PASSED!
!Account methodsFor: 'reports' stamp: 'AM 11/12/2020 21:45:08'!
report: aReporter

	self subclassResponsibility.! !
!Portfolio methodsFor: 'reports' stamp: 'AM 11/12/2020 21:45:17' prior: 50877097 overrides: 50880070!
report: aReporter

	aReporter reportPortfolio: self.! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'AM 11/12/2020 21:45:28' prior: 50877191 overrides: 50880070!
report: aReporter

	aReporter reportReceptiveAccount: self.! !
!AccountTransaction methodsFor: 'reports' stamp: 'AM 11/12/2020 21:45:42' prior: 50876734!
report: aReporter

	self subclassResponsibility 
	
	! !
!Deposit methodsFor: 'reports' stamp: 'AM 11/12/2020 21:45:48' prior: 50877059 overrides: 50880086!
report: aReporter

	aReporter reportDeposit: self.! !
!ReceivingTransferComponent methodsFor: 'reports' stamp: 'AM 11/12/2020 21:46:01' prior: 50877141 overrides: 50880086!
report: aReporter
	
	aReporter reportReceivingTransferComponent: self.! !
!SendingTransferComponent methodsFor: 'reports' stamp: 'AM 11/12/2020 21:46:09' prior: 50877238 overrides: 50880086!
report: aReporter

	aReporter reportSendingTransferComponent: self.! !
!Withdraw methodsFor: 'reports' stamp: 'AM 11/12/2020 21:46:16' prior: 50877281 overrides: 50880086!
report: aReporter

	aReporter reportWithdraw: self.! !

!classDefinition: #TreeStructureReporter category: 'Reporter' stamp: 'AM 11/12/2020 21:50:10'!
Object subclass: #TreeStructureReporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Reporter'!
!ReceptiveAccountTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 21:50:00' prior: 50878732!
test18AnEmptyReceptiveAccountHasZeroNetTransfer

	| anEmptyAccount emptyAccountNetTransfer |
	
	anEmptyAccount := ReceptiveAccount new.
	
	emptyAccountNetTransfer :=  (TreeStructureReporter for: anEmptyAccount) report.
	
	self assert: emptyAccountNetTransfer equals: 0.! !
!ReceptiveAccountTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 21:27:38' prior: 50880122!
test18AnEmptyReceptiveAccountHasZeroNetTransfer

	| anEmptyAccount emptyAccountNetTransfer |
	
	anEmptyAccount := ReceptiveAccount new.
	
	emptyAccountNetTransfer :=  (NetTransferReporter for: anEmptyAccount) report.
	
	self assert: emptyAccountNetTransfer equals: 0.! !

!testRun: #ReceptiveAccountTest #test18AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/12/2020 21:50:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/12/2020 21:50:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 21:50:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 21:50:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/12/2020 21:50:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/12/2020 21:50:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/12/2020 21:50:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/12/2020 21:50:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/12/2020 21:50:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/12/2020 21:50:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/12/2020 21:50:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/12/2020 21:50:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/12/2020 21:50:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/12/2020 21:50:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/12/2020 21:50:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/12/2020 21:50:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/12/2020 21:50:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test17AReceptiveAccountWithEveryTransactionShowsThemInAccountSummaryAffectingBalance stamp: 'AM 11/12/2020 21:50:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test18AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/12/2020 21:50:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test19TransfersAffectCorrectlyNetTransferInReceptiveAccount stamp: 'AM 11/12/2020 21:50:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test20JustTransfersAffectNetTransfersInReceptiveAccount stamp: 'AM 11/12/2020 21:50:45'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 21:52:04'!
test21AReceptiveAccountShowsItselfOnTreeStructure

	| anEmptyAccount emptyAccountNetTransfer aReceptiveAccount |
	
	aReceptiveAccount := ReceptiveAccount new.
	
	aReceptiveAccount :=  (TreeStructureReporter for: anEmptyAccount) report.
	
	self assert: emptyAccountNetTransfer equals: 0.! !
!ReceptiveAccountTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 21:53:30' prior: 50880230!
test21AReceptiveAccountShowsItselfOnTreeStructure

	| aReceptiveAccount aReceptiveAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	
	aReceptiveAccountTreeStructure :=  (TreeStructureReporter for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'}).! !

!testRun: #ReceptiveAccountTest #test21AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/12/2020 21:53:39'!
ERROR!
!ReceptiveAccount class methodsFor: 'instance creation' stamp: 'AM 11/12/2020 21:53:50'!
named: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString ! !
!ReceptiveAccount class methodsFor: 'instance creation' stamp: 'AM 11/12/2020 21:54:06' prior: 50880261!
named: aReceptiveAccountName

	^self new initializeNamed: aReceptiveAccountName ! !

!testRun: #ReceptiveAccountTest #test21AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/12/2020 21:54:07'!
ERROR!

!classDefinition: #ReceptiveAccount category: 'Portfolio' stamp: 'AM 11/12/2020 21:54:19'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions transfer receptiveAccountName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!ReceptiveAccount methodsFor: 'intialization' stamp: 'AM 11/12/2020 21:54:19'!
initializeNamed: aReceptiveAccountName 
	self shouldBeImplemented.
	receptiveAccountName := aReceptiveAccountName.! !

!classDefinition: #ReceptiveAccount category: 'Portfolio' stamp: 'AM 11/12/2020 21:54:31'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions transfer receptiveAccountName name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!ReceptiveAccount methodsFor: 'intialization' stamp: 'AM 11/12/2020 21:54:27' prior: 50880288!
initializeNamed: aReceptiveAccountName 
	
	name := aReceptiveAccountName.! !

!testRun: #ReceptiveAccountTest #test21AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/12/2020 21:54:34'!
ERROR!

!classDefinition: #TreeStructureReporte category: 'Portfolio' stamp: 'AM 11/12/2020 21:55:25'!
Reporter subclass: #TreeStructureReporte
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!ReceptiveAccountTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 21:55:10' prior: 50880243!
test21AReceptiveAccountShowsItselfOnTreeStructure

	| aReceptiveAccount aReceptiveAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	
	aReceptiveAccountTreeStructure :=  (TreeStructureReporte for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'}).! !

!classRemoval: #TreeStructureReporter stamp: 'AM 11/12/2020 21:55:34'!
Object subclass: #TreeStructureReporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Reporter'!

Object subclass: #Transfer
	instanceVariableNames: 'value sending receiving'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #Transfer category: 'Portfolio' stamp: 'AM 11/12/2020 21:56:00'!
Object subclass: #Transfer
	instanceVariableNames: 'value sending receiving'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRenamed: #TreeStructureReporte as: #TreeStructureReporter stamp: 'AM 11/12/2020 21:56:16'!
Smalltalk renameClassNamed: #TreeStructureReporte as: #TreeStructureReporter!
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 21:56:17' prior: 50880321!
test21AReceptiveAccountShowsItselfOnTreeStructure

	| aReceptiveAccount aReceptiveAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	
	aReceptiveAccountTreeStructure :=  (TreeStructureReporter for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'}).! !

!testRun: #ReceptiveAccountTest #test21AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/12/2020 21:56:26'!
ERROR!
!TreeStructureReporter methodsFor: 'reporting' stamp: 'AM 11/12/2020 21:56:47' overrides: 50878590!
report
	self shouldBeImplemented.! !
!TreeStructureReporter methodsFor: 'reporting' stamp: 'AM 11/12/2020 21:56:58' prior: 50880378 overrides: 50878590!
report
	
	^ account name! !

!testRun: #ReceptiveAccountTest #test21AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/12/2020 21:57:00'!
FAILURE!
!TreeStructureReporter methodsFor: 'reporting' stamp: 'AM 11/12/2020 21:57:43' prior: 50880383 overrides: 50878590!
report
	
	^ OrderedCollection with: account name! !

!testRun: #ReceptiveAccountTest #test21AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/12/2020 21:57:44'!
FAILURE!

(TreeStructureReporter for: aReceptiveAccount) report.!
!ReceptiveAccount methodsFor: 'accessing' stamp: 'AM 11/12/2020 21:58:28' overrides: 16882612!
name
	^name! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/12/2020 21:58:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 21:58:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 21:58:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/12/2020 21:58:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/12/2020 21:58:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/12/2020 21:58:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/12/2020 21:58:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/12/2020 21:58:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/12/2020 21:58:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/12/2020 21:58:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/12/2020 21:58:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/12/2020 21:58:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/12/2020 21:58:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/12/2020 21:58:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/12/2020 21:58:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/12/2020 21:58:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test17AReceptiveAccountWithEveryTransactionShowsThemInAccountSummaryAffectingBalance stamp: 'AM 11/12/2020 21:58:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test18AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/12/2020 21:58:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test19TransfersAffectCorrectlyNetTransferInReceptiveAccount stamp: 'AM 11/12/2020 21:58:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test20JustTransfersAffectNetTransfersInReceptiveAccount stamp: 'AM 11/12/2020 21:58:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test21AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/12/2020 21:58:37'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests - tree structure' stamp: 'AM 11/12/2020 21:59:48'!
test22AReceptiveAccountWithEveryTransactionJustShowsItsName

	| aReceptiveAccount aReceptiveAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	
	aReceptiveAccountTreeStructure :=  (TreeStructureReporter for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'}).! !
!ReceptiveAccountTest methodsFor: 'tests - tree structure' stamp: 'AM 11/12/2020 22:00:00' prior: 50880491!
test22AReceptiveAccountWithEveryTransactionJustShowsItsName

	| aReceptiveAccount aReceptiveAccountTreeStructure anotherReceptiveAccount |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	anotherReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	
	
	aReceptiveAccountTreeStructure :=  (TreeStructureReporter for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'}).! !
!ReceptiveAccountTest methodsFor: 'tests - tree structure' stamp: 'AM 11/12/2020 22:00:39' prior: 50880506!
test22AReceptiveAccountWithEveryTransactionJustShowsItsName

	| aReceptiveAccount aReceptiveAccountTreeStructure anotherReceptiveAccount |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	anotherReceptiveAccount := ReceptiveAccount new.
	
	
	aReceptiveAccountTreeStructure :=  (TreeStructureReporter for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'}).! !
!ReceptiveAccountTest methodsFor: 'tests - tree structure' stamp: 'AM 11/12/2020 22:02:30' prior: 50880524!
test22AReceptiveAccountWithEveryTransactionJustShowsItsName

	| aReceptiveAccount aReceptiveAccountTreeStructure anotherReceptiveAccount |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	anotherReceptiveAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: aReceptiveAccount.
	Withdraw register: 100 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount to: anotherReceptiveAccount  for: 100.
	Transfer from: anotherReceptiveAccount to: aReceptiveAccount  for: 100.
	
	
	aReceptiveAccountTreeStructure :=  (TreeStructureReporter for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'}).! !
!ReceptiveAccountTest methodsFor: 'tests - tree structure' stamp: 'AM 11/12/2020 22:02:56' prior: 50880542!
test22AReceptiveAccountWithEveryTransactionJustShowsItsName

	| aReceptiveAccount aReceptiveAccountTreeStructure anotherReceptiveAccount |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepe'.
	anotherReceptiveAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: aReceptiveAccount.
	Withdraw register: 100 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount to: anotherReceptiveAccount  for: 100.
	Transfer from: anotherReceptiveAccount to: aReceptiveAccount  for: 100.
	
	
	aReceptiveAccountTreeStructure :=  (TreeStructureReporter for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepe'}).! !

!testRun: #ReceptiveAccountTest #test22AReceptiveAccountWithEveryTransactionJustShowsItsName stamp: 'AM 11/12/2020 22:02:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/12/2020 22:02:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 22:02:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 22:02:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/12/2020 22:02:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/12/2020 22:02:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/12/2020 22:02:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/12/2020 22:02:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/12/2020 22:02:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/12/2020 22:02:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/12/2020 22:02:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/12/2020 22:02:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/12/2020 22:02:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/12/2020 22:02:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/12/2020 22:02:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/12/2020 22:02:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/12/2020 22:02:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test17AReceptiveAccountWithEveryTransactionShowsThemInAccountSummaryAffectingBalance stamp: 'AM 11/12/2020 22:02:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test18AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/12/2020 22:02:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test19TransfersAffectCorrectlyNetTransferInReceptiveAccount stamp: 'AM 11/12/2020 22:02:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test20JustTransfersAffectNetTransfersInReceptiveAccount stamp: 'AM 11/12/2020 22:02:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test21AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/12/2020 22:02:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test22AReceptiveAccountWithEveryTransactionJustShowsItsName stamp: 'AM 11/12/2020 22:02:59'!
PASSED!

!methodRemoval: ReceptiveAccountTest #test22AReceptiveAccountWithEveryTransactionJustShowsItsName stamp: 'AM 11/12/2020 22:03:21'!
test22AReceptiveAccountWithEveryTransactionJustShowsItsName

	| aReceptiveAccount aReceptiveAccountTreeStructure anotherReceptiveAccount |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepe'.
	anotherReceptiveAccount := ReceptiveAccount new.
	
	Deposit register: 100 on: aReceptiveAccount.
	Withdraw register: 100 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount to: anotherReceptiveAccount  for: 100.
	Transfer from: anotherReceptiveAccount to: aReceptiveAccount  for: 100.
	
	
	aReceptiveAccountTreeStructure :=  (TreeStructureReporter for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepe'}).!

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions transfer name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio' stamp: 'AM 11/12/2020 22:36:31'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions transfer name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio' stamp: 'AM 11/12/2020 22:36:36'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions transfer accountName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 22:36:37' prior: 50880403 overrides: 16882612!
name
	^accountName! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 22:36:37' prior: 50880304!
initializeNamed: aReceptiveAccountName 
	
	accountName := aReceptiveAccountName.! !

!classDefinition: #ReceptiveAccount category: 'Portfolio' stamp: 'AM 11/12/2020 22:36:43'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions transfer name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 22:36:43' prior: 50880731 overrides: 16882612!
name
	^name! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 22:36:43' prior: 50880735!
initializeNamed: aReceptiveAccountName 
	
	name := aReceptiveAccountName.! !
!ReceptiveAccount methodsFor: 'accessing' stamp: 'AM 11/12/2020 22:36:54'!
accountName
	^name! !
!TreeStructureReporter methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 22:36:55' prior: 50880392 overrides: 50878590!
report
	
	^ OrderedCollection with: account accountName! !

!methodRemoval: ReceptiveAccount #name stamp: 'AM 11/12/2020 22:36:55'!
name
	^name!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/12/2020 22:36:59'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/12/2020 22:36:59'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/12/2020 22:36:59'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/12/2020 22:36:59'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/12/2020 22:36:59'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/12/2020 22:36:59'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/12/2020 22:36:59'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/12/2020 22:36:59'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/12/2020 22:36:59'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/12/2020 22:36:59'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/12/2020 22:36:59'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/12/2020 22:36:59'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/12/2020 22:36:59'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/12/2020 22:36:59'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/12/2020 22:36:59'!
PASSED!

!testRun: #PortfolioTest #test16AccountSummaryOfEmptyPortfolioOnlyShowsZeroBalance stamp: 'AM 11/12/2020 22:36:59'!
PASSED!

!testRun: #PortfolioTest #test17AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/12/2020 22:36:59'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/12/2020 22:36:59'!
PASSED!

!testRun: #PortfolioTest #test19NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/12/2020 22:36:59'!
PASSED!

!testRun: #PortfolioTest #test20NetTransferOfPortfolioWithReceptiveAccountsIsTheirSumOfNetTransfers stamp: 'AM 11/12/2020 22:36:59'!
PASSED!

!testRun: #PortfolioTest #test21NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/12/2020 22:36:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/12/2020 22:37:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 22:37:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 22:37:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/12/2020 22:37:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/12/2020 22:37:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/12/2020 22:37:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/12/2020 22:37:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/12/2020 22:37:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/12/2020 22:37:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/12/2020 22:37:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/12/2020 22:37:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/12/2020 22:37:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/12/2020 22:37:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/12/2020 22:37:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/12/2020 22:37:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/12/2020 22:37:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test17AReceptiveAccountWithEveryTransactionShowsThemInAccountSummaryAffectingBalance stamp: 'AM 11/12/2020 22:37:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test18AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/12/2020 22:37:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test19TransfersAffectCorrectlyNetTransferInReceptiveAccount stamp: 'AM 11/12/2020 22:37:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test20JustTransfersAffectNetTransfersInReceptiveAccount stamp: 'AM 11/12/2020 22:37:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test21AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/12/2020 22:37:01'!
PASSED!

!classDefinition: #TreeStructureReporter category: 'Portfolio' stamp: 'AM 11/12/2020 22:46:15'!
Reporter subclass: #TreeStructureReporter
	instanceVariableNames: 'treeStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!TreeStructureReporter methodsFor: 'reporting' stamp: 'AM 11/12/2020 22:46:13' prior: 50880764 overrides: 50878590!
report
	
	treeStructure := OrderedCollection new.
	account report: self.
	
	^ treeStructure! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/12/2020 22:48:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 22:48:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 22:48:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/12/2020 22:48:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/12/2020 22:48:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/12/2020 22:48:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/12/2020 22:48:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/12/2020 22:48:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/12/2020 22:48:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/12/2020 22:48:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/12/2020 22:48:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/12/2020 22:48:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/12/2020 22:48:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/12/2020 22:48:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/12/2020 22:48:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/12/2020 22:48:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test17AReceptiveAccountWithEveryTransactionShowsThemInAccountSummaryAffectingBalance stamp: 'AM 11/12/2020 22:48:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test18AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/12/2020 22:48:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test19TransfersAffectCorrectlyNetTransferInReceptiveAccount stamp: 'AM 11/12/2020 22:48:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test20JustTransfersAffectNetTransfersInReceptiveAccount stamp: 'AM 11/12/2020 22:48:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test21AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/12/2020 22:48:05'!
ERROR!

!testRun: #ReceptiveAccountTest #test21AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/12/2020 22:48:05'!
ERROR!
!TreeStructureReporter methodsFor: 'reporting -\- private' stamp: 'AM 11/12/2020 22:48:19' overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	self shouldBeImplemented.! !
!TreeStructureReporter methodsFor: 'reporting -\- private' stamp: 'AM 11/12/2020 22:48:32' prior: 50881041 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	^ aReceptiveAccount accountName! !

!testRun: #ReceptiveAccountTest #test21AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/12/2020 22:48:44'!
FAILURE!
!TreeStructureReporter methodsFor: 'reporting -\- private' stamp: 'AM 11/12/2020 22:49:34' prior: 50881048 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	treeStructure add: aReceptiveAccount accountName! !

!testRun: #ReceptiveAccountTest #test21AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/12/2020 22:49:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/12/2020 22:49:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 22:49:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/12/2020 22:49:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/12/2020 22:49:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/12/2020 22:49:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/12/2020 22:49:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/12/2020 22:49:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/12/2020 22:49:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/12/2020 22:49:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/12/2020 22:49:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/12/2020 22:49:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/12/2020 22:49:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/12/2020 22:49:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/12/2020 22:49:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/12/2020 22:49:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/12/2020 22:49:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test17AReceptiveAccountWithEveryTransactionShowsThemInAccountSummaryAffectingBalance stamp: 'AM 11/12/2020 22:49:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test18AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/12/2020 22:49:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test19TransfersAffectCorrectlyNetTransferInReceptiveAccount stamp: 'AM 11/12/2020 22:49:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test20JustTransfersAffectNetTransfersInReceptiveAccount stamp: 'AM 11/12/2020 22:49:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test21AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/12/2020 22:49:49'!
PASSED!
!PortfolioTest methodsFor: 'tests - net transfer' stamp: 'AM 11/12/2020 22:51:05'!
test22TreeStructureOfEmptyPortfolioIsZItsName

	| anEmptyPortfolio emptyPortfolioTreeStructure |
	
	anEmptyPortfolio := Portfolio new.
	
	emptyPortfolioTreeStructure :=  (TreeStructureReporter for: anEmptyPortfolio) report.

	self assert:  (emptyPortfolioTreeStructure hasEqualElements: { 'Portfolio de Pepito' } ).! !

!testRun: #PortfolioTest #test22TreeStructureOfEmptyPortfolioIsZItsName stamp: 'AM 11/12/2020 22:51:27'!
ERROR!
!TreeStructureReporter methodsFor: 'reporting' stamp: 'AM 11/12/2020 22:51:44' overrides: 50877084!
reportPortfolio: aPortfolio 
	self shouldBeImplemented.! !
!TreeStructureReporter methodsFor: 'reporting' stamp: 'AM 11/12/2020 22:52:16' prior: 50881170 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	treeStructure add: aPortfolio accountName! !

!testRun: #PortfolioTest #test22TreeStructureOfEmptyPortfolioIsZItsName stamp: 'AM 11/12/2020 22:52:18'!
ERROR!
!PortfolioTest methodsFor: 'tests - tree structure' stamp: 'AM 11/12/2020 22:52:32' prior: 50881153!
test22TreeStructureOfEmptyPortfolioIsZItsName

	| anEmptyPortfolio emptyPortfolioTreeStructure |
	
	anEmptyPortfolio := Portfolio named: 'Portfolio de Pepito'.
	
	emptyPortfolioTreeStructure :=  (TreeStructureReporter for: anEmptyPortfolio) report.

	self assert:  (emptyPortfolioTreeStructure hasEqualElements: { 'Portfolio de Pepito' } ).! !

!testRun: #PortfolioTest #test22TreeStructureOfEmptyPortfolioIsZItsName stamp: 'AM 11/12/2020 22:52:35'!
ERROR!
!Account class methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 22:53:03'!
named: aString 
	self shouldBeImplemented.! !
!Account class methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 22:54:00' prior: 50881203!
named: anAccountName 
	
	self new initializeNamed: anAccountName! !

!testRun: #PortfolioTest #test22TreeStructureOfEmptyPortfolioIsZItsName stamp: 'AM 11/12/2020 22:54:04'!
ERROR!

!classDefinition: #Portfolio category: 'Portfolio' stamp: 'AM 11/12/2020 22:54:19'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents accountName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!Portfolio methodsFor: 'initialization' stamp: 'AM 11/12/2020 22:54:19'!
initializeNamed: anAccountName 
	self shouldBeImplemented.
	accountName := anAccountName.! !
!Portfolio methodsFor: 'initialization' stamp: 'AM 11/12/2020 22:54:22' prior: 50881224!
initializeNamed: anAccountName 
	
	accountName := anAccountName.! !

!testRun: #PortfolioTest #test22TreeStructureOfEmptyPortfolioIsZItsName stamp: 'AM 11/12/2020 22:54:27'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'AM 11/12/2020 22:55:22'!
accountName
	^ accountName! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/12/2020 22:55:23'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/12/2020 22:55:23'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/12/2020 22:55:23'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/12/2020 22:55:23'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/12/2020 22:55:23'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/12/2020 22:55:23'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/12/2020 22:55:23'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/12/2020 22:55:23'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/12/2020 22:55:23'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/12/2020 22:55:23'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/12/2020 22:55:23'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/12/2020 22:55:23'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/12/2020 22:55:23'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/12/2020 22:55:23'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/12/2020 22:55:23'!
PASSED!

!testRun: #PortfolioTest #test16AccountSummaryOfEmptyPortfolioOnlyShowsZeroBalance stamp: 'AM 11/12/2020 22:55:24'!
PASSED!

!testRun: #PortfolioTest #test17AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/12/2020 22:55:24'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/12/2020 22:55:24'!
PASSED!

!testRun: #PortfolioTest #test19NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/12/2020 22:55:24'!
PASSED!

!testRun: #PortfolioTest #test20NetTransferOfPortfolioWithReceptiveAccountsIsTheirSumOfNetTransfers stamp: 'AM 11/12/2020 22:55:24'!
PASSED!

!testRun: #PortfolioTest #test21NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/12/2020 22:55:24'!
PASSED!

!testRun: #PortfolioTest #test22TreeStructureOfEmptyPortfolioIsZItsName stamp: 'AM 11/12/2020 22:55:24'!
ERROR!

!testRun: #PortfolioTest #test22TreeStructureOfEmptyPortfolioIsZItsName stamp: 'AM 11/12/2020 22:55:24'!
ERROR!
!Account class methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 22:55:51' prior: 50881208!
named: anAccountName 
	
	^ self new initializeNamed: anAccountName! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/12/2020 22:55:56'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/12/2020 22:55:56'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/12/2020 22:55:56'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/12/2020 22:55:56'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/12/2020 22:55:56'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/12/2020 22:55:56'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/12/2020 22:55:56'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/12/2020 22:55:56'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/12/2020 22:55:56'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/12/2020 22:55:56'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/12/2020 22:55:56'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/12/2020 22:55:56'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/12/2020 22:55:56'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/12/2020 22:55:56'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/12/2020 22:55:56'!
PASSED!

!testRun: #PortfolioTest #test16AccountSummaryOfEmptyPortfolioOnlyShowsZeroBalance stamp: 'AM 11/12/2020 22:55:56'!
PASSED!

!testRun: #PortfolioTest #test17AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/12/2020 22:55:56'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/12/2020 22:55:56'!
PASSED!

!testRun: #PortfolioTest #test19NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/12/2020 22:55:56'!
PASSED!

!testRun: #PortfolioTest #test20NetTransferOfPortfolioWithReceptiveAccountsIsTheirSumOfNetTransfers stamp: 'AM 11/12/2020 22:55:56'!
PASSED!

!testRun: #PortfolioTest #test21NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/12/2020 22:55:56'!
PASSED!

!testRun: #PortfolioTest #test22TreeStructureOfEmptyPortfolioIsZItsName stamp: 'AM 11/12/2020 22:55:56'!
PASSED!
!PortfolioTest methodsFor: 'tests - tree structure' stamp: 'AM 11/12/2020 22:57:06' prior: 50881186!
test22TreeStructureOfEmptyPortfolioIsZItsName

	| aPortfolio emptyPortfolioTreeStructure aReceptiveAccount anotherReceptiveAccount |
	
	aPortfolio := Portfolio named: 'Portfolio de Pepito'.
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepe'.
	anotherReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepote'.
	
	emptyPortfolioTreeStructure :=  (TreeStructureReporter for: aPortfolio) report.

	self assert:  (emptyPortfolioTreeStructure hasEqualElements: { 'Portfolio de Pepito' } ).! !
!PortfolioTest methodsFor: 'tests - tree structure' stamp: 'AM 11/12/2020 23:01:29' prior: 50881422!
test22TreeStructureOfEmptyPortfolioIsZItsName

	| aPortfolio aReceptiveAccount anotherReceptiveAccount aPortfolioTreeStructure |
	
	aPortfolio := Portfolio named: 'Portfolio de Pepito'.
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepe'.
	anotherReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepote'.
	
	aPortfolioTreeStructure :=  (TreeStructureReporter for: aPortfolio) report.

	self assert:  (aPortfolioTreeStructure hasEqualElements: { 'Portfolio de Pepito'. '\tCuenta de Pepe'. '\tCuenta de Pepote'}).
	self assert:   aPortfolioTreeStructure first equals: 'Portfolio de Pepito'.! !

!testRun: #PortfolioTest #test22TreeStructureOfEmptyPortfolioIsZItsName stamp: 'AM 11/12/2020 23:01:42'!
FAILURE!
!PortfolioTest methodsFor: 'tests - tree structure' stamp: 'AM 11/12/2020 22:52:32' prior: 50881441!
test22TreeStructureOfEmptyPortfolioIsZItsName

	| anEmptyPortfolio emptyPortfolioTreeStructure |
	
	anEmptyPortfolio := Portfolio named: 'Portfolio de Pepito'.
	
	emptyPortfolioTreeStructure :=  (TreeStructureReporter for: anEmptyPortfolio) report.

	self assert:  (emptyPortfolioTreeStructure hasEqualElements: { 'Portfolio de Pepito' } ).! !
!PortfolioTest methodsFor: 'tests - tree structure' stamp: 'AM 11/12/2020 23:02:14'!
test23

	| anEmptyPortfolio emptyPortfolioTreeStructure |
	
	anEmptyPortfolio := Portfolio named: 'Portfolio de Pepito'.
	
	emptyPortfolioTreeStructure :=  (TreeStructureReporter for: anEmptyPortfolio) report.

	self assert:  (emptyPortfolioTreeStructure hasEqualElements: { 'Portfolio de Pepito' } ).! !
!PortfolioTest methodsFor: 'tests - tree structure' stamp: 'AM 11/12/2020 23:02:24' prior: 50881481!
test23

	| aPortfolio aReceptiveAccount anotherReceptiveAccount aPortfolioTreeStructure |
	
	aPortfolio := Portfolio named: 'Portfolio de Pepito'.
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepe'.
	anotherReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepote'.
	
	aPortfolioTreeStructure :=  (TreeStructureReporter for: aPortfolio) report.

	self assert:  (aPortfolioTreeStructure hasEqualElements: { 'Portfolio de Pepito'. '\tCuenta de Pepe'. '\tCuenta de Pepote'}).
	self assert:   aPortfolioTreeStructure first equals: 'Portfolio de Pepito'.! !

!testRun: #PortfolioTest #test23 stamp: 'AM 11/12/2020 23:02:32'!
FAILURE!
!TreeStructureReporter methodsFor: 'reporting' stamp: 'AM 11/12/2020 23:03:53' prior: 50881176 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	| tabs |
	treeStructure add: aPortfolio accountName.
	tabs := 1.
	aPortfolio accounts do: [:anAccount | anAccount report: self ].
	tabs := 0.! !
!TreeStructureReporter methodsFor: 'reporting' stamp: 'AM 11/12/2020 23:04:01' prior: 50881518 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	| tab |
	treeStructure add: aPortfolio accountName.
	tab := 1.
	aPortfolio accounts do: [:anAccount | anAccount report: self ].
	tab := 0.! !

!classDefinition: #TreeStructureReporter category: 'Portfolio' stamp: 'AM 11/12/2020 23:04:10'!
Reporter subclass: #TreeStructureReporter
	instanceVariableNames: 'treeStructure tabs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!TreeStructureReporter methodsFor: 'reporting' stamp: 'AM 11/12/2020 23:04:08' prior: 50881528 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	
	treeStructure add: aPortfolio accountName.
	tabs := 1.
	aPortfolio accounts do: [:anAccount | anAccount report: self ].
	tabs := 0.! !

!testRun: #PortfolioTest #test23 stamp: 'AM 11/12/2020 23:04:14'!
FAILURE!
!PortfolioTest methodsFor: 'tests - tree structure' stamp: 'AM 11/12/2020 23:06:08' prior: 50881494!
test23

	| pepitoPortfolio pepeReceptiveAccount pepoteReceptiveAccount pepitoPortfolioTreeStructure |
	
	pepitoPortfolio := Portfolio named: 'Portfolio de Pepito'.
	
	pepeReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepe'.
	pepoteReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepote'.
	
	pepitoPortfolio add: pepeReceptiveAccount.
	pepitoPortfolio add: pepoteReceptiveAccount.
	
	pepitoPortfolioTreeStructure :=  (TreeStructureReporter for: pepitoPortfolio) report.

	self assert:  (pepitoPortfolioTreeStructure hasEqualElements: { 'Portfolio de Pepito'. '\tCuenta de Pepe'. '\tCuenta de Pepote'}).
	self assert:   pepitoPortfolioTreeStructure first equals: 'Portfolio de Pepito'.! !

!testRun: #PortfolioTest #test23 stamp: 'AM 11/12/2020 23:06:10'!
FAILURE!
!TreeStructureReporter methodsFor: 'reporting -\- private' stamp: 'AM 11/12/2020 23:07:56' prior: 50881059 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	| leadingTabs |
	leadingTabs := ''.
	 tabs timesRepeat: [leadingTabs := leadingTabs, '\t'].
	treeStructure add: leadingTabs, aReceptiveAccount accountName! !

!testRun: #PortfolioTest #test23 stamp: 'AM 11/12/2020 23:08:01'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/12/2020 23:08:01'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/12/2020 23:08:01'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/12/2020 23:08:01'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/12/2020 23:08:01'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/12/2020 23:08:01'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/12/2020 23:08:01'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/12/2020 23:08:01'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/12/2020 23:08:01'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/12/2020 23:08:01'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/12/2020 23:08:01'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/12/2020 23:08:01'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/12/2020 23:08:01'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/12/2020 23:08:01'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/12/2020 23:08:01'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/12/2020 23:08:01'!
PASSED!

!testRun: #PortfolioTest #test16AccountSummaryOfEmptyPortfolioOnlyShowsZeroBalance stamp: 'AM 11/12/2020 23:08:01'!
PASSED!

!testRun: #PortfolioTest #test17AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/12/2020 23:08:01'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/12/2020 23:08:01'!
PASSED!

!testRun: #PortfolioTest #test19NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/12/2020 23:08:01'!
PASSED!

!testRun: #PortfolioTest #test20NetTransferOfPortfolioWithReceptiveAccountsIsTheirSumOfNetTransfers stamp: 'AM 11/12/2020 23:08:01'!
PASSED!

!testRun: #PortfolioTest #test21NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/12/2020 23:08:01'!
PASSED!

!testRun: #PortfolioTest #test22TreeStructureOfEmptyPortfolioIsZItsName stamp: 'AM 11/12/2020 23:08:01'!
PASSED!

!testRun: #PortfolioTest #test23 stamp: 'AM 11/12/2020 23:08:01'!
PASSED!
!PortfolioTest methodsFor: 'tests - tree structure' stamp: 'AM 11/12/2020 23:11:28'!
test24

	| pepitoPortfolioTreeStructure agustinPortfolio hernanReceptiveAccount nahuelPortfolio |
	
	agustinPortfolio := Portfolio named: 'Portfolio de Agustin'.
	nahuelPortfolio := Portfolio named: 'Portfolio de Nahuel'.
	
	hernanReceptiveAccount := ReceptiveAccount named: 'Cuenta de Hernan'.
	
	agustinPortfolio add: nahuelPortfolio.
	nahuelPortfolio add: hernanReceptiveAccount.
	
	pepitoPortfolioTreeStructure :=  (TreeStructureReporter for: agustinPortfolio) report.

	self assert:  (pepitoPortfolioTreeStructure hasEqualElements: { 'Portfolio de Agustin'. '\tCuenta de Nahuel'. '\t\tCuenta de Hernan'}).
	self assert:   pepitoPortfolioTreeStructure first equals: 'Portfolio de Agustin'.
	self assert:   pepitoPortfolioTreeStructure last equals: 'Portfolio de Hernan'.! !
!PortfolioTest methodsFor: 'tests - tree structure' stamp: 'AM 11/12/2020 23:11:45' prior: 50881684!
test24

	| agustinPortfolioTreeStructure agustinPortfolio hernanReceptiveAccount nahuelPortfolio |
	
	agustinPortfolio := Portfolio named: 'Portfolio de Agustin'.
	nahuelPortfolio := Portfolio named: 'Portfolio de Nahuel'.
	
	hernanReceptiveAccount := ReceptiveAccount named: 'Cuenta de Hernan'.
	
	agustinPortfolio add: nahuelPortfolio.
	nahuelPortfolio add: hernanReceptiveAccount.
	
	agustinPortfolioTreeStructure :=  (TreeStructureReporter for: agustinPortfolio) report.

	self assert:  (agustinPortfolioTreeStructure hasEqualElements: { 'Portfolio de Agustin'. '\tCuenta de Nahuel'. '\t\tCuenta de Hernan'}).
	self assert:   agustinPortfolioTreeStructure first equals: 'Portfolio de Agustin'.
	self assert:   agustinPortfolioTreeStructure last equals: 'Portfolio de Hernan'.! !

!testRun: #PortfolioTest #test24 stamp: 'AM 11/12/2020 23:11:54'!
FAILURE!
!TreeStructureReporter methodsFor: 'reporting' stamp: 'AM 11/12/2020 23:12:22' prior: 50880946 overrides: 50878590!
report
	
	treeStructure := OrderedCollection new.
	tabs := ''.
	
	account report: self.
	
	^ treeStructure! !
!TreeStructureReporter methodsFor: 'reporting' stamp: 'AM 11/12/2020 23:15:35' prior: 50881545 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	
	treeStructure add: aPortfolio accountName.
	tabs := tabs + 1.
	aPortfolio accounts do: [:anAccount | anAccount report: self ].
	tabs := tabs - 1.! !

!testRun: #PortfolioTest #test24 stamp: 'AM 11/12/2020 23:15:38'!
ERROR!
!TreeStructureReporter methodsFor: 'reporting' stamp: 'AM 11/12/2020 23:15:51' prior: 50881743 overrides: 50878590!
report
	
	treeStructure := OrderedCollection new.
	tabs := 0.
	
	account report: self.
	
	^ treeStructure! !

!testRun: #PortfolioTest #test24 stamp: 'AM 11/12/2020 23:15:52'!
FAILURE!
!TreeStructureReporter methodsFor: 'reporting -\- private' stamp: 'AM 11/12/2020 23:16:46' prior: 50881585 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	| leadingTabs |
	leadingTabs := ''.
	tabs timesRepeat: [leadingTabs := leadingTabs, '\t'].
	treeStructure add: leadingTabs, aReceptiveAccount accountName! !

!testRun: #PortfolioTest #test24 stamp: 'AM 11/12/2020 23:16:51'!
FAILURE!
!TreeStructureReporter methodsFor: 'reporting' stamp: 'AM 11/12/2020 23:18:20' prior: 50881751 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	
	| leadingTabs |
	leadingTabs := ''.
	tabs timesRepeat: [leadingTabs := leadingTabs, '\t'].
	treeStructure add: aPortfolio accountName.
	tabs := tabs + 1.
	aPortfolio accounts do: [:anAccount | anAccount report: self ].
	tabs := tabs - 1.! !

!testRun: #PortfolioTest #test24 stamp: 'AM 11/12/2020 23:18:27'!
FAILURE!
!TreeStructureReporter methodsFor: 'reporting' stamp: 'AM 11/12/2020 23:19:12' prior: 50881786 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	
	| leadingTabs |
	leadingTabs := ''.
	tabs timesRepeat: [leadingTabs := leadingTabs, '\t'].
	treeStructure add: leadingTabs,  aPortfolio accountName.
	tabs := tabs + 1.
	aPortfolio accounts do: [:anAccount | anAccount report: self ].
	tabs := tabs - 1.! !

!testRun: #PortfolioTest #test24 stamp: 'AM 11/12/2020 23:19:23'!
FAILURE!
!PortfolioTest methodsFor: 'tests - tree structure' stamp: 'AM 11/12/2020 23:19:40' prior: 50881712!
test24

	| agustinPortfolioTreeStructure agustinPortfolio hernanReceptiveAccount nahuelPortfolio |
	
	agustinPortfolio := Portfolio named: 'Portfolio de Agustin'.
	nahuelPortfolio := Portfolio named: 'Portfolio de Nahuel'.
	
	hernanReceptiveAccount := ReceptiveAccount named: 'Cuenta de Hernan'.
	
	agustinPortfolio add: nahuelPortfolio.
	nahuelPortfolio add: hernanReceptiveAccount.
	
	agustinPortfolioTreeStructure :=  (TreeStructureReporter for: agustinPortfolio) report.

	self assert:  (agustinPortfolioTreeStructure hasEqualElements: { 'Portfolio de Agustin'. '\tPortfolio de Nahuel'. '\t\tCuenta de Hernan'}).
	self assert:   agustinPortfolioTreeStructure first equals: 'Portfolio de Agustin'.
	self assert:   agustinPortfolioTreeStructure last equals: 'Portfolio de Hernan'.! !

!testRun: #PortfolioTest #test24 stamp: 'AM 11/12/2020 23:19:42'!
FAILURE!
!PortfolioTest methodsFor: 'tests - tree structure' stamp: 'AM 11/12/2020 23:20:02' prior: 50881816!
test24

	| agustinPortfolioTreeStructure agustinPortfolio hernanReceptiveAccount nahuelPortfolio |
	
	agustinPortfolio := Portfolio named: 'Portfolio de Agustin'.
	nahuelPortfolio := Portfolio named: 'Portfolio de Nahuel'.
	
	hernanReceptiveAccount := ReceptiveAccount named: 'Cuenta de Hernan'.
	
	agustinPortfolio add: nahuelPortfolio.
	nahuelPortfolio add: hernanReceptiveAccount.
	
	agustinPortfolioTreeStructure :=  (TreeStructureReporter for: agustinPortfolio) report.

	self assert:  (agustinPortfolioTreeStructure hasEqualElements: { 'Portfolio de Agustin'. '\tPortfolio de Nahuel'. '\t\tCuenta de Hernan'}).
	self assert:   agustinPortfolioTreeStructure first equals: 'Portfolio de Agustin'.
	self assert:   agustinPortfolioTreeStructure last equals: 'Cuenta de Hernan'.! !

!testRun: #PortfolioTest #test24 stamp: 'AM 11/12/2020 23:20:04'!
FAILURE!
!PortfolioTest methodsFor: 'tests - tree structure' stamp: 'AM 11/12/2020 23:20:16' prior: 50881847!
test24

	| agustinPortfolioTreeStructure agustinPortfolio hernanReceptiveAccount nahuelPortfolio |
	
	agustinPortfolio := Portfolio named: 'Portfolio de Agustin'.
	nahuelPortfolio := Portfolio named: 'Portfolio de Nahuel'.
	
	hernanReceptiveAccount := ReceptiveAccount named: 'Cuenta de Hernan'.
	
	agustinPortfolio add: nahuelPortfolio.
	nahuelPortfolio add: hernanReceptiveAccount.
	
	agustinPortfolioTreeStructure :=  (TreeStructureReporter for: agustinPortfolio) report.

	self assert:  (agustinPortfolioTreeStructure hasEqualElements: { 'Portfolio de Agustin'. '\tPortfolio de Nahuel'. '\t\tCuenta de Hernan'}).
	self assert:   agustinPortfolioTreeStructure first equals: 'Portfolio de Agustin'.
	self assert:   agustinPortfolioTreeStructure last equals: '\t\tCuenta de Hernan'.! !

!testRun: #PortfolioTest #test24 stamp: 'AM 11/12/2020 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/12/2020 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/12/2020 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/12/2020 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/12/2020 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/12/2020 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/12/2020 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/12/2020 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/12/2020 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/12/2020 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/12/2020 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/12/2020 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/12/2020 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/12/2020 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/12/2020 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/12/2020 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test16AccountSummaryOfEmptyPortfolioOnlyShowsZeroBalance stamp: 'AM 11/12/2020 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test17AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/12/2020 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/12/2020 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test19NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/12/2020 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test20NetTransferOfPortfolioWithReceptiveAccountsIsTheirSumOfNetTransfers stamp: 'AM 11/12/2020 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test21NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/12/2020 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test22TreeStructureOfEmptyPortfolioIsZItsName stamp: 'AM 11/12/2020 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test23 stamp: 'AM 11/12/2020 23:20:18'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'AM 11/12/2020 23:20:18'!
PASSED!
!PortfolioTest methodsFor: 'tests - tree structure' stamp: 'AM 11/12/2020 23:20:59'!
test23APortfolioWIthReceptiveAccountsShowsTreeStructure

	| pepitoPortfolio pepeReceptiveAccount pepoteReceptiveAccount pepitoPortfolioTreeStructure |
	
	pepitoPortfolio := Portfolio named: 'Portfolio de Pepito'.
	
	pepeReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepe'.
	pepoteReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepote'.
	
	pepitoPortfolio add: pepeReceptiveAccount.
	pepitoPortfolio add: pepoteReceptiveAccount.
	
	pepitoPortfolioTreeStructure :=  (TreeStructureReporter for: pepitoPortfolio) report.

	self assert:  (pepitoPortfolioTreeStructure hasEqualElements: { 'Portfolio de Pepito'. '\tCuenta de Pepe'. '\tCuenta de Pepote'}).
	self assert:   pepitoPortfolioTreeStructure first equals: 'Portfolio de Pepito'.! !

!methodRemoval: PortfolioTest #test23 stamp: 'AM 11/12/2020 23:20:59'!
test23

	| pepitoPortfolio pepeReceptiveAccount pepoteReceptiveAccount pepitoPortfolioTreeStructure |
	
	pepitoPortfolio := Portfolio named: 'Portfolio de Pepito'.
	
	pepeReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepe'.
	pepoteReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepote'.
	
	pepitoPortfolio add: pepeReceptiveAccount.
	pepitoPortfolio add: pepoteReceptiveAccount.
	
	pepitoPortfolioTreeStructure :=  (TreeStructureReporter for: pepitoPortfolio) report.

	self assert:  (pepitoPortfolioTreeStructure hasEqualElements: { 'Portfolio de Pepito'. '\tCuenta de Pepe'. '\tCuenta de Pepote'}).
	self assert:   pepitoPortfolioTreeStructure first equals: 'Portfolio de Pepito'.!
!PortfolioTest methodsFor: 'tests - tree structure' stamp: 'AM 11/12/2020 23:21:07'!
test23APortfolioWithReceptiveAccountsShowsTreeStructure

	| pepitoPortfolio pepeReceptiveAccount pepoteReceptiveAccount pepitoPortfolioTreeStructure |
	
	pepitoPortfolio := Portfolio named: 'Portfolio de Pepito'.
	
	pepeReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepe'.
	pepoteReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepote'.
	
	pepitoPortfolio add: pepeReceptiveAccount.
	pepitoPortfolio add: pepoteReceptiveAccount.
	
	pepitoPortfolioTreeStructure :=  (TreeStructureReporter for: pepitoPortfolio) report.

	self assert:  (pepitoPortfolioTreeStructure hasEqualElements: { 'Portfolio de Pepito'. '\tCuenta de Pepe'. '\tCuenta de Pepote'}).
	self assert:   pepitoPortfolioTreeStructure first equals: 'Portfolio de Pepito'.! !

!methodRemoval: PortfolioTest #test23APortfolioWIthReceptiveAccountsShowsTreeStructure stamp: 'AM 11/12/2020 23:21:07'!
test23APortfolioWIthReceptiveAccountsShowsTreeStructure

	| pepitoPortfolio pepeReceptiveAccount pepoteReceptiveAccount pepitoPortfolioTreeStructure |
	
	pepitoPortfolio := Portfolio named: 'Portfolio de Pepito'.
	
	pepeReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepe'.
	pepoteReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepote'.
	
	pepitoPortfolio add: pepeReceptiveAccount.
	pepitoPortfolio add: pepoteReceptiveAccount.
	
	pepitoPortfolioTreeStructure :=  (TreeStructureReporter for: pepitoPortfolio) report.

	self assert:  (pepitoPortfolioTreeStructure hasEqualElements: { 'Portfolio de Pepito'. '\tCuenta de Pepe'. '\tCuenta de Pepote'}).
	self assert:   pepitoPortfolioTreeStructure first equals: 'Portfolio de Pepito'.!
!PortfolioTest methodsFor: 'tests - tree structure' stamp: 'AM 11/12/2020 23:22:14'!
test24TreeStructureIsCalculatedRecursively

	| agustinPortfolioTreeStructure agustinPortfolio hernanReceptiveAccount nahuelPortfolio |
	
	agustinPortfolio := Portfolio named: 'Portfolio de Agustin'.
	nahuelPortfolio := Portfolio named: 'Portfolio de Nahuel'.
	
	hernanReceptiveAccount := ReceptiveAccount named: 'Cuenta de Hernan'.
	
	agustinPortfolio add: nahuelPortfolio.
	nahuelPortfolio add: hernanReceptiveAccount.
	
	agustinPortfolioTreeStructure :=  (TreeStructureReporter for: agustinPortfolio) report.

	self assert:  (agustinPortfolioTreeStructure hasEqualElements: { 'Portfolio de Agustin'. '\tPortfolio de Nahuel'. '\t\tCuenta de Hernan'}).
	self assert:   agustinPortfolioTreeStructure first equals: 'Portfolio de Agustin'.
	self assert:   agustinPortfolioTreeStructure last equals: '\t\tCuenta de Hernan'.! !

!methodRemoval: PortfolioTest #test24 stamp: 'AM 11/12/2020 23:22:15'!
test24

	| agustinPortfolioTreeStructure agustinPortfolio hernanReceptiveAccount nahuelPortfolio |
	
	agustinPortfolio := Portfolio named: 'Portfolio de Agustin'.
	nahuelPortfolio := Portfolio named: 'Portfolio de Nahuel'.
	
	hernanReceptiveAccount := ReceptiveAccount named: 'Cuenta de Hernan'.
	
	agustinPortfolio add: nahuelPortfolio.
	nahuelPortfolio add: hernanReceptiveAccount.
	
	agustinPortfolioTreeStructure :=  (TreeStructureReporter for: agustinPortfolio) report.

	self assert:  (agustinPortfolioTreeStructure hasEqualElements: { 'Portfolio de Agustin'. '\tPortfolio de Nahuel'. '\t\tCuenta de Hernan'}).
	self assert:   agustinPortfolioTreeStructure first equals: 'Portfolio de Agustin'.
	self assert:   agustinPortfolioTreeStructure last equals: '\t\tCuenta de Hernan'.!
!PortfolioTest methodsFor: 'tests - tree structure' stamp: 'AM 11/12/2020 23:22:21'!
test24TreeStructureIsCalculatedRecursivelyInPortfolio

	| agustinPortfolioTreeStructure agustinPortfolio hernanReceptiveAccount nahuelPortfolio |
	
	agustinPortfolio := Portfolio named: 'Portfolio de Agustin'.
	nahuelPortfolio := Portfolio named: 'Portfolio de Nahuel'.
	
	hernanReceptiveAccount := ReceptiveAccount named: 'Cuenta de Hernan'.
	
	agustinPortfolio add: nahuelPortfolio.
	nahuelPortfolio add: hernanReceptiveAccount.
	
	agustinPortfolioTreeStructure :=  (TreeStructureReporter for: agustinPortfolio) report.

	self assert:  (agustinPortfolioTreeStructure hasEqualElements: { 'Portfolio de Agustin'. '\tPortfolio de Nahuel'. '\t\tCuenta de Hernan'}).
	self assert:   agustinPortfolioTreeStructure first equals: 'Portfolio de Agustin'.
	self assert:   agustinPortfolioTreeStructure last equals: '\t\tCuenta de Hernan'.! !

!methodRemoval: PortfolioTest #test24TreeStructureIsCalculatedRecursively stamp: 'AM 11/12/2020 23:22:21'!
test24TreeStructureIsCalculatedRecursively

	| agustinPortfolioTreeStructure agustinPortfolio hernanReceptiveAccount nahuelPortfolio |
	
	agustinPortfolio := Portfolio named: 'Portfolio de Agustin'.
	nahuelPortfolio := Portfolio named: 'Portfolio de Nahuel'.
	
	hernanReceptiveAccount := ReceptiveAccount named: 'Cuenta de Hernan'.
	
	agustinPortfolio add: nahuelPortfolio.
	nahuelPortfolio add: hernanReceptiveAccount.
	
	agustinPortfolioTreeStructure :=  (TreeStructureReporter for: agustinPortfolio) report.

	self assert:  (agustinPortfolioTreeStructure hasEqualElements: { 'Portfolio de Agustin'. '\tPortfolio de Nahuel'. '\t\tCuenta de Hernan'}).
	self assert:   agustinPortfolioTreeStructure first equals: 'Portfolio de Agustin'.
	self assert:   agustinPortfolioTreeStructure last equals: '\t\tCuenta de Hernan'.!
!TreeStructureReporter methodsFor: 'reporting' stamp: 'AM 11/12/2020 23:23:41'!
leadingTabs: aNumberOfTabs
	
	| leadingTabs |
	
	leadingTabs := ''.
	aNumberOfTabs timesRepeat: [leadingTabs := leadingTabs, '\t'].
	
	^leadingTabs ! !
!TreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/12/2020 23:24:11' prior: 50881773 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	| leadingTabs |
	
	leadingTabs := self leadingTabs: tabs.
	
	treeStructure add: leadingTabs, aReceptiveAccount accountName! !
!TreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/12/2020 23:24:13' prior: 50882225 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 

	| leadingTabs |
	
	leadingTabs := self leadingTabs: tabs.
	
	treeStructure add: leadingTabs, aReceptiveAccount accountName! !
!TreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/12/2020 23:24:22' prior: 50881801 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	
	| leadingTabs |
	
	
	treeStructure add: leadingTabs,  aPortfolio accountName.
	tabs := tabs + 1.
	aPortfolio accounts do: [:anAccount | anAccount report: self ].
	tabs := tabs - 1.! !
!TreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/12/2020 23:24:26' prior: 50882245 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	
	| leadingTabs |
	
	
	leadingTabs := self leadingTabs: tabs.
	
	treeStructure add: leadingTabs,  aPortfolio accountName.
	tabs := tabs + 1.
	aPortfolio accounts do: [:anAccount | anAccount report: self ].
	tabs := tabs - 1.! !
!TreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/12/2020 23:24:29' prior: 50882256 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	
	| leadingTabs |
	
	
	leadingTabs := self leadingTabs: tabs.
	
	treeStructure add: leadingTabs,  aPortfolio accountName.
	
	tabs := tabs + 1.
	aPortfolio accounts do: [:anAccount | anAccount report: self ].
	tabs := tabs - 1.! !

TestCase subclass: #DetailedTreeStructureReporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #DetailedTreeStructureReporter category: 'Portfolio' stamp: 'AM 11/12/2020 23:25:40'!
TestCase subclass: #DetailedTreeStructureReporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!DetailedTreeStructureReporter methodsFor: 'nil' stamp: 'AM 11/12/2020 23:25:52'!
test01

	! !
!DetailedTreeStructureReporter methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 23:26:40' prior: 50882293!
test01

	| aReceptiveAccount aReceptiveAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	
	aReceptiveAccountTreeStructure :=  (TreeStructureReporter for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'}).! !
!DetailedTreeStructureReporter methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 23:26:48' prior: 50882297!
test01

	| aReceptiveAccount aReceptiveAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	
	aReceptiveAccountTreeStructure :=  (DetailedTreeStructureReporter for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'}).! !

!testRun: #DetailedTreeStructureReporter #test01 stamp: 'AM 11/12/2020 23:26:54'!
ERROR!

!classRenamed: #DetailedTreeStructureReporter as: #DetailedTreeStructureReporterTest stamp: 'AM 11/12/2020 23:27:15'!
Smalltalk renameClassNamed: #DetailedTreeStructureReporter as: #DetailedTreeStructureReporterTest!
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 23:27:16' prior: 50882311!
test01

	| aReceptiveAccount aReceptiveAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	
	aReceptiveAccountTreeStructure :=  (DetailedTreeStructureReporterTest for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'}).! !

!classDefinition: #DetailedTreeStructureReporter category: 'Portfolio' stamp: 'AM 11/12/2020 23:27:32'!
Reporter subclass: #DetailedTreeStructureReporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 23:27:21' prior: 50882335!
test01

	| aReceptiveAccount aReceptiveAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	
	aReceptiveAccountTreeStructure :=  (DetailedTreeStructureReporter for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'}).! !

!testRun: #DetailedTreeStructureReporterTest #test01 stamp: 'AM 11/12/2020 23:27:40'!
ERROR!

!testRun: #DetailedTreeStructureReporterTest #test01 stamp: 'AM 11/12/2020 23:27:40'!
ERROR!
!DetailedTreeStructureReporter methodsFor: 'reporting' stamp: 'AM 11/12/2020 23:27:53' overrides: 50878590!
report
	self shouldBeImplemented.! !
!DetailedTreeStructureReporter methodsFor: 'reporting' stamp: 'AM 11/12/2020 23:28:09' prior: 50882377 overrides: 50878590!
report
	
	account report: self! !

!testRun: #DetailedTreeStructureReporterTest #test01 stamp: 'AM 11/12/2020 23:28:13'!
ERROR!
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/12/2020 23:28:25' overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	self shouldBeImplemented.! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/12/2020 23:29:10' prior: 50882391 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	| detailedTreeStructure |
	detailedTreeStructure := OrderedCollection with: aReceptiveAccount accountName ! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/12/2020 23:29:21' prior: 50882398 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	| detailedTreeStructure |
	
	detailedTreeStructure := OrderedCollection with: aReceptiveAccount accountName ! !
!DetailedTreeStructureReporter methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 23:29:31' prior: 50882408 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	 
	
	detailedTreeStructure := OrderedCollection with: aReceptiveAccount accountName ! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/12/2020 23:29:55' prior: 50882418 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	| detailedTreeStructurae |
	
	detailedTreeStructurae := OrderedCollection with: aReceptiveAccount accountName ! !

!classDefinition: #DetailedTreeStructureReporter category: 'Portfolio' stamp: 'AM 11/12/2020 23:30:14'!
Reporter subclass: #DetailedTreeStructureReporter
	instanceVariableNames: 'detailedTreeStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/12/2020 23:30:11' prior: 50882427 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	| detailedTreeStructurae |
	detailedTreeStructure := ''.
	detailedTreeStructurae := OrderedCollection with: aReceptiveAccount accountName ! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/12/2020 23:30:26' prior: 50882445 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	detailedTreeStructure := OrderedCollection with: aReceptiveAccount accountName ! !

!testRun: #DetailedTreeStructureReporterTest #test01 stamp: 'AM 11/12/2020 23:30:28'!
ERROR!
!DetailedTreeStructureReporter methodsFor: 'reporting' stamp: 'AM 11/12/2020 23:30:58' prior: 50882383 overrides: 50878590!
report
	
	account report: self.
	
	^ detailedTreeStructure ! !

!testRun: #DetailedTreeStructureReporterTest #test01 stamp: 'AM 11/12/2020 23:31:00'!
PASSED!
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 23:32:31'!
test02

	| aReceptiveAccount aReceptiveAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	
	Deposit register: 100 on: aReceptiveAccount.
	
	aReceptiveAccountTreeStructure :=  (DetailedTreeStructureReporter for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'}).! !
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 23:32:38' prior: 50882476!
test02

	| aReceptiveAccount aReceptiveAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	
	Deposit register: 100 on: aReceptiveAccount.
	Withdraw register: 100 on: aReceptiveAccount.
	
	aReceptiveAccountTreeStructure :=  (DetailedTreeStructureReporter for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'}).! !
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 23:33:01' prior: 50882357!
test01

	| aReceptiveAccount aReceptiveAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	
	aReceptiveAccountTreeStructure :=  (DetailedTreeStructureReporter for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'. 'Balance = 0'}).! !
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 23:33:09' prior: 50882509!
test01

	| aReceptiveAccount aReceptiveAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	
	aReceptiveAccountTreeStructure :=  (DetailedTreeStructureReporter for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'. '\tBalance = 0'}).! !
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 23:33:31' prior: 50882524!
test01

	| aReceptiveAccount aReceptiveAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	
	aReceptiveAccountTreeStructure :=  (DetailedTreeStructureReporter for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'. '\tBalance = 0'}).
	self assert: aReceptiveAccountTreeStructure first equals: 'Cuenta Pepito'.! !

!testRun: #DetailedTreeStructureReporterTest #test01 stamp: 'AM 11/12/2020 23:33:32'!
FAILURE!
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/12/2020 23:34:32' prior: 50882456 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	detailedTreeStructure := OrderedCollection with: aReceptiveAccount accountName with: 'Balance  = ', aReceptiveAccount balance asString! !

!testRun: #DetailedTreeStructureReporterTest #test01 stamp: 'AM 11/12/2020 23:34:35'!
FAILURE!
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/12/2020 23:34:57' prior: 50882560 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	detailedTreeStructure := OrderedCollection with: aReceptiveAccount accountName with: 'B\talance  = ', aReceptiveAccount balance asString! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/12/2020 23:35:00' prior: 50882573 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	detailedTreeStructure := OrderedCollection with: aReceptiveAccount accountName with: '\tBalance  = ', aReceptiveAccount balance asString! !

!testRun: #DetailedTreeStructureReporterTest #test01 stamp: 'AM 11/12/2020 23:35:08'!
FAILURE!

!testRun: #DetailedTreeStructureReporterTest #test01 stamp: 'AM 11/12/2020 23:35:08'!
FAILURE!

self at: index!

otherCollection at: index!

self at: index!

otherCollection at: index!

self at: index!

self at: index!

otherCollection at: index!
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/12/2020 23:38:18' prior: 50882584 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	detailedTreeStructure := OrderedCollection with: aReceptiveAccount accountName with: '\tBalance = ', aReceptiveAccount balance asString! !
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 23:38:49' prior: 50882492!
test02

	| aReceptiveAccount aReceptiveAccountTreeStructure anotherReceptiveAccount |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	anotherReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepe'.
	
	Deposit register: 100 on: aReceptiveAccount.
	Withdraw register: 100 on: aReceptiveAccount.
	
	aReceptiveAccountTreeStructure :=  (DetailedTreeStructureReporter for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'}).! !
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 23:39:28' prior: 50882615!
test02

	| aReceptiveAccount aReceptiveAccountTreeStructure anotherReceptiveAccount |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	anotherReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepe'.
	
	Deposit register: 100 on: aReceptiveAccount.
	Withdraw register: 100 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount to: anotherReceptiveAccount for: 100.
	Transfer from: anotherReceptiveAccount to: aReceptiveAccount for: 100.
	
	aReceptiveAccountTreeStructure :=  (DetailedTreeStructureReporter for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'}).! !
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 23:39:33' prior: 50882635!
test02

	| aReceptiveAccount aReceptiveAccountTreeStructure anotherReceptiveAccount |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	anotherReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepe'.
	
	Deposit register: 50 on: aReceptiveAccount.
	Withdraw register: 100 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount to: anotherReceptiveAccount for: 100.
	Transfer from: anotherReceptiveAccount to: aReceptiveAccount for: 100.
	
	aReceptiveAccountTreeStructure :=  (DetailedTreeStructureReporter for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'}).! !
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 23:39:37' prior: 50882659!
test02

	| aReceptiveAccount aReceptiveAccountTreeStructure anotherReceptiveAccount |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	anotherReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepe'.
	
	Deposit register: 100 on: aReceptiveAccount.
	Withdraw register: 50 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount to: anotherReceptiveAccount for: 100.
	Transfer from: anotherReceptiveAccount to: aReceptiveAccount for: 100.
	
	aReceptiveAccountTreeStructure :=  (DetailedTreeStructureReporter for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'}).! !
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 23:44:15' prior: 50882683!
test02

	| aReceptiveAccount aReceptiveAccountTreeStructure anotherReceptiveAccount expectedAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	anotherReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepe'.
	
	Deposit register: 100 on: aReceptiveAccount.
	Withdraw register: 50 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount to: anotherReceptiveAccount for: 100.
	Transfer from: anotherReceptiveAccount to: aReceptiveAccount for: 100.
	
	aReceptiveAccountTreeStructure :=  (DetailedTreeStructureReporter for: aReceptiveAccount) report.
	expectedAccountTreeStructure := OrderedCollection 				with: 'Cuenta Pepito' with: '\tDep�sito por 100' with: '\tExtracci�n por 50' with: '\tSalida por extracci�n de 100'  with: '\tBalance = 100'.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: expectedAccountTreeStructure).
	self assert: aReceptiveAccountTreeStructure first equals: expectedAccountTreeStructure first.
	self assert: aReceptiveAccountTreeStructure last equals: expectedAccountTreeStructure last.! !

!testRun: #DetailedTreeStructureReporterTest #test02 stamp: 'AM 11/12/2020 23:44:20'!
FAILURE!
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/12/2020 23:45:51' prior: 50882605 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	| t |
	detailedTreeStructure := OrderedCollection with: aReceptiveAccount accountName.
	t := t + 1.
	aReceptiveAccount transactions do: [:aTransaction | aTransaction report: self].
	t := t - 1.
	detailedTreeStructure add: '\tBalance = ', aReceptiveAccount balance asString.! !
!DetailedTreeStructureReporter methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 23:46:00' prior: 50882748 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	 
	detailedTreeStructure := OrderedCollection with: aReceptiveAccount accountName.
	tabs := tabs + 1.
	aReceptiveAccount transactions do: [:aTransaction | aTransaction report: self].
	tabs := tabs - 1.
	detailedTreeStructure add: '\tBalance = ', aReceptiveAccount balance asString.! !

!classDefinition: #DetailedTreeStructureReporter category: 'Portfolio' stamp: 'AM 11/12/2020 23:46:01'!
Reporter subclass: #DetailedTreeStructureReporter
	instanceVariableNames: 'detailedTreeStructure tabs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/12/2020 23:46:04' prior: 50882763 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	 
	detailedTreeStructure := OrderedCollection with: aReceptiveAccount accountName.
	tabs := tabs + 1.
	aReceptiveAccount transactions do: [:aTransaction | aTransaction report: self].
	tabs := tabs - 1.
	detailedTreeStructure add: '\tBalance = ', aReceptiveAccount balance asString.! !
!DetailedTreeStructureReporter methodsFor: 'reporting' stamp: 'AM 11/12/2020 23:46:11' prior: 50882467 overrides: 50878590!
report
	tabs := 9
	account report: self.
	
	^ detailedTreeStructure ! !
!DetailedTreeStructureReporter methodsFor: 'reporting' stamp: 'AM 11/12/2020 23:46:12' prior: 50882802 overrides: 50878590!
report
	tabs := 0
	account report: self.
	
	^ detailedTreeStructure ! !
!DetailedTreeStructureReporter methodsFor: 'reporting' stamp: 'AM 11/12/2020 23:46:13' prior: 50882809 overrides: 50878590!
report
	tabs := 0.
	account report: self.
	
	^ detailedTreeStructure ! !
!DetailedTreeStructureReporter methodsFor: 'reporting' stamp: 'AM 11/12/2020 23:46:14' prior: 50882816 overrides: 50878590!
report

	tabs := 0.
	account report: self.
	
	^ detailedTreeStructure ! !

!testRun: #DetailedTreeStructureReporterTest #test01 stamp: 'AM 11/12/2020 23:46:16'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02 stamp: 'AM 11/12/2020 23:46:16'!
ERROR!

!testRun: #DetailedTreeStructureReporterTest #test02 stamp: 'AM 11/12/2020 23:46:16'!
ERROR!
!DetailedTreeStructureReporter methodsFor: 'reporting' stamp: 'AM 11/12/2020 23:46:28' overrides: 50877042!
reportDeposit: aDeposit 
	self shouldBeImplemented.! !
!DetailedTreeStructureReporter methodsFor: 'reporting' stamp: 'AM 11/12/2020 23:47:53' prior: 50882838 overrides: 50877042!
reportDeposit: aDeposit 
	
	| leadingTabs |
	leadingTabs := self leadingTabs: tabs.
	
	detailedTreeStructure add: leadingTabs, 'Dep�sito por ', aDeposit value. ! !
!DetailedTreeStructureReporter methodsFor: 'reporting' stamp: 'AM 11/12/2020 23:47:57' prior: 50882844 overrides: 50877042!
reportDeposit: aDeposit 
	
	| leadingTabs |
	
	leadingTabs := self leadingTabs: tabs.
	
	detailedTreeStructure add: leadingTabs, 'Dep�sito por ', aDeposit value. ! !

!testRun: #DetailedTreeStructureReporterTest #test02 stamp: 'AM 11/12/2020 23:47:59'!
ERROR!
!DetailedTreeStructureReporter methodsFor: 'private' stamp: 'AM 11/12/2020 23:48:11'!
leadingTabs: aSmallInteger 
	self shouldBeImplemented.! !
!DetailedTreeStructureReporter methodsFor: 'private' stamp: 'AM 11/12/2020 23:49:19' prior: 50882864!
leadingTabs: aNumberfLeadingTabs 
	
	| leadingTabs |
	leadingTabs := ''.
	aNumberfLeadingTabs timesRepeat: [leadingTabs := leadingTabs, '\t'].
	^leadingTabs! !

!testRun: #DetailedTreeStructureReporterTest #test02 stamp: 'AM 11/12/2020 23:49:24'!
ERROR!
!DetailedTreeStructureReporter methodsFor: 'reporting' stamp: 'AM 11/12/2020 23:49:34' prior: 50882853 overrides: 50877042!
reportDeposit: aDeposit 
	
	| leadingTabs |
	
	leadingTabs := self leadingTabs: tabs.
	
	detailedTreeStructure add: leadingTabs, 'Dep�sito por ', aDeposit value asString. ! !

!testRun: #DetailedTreeStructureReporterTest #test02 stamp: 'AM 11/12/2020 23:49:36'!
ERROR!
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/12/2020 23:49:47' overrides: 50877275!
reportWithdraw: aWithdraw 
	self shouldBeImplemented.! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/12/2020 23:50:50' prior: 50882894 overrides: 50877275!
reportWithdraw: aWithdraw 

	| leadingTabs |
	leadingTabs := self leadingTabs: tabs.
	detailedTreeStructure add: leadingTabs, 'Extracci�n por ', aWithdraw value asString.! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/12/2020 23:50:57' prior: 50882900 overrides: 50877275!
reportWithdraw: aWithdraw 

	| leadingTabs |
	
	leadingTabs := self leadingTabs: tabs.
	detailedTreeStructure add: leadingTabs, 'Extracci�n por ', aWithdraw value asString.! !

!testRun: #DetailedTreeStructureReporterTest #test02 stamp: 'AM 11/12/2020 23:51:00'!
ERROR!
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/12/2020 23:51:13' overrides: 50877231!
reportSendingTransferComponent: aSendingTransferComponent 
	self shouldBeImplemented.! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/12/2020 23:52:01' prior: 50882923 overrides: 50877231!
reportSendingTransferComponent: aSendingTransferComponent 

	| leadingTabs |
	
	leadingTabs := self leadingTabs: tabs.
	detailedTreeStructure add: leadingTabs, 'Salida por ', aSendingTransferComponent value asString.! !

!testRun: #DetailedTreeStructureReporterTest #test02 stamp: 'AM 11/12/2020 23:52:04'!
ERROR!
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/12/2020 23:52:19' overrides: 50877133!
reportReceivingTransferComponent: aReceivingTransferComponent 
	self shouldBeImplemented.! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/12/2020 23:53:24' prior: 50882944 overrides: 50877133!
reportReceivingTransferComponent: aReceivingTransferComponent 
	
	| leadingTabs |
	
	leadingTabs := self leadingTabs: tabs.
	detailedTreeStructure add: leadingTabs, 'Entrada por transferencia de ', aReceivingTransferComponent value asString.! !

!testRun: #DetailedTreeStructureReporterTest #test02 stamp: 'AM 11/12/2020 23:53:26'!
FAILURE!
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/12/2020 23:54:08' prior: 50882930 overrides: 50877231!
reportSendingTransferComponent: aSendingTransferComponent 

	| leadingTabs |
	
	leadingTabs := self leadingTabs: tabs.
	detailedTreeStructure add: leadingTabs, 'Salida por transferencia de ', aSendingTransferComponent value asString.! !

!testRun: #DetailedTreeStructureReporterTest #test02 stamp: 'AM 11/12/2020 23:54:15'!
FAILURE!
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 23:54:30' prior: 50882707!
test02

	| aReceptiveAccount aReceptiveAccountTreeStructure anotherReceptiveAccount expectedAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	anotherReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepe'.
	
	Deposit register: 100 on: aReceptiveAccount.
	Withdraw register: 50 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount to: anotherReceptiveAccount for: 100.
	Transfer from: anotherReceptiveAccount to: aReceptiveAccount for: 100.
	
	aReceptiveAccountTreeStructure :=  (DetailedTreeStructureReporter for: aReceptiveAccount) report.
	expectedAccountTreeStructure := OrderedCollection 				with: 'Cuenta Pepito' with: '\tDep�sito por 100' with: '\tExtracci�n por 50' with: '\tSalida por extracci�n de 100'  with: '\tBalance = 50'.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: expectedAccountTreeStructure).
	self assert: aReceptiveAccountTreeStructure first equals: expectedAccountTreeStructure first.
	self assert: aReceptiveAccountTreeStructure last equals: expectedAccountTreeStructure last.! !

!testRun: #DetailedTreeStructureReporterTest #test02 stamp: 'AM 11/12/2020 23:54:33'!
FAILURE!
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 23:56:05' prior: 50882982!
test02

	| aReceptiveAccount aReceptiveAccountTreeStructure anotherReceptiveAccount expectedAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	anotherReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepe'.
	
	Deposit register: 100 on: aReceptiveAccount.
	Withdraw register: 50 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount to: anotherReceptiveAccount for: 100.
	Transfer from: anotherReceptiveAccount to: aReceptiveAccount for: 100.
	
	aReceptiveAccountTreeStructure :=  (DetailedTreeStructureReporter for: aReceptiveAccount) report.
	expectedAccountTreeStructure := OrderedCollection 				with: 'Cuenta Pepito' with: '\tDep�sito por 100' with: '\tExtracci�n por 50' with: '\tSalida por transferencia de 100' with: '\Entrada por transferencia de 100'  with: '\tBalance = 50'.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: expectedAccountTreeStructure).
	self assert: aReceptiveAccountTreeStructure first equals: expectedAccountTreeStructure first.
	self assert: aReceptiveAccountTreeStructure last equals: expectedAccountTreeStructure last.! !

!testRun: #DetailedTreeStructureReporterTest #test02 stamp: 'AM 11/12/2020 23:56:08'!
FAILURE!
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 23:56:31' prior: 50883023!
test02

	| aReceptiveAccount aReceptiveAccountTreeStructure anotherReceptiveAccount expectedAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	anotherReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepe'.
	
	Deposit register: 100 on: aReceptiveAccount.
	Withdraw register: 50 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount to: anotherReceptiveAccount for: 100.
	Transfer from: anotherReceptiveAccount to: aReceptiveAccount for: 100.
	
	aReceptiveAccountTreeStructure :=  (DetailedTreeStructureReporter for: aReceptiveAccount) report.
	expectedAccountTreeStructure := OrderedCollection 				with: 'Cuenta Pepito' with: '\tDep�sito por 100' with: '\tExtracci�n por 50' with: '\tSalida por transferencia de 100' with: '\tEntrada por transferencia de 100'  with: '\tBalance = 50'.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: expectedAccountTreeStructure).
	self assert: aReceptiveAccountTreeStructure first equals: expectedAccountTreeStructure first.
	self assert: aReceptiveAccountTreeStructure last equals: expectedAccountTreeStructure last.! !

!testRun: #DetailedTreeStructureReporterTest #test02 stamp: 'AM 11/12/2020 23:56:33'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01 stamp: 'AM 11/12/2020 23:56:33'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02 stamp: 'AM 11/12/2020 23:56:33'!
PASSED!
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 23:57:05'!
test03

	| aReceptiveAccount anEmptyPortfolio |
	
	anEmptyPortfolio := Portfolio named: 'Cuenta de Pepe'.! !
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 23:57:17' prior: 50883112!
test03

	|  anEmptyPortfolio |
	
	anEmptyPortfolio := Portfolio named: 'Cuenta de Pepe'.! !
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 23:57:23' prior: 50883120!
test03

	| anEmptyPortfolio |
	
	anEmptyPortfolio := Portfolio named: 'Cuenta de Pepe'.! !
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 23:58:07' prior: 50883127!
test03

	| anEmptyPortfolio portfolioDetailedTreeStructure |
	
	anEmptyPortfolio := Portfolio named: 'Cuenta de Pepe'.
	
	portfolioDetailedTreeStructure := ( DetailedTreeStructureReporter for: anEmptyPortfolio ) report.! !
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 23:59:09' prior: 50883134!
test03

	| anEmptyPortfolio portfolioDetailedTreeStructure |
	
	anEmptyPortfolio := Portfolio named: 'Cuenta de Pepe'.
	
	portfolioDetailedTreeStructure := ( DetailedTreeStructureReporter for: anEmptyPortfolio ) report.
	
	self assert: (portfolioDetailedTreeStructure hasEqualElements: { 'Cuenta de Pepe'. 'Balance = 0' }).
	self assert: portfolioDetailedTreeStructure first equals: 'Cuenta de Pepe'.! !
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/12/2020 23:59:12' prior: 50883145!
test03

	| anEmptyPortfolio portfolioDetailedTreeStructure |
	
	anEmptyPortfolio := Portfolio named: 'Cuenta de Pepe'.
	
	portfolioDetailedTreeStructure := ( DetailedTreeStructureReporter for: anEmptyPortfolio ) report.
	
	self assert: (portfolioDetailedTreeStructure hasEqualElements: { 'Cuenta de Pepe'. '\tBalance = 0' }).
	self assert: portfolioDetailedTreeStructure first equals: 'Cuenta de Pepe'.! !

!testRun: #DetailedTreeStructureReporterTest #test03 stamp: 'AM 11/12/2020 23:59:14'!
ERROR!
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/12/2020 23:59:28' overrides: 50877084!
reportPortfolio: aPortfolio 
	self shouldBeImplemented.! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 00:00:19' prior: 50883182 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	detailedTreeStructure add: aPortfolio accountName.
	detailedTreeStructure add: '\tBalance = 0'.! !

!testRun: #DetailedTreeStructureReporterTest #test03 stamp: 'AM 11/13/2020 00:00:22'!
ERROR!
!DetailedTreeStructureReporter methodsFor: 'reporting' stamp: 'AM 11/13/2020 00:00:47' prior: 50882823 overrides: 50878590!
report

	tabs := 0.
	detailedTreeStructure := OrderedCollection new.
	account report: self.
	
	^ detailedTreeStructure ! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 00:00:57' prior: 50882787 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	 
	detailedTreeStructure add: aReceptiveAccount accountName.
	tabs := tabs + 1.
	aReceptiveAccount transactions do: [:aTransaction | aTransaction report: self].
	tabs := tabs - 1.
	detailedTreeStructure add: '\tBalance = ', aReceptiveAccount balance asString.! !

!testRun: #DetailedTreeStructureReporterTest #test01 stamp: 'AM 11/13/2020 00:01:04'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02 stamp: 'AM 11/13/2020 00:01:04'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03 stamp: 'AM 11/13/2020 00:01:04'!
PASSED!
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 00:04:19'!
test04

	| pepitoPortfolio pepeReceptiveAccount pepoteReceptiveAccount pepitoPortfolioTreeStructure expectedPortfolioTreeStructure |
	
	pepitoPortfolio := Portfolio named: 'Portfolio de Pepito'.
	
	pepeReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepe'.
	pepoteReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepote'.
	
	pepitoPortfolio add: pepeReceptiveAccount.
	pepitoPortfolio add: pepoteReceptiveAccount.
	
	pepitoPortfolioTreeStructure :=  (TreeStructureReporter for: pepitoPortfolio) report.
	expectedPortfolioTreeStructure := OrderedCollection with: 'Portfolio de Pepito' with: '\tCuenta de Pepe' with: '\t\tBalance = 0' with: '\tCuenta de Pepote' with: '\t\tBalance = 0' with: '\tBalance = 0'.

	self assert:  (pepitoPortfolioTreeStructure hasEqualElements: { 'Portfolio de Pepito'. '\tCuenta de Pepe'. '\tCuenta de Pepote'}).
	self assert:   pepitoPortfolioTreeStructure first equals: 'Portfolio de Pepito'.! !
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 00:04:58' prior: 50883231!
test04

	| pepitoPortfolio pepeReceptiveAccount pepoteReceptiveAccount pepitoPortfolioTreeStructure expectedPortfolioTreeStructure |
	
	pepitoPortfolio := Portfolio named: 'Portfolio de Pepito'.
	
	pepeReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepe'.
	pepoteReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepote'.
	
	pepitoPortfolio add: pepeReceptiveAccount.
	pepitoPortfolio add: pepoteReceptiveAccount.
	
	pepitoPortfolioTreeStructure :=  (TreeStructureReporter for: pepitoPortfolio) report.
	expectedPortfolioTreeStructure := OrderedCollection with: 'Portfolio de Pepito' with: '\tCuenta de Pepe' with: '\t\tBalance = 0' with: '\tCuenta de Pepote' with: '\t\tBalance = 0' with: '\tBalance = 0'.

	self assert:  pepitoPortfolioTreeStructure equals: expectedPortfolioTreeStructure.! !

!testRun: #DetailedTreeStructureReporterTest #test04 stamp: 'AM 11/13/2020 00:05:00'!
FAILURE!
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 00:07:00' prior: 50883264!
test04

	| pepitoPortfolio pepeReceptiveAccount pepoteReceptiveAccount pepitoPortfolioTreeStructure expectedPortfolioTreeStructure |
	
	pepitoPortfolio := Portfolio named: 'Portfolio de Pepito'.
	
	pepeReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepe'.
	pepoteReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepote'.
	
	pepitoPortfolio add: pepeReceptiveAccount.
	pepitoPortfolio add: pepoteReceptiveAccount.
	
	pepitoPortfolioTreeStructure :=  (DetailedTreeStructureReporter for: pepitoPortfolio) report.
	expectedPortfolioTreeStructure := OrderedCollection with: 'Portfolio de Pepito' with: '\tCuenta de Pepe' with: '\t\tBalance = 0' with: '\tCuenta de Pepote' with: '\t\tBalance = 0' with: '\tBalance = 0'.

	self assert:  pepitoPortfolioTreeStructure equals: expectedPortfolioTreeStructure.! !

!testRun: #DetailedTreeStructureReporterTest #test04 stamp: 'AM 11/13/2020 00:07:05'!
FAILURE!

!testRun: #DetailedTreeStructureReporterTest #test04 stamp: 'AM 11/13/2020 00:07:05'!
FAILURE!
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 00:08:50' prior: 50883189 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	detailedTreeStructure add: aPortfolio accountName.
	tabs := tabs + 1.
	aPortfolio accounts do: [:anAccount | anAccount report: self].
	tabs := tabs - 1.
	detailedTreeStructure add: '\tBalance = 0'.! !

!testRun: #DetailedTreeStructureReporterTest #test04 stamp: 'AM 11/13/2020 00:08:53'!
FAILURE!
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 00:10:06' prior: 50883209 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	 | leadingTabs |
leadingTabs := self leadingTabs: tabs.
	detailedTreeStructure add: leadingTabs, aReceptiveAccount accountName.
	tabs := tabs + 1.
	aReceptiveAccount transactions do: [:aTransaction | aTransaction report: self].
	tabs := tabs - 1.
	detailedTreeStructure add: leadingTabs, '\tBalance = ', aReceptiveAccount balance asString.! !

!testRun: #DetailedTreeStructureReporterTest #test04 stamp: 'AM 11/13/2020 00:10:15'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01 stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02 stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03 stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04 stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #PortfolioTest #test16AccountSummaryOfEmptyPortfolioOnlyShowsZeroBalance stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #PortfolioTest #test17AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #PortfolioTest #test18PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #PortfolioTest #test19NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #PortfolioTest #test20NetTransferOfPortfolioWithReceptiveAccountsIsTheirSumOfNetTransfers stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #PortfolioTest #test21NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #PortfolioTest #test22TreeStructureOfEmptyPortfolioIsZItsName stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #PortfolioTest #test23APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #PortfolioTest #test24TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test17AReceptiveAccountWithEveryTransactionShowsThemInAccountSummaryAffectingBalance stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test18AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test19TransfersAffectCorrectlyNetTransferInReceptiveAccount stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test20JustTransfersAffectNetTransfersInReceptiveAccount stamp: 'AM 11/13/2020 00:10:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test21AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/13/2020 00:10:24'!
PASSED!
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 00:11:31'!
test25TreeStructureIsCalculatedRecursivelyInPortfolio

	| agustinPortfolioTreeStructure agustinPortfolio hernanReceptiveAccount nahuelPortfolio |
	
	agustinPortfolio := Portfolio named: 'Portfolio de Agustin'.
	nahuelPortfolio := Portfolio named: 'Portfolio de Nahuel'.
	
	hernanReceptiveAccount := ReceptiveAccount named: 'Cuenta de Hernan'.
	
	Deposit register: 100 on: hernanReceptiveAccount.
	
	agustinPortfolio add: nahuelPortfolio.
	nahuelPortfolio add: hernanReceptiveAccount.
	
	agustinPortfolioTreeStructure :=  (TreeStructureReporter for: agustinPortfolio) report.

	self assert:  (agustinPortfolioTreeStructure hasEqualElements: { 'Portfolio de Agustin'. '\tPortfolio de Nahuel'. '\t\tCuenta de Hernan'}).
	self assert:   agustinPortfolioTreeStructure first equals: 'Portfolio de Agustin'.
	self assert:   agustinPortfolioTreeStructure last equals: '\t\tCuenta de Hernan'.! !
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 00:11:37' prior: 50883554!
test25TreeStructureIsCalculatedRecursivelyInPortfolio

	| agustinPortfolioTreeStructure agustinPortfolio hernanReceptiveAccount nahuelPortfolio |
	
	agustinPortfolio := Portfolio named: 'Portfolio de Agustin'.
	nahuelPortfolio := Portfolio named: 'Portfolio de Nahuel'.
	
	hernanReceptiveAccount := ReceptiveAccount named: 'Cuenta de Hernan'.
	
	Deposit register: 100 on: hernanReceptiveAccount.
	
	agustinPortfolio add: nahuelPortfolio.
	nahuelPortfolio add: hernanReceptiveAccount.
	
	agustinPortfolioTreeStructure :=  (DetailedTreeStructureReporter for: agustinPortfolio) report.

	self assert:  (agustinPortfolioTreeStructure hasEqualElements: { 'Portfolio de Agustin'. '\tPortfolio de Nahuel'. '\t\tCuenta de Hernan'}).
	self assert:   agustinPortfolioTreeStructure first equals: 'Portfolio de Agustin'.
	self assert:   agustinPortfolioTreeStructure last equals: '\t\tCuenta de Hernan'.! !
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 00:12:21' prior: 50883586!
test25TreeStructureIsCalculatedRecursivelyInPortfolio

	| agustinPortfolioTreeStructure agustinPortfolio hernanReceptiveAccount nahuelPortfolio |
	
	agustinPortfolio := Portfolio named: 'Portfolio de Agustin'.
	nahuelPortfolio := Portfolio named: 'Portfolio de Nahuel'.
	
	hernanReceptiveAccount := ReceptiveAccount named: 'Cuenta de Hernan'.
	
	Deposit register: 100 on: hernanReceptiveAccount.
	
	agustinPortfolio add: nahuelPortfolio.
	nahuelPortfolio add: hernanReceptiveAccount.
	
	agustinPortfolioTreeStructure :=  (DetailedTreeStructureReporter for: agustinPortfolio) report.

	self assert:  (agustinPortfolioTreeStructure hasEqualElements: { 'Portfolio de Agustin'. '\tPortfolio de Nahuel'. '\t\tCuenta de Hernan'. '\t\t\tBalance = 0'. '\t\tBalance = 0'. '\tBalance = 0'}).
	self assert:   agustinPortfolioTreeStructure first equals: 'Portfolio de Agustin'.
	self assert:   agustinPortfolioTreeStructure last equals: '\t\tCuenta de Hernan'.! !
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 00:12:32' prior: 50883618!
test25TreeStructureIsCalculatedRecursivelyInPortfolio

	| agustinPortfolioTreeStructure agustinPortfolio hernanReceptiveAccount nahuelPortfolio |
	
	agustinPortfolio := Portfolio named: 'Portfolio de Agustin'.
	nahuelPortfolio := Portfolio named: 'Portfolio de Nahuel'.
	
	hernanReceptiveAccount := ReceptiveAccount named: 'Cuenta de Hernan'.
	
	Deposit register: 100 on: hernanReceptiveAccount.
	
	agustinPortfolio add: nahuelPortfolio.
	nahuelPortfolio add: hernanReceptiveAccount.
	
	agustinPortfolioTreeStructure :=  (DetailedTreeStructureReporter for: agustinPortfolio) report.

	self assert:  (agustinPortfolioTreeStructure hasEqualElements: { 'Portfolio de Agustin'. '\tPortfolio de Nahuel'. '\t\tCuenta de Hernan'. '\t\t\tBalance = 100'. '\t\tBalance = 100'. '\tBalance = 100'}).
	self assert:   agustinPortfolioTreeStructure first equals: 'Portfolio de Agustin'.
	self assert:   agustinPortfolioTreeStructure last equals: '\t\tCuenta de Hernan'.! !
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 00:13:53' prior: 50883652!
test25TreeStructureIsCalculatedRecursivelyInPortfolio

	| agustinPortfolioTreeStructure agustinPortfolio hernanReceptiveAccount nahuelPortfolio expectedPortfolioTreeStructure |
	
	agustinPortfolio := Portfolio named: 'Portfolio de Agustin'.
	nahuelPortfolio := Portfolio named: 'Portfolio de Nahuel'.
	
	hernanReceptiveAccount := ReceptiveAccount named: 'Cuenta de Hernan'.
	
	Deposit register: 100 on: hernanReceptiveAccount.
	
	agustinPortfolio add: nahuelPortfolio.
	nahuelPortfolio add: hernanReceptiveAccount.
	
	agustinPortfolioTreeStructure :=  (DetailedTreeStructureReporter for: agustinPortfolio) report.
	
	expectedPortfolioTreeStructure := OrderedCollection with: 'Portfolio de Agustin' with:  '\tPortfolio de Nahuel' with: '\t\tCuenta de Hernan' with: '\t\t\tBalance = 100' with: '\t\tBalance = 100' with: '\tBalance = 100'.
	self assert:  agustinPortfolioTreeStructure equals: expectedPortfolioTreeStructure.! !

!testRun: #DetailedTreeStructureReporterTest #test25TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/13/2020 00:13:57'!
FAILURE!
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 00:14:14'!
test05

	| agustinPortfolioTreeStructure agustinPortfolio hernanReceptiveAccount nahuelPortfolio expectedPortfolioTreeStructure |
	
	agustinPortfolio := Portfolio named: 'Portfolio de Agustin'.
	nahuelPortfolio := Portfolio named: 'Portfolio de Nahuel'.
	
	hernanReceptiveAccount := ReceptiveAccount named: 'Cuenta de Hernan'.
	
	Deposit register: 100 on: hernanReceptiveAccount.
	
	agustinPortfolio add: nahuelPortfolio.
	nahuelPortfolio add: hernanReceptiveAccount.
	
	agustinPortfolioTreeStructure :=  (DetailedTreeStructureReporter for: agustinPortfolio) report.
	
	expectedPortfolioTreeStructure := OrderedCollection with: 'Portfolio de Agustin' with:  '\tPortfolio de Nahuel' with: '\t\tCuenta de Hernan' with: '\t\t\tBalance = 100' with: '\t\tBalance = 100' with: '\tBalance = 100'.
	self assert:  agustinPortfolioTreeStructure equals: expectedPortfolioTreeStructure.! !

!methodRemoval: DetailedTreeStructureReporterTest #test25TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/13/2020 00:14:15'!
test25TreeStructureIsCalculatedRecursivelyInPortfolio

	| agustinPortfolioTreeStructure agustinPortfolio hernanReceptiveAccount nahuelPortfolio expectedPortfolioTreeStructure |
	
	agustinPortfolio := Portfolio named: 'Portfolio de Agustin'.
	nahuelPortfolio := Portfolio named: 'Portfolio de Nahuel'.
	
	hernanReceptiveAccount := ReceptiveAccount named: 'Cuenta de Hernan'.
	
	Deposit register: 100 on: hernanReceptiveAccount.
	
	agustinPortfolio add: nahuelPortfolio.
	nahuelPortfolio add: hernanReceptiveAccount.
	
	agustinPortfolioTreeStructure :=  (DetailedTreeStructureReporter for: agustinPortfolio) report.
	
	expectedPortfolioTreeStructure := OrderedCollection with: 'Portfolio de Agustin' with:  '\tPortfolio de Nahuel' with: '\t\tCuenta de Hernan' with: '\t\t\tBalance = 100' with: '\t\tBalance = 100' with: '\tBalance = 100'.
	self assert:  agustinPortfolioTreeStructure equals: expectedPortfolioTreeStructure.!
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 00:15:09' prior: 50883332 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	| leadingTabs |
	leadingTabs := self leadingTabs: tabs.
	detailedTreeStructure add: aPortfolio accountName.
	tabs := tabs + 1.
	aPortfolio accounts do: [:anAccount | anAccount report: self].
	tabs := tabs - 1.
	detailedTreeStructure add: leadingTabs, '\tBalance = ', aPortfolio balance asString.! !

!testRun: #DetailedTreeStructureReporterTest #test01 stamp: 'AM 11/13/2020 00:15:14'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02 stamp: 'AM 11/13/2020 00:15:14'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03 stamp: 'AM 11/13/2020 00:15:14'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04 stamp: 'AM 11/13/2020 00:15:14'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05 stamp: 'AM 11/13/2020 00:15:14'!
FAILURE!

!testRun: #DetailedTreeStructureReporterTest #test05 stamp: 'AM 11/13/2020 00:15:14'!
FAILURE!
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 00:16:29' prior: 50883788 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	| leadingTabs |
	leadingTabs := self leadingTabs: tabs.
	detailedTreeStructure add: leadingTabs, aPortfolio accountName.
	tabs := tabs + 1.
	aPortfolio accounts do: [:anAccount | anAccount report: self].
	tabs := tabs - 1.
	detailedTreeStructure add: leadingTabs, '\tBalance = ', aPortfolio balance asString.! !

!testRun: #DetailedTreeStructureReporterTest #test01 stamp: 'AM 11/13/2020 00:16:31'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02 stamp: 'AM 11/13/2020 00:16:31'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03 stamp: 'AM 11/13/2020 00:16:31'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04 stamp: 'AM 11/13/2020 00:16:31'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05 stamp: 'AM 11/13/2020 00:16:31'!
FAILURE!

!testRun: #DetailedTreeStructureReporterTest #test05 stamp: 'AM 11/13/2020 00:16:31'!
FAILURE!
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 00:17:17' prior: 50883723!
test05

	| agustinPortfolioTreeStructure agustinPortfolio hernanReceptiveAccount nahuelPortfolio expectedPortfolioTreeStructure |
	
	agustinPortfolio := Portfolio named: 'Portfolio de Agustin'.
	nahuelPortfolio := Portfolio named: 'Portfolio de Nahuel'.
	
	hernanReceptiveAccount := ReceptiveAccount named: 'Cuenta de Hernan'.
	
	Deposit register: 100 on: hernanReceptiveAccount.
	
	agustinPortfolio add: nahuelPortfolio.
	nahuelPortfolio add: hernanReceptiveAccount.
	
	agustinPortfolioTreeStructure :=  (DetailedTreeStructureReporter for: agustinPortfolio) report.
	
	expectedPortfolioTreeStructure := OrderedCollection with: 'Portfolio de Agustin' with:  '\tPortfolio de Nahuel' with: '\t\tCuenta de Hernan' with: '\t\t\tDep�sito por 100' with: '\t\t\tBalance = 100' with: '\t\tBalance = 100'.
	expectedPortfolioTreeStructure add: '\tBalance = 100'.
	self assert:  agustinPortfolioTreeStructure equals: expectedPortfolioTreeStructure.! !

!testRun: #DetailedTreeStructureReporterTest #test05 stamp: 'AM 11/13/2020 00:17:22'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01 stamp: 'AM 11/13/2020 00:17:22'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02 stamp: 'AM 11/13/2020 00:17:22'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03 stamp: 'AM 11/13/2020 00:17:22'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04 stamp: 'AM 11/13/2020 00:17:22'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05 stamp: 'AM 11/13/2020 00:17:22'!
PASSED!

----QUIT----(13 November 2020 00:17:59) CuisUniversity-4384.image priorSource: 17461007!

----STARTUP---- (13 November 2020 17:41:44) as /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/imagenportfolio2/CuisUniversity-4384.image!


TestCase subclass: #TreeStructureReporterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #TreeStructureReporterTest category: 'Portfolio' stamp: 'AM 11/13/2020 17:42:13'!
TestCase subclass: #TreeStructureReporterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!TreeStructureReporterTest methodsFor: 'nil' stamp: 'AM 11/13/2020 17:43:59'!
test01AReceptiveAccountShowsItselfOnTreeStructure

	| aReceptiveAccount aReceptiveAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	
	aReceptiveAccountTreeStructure :=  (TreeStructureReporter for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'}).! !

!testRun: #TreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/13/2020 17:44:00'!
PASSED!

!testRun: #TreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/13/2020 17:44:00'!
PASSED!

!methodRemoval: ReceptiveAccountTest #test21AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/13/2020 17:44:06'!
test21AReceptiveAccountShowsItselfOnTreeStructure

	| aReceptiveAccount aReceptiveAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	
	aReceptiveAccountTreeStructure :=  (TreeStructureReporter for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'}).!
!TreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 17:44:20'!
test02TreeStructureOfEmptyPortfolioIsZItsName

	| anEmptyPortfolio emptyPortfolioTreeStructure |
	
	anEmptyPortfolio := Portfolio named: 'Portfolio de Pepito'.
	
	emptyPortfolioTreeStructure :=  (TreeStructureReporter for: anEmptyPortfolio) report.

	self assert:  (emptyPortfolioTreeStructure hasEqualElements: { 'Portfolio de Pepito' } ).! !
!TreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 17:44:28'!
test03APortfolioWithReceptiveAccountsShowsTreeStructure

	| pepitoPortfolio pepeReceptiveAccount pepoteReceptiveAccount pepitoPortfolioTreeStructure |
	
	pepitoPortfolio := Portfolio named: 'Portfolio de Pepito'.
	
	pepeReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepe'.
	pepoteReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepote'.
	
	pepitoPortfolio add: pepeReceptiveAccount.
	pepitoPortfolio add: pepoteReceptiveAccount.
	
	pepitoPortfolioTreeStructure :=  (TreeStructureReporter for: pepitoPortfolio) report.

	self assert:  (pepitoPortfolioTreeStructure hasEqualElements: { 'Portfolio de Pepito'. '\tCuenta de Pepe'. '\tCuenta de Pepote'}).
	self assert:   pepitoPortfolioTreeStructure first equals: 'Portfolio de Pepito'.! !
!TreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 17:44:35'!
test24TreeStructureIsCalculatedRecursivelyInPortfolio

	| agustinPortfolioTreeStructure agustinPortfolio hernanReceptiveAccount nahuelPortfolio |
	
	agustinPortfolio := Portfolio named: 'Portfolio de Agustin'.
	nahuelPortfolio := Portfolio named: 'Portfolio de Nahuel'.
	
	hernanReceptiveAccount := ReceptiveAccount named: 'Cuenta de Hernan'.
	
	agustinPortfolio add: nahuelPortfolio.
	nahuelPortfolio add: hernanReceptiveAccount.
	
	agustinPortfolioTreeStructure :=  (TreeStructureReporter for: agustinPortfolio) report.

	self assert:  (agustinPortfolioTreeStructure hasEqualElements: { 'Portfolio de Agustin'. '\tPortfolio de Nahuel'. '\t\tCuenta de Hernan'}).
	self assert:   agustinPortfolioTreeStructure first equals: 'Portfolio de Agustin'.
	self assert:   agustinPortfolioTreeStructure last equals: '\t\tCuenta de Hernan'.! !
!TreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 17:44:39'!
test04TreeStructureIsCalculatedRecursivelyInPortfolio

	| agustinPortfolioTreeStructure agustinPortfolio hernanReceptiveAccount nahuelPortfolio |
	
	agustinPortfolio := Portfolio named: 'Portfolio de Agustin'.
	nahuelPortfolio := Portfolio named: 'Portfolio de Nahuel'.
	
	hernanReceptiveAccount := ReceptiveAccount named: 'Cuenta de Hernan'.
	
	agustinPortfolio add: nahuelPortfolio.
	nahuelPortfolio add: hernanReceptiveAccount.
	
	agustinPortfolioTreeStructure :=  (TreeStructureReporter for: agustinPortfolio) report.

	self assert:  (agustinPortfolioTreeStructure hasEqualElements: { 'Portfolio de Agustin'. '\tPortfolio de Nahuel'. '\t\tCuenta de Hernan'}).
	self assert:   agustinPortfolioTreeStructure first equals: 'Portfolio de Agustin'.
	self assert:   agustinPortfolioTreeStructure last equals: '\t\tCuenta de Hernan'.! !

!methodRemoval: TreeStructureReporterTest #test24TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/13/2020 17:44:41'!
test24TreeStructureIsCalculatedRecursivelyInPortfolio

	| agustinPortfolioTreeStructure agustinPortfolio hernanReceptiveAccount nahuelPortfolio |
	
	agustinPortfolio := Portfolio named: 'Portfolio de Agustin'.
	nahuelPortfolio := Portfolio named: 'Portfolio de Nahuel'.
	
	hernanReceptiveAccount := ReceptiveAccount named: 'Cuenta de Hernan'.
	
	agustinPortfolio add: nahuelPortfolio.
	nahuelPortfolio add: hernanReceptiveAccount.
	
	agustinPortfolioTreeStructure :=  (TreeStructureReporter for: agustinPortfolio) report.

	self assert:  (agustinPortfolioTreeStructure hasEqualElements: { 'Portfolio de Agustin'. '\tPortfolio de Nahuel'. '\t\tCuenta de Hernan'}).
	self assert:   agustinPortfolioTreeStructure first equals: 'Portfolio de Agustin'.
	self assert:   agustinPortfolioTreeStructure last equals: '\t\tCuenta de Hernan'.!

!testRun: #TreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/13/2020 17:44:44'!
PASSED!

TestCase subclass: #AccountSummaryReporterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #AccountSummaryReporterTest category: 'Portfolio' stamp: 'AM 11/13/2020 17:45:25'!
TestCase subclass: #AccountSummaryReporterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!methodRemoval: PortfolioTest #test22TreeStructureOfEmptyPortfolioIsZItsName stamp: 'AM 11/13/2020 17:45:32'!
test22TreeStructureOfEmptyPortfolioIsZItsName

	| anEmptyPortfolio emptyPortfolioTreeStructure |
	
	anEmptyPortfolio := Portfolio named: 'Portfolio de Pepito'.
	
	emptyPortfolioTreeStructure :=  (TreeStructureReporter for: anEmptyPortfolio) report.

	self assert:  (emptyPortfolioTreeStructure hasEqualElements: { 'Portfolio de Pepito' } ).!

!methodRemoval: PortfolioTest #test23APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/13/2020 17:45:32'!
test23APortfolioWithReceptiveAccountsShowsTreeStructure

	| pepitoPortfolio pepeReceptiveAccount pepoteReceptiveAccount pepitoPortfolioTreeStructure |
	
	pepitoPortfolio := Portfolio named: 'Portfolio de Pepito'.
	
	pepeReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepe'.
	pepoteReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepote'.
	
	pepitoPortfolio add: pepeReceptiveAccount.
	pepitoPortfolio add: pepoteReceptiveAccount.
	
	pepitoPortfolioTreeStructure :=  (TreeStructureReporter for: pepitoPortfolio) report.

	self assert:  (pepitoPortfolioTreeStructure hasEqualElements: { 'Portfolio de Pepito'. '\tCuenta de Pepe'. '\tCuenta de Pepote'}).
	self assert:   pepitoPortfolioTreeStructure first equals: 'Portfolio de Pepito'.!

!methodRemoval: PortfolioTest #test24TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/13/2020 17:45:32'!
test24TreeStructureIsCalculatedRecursivelyInPortfolio

	| agustinPortfolioTreeStructure agustinPortfolio hernanReceptiveAccount nahuelPortfolio |
	
	agustinPortfolio := Portfolio named: 'Portfolio de Agustin'.
	nahuelPortfolio := Portfolio named: 'Portfolio de Nahuel'.
	
	hernanReceptiveAccount := ReceptiveAccount named: 'Cuenta de Hernan'.
	
	agustinPortfolio add: nahuelPortfolio.
	nahuelPortfolio add: hernanReceptiveAccount.
	
	agustinPortfolioTreeStructure :=  (TreeStructureReporter for: agustinPortfolio) report.

	self assert:  (agustinPortfolioTreeStructure hasEqualElements: { 'Portfolio de Agustin'. '\tPortfolio de Nahuel'. '\t\tCuenta de Hernan'}).
	self assert:   agustinPortfolioTreeStructure first equals: 'Portfolio de Agustin'.
	self assert:   agustinPortfolioTreeStructure last equals: '\t\tCuenta de Hernan'.!
!AccountSummaryReporterTest methodsFor: 'nil' stamp: 'AM 11/13/2020 17:46:10'!
test01EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance

	| anEmptyAccount anEmptyAccountSummaryAccount |
	
	anEmptyAccount := ReceptiveAccount new.
	
	anEmptyAccountSummaryAccount := (AccountSummaryReporter for: anEmptyAccount) report.
	
	self assert: anEmptyAccountSummaryAccount size equals: 1.
	self assert: anEmptyAccountSummaryAccount includes: 'Balance = 0'.! !
!AccountSummaryReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 17:46:18'!
test02AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance

	| anAccount expectedAccountSummary anAccountSummaryAccount |
	
	anAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10' with:  'Balance = 10'.
	anAccountSummaryAccount :=  (AccountSummaryReporter for: anAccount) report.
	
	self assert: expectedAccountSummary equals: anAccountSummaryAccount.! !
!AccountSummaryReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 17:46:22'!
test17AReceptiveAccountWithEveryTransactionShowsThemInAccountSummaryAffectingBalance

	| anAccount expectedAccountSummary anotherAccount anAccountSummaryAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	Withdraw register: 40  on: anAccount.
	Transfer from: anAccount to: anotherAccount for: 100.
	Transfer from: anotherAccount to: anAccount for: 50.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10'
												with: 'Extracci�n por 40'
												with: 'Salida por transferencia de 100'
												with: 'Entrada por transferencia de 50'
												with: 'Balance = -80'.
												
	anAccountSummaryAccount := (AccountSummaryReporter for: anAccount) report.
												
	self assert: (anAccountSummaryAccount hasEqualElements: expectedAccountSummary).
	self assert: anAccountSummaryAccount last equals: 'Balance = -80'.
	! !
!AccountSummaryReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 17:46:26'!
test03AReceptiveAccountWithEveryTransactionShowsThemInAccountSummaryAffectingBalance

	| anAccount expectedAccountSummary anotherAccount anAccountSummaryAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	Withdraw register: 40  on: anAccount.
	Transfer from: anAccount to: anotherAccount for: 100.
	Transfer from: anotherAccount to: anAccount for: 50.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10'
												with: 'Extracci�n por 40'
												with: 'Salida por transferencia de 100'
												with: 'Entrada por transferencia de 50'
												with: 'Balance = -80'.
												
	anAccountSummaryAccount := (AccountSummaryReporter for: anAccount) report.
												
	self assert: (anAccountSummaryAccount hasEqualElements: expectedAccountSummary).
	self assert: anAccountSummaryAccount last equals: 'Balance = -80'.
	! !

!methodRemoval: AccountSummaryReporterTest #test17AReceptiveAccountWithEveryTransactionShowsThemInAccountSummaryAffectingBalance stamp: 'AM 11/13/2020 17:46:29'!
test17AReceptiveAccountWithEveryTransactionShowsThemInAccountSummaryAffectingBalance

	| anAccount expectedAccountSummary anotherAccount anAccountSummaryAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	Withdraw register: 40  on: anAccount.
	Transfer from: anAccount to: anotherAccount for: 100.
	Transfer from: anotherAccount to: anAccount for: 50.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10'
												with: 'Extracci�n por 40'
												with: 'Salida por transferencia de 100'
												with: 'Entrada por transferencia de 50'
												with: 'Balance = -80'.
												
	anAccountSummaryAccount := (AccountSummaryReporter for: anAccount) report.
												
	self assert: (anAccountSummaryAccount hasEqualElements: expectedAccountSummary).
	self assert: anAccountSummaryAccount last equals: 'Balance = -80'.
	!

!testRun: #AccountSummaryReporterTest #test01EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/13/2020 17:46:41'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/13/2020 17:46:41'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithEveryTransactionShowsThemInAccountSummaryAffectingBalance stamp: 'AM 11/13/2020 17:46:41'!
PASSED!

!methodRemoval: ReceptiveAccountTest #test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/13/2020 17:46:46'!
test15EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance

	| anEmptyAccount anEmptyAccountSummaryAccount |
	
	anEmptyAccount := ReceptiveAccount new.
	
	anEmptyAccountSummaryAccount := (AccountSummaryReporter for: anEmptyAccount) report.
	
	self assert: anEmptyAccountSummaryAccount size equals: 1.
	self assert: anEmptyAccountSummaryAccount includes: 'Balance = 0'.!

!methodRemoval: ReceptiveAccountTest #test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/13/2020 17:46:46'!
test16AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance

	| anAccount expectedAccountSummary anAccountSummaryAccount |
	
	anAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10' with:  'Balance = 10'.
	anAccountSummaryAccount :=  (AccountSummaryReporter for: anAccount) report.
	
	self assert: expectedAccountSummary equals: anAccountSummaryAccount.!

!methodRemoval: ReceptiveAccountTest #test17AReceptiveAccountWithEveryTransactionShowsThemInAccountSummaryAffectingBalance stamp: 'AM 11/13/2020 17:46:46'!
test17AReceptiveAccountWithEveryTransactionShowsThemInAccountSummaryAffectingBalance

	| anAccount expectedAccountSummary anotherAccount anAccountSummaryAccount |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Deposit register: 10  on: anAccount.
	Withdraw register: 40  on: anAccount.
	Transfer from: anAccount to: anotherAccount for: 100.
	Transfer from: anotherAccount to: anAccount for: 50.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 10'
												with: 'Extracci�n por 40'
												with: 'Salida por transferencia de 100'
												with: 'Entrada por transferencia de 50'
												with: 'Balance = -80'.
												
	anAccountSummaryAccount := (AccountSummaryReporter for: anAccount) report.
												
	self assert: (anAccountSummaryAccount hasEqualElements: expectedAccountSummary).
	self assert: anAccountSummaryAccount last equals: 'Balance = -80'.
	!
!AccountSummaryReporterTest methodsFor: 'tests -- portfolio' stamp: 'AM 11/13/2020 17:47:25'!
test16AccountSummaryOfEmptyPortfolioOnlyShowsZeroBalance

	| aPortfolio anEmptyPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anEmptyPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.
	
	self assert: (anEmptyPortfolioAccountSummary hasEqualElements: { 'Balance = 0' } )! !
!AccountSummaryReporterTest methodsFor: 'tests -- portfolio' stamp: 'AM 11/13/2020 17:47:28'!
test01AccountSummaryOfEmptyPortfolioOnlyShowsZeroBalance

	| aPortfolio anEmptyPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anEmptyPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.
	
	self assert: (anEmptyPortfolioAccountSummary hasEqualElements: { 'Balance = 0' } )! !

!methodRemoval: AccountSummaryReporterTest #test16AccountSummaryOfEmptyPortfolioOnlyShowsZeroBalance stamp: 'AM 11/13/2020 17:47:30'!
test16AccountSummaryOfEmptyPortfolioOnlyShowsZeroBalance

	| aPortfolio anEmptyPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anEmptyPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.
	
	self assert: (anEmptyPortfolioAccountSummary hasEqualElements: { 'Balance = 0' } )!
!AccountSummaryReporterTest methodsFor: 'tests -- portfolio' stamp: 'AM 11/13/2020 17:47:42'!
test02AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance

	| aPortfolio anAccount anotherAccount expectedAccountSummary aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
		
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.

	self assert: 'Balance = 80' equals:aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).! !
!AccountSummaryReporterTest methodsFor: 'tests -- portfolio' stamp: 'AM 11/13/2020 17:47:47'!
test04AccountSummaryOfEmptyPortfolioOnlyShowsZeroBalance

	| aPortfolio anEmptyPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anEmptyPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.
	
	self assert: (anEmptyPortfolioAccountSummary hasEqualElements: { 'Balance = 0' } )! !

!methodRemoval: AccountSummaryReporterTest #test01AccountSummaryOfEmptyPortfolioOnlyShowsZeroBalance stamp: 'AM 11/13/2020 17:47:47'!
test01AccountSummaryOfEmptyPortfolioOnlyShowsZeroBalance

	| aPortfolio anEmptyPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anEmptyPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.
	
	self assert: (anEmptyPortfolioAccountSummary hasEqualElements: { 'Balance = 0' } )!
!AccountSummaryReporterTest methodsFor: 'tests -- portfolio' stamp: 'AM 11/13/2020 17:47:55'!
test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance

	| aPortfolio anAccount anotherAccount expectedAccountSummary aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
		
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.

	self assert: 'Balance = 80' equals:aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).! !

!methodRemoval: AccountSummaryReporterTest #test02AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/13/2020 17:47:55'!
test02AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance

	| aPortfolio anAccount anotherAccount expectedAccountSummary aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
		
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.

	self assert: 'Balance = 80' equals:aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).!
!AccountSummaryReporterTest methodsFor: 'tests -- portfolio' stamp: 'AM 11/13/2020 17:48:06'!
test06PortfolioAccountSummaryIsCalculatedRecursively

	| aPortfolio anAccount anotherAccount expectedAccountSummary anotherPortfolio aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	anotherPortfolio := Portfolio new.
	anotherPortfolio add: anAccount.
	anotherPortfolio add: anotherAccount.
	
	aPortfolio add: anotherPortfolio.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.


	self assert: 'Balance = 80' equals:  aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).! !
!DetailedTreeStructureReporter methodsFor: 'private' stamp: 'AM 11/13/2020 17:49:26' prior: 50882869!
leadingTabs: aNumberfLeadingTabs 
	
	| leadingTabs |
	leadingTabs := ''.
	tabs timesRepeat: [leadingTabs := leadingTabs, '\t'].
	^leadingTabs! !
!DetailedTreeStructureReporter methodsFor: 'private' stamp: 'AM 11/13/2020 17:49:37'!
leadingTabs 
	
	| leadingTabs |
	leadingTabs := ''.
	tabs timesRepeat: [leadingTabs := leadingTabs, '\t'].
	^leadingTabs! !
!DetailedTreeStructureReporter methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 17:49:37' prior: 50882967 overrides: 50877231!
reportSendingTransferComponent: aSendingTransferComponent 

	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	detailedTreeStructure add: leadingTabs, 'Salida por transferencia de ', aSendingTransferComponent value asString.! !
!DetailedTreeStructureReporter methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 17:49:37' prior: 50882910 overrides: 50877275!
reportWithdraw: aWithdraw 

	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	detailedTreeStructure add: leadingTabs, 'Extracci�n por ', aWithdraw value asString.! !
!DetailedTreeStructureReporter methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 17:49:37' prior: 50883347 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	 | leadingTabs |
leadingTabs := self leadingTabs.
	detailedTreeStructure add: leadingTabs, aReceptiveAccount accountName.
	tabs := tabs + 1.
	aReceptiveAccount transactions do: [:aTransaction | aTransaction report: self].
	tabs := tabs - 1.
	detailedTreeStructure add: leadingTabs, '\tBalance = ', aReceptiveAccount balance asString.! !
!DetailedTreeStructureReporter methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 17:49:37' prior: 50883821 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	| leadingTabs |
	leadingTabs := self leadingTabs.
	detailedTreeStructure add: leadingTabs, aPortfolio accountName.
	tabs := tabs + 1.
	aPortfolio accounts do: [:anAccount | anAccount report: self].
	tabs := tabs - 1.
	detailedTreeStructure add: leadingTabs, '\tBalance = ', aPortfolio balance asString.! !
!DetailedTreeStructureReporter methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 17:49:37' prior: 50882881 overrides: 50877042!
reportDeposit: aDeposit 
	
	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	
	detailedTreeStructure add: leadingTabs, 'Dep�sito por ', aDeposit value asString. ! !
!DetailedTreeStructureReporter methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 17:49:37' prior: 50882952 overrides: 50877133!
reportReceivingTransferComponent: aReceivingTransferComponent 
	
	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	detailedTreeStructure add: leadingTabs, 'Entrada por transferencia de ', aReceivingTransferComponent value asString.! !

!methodRemoval: DetailedTreeStructureReporter #leadingTabs: stamp: 'AM 11/13/2020 17:49:37'!
leadingTabs: aNumberfLeadingTabs 
	
	| leadingTabs |
	leadingTabs := ''.
	tabs timesRepeat: [leadingTabs := leadingTabs, '\t'].
	^leadingTabs!
!DetailedTreeStructureReporter methodsFor: 'private' stamp: 'AM 11/13/2020 17:49:44' prior: 50884598!
leadingTabs 
	
	| leadingTabs |
	
	leadingTabs := ''.
	tabs timesRepeat: [leadingTabs := leadingTabs, '\t'].
	
	^leadingTabs! !

!classDefinition: #DetailedTreeStructureReporter category: 'Portfolio' stamp: 'AM 11/13/2020 17:50:24'!
Reporter subclass: #DetailedTreeStructureReporter
	instanceVariableNames: 'detailedTreeStructure numberOfLeadingTabs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!DetailedTreeStructureReporter methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 17:50:24' prior: 50884690!
leadingTabs 
	
	| leadingTabs |
	
	leadingTabs := ''.
	numberOfLeadingTabs timesRepeat: [leadingTabs := leadingTabs, '\t'].
	
	^leadingTabs! !
!DetailedTreeStructureReporter methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 17:50:24' prior: 50884629 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	 | leadingTabs |
leadingTabs := self leadingTabs.
	detailedTreeStructure add: leadingTabs, aReceptiveAccount accountName.
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	aReceptiveAccount transactions do: [:aTransaction | aTransaction report: self].
	numberOfLeadingTabs := numberOfLeadingTabs - 1.
	detailedTreeStructure add: leadingTabs, '\tBalance = ', aReceptiveAccount balance asString.! !
!DetailedTreeStructureReporter methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 17:50:24' prior: 50883200 overrides: 50878590!
report

	numberOfLeadingTabs := 0.
	detailedTreeStructure := OrderedCollection new.
	account report: self.
	
	^ detailedTreeStructure ! !
!DetailedTreeStructureReporter methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 17:50:24' prior: 50884646 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	| leadingTabs |
	leadingTabs := self leadingTabs.
	detailedTreeStructure add: leadingTabs, aPortfolio accountName.
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	aPortfolio accounts do: [:anAccount | anAccount report: self].
	numberOfLeadingTabs := numberOfLeadingTabs - 1.
	detailedTreeStructure add: leadingTabs, '\tBalance = ', aPortfolio balance asString.! !

!classDefinition: #TreeStructureReporter category: 'Portfolio' stamp: 'AM 11/13/2020 17:50:34'!
Reporter subclass: #TreeStructureReporter
	instanceVariableNames: 'treeStructure numberOfLeadingTabs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!TreeStructureReporter methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 17:50:34' prior: 50881763 overrides: 50878590!
report
	
	treeStructure := OrderedCollection new.
	numberOfLeadingTabs := 0.
	
	account report: self.
	
	^ treeStructure! !
!TreeStructureReporter methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 17:50:34' prior: 50882235 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 

	| leadingTabs |
	
	leadingTabs := self leadingTabs: numberOfLeadingTabs.
	
	treeStructure add: leadingTabs, aReceptiveAccount accountName! !
!TreeStructureReporter methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 17:50:34' prior: 50882269 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	
	| leadingTabs |
	
	
	leadingTabs := self leadingTabs: numberOfLeadingTabs.
	
	treeStructure add: leadingTabs,  aPortfolio accountName.
	
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	aPortfolio accounts do: [:anAccount | anAccount report: self ].
	numberOfLeadingTabs := numberOfLeadingTabs - 1.! !

TestCase subclass: #NetTransferReporterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #NetTransferReporterTest category: 'Portfolio' stamp: 'AM 11/13/2020 17:51:24'!
TestCase subclass: #NetTransferReporterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!NetTransferReporterTest methodsFor: 'nil' stamp: 'AM 11/13/2020 17:51:52'!
test01AnEmptyReceptiveAccountHasZeroNetTransfer

	| anEmptyAccount emptyAccountNetTransfer |
	
	anEmptyAccount := ReceptiveAccount new.
	
	emptyAccountNetTransfer :=  (NetTransferReporter for: anEmptyAccount) report.
	
	self assert: emptyAccountNetTransfer equals: 0.! !
!NetTransferReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 17:52:00'!
test02TransfersAffectCorrectlyNetTransferInReceptiveAccount

	| anAccount anotherAccount anAccountNetTransferReport anotherAccountNetTransferReport |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anAccount to: anotherAccount for: 500.
	anAccountNetTransferReport := (NetTransferReporter for: anAccount) report.
	anotherAccountNetTransferReport := (NetTransferReporter for: anotherAccount) report.
	
	self assert: anAccountNetTransferReport equals: -500.
	self assert: anotherAccountNetTransferReport equals: 500.! !
!NetTransferReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 17:52:08'!
test03JustTransfersAffectNetTransfersInReceptiveAccount

	| anAccount anotherAccount anAccountNetTransferReport |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anotherAccount to: anAccount for: 500.
	Deposit register: 50 on: anAccount.
	Withdraw register: 20 on: anAccount.
	
	anAccountNetTransferReport := (NetTransferReporter for: anAccount) report.
	
	self assert: anAccountNetTransferReport equals: 500.
	! !

!methodRemoval: ReceptiveAccountTest #test18AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/13/2020 17:52:24'!
test18AnEmptyReceptiveAccountHasZeroNetTransfer

	| anEmptyAccount emptyAccountNetTransfer |
	
	anEmptyAccount := ReceptiveAccount new.
	
	emptyAccountNetTransfer :=  (NetTransferReporter for: anEmptyAccount) report.
	
	self assert: emptyAccountNetTransfer equals: 0.!

!methodRemoval: ReceptiveAccountTest #test19TransfersAffectCorrectlyNetTransferInReceptiveAccount stamp: 'AM 11/13/2020 17:52:24'!
test19TransfersAffectCorrectlyNetTransferInReceptiveAccount

	| anAccount anotherAccount anAccountNetTransferReport anotherAccountNetTransferReport |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anAccount to: anotherAccount for: 500.
	anAccountNetTransferReport := (NetTransferReporter for: anAccount) report.
	anotherAccountNetTransferReport := (NetTransferReporter for: anotherAccount) report.
	
	self assert: anAccountNetTransferReport equals: -500.
	self assert: anotherAccountNetTransferReport equals: 500.!

!methodRemoval: ReceptiveAccountTest #test20JustTransfersAffectNetTransfersInReceptiveAccount stamp: 'AM 11/13/2020 17:52:24'!
test20JustTransfersAffectNetTransfersInReceptiveAccount

	| anAccount anotherAccount anAccountNetTransferReport |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer from: anotherAccount to: anAccount for: 500.
	Deposit register: 50 on: anAccount.
	Withdraw register: 20 on: anAccount.
	
	anAccountNetTransferReport := (NetTransferReporter for: anAccount) report.
	
	self assert: anAccountNetTransferReport equals: 500.
	!

!methodRemoval: PortfolioTest #test16AccountSummaryOfEmptyPortfolioOnlyShowsZeroBalance stamp: 'AM 11/13/2020 17:52:47'!
test16AccountSummaryOfEmptyPortfolioOnlyShowsZeroBalance

	| aPortfolio anEmptyPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anEmptyPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.
	
	self assert: (anEmptyPortfolioAccountSummary hasEqualElements: { 'Balance = 0' } )!

!methodRemoval: PortfolioTest #test17AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/13/2020 17:52:47'!
test17AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance

	| aPortfolio anAccount anotherAccount expectedAccountSummary aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	aPortfolio add: anAccount.
	aPortfolio add: anotherAccount.
		
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.

	self assert: 'Balance = 80' equals:aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).!

!methodRemoval: PortfolioTest #test18PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/13/2020 17:52:47'!
test18PortfolioAccountSummaryIsCalculatedRecursively

	| aPortfolio anAccount anotherAccount expectedAccountSummary anotherPortfolio aPortfolioAccountSummary |
	
	aPortfolio := Portfolio new.
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	anotherAccount := ReceptiveAccount new.
	Deposit register: 30 on: anotherAccount.
	
	anotherPortfolio := Portfolio new.
	anotherPortfolio add: anAccount.
	anotherPortfolio add: anotherAccount.
	
	aPortfolio add: anotherPortfolio.
	
	expectedAccountSummary := OrderedCollection with: 'Dep�sito por 100'
													with: 'Extracci�n por 50'
													with: 'Dep�sito por 30'
													with: 'Balance = 80'.
	
	aPortfolioAccountSummary := (AccountSummaryReporter for: aPortfolio) report.


	self assert: 'Balance = 80' equals:  aPortfolioAccountSummary last.
	self assert: (aPortfolioAccountSummary hasEqualElements: expectedAccountSummary).!
!NetTransferReporterTest methodsFor: 'tests -- portfolio' stamp: 'AM 11/13/2020 17:53:11'!
test01NetTransferOfEmptyPortfolioIsZero

	| anEmptyPortfolio emptyPortfolioNetTransfer |
	
	anEmptyPortfolio := Portfolio new.
	
	emptyPortfolioNetTransfer :=  (NetTransferReporter for: anEmptyPortfolio) report.

	self assert:  emptyPortfolioNetTransfer equals: 0.! !
!NetTransferReporterTest methodsFor: 'tests -- portfolio' stamp: 'AM 11/13/2020 17:53:15'!
test04NetTransferOfEmptyPortfolioIsZero

	| anEmptyPortfolio emptyPortfolioNetTransfer |
	
	anEmptyPortfolio := Portfolio new.
	
	emptyPortfolioNetTransfer :=  (NetTransferReporter for: anEmptyPortfolio) report.

	self assert:  emptyPortfolioNetTransfer equals: 0.! !

!methodRemoval: NetTransferReporterTest #test01NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/13/2020 17:53:15'!
test01NetTransferOfEmptyPortfolioIsZero

	| anEmptyPortfolio emptyPortfolioNetTransfer |
	
	anEmptyPortfolio := Portfolio new.
	
	emptyPortfolioNetTransfer :=  (NetTransferReporter for: anEmptyPortfolio) report.

	self assert:  emptyPortfolioNetTransfer equals: 0.!
!NetTransferReporterTest methodsFor: 'tests -- portfolio' stamp: 'AM 11/13/2020 17:53:22'!
test05NetTransferOfPortfolioWithReceptiveAccountsIsTheirSumOfNetTransfers

	| aPortfolio anAccount anotherAccount aPortfolioNetTransfer |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount for: 100.
	
	aPortfolio := Portfolio with: anAccount.
	
	aPortfolioNetTransfer :=  (NetTransferReporter for: aPortfolio) report.

	
	self assert: aPortfolioNetTransfer equals: -100.! !
!NetTransferReporterTest methodsFor: 'tests -- portfolio' stamp: 'AM 11/13/2020 17:53:27'!
test06NetTransferIsCalculatedRecursivelyInAPortfolio

	| aPortfolio anAccount anotherAccount aPortfolioNetTransfer |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount for: 100.
	
	aPortfolio := Portfolio with: anAccount with: anotherAccount.
	
	aPortfolioNetTransfer :=  (NetTransferReporter for: aPortfolio) report.
	
	self assert: aPortfolioNetTransfer equals: 0.! !

!methodRemoval: PortfolioTest #test19NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/13/2020 17:53:33'!
test19NetTransferOfEmptyPortfolioIsZero

	| anEmptyPortfolio emptyPortfolioNetTransfer |
	
	anEmptyPortfolio := Portfolio new.
	
	emptyPortfolioNetTransfer :=  (NetTransferReporter for: anEmptyPortfolio) report.

	self assert:  emptyPortfolioNetTransfer equals: 0.!

!methodRemoval: PortfolioTest #test20NetTransferOfPortfolioWithReceptiveAccountsIsTheirSumOfNetTransfers stamp: 'AM 11/13/2020 17:53:33'!
test20NetTransferOfPortfolioWithReceptiveAccountsIsTheirSumOfNetTransfers

	| aPortfolio anAccount anotherAccount aPortfolioNetTransfer |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount for: 100.
	
	aPortfolio := Portfolio with: anAccount.
	
	aPortfolioNetTransfer :=  (NetTransferReporter for: aPortfolio) report.

	
	self assert: aPortfolioNetTransfer equals: -100.!

!methodRemoval: PortfolioTest #test21NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/13/2020 17:53:33'!
test21NetTransferIsCalculatedRecursivelyInAPortfolio

	| aPortfolio anAccount anotherAccount aPortfolioNetTransfer |
	
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer from: anAccount to: anotherAccount for: 100.
	
	aPortfolio := Portfolio with: anAccount with: anotherAccount.
	
	aPortfolioNetTransfer :=  (NetTransferReporter for: aPortfolio) report.
	
	self assert: aPortfolioNetTransfer equals: 0.!

!testRun: #AccountSummaryReporterTest #test01EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithEveryTransactionShowsThemInAccountSummaryAffectingBalance stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04AccountSummaryOfEmptyPortfolioOnlyShowsZeroBalance stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01 stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02 stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03 stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04 stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05 stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #NetTransferReporterTest #test02TransfersAffectCorrectlyNetTransferInReceptiveAccount stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #NetTransferReporterTest #test03JustTransfersAffectNetTransfersInReceptiveAccount stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfPortfolioWithReceptiveAccountsIsTheirSumOfNetTransfers stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #TreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #TreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioIsZItsName stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #TreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #TreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/13/2020 17:53:37'!
PASSED!

!testRun: #AccountSummaryReporterTest #test01EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithEveryTransactionShowsThemInAccountSummaryAffectingBalance stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04AccountSummaryOfEmptyPortfolioOnlyShowsZeroBalance stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01 stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02 stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03 stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04 stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05 stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #NetTransferReporterTest #test02TransfersAffectCorrectlyNetTransferInReceptiveAccount stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #NetTransferReporterTest #test03JustTransfersAffectNetTransfersInReceptiveAccount stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfPortfolioWithReceptiveAccountsIsTheirSumOfNetTransfers stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #TreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #TreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioIsZItsName stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #TreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/13/2020 18:23:24'!
PASSED!

!testRun: #TreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/13/2020 18:23:24'!
PASSED!
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 18:25:23' prior: 50884716 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	 | leadingTabs |
	
	leadingTabs := self leadingTabs.
	detailedTreeStructure add: leadingTabs, aReceptiveAccount accountName.
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	aReceptiveAccount transactions do: [:aTransaction | aTransaction report: self].
	numberOfLeadingTabs := numberOfLeadingTabs - 1.
	detailedTreeStructure add: leadingTabs, '\tBalance = ', aReceptiveAccount balance asString.! !

----QUIT----(13 November 2020 18:31:23) CuisUniversity-4384.image priorSource: 17672102!

----STARTUP---- (13 November 2020 20:04:19) as /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/imagenportfolio2/CuisUniversity-4384.image!


!classRenamed: #TreeStructureReporter as: #SimpleTreeStructureReporter stamp: 'AM 11/13/2020 20:06:31'!
Smalltalk renameClassNamed: #TreeStructureReporter as: #SimpleTreeStructureReporter!
!TreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:06:31' prior: 50884031!
test04TreeStructureIsCalculatedRecursivelyInPortfolio

	| agustinPortfolioTreeStructure agustinPortfolio hernanReceptiveAccount nahuelPortfolio |
	
	agustinPortfolio := Portfolio named: 'Portfolio de Agustin'.
	nahuelPortfolio := Portfolio named: 'Portfolio de Nahuel'.
	
	hernanReceptiveAccount := ReceptiveAccount named: 'Cuenta de Hernan'.
	
	agustinPortfolio add: nahuelPortfolio.
	nahuelPortfolio add: hernanReceptiveAccount.
	
	agustinPortfolioTreeStructure :=  (SimpleTreeStructureReporter for: agustinPortfolio) report.

	self assert:  (agustinPortfolioTreeStructure hasEqualElements: { 'Portfolio de Agustin'. '\tPortfolio de Nahuel'. '\t\tCuenta de Hernan'}).
	self assert:   agustinPortfolioTreeStructure first equals: 'Portfolio de Agustin'.
	self assert:   agustinPortfolioTreeStructure last equals: '\t\tCuenta de Hernan'.! !
!TreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:06:32' prior: 50883924!
test01AReceptiveAccountShowsItselfOnTreeStructure

	| aReceptiveAccount aReceptiveAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	
	aReceptiveAccountTreeStructure :=  (SimpleTreeStructureReporter for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'}).! !
!TreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:06:32' prior: 50883961!
test02TreeStructureOfEmptyPortfolioIsZItsName

	| anEmptyPortfolio emptyPortfolioTreeStructure |
	
	anEmptyPortfolio := Portfolio named: 'Portfolio de Pepito'.
	
	emptyPortfolioTreeStructure :=  (SimpleTreeStructureReporter for: anEmptyPortfolio) report.

	self assert:  (emptyPortfolioTreeStructure hasEqualElements: { 'Portfolio de Pepito' } ).! !
!TreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:06:32' prior: 50883975!
test03APortfolioWithReceptiveAccountsShowsTreeStructure

	| pepitoPortfolio pepeReceptiveAccount pepoteReceptiveAccount pepitoPortfolioTreeStructure |
	
	pepitoPortfolio := Portfolio named: 'Portfolio de Pepito'.
	
	pepeReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepe'.
	pepoteReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepote'.
	
	pepitoPortfolio add: pepeReceptiveAccount.
	pepitoPortfolio add: pepoteReceptiveAccount.
	
	pepitoPortfolioTreeStructure :=  (SimpleTreeStructureReporter for: pepitoPortfolio) report.

	self assert:  (pepitoPortfolioTreeStructure hasEqualElements: { 'Portfolio de Pepito'. '\tCuenta de Pepe'. '\tCuenta de Pepote'}).
	self assert:   pepitoPortfolioTreeStructure first equals: 'Portfolio de Pepito'.! !

!classRenamed: #TreeStructureReporterTest as: #SimpleTreeStructureReporterTest stamp: 'AM 11/13/2020 20:06:40'!
Smalltalk renameClassNamed: #TreeStructureReporterTest as: #SimpleTreeStructureReporterTest!

Reporter subclass: #TreeStructureReporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #TreeStructureReporter category: 'Portfolio' stamp: 'AM 11/13/2020 20:08:19'!
Reporter subclass: #TreeStructureReporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

TreeStructureReporter subclass: #SimpleTreeStructureReporterPosta
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #SimpleTreeStructureReporterPosta category: 'Portfolio' stamp: 'AM 11/13/2020 20:08:47'!
TreeStructureReporter subclass: #SimpleTreeStructureReporterPosta
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

TreeStructureReporter subclass: #DetailedTreeStructureReporterPosta
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #DetailedTreeStructureReporterPosta category: 'Portfolio' stamp: 'AM 11/13/2020 20:08:54'!
TreeStructureReporter subclass: #DetailedTreeStructureReporterPosta
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

Reporter subclass: #DetailedTreeStructureReporterPostita
	instanceVariableNames: 'detailedTreeStructure numberOfLeadingTabs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #DetailedTreeStructureReporterPostita category: 'Portfolio' stamp: 'AM 11/13/2020 20:10:40'!
Reporter subclass: #DetailedTreeStructureReporterPostita
	instanceVariableNames: 'detailedTreeStructure numberOfLeadingTabs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

DetailedTreeStructureReporterPostita class
	instanceVariableNames: ''!

!classDefinition: 'DetailedTreeStructureReporterPostita class' category: 'Portfolio' stamp: 'AM 11/13/2020 20:10:40'!
DetailedTreeStructureReporterPostita class
	instanceVariableNames: ''!
!DetailedTreeStructureReporterPostita methodsFor: 'reporting' stamp: 'AM 11/13/2020 20:10:40' overrides: 50878590!
report

	numberOfLeadingTabs := 0.
	detailedTreeStructure := OrderedCollection new.
	account report: self.
	
	^ detailedTreeStructure ! !
!DetailedTreeStructureReporterPostita methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:10:40' overrides: 50877042!
reportDeposit: aDeposit 
	
	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	
	detailedTreeStructure add: leadingTabs, 'Dep�sito por ', aDeposit value asString. ! !
!DetailedTreeStructureReporterPostita methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:10:40' overrides: 50877084!
reportPortfolio: aPortfolio 
	
	| leadingTabs |
	leadingTabs := self leadingTabs.
	detailedTreeStructure add: leadingTabs, aPortfolio accountName.
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	aPortfolio accounts do: [:anAccount | anAccount report: self].
	numberOfLeadingTabs := numberOfLeadingTabs - 1.
	detailedTreeStructure add: leadingTabs, '\tBalance = ', aPortfolio balance asString.! !
!DetailedTreeStructureReporterPostita methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:10:40' overrides: 50877133!
reportReceivingTransferComponent: aReceivingTransferComponent 
	
	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	detailedTreeStructure add: leadingTabs, 'Entrada por transferencia de ', aReceivingTransferComponent value asString.! !
!DetailedTreeStructureReporterPostita methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:10:41' overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	 | leadingTabs |
	
	leadingTabs := self leadingTabs.
	detailedTreeStructure add: leadingTabs, aReceptiveAccount accountName.
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	aReceptiveAccount transactions do: [:aTransaction | aTransaction report: self].
	numberOfLeadingTabs := numberOfLeadingTabs - 1.
	detailedTreeStructure add: leadingTabs, '\tBalance = ', aReceptiveAccount balance asString.! !
!DetailedTreeStructureReporterPostita methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:10:41' overrides: 50877231!
reportSendingTransferComponent: aSendingTransferComponent 

	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	detailedTreeStructure add: leadingTabs, 'Salida por transferencia de ', aSendingTransferComponent value asString.! !
!DetailedTreeStructureReporterPostita methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:10:41' overrides: 50877275!
reportWithdraw: aWithdraw 

	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	detailedTreeStructure add: leadingTabs, 'Extracci�n por ', aWithdraw value asString.! !
!DetailedTreeStructureReporterPostita methodsFor: 'formatting -- private' stamp: 'AM 11/13/2020 20:10:41'!
leadingTabs 
	
	| leadingTabs |
	
	leadingTabs := ''.
	numberOfLeadingTabs timesRepeat: [leadingTabs := leadingTabs, '\t'].
	
	^leadingTabs! !

!classRemoval: #DetailedTreeStructureReporterPostita stamp: 'AM 11/13/2020 20:11:11'!
Reporter subclass: #DetailedTreeStructureReporterPostita
	instanceVariableNames: 'detailedTreeStructure numberOfLeadingTabs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #DetailedTreeStructureReporterPosta category: 'Portfolio' stamp: 'AM 11/13/2020 20:12:49'!
TreeStructureReporter subclass: #DetailedTreeStructureReporterPosta
	instanceVariableNames: 'numberOfLeadingTabs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!DetailedTreeStructureReporterPosta methodsFor: 'nil' stamp: 'AM 11/13/2020 20:12:45'!
leadingTabs 
	
	| leadingTabs |
	
	leadingTabs := ''.
	numberOfLeadingTabs timesRepeat: [leadingTabs := leadingTabs, '\t'].
	
	^leadingTabs! !

!classDefinition: #DetailedTreeStructureReporterPosta category: 'Portfolio' stamp: 'AM 11/13/2020 20:12:58'!
TreeStructureReporter subclass: #DetailedTreeStructureReporterPosta
	instanceVariableNames: 'numberOfLeadingTabs detailedTreeStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!DetailedTreeStructureReporterPosta methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:12:56' overrides: 50878590!
report

	numberOfLeadingTabs := 0.
	detailedTreeStructure := OrderedCollection new.
	account report: self.
	
	^ detailedTreeStructure ! !
!DetailedTreeStructureReporterPosta methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:13:05' overrides: 50877042!
reportDeposit: aDeposit 
	
	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	
	detailedTreeStructure add: leadingTabs, 'Dep�sito por ', aDeposit value asString. ! !
!DetailedTreeStructureReporterPosta methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:13:10' overrides: 50877084!
reportPortfolio: aPortfolio 
	
	| leadingTabs |
	leadingTabs := self leadingTabs.
	detailedTreeStructure add: leadingTabs, aPortfolio accountName.
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	aPortfolio accounts do: [:anAccount | anAccount report: self].
	numberOfLeadingTabs := numberOfLeadingTabs - 1.
	detailedTreeStructure add: leadingTabs, '\tBalance = ', aPortfolio balance asString.! !
!DetailedTreeStructureReporterPosta methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:13:17' overrides: 50877133!
reportReceivingTransferComponent: aReceivingTransferComponent 
	
	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	detailedTreeStructure add: leadingTabs, 'Entrada por transferencia de ', aReceivingTransferComponent value asString.! !
!DetailedTreeStructureReporterPosta methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:13:22' overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	 | leadingTabs |
	
	leadingTabs := self leadingTabs.
	detailedTreeStructure add: leadingTabs, aReceptiveAccount accountName.
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	aReceptiveAccount transactions do: [:aTransaction | aTransaction report: self].
	numberOfLeadingTabs := numberOfLeadingTabs - 1.
	detailedTreeStructure add: leadingTabs, '\tBalance = ', aReceptiveAccount balance asString.! !
!DetailedTreeStructureReporterPosta methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:13:27' overrides: 50877231!
reportSendingTransferComponent: aSendingTransferComponent 

	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	detailedTreeStructure add: leadingTabs, 'Salida por transferencia de ', aSendingTransferComponent value asString.! !
!DetailedTreeStructureReporterPosta methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:13:32' overrides: 50877275!
reportWithdraw: aWithdraw 

	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	detailedTreeStructure add: leadingTabs, 'Extracci�n por ', aWithdraw value asString.! !
!SimpleTreeStructureReporterPosta methodsFor: 'nil' stamp: 'AM 11/13/2020 20:14:32'!
leadingTabs: aNumberOfTabs
	
	| leadingTabs |
	
	leadingTabs := ''.
	aNumberOfTabs timesRepeat: [leadingTabs := leadingTabs, '\t'].
	
	^leadingTabs ! !
!SimpleTreeStructureReporterPosta methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:14:45' prior: 50885912!
leadingTabs: aNumberOfTabs
	
	 
	
	leadingTabs := ''.
	aNumberOfTabs timesRepeat: [leadingTabs := leadingTabs, '\t'].
	
	^leadingTabs ! !

!classDefinition: #SimpleTreeStructureReporterPosta category: 'Portfolio' stamp: 'AM 11/13/2020 20:14:46'!
TreeStructureReporter subclass: #SimpleTreeStructureReporterPosta
	instanceVariableNames: 'leadingTabs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #SimpleTreeStructureReporterPosta category: 'Portfolio' stamp: 'AM 11/13/2020 20:15:13'!
TreeStructureReporter subclass: #SimpleTreeStructureReporterPosta
	instanceVariableNames: 'leadingTabs numberOfLeadingTabs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!SimpleTreeStructureReporterPosta methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:15:11' prior: 50885921!
leadingTabs: aNumberOfTabs
	
	 
	
	leadingTabs := ''.
	numberOfLeadingTabs timesRepeat: [leadingTabs := leadingTabs, '\t'].
	
	^leadingTabs ! !
!SimpleTreeStructureReporterPosta methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:15:23'!
leadingTabs
	
	 
	
	leadingTabs := ''.
	numberOfLeadingTabs timesRepeat: [leadingTabs := leadingTabs, '\t'].
	
	^leadingTabs ! !

!methodRemoval: SimpleTreeStructureReporterPosta #leadingTabs: stamp: 'AM 11/13/2020 20:15:23'!
leadingTabs: aNumberOfTabs
	
	 
	
	leadingTabs := ''.
	numberOfLeadingTabs timesRepeat: [leadingTabs := leadingTabs, '\t'].
	
	^leadingTabs !

!classDefinition: #SimpleTreeStructureReporterPosta category: 'Portfolio' stamp: 'AM 11/13/2020 20:15:33'!
TreeStructureReporter subclass: #SimpleTreeStructureReporterPosta
	instanceVariableNames: 'leadingTabs numberOfLeadingTabs treeStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!SimpleTreeStructureReporterPosta methodsFor: 'nil' stamp: 'AM 11/13/2020 20:15:31' overrides: 50878590!
report
	
	treeStructure := OrderedCollection new.
	numberOfLeadingTabs := 0.
	
	account report: self.
	
	^ treeStructure! !

!classDefinition: #SimpleTreeStructureReporterPosta category: 'Portfolio' stamp: 'AM 11/13/2020 20:16:07'!
TreeStructureReporter subclass: #SimpleTreeStructureReporterPosta
	instanceVariableNames: 'le numberOfLeadingTabs treeStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!SimpleTreeStructureReporterPosta methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:16:07' prior: 50885956!
leadingTabs
	
	 
	
	le := ''.
	numberOfLeadingTabs timesRepeat: [le := le, '\t'].
	
	^le ! !
!SimpleTreeStructureReporterPosta methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:16:14' prior: 50885999!
leadingTabs
	
	 
	
	| leadingTabs |
	leadingTabs := ''.
	numberOfLeadingTabs timesRepeat: [le := le, '\t'].
	
	^leadingTabs ! !

TreeStructureReporter subclass: #SimpleTreeStructureReporterPosta
	instanceVariableNames: 'numberOfLeadingTabs treeStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #SimpleTreeStructureReporterPosta category: 'Portfolio' stamp: 'AM 11/13/2020 20:16:28'!
TreeStructureReporter subclass: #SimpleTreeStructureReporterPosta
	instanceVariableNames: 'numberOfLeadingTabs treeStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!SimpleTreeStructureReporterPosta methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:16:36' overrides: 50877084!
reportPortfolio: aPortfolio 
	
	
	| leadingTabs |
	
	
	leadingTabs := self leadingTabs: numberOfLeadingTabs.
	
	treeStructure add: leadingTabs,  aPortfolio accountName.
	
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	aPortfolio accounts do: [:anAccount | anAccount report: self ].
	numberOfLeadingTabs := numberOfLeadingTabs - 1.! !
!SimpleTreeStructureReporterPosta methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:16:44' overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 

	| leadingTabs |
	
	leadingTabs := self leadingTabs: numberOfLeadingTabs.
	
	treeStructure add: leadingTabs, aReceptiveAccount accountName! !

TreeStructureReporter subclass: #DetailedTreeStructureReporterPosta
	instanceVariableNames: 'detailedTreeStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #DetailedTreeStructureReporterPosta category: 'Portfolio' stamp: 'AM 11/13/2020 20:17:54'!
TreeStructureReporter subclass: #DetailedTreeStructureReporterPosta
	instanceVariableNames: 'detailedTreeStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #SimpleTreeStructureReporterPosta category: 'Portfolio' stamp: 'AM 11/13/2020 20:18:03'!
TreeStructureReporter subclass: #SimpleTreeStructureReporterPosta
	instanceVariableNames: 'treeStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #TreeStructureReporter category: 'Portfolio' stamp: 'AM 11/13/2020 20:18:03'!
Reporter subclass: #TreeStructureReporter
	instanceVariableNames: 'numberOfLeadingTabs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!TreeStructureReporter methodsFor: 'formatting -- private' stamp: 'AM 11/13/2020 20:18:12'!
leadingTabs
	
	 
	
	| leadingTabs |
	leadingTabs := ''.
	numberOfLeadingTabs timesRepeat: [le := le, '\t'].
	
	^leadingTabs ! !

!methodRemoval: SimpleTreeStructureReporterPosta #leadingTabs stamp: 'AM 11/13/2020 20:18:12'!
leadingTabs
	
	 
	
	| leadingTabs |
	leadingTabs := ''.
	numberOfLeadingTabs timesRepeat: [le := le, '\t'].
	
	^leadingTabs !
!TreeStructureReporter methodsFor: 'formatting -- private' stamp: 'AM 11/13/2020 20:18:26' prior: 50886086!
leadingTabs
	
	 
	
	| leadingTabs |
	leadingTabs := ''.
	numberOfLeadingTabs timesRepeat: [leadingTabs := leadingTabs, '\t'].
	
	^leadingTabs ! !
!TreeStructureReporter methodsFor: 'formatting -- private' stamp: 'AM 11/13/2020 20:18:31' prior: 50886101!
leadingTabs
	
	| leadingTabs |
	
	leadingTabs := ''.
	numberOfLeadingTabs timesRepeat: [leadingTabs := leadingTabs, '\t'].
	
	^leadingTabs ! !
!DetailedTreeStructureReporterPosta methodsFor: 'reporting' stamp: 'AM 11/13/2020 20:19:00' prior: 50885826 overrides: 50878590!
report

	numberOfLeadingTabs := 0.
	
	detailedTreeStructure := OrderedCollection new.
	account report: self.
	
	^ detailedTreeStructure ! !

!classDefinition: #DetailedTreeStructureReporterPosta category: 'Portfolio' stamp: 'AM 11/13/2020 20:19:19'!
TreeStructureReporter subclass: #DetailedTreeStructureReporterPosta
	instanceVariableNames: 'treeStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!DetailedTreeStructureReporterPosta methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:19:19' prior: 50886118 overrides: 50878590!
report

	numberOfLeadingTabs := 0.
	
	treeStructure := OrderedCollection new.
	account report: self.
	
	^ treeStructure ! !
!DetailedTreeStructureReporterPosta methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:19:19' prior: 50885892 overrides: 50877231!
reportSendingTransferComponent: aSendingTransferComponent 

	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	treeStructure add: leadingTabs, 'Salida por transferencia de ', aSendingTransferComponent value asString.! !
!DetailedTreeStructureReporterPosta methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:19:19' prior: 50885835 overrides: 50877042!
reportDeposit: aDeposit 
	
	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	
	treeStructure add: leadingTabs, 'Dep�sito por ', aDeposit value asString. ! !
!DetailedTreeStructureReporterPosta methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:19:19' prior: 50885845 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	| leadingTabs |
	leadingTabs := self leadingTabs.
	treeStructure add: leadingTabs, aPortfolio accountName.
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	aPortfolio accounts do: [:anAccount | anAccount report: self].
	numberOfLeadingTabs := numberOfLeadingTabs - 1.
	treeStructure add: leadingTabs, '\tBalance = ', aPortfolio balance asString.! !
!DetailedTreeStructureReporterPosta methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:19:19' prior: 50885874 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	 | leadingTabs |
	
	leadingTabs := self leadingTabs.
	treeStructure add: leadingTabs, aReceptiveAccount accountName.
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	aReceptiveAccount transactions do: [:aTransaction | aTransaction report: self].
	numberOfLeadingTabs := numberOfLeadingTabs - 1.
	treeStructure add: leadingTabs, '\tBalance = ', aReceptiveAccount balance asString.! !
!DetailedTreeStructureReporterPosta methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:19:19' prior: 50885862 overrides: 50877133!
reportReceivingTransferComponent: aReceivingTransferComponent 
	
	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	treeStructure add: leadingTabs, 'Entrada por transferencia de ', aReceivingTransferComponent value asString.! !
!DetailedTreeStructureReporterPosta methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:19:20' prior: 50885904 overrides: 50877275!
reportWithdraw: aWithdraw 

	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	treeStructure add: leadingTabs, 'Extracci�n por ', aWithdraw value asString.! !

TreeStructureReporter subclass: #SimpleTreeStructureReporterPosta
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #SimpleTreeStructureReporterPosta category: 'Portfolio' stamp: 'AM 11/13/2020 20:19:34'!
TreeStructureReporter subclass: #SimpleTreeStructureReporterPosta
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #DetailedTreeStructureReporterPosta category: 'Portfolio' stamp: 'AM 11/13/2020 20:19:43'!
TreeStructureReporter subclass: #DetailedTreeStructureReporterPosta
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #TreeStructureReporter category: 'Portfolio' stamp: 'AM 11/13/2020 20:19:44'!
Reporter subclass: #TreeStructureReporter
	instanceVariableNames: 'numberOfLeadingTabs treeStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!TreeStructureReporter methodsFor: 'reporting' stamp: 'AM 11/13/2020 20:19:54' overrides: 50878590!
report

	numberOfLeadingTabs := 0.
	
	treeStructure := OrderedCollection new.
	account report: self.
	
	^ treeStructure ! !

!methodRemoval: DetailedTreeStructureReporterPosta #report stamp: 'AM 11/13/2020 20:19:54'!
report

	numberOfLeadingTabs := 0.
	
	treeStructure := OrderedCollection new.
	account report: self.
	
	^ treeStructure !
!DetailedTreeStructureReporterPosta methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:20:08' prior: 50886167 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	treeStructure add: leadingTabs, aPortfolio accountName.
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	
	aPortfolio accounts do: [:anAccount | anAccount report: self].
	
	numberOfLeadingTabs := numberOfLeadingTabs - 1.
	treeStructure add: leadingTabs, '\tBalance = ', aPortfolio balance asString.! !
!DetailedTreeStructureReporterPosta methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:20:19' prior: 50886184 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	 | leadingTabs |
	
	leadingTabs := self leadingTabs.
	treeStructure add: leadingTabs, aReceptiveAccount accountName.
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	
	aReceptiveAccount transactions do: [:aTransaction | aTransaction report: self].
	
	numberOfLeadingTabs := numberOfLeadingTabs - 1.
	treeStructure add: leadingTabs, '\tBalance = ', aReceptiveAccount balance asString.! !

!methodRemoval: DetailedTreeStructureReporterPosta #leadingTabs stamp: 'AM 11/13/2020 20:21:26'!
leadingTabs 
	
	| leadingTabs |
	
	leadingTabs := ''.
	numberOfLeadingTabs timesRepeat: [leadingTabs := leadingTabs, '\t'].
	
	^leadingTabs!
!SimpleTreeStructureReporterPosta methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:21:57' prior: 50886030 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	
	| leadingTabs |
	
	
	leadingTabs := self leadingTabs.
	
	treeStructure add: leadingTabs,  aPortfolio accountName.
	
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	aPortfolio accounts do: [:anAccount | anAccount report: self ].
	numberOfLeadingTabs := numberOfLeadingTabs - 1.! !
!SimpleTreeStructureReporterPosta methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:22:02' prior: 50886045 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 

	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	
	treeStructure add: leadingTabs, aReceptiveAccount accountName! !
!DetailedTreeStructureReporterPosta methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:23:33'!
reportAccount: anAccount do: aBlock
	
	 | leadingTabs |
	
	leadingTabs := self leadingTabs.
	treeStructure add: leadingTabs, anAccount accountName.
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	
	aBlock value: anAccount.
	
	numberOfLeadingTabs := numberOfLeadingTabs - 1.
	treeStructure add: leadingTabs, '\tBalance = ', anAccount balance asString.! !
!DetailedTreeStructureReporterPosta methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:25:23' prior: 50886268 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	self reportAccount: aPortfolio 
		do: [aPortfolio accounts do: [:anAccount | anAccount report: self] ].! !
!DetailedTreeStructureReporterPosta methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:25:28' prior: 50886335!
reportAccount: anAccount do: aBlock
	
	 | leadingTabs |
	
	leadingTabs := self leadingTabs.
	treeStructure add: leadingTabs, anAccount accountName.
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	
	aBlock value.
	
	numberOfLeadingTabs := numberOfLeadingTabs - 1.
	treeStructure add: leadingTabs, '\tBalance = ', anAccount balance asString.! !
!DetailedTreeStructureReporterPosta methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:26:07' prior: 50886285 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	 self reportAccount: aReceptiveAccount 
		do: [aReceptiveAccount transactions do: [:anAccount | anAccount report: self] ].! !
!DetailedTreeStructureReporterPosta methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:26:19' prior: 50886376 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	 self reportAccount: aReceptiveAccount 
		do: [aReceptiveAccount transactions do: [:aTransaction | aTransaction report: self] ].! !
!SimpleTreeStructureReporterPosta methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:28:21' prior: 50886311 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	
	| leadingTabs |
	
	
	leadingTabs := self leadingTabs.
	treeStructure add: leadingTabs,  aPortfolio accountName.
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	
	aPortfolio accounts do: [:anAccount | anAccount report: self ].
	
	numberOfLeadingTabs := numberOfLeadingTabs - 1.! !
!SimpleTreeStructureReporterPosta methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:28:24' prior: 50886396 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	treeStructure add: leadingTabs,  aPortfolio accountName.
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	
	aPortfolio accounts do: [:anAccount | anAccount report: self ].
	
	numberOfLeadingTabs := numberOfLeadingTabs - 1.! !
!DetailedTreeStructureReporterPosta methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:31:37' prior: 50886351 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	self reportAccount: aPortfolio 
		do: [aPortfolio accounts do: [:anAccount | anAccount report: self] ].! !
!DetailedTreeStructureReporterTest methodsFor: 'tests -- portfolio' stamp: 'AM 11/13/2020 20:32:02' prior: 50883296!
test04

	| pepitoPortfolio pepeReceptiveAccount pepoteReceptiveAccount pepitoPortfolioTreeStructure expectedPortfolioTreeStructure |
	
	pepitoPortfolio := Portfolio named: 'Portfolio de Pepito'.
	
	pepeReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepe'.
	pepoteReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepote'.
	
	pepitoPortfolio add: pepeReceptiveAccount.
	pepitoPortfolio add: pepoteReceptiveAccount.
	
	pepitoPortfolioTreeStructure :=  (DetailedTreeStructureReporterPosta for: pepitoPortfolio) report.
	expectedPortfolioTreeStructure := OrderedCollection with: 'Portfolio de Pepito' with: '\tCuenta de Pepe' with: '\t\tBalance = 0' with: '\tCuenta de Pepote' with: '\t\tBalance = 0' with: '\tBalance = 0'.

	self assert:  pepitoPortfolioTreeStructure equals: expectedPortfolioTreeStructure.! !
!DetailedTreeStructureReporterTest methodsFor: 'tests -- portfolio' stamp: 'AM 11/13/2020 20:32:07' prior: 50883162!
test03

	| anEmptyPortfolio portfolioDetailedTreeStructure |
	
	anEmptyPortfolio := Portfolio named: 'Cuenta de Pepe'.
	
	portfolioDetailedTreeStructure := ( DetailedTreeStructureReporterPosta for: anEmptyPortfolio ) report.
	
	self assert: (portfolioDetailedTreeStructure hasEqualElements: { 'Cuenta de Pepe'. '\tBalance = 0' }).
	self assert: portfolioDetailedTreeStructure first equals: 'Cuenta de Pepe'.! !
!DetailedTreeStructureReporterTest methodsFor: 'tests -- receptive account' stamp: 'AM 11/13/2020 20:32:10' prior: 50883065!
test02

	| aReceptiveAccount aReceptiveAccountTreeStructure anotherReceptiveAccount expectedAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	anotherReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepe'.
	
	Deposit register: 100 on: aReceptiveAccount.
	Withdraw register: 50 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount to: anotherReceptiveAccount for: 100.
	Transfer from: anotherReceptiveAccount to: aReceptiveAccount for: 100.
	
	aReceptiveAccountTreeStructure :=  (DetailedTreeStructureReporterPosta for: aReceptiveAccount) report.
	expectedAccountTreeStructure := OrderedCollection 				with: 'Cuenta Pepito' with: '\tDep�sito por 100' with: '\tExtracci�n por 50' with: '\tSalida por transferencia de 100' with: '\tEntrada por transferencia de 100'  with: '\tBalance = 50'.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: expectedAccountTreeStructure).
	self assert: aReceptiveAccountTreeStructure first equals: expectedAccountTreeStructure first.
	self assert: aReceptiveAccountTreeStructure last equals: expectedAccountTreeStructure last.! !
!DetailedTreeStructureReporterTest methodsFor: 'tests -- receptive account' stamp: 'AM 11/13/2020 20:32:15' prior: 50882539!
test01

	| aReceptiveAccount aReceptiveAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	
	aReceptiveAccountTreeStructure :=  (DetailedTreeStructureReporterPosta for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'. '\tBalance = 0'}).
	self assert: aReceptiveAccountTreeStructure first equals: 'Cuenta Pepito'.! !
!DetailedTreeStructureReporterTest methodsFor: 'tests -- portfolio' stamp: 'AM 11/13/2020 20:32:19' prior: 50883854!
test05

	| agustinPortfolioTreeStructure agustinPortfolio hernanReceptiveAccount nahuelPortfolio expectedPortfolioTreeStructure |
	
	agustinPortfolio := Portfolio named: 'Portfolio de Agustin'.
	nahuelPortfolio := Portfolio named: 'Portfolio de Nahuel'.
	
	hernanReceptiveAccount := ReceptiveAccount named: 'Cuenta de Hernan'.
	
	Deposit register: 100 on: hernanReceptiveAccount.
	
	agustinPortfolio add: nahuelPortfolio.
	nahuelPortfolio add: hernanReceptiveAccount.
	
	agustinPortfolioTreeStructure :=  (DetailedTreeStructureReporterPosta for: agustinPortfolio) report.
	
	expectedPortfolioTreeStructure := OrderedCollection with: 'Portfolio de Agustin' with:  '\tPortfolio de Nahuel' with: '\t\tCuenta de Hernan' with: '\t\t\tDep�sito por 100' with: '\t\t\tBalance = 100' with: '\t\tBalance = 100'.
	expectedPortfolioTreeStructure add: '\tBalance = 100'.
	self assert:  agustinPortfolioTreeStructure equals: expectedPortfolioTreeStructure.! !

!classRemoval: #DetailedTreeStructureReporter stamp: 'AM 11/13/2020 20:32:27'!
Reporter subclass: #DetailedTreeStructureReporter
	instanceVariableNames: 'detailedTreeStructure numberOfLeadingTabs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRenamed: #DetailedTreeStructureReporterPosta as: #DetailedTreeStructureReporter stamp: 'AM 11/13/2020 20:32:34'!
Smalltalk renameClassNamed: #DetailedTreeStructureReporterPosta as: #DetailedTreeStructureReporter!
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:32:35' prior: 50886464!
test03

	| anEmptyPortfolio portfolioDetailedTreeStructure |
	
	anEmptyPortfolio := Portfolio named: 'Cuenta de Pepe'.
	
	portfolioDetailedTreeStructure := ( DetailedTreeStructureReporter for: anEmptyPortfolio ) report.
	
	self assert: (portfolioDetailedTreeStructure hasEqualElements: { 'Cuenta de Pepe'. '\tBalance = 0' }).
	self assert: portfolioDetailedTreeStructure first equals: 'Cuenta de Pepe'.! !
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:32:35' prior: 50886434!
test04

	| pepitoPortfolio pepeReceptiveAccount pepoteReceptiveAccount pepitoPortfolioTreeStructure expectedPortfolioTreeStructure |
	
	pepitoPortfolio := Portfolio named: 'Portfolio de Pepito'.
	
	pepeReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepe'.
	pepoteReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepote'.
	
	pepitoPortfolio add: pepeReceptiveAccount.
	pepitoPortfolio add: pepoteReceptiveAccount.
	
	pepitoPortfolioTreeStructure :=  (DetailedTreeStructureReporter for: pepitoPortfolio) report.
	expectedPortfolioTreeStructure := OrderedCollection with: 'Portfolio de Pepito' with: '\tCuenta de Pepe' with: '\t\tBalance = 0' with: '\tCuenta de Pepote' with: '\t\tBalance = 0' with: '\tBalance = 0'.

	self assert:  pepitoPortfolioTreeStructure equals: expectedPortfolioTreeStructure.! !
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:32:35' prior: 50886520!
test01

	| aReceptiveAccount aReceptiveAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	
	aReceptiveAccountTreeStructure :=  (DetailedTreeStructureReporter for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'. '\tBalance = 0'}).
	self assert: aReceptiveAccountTreeStructure first equals: 'Cuenta Pepito'.! !
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:32:35' prior: 50886481!
test02

	| aReceptiveAccount aReceptiveAccountTreeStructure anotherReceptiveAccount expectedAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	anotherReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepe'.
	
	Deposit register: 100 on: aReceptiveAccount.
	Withdraw register: 50 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount to: anotherReceptiveAccount for: 100.
	Transfer from: anotherReceptiveAccount to: aReceptiveAccount for: 100.
	
	aReceptiveAccountTreeStructure :=  (DetailedTreeStructureReporter for: aReceptiveAccount) report.
	expectedAccountTreeStructure := OrderedCollection 				with: 'Cuenta Pepito' with: '\tDep�sito por 100' with: '\tExtracci�n por 50' with: '\tSalida por transferencia de 100' with: '\tEntrada por transferencia de 100'  with: '\tBalance = 50'.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: expectedAccountTreeStructure).
	self assert: aReceptiveAccountTreeStructure first equals: expectedAccountTreeStructure first.
	self assert: aReceptiveAccountTreeStructure last equals: expectedAccountTreeStructure last.! !
!DetailedTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:32:35' prior: 50886537!
test05

	| agustinPortfolioTreeStructure agustinPortfolio hernanReceptiveAccount nahuelPortfolio expectedPortfolioTreeStructure |
	
	agustinPortfolio := Portfolio named: 'Portfolio de Agustin'.
	nahuelPortfolio := Portfolio named: 'Portfolio de Nahuel'.
	
	hernanReceptiveAccount := ReceptiveAccount named: 'Cuenta de Hernan'.
	
	Deposit register: 100 on: hernanReceptiveAccount.
	
	agustinPortfolio add: nahuelPortfolio.
	nahuelPortfolio add: hernanReceptiveAccount.
	
	agustinPortfolioTreeStructure :=  (DetailedTreeStructureReporter for: agustinPortfolio) report.
	
	expectedPortfolioTreeStructure := OrderedCollection with: 'Portfolio de Agustin' with:  '\tPortfolio de Nahuel' with: '\t\tCuenta de Hernan' with: '\t\t\tDep�sito por 100' with: '\t\t\tBalance = 100' with: '\t\tBalance = 100'.
	expectedPortfolioTreeStructure add: '\tBalance = 100'.
	self assert:  agustinPortfolioTreeStructure equals: expectedPortfolioTreeStructure.! !

!testRun: #DetailedTreeStructureReporterTest #test01 stamp: 'AM 11/13/2020 20:32:43'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02 stamp: 'AM 11/13/2020 20:32:43'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03 stamp: 'AM 11/13/2020 20:32:43'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04 stamp: 'AM 11/13/2020 20:32:43'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05 stamp: 'AM 11/13/2020 20:32:43'!
PASSED!
!SimpleTreeStructureReporterTest methodsFor: 'tests -- portfolio' stamp: 'AM 11/13/2020 20:32:57' prior: 50885582!
test02TreeStructureOfEmptyPortfolioIsZItsName

	| anEmptyPortfolio emptyPortfolioTreeStructure |
	
	anEmptyPortfolio := Portfolio named: 'Portfolio de Pepito'.
	
	emptyPortfolioTreeStructure :=  (SimpleTreeStructureReporterPosta for: anEmptyPortfolio) report.

	self assert:  (emptyPortfolioTreeStructure hasEqualElements: { 'Portfolio de Pepito' } ).! !
!SimpleTreeStructureReporterTest methodsFor: 'tests -- portfolio' stamp: 'AM 11/13/2020 20:33:02' prior: 50885537!
test04TreeStructureIsCalculatedRecursivelyInPortfolio

	| agustinPortfolioTreeStructure agustinPortfolio hernanReceptiveAccount nahuelPortfolio |
	
	agustinPortfolio := Portfolio named: 'Portfolio de Agustin'.
	nahuelPortfolio := Portfolio named: 'Portfolio de Nahuel'.
	
	hernanReceptiveAccount := ReceptiveAccount named: 'Cuenta de Hernan'.
	
	agustinPortfolio add: nahuelPortfolio.
	nahuelPortfolio add: hernanReceptiveAccount.
	
	agustinPortfolioTreeStructure :=  (SimpleTreeStructureReporterPosta for: agustinPortfolio) report.

	self assert:  (agustinPortfolioTreeStructure hasEqualElements: { 'Portfolio de Agustin'. '\tPortfolio de Nahuel'. '\t\tCuenta de Hernan'}).
	self assert:   agustinPortfolioTreeStructure first equals: 'Portfolio de Agustin'.
	self assert:   agustinPortfolioTreeStructure last equals: '\t\tCuenta de Hernan'.! !
!SimpleTreeStructureReporterTest methodsFor: 'tests -- portfolio' stamp: 'AM 11/13/2020 20:33:06' prior: 50885597!
test03APortfolioWithReceptiveAccountsShowsTreeStructure

	| pepitoPortfolio pepeReceptiveAccount pepoteReceptiveAccount pepitoPortfolioTreeStructure |
	
	pepitoPortfolio := Portfolio named: 'Portfolio de Pepito'.
	
	pepeReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepe'.
	pepoteReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepote'.
	
	pepitoPortfolio add: pepeReceptiveAccount.
	pepitoPortfolio add: pepoteReceptiveAccount.
	
	pepitoPortfolioTreeStructure :=  (SimpleTreeStructureReporterPosta for: pepitoPortfolio) report.

	self assert:  (pepitoPortfolioTreeStructure hasEqualElements: { 'Portfolio de Pepito'. '\tCuenta de Pepe'. '\tCuenta de Pepote'}).
	self assert:   pepitoPortfolioTreeStructure first equals: 'Portfolio de Pepito'.! !
!SimpleTreeStructureReporterTest methodsFor: 'tests -- receptive account' stamp: 'AM 11/13/2020 20:33:10' prior: 50885567!
test01AReceptiveAccountShowsItselfOnTreeStructure

	| aReceptiveAccount aReceptiveAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	
	aReceptiveAccountTreeStructure :=  (SimpleTreeStructureReporterPosta for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'}).! !

!classRemoval: #SimpleTreeStructureReporter stamp: 'AM 11/13/2020 20:33:20'!
Reporter subclass: #SimpleTreeStructureReporter
	instanceVariableNames: 'treeStructure numberOfLeadingTabs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!methodRemoval: SimpleTreeStructureReporterPosta #report stamp: 'AM 11/13/2020 20:33:43'!
report
	
	treeStructure := OrderedCollection new.
	numberOfLeadingTabs := 0.
	
	account report: self.
	
	^ treeStructure!
!Portfolio methodsFor: 'nil' stamp: 'AM 11/13/2020 20:36:28'!
onAccountsDo: aBlockToExecuteOnAccounts! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:36:41' prior: 50886838!
onAccountsDo: aBlockToExecuteOnAccounts

	accounts do: aBlockToExecuteOnAccounts ! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'AM 11/13/2020 20:41:16'!
onTransactionsDo: aBlockToExecuteOnTransactions

	transactions do: aBlockToExecuteOnTransactions! !
!AccountSummaryReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:42:07' prior: 50877090 overrides: 50877084!
reportPortfolio: aPortfolio

	aPortfolio onAccountsDo: [ :anAccount | anAccount report: self ].
	
	! !

!testRun: #AccountSummaryReporterTest #test01EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/13/2020 20:42:10'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/13/2020 20:42:10'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithEveryTransactionShowsThemInAccountSummaryAffectingBalance stamp: 'AM 11/13/2020 20:42:10'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04AccountSummaryOfEmptyPortfolioOnlyShowsZeroBalance stamp: 'AM 11/13/2020 20:42:10'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/13/2020 20:42:10'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/13/2020 20:42:10'!
PASSED!
!AccountSummaryReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:42:26' prior: 50877183 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount
	
	aReceptiveAccount onTransactionsDo: [ :aTransaction | aTransaction report: self ].
	
	! !
!NetTransferReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:42:44' prior: 50878596 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	^ aPortfolio onAccountsDo: [ :anAccount | anAccount report: self ]! !
!NetTransferReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:42:54' prior: 50877175 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	aReceptiveAccount onTransactionsDo: [:aTransaction | aTransaction report: self ]! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:43:16' prior: 50886426 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	self reportAccount: aPortfolio 
		do: [aPortfolio onAccountsDo: [:anAccount | anAccount report: self] ].! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:43:37' prior: 50886386 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	 self reportAccount: aReceptiveAccount 
		do: [aReceptiveAccount onTransactionsDo: [:aTransaction | aTransaction report: self] ].! !
!SimpleTreeStructureReporterPosta methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:43:55' prior: 50886411 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	treeStructure add: leadingTabs,  aPortfolio accountName.
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	
	aPortfolio onAccountsDo: [:anAccount | anAccount report: self ].
	
	numberOfLeadingTabs := numberOfLeadingTabs - 1.! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:45:01' prior: 50886360!
reportAccount: anAccount do: aBlock
	
	 | leadingTabs |
	
	leadingTabs := self leadingTabs.
	treeStructure add: leadingTabs, anAccount accountName.
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	
	aBlock value.
	
	numberOfLeadingTabs := numberOfLeadingTabs - 1.! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:45:22' prior: 50886918 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	self reportAccount: aPortfolio 
		do: [aPortfolio onAccountsDo: [:anAccount | anAccount report: self] ].
	
	treeStructure add: self leadingTabs , '\tBalance = ', aPortfolio balance asString.! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:45:45' prior: 50886927 overrides: 50877169!
reportReceptiveAccount: aReceptiveAccount 
	
	 self reportAccount: aReceptiveAccount 
		do: [aReceptiveAccount onTransactionsDo: [:aTransaction | aTransaction report: self] ].
		
		
	treeStructure add: self leadingTabs, '\tBalance = ', aReceptiveAccount balance asString.! !
!TreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:45:54'!
reportAccount: anAccount do: aBlock
	
	 | leadingTabs |
	
	leadingTabs := self leadingTabs.
	treeStructure add: leadingTabs, anAccount accountName.
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	
	aBlock value.
	
	numberOfLeadingTabs := numberOfLeadingTabs - 1.! !

!methodRemoval: DetailedTreeStructureReporter #reportAccount:do: stamp: 'AM 11/13/2020 20:45:54'!
reportAccount: anAccount do: aBlock
	
	 | leadingTabs |
	
	leadingTabs := self leadingTabs.
	treeStructure add: leadingTabs, anAccount accountName.
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	
	aBlock value.
	
	numberOfLeadingTabs := numberOfLeadingTabs - 1.!
!SimpleTreeStructureReporterPosta methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:46:23' prior: 50886937 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	self reportAccount: aPortfolio
		do:  [:anAccount | anAccount report: self ].! !

!testRun: #AccountSummaryReporterTest #test01EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithEveryTransactionShowsThemInAccountSummaryAffectingBalance stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04AccountSummaryOfEmptyPortfolioOnlyShowsZeroBalance stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01 stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02 stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03 stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04 stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05 stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #NetTransferReporterTest #test02TransfersAffectCorrectlyNetTransferInReceptiveAccount stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #NetTransferReporterTest #test03JustTransfersAffectNetTransfersInReceptiveAccount stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfPortfolioWithReceptiveAccountsIsTheirSumOfNetTransfers stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/13/2020 20:46:40'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioIsZItsName stamp: 'AM 11/13/2020 20:46:40'!
ERROR!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/13/2020 20:46:40'!
ERROR!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/13/2020 20:46:40'!
ERROR!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioIsZItsName stamp: 'AM 11/13/2020 20:46:46'!
ERROR!
!SimpleTreeStructureReporterPosta methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:47:28' prior: 50887013 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	self reportAccount: aPortfolio
		do:  [aPortfolio onAccountsDo: [:anAccount | anAccount report: self] ].! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:48:29'!
addBalanceOf: aPortfolio

	^ treeStructure add: self leadingTabs , '\tBalance = ', aPortfolio balance asString! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:48:29' prior: 50886964 overrides: 50877084!
reportPortfolio: aPortfolio 
	
	self reportAccount: aPortfolio 
		do: [aPortfolio onAccountsDo: [:anAccount | anAccount report: self] ].
	
	self addBalanceOf: aPortfolio.! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:48:42' prior: 50887230!
addBalanceOf: anAccount

	^ treeStructure add: self leadingTabs , '\tBalance = ', anAccount balance asString! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 20:48:50' prior: 50887248!
addBalanceOf: anAccount

	^ treeStructure add: 
		self leadingTabs , '\tBalance = ', anAccount balance asString! !

!testRun: #DetailedTreeStructureReporterTest #test01 stamp: 'AM 11/13/2020 20:50:56'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02 stamp: 'AM 11/13/2020 20:50:56'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03 stamp: 'AM 11/13/2020 20:50:56'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04 stamp: 'AM 11/13/2020 20:50:56'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05 stamp: 'AM 11/13/2020 20:50:56'!
PASSED!

!testRun: #AccountSummaryReporterTest #test01EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithEveryTransactionShowsThemInAccountSummaryAffectingBalance stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04AccountSummaryOfEmptyPortfolioOnlyShowsZeroBalance stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01 stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02 stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03 stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04 stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05 stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #NetTransferReporterTest #test02TransfersAffectCorrectlyNetTransferInReceptiveAccount stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #NetTransferReporterTest #test03JustTransfersAffectNetTransfersInReceptiveAccount stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfPortfolioWithReceptiveAccountsIsTheirSumOfNetTransfers stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/13/2020 20:51:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/13/2020 20:51:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/13/2020 20:51:29'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/13/2020 20:51:29'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioIsZItsName stamp: 'AM 11/13/2020 20:51:29'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/13/2020 20:51:29'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/13/2020 20:51:29'!
PASSED!
!DetailedTreeStructureReporterTest methodsFor: 'tests -- receptive account' stamp: 'AM 11/13/2020 20:52:32'!
test01DetailedTreeStructureReportShowsNameAndBalanceOnEmptyReceptiveAccount

	| aReceptiveAccount aReceptiveAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	
	aReceptiveAccountTreeStructure :=  (DetailedTreeStructureReporter for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'. '\tBalance = 0'}).
	self assert: aReceptiveAccountTreeStructure first equals: 'Cuenta Pepito'.! !

!methodRemoval: DetailedTreeStructureReporterTest #test01 stamp: 'AM 11/13/2020 20:52:32'!
test01

	| aReceptiveAccount aReceptiveAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	
	aReceptiveAccountTreeStructure :=  (DetailedTreeStructureReporter for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'. '\tBalance = 0'}).
	self assert: aReceptiveAccountTreeStructure first equals: 'Cuenta Pepito'.!
!DetailedTreeStructureReporterTest methodsFor: 'tests -- receptive account' stamp: 'AM 11/13/2020 20:53:03'!
test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount

	| aReceptiveAccount aReceptiveAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	
	aReceptiveAccountTreeStructure :=  (DetailedTreeStructureReporter for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'. '\tBalance = 0'}).
	self assert: aReceptiveAccountTreeStructure first equals: 'Cuenta Pepito'.! !

!methodRemoval: DetailedTreeStructureReporterTest #test01DetailedTreeStructureReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/13/2020 20:53:03'!
test01DetailedTreeStructureReportShowsNameAndBalanceOnEmptyReceptiveAccount

	| aReceptiveAccount aReceptiveAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	
	aReceptiveAccountTreeStructure :=  (DetailedTreeStructureReporter for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'. '\tBalance = 0'}).
	self assert: aReceptiveAccountTreeStructure first equals: 'Cuenta Pepito'.!
!DetailedTreeStructureReporterTest methodsFor: 'tests -- receptive account' stamp: 'AM 11/13/2020 20:53:50'!
test02DetailedReportShowsEveryTransactionOnReceptiveAccount

	| aReceptiveAccount aReceptiveAccountTreeStructure anotherReceptiveAccount expectedAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	anotherReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepe'.
	
	Deposit register: 100 on: aReceptiveAccount.
	Withdraw register: 50 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount to: anotherReceptiveAccount for: 100.
	Transfer from: anotherReceptiveAccount to: aReceptiveAccount for: 100.
	
	aReceptiveAccountTreeStructure :=  (DetailedTreeStructureReporter for: aReceptiveAccount) report.
	expectedAccountTreeStructure := OrderedCollection 				with: 'Cuenta Pepito' with: '\tDep�sito por 100' with: '\tExtracci�n por 50' with: '\tSalida por transferencia de 100' with: '\tEntrada por transferencia de 100'  with: '\tBalance = 50'.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: expectedAccountTreeStructure).
	self assert: aReceptiveAccountTreeStructure first equals: expectedAccountTreeStructure first.
	self assert: aReceptiveAccountTreeStructure last equals: expectedAccountTreeStructure last.! !

!methodRemoval: DetailedTreeStructureReporterTest #test02 stamp: 'AM 11/13/2020 20:53:51'!
test02

	| aReceptiveAccount aReceptiveAccountTreeStructure anotherReceptiveAccount expectedAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	anotherReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepe'.
	
	Deposit register: 100 on: aReceptiveAccount.
	Withdraw register: 50 on: aReceptiveAccount.
	Transfer from: aReceptiveAccount to: anotherReceptiveAccount for: 100.
	Transfer from: anotherReceptiveAccount to: aReceptiveAccount for: 100.
	
	aReceptiveAccountTreeStructure :=  (DetailedTreeStructureReporter for: aReceptiveAccount) report.
	expectedAccountTreeStructure := OrderedCollection 				with: 'Cuenta Pepito' with: '\tDep�sito por 100' with: '\tExtracci�n por 50' with: '\tSalida por transferencia de 100' with: '\tEntrada por transferencia de 100'  with: '\tBalance = 50'.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: expectedAccountTreeStructure).
	self assert: aReceptiveAccountTreeStructure first equals: expectedAccountTreeStructure first.
	self assert: aReceptiveAccountTreeStructure last equals: expectedAccountTreeStructure last.!

aaa := ReceptiveAccount named: ''.!

!classRenamed: #SimpleTreeStructureReporterPosta as: #SimpleTreeStructureReporter stamp: 'AM 11/13/2020 20:56:47'!
Smalltalk renameClassNamed: #SimpleTreeStructureReporterPosta as: #SimpleTreeStructureReporter!
!SimpleTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:56:49' prior: 50886737!
test02TreeStructureOfEmptyPortfolioIsZItsName

	| anEmptyPortfolio emptyPortfolioTreeStructure |
	
	anEmptyPortfolio := Portfolio named: 'Portfolio de Pepito'.
	
	emptyPortfolioTreeStructure :=  (SimpleTreeStructureReporter for: anEmptyPortfolio) report.

	self assert:  (emptyPortfolioTreeStructure hasEqualElements: { 'Portfolio de Pepito' } ).! !
!SimpleTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:56:49' prior: 50886752!
test04TreeStructureIsCalculatedRecursivelyInPortfolio

	| agustinPortfolioTreeStructure agustinPortfolio hernanReceptiveAccount nahuelPortfolio |
	
	agustinPortfolio := Portfolio named: 'Portfolio de Agustin'.
	nahuelPortfolio := Portfolio named: 'Portfolio de Nahuel'.
	
	hernanReceptiveAccount := ReceptiveAccount named: 'Cuenta de Hernan'.
	
	agustinPortfolio add: nahuelPortfolio.
	nahuelPortfolio add: hernanReceptiveAccount.
	
	agustinPortfolioTreeStructure :=  (SimpleTreeStructureReporter for: agustinPortfolio) report.

	self assert:  (agustinPortfolioTreeStructure hasEqualElements: { 'Portfolio de Agustin'. '\tPortfolio de Nahuel'. '\t\tCuenta de Hernan'}).
	self assert:   agustinPortfolioTreeStructure first equals: 'Portfolio de Agustin'.
	self assert:   agustinPortfolioTreeStructure last equals: '\t\tCuenta de Hernan'.! !
!SimpleTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:56:49' prior: 50886782!
test03APortfolioWithReceptiveAccountsShowsTreeStructure

	| pepitoPortfolio pepeReceptiveAccount pepoteReceptiveAccount pepitoPortfolioTreeStructure |
	
	pepitoPortfolio := Portfolio named: 'Portfolio de Pepito'.
	
	pepeReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepe'.
	pepoteReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepote'.
	
	pepitoPortfolio add: pepeReceptiveAccount.
	pepitoPortfolio add: pepoteReceptiveAccount.
	
	pepitoPortfolioTreeStructure :=  (SimpleTreeStructureReporter for: pepitoPortfolio) report.

	self assert:  (pepitoPortfolioTreeStructure hasEqualElements: { 'Portfolio de Pepito'. '\tCuenta de Pepe'. '\tCuenta de Pepote'}).
	self assert:   pepitoPortfolioTreeStructure first equals: 'Portfolio de Pepito'.! !
!SimpleTreeStructureReporterTest methodsFor: 'as yet unclassified' stamp: 'AM 11/13/2020 20:56:49' prior: 50886810!
test01AReceptiveAccountShowsItselfOnTreeStructure

	| aReceptiveAccount aReceptiveAccountTreeStructure |
	
	aReceptiveAccount := ReceptiveAccount named: 'Cuenta Pepito'.
	
	aReceptiveAccountTreeStructure :=  (SimpleTreeStructureReporter for: aReceptiveAccount) report.
	
	self assert: (aReceptiveAccountTreeStructure hasEqualElements: {'Cuenta Pepito'}).! !

reporter := SimpleTreeStructureReporter for: a.!

reporter report!

a := ReceptiveAccount named: ''.!

a := ReceptiveAccount named: ''.!

reporter := SimpleTreeStructureReporter for: a.!

reporter report!
!DetailedTreeStructureReporterTest methodsFor: 'tests -- portfolio' stamp: 'AM 11/13/2020 21:00:42'!
test03DetailedReportOnEmptyPortfolioShowsNameAndBalance

	| anEmptyPortfolio portfolioDetailedTreeStructure |
	
	anEmptyPortfolio := Portfolio named: 'Cuenta de Pepe'.
	
	portfolioDetailedTreeStructure := ( DetailedTreeStructureReporter for: anEmptyPortfolio ) report.
	
	self assert: (portfolioDetailedTreeStructure hasEqualElements: { 'Cuenta de Pepe'. '\tBalance = 0' }).
	self assert: portfolioDetailedTreeStructure first equals: 'Cuenta de Pepe'.! !

!methodRemoval: DetailedTreeStructureReporterTest #test03 stamp: 'AM 11/13/2020 21:00:42'!
test03

	| anEmptyPortfolio portfolioDetailedTreeStructure |
	
	anEmptyPortfolio := Portfolio named: 'Cuenta de Pepe'.
	
	portfolioDetailedTreeStructure := ( DetailedTreeStructureReporter for: anEmptyPortfolio ) report.
	
	self assert: (portfolioDetailedTreeStructure hasEqualElements: { 'Cuenta de Pepe'. '\tBalance = 0' }).
	self assert: portfolioDetailedTreeStructure first equals: 'Cuenta de Pepe'.!
!DetailedTreeStructureReporterTest methodsFor: 'tests -- portfolio' stamp: 'AM 11/13/2020 21:01:03'!
test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances

	| pepitoPortfolio pepeReceptiveAccount pepoteReceptiveAccount pepitoPortfolioTreeStructure expectedPortfolioTreeStructure |
	
	pepitoPortfolio := Portfolio named: 'Portfolio de Pepito'.
	
	pepeReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepe'.
	pepoteReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepote'.
	
	pepitoPortfolio add: pepeReceptiveAccount.
	pepitoPortfolio add: pepoteReceptiveAccount.
	
	pepitoPortfolioTreeStructure :=  (DetailedTreeStructureReporter for: pepitoPortfolio) report.
	expectedPortfolioTreeStructure := OrderedCollection with: 'Portfolio de Pepito' with: '\tCuenta de Pepe' with: '\t\tBalance = 0' with: '\tCuenta de Pepote' with: '\t\tBalance = 0' with: '\tBalance = 0'.

	self assert:  pepitoPortfolioTreeStructure equals: expectedPortfolioTreeStructure.! !

!methodRemoval: DetailedTreeStructureReporterTest #test04 stamp: 'AM 11/13/2020 21:01:03'!
test04

	| pepitoPortfolio pepeReceptiveAccount pepoteReceptiveAccount pepitoPortfolioTreeStructure expectedPortfolioTreeStructure |
	
	pepitoPortfolio := Portfolio named: 'Portfolio de Pepito'.
	
	pepeReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepe'.
	pepoteReceptiveAccount := ReceptiveAccount named: 'Cuenta de Pepote'.
	
	pepitoPortfolio add: pepeReceptiveAccount.
	pepitoPortfolio add: pepoteReceptiveAccount.
	
	pepitoPortfolioTreeStructure :=  (DetailedTreeStructureReporter for: pepitoPortfolio) report.
	expectedPortfolioTreeStructure := OrderedCollection with: 'Portfolio de Pepito' with: '\tCuenta de Pepe' with: '\t\tBalance = 0' with: '\tCuenta de Pepote' with: '\t\tBalance = 0' with: '\tBalance = 0'.

	self assert:  pepitoPortfolioTreeStructure equals: expectedPortfolioTreeStructure.!
!DetailedTreeStructureReporterTest methodsFor: 'tests -- portfolio' stamp: 'AM 11/13/2020 21:01:18'!
test05DetailedReportIsRecursiveOnPortfolio

	| agustinPortfolioTreeStructure agustinPortfolio hernanReceptiveAccount nahuelPortfolio expectedPortfolioTreeStructure |
	
	agustinPortfolio := Portfolio named: 'Portfolio de Agustin'.
	nahuelPortfolio := Portfolio named: 'Portfolio de Nahuel'.
	
	hernanReceptiveAccount := ReceptiveAccount named: 'Cuenta de Hernan'.
	
	Deposit register: 100 on: hernanReceptiveAccount.
	
	agustinPortfolio add: nahuelPortfolio.
	nahuelPortfolio add: hernanReceptiveAccount.
	
	agustinPortfolioTreeStructure :=  (DetailedTreeStructureReporter for: agustinPortfolio) report.
	
	expectedPortfolioTreeStructure := OrderedCollection with: 'Portfolio de Agustin' with:  '\tPortfolio de Nahuel' with: '\t\tCuenta de Hernan' with: '\t\t\tDep�sito por 100' with: '\t\t\tBalance = 100' with: '\t\tBalance = 100'.
	expectedPortfolioTreeStructure add: '\tBalance = 100'.
	self assert:  agustinPortfolioTreeStructure equals: expectedPortfolioTreeStructure.! !

!methodRemoval: DetailedTreeStructureReporterTest #test05 stamp: 'AM 11/13/2020 21:01:18'!
test05

	| agustinPortfolioTreeStructure agustinPortfolio hernanReceptiveAccount nahuelPortfolio expectedPortfolioTreeStructure |
	
	agustinPortfolio := Portfolio named: 'Portfolio de Agustin'.
	nahuelPortfolio := Portfolio named: 'Portfolio de Nahuel'.
	
	hernanReceptiveAccount := ReceptiveAccount named: 'Cuenta de Hernan'.
	
	Deposit register: 100 on: hernanReceptiveAccount.
	
	agustinPortfolio add: nahuelPortfolio.
	nahuelPortfolio add: hernanReceptiveAccount.
	
	agustinPortfolioTreeStructure :=  (DetailedTreeStructureReporter for: agustinPortfolio) report.
	
	expectedPortfolioTreeStructure := OrderedCollection with: 'Portfolio de Agustin' with:  '\tPortfolio de Nahuel' with: '\t\tCuenta de Hernan' with: '\t\t\tDep�sito por 100' with: '\t\t\tBalance = 100' with: '\t\tBalance = 100'.
	expectedPortfolioTreeStructure add: '\tBalance = 100'.
	self assert:  agustinPortfolioTreeStructure equals: expectedPortfolioTreeStructure.!
!Reporter methodsFor: 'formatting -- private' stamp: 'AM 11/13/2020 21:13:35'!
formatDeposit: aDeposit

	^ 'Dep�sito por ', aDeposit value asString. ! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 21:14:00' prior: 50886157 overrides: 50877042!
reportDeposit: aDeposit 
	
	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	
	treeStructure add: 
		(leadingTabs, self formatDeposit: aDeposit).! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 21:14:43' prior: 50886214 overrides: 50877275!
reportWithdraw: aWithdraw 

	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	treeStructure add: 
		(leadingTabs, self formatWithdraw: aWithdraw) ! !
!Reporter methodsFor: 'formatting -- private' stamp: 'AM 11/13/2020 21:14:59'!
formatWithdraw: aWithdraw

	^ 'Extracci�n por ', aWithdraw value asString.! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 21:15:40' prior: 50886145 overrides: 50877231!
reportSendingTransferComponent: aSendingTransferComponent 

	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	treeStructure add: 
		(leadingTabs, self formatSendingTransferComponent: aSendingTransferComponent)
		! !
!Reporter methodsFor: 'formatting -- private' stamp: 'AM 11/13/2020 21:16:00'!
formatSendingTransferComponent: aSendingTransferComponent

	^ 'Salida por transferencia de ', aSendingTransferComponent value asString.! !
!Reporter methodsFor: 'formatting -- private' stamp: 'AM 11/13/2020 21:16:55'!
formatReceivingTransferComponent: aReceivingTransferComponent

	^ 'Salida por transferencia de ', aReceivingTransferComponent value asString.! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 21:17:14' prior: 50886202 overrides: 50877133!
reportReceivingTransferComponent: aReceivingTransferComponent 
	
	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	treeStructure add: 
		(leadingTabs, self formatReceivingTransferComponent: aReceivingTransferComponent )! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 21:17:19' prior: 50887943 overrides: 50877133!
reportReceivingTransferComponent: aReceivingTransferComponent 
	
	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	treeStructure add: 
		(leadingTabs, self formatReceivingTransferComponent: aReceivingTransferComponent)! !
!AccountSummaryReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 21:17:38' prior: 50877047 overrides: 50877042!
reportDeposit: aDeposit
	
	accountSummary add: (self formatDeposit: aDeposit)
	
	! !
!AccountSummaryReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 21:17:56' prior: 50877118 overrides: 50877133!
reportReceivingTransferComponent: aReceivingTransferComponent
 
	accountSummary add: (self formatReceivingTransferComponent: aReceivingTransferComponent)
	
	! !
!AccountSummaryReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 21:18:09' prior: 50877223 overrides: 50877231!
reportSendingTransferComponent: aSendingTransferComponent
 
	accountSummary add: (self formatSendingTransferComponent: aSendingTransferComponent)
	
	! !
!AccountSummaryReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 21:18:24' prior: 50877269 overrides: 50877275!
reportWithdraw: aWithdraw

	accountSummary add: (self formatWithdraw: aWithdraw)
	
	
	! !

!testRun: #AccountSummaryReporterTest #test01EmptyReceptiveAccountsSummaryShouldOnlyHaveZeroBalance stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummaryWithAffectedBalance stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithEveryTransactionShowsThemInAccountSummaryAffectingBalance stamp: 'AM 11/13/2020 21:18:32'!
FAILURE!

!testRun: #AccountSummaryReporterTest #test04AccountSummaryOfEmptyPortfolioOnlyShowsZeroBalance stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/13/2020 21:18:32'!
ERROR!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/13/2020 21:18:32'!
ERROR!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #NetTransferReporterTest #test02TransfersAffectCorrectlyNetTransferInReceptiveAccount stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #NetTransferReporterTest #test03JustTransfersAffectNetTransfersInReceptiveAccount stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfPortfolioWithReceptiveAccountsIsTheirSumOfNetTransfers stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersThatAffectThem stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferShouldNotHaveNonPositiveValue stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioIsZItsName stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/13/2020 21:18:32'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/13/2020 21:18:39'!
ERROR!
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 21:19:01' prior: 50887893 overrides: 50877042!
reportDeposit: aDeposit 
	
	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	
	treeStructure add: 
		(leadingTabs, (self formatDeposit: aDeposit) ).! !

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/13/2020 21:19:03'!
ERROR!
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 21:19:16' prior: 50887902 overrides: 50877275!
reportWithdraw: aWithdraw 

	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	treeStructure add: 
		(leadingTabs, (self formatWithdraw: aWithdraw) ) ! !

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/13/2020 21:19:18'!
ERROR!
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 21:20:11' prior: 50887917 overrides: 50877231!
reportSendingTransferComponent: aSendingTransferComponent 

	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	treeStructure add: 
		(leadingTabs, (self formatSendingTransferComponent: aSendingTransferComponent) )
		! !

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/13/2020 21:20:12'!
ERROR!
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/13/2020 21:22:40' prior: 50887955 overrides: 50877133!
reportReceivingTransferComponent: aReceivingTransferComponent 
	
	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	treeStructure add: 
		(leadingTabs, (self formatReceivingTransferComponent: aReceivingTransferComponent))! !

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/13/2020 21:22:47'!
FAILURE!

----QUIT----(13 November 2020 21:25:09) CuisUniversity-4384.image priorSource: 17723901!

----STARTUP---- (14 November 2020 10:26:08) as /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/imagenportfolio2/CuisUniversity-4384.image!


!classRemoval: #Transfer stamp: 'AM 11/14/2020 10:26:25'!
Object subclass: #Transfer
	instanceVariableNames: 'value sending receiving'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #SimpleTreeStructureReporter stamp: 'AM 11/14/2020 10:26:27'!
TreeStructureReporter subclass: #SimpleTreeStructureReporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #DetailedTreeStructureReporter stamp: 'AM 11/14/2020 10:26:28'!
TreeStructureReporter subclass: #DetailedTreeStructureReporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #TreeStructureReporter stamp: 'AM 11/14/2020 10:26:29'!
Reporter subclass: #TreeStructureReporter
	instanceVariableNames: 'numberOfLeadingTabs treeStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #NetTransferReporter stamp: 'AM 11/14/2020 10:26:30'!
Reporter subclass: #NetTransferReporter
	instanceVariableNames: 'netTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #AccountSummaryReporter stamp: 'AM 11/14/2020 10:26:32'!
Reporter subclass: #AccountSummaryReporter
	instanceVariableNames: 'accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #Reporter stamp: 'AM 11/14/2020 10:26:33'!
Object subclass: #Reporter
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #Withdraw stamp: 'AM 11/14/2020 10:26:35'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #SendingTransferComponent stamp: 'AM 11/14/2020 10:26:36'!
TransferComponent subclass: #SendingTransferComponent
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #ReceivingTransferComponent stamp: 'AM 11/14/2020 10:26:38'!
TransferComponent subclass: #ReceivingTransferComponent
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #TransferComponent stamp: 'AM 11/14/2020 10:26:39'!
AccountTransaction subclass: #TransferComponent
	instanceVariableNames: 'receptiveAccount transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #Deposit stamp: 'AM 11/14/2020 10:26:40'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #AccountTransaction stamp: 'AM 11/14/2020 10:26:42'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #ReceptiveAccount stamp: 'AM 11/14/2020 10:26:43'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions transfer name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #Portfolio stamp: 'AM 11/14/2020 10:26:44'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents accountName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #Account stamp: 'AM 11/14/2020 10:26:46'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #SimpleTreeStructureReporterTest stamp: 'AM 11/14/2020 10:26:47'!
TestCase subclass: #SimpleTreeStructureReporterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #ReceptiveAccountTest stamp: 'AM 11/14/2020 10:26:49'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #PortfolioTest stamp: 'AM 11/14/2020 10:26:50'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #NetTransferReporterTest stamp: 'AM 11/14/2020 10:26:52'!
TestCase subclass: #NetTransferReporterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #DetailedTreeStructureReporterTest stamp: 'AM 11/14/2020 10:26:53'!
TestCase subclass: #DetailedTreeStructureReporterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #AccountSummaryReporterTest stamp: 'AM 11/14/2020 10:26:54'!
TestCase subclass: #AccountSummaryReporterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

----End fileIn of /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/isw1-2c2020-ejercicios/19-Portfolio2/Portfolio.st----!

!methodRemoval: Portfolio #accounts stamp: 'AM 11/14/2020 10:27:36'!
accounts
	^ accounts copy!

!testRun: #AccountSummaryReporterTest #test01EmptyAccountSummaryShouldOnlyPrintBalance stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummary stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithMoreThanOneTransactionShowsThemInAccountSummary stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04EmptyPortfolioBalanceShouldOnlyPrintBalance stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #NetTransferReporterTest #test02NetTransferIsAffectedCorrectlyInReceptiveAccount stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #NetTransferReporterTest #test03NetTransferIsOnlyAffectedByTransfersInReceptiveAccount stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfComposedPortfolioIsSumOfNetTransfers stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/14/2020 10:30:24'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/14/2020 10:30:24'!
PASSED!
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/14/2020 10:34:10' prior: 50890239 overrides: 50890002!
reportReceivingTransferComponent: aReceivingTransferComponent 
	
	treeStructure add: 
		(self leadingTabs, (self formatReceivingTransferComponent: aReceivingTransferComponent))! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/14/2020 10:34:27' prior: 50890262 overrides: 50890013!
reportSendingTransferComponent: aSendingTransferComponent 

	treeStructure add: 
		(self leadingTabs, (self formatSendingTransferComponent: aSendingTransferComponent) )
		! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/14/2020 10:34:36' prior: 50890273 overrides: 50890026!
reportWithdraw: aWithdraw 

	treeStructure add: 
		(self leadingTabs, (self formatWithdraw: aWithdraw) ) ! !
!SimpleTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/14/2020 10:34:47' prior: 50890303 overrides: 50890008!
reportReceptiveAccount: aReceptiveAccount 	
	
	treeStructure add: 
		(self leadingTabs, aReceptiveAccount accountName)! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/14/2020 10:35:08' prior: 50890250 overrides: 50890008!
reportReceptiveAccount: aReceptiveAccount 
	
	 self reportAccountWithTabs: aReceptiveAccount evaluating: [ 	self reportTransactionsRecursively: aReceptiveAccount ].
		
	treeStructure add: 
		(self leadingTabs , '\t', (self formatBalance: aReceptiveAccount))! !
!AccountSummaryReporter methodsFor: 'reporting -- private' stamp: 'AM 11/14/2020 10:35:39' prior: 50890079 overrides: 50890002!
reportReceivingTransferComponent: aReceivingTransferComponent
 
	accountSummary add: 
		(self formatReceivingTransferComponent: aReceivingTransferComponent)
	
	! !
!AccountSummaryReporter methodsFor: 'reporting -- private' stamp: 'AM 11/14/2020 10:35:46' prior: 50890065 overrides: 50889992!
reportDeposit: aDeposit
	
	accountSummary add: 
		(self formatDeposit: aDeposit)
	
	! !
!AccountSummaryReporter methodsFor: 'reporting -- private' stamp: 'AM 11/14/2020 10:35:51' prior: 50890104 overrides: 50890026!
reportWithdraw: aWithdraw

	accountSummary add:
		(self formatWithdraw: aWithdraw)
	
	
	! !
!AccountSummaryReporter methodsFor: 'reporting -- private' stamp: 'AM 11/14/2020 10:35:55' prior: 50890095 overrides: 50890013!
reportSendingTransferComponent: aSendingTransferComponent
 
	accountSummary add: 
	(self formatSendingTransferComponent: aSendingTransferComponent)
	
	! !
!AccountSummaryReporter methodsFor: 'reporting -- private' stamp: 'AM 11/14/2020 10:35:56' prior: 50890664 overrides: 50890013!
reportSendingTransferComponent: aSendingTransferComponent
 
	accountSummary add: 
		(self formatSendingTransferComponent: aSendingTransferComponent)
	
	! !

----QUIT----(14 November 2020 10:38:15) CuisUniversity-4384.image priorSource: 17811768!

----STARTUP---- (15 November 2020 21:04:02) as /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/imagenportfolio2/CuisUniversity-4384.image!

!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/15/2020 21:07:13'!
test15
	
	| unnamedReceptiveAccount |
	unnamedReceptiveAccount := ReceptiveAccount new.
	
	self deny: unnamedReceptiveAccount isNamed. 
	self should: [ unnamedReceptiveAccount accountName ]
		raise: Error
		withMessageText: Account accountHasNoNameErrorDescription! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/15/2020 21:07:21' prior: 50890688!
test15
	
	| unnamedReceptiveAccount |
	
	unnamedReceptiveAccount := ReceptiveAccount new.
	
	self deny: unnamedReceptiveAccount isNamed. 
	self should: [ unnamedReceptiveAccount accountName ]
		raise: Error
		withMessageText: Account accountHasNoNameErrorDescription! !

!testRun: #ReceptiveAccountTest #test15 stamp: 'AM 11/15/2020 21:07:31'!
ERROR!
!Account methodsFor: 'testing' stamp: 'AM 11/15/2020 21:07:54'!
isNamed
	self shouldBeImplemented.! !
!Account methodsFor: 'testing' stamp: 'AM 11/15/2020 21:08:03' prior: 50890713!
isNamed
	
	self subclassResponsibility.! !

!testRun: #ReceptiveAccountTest #test15 stamp: 'AM 11/15/2020 21:08:04'!
ERROR!
!ReceptiveAccount methodsFor: 'testing' stamp: 'AM 11/15/2020 21:08:13' overrides: 50890717!
isNamed
	self shouldBeImplemented.! !

!classDefinition: #ReceptiveAccount category: 'Portfolio' stamp: 'AM 11/15/2020 21:08:22'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions transfer name isNamed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!ReceptiveAccount methodsFor: 'testing' stamp: 'AM 11/15/2020 21:08:19' prior: 50890724 overrides: 50890717!
isNamed
	
	^ isNamed! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'AM 11/15/2020 21:09:04' prior: 50889653 overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'AM 11/15/2020 21:09:39' prior: 50890737 overrides: 50890717!
isNamed
	
	^ name isNotNil! !

!testRun: #ReceptiveAccountTest #test15 stamp: 'AM 11/15/2020 21:09:42'!
ERROR!

 name isNotNil!
!ReceptiveAccount methodsFor: 'testing' stamp: 'AM 11/15/2020 21:10:26' prior: 50890748 overrides: 50890717!
isNamed
	
	^ name isNil not! !

!testRun: #ReceptiveAccountTest #test15 stamp: 'AM 11/15/2020 21:10:27'!
ERROR!
!Account class methodsFor: 'error descriptions' stamp: 'AM 11/15/2020 21:10:38'!
accountHasNoNameErrorDescription
	self shouldBeImplemented.! !
!Account class methodsFor: 'error descriptions' stamp: 'AM 11/15/2020 21:10:56' prior: 50890763!
accountHasNoNameErrorDescription
	
	^ 'Account has no name.'! !

!testRun: #ReceptiveAccountTest #test15 stamp: 'AM 11/15/2020 21:10:58'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'AM 11/15/2020 21:11:44' prior: 50889476!
accountName
	^ accountName ifNil: [ ^ self error: self class accountHasNoNameErrorDescription ]! !
!Portfolio methodsFor: 'accessing' stamp: 'AM 11/15/2020 21:11:46' prior: 50890776!
accountName
	accountName ifNil: [ ^ self error: self class accountHasNoNameErrorDescription ]! !
!Portfolio methodsFor: 'accessing' stamp: 'AM 11/15/2020 21:11:53' prior: 50890782!
accountName
	accountName ifNil: [ ^ self error: self class accountHasNoNameErrorDescription ].
	^accountName.! !
!Portfolio methodsFor: 'accessing' stamp: 'AM 11/15/2020 21:12:07' prior: 50890788!
accountName
	^ accountName! !
!ReceptiveAccount methodsFor: 'accessing' stamp: 'AM 11/15/2020 21:12:28' prior: 50889638!
accountName
	name ifNil: [ ^ self error: self class accountHasNoNameErrorDescription ].
	^name.! !

!testRun: #ReceptiveAccountTest #test15 stamp: 'AM 11/15/2020 21:12:34'!
FAILURE!

!testRun: #ReceptiveAccountTest #test15 stamp: 'AM 11/15/2020 21:13:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/15/2020 21:13:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/15/2020 21:13:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/15/2020 21:13:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/15/2020 21:13:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/15/2020 21:13:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/15/2020 21:13:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/15/2020 21:13:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/15/2020 21:13:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/15/2020 21:13:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/15/2020 21:13:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/15/2020 21:13:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/15/2020 21:13:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/15/2020 21:13:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/15/2020 21:13:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'AM 11/15/2020 21:13:17'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/15/2020 21:13:41'!
test15UnnamedReceptiveAccountShouldSignalOnAccessingName
	
	| unnamedReceptiveAccount |
	
	unnamedReceptiveAccount := ReceptiveAccount new.
	
	self deny: unnamedReceptiveAccount isNamed. 
	self should: [ unnamedReceptiveAccount accountName ]
		raise: Error
		withMessageText: Account accountHasNoNameErrorDescription! !

!methodRemoval: ReceptiveAccountTest #test15 stamp: 'AM 11/15/2020 21:13:42'!
test15
	
	| unnamedReceptiveAccount |
	
	unnamedReceptiveAccount := ReceptiveAccount new.
	
	self deny: unnamedReceptiveAccount isNamed. 
	self should: [ unnamedReceptiveAccount accountName ]
		raise: Error
		withMessageText: Account accountHasNoNameErrorDescription!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/15/2020 21:14:24'!
test16NamedReceptiveAccountIsNamedAndRetrievesItsName
	
	| unnamedReceptiveAccount |
	
	unnamedReceptiveAccount := ReceptiveAccount new.
	
	self deny: unnamedReceptiveAccount isNamed. 
	self should: [ unnamedReceptiveAccount accountName ]
		raise: Error
		withMessageText: Account accountHasNoNameErrorDescription! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/15/2020 21:14:57' prior: 50890890!
test16NamedReceptiveAccountIsNamedAndRetrievesItsName
	
	| unnamedReceptiveAccount |
	
	unnamedReceptiveAccount := ReceptiveAccount named: 'Cuenta'.
	
	self assert: unnamedReceptiveAccount isNamed. 
	self assert: unnamedReceptiveAccount accountName equals: 'Cuenta'! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/15/2020 21:15:02' prior: 50890903!
test16NamedReceptiveAccountIsNamedAndRetrievesItsName
	
	| namedReceptiveAccount |
	
	namedReceptiveAccount := ReceptiveAccount named: 'Cuenta'.
	
	self assert: namedReceptiveAccount isNamed. 
	self assert: namedReceptiveAccount accountName equals: 'Cuenta'! !

!testRun: #ReceptiveAccountTest #test16NamedReceptiveAccountIsNamedAndRetrievesItsName stamp: 'AM 11/15/2020 21:15:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/15/2020 21:15:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/15/2020 21:15:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/15/2020 21:15:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/15/2020 21:15:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/15/2020 21:15:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/15/2020 21:15:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/15/2020 21:15:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/15/2020 21:15:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/15/2020 21:15:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/15/2020 21:15:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/15/2020 21:15:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/15/2020 21:15:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/15/2020 21:15:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/15/2020 21:15:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test15UnnamedReceptiveAccountShouldSignalOnAccessingName stamp: 'AM 11/15/2020 21:15:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test16NamedReceptiveAccountIsNamedAndRetrievesItsName stamp: 'AM 11/15/2020 21:15:05'!
PASSED!

!methodRemoval: ReceptiveAccountTest #test16NamedReceptiveAccountIsNamedAndRetrievesItsName stamp: 'AM 11/15/2020 21:15:13'!
test16NamedReceptiveAccountIsNamedAndRetrievesItsName
	
	| namedReceptiveAccount |
	
	namedReceptiveAccount := ReceptiveAccount named: 'Cuenta'.
	
	self assert: namedReceptiveAccount isNamed. 
	self assert: namedReceptiveAccount accountName equals: 'Cuenta'!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/15/2020 21:15:44'!
test16UnnamedPortfolioShouldSignalOnAccessingName
	
	| unnamedReceptiveAccount |
	
	unnamedReceptiveAccount := ReceptiveAccount new.
	
	self deny: unnamedReceptiveAccount isNamed. 
	self should: [ unnamedReceptiveAccount accountName ]
		raise: Error
		withMessageText: Account accountHasNoNameErrorDescription! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/15/2020 21:15:57' prior: 50891004!
test16UnnamedPortfolioShouldSignalOnAccessingName
	
	| unnamedPortfolio |
	
	unnamedPortfolio := ReceptiveAccount new.
	
	self deny: unnamedPortfolio isNamed. 
	self should: [ unnamedPortfolio accountName ]
		raise: Error
		withMessageText: Account accountHasNoNameErrorDescription! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/15/2020 21:16:00' prior: 50891017!
test16UnnamedPortfolioShouldSignalOnAccessingName
	
	| unnamedPortfolio |
	
	unnamedPortfolio := Portfolio new.
	
	self deny: unnamedPortfolio isNamed. 
	self should: [ unnamedPortfolio accountName ]
		raise: Error
		withMessageText: Account accountHasNoNameErrorDescription! !

!testRun: #PortfolioTest #test16UnnamedPortfolioShouldSignalOnAccessingName stamp: 'AM 11/15/2020 21:16:04'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'AM 11/15/2020 21:16:12' overrides: 50890717!
isNamed
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'testing' stamp: 'AM 11/15/2020 21:16:24' prior: 50891045 overrides: 50890717!
isNamed
	
	^ accountName isNil not! !

!testRun: #PortfolioTest #test16UnnamedPortfolioShouldSignalOnAccessingName stamp: 'AM 11/15/2020 21:16:25'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'AM 11/15/2020 21:17:06' prior: 50890795!
accountName
	accountName ifNil: [ ^ self error: self class accountHasNoNameErrorDescription ].
	^ accountName! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/15/2020 21:17:09'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/15/2020 21:17:09'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/15/2020 21:17:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/15/2020 21:17:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/15/2020 21:17:09'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/15/2020 21:17:09'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/15/2020 21:17:09'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/15/2020 21:17:09'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/15/2020 21:17:09'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/15/2020 21:17:09'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/15/2020 21:17:09'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/15/2020 21:17:09'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/15/2020 21:17:09'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/15/2020 21:17:09'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/15/2020 21:17:09'!
PASSED!

!testRun: #PortfolioTest #test16UnnamedPortfolioShouldSignalOnAccessingName stamp: 'AM 11/15/2020 21:17:09'!
PASSED!

!testRun: #AccountSummaryReporterTest #test01EmptyAccountSummaryShouldOnlyPrintBalance stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummary stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithMoreThanOneTransactionShowsThemInAccountSummary stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04EmptyPortfolioBalanceShouldOnlyPrintBalance stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #NetTransferReporterTest #test02NetTransferIsAffectedCorrectlyInReceptiveAccount stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #NetTransferReporterTest #test03NetTransferIsOnlyAffectedByTransfersInReceptiveAccount stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfComposedPortfolioIsSumOfNetTransfers stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #PortfolioTest #test16UnnamedPortfolioShouldSignalOnAccessingName stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test15UnnamedReceptiveAccountShouldSignalOnAccessingName stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/15/2020 21:17:13'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/15/2020 21:17:13'!
PASSED!
!TreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/15/2020 21:18:20' prior: 50890196!
reportAccountWithTabs: anAccount evaluating: aBlock
		
	treeStructure add: (self leadingTabs, self formatAccount: anAccount).
	
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	
	aBlock value.
	
	numberOfLeadingTabs := numberOfLeadingTabs - 1.! !
!Reporter methodsFor: 'formatting -- private' stamp: 'AM 11/15/2020 21:21:41'!
formatPortfolio: aPortfolio

	^ [ aPortfolio accountName ]
		on: Error
		do: [ 'Portfolio' ] ! !
!Reporter methodsFor: 'formatting -- private' stamp: 'AM 11/15/2020 21:22:00'!
formatReceptiveAccount: aReceptiveAccount

	^ [ aReceptiveAccount accountName ]
		on: Error
		do: [ 'Cuenta corriente' ] ! !
!TreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/15/2020 21:23:02' prior: 50891337!
reportAccountWithTabs: anAccount evaluating: aBlock
		
	treeStructure add: (self leadingTabs,  anAccount accountName).
	
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	
	aBlock value.
	
	numberOfLeadingTabs := numberOfLeadingTabs - 1.! !
!SimpleTreeStructureReporterTest methodsFor: 'tests -- receptive account' stamp: 'AM 11/15/2020 21:25:33'!
test05UnnamedReceptiveAccountShouldHaveDefaultName

	| aSimpleTreeReporter unnamedReceptiveAccount |
	unnamedReceptiveAccount := ReceptiveAccount new.
	
	aSimpleTreeReporter := SimpleTreeStructureReporter for: unnamedReceptiveAccount.
	
	

	! !
!SimpleTreeStructureReporterTest methodsFor: 'tests -- receptive account' stamp: 'AM 11/15/2020 21:26:54' prior: 50891373!
test05UnnamedReceptiveAccountShouldHaveDefaultName

	| aSimpleTreeReporter unnamedReceptiveAccount |
	unnamedReceptiveAccount := ReceptiveAccount new.
	
	aSimpleTreeReporter := SimpleTreeStructureReporter for: unnamedReceptiveAccount.
	
	self assert: (aSimpleTreeReporter report hasEqualElements: { 'Cuenta' })! !

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShouldHaveDefaultName stamp: 'AM 11/15/2020 21:26:56'!
ERROR!
!SimpleTreeStructureReporterTest methodsFor: 'tests -- receptive account' stamp: 'AM 11/15/2020 21:27:01' prior: 50891385!
test05UnnamedReceptiveAccountShouldHaveDefaultName

	| aSimpleTreeReporter unnamedReceptiveAccount |
	unnamedReceptiveAccount := ReceptiveAccount new.
	
	aSimpleTreeReporter := SimpleTreeStructureReporter for: unnamedReceptiveAccount.
	
	self assert: (aSimpleTreeReporter report hasEqualElements: { 'Cuenta corriente' })! !

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShouldHaveDefaultName stamp: 'AM 11/15/2020 21:27:05'!
ERROR!
!SimpleTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/15/2020 21:27:26' prior: 50890618 overrides: 50890008!
reportReceptiveAccount: aReceptiveAccount 	
	
	treeStructure add: 
		(self leadingTabs, self format: aReceptiveAccount )! !

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShouldHaveDefaultName stamp: 'AM 11/15/2020 21:27:27'!
ERROR!
!SimpleTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/15/2020 21:27:39' prior: 50891422 overrides: 50890008!
reportReceptiveAccount: aReceptiveAccount 	
	
	treeStructure add: 
		(self leadingTabs, (self format: aReceptiveAccount ))! !

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/15/2020 21:27:41'!
ERROR!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/15/2020 21:27:41'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/15/2020 21:27:41'!
ERROR!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/15/2020 21:27:41'!
ERROR!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShouldHaveDefaultName stamp: 'AM 11/15/2020 21:27:41'!
ERROR!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShouldHaveDefaultName stamp: 'AM 11/15/2020 21:27:44'!
ERROR!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShouldHaveDefaultName stamp: 'AM 11/15/2020 21:27:51'!
ERROR!
!SimpleTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/15/2020 21:28:02' prior: 50891435 overrides: 50890008!
reportReceptiveAccount: aReceptiveAccount 	
	
	treeStructure add: 
		(self leadingTabs, (self formatReceptiveAccount: aReceptiveAccount ))! !

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShouldHaveDefaultName stamp: 'AM 11/15/2020 21:28:04'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/15/2020 21:28:04'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/15/2020 21:28:04'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/15/2020 21:28:04'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/15/2020 21:28:04'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShouldHaveDefaultName stamp: 'AM 11/15/2020 21:28:04'!
PASSED!
!SimpleTreeStructureReporterTest methodsFor: 'tests -- portfolio' stamp: 'AM 11/15/2020 21:28:31'!
test06UnnamedPortfolioIsShownWithDefaultName! !
!SimpleTreeStructureReporterTest methodsFor: 'tests -- portfolio' stamp: 'AM 11/15/2020 21:29:11' prior: 50891508!
test06UnnamedPortfolioIsShownWithDefaultName

	| simpleTreeStructureReporter unnamedPortfolio |
	unnamedPortfolio := Portfolio new.
	
	simpleTreeStructureReporter := SimpleTreeStructureReporter for: unnamedPortfolio! !
!SimpleTreeStructureReporterTest methodsFor: 'tests -- portfolio' stamp: 'AM 11/15/2020 21:29:35' prior: 50891514!
test06UnnamedPortfolioIsShownWithDefaultName

	| simpleTreeStructureReporter unnamedPortfolio |
	unnamedPortfolio := Portfolio new.
	
	simpleTreeStructureReporter := SimpleTreeStructureReporter for: unnamedPortfolio.
	
	self assert: (simpleTreeStructureReporter report hasEqualElements: { 'Portfolio' })! !

----STARTUP---- (15 November 2020 23:52:40) as /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/imagenportfolio2TEST/CuisUniversity-4384.image!


!classRemoval: #Transfer stamp: 'AM 11/15/2020 23:53:37'!
Object subclass: #Transfer
	instanceVariableNames: 'value sending receiving'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #SimpleTreeStructureReporter stamp: 'AM 11/15/2020 23:53:38'!
TreeStructureReporter subclass: #SimpleTreeStructureReporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #DetailedTreeStructureReporter stamp: 'AM 11/15/2020 23:53:39'!
TreeStructureReporter subclass: #DetailedTreeStructureReporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #TreeStructureReporter stamp: 'AM 11/15/2020 23:53:41'!
Reporter subclass: #TreeStructureReporter
	instanceVariableNames: 'numberOfLeadingTabs treeStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #NetTransferReporter stamp: 'AM 11/15/2020 23:53:42'!
Reporter subclass: #NetTransferReporter
	instanceVariableNames: 'netTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #AccountSummaryReporter stamp: 'AM 11/15/2020 23:53:43'!
Reporter subclass: #AccountSummaryReporter
	instanceVariableNames: 'accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #Reporter stamp: 'AM 11/15/2020 23:53:44'!
Object subclass: #Reporter
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #Withdraw stamp: 'AM 11/15/2020 23:53:46'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #SendingTransferComponent stamp: 'AM 11/15/2020 23:53:47'!
TransferComponent subclass: #SendingTransferComponent
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #ReceivingTransferComponent stamp: 'AM 11/15/2020 23:53:48'!
TransferComponent subclass: #ReceivingTransferComponent
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #TransferComponent stamp: 'AM 11/15/2020 23:53:49'!
AccountTransaction subclass: #TransferComponent
	instanceVariableNames: 'receptiveAccount transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #Deposit stamp: 'AM 11/15/2020 23:53:51'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #AccountTransaction stamp: 'AM 11/15/2020 23:53:52'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #ReceptiveAccount stamp: 'AM 11/15/2020 23:53:53'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions transfer name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #Portfolio stamp: 'AM 11/15/2020 23:53:55'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents accountName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #Account stamp: 'AM 11/15/2020 23:53:56'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #SimpleTreeStructureReporterTest stamp: 'AM 11/15/2020 23:53:57'!
TestCase subclass: #SimpleTreeStructureReporterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #ReceptiveAccountTest stamp: 'AM 11/15/2020 23:53:59'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #PortfolioTest stamp: 'AM 11/15/2020 23:54:00'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #NetTransferReporterTest stamp: 'AM 11/15/2020 23:54:02'!
TestCase subclass: #NetTransferReporterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #DetailedTreeStructureReporterTest stamp: 'AM 11/15/2020 23:54:03'!
TestCase subclass: #DetailedTreeStructureReporterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #AccountSummaryReporterTest stamp: 'AM 11/15/2020 23:54:04'!
TestCase subclass: #AccountSummaryReporterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

----End fileIn of /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/isw1-2c2020-ejercicios/19-Portfolio2/PortfolioIsNamed.st----!
!TreeStructureReporter methodsFor: 'formatting -- private' stamp: 'AM 11/15/2020 23:56:33' prior: 50892704!
formatName: aPortfolio
	
	[ aPortfolio accountName ] on: Error do: [ 'Cuenta sin nombre'].
	^ aPortfolio accountName.! !
!TreeStructureReporter methodsFor: 'formatting -- private' stamp: 'AM 11/15/2020 23:56:39' prior: 50892914!
formatName: aPortfolio
	
	^ [ aPortfolio accountName ] on: Error do: [ 'Cuenta sin nombre'].
! !

!testRun: #AccountSummaryReporterTest #test01EmptyAccountSummaryShouldOnlyPrintBalance stamp: 'AM 11/15/2020 23:56:45'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummary stamp: 'AM 11/15/2020 23:56:45'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithMoreThanOneTransactionShowsThemInAccountSummary stamp: 'AM 11/15/2020 23:56:45'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04EmptyPortfolioBalanceShouldOnlyPrintBalance stamp: 'AM 11/15/2020 23:56:45'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/15/2020 23:56:45'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/15/2020 23:56:45'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/15/2020 23:56:45'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/15/2020 23:56:45'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/15/2020 23:56:45'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/15/2020 23:56:45'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/15/2020 23:56:45'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedAccountShowsDefaultName stamp: 'AM 11/15/2020 23:56:45'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #NetTransferReporterTest #test02NetTransferIsAffectedCorrectlyInReceptiveAccount stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #NetTransferReporterTest #test03NetTransferIsOnlyAffectedByTransfersInReceptiveAccount stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfComposedPortfolioIsSumOfNetTransfers stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #PortfolioTest #test16NamedPortfolioShouldKnowItsName stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #PortfolioTest #test16UnnamedPortfolioShouldHaveDefaultName stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #PortfolioTest #test17UnnamedPortfolioShouldHaveDefaultName stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test16UnnamedReceptiveAccountShouldHaveDefaultName stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/15/2020 23:56:46'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedAccountShowsDefaultName stamp: 'AM 11/15/2020 23:56:46'!
PASSED!
!TreeStructureReporter methodsFor: 'formatting -- private' stamp: 'AM 11/15/2020 23:56:52' prior: 50892922!
formatName: aPortfolio
	
	^ [ aPortfolio accountName ] 
		on: Error 
		do: [ 'Cuenta sin nombre'].
! !

!testRun: #AccountSummaryReporterTest #test01EmptyAccountSummaryShouldOnlyPrintBalance stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummary stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithMoreThanOneTransactionShowsThemInAccountSummary stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04EmptyPortfolioBalanceShouldOnlyPrintBalance stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedAccountShowsDefaultName stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #NetTransferReporterTest #test02NetTransferIsAffectedCorrectlyInReceptiveAccount stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #NetTransferReporterTest #test03NetTransferIsOnlyAffectedByTransfersInReceptiveAccount stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfComposedPortfolioIsSumOfNetTransfers stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #PortfolioTest #test16NamedPortfolioShouldKnowItsName stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #PortfolioTest #test16UnnamedPortfolioShouldHaveDefaultName stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #PortfolioTest #test17UnnamedPortfolioShouldHaveDefaultName stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test16UnnamedReceptiveAccountShouldHaveDefaultName stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedAccountShowsDefaultName stamp: 'AM 11/15/2020 23:56:57'!
PASSED!

!methodRemoval: PortfolioTest #test16UnnamedPortfolioShouldHaveDefaultName stamp: 'AM 11/15/2020 23:57:59'!
test16UnnamedPortfolioShouldHaveDefaultName
	
	| aReceptiveAccount |
	
	aReceptiveAccount := ReceptiveAccount new.
	
	self assert: aReceptiveAccount isNamed not.

	self should: [aReceptiveAccount accountName]  
	raise: Error
	withMessageText: ReceptiveAccount canNotRetrieveNameOfUnnamedAccountErrorDescription.
	!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/15/2020 23:58:13' prior: 50891573!
test17UnnamedPortfolioShouldHaveDefaultName
	
	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio isNamed not.

	self should: [portfolio accountName]  
		raise: Error
		withMessageText: Portfolio canNotRetrieveNameOfUnnamedPortfolioErrorDescription
	! !
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/15/2020 23:58:22' prior: 50893405!
test17UnnamedPortfolioShouldHaveDefaultName
	
	| portfolio |
	
	portfolio := Portfolio new.
	
	self deny: portfolio isNamed.

	self should: [portfolio accountName]  
		raise: Error
		withMessageText: Portfolio canNotRetrieveNameOfUnnamedPortfolioErrorDescription
	! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/15/2020 23:58:56' prior: 50891784!
test16UnnamedReceptiveAccountShouldHaveDefaultName
	
	| aReceptiveAccount |
	
	aReceptiveAccount := ReceptiveAccount new.
	
	self deny: aReceptiveAccount isNamed.

	self should: [aReceptiveAccount accountName]  
	raise: Error
	withMessageText: ReceptiveAccount canNotRetrieveNameOfUnnamedAccountErrorDescription.
	
	
	
		! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/15/2020 23:59:00' prior: 50893429!
test16UnnamedReceptiveAccountShouldHaveDefaultName
	
	| aReceptiveAccount |
	
	aReceptiveAccount := ReceptiveAccount new.
	
	self deny: aReceptiveAccount isNamed.

	self should: [aReceptiveAccount accountName]  
		raise: Error
		withMessageText: ReceptiveAccount canNotRetrieveNameOfUnnamedAccountErrorDescription.
	
	
	
		! !

!testRun: #ReceptiveAccountTest #test16UnnamedReceptiveAccountShouldHaveDefaultName stamp: 'AM 11/15/2020 23:59:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/15/2020 23:59:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/15/2020 23:59:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/15/2020 23:59:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/15/2020 23:59:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/15/2020 23:59:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/15/2020 23:59:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/15/2020 23:59:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/15/2020 23:59:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/15/2020 23:59:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/15/2020 23:59:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/15/2020 23:59:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/15/2020 23:59:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/15/2020 23:59:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/15/2020 23:59:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/15/2020 23:59:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test16UnnamedReceptiveAccountShouldHaveDefaultName stamp: 'AM 11/15/2020 23:59:02'!
PASSED!

!testRun: #AccountSummaryReporterTest #test01EmptyAccountSummaryShouldOnlyPrintBalance stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummary stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithMoreThanOneTransactionShowsThemInAccountSummary stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04EmptyPortfolioBalanceShouldOnlyPrintBalance stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedAccountShowsDefaultName stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #NetTransferReporterTest #test02NetTransferIsAffectedCorrectlyInReceptiveAccount stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #NetTransferReporterTest #test03NetTransferIsOnlyAffectedByTransfersInReceptiveAccount stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfComposedPortfolioIsSumOfNetTransfers stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #PortfolioTest #test16NamedPortfolioShouldKnowItsName stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #PortfolioTest #test17UnnamedPortfolioShouldHaveDefaultName stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test16UnnamedReceptiveAccountShouldHaveDefaultName stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/15/2020 23:59:06'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedAccountShowsDefaultName stamp: 'AM 11/15/2020 23:59:06'!
PASSED!
!TreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/16/2020 00:00:53'!
reportAccountWithTabs: anAccount formatWith: withFormat evaluating: aBlock
		
	treeStructure add: (self leadingTabs, (self formatName: anAccount)).
	
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	
	aBlock value.
	
	numberOfLeadingTabs := numberOfLeadingTabs - 1.! !

!methodRemoval: TreeStructureReporter #reportAccountWithTabs:evaluating: stamp: 'AM 11/16/2020 00:00:54'!
reportAccountWithTabs: anAccount evaluating: aBlock
		
	treeStructure add: (self leadingTabs, (self formatName: anAccount)).
	
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	
	aBlock value.
	
	numberOfLeadingTabs := numberOfLeadingTabs - 1.!
!TreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/16/2020 00:01:03' prior: 50893746!
reportAccountWithTabs: anAccount formatWith: formatForAccount evaluating: aBlock
		
	treeStructure add: (self leadingTabs, (self formatName: anAccount)).
	
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	
	aBlock value.
	
	numberOfLeadingTabs := numberOfLeadingTabs - 1.! !
!TreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/16/2020 00:01:07' prior: 50893769!
reportAccountWithTabs: anAccount formatWith: formatForAccount evaluating: aBlock
		
	treeStructure add: (self leadingTabs, formatForAccount).
	
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	
	aBlock value.
	
	numberOfLeadingTabs := numberOfLeadingTabs - 1.! !
!SimpleTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/16/2020 00:01:37' prior: 50892825 overrides: 50892520!
reportPortfolio: aPortfolio 
	
	self reportAccountWithTabs: aPortfolio
		 formatWith: (self formatPortfolio: aPortfolio) 
		evaluating:  [ self reportAccountsRecursively: aPortfolio ].! !
!SimpleTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/16/2020 00:01:53' prior: 50892833 overrides: 50892531!
reportReceptiveAccount: aReceptiveAccount 	
	
	treeStructure add: (self leadingTabs, (self formatReceptiveAccount: aReceptiveAccount ))! !
!TreeStructureReporter methodsFor: 'formatting -- private' stamp: 'AM 11/16/2020 00:02:43'!
formatReceptiveAccount: aReceptiveAccount
	
	^ [ aReceptiveAccount accountName ] 
		on: Error 
		do: [ 'Cuenta corriente sin nombre'].
! !

!testRun: #AccountSummaryReporterTest #test01EmptyAccountSummaryShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummary stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithMoreThanOneTransactionShowsThemInAccountSummary stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04EmptyPortfolioBalanceShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/16/2020 00:02:50'!
ERROR!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/16/2020 00:02:50'!
ERROR!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/16/2020 00:02:50'!
ERROR!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/16/2020 00:02:50'!
ERROR!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/16/2020 00:02:50'!
ERROR!

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedAccountShowsDefaultName stamp: 'AM 11/16/2020 00:02:50'!
ERROR!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #NetTransferReporterTest #test02NetTransferIsAffectedCorrectlyInReceptiveAccount stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #NetTransferReporterTest #test03NetTransferIsOnlyAffectedByTransfersInReceptiveAccount stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfComposedPortfolioIsSumOfNetTransfers stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #PortfolioTest #test16NamedPortfolioShouldKnowItsName stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #PortfolioTest #test17UnnamedPortfolioShouldHaveDefaultName stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test16UnnamedReceptiveAccountShouldHaveDefaultName stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/16/2020 00:02:50'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/16/2020 00:02:50'!
ERROR!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/16/2020 00:02:50'!
ERROR!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/16/2020 00:02:50'!
ERROR!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedAccountShowsDefaultName stamp: 'AM 11/16/2020 00:02:50'!
ERROR!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/16/2020 00:02:57'!
ERROR!
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/16/2020 00:03:28' prior: 50892780 overrides: 50892531!
reportReceptiveAccount: aReceptiveAccount 
	
	 self reportAccountWithTabs: aReceptiveAccount 
		formatWith:( self formatReceptiveAccount: aReceptiveAccount)
		evaluating: [ 	self reportTransactionsRecursively: aReceptiveAccount ].
		
	treeStructure add: (self leadingTabs , '\t', (self formatBalance: aReceptiveAccount))! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/16/2020 00:03:33' prior: 50894051 overrides: 50892531!
reportReceptiveAccount: aReceptiveAccount 
	
	 self reportAccountWithTabs: aReceptiveAccount 
		formatWith: ( self formatReceptiveAccount: aReceptiveAccount)
		evaluating: [ 	self reportTransactionsRecursively: aReceptiveAccount ].
		
	treeStructure add: (self leadingTabs , '\t', (self formatBalance: aReceptiveAccount))! !

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/16/2020 00:03:34'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/16/2020 00:03:36'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/16/2020 00:03:37'!
ERROR!
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/16/2020 00:04:02' prior: 50892758 overrides: 50892520!
reportPortfolio: aPortfolio 
	
	self reportAccountWithTabs: aPortfolio 
		formatWith: (self formatPortfolio: aPortfolio)
		evaluating: [	self reportAccountsRecursively: aPortfolio].
	
	treeStructure add: (self leadingTabs , '\t', (self formatBalance: aPortfolio))! !

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/16/2020 00:04:05'!
ERROR!
!TreeStructureReporter methodsFor: 'formatting -- private' stamp: 'AM 11/16/2020 00:04:17'!
formatPortfolio: aPortfolio 
	self shouldBeImplemented.! !
!TreeStructureReporter methodsFor: 'formatting -- private' stamp: 'AM 11/16/2020 00:04:57' prior: 50894111!
formatPortfolio: aPortfolio 
	
	^ [ aPortfolio accountName ]
		on: Error
		do: [ 'Portfolio sin nombre' ]! !

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/16/2020 00:04:59'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/16/2020 00:05:01'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/16/2020 00:05:01'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedAccountShowsDefaultName stamp: 'AM 11/16/2020 00:05:02'!
FAILURE!
!DetailedTreeStructureReporterTest methodsFor: 'tests -- portfolio' stamp: 'AM 11/16/2020 00:05:19' prior: 50891091!
test06UnnamedAccountShowsDefaultName

	| portfolio portfolioTreeStructure |
	
	portfolio := Portfolio new.
	
	portfolioTreeStructure :=  (DetailedTreeStructureReporter for: portfolio) report.

	self assert:  (portfolioTreeStructure hasEqualElements: { 'Portfolio sin nombre'. '\tBalance = 0'}).! !
!DetailedTreeStructureReporterTest methodsFor: 'tests -- portfolio' stamp: 'AM 11/16/2020 00:05:30'!
test06UnnamedPortfolioShowsDefaultName

	| portfolio portfolioTreeStructure |
	
	portfolio := Portfolio new.
	
	portfolioTreeStructure :=  (DetailedTreeStructureReporter for: portfolio) report.

	self assert:  (portfolioTreeStructure hasEqualElements: { 'Portfolio sin nombre'. '\tBalance = 0'}).! !

!methodRemoval: DetailedTreeStructureReporterTest #test06UnnamedAccountShowsDefaultName stamp: 'AM 11/16/2020 00:05:31'!
test06UnnamedAccountShowsDefaultName

	| portfolio portfolioTreeStructure |
	
	portfolio := Portfolio new.
	
	portfolioTreeStructure :=  (DetailedTreeStructureReporter for: portfolio) report.

	self assert:  (portfolioTreeStructure hasEqualElements: { 'Portfolio sin nombre'. '\tBalance = 0'}).!

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedAccountShowsDefaultName stamp: 'AM 11/16/2020 00:05:38'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/16/2020 00:05:39'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/16/2020 00:05:40'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/16/2020 00:05:41'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedAccountShowsDefaultName stamp: 'AM 11/16/2020 00:05:42'!
FAILURE!
!SimpleTreeStructureReporterTest methodsFor: 'tests -- portfolio' stamp: 'AM 11/16/2020 00:05:54' prior: 50891898!
test05UnnamedAccountShowsDefaultName

	| portfolio portfolioTreeStructure |
	
	portfolio := Portfolio new.
	
	portfolioTreeStructure :=  (SimpleTreeStructureReporter for: portfolio) report.

	self assert:  (portfolioTreeStructure hasEqualElements: { 'Portfolio sin nombre'}).! !

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedAccountShowsDefaultName stamp: 'AM 11/16/2020 00:05:56'!
PASSED!

!methodRemoval: TreeStructureReporter #formatName: stamp: 'AM 11/16/2020 00:06:05'!
formatName: aPortfolio
	
	^ [ aPortfolio accountName ] 
		on: Error 
		do: [ 'Cuenta sin nombre'].
!
!SimpleTreeStructureReporterTest methodsFor: 'tests -- portfolio' stamp: 'AM 11/16/2020 00:06:32'!
test05UnnamedPortfolioShowsDefaultName

	| portfolio portfolioTreeStructure |
	
	portfolio := Portfolio new.
	
	portfolioTreeStructure :=  (SimpleTreeStructureReporter for: portfolio) report.

	self assert:  (portfolioTreeStructure hasEqualElements: { 'Portfolio sin nombre'}).! !

!methodRemoval: SimpleTreeStructureReporterTest #test05UnnamedAccountShowsDefaultName stamp: 'AM 11/16/2020 00:06:32'!
test05UnnamedAccountShowsDefaultName

	| portfolio portfolioTreeStructure |
	
	portfolio := Portfolio new.
	
	portfolioTreeStructure :=  (SimpleTreeStructureReporter for: portfolio) report.

	self assert:  (portfolioTreeStructure hasEqualElements: { 'Portfolio sin nombre'}).!
!SimpleTreeStructureReporterTest methodsFor: 'tests -- receptive account' stamp: 'AM 11/16/2020 00:06:50'!
test05UnnamedReceptiveAccountShowsDefaultName

	| portfolio portfolioTreeStructure |
	
	portfolio := Portfolio new.
	
	portfolioTreeStructure :=  (SimpleTreeStructureReporter for: portfolio) report.

	self assert:  (portfolioTreeStructure hasEqualElements: { 'Cuenta corriente sin nombre'}).! !
!SimpleTreeStructureReporterTest methodsFor: 'tests -- receptive account' stamp: 'AM 11/16/2020 00:06:52'!
test07UnnamedReceptiveAccountShowsDefaultName

	| portfolio portfolioTreeStructure |
	
	portfolio := Portfolio new.
	
	portfolioTreeStructure :=  (SimpleTreeStructureReporter for: portfolio) report.

	self assert:  (portfolioTreeStructure hasEqualElements: { 'Cuenta corriente sin nombre'}).! !
!SimpleTreeStructureReporterTest methodsFor: 'tests -- receptive account' stamp: 'AM 11/16/2020 00:06:54'!
test06UnnamedReceptiveAccountShowsDefaultName

	| portfolio portfolioTreeStructure |
	
	portfolio := Portfolio new.
	
	portfolioTreeStructure :=  (SimpleTreeStructureReporter for: portfolio) report.

	self assert:  (portfolioTreeStructure hasEqualElements: { 'Cuenta corriente sin nombre'}).! !

!methodRemoval: SimpleTreeStructureReporterTest #test06UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:07:00'!
test06UnnamedReceptiveAccountShowsDefaultName

	| portfolio portfolioTreeStructure |
	
	portfolio := Portfolio new.
	
	portfolioTreeStructure :=  (SimpleTreeStructureReporter for: portfolio) report.

	self assert:  (portfolioTreeStructure hasEqualElements: { 'Cuenta corriente sin nombre'}).!

!methodRemoval: SimpleTreeStructureReporterTest #test07UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:07:03'!
test07UnnamedReceptiveAccountShowsDefaultName

	| portfolio portfolioTreeStructure |
	
	portfolio := Portfolio new.
	
	portfolioTreeStructure :=  (SimpleTreeStructureReporter for: portfolio) report.

	self assert:  (portfolioTreeStructure hasEqualElements: { 'Cuenta corriente sin nombre'}).!
!SimpleTreeStructureReporterTest methodsFor: 'tests -- portfolio' stamp: 'AM 11/16/2020 00:07:09'!
test06UnnamedPortfolioShowsDefaultName

	| portfolio portfolioTreeStructure |
	
	portfolio := Portfolio new.
	
	portfolioTreeStructure :=  (SimpleTreeStructureReporter for: portfolio) report.

	self assert:  (portfolioTreeStructure hasEqualElements: { 'Portfolio sin nombre'}).! !

!methodRemoval: SimpleTreeStructureReporterTest #test05UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:07:09'!
test05UnnamedPortfolioShowsDefaultName

	| portfolio portfolioTreeStructure |
	
	portfolio := Portfolio new.
	
	portfolioTreeStructure :=  (SimpleTreeStructureReporter for: portfolio) report.

	self assert:  (portfolioTreeStructure hasEqualElements: { 'Portfolio sin nombre'}).!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/16/2020 00:07:13'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/16/2020 00:07:13'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/16/2020 00:07:13'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/16/2020 00:07:13'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:07:13'!
FAILURE!

!testRun: #SimpleTreeStructureReporterTest #test06UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:07:13'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:07:13'!
FAILURE!
!SimpleTreeStructureReporterTest methodsFor: 'tests -- receptive account' stamp: 'AM 11/16/2020 00:07:33' prior: 50894249!
test05UnnamedReceptiveAccountShowsDefaultName

	| receptiveAccount portfolioTreeStructure |
	
	receptiveAccount := Portfolio new.
	
	portfolioTreeStructure :=  (SimpleTreeStructureReporter for: receptiveAccount) report.

	self assert:  (portfolioTreeStructure hasEqualElements: { 'Cuenta corriente sin nombre'}).! !
!SimpleTreeStructureReporterTest methodsFor: 'tests -- receptive account' stamp: 'AM 11/16/2020 00:07:37' prior: 50894369!
test05UnnamedReceptiveAccountShowsDefaultName

	| receptiveAccount portfolioTreeStructure |
	
	receptiveAccount := ReceptiveAccount new.
	
	portfolioTreeStructure :=  (SimpleTreeStructureReporter for: receptiveAccount) report.

	self assert:  (portfolioTreeStructure hasEqualElements: { 'Cuenta corriente sin nombre'}).! !

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:07:38'!
PASSED!
!SimpleTreeStructureReporterTest methodsFor: 'tests -- receptive account' stamp: 'AM 11/16/2020 00:07:51' prior: 50894383!
test05UnnamedReceptiveAccountShowsDefaultName

	| receptiveAccount receptiveAccountTreeStructure |
	
	receptiveAccount := ReceptiveAccount new.
	
	receptiveAccountTreeStructure :=  (SimpleTreeStructureReporter for: receptiveAccount) report.

	self assert:  (receptiveAccountTreeStructure hasEqualElements: { 'Cuenta corriente sin nombre'}).! !
!SimpleTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/16/2020 00:08:05' prior: 50893794 overrides: 50892520!
reportPortfolio: aPortfolio 
	
	self reportAccountWithTabs: aPortfolio
		 formatWith: (self formatPortfolio: aPortfolio) 
		 evaluating:  [ self reportAccountsRecursively: aPortfolio ].! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/16/2020 00:08:47' prior: 50892769 overrides: 50892525!
reportReceivingTransferComponent: aReceivingTransferComponent 
	
	treeStructure add: 
		(self leadingTabs, (self formatReceivingTransferComponent: aReceivingTransferComponent))! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/16/2020 00:09:05' prior: 50892792 overrides: 50892536!
reportSendingTransferComponent: aSendingTransferComponent 

	treeStructure add: 
		(self leadingTabs, (self formatSendingTransferComponent: aSendingTransferComponent) )
		! !

!testRun: #AccountSummaryReporterTest #test01EmptyAccountSummaryShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummary stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithMoreThanOneTransactionShowsThemInAccountSummary stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04EmptyPortfolioBalanceShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #NetTransferReporterTest #test02NetTransferIsAffectedCorrectlyInReceptiveAccount stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #NetTransferReporterTest #test03NetTransferIsOnlyAffectedByTransfersInReceptiveAccount stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfComposedPortfolioIsSumOfNetTransfers stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #PortfolioTest #test16NamedPortfolioShouldKnowItsName stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #PortfolioTest #test17UnnamedPortfolioShouldHaveDefaultName stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 00:09:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:09:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:09:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 00:09:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 00:09:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 00:09:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 00:09:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/16/2020 00:09:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/16/2020 00:09:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/16/2020 00:09:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/16/2020 00:09:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/16/2020 00:09:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/16/2020 00:09:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/16/2020 00:09:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 00:09:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test16UnnamedReceptiveAccountShouldHaveDefaultName stamp: 'AM 11/16/2020 00:09:09'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/16/2020 00:09:09'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/16/2020 00:09:09'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/16/2020 00:09:09'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/16/2020 00:09:09'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:09:09'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test06UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:09:09'!
PASSED!
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/16/2020 00:09:17' prior: 50892803 overrides: 50892549!
reportWithdraw: aWithdraw 

	| leadingTabs |
	
	leadingTabs := self leadingTabs.
	treeStructure add: 
		(self leadingTabs, (self formatWithdraw: aWithdraw) ) ! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/16/2020 00:09:22' prior: 50894677 overrides: 50892549!
reportWithdraw: aWithdraw 
	
	treeStructure add: 
		(self leadingTabs, (self formatWithdraw: aWithdraw) ) ! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/16/2020 00:09:31' prior: 50894066 overrides: 50892531!
reportReceptiveAccount: aReceptiveAccount 
	
	 self reportAccountWithTabs: aReceptiveAccount 
		formatWith: ( self formatReceptiveAccount: aReceptiveAccount)
		evaluating: [ 	self reportTransactionsRecursively: aReceptiveAccount ].
		
	treeStructure add:
		(self leadingTabs , '\t', (self formatBalance: aReceptiveAccount))! !
!DetailedTreeStructureReporterTest methodsFor: 'tests -- portfolio' stamp: 'AM 11/16/2020 00:10:38'!
test07UnnamedPortfolioShowsDefaultName

	| portfolio portfolioTreeStructure |
	
	portfolio := Portfolio new.
	
	portfolioTreeStructure :=  (DetailedTreeStructureReporter for: portfolio) report.

	self assert:  (portfolioTreeStructure hasEqualElements: { 'Portfolio sin nombre'. '\tBalance = 0'}).! !

!methodRemoval: DetailedTreeStructureReporterTest #test06UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:10:39'!
test06UnnamedPortfolioShowsDefaultName

	| portfolio portfolioTreeStructure |
	
	portfolio := Portfolio new.
	
	portfolioTreeStructure :=  (DetailedTreeStructureReporter for: portfolio) report.

	self assert:  (portfolioTreeStructure hasEqualElements: { 'Portfolio sin nombre'. '\tBalance = 0'}).!
!DetailedTreeStructureReporterTest methodsFor: 'tests -- receptive account' stamp: 'AM 11/16/2020 00:10:46'!
test06UnnamedPortfolioShowsDefaultName

	| portfolio portfolioTreeStructure |
	
	portfolio := Portfolio new.
	
	portfolioTreeStructure :=  (DetailedTreeStructureReporter for: portfolio) report.

	self assert:  (portfolioTreeStructure hasEqualElements: { 'Portfolio sin nombre'. '\tBalance = 0'}).! !
!DetailedTreeStructureReporterTest methodsFor: 'tests -- receptive account' stamp: 'AM 11/16/2020 00:11:00'!
test06UnnamedReceptiveAccountShowsDefaultName

	| portfolio portfolioTreeStructure |
	
	portfolio := Portfolio new.
	
	portfolioTreeStructure :=  (DetailedTreeStructureReporter for: portfolio) report.

	self assert:  (portfolioTreeStructure hasEqualElements: { 'Portfolio sin nombre'. '\tBalance = 0'}).! !

!methodRemoval: DetailedTreeStructureReporterTest #test06UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:11:00'!
test06UnnamedPortfolioShowsDefaultName

	| portfolio portfolioTreeStructure |
	
	portfolio := Portfolio new.
	
	portfolioTreeStructure :=  (DetailedTreeStructureReporter for: portfolio) report.

	self assert:  (portfolioTreeStructure hasEqualElements: { 'Portfolio sin nombre'. '\tBalance = 0'}).!
!DetailedTreeStructureReporterTest methodsFor: 'tests -- receptive account' stamp: 'AM 11/16/2020 00:11:08' prior: 50894748!
test06UnnamedReceptiveAccountShowsDefaultName

	| portfolio portfolioTreeStructure |
	
	portfolio := Portfolio new.
	
	portfolioTreeStructure :=  (DetailedTreeStructureReporter for: portfolio) report.

	self assert:  (portfolioTreeStructure hasEqualElements: { 'Cuenta corriente sin nombre'. '\tBalance = 0'}).! !

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:11:11'!
FAILURE!
!DetailedTreeStructureReporterTest methodsFor: 'tests -- receptive account' stamp: 'AM 11/16/2020 00:11:27' prior: 50894775!
test06UnnamedReceptiveAccountShowsDefaultName

	| portfolio portfolioTreeStructure |
	
	portfolio := ReceptiveAccount new.
	
	portfolioTreeStructure :=  (DetailedTreeStructureReporter for: portfolio) report.

	self assert:  (portfolioTreeStructure hasEqualElements: { 'Cuenta corriente sin nombre'. '\tBalance = 0'}).! !

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:11:28'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/16/2020 00:11:28'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/16/2020 00:11:28'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/16/2020 00:11:28'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/16/2020 00:11:28'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/16/2020 00:11:28'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:11:28'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test07UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:11:28'!
PASSED!
!DetailedTreeStructureReporterTest methodsFor: 'tests -- receptive account' stamp: 'AM 11/16/2020 00:11:34' prior: 50894793!
test06UnnamedReceptiveAccountShowsDefaultName

	| receptiveAccount portfolioTreeStructure |
	
	receptiveAccount := ReceptiveAccount new.
	
	portfolioTreeStructure :=  (DetailedTreeStructureReporter for: receptiveAccount) report.

	self assert:  (portfolioTreeStructure hasEqualElements: { 'Cuenta corriente sin nombre'. '\tBalance = 0'}).! !
!DetailedTreeStructureReporterTest methodsFor: 'tests -- receptive account' stamp: 'AM 11/16/2020 00:11:43' prior: 50894843!
test06UnnamedReceptiveAccountShowsDefaultName

	| receptiveAccount receptiveAccountTreeStructure |
	
	receptiveAccount := ReceptiveAccount new.
	
	receptiveAccountTreeStructure :=  (DetailedTreeStructureReporter for: receptiveAccount) report.

	self assert:  (receptiveAccountTreeStructure hasEqualElements: { 'Cuenta corriente sin nombre'. '\tBalance = 0'}).! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/16/2020 00:15:09'!
test16UnnamedReceptiveAccountIsNotNameAndShouldSignalNoName
	
	| aReceptiveAccount |
	
	aReceptiveAccount := ReceptiveAccount new.
	
	self deny: aReceptiveAccount isNamed.

	self should: [aReceptiveAccount accountName]  
		raise: Error
		withMessageText: ReceptiveAccount canNotRetrieveNameOfUnnamedAccountErrorDescription.
	
	
	
		! !

!methodRemoval: ReceptiveAccountTest #test16UnnamedReceptiveAccountShouldHaveDefaultName stamp: 'AM 11/16/2020 00:15:09'!
test16UnnamedReceptiveAccountShouldHaveDefaultName
	
	| aReceptiveAccount |
	
	aReceptiveAccount := ReceptiveAccount new.
	
	self deny: aReceptiveAccount isNamed.

	self should: [aReceptiveAccount accountName]  
		raise: Error
		withMessageText: ReceptiveAccount canNotRetrieveNameOfUnnamedAccountErrorDescription.
	
	
	
		!
!PortfolioTest methodsFor: 'tests' stamp: 'AM 11/16/2020 00:15:30'!
test17UnnamedPortfolioShouldNotBeNamedAndSignalNoName
	
	| portfolio |
	
	portfolio := Portfolio new.
	
	self deny: portfolio isNamed.

	self should: [portfolio accountName]  
		raise: Error
		withMessageText: Portfolio canNotRetrieveNameOfUnnamedPortfolioErrorDescription
	! !

!methodRemoval: PortfolioTest #test17UnnamedPortfolioShouldHaveDefaultName stamp: 'AM 11/16/2020 00:15:31'!
test17UnnamedPortfolioShouldHaveDefaultName
	
	| portfolio |
	
	portfolio := Portfolio new.
	
	self deny: portfolio isNamed.

	self should: [portfolio accountName]  
		raise: Error
		withMessageText: Portfolio canNotRetrieveNameOfUnnamedPortfolioErrorDescription
	!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/16/2020 00:16:04'!
test17UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName
	
	| aReceptiveAccount |
	
	aReceptiveAccount := ReceptiveAccount new.
	
	self deny: aReceptiveAccount isNamed.

	self should: [aReceptiveAccount accountName]  
		raise: Error
		withMessageText: ReceptiveAccount canNotRetrieveNameOfUnnamedAccountErrorDescription.
	
	
	
		! !

!methodRemoval: ReceptiveAccountTest #test16UnnamedReceptiveAccountIsNotNameAndShouldSignalNoName stamp: 'AM 11/16/2020 00:16:04'!
test16UnnamedReceptiveAccountIsNotNameAndShouldSignalNoName
	
	| aReceptiveAccount |
	
	aReceptiveAccount := ReceptiveAccount new.
	
	self deny: aReceptiveAccount isNamed.

	self should: [aReceptiveAccount accountName]  
		raise: Error
		withMessageText: ReceptiveAccount canNotRetrieveNameOfUnnamedAccountErrorDescription.
	
	
	
		!

!methodRemoval: Portfolio #accounts stamp: 'AM 11/16/2020 00:16:24'!
accounts
	^ accounts copy!

!classDefinition: #ReceptiveAccount category: 'Portfolio' stamp: 'AM 11/16/2020 00:16:46'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions transfer accountName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AM 11/16/2020 00:16:46' prior: 50892148!
accountName

	accountName ifNil: [self error: self class canNotRetrieveNameOfUnnamedAccountErrorDescription ].
	^ accountName! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AM 11/16/2020 00:16:46' prior: 50892171!
initializeNamed: aReceptiveAccountName 
	
	accountName := aReceptiveAccountName.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AM 11/16/2020 00:16:46' prior: 50892198!
isNamed
	
	^ accountName isNil not.! !

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio' stamp: 'AM 11/16/2020 00:16:49'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #Portfolio category: 'Portfolio' stamp: 'AM 11/16/2020 00:17:06'!
Account subclass: #Portfolio
	instanceVariableNames: 'parents accountName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #Account category: 'Portfolio' stamp: 'AM 11/16/2020 00:17:07'!
Object subclass: #Account
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #Account category: 'Portfolio' stamp: 'AM 11/16/2020 00:17:27'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

Account subclass: #Portfolio
	instanceVariableNames: 'parents accountName accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #Portfolio category: 'Portfolio' stamp: 'AM 11/16/2020 00:17:33'!
Account subclass: #Portfolio
	instanceVariableNames: 'parents accountName accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!testRun: #AccountSummaryReporterTest #test01EmptyAccountSummaryShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummary stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithMoreThanOneTransactionShowsThemInAccountSummary stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04EmptyPortfolioBalanceShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/16/2020 00:17:36'!
FAILURE!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/16/2020 00:17:36'!
FAILURE!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:17:36'!
FAILURE!

!testRun: #DetailedTreeStructureReporterTest #test07UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #NetTransferReporterTest #test02NetTransferIsAffectedCorrectlyInReceptiveAccount stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #NetTransferReporterTest #test03NetTransferIsOnlyAffectedByTransfersInReceptiveAccount stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfComposedPortfolioIsSumOfNetTransfers stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #PortfolioTest #test16NamedPortfolioShouldKnowItsName stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #PortfolioTest #test17UnnamedPortfolioShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test17UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:17:36'!
FAILURE!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/16/2020 00:17:36'!
FAILURE!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:17:36'!
FAILURE!

!testRun: #SimpleTreeStructureReporterTest #test06UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:17:36'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/16/2020 00:17:40'!
FAILURE!

Account subclass: #Portfolio
	instanceVariableNames: 'parents accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #Portfolio category: 'Portfolio' stamp: 'AM 11/16/2020 00:19:23'!
Account subclass: #Portfolio
	instanceVariableNames: 'parents accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

Object subclass: #Account
	instanceVariableNames: 'accountName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #Account category: 'Portfolio' stamp: 'AM 11/16/2020 00:19:30'!
Object subclass: #Account
	instanceVariableNames: 'accountName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/16/2020 00:19:32'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/16/2020 00:19:32'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/16/2020 00:19:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/16/2020 00:19:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/16/2020 00:19:32'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/16/2020 00:19:32'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/16/2020 00:19:32'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/16/2020 00:19:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/16/2020 00:19:32'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/16/2020 00:19:32'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/16/2020 00:19:32'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/16/2020 00:19:32'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/16/2020 00:19:32'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/16/2020 00:19:32'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/16/2020 00:19:32'!
PASSED!

!testRun: #PortfolioTest #test16NamedPortfolioShouldKnowItsName stamp: 'AM 11/16/2020 00:19:32'!
PASSED!

!testRun: #PortfolioTest #test17UnnamedPortfolioShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:19:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 00:19:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:19:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:19:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 00:19:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 00:19:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 00:19:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 00:19:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/16/2020 00:19:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/16/2020 00:19:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/16/2020 00:19:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/16/2020 00:19:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/16/2020 00:19:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/16/2020 00:19:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/16/2020 00:19:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 00:19:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test17UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:19:34'!
PASSED!

!testRun: #AccountSummaryReporterTest #test01EmptyAccountSummaryShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummary stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithMoreThanOneTransactionShowsThemInAccountSummary stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04EmptyPortfolioBalanceShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test07UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #NetTransferReporterTest #test02NetTransferIsAffectedCorrectlyInReceptiveAccount stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #NetTransferReporterTest #test03NetTransferIsOnlyAffectedByTransfersInReceptiveAccount stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfComposedPortfolioIsSumOfNetTransfers stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #PortfolioTest #test16NamedPortfolioShouldKnowItsName stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #PortfolioTest #test17UnnamedPortfolioShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test17UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test06UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:19:39'!
PASSED!

!methodRemoval: ReceptiveAccount class #named: stamp: 'AM 11/16/2020 00:21:05'!
named: aReceptiveAccountName

	^self new initializeNamed: aReceptiveAccountName !

!testRun: #AccountSummaryReporterTest #test01EmptyAccountSummaryShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:21:08'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummary stamp: 'AM 11/16/2020 00:21:08'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithMoreThanOneTransactionShowsThemInAccountSummary stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04EmptyPortfolioBalanceShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test07UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #NetTransferReporterTest #test02NetTransferIsAffectedCorrectlyInReceptiveAccount stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #NetTransferReporterTest #test03NetTransferIsOnlyAffectedByTransfersInReceptiveAccount stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfComposedPortfolioIsSumOfNetTransfers stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #PortfolioTest #test16NamedPortfolioShouldKnowItsName stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #PortfolioTest #test17UnnamedPortfolioShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test17UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test06UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:21:09'!
PASSED!

port := Portfolio named: 'Hola'!

port add: ReceptiveAccount new!

port!

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio' stamp: 'AM 11/16/2020 00:26:10'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!testRun: #AccountSummaryReporterTest #test01EmptyAccountSummaryShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummary stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithMoreThanOneTransactionShowsThemInAccountSummary stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04EmptyPortfolioBalanceShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test07UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #NetTransferReporterTest #test02NetTransferIsAffectedCorrectlyInReceptiveAccount stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #NetTransferReporterTest #test03NetTransferIsOnlyAffectedByTransfersInReceptiveAccount stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfComposedPortfolioIsSumOfNetTransfers stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #PortfolioTest #test16NamedPortfolioShouldKnowItsName stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #PortfolioTest #test17UnnamedPortfolioShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test17UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:26:16'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test06UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:26:16'!
PASSED!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'AM 11/16/2020 00:26:25' prior: 50892166 overrides: 16896425!
initialize

	transactions := OrderedCollection new.! !

!testRun: #AccountSummaryReporterTest #test01EmptyAccountSummaryShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummary stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithMoreThanOneTransactionShowsThemInAccountSummary stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04EmptyPortfolioBalanceShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test07UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #NetTransferReporterTest #test02NetTransferIsAffectedCorrectlyInReceptiveAccount stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #NetTransferReporterTest #test03NetTransferIsOnlyAffectedByTransfersInReceptiveAccount stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfComposedPortfolioIsSumOfNetTransfers stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #PortfolioTest #test16NamedPortfolioShouldKnowItsName stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #PortfolioTest #test17UnnamedPortfolioShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test17UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:26:27'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test06UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:26:27'!
PASSED!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'AM 11/16/2020 00:26:42' prior: 50894970!
initializeNamed: aReceptiveAccountName 
	
	transactions := OrderedCollection new.
	accountName := aReceptiveAccountName.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'AM 11/16/2020 00:26:55' prior: 50896379!
initializeNamed: aReceptiveAccountName 
	
	accountName := aReceptiveAccountName.! !
!SimpleTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/16/2020 00:29:21' prior: 50893805 overrides: 50892531!
reportReceptiveAccount: aReceptiveAccount 	
	
	treeStructure add: 
		(self leadingTabs, (self formatReceptiveAccount: aReceptiveAccount ))! !
!DetailedTreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/16/2020 00:29:31' prior: 50892751 overrides: 50892515!
reportDeposit: aDeposit 
		
	treeStructure add: 
		(self leadingTabs, (self formatDeposit: aDeposit)).! !
!TransferComponent methodsFor: 'initializing' stamp: 'AM 11/16/2020 00:30:55' prior: 50892345!
initializeFor: aTransfer on: aReceptiveAccount 
	
	aReceptiveAccount register: self.
	transfer := aTransfer.! !

!testRun: #AccountSummaryReporterTest #test01EmptyAccountSummaryShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummary stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithMoreThanOneTransactionShowsThemInAccountSummary stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04EmptyPortfolioBalanceShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test07UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #NetTransferReporterTest #test02NetTransferIsAffectedCorrectlyInReceptiveAccount stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #NetTransferReporterTest #test03NetTransferIsOnlyAffectedByTransfersInReceptiveAccount stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfComposedPortfolioIsSumOfNetTransfers stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #PortfolioTest #test16NamedPortfolioShouldKnowItsName stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #PortfolioTest #test17UnnamedPortfolioShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test17UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test06UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:31:00'!
PASSED!

AccountTransaction subclass: #TransferComponent
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #TransferComponent category: 'Portfolio' stamp: 'AM 11/16/2020 00:31:08'!
AccountTransaction subclass: #TransferComponent
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!testRun: #AccountSummaryReporterTest #test01EmptyAccountSummaryShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:31:13'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummary stamp: 'AM 11/16/2020 00:31:13'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithMoreThanOneTransactionShowsThemInAccountSummary stamp: 'AM 11/16/2020 00:31:13'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04EmptyPortfolioBalanceShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:31:13'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/16/2020 00:31:13'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/16/2020 00:31:13'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/16/2020 00:31:13'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/16/2020 00:31:13'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/16/2020 00:31:13'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/16/2020 00:31:13'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/16/2020 00:31:13'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:31:13'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test07UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:31:13'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/16/2020 00:31:13'!
PASSED!

!testRun: #NetTransferReporterTest #test02NetTransferIsAffectedCorrectlyInReceptiveAccount stamp: 'AM 11/16/2020 00:31:13'!
PASSED!

!testRun: #NetTransferReporterTest #test03NetTransferIsOnlyAffectedByTransfersInReceptiveAccount stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfComposedPortfolioIsSumOfNetTransfers stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #PortfolioTest #test16NamedPortfolioShouldKnowItsName stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #PortfolioTest #test17UnnamedPortfolioShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test17UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:31:14'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test06UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:31:14'!
PASSED!
!ReceptiveAccount class methodsFor: 'error descriptions' stamp: 'AM 11/16/2020 00:32:07' prior: 50892234!
canNotRetrieveNameOfUnnamedAccountErrorDescription

	^ 'Cannot retrieve name of unnamed receptive account'! !
!ReceptiveAccount class methodsFor: 'error descriptions' stamp: 'AM 11/16/2020 00:32:33'!
canNotRetrieveNameOfUnnamedReceptiveAccountErrorDescription

	^ 'Cannot retrieve name of unnamed receptive account'! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AM 11/16/2020 00:32:33' prior: 50894962!
accountName

	accountName ifNil: [self error: self class canNotRetrieveNameOfUnnamedReceptiveAccountErrorDescription ].
	^ accountName! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'AM 11/16/2020 00:32:33' prior: 50894922!
test17UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName
	
	| aReceptiveAccount |
	
	aReceptiveAccount := ReceptiveAccount new.
	
	self deny: aReceptiveAccount isNamed.

	self should: [aReceptiveAccount accountName]  
		raise: Error
		withMessageText: ReceptiveAccount canNotRetrieveNameOfUnnamedReceptiveAccountErrorDescription.
	
	
	
		! !

!methodRemoval: ReceptiveAccount class #canNotRetrieveNameOfUnnamedAccountErrorDescription stamp: 'AM 11/16/2020 00:32:33'!
canNotRetrieveNameOfUnnamedAccountErrorDescription

	^ 'Cannot retrieve name of unnamed receptive account'!

!testRun: #AccountSummaryReporterTest #test01EmptyAccountSummaryShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummary stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithMoreThanOneTransactionShowsThemInAccountSummary stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04EmptyPortfolioBalanceShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test07UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #NetTransferReporterTest #test02NetTransferIsAffectedCorrectlyInReceptiveAccount stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #NetTransferReporterTest #test03NetTransferIsOnlyAffectedByTransfersInReceptiveAccount stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfComposedPortfolioIsSumOfNetTransfers stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #PortfolioTest #test16NamedPortfolioShouldKnowItsName stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #PortfolioTest #test17UnnamedPortfolioShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test17UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:32:37'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test06UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:32:37'!
PASSED!
!TreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/16/2020 00:35:07'!
reportAccount: anAccount formatWith: formatForAccount evaluating: aBlock
		
	treeStructure add: (self leadingTabs, formatForAccount).
	
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	
	aBlock value.
	
	numberOfLeadingTabs := numberOfLeadingTabs - 1.! !

!methodRemoval: TreeStructureReporter #reportAccountWithTabs:formatWith:evaluating: stamp: 'AM 11/16/2020 00:35:07'!
reportAccountWithTabs: anAccount formatWith: formatForAccount evaluating: aBlock
		
	treeStructure add: (self leadingTabs, formatForAccount).
	
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	
	aBlock value.
	
	numberOfLeadingTabs := numberOfLeadingTabs - 1.!

!testRun: #AccountSummaryReporterTest #test01EmptyAccountSummaryShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummary stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithMoreThanOneTransactionShowsThemInAccountSummary stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04EmptyPortfolioBalanceShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/16/2020 00:35:11'!
ERROR!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/16/2020 00:35:11'!
ERROR!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/16/2020 00:35:11'!
ERROR!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/16/2020 00:35:11'!
ERROR!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/16/2020 00:35:11'!
ERROR!

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:35:11'!
ERROR!

!testRun: #DetailedTreeStructureReporterTest #test07UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:35:11'!
ERROR!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #NetTransferReporterTest #test02NetTransferIsAffectedCorrectlyInReceptiveAccount stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #NetTransferReporterTest #test03NetTransferIsOnlyAffectedByTransfersInReceptiveAccount stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfComposedPortfolioIsSumOfNetTransfers stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #PortfolioTest #test16NamedPortfolioShouldKnowItsName stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #PortfolioTest #test17UnnamedPortfolioShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test17UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/16/2020 00:35:11'!
ERROR!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/16/2020 00:35:11'!
ERROR!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/16/2020 00:35:11'!
ERROR!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:35:11'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test06UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:35:11'!
ERROR!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/16/2020 00:35:14'!
ERROR!
!TreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/16/2020 00:35:33'!
reportAccountWithTabs: anAccount formatWith: formatForAccount evaluating: aBlock
		
	treeStructure add: (self leadingTabs, formatForAccount).
	
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	
	aBlock value.
	
	numberOfLeadingTabs := numberOfLeadingTabs - 1.! !

!methodRemoval: TreeStructureReporter #reportAccount:formatWith:evaluating: stamp: 'AM 11/16/2020 00:35:33'!
reportAccount: anAccount formatWith: formatForAccount evaluating: aBlock
		
	treeStructure add: (self leadingTabs, formatForAccount).
	
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	
	aBlock value.
	
	numberOfLeadingTabs := numberOfLeadingTabs - 1.!
!TreeStructureReporter methodsFor: 'reporting -- private' stamp: 'AM 11/16/2020 00:35:45'!
reportAccount: anAccount formatWith: formatForAccount evaluating: aBlock
		
	treeStructure add: (self leadingTabs, formatForAccount).
	
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	
	aBlock value.
	
	numberOfLeadingTabs := numberOfLeadingTabs - 1.! !
!SimpleTreeStructureReporter methodsFor: 'as yet unclassified' stamp: 'AM 11/16/2020 00:35:45' prior: 50894417 overrides: 50892520!
reportPortfolio: aPortfolio 
	
	self reportAccount: aPortfolio
		 formatWith: (self formatPortfolio: aPortfolio) 
		 evaluating:  [ self reportAccountsRecursively: aPortfolio ].! !
!DetailedTreeStructureReporter methodsFor: 'as yet unclassified' stamp: 'AM 11/16/2020 00:35:45' prior: 50894095 overrides: 50892520!
reportPortfolio: aPortfolio 
	
	self reportAccount: aPortfolio 
		formatWith: (self formatPortfolio: aPortfolio)
		evaluating: [	self reportAccountsRecursively: aPortfolio].
	
	treeStructure add: (self leadingTabs , '\t', (self formatBalance: aPortfolio))! !
!DetailedTreeStructureReporter methodsFor: 'as yet unclassified' stamp: 'AM 11/16/2020 00:35:45' prior: 50894695 overrides: 50892531!
reportReceptiveAccount: aReceptiveAccount 
	
	 self reportAccount: aReceptiveAccount 
		formatWith: ( self formatReceptiveAccount: aReceptiveAccount)
		evaluating: [ 	self reportTransactionsRecursively: aReceptiveAccount ].
		
	treeStructure add:
		(self leadingTabs , '\t', (self formatBalance: aReceptiveAccount))! !

!methodRemoval: TreeStructureReporter #reportAccountWithTabs:formatWith:evaluating: stamp: 'AM 11/16/2020 00:35:45'!
reportAccountWithTabs: anAccount formatWith: formatForAccount evaluating: aBlock
		
	treeStructure add: (self leadingTabs, formatForAccount).
	
	numberOfLeadingTabs := numberOfLeadingTabs + 1.
	
	aBlock value.
	
	numberOfLeadingTabs := numberOfLeadingTabs - 1.!

!testRun: #AccountSummaryReporterTest #test01EmptyAccountSummaryShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummary stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithMoreThanOneTransactionShowsThemInAccountSummary stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04EmptyPortfolioBalanceShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test07UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #NetTransferReporterTest #test02NetTransferIsAffectedCorrectlyInReceptiveAccount stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #NetTransferReporterTest #test03NetTransferIsOnlyAffectedByTransfersInReceptiveAccount stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfComposedPortfolioIsSumOfNetTransfers stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #PortfolioTest #test16NamedPortfolioShouldKnowItsName stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #PortfolioTest #test17UnnamedPortfolioShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test17UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:35:49'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test06UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:35:49'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'AM 11/16/2020 00:36:10'!
test16UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName
	
	| aReceptiveAccount |
	
	aReceptiveAccount := ReceptiveAccount new.
	
	self deny: aReceptiveAccount isNamed.

	self should: [aReceptiveAccount accountName]  
		raise: Error
		withMessageText: ReceptiveAccount canNotRetrieveNameOfUnnamedReceptiveAccountErrorDescription.
	
	
	
		! !

!methodRemoval: ReceptiveAccountTest #test17UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:36:11'!
test17UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName
	
	| aReceptiveAccount |
	
	aReceptiveAccount := ReceptiveAccount new.
	
	self deny: aReceptiveAccount isNamed.

	self should: [aReceptiveAccount accountName]  
		raise: Error
		withMessageText: ReceptiveAccount canNotRetrieveNameOfUnnamedReceptiveAccountErrorDescription.
	
	
	
		!

!testRun: #AccountSummaryReporterTest #test01EmptyAccountSummaryShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummary stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithMoreThanOneTransactionShowsThemInAccountSummary stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04EmptyPortfolioBalanceShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test07UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #NetTransferReporterTest #test02NetTransferIsAffectedCorrectlyInReceptiveAccount stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #NetTransferReporterTest #test03NetTransferIsOnlyAffectedByTransfersInReceptiveAccount stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfComposedPortfolioIsSumOfNetTransfers stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #PortfolioTest #test16NamedPortfolioShouldKnowItsName stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #PortfolioTest #test17UnnamedPortfolioShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test16UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test06UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:38:08'!
PASSED!

ReceptiveAccount subclass: #ReceptiveAccountUnnamed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #ReceptiveAccountUnnamed category: 'Portfolio' stamp: 'AM 11/16/2020 00:40:05'!
ReceptiveAccount subclass: #ReceptiveAccountUnnamed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

ReceptiveAccount subclass: #ReceptiveAccountNamed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #ReceptiveAccountNamed category: 'Portfolio' stamp: 'AM 11/16/2020 00:40:10'!
ReceptiveAccount subclass: #ReceptiveAccountNamed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!ReceptiveAccountUnnamed methodsFor: 'testing' stamp: 'AM 11/16/2020 00:40:29' overrides: 50894976!
isNamed
	
	^ accountName isNil not.! !
!ReceptiveAccountNamed methodsFor: 'testing' stamp: 'AM 11/16/2020 00:40:29' overrides: 50894976!
isNamed
	
	^ accountName isNil not.! !

!methodRemoval: ReceptiveAccount #isNamed stamp: 'AM 11/16/2020 00:40:29'!
isNamed
	
	^ accountName isNil not.!
!ReceptiveAccountUnnamed methodsFor: 'accessing' stamp: 'AM 11/16/2020 00:40:40' overrides: 50896911!
accountName

	accountName ifNil: [self error: self class canNotRetrieveNameOfUnnamedReceptiveAccountErrorDescription ].
	^ accountName! !
!ReceptiveAccountNamed methodsFor: 'accessing' stamp: 'AM 11/16/2020 00:40:40' overrides: 50896911!
accountName

	accountName ifNil: [self error: self class canNotRetrieveNameOfUnnamedReceptiveAccountErrorDescription ].
	^ accountName! !

!methodRemoval: ReceptiveAccount #accountName stamp: 'AM 11/16/2020 00:40:40'!
accountName

	accountName ifNil: [self error: self class canNotRetrieveNameOfUnnamedReceptiveAccountErrorDescription ].
	^ accountName!
!ReceptiveAccount methodsFor: 'accessing' stamp: 'AM 11/16/2020 00:41:03'!
accountsName

	self subclassResponsibility ! !
!ReceptiveAccount methodsFor: 'accessing' stamp: 'AM 11/16/2020 00:41:13'!
accountName

	self subclassResponsibility ! !

!methodRemoval: ReceptiveAccount #accountsName stamp: 'AM 11/16/2020 00:41:13'!
accountsName

	self subclassResponsibility !
!ReceptiveAccountNamed methodsFor: 'accessing' stamp: 'AM 11/16/2020 00:41:24' prior: 50898064 overrides: 50898082!
accountName

	^ accountName ! !
!ReceptiveAccountUnnamed methodsFor: 'accessing' stamp: 'AM 11/16/2020 00:41:34' prior: 50898056 overrides: 50898082!
accountName

	self error: self class canNotRetrieveNameOfUnnamedReceptiveAccountErrorDescription! !
!ReceptiveAccountUnnamed methodsFor: 'testing' stamp: 'AM 11/16/2020 00:42:00' prior: 50898043!
isNamed
	
	^ false! !
!ReceptiveAccountNamed methodsFor: 'testing' stamp: 'AM 11/16/2020 00:42:19' prior: 50898048!
isNamed
	
	^ true! !
!Portfolio class methodsFor: 'instance creations' stamp: 'AM 11/16/2020 00:42:46' overrides: 50891956!
named: anAccountName 
	
	^ self new initializeNamed: anAccountName! !
!ReceptiveAccount class methodsFor: 'instance creations' stamp: 'AM 11/16/2020 00:42:46' overrides: 50891956!
named: anAccountName 
	
	^ self new initializeNamed: anAccountName! !

!methodRemoval: Account class #named: stamp: 'AM 11/16/2020 00:42:46'!
named: anAccountName 
	
	^ self new initializeNamed: anAccountName!
!ReceptiveAccount class methodsFor: 'instance creations' stamp: 'AM 11/16/2020 00:43:06' prior: 50898117!
named: anAccountName 
	
	^ ReceptiveAccountNamed new initializeNamed: anAccountName! !
!ReceptiveAccount class methodsFor: 'instance creations' stamp: 'AM 11/16/2020 00:43:23' overrides: 16783533!
new
	
	^ ReceptiveAccountUnnamed new initialize! !
!ReceptiveAccount class methodsFor: 'instance creations' stamp: 'AM 11/16/2020 00:43:36' prior: 50898134 overrides: 16783533!
new
	
	^ ReceptiveAccountUnnamed basicNew initialize! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 00:43:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:43:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:43:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 00:43:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 00:43:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 00:43:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 00:43:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/16/2020 00:43:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/16/2020 00:43:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/16/2020 00:43:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/16/2020 00:43:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/16/2020 00:43:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/16/2020 00:43:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/16/2020 00:43:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 00:43:37'!
ERROR!

!testRun: #ReceptiveAccountTest #test16UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:43:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 00:43:37'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 00:44:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:44:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:44:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 00:44:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 00:44:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 00:44:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 00:44:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/16/2020 00:44:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/16/2020 00:44:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/16/2020 00:44:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/16/2020 00:44:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/16/2020 00:44:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/16/2020 00:44:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/16/2020 00:44:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 00:44:04'!
ERROR!

!testRun: #ReceptiveAccountTest #test16UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:44:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 00:44:04'!
ERROR!
!ReceptiveAccount class methodsFor: 'instance creations' stamp: 'AM 11/16/2020 00:44:16' prior: 50898127!
named: anAccountName 
	
	^ ReceptiveAccountNamed basicNew initializeNamed: anAccountName! !

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 00:44:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 00:44:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:44:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:44:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 00:44:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 00:44:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 00:44:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 00:44:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/16/2020 00:44:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/16/2020 00:44:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/16/2020 00:44:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/16/2020 00:44:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/16/2020 00:44:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/16/2020 00:44:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/16/2020 00:44:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 00:44:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test16UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:44:20'!
PASSED!

!testRun: #AccountSummaryReporterTest #test01EmptyAccountSummaryShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummary stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithMoreThanOneTransactionShowsThemInAccountSummary stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04EmptyPortfolioBalanceShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/16/2020 00:44:24'!
ERROR!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/16/2020 00:44:24'!
ERROR!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/16/2020 00:44:24'!
ERROR!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/16/2020 00:44:24'!
ERROR!

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test07UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #NetTransferReporterTest #test02NetTransferIsAffectedCorrectlyInReceptiveAccount stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #NetTransferReporterTest #test03NetTransferIsOnlyAffectedByTransfersInReceptiveAccount stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfComposedPortfolioIsSumOfNetTransfers stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #PortfolioTest #test16NamedPortfolioShouldKnowItsName stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #PortfolioTest #test17UnnamedPortfolioShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test16UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test06UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:44:24'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/16/2020 00:44:27'!
ERROR!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'AM 11/16/2020 00:45:05' prior: 50896386!
initializeNamed: aReceptiveAccountName 
	
	transactions := OrderedCollection new.
	accountName := aReceptiveAccountName.! !

!testRun: #AccountSummaryReporterTest #test01EmptyAccountSummaryShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:45:15'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummary stamp: 'AM 11/16/2020 00:45:15'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithMoreThanOneTransactionShowsThemInAccountSummary stamp: 'AM 11/16/2020 00:45:15'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04EmptyPortfolioBalanceShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:45:15'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/16/2020 00:45:15'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/16/2020 00:45:15'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/16/2020 00:45:15'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/16/2020 00:45:15'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/16/2020 00:45:15'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/16/2020 00:45:15'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/16/2020 00:45:15'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:45:15'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test07UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:45:15'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/16/2020 00:45:15'!
PASSED!

!testRun: #NetTransferReporterTest #test02NetTransferIsAffectedCorrectlyInReceptiveAccount stamp: 'AM 11/16/2020 00:45:15'!
PASSED!

!testRun: #NetTransferReporterTest #test03NetTransferIsOnlyAffectedByTransfersInReceptiveAccount stamp: 'AM 11/16/2020 00:45:15'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/16/2020 00:45:15'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfComposedPortfolioIsSumOfNetTransfers stamp: 'AM 11/16/2020 00:45:15'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/16/2020 00:45:15'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/16/2020 00:45:15'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/16/2020 00:45:15'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/16/2020 00:45:15'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/16/2020 00:45:15'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/16/2020 00:45:15'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/16/2020 00:45:15'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/16/2020 00:45:15'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #PortfolioTest #test16NamedPortfolioShouldKnowItsName stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #PortfolioTest #test17UnnamedPortfolioShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test16UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test06UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:45:16'!
PASSED!

Portfolio subclass: #PortfolioNamed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #PortfolioNamed category: 'Portfolio' stamp: 'AM 11/16/2020 00:45:33'!
Portfolio subclass: #PortfolioNamed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

Portfolio subclass: #PortfolioUnnamed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #PortfolioUnnamed category: 'Portfolio' stamp: 'AM 11/16/2020 00:45:42'!
Portfolio subclass: #PortfolioUnnamed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!
!PortfolioNamed methodsFor: 'accessing' stamp: 'AM 11/16/2020 00:45:57' overrides: 50891973!
accountName

	accountName ifNil: [self error: self class canNotRetrieveNameOfUnnamedPortfolioErrorDescription ].
	^ accountName! !
!PortfolioUnnamed methodsFor: 'accessing' stamp: 'AM 11/16/2020 00:45:57' overrides: 50891973!
accountName

	accountName ifNil: [self error: self class canNotRetrieveNameOfUnnamedPortfolioErrorDescription ].
	^ accountName! !

!methodRemoval: Portfolio #accountName stamp: 'AM 11/16/2020 00:45:57'!
accountName

	accountName ifNil: [self error: self class canNotRetrieveNameOfUnnamedPortfolioErrorDescription ].
	^ accountName!
!PortfolioNamed methodsFor: 'accessing' stamp: 'AM 11/16/2020 00:46:14' prior: 50898850!
accountName

	^ accountName! !
!PortfolioUnnamed methodsFor: 'accessing' stamp: 'AM 11/16/2020 00:46:28' prior: 50898858!
accountName

	self error: self class canNotRetrieveNameOfUnnamedPortfolioErrorDescription! !
!Portfolio methodsFor: 'accessing' stamp: 'AM 11/16/2020 00:46:43'!
accountName
	self subclassResponsibility ! !
!Portfolio methodsFor: 'accessing' stamp: 'AM 11/16/2020 00:46:49' prior: 50898882!
accountName

	self subclassResponsibility ! !
!PortfolioNamed methodsFor: 'testing' stamp: 'AM 11/16/2020 00:47:11' overrides: 50892084!
isNamed
	^ accountName isNil not.! !
!PortfolioUnnamed methodsFor: 'testing' stamp: 'AM 11/16/2020 00:47:11' overrides: 50892084!
isNamed
	^ accountName isNil not.! !

!methodRemoval: Portfolio #isNamed stamp: 'AM 11/16/2020 00:47:11'!
isNamed
	^ accountName isNil not.!
!Portfolio methodsFor: 'testing' stamp: 'AM 11/16/2020 00:47:16'!
isNamed
	^ accountName isNil not.! !
!Portfolio methodsFor: 'testing' stamp: 'AM 11/16/2020 00:47:23' prior: 50898904!
isNamed
	
	self subclassResponsibility ! !
!PortfolioNamed methodsFor: 'testing' stamp: 'AM 11/16/2020 00:47:31' prior: 50898892 overrides: 50898908!
isNamed
	^ true! !
!PortfolioUnnamed methodsFor: 'testing' stamp: 'AM 11/16/2020 00:47:40' prior: 50898897 overrides: 50898908!
isNamed
	^ false! !

!testRun: #AccountSummaryReporterTest #test01EmptyAccountSummaryShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummary stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithMoreThanOneTransactionShowsThemInAccountSummary stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04EmptyPortfolioBalanceShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/16/2020 00:47:47'!
FAILURE!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/16/2020 00:47:47'!
FAILURE!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/16/2020 00:47:47'!
FAILURE!

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test07UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #NetTransferReporterTest #test02NetTransferIsAffectedCorrectlyInReceptiveAccount stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #NetTransferReporterTest #test03NetTransferIsOnlyAffectedByTransfersInReceptiveAccount stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfComposedPortfolioIsSumOfNetTransfers stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #PortfolioTest #test16NamedPortfolioShouldKnowItsName stamp: 'AM 11/16/2020 00:47:47'!
ERROR!

!testRun: #PortfolioTest #test17UnnamedPortfolioShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:47:47'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test16UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/16/2020 00:47:47'!
FAILURE!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/16/2020 00:47:47'!
FAILURE!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/16/2020 00:47:47'!
FAILURE!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test06UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:47:47'!
PASSED!

!testRun: #PortfolioTest #test16NamedPortfolioShouldKnowItsName stamp: 'AM 11/16/2020 00:47:49'!
ERROR!
!Portfolio class methodsFor: 'instance creations' stamp: 'AM 11/16/2020 00:48:15' prior: 50898111!
named: anAccountName 
	
	^ PortfolioNamed basicNew initializeNamed: anAccountName! !
!Portfolio class methodsFor: 'instance creations' stamp: 'AM 11/16/2020 00:48:31' overrides: 16783533!
new
	
	^ PortfolioUnnamed basicNew initialize! !

!testRun: #AccountSummaryReporterTest #test01EmptyAccountSummaryShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummary stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithMoreThanOneTransactionShowsThemInAccountSummary stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04EmptyPortfolioBalanceShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/16/2020 00:48:44'!
ERROR!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/16/2020 00:48:44'!
ERROR!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/16/2020 00:48:44'!
ERROR!

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test07UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #NetTransferReporterTest #test02NetTransferIsAffectedCorrectlyInReceptiveAccount stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #NetTransferReporterTest #test03NetTransferIsOnlyAffectedByTransfersInReceptiveAccount stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfComposedPortfolioIsSumOfNetTransfers stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #PortfolioTest #test16NamedPortfolioShouldKnowItsName stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #PortfolioTest #test17UnnamedPortfolioShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test16UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/16/2020 00:48:44'!
ERROR!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/16/2020 00:48:44'!
ERROR!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/16/2020 00:48:44'!
ERROR!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test06UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:48:44'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/16/2020 00:48:46'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'AM 11/16/2020 00:49:21' prior: 50892047!
initializeNamed: anAccountName 

	self initialize.	
	accountName := anAccountName.! !

!testRun: #AccountSummaryReporterTest #test01EmptyAccountSummaryShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummary stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithMoreThanOneTransactionShowsThemInAccountSummary stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04EmptyPortfolioBalanceShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test07UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #NetTransferReporterTest #test02NetTransferIsAffectedCorrectlyInReceptiveAccount stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #NetTransferReporterTest #test03NetTransferIsOnlyAffectedByTransfersInReceptiveAccount stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfComposedPortfolioIsSumOfNetTransfers stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #PortfolioTest #test16NamedPortfolioShouldKnowItsName stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #PortfolioTest #test17UnnamedPortfolioShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test16UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:49:27'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test06UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:49:27'!
PASSED!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'AM 11/16/2020 00:49:41' prior: 50898586!
initializeNamed: aReceptiveAccountName 
	
	self initialize.
	accountName := aReceptiveAccountName.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 00:49:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:49:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:49:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 00:49:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 00:49:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 00:49:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 00:49:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/16/2020 00:49:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/16/2020 00:49:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/16/2020 00:49:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/16/2020 00:49:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/16/2020 00:49:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/16/2020 00:49:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/16/2020 00:49:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 00:49:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test16UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:49:42'!
PASSED!

!testRun: #AccountSummaryReporterTest #test01EmptyAccountSummaryShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummary stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithMoreThanOneTransactionShowsThemInAccountSummary stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04EmptyPortfolioBalanceShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test07UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #NetTransferReporterTest #test02NetTransferIsAffectedCorrectlyInReceptiveAccount stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #NetTransferReporterTest #test03NetTransferIsOnlyAffectedByTransfersInReceptiveAccount stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfComposedPortfolioIsSumOfNetTransfers stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #PortfolioTest #test16NamedPortfolioShouldKnowItsName stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #PortfolioTest #test17UnnamedPortfolioShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test16UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test06UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:49:47'!
PASSED!

----QUIT----(16 November 2020 00:53:35) CuisUniversity-4384.image priorSource: 17888955!

----STARTUP---- (16 November 2020 00:56:25) as /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/imagenportfolio2TEST/CuisUniversity-4384.image!


!classRemoval: #Transfer stamp: 'AM 11/16/2020 00:56:42'!
Object subclass: #Transfer
	instanceVariableNames: 'value sending receiving'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #SimpleTreeStructureReporter stamp: 'AM 11/16/2020 00:56:44'!
TreeStructureReporter subclass: #SimpleTreeStructureReporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #DetailedTreeStructureReporter stamp: 'AM 11/16/2020 00:56:45'!
TreeStructureReporter subclass: #DetailedTreeStructureReporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #TreeStructureReporter stamp: 'AM 11/16/2020 00:56:46'!
Reporter subclass: #TreeStructureReporter
	instanceVariableNames: 'numberOfLeadingTabs treeStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #NetTransferReporter stamp: 'AM 11/16/2020 00:56:47'!
Reporter subclass: #NetTransferReporter
	instanceVariableNames: 'netTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #AccountSummaryReporter stamp: 'AM 11/16/2020 00:56:49'!
Reporter subclass: #AccountSummaryReporter
	instanceVariableNames: 'accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #Reporter stamp: 'AM 11/16/2020 00:56:50'!
Object subclass: #Reporter
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #Withdraw stamp: 'AM 11/16/2020 00:56:51'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #SendingTransferComponent stamp: 'AM 11/16/2020 00:56:53'!
TransferComponent subclass: #SendingTransferComponent
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #ReceivingTransferComponent stamp: 'AM 11/16/2020 00:56:54'!
TransferComponent subclass: #ReceivingTransferComponent
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #TransferComponent stamp: 'AM 11/16/2020 00:56:55'!
AccountTransaction subclass: #TransferComponent
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #Deposit stamp: 'AM 11/16/2020 00:56:56'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #AccountTransaction stamp: 'AM 11/16/2020 00:56:57'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #ReceptiveAccountUnnamed stamp: 'AM 11/16/2020 00:56:58'!
ReceptiveAccount subclass: #ReceptiveAccountUnnamed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #ReceptiveAccountNamed stamp: 'AM 11/16/2020 00:57:00'!
ReceptiveAccount subclass: #ReceptiveAccountNamed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #ReceptiveAccount stamp: 'AM 11/16/2020 00:57:01'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #PortfolioUnnamed stamp: 'AM 11/16/2020 00:57:02'!
Portfolio subclass: #PortfolioUnnamed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #PortfolioNamed stamp: 'AM 11/16/2020 00:57:03'!
Portfolio subclass: #PortfolioNamed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #Portfolio stamp: 'AM 11/16/2020 00:57:05'!
Account subclass: #Portfolio
	instanceVariableNames: 'parents accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #Account stamp: 'AM 11/16/2020 00:57:06'!
Object subclass: #Account
	instanceVariableNames: 'accountName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #SimpleTreeStructureReporterTest stamp: 'AM 11/16/2020 00:57:07'!
TestCase subclass: #SimpleTreeStructureReporterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #ReceptiveAccountTest stamp: 'AM 11/16/2020 00:57:09'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #PortfolioTest stamp: 'AM 11/16/2020 00:57:10'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #NetTransferReporterTest stamp: 'AM 11/16/2020 00:57:12'!
TestCase subclass: #NetTransferReporterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #DetailedTreeStructureReporterTest stamp: 'AM 11/16/2020 00:57:13'!
TestCase subclass: #DetailedTreeStructureReporterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #AccountSummaryReporterTest stamp: 'AM 11/16/2020 00:57:14'!
TestCase subclass: #AccountSummaryReporterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

----End fileIn of /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/isw1-2c2020-ejercicios/19-Portfolio2/Portfolio-SinSubclasificar.st----!

!testRun: #AccountSummaryReporterTest #test01EmptyAccountSummaryShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummary stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithMoreThanOneTransactionShowsThemInAccountSummary stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04EmptyPortfolioBalanceShouldOnlyPrintBalance stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test07UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #NetTransferReporterTest #test02NetTransferIsAffectedCorrectlyInReceptiveAccount stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #NetTransferReporterTest #test03NetTransferIsOnlyAffectedByTransfersInReceptiveAccount stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfComposedPortfolioIsSumOfNetTransfers stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #PortfolioTest #test16NamedPortfolioShouldKnowItsName stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #PortfolioTest #test17UnnamedPortfolioShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test16UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test06UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 00:58:17'!
PASSED!

----STARTUP---- (16 November 2020 14:50:38) as /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/imagenportfolio2TEST/CuisUniversity-4384.image!


!classRemoval: #Transfer stamp: 'AM 11/16/2020 14:50:54'!
Object subclass: #Transfer
	instanceVariableNames: 'value sending receiving'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #SimpleTreeStructureReporter stamp: 'AM 11/16/2020 14:50:55'!
TreeStructureReporter subclass: #SimpleTreeStructureReporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #DetailedTreeStructureReporter stamp: 'AM 11/16/2020 14:50:57'!
TreeStructureReporter subclass: #DetailedTreeStructureReporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #TreeStructureReporter stamp: 'AM 11/16/2020 14:50:58'!
Reporter subclass: #TreeStructureReporter
	instanceVariableNames: 'numberOfLeadingTabs treeStructure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #NetTransferReporter stamp: 'AM 11/16/2020 14:50:59'!
Reporter subclass: #NetTransferReporter
	instanceVariableNames: 'netTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #AccountSummaryReporter stamp: 'AM 11/16/2020 14:51:00'!
Reporter subclass: #AccountSummaryReporter
	instanceVariableNames: 'accountSummary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #Reporter stamp: 'AM 11/16/2020 14:51:02'!
Object subclass: #Reporter
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #Withdraw stamp: 'AM 11/16/2020 14:51:03'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #SendingTransferComponent stamp: 'AM 11/16/2020 14:51:04'!
TransferComponent subclass: #SendingTransferComponent
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #ReceivingTransferComponent stamp: 'AM 11/16/2020 14:51:05'!
TransferComponent subclass: #ReceivingTransferComponent
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #TransferComponent stamp: 'AM 11/16/2020 14:51:07'!
AccountTransaction subclass: #TransferComponent
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #Deposit stamp: 'AM 11/16/2020 14:51:08'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #AccountTransaction stamp: 'AM 11/16/2020 14:51:09'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #ReceptiveAccountUnnamed stamp: 'AM 11/16/2020 14:51:10'!
ReceptiveAccount subclass: #ReceptiveAccountUnnamed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #ReceptiveAccountNamed stamp: 'AM 11/16/2020 14:51:11'!
ReceptiveAccount subclass: #ReceptiveAccountNamed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #ReceptiveAccount stamp: 'AM 11/16/2020 14:51:13'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #PortfolioUnnamed stamp: 'AM 11/16/2020 14:51:14'!
Portfolio subclass: #PortfolioUnnamed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #PortfolioNamed stamp: 'AM 11/16/2020 14:51:15'!
Portfolio subclass: #PortfolioNamed
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #Portfolio stamp: 'AM 11/16/2020 14:51:16'!
Account subclass: #Portfolio
	instanceVariableNames: 'parents accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #Account stamp: 'AM 11/16/2020 14:51:18'!
Object subclass: #Account
	instanceVariableNames: 'accountName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #SimpleTreeStructureReporterTest stamp: 'AM 11/16/2020 14:51:19'!
TestCase subclass: #SimpleTreeStructureReporterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #ReceptiveAccountTest stamp: 'AM 11/16/2020 14:51:20'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #PortfolioTest stamp: 'AM 11/16/2020 14:51:22'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #NetTransferReporterTest stamp: 'AM 11/16/2020 14:51:24'!
TestCase subclass: #NetTransferReporterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #DetailedTreeStructureReporterTest stamp: 'AM 11/16/2020 14:51:25'!
TestCase subclass: #DetailedTreeStructureReporterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classRemoval: #AccountSummaryReporterTest stamp: 'AM 11/16/2020 14:51:26'!
TestCase subclass: #AccountSummaryReporterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

----End fileIn of /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/isw1-2c2020-ejercicios/19-Portfolio2/Portfolio.st----!

!testRun: #AccountSummaryReporterTest #test01EmptyAccountSummaryShouldOnlyPrintBalance stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummary stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithMoreThanOneTransactionShowsThemInAccountSummary stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04EmptyPortfolioBalanceShouldOnlyPrintBalance stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test07UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #NetTransferReporterTest #test02NetTransferIsAffectedCorrectlyInReceptiveAccount stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #NetTransferReporterTest #test03NetTransferIsOnlyAffectedByTransfersInReceptiveAccount stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfComposedPortfolioIsSumOfNetTransfers stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #PortfolioTest #test16NamedPortfolioShouldKnowItsName stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #PortfolioTest #test17UnnamedPortfolioShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test16UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test06UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 14:52:11'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/16/2020 14:52:40'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/16/2020 14:52:40'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/16/2020 14:52:40'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/16/2020 14:52:40'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/16/2020 14:52:40'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/16/2020 14:52:40'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/16/2020 14:52:40'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/16/2020 14:52:40'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/16/2020 14:52:40'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/16/2020 14:52:40'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/16/2020 14:52:40'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/16/2020 14:52:40'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/16/2020 14:52:40'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/16/2020 14:52:40'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/16/2020 14:52:40'!
PASSED!

!testRun: #PortfolioTest #test16NamedPortfolioShouldKnowItsName stamp: 'AM 11/16/2020 14:52:40'!
PASSED!

!testRun: #PortfolioTest #test17UnnamedPortfolioShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 14:52:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 14:52:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 14:52:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 14:52:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 14:52:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 14:52:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 14:52:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 14:52:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/16/2020 14:52:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/16/2020 14:52:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/16/2020 14:52:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/16/2020 14:52:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/16/2020 14:52:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/16/2020 14:52:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/16/2020 14:52:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 14:52:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test16UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 14:52:42'!
PASSED!
!Account methodsFor: 'nil' stamp: 'AM 11/16/2020 14:53:10'!
accountName
	
	self subclassResponsibility ! !

Account subclass: #Portfolio
	instanceVariableNames: 'parents accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #Portfolio category: 'Portfolio' stamp: 'AM 11/16/2020 14:53:49'!
Account subclass: #Portfolio
	instanceVariableNames: 'parents accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio' stamp: 'AM 11/16/2020 14:54:00'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'isNamed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio' stamp: 'AM 11/16/2020 14:54:14'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

Object subclass: #Account
	instanceVariableNames: 'accountName isNamed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!classDefinition: #Account category: 'Portfolio' stamp: 'AM 11/16/2020 14:54:20'!
Object subclass: #Account
	instanceVariableNames: 'accountName isNamed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio'!

!testRun: #AccountSummaryReporterTest #test01EmptyAccountSummaryShouldOnlyPrintBalance stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummary stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithMoreThanOneTransactionShowsThemInAccountSummary stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04EmptyPortfolioBalanceShouldOnlyPrintBalance stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test07UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #NetTransferReporterTest #test02NetTransferIsAffectedCorrectlyInReceptiveAccount stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #NetTransferReporterTest #test03NetTransferIsOnlyAffectedByTransfersInReceptiveAccount stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfComposedPortfolioIsSumOfNetTransfers stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #PortfolioTest #test16NamedPortfolioShouldKnowItsName stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #PortfolioTest #test17UnnamedPortfolioShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 14:54:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 14:54:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/16/2020 14:54:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/16/2020 14:54:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/16/2020 14:54:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/16/2020 14:54:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/16/2020 14:54:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/16/2020 14:54:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/16/2020 14:54:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 14:54:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test16UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 14:54:25'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/16/2020 14:54:25'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/16/2020 14:54:25'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/16/2020 14:54:25'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/16/2020 14:54:25'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 14:54:25'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test06UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 14:54:25'!
PASSED!

!testRun: #AccountSummaryReporterTest #test01EmptyAccountSummaryShouldOnlyPrintBalance stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #AccountSummaryReporterTest #test02AReceptiveAccountWithOneTransactionShowsItInSummary stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #AccountSummaryReporterTest #test03AReceptiveAccountWithMoreThanOneTransactionShowsThemInAccountSummary stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #AccountSummaryReporterTest #test04EmptyPortfolioBalanceShouldOnlyPrintBalance stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #AccountSummaryReporterTest #test05AccountSummaryOfPortfolioWithReceptiveAccountsShowsTheirTransactionsAndBalance stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #AccountSummaryReporterTest #test06PortfolioAccountSummaryIsCalculatedRecursively stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test01DetailedReportShowsNameAndBalanceOnEmptyReceptiveAccount stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test02DetailedReportShowsEveryTransactionOnReceptiveAccount stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test03DetailedReportOnEmptyPortfolioShowsNameAndBalance stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test04DetailedReportOnPortoflioWithReceptiveAccountsShowsTheirNamesAndBalances stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test05DetailedReportIsRecursiveOnPortfolio stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test06UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #DetailedTreeStructureReporterTest #test07UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #NetTransferReporterTest #test01AnEmptyReceptiveAccountHasZeroNetTransfer stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #NetTransferReporterTest #test02NetTransferIsAffectedCorrectlyInReceptiveAccount stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #NetTransferReporterTest #test03NetTransferIsOnlyAffectedByTransfersInReceptiveAccount stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #NetTransferReporterTest #test04NetTransferOfEmptyPortfolioIsZero stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #NetTransferReporterTest #test05NetTransferOfComposedPortfolioIsSumOfNetTransfers stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #NetTransferReporterTest #test06NetTransferIsCalculatedRecursivelyInAPortfolio stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #PortfolioTest #test16NamedPortfolioShouldKnowItsName stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #PortfolioTest #test17UnnamedPortfolioShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test08BalanceShouldBeDecreasedOnTransferSendingAccount stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test09BalanceShouldBeIncreasedOnTransferReceivingAccount stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test10BalanceOfAnAccountIsAffectedBySendingAndReceivingTransfers stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test11AccountsRegisterTransfersOnlyWhenAffected stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test12TransferComponentsKnowTheirTransfer stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test13AnAccountShouldNotTransferToItself stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test14TransferValueMustBePositive stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test15NamedReceptiveAccountShouldKnowItsName stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test16UnnamedReceptiveAccountShouldNotBeNamedAndSignalNoName stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test01AReceptiveAccountShowsItselfOnTreeStructure stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test02TreeStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test03APortfolioWithReceptiveAccountsShowsTreeStructure stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test04TreeStructureIsCalculatedRecursivelyInPortfolio stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test05UnnamedReceptiveAccountShowsDefaultName stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

!testRun: #SimpleTreeStructureReporterTest #test06UnnamedPortfolioShowsDefaultName stamp: 'AM 11/16/2020 15:04:44'!
PASSED!

----QUIT----(16 November 2020 15:05:01) CuisUniversity-4384.image priorSource: 18185564!