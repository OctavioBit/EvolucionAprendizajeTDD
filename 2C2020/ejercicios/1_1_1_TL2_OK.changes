----STARTUP---- (20 November 2020 19:14:21) as /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/TusLibros/CuisUniversity-4384.image!


!classRemoval: #Cart stamp: 'AM 11/20/2020 19:14:52'!
Object subclass: #Cart
	instanceVariableNames: 'books catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'AM 11/20/2020 19:14:55'!
TestCase subclass: #CartTest
	instanceVariableNames: 'harryPotter lordOfTheRings ageOfEmpires'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/isw1-2c2020-ejercicios/20-TusLibros/TusLibros.st----!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'AM 11/20/2020 19:15:25'!
ERROR!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'AM 11/20/2020 19:15:25'!
ERROR!
!Cart methodsFor: 'initialization' stamp: 'AM 11/20/2020 19:15:43' prior: 50870482!
initializeWithCatalogue: aCatalogue
	
	catalogue := aCatalogue.
	books := OrderedCollection new.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'AM 11/20/2020 19:15:45'!
PASSED!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'AM 11/20/2020 19:15:45'!
PASSED!

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'AM 11/20/2020 19:15:45'!
PASSED!

!testRun: #CartTest #test04ABookShouldNotBeAddedWhenNotForSale stamp: 'AM 11/20/2020 19:15:45'!
PASSED!

!testRun: #CartTest #test05ABookAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'AM 11/20/2020 19:15:45'!
PASSED!

!testRun: #CartTest #test06ABookShouldNotBeAddedWithNonIntegerQuantity stamp: 'AM 11/20/2020 19:15:45'!
PASSED!

!testRun: #CartTest #test07ABookShouldNotBeAddedWithNonPositiveQuantity stamp: 'AM 11/20/2020 19:15:45'!
PASSED!

!testRun: #CartTest #test08ExternallyAddingBookToCartListShouldNotModifyCart stamp: 'AM 11/20/2020 19:15:45'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'AM 11/20/2020 19:15:47'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'AM 11/20/2020 19:15:47'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'AM 11/20/2020 19:15:47'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'AM 11/20/2020 19:15:47'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'AM 11/20/2020 19:15:47'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'AM 11/20/2020 19:15:47'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'AM 11/20/2020 19:16:09'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'AM 11/20/2020 19:16:17'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:16:48' prior: 50870527!
checkOut: aCart with: aCreditCard
	
	| total |
	
	(aCreditCard expirationDate < FixedGregorianDate today) ifTrue: [ self error: self class declinedCreditCardErrorDescription ] .
	
	aCart isEmpty ifTrue: [ self error: self class canNotCheckOutAnEmptyCartErrorDescription ] .
	
	merchantProcessor process.
	
	total := aCart listCart sum: [ :aProduct | catalogue at: aProduct ].
	
	^ Ticket total: total products: aCart listCart .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:17:25' prior: 50870244!
test03
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble aBook catalogue |
	
	aBook := 'Harry Potter'.	
	catalogue := Dictionary with: aBook -> 100.
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue .

	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: aBook withOccurrences: 1.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	aCashier checkOut: aCart with: aCreditCard.

	self assert: (aMerchantProcessorDouble receivedMessage: #process) .
! !

!testRun: #CashierTest #test03 stamp: 'AM 11/20/2020 19:17:27'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'AM 11/20/2020 19:17:27'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'AM 11/20/2020 19:17:27'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'AM 11/20/2020 19:17:27'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'AM 11/20/2020 19:17:27'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'AM 11/20/2020 19:17:27'!
PASSED!
!MerchantProcessorDouble methodsFor: 'testing' stamp: 'AM 11/20/2020 19:18:09'!
receivedAMessage

	^ messages notEmpty .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:18:09' prior: 50870223!
test02CashierShouldNotDispatchExpiredCreditCard
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.
	aCart := Cart withCatalogue: OrderedCollection new.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier declinedCreditCardErrorDescription.

	self deny: aMerchantProcessorDouble receivedAMessage.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:18:09' prior: 50870202!
test01CashierShouldNotDispatchEmptyCart
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.

	aCart := Cart withCatalogue: OrderedCollection new.	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier canNotCheckOutAnEmptyCartErrorDescription .
	
	self deny: aMerchantProcessorDouble receivedAMessage.
! !

!methodRemoval: MerchantProcessorDouble #wasCalled stamp: 'AM 11/20/2020 19:18:09'!
wasCalled

	^ messages notEmpty .!
!CartTest methodsFor: 'tests - adding' stamp: 'AM 11/20/2020 19:19:04' prior: 50870104!
test03ManyBooksAddedToCartAreSuccessfullyAdded

	| aCart catalogue |
	
	catalogue := Dictionary with: harryPotter -> 100
						with: lordOfTheRings -> 100
						with: ageOfEmpires -> 100.
	
	aCart := Cart withCatalogue: catalogue.
	
	aCart addToCart: harryPotter withOccurrences: 1. 
	aCart addToCart: lordOfTheRings withOccurrences: 1.
	aCart addToCart: ageOfEmpires withOccurrences: 1.
	
	self deny: aCart isEmpty.
	self assert: ( aCart listCart hasEqualElements: {harryPotter. lordOfTheRings. ageOfEmpires} )! !

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'AM 11/20/2020 19:21:11'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'validCardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'AM 11/20/2020 19:21:12'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'validCardNumber monthInACalendar'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'AM 11/20/2020 19:21:14'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'validCardNumber monthInACalendar hernan'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'AM 11/20/2020 19:21:15'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'validCardNumber monthInACalendar hernan validCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:21:43' overrides: 16927572!
setUp

	
	
	validCardNumber := 4444444444444444.
	monthInACalendar := January, 2021.
	hernan := 'Hern�n'.
	
	validCreditCard := CreditCard withNumber: validCardNumber expirationDate: monthInACalendar owner: hernan.
	
	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:21:52' prior: 50870956 overrides: 16927572!
setUp
	
	validCardNumber := 4444444444444444.
	monthInACalendar := January, 2021.
	hernan := 'Hern�n'.
	
	validCreditCard := CreditCard withNumber: validCardNumber expirationDate: monthInACalendar owner: hernan.
	
	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:22:21' prior: 50870334!
test01ValidCardPropertiesAreCorrect
	
	self assert: validCreditCard number equals: validCardNumber .
	self assert: validCreditCard expirationDate equals: monthInACalendar .
	self assert: validCreditCard owner equals: hernan.

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:22:58' prior: 50870351!
test02CardNumberShouldNotHaveLessThan16Digits

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 10 ^ 15 - 1.
	aMonthInCalendar := January, 2021.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: monthInACalendar owner: hernan ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:23:04' prior: 50870988!
test02CardNumberShouldNotHaveLessThan16Digits

	| aCardId |
	
	aCardId := 10 ^ 15 - 1.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: monthInACalendar owner: hernan ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:23:36' prior: 50870365!
test03CardExpirationDateShouldBeAMonthOfAnYear

	| aMonthInCalendar |
	
	aMonthInCalendar := January/01/2021.
	
	self should: [ CreditCard withNumber: validCardNumber expirationDate: aMonthInCalendar owner: hernan ]
	raise: Error
	withMessageText: CreditCard invalidExpirationDateErrorDescription .
	

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:24:01' prior: 50871015!
test03CardExpirationDateShouldBeAMonthOfAnYear

	| aDayInAMonthOfAnYear |
	
	aDayInAMonthOfAnYear := January/01/2021.
	
	self should: [ CreditCard withNumber: validCardNumber expirationDate: aDayInAMonthOfAnYear owner: hernan ]
	raise: Error
	withMessageText: CreditCard invalidExpirationDateErrorDescription .
	

	! !

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'AM 11/20/2020 19:24:03'!
PASSED!

!testRun: #CreditCardTest #test01ValidCardPropertiesAreCorrect stamp: 'AM 11/20/2020 19:24:03'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'AM 11/20/2020 19:24:03'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'AM 11/20/2020 19:24:03'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'AM 11/20/2020 19:24:03'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'AM 11/20/2020 19:24:04'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'AM 11/20/2020 19:24:04'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'AM 11/20/2020 19:24:04'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:24:28' prior: 50870380!
test04CardNumberShouldBeAnInteger

	| aCardId |
	
	aCardId := 0.5 .
	
	self should: [ CreditCard withNumber: aCardId expirationDate: monthInACalendar owner: hernan ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:24:40' prior: 50871069!
test04CardNumberShouldBeAnInteger

	| aNonIntegerCardNumber |
	
	aNonIntegerCardNumber := 0.5 .
	
	self should: [ CreditCard withNumber: aNonIntegerCardNumber expirationDate: monthInACalendar owner: hernan ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:24:58' prior: 50870394!
test05CardNumberShouldNotHaveMoreThan16Digits

	| anInvalidCardNumber aMonthInCalendar aPerson |
	
	anInvalidCardNumber := 10 ^ 16.
	aMonthInCalendar := January, 2021.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: anInvalidCardNumber expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:25:10' prior: 50871093!
test05CardNumberShouldNotHaveMoreThan16Digits

	| anInvalidCardNumber |
	
	anInvalidCardNumber := 10 ^ 16.
	
	self should: [ CreditCard withNumber: anInvalidCardNumber expirationDate: monthInACalendar owner: hernan ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:25:35' prior: 50870408!
test06OwnerNameShouldNotBeEmpty
	
	self should: [ CreditCard withNumber: validCardNumber expirationDate: monthInACalendar owner: '' ]
	raise: Error
	withMessageText: CreditCard invalidOwnerNameErrorDescription .
	

	! !

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'AM 11/20/2020 19:25:40'!
PASSED!

!testRun: #CreditCardTest #test01ValidCardPropertiesAreCorrect stamp: 'AM 11/20/2020 19:25:40'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'AM 11/20/2020 19:25:40'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'AM 11/20/2020 19:25:40'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'AM 11/20/2020 19:25:40'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'AM 11/20/2020 19:25:40'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'AM 11/20/2020 19:25:40'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'AM 11/20/2020 19:25:40'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:25:54' prior: 50870422!
test07OwnerNameShouldNotBeBlank

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 4444444444444444.
	aMonthInCalendar := January, 2021.
	aPerson := '          '.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: '      ' ]
	raise: Error
	withMessageText: CreditCard invalidOwnerNameErrorDescription .
	

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:26:13' prior: 50871159!
test07OwnerNameShouldNotBeBlank.
	
	self should: [ CreditCard withNumber: validCardNumber expirationDate: monthInACalendar owner: '      ' ]
	raise: Error
	withMessageText: CreditCard invalidOwnerNameErrorDescription .
	

	! !

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'AM 11/20/2020 19:26:14'!
PASSED!

!testRun: #CreditCardTest #test01ValidCardPropertiesAreCorrect stamp: 'AM 11/20/2020 19:26:14'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'AM 11/20/2020 19:26:14'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'AM 11/20/2020 19:26:14'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'AM 11/20/2020 19:26:14'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'AM 11/20/2020 19:26:14'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'AM 11/20/2020 19:26:14'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'AM 11/20/2020 19:26:14'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:27:51' prior: 50870857!
test02CashierShouldNotDispatchExpiredCreditCard
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.
	
	aCart := Cart withCatalogue: OrderedCollection new.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier declinedCreditCardErrorDescription.

	self deny: aMerchantProcessorDouble receivedAMessage.
! !

----QUIT----(20 November 2020 19:31:33) CuisUniversity-4384.image priorSource: 17228528!

----STARTUP---- (20 November 2020 19:31:36) as /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/TusLibros/CuisUniversity-4384.image!


----QUIT----(20 November 2020 19:31:47) CuisUniversity-4384.image priorSource: 17266594!

----STARTUP---- (23 November 2020 11:17:17) as /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/TusLibros/CuisUniversity-4384.image!


!classRemoval: #Ticket stamp: 'AM 11/23/2020 11:17:29'!
Object subclass: #Ticket
	instanceVariableNames: 'total products'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProcessorDouble stamp: 'AM 11/23/2020 11:17:30'!
Object subclass: #MerchantProcessorDouble
	instanceVariableNames: 'messages'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'AM 11/23/2020 11:17:32'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'AM 11/23/2020 11:17:34'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'AM 11/23/2020 11:17:35'!
Object subclass: #Cart
	instanceVariableNames: 'books catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'AM 11/23/2020 11:17:37'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'validCardNumber monthInACalendar hernan validCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'AM 11/23/2020 11:17:40'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'AM 11/23/2020 11:17:42'!
TestCase subclass: #CartTest
	instanceVariableNames: 'harryPotter lordOfTheRings ageOfEmpires'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/isw1-2c2020-ejercicios/20-TusLibros/TusLibros-2/TusLibros.st----!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'AM 11/23/2020 11:19:36'!
TestCase subclass: #CartTest
	instanceVariableNames: 'harryPotter lordOfTheRings ageOfEmpires harryPotterCatalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'setUp/tearDown' stamp: 'AM 11/23/2020 11:19:34' prior: 50871312 overrides: 16927572!
setUp

	harryPotter := #HarryPotter.
	lordOfTheRings := #LordOfTheRings.
	ageOfEmpires := #AgeOfEmpires.
	
	harryPotterCatalogue := Catalogue new; add: harryPotter withPrice: 100.
	! !
!CartTest methodsFor: 'tests - adding' stamp: 'AM 11/23/2020 11:19:54' prior: 50871318!
test01NewCartIsEmpty

	| anEmptyCart catalogue |
	
	catalogue := Catalogue new.
	
	anEmptyCart := Cart withCatalogue: catalogue.
	
	self assert: anEmptyCart isEmpty.
	self assert: anEmptyCart listCart isEmpty.! !
!CartTest methodsFor: 'tests - adding' stamp: 'AM 11/23/2020 11:20:03' prior: 50871328!
test02ABookAddedToCartIsSuccessfullyAdded

	| aCart |
	
	aCart := Cart withCatalogue: harryPotterCatalogue.
	
	aCart addToCart: harryPotter withOccurrences: 1.
	
	self deny: aCart isEmpty.
	self assert: ( aCart listCart hasEqualElements: {harryPotter} )! !
!CartTest methodsFor: 'tests - adding' stamp: 'AM 11/23/2020 11:20:15' prior: 50871359!
test05ABookAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce

	| aCart |
	
	aCart := Cart withCatalogue: harryPotterCatalogue.
	
	aCart addToCart: harryPotter withOccurrences: 2. 
	
	self assert: ( aCart listCart hasEqualElements: {harryPotter. harryPotter} )! !
!CartTest methodsFor: 'tests - adding' stamp: 'AM 11/23/2020 11:20:23' prior: 50871372!
test08ExternallyAddingBookToCartListShouldNotModifyCart

	| anEmptyCart catalogue emptyCartList |
	
	catalogue := Dictionary with: harryPotter -> 100.
	
	anEmptyCart := Cart withCatalogue: harryPotterCatalogue.
	emptyCartList := anEmptyCart listCart.
	emptyCartList add: harryPotter.
	
	self assert: anEmptyCart isEmpty.
	self assert: anEmptyCart listCart isEmpty.! !
!CartTest methodsFor: 'tests - adding' stamp: 'AM 11/23/2020 11:20:28' prior: 50872227!
test08ExternallyAddingBookToCartListShouldNotModifyCart

	| anEmptyCart emptyCartList |
	
	anEmptyCart := Cart withCatalogue: harryPotterCatalogue.
	emptyCartList := anEmptyCart listCart.
	emptyCartList add: harryPotter.
	
	self assert: anEmptyCart isEmpty.
	self assert: anEmptyCart listCart isEmpty.! !
!CartTest methodsFor: 'tests - errors' stamp: 'AM 11/23/2020 11:20:52' prior: 50871386!
test04ABookShouldNotBeAddedWhenNotForSale

	| aCart |
	
	aCart := Cart withCatalogue: harryPotterCatalogue.
	
	self should: [ aCart addToCart: lordOfTheRings withOccurrences: 1 ]
		raise: Error
		withMessageText: Cart bookIsNotForSaleErrorDescription.
		
	self assert: aCart isEmpty. ! !
!CartTest methodsFor: 'tests - errors' stamp: 'AM 11/23/2020 11:21:00' prior: 50871399!
test06ABookShouldNotBeAddedWithNonIntegerQuantity

	| aCart |
	
	aCart := Cart withCatalogue: harryPotterCatalogue.
	
	self should: [ aCart addToCart: harryPotter withOccurrences: 0.5 ]
		raise: Error
		withMessageText: Cart bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription.
		
	self assert: aCart isEmpty. ! !
!CartTest methodsFor: 'tests - errors' stamp: 'AM 11/23/2020 11:21:05' prior: 50871413!
test07ABookShouldNotBeAddedWithNonPositiveQuantity

	| aCart catalogue |
	
	catalogue := Dictionary with: harryPotter -> 100.
	
	aCart := Cart withCatalogue: harryPotterCatalogue.
	
	self should: [ aCart addToCart: harryPotter withOccurrences: 0 ]
		raise: Error
		withMessageText: Cart bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription.
		
	self assert: aCart isEmpty. ! !
!CartTest methodsFor: 'tests - errors' stamp: 'AM 11/23/2020 11:21:09' prior: 50872280!
test07ABookShouldNotBeAddedWithNonPositiveQuantity

	| aCart |
	
	aCart := Cart withCatalogue: harryPotterCatalogue.
	
	self should: [ aCart addToCart: harryPotter withOccurrences: 0 ]
		raise: Error
		withMessageText: Cart bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription.
		
	self assert: aCart isEmpty. ! !

!classDefinition: #CartTest category: 'TusLibros' stamp: 'AM 11/23/2020 11:22:11'!
TestCase subclass: #CartTest
	instanceVariableNames: 'harryPotter lordOfTheRings ageOfEmpires harryPotterCatalogue threeBookCatalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'setUp/tearDown' stamp: 'AM 11/23/2020 11:22:09' prior: 50872186 overrides: 16927572!
setUp

	harryPotter := #HarryPotter.
	lordOfTheRings := #LordOfTheRings.
	ageOfEmpires := #AgeOfEmpires.
	
	harryPotterCatalogue := Catalogue new; add: harryPotter withPrice: 100.
	threeBookCatalogue := Catalogue new; 
								add: harryPotter withPrice: 100;
								add: lordOfTheRings withPrice: 50;
								add: ageOfEmpires withPrice: 25.
								
	! !
!CartTest methodsFor: 'tests - adding' stamp: 'AM 11/23/2020 11:22:24' prior: 50871340!
test03ManyBooksAddedToCartAreSuccessfullyAdded

	| aCart |
	
	aCart := Cart withCatalogue: threeBookCatalogue .
	
	aCart addToCart: harryPotter withOccurrences: 1. 
	aCart addToCart: lordOfTheRings withOccurrences: 1.
	aCart addToCart: ageOfEmpires withOccurrences: 1.
	
	self deny: aCart isEmpty.
	self assert: ( aCart listCart hasEqualElements: {harryPotter. lordOfTheRings. ageOfEmpires} )! !

!classDefinition: #CatalogueTest category: 'TusLibros' stamp: 'AM 11/23/2020 11:23:32'!
TestCase subclass: #CatalogueTest
	instanceVariableNames: 'harryPotter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CatalogueTest category: 'TusLibros' stamp: 'AM 11/23/2020 11:23:33'!
TestCase subclass: #CatalogueTest
	instanceVariableNames: 'harryPotter lordOfTheRings'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CatalogueTest category: 'TusLibros' stamp: 'AM 11/23/2020 11:23:35'!
TestCase subclass: #CatalogueTest
	instanceVariableNames: 'harryPotter lordOfTheRings ageOfEmpires'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CatalogueTest methodsFor: 'as yet unclassified' stamp: 'AM 11/23/2020 11:23:30' overrides: 16927572!
setUp

	harryPotter := 'Harry Potter'.
	lordOfTheRings := 'Lord Of The Rings'.
	ageOfEmpires := 'Age Of Empires'.! !
!CatalogueTest methodsFor: 'as yet unclassified' stamp: 'AM 11/23/2020 11:23:51' prior: 50871643!
test01
	
	| aCatalogue |
	
	aCatalogue := Catalogue new.
	
	self deny: ( aCatalogue includes: harryPotter ).! !
!CatalogueTest methodsFor: 'as yet unclassified' stamp: 'AM 11/23/2020 11:24:08' prior: 50871650!
test02
	
	| aCatalogue |
	
	aCatalogue := Catalogue new.
	
	aCatalogue add: harryPotter withPrice: 100.
	
	self assert: ( aCatalogue includes: harryPotter ).
	self assert: ( aCatalogue priceFor: harryPotter ) equals: 100.! !
!CatalogueTest methodsFor: 'as yet unclassified' stamp: 'AM 11/23/2020 11:24:47' prior: 50871660!
test03
	
	| aCatalogue |
	
	aCatalogue := Catalogue new.
	
	aCatalogue add: harryPotter withPrice: 100.
	aCatalogue add: lordOfTheRings withPrice: 50.
	aCatalogue add: ageOfEmpires withPrice: 25.
	
	self assert: ( aCatalogue includes: harryPotter ).
	self assert: ( aCatalogue includes: lordOfTheRings ).
	self assert: ( aCatalogue includes: ageOfEmpires ).

	self assert: ( aCatalogue priceFor: harryPotter ) equals: 100.
	self assert: ( aCatalogue priceFor: lordOfTheRings ) equals: 50.
	self assert: ( aCatalogue priceFor: ageOfEmpires ) equals: 25.! !
!CatalogueTest methodsFor: 'as yet unclassified' stamp: 'AM 11/23/2020 11:25:04' prior: 50871684!
test04
	
	| aCatalogue |
	
	aCatalogue := Catalogue new.
	
	self should: [ aCatalogue add: harryPotter withPrice: 0 ]
	raise: Error
	withMessageText: Catalogue canNotAddProductWithNonPositivePrice.
	
	self deny: ( aCatalogue includes: harryPotter ) .
! !

!testRun: #CashierTest #test04 stamp: 'AM 11/23/2020 11:28:21'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'AM 11/23/2020 11:28:23'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'AM 11/23/2020 11:28:23'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'AM 11/23/2020 11:28:23'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'AM 11/23/2020 11:28:23'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'AM 11/23/2020 11:28:23'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'AM 11/23/2020 11:28:23'!
PASSED!

!testRun: #CashierTest #test07 stamp: 'AM 11/23/2020 11:28:23'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'AM 11/23/2020 11:28:46' prior: 50871572!
test06
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble catalogue harryPotter |
	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = aCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card is stolen'.
		].
		
	harryPotter := 'Harry Potter'.
	catalogue := (Dictionary with: harryPotter -> 100).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: harryPotter withOccurrences: 1.

	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText equals: 'Credit card is stolen'. anError isNested].

! !

!testRun: #CashierTest #test06 stamp: 'AM 11/23/2020 11:28:47'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'AM 11/23/2020 11:28:47'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'AM 11/23/2020 11:28:47'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'AM 11/23/2020 11:28:47'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'AM 11/23/2020 11:28:47'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'AM 11/23/2020 11:28:47'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'AM 11/23/2020 11:28:47'!
PASSED!

!testRun: #CashierTest #test07 stamp: 'AM 11/23/2020 11:28:47'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'AM 11/23/2020 11:29:07' prior: 50872449!
test06
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble catalogue harryPotter |
	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = aCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card is stolen'.
		].
		
	harryPotter := 'Harry Potter'.
	catalogue := (Dictionary with: harryPotter -> 100).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: harryPotter withOccurrences: 1.

	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText equals: 'Credit card is stolen'].

! !

----SNAPSHOT----(23 November 2020 11:38:34) CuisUniversity-4384.image priorSource: 17266819!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'AM 11/23/2020 11:40:08' prior: 50872501!
test06
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble catalogue harryPotter |
	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = aCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card is stolen'.
		].
		
	harryPotter := 'Harry Potter'.
	catalogue := (Dictionary with: harryPotter -> 100).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: harryPotter withOccurrences: 1.

	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText equals: 'Credit card is stolen'. anError isNested].

! !

!testRun: #CashierTest #test06 stamp: 'AM 11/23/2020 11:40:10'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'AM 11/23/2020 11:40:10'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'AM 11/23/2020 11:40:10'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'AM 11/23/2020 11:40:10'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'AM 11/23/2020 11:40:10'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'AM 11/23/2020 11:40:10'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'AM 11/23/2020 11:40:10'!
PASSED!

!testRun: #CashierTest #test07 stamp: 'AM 11/23/2020 11:40:10'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'AM 11/23/2020 11:40:55' prior: 50871894!
checkOut: aCart with: aCreditCard
	
	| total |
	
	(aCreditCard expirationDate < FixedGregorianDate today) ifTrue: [ self error: self class declinedCreditCardErrorDescription ] .
	
	aCart isEmpty ifTrue: [ self error: self class canNotCheckOutAnEmptyCartErrorDescription ] .
	
	total := aCart listCart sum: [ :aProduct | catalogue at: aProduct ].
	
	[ merchantProcessor debit: total from: aCreditCard ] on: Error do: [:anError | self error: anError messageText ].

	^ Ticket total: total products: aCart listCart .! !

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'AM 11/23/2020 11:40:57'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'AM 11/23/2020 11:40:57'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'AM 11/23/2020 11:40:57'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'AM 11/23/2020 11:40:57'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'AM 11/23/2020 11:40:57'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'AM 11/23/2020 11:40:57'!
PASSED!

!testRun: #CashierTest #test07 stamp: 'AM 11/23/2020 11:40:57'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'AM 11/23/2020 11:49:45' prior: 50872534!
test06
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble catalogue harryPotter |
	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = aCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card is stolen'.
		].
		
	harryPotter := 'Harry Potter'.
	catalogue := (Dictionary with: harryPotter -> 100).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: harryPotter withOccurrences: 1.

	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText equals: 'Credit card is stolen'. self assert: thisContext sender class equals: Cashier].

! !

!testRun: #CashierTest #test06 stamp: 'AM 11/23/2020 11:49:47'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'AM 11/23/2020 11:50:28' prior: 50872624!
test06
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble catalogue harryPotter |
	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = aCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card is stolen'.
		].
		
	harryPotter := 'Harry Potter'.
	catalogue := (Dictionary with: harryPotter -> 100).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: harryPotter withOccurrences: 1.

	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withExceptionDo: [ :anError | self halt. self assert: anError messageText equals: 'Credit card is stolen'.].

! !

anError!

thisContext !

self sender!

self receiver !
!Cashier methodsFor: 'as yet unclassified' stamp: 'AM 11/23/2020 11:52:06' prior: 50872586!
checkOut: aCart with: aCreditCard
	
	| total |
	
	(aCreditCard expirationDate < FixedGregorianDate today) ifTrue: [ self error: self class declinedCreditCardErrorDescription ] .
	
	aCart isEmpty ifTrue: [ self error: self class canNotCheckOutAnEmptyCartErrorDescription ] .
	
	total := aCart listCart sum: [ :aProduct | catalogue at: aProduct ].
	
	merchantProcessor debit: total from: aCreditCard.

	^ Ticket total: total products: aCart listCart .! !

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'AM 11/23/2020 11:52:08'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'AM 11/23/2020 11:52:08'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'AM 11/23/2020 11:52:08'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'AM 11/23/2020 11:52:08'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'AM 11/23/2020 11:52:08'!
PASSED!

!testRun: #CashierTest #test07 stamp: 'AM 11/23/2020 11:52:08'!
PASSED!

anError!

self receiver!

self receiver class!

----STARTUP---- (23 November 2020 11:58:33) as /home/agustin/Escritorio/Uba/Materias/Compu/ISW1/TusLibros/CuisUniversity-4384.image!

!CashierTest methodsFor: 'as yet unclassified' stamp: 'AM 11/23/2020 11:58:50' prior: 50871602!
test07
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble catalogue harryPotter |
	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = aCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. self halt.
		self error: 'Credit card has no funds'.
		].
		
	harryPotter := 'Harry Potter'.
	catalogue := (Dictionary with: harryPotter -> 100).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: harryPotter withOccurrences: 1.

	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText equals: 'Credit card has no funds' ].

! !