

----STARTUP---- (15 November 2020 13:18:13) as /home/cmarta/Downloads/parcial/limpio/linux64/CuisUniversity-4384.image!


----End fileIn of /home/cmarta/Workspace/FCEyN/IS1/docentes/18-Portfolio1/Portfolio-Solucion.st----!

TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 13:19:28'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 13:20:45'!
Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'no messages' stamp: 'CM 11/15/2020 13:20:38'!
test01

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 100 from: account1 to: account2.
		
	self assert: -100 equals: account1 balance .	
	self assert: 100 equals: account2 balance .
! !

!testRun: #TransferTest #test01 stamp: 'CM 11/15/2020 13:21:01'!
ERROR!

!testRun: #TransferTest #test01 stamp: 'CM 11/15/2020 13:21:01'!
ERROR!
!Transfer class methodsFor: 'instance creation' stamp: 'CM 11/15/2020 13:21:11'!
register: aSmallInteger from: aReceptiveAccount to: aReceptiveAccount3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeRegister: aSmallInteger from: aReceptiveAccount to: aReceptiveAccount3 ! !
!Transfer class methodsFor: 'instance creation' stamp: 'CM 11/15/2020 13:22:16' prior: 50868521!
register: aValue from: aSenderAccount to: aReceiverAccount 
	
	^ self new initializeRegister: aValue from: aSenderAccount to: aReceiverAccount .! !
!Transfer class methodsFor: 'instance creation' stamp: 'CM 11/15/2020 13:24:13' prior: 50868533!
register: aValue from: aSenderAccount to: aReceiverAccount 
	
	Withdraw register: aValue on: aReceiverAccount .
	Deposit register: aValue on: aReceiverAccount .! !

!testRun: #TransferTest #test01 stamp: 'CM 11/15/2020 13:24:15'!
FAILURE!

!testRun: #TransferTest #test01 stamp: 'CM 11/15/2020 13:24:15'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'CM 11/15/2020 13:24:31' prior: 50868541!
register: aValue from: aSenderAccount to: aReceiverAccount 
	
	Withdraw register: aValue on: aSenderAccount .
	Deposit register: aValue on: aReceiverAccount .! !

!testRun: #TransferTest #test01 stamp: 'CM 11/15/2020 13:24:33'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 13:25:11'!
test01TransferExtractsFromSenderAndAddsToReceiver

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 100 from: account1 to: account2.
		
	self assert: -100 equals: account1 balance .	
	self assert: 100 equals: account2 balance .
! !

!methodRemoval: TransferTest #test01 stamp: 'CM 11/15/2020 13:25:15'!
test01

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 100 from: account1 to: account2.
		
	self assert: -100 equals: account1 balance .	
	self assert: 100 equals: account2 balance .
!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 13:28:40'!
test02

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer register: 100 from: account1 to: account2.
		
	self assert: (account1 transactions includes: transfer senderTransaction) .
	self assert: (account2 transactions includes: transfer receiverTransaction) .
! !

Object subclass: #Transfer
	instanceVariableNames: 'incomingTransfer outgoingTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 13:30:11'!
Object subclass: #Transfer
	instanceVariableNames: 'incomingTransfer outgoingTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer class methodsFor: 'instance creation' stamp: 'CM 11/15/2020 13:33:47' prior: 50868554!
register: aValue from: aSenderAccount to: aReceiverAccount 
	
	self new initializeFor: aValue from: aSenderAccount to: aReceiverAccount
	! !

!testRun: #TransferTest #test01TransferExtractsFromSenderAndAddsToReceiver stamp: 'CM 11/15/2020 13:33:56'!
ERROR!

!testRun: #TransferTest #test02 stamp: 'CM 11/15/2020 13:33:56'!
ERROR!

!testRun: #TransferTest #test01TransferExtractsFromSenderAndAddsToReceiver stamp: 'CM 11/15/2020 13:34:00'!
ERROR!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 13:34:12'!
Object subclass: #Transfer
	instanceVariableNames: 'incomingTransfer outgoingTransfer value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 13:34:12'!
Object subclass: #Transfer
	instanceVariableNames: 'incomingTransfer outgoingTransfer value senderAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 13:34:12'!
Object subclass: #Transfer
	instanceVariableNames: 'incomingTransfer outgoingTransfer value senderAccount receiverAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'initialization' stamp: 'CM 11/15/2020 13:34:12'!
initializeFor: aValue from: aSenderAccount to: aReceiverAccount 
	self shouldBeImplemented.
	value := aValue.
	senderAccount := aSenderAccount.
	receiverAccount := aReceiverAccount.! !
!Transfer methodsFor: 'initialization' stamp: 'CM 11/15/2020 13:35:30' prior: 50868658!
initializeFor: aValue from: aSenderAccount to: aReceiverAccount 

	incomingTransfer := Deposit register: aValue on: aReceiverAccount.
	outgoingTransfer := Withdraw register: aValue on: aSenderAccount ! !

Object subclass: #Transfer
	instanceVariableNames: 'incomingTransfer outgoingTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 13:35:56'!
Object subclass: #Transfer
	instanceVariableNames: 'incomingTransfer outgoingTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransferTest #test01TransferExtractsFromSenderAndAddsToReceiver stamp: 'CM 11/15/2020 13:35:58'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'CM 11/15/2020 13:35:58'!
ERROR!

!testRun: #TransferTest #test02 stamp: 'CM 11/15/2020 13:35:58'!
ERROR!
!Transfer methodsFor: 'initialization' stamp: 'CM 11/15/2020 13:36:25'!
senderTransaction

	^ incomingTransfer.! !
!Transfer methodsFor: 'initialization' stamp: 'CM 11/15/2020 13:36:35'!
receiverTransaction

	^ incomingTransfer.! !
!Transfer methodsFor: 'initialization' stamp: 'CM 11/15/2020 13:36:41' prior: 50868698!
senderTransaction

	^ outgoingTransfer .! !

!testRun: #TransferTest #test01TransferExtractsFromSenderAndAddsToReceiver stamp: 'CM 11/15/2020 13:36:42'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'CM 11/15/2020 13:36:42'!
ERROR!

!testRun: #TransferTest #test02 stamp: 'CM 11/15/2020 13:36:42'!
ERROR!
!Transfer class methodsFor: 'instance creation' stamp: 'CM 11/15/2020 13:37:04' prior: 50868615!
register: aValue from: aSenderAccount to: aReceiverAccount 
	
	^ self new initializeFor: aValue from: aSenderAccount to: aReceiverAccount
	! !

!testRun: #TransferTest #test01TransferExtractsFromSenderAndAddsToReceiver stamp: 'CM 11/15/2020 13:37:05'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'CM 11/15/2020 13:37:05'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 13:38:15'!
test02CanNavigateFromTransferToAccountTransactions

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer register: 100 from: account1 to: account2.
		
	self assert: (account1 transactions includes: transfer senderTransaction) .
	self assert: (account2 transactions includes: transfer receiverTransaction) .
! !

!methodRemoval: TransferTest #test02 stamp: 'CM 11/15/2020 13:38:18'!
test02

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer register: 100 from: account1 to: account2.
		
	self assert: (account1 transactions includes: transfer senderTransaction) .
	self assert: (account2 transactions includes: transfer receiverTransaction) .
!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 13:48:27'!
test03CanNavigateFromAccountTransactionsToTransfer

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer register: 100 from: account1 to: account2.
		
	self assert: transfer equals: account1 transactions first associatedTransfer .
	self assert: transfer equals: account2 transactions first associatedTransfer .
	
! !

AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 13:49:45'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferTransaction subclass: #IncomingTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #IncomingTransfer category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 13:50:05'!
TransferTransaction subclass: #IncomingTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferTransaction subclass: #OutgoingTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #OutgoingTransfer category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 13:50:09'!
TransferTransaction subclass: #OutgoingTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 13:50:18'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'value transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 13:50:54'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'value transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTransaction class methodsFor: 'no messages' stamp: 'CM 11/15/2020 13:52:32'!
for: aValue associatedTo: aTransfer

	^ self new initializeFor: aValue associatedTo: aTransfer! !
!TransferTransaction methodsFor: 'no messages' stamp: 'CM 11/15/2020 13:53:06'!
initializeFor: aValue associatedTo: aTransfer

	value := aValue .
	transfer := aTransfer .! !
!TransferTransaction methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 13:53:22'!
associatedTransfer

	^ transfer .! !
!TransferTransaction methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 13:53:42' overrides: 50868383!
value

	^ value! !
!IncomingTransfer methodsFor: 'no messages' stamp: 'CM 11/15/2020 13:53:56' overrides: 50868387!
affectBalance: aBalance

	^aBalance + value ! !

!methodRemoval: TransferTransaction #value stamp: 'CM 11/15/2020 13:54:04'!
value

	^ value!
!OutgoingTransfer methodsFor: 'no messages' stamp: 'CM 11/15/2020 13:54:27' overrides: 50868387!
affectBalance: aBalance

	^aBalance - value ! !
!Transfer methodsFor: 'initialization' stamp: 'CM 11/15/2020 13:55:03' prior: 50868667!
initializeFor: aValue from: aSenderAccount to: aReceiverAccount 

	incomingTransfer := IncomingTransfer register: aValue on: aReceiverAccount.
	outgoingTransfer := OutgoingTransfer register: aValue on: aSenderAccount ! !

AccountTransaction subclass: #AccountCashTransactions
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountCashTransactions category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 13:57:24'!
AccountTransaction subclass: #AccountCashTransactions
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #TransferTransaction as: #AccountTransferTransaction stamp: 'CM 11/15/2020 13:57:33'!
Smalltalk renameClassNamed: #TransferTransaction as: #AccountTransferTransaction!

AccountCashTransactions subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Deposit category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 13:57:48'!
AccountCashTransactions subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountCashTransactions subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Withdraw category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 13:57:55'!
AccountCashTransactions subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountCashTransactions methodsFor: 'initialization' stamp: 'CM 11/15/2020 13:58:11'!
initializeFor: aValue

	value := aValue ! !

!methodRemoval: Deposit #initializeFor: stamp: 'CM 11/15/2020 13:58:11'!
initializeFor: aValue

	value := aValue !
!AccountCashTransactions methodsFor: 'value' stamp: 'CM 11/15/2020 13:58:27' overrides: 50868383!
value

	^ value! !

!methodRemoval: Deposit #value stamp: 'CM 11/15/2020 13:58:27'!
value

	^ value!

!methodRemoval: Withdraw #initializeFor: stamp: 'CM 11/15/2020 13:58:42'!
initializeFor: aValue

	value := aValue !

!methodRemoval: Withdraw #value stamp: 'CM 11/15/2020 13:58:47'!
value

	^ value!
!AccountCashTransactions class methodsFor: 'instance creation' stamp: 'CM 11/15/2020 13:59:03'!
for: aValue

	^ self new initializeFor: aValue ! !

!methodRemoval: Deposit class #for: stamp: 'CM 11/15/2020 13:59:03'!
for: aValue

	^ self new initializeFor: aValue !

!methodRemoval: Withdraw class #for: stamp: 'CM 11/15/2020 13:59:08'!
for: aValue

	^ self new initializeFor: aValue !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CM 11/15/2020 13:59:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CM 11/15/2020 13:59:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CM 11/15/2020 13:59:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CM 11/15/2020 13:59:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CM 11/15/2020 13:59:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CM 11/15/2020 13:59:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CM 11/15/2020 13:59:17'!
PASSED!

AccountTransaction subclass: #AccountTransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransferTransaction category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 14:00:16'!
AccountTransaction subclass: #AccountTransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransferTransaction methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:00:27' overrides: 50868383!
value

	^ transfer value .! !
!AccountTransferTransaction methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:00:50'!
initializeFor: aTransfer

	transfer := aTransfer .! !

!methodRemoval: AccountTransferTransaction #initializeFor:associatedTo: stamp: 'CM 11/15/2020 14:00:54'!
initializeFor: aValue associatedTo: aTransfer

	value := aValue .
	transfer := aTransfer .!
!AccountTransferTransaction class methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:01:29'!
for: aTransfer

	^ self new initializeFor: aTransfer! !

!methodRemoval: AccountTransferTransaction class #for:associatedTo: stamp: 'CM 11/15/2020 14:01:33'!
for: aValue associatedTo: aTransfer

	^ self new initializeFor: aValue associatedTo: aTransfer!
!Transfer methodsFor: 'initialization' stamp: 'CM 11/15/2020 14:02:24' prior: 50868877!
initializeFor: aValue from: aSenderAccount to: aReceiverAccount 

	incomingTransfer := IncomingTransfer on: aReceiverAccount associatedTo: self.
	outgoingTransfer := OutgoingTransfer on: aSenderAccount associatedTo: self.! !
!AccountCashTransactions class methodsFor: 'instance creation' stamp: 'CM 11/15/2020 14:03:05' overrides: 50868401!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !
!AccountTransferTransaction class methodsFor: 'instance creation' stamp: 'CM 11/15/2020 14:03:05' overrides: 50868401!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!methodRemoval: AccountTransaction class #register:on: stamp: 'CM 11/15/2020 14:03:05'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction!
!AccountTransferTransaction class methodsFor: 'instance creation' stamp: 'CM 11/15/2020 14:03:37'!
on: account associatedTo: aTransfer

	| transaction |
	
	transaction := self for: aTransfer.
	account register: transaction.
		
	^ transaction! !

!methodRemoval: AccountTransferTransaction class #register:on: stamp: 'CM 11/15/2020 14:03:40'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CM 11/15/2020 14:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CM 11/15/2020 14:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CM 11/15/2020 14:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CM 11/15/2020 14:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CM 11/15/2020 14:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CM 11/15/2020 14:03:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CM 11/15/2020 14:03:57'!
PASSED!

!testRun: #TransferTest #test01TransferExtractsFromSenderAndAddsToReceiver stamp: 'CM 11/15/2020 14:04:01'!
ERROR!

!testRun: #TransferTest #test02CanNavigateFromTransferToAccountTransactions stamp: 'CM 11/15/2020 14:04:01'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromAccountTransactionsToTransfer stamp: 'CM 11/15/2020 14:04:01'!
PASSED!

!testRun: #TransferTest #test01TransferExtractsFromSenderAndAddsToReceiver stamp: 'CM 11/15/2020 14:04:01'!
ERROR!
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:04:22' prior: 50868864 overrides: 50868387!
affectBalance: aBalance

	^aBalance + self value ! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:04:27' prior: 50868872 overrides: 50868387!
affectBalance: aBalance

	^aBalance - self value ! !

!testRun: #TransferTest #test01TransferExtractsFromSenderAndAddsToReceiver stamp: 'CM 11/15/2020 14:04:33'!
ERROR!

!testRun: #TransferTest #test02CanNavigateFromTransferToAccountTransactions stamp: 'CM 11/15/2020 14:04:33'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromAccountTransactionsToTransfer stamp: 'CM 11/15/2020 14:04:33'!
PASSED!

!testRun: #TransferTest #test01TransferExtractsFromSenderAndAddsToReceiver stamp: 'CM 11/15/2020 14:04:33'!
ERROR!

!testRun: #TransferTest #test01TransferExtractsFromSenderAndAddsToReceiver stamp: 'CM 11/15/2020 14:04:49'!
ERROR!

!testRun: #TransferTest #test02CanNavigateFromTransferToAccountTransactions stamp: 'CM 11/15/2020 14:04:49'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromAccountTransactionsToTransfer stamp: 'CM 11/15/2020 14:04:49'!
PASSED!

!testRun: #TransferTest #test01TransferExtractsFromSenderAndAddsToReceiver stamp: 'CM 11/15/2020 14:04:49'!
ERROR!

!testRun: #TransferTest #test03CanNavigateFromAccountTransactionsToTransfer stamp: 'CM 11/15/2020 14:05:12'!
PASSED!

!testRun: #TransferTest #test02CanNavigateFromTransferToAccountTransactions stamp: 'CM 11/15/2020 14:05:14'!
PASSED!

!testRun: #TransferTest #test01TransferExtractsFromSenderAndAddsToReceiver stamp: 'CM 11/15/2020 14:05:16'!
ERROR!

!testRun: #TransferTest #test01TransferExtractsFromSenderAndAddsToReceiver stamp: 'CM 11/15/2020 14:05:16'!
ERROR!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 14:05:54'!
Object subclass: #Transfer
	instanceVariableNames: 'incomingTransfer outgoingTransfer value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'initialization' stamp: 'CM 11/15/2020 14:05:51' overrides: 16881508!
value

	^ value .! !
!Transfer methodsFor: 'initialization' stamp: 'CM 11/15/2020 14:06:05' prior: 50869034!
initializeFor: aValue from: aSenderAccount to: aReceiverAccount 

	value := aValue.
	incomingTransfer := IncomingTransfer on: aReceiverAccount associatedTo: self.
	outgoingTransfer := OutgoingTransfer on: aSenderAccount associatedTo: self.! !

!testRun: #TransferTest #test01TransferExtractsFromSenderAndAddsToReceiver stamp: 'CM 11/15/2020 14:06:07'!
PASSED!

!testRun: #TransferTest #test02CanNavigateFromTransferToAccountTransactions stamp: 'CM 11/15/2020 14:06:07'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromAccountTransactionsToTransfer stamp: 'CM 11/15/2020 14:06:07'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:08:06'!
test04

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	self should: [
			Transfer register: 100 from: account1 to: account1
		] raise: Error withMessageText: Transfer xxErrorDescription .
		! !

!testRun: #TransferTest #test04 stamp: 'CM 11/15/2020 14:08:13'!
ERROR!

!testRun: #TransferTest #test04 stamp: 'CM 11/15/2020 14:08:13'!
ERROR!
!Transfer class methodsFor: 'Error Messages' stamp: 'CM 11/15/2020 14:08:28'!
xxErrorDescription
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'Error Messages' stamp: 'CM 11/15/2020 14:08:58' prior: 50869228!
xxErrorDescription

	^ 'No se puede hacer transferencias a uno mismo'.! !

!testRun: #TransferTest #test04 stamp: 'CM 11/15/2020 14:09:05'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'CM 11/15/2020 14:09:57' prior: 50868720!
register: aValue from: aSenderAccount to: aReceiverAccount 
	
	aSenderAccount = aReceiverAccount ifTrue: [ ^ self error: self xxErrorDescription ] .
	
	^ self new initializeFor: aValue from: aSenderAccount to: aReceiverAccount
	! !

!testRun: #TransferTest #test04 stamp: 'CM 11/15/2020 14:09:58'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'CM 11/15/2020 14:10:01'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:10:32' prior: 50869214!
test04

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	self should: [
			Transfer register: -100 from: account1 to: account2
		] raise: Error withMessageText: Transfer yyErrorDescription .
		! !

!testRun: #TransferTest #test04 stamp: 'CM 11/15/2020 14:10:36'!
ERROR!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:10:44'!
test05

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	self should: [
			Transfer register: -100 from: account1 to: account2
		] raise: Error withMessageText: Transfer yyErrorDescription .
		! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:08:06' prior: 50869256!
test04

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	self should: [
			Transfer register: 100 from: account1 to: account1
		] raise: Error withMessageText: Transfer xxErrorDescription .
		! !

!testRun: #TransferTest #test05 stamp: 'CM 11/15/2020 14:10:58'!
ERROR!

!testRun: #TransferTest #test05 stamp: 'CM 11/15/2020 14:10:58'!
ERROR!
!Transfer class methodsFor: 'Error Messages' stamp: 'CM 11/15/2020 14:11:08'!
yyErrorDescription
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'Error Messages' stamp: 'CM 11/15/2020 14:11:25' prior: 50869294!
yyErrorDescription

	^ 'El valor debe ser positivo' .! !

!testRun: #TransferTest #test05 stamp: 'CM 11/15/2020 14:11:27'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'CM 11/15/2020 14:12:03' prior: 50869241!
register: aValue from: aSenderAccount to: aReceiverAccount 
	
	aSenderAccount = aReceiverAccount ifTrue: [ ^ self error: self xxErrorDescription ] .
	aValue < 0 ifTrue: [ ^ self error: self yyErrorDescription ].
	
	^ self new initializeFor: aValue from: aSenderAccount to: aReceiverAccount
	! !

!testRun: #TransferTest #test05 stamp: 'CM 11/15/2020 14:12:04'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'CM 11/15/2020 14:12:06'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:12:21'!
test06

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	self should: [
			Transfer register: 0 from: account1 to: account2
		] raise: Error withMessageText: Transfer yyErrorDescription .
		! !

!testRun: #TransferTest #test06 stamp: 'CM 11/15/2020 14:12:24'!
FAILURE!

!testRun: #TransferTest #test06 stamp: 'CM 11/15/2020 14:12:24'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'CM 11/15/2020 14:12:35' prior: 50869307!
register: aValue from: aSenderAccount to: aReceiverAccount 
	
	aSenderAccount = aReceiverAccount ifTrue: [ ^ self error: self xxErrorDescription ] .
	aValue <= 0 ifTrue: [ ^ self error: self yyErrorDescription ].
	
	^ self new initializeFor: aValue from: aSenderAccount to: aReceiverAccount
	! !

!testRun: #TransferTest #test06 stamp: 'CM 11/15/2020 14:12:36'!
PASSED!

!testRun: #TransferTest #test01TransferExtractsFromSenderAndAddsToReceiver stamp: 'CM 11/15/2020 14:12:40'!
PASSED!

!testRun: #TransferTest #test02CanNavigateFromTransferToAccountTransactions stamp: 'CM 11/15/2020 14:12:40'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromAccountTransactionsToTransfer stamp: 'CM 11/15/2020 14:12:40'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'CM 11/15/2020 14:12:40'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'CM 11/15/2020 14:12:40'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'CM 11/15/2020 14:12:40'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:13:22' prior: 50869280!
test04

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	self should: [
			Transfer register: 100 from: account1 to: account1
		] 
		raise: Error 
		withMessageText: Transfer xxErrorDescription .
		! !
!Transfer class methodsFor: 'Error Messages' stamp: 'CM 11/15/2020 14:14:08'!
noSelfTransfersAllowedErrorDescription

	^ 'No se puede hacer transferencias a uno mismo'.! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:14:08' prior: 50869340!
register: aValue from: aSenderAccount to: aReceiverAccount 
	
	aSenderAccount = aReceiverAccount ifTrue: [ ^ self error: self noSelfTransfersAllowedErrorDescription ] .
	aValue <= 0 ifTrue: [ ^ self error: self yyErrorDescription ].
	
	^ self new initializeFor: aValue from: aSenderAccount to: aReceiverAccount
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:14:08' prior: 50869373!
test04

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	self should: [
			Transfer register: 100 from: account1 to: account1
		] 
		raise: Error 
		withMessageText: Transfer noSelfTransfersAllowedErrorDescription .
		! !

!methodRemoval: Transfer class #xxErrorDescription stamp: 'CM 11/15/2020 14:14:08'!
xxErrorDescription

	^ 'No se puede hacer transferencias a uno mismo'.!
!Transfer class methodsFor: 'Error Messages' stamp: 'CM 11/15/2020 14:17:15' prior: 50869382!
noSelfTransfersAllowedErrorDescription

	^ 'Sender''s account must be different from receiver''s account'.! !
!Transfer class methodsFor: 'Error Messages' stamp: 'CM 11/15/2020 14:17:41'!
onlyPositiveTransfersErrorDescription

	^ 'El valor debe ser positivo' .! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:17:41' prior: 50869389!
register: aValue from: aSenderAccount to: aReceiverAccount 
	
	aSenderAccount = aReceiverAccount ifTrue: [ ^ self error: self noSelfTransfersAllowedErrorDescription ] .
	aValue <= 0 ifTrue: [ ^ self error: self onlyPositiveTransfersErrorDescription ].
	
	^ self new initializeFor: aValue from: aSenderAccount to: aReceiverAccount
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:17:41' prior: 50869324!
test06

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	self should: [
			Transfer register: 0 from: account1 to: account2
		] raise: Error withMessageText: Transfer onlyPositiveTransfersErrorDescription .
		! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:17:41' prior: 50869269!
test05

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	self should: [
			Transfer register: -100 from: account1 to: account2
		] raise: Error withMessageText: Transfer onlyPositiveTransfersErrorDescription .
		! !

!methodRemoval: Transfer class #yyErrorDescription stamp: 'CM 11/15/2020 14:17:41'!
yyErrorDescription

	^ 'El valor debe ser positivo' .!
!Transfer class methodsFor: 'Error Messages' stamp: 'CM 11/15/2020 14:18:02' prior: 50869423!
onlyPositiveTransfersErrorDescription

	^ 'Transfer value must be positive' .! !
!Transfer class methodsFor: 'Error Messages' stamp: 'CM 11/15/2020 14:18:40' prior: 50869471!
onlyPositiveTransfersErrorDescription

	^ 'The value to transfer must be positive'.! !

!testRun: #TransferTest #test01TransferExtractsFromSenderAndAddsToReceiver stamp: 'CM 11/15/2020 14:18:43'!
PASSED!

!testRun: #TransferTest #test02CanNavigateFromTransferToAccountTransactions stamp: 'CM 11/15/2020 14:18:43'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromAccountTransactionsToTransfer stamp: 'CM 11/15/2020 14:18:43'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'CM 11/15/2020 14:18:43'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'CM 11/15/2020 14:18:43'!
PASSED!

!testRun: #TransferTest #test06 stamp: 'CM 11/15/2020 14:18:43'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:19:39'!
test04IsNotPossibleToTransferFromAndToTheSameAccount

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	self should: [
			Transfer register: 100 from: account1 to: account1
		] 
		raise: Error 
		withMessageText: Transfer noSelfTransfersAllowedErrorDescription .
		! !

!methodRemoval: TransferTest #test04 stamp: 'CM 11/15/2020 14:19:41'!
test04

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	self should: [
			Transfer register: 100 from: account1 to: account1
		] 
		raise: Error 
		withMessageText: Transfer noSelfTransfersAllowedErrorDescription .
		!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:20:14'!
test05IsNotPossibleToTransferNegativeValues

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	self should: [
			Transfer register: -100 from: account1 to: account2
		] raise: Error withMessageText: Transfer onlyPositiveTransfersErrorDescription .
		! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:20:42'!
test06IsNotPosibleDoATransferWithAValueOfZero

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	self should: [
			Transfer register: 0 from: account1 to: account2
		] raise: Error withMessageText: Transfer onlyPositiveTransfersErrorDescription .
		! !

!methodRemoval: TransferTest #test06 stamp: 'CM 11/15/2020 14:20:46'!
test06

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	self should: [
			Transfer register: 0 from: account1 to: account2
		] raise: Error withMessageText: Transfer onlyPositiveTransfersErrorDescription .
		!

!methodRemoval: TransferTest #test05 stamp: 'CM 11/15/2020 14:20:48'!
test05

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	self should: [
			Transfer register: -100 from: account1 to: account2
		] raise: Error withMessageText: Transfer onlyPositiveTransfersErrorDescription .
		!

----SNAPSHOT----(15 November 2020 14:21:53) CuisUniversity-4384.image priorSource: 17155564!
!ReceptiveAccountTest methodsFor: 'reports' stamp: 'CM 11/15/2020 14:24:52'!
test01 

	| account summary |
	
	account := ReceptiveAccount new.
	summary := OrderedCollection with: 'Balance = 0'.

	self assert: summary equals: account summary .
! !

!testRun: #ReceptiveAccountTest #test01 stamp: 'CM 11/15/2020 14:24:56'!
ERROR!

!testRun: #ReceptiveAccountTest #test01 stamp: 'CM 11/15/2020 14:24:56'!
ERROR!
!ReceptiveAccount methodsFor: 'reportes' stamp: 'CM 11/15/2020 14:25:07'!
summary
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'reportes' stamp: 'CM 11/15/2020 14:25:26' prior: 50869583!
summary
	^ 'Balance = 0'.! !

!testRun: #ReceptiveAccountTest #test01 stamp: 'CM 11/15/2020 14:25:28'!
FAILURE!
!ReceptiveAccount methodsFor: 'reportes' stamp: 'CM 11/15/2020 14:26:32' prior: 50869587!
summary
	| accountSummary |
	
	accountSummary := OrderedCollection new.

	accountSummary add: 'Balance = 0'.
	
	^ accountSummary.! !

!testRun: #ReceptiveAccountTest #test01 stamp: 'CM 11/15/2020 14:26:37'!
PASSED!
!ReceptiveAccountTest methodsFor: 'reports' stamp: 'CM 11/15/2020 14:27:55' prior: 50869570!
test01 

	| account summary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	summary := OrderedCollection with: 'Deposito de 100' with: 'Balance = 100'.

	self assert: summary equals: account summary .
! !
!ReceptiveAccount methodsFor: 'reportes' stamp: 'CM 11/15/2020 14:30:45' prior: 50869594!
summary
	| accountSummary |
	
	accountSummary := OrderedCollection new.
	
	transactions do: [ :transaction | 
			(transaction isKindOf: Deposit) ifTrue: [ accountSummary add: 'Deposito de ', transaction value asString ]
		].

	accountSummary add: 'Balance = ', self balance asString .
	
	^ accountSummary.! !

!testRun: #ReceptiveAccountTest #test01 stamp: 'CM 11/15/2020 14:30:50'!
PASSED!
!ReceptiveAccountTest methodsFor: 'reports' stamp: 'CM 11/15/2020 14:30:57'!
test02 

	| account summary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	summary := OrderedCollection with: 'Deposito de 100' with: 'Balance = 100'.

	self assert: summary equals: account summary .
! !
!ReceptiveAccountTest methodsFor: 'reports' stamp: 'CM 11/15/2020 14:24:52' prior: 50869604!
test01 

	| account summary |
	
	account := ReceptiveAccount new.
	summary := OrderedCollection with: 'Balance = 0'.

	self assert: summary equals: account summary .
! !

!testRun: #ReceptiveAccountTest #test01 stamp: 'CM 11/15/2020 14:31:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test02 stamp: 'CM 11/15/2020 14:31:05'!
PASSED!
!ReceptiveAccountTest methodsFor: 'reports' stamp: 'CM 11/15/2020 14:31:31' prior: 50869630!
test02 

	| account summary |
	
	account := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	
	summary := OrderedCollection with: 'Extraccion de 100' with: 'Balance = -100'.

	self assert: summary equals: account summary .
! !
!ReceptiveAccountTest methodsFor: 'reports' stamp: 'CM 11/15/2020 14:31:36'!
test03

	| account summary |
	
	account := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	
	summary := OrderedCollection with: 'Extraccion de 100' with: 'Balance = -100'.

	self assert: summary equals: account summary .
! !
!ReceptiveAccountTest methodsFor: 'reports' stamp: 'CM 11/15/2020 14:30:57' prior: 50869655!
test02 

	| account summary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	summary := OrderedCollection with: 'Deposito de 100' with: 'Balance = 100'.

	self assert: summary equals: account summary .
! !
!ReceptiveAccount methodsFor: 'reportes' stamp: 'CM 11/15/2020 14:32:24' prior: 50869615!
summary
	| accountSummary |
	
	accountSummary := OrderedCollection new.
	
	transactions do: [ :transaction | 
			(transaction isKindOf: Deposit) ifTrue: [ accountSummary add: 'Deposito de ', transaction value asString ].
			(transaction isKindOf: Withdraw ) ifTrue: [ accountSummary add: 'Extraccion de ', transaction value asString ].
		].

	accountSummary add: 'Balance = ', self balance asString .
	
	^ accountSummary.! !

!testRun: #ReceptiveAccountTest #test01 stamp: 'CM 11/15/2020 14:32:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CM 11/15/2020 14:32:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test02 stamp: 'CM 11/15/2020 14:32:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CM 11/15/2020 14:32:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test03 stamp: 'CM 11/15/2020 14:32:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CM 11/15/2020 14:32:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CM 11/15/2020 14:32:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CM 11/15/2020 14:32:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CM 11/15/2020 14:32:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CM 11/15/2020 14:32:27'!
PASSED!
!ReceptiveAccountTest methodsFor: 'reports' stamp: 'CM 11/15/2020 14:33:40'!
test04

	| account1 account2 summary |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	summary := OrderedCollection with: 'Transferencia entrante de 50' with: 'Balance = 50'.

	self assert: summary equals: account2 summary .
! !
!ReceptiveAccount methodsFor: 'reportes' stamp: 'CM 11/15/2020 14:34:01' prior: 50869687!
summary
	| accountSummary |
	
	accountSummary := OrderedCollection new.
	
	transactions do: [ :transaction | 
			(transaction isKindOf: Deposit) ifTrue: [ accountSummary add: 'Deposito de ', transaction value asString ].
			(transaction isKindOf: Withdraw ) ifTrue: [ accountSummary add: 'Extraccion de ', transaction value asString ].
			(transaction isKindOf: IncomingTransfer ) ifTrue: [ accountSummary add: 'Transferencia entrante de ', transaction value asString ].
		].

	accountSummary add: 'Balance = ', self balance asString .
	
	^ accountSummary.! !

!testRun: #ReceptiveAccountTest #test01 stamp: 'CM 11/15/2020 14:34:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CM 11/15/2020 14:34:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02 stamp: 'CM 11/15/2020 14:34:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CM 11/15/2020 14:34:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03 stamp: 'CM 11/15/2020 14:34:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CM 11/15/2020 14:34:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04 stamp: 'CM 11/15/2020 14:34:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CM 11/15/2020 14:34:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CM 11/15/2020 14:34:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CM 11/15/2020 14:34:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CM 11/15/2020 14:34:03'!
PASSED!
!ReceptiveAccountTest methodsFor: 'reports' stamp: 'CM 11/15/2020 14:34:29' prior: 50869737!
test04

	| account1 account2 summary |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	summary := OrderedCollection with: 'Transferencia saliente de 50' with: 'Balance = -50'.

	self assert: summary equals: account1 summary .
! !

!testRun: #ReceptiveAccountTest #test01 stamp: 'CM 11/15/2020 14:34:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CM 11/15/2020 14:34:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02 stamp: 'CM 11/15/2020 14:34:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CM 11/15/2020 14:34:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test03 stamp: 'CM 11/15/2020 14:34:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CM 11/15/2020 14:34:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04 stamp: 'CM 11/15/2020 14:34:36'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CM 11/15/2020 14:34:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CM 11/15/2020 14:34:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CM 11/15/2020 14:34:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CM 11/15/2020 14:34:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04 stamp: 'CM 11/15/2020 14:34:36'!
FAILURE!
!ReceptiveAccount methodsFor: 'reportes' stamp: 'CM 11/15/2020 14:34:55' prior: 50869750!
summary
	| accountSummary |
	
	accountSummary := OrderedCollection new.
	
	transactions do: [ :transaction | 
			(transaction isKindOf: Deposit) ifTrue: [ accountSummary add: 'Deposito de ', transaction value asString ].
			(transaction isKindOf: Withdraw ) ifTrue: [ accountSummary add: 'Extraccion de ', transaction value asString ].
			(transaction isKindOf: IncomingTransfer ) ifTrue: [ accountSummary add: 'Transferencia entrante de ', transaction value asString ].
			(transaction isKindOf: OutgoingTransfer ) ifTrue: [ accountSummary add: 'Transferencia saliente de ', transaction value asString ].
		].

	accountSummary add: 'Balance = ', self balance asString .
	
	^ accountSummary.! !

!testRun: #ReceptiveAccountTest #test04 stamp: 'CM 11/15/2020 14:34:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test01 stamp: 'CM 11/15/2020 14:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CM 11/15/2020 14:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02 stamp: 'CM 11/15/2020 14:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CM 11/15/2020 14:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03 stamp: 'CM 11/15/2020 14:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CM 11/15/2020 14:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04 stamp: 'CM 11/15/2020 14:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CM 11/15/2020 14:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CM 11/15/2020 14:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CM 11/15/2020 14:34:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CM 11/15/2020 14:34:59'!
PASSED!
!ReceptiveAccountTest methodsFor: 'reports' stamp: 'CM 11/15/2020 14:35:04'!
test05

	| account1 account2 summary |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	summary := OrderedCollection with: 'Transferencia saliente de 50' with: 'Balance = -50'.

	self assert: summary equals: account1 summary .
! !
!ReceptiveAccountTest methodsFor: 'reports' stamp: 'CM 11/15/2020 14:33:40' prior: 50869808!
test04

	| account1 account2 summary |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	summary := OrderedCollection with: 'Transferencia entrante de 50' with: 'Balance = 50'.

	self assert: summary equals: account2 summary .
! !
!ReceptiveAccountTest methodsFor: 'reports' stamp: 'CM 11/15/2020 14:37:03'!
test06

	| portfolio account summary |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	Deposit register: 50 on: account.
	
	summary := OrderedCollection with: 'Deposito de 50' with: 'Balance = 50'.

	self assert: summary equals: portfolio summary .
! !

!testRun: #ReceptiveAccountTest #test06 stamp: 'CM 11/15/2020 14:37:05'!
ERROR!

!testRun: #ReceptiveAccountTest #test06 stamp: 'CM 11/15/2020 14:37:05'!
ERROR!
!Portfolio methodsFor: 'reportes' stamp: 'CM 11/15/2020 14:42:01'!
summary
	"| accountSummary |
	
	accountSummary := OrderedCollection new.
	
	
	transactions do: [ :transaction | 
			(transaction isKindOf: Deposit) ifTrue: [ accountSummary add: 'Deposito de ', transaction value asString ].
			(transaction isKindOf: Withdraw ) ifTrue: [ accountSummary add: 'Extraccion de ', transaction value asString ].
			(transaction isKindOf: IncomingTransfer ) ifTrue: [ accountSummary add: 'Transferencia entrante de ', transaction value asString ].
			(transaction isKindOf: OutgoingTransfer ) ifTrue: [ accountSummary add: 'Transferencia saliente de ', transaction value asString ].
		].

	accountSummary add: 'Balance = ', self balance asString .
	
	^ accountSummary."! !
!Portfolio methodsFor: 'reportes' stamp: 'CM 11/15/2020 14:44:16' prior: 50869966!
summary
	| accountSummary |
	
	accountSummary := OrderedCollection new.
	accounts do: [ :account |
			accountSummary addAll: account summary removeLast 
		].
	
	accountSummary add: 'Balance = ', self balance asString .
	
	^ accountSummary.! !

!testRun: #ReceptiveAccountTest #test01 stamp: 'CM 11/15/2020 14:44:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test02 stamp: 'CM 11/15/2020 14:44:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test03 stamp: 'CM 11/15/2020 14:44:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test04 stamp: 'CM 11/15/2020 14:44:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test05 stamp: 'CM 11/15/2020 14:44:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test06 stamp: 'CM 11/15/2020 14:44:22'!
FAILURE!

!testRun: #ReceptiveAccountTest #test06 stamp: 'CM 11/15/2020 14:44:22'!
FAILURE!
!Portfolio methodsFor: 'reportes' stamp: 'CM 11/15/2020 14:44:52' prior: 50869991!
summary
	| accountSummary |
	
	accountSummary := OrderedCollection new.
	accounts do: [ :account |
			accountSummary + account summary removeLast 
		].
	
	accountSummary add: 'Balance = ', self balance asString .
	
	^ accountSummary.! !

!testRun: #ReceptiveAccountTest #test01 stamp: 'CM 11/15/2020 14:44:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CM 11/15/2020 14:44:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test02 stamp: 'CM 11/15/2020 14:44:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CM 11/15/2020 14:44:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test03 stamp: 'CM 11/15/2020 14:44:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CM 11/15/2020 14:44:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test04 stamp: 'CM 11/15/2020 14:44:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CM 11/15/2020 14:44:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test05 stamp: 'CM 11/15/2020 14:44:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CM 11/15/2020 14:44:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test06 stamp: 'CM 11/15/2020 14:44:55'!
ERROR!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CM 11/15/2020 14:44:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CM 11/15/2020 14:44:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test06 stamp: 'CM 11/15/2020 14:44:55'!
ERROR!
!Portfolio methodsFor: 'reportes' stamp: 'CM 11/15/2020 14:45:33' prior: 50870020!
summary
	| accountSummary |
	
	accountSummary := OrderedCollection new.
	accounts do: [ :account |
			accountSummary + account summary removeLast 
		].
	
	accountSummary add: 'Balance = ', self balance asString .
	
	^ accountSummary flatten .! !

!testRun: #ReceptiveAccountTest #test01 stamp: 'CM 11/15/2020 14:45:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CM 11/15/2020 14:45:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test02 stamp: 'CM 11/15/2020 14:45:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CM 11/15/2020 14:45:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test03 stamp: 'CM 11/15/2020 14:45:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CM 11/15/2020 14:45:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test04 stamp: 'CM 11/15/2020 14:45:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CM 11/15/2020 14:45:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test05 stamp: 'CM 11/15/2020 14:45:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CM 11/15/2020 14:45:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test06 stamp: 'CM 11/15/2020 14:45:35'!
ERROR!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CM 11/15/2020 14:45:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CM 11/15/2020 14:45:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test06 stamp: 'CM 11/15/2020 14:45:35'!
ERROR!
!Portfolio methodsFor: 'reportes' stamp: 'CM 11/15/2020 14:45:46' prior: 50870075!
summary
	| accountSummary |
	
	accountSummary := OrderedCollection new.
	accounts do: [ :account |
			accountSummary addAll: account summary removeLast 
		].
	
	accountSummary add: 'Balance = ', self balance asString .
	
	^ accountSummary flatten .! !

!testRun: #ReceptiveAccountTest #test01 stamp: 'CM 11/15/2020 14:45:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CM 11/15/2020 14:45:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test02 stamp: 'CM 11/15/2020 14:45:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CM 11/15/2020 14:45:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test03 stamp: 'CM 11/15/2020 14:45:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CM 11/15/2020 14:45:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test04 stamp: 'CM 11/15/2020 14:45:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CM 11/15/2020 14:45:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05 stamp: 'CM 11/15/2020 14:45:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CM 11/15/2020 14:45:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06 stamp: 'CM 11/15/2020 14:45:48'!
FAILURE!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CM 11/15/2020 14:45:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CM 11/15/2020 14:45:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06 stamp: 'CM 11/15/2020 14:45:48'!
FAILURE!

!testRun: #ReceptiveAccountTest #test06 stamp: 'CM 11/15/2020 14:46:34'!
FAILURE!

!testRun: #ReceptiveAccountTest #test06 stamp: 'CM 11/15/2020 14:46:34'!
FAILURE!
!Portfolio methodsFor: 'reportes' stamp: 'CM 11/15/2020 14:48:08' prior: 50870130!
summary
	| portfolioSummary accountSummary |
	
	portfolioSummary := OrderedCollection new.
	accounts do: [ :account |
			accountSummary := account summary.
			accountSummary removeLast.
			portfolioSummary addAll:  accountSummary 
		].
	
	portfolioSummary add: 'Balance = ', self balance asString .
	
	^ portfolioSummary flatten .! !

!testRun: #ReceptiveAccountTest #test01 stamp: 'CM 11/15/2020 14:48:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CM 11/15/2020 14:48:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02 stamp: 'CM 11/15/2020 14:48:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CM 11/15/2020 14:48:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03 stamp: 'CM 11/15/2020 14:48:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CM 11/15/2020 14:48:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04 stamp: 'CM 11/15/2020 14:48:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CM 11/15/2020 14:48:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test05 stamp: 'CM 11/15/2020 14:48:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CM 11/15/2020 14:48:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06 stamp: 'CM 11/15/2020 14:48:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CM 11/15/2020 14:48:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CM 11/15/2020 14:48:11'!
PASSED!

Object subclass: #AccountReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountReport category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 14:48:33'!
Object subclass: #AccountReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #AccountReport as: #AccountSummaryReport stamp: 'CM 11/15/2020 14:48:53'!
Smalltalk renameClassNamed: #AccountReport as: #AccountSummaryReport!

Object subclass: #AccountSummaryReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryReportTest category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 14:49:02'!
Object subclass: #AccountSummaryReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryReportTest methodsFor: 'nil' stamp: 'CM 11/15/2020 14:49:33'!
test01 

	| account summary |
	
	account := ReceptiveAccount new.
	summary := OrderedCollection with: 'Balance = 0'.

	self assert: summary equals: account summary .
! !
!AccountSummaryReportTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:49:52'!
test02 

	| account summary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	summary := OrderedCollection with: 'Deposito de 100' with: 'Balance = 100'.

	self assert: summary equals: account summary .
! !
!AccountSummaryReportTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:50:07'!
test03

	| account summary |
	
	account := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	
	summary := OrderedCollection with: 'Extraccion de 100' with: 'Balance = -100'.

	self assert: summary equals: account summary .
! !
!AccountSummaryReportTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:50:19'!
test04

	| account1 account2 summary |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	summary := OrderedCollection with: 'Transferencia entrante de 50' with: 'Balance = 50'.

	self assert: summary equals: account2 summary .
! !
!AccountSummaryReportTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:50:30'!
test05

	| account1 account2 summary |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	summary := OrderedCollection with: 'Transferencia saliente de 50' with: 'Balance = -50'.

	self assert: summary equals: account1 summary .
! !
!AccountSummaryReportTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:50:47'!
test06

	| portfolio account summary |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	Deposit register: 50 on: account.
	
	summary := OrderedCollection with: 'Deposito de 50' with: 'Balance = 50'.

	self assert: summary equals: portfolio summary .
! !

!methodRemoval: ReceptiveAccountTest #test01 stamp: 'CM 11/15/2020 14:50:51'!
test01 

	| account summary |
	
	account := ReceptiveAccount new.
	summary := OrderedCollection with: 'Balance = 0'.

	self assert: summary equals: account summary .
!

!methodRemoval: ReceptiveAccountTest #test02 stamp: 'CM 11/15/2020 14:50:51'!
test02 

	| account summary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	summary := OrderedCollection with: 'Deposito de 100' with: 'Balance = 100'.

	self assert: summary equals: account summary .
!

!methodRemoval: ReceptiveAccountTest #test03 stamp: 'CM 11/15/2020 14:50:51'!
test03

	| account summary |
	
	account := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	
	summary := OrderedCollection with: 'Extraccion de 100' with: 'Balance = -100'.

	self assert: summary equals: account summary .
!

!methodRemoval: ReceptiveAccountTest #test04 stamp: 'CM 11/15/2020 14:50:51'!
test04

	| account1 account2 summary |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	summary := OrderedCollection with: 'Transferencia entrante de 50' with: 'Balance = 50'.

	self assert: summary equals: account2 summary .
!

!methodRemoval: ReceptiveAccountTest #test05 stamp: 'CM 11/15/2020 14:50:51'!
test05

	| account1 account2 summary |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	summary := OrderedCollection with: 'Transferencia saliente de 50' with: 'Balance = -50'.

	self assert: summary equals: account1 summary .
!

!methodRemoval: ReceptiveAccountTest #test06 stamp: 'CM 11/15/2020 14:50:51'!
test06

	| portfolio account summary |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	Deposit register: 50 on: account.
	
	summary := OrderedCollection with: 'Deposito de 50' with: 'Balance = 50'.

	self assert: summary equals: portfolio summary .
!
!AccountSummaryReportTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:51:27' prior: 50870276!
test01 

	| account summary |
	
	account := ReceptiveAccount new.
	summary := OrderedCollection with: 'Balance = 0'.

	self assert: summary equals: (AccountSummaryReport for: account) print .
! !
!AccountSummaryReportTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:51:53' prior: 50870285!
test02 

	| account summary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	summary := OrderedCollection with: 'Deposito de 100' with: 'Balance = 100'.

	self assert: summary equals: (AccountSummaryReport for: account) print .
! !
!AccountSummaryReportTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:51:57' prior: 50870296!
test03

	| account summary |
	
	account := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	
	summary := OrderedCollection with: 'Extraccion de 100' with: 'Balance = -100'.

	self assert: summary equals: (AccountSummaryReport for: account) print .
! !
!AccountSummaryReportTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:52:09' prior: 50870307!
test04

	| account1 account2 summary |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	summary := OrderedCollection with: 'Transferencia entrante de 50' with: 'Balance = 50'.

	self assert: summary equals: (AccountSummaryReport for: account2) print .
! !
!AccountSummaryReportTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:52:16' prior: 50870320!
test05

	| account1 account2 summary |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	summary := OrderedCollection with: 'Transferencia saliente de 50' with: 'Balance = -50'.

	self assert: summary equals: (AccountSummaryReport for: account1) print .
! !
!AccountSummaryReportTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:52:28' prior: 50870333!
test06

	| portfolio account summary |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	Deposit register: 50 on: account.
	
	summary := OrderedCollection with: 'Deposito de 50' with: 'Balance = 50'.

	self assert: summary equals: (AccountSummaryReport for: portfolio) print .
! !

TestCase subclass: #AccountSummaryReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryReportTest category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 14:54:04'!
TestCase subclass: #AccountSummaryReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #AccountSummaryReportTest #test01 stamp: 'CM 11/15/2020 14:54:12'!
ERROR!

!testRun: #AccountSummaryReportTest #test01 stamp: 'CM 11/15/2020 14:54:12'!
ERROR!
!AccountSummaryReport class methodsFor: 'instance creation' stamp: 'CM 11/15/2020 14:54:20'!
for: aReceptiveAccount 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aReceptiveAccount ! !
!AccountSummaryReport class methodsFor: 'instance creation' stamp: 'CM 11/15/2020 14:54:28' prior: 50870501!
for: aReceptiveAccount 
	
	^self new initializeFor: aReceptiveAccount ! !

!testRun: #AccountSummaryReportTest #test01 stamp: 'CM 11/15/2020 14:54:33'!
ERROR!

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 14:54:42'!
Object subclass: #AccountSummaryReport
	instanceVariableNames: 'receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryReport methodsFor: 'initialization' stamp: 'CM 11/15/2020 14:54:42'!
initializeFor: aReceptiveAccount 
	self shouldBeImplemented.
	receptiveAccount := aReceptiveAccount.! !
!AccountSummaryReport methodsFor: 'initialization' stamp: 'CM 11/15/2020 14:54:46' prior: 50870526!
initializeFor: aReceptiveAccount 
	
	receptiveAccount := aReceptiveAccount.! !

!testRun: #AccountSummaryReportTest #test01 stamp: 'CM 11/15/2020 14:54:53'!
FAILURE!

!testRun: #AccountSummaryReportTest #test01 stamp: 'CM 11/15/2020 14:54:53'!
FAILURE!
!AccountSummaryReportTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:55:11' prior: 50870408!
test01 

	| account summary |
	
	account := ReceptiveAccount new.
	summary := OrderedCollection with: 'Balance = 0'.

	self assert: summary equals: (AccountSummaryReport for: account) printReport .
! !
!AccountSummaryReportTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:55:15' prior: 50870418!
test02 

	| account summary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	summary := OrderedCollection with: 'Deposito de 100' with: 'Balance = 100'.

	self assert: summary equals: (AccountSummaryReport for: account) printReport .
! !
!AccountSummaryReportTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:55:18' prior: 50870430!
test03

	| account summary |
	
	account := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	
	summary := OrderedCollection with: 'Extraccion de 100' with: 'Balance = -100'.

	self assert: summary equals: (AccountSummaryReport for: account) printReport .
! !
!AccountSummaryReportTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:55:20' prior: 50870442!
test04

	| account1 account2 summary |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	summary := OrderedCollection with: 'Transferencia entrante de 50' with: 'Balance = 50'.

	self assert: summary equals: (AccountSummaryReport for: account2) printReport .
! !
!AccountSummaryReportTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:55:23' prior: 50870456!
test05

	| account1 account2 summary |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	summary := OrderedCollection with: 'Transferencia saliente de 50' with: 'Balance = -50'.

	self assert: summary equals: (AccountSummaryReport for: account1) printReport .
! !
!AccountSummaryReportTest methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:55:26' prior: 50870470!
test06

	| portfolio account summary |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	Deposit register: 50 on: account.
	
	summary := OrderedCollection with: 'Deposito de 50' with: 'Balance = 50'.

	self assert: summary equals: (AccountSummaryReport for: portfolio) printReport .
! !

!testRun: #AccountSummaryReportTest #test01 stamp: 'CM 11/15/2020 14:55:28'!
ERROR!

!testRun: #AccountSummaryReportTest #test01 stamp: 'CM 11/15/2020 14:55:28'!
ERROR!
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:55:34'!
printReport
	self shouldBeImplemented.! !
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 14:56:36' prior: 50870627!
printReport
	
	receptiveAccount printReport: self.! !

!testRun: #AccountSummaryReportTest #test01 stamp: 'CM 11/15/2020 14:56:49'!
ERROR!
!ReceptiveAccount methodsFor: 'reportes' stamp: 'CM 11/15/2020 14:57:09'!
printReport: anAccountSummaryReport 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'reportes' stamp: 'CM 11/15/2020 15:01:16' prior: 50870639!
printReport: anAccountSummaryReport 
	
	| report |
	
	report := OrderedCollection new.
	transactions do: [ :transaction |
			report add: (transaction printReport: anAccountSummaryReport)
		].
	^ report.
	! !

!testRun: #AccountSummaryReportTest #test01 stamp: 'CM 11/15/2020 15:01:50'!
FAILURE!
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:02:03' prior: 50870632!
printReport
	
	^ receptiveAccount printReport: self.! !
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:02:46' prior: 50870657!
printReport
	
	|report|
	report := receptiveAccount printReport: self.
	
	report add: 'Balance = ' , receptiveAccount balance.
	
	^ report.! !

!testRun: #AccountSummaryReportTest #test01 stamp: 'CM 11/15/2020 15:02:51'!
ERROR!

!testRun: #AccountSummaryReportTest #test01 stamp: 'CM 11/15/2020 15:02:51'!
ERROR!
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:03:19' prior: 50870663!
printReport
	
	|report|
	report := receptiveAccount printReport: self.
	
	report add: 'Balance = ' , receptiveAccount balance asString.
	
	^ report.! !

!testRun: #AccountSummaryReportTest #test01 stamp: 'CM 11/15/2020 15:03:20'!
PASSED!

!testRun: #AccountSummaryReportTest #test01 stamp: 'CM 11/15/2020 15:03:22'!
PASSED!

!testRun: #AccountSummaryReportTest #test02 stamp: 'CM 11/15/2020 15:03:24'!
ERROR!

!testRun: #AccountSummaryReportTest #test02 stamp: 'CM 11/15/2020 15:03:24'!
ERROR!
!Deposit methodsFor: 'reportes' stamp: 'CM 11/15/2020 15:03:48'!
printReport: anAccountSummaryReport 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'reportes' stamp: 'CM 11/15/2020 15:04:30' prior: 50870695!
printReport: anAccountSummaryReport 

	^ anAccountSummaryReport printForDeposit: self.! !

!testRun: #AccountSummaryReportTest #test02 stamp: 'CM 11/15/2020 15:04:32'!
ERROR!
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:04:39'!
printForDeposit: aDeposit 
	self shouldBeImplemented.! !
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:04:56' prior: 50870709!
printForDeposit: aDeposit 
	
	^ 'Deposito de ', aDeposit value asString.! !

!testRun: #AccountSummaryReportTest #test02 stamp: 'CM 11/15/2020 15:04:57'!
PASSED!

!testRun: #AccountSummaryReportTest #test02 stamp: 'CM 11/15/2020 15:05:00'!
PASSED!

!testRun: #AccountSummaryReportTest #test03 stamp: 'CM 11/15/2020 15:05:06'!
ERROR!

!testRun: #AccountSummaryReportTest #test03 stamp: 'CM 11/15/2020 15:05:06'!
ERROR!
!Withdraw methodsFor: 'balance' stamp: 'CM 11/15/2020 15:05:42'!
printReport: anAccountSummaryReport 

	^ anAccountSummaryReport printForWithdraw: self.! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:05:54'!
printReport: anAccountSummaryReport 

	^ anAccountSummaryReport printForIncomingTransfer: self.! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:06:06'!
printReport: anAccountSummaryReport 

	^ anAccountSummaryReport printForOutgoingTransfer: self.! !
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:06:25'!
printForWithdraw: aDeposit 
	
	^ 'Extraccion de ', aDeposit value asString.! !
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:06:41'!
printForIncomingTransfer: aDeposit 
	
	^ 'Transferencia entrante de ', aDeposit value asString.! !
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:06:52'!
printForOutgoingTransfer: aDeposit 
	
	^ 'Transferencia saliente de ', aDeposit value asString.! !

!testRun: #AccountSummaryReportTest #test01 stamp: 'CM 11/15/2020 15:06:56'!
PASSED!

!testRun: #AccountSummaryReportTest #test02 stamp: 'CM 11/15/2020 15:06:58'!
PASSED!

!testRun: #AccountSummaryReportTest #test03 stamp: 'CM 11/15/2020 15:07:01'!
PASSED!

!testRun: #AccountSummaryReportTest #test04 stamp: 'CM 11/15/2020 15:07:02'!
PASSED!

!testRun: #AccountSummaryReportTest #test05 stamp: 'CM 11/15/2020 15:07:04'!
PASSED!

!testRun: #AccountSummaryReportTest #test06 stamp: 'CM 11/15/2020 15:07:06'!
ERROR!

!testRun: #AccountSummaryReportTest #test06 stamp: 'CM 11/15/2020 15:07:06'!
ERROR!

!testRun: #AccountSummaryReportTest #test06 stamp: 'CM 11/15/2020 15:09:27'!
ERROR!

!testRun: #AccountSummaryReportTest #test06 stamp: 'CM 11/15/2020 15:09:27'!
ERROR!
!Portfolio methodsFor: 'reportes' stamp: 'CM 11/15/2020 15:14:15'!
printReport: anAccountSummaryReport 
	
	| report |
	
	report := OrderedCollection new.
	accounts do: [ :account |
			report addAll: (account printReport: anAccountSummaryReport)
		].
	^ report flatten .
	! !

!testRun: #AccountSummaryReportTest #test01 stamp: 'CM 11/15/2020 15:14:18'!
PASSED!

!testRun: #AccountSummaryReportTest #test02 stamp: 'CM 11/15/2020 15:14:18'!
PASSED!

!testRun: #AccountSummaryReportTest #test03 stamp: 'CM 11/15/2020 15:14:18'!
PASSED!

!testRun: #AccountSummaryReportTest #test04 stamp: 'CM 11/15/2020 15:14:18'!
PASSED!

!testRun: #AccountSummaryReportTest #test05 stamp: 'CM 11/15/2020 15:14:18'!
PASSED!

!testRun: #AccountSummaryReportTest #test06 stamp: 'CM 11/15/2020 15:14:18'!
PASSED!

Object subclass: #AccountReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountReport category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 15:14:52'!
Object subclass: #AccountReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountReport subclass: #AccountSummaryReport
	instanceVariableNames: 'receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 15:15:00'!
AccountReport subclass: #AccountSummaryReport
	instanceVariableNames: 'receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountReport subclass: #AccountNetTransferReport
	instanceVariableNames: 'receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountNetTransferReport category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 15:15:23'!
AccountReport subclass: #AccountNetTransferReport
	instanceVariableNames: 'receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountNetTransferReport class
	instanceVariableNames: ''!

!classDefinition: 'AccountNetTransferReport class' category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 15:15:23'!
AccountNetTransferReport class
	instanceVariableNames: ''!
!AccountNetTransferReport methodsFor: 'initialization' stamp: 'CM 11/15/2020 15:15:23'!
initializeFor: aReceptiveAccount 
	
	receptiveAccount := aReceptiveAccount.! !
!AccountNetTransferReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:15:23'!
printForDeposit: aDeposit 
	
	^ 'Deposito de ', aDeposit value asString.! !
!AccountNetTransferReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:15:23'!
printForIncomingTransfer: aDeposit 
	
	^ 'Transferencia entrante de ', aDeposit value asString.! !
!AccountNetTransferReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:15:23'!
printForOutgoingTransfer: aDeposit 
	
	^ 'Transferencia saliente de ', aDeposit value asString.! !
!AccountNetTransferReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:15:23'!
printForWithdraw: aDeposit 
	
	^ 'Extraccion de ', aDeposit value asString.! !
!AccountNetTransferReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:15:23'!
printReport
	
	|report|
	report := receptiveAccount printReport: self.
	
	report add: 'Balance = ' , receptiveAccount balance asString.
	
	^ report.! !
!AccountNetTransferReport class methodsFor: 'instance creation' stamp: 'CM 11/15/2020 15:15:23'!
for: aReceptiveAccount 
	
	^self new initializeFor: aReceptiveAccount ! !
!AccountNetTransferReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:16:06' prior: 50870870!
printForDeposit: aDeposit 
	
	^ 0.! !
!AccountNetTransferReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:16:24' prior: 50870876!
printForIncomingTransfer: aDeposit 
	
	^ aDeposit value.! !
!AccountNetTransferReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:17:12' prior: 50870882!
printForOutgoingTransfer: aDeposit 
	
	^ aDeposit value * -1.! !
!AccountNetTransferReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:17:17' prior: 50870888!
printForWithdraw: aDeposit 
	
	^ 0.! !

!classRenamed: #AccountSummaryReportTest as: #AccountReportTest stamp: 'CM 11/15/2020 15:17:44'!
Smalltalk renameClassNamed: #AccountSummaryReportTest as: #AccountReportTest!
!AccountReportTest methodsFor: 'net transfer report' stamp: 'CM 11/15/2020 15:19:02'!
test07

	| account netTransfer |
	
	account := ReceptiveAccount new.
	netTransfer := 0.

	self assert: netTransfer equals: (AccountNetTransferReport for: account) printReport .
! !
!AccountNetTransferReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:20:23' prior: 50870894!
printReport
	
	| report |
	report := receptiveAccount printReport: self.
	
	^ report sum: [ :t | t ] ifEmpty: [ 0 ].! !

!testRun: #AccountReportTest #test07 stamp: 'CM 11/15/2020 15:20:31'!
PASSED!
!AccountReportTest methodsFor: 'net transfer report' stamp: 'CM 11/15/2020 15:21:27'!
test08

	| account netTransfer |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	netTransfer := 0.
	
	self assert: netTransfer equals: (AccountNetTransferReport for: account) printReport .! !

!testRun: #AccountReportTest #test08 stamp: 'CM 11/15/2020 15:21:29'!
PASSED!
!AccountReportTest methodsFor: 'net transfer report' stamp: 'CM 11/15/2020 15:22:19'!
test09

	| account1 account2 netTransfer |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	netTransfer := 50.
	
	self assert: netTransfer equals: (AccountNetTransferReport for: account2) printReport .! !

!testRun: #AccountReportTest #test09 stamp: 'CM 11/15/2020 15:22:21'!
PASSED!
!AccountReportTest methodsFor: 'net transfer report' stamp: 'CM 11/15/2020 15:22:44' prior: 50870966!
test09

	| account1 account2 netTransfer |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	netTransfer := -50.
	
	self assert: netTransfer equals: (AccountNetTransferReport for: account1) printReport .! !
!AccountReportTest methodsFor: 'net transfer report' stamp: 'CM 11/15/2020 15:22:48'!
test10

	| account1 account2 netTransfer |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	netTransfer := -50.
	
	self assert: netTransfer equals: (AccountNetTransferReport for: account1) printReport .! !
!AccountReportTest methodsFor: 'net transfer report' stamp: 'CM 11/15/2020 15:22:19' prior: 50870981!
test09

	| account1 account2 netTransfer |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	netTransfer := 50.
	
	self assert: netTransfer equals: (AccountNetTransferReport for: account2) printReport .! !

!testRun: #AccountReportTest #test10 stamp: 'CM 11/15/2020 15:22:59'!
PASSED!
!AccountReportTest methodsFor: 'net transfer report' stamp: 'CM 11/15/2020 15:23:35'!
test11

	| account netTransfer |
	
	account := ReceptiveAccount new.
	
	Withdraw register: 50 on: account.
	
	netTransfer := -50.
	
	self assert: netTransfer equals: (AccountNetTransferReport for: account) printReport .! !

!testRun: #AccountReportTest #test11 stamp: 'CM 11/15/2020 15:23:37'!
FAILURE!

!testRun: #AccountReportTest #test11 stamp: 'CM 11/15/2020 15:23:37'!
FAILURE!
!AccountReportTest methodsFor: 'net transfer report' stamp: 'CM 11/15/2020 15:23:44' prior: 50871020!
test11

	| account netTransfer |
	
	account := ReceptiveAccount new.
	
	Withdraw register: 50 on: account.
	
	netTransfer := 0.
	
	self assert: netTransfer equals: (AccountNetTransferReport for: account) printReport .! !

!testRun: #AccountReportTest #test11 stamp: 'CM 11/15/2020 15:23:46'!
PASSED!

!methodRemoval: Portfolio #summary stamp: 'CM 11/15/2020 15:32:48'!
summary
	| portfolioSummary accountSummary |
	
	portfolioSummary := OrderedCollection new.
	accounts do: [ :account |
			accountSummary := account summary.
			accountSummary removeLast.
			portfolioSummary addAll:  accountSummary 
		].
	
	portfolioSummary add: 'Balance = ', self balance asString .
	
	^ portfolioSummary flatten .!

!methodRemoval: ReceptiveAccount #summary stamp: 'CM 11/15/2020 15:32:53'!
summary
	| accountSummary |
	
	accountSummary := OrderedCollection new.
	
	transactions do: [ :transaction | 
			(transaction isKindOf: Deposit) ifTrue: [ accountSummary add: 'Deposito de ', transaction value asString ].
			(transaction isKindOf: Withdraw ) ifTrue: [ accountSummary add: 'Extraccion de ', transaction value asString ].
			(transaction isKindOf: IncomingTransfer ) ifTrue: [ accountSummary add: 'Transferencia entrante de ', transaction value asString ].
			(transaction isKindOf: OutgoingTransfer ) ifTrue: [ accountSummary add: 'Transferencia saliente de ', transaction value asString ].
		].

	accountSummary add: 'Balance = ', self balance asString .
	
	^ accountSummary.!
!Deposit methodsFor: 'reportes' stamp: 'CM 11/15/2020 15:34:44'!
generateReportFor: anAccountSummaryReport 

	^ anAccountSummaryReport printForDeposit: self.! !
!Portfolio methodsFor: 'reportes' stamp: 'CM 11/15/2020 15:34:44'!
generateReportFor: anAccountSummaryReport 
	
	| report |
	
	report := OrderedCollection new.
	accounts do: [ :account |
			report addAll: (account printReport: anAccountSummaryReport)
		].
	^ report flatten .
	! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:34:44'!
generateReportFor: anAccountSummaryReport 

	^ anAccountSummaryReport printForOutgoingTransfer: self.! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:34:44'!
generateReportFor: anAccountSummaryReport 

	^ anAccountSummaryReport printForIncomingTransfer: self.! !
!ReceptiveAccount methodsFor: 'reportes' stamp: 'CM 11/15/2020 15:34:44'!
generateReportFor: anAccountSummaryReport 
	
	| report |
	
	report := OrderedCollection new.
	transactions do: [ :transaction |
			report add: (transaction printReport: anAccountSummaryReport)
		].
	^ report.
	! !
!Withdraw methodsFor: 'balance' stamp: 'CM 11/15/2020 15:34:44'!
generateReportFor: anAccountSummaryReport 

	^ anAccountSummaryReport printForWithdraw: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:34:44' prior: 50870791!
printReport: anAccountSummaryReport 
	
	| report |
	
	report := OrderedCollection new.
	accounts do: [ :account |
			report addAll: (account generateReportFor: anAccountSummaryReport)
		].
	^ report flatten .
	! !
!AccountNetTransferReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:34:44' prior: 50870945!
printReport
	
	| report |
	report := receptiveAccount generateReportFor: self.
	
	^ report sum: [ :t | t ] ifEmpty: [ 0 ].! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:34:44' prior: 50870644!
printReport: anAccountSummaryReport 
	
	| report |
	
	report := OrderedCollection new.
	transactions do: [ :transaction |
			report add: (transaction generateReportFor: anAccountSummaryReport)
		].
	^ report.
	! !
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:34:44' prior: 50870677!
printReport
	
	|report|
	report := receptiveAccount generateReportFor: self.
	
	report add: 'Balance = ' , receptiveAccount balance asString.
	
	^ report.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:34:44' prior: 50871090!
generateReportFor: anAccountSummaryReport 
	
	| report |
	
	report := OrderedCollection new.
	accounts do: [ :account |
			report addAll: (account generateReportFor: anAccountSummaryReport)
		].
	^ report flatten .
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:34:44' prior: 50871112!
generateReportFor: anAccountSummaryReport 
	
	| report |
	
	report := OrderedCollection new.
	transactions do: [ :transaction |
			report add: (transaction generateReportFor: anAccountSummaryReport)
		].
	^ report.
	! !

!methodRemoval: Deposit #printReport: stamp: 'CM 11/15/2020 15:34:44'!
printReport: anAccountSummaryReport 

	^ anAccountSummaryReport printForDeposit: self.!

!methodRemoval: Portfolio #printReport: stamp: 'CM 11/15/2020 15:34:44'!
printReport: anAccountSummaryReport 
	
	| report |
	
	report := OrderedCollection new.
	accounts do: [ :account |
			report addAll: (account generateReportFor: anAccountSummaryReport)
		].
	^ report flatten .
	!

!methodRemoval: OutgoingTransfer #printReport: stamp: 'CM 11/15/2020 15:34:44'!
printReport: anAccountSummaryReport 

	^ anAccountSummaryReport printForOutgoingTransfer: self.!

!methodRemoval: IncomingTransfer #printReport: stamp: 'CM 11/15/2020 15:34:44'!
printReport: anAccountSummaryReport 

	^ anAccountSummaryReport printForIncomingTransfer: self.!

!methodRemoval: ReceptiveAccount #printReport: stamp: 'CM 11/15/2020 15:34:44'!
printReport: anAccountSummaryReport 
	
	| report |
	
	report := OrderedCollection new.
	transactions do: [ :transaction |
			report add: (transaction generateReportFor: anAccountSummaryReport)
		].
	^ report.
	!

!methodRemoval: Withdraw #printReport: stamp: 'CM 11/15/2020 15:34:44'!
printReport: anAccountSummaryReport 

	^ anAccountSummaryReport printForWithdraw: self.!
!ReceptiveAccount methodsFor: 'reportes' stamp: 'CM 11/15/2020 15:35:04' prior: 50871175!
generateReportFor: anAccountReport 
	
	| report |
	
	report := OrderedCollection new.
	transactions do: [ :transaction |
			report add: (transaction generateReportFor: anAccountReport)
		].
	^ report.
	! !
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:36:11' prior: 50871156!
printReport
	
	|report|
	
	report := receptiveAccount generateReportFor: self.
	
	report add: 'Balance = ' , receptiveAccount balance asString.
	
	^ report.! !
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:36:45' prior: 50871234!
printReport
	
	| report |
	
	report := receptiveAccount generateReportFor: self.
	
	report add: 'Balance = ' , receptiveAccount balance asString.
	
	^ report.! !

Object subclass: #AccountReport
	instanceVariableNames: 'report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'reportes' stamp: 'CM 11/15/2020 15:42:30' prior: 50871224!
generateReportFor: anAccountReport 
	
	transactions do: [ :transaction |
			transaction addToReport: anAccountReport
		].
	
	! !
!Deposit methodsFor: 'reportes' stamp: 'CM 11/15/2020 15:43:01'!
addToReport: anAccountSummaryReport 

	^ anAccountSummaryReport printForDeposit: self.! !

!methodRemoval: Deposit #generateReportFor: stamp: 'CM 11/15/2020 15:43:01'!
generateReportFor: anAccountSummaryReport 

	^ anAccountSummaryReport printForDeposit: self.!
!Deposit methodsFor: 'reportes' stamp: 'CM 11/15/2020 15:43:22' prior: 50871263!
addToReport: anAccountSummaryReport 

	anAccountSummaryReport printForDeposit: self.! !
!Withdraw methodsFor: 'balance' stamp: 'CM 11/15/2020 15:43:27' prior: 50871121!
generateReportFor: anAccountSummaryReport 

	anAccountSummaryReport printForWithdraw: self.! !
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:43:32' prior: 50871106!
generateReportFor: anAccountSummaryReport 

	anAccountSummaryReport printForIncomingTransfer: self.! !
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:43:36' prior: 50871100!
generateReportFor: anAccountSummaryReport 

	anAccountSummaryReport printForOutgoingTransfer: self.! !

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 15:44:02'!
AccountReport subclass: #AccountSummaryReport
	instanceVariableNames: 'receptiveAccount reporteAcumulado'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:44:00' prior: 50870755!
printForIncomingTransfer: aDeposit 
	
	reporteAcumulado add: 'Transferencia entrante de ', aDeposit value asString.! !
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:44:11' prior: 50870761!
printForOutgoingTransfer: aDeposit 
	
	reporteAcumulado add: 'Transferencia saliente de ', aDeposit value asString.! !
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:44:16' prior: 50870749!
printForWithdraw: aDeposit 
	
	reporteAcumulado add: 'Extraccion de ', aDeposit value asString.! !
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:44:40' prior: 50871243!
printReport
	
	receptiveAccount generateReportFor: self.
	
	reporteAcumulado add: 'Balance = ' , receptiveAccount balance asString.
	
	^ reporteAcumulado.! !
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:44:54' prior: 50871331!
printReport
	reporteAcumulado := OrderedCollection new.
	receptiveAccount generateReportFor: self.
	
	reporteAcumulado add: 'Balance = ' , receptiveAccount balance asString.
	
	^ reporteAcumulado.! !

!testRun: #AccountReportTest #test01 stamp: 'CM 11/15/2020 15:45:06'!
PASSED!

!testRun: #AccountReportTest #test01 stamp: 'CM 11/15/2020 15:45:08'!
PASSED!

!testRun: #AccountReportTest #test02 stamp: 'CM 11/15/2020 15:45:08'!
FAILURE!

!testRun: #AccountReportTest #test03 stamp: 'CM 11/15/2020 15:45:08'!
ERROR!

!testRun: #AccountReportTest #test04 stamp: 'CM 11/15/2020 15:45:08'!
ERROR!

!testRun: #AccountReportTest #test05 stamp: 'CM 11/15/2020 15:45:08'!
ERROR!

!testRun: #AccountReportTest #test06 stamp: 'CM 11/15/2020 15:45:08'!
ERROR!

!testRun: #AccountReportTest #test03 stamp: 'CM 11/15/2020 15:45:14'!
ERROR!

!testRun: #AccountReportTest #test03 stamp: 'CM 11/15/2020 15:45:14'!
ERROR!
!Withdraw methodsFor: 'balance' stamp: 'CM 11/15/2020 15:45:55'!
addToReport: anAccountSummaryReport 

	anAccountSummaryReport printForWithdraw: self.! !

!methodRemoval: Withdraw #generateReportFor: stamp: 'CM 11/15/2020 15:45:55'!
generateReportFor: anAccountSummaryReport 

	anAccountSummaryReport printForWithdraw: self.!
!IncomingTransfer methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:46:07'!
addToReport: anAccountSummaryReport 

	anAccountSummaryReport printForIncomingTransfer: self.! !

!methodRemoval: IncomingTransfer #generateReportFor: stamp: 'CM 11/15/2020 15:46:07'!
generateReportFor: anAccountSummaryReport 

	anAccountSummaryReport printForIncomingTransfer: self.!
!OutgoingTransfer methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:46:17'!
addToReport: anAccountSummaryReport 

	anAccountSummaryReport printForOutgoingTransfer: self.! !

!methodRemoval: OutgoingTransfer #generateReportFor: stamp: 'CM 11/15/2020 15:46:17'!
generateReportFor: anAccountSummaryReport 

	anAccountSummaryReport printForOutgoingTransfer: self.!

!testRun: #AccountReportTest #test01 stamp: 'CM 11/15/2020 15:46:23'!
PASSED!

!testRun: #AccountReportTest #test02 stamp: 'CM 11/15/2020 15:46:23'!
FAILURE!

!testRun: #AccountReportTest #test03 stamp: 'CM 11/15/2020 15:46:23'!
PASSED!

!testRun: #AccountReportTest #test04 stamp: 'CM 11/15/2020 15:46:23'!
PASSED!

!testRun: #AccountReportTest #test05 stamp: 'CM 11/15/2020 15:46:23'!
PASSED!

!testRun: #AccountReportTest #test06 stamp: 'CM 11/15/2020 15:46:23'!
ERROR!

!testRun: #AccountReportTest #test01 stamp: 'CM 11/15/2020 15:46:25'!
PASSED!

!testRun: #AccountReportTest #test02 stamp: 'CM 11/15/2020 15:46:25'!
FAILURE!

!testRun: #AccountReportTest #test03 stamp: 'CM 11/15/2020 15:46:25'!
PASSED!

!testRun: #AccountReportTest #test04 stamp: 'CM 11/15/2020 15:46:25'!
PASSED!

!testRun: #AccountReportTest #test05 stamp: 'CM 11/15/2020 15:46:25'!
PASSED!

!testRun: #AccountReportTest #test06 stamp: 'CM 11/15/2020 15:46:25'!
ERROR!

!testRun: #AccountReportTest #test06 stamp: 'CM 11/15/2020 15:46:33'!
ERROR!

!testRun: #AccountReportTest #test02 stamp: 'CM 11/15/2020 15:46:44'!
FAILURE!
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:47:16' prior: 50870715!
printForDeposit: aDeposit 
	
	reporteAcumulado add: 'Deposito de ', aDeposit value asString.! !
!Portfolio methodsFor: 'reportes' stamp: 'CM 11/15/2020 15:47:42' prior: 50871164!
generateReportFor: anAccountSummaryReport 
	
	
	accounts do: [ :account |
			account generateReportFor: anAccountSummaryReport
		].
	
	! !
!Portfolio methodsFor: 'reportes' stamp: 'CM 11/15/2020 15:47:44' prior: 50871447!
generateReportFor: anAccountSummaryReport 
	
	accounts do: [ :account |
			account generateReportFor: anAccountSummaryReport
		].
	
	! !

!testRun: #AccountReportTest #test01 stamp: 'CM 11/15/2020 15:47:49'!
PASSED!

!testRun: #AccountReportTest #test02 stamp: 'CM 11/15/2020 15:47:49'!
PASSED!

!testRun: #AccountReportTest #test03 stamp: 'CM 11/15/2020 15:47:49'!
PASSED!

!testRun: #AccountReportTest #test04 stamp: 'CM 11/15/2020 15:47:49'!
PASSED!

!testRun: #AccountReportTest #test05 stamp: 'CM 11/15/2020 15:47:49'!
PASSED!

!testRun: #AccountReportTest #test06 stamp: 'CM 11/15/2020 15:47:49'!
PASSED!

!testRun: #AccountReportTest #test07 stamp: 'CM 11/15/2020 15:47:49'!
ERROR!

!testRun: #AccountReportTest #test08 stamp: 'CM 11/15/2020 15:47:49'!
ERROR!

!testRun: #AccountReportTest #test09 stamp: 'CM 11/15/2020 15:47:49'!
ERROR!

!testRun: #AccountReportTest #test10 stamp: 'CM 11/15/2020 15:47:49'!
ERROR!

!testRun: #AccountReportTest #test11 stamp: 'CM 11/15/2020 15:47:49'!
ERROR!

!testRun: #AccountReportTest #test01 stamp: 'CM 11/15/2020 15:47:52'!
PASSED!

!testRun: #AccountReportTest #test02 stamp: 'CM 11/15/2020 15:47:52'!
PASSED!

!testRun: #AccountReportTest #test03 stamp: 'CM 11/15/2020 15:47:52'!
PASSED!

!testRun: #AccountReportTest #test04 stamp: 'CM 11/15/2020 15:47:52'!
PASSED!

!testRun: #AccountReportTest #test05 stamp: 'CM 11/15/2020 15:47:52'!
PASSED!

!testRun: #AccountReportTest #test06 stamp: 'CM 11/15/2020 15:47:52'!
PASSED!
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:48:13' prior: 50871340!
printReport

	reporteAcumulado := OrderedCollection new.
	receptiveAccount generateReportFor: self.
	
	reporteAcumulado add: 'Balance = ' , receptiveAccount balance asString.
	
	^ reporteAcumulado.! !
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:48:17' prior: 50871504!
printReport

	reporteAcumulado := OrderedCollection new.
	
	receptiveAccount generateReportFor: self.
	
	reporteAcumulado add: 'Balance = ' , receptiveAccount balance asString.
	
	^ reporteAcumulado.! !

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 15:49:24'!
AccountReport subclass: #AccountSummaryReport
	instanceVariableNames: 'account reporteAcumulado'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:49:24' prior: 50871514!
printReport

	reporteAcumulado := OrderedCollection new.
	
	account generateReportFor: self.
	
	reporteAcumulado add: 'Balance = ' , account balance asString.
	
	^ reporteAcumulado.! !
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:49:24' prior: 50870533!
initializeFor: aReceptiveAccount 
	
	account := aReceptiveAccount.! !

!classDefinition: #AccountNetTransferReport category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 15:50:17'!
AccountReport subclass: #AccountNetTransferReport
	instanceVariableNames: 'receptiveAccount reporteAcumulado'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountNetTransferReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:50:15' prior: 50871138!
printReport
	
	reporteAcumulado := 0.
	receptiveAccount generateReportFor: self.
	
	^ reporteAcumulado.! !
!AccountNetTransferReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:50:26' prior: 50870908!
printForDeposit: aDeposit 
	! !
!AccountNetTransferReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:50:35' prior: 50870913!
printForIncomingTransfer: aDeposit 
	
	reporteAcumulado + aDeposit value.! !
!AccountNetTransferReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:50:46' prior: 50871570!
printForIncomingTransfer: aDeposit 
	
	reporteAcumulado := reporteAcumulado + aDeposit value.! !
!AccountNetTransferReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:50:56' prior: 50870919!
printForOutgoingTransfer: aDeposit 
	
	reporteAcumulado := reporteAcumulado - aDeposit value.! !
!AccountNetTransferReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:51:00' prior: 50870925!
printForWithdraw: aDeposit 
	! !

!testRun: #AccountReportTest #test01 stamp: 'CM 11/15/2020 15:51:07'!
PASSED!

!testRun: #AccountReportTest #test02 stamp: 'CM 11/15/2020 15:51:07'!
PASSED!

!testRun: #AccountReportTest #test03 stamp: 'CM 11/15/2020 15:51:07'!
PASSED!

!testRun: #AccountReportTest #test04 stamp: 'CM 11/15/2020 15:51:07'!
PASSED!

!testRun: #AccountReportTest #test05 stamp: 'CM 11/15/2020 15:51:07'!
PASSED!

!testRun: #AccountReportTest #test06 stamp: 'CM 11/15/2020 15:51:07'!
PASSED!

!testRun: #AccountReportTest #test07 stamp: 'CM 11/15/2020 15:51:09'!
PASSED!

!testRun: #AccountReportTest #test08 stamp: 'CM 11/15/2020 15:51:09'!
PASSED!

!testRun: #AccountReportTest #test09 stamp: 'CM 11/15/2020 15:51:09'!
PASSED!

!testRun: #AccountReportTest #test10 stamp: 'CM 11/15/2020 15:51:09'!
PASSED!

!testRun: #AccountReportTest #test11 stamp: 'CM 11/15/2020 15:51:09'!
PASSED!

!classDefinition: #AccountTreeReport category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 15:57:06'!
AccountReport subclass: #AccountTreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountReportTest methodsFor: 'portfolio tree report' stamp: 'CM 11/15/2020 15:56:43'!
test012

	| report angiesAccount childrenPortfolio familyPortfolio johnsAccount myAccount |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:myAccount with: childrenPortfolio.

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '   Cuenta Mia' 
							with: '   Portfolio de hijos' 
							with: '      Cuenta de Juan' 
							with: '      Cuenta de Angeles'.

	self assert: report equals: (AccountTreeReport for: familyPortfolio) printReport .
! !

Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 15:57:30'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:58:17'!
named: aName with: anAccount

	^self new 
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:59:21' prior: 50871669!
named: aName with: anAccount

	^(self initializeNamed: aName)
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 15:59:42'!
named: aName with: anAccount with: anotherAccount

	^(self initializeNamed: aName)
		add: anAccount;
		add: anotherAccount;
		yourself! !
!Portfolio methodsFor: 'initialization' stamp: 'CM 11/15/2020 16:00:23'!
initializeNamed: aName
	
	name := aName.
	! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 16:00:32' prior: 50871675!
named: aName with: anAccount

	^(self new initializeNamed: aName)
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 16:00:36' prior: 50871681!
named: aName with: anAccount with: anotherAccount

	^(self new initializeNamed: aName)
		add: anAccount;
		add: anotherAccount;
		yourself! !

!classDefinition: #AccountTreeReport category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 16:01:22'!
AccountReport subclass: #AccountTreeReport
	instanceVariableNames: 'reporteAcumulado'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTreeReport category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 16:01:42'!
AccountReport subclass: #AccountTreeReport
	instanceVariableNames: 'reporteAcumulado account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTreeReport methodsFor: 'no messages' stamp: 'CM 11/15/2020 16:01:21'!
printReport

	reporteAcumulado := OrderedCollection new.
	
	account generateReportFor: self.
	
	reporteAcumulado add: 'Balance = ' , account balance asString.
	
	^ reporteAcumulado.! !
!AccountTreeReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 16:02:55' prior: 50871724!
printReport

	reporteAcumulado := OrderedCollection new.
	
	account generateReportFor: self.
	
	^ reporteAcumulado.! !

!classDefinition: #AccountTreeReport category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 16:08:16'!
AccountReport subclass: #AccountTreeReport
	instanceVariableNames: 'reporteAcumulado account sangriaActual'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTreeReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 16:08:13'!
printForReceptiveAccount: aReceptiveAccount

	reporteAcumulado add: sangriaActual * '   ' , aReceptiveAccount name.! !
!AccountTreeReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 16:08:30' prior: 50871733!
printReport

	sangriaActual := 0.
	reporteAcumulado := OrderedCollection new.
	
	account generateReportFor: self.
	
	^ reporteAcumulado.! !

'aa' * 3!

----End fileIn of /home/cmarta/Downloads/parcial/limpio/linux64/Packages/TerseGuide.pck.st----!
!AccountTreeReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 16:12:29' prior: 50871749!
printForReceptiveAccount: aReceptiveAccount

	reporteAcumulado add: sangriaActual , aReceptiveAccount name.! !
!AccountTreeReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 16:13:06'!
printForReceptivePortfolio: aPortfolio

	reporteAcumulado add: sangriaActual , aPortfolio name.
	sangriaActual , '    '! !
!AccountTreeReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 16:13:11' prior: 50871756!
printReport

	sangriaActual := ''.
	reporteAcumulado := OrderedCollection new.
	
	account generateReportFor: self.
	
	^ reporteAcumulado.! !
!Portfolio methodsFor: 'reportes' stamp: 'CM 11/15/2020 16:16:54' prior: 50871454!
generateReportFor: anAccountSummaryReport 
	
	accounts do: [ :account |
			anAccountSummaryReport addSangria.
			account generateReportFor: anAccountSummaryReport.
			anAccountSummaryReport removeSangria.
		].
	
	! !
!AccountTreeReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 16:17:55' prior: 50874707!
printForReceptivePortfolio: aPortfolio

	reporteAcumulado add: sangriaActual , aPortfolio name.! !
!AccountTreeReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 16:18:27'!
addSangria
	sangriaActual , '    '.
	! !

!methodRemoval: AccountTreeReport #addSangria stamp: 'CM 11/15/2020 16:19:21'!
addSangria
	sangriaActual , '    '.
	!

!methodRemoval: AccountTreeReport #printReport stamp: 'CM 11/15/2020 16:19:23'!
printReport

	sangriaActual := ''.
	reporteAcumulado := OrderedCollection new.
	
	account generateReportFor: self.
	
	^ reporteAcumulado.!
!Portfolio methodsFor: 'reportes' stamp: 'CM 11/15/2020 16:20:49' prior: 50874722!
generateReportFor: anAccountSummaryReport 
	
	accounts do: [ :account |
			anAccountSummaryReport printForPortfolio: self atDepth: parents size.
			account generateReportFor: anAccountSummaryReport.
		].
	
	! !
!ReceptiveAccount methodsFor: 'reportes' stamp: 'CM 11/15/2020 16:21:14' prior: 50871256!
generateReportFor: anAccountReport 
	
	transactions do: [ :transaction |
			anAccountReport printForReceptiveAccount: self.
			transaction addToReport: anAccountReport
		].
	
	! !
!ReceptiveAccount methodsFor: 'reportes' stamp: 'CM 11/15/2020 16:21:45' prior: 50874763!
generateReportFor: anAccountReport 
	
	transactions do: [ :transaction |
			transaction addToReport: anAccountReport
		].
	
	! !
!Portfolio methodsFor: 'reportes' stamp: 'CM 11/15/2020 16:21:55' prior: 50874753!
generateReportFor: anAccountSummaryReport 
	
	accounts do: [ :account |
			account generateReportFor: anAccountSummaryReport.
		].
	
	! !
!AccountReportTest methodsFor: 'portfolio tree report' stamp: 'CM 11/15/2020 16:22:33' prior: 50871629!
test012
"
	| report angiesAccount childrenPortfolio familyPortfolio johnsAccount myAccount |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:myAccount with: childrenPortfolio.

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '   Cuenta Mia' 
							with: '   Portfolio de hijos' 
							with: '      Cuenta de Juan' 
							with: '      Cuenta de Angeles'.

	self assert: report equals: (AccountTreeReport for: familyPortfolio) printReport .
"! !

!classRemoval: #AccountTreeReport stamp: 'CM 11/15/2020 16:22:41'!
AccountReport subclass: #AccountTreeReport
	instanceVariableNames: 'reporteAcumulado account sangriaActual'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #AccountReportTest #test07 stamp: 'CM 11/15/2020 16:22:44'!
PASSED!

!testRun: #AccountReportTest #test08 stamp: 'CM 11/15/2020 16:22:44'!
PASSED!

!testRun: #AccountReportTest #test09 stamp: 'CM 11/15/2020 16:22:44'!
PASSED!

!testRun: #AccountReportTest #test10 stamp: 'CM 11/15/2020 16:22:44'!
PASSED!

!testRun: #AccountReportTest #test11 stamp: 'CM 11/15/2020 16:22:44'!
PASSED!

!testRun: #AccountReportTest #test01 stamp: 'CM 11/15/2020 16:22:46'!
PASSED!

!testRun: #AccountReportTest #test02 stamp: 'CM 11/15/2020 16:22:46'!
PASSED!

!testRun: #AccountReportTest #test03 stamp: 'CM 11/15/2020 16:22:46'!
PASSED!

!testRun: #AccountReportTest #test04 stamp: 'CM 11/15/2020 16:22:46'!
PASSED!

!testRun: #AccountReportTest #test05 stamp: 'CM 11/15/2020 16:22:46'!
PASSED!

!testRun: #AccountReportTest #test06 stamp: 'CM 11/15/2020 16:22:46'!
PASSED!

----SNAPSHOT----(15 November 2020 16:22:50) CuisUniversity-4384.image priorSource: 17213317!

AccountReport subclass: #AccountTreeReport
	instanceVariableNames: 'account reporteAcumulado'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTreeReport category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 16:30:37'!
AccountReport subclass: #AccountTreeReport
	instanceVariableNames: 'account reporteAcumulado'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTreeReport methodsFor: 'nil' stamp: 'CM 11/15/2020 16:30:47'!
initializeFor: aReceptiveAccount 
	
	account := aReceptiveAccount.! !
!AccountTreeReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 16:31:27'!
printReport

	reporteAcumulado := OrderedCollection new.
	
	account generateReportFor: self.
	
	^ reporteAcumulado.! !

!classDefinition: #AccountTreeReport category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 16:32:29'!
AccountReport subclass: #AccountTreeReport
	instanceVariableNames: 'account reporteAcumulado sangria'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTreeReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 16:32:26'!
printForReceptiveAccount: aReceptiveAccount

	reporteAcumulado add: sangria , aReceptiveAccount name.
	! !
!AccountTreeReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 16:32:42' prior: 50874871!
printReport

	sangria := ''.
	reporteAcumulado := OrderedCollection new.
	
	account generateReportFor: self.
	
	^ reporteAcumulado.! !
!Portfolio methodsFor: 'reportes' stamp: 'CM 11/15/2020 17:29:33' prior: 50874779!
generateReportFor: anAccountSummaryReport 
	
	accounts do: [ :account |
			anAccountSummaryReport generateReportFor: account.
		].
	
	! !
!AccountNetTransferReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 17:30:04'!
generateReportFor: anAccount
	
	anAccount generateReportFor: self.! !
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 17:30:12'!
generateReportFor: anAccount
	
	anAccount generateReportFor: self.! !

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 17:30:17'!
PASSED!

!testRun: #AccountReportTest #test07 stamp: 'CM 11/15/2020 17:30:19'!
PASSED!

!testRun: #AccountReportTest #test08 stamp: 'CM 11/15/2020 17:30:19'!
PASSED!

!testRun: #AccountReportTest #test09 stamp: 'CM 11/15/2020 17:30:19'!
PASSED!

!testRun: #AccountReportTest #test10 stamp: 'CM 11/15/2020 17:30:19'!
PASSED!

!testRun: #AccountReportTest #test11 stamp: 'CM 11/15/2020 17:30:19'!
PASSED!

!testRun: #AccountReportTest #test01 stamp: 'CM 11/15/2020 17:30:21'!
PASSED!

!testRun: #AccountReportTest #test02 stamp: 'CM 11/15/2020 17:30:21'!
PASSED!

!testRun: #AccountReportTest #test03 stamp: 'CM 11/15/2020 17:30:21'!
PASSED!

!testRun: #AccountReportTest #test04 stamp: 'CM 11/15/2020 17:30:21'!
PASSED!

!testRun: #AccountReportTest #test05 stamp: 'CM 11/15/2020 17:30:21'!
PASSED!

!testRun: #AccountReportTest #test06 stamp: 'CM 11/15/2020 17:30:21'!
PASSED!
!AccountTreeReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 17:30:47'!
generateReportFor: anAccount
	
	anAccount generateReportFor: self.! !
!AccountTreeReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 17:31:52' prior: 50874949!
generateReportFor: anAccount
	
	sangria := sangria , '    '.
	anAccount generateReportFor: self.
	! !
!AccountTreeReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 17:36:02' prior: 50874955!
generateReportFor: anAccount
	
	sangria := sangria , '    '.
	anAccount generateReportFor: self.
	sangria := sangria allButLast: 4.
	! !
!ReceptiveAccount methodsFor: 'reportes' stamp: 'CM 11/15/2020 17:36:55' prior: 50874772!
generateReportFor: anAccountReport 
	anAccountReport printForAccount.
	transactions do: [ :transaction |
			transaction addToReport: anAccountReport
		].
	
	! !
!AccountTreeReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 17:37:30'!
printForAccount: anAccount

	reporteAcumulado add: sangria , anAccount name! !
!AccountTreeReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 17:38:42' prior: 50874894!
printReport

	sangria := '    '.
	reporteAcumulado := OrderedCollection new.
	
	account generateReportFor: self.
	
	^ reporteAcumulado.! !
!AccountTreeReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 17:40:20' prior: 50874984!
printReport

	sangria := ''.
	reporteAcumulado := OrderedCollection new.
	
	account generateReportFor: self.
	
	^ reporteAcumulado.! !
!AccountTreeReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 17:41:56' prior: 50874962!
generateReportFor: anAccount
	
	sangria := sangria , '    '.
	anAccount generateReportFor: self.
	sangria := sangria allButLast: 4.
	! !

!testRun: #AccountReportTest #test07 stamp: 'CM 11/15/2020 17:42:27'!
ERROR!

!testRun: #AccountReportTest #test08 stamp: 'CM 11/15/2020 17:42:27'!
ERROR!

!testRun: #AccountReportTest #test09 stamp: 'CM 11/15/2020 17:42:27'!
ERROR!

!testRun: #AccountReportTest #test10 stamp: 'CM 11/15/2020 17:42:27'!
ERROR!

!testRun: #AccountReportTest #test11 stamp: 'CM 11/15/2020 17:42:27'!
ERROR!

!testRun: #AccountReportTest #test07 stamp: 'CM 11/15/2020 17:42:32'!
ERROR!

!testRun: #AccountReportTest #test08 stamp: 'CM 11/15/2020 17:42:32'!
ERROR!

!testRun: #AccountReportTest #test09 stamp: 'CM 11/15/2020 17:42:32'!
ERROR!

!testRun: #AccountReportTest #test10 stamp: 'CM 11/15/2020 17:42:32'!
ERROR!

!testRun: #AccountReportTest #test11 stamp: 'CM 11/15/2020 17:42:32'!
ERROR!

!testRun: #AccountReportTest #test07 stamp: 'CM 11/15/2020 17:42:35'!
ERROR!
!ReceptiveAccount methodsFor: 'reportes' stamp: 'CM 11/15/2020 17:43:19' prior: 50874970!
generateReportFor: anAccountReport 
	anAccountReport printForAccount: self.
	transactions do: [ :transaction |
			transaction addToReport: anAccountReport
		].
	
	! !
!AccountSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 17:43:33'!
printForAccount: anAccount
	
	! !
!AccountNetTransferReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 17:43:40'!
printForAccount: anAccount! !

!testRun: #AccountReportTest #test07 stamp: 'CM 11/15/2020 17:43:48'!
PASSED!

!testRun: #AccountReportTest #test08 stamp: 'CM 11/15/2020 17:43:48'!
PASSED!

!testRun: #AccountReportTest #test09 stamp: 'CM 11/15/2020 17:43:48'!
PASSED!

!testRun: #AccountReportTest #test10 stamp: 'CM 11/15/2020 17:43:48'!
PASSED!

!testRun: #AccountReportTest #test11 stamp: 'CM 11/15/2020 17:43:48'!
PASSED!

!testRun: #AccountReportTest #test01 stamp: 'CM 11/15/2020 17:43:51'!
PASSED!

!testRun: #AccountReportTest #test02 stamp: 'CM 11/15/2020 17:43:51'!
PASSED!

!testRun: #AccountReportTest #test03 stamp: 'CM 11/15/2020 17:43:51'!
PASSED!

!testRun: #AccountReportTest #test04 stamp: 'CM 11/15/2020 17:43:51'!
PASSED!

!testRun: #AccountReportTest #test05 stamp: 'CM 11/15/2020 17:43:51'!
PASSED!

!testRun: #AccountReportTest #test06 stamp: 'CM 11/15/2020 17:43:51'!
PASSED!
!AccountReportTest methodsFor: 'portfolio tree report' stamp: 'CM 11/15/2020 17:43:57' prior: 50874787!
test012

	| report angiesAccount childrenPortfolio familyPortfolio johnsAccount myAccount |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:myAccount with: childrenPortfolio.

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '   Cuenta Mia' 
							with: '   Portfolio de hijos' 
							with: '      Cuenta de Juan' 
							with: '      Cuenta de Angeles'.

	self assert: report equals: (AccountTreeReport for: familyPortfolio) printReport .
! !

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 17:43:59'!
ERROR!

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 17:43:59'!
ERROR!

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 17:44:30'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'CM 11/15/2020 17:44:43' overrides: 16882612!
name
	^ name.! !
!Portfolio methodsFor: 'composition' stamp: 'CM 11/15/2020 17:45:03' overrides: 16882612!
name
	^ name.! !
!ReceptiveAccount class methodsFor: 'nil' stamp: 'CM 11/15/2020 17:46:15'!
named: aName
	
	^ self new initializeNamed: aName.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'CM 11/15/2020 17:46:44'!
initializeNamed: aName

	name := aName.! !

!testRun: #AccountReportTest #test01 stamp: 'CM 11/15/2020 17:46:49'!
PASSED!

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 17:46:49'!
ERROR!

!testRun: #AccountReportTest #test02 stamp: 'CM 11/15/2020 17:46:49'!
PASSED!

!testRun: #AccountReportTest #test03 stamp: 'CM 11/15/2020 17:46:49'!
PASSED!

!testRun: #AccountReportTest #test04 stamp: 'CM 11/15/2020 17:46:49'!
PASSED!

!testRun: #AccountReportTest #test05 stamp: 'CM 11/15/2020 17:46:49'!
PASSED!

!testRun: #AccountReportTest #test06 stamp: 'CM 11/15/2020 17:46:49'!
PASSED!

!testRun: #AccountReportTest #test07 stamp: 'CM 11/15/2020 17:46:49'!
PASSED!

!testRun: #AccountReportTest #test08 stamp: 'CM 11/15/2020 17:46:49'!
PASSED!

!testRun: #AccountReportTest #test09 stamp: 'CM 11/15/2020 17:46:49'!
PASSED!

!testRun: #AccountReportTest #test10 stamp: 'CM 11/15/2020 17:46:49'!
PASSED!

!testRun: #AccountReportTest #test11 stamp: 'CM 11/15/2020 17:46:49'!
PASSED!

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 17:46:49'!
ERROR!
!AccountTreeReport class methodsFor: 'no messages' stamp: 'CM 11/15/2020 17:47:16'!
for: aReceptiveAccount 
	
	^self new initializeFor: aReceptiveAccount ! !

!testRun: #AccountReportTest #test01 stamp: 'CM 11/15/2020 17:47:19'!
PASSED!

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 17:47:19'!
FAILURE!

!testRun: #AccountReportTest #test02 stamp: 'CM 11/15/2020 17:47:19'!
PASSED!

!testRun: #AccountReportTest #test03 stamp: 'CM 11/15/2020 17:47:19'!
PASSED!

!testRun: #AccountReportTest #test04 stamp: 'CM 11/15/2020 17:47:19'!
PASSED!

!testRun: #AccountReportTest #test05 stamp: 'CM 11/15/2020 17:47:19'!
PASSED!

!testRun: #AccountReportTest #test06 stamp: 'CM 11/15/2020 17:47:19'!
PASSED!

!testRun: #AccountReportTest #test07 stamp: 'CM 11/15/2020 17:47:19'!
PASSED!

!testRun: #AccountReportTest #test08 stamp: 'CM 11/15/2020 17:47:19'!
PASSED!

!testRun: #AccountReportTest #test09 stamp: 'CM 11/15/2020 17:47:19'!
PASSED!

!testRun: #AccountReportTest #test10 stamp: 'CM 11/15/2020 17:47:19'!
PASSED!

!testRun: #AccountReportTest #test11 stamp: 'CM 11/15/2020 17:47:19'!
PASSED!

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 17:47:19'!
FAILURE!
!Portfolio methodsFor: 'reportes' stamp: 'CM 11/15/2020 17:48:17' prior: 50874901!
generateReportFor: anAccountSummaryReport 
	anAccountSummaryReport printForAccount: self.
	accounts do: [ :account |
			anAccountSummaryReport generateReportFor: account.
		].
	
	! !

!testRun: #AccountReportTest #test01 stamp: 'CM 11/15/2020 17:48:20'!
PASSED!

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 17:48:20'!
FAILURE!

!testRun: #AccountReportTest #test02 stamp: 'CM 11/15/2020 17:48:20'!
PASSED!

!testRun: #AccountReportTest #test03 stamp: 'CM 11/15/2020 17:48:20'!
PASSED!

!testRun: #AccountReportTest #test04 stamp: 'CM 11/15/2020 17:48:20'!
PASSED!

!testRun: #AccountReportTest #test05 stamp: 'CM 11/15/2020 17:48:20'!
PASSED!

!testRun: #AccountReportTest #test06 stamp: 'CM 11/15/2020 17:48:20'!
PASSED!

!testRun: #AccountReportTest #test07 stamp: 'CM 11/15/2020 17:48:20'!
PASSED!

!testRun: #AccountReportTest #test08 stamp: 'CM 11/15/2020 17:48:20'!
PASSED!

!testRun: #AccountReportTest #test09 stamp: 'CM 11/15/2020 17:48:20'!
PASSED!

!testRun: #AccountReportTest #test10 stamp: 'CM 11/15/2020 17:48:20'!
PASSED!

!testRun: #AccountReportTest #test11 stamp: 'CM 11/15/2020 17:48:20'!
PASSED!

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 17:48:20'!
FAILURE!

failureString inspect!

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 17:50:48'!
FAILURE!

AccountReport subclass: #AccountSummaryReport
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 17:56:32'!
AccountReport subclass: #AccountSummaryReport
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountReport subclass: #AccountSummaryReport
	instanceVariableNames: 'account reporteAcumulado'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryReport category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 17:58:58'!
AccountReport subclass: #AccountSummaryReport
	instanceVariableNames: 'account reporteAcumulado'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #AccountReportTest #test07 stamp: 'CM 11/15/2020 17:59:01'!
PASSED!

!testRun: #AccountReportTest #test08 stamp: 'CM 11/15/2020 17:59:01'!
PASSED!

!testRun: #AccountReportTest #test09 stamp: 'CM 11/15/2020 17:59:01'!
PASSED!

!testRun: #AccountReportTest #test10 stamp: 'CM 11/15/2020 17:59:01'!
PASSED!

!testRun: #AccountReportTest #test11 stamp: 'CM 11/15/2020 17:59:01'!
PASSED!

!testRun: #AccountReportTest #test01 stamp: 'CM 11/15/2020 17:59:03'!
PASSED!

!testRun: #AccountReportTest #test02 stamp: 'CM 11/15/2020 17:59:03'!
PASSED!

!testRun: #AccountReportTest #test03 stamp: 'CM 11/15/2020 17:59:03'!
PASSED!

!testRun: #AccountReportTest #test04 stamp: 'CM 11/15/2020 17:59:03'!
PASSED!

!testRun: #AccountReportTest #test05 stamp: 'CM 11/15/2020 17:59:03'!
PASSED!

!testRun: #AccountReportTest #test06 stamp: 'CM 11/15/2020 17:59:03'!
PASSED!
!ReceptiveAccount methodsFor: 'reportes' stamp: 'CM 11/15/2020 18:00:00' prior: 50875034!
generateReportFor: anAccountReport 
	
	transactions do: [ :transaction |
			transaction addToReport: anAccountReport
		].
	
	! !
!ReceptiveAccount methodsFor: 'reportes' stamp: 'CM 11/15/2020 18:00:04' prior: 50875310!
generateReportFor: anAccountReport 
	transactions do: [ :transaction |
			transaction addToReport: anAccountReport
		].
	
	! !
!ReceptiveAccount methodsFor: 'reportes' stamp: 'CM 11/15/2020 18:00:05' prior: 50875317!
generateReportFor: anAccountReport 

	transactions do: [ :transaction |
			transaction addToReport: anAccountReport
		].
	
	! !
!Portfolio methodsFor: 'reportes' stamp: 'CM 11/15/2020 18:00:11' prior: 50875211!
generateReportFor: anAccountSummaryReport 
	
	accounts do: [ :account |
			anAccountSummaryReport generateReportFor: account.
		].
	
	! !
!AccountTreeReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 18:02:04' prior: 50875000!
generateReportFor: anAccount
	
	reporteAcumulado add: ((self class for: anAccount) printReport collect: [ :rep | rep append: '    ']).
	
	! !
!AccountTreeReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 18:03:17' prior: 50875339!
generateReportFor: anAccount
	
	reporteAcumulado add: ((self class for: anAccount) printReport collect: [ :rep | rep prepend: '    ']).
	
	! !

!testRun: #AccountReportTest #test01 stamp: 'CM 11/15/2020 18:03:19'!
PASSED!

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 18:03:19'!
ERROR!

!testRun: #AccountReportTest #test02 stamp: 'CM 11/15/2020 18:03:19'!
PASSED!

!testRun: #AccountReportTest #test03 stamp: 'CM 11/15/2020 18:03:19'!
PASSED!

!testRun: #AccountReportTest #test04 stamp: 'CM 11/15/2020 18:03:19'!
PASSED!

!testRun: #AccountReportTest #test05 stamp: 'CM 11/15/2020 18:03:19'!
PASSED!

!testRun: #AccountReportTest #test06 stamp: 'CM 11/15/2020 18:03:19'!
PASSED!

!testRun: #AccountReportTest #test07 stamp: 'CM 11/15/2020 18:03:19'!
PASSED!

!testRun: #AccountReportTest #test08 stamp: 'CM 11/15/2020 18:03:19'!
PASSED!

!testRun: #AccountReportTest #test09 stamp: 'CM 11/15/2020 18:03:19'!
PASSED!

!testRun: #AccountReportTest #test10 stamp: 'CM 11/15/2020 18:03:19'!
PASSED!

!testRun: #AccountReportTest #test11 stamp: 'CM 11/15/2020 18:03:19'!
PASSED!

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 18:03:19'!
ERROR!
!AccountTreeReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 18:03:45' prior: 50875347!
generateReportFor: anAccount
	
	reporteAcumulado addAll: ((self class for: anAccount) printReport collect: [ :rep | rep prepend: '    ']).
	
	! !

!testRun: #AccountReportTest #test01 stamp: 'CM 11/15/2020 18:03:48'!
PASSED!

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 18:03:48'!
FAILURE!

!testRun: #AccountReportTest #test02 stamp: 'CM 11/15/2020 18:03:48'!
PASSED!

!testRun: #AccountReportTest #test03 stamp: 'CM 11/15/2020 18:03:48'!
PASSED!

!testRun: #AccountReportTest #test04 stamp: 'CM 11/15/2020 18:03:48'!
PASSED!

!testRun: #AccountReportTest #test05 stamp: 'CM 11/15/2020 18:03:48'!
PASSED!

!testRun: #AccountReportTest #test06 stamp: 'CM 11/15/2020 18:03:48'!
PASSED!

!testRun: #AccountReportTest #test07 stamp: 'CM 11/15/2020 18:03:48'!
PASSED!

!testRun: #AccountReportTest #test08 stamp: 'CM 11/15/2020 18:03:48'!
PASSED!

!testRun: #AccountReportTest #test09 stamp: 'CM 11/15/2020 18:03:48'!
PASSED!

!testRun: #AccountReportTest #test10 stamp: 'CM 11/15/2020 18:03:48'!
PASSED!

!testRun: #AccountReportTest #test11 stamp: 'CM 11/15/2020 18:03:48'!
PASSED!

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 18:03:48'!
FAILURE!
!AccountTreeReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 18:04:31' prior: 50875387!
generateReportFor: anAccount
	
	reporteAcumulado addAll: ((self class for: anAccount) printReport collect: [ :rep | rep prepend: '    ' ]).
	
	! !
!AccountTreeReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 18:08:50' prior: 50875427!
generateReportFor: anAccount
	
	reporteAcumulado add: anAccount name.
	reporteAcumulado addAll: ((self class for: anAccount) printReport).
	
	^ reporteAcumulado collect: [ :rep | rep prepend: '    ' ].
	
	! !

!testRun: #AccountReportTest #test01 stamp: 'CM 11/15/2020 18:08:52'!
PASSED!

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 18:08:52'!
ERROR!

!testRun: #AccountReportTest #test02 stamp: 'CM 11/15/2020 18:08:52'!
PASSED!

!testRun: #AccountReportTest #test03 stamp: 'CM 11/15/2020 18:08:52'!
PASSED!

!testRun: #AccountReportTest #test04 stamp: 'CM 11/15/2020 18:08:52'!
PASSED!

!testRun: #AccountReportTest #test05 stamp: 'CM 11/15/2020 18:08:52'!
PASSED!

!testRun: #AccountReportTest #test06 stamp: 'CM 11/15/2020 18:08:52'!
PASSED!

!testRun: #AccountReportTest #test07 stamp: 'CM 11/15/2020 18:08:52'!
PASSED!

!testRun: #AccountReportTest #test08 stamp: 'CM 11/15/2020 18:08:52'!
PASSED!

!testRun: #AccountReportTest #test09 stamp: 'CM 11/15/2020 18:08:52'!
PASSED!

!testRun: #AccountReportTest #test10 stamp: 'CM 11/15/2020 18:08:52'!
PASSED!

!testRun: #AccountReportTest #test11 stamp: 'CM 11/15/2020 18:08:52'!
PASSED!

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 18:08:52'!
ERROR!

xx := 'aa'!
!AccountTreeReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 18:09:47' prior: 50875435!
generateReportFor: anAccount
	
	reporteAcumulado add: anAccount name.
	reporteAcumulado addAll: ((self class for: anAccount) printReport).
	
	^ reporteAcumulado collect: [ :rep | '    ' , rep ].
	
	! !

!testRun: #AccountReportTest #test01 stamp: 'CM 11/15/2020 18:09:50'!
PASSED!

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 18:09:50'!
FAILURE!

!testRun: #AccountReportTest #test02 stamp: 'CM 11/15/2020 18:09:50'!
PASSED!

!testRun: #AccountReportTest #test03 stamp: 'CM 11/15/2020 18:09:50'!
PASSED!

!testRun: #AccountReportTest #test04 stamp: 'CM 11/15/2020 18:09:50'!
PASSED!

!testRun: #AccountReportTest #test05 stamp: 'CM 11/15/2020 18:09:50'!
PASSED!

!testRun: #AccountReportTest #test06 stamp: 'CM 11/15/2020 18:09:50'!
PASSED!

!testRun: #AccountReportTest #test07 stamp: 'CM 11/15/2020 18:09:50'!
PASSED!

!testRun: #AccountReportTest #test08 stamp: 'CM 11/15/2020 18:09:50'!
PASSED!

!testRun: #AccountReportTest #test09 stamp: 'CM 11/15/2020 18:09:50'!
PASSED!

!testRun: #AccountReportTest #test10 stamp: 'CM 11/15/2020 18:09:50'!
PASSED!

!testRun: #AccountReportTest #test11 stamp: 'CM 11/15/2020 18:09:50'!
PASSED!

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 18:09:50'!
FAILURE!
!AccountReportTest methodsFor: 'portfolio tree report' stamp: 'CM 11/15/2020 18:10:56' prior: 50875078!
test012

	| report angiesAccount childrenPortfolio familyPortfolio johnsAccount myAccount expected |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:myAccount with: childrenPortfolio.

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '   Cuenta Mia' 
							with: '   Portfolio de hijos' 
							with: '      Cuenta de Juan' 
							with: '      Cuenta de Angeles'.
	expected := (AccountTreeReport for: familyPortfolio) printReport.
	self assert: report equals: expected .
! !

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 18:11:06'!
FAILURE!

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 18:11:06'!
FAILURE!

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 18:12:13'!
FAILURE!

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 18:12:13'!
FAILURE!

x := (OrderedCollection with: 5).!

x collect: [ :i | i +1]!

x inspect!

x collect: [ :i | i +1]!

x collect: [ :i | i +1]!
!AccountTreeReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 18:16:35' prior: 50874992!
printReport

	
	reporteAcumulado := OrderedCollection new.
	
	reporteAcumulado add: account name.
	account generateReportFor: self.
	
	^ reporteAcumulado.! !

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 18:16:41'!
FAILURE!

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 18:16:41'!
FAILURE!

x := (OrderedCollection with: '121').!

x collect: [ :i | '   ', i].!

!methodRemoval: AccountTreeReport #printForAccount: stamp: 'CM 11/15/2020 18:18:20'!
printForAccount: anAccount

	reporteAcumulado add: sangria , anAccount name!

!methodRemoval: AccountTreeReport #printForReceptiveAccount: stamp: 'CM 11/15/2020 18:18:22'!
printForReceptiveAccount: aReceptiveAccount

	reporteAcumulado add: sangria , aReceptiveAccount name.
	!

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 18:18:48'!
FAILURE!

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 18:18:48'!
FAILURE!
!AccountTreeReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 18:20:18' prior: 50875478!
generateReportFor: anAccount
	
	
	reporteAcumulado addAll: ((self class for: anAccount) printReport).
	
	^ reporteAcumulado collect: [ :rep | '    ' , rep ].
	
	! !
!AccountTreeReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 18:20:19' prior: 50875595!
generateReportFor: anAccount
	
	reporteAcumulado addAll: ((self class for: anAccount) printReport).
	
	^ reporteAcumulado collect: [ :rep | '    ' , rep ].
	
	! !

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 18:20:24'!
FAILURE!

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 18:20:24'!
FAILURE!
!AccountTreeReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 18:21:29' prior: 50875604!
generateReportFor: anAccount
	
	reporteAcumulado addAll: ((self class for: anAccount) printReport).
	
	
	reporteAcumulado := reporteAcumulado collect: [ :rep | '    ' , rep ].
	
	! !

!testRun: #AccountReportTest #test01 stamp: 'CM 11/15/2020 18:21:31'!
PASSED!

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 18:21:31'!
FAILURE!

!testRun: #AccountReportTest #test02 stamp: 'CM 11/15/2020 18:21:31'!
PASSED!

!testRun: #AccountReportTest #test03 stamp: 'CM 11/15/2020 18:21:31'!
PASSED!

!testRun: #AccountReportTest #test04 stamp: 'CM 11/15/2020 18:21:31'!
PASSED!

!testRun: #AccountReportTest #test05 stamp: 'CM 11/15/2020 18:21:31'!
PASSED!

!testRun: #AccountReportTest #test06 stamp: 'CM 11/15/2020 18:21:31'!
PASSED!

!testRun: #AccountReportTest #test07 stamp: 'CM 11/15/2020 18:21:31'!
PASSED!

!testRun: #AccountReportTest #test08 stamp: 'CM 11/15/2020 18:21:31'!
PASSED!

!testRun: #AccountReportTest #test09 stamp: 'CM 11/15/2020 18:21:31'!
PASSED!

!testRun: #AccountReportTest #test10 stamp: 'CM 11/15/2020 18:21:31'!
PASSED!

!testRun: #AccountReportTest #test11 stamp: 'CM 11/15/2020 18:21:31'!
PASSED!

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 18:21:31'!
FAILURE!
!AccountTreeReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 18:22:23' prior: 50875618!
generateReportFor: anAccount
	
	reporteAcumulado addAll: ((self class for: anAccount) printReport collect: [ :rep | '    ' , rep ]).
	
	! !

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 18:22:26'!
FAILURE!

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 18:22:26'!
FAILURE!

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 18:23:40'!
FAILURE!

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 18:23:40'!
FAILURE!
!AccountReportTest methodsFor: 'portfolio tree report' stamp: 'CM 11/15/2020 18:26:29' prior: 50875520!
test012

	| report angiesAccount childrenPortfolio familyPortfolio johnsAccount myAccount expected |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:myAccount with: childrenPortfolio.

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '    Cuenta Mia' 
							with: '    Portfolio de hijos' 
							with: '        Cuenta de Juan' 
							with: '        Cuenta de Angeles'.
	expected := (AccountTreeReport for: familyPortfolio) printReport.
	self assert: report equals: expected .
! !

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 18:26:32'!
FAILURE!

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 18:26:32'!
FAILURE!

expected = report!

expected first = report first!

expected second = report second!

expected second.!

report second.!
!AccountReportTest methodsFor: 'portfolio tree report' stamp: 'CM 11/15/2020 18:28:31' prior: 50875678!
test012

	| report angiesAccount childrenPortfolio familyPortfolio johnsAccount myAccount expected |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:myAccount with: childrenPortfolio.

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '    Cuenta mia' 
							with: '    Portfolio de hijos' 
							with: '        Cuenta de Juan' 
							with: '        Cuenta de Angeles'.
	expected := (AccountTreeReport for: familyPortfolio) printReport.
	self assert: report equals: expected .
! !

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 18:28:34'!
PASSED!

AccountReport subclass: #AccountTreeBalanceReport
	instanceVariableNames: 'account reporteAcumulado sangria'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTreeBalanceReport category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 18:28:55'!
AccountReport subclass: #AccountTreeBalanceReport
	instanceVariableNames: 'account reporteAcumulado sangria'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTreeBalanceReport class
	instanceVariableNames: ''!

!classDefinition: 'AccountTreeBalanceReport class' category: 'Portfolio-Solucion' stamp: 'CM 11/15/2020 18:28:55'!
AccountTreeBalanceReport class
	instanceVariableNames: ''!
!AccountTreeBalanceReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 18:28:55'!
generateReportFor: anAccount
	
	reporteAcumulado addAll: ((self class for: anAccount) printReport collect: [ :rep | '    ' , rep ]).
	
	! !
!AccountTreeBalanceReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 18:28:55'!
initializeFor: aReceptiveAccount 
	
	account := aReceptiveAccount.! !
!AccountTreeBalanceReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 18:28:55'!
printReport

	
	reporteAcumulado := OrderedCollection new.
	
	reporteAcumulado add: account name.
	account generateReportFor: self.
	
	^ reporteAcumulado.! !
!AccountTreeBalanceReport class methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 18:28:55'!
for: aReceptiveAccount 
	
	^self new initializeFor: aReceptiveAccount ! !

!classRenamed: #AccountTreeBalanceReport as: #AccountTreeSummaryReport stamp: 'CM 11/15/2020 18:29:11'!
Smalltalk renameClassNamed: #AccountTreeBalanceReport as: #AccountTreeSummaryReport!
!AccountTreeSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 18:32:01'!
printForDeposit: aDeposit 
	
	reporteAcumulado add: 'Deposito de ', aDeposit value asString.! !
!AccountTreeSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 18:32:18'!
printForIncomingTransfer: aDeposit 
	
	reporteAcumulado add: 'Transferencia entrante de ', aDeposit value asString.! !
!AccountTreeSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 18:32:27'!
printForOutgoingTransfer: aDeposit 
	
	reporteAcumulado add: 'Transferencia saliente de ', aDeposit value asString.! !
!AccountTreeSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 18:32:38'!
printForWithdraw: aDeposit 
	
	reporteAcumulado add: 'Extraccion de ', aDeposit value asString.! !
!AccountReportTest methodsFor: 'portfolio tree report' stamp: 'CM 11/15/2020 18:32:55'!
test013

	| report angiesAccount childrenPortfolio familyPortfolio johnsAccount myAccount expected |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:myAccount with: childrenPortfolio.

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '    Cuenta mia' 
							with: '    Portfolio de hijos' 
							with: '        Cuenta de Juan' 
							with: '        Cuenta de Angeles'.
	expected := (AccountTreeReport for: familyPortfolio) printReport.
	self assert: report equals: expected .
! !
!AccountReportTest methodsFor: 'portfolio tree report' stamp: 'CM 11/15/2020 18:33:03' prior: 50875831!
test013

	| report angiesAccount childrenPortfolio familyPortfolio johnsAccount myAccount expected |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:myAccount with: childrenPortfolio.

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '    Cuenta mia' 
							with: '    Portfolio de hijos' 
							with: '        Cuenta de Juan' 
							with: '        Cuenta de Angeles'.
	expected := (AccountTreeSummaryReport for: familyPortfolio) printReport.
	self assert: report equals: expected .
! !
!AccountTreeSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 18:39:51' prior: 50875784!
printReport

	
	reporteAcumulado := OrderedCollection new.
	
	reporteAcumulado add: account name.
	account generateReportFor: self.
	reporteAcumulado add: 'Balance = ' , account balance asString.
	
	^ reporteAcumulado.! !
!AccountReportTest methodsFor: 'portfolio tree report' stamp: 'CM 11/15/2020 18:40:58' prior: 50875860!
test013

	| report angiesAccount childrenPortfolio familyPortfolio johnsAccount myAccount expected |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	
	Deposit register: 100 on: myAccount .
	Withdraw register: 20 on: johnsAccount .
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:myAccount with: childrenPortfolio.

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '    Cuenta mia' 
							with: '    Portfolio de hijos' 
							with: '        Cuenta de Juan' 
							with: '        Cuenta de Angeles'.
	expected := (AccountTreeSummaryReport for: familyPortfolio) printReport.
	self assert: report equals: expected .
! !

!testRun: #AccountReportTest #test012 stamp: 'CM 11/15/2020 18:41:06'!
PASSED!

!testRun: #AccountReportTest #test013 stamp: 'CM 11/15/2020 18:41:06'!
FAILURE!

!testRun: #AccountReportTest #test013 stamp: 'CM 11/15/2020 18:41:06'!
FAILURE!
!AccountReportTest methodsFor: 'portfolio tree report' stamp: 'CM 11/15/2020 18:45:22' prior: 50875900!
test013

	| report angiesAccount childrenPortfolio familyPortfolio johnsAccount myAccount expected |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	
	Deposit register: 100 on: myAccount .
	Withdraw register: 20 on: johnsAccount .
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:myAccount with: childrenPortfolio.

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '    Cuenta mia' 
							with: '        Deposito de 100'
							with: '        Balance  100'.
	report							
							add: '    Portfolio de hijos' ;
							add: '        Cuenta de Juan' ;
							add: '            Extraccion de 20' ;
							add: '            Balance = -20' ;
							add: '        Cuenta de Angeles';
							add: '        Balance = -20';
							add: '    Balance = 80'.
							
	expected := (AccountTreeSummaryReport for: familyPortfolio) printReport.
	self assert: report equals: expected .
! !

!testRun: #AccountReportTest #test013 stamp: 'CM 11/15/2020 18:45:27'!
FAILURE!

!testRun: #AccountReportTest #test013 stamp: 'CM 11/15/2020 18:45:27'!
FAILURE!
!AccountTreeSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 18:46:25' prior: 50875811!
printForIncomingTransfer: aDeposit 
	
	reporteAcumulado add: '    Transferencia entrante de ', aDeposit value asString.! !
!AccountTreeSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 18:46:28' prior: 50875818!
printForOutgoingTransfer: aDeposit 
	
	reporteAcumulado add: '    Transferencia saliente de ', aDeposit value asString.! !
!AccountTreeSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 18:46:31' prior: 50875825!
printForWithdraw: aDeposit 
	
	reporteAcumulado add: '    Extraccion de ', aDeposit value asString.! !
!AccountTreeSummaryReport methodsFor: 'as yet unclassified' stamp: 'CM 11/15/2020 18:46:33' prior: 50875805!
printForDeposit: aDeposit 
	
	reporteAcumulado add: '    Deposito de ', aDeposit value asString.! !

!testRun: #AccountReportTest #test013 stamp: 'CM 11/15/2020 18:46:36'!
FAILURE!

!testRun: #AccountReportTest #test013 stamp: 'CM 11/15/2020 18:46:36'!
FAILURE!

expected first = report first!

expected second = report second!

expected third = report third!

expected fourth = report fourth!

expected fourth!

report fourth!

----STARTUP---- (16 November 2020 14:10:07) as /home/cmarta/Downloads/parcial/limpio/linux64/CuisUniversity-4384.image!


!classRemoval: #Transfer stamp: 'CM 11/16/2020 14:10:44'!
Object subclass: #Transfer
	instanceVariableNames: 'incomingTransfer outgoingTransfer value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #OutgoingTransfer stamp: 'CM 11/16/2020 14:10:45'!
AccountTransferTransaction subclass: #OutgoingTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #IncomingTransfer stamp: 'CM 11/16/2020 14:10:45'!
AccountTransferTransaction subclass: #IncomingTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransferTransaction stamp: 'CM 11/16/2020 14:10:46'!
AccountTransaction subclass: #AccountTransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Withdraw stamp: 'CM 11/16/2020 14:10:47'!
AccountCashTransactions subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'CM 11/16/2020 14:10:47'!
AccountCashTransactions subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountCashTransactions stamp: 'CM 11/16/2020 14:10:48'!
AccountTransaction subclass: #AccountCashTransactions
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'CM 11/16/2020 14:10:49'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTreeSummaryReport stamp: 'CM 11/16/2020 14:10:49'!
AccountReport subclass: #AccountTreeSummaryReport
	instanceVariableNames: 'account reporteAcumulado sangria'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTreeReport stamp: 'CM 11/16/2020 14:10:50'!
AccountReport subclass: #AccountTreeReport
	instanceVariableNames: 'account reporteAcumulado sangria'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountSummaryReport stamp: 'CM 11/16/2020 14:10:50'!
AccountReport subclass: #AccountSummaryReport
	instanceVariableNames: 'account reporteAcumulado'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountNetTransferReport stamp: 'CM 11/16/2020 14:10:51'!
AccountReport subclass: #AccountNetTransferReport
	instanceVariableNames: 'receptiveAccount reporteAcumulado'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountReport stamp: 'CM 11/16/2020 14:10:52'!
Object subclass: #AccountReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'CM 11/16/2020 14:10:52'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'CM 11/16/2020 14:10:53'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'CM 11/16/2020 14:10:54'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferTest stamp: 'CM 11/16/2020 14:10:54'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'CM 11/16/2020 14:10:55'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'CM 11/16/2020 14:10:56'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountReportTest stamp: 'CM 11/16/2020 14:10:57'!
TestCase subclass: #AccountReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----End fileIn of /home/cmarta/Downloads/parcial/limpio/linux64/Portfolio-Solucion.st----!
!Transfer methodsFor: 'initialization' stamp: 'CM 11/16/2020 14:11:31' prior: 50878365!
senderTransaction
	^ outgoingTransfer .! !
!Transfer methodsFor: 'initialization' stamp: 'CM 11/16/2020 14:11:36' prior: 50878410!
senderTransaction

	^ outgoingTransfer .! !
!Transfer methodsFor: 'initialization' stamp: 'CM 11/16/2020 14:11:43' prior: 50878370 overrides: 16881508!
value

	^ value .! !
!Transfer methodsFor: 'initialization' stamp: 'CM 11/16/2020 14:11:54' prior: 50878361!
receiverTransaction

	^ incomingTransfer.! !
!Transfer methodsFor: 'initialization' stamp: 'CM 11/16/2020 14:12:09' prior: 50878351!
initializeFor: aValue from: aSenderAccount to: aReceiverAccount 

	value := aValue.
	incomingTransfer := IncomingTransfer on: aReceiverAccount associatedTo: self.
	outgoingTransfer := OutgoingTransfer on: aSenderAccount associatedTo: self.! !
!Account methodsFor: 'reports' stamp: 'CM 11/16/2020 14:13:58' prior: 50877469!
reflectOn: anAccountReport
	^ name.! !
!Portfolio methodsFor: 'reports' stamp: 'CM 11/16/2020 14:14:20' prior: 50877574 overrides: 50878440!
reflectOn: anAccountReport 

	accounts do: [ :account |
			anAccountReport reflectAccount: account.
		].
	
	! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'CM 11/16/2020 14:14:34' prior: 50877703 overrides: 50878440!
reflectOn: anAccountReport 

	transactions do: [ :transaction |
			transaction reflectOn: anAccountReport
		].
	
	! !

!testRun: #TransferTest #test01TransferExtractsFromSenderAndAddsToReceiver stamp: 'CM 11/16/2020 14:14:58'!
PASSED!

!testRun: #TransferTest #test02CanNavigateFromTransferToAccountTransactions stamp: 'CM 11/16/2020 14:14:58'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromAccountTransactionsToTransfer stamp: 'CM 11/16/2020 14:14:58'!
PASSED!

!testRun: #TransferTest #test04IsNotPossibleToTransferFromAndToTheSameAccount stamp: 'CM 11/16/2020 14:14:58'!
PASSED!

!testRun: #TransferTest #test05IsNotPossibleToTransferNegativeValues stamp: 'CM 11/16/2020 14:14:58'!
PASSED!

!testRun: #TransferTest #test06IsNotPosibleDoATransferWithAValueOfZero stamp: 'CM 11/16/2020 14:14:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CM 11/16/2020 14:15:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CM 11/16/2020 14:15:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CM 11/16/2020 14:15:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CM 11/16/2020 14:15:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CM 11/16/2020 14:15:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CM 11/16/2020 14:15:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CM 11/16/2020 14:15:28'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'CM 11/16/2020 14:15:32'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'CM 11/16/2020 14:15:32'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'CM 11/16/2020 14:15:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'CM 11/16/2020 14:15:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'CM 11/16/2020 14:15:32'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'CM 11/16/2020 14:15:32'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'CM 11/16/2020 14:15:32'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'CM 11/16/2020 14:15:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'CM 11/16/2020 14:15:32'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'CM 11/16/2020 14:15:32'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'CM 11/16/2020 14:15:32'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'CM 11/16/2020 14:15:32'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'CM 11/16/2020 14:15:32'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'CM 11/16/2020 14:15:32'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'CM 11/16/2020 14:15:32'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CM 11/16/2020 14:19:14'!
test16PortfoliosHaveCustomNames
	| portfolio portfolioName |
	
	portfolioName := 'My portfolio'.
	portfolio := Portfolio named: portfolioName.
	
	self assert: portfolioName equals: portfolio name
	! !

!testRun: #PortfolioTest #test16PortfoliosHaveCustomNames stamp: 'CM 11/16/2020 14:19:19'!
ERROR!

!testRun: #PortfolioTest #test16PortfoliosHaveCustomNames stamp: 'CM 11/16/2020 14:19:19'!
ERROR!
!Account methodsFor: 'initialization' stamp: 'CM 11/16/2020 14:22:04'!
initializeNamed: aName

	name := aName.! !

!methodRemoval: ReceptiveAccount #initializeNamed: stamp: 'CM 11/16/2020 14:22:04'!
initializeNamed: aName

	name := aName.!
!Account class methodsFor: 'as yet unclassified' stamp: 'CM 11/16/2020 14:22:22'!
named: aName
	
	^ self new initializeNamed: aName.! !

!methodRemoval: ReceptiveAccount class #named: stamp: 'CM 11/16/2020 14:22:22'!
named: aName
	
	^ self new initializeNamed: aName.!

!methodRemoval: Portfolio #initializeNamed: stamp: 'CM 11/16/2020 14:22:32'!
initializeNamed: aName
	
	name := aName.
	!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'CM 11/16/2020 14:23:11' prior: 50877615!
named: aName with: anAccount

	^(self named: aName)
		add: anAccount;
		yourself! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'CM 11/16/2020 14:23:22' prior: 50877621!
named: aName with: anAccount with: anotherAccount

	^(self new initializeNamed: aName)
		add: anAccount;
		add: anotherAccount;
		yourself! !

!testRun: #PortfolioTest #test16PortfoliosHaveCustomNames stamp: 'CM 11/16/2020 14:23:49'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'CM 11/16/2020 14:23:58'!
test16PortfoliosCanHaveCustomNames
	| portfolio portfolioName |
	
	portfolioName := 'My portfolio'.
	portfolio := Portfolio named: portfolioName.
	
	self assert: portfolioName equals: portfolio name
	! !

!methodRemoval: PortfolioTest #test16PortfoliosHaveCustomNames stamp: 'CM 11/16/2020 14:23:58'!
test16PortfoliosHaveCustomNames
	| portfolio portfolioName |
	
	portfolioName := 'My portfolio'.
	portfolio := Portfolio named: portfolioName.
	
	self assert: portfolioName equals: portfolio name
	!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'CM 11/16/2020 14:24:23' prior: 50877324!
test07AccountKnowsItsTransactions 

	| account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account.
		
	self assert: 1 equals: account transactions size .
	self assert: (account transactions includes: deposit).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'CM 11/16/2020 14:25:21'!
test98ReceptiveAccountCanHaveCustomName
	| account accountName |
	
	accountName := 'My portfolio'.
	account := Portfolio named: accountName.
	
	self assert: accountName equals: account name
	! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'CM 11/16/2020 14:25:28'!
test08ReceptiveAccountCanHaveCustomName
	| account accountName |
	
	accountName := 'My portfolio'.
	account := Portfolio named: accountName.
	
	self assert: accountName equals: account name
	! !

!methodRemoval: ReceptiveAccountTest #test98ReceptiveAccountCanHaveCustomName stamp: 'CM 11/16/2020 14:25:31'!
test98ReceptiveAccountCanHaveCustomName
	| account accountName |
	
	accountName := 'My portfolio'.
	account := Portfolio named: accountName.
	
	self assert: accountName equals: account name
	!

!testRun: #ReceptiveAccountTest #test08ReceptiveAccountCanHaveCustomName stamp: 'CM 11/16/2020 14:25:32'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'CM 11/16/2020 14:29:37' prior: 50877347!
test01TransferExtractsFromSenderAndAddsToReceiver

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 100 from: account1 to: account2.
		
	self assert: -100 equals: account1 balance .	
	self assert: 100 equals: account2 balance .
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'CM 11/16/2020 14:29:52' prior: 50877360!
test02CanNavigateFromTransferToAccountTransactions

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer register: 100 from: account1 to: account2.
		
	self assert: (account1 transactions includes: transfer senderTransaction) .
	self assert: (account2 transactions includes: transfer receiverTransaction) .
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'CM 11/16/2020 14:30:15' prior: 50877375!
test03CanNavigateFromAccountTransactionsToTransfer

	| account1 account2 transfer |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	transfer := Transfer register: 100 from: account1 to: account2.
		
	self assert: transfer equals: account1 transactions first associatedTransfer .
	self assert: transfer equals: account2 transactions first associatedTransfer .
	
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'CM 11/16/2020 14:30:31' prior: 50877391!
test04IsNotPossibleToTransferFromAndToTheSameAccount

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	self should: [
			Transfer register: 100 from: account1 to: account1
		]
		raise: Error 
		withMessageText: Transfer noSelfTransfersAllowedErrorDescription .
		! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'CM 11/16/2020 14:30:34' prior: 50878723!
test04IsNotPossibleToTransferFromAndToTheSameAccount

	| account1 |
	
	account1 := ReceptiveAccount new.
	
	self should: [
			Transfer register: 100 from: account1 to: account1
		]
		raise: Error 
		withMessageText: Transfer noSelfTransfersAllowedErrorDescription .
		! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'CM 11/16/2020 14:30:53' prior: 50877403!
test05IsNotPossibleToTransferNegativeValues

	| account1 account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	self should: [
			Transfer register: -100 from: account1 to: account2
		] raise: Error withMessageText: Transfer onlyPositiveTransfersErrorDescription .
		! !

!testRun: #TransferTest #test01TransferExtractsFromSenderAndAddsToReceiver stamp: 'CM 11/16/2020 14:30:59'!
PASSED!

!testRun: #TransferTest #test02CanNavigateFromTransferToAccountTransactions stamp: 'CM 11/16/2020 14:30:59'!
PASSED!

!testRun: #TransferTest #test03CanNavigateFromAccountTransactionsToTransfer stamp: 'CM 11/16/2020 14:30:59'!
PASSED!

!testRun: #TransferTest #test04IsNotPossibleToTransferFromAndToTheSameAccount stamp: 'CM 11/16/2020 14:30:59'!
PASSED!

!testRun: #TransferTest #test05IsNotPossibleToTransferNegativeValues stamp: 'CM 11/16/2020 14:30:59'!
PASSED!

!testRun: #TransferTest #test06IsNotPosibleDoATransferWithAValueOfZero stamp: 'CM 11/16/2020 14:30:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'CM 11/16/2020 14:31:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'CM 11/16/2020 14:31:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'CM 11/16/2020 14:31:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'CM 11/16/2020 14:31:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'CM 11/16/2020 14:31:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'CM 11/16/2020 14:31:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'CM 11/16/2020 14:31:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test08ReceptiveAccountCanHaveCustomName stamp: 'CM 11/16/2020 14:31:01'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'CM 11/16/2020 14:31:03'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'CM 11/16/2020 14:31:03'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'CM 11/16/2020 14:31:03'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'CM 11/16/2020 14:31:03'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'CM 11/16/2020 14:31:03'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'CM 11/16/2020 14:31:03'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'CM 11/16/2020 14:31:03'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'CM 11/16/2020 14:31:03'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'CM 11/16/2020 14:31:03'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'CM 11/16/2020 14:31:03'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'CM 11/16/2020 14:31:03'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'CM 11/16/2020 14:31:03'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'CM 11/16/2020 14:31:03'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'CM 11/16/2020 14:31:03'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'CM 11/16/2020 14:31:03'!
PASSED!

!testRun: #PortfolioTest #test16PortfoliosCanHaveCustomNames stamp: 'CM 11/16/2020 14:31:03'!
PASSED!
!AccountTransaction methodsFor: 'reports' stamp: 'CM 11/16/2020 14:31:26' prior: 50878112!
reflectOn: anAccountSummaryReport

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'initialization' stamp: 'CM 11/16/2020 14:31:33' prior: 50878117!
initializeFor: aValue

	self subclassResponsibility ! !
!Deposit methodsFor: 'reports' stamp: 'CM 11/16/2020 14:33:05' prior: 50878196 overrides: 50878151!
reflectOn: anAccountReport 

	anAccountReport reflectDeposit: self.! !
!Withdraw methodsFor: 'reports' stamp: 'CM 11/16/2020 14:33:11' prior: 50878214 overrides: 50878151!
reflectOn: anAccountReport 

	anAccountReport reflectWithdraw: self.! !
!IncomingTransfer methodsFor: 'reports' stamp: 'CM 11/16/2020 14:33:17' prior: 50878307 overrides: 50878250!
reflectOn: anAccountReport 

	anAccountReport reflectIncomingTransfer: self.! !
!IncomingTransfer methodsFor: 'reports' stamp: 'CM 11/16/2020 14:33:20' prior: 50878895 overrides: 50878250!
reflectOn: anAccountReport 
	anAccountReport reflectIncomingTransfer: self.! !
!OutgoingTransfer methodsFor: 'reports' stamp: 'CM 11/16/2020 14:33:30' prior: 50878332 overrides: 50878250!
reflectOn: anAccountReport 

	anAccountReport reflectOutgoingTransfer: self.! !
!AccountTransferTransaction methodsFor: 'reports' stamp: 'CM 11/16/2020 14:33:36' prior: 50878250 overrides: 50878872!
reflectOn: anAccountReport
	self subclassResponsibility ! !

!methodRemoval: AccountCashTransactions #reflectOn: stamp: 'CM 11/16/2020 14:33:46'!
reflectOn: anAccountSummaryReport
self subclassResponsibility !

!methodRemoval: AccountTransferTransaction #reflectOn: stamp: 'CM 11/16/2020 14:33:50'!
reflectOn: anAccountReport
	self subclassResponsibility !

!methodRemoval: AccountTransferTransaction #affectBalance: stamp: 'CM 11/16/2020 14:33:59'!
affectBalance: aBalance
self subclassResponsibility !

!methodRemoval: AccountCashTransactions #affectBalance: stamp: 'CM 11/16/2020 14:34:06'!
affectBalance: aBalance

	self subclassResponsibility !
!AccountReportTest methodsFor: 'summary report' stamp: 'CM 11/16/2020 14:34:42' prior: 50876888!
test01 

	| account summary |
	
	account := ReceptiveAccount new.
	summary := OrderedCollection with: 'Balance = 0'.

	self assert: summary equals: (AccountSummaryReport for: account) printReport .
! !
!AccountReportTest methodsFor: 'summary report' stamp: 'CM 11/16/2020 14:35:26'!
test01SummaryReportOnEmptyAccountReturnsOnlyItsBalance

	| account summary |
	
	account := ReceptiveAccount new.
	summary := OrderedCollection with: 'Balance = 0'.

	self assert: summary equals: (AccountSummaryReport for: account) printReport .
! !
!AccountReportTest methodsFor: 'summary report' stamp: 'CM 11/16/2020 14:35:43' prior: 50876898!
test02 

	| account summary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	summary := OrderedCollection with: 'Deposito de 100' with: 'Balance = 100'.

	self assert: summary equals: (AccountSummaryReport for: account) printReport .
! !
!AccountReportTest methodsFor: 'summary report' stamp: 'CM 11/16/2020 14:36:30'!
test02DepositsAreCorrectlyReflectedOnAccountSummaryReport

	| account summary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	summary := OrderedCollection with: 'Deposito de 100' with: 'Balance = 100'.

	self assert: summary equals: (AccountSummaryReport for: account) printReport .
! !
!AccountReportTest methodsFor: 'summary report' stamp: 'CM 11/16/2020 14:37:08'!
test03WithdrawsAreCorrectlyReflectedOnAccountSummaryReport

	| account summary |
	
	account := ReceptiveAccount new.
	Withdraw register: 100 on: account.

	summary := OrderedCollection with: 'Extraccion de 100' with: 'Balance = -100'.

	self assert: summary equals: (AccountSummaryReport for: account) printReport .
! !
!AccountReportTest methodsFor: 'summary report' stamp: 'CM 11/16/2020 14:37:47'!
test04WithdrawsAreCorrectlyReflectedOnAccountSummaryReport

	| account1 account2 summary |

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.

	summary := OrderedCollection with: 'Transferencia entrante de 50' with: 'Balance = 50'.

	self assert: summary equals: (AccountSummaryReport for: account2) printReport .
! !
!AccountReportTest methodsFor: 'summary report' stamp: 'CM 11/16/2020 14:38:05'!
test04IncomingTransfersAreCorrectlyReflectedOnAccountSummaryReport

	| account1 account2 summary |

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.

	summary := OrderedCollection with: 'Transferencia entrante de 50' with: 'Balance = 50'.

	self assert: summary equals: (AccountSummaryReport for: account2) printReport .
! !

!methodRemoval: AccountReportTest #test04WithdrawsAreCorrectlyReflectedOnAccountSummaryReport stamp: 'CM 11/16/2020 14:38:08'!
test04WithdrawsAreCorrectlyReflectedOnAccountSummaryReport

	| account1 account2 summary |

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.

	summary := OrderedCollection with: 'Transferencia entrante de 50' with: 'Balance = 50'.

	self assert: summary equals: (AccountSummaryReport for: account2) printReport .
!

!methodRemoval: AccountReportTest #test04 stamp: 'CM 11/16/2020 14:38:09'!
test04

	| account1 account2 summary |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	summary := OrderedCollection with: 'Transferencia entrante de 50' with: 'Balance = 50'.

	self assert: summary equals: (AccountSummaryReport for: account2) printReport .
!

!methodRemoval: AccountReportTest #test03 stamp: 'CM 11/16/2020 14:38:12'!
test03

	| account summary |
	
	account := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	
	summary := OrderedCollection with: 'Extraccion de 100' with: 'Balance = -100'.

	self assert: summary equals: (AccountSummaryReport for: account) printReport .
!

!methodRemoval: AccountReportTest #test02 stamp: 'CM 11/16/2020 14:38:15'!
test02 

	| account summary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	summary := OrderedCollection with: 'Deposito de 100' with: 'Balance = 100'.

	self assert: summary equals: (AccountSummaryReport for: account) printReport .
!

!methodRemoval: AccountReportTest #test01 stamp: 'CM 11/16/2020 14:38:17'!
test01 

	| account summary |
	
	account := ReceptiveAccount new.
	summary := OrderedCollection with: 'Balance = 0'.

	self assert: summary equals: (AccountSummaryReport for: account) printReport .
!
!AccountReportTest methodsFor: 'summary report' stamp: 'CM 11/16/2020 14:38:31'!
test05OutgoingTransfersAreCorrectlyReflectedOnAccountSummaryReport

	| account1 account2 summary |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	summary := OrderedCollection with: 'Transferencia saliente de 50' with: 'Balance = -50'.

	self assert: summary equals: (AccountSummaryReport for: account1) printReport .
! !

!methodRemoval: AccountReportTest #test05 stamp: 'CM 11/16/2020 14:38:33'!
test05

	| account1 account2 summary |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	summary := OrderedCollection with: 'Transferencia saliente de 50' with: 'Balance = -50'.

	self assert: summary equals: (AccountSummaryReport for: account1) printReport .
!
!AccountReportTest methodsFor: 'summary report' stamp: 'CM 11/16/2020 14:40:05'!
test06SummaryReportOnAPortfolioShouldReflectItsAccountsSummaries

	| portfolio account summary |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	Deposit register: 50 on: account.
	
	summary := OrderedCollection with: 'Deposito de 50' with: 'Balance = 50'.

	self assert: summary equals: (AccountSummaryReport for: portfolio) printReport .
! !
!AccountReportTest methodsFor: 'summary report' stamp: 'CM 11/16/2020 14:41:14' prior: 50879114!
test06SummaryReportOnAPortfolioShouldReflectItsAccountsSummaries

	| portfolio account1 account2 summary |
	
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account1 with: account2.
	
	Deposit register: 50 on: account1.
	Withdraw register: 50 on: account2.

	summary := OrderedCollection with: 'Deposito de 50' with: 'Extraccion de 20' with: 'Balance = 50'.

	self assert: summary equals: (AccountSummaryReport for: portfolio) printReport .
! !

!methodRemoval: AccountReportTest #test06 stamp: 'CM 11/16/2020 14:41:17'!
test06

	| portfolio account summary |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	Deposit register: 50 on: account.
	
	summary := OrderedCollection with: 'Deposito de 50' with: 'Balance = 50'.

	self assert: summary equals: (AccountSummaryReport for: portfolio) printReport .
!

!testRun: #AccountReportTest #test06SummaryReportOnAPortfolioShouldReflectItsAccountsSummaries stamp: 'CM 11/16/2020 14:41:18'!
FAILURE!

!testRun: #AccountReportTest #test06SummaryReportOnAPortfolioShouldReflectItsAccountsSummaries stamp: 'CM 11/16/2020 14:41:18'!
FAILURE!
!AccountReportTest methodsFor: 'summary report' stamp: 'CM 11/16/2020 14:41:31' prior: 50879129!
test06SummaryReportOnAPortfolioShouldReflectItsAccountsSummaries

	| portfolio account1 account2 summary |
	
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account1 with: account2.
	
	Deposit register: 50 on: account1.
	Withdraw register: 50 on: account2.

	summary := OrderedCollection with: 'Deposito de 50' with: 'Extraccion de 20' with: 'Balance = 30'.

	self assert: summary equals: (AccountSummaryReport for: portfolio) printReport .
! !

!testRun: #AccountReportTest #test06SummaryReportOnAPortfolioShouldReflectItsAccountsSummaries stamp: 'CM 11/16/2020 14:41:34'!
FAILURE!

!testRun: #AccountReportTest #test06SummaryReportOnAPortfolioShouldReflectItsAccountsSummaries stamp: 'CM 11/16/2020 14:41:34'!
FAILURE!
!AccountReportTest methodsFor: 'summary report' stamp: 'CM 11/16/2020 14:41:47' prior: 50879169!
test06SummaryReportOnAPortfolioShouldReflectItsAccountsSummaries

	| portfolio account1 account2 summary |
	
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account1 with: account2.
	
	Deposit register: 50 on: account1.
	Withdraw register: 20 on: account2.

	summary := OrderedCollection with: 'Deposito de 50' with: 'Extraccion de 20' with: 'Balance = 30'.

	self assert: summary equals: (AccountSummaryReport for: portfolio) printReport .
! !

!testRun: #AccountReportTest #test06SummaryReportOnAPortfolioShouldReflectItsAccountsSummaries stamp: 'CM 11/16/2020 14:41:49'!
PASSED!

!testRun: #AccountReportTest #test01SummaryReportOnEmptyAccountReturnsOnlyItsBalance stamp: 'CM 11/16/2020 14:41:56'!
PASSED!

!testRun: #AccountReportTest #test02DepositsAreCorrectlyReflectedOnAccountSummaryReport stamp: 'CM 11/16/2020 14:41:56'!
PASSED!

!testRun: #AccountReportTest #test03WithdrawsAreCorrectlyReflectedOnAccountSummaryReport stamp: 'CM 11/16/2020 14:41:56'!
PASSED!

!testRun: #AccountReportTest #test04IncomingTransfersAreCorrectlyReflectedOnAccountSummaryReport stamp: 'CM 11/16/2020 14:41:56'!
PASSED!

!testRun: #AccountReportTest #test05OutgoingTransfersAreCorrectlyReflectedOnAccountSummaryReport stamp: 'CM 11/16/2020 14:41:56'!
PASSED!

!testRun: #AccountReportTest #test06SummaryReportOnAPortfolioShouldReflectItsAccountsSummaries stamp: 'CM 11/16/2020 14:41:56'!
PASSED!
!AccountReport class methodsFor: 'instance creation' stamp: 'CM 11/16/2020 14:43:04' prior: 50877785!
for: anAccount 
	
	^ self new initializeFor: anAccount ! !
!AccountReport class methodsFor: 'instance creation' stamp: 'CM 11/16/2020 14:43:06' prior: 50879246!
for: anAccount 
	
	^ self new initializeFor: anAccount. ! !

!methodRemoval: AccountNetTransferReport class #for: stamp: 'CM 11/16/2020 14:43:11'!
for: aReceptiveAccount 
	
	^self new initializeFor: aReceptiveAccount !

!methodRemoval: AccountSummaryReport class #for: stamp: 'CM 11/16/2020 14:43:16'!
for: aReceptiveAccount 
	
	^self new initializeFor: aReceptiveAccount !

!methodRemoval: AccountTreeReport class #for: stamp: 'CM 11/16/2020 14:43:19'!
for: aReceptiveAccount 
	
	^self new initializeFor: aReceptiveAccount !

!methodRemoval: AccountTreeSummaryReport class #for: stamp: 'CM 11/16/2020 14:43:21'!
for: aReceptiveAccount 
	
	^self new initializeFor: aReceptiveAccount !
!AccountReport methodsFor: 'printing report' stamp: 'CM 11/16/2020 14:49:10' prior: 50877772!
printReport

	self subclassResponsibility ! !
!AccountReport methodsFor: 'adding to report' stamp: 'CM 11/16/2020 14:49:33' prior: 50877767!
reflectOn: anAccount

	self subclassResponsibility ! !
!AccountReport methodsFor: 'adding to report' stamp: 'CM 11/16/2020 14:49:37' prior: 50877762!
reflectAccount: anAccount

	self subclassResponsibility ! !
!AccountReport methodsFor: 'private-transactions' stamp: 'CM 11/16/2020 14:49:51' prior: 50877742!
reflectDeposit: aDeposit 

	self subclassResponsibility ! !
!AccountReport methodsFor: 'private-transactions' stamp: 'CM 11/16/2020 14:49:58' prior: 50877747!
reflectIncomingTransfer: aTransfer

	self subclassResponsibility ! !
!AccountReport methodsFor: 'private-transactions' stamp: 'CM 11/16/2020 14:50:01' prior: 50877752!
reflectOutgoingTransfer: aTransfer

	self subclassResponsibility ! !
!AccountReport methodsFor: 'private-transactions' stamp: 'CM 11/16/2020 14:50:05' prior: 50877757!
reflectWithdraw: aWithdraw 

	self subclassResponsibility ! !
!AccountSummaryReport methodsFor: 'reflect transactions' stamp: 'CM 11/16/2020 14:51:12' prior: 50877869 overrides: 50879292!
reflectDeposit: aDeposit 
	
	accumulatedReport add: 'Deposito de ', aDeposit value asString.! !
!AccountSummaryReport methodsFor: 'reflect transactions' stamp: 'CM 11/16/2020 14:51:36' prior: 50877876 overrides: 50879297!
reflectIncomingTransfer: aTransfer 
	
	accumulatedReport add: 'Transferencia entrante de ', aTransfer value asString.! !
!AccountSummaryReport methodsFor: 'reflect transactions' stamp: 'CM 11/16/2020 14:51:44' prior: 50877884 overrides: 50879303!
reflectOutgoingTransfer: aTransfer 
	
	accumulatedReport add: 'Transferencia saliente de ', aTransfer value asString.! !
!AccountSummaryReport methodsFor: 'reflect transactions' stamp: 'CM 11/16/2020 14:51:48' prior: 50877892 overrides: 50879309!
reflectWithdraw: aWithdraw 
	
	accumulatedReport add: 'Extraccion de ', aWithdraw value asString.! !
!AccountSummaryReport methodsFor: 'adding to report' stamp: 'CM 11/16/2020 14:52:11' prior: 50877899 overrides: 50879287!
reflectAccount: anAccount
	
	anAccount reflectOn: self.! !
!AccountSummaryReport methodsFor: 'printing report' stamp: 'CM 11/16/2020 14:52:31' prior: 50877905 overrides: 50879277!
printReport

	accumulatedReport := OrderedCollection new.
	
	account reflectOn: self.
	
	accumulatedReport add: 'Balance = ' , account balance asString.
	
	^ accumulatedReport.! !
!AccountSummaryReport methodsFor: 'printing report' stamp: 'CM 11/16/2020 14:58:39' prior: 50879351 overrides: 50879277!
printReport

	accumulatedReport := OrderedCollection new.
	
	self reflectAccount: account.
	
	accumulatedReport add: 'Balance = ' , account balance asString.
	
	^ accumulatedReport.! !

!testRun: #AccountReportTest #test01SummaryReportOnEmptyAccountReturnsOnlyItsBalance stamp: 'CM 11/16/2020 14:58:45'!
PASSED!

!testRun: #AccountReportTest #test02DepositsAreCorrectlyReflectedOnAccountSummaryReport stamp: 'CM 11/16/2020 14:58:45'!
PASSED!

!testRun: #AccountReportTest #test03WithdrawsAreCorrectlyReflectedOnAccountSummaryReport stamp: 'CM 11/16/2020 14:58:45'!
PASSED!

!testRun: #AccountReportTest #test04IncomingTransfersAreCorrectlyReflectedOnAccountSummaryReport stamp: 'CM 11/16/2020 14:58:45'!
PASSED!

!testRun: #AccountReportTest #test05OutgoingTransfersAreCorrectlyReflectedOnAccountSummaryReport stamp: 'CM 11/16/2020 14:58:45'!
PASSED!

!testRun: #AccountReportTest #test06SummaryReportOnAPortfolioShouldReflectItsAccountsSummaries stamp: 'CM 11/16/2020 14:58:45'!
PASSED!
!AccountReportTest methodsFor: 'net transfer report' stamp: 'CM 11/16/2020 14:59:15' prior: 50876835!
test07

	| account netTransfer |
	
	account := ReceptiveAccount new.
	netTransfer := 0.

	self assert: netTransfer equals: (AccountNetTransferReport for: account) printReport .
! !
!AccountReportTest methodsFor: 'net transfer report' stamp: 'CM 11/16/2020 14:59:39'!
test07NetTransferReportOnEmptyAccountReturnsZero

	| account netTransfer |
	
	account := ReceptiveAccount new.
	netTransfer := 0.

	self assert: netTransfer equals: (AccountNetTransferReport for: account) printReport .
! !

!methodRemoval: AccountReportTest #test07 stamp: 'CM 11/16/2020 14:59:44'!
test07

	| account netTransfer |
	
	account := ReceptiveAccount new.
	netTransfer := 0.

	self assert: netTransfer equals: (AccountNetTransferReport for: account) printReport .
!
!AccountReportTest methodsFor: 'net transfer report' stamp: 'CM 11/16/2020 15:00:36' prior: 50876844!
test08

	| account netTransfer |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	netTransfer := 0.

	self assert: netTransfer equals: (AccountNetTransferReport for: account) printReport .! !
!AccountReportTest methodsFor: 'net transfer report' stamp: 'CM 11/16/2020 15:01:52'!
test08DepositsDontModifyNetTransferReport

	| account netTransfer |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	netTransfer := 0.

	self assert: netTransfer equals: (AccountNetTransferReport for: account) printReport .! !
!AccountReportTest methodsFor: 'net transfer report' stamp: 'CM 11/16/2020 15:02:10' prior: 50876854!
test09

	| account1 account2 netTransfer |

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.

	netTransfer := 50.

	self assert: netTransfer equals: (AccountNetTransferReport for: account2) printReport .! !
!AccountReportTest methodsFor: 'net transfer report' stamp: 'CM 11/16/2020 15:02:42'!
test09IncomingTransfersAreReflectedOnNetTransferReport

	| account1 account2 netTransfer |

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.

	netTransfer := 50.

	self assert: netTransfer equals: (AccountNetTransferReport for: account2) printReport .! !
!AccountReportTest methodsFor: 'net transfer report' stamp: 'CM 11/16/2020 15:03:05' prior: 50876866!
test10

	| account1 account2 netTransfer |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	netTransfer := -50.
	
	self assert: netTransfer equals: (AccountNetTransferReport for: account1) printReport .! !
!AccountReportTest methodsFor: 'net transfer report' stamp: 'CM 11/16/2020 15:03:18'!
test10OutgoingTransfersAreReflectedOnNetTransferReport

	| account1 account2 netTransfer |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	netTransfer := -50.
	
	self assert: netTransfer equals: (AccountNetTransferReport for: account1) printReport .! !

!methodRemoval: AccountReportTest #test10 stamp: 'CM 11/16/2020 15:03:19'!
test10

	| account1 account2 netTransfer |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	netTransfer := -50.
	
	self assert: netTransfer equals: (AccountNetTransferReport for: account1) printReport .!

!methodRemoval: AccountReportTest #test09 stamp: 'CM 11/16/2020 15:03:20'!
test09

	| account1 account2 netTransfer |

	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.

	netTransfer := 50.

	self assert: netTransfer equals: (AccountNetTransferReport for: account2) printReport .!

!methodRemoval: AccountReportTest #test08 stamp: 'CM 11/16/2020 15:03:22'!
test08

	| account netTransfer |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	netTransfer := 0.

	self assert: netTransfer equals: (AccountNetTransferReport for: account) printReport .!
!AccountReportTest methodsFor: 'net transfer report' stamp: 'CM 11/16/2020 15:04:00'!
test11WithdrawDontModifyNetTransferReport

	| account netTransfer |
	
	account := ReceptiveAccount new.
	
	Withdraw register: 50 on: account.
	
	netTransfer := 0.
	
	self assert: netTransfer equals: (AccountNetTransferReport for: account) printReport .! !
!AccountReportTest methodsFor: 'net transfer report' stamp: 'CM 11/16/2020 15:04:01'!
test11WithdrawsDontModifyNetTransferReport

	| account netTransfer |
	
	account := ReceptiveAccount new.
	
	Withdraw register: 50 on: account.
	
	netTransfer := 0.
	
	self assert: netTransfer equals: (AccountNetTransferReport for: account) printReport .! !

!methodRemoval: AccountReportTest #test11WithdrawDontModifyNetTransferReport stamp: 'CM 11/16/2020 15:04:03'!
test11WithdrawDontModifyNetTransferReport

	| account netTransfer |
	
	account := ReceptiveAccount new.
	
	Withdraw register: 50 on: account.
	
	netTransfer := 0.
	
	self assert: netTransfer equals: (AccountNetTransferReport for: account) printReport .!

!methodRemoval: AccountReportTest #test11 stamp: 'CM 11/16/2020 15:04:04'!
test11

	| account netTransfer |
	
	account := ReceptiveAccount new.
	
	Withdraw register: 50 on: account.
	
	netTransfer := 0.
	
	self assert: netTransfer equals: (AccountNetTransferReport for: account) printReport .!

!testRun: #AccountReportTest #test07NetTransferReportOnEmptyAccountReturnsZero stamp: 'CM 11/16/2020 15:10:30'!
PASSED!

!testRun: #AccountReportTest #test08DepositsDontModifyNetTransferReport stamp: 'CM 11/16/2020 15:10:30'!
PASSED!

!testRun: #AccountReportTest #test09IncomingTransfersAreReflectedOnNetTransferReport stamp: 'CM 11/16/2020 15:10:30'!
PASSED!

!testRun: #AccountReportTest #test10OutgoingTransfersAreReflectedOnNetTransferReport stamp: 'CM 11/16/2020 15:10:30'!
PASSED!

!testRun: #AccountReportTest #test11WithdrawsDontModifyNetTransferReport stamp: 'CM 11/16/2020 15:10:30'!
PASSED!
!AccountNetTransferReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 15:11:04' prior: 50877804 overrides: 50879287!
reflectAccount: anAccount
	
	anAccount reflectOn: self.! !
!AccountNetTransferReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 15:11:08' prior: 50877810 overrides: 50879292!
reflectDeposit: aDeposit 
	! !
!AccountNetTransferReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 15:11:31' prior: 50877815 overrides: 50879297!
reflectIncomingTransfer: aTransfer
	
	accumulatedReport := accumulatedReport + aTransfer value.! !
!AccountNetTransferReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 15:11:51' prior: 50877822 overrides: 50879303!
reflectOutgoingTransfer: aTransfer 
	
	accumulatedReport := accumulatedReport - aTransfer value.! !
!AccountNetTransferReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 15:11:55' prior: 50877829 overrides: 50879309!
reflectWithdraw: aWithdraw 
	! !
!AccountNetTransferReport methodsFor: 'printing report' stamp: 'CM 11/16/2020 15:14:58' prior: 50877834 overrides: 50879277!
printReport
	
	accumulatedReport := 0.
	account reflectOn: self.
	
	^ accumulatedReport.! !
!AccountReportTest methodsFor: 'portfolio tree report' stamp: 'CM 11/16/2020 15:19:00' prior: 50876733!
test012

	| report angiesAccount childrenPortfolio familyPortfolio johnsAccount myAccount expected |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:myAccount with: childrenPortfolio.

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '    Cuenta mia' 
							with: '    Portfolio de hijos' 
							with: '        Cuenta de Juan'
							with: '        Cuenta de Angeles'.
	expected := (AccountTreeReport for: familyPortfolio) printReport.
	self assert: report equals: expected .
! !
!AccountReportTest methodsFor: 'portfolio tree report' stamp: 'CM 11/16/2020 15:19:38' prior: 50876762!
test013

	| report angiesAccount childrenPortfolio familyPortfolio johnsAccount myAccount expected |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:myAccount with: childrenPortfolio.
	
	Deposit register: 100 on: myAccount .
	Withdraw register: 20 on: johnsAccount .

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '    Cuenta mia' 
							with: '    Portfolio de hijos' 
							with: '        Cuenta de Juan' 
							with: '        Cuenta de Angeles'.
	expected := (AccountTreeReport for: familyPortfolio) printReport.
	self assert: report equals: expected .
! !
!AccountReportTest methodsFor: 'portfolio tree report' stamp: 'CM 11/16/2020 15:20:42' prior: 50876794!
test014

	| report angiesAccount childrenPortfolio familyPortfolio johnsAccount myAccount expected |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.

	Deposit register: 100 on: myAccount .
	Withdraw register: 20 on: johnsAccount .
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:myAccount with: childrenPortfolio.

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '    Cuenta mia' 
							with: '        Deposito de 100'
							with: '        Balance = 100'.
	report							
							add: '    Portfolio de hijos' ;
							add: '        Cuenta de Juan' ;
							add: '            Extraccion de 20' ;
							add: '            Balance = -20' ;
							add: '        Cuenta de Angeles';
							
							add: '            Balance = 0' ;
							add: '        Balance = -20';
							add: '    Balance = 80'.
							
	expected := (AccountTreeSummaryReport for: familyPortfolio) printReport.
	self assert: report equals: expected .
! !
!AccountReportTest methodsFor: 'portfolio tree report' stamp: 'CM 11/16/2020 15:23:56'!
test012TreeReportOnReceptiveAccountReturnsItsName

	| report angiesAccount |
	
	
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.

	report := OrderedCollection with: 'Portfolio de Angeles' 
							with: '    Cuenta mia' 
							with: '    Portfolio de hijos' 
							with: '        Cuenta de Juan'
							with: '        Cuenta de Angeles'.
								
	self assert: report equals: (AccountTreeReport for: angiesAccount) printReport .
! !
!AccountReportTest methodsFor: 'portfolio tree report' stamp: 'CM 11/16/2020 15:24:11' prior: 50879733!
test012TreeReportOnReceptiveAccountReturnsItsName

	| report angiesAccount |
	
	
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.

	report := OrderedCollection with: 'Cuenta de Angeles'.
								
	self assert: report equals: (AccountTreeReport for: angiesAccount) printReport .
! !

!testRun: #AccountReportTest #test012TreeReportOnReceptiveAccountReturnsItsName stamp: 'CM 11/16/2020 15:24:13'!
PASSED!
!AccountReportTest methodsFor: 'portfolio tree report' stamp: 'CM 11/16/2020 15:25:57'!
test013TreeReportOnEmptyPortfolioReturnsItsName

	| report myPortfolio |
	
	
	myPortfolio := Portfolio named: 'Mi portfolio'.

	report := OrderedCollection with: 'Mi portfolio'.
								
	self assert: report equals: (AccountTreeReport for: myPortfolio) printReport .
! !

!testRun: #AccountReportTest #test013TreeReportOnEmptyPortfolioReturnsItsName stamp: 'CM 11/16/2020 15:25:59'!
PASSED!
!AccountReportTest methodsFor: 'portfolio tree report' stamp: 'CM 11/16/2020 15:27:11' prior: 50879692!
test014

	| report familyPortfolio johnsAccount expected |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: johnsAccount.

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '    Cuenta de Juan'.
	expected := (AccountTreeReport for: familyPortfolio) printReport.
	self assert: report equals: expected .
! !

!testRun: #AccountReportTest #test014 stamp: 'CM 11/16/2020 15:27:17'!
PASSED!
!AccountReportTest methodsFor: 'portfolio tree report' stamp: 'CM 11/16/2020 15:28:22'!
test013PortfolioReflectsItsNameOnAccountTreeReport

	| report myPortfolio |
	
	
	myPortfolio := Portfolio named: 'Mi portfolio'.

	report := OrderedCollection with: 'Mi portfolio'.
								
	self assert: report equals: (AccountTreeReport for: myPortfolio) printReport .
! !

!methodRemoval: AccountReportTest #test013TreeReportOnEmptyPortfolioReturnsItsName stamp: 'CM 11/16/2020 15:28:22'!
test013TreeReportOnEmptyPortfolioReturnsItsName

	| report myPortfolio |
	
	
	myPortfolio := Portfolio named: 'Mi portfolio'.

	report := OrderedCollection with: 'Mi portfolio'.
								
	self assert: report equals: (AccountTreeReport for: myPortfolio) printReport .
!
!AccountReportTest methodsFor: 'portfolio tree report' stamp: 'CM 11/16/2020 15:28:43'!
test012ReceptiveAccountReflectsItsNameOnAccountTreeReport

	| report angiesAccount |
	
	
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.

	report := OrderedCollection with: 'Cuenta de Angeles'.
								
	self assert: report equals: (AccountTreeReport for: angiesAccount) printReport .
! !

!methodRemoval: AccountReportTest #test012TreeReportOnReceptiveAccountReturnsItsName stamp: 'CM 11/16/2020 15:28:43'!
test012TreeReportOnReceptiveAccountReturnsItsName

	| report angiesAccount |
	
	
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.

	report := OrderedCollection with: 'Cuenta de Angeles'.
								
	self assert: report equals: (AccountTreeReport for: angiesAccount) printReport .
!
!AccountReportTest methodsFor: 'portfolio tree report' stamp: 'CM 11/16/2020 15:29:38'!
test014PortfolioReflectsItsReceptiveAccountsOnTreeReport

	| report familyPortfolio johnsAccount expected |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: johnsAccount.

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '    Cuenta de Juan'.
	expected := (AccountTreeReport for: familyPortfolio) printReport.
	self assert: report equals: expected .
! !

!methodRemoval: AccountReportTest #test014 stamp: 'CM 11/16/2020 15:29:38'!
test014

	| report familyPortfolio johnsAccount expected |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: johnsAccount.

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '    Cuenta de Juan'.
	expected := (AccountTreeReport for: familyPortfolio) printReport.
	self assert: report equals: expected .
!
!AccountReportTest methodsFor: 'portfolio tree report' stamp: 'CM 11/16/2020 15:29:58' prior: 50879852!
test014PortfolioReflectsItsReceptiveAccountsOnTreeReport

	| report familyPortfolio johnsAccount expected |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: johnsAccount.

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '    Cuenta de Juan'.
							
	expected := (AccountTreeReport for: familyPortfolio) printReport.
	self assert: report equals: expected .
! !
!AccountReportTest methodsFor: 'portfolio tree report' stamp: 'CM 11/16/2020 15:31:11'!
test014NestedAccountReflectsItsNameIndentedOnAccountTreeReport

	| report familyPortfolio johnsAccount expected |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: johnsAccount.

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '    Cuenta de Juan'.
							
	expected := (AccountTreeReport for: familyPortfolio) printReport.
	self assert: report equals: expected .
! !

!methodRemoval: AccountReportTest #test014PortfolioReflectsItsReceptiveAccountsOnTreeReport stamp: 'CM 11/16/2020 15:31:11'!
test014PortfolioReflectsItsReceptiveAccountsOnTreeReport

	| report familyPortfolio johnsAccount expected |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: johnsAccount.

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '    Cuenta de Juan'.
							
	expected := (AccountTreeReport for: familyPortfolio) printReport.
	self assert: report equals: expected .
!

!methodRemoval: AccountReportTest #test013 stamp: 'CM 11/16/2020 15:31:13'!
test013

	| report angiesAccount childrenPortfolio familyPortfolio johnsAccount myAccount expected |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:myAccount with: childrenPortfolio.
	
	Deposit register: 100 on: myAccount .
	Withdraw register: 20 on: johnsAccount .

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '    Cuenta mia' 
							with: '    Portfolio de hijos' 
							with: '        Cuenta de Juan' 
							with: '        Cuenta de Angeles'.
	expected := (AccountTreeReport for: familyPortfolio) printReport.
	self assert: report equals: expected .
!

!methodRemoval: AccountReportTest #test012 stamp: 'CM 11/16/2020 15:31:52'!
test012

	| report angiesAccount childrenPortfolio familyPortfolio johnsAccount myAccount expected |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	childrenPortfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with:myAccount with: childrenPortfolio.

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '    Cuenta mia' 
							with: '    Portfolio de hijos' 
							with: '        Cuenta de Juan'
							with: '        Cuenta de Angeles'.
	expected := (AccountTreeReport for: familyPortfolio) printReport.
	self assert: report equals: expected .
!
!AccountReportTest methodsFor: 'portfolio tree report' stamp: 'CM 11/16/2020 15:33:44'!
test015TwoNestedPortfoliosAtSameLevelIndentOnlyOnce

	| report familyPortfolio johnsAccount expected |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: johnsAccount.

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '    Cuenta de Juan'.
							
	expected := (AccountTreeReport for: familyPortfolio) printReport.
	self assert: report equals: expected .
! !
!AccountReportTest methodsFor: 'portfolio tree report' stamp: 'CM 11/16/2020 15:34:34' prior: 50879997!
test015TwoNestedPortfoliosAtSameLevelIndentOnlyOnce

	| report familyPortfolio johnsAccount angiesAccount |
	
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: johnsAccount.

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '    Cuenta de Juan'.
							
	self assert: report equals: (AccountTreeReport for: familyPortfolio) printReport .
! !
!AccountReportTest methodsFor: 'portfolio tree report' stamp: 'CM 11/16/2020 15:35:01' prior: 50880015!
test015TwoNestedPortfoliosAtSameLevelIndentOnlyOnce

	| report familyPortfolio johnsAccount angiesAccount childrenPortfolio |
	
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	childrenPortfolio := Portfolio named: 'Portfolio de los hijos' with: johnsAccount with: angiesAccount .
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: johnsAccount.

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '    Cuenta de Juan'.
							
	self assert: report equals: (AccountTreeReport for: familyPortfolio) printReport .
! !
!AccountReportTest methodsFor: 'portfolio tree report' stamp: 'CM 11/16/2020 15:36:04' prior: 50880035!
test015TwoNestedPortfoliosAtSameLevelIndentOnlyOnce

	| report familyPortfolio johnsAccount childrenPortfolio myAccount myPortfolio |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	childrenPortfolio := Portfolio named: 'Portfolio de los hijos' with: johnsAccount .
	myPortfolio := Portfolio named: 'Portfolio mio' with: myAccount .
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: childrenPortfolio.

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '    Cuenta de Juan'.
							
	self assert: report equals: (AccountTreeReport for: familyPortfolio) printReport .
! !
!AccountReportTest methodsFor: 'portfolio tree report' stamp: 'CM 11/16/2020 15:37:09' prior: 50880058!
test015TwoNestedPortfoliosAtSameLevelIndentOnlyOnce

	| report familyPortfolio johnsAccount childrenPortfolio myAccount myPortfolio |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	childrenPortfolio := Portfolio named: 'Portfolio de los hijos' with: johnsAccount .
	myPortfolio := Portfolio named: 'Portfolio mio' with: myAccount .
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myPortfolio with: childrenPortfolio.

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '    Portfolio mio'
							with: '        Cuenta mia'
							with: '    Portfolio de los hijos'
							with: '        Cuenta de Juan'.
							
	self assert: report equals: (AccountTreeReport for: familyPortfolio) printReport .
! !

!testRun: #AccountReportTest #test015TwoNestedPortfoliosAtSameLevelIndentOnlyOnce stamp: 'CM 11/16/2020 15:37:14'!
PASSED!
!AccountReportTest methodsFor: 'portfolio tree report' stamp: 'CM 11/16/2020 15:37:25' prior: 50879903!
test014NestedAccountReflectsItsNameIndentedOnAccountTreeReport

	| report familyPortfolio johnsAccount |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: johnsAccount.

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '    Cuenta de Juan'.
							
	self assert: report equals: (AccountTreeReport for: familyPortfolio) printReport.
! !
!AccountTreeReport methodsFor: 'printing report' stamp: 'CM 11/16/2020 15:38:13' prior: 50877971 overrides: 50879277!
printReport

	accumulatedReport := OrderedCollection new.
	
	accumulatedReport add: account name.
	account reflectOn: self.
	
	^ accumulatedReport.! !
!AccountTreeReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 15:38:35' prior: 50877943 overrides: 50879287!
reflectAccount: anAccount
	
	accumulatedReport addAll: ((self class for: anAccount) printReport collect: [ :rep | '    ' , rep ]).
	! !
!AccountReportTest methodsFor: 'tree summary report' stamp: 'CM 11/16/2020 15:44:25'!
test015ReceptiveAccountReflectsItsNameAndSummaryOnAccountTreeSummaryReport

	| report angiesAccount |
	
	
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.

	report := OrderedCollection with: 'Cuenta de Angeles'.
								
	self assert: report equals: (AccountTreeReport for: angiesAccount) printReport .
! !
!AccountTreeSummaryReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 15:45:27' prior: 50878009 overrides: 50879287!
reflectAccount: anAccount	

	|report|

	report:=(self class for: anAccount).

	accumulatedReport addAll: (report printReport collect: [ :rep | '    ' , rep ]).
	balance:=balance+report balance.

	! !
!AccountTreeSummaryReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 15:45:44' prior: 50880165 overrides: 50879287!
reflectAccount: anAccount	

	|report|

	report:=(self class for: anAccount).

	accumulatedReport addAll: (report printReport collect: [ :rep | '    ' , rep ]).
	balance := balance + report balance.

	! !
!AccountTreeSummaryReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 15:46:09' prior: 50878019 overrides: 50879292!
reflectDeposit: aDeposit 

	accumulatedReport add: '    Deposito de ', aDeposit value asString.
	
	balance:=aDeposit affectBalance: balance 
	
		
	
! !
!AccountTreeSummaryReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 15:46:13' prior: 50880187 overrides: 50879292!
reflectDeposit: aDeposit 

	accumulatedReport add: '    Deposito de ', aDeposit value asString.
	
	balance := aDeposit affectBalance: balance 
	
		
	
! !
!AccountTreeSummaryReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 15:46:20' prior: 50878028 overrides: 50879297!
reflectIncomingTransfer: aTransfer
	
	accumulatedReport add: '    Transferencia entrante de ', aTransfer value asString.
	
	balance:= aTransfer affectBalance: balance ! !
!AccountTreeSummaryReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 15:46:26' prior: 50878037 overrides: 50879303!
reflectOutgoingTransfer: aTransfer
	
	accumulatedReport add: '    Transferencia saliente de ', aTransfer value asString.
	
	balance:= aTransfer affectBalance: balance ! !
!AccountTreeSummaryReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 15:46:43' prior: 50878046 overrides: 50879309!
reflectWithdraw: aWithdraw
	
	accumulatedReport add: '    Extraccion de ', aWithdraw value asString.
	
	balance:= aWithdraw affectBalance: balance ! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'CM 11/16/2020 15:51:23'!
reflectOnn: anAccountReport 

	anAccountReport reflectAccountt: self.
	
	
	! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'CM 11/16/2020 15:52:00'!
reflectTransactionsOn: anAccountReport 

	transactions do: [ :transaction |
			transaction reflectOn: anAccountReport
		].
	
	! !
!Portfolio methodsFor: 'reports' stamp: 'CM 11/16/2020 15:52:27' prior: 50878445 overrides: 50878440!
reflectOn: anAccountReport 

	accounts do: [ :account |
			anAccountReport reflectAccount: account.
		].
	
	! !

!methodRemoval: ReceptiveAccount #reflectTransactionsOn: stamp: 'CM 11/16/2020 15:52:35'!
reflectTransactionsOn: anAccountReport 

	transactions do: [ :transaction |
			transaction reflectOn: anAccountReport
		].
	
	!
!ReceptiveAccount methodsFor: 'reports' stamp: 'CM 11/16/2020 15:52:42'!
m1: anAccountReport 

	anAccountReport reflectAccountt: self.
	
	
	! !

!methodRemoval: ReceptiveAccount #reflectOnn: stamp: 'CM 11/16/2020 15:52:45'!
reflectOnn: anAccountReport 

	anAccountReport reflectAccountt: self.
	
	
	!
!Portfolio methodsFor: 'reports' stamp: 'CM 11/16/2020 15:53:15'!
m1: anAccountReport 

	anAccountReport reflectPortfolio: self.
	
	
	! !
!AccountSummaryReport methodsFor: 'printing report' stamp: 'CM 11/16/2020 15:53:42' prior: 50879361 overrides: 50879277!
printReport

	accumulatedReport := OrderedCollection new.
	
	account reflectOn: self.
	
	accumulatedReport add: 'Balance = ' , account balance asString.
	
	^ accumulatedReport.! !
!AccountSummaryReport methodsFor: 'printing report' stamp: 'CM 11/16/2020 15:53:58' prior: 50880275 overrides: 50879277!
printReport

	accumulatedReport := OrderedCollection new.
	
	account m1: self.
	
	accumulatedReport add: 'Balance = ' , account balance asString.
	
	^ accumulatedReport.! !

!testRun: #AccountReportTest #test01SummaryReportOnEmptyAccountReturnsOnlyItsBalance stamp: 'CM 11/16/2020 15:54:35'!
ERROR!

!testRun: #AccountReportTest #test02DepositsAreCorrectlyReflectedOnAccountSummaryReport stamp: 'CM 11/16/2020 15:54:35'!
ERROR!

!testRun: #AccountReportTest #test03WithdrawsAreCorrectlyReflectedOnAccountSummaryReport stamp: 'CM 11/16/2020 15:54:35'!
ERROR!

!testRun: #AccountReportTest #test04IncomingTransfersAreCorrectlyReflectedOnAccountSummaryReport stamp: 'CM 11/16/2020 15:54:35'!
ERROR!

!testRun: #AccountReportTest #test05OutgoingTransfersAreCorrectlyReflectedOnAccountSummaryReport stamp: 'CM 11/16/2020 15:54:35'!
ERROR!

!testRun: #AccountReportTest #test06SummaryReportOnAPortfolioShouldReflectItsAccountsSummaries stamp: 'CM 11/16/2020 15:54:35'!
ERROR!

!testRun: #AccountReportTest #test01SummaryReportOnEmptyAccountReturnsOnlyItsBalance stamp: 'CM 11/16/2020 15:54:38'!
ERROR!
!AccountNetTransferReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 15:55:17'!
reflectPortfolio: aPortfolio
	
	aPortfolio reflectOn: self.! !
!AccountNetTransferReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 15:55:24'!
reflectReceptiveAccount: anAccount
	
	anAccount reflectOn: self.! !
!AccountNetTransferReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 15:55:31' prior: 50880328!
reflectReceptiveAccount: aReceptiveAccount
	
	aReceptiveAccount reflectOn: self.! !
!ReceptiveAccount methodsFor: 'reports' stamp: 'CM 11/16/2020 15:55:38' prior: 50880258!
m1: anAccountReport 

	anAccountReport reflectReceptiveAccount: self.
	
	
	! !

!testRun: #AccountReportTest #test012ReceptiveAccountReflectsItsNameOnAccountTreeReport stamp: 'CM 11/16/2020 15:55:43'!
PASSED!

!testRun: #AccountReportTest #test013PortfolioReflectsItsNameOnAccountTreeReport stamp: 'CM 11/16/2020 15:55:43'!
PASSED!

!testRun: #AccountReportTest #test014NestedAccountReflectsItsNameIndentedOnAccountTreeReport stamp: 'CM 11/16/2020 15:55:43'!
PASSED!

!testRun: #AccountReportTest #test015ReceptiveAccountReflectsItsNameAndSummaryOnAccountTreeSummaryReport stamp: 'CM 11/16/2020 15:55:43'!
PASSED!

!testRun: #AccountReportTest #test015TwoNestedPortfoliosAtSameLevelIndentOnlyOnce stamp: 'CM 11/16/2020 15:55:43'!
PASSED!

!testRun: #AccountReportTest #test01SummaryReportOnEmptyAccountReturnsOnlyItsBalance stamp: 'CM 11/16/2020 15:55:43'!
ERROR!

!testRun: #AccountReportTest #test02DepositsAreCorrectlyReflectedOnAccountSummaryReport stamp: 'CM 11/16/2020 15:55:43'!
ERROR!

!testRun: #AccountReportTest #test03WithdrawsAreCorrectlyReflectedOnAccountSummaryReport stamp: 'CM 11/16/2020 15:55:43'!
ERROR!

!testRun: #AccountReportTest #test04IncomingTransfersAreCorrectlyReflectedOnAccountSummaryReport stamp: 'CM 11/16/2020 15:55:43'!
ERROR!

!testRun: #AccountReportTest #test05OutgoingTransfersAreCorrectlyReflectedOnAccountSummaryReport stamp: 'CM 11/16/2020 15:55:43'!
ERROR!

!testRun: #AccountReportTest #test06SummaryReportOnAPortfolioShouldReflectItsAccountsSummaries stamp: 'CM 11/16/2020 15:55:43'!
ERROR!

!testRun: #AccountReportTest #test07NetTransferReportOnEmptyAccountReturnsZero stamp: 'CM 11/16/2020 15:55:43'!
PASSED!

!testRun: #AccountReportTest #test08DepositsDontModifyNetTransferReport stamp: 'CM 11/16/2020 15:55:43'!
PASSED!

!testRun: #AccountReportTest #test09IncomingTransfersAreReflectedOnNetTransferReport stamp: 'CM 11/16/2020 15:55:43'!
PASSED!

!testRun: #AccountReportTest #test10OutgoingTransfersAreReflectedOnNetTransferReport stamp: 'CM 11/16/2020 15:55:43'!
PASSED!

!testRun: #AccountReportTest #test11WithdrawsDontModifyNetTransferReport stamp: 'CM 11/16/2020 15:55:43'!
PASSED!

!testRun: #AccountReportTest #test01SummaryReportOnEmptyAccountReturnsOnlyItsBalance stamp: 'CM 11/16/2020 15:55:45'!
ERROR!
!AccountSummaryReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 15:56:13'!
reflectReceptiveAccount: aReceptiveAccount
	
	aReceptiveAccount reflectOn: self.! !
!AccountSummaryReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 15:56:23'!
reflectPortfolio: aPortfolio
	
	aPortfolio reflectOn: self.! !

!testRun: #AccountReportTest #test01SummaryReportOnEmptyAccountReturnsOnlyItsBalance stamp: 'CM 11/16/2020 15:56:31'!
PASSED!

!testRun: #AccountReportTest #test02DepositsAreCorrectlyReflectedOnAccountSummaryReport stamp: 'CM 11/16/2020 15:56:31'!
PASSED!

!testRun: #AccountReportTest #test03WithdrawsAreCorrectlyReflectedOnAccountSummaryReport stamp: 'CM 11/16/2020 15:56:31'!
PASSED!

!testRun: #AccountReportTest #test04IncomingTransfersAreCorrectlyReflectedOnAccountSummaryReport stamp: 'CM 11/16/2020 15:56:31'!
PASSED!

!testRun: #AccountReportTest #test05OutgoingTransfersAreCorrectlyReflectedOnAccountSummaryReport stamp: 'CM 11/16/2020 15:56:31'!
PASSED!

!testRun: #AccountReportTest #test06SummaryReportOnAPortfolioShouldReflectItsAccountsSummaries stamp: 'CM 11/16/2020 15:56:31'!
PASSED!
!AccountNetTransferReport methodsFor: 'printing report' stamp: 'CM 11/16/2020 15:56:54' prior: 50879625 overrides: 50879277!
printReport
	
	accumulatedReport := 0.
	account m1: self.
	
	^ accumulatedReport.! !

!testRun: #AccountReportTest #test07NetTransferReportOnEmptyAccountReturnsZero stamp: 'CM 11/16/2020 15:57:01'!
PASSED!

!testRun: #AccountReportTest #test08DepositsDontModifyNetTransferReport stamp: 'CM 11/16/2020 15:57:01'!
PASSED!

!testRun: #AccountReportTest #test09IncomingTransfersAreReflectedOnNetTransferReport stamp: 'CM 11/16/2020 15:57:01'!
PASSED!

!testRun: #AccountReportTest #test10OutgoingTransfersAreReflectedOnNetTransferReport stamp: 'CM 11/16/2020 15:57:01'!
PASSED!

!testRun: #AccountReportTest #test11WithdrawsDontModifyNetTransferReport stamp: 'CM 11/16/2020 15:57:01'!
PASSED!
!AccountTreeReport methodsFor: 'printing report' stamp: 'CM 11/16/2020 15:57:29' prior: 50880134 overrides: 50879277!
printReport

	accumulatedReport := OrderedCollection new.
	
	accumulatedReport add: account name.
	account m1: self.
	
	^ accumulatedReport.! !
!AccountTreeReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 15:57:43'!
reflectReceptiveAccount: anAccount
	
	accumulatedReport addAll: ((self class for: anAccount) printReport collect: [ :rep | '    ' , rep ]).
	! !
!AccountTreeReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 15:57:48'!
reflectPortfolio: anAccount
	
	accumulatedReport addAll: ((self class for: anAccount) printReport collect: [ :rep | '    ' , rep ]).
	! !
!AccountTreeReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 15:57:57' prior: 50880493!
reflectPortfolio: aPortfolio
	
	accumulatedReport addAll: ((self class for: aPortfolio) printReport collect: [ :rep | '    ' , rep ]).
	! !
!AccountTreeReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 15:58:08' prior: 50880485!
reflectReceptiveAccount: aReceptiveAccount
	
	accumulatedReport addAll: ((self class for: aReceptiveAccount) printReport collect: [ :rep | '    ' , rep ]).
	! !
!AccountTreeReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 16:02:20' prior: 50880509!
reflectReceptiveAccount: aReceptiveAccount
	
	! !

!testRun: #AccountReportTest #test012ReceptiveAccountReflectsItsNameOnAccountTreeReport stamp: 'CM 11/16/2020 16:02:25'!
PASSED!

!testRun: #AccountReportTest #test012ReceptiveAccountReflectsItsNameOnAccountTreeReport stamp: 'CM 11/16/2020 16:02:28'!
PASSED!

!methodRemoval: AccountTreeReport #reflectPortfolio: stamp: 'CM 11/16/2020 16:04:16'!
reflectPortfolio: aPortfolio
	
	accumulatedReport addAll: ((self class for: aPortfolio) printReport collect: [ :rep | '    ' , rep ]).
	!

!methodRemoval: AccountTreeReport #reflectReceptiveAccount: stamp: 'CM 11/16/2020 16:04:19'!
reflectReceptiveAccount: aReceptiveAccount
	
	!

!methodRemoval: AccountSummaryReport #reflectPortfolio: stamp: 'CM 11/16/2020 16:04:29'!
reflectPortfolio: aPortfolio
	
	aPortfolio reflectOn: self.!

!methodRemoval: AccountSummaryReport #reflectReceptiveAccount: stamp: 'CM 11/16/2020 16:04:32'!
reflectReceptiveAccount: aReceptiveAccount
	
	aReceptiveAccount reflectOn: self.!

!methodRemoval: AccountNetTransferReport #reflectReceptiveAccount: stamp: 'CM 11/16/2020 16:04:40'!
reflectReceptiveAccount: aReceptiveAccount
	
	aReceptiveAccount reflectOn: self.!

!methodRemoval: AccountNetTransferReport #reflectWithdraw: stamp: 'CM 11/16/2020 16:04:43'!
reflectWithdraw: aWithdraw 
	!

!methodRemoval: ReceptiveAccount #m1: stamp: 'CM 11/16/2020 16:04:56'!
m1: anAccountReport 

	anAccountReport reflectReceptiveAccount: self.
	
	
	!

!methodRemoval: Portfolio #m1: stamp: 'CM 11/16/2020 16:05:04'!
m1: anAccountReport 

	anAccountReport reflectPortfolio: self.
	
	
	!

!testRun: #AccountReportTest #test012ReceptiveAccountReflectsItsNameOnAccountTreeReport stamp: 'CM 11/16/2020 16:05:12'!
ERROR!

!testRun: #AccountReportTest #test013PortfolioReflectsItsNameOnAccountTreeReport stamp: 'CM 11/16/2020 16:05:12'!
ERROR!

!testRun: #AccountReportTest #test014NestedAccountReflectsItsNameIndentedOnAccountTreeReport stamp: 'CM 11/16/2020 16:05:12'!
ERROR!

!testRun: #AccountReportTest #test015TwoNestedPortfoliosAtSameLevelIndentOnlyOnce stamp: 'CM 11/16/2020 16:05:12'!
ERROR!

!testRun: #AccountReportTest #test015ReceptiveAccountReflectsItsNameAndSummaryOnAccountTreeSummaryReport stamp: 'CM 11/16/2020 16:05:16'!
ERROR!

!testRun: #AccountReportTest #test015ReceptiveAccountReflectsItsNameAndSummaryOnAccountTreeSummaryReport stamp: 'CM 11/16/2020 16:05:16'!
ERROR!
!AccountSummaryReport methodsFor: 'printing report' stamp: 'CM 11/16/2020 16:05:57' prior: 50880285 overrides: 50879277!
printReport

	accumulatedReport := OrderedCollection new.
	
	account reflectOn: self.
	
	accumulatedReport add: 'Balance = ' , account balance asString.
	
	^ accumulatedReport.! !
!AccountNetTransferReport methodsFor: 'printing report' stamp: 'CM 11/16/2020 16:06:02' prior: 50880451 overrides: 50879277!
printReport
	
	accumulatedReport := 0.
	account reflectOn: self.
	
	^ accumulatedReport.! !
!AccountTreeReport methodsFor: 'printing report' stamp: 'CM 11/16/2020 16:06:06' prior: 50880477 overrides: 50879277!
printReport

	accumulatedReport := OrderedCollection new.
	
	accumulatedReport add: account name.
	account reflectOn: self.
	
	^ accumulatedReport.! !

!testRun: #AccountReportTest #test012ReceptiveAccountReflectsItsNameOnAccountTreeReport stamp: 'CM 11/16/2020 16:06:10'!
PASSED!

!testRun: #AccountReportTest #test013PortfolioReflectsItsNameOnAccountTreeReport stamp: 'CM 11/16/2020 16:06:10'!
PASSED!

!testRun: #AccountReportTest #test014NestedAccountReflectsItsNameIndentedOnAccountTreeReport stamp: 'CM 11/16/2020 16:06:10'!
PASSED!

!testRun: #AccountReportTest #test015TwoNestedPortfoliosAtSameLevelIndentOnlyOnce stamp: 'CM 11/16/2020 16:06:10'!
PASSED!

!testRun: #AccountReportTest #test07NetTransferReportOnEmptyAccountReturnsZero stamp: 'CM 11/16/2020 16:06:12'!
PASSED!

!testRun: #AccountReportTest #test08DepositsDontModifyNetTransferReport stamp: 'CM 11/16/2020 16:06:12'!
PASSED!

!testRun: #AccountReportTest #test09IncomingTransfersAreReflectedOnNetTransferReport stamp: 'CM 11/16/2020 16:06:12'!
PASSED!

!testRun: #AccountReportTest #test10OutgoingTransfersAreReflectedOnNetTransferReport stamp: 'CM 11/16/2020 16:06:12'!
PASSED!

!testRun: #AccountReportTest #test11WithdrawsDontModifyNetTransferReport stamp: 'CM 11/16/2020 16:06:12'!
ERROR!

!testRun: #AccountReportTest #test11WithdrawsDontModifyNetTransferReport stamp: 'CM 11/16/2020 16:06:12'!
ERROR!

!testRun: #AccountReportTest #test07NetTransferReportOnEmptyAccountReturnsZero stamp: 'CM 11/16/2020 16:06:19'!
PASSED!

!testRun: #AccountReportTest #test08DepositsDontModifyNetTransferReport stamp: 'CM 11/16/2020 16:06:19'!
PASSED!

!testRun: #AccountReportTest #test09IncomingTransfersAreReflectedOnNetTransferReport stamp: 'CM 11/16/2020 16:06:19'!
PASSED!

!testRun: #AccountReportTest #test10OutgoingTransfersAreReflectedOnNetTransferReport stamp: 'CM 11/16/2020 16:06:19'!
PASSED!

!testRun: #AccountReportTest #test11WithdrawsDontModifyNetTransferReport stamp: 'CM 11/16/2020 16:06:19'!
ERROR!

!testRun: #AccountReportTest #test11WithdrawsDontModifyNetTransferReport stamp: 'CM 11/16/2020 16:06:19'!
ERROR!
!AccountNetTransferReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 16:06:40' overrides: 50879309!
reflectWithdraw: aWithdraw
	
	! !

!methodRemoval: AccountNetTransferReport #reflectPortfolio: stamp: 'CM 11/16/2020 16:06:43'!
reflectPortfolio: aPortfolio
	
	aPortfolio reflectOn: self.!

!testRun: #AccountReportTest #test07NetTransferReportOnEmptyAccountReturnsZero stamp: 'CM 11/16/2020 16:06:46'!
PASSED!

!testRun: #AccountReportTest #test08DepositsDontModifyNetTransferReport stamp: 'CM 11/16/2020 16:06:46'!
PASSED!

!testRun: #AccountReportTest #test09IncomingTransfersAreReflectedOnNetTransferReport stamp: 'CM 11/16/2020 16:06:46'!
PASSED!

!testRun: #AccountReportTest #test10OutgoingTransfersAreReflectedOnNetTransferReport stamp: 'CM 11/16/2020 16:06:46'!
PASSED!

!testRun: #AccountReportTest #test11WithdrawsDontModifyNetTransferReport stamp: 'CM 11/16/2020 16:06:46'!
PASSED!

!testRun: #AccountReportTest #test01SummaryReportOnEmptyAccountReturnsOnlyItsBalance stamp: 'CM 11/16/2020 16:06:48'!
PASSED!

!testRun: #AccountReportTest #test02DepositsAreCorrectlyReflectedOnAccountSummaryReport stamp: 'CM 11/16/2020 16:06:48'!
PASSED!

!testRun: #AccountReportTest #test03WithdrawsAreCorrectlyReflectedOnAccountSummaryReport stamp: 'CM 11/16/2020 16:06:48'!
PASSED!

!testRun: #AccountReportTest #test04IncomingTransfersAreCorrectlyReflectedOnAccountSummaryReport stamp: 'CM 11/16/2020 16:06:48'!
PASSED!

!testRun: #AccountReportTest #test05OutgoingTransfersAreCorrectlyReflectedOnAccountSummaryReport stamp: 'CM 11/16/2020 16:06:48'!
PASSED!

!testRun: #AccountReportTest #test06SummaryReportOnAPortfolioShouldReflectItsAccountsSummaries stamp: 'CM 11/16/2020 16:06:48'!
PASSED!
!AccountReportTest methodsFor: 'tree summary report' stamp: 'CM 11/16/2020 16:07:47' prior: 50880150!
test015ReceptiveAccountReflectsItsNameAndSummaryOnAccountTreeSummaryReport

	| report angiesAccount |
	
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.

	report := OrderedCollection with: 'Cuenta de Angeles'
							with: '    Balance = 0'.
								
	self assert: report equals: (AccountTreeSummaryReport for: angiesAccount) printReport .
! !

!testRun: #AccountReportTest #test015ReceptiveAccountReflectsItsNameAndSummaryOnAccountTreeSummaryReport stamp: 'CM 11/16/2020 16:07:49'!
PASSED!

!testRun: #AccountReportTest #test015ReceptiveAccountReflectsItsNameAndSummaryOnAccountTreeSummaryReport stamp: 'CM 11/16/2020 16:07:51'!
PASSED!
!AccountReportTest methodsFor: 'tree summary report' stamp: 'CM 11/16/2020 16:08:13' prior: 50880738!
test015ReceptiveAccountReflectsItsNameAndSummaryOnAccountTreeSummaryReport

	| report angiesAccount |
	
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.

	report := OrderedCollection with: 'Cuenta de Angeles'
							with: '    Balance = 0'.
								
	self assert: report equals: (AccountTreeSummaryReport for: angiesAccount) printReport .
! !
!AccountTreeSummaryReport methodsFor: 'printing report' stamp: 'CM 11/16/2020 16:09:25' prior: 50878055 overrides: 50879277!
printReport


	accumulatedReport := OrderedCollection new.
	
	accumulatedReport add: account name.
	account reflectOn: self.
	accumulatedReport add: '    Balance = ' , balance asString.
	
	^ accumulatedReport.! !

!methodRemoval: AccountTreeSummaryReport #balance stamp: 'CM 11/16/2020 16:09:39'!
balance
^balance!

!testRun: #AccountReportTest #test015ReceptiveAccountReflectsItsNameAndSummaryOnAccountTreeSummaryReport stamp: 'CM 11/16/2020 16:09:42'!
PASSED!
!AccountTreeSummaryReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 16:10:25' prior: 50880196 overrides: 50879292!
reflectDeposit: aDeposit 

	accumulatedReport add: '    Deposito de ', aDeposit value asString.
	
		
	
! !
!AccountTreeSummaryReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 16:10:30' prior: 50880205 overrides: 50879297!
reflectIncomingTransfer: aTransfer
	
	accumulatedReport add: '    Transferencia entrante de ', aTransfer value asString.! !
!AccountTreeSummaryReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 16:10:35' prior: 50880215 overrides: 50879303!
reflectOutgoingTransfer: aTransfer
	
	accumulatedReport add: '    Transferencia saliente de ', aTransfer value asString.! !
!AccountTreeSummaryReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 16:10:39' prior: 50880225 overrides: 50879309!
reflectWithdraw: aWithdraw
	
	accumulatedReport add: '    Extraccion de ', aWithdraw value asString.! !
!AccountTreeSummaryReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 16:11:06' prior: 50880176 overrides: 50879287!
reflectAccount: anAccount	

	|report|

	report:=(self class for: anAccount).

	accumulatedReport addAll: (report printReport collect: [ :rep | '    ' , rep ]).

	! !
!AccountTreeSummaryReport methodsFor: 'printing report' stamp: 'CM 11/16/2020 16:11:19' prior: 50880778 overrides: 50879277!
printReport


	accumulatedReport := OrderedCollection new.
	
	accumulatedReport add: account name.
	account reflectOn: self.
	accumulatedReport add: '    Balance = ' , account balance asString.
	
	^ accumulatedReport.! !

!testRun: #AccountReportTest #test015ReceptiveAccountReflectsItsNameAndSummaryOnAccountTreeSummaryReport stamp: 'CM 11/16/2020 16:11:23'!
PASSED!
!AccountReportTest methodsFor: 'tree summary report' stamp: 'CM 11/16/2020 16:11:58' prior: 50880762!
test015ReceptiveAccountReflectsItsNameAndSummaryOnAccountTreeSummaryReport

	| report angiesAccount |
	
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	Deposit register: 100 on: angiesAccount .
	
	report := OrderedCollection with: 'Cuenta de Angeles'
							with: '    Deposito de 100'
							with: '    Balance = 0'.
								
	self assert: report equals: (AccountTreeSummaryReport for: angiesAccount) printReport .
! !

!testRun: #AccountReportTest #test015ReceptiveAccountReflectsItsNameAndSummaryOnAccountTreeSummaryReport stamp: 'CM 11/16/2020 16:12:08'!
FAILURE!

!testRun: #AccountReportTest #test015ReceptiveAccountReflectsItsNameAndSummaryOnAccountTreeSummaryReport stamp: 'CM 11/16/2020 16:12:08'!
FAILURE!
!AccountReportTest methodsFor: 'tree summary report' stamp: 'CM 11/16/2020 16:12:31' prior: 50880856!
test015ReceptiveAccountReflectsItsNameAndSummaryOnAccountTreeSummaryReport

	| report angiesAccount |
	
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	Deposit register: 100 on: angiesAccount .
	
	report := OrderedCollection with: 'Cuenta de Angeles'
							with: '    Deposito de 100'
							with: '    Balance = 100'.
								
	self assert: report equals: (AccountTreeSummaryReport for: angiesAccount) printReport .
! !

!testRun: #AccountReportTest #test015ReceptiveAccountReflectsItsNameAndSummaryOnAccountTreeSummaryReport stamp: 'CM 11/16/2020 16:12:33'!
PASSED!
!AccountReportTest methodsFor: 'tree summary report' stamp: 'CM 11/16/2020 16:14:17'!
test016PortfolioReflectsItsNameAndSummaryOnAccountTreeSummaryReport

	| report myPortfolio |
	
	
	myPortfolio := Portfolio named: 'Mi portfolio'.

	report := OrderedCollection with: 'Mi portfolio' with: 'Balance = 0'.
								
	self assert: report equals: (AccountTreeReport for: myPortfolio) printReport .
! !
!AccountReportTest methodsFor: 'tree summary report' stamp: 'CM 11/16/2020 16:14:23' prior: 50880904!
test016PortfolioReflectsItsNameAndSummaryOnAccountTreeSummaryReport

	| report myPortfolio |
	
	
	myPortfolio := Portfolio named: 'Mi portfolio'.

	report := OrderedCollection with: 'Mi portfolio' with: 'Balance = 0'.
								
	self assert: report equals: (AccountTreeSummaryReport for: myPortfolio) printReport .
! !

!testRun: #AccountReportTest #test016PortfolioReflectsItsNameAndSummaryOnAccountTreeSummaryReport stamp: 'CM 11/16/2020 16:14:26'!
FAILURE!

!testRun: #AccountReportTest #test016PortfolioReflectsItsNameAndSummaryOnAccountTreeSummaryReport stamp: 'CM 11/16/2020 16:14:26'!
FAILURE!
!AccountTreeSummaryReport methodsFor: 'printing report' stamp: 'CM 11/16/2020 16:15:14' prior: 50880841 overrides: 50879277!
printReport


	accumulatedReport := OrderedCollection new.
	
	accumulatedReport add: account name.
	account reflectOn: self.
	accumulatedReport add: 'Balance = ' , account balance asString.
	
	^ accumulatedReport.! !
!AccountReportTest methodsFor: 'tree summary report' stamp: 'CM 11/16/2020 16:15:41' prior: 50880883!
test015ReceptiveAccountReflectsItsNameAndSummaryOnAccountTreeSummaryReport

	| report angiesAccount |
	
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	Deposit register: 100 on: angiesAccount .
	
	report := OrderedCollection with: 'Cuenta de Angeles'
							with: '    Deposito de 100'
							with: 'Balance = 100'.
								
	self assert: report equals: (AccountTreeSummaryReport for: angiesAccount) printReport .
! !
!AccountReportTest methodsFor: 'tree summary report' stamp: 'CM 11/16/2020 16:15:57' prior: 50880950!
test015ReceptiveAccountReflectsItsNameAndSummaryOnAccountTreeSummaryReport

	| report angiesAccount |
	
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	Deposit register: 100 on: angiesAccount .
	
	report := OrderedCollection with: 'Cuenta de Angeles'
							with: '    Deposito de 100'
							with: '    Balance = 100'.
								
	self assert: report equals: (AccountTreeSummaryReport for: angiesAccount) printReport .
! !
!AccountReportTest methodsFor: 'tree summary report' stamp: 'CM 11/16/2020 16:16:14' prior: 50880917!
test016PortfolioReflectsItsNameAndSummaryOnAccountTreeSummaryReport

	| report myPortfolio |
	
	
	myPortfolio := Portfolio named: 'Mi portfolio'.

	report := OrderedCollection with: 'Mi portfolio' 
							with: '    Balance = 0'.
								
	self assert: report equals: (AccountTreeSummaryReport for: myPortfolio) printReport .
! !
!AccountTreeSummaryReport methodsFor: 'printing report' stamp: 'CM 11/16/2020 16:16:31' prior: 50880940 overrides: 50879277!
printReport


	accumulatedReport := OrderedCollection new.
	
	accumulatedReport add: account name.
	account reflectOn: self.
	accumulatedReport add: '    Balance = ' , account balance asString.
	
	^ accumulatedReport.! !
!AccountReportTest methodsFor: 'tree summary report' stamp: 'CM 11/16/2020 16:17:30'!
test17NestedAccountsAreReflectCorreclyOnAccountTreeSummaryReport

	| report myPortfolio |
	
	
	myPortfolio := Portfolio named: 'Mi portfolio'.

	report := OrderedCollection with: 'Mi portfolio' 
							with: '    Balance = 0'.
								
	self assert: report equals: (AccountTreeSummaryReport for: myPortfolio) printReport .
! !
!AccountReportTest methodsFor: 'tree summary report' stamp: 'CM 11/16/2020 16:21:47' prior: 50881009!
test17NestedAccountsAreReflectCorreclyOnAccountTreeSummaryReport

	| report familyPortfolio johnsAccount childrenPortfolio myAccount myPortfolio |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	childrenPortfolio := Portfolio named: 'Portfolio de los hijos' with: johnsAccount .
	myPortfolio := Portfolio named: 'Portfolio mio' with: myAccount .
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myPortfolio with: childrenPortfolio.
	
	Deposit register: 100 on: myAccount .
	Withdraw register: 20 on: myAccount .

	report := OrderedCollection new.
	
	report add: 'Portfolio de la familia';
		   add: '    Portfolio mio';
		   add: '        Cuenta mia';
		   add: '            Deposito de 100';
		   add: '            Balance = 100';
		   add: '        Balance = 100';		
		   add: '    Portfolio de los hijos';
		   add: '        Cuenta de Juan';
		   add: '            Extraccion de 20';
		   add: '            Balance = -20';
		   add: '        Balance = -20';
		   add: '    Balance = 80'.
							.
	self assert: report equals: (AccountTreeReport for: familyPortfolio) printReport .

! !

!testRun: #AccountReportTest #test17NestedAccountsAreReflectCorreclyOnAccountTreeSummaryReport stamp: 'CM 11/16/2020 16:21:49'!
FAILURE!

!testRun: #AccountReportTest #test17NestedAccountsAreReflectCorreclyOnAccountTreeSummaryReport stamp: 'CM 11/16/2020 16:21:49'!
FAILURE!
!AccountReportTest methodsFor: 'tree summary report' stamp: 'CM 11/16/2020 16:22:08' prior: 50881023!
test17NestedAccountsAreReflectCorreclyOnAccountTreeSummaryReport

	| report familyPortfolio johnsAccount childrenPortfolio myAccount myPortfolio |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	childrenPortfolio := Portfolio named: 'Portfolio de los hijos' with: johnsAccount .
	myPortfolio := Portfolio named: 'Portfolio mio' with: myAccount .
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myPortfolio with: childrenPortfolio.
	
	Deposit register: 100 on: myAccount .
	Withdraw register: 20 on: myAccount .

	report := OrderedCollection new.
	
	report add: 'Portfolio de la familia';
		   add: '    Portfolio mio';
		   add: '        Cuenta mia';
		   add: '            Deposito de 100';
		   add: '            Balance = 100';
		   add: '        Balance = 100';		
		   add: '    Portfolio de los hijos';
		   add: '        Cuenta de Juan';
		   add: '            Extraccion de 20';
		   add: '            Balance = -20';
		   add: '        Balance = -20';
		   add: '    Balance = 80'.
							.
	self assert: report equals: (AccountTreeSummaryReport for: familyPortfolio) printReport .

! !

!testRun: #AccountReportTest #test17NestedAccountsAreReflectCorreclyOnAccountTreeSummaryReport stamp: 'CM 11/16/2020 16:22:10'!
FAILURE!

!testRun: #AccountReportTest #test17NestedAccountsAreReflectCorreclyOnAccountTreeSummaryReport stamp: 'CM 11/16/2020 16:22:10'!
FAILURE!
!AccountReportTest methodsFor: 'tree summary report' stamp: 'CM 11/16/2020 16:22:33' prior: 50881072!
test17NestedAccountsAreReflectCorreclyOnAccountTreeSummaryReport

	| report familyPortfolio johnsAccount childrenPortfolio myAccount myPortfolio |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	childrenPortfolio := Portfolio named: 'Portfolio de los hijos' with: johnsAccount .
	myPortfolio := Portfolio named: 'Portfolio mio' with: myAccount .
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myPortfolio with: childrenPortfolio.
	
	Deposit register: 100 on: myAccount .
	Withdraw register: 20 on: johnsAccount .

	report := OrderedCollection new.
	
	report add: 'Portfolio de la familia';
		   add: '    Portfolio mio';
		   add: '        Cuenta mia';
		   add: '            Deposito de 100';
		   add: '            Balance = 100';
		   add: '        Balance = 100';		
		   add: '    Portfolio de los hijos';
		   add: '        Cuenta de Juan';
		   add: '            Extraccion de 20';
		   add: '            Balance = -20';
		   add: '        Balance = -20';
		   add: '    Balance = 80'.
							.
	self assert: report equals: (AccountTreeSummaryReport for: familyPortfolio) printReport .

! !

!testRun: #AccountReportTest #test17NestedAccountsAreReflectCorreclyOnAccountTreeSummaryReport stamp: 'CM 11/16/2020 16:22:40'!
PASSED!
!AccountReportTest methodsFor: 'tree summary report' stamp: 'CM 11/16/2020 16:22:46'!
test16PortfolioReflectsItsNameAndSummaryOnAccountTreeSummaryReport

	| report myPortfolio |
	
	
	myPortfolio := Portfolio named: 'Mi portfolio'.

	report := OrderedCollection with: 'Mi portfolio' 
							with: '    Balance = 0'.
								
	self assert: report equals: (AccountTreeSummaryReport for: myPortfolio) printReport .
! !

!methodRemoval: AccountReportTest #test016PortfolioReflectsItsNameAndSummaryOnAccountTreeSummaryReport stamp: 'CM 11/16/2020 16:22:46'!
test016PortfolioReflectsItsNameAndSummaryOnAccountTreeSummaryReport

	| report myPortfolio |
	
	
	myPortfolio := Portfolio named: 'Mi portfolio'.

	report := OrderedCollection with: 'Mi portfolio' 
							with: '    Balance = 0'.
								
	self assert: report equals: (AccountTreeSummaryReport for: myPortfolio) printReport .
!
!AccountReportTest methodsFor: 'tree summary report' stamp: 'CM 11/16/2020 16:22:50'!
test15ReceptiveAccountReflectsItsNameAndSummaryOnAccountTreeSummaryReport

	| report angiesAccount |
	
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	Deposit register: 100 on: angiesAccount .
	
	report := OrderedCollection with: 'Cuenta de Angeles'
							with: '    Deposito de 100'
							with: '    Balance = 100'.
								
	self assert: report equals: (AccountTreeSummaryReport for: angiesAccount) printReport .
! !

!methodRemoval: AccountReportTest #test015ReceptiveAccountReflectsItsNameAndSummaryOnAccountTreeSummaryReport stamp: 'CM 11/16/2020 16:22:50'!
test015ReceptiveAccountReflectsItsNameAndSummaryOnAccountTreeSummaryReport

	| report angiesAccount |
	
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	Deposit register: 100 on: angiesAccount .
	
	report := OrderedCollection with: 'Cuenta de Angeles'
							with: '    Deposito de 100'
							with: '    Balance = 100'.
								
	self assert: report equals: (AccountTreeSummaryReport for: angiesAccount) printReport .
!
!AccountReportTest methodsFor: 'tree report' stamp: 'CM 11/16/2020 16:23:01'!
test12ReceptiveAccountReflectsItsNameOnAccountTreeReport

	| report angiesAccount |
	
	
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.

	report := OrderedCollection with: 'Cuenta de Angeles'.
								
	self assert: report equals: (AccountTreeReport for: angiesAccount) printReport .
! !

!methodRemoval: AccountReportTest #test012ReceptiveAccountReflectsItsNameOnAccountTreeReport stamp: 'CM 11/16/2020 16:23:01'!
test012ReceptiveAccountReflectsItsNameOnAccountTreeReport

	| report angiesAccount |
	
	
	angiesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.

	report := OrderedCollection with: 'Cuenta de Angeles'.
								
	self assert: report equals: (AccountTreeReport for: angiesAccount) printReport .
!
!AccountReportTest methodsFor: 'tree report' stamp: 'CM 11/16/2020 16:23:06'!
test13PortfolioReflectsItsNameOnAccountTreeReport

	| report myPortfolio |
	
	
	myPortfolio := Portfolio named: 'Mi portfolio'.

	report := OrderedCollection with: 'Mi portfolio'.
								
	self assert: report equals: (AccountTreeReport for: myPortfolio) printReport .
! !

!methodRemoval: AccountReportTest #test013PortfolioReflectsItsNameOnAccountTreeReport stamp: 'CM 11/16/2020 16:23:06'!
test013PortfolioReflectsItsNameOnAccountTreeReport

	| report myPortfolio |
	
	
	myPortfolio := Portfolio named: 'Mi portfolio'.

	report := OrderedCollection with: 'Mi portfolio'.
								
	self assert: report equals: (AccountTreeReport for: myPortfolio) printReport .
!
!AccountReportTest methodsFor: 'tree report' stamp: 'CM 11/16/2020 16:23:11'!
test14NestedAccountReflectsItsNameIndentedOnAccountTreeReport

	| report familyPortfolio johnsAccount |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: johnsAccount.

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '    Cuenta de Juan'.
							
	self assert: report equals: (AccountTreeReport for: familyPortfolio) printReport.
! !

!methodRemoval: AccountReportTest #test014NestedAccountReflectsItsNameIndentedOnAccountTreeReport stamp: 'CM 11/16/2020 16:23:11'!
test014NestedAccountReflectsItsNameIndentedOnAccountTreeReport

	| report familyPortfolio johnsAccount |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: johnsAccount.

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '    Cuenta de Juan'.
							
	self assert: report equals: (AccountTreeReport for: familyPortfolio) printReport.
!
!AccountReportTest methodsFor: 'tree report' stamp: 'CM 11/16/2020 16:23:16'!
test15TwoNestedPortfoliosAtSameLevelIndentOnlyOnce

	| report familyPortfolio johnsAccount childrenPortfolio myAccount myPortfolio |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	childrenPortfolio := Portfolio named: 'Portfolio de los hijos' with: johnsAccount .
	myPortfolio := Portfolio named: 'Portfolio mio' with: myAccount .
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myPortfolio with: childrenPortfolio.

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '    Portfolio mio'
							with: '        Cuenta mia'
							with: '    Portfolio de los hijos'
							with: '        Cuenta de Juan'.
							
	self assert: report equals: (AccountTreeReport for: familyPortfolio) printReport .
! !

!methodRemoval: AccountReportTest #test015TwoNestedPortfoliosAtSameLevelIndentOnlyOnce stamp: 'CM 11/16/2020 16:23:16'!
test015TwoNestedPortfoliosAtSameLevelIndentOnlyOnce

	| report familyPortfolio johnsAccount childrenPortfolio myAccount myPortfolio |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	childrenPortfolio := Portfolio named: 'Portfolio de los hijos' with: johnsAccount .
	myPortfolio := Portfolio named: 'Portfolio mio' with: myAccount .
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myPortfolio with: childrenPortfolio.

	report := OrderedCollection with: 'Portfolio de la familia' 
							with: '    Portfolio mio'
							with: '        Cuenta mia'
							with: '    Portfolio de los hijos'
							with: '        Cuenta de Juan'.
							
	self assert: report equals: (AccountTreeReport for: familyPortfolio) printReport .
!

AccountReport subclass: #AccountTreeSummaryReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTreeSummaryReport category: 'Portfolio-Solucion' stamp: 'CM 11/16/2020 16:23:25'!
AccountReport subclass: #AccountTreeSummaryReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!methodRemoval: AccountTreeSummaryReport #initializeFor: stamp: 'CM 11/16/2020 16:24:24'!
initializeFor: anAccount 
	account := anAccount.
	balance := 0.!

!testRun: #AccountReportTest #test01SummaryReportOnEmptyAccountReturnsOnlyItsBalance stamp: 'CM 11/16/2020 16:24:27'!
PASSED!

!testRun: #AccountReportTest #test02DepositsAreCorrectlyReflectedOnAccountSummaryReport stamp: 'CM 11/16/2020 16:24:27'!
PASSED!

!testRun: #AccountReportTest #test03WithdrawsAreCorrectlyReflectedOnAccountSummaryReport stamp: 'CM 11/16/2020 16:24:27'!
PASSED!

!testRun: #AccountReportTest #test04IncomingTransfersAreCorrectlyReflectedOnAccountSummaryReport stamp: 'CM 11/16/2020 16:24:27'!
PASSED!

!testRun: #AccountReportTest #test05OutgoingTransfersAreCorrectlyReflectedOnAccountSummaryReport stamp: 'CM 11/16/2020 16:24:27'!
PASSED!

!testRun: #AccountReportTest #test06SummaryReportOnAPortfolioShouldReflectItsAccountsSummaries stamp: 'CM 11/16/2020 16:24:27'!
PASSED!

!testRun: #AccountReportTest #test07NetTransferReportOnEmptyAccountReturnsZero stamp: 'CM 11/16/2020 16:24:27'!
PASSED!

!testRun: #AccountReportTest #test08DepositsDontModifyNetTransferReport stamp: 'CM 11/16/2020 16:24:27'!
PASSED!

!testRun: #AccountReportTest #test09IncomingTransfersAreReflectedOnNetTransferReport stamp: 'CM 11/16/2020 16:24:27'!
PASSED!

!testRun: #AccountReportTest #test10OutgoingTransfersAreReflectedOnNetTransferReport stamp: 'CM 11/16/2020 16:24:27'!
PASSED!

!testRun: #AccountReportTest #test11WithdrawsDontModifyNetTransferReport stamp: 'CM 11/16/2020 16:24:27'!
PASSED!

!testRun: #AccountReportTest #test12ReceptiveAccountReflectsItsNameOnAccountTreeReport stamp: 'CM 11/16/2020 16:24:27'!
PASSED!

!testRun: #AccountReportTest #test13PortfolioReflectsItsNameOnAccountTreeReport stamp: 'CM 11/16/2020 16:24:27'!
PASSED!

!testRun: #AccountReportTest #test14NestedAccountReflectsItsNameIndentedOnAccountTreeReport stamp: 'CM 11/16/2020 16:24:27'!
PASSED!

!testRun: #AccountReportTest #test15ReceptiveAccountReflectsItsNameAndSummaryOnAccountTreeSummaryReport stamp: 'CM 11/16/2020 16:24:27'!
PASSED!

!testRun: #AccountReportTest #test15TwoNestedPortfoliosAtSameLevelIndentOnlyOnce stamp: 'CM 11/16/2020 16:24:27'!
PASSED!

!testRun: #AccountReportTest #test16PortfolioReflectsItsNameAndSummaryOnAccountTreeSummaryReport stamp: 'CM 11/16/2020 16:24:27'!
PASSED!

!testRun: #AccountReportTest #test17NestedAccountsAreReflectCorreclyOnAccountTreeSummaryReport stamp: 'CM 11/16/2020 16:24:27'!
PASSED!
!AccountTreeReport methodsFor: 'reflecting account info' stamp: 'CM 11/16/2020 16:25:21' prior: 50880143 overrides: 50879287!
reflectAccount: anAccount
	
	accumulatedReport addAll: ((self class for: anAccount) printReport collect: [ :rep | '    ' , rep ]).
	! !

----SNAPSHOT----(16 November 2020 16:25:26) CuisUniversity-4384.image priorSource: 17419915!