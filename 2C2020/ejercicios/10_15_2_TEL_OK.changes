

----STARTUP---- (29 October 2020 18:13:12) as C:\Users\Hanse\Documents\Facultad\windows64\CuisUniversity-4383.image!


TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!

!classDefinition: #TerniLapilliTest category: 'TerniLapilliTest' stamp: 'ad 10/29/2020 18:14:31'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!

!classDefinition: #TerniLapilli category: 'TerniLapilliTest' stamp: 'ad 10/29/2020 18:18:49'!
Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!
!TerniLapilliTest methodsFor: 'nil' stamp: 'ad 10/29/2020 18:19:22'!
test01assertOnStartItsPlayerXTurn
	|newBoard|
	newBoard := TerniLapilli new.
	self assert: newBoard isPlayingX.! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 18:19:25'!
ERROR!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 18:19:34'!
ERROR!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 18:19:40'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:19:54'!
isPlayingX
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:20:01' prior: 50869438!
isPlayingX
	^true.! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 18:20:03'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 18:20:03'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:20:56'!
test01assertAfterXTurnGoesO
	|newBoard|
	newBoard := TerniLapilli new.
	newBoard putXAt: (1@1).
	self assert: newBoard isPlayingO.! !

!testRun: #TerniLapilliTest #test01assertAfterXTurnGoesO stamp: 'ad 10/29/2020 18:21:02'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:21:13'!
putXAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:21:30' prior: 50869463!
putXAt: aPoint 
	! !

!testRun: #TerniLapilliTest #test01assertAfterXTurnGoesO stamp: 'ad 10/29/2020 18:21:31'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:21:37'!
isPlayingO
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:21:48' prior: 50869475!
isPlayingO
	^true! !

!testRun: #TerniLapilliTest #test01assertAfterXTurnGoesO stamp: 'ad 10/29/2020 18:21:48'!
PASSED!

!testRun: #TerniLapilliTest #test01assertAfterXTurnGoesO stamp: 'ad 10/29/2020 18:21:48'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 18:21:48'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:22:03'!
test02assertOnStartItsPlayerXTurn
	|newBoard|
	newBoard := TerniLapilli new.
	self assert: newBoard isPlayingX.! !

!methodRemoval: TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 18:22:03'!
test01assertOnStartItsPlayerXTurn
	|newBoard|
	newBoard := TerniLapilli new.
	self assert: newBoard isPlayingX.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:22:22'!
test01assertOnStartItsPlayerXTurn
	|newBoard|
	newBoard := TerniLapilli new.
	self assert: newBoard isPlayingX.! !

!methodRemoval: TerniLapilliTest #test02assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 18:22:22'!
test02assertOnStartItsPlayerXTurn
	|newBoard|
	newBoard := TerniLapilli new.
	self assert: newBoard isPlayingX.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:22:30'!
test02assertAfterXTurnGoesO
	|newBoard|
	newBoard := TerniLapilli new.
	newBoard putXAt: (1@1).
	self assert: newBoard isPlayingO.! !

!methodRemoval: TerniLapilliTest #test01assertAfterXTurnGoesO stamp: 'ad 10/29/2020 18:22:30'!
test01assertAfterXTurnGoesO
	|newBoard|
	newBoard := TerniLapilli new.
	newBoard putXAt: (1@1).
	self assert: newBoard isPlayingO.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:23:00' prior: 50869506!
test01assertOnStartItsPlayerXTurn
	|newBoard|
	newBoard := TerniLapilli new.
	self assert: newBoard isPlayingX.
	self deny: newBoard isPlayingO.! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 18:23:00'!
FAILURE!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 18:23:15'!
FAILURE!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 18:23:27'!
FAILURE!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 18:23:34'!
FAILURE!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 18:23:44'!
FAILURE!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 18:23:44'!
FAILURE!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 18:24:09'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:24:23' prior: 50869480!
isPlayingO
	^false! !

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 10/29/2020 18:24:32'!
FAILURE!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 10/29/2020 18:24:40'!
FAILURE!

!classDefinition: #TerniLapilli category: 'TerniLapilliTest' stamp: 'ad 10/29/2020 18:25:26'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentTurn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:25:20' prior: 50869468!
putXAt: aPoint 
	currentTurn := #O.! !

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 10/29/2020 18:25:28'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:25:56' prior: 50869565!
isPlayingO
	^currentTurn = #O! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:26:18' prior: 50869443!
isPlayingX
	^currentTurn = #X.! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 18:26:21'!
FAILURE!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 10/29/2020 18:26:21'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 18:26:21'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:27:39' overrides: 16896425!
initialize
	currentTurn := #X! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:27:55' prior: 50869534!
test01assertOnStartItsPlayerXTurn
	|newBoard|
	newBoard := TerniLapilli new.
	self assert: newBoard isPlayingX.
	self deny: newBoard isPlayingO.! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 18:27:55'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 18:27:55'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 10/29/2020 18:27:55'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:28:34' prior: 50869519!
test02assertAfterXTurnGoesO
	|newBoard|
	newBoard := TerniLapilli new.
	newBoard putXAt: (1@1).
	self assert: newBoard isPlayingO.
	self deny: newBoard isPlayingX.! !

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 10/29/2020 18:28:34'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 18:28:34'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 10/29/2020 18:28:34'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:35:44'!
test03assertPlayerCantPutChipIfItIsntItsTurn
	|newBoard|
	newBoard := TerniLapilli new.
	
	self   should: [newBoard putOAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveNotYourTurn.! !
!TerniLapilli class methodsFor: 'no messages' stamp: 'ad 10/29/2020 18:36:31'!
errorInvalidMoveNotYourTurn

	^'It must be your turn to be able to put down a chip'.! !

!testRun: #TerniLapilliTest #test03assertPlayerCantPutChipIfItIsntItsTurn stamp: 'ad 10/29/2020 18:36:41'!
FAILURE!

!testRun: #TerniLapilliTest #test03assertPlayerCantPutChipIfItIsntItsTurn stamp: 'ad 10/29/2020 18:36:41'!
FAILURE!

!testRun: #TerniLapilliTest #test03assertPlayerCantPutChipIfItIsntItsTurn stamp: 'ad 10/29/2020 18:38:00'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:38:30'!
putOAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:38:46' prior: 50869678!
putOAt: aPoint 
	^self class errorInvalidMoveNotYourTurn .! !

!testRun: #TerniLapilliTest #test03assertPlayerCantPutChipIfItIsntItsTurn stamp: 'ad 10/29/2020 18:38:48'!
FAILURE!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:40:19'!
signalErrorInvalidMoveNotYourTurn

	self error: self errorInvalidMoveNotYourTurn .! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 18:40:26'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 18:40:51'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 10/29/2020 18:40:51'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerCantPutChipIfItIsntItsTurn stamp: 'ad 10/29/2020 18:40:51'!
FAILURE!

!testRun: #TerniLapilliTest #test03assertPlayerCantPutChipIfItIsntItsTurn stamp: 'ad 10/29/2020 18:40:51'!
FAILURE!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 18:41:22'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 10/29/2020 18:41:22'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerCantPutChipIfItIsntItsTurn stamp: 'ad 10/29/2020 18:41:22'!
FAILURE!

!testRun: #TerniLapilliTest #test03assertPlayerCantPutChipIfItIsntItsTurn stamp: 'ad 10/29/2020 18:41:22'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:41:55' prior: 50869683!
putOAt: aPoint 
	self class signalErrorInvalidMoveNotYourTurn ! !

!testRun: #TerniLapilliTest #test03assertPlayerCantPutChipIfItIsntItsTurn stamp: 'ad 10/29/2020 18:41:55'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 18:41:58'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 10/29/2020 18:41:58'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerCantPutChipIfItIsntItsTurn stamp: 'ad 10/29/2020 18:41:58'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:43:02' prior: 50869651!
test03assertPlayerCantPutChipIfItIsntItsTurn
	|newBoard|
	newBoard := TerniLapilli new.
	newBoard putXAt: (1@1).
	self   should: [newBoard putOAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipOnOccupiedSlot.! !

!testRun: #TerniLapilliTest #test03assertPlayerCantPutChipIfItIsntItsTurn stamp: 'ad 10/29/2020 18:43:04'!
ERROR!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:43:36'!
errorInvalidMoveCantPutChipOnOccupiedSlot
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:44:56'!
signalErrorInvalidMoveCantPutChipOnOccupiedSlot

	self error: self errorInvalidMoveCantPutChipOnOccupiedSlot .! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:45:21' prior: 50869763!
errorInvalidMoveCantPutChipOnOccupiedSlot
	^'Cant put chip in an occupied slot'.! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 18:45:24'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 10/29/2020 18:45:24'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerCantPutChipIfItIsntItsTurn stamp: 'ad 10/29/2020 18:45:24'!
FAILURE!

!testRun: #TerniLapilliTest #test03assertPlayerCantPutChipIfItIsntItsTurn stamp: 'ad 10/29/2020 18:45:24'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:46:40' prior: 50869748!
test03assertPlayerCantPutChipIfItIsntItsTurn
	|newBoard|
	newBoard := TerniLapilli new.
	
	self   should: [newBoard putOAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveNotYourTurn .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:47:00'!
test04assertPlayerCantPutChipOnAnOccupiedSlot
	|newBoard|
	newBoard := TerniLapilli new.
	newBoard putXAt: (1@1).
	self   should: [newBoard putOAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipOnOccupiedSlot .! !

!testRun: #TerniLapilliTest #test04assertPlayerCantPutChipOnAnOccupiedSlot stamp: 'ad 10/29/2020 18:47:00'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:49:25' prior: 50869729!
putOAt: aPoint 

	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot .! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 18:49:27'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 10/29/2020 18:49:27'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerCantPutChipIfItIsntItsTurn stamp: 'ad 10/29/2020 18:49:27'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerCantPutChipOnAnOccupiedSlot stamp: 'ad 10/29/2020 18:49:27'!
PASSED!

----End fileIn of C:\Users\Hanse\Documents\Facultad\windows64\Packages\TerseGuide.pck.st----!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:55:45'!
test05assertPlayerCantPutChipWhenAllChipsHaveBeenPut
	|newBoard|
	newBoard := TerniLapilli new.
	newBoard putXAt: (1@1).
	newBoard putOAt: (1@2).
	newBoard putXAt: (1@3).
	newBoard putOAt: (2@1).
	newBoard putXAt: (2@2).
	newBoard putOAt: (2@3).
	self   should: [newBoard putXAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut.! !

!testRun: #TerniLapilliTest #test05assertPlayerCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 10/29/2020 18:55:49'!
ERROR!

!classDefinition: #TerniLapilli category: 'TerniLapilliTest' stamp: 'ad 10/29/2020 18:59:03'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentTurn board'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:58:59' prior: 50869820!
putOAt: aPoint 

	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	(board includes: aPoint) ifTrue: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].! !

!testRun: #TerniLapilliTest #test05assertPlayerCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 10/29/2020 18:59:09'!
ERROR!

!testRun: #TerniLapilliTest #test05assertPlayerCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 10/29/2020 18:59:27'!
ERROR!

!testRun: #TerniLapilliTest #test05assertPlayerCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 10/29/2020 18:59:30'!
ERROR!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:00:16'!
signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut

	self error: self errorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:00:45'!
errorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut

	^'All 6 chips have been put on the board'.! !

!testRun: #TerniLapilliTest #test05assertPlayerCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 10/29/2020 19:00:58'!
ERROR!

!testRun: #TerniLapilliTest #test05assertPlayerCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 10/29/2020 19:00:58'!
ERROR!

!testRun: #TerniLapilliTest #test05assertPlayerCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 10/29/2020 19:01:13'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:01:50' prior: 50869610 overrides: 16896425!
initialize
	currentTurn := #X.
	board:= OrderedCollection  new.! !

!testRun: #TerniLapilliTest #test05assertPlayerCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 10/29/2020 19:01:55'!
FAILURE!

!testRun: #TerniLapilliTest #test05assertPlayerCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 10/29/2020 19:01:55'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:03:12' prior: 50872804!
putOAt: aPoint 
	
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	(board includes: aPoint) ifTrue: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:03:46'!
isBoardFull

	^board size  = 6! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:04:51' prior: 50869583!
putXAt: aPoint 
	currentTurn := #O.
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 19:04:55'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 10/29/2020 19:04:55'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerCantPutChipIfItIsntItsTurn stamp: 'ad 10/29/2020 19:04:55'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerCantPutChipOnAnOccupiedSlot stamp: 'ad 10/29/2020 19:04:55'!
FAILURE!

!testRun: #TerniLapilliTest #test05assertPlayerCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 10/29/2020 19:04:55'!
FAILURE!

!testRun: #TerniLapilliTest #test04assertPlayerCantPutChipOnAnOccupiedSlot stamp: 'ad 10/29/2020 19:05:11'!
FAILURE!

!testRun: #TerniLapilliTest #test04assertPlayerCantPutChipOnAnOccupiedSlot stamp: 'ad 10/29/2020 19:05:11'!
FAILURE!

!testRun: #TerniLapilliTest #test04assertPlayerCantPutChipOnAnOccupiedSlot stamp: 'ad 10/29/2020 19:05:43'!
FAILURE!

!testRun: #TerniLapilliTest #test04assertPlayerCantPutChipOnAnOccupiedSlot stamp: 'ad 10/29/2020 19:05:43'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:07:57' prior: 50872881!
putXAt: aPoint 
	currentTurn := #O.
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	board add: aPoint.! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 19:08:00'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 10/29/2020 19:08:00'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerCantPutChipIfItIsntItsTurn stamp: 'ad 10/29/2020 19:08:00'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerCantPutChipOnAnOccupiedSlot stamp: 'ad 10/29/2020 19:08:00'!
PASSED!

!testRun: #TerniLapilliTest #test05assertPlayerCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 10/29/2020 19:08:00'!
FAILURE!

!testRun: #TerniLapilliTest #test05assertPlayerCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 10/29/2020 19:08:00'!
FAILURE!

!testRun: #TerniLapilliTest #test04assertPlayerCantPutChipOnAnOccupiedSlot stamp: 'ad 10/29/2020 19:08:34'!
PASSED!

!testRun: #TerniLapilliTest #test05assertPlayerCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 10/29/2020 19:08:39'!
FAILURE!

!testRun: #TerniLapilliTest #test05assertPlayerCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 10/29/2020 19:08:39'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:09:34' prior: 50872864!
putOAt: aPoint 
	
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	(board includes: aPoint) ifTrue: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	board add: aPoint.! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 19:09:37'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 10/29/2020 19:09:37'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerCantPutChipIfItIsntItsTurn stamp: 'ad 10/29/2020 19:09:37'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerCantPutChipOnAnOccupiedSlot stamp: 'ad 10/29/2020 19:09:37'!
PASSED!

!testRun: #TerniLapilliTest #test05assertPlayerCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 10/29/2020 19:09:37'!
PASSED!

----SNAPSHOT----(29 October 2020 19:11:27) CuisUniversity-4383.image priorSource: 17207870!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:17:32'!
test06assertAfterGameIsOverThereIsAWinner
	|newBoard|
	newBoard := TerniLapilli new.
	newBoard putXAt: (1@1).
	newBoard putOAt: (2@2).
	newBoard putXAt: (1@2).
	newBoard putOAt: (2@1).
	newBoard putXAt: (1@3).
	self assert: newBoard isOver.
	
	self   should: [newBoard putOAt: (2@3).] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenGameIsOver.! !

!testRun: #TerniLapilliTest #test06assertAfterGameIsOverThereIsAWinner stamp: 'ad 10/29/2020 19:17:35'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:17:49'!
isOver
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:18:02' prior: 50873013!
isOver
	^true.! !

!testRun: #TerniLapilliTest #test06assertAfterGameIsOverThereIsAWinner stamp: 'ad 10/29/2020 19:18:04'!
ERROR!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:18:37'!
signalErrorInvalidMoveCantPutChipWhenGameIsOver

	self error: self errorInvalidMoveCantPutChipWhenGameIsOver .! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:19:03'!
errorInvalidMoveCantPutChipWhenGameIsOver

	^'Cant put chip because the game is already over'.! !

!testRun: #TerniLapilliTest #test06assertAfterGameIsOverThereIsAWinner stamp: 'ad 10/29/2020 19:19:09'!
FAILURE!

!testRun: #TerniLapilliTest #test06assertAfterGameIsOverThereIsAWinner stamp: 'ad 10/29/2020 19:19:09'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:20:28' prior: 50872962!
putOAt: aPoint 
	self isOver ifTrue: [^self class signalErrorInvalidMoveCantPutChipWhenGameIsOver ].
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	(board includes: aPoint) ifTrue: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	board add: aPoint.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:20:57' prior: 50872921!
putXAt: aPoint 
	self isOver ifTrue: [^self class signalErrorInvalidMoveCantPutChipWhenGameIsOver ].
	currentTurn := #O.
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	board add: aPoint.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:21:52' prior: 50873018!
isOver
	^self hasPlayerXWon or: self hasPlayerOWon.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:23:19'!
hasPlayerXWon
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:23:24'!
hasPlayerOWon
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:27:44' prior: 50869615!
test01assertOnStartItsPlayerXTurn
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	self assert: newTerniLapilliGame  isEmpty.
	self assert: newTerniLapilliGame isPlayingX.
	self deny: newTerniLapilliGame isPlayingO.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:30:55' prior: 50872995!
test06assertAfterGameIsOverThereIsAWinner
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (1@3).
	self assert: newTerniLapilliGame isOver.
	
	self   should: [newTerniLapilliGame putOAt: (2@3).] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenGameIsOver.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:31:14' prior: 50869633!
test02assertAfterXTurnGoesO
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	self assert: newTerniLapilliGame isPlayingO.
	self deny: newTerniLapilliGame isPlayingX.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:31:21' prior: 50869795!
test03assertPlayerCantPutChipIfItIsntItsTurn
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
	self   should: [newTerniLapilliGame putOAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveNotYourTurn .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:31:30' prior: 50869805!
test04assertPlayerCantPutChipOnAnOccupiedSlot
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	self   should: [newTerniLapilliGame putOAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipOnOccupiedSlot .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:31:45' prior: 50872777!
test05assertPlayerCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (1@3).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (2@3).
	self   should: [newTerniLapilliGame putXAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:36:47'!
test06assertPlayerXWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (1@3).
	self assert: newTerniLapilliGame hasPlayerXWon .
	
	"self   should: [newTerniLapilliGame putOAt: (2@3).] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenGameIsOver."! !

!testRun: #TerniLapilliTest #test06assertPlayerXWonHorizontally stamp: 'ad 10/29/2020 19:36:50'!
ERROR!

!methodRemoval: TerniLapilli #isOver stamp: 'ad 10/29/2020 19:37:19'!
isOver
	^self hasPlayerXWon or: self hasPlayerOWon.!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:37:27' prior: 50873046!
putOAt: aPoint 
	
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	(board includes: aPoint) ifTrue: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	board add: aPoint.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:37:32' prior: 50873062!
putXAt: aPoint 
	
	currentTurn := #O.
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	board add: aPoint.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:37:44' prior: 50873078!
hasPlayerXWon
	
		! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'currentTurn chipsX chipsO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!

!classDefinition: #TerniLapilli category: 'TerniLapilliTest' stamp: 'ad 10/29/2020 19:38:27'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentTurn chipsX chipsO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:40:08' prior: 50873196!
putOAt: aPoint 
	
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	((chipsX includes: aPoint )or: (chipsO includes: aPoint)) ifTrue: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	chipsO add: aPoint.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:41:09' prior: 50873209!
putXAt: aPoint 
	
	currentTurn := #O.
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	((chipsX includes: aPoint )or: (chipsO includes: aPoint)) ifTrue: [^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	chipsX add: aPoint.! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 10/29/2020 19:41:17'!
ERROR!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 10/29/2020 19:41:17'!
ERROR!

!testRun: #TerniLapilliTest #test03assertPlayerCantPutChipIfItIsntItsTurn stamp: 'ad 10/29/2020 19:41:17'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerCantPutChipOnAnOccupiedSlot stamp: 'ad 10/29/2020 19:41:18'!
ERROR!

!testRun: #TerniLapilliTest #test05assertPlayerCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 10/29/2020 19:41:18'!
ERROR!

!testRun: #TerniLapilliTest #test06assertAfterGameIsOverThereIsAWinner stamp: 'ad 10/29/2020 19:41:18'!
ERROR!

!testRun: #TerniLapilliTest #test06assertPlayerXWonHorizontally stamp: 'ad 10/29/2020 19:41:18'!
ERROR!

----SNAPSHOT----(29 October 2020 19:52:08) CuisUniversity-4383.image priorSource: 17322922!

----SNAPSHOT----(29 October 2020 19:59:56) CuisUniversity-4383.image priorSource: 17332264!

----STARTUP---- (1 November 2020 18:50:18) as C:\Users\Hanse\Documents\Facultad\windows64\CuisUniversity-4383.image!


(-200@ -100) abs!

OrderedCollection points with: (0@0) with: (0@1) with: (0@2)!

points!

|points|

points := OrderedCollection with: (0@0) with: (0@1) with: (0@2)!

|points|

points := OrderedCollection with: (0@0) with: (0@1) with: (0@2)!

|points|

points := OrderedCollection with: (0@0) with: (0@1) with: (0@2) !

----STARTUP---- (2 November 2020 12:57:25) as C:\Users\Hanse\Documents\Facultad\windows64\CuisUniversity-4383.image!


!classRemoval: #TerniLapilli stamp: 'ad 11/2/2020 12:57:37'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentTurn chipsX chipsO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!

!classRemoval: #TerniLapilliTest stamp: 'ad 11/2/2020 12:57:37'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!

----End fileIn of C:\Users\Hanse\Documents\GitHub\IS1-Trabajos\17-TerniLapilli\Terni Lapilli.st----!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 11/2/2020 12:58:11'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 11/2/2020 12:58:11'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 12:58:11'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 12:58:11'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'ad 11/2/2020 12:58:11'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 12:58:11'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 12:58:11'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 12:58:11'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 12:58:11'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'ad 11/2/2020 12:58:11'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'ad 11/2/2020 12:58:11'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'ad 11/2/2020 12:58:11'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'ad 11/2/2020 12:58:11'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'ad 11/2/2020 12:58:11'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'ad 11/2/2020 12:58:11'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'ad 11/2/2020 12:58:11'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'ad 11/2/2020 12:58:11'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'ad 11/2/2020 12:58:11'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'ad 11/2/2020 12:58:11'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'ad 11/2/2020 12:58:11'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'ad 11/2/2020 12:58:11'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'ad 11/2/2020 12:58:11'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'ad 11/2/2020 12:58:11'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'ad 11/2/2020 12:58:11'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'ad 11/2/2020 12:58:11'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'ad 11/2/2020 12:58:11'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'ad 11/2/2020 12:58:11'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'ad 11/2/2020 12:58:11'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'ad 11/2/2020 12:58:11'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 12:59:10'!
fillBoardWith: aCollectionOfPositions! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:05:34'!
fillBoardWith: aCollectionOfPositions in: aTerniLapilliGame

	! !

!methodRemoval: TerniLapilliTest #fillBoardWith: stamp: 'ad 11/2/2020 13:05:39'!
fillBoardWith: aCollectionOfPositions!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:07:07' prior: 50874670!
fillBoardWith: aCollectionOfPositions in: aTerniLapilliGame

	aTerniLapilliGame putXAt: (aCollectionOfPositions at: 1).
	aTerniLapilliGame putOAt:(aCollectionOfPositions at: 2).
	aTerniLapilliGame putXAt: (aCollectionOfPositions at: 3).
	aTerniLapilliGame putOAt:(aCollectionOfPositions at: 4).
	aTerniLapilliGame putXAt: (aCollectionOfPositions at: 5).
	aTerniLapilliGame putOAt:(aCollectionOfPositions at: 6).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:10:11' prior: 50873419!
test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame aCollectionOfPositions|
	
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (1@1)with: (1@2) with: (0@2)with: (2@1) with: (2@2)with: (0@1).
	self fillBoardWith: aCollectionOfPositions in: newTerniLapilliGame .
	"newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@1).

"
	self   should: [newTerniLapilliGame putOAt: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantPutIfInMovingPhase .! !

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:10:14'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:26:26' prior: 50873645!
test19assertPlayerXWonHorizontally
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (0@0) with: (1@2) with: (0@1) with:(2@1) with:(0@2).
	self fillBoardWith: aCollectionOfPositions in: newTerniLapilliGame.
	"newTerniLapilliGame putXAt: (0@0).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (0@2).
"
	self assert: (newTerniLapilliGame hasPlayerXWon).
	self deny: newTerniLapilliGame hasPlayerOWon.
	! !

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'ad 11/2/2020 13:26:26'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:27:30'!
fillBoardWith6Positions: aCollectionOfPositions in: aTerniLapilliGame

	aTerniLapilliGame putXAt: (aCollectionOfPositions at: 1).
	aTerniLapilliGame putOAt:(aCollectionOfPositions at: 2).
	aTerniLapilliGame putXAt: (aCollectionOfPositions at: 3).
	aTerniLapilliGame putOAt:(aCollectionOfPositions at: 4).
	aTerniLapilliGame putXAt: (aCollectionOfPositions at: 5).
	aTerniLapilliGame putOAt:(aCollectionOfPositions at: 6).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:27:30' prior: 50874725!
test19assertPlayerXWonHorizontally
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (0@0) with: (1@2) with: (0@1) with:(2@1) with:(0@2).
	self fillBoardWith6Positions: aCollectionOfPositions in: newTerniLapilliGame.
	"newTerniLapilliGame putXAt: (0@0).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (0@2).
"
	self assert: (newTerniLapilliGame hasPlayerXWon).
	self deny: newTerniLapilliGame hasPlayerOWon.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:27:30' prior: 50874696!
test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame aCollectionOfPositions|
	
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (1@1)with: (1@2) with: (0@2)with: (2@1) with: (2@2)with: (0@1).
	self fillBoardWith6Positions: aCollectionOfPositions in: newTerniLapilliGame .
	"newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@1).

"
	self   should: [newTerniLapilliGame putOAt: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantPutIfInMovingPhase .! !

!methodRemoval: TerniLapilliTest #fillBoardWith:in: stamp: 'ad 11/2/2020 13:27:30'!
fillBoardWith: aCollectionOfPositions in: aTerniLapilliGame

	aTerniLapilliGame putXAt: (aCollectionOfPositions at: 1).
	aTerniLapilliGame putOAt:(aCollectionOfPositions at: 2).
	aTerniLapilliGame putXAt: (aCollectionOfPositions at: 3).
	aTerniLapilliGame putOAt:(aCollectionOfPositions at: 4).
	aTerniLapilliGame putXAt: (aCollectionOfPositions at: 5).
	aTerniLapilliGame putOAt:(aCollectionOfPositions at: 6).!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:27:44'!
fillBoardWith5Positions: aCollectionOfPositions in: aTerniLapilliGame

	aTerniLapilliGame putXAt: (aCollectionOfPositions at: 1).
	aTerniLapilliGame putOAt:(aCollectionOfPositions at: 2).
	aTerniLapilliGame putXAt: (aCollectionOfPositions at: 3).
	aTerniLapilliGame putOAt:(aCollectionOfPositions at: 4).
	aTerniLapilliGame putXAt: (aCollectionOfPositions at: 5).
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:27:59'!
fillBoardWith4Positions: aCollectionOfPositions in: aTerniLapilliGame

	aTerniLapilliGame putXAt: (aCollectionOfPositions at: 1).
	aTerniLapilliGame putOAt:(aCollectionOfPositions at: 2).
	aTerniLapilliGame putXAt: (aCollectionOfPositions at: 3).
	aTerniLapilliGame putOAt:(aCollectionOfPositions at: 4).
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:28:09'!
fillBoardWith3Positions: aCollectionOfPositions in: aTerniLapilliGame

	aTerniLapilliGame putXAt: (aCollectionOfPositions at: 1).
	aTerniLapilliGame putOAt:(aCollectionOfPositions at: 2).
	aTerniLapilliGame putXAt: (aCollectionOfPositions at: 3).
	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:28:22' prior: 50874767!
test19assertPlayerXWonHorizontally
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (0@0) with: (1@2) with: (0@1) with:(2@1) with:(0@2).
	self fillBoardWith5Positions: aCollectionOfPositions in: newTerniLapilliGame.
	"newTerniLapilliGame putXAt: (0@0).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (0@2).
"
	self assert: (newTerniLapilliGame hasPlayerXWon).
	self deny: newTerniLapilliGame hasPlayerOWon.
	! !

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'ad 11/2/2020 13:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 11/2/2020 13:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 11/2/2020 13:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'ad 11/2/2020 13:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'ad 11/2/2020 13:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'ad 11/2/2020 13:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'ad 11/2/2020 13:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'ad 11/2/2020 13:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'ad 11/2/2020 13:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'ad 11/2/2020 13:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'ad 11/2/2020 13:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'ad 11/2/2020 13:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'ad 11/2/2020 13:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'ad 11/2/2020 13:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'ad 11/2/2020 13:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'ad 11/2/2020 13:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'ad 11/2/2020 13:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'ad 11/2/2020 13:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'ad 11/2/2020 13:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'ad 11/2/2020 13:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'ad 11/2/2020 13:28:22'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'ad 11/2/2020 13:28:22'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:28:51' prior: 50874870!
test19assertPlayerXWonHorizontally
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (0@0) with: (1@2) with: (0@1) with:(2@1) with:(0@2).
	
	self fillBoardWith5Positions: aCollectionOfPositions in: newTerniLapilliGame.
	
	self assert: (newTerniLapilliGame hasPlayerXWon).
	self deny: newTerniLapilliGame hasPlayerOWon.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:29:01' prior: 50873660!
test20assertPlayerOWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@0).
	newTerniLapilliGame putOAt: (1@1).
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (1@0).
	newTerniLapilliGame putXAt: (2@0).
	newTerniLapilliGame putOAt: (1@2).	
	
	self assert: newTerniLapilliGame hasPlayerOWon.
	self deny: newTerniLapilliGame hasPlayerXWon.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:30:32' prior: 50875012!
test20assertPlayerOWonHorizontally
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (0@0) with: (1@1) with: (0@1) with:(1@0) with:(2@0) with:(1@2).
	self fillBoardWith6Positions: aCollectionOfPositions in: newTerniLapilliGame .
	"newTerniLapilliGame putXAt: (0@0).
	newTerniLapilliGame putOAt: (1@1).
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (1@0).
	newTerniLapilliGame putXAt: (2@0).
	newTerniLapilliGame putOAt: (1@2).	
	
"
	self assert: newTerniLapilliGame hasPlayerOWon.
	self deny: newTerniLapilliGame hasPlayerXWon.
	! !

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'ad 11/2/2020 13:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 11/2/2020 13:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 11/2/2020 13:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'ad 11/2/2020 13:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'ad 11/2/2020 13:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'ad 11/2/2020 13:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'ad 11/2/2020 13:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'ad 11/2/2020 13:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'ad 11/2/2020 13:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'ad 11/2/2020 13:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'ad 11/2/2020 13:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'ad 11/2/2020 13:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'ad 11/2/2020 13:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'ad 11/2/2020 13:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'ad 11/2/2020 13:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'ad 11/2/2020 13:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'ad 11/2/2020 13:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'ad 11/2/2020 13:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'ad 11/2/2020 13:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'ad 11/2/2020 13:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'ad 11/2/2020 13:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'ad 11/2/2020 13:30:32'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:30:45' prior: 50875029!
test20assertPlayerOWonHorizontally
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (0@0) with: (1@1) with: (0@1) with:(1@0) with:(2@0) with:(1@2).
	self fillBoardWith6Positions: aCollectionOfPositions in: newTerniLapilliGame .
	self assert: newTerniLapilliGame hasPlayerOWon.
	self deny: newTerniLapilliGame hasPlayerXWon.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:31:43'!
createEmptyAndCheckThatPlayerXStarts

	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	self assert: newTerniLapilliGame isEmpty.
	self assert: newTerniLapilliGame isPlayingX.
	self deny: newTerniLapilliGame isPlayingO! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:31:44' prior: 50873333!
test01assertOnStartItsPlayerXTurn
	self createEmptyAndCheckThatPlayerXStarts.! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 11/2/2020 13:31:47'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 11/2/2020 13:31:47'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 11/2/2020 13:31:47'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:31:47'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:31:47'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'ad 11/2/2020 13:31:47'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:31:47'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:31:47'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:31:47'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:31:47'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'ad 11/2/2020 13:31:47'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'ad 11/2/2020 13:31:47'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'ad 11/2/2020 13:31:47'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'ad 11/2/2020 13:31:47'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'ad 11/2/2020 13:31:47'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'ad 11/2/2020 13:31:47'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'ad 11/2/2020 13:31:47'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'ad 11/2/2020 13:31:47'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'ad 11/2/2020 13:31:47'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'ad 11/2/2020 13:31:47'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'ad 11/2/2020 13:31:47'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:31:47'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:31:47'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'ad 11/2/2020 13:31:48'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'ad 11/2/2020 13:31:48'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'ad 11/2/2020 13:31:48'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'ad 11/2/2020 13:31:48'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'ad 11/2/2020 13:31:48'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'ad 11/2/2020 13:31:48'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'ad 11/2/2020 13:31:48'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:32:55'!
createGameAndCheckThatAfterPlayerXGoesPlayerO

	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	self assert: newTerniLapilliGame isPlayingO.
	self deny: newTerniLapilliGame isPlayingX! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:32:55' prior: 50873344!
test02assertAfterXTurnGoesO
	self createGameAndCheckThatAfterPlayerXGoesPlayerO.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:34:13'!
checkThatEveryYouCantPutOutOfBounds

	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
	self should: [newTerniLapilliGame putXAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveOrPutChipOutOfBounds .
		
	self should: [newTerniLapilliGame putXAt: (-1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveOrPutChipOutOfBounds.
		
	self should: [newTerniLapilliGame putXAt: (0@3)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveOrPutChipOutOfBounds.
		
	self should: [newTerniLapilliGame putXAt: (1@-1)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveOrPutChipOutOfBounds! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:34:13' prior: 50873377!
test05CantPutChipOutOfBound
	self checkThatEveryYouCantPutOutOfBounds.
		! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:34:46'!
checkThatYouCantPutOutOfBounds

	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
	self should: [newTerniLapilliGame putXAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveOrPutChipOutOfBounds .
		
	self should: [newTerniLapilliGame putXAt: (-1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveOrPutChipOutOfBounds.
		
	self should: [newTerniLapilliGame putXAt: (0@3)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveOrPutChipOutOfBounds.
		
	self should: [newTerniLapilliGame putXAt: (1@-1)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveOrPutChipOutOfBounds! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:34:46' prior: 50875331!
test05CantPutChipOutOfBound
	self checkThatYouCantPutOutOfBounds.
		! !

!methodRemoval: TerniLapilliTest #checkThatEveryYouCantPutOutOfBounds stamp: 'ad 11/2/2020 13:34:46'!
checkThatEveryYouCantPutOutOfBounds

	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
	self should: [newTerniLapilliGame putXAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveOrPutChipOutOfBounds .
		
	self should: [newTerniLapilliGame putXAt: (-1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveOrPutChipOutOfBounds.
		
	self should: [newTerniLapilliGame putXAt: (0@3)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveOrPutChipOutOfBounds.
		
	self should: [newTerniLapilliGame putXAt: (1@-1)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveOrPutChipOutOfBounds!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:36:13' prior: 50873401!
test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (1@1) with: (1@2) with: (0@2) with:(2@1) with:(2@2) with:(0@1).
	self fillBoardWith6Positions: aCollectionOfPositions in: newTerniLapilliGame .
	"newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@1).
"
	self   should: [newTerniLapilliGame putXAt: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantPutIfInMovingPhase .! !

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'ad 11/2/2020 13:36:13'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:36:17'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 11/2/2020 13:36:17'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 11/2/2020 13:36:17'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:36:17'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:36:17'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'ad 11/2/2020 13:36:17'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:36:17'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:36:17'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:36:17'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:36:17'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'ad 11/2/2020 13:36:17'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'ad 11/2/2020 13:36:17'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'ad 11/2/2020 13:36:17'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'ad 11/2/2020 13:36:17'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'ad 11/2/2020 13:36:17'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'ad 11/2/2020 13:36:17'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'ad 11/2/2020 13:36:17'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'ad 11/2/2020 13:36:17'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'ad 11/2/2020 13:36:17'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'ad 11/2/2020 13:36:17'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'ad 11/2/2020 13:36:17'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:36:17'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:36:17'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'ad 11/2/2020 13:36:17'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'ad 11/2/2020 13:36:17'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'ad 11/2/2020 13:36:17'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'ad 11/2/2020 13:36:17'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'ad 11/2/2020 13:36:18'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'ad 11/2/2020 13:36:18'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'ad 11/2/2020 13:36:18'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:36:33'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:36:56' prior: 50875391!
test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (1@1) with: (1@2) with: (0@2) with:(2@1) with:(2@2) with:(0@1).
	self fillBoardWith6Positions: aCollectionOfPositions in: newTerniLapilliGame .

	self   should: [newTerniLapilliGame putXAt: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantPutIfInMovingPhase .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:37:11' prior: 50874789!
test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame aCollectionOfPositions|
	
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (1@1)with: (1@2) with: (0@2)with: (2@1) with: (2@2)with: (0@1).
	self fillBoardWith6Positions: aCollectionOfPositions in: newTerniLapilliGame .
	
	self   should: [newTerniLapilliGame putOAt: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantPutIfInMovingPhase .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:38:26' prior: 50873449!
test09assertPlayerXCantPutChipOnAnOccupiedSlot
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (1@0) with: (1@1).
	self fillBoardWith2Positions: aCollectionOfPositions in: newTerniLapilliGame .
	"newTerniLapilliGame putXAt: (1@0).
	newTerniLapilliGame putOAt: (1@1).
"
	self   should: [newTerniLapilliGame putXAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli invalidMoveCantPutChipOnOccupiedSlot .! !

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:38:27'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:38:35'!
fillBoardWith2Positions: anOrderedCollection in: aTerniLapilli 
	self shouldBeImplemented.! !

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:38:39'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:39:21' prior: 50875685!
fillBoardWith2Positions: aCollectionOfPositions in: aTerniLapilliGame 
	
	aTerniLapilliGame putXAt: (aCollectionOfPositions at: 1).
	aTerniLapilliGame putOAt:(aCollectionOfPositions at: 2).! !

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:39:29'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:39:35' prior: 50875662!
test09assertPlayerXCantPutChipOnAnOccupiedSlot
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (1@0) with: (1@1).
	self fillBoardWith2Positions: aCollectionOfPositions in: newTerniLapilliGame .
	self   should: [newTerniLapilliGame putXAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli invalidMoveCantPutChipOnOccupiedSlot .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:40:37' prior: 50873463!
test10assertCantMoveMoreThanOnePositionAtATime
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (1@1)with: (1@2) with: (0@2)with: (2@1) with: (2@2)with: (0@0).
	self fillBoardWith6Positions: aCollectionOfPositions in: newTerniLapilliGame .
	
	"newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@0).
"
	self   should: [newTerniLapilliGame move: (0@0) to: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveMoreThanOnePositionAtATime.! !

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'ad 11/2/2020 13:40:37'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 11/2/2020 13:40:37'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 11/2/2020 13:40:37'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:40:37'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:40:37'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'ad 11/2/2020 13:40:37'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:40:37'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:40:37'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:40:37'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:40:38'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'ad 11/2/2020 13:40:38'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'ad 11/2/2020 13:40:38'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'ad 11/2/2020 13:40:38'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'ad 11/2/2020 13:40:38'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'ad 11/2/2020 13:40:38'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'ad 11/2/2020 13:40:38'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'ad 11/2/2020 13:40:38'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'ad 11/2/2020 13:40:38'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'ad 11/2/2020 13:40:38'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'ad 11/2/2020 13:40:38'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'ad 11/2/2020 13:40:38'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:40:38'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:40:38'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'ad 11/2/2020 13:40:38'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'ad 11/2/2020 13:40:38'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'ad 11/2/2020 13:40:38'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'ad 11/2/2020 13:40:38'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'ad 11/2/2020 13:40:38'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'ad 11/2/2020 13:40:38'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'ad 11/2/2020 13:40:38'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:40:48' prior: 50875725!
test10assertCantMoveMoreThanOnePositionAtATime
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (1@1)with: (1@2) with: (0@2)with: (2@1) with: (2@2)with: (0@0).
	self fillBoardWith6Positions: aCollectionOfPositions in: newTerniLapilliGame .
	
	self   should: [newTerniLapilliGame move: (0@0) to: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveMoreThanOnePositionAtATime.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:41:29' prior: 50873481!
test11assertCantDoInvalidDiagonalMovement
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (0@1)with: (0@0) with: (1@1)with: (2@1) with: (2@2)with: (0@2).
	self fillBoardWith6Positions: aCollectionOfPositions in: newTerniLapilliGame .
"
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
"
	
	self   should: [newTerniLapilliGame move: (0@1) to: (1@2)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantDoInvalidDiagonalMovement.! !

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'ad 11/2/2020 13:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 11/2/2020 13:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 11/2/2020 13:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'ad 11/2/2020 13:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'ad 11/2/2020 13:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'ad 11/2/2020 13:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'ad 11/2/2020 13:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'ad 11/2/2020 13:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'ad 11/2/2020 13:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'ad 11/2/2020 13:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'ad 11/2/2020 13:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'ad 11/2/2020 13:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'ad 11/2/2020 13:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'ad 11/2/2020 13:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'ad 11/2/2020 13:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'ad 11/2/2020 13:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'ad 11/2/2020 13:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'ad 11/2/2020 13:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'ad 11/2/2020 13:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'ad 11/2/2020 13:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'ad 11/2/2020 13:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'ad 11/2/2020 13:41:30'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:41:37' prior: 50875873!
test11assertCantDoInvalidDiagonalMovement
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (0@1)with: (0@0) with: (1@1)with: (2@1) with: (2@2)with: (0@2).
	self fillBoardWith6Positions: aCollectionOfPositions in: newTerniLapilliGame .
	self   should: [newTerniLapilliGame move: (0@1) to: (1@2)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantDoInvalidDiagonalMovement.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:42:09' prior: 50873501!
test12assertCantMoveAnEmptyPosition
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (0@1)with: (0@0) with: (1@1)with: (2@1) with: (2@2)with: (0@2).
	self fillBoardWith6Positions: aCollectionOfPositions in: newTerniLapilliGame .
	"newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
"
	self   should: [newTerniLapilliGame move: (1@0) to: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveAnEmptyPosition.! !

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'ad 11/2/2020 13:42:09'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 11/2/2020 13:42:09'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 11/2/2020 13:42:09'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:42:09'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:42:09'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'ad 11/2/2020 13:42:09'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:42:09'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:42:09'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:42:09'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:42:09'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'ad 11/2/2020 13:42:09'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'ad 11/2/2020 13:42:09'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'ad 11/2/2020 13:42:09'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'ad 11/2/2020 13:42:09'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'ad 11/2/2020 13:42:09'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'ad 11/2/2020 13:42:09'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'ad 11/2/2020 13:42:09'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'ad 11/2/2020 13:42:09'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'ad 11/2/2020 13:42:09'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'ad 11/2/2020 13:42:09'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'ad 11/2/2020 13:42:09'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:42:09'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:42:09'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'ad 11/2/2020 13:42:09'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'ad 11/2/2020 13:42:09'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'ad 11/2/2020 13:42:09'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'ad 11/2/2020 13:42:09'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'ad 11/2/2020 13:42:09'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'ad 11/2/2020 13:42:09'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'ad 11/2/2020 13:42:09'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:42:15' prior: 50876019!
test12assertCantMoveAnEmptyPosition
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (0@1)with: (0@0) with: (1@1)with: (2@1) with: (2@2)with: (0@2).
	self fillBoardWith6Positions: aCollectionOfPositions in: newTerniLapilliGame .

	self   should: [newTerniLapilliGame move: (1@0) to: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveAnEmptyPosition.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:42:34' prior: 50873519!
test13assertCantMoveOutOfBounds
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (0@1)with: (0@0) with: (1@1)with: (2@1) with: (2@2)with: (0@2).
	self fillBoardWith6Positions: aCollectionOfPositions in: newTerniLapilliGame .

	self   should: [newTerniLapilliGame move: (0@2) to: (-1@2)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveOrPutChipOutOfBounds.! !

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'ad 11/2/2020 13:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 11/2/2020 13:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 11/2/2020 13:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'ad 11/2/2020 13:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'ad 11/2/2020 13:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'ad 11/2/2020 13:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'ad 11/2/2020 13:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'ad 11/2/2020 13:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'ad 11/2/2020 13:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'ad 11/2/2020 13:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'ad 11/2/2020 13:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'ad 11/2/2020 13:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'ad 11/2/2020 13:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'ad 11/2/2020 13:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'ad 11/2/2020 13:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'ad 11/2/2020 13:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'ad 11/2/2020 13:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'ad 11/2/2020 13:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'ad 11/2/2020 13:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'ad 11/2/2020 13:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'ad 11/2/2020 13:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'ad 11/2/2020 13:42:34'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:43:27' prior: 50873537!
test14OCantPutChipOutOfBound
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
self checkThatYouCantPutOutOfBounds 
		! !

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'ad 11/2/2020 13:43:30'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 11/2/2020 13:43:30'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 11/2/2020 13:43:30'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:43:30'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:43:30'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'ad 11/2/2020 13:43:30'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:43:30'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:43:30'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:43:30'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:43:30'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'ad 11/2/2020 13:43:30'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'ad 11/2/2020 13:43:30'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'ad 11/2/2020 13:43:30'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'ad 11/2/2020 13:43:30'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'ad 11/2/2020 13:43:30'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'ad 11/2/2020 13:43:30'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'ad 11/2/2020 13:43:30'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'ad 11/2/2020 13:43:30'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'ad 11/2/2020 13:43:30'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'ad 11/2/2020 13:43:30'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'ad 11/2/2020 13:43:30'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:43:30'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:43:30'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'ad 11/2/2020 13:43:31'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'ad 11/2/2020 13:43:31'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'ad 11/2/2020 13:43:31'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'ad 11/2/2020 13:43:31'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'ad 11/2/2020 13:43:31'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'ad 11/2/2020 13:43:31'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'ad 11/2/2020 13:43:31'!
PASSED!

!methodRemoval: TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'ad 11/2/2020 13:43:46'!
test14OCantPutChipOutOfBound
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
self checkThatYouCantPutOutOfBounds 
		!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 11/2/2020 13:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 11/2/2020 13:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'ad 11/2/2020 13:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'ad 11/2/2020 13:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'ad 11/2/2020 13:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'ad 11/2/2020 13:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'ad 11/2/2020 13:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'ad 11/2/2020 13:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'ad 11/2/2020 13:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'ad 11/2/2020 13:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'ad 11/2/2020 13:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'ad 11/2/2020 13:43:56'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'ad 11/2/2020 13:43:56'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:43:56'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:43:56'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'ad 11/2/2020 13:43:56'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'ad 11/2/2020 13:43:56'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'ad 11/2/2020 13:43:56'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'ad 11/2/2020 13:43:56'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'ad 11/2/2020 13:43:56'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'ad 11/2/2020 13:43:56'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'ad 11/2/2020 13:43:56'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:44:34' prior: 50873579!
test16CantMoveIfNotAllChipHaveBeenPutDown
	
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (0@1)with: (0@0) with: (1@1).
	self fillBoardWith3Positions: aCollectionOfPositions in: newTerniLapilliGame .
	"newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
"
	
	self assert: newTerniLapilliGame isPuttingPhase.
	
	self   should: [newTerniLapilliGame move: (1@1) to: (2@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveIfInPuttingPhase .! !

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'ad 11/2/2020 13:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 11/2/2020 13:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 11/2/2020 13:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'ad 11/2/2020 13:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'ad 11/2/2020 13:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'ad 11/2/2020 13:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'ad 11/2/2020 13:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'ad 11/2/2020 13:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'ad 11/2/2020 13:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'ad 11/2/2020 13:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'ad 11/2/2020 13:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'ad 11/2/2020 13:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'ad 11/2/2020 13:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'ad 11/2/2020 13:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'ad 11/2/2020 13:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'ad 11/2/2020 13:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'ad 11/2/2020 13:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'ad 11/2/2020 13:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'ad 11/2/2020 13:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'ad 11/2/2020 13:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'ad 11/2/2020 13:44:34'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:44:44' prior: 50876500!
test16CantMoveIfNotAllChipHaveBeenPutDown
	
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (0@1)with: (0@0) with: (1@1).
	self fillBoardWith3Positions: aCollectionOfPositions in: newTerniLapilliGame .
	
	self assert: newTerniLapilliGame isPuttingPhase.
	
	self   should: [newTerniLapilliGame move: (1@1) to: (2@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveIfInPuttingPhase .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:45:28' prior: 50873595!
test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn
	
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (0@1)with: (0@0) with: (1@1)with: (2@1) with: (2@2)with: (0@2).
	self fillBoardWith6Positions: aCollectionOfPositions in: newTerniLapilliGame.
	
	newTerniLapilliGame move: (1@1) to: (1@2).
	
	self assert: newTerniLapilliGame isPlayingO.
	
	newTerniLapilliGame move: (0@0) to: (1@0).
	self assert: newTerniLapilliGame isPlayingX.
	
	 ! !

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'ad 11/2/2020 13:45:28'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 11/2/2020 13:45:28'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 11/2/2020 13:45:28'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:45:28'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:45:28'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'ad 11/2/2020 13:45:28'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:45:28'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:45:28'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:45:28'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:45:28'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'ad 11/2/2020 13:45:28'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'ad 11/2/2020 13:45:28'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'ad 11/2/2020 13:45:28'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'ad 11/2/2020 13:45:28'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'ad 11/2/2020 13:45:28'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'ad 11/2/2020 13:45:28'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'ad 11/2/2020 13:45:28'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'ad 11/2/2020 13:45:28'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'ad 11/2/2020 13:45:28'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'ad 11/2/2020 13:45:29'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:45:29'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:45:29'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'ad 11/2/2020 13:45:29'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'ad 11/2/2020 13:45:29'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'ad 11/2/2020 13:45:29'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'ad 11/2/2020 13:45:29'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'ad 11/2/2020 13:45:29'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'ad 11/2/2020 13:45:29'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'ad 11/2/2020 13:45:29'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:46:00' prior: 50873616!
test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn

	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (0@1)with: (0@0) with: (1@1)with: (2@1) with: (2@2)with: (0@2).
	self fillBoardWith6Positions: aCollectionOfPositions in: newTerniLapilliGame .
	
	newTerniLapilliGame move: (1@1) to: (1@2).
	
	self assert: (newTerniLapilliGame chipXIsInPosition: (1@2)).
	self assert: (newTerniLapilliGame isAnEmptyPosition: (1@1)).
	self assert: newTerniLapilliGame isPlayingO.
	
	newTerniLapilliGame move: (0@0) to: (1@0).
	
	self assert: (newTerniLapilliGame chipOIsInPosition: (1@0)).
	self assert: (newTerniLapilliGame isAnEmptyPosition: (0@0)).
	self assert: newTerniLapilliGame isPlayingX.
	
	
	
	
	 ! !

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'ad 11/2/2020 13:46:00'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 11/2/2020 13:46:00'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 11/2/2020 13:46:00'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:46:00'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:46:00'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'ad 11/2/2020 13:46:00'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:46:00'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:46:00'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:46:00'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:46:00'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'ad 11/2/2020 13:46:00'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'ad 11/2/2020 13:46:01'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'ad 11/2/2020 13:46:01'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'ad 11/2/2020 13:46:01'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'ad 11/2/2020 13:46:01'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'ad 11/2/2020 13:46:01'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'ad 11/2/2020 13:46:01'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'ad 11/2/2020 13:46:01'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'ad 11/2/2020 13:46:01'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'ad 11/2/2020 13:46:01'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:46:01'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:46:01'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'ad 11/2/2020 13:46:01'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'ad 11/2/2020 13:46:01'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'ad 11/2/2020 13:46:01'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'ad 11/2/2020 13:46:01'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'ad 11/2/2020 13:46:01'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'ad 11/2/2020 13:46:01'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'ad 11/2/2020 13:46:01'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:46:19' prior: 50876761!
test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn

	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (0@1)with: (0@0) with: (1@1)with: (2@1) with: (2@2)with: (0@2).
	self fillBoardWith6Positions: aCollectionOfPositions in: newTerniLapilliGame .
	
	newTerniLapilliGame move: (1@1) to: (1@2).
	
	self assert: (newTerniLapilliGame chipXIsInPosition: (1@2)).
	self assert: (newTerniLapilliGame isAnEmptyPosition: (1@1)).
	self assert: newTerniLapilliGame isPlayingO.
	
	newTerniLapilliGame move: (0@0) to: (1@0).
	
	self assert: (newTerniLapilliGame chipOIsInPosition: (1@0)).
	self assert: (newTerniLapilliGame isAnEmptyPosition: (0@0)).
	self assert: newTerniLapilliGame isPlayingX.
	 ! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:47:20' prior: 50873677!
test21CantWinHorizontalWithLessThanThreeChips
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (0@0)with: (1@1) with: (0@1)with: (1@0).
	self fillBoardWith4Positions: aCollectionOfPositions in: newTerniLapilliGame .
	"newTerniLapilliGame putXAt: (0@0).
	newTerniLapilliGame putOAt: (1@1).
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (1@0).
	"
	self deny: newTerniLapilliGame hasPlayerOWon.
	self deny: newTerniLapilliGame hasPlayerXWon.
	! !

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:47:20'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 11/2/2020 13:47:20'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 11/2/2020 13:47:20'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:47:20'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:47:20'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'ad 11/2/2020 13:47:20'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:47:20'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:47:20'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:47:20'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:47:20'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'ad 11/2/2020 13:47:20'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'ad 11/2/2020 13:47:20'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'ad 11/2/2020 13:47:20'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'ad 11/2/2020 13:47:20'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'ad 11/2/2020 13:47:20'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'ad 11/2/2020 13:47:20'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'ad 11/2/2020 13:47:20'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'ad 11/2/2020 13:47:20'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'ad 11/2/2020 13:47:20'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'ad 11/2/2020 13:47:20'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:47:20'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:47:20'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'ad 11/2/2020 13:47:20'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'ad 11/2/2020 13:47:20'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'ad 11/2/2020 13:47:20'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'ad 11/2/2020 13:47:20'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'ad 11/2/2020 13:47:20'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'ad 11/2/2020 13:47:20'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'ad 11/2/2020 13:47:20'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:47:29' prior: 50876920!
test21CantWinHorizontalWithLessThanThreeChips
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (0@0)with: (1@1) with: (0@1)with: (1@0).
	self fillBoardWith4Positions: aCollectionOfPositions in: newTerniLapilliGame .
	self deny: newTerniLapilliGame hasPlayerOWon.
	self deny: newTerniLapilliGame hasPlayerXWon.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:48:04' prior: 50873692!
test22CantWinVerticalWithLessThanThreeChips
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (0@0)with: (1@1) with: (1@0)with: (2@0).
	self fillBoardWith4Positions: aCollectionOfPositions in: newTerniLapilliGame .
	self deny: newTerniLapilliGame hasPlayerOWon.
	self deny: newTerniLapilliGame hasPlayerXWon.
	! !

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:48:04'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 11/2/2020 13:48:04'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 11/2/2020 13:48:04'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:48:04'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:48:04'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'ad 11/2/2020 13:48:04'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:48:04'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:48:04'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:48:04'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:48:04'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'ad 11/2/2020 13:48:04'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'ad 11/2/2020 13:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'ad 11/2/2020 13:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'ad 11/2/2020 13:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'ad 11/2/2020 13:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'ad 11/2/2020 13:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'ad 11/2/2020 13:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'ad 11/2/2020 13:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'ad 11/2/2020 13:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'ad 11/2/2020 13:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'ad 11/2/2020 13:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'ad 11/2/2020 13:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'ad 11/2/2020 13:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'ad 11/2/2020 13:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'ad 11/2/2020 13:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'ad 11/2/2020 13:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'ad 11/2/2020 13:48:05'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:48:46' prior: 50873706!
test23assertPlayerXWonVertically
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (0@0)with: (1@2) with: (1@0)with: (2@1) with: (2@0).
	self fillBoardWith5Positions: aCollectionOfPositions in: newTerniLapilliGame .
	self assert: (newTerniLapilliGame hasPlayerXWon).
	self deny: newTerniLapilliGame hasPlayerOWon.
	! !

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'ad 11/2/2020 13:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 11/2/2020 13:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 11/2/2020 13:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'ad 11/2/2020 13:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'ad 11/2/2020 13:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'ad 11/2/2020 13:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'ad 11/2/2020 13:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'ad 11/2/2020 13:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'ad 11/2/2020 13:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'ad 11/2/2020 13:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'ad 11/2/2020 13:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'ad 11/2/2020 13:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'ad 11/2/2020 13:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'ad 11/2/2020 13:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'ad 11/2/2020 13:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'ad 11/2/2020 13:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'ad 11/2/2020 13:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'ad 11/2/2020 13:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'ad 11/2/2020 13:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'ad 11/2/2020 13:48:46'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'ad 11/2/2020 13:48:46'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:49:21' prior: 50873721!
test24assertPlayerOWonVertically
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (0@1)with: (0@0) with: (1@2)with: (1@0) with: (2@1)with: (2@0).
	self fillBoardWith6Positions: aCollectionOfPositions in: newTerniLapilliGame .
	self assert: (newTerniLapilliGame hasPlayerOWon).
	self deny: newTerniLapilliGame hasPlayerXWon.
	! !

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'ad 11/2/2020 13:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 11/2/2020 13:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 11/2/2020 13:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'ad 11/2/2020 13:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'ad 11/2/2020 13:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'ad 11/2/2020 13:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'ad 11/2/2020 13:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'ad 11/2/2020 13:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'ad 11/2/2020 13:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'ad 11/2/2020 13:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'ad 11/2/2020 13:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'ad 11/2/2020 13:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'ad 11/2/2020 13:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'ad 11/2/2020 13:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'ad 11/2/2020 13:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'ad 11/2/2020 13:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'ad 11/2/2020 13:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'ad 11/2/2020 13:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'ad 11/2/2020 13:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'ad 11/2/2020 13:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'ad 11/2/2020 13:49:21'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:49:48' prior: 50873737!
test25XWinsDiagonally
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (2@0)with: (0@0) with: (1@1)with: (1@0) with: (0@2).
	self fillBoardWith5Positions: aCollectionOfPositions in: newTerniLapilliGame .
	
	self assert: (newTerniLapilliGame hasPlayerXWon).
	self deny: newTerniLapilliGame hasPlayerOWon.
	! !

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'ad 11/2/2020 13:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 11/2/2020 13:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 11/2/2020 13:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'ad 11/2/2020 13:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'ad 11/2/2020 13:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'ad 11/2/2020 13:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'ad 11/2/2020 13:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'ad 11/2/2020 13:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'ad 11/2/2020 13:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'ad 11/2/2020 13:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'ad 11/2/2020 13:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'ad 11/2/2020 13:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'ad 11/2/2020 13:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'ad 11/2/2020 13:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'ad 11/2/2020 13:49:48'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'ad 11/2/2020 13:49:49'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'ad 11/2/2020 13:49:49'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'ad 11/2/2020 13:49:49'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'ad 11/2/2020 13:49:49'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'ad 11/2/2020 13:49:49'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'ad 11/2/2020 13:49:49'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:50:34' prior: 50873752!
test26OWinsDiagonally
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (2@0)with: (0@0) with: (2@1)with: (1@1) with: (0@2)with: (2@2).
	self fillBoardWith6Positions: aCollectionOfPositions in: newTerniLapilliGame .
	self assert: (newTerniLapilliGame hasPlayerOWon).
	self deny: newTerniLapilliGame hasPlayerXWon.
	! !

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'ad 11/2/2020 13:50:34'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 11/2/2020 13:50:34'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 11/2/2020 13:50:34'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:50:34'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:50:34'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'ad 11/2/2020 13:50:34'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:50:34'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:50:34'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:50:34'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:50:34'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'ad 11/2/2020 13:50:34'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'ad 11/2/2020 13:50:34'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'ad 11/2/2020 13:50:34'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'ad 11/2/2020 13:50:34'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'ad 11/2/2020 13:50:34'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'ad 11/2/2020 13:50:34'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'ad 11/2/2020 13:50:34'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'ad 11/2/2020 13:50:34'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'ad 11/2/2020 13:50:34'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'ad 11/2/2020 13:50:34'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:50:34'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:50:34'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'ad 11/2/2020 13:50:34'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'ad 11/2/2020 13:50:34'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'ad 11/2/2020 13:50:34'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'ad 11/2/2020 13:50:34'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'ad 11/2/2020 13:50:34'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'ad 11/2/2020 13:50:34'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'ad 11/2/2020 13:50:34'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:51:18' prior: 50873768!
test27GameDoesNotContinueAfterWinningInPutingPhase
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (2@0)with: (0@0) with: (2@1)with: (1@1) with: (2@2).
	self fillBoardWith5Positions: aCollectionOfPositions in: newTerniLapilliGame.
	self   should: [newTerniLapilliGame putOAt: (1@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli gameIsOver.
	
	self assert: (newTerniLapilliGame hasPlayerXWon).
	self deny: newTerniLapilliGame hasPlayerOWon.
	! !

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'ad 11/2/2020 13:51:18'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 11/2/2020 13:51:18'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 11/2/2020 13:51:18'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:51:18'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:51:18'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'ad 11/2/2020 13:51:18'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:51:18'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:51:18'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:51:18'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:51:18'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'ad 11/2/2020 13:51:18'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'ad 11/2/2020 13:51:18'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'ad 11/2/2020 13:51:18'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'ad 11/2/2020 13:51:18'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'ad 11/2/2020 13:51:18'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'ad 11/2/2020 13:51:18'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'ad 11/2/2020 13:51:18'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'ad 11/2/2020 13:51:18'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'ad 11/2/2020 13:51:18'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'ad 11/2/2020 13:51:18'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:51:18'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:51:18'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'ad 11/2/2020 13:51:18'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'ad 11/2/2020 13:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'ad 11/2/2020 13:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'ad 11/2/2020 13:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'ad 11/2/2020 13:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'ad 11/2/2020 13:51:19'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'ad 11/2/2020 13:51:19'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:51:56' prior: 50873788!
test28CantPutWhileMovingPhase
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (0@1)with: (0@0) with: (1@2)with: (2@1) with: (1@1)with: (2@2).
	self fillBoardWith6Positions: aCollectionOfPositions in: newTerniLapilliGame .
	
	newTerniLapilliGame move: (1@1) to: (1@0).
	
	self assert: newTerniLapilliGame isMovingPhase.
			
	self   should: [newTerniLapilliGame putOAt: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantPutIfInMovingPhase.
		
! !

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'ad 11/2/2020 13:51:56'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 11/2/2020 13:51:56'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 11/2/2020 13:51:56'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:51:56'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:51:56'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'ad 11/2/2020 13:51:56'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:51:56'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:51:56'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:51:56'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:51:56'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'ad 11/2/2020 13:51:56'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'ad 11/2/2020 13:51:56'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'ad 11/2/2020 13:51:56'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'ad 11/2/2020 13:51:56'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'ad 11/2/2020 13:51:56'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'ad 11/2/2020 13:51:56'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'ad 11/2/2020 13:51:56'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'ad 11/2/2020 13:51:56'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'ad 11/2/2020 13:51:56'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'ad 11/2/2020 13:51:56'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:51:56'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:51:56'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'ad 11/2/2020 13:51:56'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'ad 11/2/2020 13:51:56'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'ad 11/2/2020 13:51:56'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'ad 11/2/2020 13:51:56'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'ad 11/2/2020 13:51:56'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'ad 11/2/2020 13:51:56'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'ad 11/2/2020 13:51:56'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:52:30' prior: 50873809!
test29AfterMovingWin
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (2@0)with: (0@0) with: (1@2)with: (2@1) with: (1@1)with: (2@2).
	self fillBoardWith6Positions: aCollectionOfPositions in: newTerniLapilliGame .
	self assert: newTerniLapilliGame isMovingPhase.
	newTerniLapilliGame move: (2@0) to: (1@0).
	self assert: newTerniLapilliGame isGameOver.
! !

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'ad 11/2/2020 13:52:30'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 11/2/2020 13:52:30'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 11/2/2020 13:52:30'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:52:30'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:52:30'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'ad 11/2/2020 13:52:30'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:52:30'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:52:30'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:52:30'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:52:30'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'ad 11/2/2020 13:52:30'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'ad 11/2/2020 13:52:30'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'ad 11/2/2020 13:52:30'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'ad 11/2/2020 13:52:30'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'ad 11/2/2020 13:52:30'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'ad 11/2/2020 13:52:30'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'ad 11/2/2020 13:52:31'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'ad 11/2/2020 13:52:31'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'ad 11/2/2020 13:52:31'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'ad 11/2/2020 13:52:31'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:52:31'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:52:31'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'ad 11/2/2020 13:52:31'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'ad 11/2/2020 13:52:31'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'ad 11/2/2020 13:52:31'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'ad 11/2/2020 13:52:31'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'ad 11/2/2020 13:52:31'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'ad 11/2/2020 13:52:31'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'ad 11/2/2020 13:52:31'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:52:47'!
test14CantPutWhileMovingPhase
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (0@1)with: (0@0) with: (1@2)with: (2@1) with: (1@1)with: (2@2).
	self fillBoardWith6Positions: aCollectionOfPositions in: newTerniLapilliGame .
	
	newTerniLapilliGame move: (1@1) to: (1@0).
	
	self assert: newTerniLapilliGame isMovingPhase.
			
	self   should: [newTerniLapilliGame putOAt: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantPutIfInMovingPhase.
		
! !

!methodRemoval: TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'ad 11/2/2020 13:52:47'!
test28CantPutWhileMovingPhase
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (0@1)with: (0@0) with: (1@2)with: (2@1) with: (1@1)with: (2@2).
	self fillBoardWith6Positions: aCollectionOfPositions in: newTerniLapilliGame .
	
	newTerniLapilliGame move: (1@1) to: (1@0).
	
	self assert: newTerniLapilliGame isMovingPhase.
			
	self   should: [newTerniLapilliGame putOAt: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantPutIfInMovingPhase.
		
!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 11/2/2020 13:52:55'!
test28AfterMovingWin
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (2@0)with: (0@0) with: (1@2)with: (2@1) with: (1@1)with: (2@2).
	self fillBoardWith6Positions: aCollectionOfPositions in: newTerniLapilliGame .
	self assert: newTerniLapilliGame isMovingPhase.
	newTerniLapilliGame move: (2@0) to: (1@0).
	self assert: newTerniLapilliGame isGameOver.
! !

!methodRemoval: TerniLapilliTest #test29AfterMovingWin stamp: 'ad 11/2/2020 13:52:55'!
test29AfterMovingWin
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (2@0)with: (0@0) with: (1@2)with: (2@1) with: (1@1)with: (2@2).
	self fillBoardWith6Positions: aCollectionOfPositions in: newTerniLapilliGame .
	self assert: newTerniLapilliGame isMovingPhase.
	newTerniLapilliGame move: (2@0) to: (1@0).
	self assert: newTerniLapilliGame isGameOver.
!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'ad 11/2/2020 13:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'ad 11/2/2020 13:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'ad 11/2/2020 13:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'ad 11/2/2020 13:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'ad 11/2/2020 13:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'ad 11/2/2020 13:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'ad 11/2/2020 13:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'ad 11/2/2020 13:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'ad 11/2/2020 13:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'ad 11/2/2020 13:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test14CantPutWhileMovingPhase stamp: 'ad 11/2/2020 13:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'ad 11/2/2020 13:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'ad 11/2/2020 13:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'ad 11/2/2020 13:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'ad 11/2/2020 13:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'ad 11/2/2020 13:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'ad 11/2/2020 13:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'ad 11/2/2020 13:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'ad 11/2/2020 13:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'ad 11/2/2020 13:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'ad 11/2/2020 13:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'ad 11/2/2020 13:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'ad 11/2/2020 13:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test28AfterMovingWin stamp: 'ad 11/2/2020 13:53:42'!
PASSED!

----SNAPSHOT----(2 November 2020 13:53:58) CuisUniversity-4383.image priorSource: 17332357!