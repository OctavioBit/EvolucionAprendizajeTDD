

TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!

!classDefinition: #TerniLapilliTest category: #TerniLapilliGame stamp: 'HG 10/29/2020 17:34:18'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!

!classDefinition: #TerniLapilli category: #TerniLapilliGame stamp: 'HG 10/29/2020 17:36:45'!
Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!
!TerniLapilliTest methodsFor: 'nil' stamp: 'HG 10/29/2020 17:36:12'!
test01
	
	| aTerniLapilliGame |
	aTerniLapilliGame _ TerniLapilli new.
	
	self assert: aTerniLapilliGame isPlayingX. ! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 17:36:53' prior: 50862816!
test01
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	self assert: aTerniLapilliGame isPlayingX. ! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 17:38:27'!
test01AssertPlayerXStartsPlayingInNewGame
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	self assert: aTerniLapilliGame isPlayingX. ! !

!methodRemoval: TerniLapilliTest #test01 stamp: 'HG 10/29/2020 17:38:30'!
test01
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	self assert: aTerniLapilliGame isPlayingX. !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 17:41:29'!
test02AssertPlayerOTurnIsAfterPlayerX
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	self assert: aTerniLapilliGame isPlayingO. ! !

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 17:41:54'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 17:42:20'!
isPlayingX
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 17:42:26' prior: 50862856!
isPlayingX
	^true.! !

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 17:42:36'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 17:42:36'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 17:42:36'!
ERROR!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 17:42:36'!
ERROR!
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 10/29/2020 17:42:56'!
putXAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 10/29/2020 17:43:02' prior: 50862877!
putXAt: aPoint 
	^nil.! !

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 17:43:04'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 17:43:12'!
isPlayingO
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 17:43:18' prior: 50862889!
isPlayingO
	^true.! !

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 17:43:20'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 17:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 17:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 17:43:22'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 17:45:39' prior: 50862844!
test02AssertPlayerOTurnIsAfterPlayerX
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	self assert: aTerniLapilliGame isPlayingO. 
	self deny: aTerniLapilliGame isPlayingX.! !

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 17:45:40'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 17:46:04' prior: 50862911!
test02AssertPlayerOTurnIsAfterPlayerX
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	self assert: aTerniLapilliGame isPlayingO. ! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 17:48:52'!
test03AssertPlayerXTurnIsAfterPlayerO
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	self assert: aTerniLapilliGame isPlayingO. 
	
	aTerniLapilliGame putOAt: 2@2.
	self assert: aTerniLapilliGame isPlayingX ! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 17:49:09' prior: 50862925!
test02AssertPlayerOTurnIsAfterPlayerX
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	self assert: aTerniLapilliGame isPlayingO. 
	self deny: aTerniLapilliGame isPlayingX.! !

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 17:49:10'!
FAILURE!

!classDefinition: #TerniLapilli category: #TerniLapilliGame stamp: 'HG 10/29/2020 17:49:53'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'turn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 10/29/2020 17:49:50' prior: 50862882!
putXAt: aPoint 
	turn = #O.! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 17:50:11' prior: 50862893!
isPlayingO
	^turn = #O.! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 17:50:24' prior: 50862860!
isPlayingX
	^turn = #X.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 17:51:13' prior: 50862830!
test01AssertPlayerXStartsPlayingInNewGame
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	self assert: aTerniLapilliGame isPlayingX. ! !
!TerniLapilli methodsFor: 'nil' stamp: 'HG 10/29/2020 17:51:37' overrides: 16896425!
initialize
	turn _ #X.! !

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 17:51:49'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 17:51:49'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 17:51:49'!
FAILURE!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 17:51:49'!
FAILURE!
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 10/29/2020 17:52:27' prior: 50862967!
putXAt: aPoint 
	turn _ #O.! !

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 17:52:30'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 17:52:30'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 17:52:30'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 17:52:30'!
ERROR!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 17:52:30'!
ERROR!
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 10/29/2020 17:52:42'!
putOAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 10/29/2020 17:52:48' prior: 50863026!
putOAt: aPoint 
	^nil.! !

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 17:52:51'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 17:52:51'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 17:52:51'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 17:52:51'!
FAILURE!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 17:52:51'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 18:13:29' prior: 50862934!
test03AssertPlayerXTurnIsAfterPlayerO
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 2@2.
	self assert: aTerniLapilliGame isPlayingX ! !

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 18:13:30'!
FAILURE!
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 10/29/2020 18:13:43' prior: 50863031!
putOAt: aPoint 
	turn _ #X.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 18:14:05' prior: 50863053!
test03AssertPlayerXTurnIsAfterPlayerO
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 2@2.
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame isPlayingO. 
! !

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 18:14:07'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 18:14:07'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 18:14:07'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 18:14:07'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 18:20:15'!
test04
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self deny: (aTerniLapilliGame isAnYPlayerPosition: 1@1).! !

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 18:20:21'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 18:20:41'!
isAnXPlayerPosition: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 18:20:45' prior: 50863108!
isAnXPlayerPosition: aPoint 
	^true.! !

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 18:20:48'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 18:20:53'!
isAnYPlayerPosition: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 18:20:59' prior: 50863119!
isAnYPlayerPosition: aPoint 
	^false.! !

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 18:21:00'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 18:21:00'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 18:21:00'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 18:21:00'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 18:21:00'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 18:24:33'!
isAnOPlayerPosition: aPoint 
	^false.! !

!methodRemoval: TerniLapilli #isAnYPlayerPosition: stamp: 'HG 10/29/2020 18:24:37'!
isAnYPlayerPosition: aPoint 
	^false.!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 18:24:44'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 18:24:57' prior: 50863096!
test04
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self deny: (aTerniLapilliGame isAnOPlayerPosition: 1@1).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 18:24:57' prior: 50863154!
test04
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self deny: (aTerniLapilliGame isAnOPlayerPosition: 1@1).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 18:24:57' prior: 50863165!
test04
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self deny: (aTerniLapilliGame isAnOPlayerPosition: 1@1).! !

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 18:27:24'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 18:27:42' prior: 50863176!
test04
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self deny: (aTerniLapilliGame isAnOPlayerPosition: 1@1).! !

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 18:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 18:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 18:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 18:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 18:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 18:27:58'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 18:27:58'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 18:27:58'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 18:27:58'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 18:27:58'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 18:30:00'!
test05
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	self assert: (aTerniLapilliGame isAnOPlayerPosition: 1@2).
	self deny: (aTerniLapilliGame isAnXPlayerPosition: 1@2).! !

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/29/2020 18:30:02'!
FAILURE!

!classDefinition: #TerniLapilli category: #TerniLapilliGame stamp: 'HG 10/29/2020 18:31:34'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'turn xPlayerPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 10/29/2020 18:31:28' prior: 50863005!
putXAt: aBoardPosition 
	turn _ #O.
	xPlayerPositions add: aBoardPosition.! !

!classDefinition: #TerniLapilli category: #TerniLapilliGame stamp: 'HG 10/29/2020 18:32:04'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'turn xPlayerPositions oBoardPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 10/29/2020 18:32:03' prior: 50863066!
putOAt: aBoardPosition 
	turn _ #X.
	oBoardPositions add: aBoardPosition.! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 18:32:36' prior: 50863143!
isAnOPlayerPosition: aBoardPosition 
	^oBoardPositions includes: aBoardPosition.! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 18:33:15' prior: 50863113!
isAnXPlayerPosition: aBoardPosition 
	^xPlayerPositions includes: aBoardPosition.! !

!classDefinition: #TerniLapilli category: #TerniLapilliGame stamp: 'HG 10/29/2020 18:33:27'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'turn xPlayerPositions oBoardPositions oPlayerPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 18:33:26' prior: 50863272!
isAnOPlayerPosition: aBoardPosition 
	^oPlayerPositions includes: aBoardPosition.! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 10/29/2020 18:33:37' prior: 50863266!
putOAt: aBoardPosition 
	turn _ #X.
	oPlayerPositions add: aBoardPosition.! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'turn xPlayerPositions oPlayerPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!

!classDefinition: #TerniLapilli category: #TerniLapilliGame stamp: 'HG 10/29/2020 18:33:43'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'turn xPlayerPositions oPlayerPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/29/2020 18:33:50'!
ERROR!
!TerniLapilli methodsFor: 'initialization' stamp: 'HG 10/29/2020 18:34:14' prior: 50862987 overrides: 16896425!
initialize
	turn _ #X.
	oPlayerPositions _ OrderedCollection new.
	xPlayerPositions _ OrderedCollection new.! !

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/29/2020 18:34:19'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 18:34:19'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 18:34:19'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 18:34:19'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 18:34:19'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/29/2020 18:34:19'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 18:41:17'!
test06
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 3@1.

! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 18:43:01' prior: 50862946!
test02AssertPlayerOTurnIsAfterPlayerX
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	self assert: aTerniLapilliGame isPlayingO. 
	self deny: aTerniLapilliGame isPlayingX.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 18:43:52' prior: 50863346!
test06
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 3@1.
	
	self assert: aTerniLapilliGame isOver.
	self assert: aTerniLapilliGame hasPlayerXWon.
! !

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 18:44:11'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 18:44:20'!
isOver
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 18:44:24' prior: 50863383!
isOver
	^true.! !

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 18:44:26'!
ERROR!
!TerniLapilli methodsFor: '*Cuis-University-Model' stamp: 'HG 10/29/2020 18:44:30'!
hasPlayerXWon
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: '*Cuis-University-Model' stamp: 'HG 10/29/2020 18:44:40' prior: 50863393!
hasPlayerXWon
	^true.! !

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 18:44:42'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 18:44:42'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 18:44:42'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 18:44:42'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 18:44:42'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/29/2020 18:44:42'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 18:44:42'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 18:44:55' prior: 50863368!
test06
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 3@1.
	
	self assert: aTerniLapilliGame isOver.
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
! !

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 18:44:59'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 18:45:06'!
hasPlayerOWon
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 18:45:09' prior: 50863440!
hasPlayerOWon
	^false.! !

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 18:45:10'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 18:45:10'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 18:45:11'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 18:45:11'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 18:45:11'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/29/2020 18:45:11'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 18:45:11'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 18:47:20'!
test07
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 3@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 3@3.
	aTerniLapilliGame putOAt: 3@2.

	self assert: aTerniLapilliGame isOver.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self assert: aTerniLapilliGame hasPlayerOWon.
! !

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 18:47:26'!
FAILURE!
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 10/29/2020 18:51:34' prior: 50863299!
putOAt: aBoardPosition 
	turn _ #X.
	oPlayerPositions add: aBoardPosition.
	
	(oPlayerPositions includes: 1@2) 
		ifTrue: [
			(oPlayerPositions includes: 2@2)
				ifTrue: [
					oPlayerPositions includes: 3@2.
					].
			]. ! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 10/29/2020 18:52:45' prior: 50863487!
putOAt: aBoardPosition 
	turn _ #X.
	oPlayerPositions add: aBoardPosition.
	
	! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 18:53:12' prior: 50863445!
hasPlayerOWon
	^(oPlayerPositions intersection: {1@2.2@2.3@2} size) = 3.! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 18:54:42' prior: 50863387!
isOver
	^(oPlayerPositions size = 3) and: (xPlayerPositions size = 3).! !

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 18:54:45'!
FAILURE!
!TerniLapilli methodsFor: '*Cuis-University-Model' stamp: 'HG 10/29/2020 18:55:58' prior: 50863398!
hasPlayerXWon
	^(oPlayerPositions intersection: {1@1.2@1.3@1} size) = 3.! !

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 18:56:02'!
ERROR!
!TerniLapilli methodsFor: '*Cuis-University-Model' stamp: 'HG 10/29/2020 18:56:28' prior: 50863517!
hasPlayerXWon
	^(oPlayerPositions intersection: {1@1},{2@1},{3@1} size) = 3.! !

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 18:56:38'!
ERROR!
!TerniLapilli methodsFor: '*Cuis-University-Model' stamp: 'HG 10/29/2020 18:56:59' prior: 50863525!
hasPlayerXWon
	^((oPlayerPositions intersection: {1@1},{2@1},{3@1}) size) = 3.! !

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 18:57:03'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 18:57:23' prior: 50863503!
hasPlayerOWon
	^((oPlayerPositions intersection: {1@2},{2@2},{3@2}) size) = 3.! !

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 18:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 18:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 18:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 18:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 18:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/29/2020 18:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 18:57:28'!
FAILURE!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 18:57:28'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 18:57:28'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 18:58:00' prior: 50863423!
test06
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 3@1.
	
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
! !

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 18:58:01'!
FAILURE!
!TerniLapilli methodsFor: '*Cuis-University-Model' stamp: 'HG 10/29/2020 18:58:18' prior: 50863534!
hasPlayerXWon
	^((xPlayerPositions intersection: {1@1},{2@1},{3@1}) size) = 3.! !

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 18:58:20'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 18:58:20'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 18:58:20'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 18:58:20'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 18:58:20'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/29/2020 18:58:20'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 18:58:20'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 18:58:20'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 18:58:45'!
test08
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 3@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 3@3.
	aTerniLapilliGame putOAt: 1@3.

	self assert: aTerniLapilliGame isOver.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
! !

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/29/2020 18:58:47'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 18:58:47'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 18:58:47'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 18:58:47'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 18:58:47'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/29/2020 18:58:47'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 18:58:47'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 18:58:47'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/29/2020 18:58:47'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 19:02:17' prior: 50863469!
test07
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 3@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 3@3.
	aTerniLapilliGame putOAt: 3@2.

	self deny: aTerniLapilliGame hasPlayerXWon.
	self assert: aTerniLapilliGame hasPlayerOWon.
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 19:02:23' prior: 50863617!
test08
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 3@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 3@3.
	aTerniLapilliGame putOAt: 1@3.

	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 19:02:42'!
test09
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 3@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 3@3.
	aTerniLapilliGame putOAt: 1@3.
	
	self assert: aTerniLapilliGame isOver.
! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 19:02:56' prior: 50863509!
isOver
	^false.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 19:03:20' prior: 50863687!
test09
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 3@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 3@3.
	
	self deny: aTerniLapilliGame isOver.
! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 19:03:32' prior: 50863700!
isOver
	^nil.! !

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/29/2020 19:03:35'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 19:03:50' prior: 50863716!
isOver
	^false.! !

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/29/2020 19:03:52'!
ERROR!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/29/2020 19:03:56'!
ERROR!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/29/2020 19:04:06'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 19:04:06'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 19:04:06'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 19:04:06'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 19:04:06'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/29/2020 19:04:06'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 19:04:06'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 19:04:06'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/29/2020 19:04:06'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/29/2020 19:04:06'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 19:04:29'!
test10
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 3@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 3@3.
	aTerniLapilliGame putOAt: 2@3.

	self assert: aTerniLapilliGame isOver.
! !

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/29/2020 19:04:30'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 19:04:52' prior: 50863722!
isOver
	^(xPlayerPositions size = 3) and: (oPlayerPositions size =3).! !

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/29/2020 19:04:55'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 19:04:55'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 19:04:55'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 19:04:55'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 19:04:55'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/29/2020 19:04:55'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 19:04:55'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 19:04:55'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/29/2020 19:04:55'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/29/2020 19:04:55'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/29/2020 19:04:55'!
PASSED!

!methodRemoval: TerniLapilliTest #test08 stamp: 'HG 10/29/2020 19:08:50'!
test08
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 3@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 3@3.
	aTerniLapilliGame putOAt: 1@3.

	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 19:08:58'!
test08
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 3@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 3@3.
	
	self deny: aTerniLapilliGame isOver.
! !

!methodRemoval: TerniLapilliTest #test09 stamp: 'HG 10/29/2020 19:09:00'!
test09
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 3@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 3@3.
	
	self deny: aTerniLapilliGame isOver.
!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 19:09:04'!
test09
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 3@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 3@3.
	aTerniLapilliGame putOAt: 2@3.

	self assert: aTerniLapilliGame isOver.
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 19:09:12' prior: 50863758!
test10
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 3@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 3@3.
	aTerniLapilliGame putOAt: 2@3.

	self assert: aTerniLapilliGame isOver.
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 19:11:22' prior: 50863858!
test10
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@1.
	aTerniLapilliGame putXAt: 2@2.
	aTerniLapilliGame putOAt: 1@1.
	aTerniLapilliGame putXAt: 3@2.
	
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.! !

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/29/2020 19:11:23'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 19:11:35' prior: 50863871!
test10
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@1.
	aTerniLapilliGame putXAt: 2@2.
	aTerniLapilliGame putOAt: 1@1.
	aTerniLapilliGame putXAt: 3@2.
	
	self assert: aTerniLapilliGame hasPlayerXWon.! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 19:12:01' prior: 50863589!
hasPlayerXWon
	^((xPlayerPositions intersection: {1@1},{2@1},{3@1}) size) = 3
	or: ((xPlayerPositions intersection: {1@2},{2@2},{3@2}) size) = 3.! !

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/29/2020 19:12:04'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 19:12:04'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 19:12:04'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 19:12:04'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 19:12:04'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/29/2020 19:12:04'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 19:12:04'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 19:12:04'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/29/2020 19:12:04'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/29/2020 19:12:04'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/29/2020 19:12:04'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 19:13:46' prior: 50863899!
hasPlayerXWon

	^((xPlayerPositions intersection: self firstRow) size) = 3
	or: ((xPlayerPositions intersection: self secondRow) size) = 3
	or: ((xPlayerPositions intersection: self thirdRow) size) = 3.! !
!TerniLapilli methodsFor: 'private boardgame' stamp: 'HG 10/29/2020 19:16:00'!
firstRow
	^{1@1},{2@1},{3@1}! !
!TerniLapilli methodsFor: 'private boardgame' stamp: 'HG 10/29/2020 19:16:18'!
secondRow
	^{1@2},{2@2},{3@2}! !
!TerniLapilli methodsFor: 'private boardgame' stamp: 'HG 10/29/2020 19:16:27'!
thirdRow
	^{1@3},{2@3},{3@3}! !

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/29/2020 19:16:33'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 19:16:33'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 19:16:33'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 19:16:33'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 19:16:33'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/29/2020 19:16:33'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 19:16:33'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 19:16:33'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/29/2020 19:16:33'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/29/2020 19:16:33'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/29/2020 19:16:33'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 19:18:50' prior: 50863542!
hasPlayerOWon
	^((oPlayerPositions intersection: self firstRow) size) = 3
	or: ((oPlayerPositions intersection: self secondRow) size) = 3
	or: ((oPlayerPositions intersection: self thirdRow) size) = 3.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 19:19:39'!
test11
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 2@1.
	aTerniLapilliGame putXAt: 2@2.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 3@3.
	
	self assert: aTerniLapilliGame hasPlayerXWon.! !

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/29/2020 19:19:40'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 19:20:19' prior: 50863937!
hasPlayerXWon

	^((xPlayerPositions intersection: self firstRow) size) = 3
	or: ((xPlayerPositions intersection: self secondRow) size) = 3
	or: ((xPlayerPositions intersection: self thirdRow) size) = 3
	or: ((xPlayerPositions intersection: {1@1, 2@2, 3@3}) size) =3.! !

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/29/2020 19:20:25'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 19:20:40' prior: 50864013!
hasPlayerXWon

	^((xPlayerPositions intersection: self firstRow) size) = 3
	or: ((xPlayerPositions intersection: self secondRow) size) = 3
	or: ((xPlayerPositions intersection: self thirdRow) size) = 3
	or: ((xPlayerPositions intersection: {1@1},{2@2},{3@3}) size) =3.! !

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/29/2020 19:20:43'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 19:20:43'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 19:20:43'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 19:20:43'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 19:20:43'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/29/2020 19:20:43'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 19:20:43'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 19:20:43'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/29/2020 19:20:43'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/29/2020 19:20:43'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/29/2020 19:20:43'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/29/2020 19:20:43'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 19:21:55' prior: 50863998!
test11
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@1.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 2@3.
	aTerniLapilliGame putOAt: 1@3.
	
	self deny: aTerniLapilliGame hasPlayerXWon.
	self assert: aTerniLapilliGame hasPlayerOWon.! !

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/29/2020 19:21:56'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 19:22:21' prior: 50863988!
hasPlayerOWon
	^((oPlayerPositions intersection: self firstRow) size) = 3
	or: ((oPlayerPositions intersection: self secondRow) size) = 3
	or: ((oPlayerPositions intersection: self thirdRow) size) = 3
	or: ((xPlayerPositions intersection: {1@3},{2@2},{3@1}) size) =3.! !

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/29/2020 19:22:26'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 19:22:40' prior: 50864088!
hasPlayerOWon
	^((oPlayerPositions intersection: self firstRow) size) = 3
	or: ((oPlayerPositions intersection: self secondRow) size) = 3
	or: ((oPlayerPositions intersection: self thirdRow) size) = 3
	or: ((oPlayerPositions intersection: {1@3},{2@2},{3@1}) size) =3.! !

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/29/2020 19:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 19:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 19:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 19:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 19:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/29/2020 19:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 19:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 19:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/29/2020 19:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/29/2020 19:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/29/2020 19:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/29/2020 19:22:43'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 19:24:21' prior: 50864102!
hasPlayerOWon
	^((oPlayerPositions intersection: self firstRow) size) = 3
	or: ((oPlayerPositions intersection: self secondRow) size) = 3
	or: ((oPlayerPositions intersection: self thirdRow) size) = 3
	or: ((oPlayerPositions intersection: self toLeftDiagonal) size) =3
	or: ((oPlayerPositions intersection: self toRightDiagonal) size) =3.! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 19:24:31' prior: 50864027!
hasPlayerXWon

	^((xPlayerPositions intersection: self firstRow) size) = 3
	or: ((xPlayerPositions intersection: self secondRow) size) = 3
	or: ((xPlayerPositions intersection: self thirdRow) size) = 3
	or: ((oPlayerPositions intersection: self toLeftDiagonal) size) =3
	or: ((oPlayerPositions intersection: self toRightDiagonal) size) =3.! !

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/29/2020 19:24:35'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 19:24:51'!
toLeftDiagonal
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'private boardgame' stamp: 'HG 10/29/2020 19:25:16' prior: 50864176!
toLeftDiagonal
	^{1@3},{2@2},{3@1}! !
!TerniLapilli methodsFor: 'private boardgame' stamp: 'HG 10/29/2020 19:25:20'!
toRightDiagonal
	^{1@3},{2@2},{3@1}! !
!TerniLapilli methodsFor: 'private boardgame' stamp: 'HG 10/29/2020 19:25:28' prior: 50864185!
toRightDiagonal
	^{1@1},{2@2},{3@3}! !

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/29/2020 19:25:33'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 19:25:42' prior: 50864160!
hasPlayerXWon

	^((xPlayerPositions intersection: self firstRow) size) = 3
	or: ((xPlayerPositions intersection: self secondRow) size) = 3
	or: ((xPlayerPositions intersection: self thirdRow) size) = 3
	or: ((xPlayerPositions intersection: self toLeftDiagonal) size) =3
	or: ((xPlayerPositions intersection: self toRightDiagonal) size) =3.! !

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/29/2020 19:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 19:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 19:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 19:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 19:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/29/2020 19:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 19:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 19:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/29/2020 19:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/29/2020 19:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/29/2020 19:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/29/2020 19:25:45'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 19:26:24' prior: 50863887!
test10
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 2@1.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 3@1.
	aTerniLapilliGame putXAt: 1@3.
	
	self assert: aTerniLapilliGame hasPlayerXWon.! !

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/29/2020 19:26:25'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 19:27:30' prior: 50864197!
hasPlayerXWon

	^((xPlayerPositions intersection: self firstRow) size) = 3
	or: ((xPlayerPositions intersection: self secondRow) size) = 3
	or: ((xPlayerPositions intersection: self thirdRow) size) = 3
	or: ((xPlayerPositions intersection: self toLeftDiagonal) size) =3
	or: ((xPlayerPositions intersection: self toRightDiagonal) size) =3
	or: ((xPlayerPositions intersection: {1@1},{1@2},{1@3}) size) =3.! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 19:28:02' prior: 50864259!
hasPlayerXWon

	^((xPlayerPositions intersection: self firstRow) size) = 3
	or: ((xPlayerPositions intersection: self secondRow) size) = 3
	or: ((xPlayerPositions intersection: self thirdRow) size) = 3
	or: ((xPlayerPositions intersection: self toLeftDiagonal) size) =3
	or: ((xPlayerPositions intersection: self toRightDiagonal) size) =3.! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 19:29:08' prior: 50864275!
hasPlayerXWon
	
	^((xPlayerPositions intersection: self firstRow) size) = 3
	or: ((xPlayerPositions intersection: self secondRow) size) = 3
	or: ((xPlayerPositions intersection: self thirdRow) size) = 3
	or: ((xPlayerPositions intersection: self toLeftDiagonal) size) =3
	or: ((xPlayerPositions intersection: self toRightDiagonal) size) =3.! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 19:32:21' prior: 50864289!
hasPlayerXWon
	
	^self playerXWinsByHorizontalRow
		or: self playerXWinsByDiagonal
		or: self playerXWinsByVerticalColumn.
		
	! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 19:32:23' prior: 50864303!
hasPlayerXWon
	
	^self playerXWinsByHorizontalRow
		or: self playerXWinsByDiagonal
		or: self playerXWinsByVerticalColumn.! !

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/29/2020 19:32:30'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 19:32:41'!
playerXWinsByHorizontalRow
	self shouldBeImplemented.! !

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 19:32:42'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 19:32:42'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 19:32:42'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 19:32:42'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/29/2020 19:32:42'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 19:32:42'!
ERROR!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 19:32:42'!
ERROR!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/29/2020 19:32:42'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/29/2020 19:32:42'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/29/2020 19:32:42'!
ERROR!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/29/2020 19:32:42'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 19:33:00' prior: 50864319!
playerXWinsByHorizontalRow
	^((xPlayerPositions intersection: self firstRow) size) = 3
	or: ((xPlayerPositions intersection: self secondRow) size) = 3
	or: ((xPlayerPositions intersection: self thirdRow) size) = 3.! !

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/29/2020 19:33:12'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 19:33:20'!
playerXWinsByDiagonal
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 19:33:30' prior: 50864366!
playerXWinsByDiagonal
	^((xPlayerPositions intersection: self toLeftDiagonal) size) =3
	or: ((xPlayerPositions intersection: self toRightDiagonal) size) =3.! !

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/29/2020 19:33:43'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 19:33:50'!
playerXWinsByVerticalColumn
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 19:34:32' prior: 50864381!
playerXWinsByVerticalColumn
	^((xPlayerPositions intersection: self firstColumn) size) =3
	or: ((xPlayerPositions intersection: self secondColumn) size) =3
	or: ((xPlayerPositions intersection: self thirdColumn) size) =3.! !

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 19:34:36'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 19:34:36'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 19:34:36'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 19:34:36'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/29/2020 19:34:36'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 19:34:36'!
ERROR!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 19:34:36'!
ERROR!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/29/2020 19:34:36'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/29/2020 19:34:36'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/29/2020 19:34:36'!
ERROR!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/29/2020 19:34:36'!
ERROR!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/29/2020 19:34:49'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 19:34:58'!
firstColumn
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'private boardgame' stamp: 'HG 10/29/2020 19:35:21' prior: 50864428!
firstColumn
	^{1@1},{1@2},{1@3}! !
!TerniLapilli methodsFor: 'private boardgame' stamp: 'HG 10/29/2020 19:35:30'!
secondColumn
	^{2@1},{2@2},{2@3}! !
!TerniLapilli methodsFor: 'private boardgame' stamp: 'HG 10/29/2020 19:35:39'!
thirdColumn
	^{3@1},{3@2},{3@3}! !

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/29/2020 19:35:45'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 19:35:45'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 19:35:45'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 19:35:45'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 19:35:45'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/29/2020 19:35:45'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 19:35:45'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 19:35:45'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/29/2020 19:35:45'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/29/2020 19:35:45'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/29/2020 19:35:45'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/29/2020 19:35:45'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 20:27:28' prior: 50863357!
test02AssertPlayerOTurnIsAfterPlayerX
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	self assert: aTerniLapilliGame isPlayingO. 
	self deny: aTerniLapilliGame isPlayingX.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 20:36:11' prior: 50864478!
test02AssertPlayerOTurnIsAfterPlayerX
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	
	self assert: aTerniLapilliGame isPlayingO. 
	self deny: aTerniLapilliGame isPlayingX.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 20:50:20' prior: 50864244!
test10
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 2@1.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 3@1.
	aTerniLapilliGame putXAt: 1@3.
	
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 20:52:47' prior: 50862979!
test01AssertPlayerXStartsPlayingInNewGame
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	self assert: aTerniLapilliGame isPlayingX. 
	self deny: aTerniLapilliGame isPlayingO.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 20:54:56' prior: 50864489!
test02AssertPlayerOTurnIsAfterPlayerX
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	
	self assert: aTerniLapilliGame isPlayingO. 
	self deny: aTerniLapilliGame isPlayingX.
	self assert: aTerniLapilliGame isAnXPlayerPosition: 1@1.
	self deny: aTerniLapilliGame isAnOPlayerPosition: 1@1.! !

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 20:55:07'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 20:55:33' prior: 50864524!
test02AssertPlayerOTurnIsAfterPlayerX
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	
	self assert: aTerniLapilliGame isPlayingO. 
	self deny: aTerniLapilliGame isPlayingX.
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self deny: (aTerniLapilliGame isAnOPlayerPosition: 1@1).! !

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 20:55:34'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 20:55:34'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 20:55:34'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 20:55:34'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 20:55:34'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/29/2020 20:55:34'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 20:55:34'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 20:55:34'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/29/2020 20:55:34'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/29/2020 20:55:34'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/29/2020 20:55:34'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/29/2020 20:55:34'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 20:56:05' prior: 50863071!
test03AssertPlayerXTurnIsAfterPlayerO
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 2@2.
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame isPlayingO. 
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self assert: (aTerniLapilliGame isAnOPlayerPosition: 2@2).! !

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 20:56:05'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 20:56:05'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 20:56:05'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 20:56:05'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 20:56:05'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/29/2020 20:56:05'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 20:56:05'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 20:56:05'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/29/2020 20:56:05'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/29/2020 20:56:05'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/29/2020 20:56:05'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/29/2020 20:56:05'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 20:56:13' prior: 50864590!
test03AssertPlayerXTurnIsAfterPlayerO
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 2@2.
	
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame isPlayingO. 
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self assert: (aTerniLapilliGame isAnOPlayerPosition: 2@2).! !

!methodRemoval: TerniLapilliTest #test04 stamp: 'HG 10/29/2020 20:57:33'!
test04
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self deny: (aTerniLapilliGame isAnOPlayerPosition: 1@1).!

!methodRemoval: TerniLapilliTest #test05 stamp: 'HG 10/29/2020 20:57:48'!
test05
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	self assert: (aTerniLapilliGame isAnOPlayerPosition: 1@2).
	self deny: (aTerniLapilliGame isAnXPlayerPosition: 1@2).!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 20:58:04' prior: 50863573!
test06
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 3@1.
	
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 20:58:05' prior: 50864674!
test06
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 3@1.
	
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 20:58:14'!
test04
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 3@1.
	
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.
! !

!methodRemoval: TerniLapilliTest #test06 stamp: 'HG 10/29/2020 20:58:16'!
test06
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 3@1.
	
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.
!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 20:58:26' prior: 50863658!
test07
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 3@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 3@3.
	aTerniLapilliGame putOAt: 3@2.

	self deny: aTerniLapilliGame hasPlayerXWon.
	self assert: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 20:58:32'!
test05
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 3@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 3@3.
	aTerniLapilliGame putOAt: 3@2.

	self deny: aTerniLapilliGame hasPlayerXWon.
	self assert: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.
! !

!methodRemoval: TerniLapilliTest #test07 stamp: 'HG 10/29/2020 20:58:34'!
test07
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 3@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 3@3.
	aTerniLapilliGame putOAt: 3@2.

	self deny: aTerniLapilliGame hasPlayerXWon.
	self assert: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.
!

!methodRemoval: TerniLapilliTest #test08 stamp: 'HG 10/29/2020 20:59:00'!
test08
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 3@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 3@3.
	
	self deny: aTerniLapilliGame isOver.
!

!methodRemoval: TerniLapilliTest #test09 stamp: 'HG 10/29/2020 20:59:28'!
test09
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 3@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 3@3.
	aTerniLapilliGame putOAt: 2@3.

	self assert: aTerniLapilliGame isOver.
!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 20:59:48' prior: 50864500!
test10
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 2@1.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 3@1.
	aTerniLapilliGame putXAt: 1@3.
	
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 20:59:54'!
test06
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 2@1.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 3@1.
	aTerniLapilliGame putXAt: 1@3.
	
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.! !

!methodRemoval: TerniLapilliTest #test10 stamp: 'HG 10/29/2020 20:59:55'!
test10
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 2@1.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 3@1.
	aTerniLapilliGame putXAt: 1@3.
	
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 21:00:06'!
test07
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@1.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 2@3.
	aTerniLapilliGame putOAt: 1@3.
	
	self deny: aTerniLapilliGame hasPlayerXWon.
	self assert: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.! !

!methodRemoval: TerniLapilliTest #test11 stamp: 'HG 10/29/2020 21:00:09'!
test11
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@1.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 2@3.
	aTerniLapilliGame putOAt: 1@3.
	
	self deny: aTerniLapilliGame hasPlayerXWon.
	self assert: aTerniLapilliGame hasPlayerOWon.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 21:00:48' prior: 50864847!
test07
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 2@2.
	aTerniLapilliGame putOAt: 1@1.
	aTerniLapilliGame putXAt: 2@3.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 3@3.
	aTerniLapilliGame putOAt: 1@3.
	
	self deny: aTerniLapilliGame hasPlayerXWon.
	self assert: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.! !

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 21:00:49'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 21:01:47' prior: 50864146!
hasPlayerOWon
	^self playerOWinsByHorizontalRow
		or: self playerOWinsByDiagonal
		or: self playerOWinsByVerticalColumn.! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 21:02:06'!
playerOWinsByDiagonal
	^((oPlayerPositions intersection: self toLeftDiagonal) size) =3
	or: ((oPlayerPositions intersection: self toRightDiagonal) size) =3.! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 21:02:14' prior: 50864354!
playerXWinsByHorizontalRow
	^((oPlayerPositions intersection: self firstRow) size) = 3
	or: ((oPlayerPositions intersection: self secondRow) size) = 3
	or: ((oPlayerPositions intersection: self thirdRow) size) = 3.! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 21:02:22' prior: 50864910!
playerXWinsByHorizontalRow
	^((xPlayerPositions intersection: self firstRow) size) = 3
	or: ((xPlayerPositions intersection: self secondRow) size) = 3
	or: ((xPlayerPositions intersection: self thirdRow) size) = 3.! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 21:02:29'!
playerOWinsByHorizontalRow
	^((oPlayerPositions intersection: self firstRow) size) = 3
	or: ((oPlayerPositions intersection: self secondRow) size) = 3
	or: ((oPlayerPositions intersection: self thirdRow) size) = 3.! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 21:02:40'!
playerOWinsByVerticalColumn
	^((oPlayerPositions intersection: self firstColumn) size) =3
	or: ((oPlayerPositions intersection: self secondColumn) size) =3
	or: ((oPlayerPositions intersection: self thirdColumn) size) =3.! !

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 21:02:45'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 21:02:45'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 21:02:45'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 21:02:45'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 21:02:45'!
FAILURE!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/29/2020 21:02:45'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 21:02:45'!
FAILURE!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 21:02:45'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 21:02:56'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/29/2020 21:03:22' prior: 50863773!
isOver
	^self hasPlayerOWon or: (self hasPlayerXWon).! !

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 21:03:26'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 21:03:26'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 21:03:26'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 21:03:26'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 21:03:26'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/29/2020 21:03:26'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 21:03:26'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 21:03:26'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 21:03:51' prior: 50864639!
test03AssertPlayerXTurnIsAfterPlayerO
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 2@2.
	
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame isPlayingO. 
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self assert: (aTerniLapilliGame isAnOPlayerPosition: 2@2).
	self deny: aTerniLapilliGame isOver.! !

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 21:03:52'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 21:03:52'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 21:03:52'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 21:03:52'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 21:03:52'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/29/2020 21:03:52'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 21:03:52'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 21:03:52'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 21:03:58' prior: 50864542!
test02AssertPlayerOTurnIsAfterPlayerX
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	
	self assert: aTerniLapilliGame isPlayingO. 
	self deny: aTerniLapilliGame isPlayingX.
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self deny: (aTerniLapilliGame isAnOPlayerPosition: 1@1).
	self deny: aTerniLapilliGame isOver.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 21:04:01' prior: 50864514!
test01AssertPlayerXStartsPlayingInNewGame
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	self assert: aTerniLapilliGame isPlayingX. 
	self deny: aTerniLapilliGame isPlayingO.
	self deny: aTerniLapilliGame isOver.! !

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 21:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 21:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 21:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 21:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 21:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/29/2020 21:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 21:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 21:04:02'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 21:10:29'!
test08
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 2@3.
	aTerniLapilliGame putOAt: 2@2.
	
	aTerniLapilliGame movePlayerOPositionFrom: 2@2 to: 2@1. 
	
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	
	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 21:13:29' prior: 50865091!
test08
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 2@3.
	aTerniLapilliGame putOAt: 2@2.
	
	aTerniLapilliGame movePlayerOPositionFrom: 2@2 to: 2@3. 
	
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	
	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 21:15:11' prior: 50865109!
test08
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 2@3.
	aTerniLapilliGame putOAt: 2@2.
	
	aTerniLapilliGame movePlayerOPositionFrom: 2@2 to: 2@3. 
	
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	
	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 21:17:45' prior: 50865127!
test08
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 2@3.
	aTerniLapilliGame putOAt: 2@2.
	
	aTerniLapilliGame movePlayerOPositionFrom: 2@2 to: 2@3. 

	self deny: (aTerniLapilliGame isAnOPlayerPosition: 2@2).	
	self assert: (aTerniLapilliGame isAnOPlayerPosition: 2@3).
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	
	
	
	! !

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/29/2020 21:17:47'!
ERROR!
!TerniLapilli methodsFor: 'moving' stamp: 'HG 10/29/2020 21:18:03'!
movePlayerOPositionFrom: aPoint to: aPoint2 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'moving' stamp: 'HG 10/29/2020 21:19:50' prior: 50865172!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	oPlayerPositions add: aDestinationBoardPosition.
	oPlayerPositions remove: aSourceBoardPosition.! !

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/29/2020 21:19:55'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 21:19:55'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 21:19:55'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 21:19:55'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 21:19:55'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/29/2020 21:19:55'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 21:19:55'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 21:19:55'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/29/2020 21:19:55'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 21:21:52'!
test09
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@2.
	
	aTerniLapilliGame movePlayerXPositionFrom: 2@1 to: 1@1. 

	self deny: (aTerniLapilliGame isAnOPlayerPosition: 2@2).	
	self assert: (aTerniLapilliGame isAnOPlayerPosition: 2@3).
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	
	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/29/2020 21:22:32' prior: 50865211!
test09
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@2.
	
	aTerniLapilliGame movePlayerXPositionFrom: 2@1 to: 1@1. 

	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@1).	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self assert: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.
	
	
	
	! !

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/29/2020 21:22:34'!
ERROR!
!TerniLapilli methodsFor: 'moving' stamp: 'HG 10/29/2020 21:22:51'!
movePlayerXPositionFrom: aPoint to: aPoint2 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'moving' stamp: 'HG 10/29/2020 21:24:13' prior: 50865259!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	xPlayerPositions remove: aSourceBoardPosition.
	xPlayerPositions add: aDestinationBoardPosition.! !

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/29/2020 21:24:15'!
FAILURE!
!TerniLapilli methodsFor: 'moving' stamp: 'HG 10/29/2020 21:24:34' prior: 50865264!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	xPlayerPositions remove: aSourceBoardPosition.
	xPlayerPositions add: aDestinationBoardPosition.
	turn _ #O.! !
!TerniLapilli methodsFor: 'moving' stamp: 'HG 10/29/2020 21:24:59'!
playerOTakeTurn

	^ turn _ #O! !
!TerniLapilli methodsFor: 'moving' stamp: 'HG 10/29/2020 21:24:59' prior: 50865275!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	xPlayerPositions remove: aSourceBoardPosition.
	xPlayerPositions add: aDestinationBoardPosition.
	self playerOTakeTurn.! !

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/29/2020 21:25:07'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/29/2020 21:25:07'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/29/2020 21:25:07'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/29/2020 21:25:07'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/29/2020 21:25:07'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/29/2020 21:25:07'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/29/2020 21:25:07'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/29/2020 21:25:07'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/29/2020 21:25:07'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/29/2020 21:25:07'!
PASSED!
!TerniLapilli methodsFor: 'moving' stamp: 'HG 10/29/2020 21:25:29' prior: 50865177!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	oPlayerPositions add: aDestinationBoardPosition.
	oPlayerPositions remove: aSourceBoardPosition.
	turn _ #X.! !
!TerniLapilli methodsFor: 'moving' stamp: 'HG 10/29/2020 21:25:44'!
playerXTakeTurn

	^ turn _ #X! !
!TerniLapilli methodsFor: 'moving' stamp: 'HG 10/29/2020 21:25:44' prior: 50865325!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	oPlayerPositions add: aDestinationBoardPosition.
	oPlayerPositions remove: aSourceBoardPosition.
	self playerXTakeTurn.! !

----End fileIn of /Users/monteagudo/Downloads/DesignPatterns-Decorator.st----!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/31/2020 16:36:37' prior: 50865234!
test09
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@2.
	
	aTerniLapilliGame movePlayerXPositionFrom: 2@1 to: 1@1. 

	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@1).	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self assert: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/31/2020 16:42:04' prior: 50865664!
test09
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@2.
	
	aTerniLapilliGame movePlayerXPositionFrom: 2@1 to: 1@1. 

	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@1).	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self assert: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/31/2020 16:44:29'!
test10
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putXAt: 2@1.
	
	
	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@1).	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self assert: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/31/2020 16:45:56' prior: 50865710!
test10
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	
	self 
		should: [ aTerniLapilliGame putXAt: 2@1. ]
		raise: Error
		withMessageText: TerniLapilli InvalidTurnErrorDescription.
		
		
	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@1).	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self assert: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/31/2020 16:47:01' prior: 50865727!
test10
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	
	self 
		should: [ aTerniLapilliGame putXAt: 2@1. ]
		raise: Error
		withMessageText: TerniLapilli InvalidTurnErrorDescription.
		
		
	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@1).	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self assert: aTerniLapilliGame isPlayingO.
	self deny: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	! !

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/31/2020 16:47:05'!
ERROR!
!TerniLapilli class methodsFor: 'error description' stamp: 'HG 10/31/2020 16:47:29'!
InvalidTurnErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error description' stamp: 'HG 10/31/2020 16:47:42' prior: 50865772!
InvalidTurnErrorDescription
	^'Invalid Turn to Play'.! !

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/31/2020 16:47:45'!
FAILURE!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/31/2020 16:47:50'!
FAILURE!
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 10/31/2020 16:49:05' prior: 50863252!
putXAt: aBoardPosition 

	self isPlayingX
		ifTrue: [
			turn _ #O.
			xPlayerPositions add: aBoardPosition.
		]
		ifFalse: [
			self error: self class InvalidTurnErrorDescription. 
			]
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 10/31/2020 16:49:11' prior: 50865787!
putXAt: aBoardPosition 

	self isPlayingX
		ifTrue: [
			turn _ #O.
			xPlayerPositions add: aBoardPosition.
		]
		ifFalse: [
			self error: self class InvalidTurnErrorDescription. 
		]
	! !

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/31/2020 16:49:18'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/31/2020 16:49:18'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/31/2020 16:49:18'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/31/2020 16:49:18'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/31/2020 16:49:18'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/31/2020 16:49:18'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/31/2020 16:49:18'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/31/2020 16:49:18'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/31/2020 16:49:18'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 16:49:18'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/31/2020 16:49:18'!
PASSED!
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 10/31/2020 16:51:29' prior: 50863497!
putOAt: aBoardPosition 

	self isPlayingO
		ifTrue: [
			turn _ #X.
			oPlayerPositions add: aBoardPosition.
		]
		ifFalse: [
			self error: self class InvalidTurnErrorDescription. 
		]
	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/31/2020 16:52:35'!
test11
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	
	self 
		should: [ aTerniLapilliGame putOAt: 1@1. ]
		raise: Error
		withMessageText: TerniLapilli InvalidTurnErrorDescription.
		
		
	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@1).	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self assert: aTerniLapilliGame isPlayingO.
	self deny: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/31/2020 16:54:26' prior: 50865844!
test11
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	
	self 
		should: [ aTerniLapilliGame putOAt: 1@1. ]
		raise: Error
		withMessageText: TerniLapilli InvalidPositionToPutChip.
		
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).	
	self deny: (aTerniLapilliGame isAnOPlayerPosition: 1@1).
	self assert: aTerniLapilliGame isPlayingO.
	self deny: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	! !

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/31/2020 16:54:28'!
ERROR!
!TerniLapilli class methodsFor: 'error description' stamp: 'HG 10/31/2020 16:54:38'!
InvalidPositionToPutChip
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error description' stamp: 'HG 10/31/2020 16:55:10' prior: 50865889!
InvalidPositionToPutChip
	^'Is an invalid position to put a chip on board'.! !

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/31/2020 16:55:14'!
FAILURE!
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 10/31/2020 16:57:17' prior: 50865835!
putOAt: aBoardPosition 

	self isPlayingO
		ifTrue: [
			((self isAnOPlayerPosition: aBoardPosition) or: (self isAnXPlayerPosition: aBoardPosition))
				ifFalse: [
					turn _ #X.
					oPlayerPositions add: aBoardPosition.
				] 
				ifTrue: [
					self error: self class InvalidPositionToPutChip. 	
				]
			
		]
		ifFalse: [
			self error: self class InvalidTurnErrorDescription. 
		]
	
	
	! !

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/31/2020 16:57:23'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/31/2020 16:57:23'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/31/2020 16:57:23'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/31/2020 16:57:23'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/31/2020 16:57:23'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/31/2020 16:57:23'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/31/2020 16:57:23'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/31/2020 16:57:23'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/31/2020 16:57:23'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 16:57:23'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/31/2020 16:57:23'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/31/2020 16:57:23'!
PASSED!
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 10/31/2020 16:57:46' prior: 50865796!
putXAt: aBoardPosition 

	self isPlayingX
		ifTrue: [
			((self isAnOPlayerPosition: aBoardPosition) or: (self isAnXPlayerPosition: aBoardPosition))
				ifFalse: [
					turn _ #O.
					xPlayerPositions add: aBoardPosition.
				] 
				ifTrue: [
					self error: self class InvalidPositionToPutChip. 	
				]
		]
		ifFalse: [
			self error: self class InvalidTurnErrorDescription. 
		]
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 10/31/2020 16:59:43' prior: 50865950!
putXAt: aBoardPosition 

	self isPlayingX
		ifTrue: [
			
			((self isAnOPlayerPosition: aBoardPosition) or: (self isAnXPlayerPosition: aBoardPosition))
				ifFalse: [
					turn _ #O.
					xPlayerPositions add: aBoardPosition.
				] 
				ifTrue: [
					self error: self class InvalidPositionToPutChip. 	
				]
		]
		ifFalse: [
			self error: self class InvalidTurnErrorDescription. 
		]
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 10/31/2020 17:00:36' prior: 50865965!
putXAt: aBoardPosition 

	self isPlayingX
		ifTrue: [
			
			self isAnOccupiedPosition
				ifFalse: [
					turn _ #O.
					xPlayerPositions add: aBoardPosition.
				] 
				ifTrue: [
					self error: self class InvalidPositionToPutChip. 	
				]
		]
		ifFalse: [
			self error: self class InvalidTurnErrorDescription. 
		]
	! !

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/31/2020 17:00:38'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/31/2020 17:00:38'!
ERROR!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/31/2020 17:00:38'!
ERROR!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/31/2020 17:00:38'!
ERROR!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/31/2020 17:00:38'!
ERROR!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/31/2020 17:00:38'!
ERROR!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/31/2020 17:00:38'!
ERROR!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/31/2020 17:00:38'!
ERROR!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 17:00:38'!
ERROR!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/31/2020 17:00:38'!
ERROR!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/31/2020 17:00:38'!
ERROR!
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 10/31/2020 17:00:50' prior: 50865981!
putXAt: aBoardPosition 

	self isPlayingX
		ifTrue: [
			
			self isAnOccupiedPosition: aBoardPosition
				ifFalse: [
					turn _ #O.
					xPlayerPositions add: aBoardPosition.
				] 
				ifTrue: [
					self error: self class InvalidPositionToPutChip. 	
				]
		]
		ifFalse: [
			self error: self class InvalidTurnErrorDescription. 
		]
	! !

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/31/2020 17:00:52'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/31/2020 17:00:52'!
ERROR!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/31/2020 17:00:52'!
ERROR!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/31/2020 17:00:52'!
ERROR!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/31/2020 17:00:52'!
ERROR!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/31/2020 17:00:52'!
ERROR!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/31/2020 17:00:52'!
ERROR!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/31/2020 17:00:52'!
ERROR!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 17:00:52'!
ERROR!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/31/2020 17:00:52'!
ERROR!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/31/2020 17:00:52'!
ERROR!
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 10/31/2020 17:00:59' prior: 50866024!
putXAt: aBoardPosition 

	self isPlayingX
		ifTrue: [
			
			(self isAnOccupiedPosition: aBoardPosition)
				ifFalse: [
					turn _ #O.
					xPlayerPositions add: aBoardPosition.
				] 
				ifTrue: [
					self error: self class InvalidPositionToPutChip. 	
				]
		]
		ifFalse: [
			self error: self class InvalidTurnErrorDescription. 
		]
	! !

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/31/2020 17:01:00'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/31/2020 17:01:00'!
ERROR!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/31/2020 17:01:00'!
ERROR!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/31/2020 17:01:00'!
ERROR!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/31/2020 17:01:00'!
ERROR!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/31/2020 17:01:00'!
ERROR!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/31/2020 17:01:00'!
ERROR!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/31/2020 17:01:00'!
ERROR!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 17:01:00'!
ERROR!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/31/2020 17:01:00'!
ERROR!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/31/2020 17:01:00'!
ERROR!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/31/2020 17:01:04'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/31/2020 17:01:13'!
isAnOccupiedPosition: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/31/2020 17:01:32' prior: 50866114!
isAnOccupiedPosition: aBoardPosition 
	^((self isAnOPlayerPosition: aBoardPosition) 
		or: (self isAnXPlayerPosition: aBoardPosition))! !

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/31/2020 17:01:37'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/31/2020 17:01:42'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/31/2020 17:01:42'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/31/2020 17:01:42'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/31/2020 17:01:42'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/31/2020 17:01:42'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/31/2020 17:01:42'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/31/2020 17:01:42'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/31/2020 17:01:42'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 17:01:42'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/31/2020 17:01:42'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/31/2020 17:01:42'!
PASSED!
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 10/31/2020 17:01:55' prior: 50865902!
putOAt: aBoardPosition 

	self isPlayingO
		ifTrue: [
			(self isAnOccupiedPosition: aBoardPosition)
				ifFalse: [
					turn _ #X.
					oPlayerPositions add: aBoardPosition.
				] 
				ifTrue: [
					self error: self class InvalidPositionToPutChip. 	
				]
			
		]
		ifFalse: [
			self error: self class InvalidTurnErrorDescription. 
		]
	
	
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 10/31/2020 17:04:04'!
addOPlayerPositionIn: aBoardPosition

	turn _ #X.
					oPlayerPositions add: aBoardPosition! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 10/31/2020 17:04:04' prior: 50866160!
putOAt: aBoardPosition 

	self isPlayingO
		ifTrue: [
			(self isAnOccupiedPosition: aBoardPosition)
				ifFalse: [
					self addOPlayerPositionIn: aBoardPosition.
				] 
				ifTrue: [
					self error: self class InvalidPositionToPutChip. 	
				]
			
		]
		ifFalse: [
			self error: self class InvalidTurnErrorDescription. 
		]
	
	
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 10/31/2020 17:04:27'!
addXPlayerPositionIn: aBoardPosition

	turn _ #O.
					xPlayerPositions add: aBoardPosition! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 10/31/2020 17:04:27' prior: 50866068!
putXAt: aBoardPosition 

	self isPlayingX
		ifTrue: [
			
			(self isAnOccupiedPosition: aBoardPosition)
				ifFalse: [
					self addXPlayerPositionIn: aBoardPosition.
				] 
				ifTrue: [
					self error: self class InvalidPositionToPutChip. 	
				]
		]
		ifFalse: [
			self error: self class InvalidTurnErrorDescription. 
		]
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/31/2020 17:04:54'!
test12
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	
	self 
		should: [ aTerniLapilliGame putXAt: 2@1. ]
		raise: Error
		withMessageText: TerniLapilli InvalidTurnErrorDescription.
		
		
	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@1).	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self assert: aTerniLapilliGame isPlayingO.
	self deny: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/31/2020 17:05:09' prior: 50866213!
test12
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@2.
	
	self 
		should: [ aTerniLapilliGame putXAt: 2@1. ]
		raise: Error
		withMessageText: TerniLapilli InvalidTurnErrorDescription.
		
		
	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@1).	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self assert: aTerniLapilliGame isPlayingO.
	self deny: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/31/2020 17:05:49' prior: 50866235!
test12
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@2.
	
	self 
		should: [ aTerniLapilliGame movePlayerOPositionFrom: 3@3 to: 2@3.  ]
		raise: Error
		withMessageText: TerniLapilli InvalidTurnErrorDescription.
		
		
	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@1).	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self assert: aTerniLapilliGame isPlayingO.
	self deny: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/31/2020 17:06:33' prior: 50866262!
test12
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@2.
	
	self 
		should: [ aTerniLapilliGame movePlayerOPositionFrom: 3@3 to: 2@3.  ]
		raise: Error
		withMessageText: TerniLapilli InvalidTurnErrorDescription.
		
		
	self deny: (aTerniLapilliGame isAnOPlayerPosition: 2@3).	
	self assert: (aTerniLapilliGame isAnOPlayerPosition: 3@3).
	self deny: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	! !

!testRun: #TerniLapilliTest #test12 stamp: 'HG 10/31/2020 17:06:40'!
FAILURE!
!TerniLapilli methodsFor: 'moving' stamp: 'HG 10/31/2020 17:17:38' prior: 50865338!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self isPlayingO
		ifFalse: [
			self error: self class InvalidTurnErrorDescription. 
		].
	
	oPlayerPositions add: aDestinationBoardPosition.
	oPlayerPositions remove: aSourceBoardPosition.
	self playerXTakeTurn.
	
	
	! !

!testRun: #TerniLapilliTest #test12 stamp: 'HG 10/31/2020 17:18:15'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/31/2020 17:18:15'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/31/2020 17:18:15'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/31/2020 17:18:15'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/31/2020 17:18:15'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/31/2020 17:18:15'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/31/2020 17:18:15'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/31/2020 17:18:15'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/31/2020 17:18:15'!
ERROR!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 17:18:15'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/31/2020 17:18:15'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/31/2020 17:18:15'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 10/31/2020 17:18:15'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/31/2020 17:18:15'!
ERROR!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 10/31/2020 17:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/31/2020 17:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/31/2020 17:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/31/2020 17:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/31/2020 17:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/31/2020 17:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/31/2020 17:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/31/2020 17:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/31/2020 17:18:42'!
ERROR!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 17:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/31/2020 17:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/31/2020 17:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 10/31/2020 17:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/31/2020 17:18:42'!
ERROR!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 10/31/2020 17:18:49'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/31/2020 17:18:49'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/31/2020 17:18:49'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/31/2020 17:18:49'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/31/2020 17:18:49'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/31/2020 17:18:49'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/31/2020 17:18:49'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/31/2020 17:18:49'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/31/2020 17:18:49'!
ERROR!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 17:18:49'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/31/2020 17:18:49'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/31/2020 17:18:49'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 10/31/2020 17:18:49'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/31/2020 17:18:49'!
ERROR!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 10/31/2020 17:18:58'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/31/2020 17:18:58'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/31/2020 17:18:58'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/31/2020 17:18:58'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/31/2020 17:18:58'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/31/2020 17:18:58'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/31/2020 17:18:58'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/31/2020 17:18:58'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/31/2020 17:18:58'!
ERROR!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 17:18:58'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/31/2020 17:18:58'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/31/2020 17:18:58'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 10/31/2020 17:18:58'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/31/2020 17:18:58'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/31/2020 17:20:07' prior: 50865147!
test08
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 2@2.
	aTerniLapilliGame putOAt: 2@3.
	
	aTerniLapilliGame movePlayerXPositionFrom: 2@2 to: 2@1. 

	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@2).	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 2@1).
	self assert: aTerniLapilliGame isPlayingO.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	
	
	
	! !

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/31/2020 17:20:08'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/31/2020 17:20:08'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/31/2020 17:20:08'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/31/2020 17:20:08'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/31/2020 17:20:08'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/31/2020 17:20:08'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/31/2020 17:20:08'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/31/2020 17:20:08'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/31/2020 17:20:08'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 17:20:08'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/31/2020 17:20:08'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/31/2020 17:20:08'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 10/31/2020 17:20:08'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/31/2020 17:21:56'!
test13
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@2.
	
	self 
		should: [ aTerniLapilliGame movePlayerXPositionFrom: 3@3 to: 2@3.  ]
		raise: Error
		withMessageText: TerniLapilli InvalidSourcePositionToMove.
		
			
	self assert: (aTerniLapilliGame isAnOPlayerPosition: 3@3).
	self deny: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	! !

!testRun: #TerniLapilliTest #test13 stamp: 'HG 10/31/2020 17:21:59'!
ERROR!
!TerniLapilli class methodsFor: 'error description' stamp: 'HG 10/31/2020 17:22:08'!
InvalidSourcePositionToMove
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error description' stamp: 'HG 10/31/2020 17:22:33' prior: 50866565!
InvalidSourcePositionToMove
	^'Is an invalid source position to move for that player..'! !

!testRun: #TerniLapilliTest #test13 stamp: 'HG 10/31/2020 17:22:37'!
FAILURE!
!TerniLapilli methodsFor: 'moving' stamp: 'HG 10/31/2020 17:25:32' prior: 50865288!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 

	(self isAnXPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
	
	xPlayerPositions remove: aSourceBoardPosition.
	xPlayerPositions add: aDestinationBoardPosition.
	self playerOTakeTurn.
	! !

!testRun: #TerniLapilliTest #test13 stamp: 'HG 10/31/2020 17:26:28'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/31/2020 17:26:28'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/31/2020 17:26:28'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/31/2020 17:26:28'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/31/2020 17:26:28'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/31/2020 17:26:28'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/31/2020 17:26:28'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/31/2020 17:26:28'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/31/2020 17:26:28'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 17:26:28'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/31/2020 17:26:28'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/31/2020 17:26:28'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 10/31/2020 17:26:28'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'HG 10/31/2020 17:26:28'!
PASSED!
!TerniLapilli methodsFor: 'moving' stamp: 'HG 10/31/2020 17:27:08' prior: 50866578!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self isPlayingX
		ifFalse: [
			self error: self class InvalidTurnErrorDescription. 
		].
	
	(self isAnXPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
	
	xPlayerPositions remove: aSourceBoardPosition.
	xPlayerPositions add: aDestinationBoardPosition.
	self playerOTakeTurn.
	! !
!TerniLapilli methodsFor: 'moving' stamp: 'HG 10/31/2020 17:27:35' prior: 50866319!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self isPlayingO
		ifFalse: [
			self error: self class InvalidTurnErrorDescription. 
		].
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
	
	oPlayerPositions add: aDestinationBoardPosition.
	oPlayerPositions remove: aSourceBoardPosition.
	self playerXTakeTurn.
	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/31/2020 17:27:59' prior: 50866537!
test13
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@2.
	
	self 
		should: [ aTerniLapilliGame movePlayerXPositionFrom: 1@1 to: 2@2.  ]
		raise: Error
		withMessageText: TerniLapilli InvalidSourcePositionToMove.
		
			
	self assert: (aTerniLapilliGame isAnOPlayerPosition: 3@3).
	self deny: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/31/2020 17:28:28' prior: 50866662!
test13
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@2.
	
	self 
		should: [ aTerniLapilliGame movePlayerXPositionFrom: 1@1 to: 2@2.  ]
		raise: Error
		withMessageText: TerniLapilli InvalidDestinationPositionToMove.
		
			
	self assert: (aTerniLapilliGame isAnOPlayerPosition: 3@3).
	self deny: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/31/2020 17:21:56' prior: 50866688!
test13
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@2.
	
	self 
		should: [ aTerniLapilliGame movePlayerXPositionFrom: 3@3 to: 2@3.  ]
		raise: Error
		withMessageText: TerniLapilli InvalidSourcePositionToMove.
		
			
	self assert: (aTerniLapilliGame isAnOPlayerPosition: 3@3).
	self deny: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	! !

!testRun: #TerniLapilliTest #test13 stamp: 'HG 10/31/2020 17:28:58'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/31/2020 17:28:58'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/31/2020 17:28:58'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/31/2020 17:28:58'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/31/2020 17:28:58'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/31/2020 17:28:58'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/31/2020 17:28:58'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/31/2020 17:28:58'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/31/2020 17:28:58'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 17:28:58'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/31/2020 17:28:58'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/31/2020 17:28:58'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 10/31/2020 17:28:58'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'HG 10/31/2020 17:28:58'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/31/2020 17:29:07'!
test14
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@2.
	
	self 
		should: [ aTerniLapilliGame movePlayerXPositionFrom: 1@1 to: 2@2.  ]
		raise: Error
		withMessageText: TerniLapilli InvalidDestinationPositionToMove.
		
			
	self assert: (aTerniLapilliGame isAnOPlayerPosition: 3@3).
	self deny: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	
	! !

!testRun: #TerniLapilliTest #test14 stamp: 'HG 10/31/2020 17:29:09'!
ERROR!
!TerniLapilli class methodsFor: 'error description' stamp: 'HG 10/31/2020 17:29:19'!
InvalidDestinationPositionToMove
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error description' stamp: 'HG 10/31/2020 17:30:00' prior: 50866804!
InvalidDestinationPositionToMove
	^'Is an invalid destination position to move'.! !

!testRun: #TerniLapilliTest #test14 stamp: 'HG 10/31/2020 17:30:05'!
FAILURE!
!TerniLapilli methodsFor: 'moving' stamp: 'HG 10/31/2020 17:34:52' prior: 50866629!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self isPlayingX
		ifFalse: [
			self error: self class InvalidTurnErrorDescription. 
		].
	
	(self isAnXPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
	
	(self isAnOccupiedPosition: aDestinationBoardPosition)
		ifTrue:[
			self error: self class InvalidDestinationPositionToMove. 
			].
		
	xPlayerPositions remove: aSourceBoardPosition.
	xPlayerPositions add: aDestinationBoardPosition.
	self playerOTakeTurn.
	! !

!testRun: #TerniLapilliTest #test14 stamp: 'HG 10/31/2020 17:34:58'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/31/2020 17:34:58'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/31/2020 17:34:58'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/31/2020 17:34:58'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/31/2020 17:34:58'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/31/2020 17:34:58'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/31/2020 17:34:58'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/31/2020 17:34:58'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/31/2020 17:34:58'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 17:34:58'!
ERROR!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/31/2020 17:34:58'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/31/2020 17:34:58'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 10/31/2020 17:34:58'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'HG 10/31/2020 17:34:58'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 10/31/2020 17:34:58'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 17:34:58'!
ERROR!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 17:35:06'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 10/31/2020 17:35:07'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/31/2020 17:35:07'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/31/2020 17:35:07'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/31/2020 17:35:07'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/31/2020 17:35:07'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/31/2020 17:35:07'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/31/2020 17:35:07'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/31/2020 17:35:07'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/31/2020 17:35:07'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 17:35:07'!
ERROR!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/31/2020 17:35:07'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/31/2020 17:35:07'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 10/31/2020 17:35:08'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'HG 10/31/2020 17:35:08'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 10/31/2020 17:35:08'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 17:35:08'!
ERROR!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 10/31/2020 17:35:13'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/31/2020 17:35:13'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/31/2020 17:35:13'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/31/2020 17:35:13'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/31/2020 17:35:13'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/31/2020 17:35:13'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/31/2020 17:35:13'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/31/2020 17:35:13'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/31/2020 17:35:13'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 17:35:13'!
ERROR!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/31/2020 17:35:13'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/31/2020 17:35:13'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 10/31/2020 17:35:13'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'HG 10/31/2020 17:35:13'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 10/31/2020 17:35:13'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 17:35:13'!
ERROR!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 17:35:19'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 10/31/2020 17:35:21'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/31/2020 17:35:21'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/31/2020 17:35:21'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/31/2020 17:35:21'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/31/2020 17:35:21'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/31/2020 17:35:21'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/31/2020 17:35:21'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/31/2020 17:35:21'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/31/2020 17:35:21'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 17:35:21'!
ERROR!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/31/2020 17:35:21'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/31/2020 17:35:21'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 10/31/2020 17:35:21'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'HG 10/31/2020 17:35:21'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 10/31/2020 17:35:21'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 17:35:21'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/31/2020 17:35:49' prior: 50865687!
test09
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@2.
	
	aTerniLapilliGame movePlayerXPositionFrom: 2@1 to: 3@1. 

	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@1).	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 3@1).
	self assert: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.
	! !

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 17:35:50'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/31/2020 17:37:27' prior: 50867012!
test09
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 2@2.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@2.
	
	aTerniLapilliGame movePlayerXPositionFrom: 2@2 to: 1@3. 

	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@2).	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@3).
	self assert: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.
	! !

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 17:37:28'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/31/2020 17:37:46' prior: 50867038!
test09
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 2@2.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 1@1.
	
	aTerniLapilliGame movePlayerXPositionFrom: 2@2 to: 1@3. 

	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@2).	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@3).
	self assert: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.
	! !

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 17:37:47'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/31/2020 17:39:10' prior: 50867064!
test09
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 2@2.
	aTerniLapilliGame putOAt: 3@1.
	
	aTerniLapilliGame movePlayerXPositionFrom: 2@2 to: 1@3. 

	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@2).	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@3).
	self assert: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.
	! !

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 17:39:11'!
FAILURE!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 17:39:15'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/31/2020 17:39:35' prior: 50867090!
test09
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 2@3.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 2@2.
	aTerniLapilliGame putOAt: 3@1.
	
	aTerniLapilliGame movePlayerXPositionFrom: 2@2 to: 1@3. 

	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@2).	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@3).
	self assert: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.
	! !

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 17:39:37'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/31/2020 17:39:37'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/31/2020 17:39:37'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/31/2020 17:39:37'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/31/2020 17:39:37'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/31/2020 17:39:37'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/31/2020 17:39:37'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/31/2020 17:39:37'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/31/2020 17:39:37'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 17:39:37'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/31/2020 17:39:37'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/31/2020 17:39:37'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 10/31/2020 17:39:37'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'HG 10/31/2020 17:39:37'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 10/31/2020 17:39:37'!
PASSED!
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 10/31/2020 17:43:48' prior: 50866199!
putXAt: aBoardPosition 

	self isPlayingX
		ifTrue: [
			(self isAnOccupiedPosition: aBoardPosition)
				ifFalse: [
					self addXPlayerPositionIn: aBoardPosition.
				] 
				ifTrue: [
					self error: self class InvalidPositionToPutChip. 	
				]
		]
		ifFalse: [
			self error: self class InvalidTurnErrorDescription. 
		]
	! !

----End fileIn of /Users/monteagudo/Downloads/DesignPatterns-Proxy.st----!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/31/2020 18:00:02'!
test15
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	
	self 
		should: [ aTerniLapilliGame movePlayerOPositionFrom: 1@2 to: 2@2.  ]
		raise: Error
		withMessageText: TerniLapilli cantMoveBeforePuttingAllChipsOnBoard.
		
			
	self assert: (aTerniLapilliGame isAnOPlayerPosition: 3@3).
	self deny: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	
	! !

!testRun: #TerniLapilliTest #test15 stamp: 'HG 10/31/2020 18:00:04'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/31/2020 18:00:14' prior: 50867343!
test15
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	
	self 
		should: [ aTerniLapilliGame movePlayerOPositionFrom: 1@2 to: 2@2.  ]
		raise: Error
		withMessageText: TerniLapilli cantMoveBeforePuttingAllChipsOnBoardErrorDescription.
		
			
	self assert: (aTerniLapilliGame isAnOPlayerPosition: 3@3).
	self deny: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	
	! !

!testRun: #TerniLapilliTest #test15 stamp: 'HG 10/31/2020 18:00:15'!
ERROR!

!testRun: #TerniLapilliTest #test15 stamp: 'HG 10/31/2020 18:00:30'!
ERROR!

!testRun: #TerniLapilliTest #test15 stamp: 'HG 10/31/2020 18:00:38'!
ERROR!
!TerniLapilli class methodsFor: 'error description' stamp: 'HG 10/31/2020 18:00:46'!
cantMoveBeforePuttingAllChipsOnBoardErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error description' stamp: 'HG 10/31/2020 18:01:02' prior: 50867396!
cantMoveBeforePuttingAllChipsOnBoardErrorDescription
	^'You cant move a chip before put all chips on board'.! !
!TerniLapilli methodsFor: 'moving' stamp: 'HG 10/31/2020 18:01:59' prior: 50866645!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self isPlayingO
		ifFalse: [
			self error: self class InvalidTurnErrorDescription. 
		].
	
	self allChipsOnBoard
		ifFalse: [
			self error: self cantMoveBeforePuttingAllChipsOnBoardErrorDescription 
			].
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
	
	oPlayerPositions add: aDestinationBoardPosition.
	oPlayerPositions remove: aSourceBoardPosition.
	self playerXTakeTurn.
	
	
	! !

!testRun: #TerniLapilliTest #test15 stamp: 'HG 10/31/2020 18:02:03'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/31/2020 18:02:15' prior: 50867367!
test15
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	
	self 
		should: [ aTerniLapilliGame movePlayerXPositionFrom: 1@1 to: 2@2.  ]
		raise: Error
		withMessageText: TerniLapilli cantMoveBeforePuttingAllChipsOnBoardErrorDescription.
		
			
	self assert: (aTerniLapilliGame isAnOPlayerPosition: 3@3).
	self deny: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	
	! !

!testRun: #TerniLapilliTest #test15 stamp: 'HG 10/31/2020 18:02:16'!
FAILURE!
!TerniLapilli methodsFor: 'moving' stamp: 'HG 10/31/2020 18:02:50' prior: 50866818!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self isPlayingX
		ifFalse: [
			self error: self class InvalidTurnErrorDescription. 
		].
	
	self allChipsOnBoard
		ifFalse: [
			self error: self cantMoveBeforePuttingAllChipsOnBoardErrorDescription 
			].
	
	(self isAnXPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
	
	
	(self isAnOccupiedPosition: aDestinationBoardPosition)
		ifTrue:[
			self error: self class InvalidDestinationPositionToMove. 
			].
		
	xPlayerPositions remove: aSourceBoardPosition.
	xPlayerPositions add: aDestinationBoardPosition.
	self playerOTakeTurn.
	! !
!TerniLapilli methodsFor: 'moving' stamp: 'HG 10/31/2020 18:03:01' prior: 50867409!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self isPlayingO
		ifFalse: [
			self error: self class InvalidTurnErrorDescription. 
		].
	
	self allChipsOnBoard
		ifFalse: [
			self error: self cantMoveBeforePuttingAllChipsOnBoardErrorDescription 
			].
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
	
	oPlayerPositions add: aDestinationBoardPosition.
	oPlayerPositions remove: aSourceBoardPosition.
	self playerXTakeTurn.
	
	
	! !
!TerniLapilli methodsFor: 'moving' stamp: 'HG 10/31/2020 18:03:14' prior: 50867481!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self isPlayingO
		ifFalse: [
			self error: self class InvalidTurnErrorDescription. 
		].
	
	self allChipsOnBoard
		ifFalse: [
			self error: self cantMoveBeforePuttingAllChipsOnBoardErrorDescription 
			].
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
	
	
	oPlayerPositions add: aDestinationBoardPosition.
	oPlayerPositions remove: aSourceBoardPosition.
	self playerXTakeTurn.
	
	
	! !
!TerniLapilli methodsFor: 'moving' stamp: 'HG 10/31/2020 18:03:30' prior: 50867505!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self isPlayingO
		ifFalse: [
			self error: self class InvalidTurnErrorDescription. 
		].
	
	self allChipsOnBoard
		ifFalse: [
			self error: self cantMoveBeforePuttingAllChipsOnBoardErrorDescription 
			].
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
	(self isAnOccupiedPosition: aDestinationBoardPosition)
		ifTrue:[
			self error: self class InvalidDestinationPositionToMove. 
			].
	
	oPlayerPositions add: aDestinationBoardPosition.
	oPlayerPositions remove: aSourceBoardPosition.
	self playerXTakeTurn.
	
	
	! !

!testRun: #TerniLapilliTest #test15 stamp: 'HG 10/31/2020 18:04:00'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 10/31/2020 18:04:57'!
allChipsOnBoard
	^(xPlayerPositions size = 3) and: (oPlayerPositions size = 3).! !

!testRun: #TerniLapilliTest #test15 stamp: 'HG 10/31/2020 18:05:01'!
FAILURE!
!TerniLapilli methodsFor: 'moving' stamp: 'HG 10/31/2020 18:05:21' prior: 50867457!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self isPlayingX
		ifFalse: [
			self error: self class InvalidTurnErrorDescription. 
		].
	
	self allChipsOnBoard
		ifFalse: [
			self error: self cantMoveBeforePuttingAllChipsOnBoardErrorDescription 
			].
	
	(self isAnXPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
	
	
	(self isAnOccupiedPosition: aDestinationBoardPosition)
		ifTrue:[
			self error: self class InvalidDestinationPositionToMove. 
			].
		
	xPlayerPositions remove: aSourceBoardPosition.
	xPlayerPositions add: aDestinationBoardPosition.
	self playerOTakeTurn.
	! !

!testRun: #TerniLapilliTest #test15 stamp: 'HG 10/31/2020 18:05:26'!
FAILURE!
!TerniLapilli methodsFor: 'moving' stamp: 'HG 10/31/2020 18:05:49' prior: 50867559!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self isPlayingX
		ifFalse: [
			self error: self class InvalidTurnErrorDescription. 
		].
	
	self allChipsOnBoard
		ifFalse: [
			self error: self class cantMoveBeforePuttingAllChipsOnBoardErrorDescription 
			].
	
	(self isAnXPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
	
	
	(self isAnOccupiedPosition: aDestinationBoardPosition)
		ifTrue:[
			self error: self class InvalidDestinationPositionToMove. 
			].
		
	xPlayerPositions remove: aSourceBoardPosition.
	xPlayerPositions add: aDestinationBoardPosition.
	self playerOTakeTurn.
	! !
!TerniLapilli methodsFor: 'moving' stamp: 'HG 10/31/2020 18:06:02' prior: 50867525!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self isPlayingO
		ifFalse: [
			self error: self class InvalidTurnErrorDescription. 
		].
	
	self allChipsOnBoard
		ifFalse: [
			self error: self class cantMoveBeforePuttingAllChipsOnBoardErrorDescription 
			].
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
	(self isAnOccupiedPosition: aDestinationBoardPosition)
		ifTrue:[
			self error: self class InvalidDestinationPositionToMove. 
			].
	
	oPlayerPositions add: aDestinationBoardPosition.
	oPlayerPositions remove: aSourceBoardPosition.
	self playerXTakeTurn.
	
	
	! !

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/31/2020 18:06:11'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/31/2020 18:06:11'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/31/2020 18:06:11'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/31/2020 18:06:11'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/31/2020 18:06:11'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/31/2020 18:06:11'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/31/2020 18:06:11'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/31/2020 18:06:11'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/31/2020 18:06:11'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 18:06:11'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/31/2020 18:06:11'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/31/2020 18:06:11'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 10/31/2020 18:06:11'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'HG 10/31/2020 18:06:11'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 10/31/2020 18:06:11'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'HG 10/31/2020 18:06:11'!
FAILURE!

!testRun: #TerniLapilliTest #test15 stamp: 'HG 10/31/2020 18:06:11'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 10/31/2020 18:06:39' prior: 50867432!
test15
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	
	self 
		should: [ aTerniLapilliGame movePlayerXPositionFrom: 1@1 to: 2@2.  ]
		raise: Error
		withMessageText: TerniLapilli cantMoveBeforePuttingAllChipsOnBoardErrorDescription.
		
			
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self deny: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	
	! !

!testRun: #TerniLapilliTest #test15 stamp: 'HG 10/31/2020 18:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 10/31/2020 18:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 10/31/2020 18:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 10/31/2020 18:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 10/31/2020 18:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 10/31/2020 18:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 10/31/2020 18:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 10/31/2020 18:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 10/31/2020 18:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 10/31/2020 18:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 10/31/2020 18:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 10/31/2020 18:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 10/31/2020 18:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'HG 10/31/2020 18:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 10/31/2020 18:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'HG 10/31/2020 18:06:40'!
PASSED!
!DecoratorExamples methodsFor: 'examples' stamp: 'HG 10/31/2020 18:26:24'!
exampleDecoracionSimpleConTraceDecorator

	"Recordar de abrir el Transcript para ver que se tracea - Hernan"
	
	| connection |
	
	connection := TracedConnectionDecorator decorating: TCPConnection new.
	
	connection send: 'Hola'.
	connection send: 'Chau'.
	connection close.! !
!DecoratorExamples methodsFor: 'examples' stamp: 'HG 10/31/2020 18:26:33' prior: 50867745!
exampleDecoracionSimpleConTraceDecorator

	"Recordar de abrir el Transcript para ver que se tracea - Hernan"
	
	| connection |
	
	connection := TracedConnectionDecorator decorating: TCPConnection new.
	
	connection send: 'Hola'.
	connection send: 'Chau'.
	connection close.! !

----End fileIn of /Users/monteagudo/Desktop/Inge1/17-TerniLapilli/TerniLapilliGame.st----!

!classRemoval: #TerniLapilli stamp: 'HG 11/1/2020 18:48:46'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'turn xPlayerPositions oPlayerPositions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!

!classRemoval: #TerniLapilliTest stamp: 'HG 11/1/2020 18:48:47'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!

----End fileIn of /Users/monteagudo/Desktop/Inge1/17-TerniLapilli/TerniLapilliGame.st----!
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 18:50:39' prior: 50869047!
addXPlayerPositionIn: aBoardPosition

	turn _ #O.
	xPlayerPositions add: aBoardPosition! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 18:50:44' prior: 50869041!
addOPlayerPositionIn: aBoardPosition

	turn _ #X.
	oPlayerPositions add: aBoardPosition! !

Object subclass: #TerniLapilliTurnState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!

!classDefinition: #TerniLapilliTurnState category: #TerniLapilliGame stamp: 'HG 11/1/2020 18:51:38'!
Object subclass: #TerniLapilliTurnState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!

TerniLapilliTurnState subclass: #XPlayerTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!

!classDefinition: #XPlayerTurn category: #TerniLapilliGame stamp: 'HG 11/1/2020 18:52:03'!
TerniLapilliTurnState subclass: #XPlayerTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!

TerniLapilliTurnState subclass: #OPlayerTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!

!classDefinition: #OPlayerTurn category: #TerniLapilliGame stamp: 'HG 11/1/2020 18:52:07'!
TerniLapilliTurnState subclass: #OPlayerTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!

!classDefinition: #TerniLapilli category: #TerniLapilliGame stamp: 'HG 11/1/2020 18:52:52'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'turn xPlayerPositions oPlayerPositions turnState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!
!TerniLapilli methodsFor: 'initialization' stamp: 'HG 11/1/2020 18:52:51' prior: 50869087 overrides: 16896425!
initialize
	turnState _ XPlayerTurn new.
	oPlayerPositions _ OrderedCollection new.
	xPlayerPositions _ OrderedCollection new.! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'xPlayerPositions oPlayerPositions turnState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!

!classDefinition: #TerniLapilli category: #TerniLapilliGame stamp: 'HG 11/1/2020 18:53:00'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'xPlayerPositions oPlayerPositions turnState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!
!TerniLapilli methodsFor: 'initialization' stamp: 'HG 11/1/2020 18:53:46' prior: 50869338 overrides: 16896425!
initialize
	turnState _ XPlayerTurn with: self.
	oPlayerPositions _ OrderedCollection new.
	xPlayerPositions _ OrderedCollection new.! !
!TerniLapilliTurnState class methodsFor: 'nil' stamp: 'HG 11/1/2020 18:54:46'!
with: aTerniLapilliGame
	self new initializeWithGame: aTerniLapilliGame.! !

!classDefinition: #TerniLapilliTurnState category: #TerniLapilliGame stamp: 'HG 11/1/2020 18:55:30'!
Object subclass: #TerniLapilliTurnState
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!
!TerniLapilliTurnState methodsFor: 'initialization' stamp: 'HG 11/1/2020 18:55:28'!
initializeWithGame: aTerniLapilliGame
	game _ aTerniLapilliGame. ! !
!TerniLapilliTurnState methodsFor: 'turn actions' stamp: 'HG 11/1/2020 18:59:14'!
putOAt: aGameBoardPosition
	self subclassResponsibility. ! !
!TerniLapilliTurnState methodsFor: 'turn actions' stamp: 'HG 11/1/2020 18:59:25' prior: 50869385!
putOAt: aGameBoardPosition
	self subclassResponsibility. ! !
!TerniLapilliTurnState methodsFor: 'turn actions' stamp: 'HG 11/1/2020 18:59:27'!
putXAt: aGameBoardPosition
	self subclassResponsibility. ! !
!OPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 19:00:04' overrides: 50869395!
putXAt: asd! !
!OPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 19:00:18' prior: 50869400 overrides: 50869395!
putXAt: aGameBoardPosition
	^self shouldBeImplemented .! !
!OPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 19:00:23' overrides: 50869390!
putOAt: aGameBoardPosition
	^self shouldBeImplemented .! !
!XPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 19:00:32' overrides: 50869390!
putOAt: aGameBoardPosition
	^self shouldBeImplemented .! !
!XPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 19:00:44' prior: 50869414 overrides: 50869390!
putOAt: aGameBoardPosition
	^self shouldBeImplemented .! !
!XPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 19:00:53' overrides: 50869395!
putXAt: aGameBoardPosition
	^self shouldBeImplemented .! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:01:35'!
signalInvalidTurnError

	^ self error: self class InvalidTurnErrorDescription! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:01:35' prior: 50869070!
putXAt: aBoardPosition 
	(self class isValidPosition: aBoardPosition) ifFalse: [self error: self class invalidBoardPosition ].
	
	self isPlayingX
		ifTrue: [
			(self isAnOccupiedPosition: aBoardPosition)
				ifFalse: [
					self addXPlayerPositionIn: aBoardPosition.
				] 
				ifTrue: [
					self error: self class InvalidPositionToPutChip. 	
				]
		]
		ifFalse: [
			self signalInvalidTurnError. 
		].
	
	
	! !
!OPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 19:01:51' prior: 50869404 overrides: 50869395!
putXAt: aGameBoardPosition
	game signalInvalidTurnError.! !
!XPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 19:02:03' prior: 50869420 overrides: 50869390!
putOAt: aGameBoardPosition
	game signalInvalidTurnError.! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:03:12' prior: 50869053!
putOAt: aBoardPosition 
	(self class isValidPosition: aBoardPosition) ifFalse: [self error: self class invalidBoardPosition ].
				
	self isPlayingO
		ifTrue: [
			(self isAnOccupiedPosition: aBoardPosition)
				ifFalse: [
					self addOPlayerPositionIn: aBoardPosition.
				] 
				ifTrue: [
					self error: self class InvalidPositionToPutChip. 	
				]
			
		]
		ifFalse: [
			self signalInvalidTurnError. 
		]
	
	
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:05:37'!
putOnOPlayerTurnAt: aBoardPosition

	^ (self isAnOccupiedPosition: aBoardPosition)
				ifFalse: [
					self addOPlayerPositionIn: aBoardPosition.
				] 
				ifTrue: [
					self error: self class InvalidPositionToPutChip. 	
				]! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:05:37' prior: 50869464!
putOAt: aBoardPosition 
	(self class isValidPosition: aBoardPosition) ifFalse: [self error: self class invalidBoardPosition ].
				
	self isPlayingO
		ifTrue: [
			self putOnOPlayerTurnAt: aBoardPosition
			
		]
		ifFalse: [
			self signalInvalidTurnError. 
		]
	
	
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:05:53' prior: 50869480!
putOnOPlayerTurnAt: aBoardPosition

	^ (self isAnOccupiedPosition: aBoardPosition)
				ifFalse: [
					self addOPlayerPositionIn: aBoardPosition.
				] 
				ifTrue: [
					self error: self class InvalidPositionToPutChip. 	
				]! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:06:08'!
putOnXPlayerTurnAt: aBoardPosition

	^ (self isAnOccupiedPosition: aBoardPosition)
				ifFalse: [
					self addXPlayerPositionIn: aBoardPosition.
				] 
				ifTrue: [
					self error: self class InvalidPositionToPutChip. 	
				]! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:06:08' prior: 50869436!
putXAt: aBoardPosition 
	(self class isValidPosition: aBoardPosition) ifFalse: [self error: self class invalidBoardPosition ].
	
	self isPlayingX
		ifTrue: [
			self putOnXPlayerTurnAt: aBoardPosition
		]
		ifFalse: [
			self signalInvalidTurnError. 
		].
	
	
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:06:45' prior: 50869524!
putXAt: aBoardPosition 
	(self class isValidPosition: aBoardPosition) ifFalse: [self error: self class invalidBoardPosition ].
	
	self isPlayingX
		ifTrue: [
			self putOnXPlayerTurnAt: aBoardPosition
		]
		ifFalse: [
			self signalInvalidTurnError. 
		].
	
	
	! !
!XPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 19:07:00' prior: 50869425 overrides: 50869395!
putXAt: aGameBoardPosition
	game putOnXPlayerTurnAt: aGameBoardPosition.! !
!OPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 19:07:13' prior: 50869409 overrides: 50869390!
putOAt: aGameBoardPosition
	^self shouldBeImplemented .! !
!OPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 19:07:24' prior: 50869554 overrides: 50869390!
putOAt: aGameBoardPosition
	game putOnOPlayerTurnAt: aGameBoardPosition.! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:08:16' prior: 50869536!
putXAt: aBoardPosition 
	
	(self class isValidPosition: aBoardPosition) 
		ifFalse: [self error: self class invalidBoardPosition ].
	
	turnState putXAt: aBoardPosition.
	
	
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:08:36' prior: 50869491!
putOAt: aBoardPosition 
	(self class isValidPosition: aBoardPosition) ifFalse: [self error: self class invalidBoardPosition ].
				
	turnState putOAt: aBoardPosition.

	
	
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:10:28' prior: 50869503!
putOnOPlayerTurnAt: aBoardPosition

	^ (self isAnOccupiedPosition: aBoardPosition)
				ifFalse: [
					turnState _ XPlayerTurn with: self.
					oPlayerPositions add: aBoardPosition
				] 
				ifTrue: [
					self error: self class InvalidPositionToPutChip. 	
				]! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:10:44' prior: 50869584!
putOnOPlayerTurnAt: aBoardPosition

	^ (self isAnOccupiedPosition: aBoardPosition)
				ifFalse: [
					turnState _ XPlayerTurn with: self.
					oPlayerPositions add: aBoardPosition
				] 
				ifTrue: [
					self error: self class InvalidPositionToPutChip. 	
				]! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:11:18' prior: 50869280!
addXPlayerPositionIn: aBoardPosition

	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:11:39' prior: 50869513!
putOnXPlayerTurnAt: aBoardPosition

	^ (self isAnOccupiedPosition: aBoardPosition)
				ifFalse: [
					turnState _ OPlayerTurn with: self.
					xPlayerPositions add: aBoardPosition
				] 
				ifTrue: [
					self error: self class InvalidPositionToPutChip. 	
				]! !

!methodRemoval: TerniLapilli #addXPlayerPositionIn: stamp: 'HG 11/1/2020 19:11:43'!
addXPlayerPositionIn: aBoardPosition

	!

!methodRemoval: TerniLapilli #addOPlayerPositionIn: stamp: 'HG 11/1/2020 19:11:45'!
addOPlayerPositionIn: aBoardPosition

	turn _ #X.
	oPlayerPositions add: aBoardPosition!
!TerniLapilli methodsFor: 'accessing -- private' stamp: 'HG 11/1/2020 19:12:57' prior: 50869613!
putOnXPlayerTurnAt: aBoardPosition

	(self isAnOccupiedPosition: aBoardPosition)
		ifTrue: [ self error: self class InvalidPositionToPutChip. ].
		
	turnState _ OPlayerTurn with: self.
	xPlayerPositions add: aBoardPosition! !
!TerniLapilli methodsFor: 'accessing -- private' stamp: 'HG 11/1/2020 19:13:15'!
signalOccupiedPositionToPutError

	^ self error: self class InvalidPositionToPutChip! !
!TerniLapilli methodsFor: 'accessing -- private' stamp: 'HG 11/1/2020 19:13:15' prior: 50869634!
putOnXPlayerTurnAt: aBoardPosition

	(self isAnOccupiedPosition: aBoardPosition)
		ifTrue: [ self signalOccupiedPositionToPutError. ].
		
	turnState _ OPlayerTurn with: self.
	xPlayerPositions add: aBoardPosition! !
!TerniLapilli methodsFor: 'accessing -- private' stamp: 'HG 11/1/2020 19:13:23' prior: 50869650!
putOnXPlayerTurnAt: aBoardPosition

	(self isAnOccupiedPosition: aBoardPosition)
		ifTrue: [ self signalOccupiedPositionToPutError. ].
		
	turnState _ OPlayerTurn with: self.
	xPlayerPositions add: aBoardPosition.! !
!TerniLapilli methodsFor: 'accessing -- private' stamp: 'HG 11/1/2020 19:14:06' prior: 50869596!
putOnOPlayerTurnAt: aBoardPosition

	(self isAnOccupiedPosition: aBoardPosition)
		ifTrue: [ self error: self class InvalidPositionToPutChip. ].
		
	turnState _ XPlayerTurn with: self.
	oPlayerPositions add: aBoardPosition.! !
!TerniLapilli methodsFor: 'accessing -- private' stamp: 'HG 11/1/2020 19:14:18' prior: 50869670!
putOnOPlayerTurnAt: aBoardPosition

	(self isAnOccupiedPosition: aBoardPosition)
		ifTrue: [ self signalOccupiedPositionToPutError. ].
		
	turnState _ XPlayerTurn with: self.
	oPlayerPositions add: aBoardPosition.! !
!TerniLapilli class methodsFor: 'error description' stamp: 'HG 11/1/2020 19:15:00'!
OccupiedPositionToPutChip
	^'Is an invalid position to put a chip on board'.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/1/2020 19:15:01' prior: 50868725!
test11
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	
	self 
		should: [ aTerniLapilliGame putOAt: 1@1. ]
		raise: Error
		withMessageText: TerniLapilli OccupiedPositionToPutChip.
		
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).	
	self deny: (aTerniLapilliGame isAnOPlayerPosition: 1@1).
	self assert: aTerniLapilliGame isPlayingO.
	self deny: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'HG 11/1/2020 19:15:01' prior: 50869644!
signalOccupiedPositionToPutError

	^ self error: self class OccupiedPositionToPutChip! !

!methodRemoval: TerniLapilli class #InvalidPositionToPutChip stamp: 'HG 11/1/2020 19:15:01'!
InvalidPositionToPutChip
	^'Is an invalid position to put a chip on board'.!
!TerniLapilli class methodsFor: 'error description' stamp: 'HG 11/1/2020 19:15:09' prior: 50869691!
OccupiedPositionToPutChip
	^'Is an occupied position to put a chip on board'.! !
!TerniLapilli class methodsFor: 'error description' stamp: 'HG 11/1/2020 19:15:22' prior: 50869730!
OccupiedPositionToPutChip
	^'Is an occupied position to put a chip on board'.! !
!TerniLapilli class methodsFor: 'error description' stamp: 'HG 11/1/2020 19:15:48'!
occupiedPositionErrorDescription
	^'Is an occupied position to put a chip on board'.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'HG 11/1/2020 19:15:48' prior: 50869718!
signalOccupiedPositionToPutError

	^ self error: self class occupiedPositionErrorDescription! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/1/2020 19:15:48' prior: 50869697!
test11
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	
	self 
		should: [ aTerniLapilliGame putOAt: 1@1. ]
		raise: Error
		withMessageText: TerniLapilli occupiedPositionErrorDescription.
		
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).	
	self deny: (aTerniLapilliGame isAnOPlayerPosition: 1@1).
	self assert: aTerniLapilliGame isPlayingO.
	self deny: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	! !

!methodRemoval: TerniLapilli class #OccupiedPositionToPutChip stamp: 'HG 11/1/2020 19:15:48'!
OccupiedPositionToPutChip
	^'Is an occupied position to put a chip on board'.!
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:16:47' prior: 50869566!
putXAt: aBoardPosition 
	
	(self class isValidPosition: aBoardPosition) 
		ifFalse: [ self error: self class invalidBoardPosition ].
	
	turnState putXAt: aBoardPosition.
	
	
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:17:56'!
signalInvalidBoardPosition

	^ self error: self class invalidBoardPosition! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:17:56' prior: 50869782!
putXAt: aBoardPosition 
	
	(self class isValidPosition: aBoardPosition) 
		ifFalse: [ self signalInvalidBoardPosition ].
	
	turnState putXAt: aBoardPosition.
	
	
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:18:00' prior: 50869796!
putXAt: aBoardPosition 
	
	(self class isValidPosition: aBoardPosition) 
		ifFalse: [ self signalInvalidBoardPosition. ].
	
	turnState putXAt: aBoardPosition.
	
	
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:18:26' prior: 50869575!
putOAt: aBoardPosition 
	
	(self class isValidPosition: aBoardPosition) 
		ifFalse: [ self signalInvalidBoardPosition. ].
				
	turnState putOAt: aBoardPosition.

	
	
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:18:30' prior: 50869813!
putOAt: aBoardPosition 
	
	(self class isValidPosition: aBoardPosition) 
		ifFalse: [ self signalInvalidBoardPosition. ].
	turnState putOAt: aBoardPosition.

	
	
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:18:32' prior: 50869822!
putOAt: aBoardPosition 
	
	(self class isValidPosition: aBoardPosition) 
		ifFalse: [ self signalInvalidBoardPosition. ].
		
	turnState putOAt: aBoardPosition.

	
	
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:19:19'!
validBoardPositionCheck: aBoardPosition

	^ (self class isValidPosition: aBoardPosition) 
		ifFalse: [ self signalInvalidBoardPosition. ]! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:19:20' prior: 50869804!
putXAt: aBoardPosition 
	
	self validBoardPositionCheck: aBoardPosition.
	
	turnState putXAt: aBoardPosition.
	
	
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:19:25' prior: 50869846!
putXAt: aBoardPosition 
	
	self validBoardPositionCheck: aBoardPosition.
	turnState putXAt: aBoardPosition.
	
	
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:19:33' prior: 50869830!
putOAt: aBoardPosition 
	
	self validBoardPositionCheck: aBoardPosition.	
	turnState putOAt: aBoardPosition.

	
	
	! !
!TerniLapilli methodsFor: 'accessing -- private' stamp: 'HG 11/1/2020 19:21:30'!
occupiedBoardPositionCheck: aBoardPosition

	^ (self isAnOccupiedPosition: aBoardPosition)
		ifTrue: [ self signalOccupiedPositionToPutError. ]! !
!TerniLapilli methodsFor: 'accessing -- private' stamp: 'HG 11/1/2020 19:21:30' prior: 50869660!
putOnXPlayerTurnAt: aBoardPosition

	self occupiedBoardPositionCheck: aBoardPosition.
		
	turnState _ OPlayerTurn with: self.
	xPlayerPositions add: aBoardPosition.! !
!TerniLapilli methodsFor: 'accessing -- private' stamp: 'HG 11/1/2020 19:21:42' prior: 50869681!
putOnOPlayerTurnAt: aBoardPosition

	self occupiedBoardPositionCheck: aBoardPosition.
		
	turnState _ XPlayerTurn with: self.
	oPlayerPositions add: aBoardPosition.! !

!methodRemoval: TerniLapilli #isPlayingO stamp: 'HG 11/1/2020 19:22:02'!
isPlayingO
	^turn = #O.!

!methodRemoval: TerniLapilli #isPlayingX stamp: 'HG 11/1/2020 19:22:09'!
isPlayingX
	^turn = #X.!

!methodRemoval: TerniLapilli #playerOTakeTurn stamp: 'HG 11/1/2020 19:22:46'!
playerOTakeTurn

	^ turn _ #O!

!methodRemoval: TerniLapilli #playerXTakeTurn stamp: 'HG 11/1/2020 19:22:48'!
playerXTakeTurn

	^ turn _ #X!
!TerniLapilliTurnState methodsFor: 'turn actions' stamp: 'HG 11/1/2020 19:24:58'!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	self subclassResponsibility. ! !
!TerniLapilliTurnState methodsFor: 'turn actions' stamp: 'HG 11/1/2020 19:25:04'!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	self subclassResponsibility. ! !
!OPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 19:25:28' overrides: 50869912!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	self shouldBeImplemented .! !
!OPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 19:25:51' prior: 50869919 overrides: 50869912!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	game signalInvalidTurnError.! !
!OPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 19:25:56' overrides: 50869905!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	game signalInvalidTurnError.! !
!OPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 19:26:01' prior: 50869933 overrides: 50869905!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	self shouldBeImplemented. ! !
!XPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 19:26:09' overrides: 50869905!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	self shouldBeImplemented. ! !
!XPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 19:26:13' overrides: 50869912!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	self shouldBeImplemented. ! !
!XPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 19:26:21' prior: 50869954 overrides: 50869912!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	self shouldBeImplemented. ! !
!XPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 19:26:29' prior: 50869947 overrides: 50869905!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	game signalInvalidTurnError. ! !
!TerniLapilli methodsFor: 'exceptions' stamp: 'HG 11/1/2020 19:26:55'!
signalInvalidTurn

	^ self error: self class InvalidTurnErrorDescription! !
!OPlayerTurn methodsFor: 'as yet unclassified' stamp: 'HG 11/1/2020 19:26:55' prior: 50869453 overrides: 50869395!
putXAt: aGameBoardPosition
	game signalInvalidTurn.! !
!OPlayerTurn methodsFor: 'as yet unclassified' stamp: 'HG 11/1/2020 19:26:55' prior: 50869926 overrides: 50869912!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	game signalInvalidTurn.! !
!XPlayerTurn methodsFor: 'as yet unclassified' stamp: 'HG 11/1/2020 19:26:55' prior: 50869968 overrides: 50869905!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	game signalInvalidTurn. ! !
!XPlayerTurn methodsFor: 'as yet unclassified' stamp: 'HG 11/1/2020 19:26:55' prior: 50869459 overrides: 50869390!
putOAt: aGameBoardPosition
	game signalInvalidTurn.! !

!methodRemoval: TerniLapilli #signalInvalidTurnError stamp: 'HG 11/1/2020 19:26:55'!
signalInvalidTurnError

	^ self error: self class InvalidTurnErrorDescription!
!TerniLapilli methodsFor: 'exceptions' stamp: 'HG 11/1/2020 19:27:12'!
signalOccupiedPosition

	^ self error: self class occupiedPositionErrorDescription! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'HG 11/1/2020 19:27:12' prior: 50869867!
occupiedBoardPositionCheck: aBoardPosition

	^ (self isAnOccupiedPosition: aBoardPosition)
		ifTrue: [ self signalOccupiedPosition. ]! !

!methodRemoval: TerniLapilli #signalOccupiedPositionToPutError stamp: 'HG 11/1/2020 19:27:12'!
signalOccupiedPositionToPutError

	^ self error: self class occupiedPositionErrorDescription!
!TerniLapilli methodsFor: 'moving' stamp: 'HG 11/1/2020 19:27:54' prior: 50869143!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	turnState movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition. 
	
	self allChipsOnBoard
		ifFalse: [
			self error: self class cantMoveBeforePuttingAllChipsOnBoardErrorDescription 
			].
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
	(self isAnOccupiedPosition: aDestinationBoardPosition)
		ifTrue:[
			self error: self class InvalidDestinationPositionToMove. 
			].
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[self error: self class invalidMovementErrorDescription ].
		
	oPlayerPositions add: aDestinationBoardPosition.
	oPlayerPositions remove: aSourceBoardPosition.
	self playerXTakeTurn.
	
	
	! !
!TerniLapilli methodsFor: 'moving' stamp: 'HG 11/1/2020 19:28:12' prior: 50870029!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	turnState movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition. 
	
	
	
	
	! !
!TerniLapilli methodsFor: 'moving' stamp: 'HG 11/1/2020 19:28:35' prior: 50870058!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	turnState movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition.
	
	self allChipsOnBoard
		ifFalse: [
			self error: self class cantMoveBeforePuttingAllChipsOnBoardErrorDescription 
			].
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
	(self isAnOccupiedPosition: aDestinationBoardPosition)
		ifTrue:[
			self error: self class InvalidDestinationPositionToMove. 
			].
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[self error: self class invalidMovementErrorDescription ].
		
	oPlayerPositions add: aDestinationBoardPosition.
	oPlayerPositions remove: aSourceBoardPosition.
	self playerXTakeTurn.
	
	
	! !
!OPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 19:29:43' prior: 50869940 overrides: 50869905!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	game moveOnOPlayerTurnFrom: aSourceBoardPosition to: aDestinationBoardPosition.! !
!XPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 19:30:02' prior: 50869961 overrides: 50869912!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	game moveOnXPlayerTurnFrom: aSourceBoardPosition to: aDestinationBoardPosition. ! !
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 19:30:45'!
moveOnXPlayerTurnFrom: aSourceDestin! !
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 19:31:07'!
moveOnXPlayerTurnFrom: aSourceBoardPosition to: aDestinationBoardPosition
! !
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 19:31:12'!
moveOnOPlayerTurnFrom: aSourceBoardPosition to: aDestinationBoardPosition
! !

!methodRemoval: TerniLapilli #moveOnXPlayerTurnFrom: stamp: 'HG 11/1/2020 19:31:15'!
moveOnXPlayerTurnFrom: aSourceDestin!
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:31:44' prior: 50870067!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	turnState movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition.
	
	
	
	! !
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 19:31:52' prior: 50870124!
moveOnOPlayerTurnFrom: aSourceBoardPosition to: aDestinationBoardPosition
	
	self allChipsOnBoard
		ifFalse: [
			self error: self class cantMoveBeforePuttingAllChipsOnBoardErrorDescription 
			].
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
	(self isAnOccupiedPosition: aDestinationBoardPosition)
		ifTrue:[
			self error: self class InvalidDestinationPositionToMove. 
			].
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[self error: self class invalidMovementErrorDescription ].
		
	oPlayerPositions add: aDestinationBoardPosition.
	oPlayerPositions remove: aSourceBoardPosition.
	self playerXTakeTurn.! !
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 19:32:48' prior: 50870143!
moveOnOPlayerTurnFrom: aSourceBoardPosition to: aDestinationBoardPosition
	
	self allChipsOnBoard
		ifFalse: [
			self error: self class cantMoveBeforePuttingAllChipsOnBoardErrorDescription 
			].
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
	(self isAnOccupiedPosition: aDestinationBoardPosition)
		ifTrue:[
			self error: self class InvalidDestinationPositionToMove. 
			].
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[self error: self class invalidMovementErrorDescription ].
		
	oPlayerPositions add: aDestinationBoardPosition.
	oPlayerPositions remove: aSourceBoardPosition.
	
	turnState _ XPlayerTurn with: self.! !
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 19:33:07' prior: 50870118!
moveOnXPlayerTurnFrom: aSourceBoardPosition to: aDestinationBoardPosition

	
	self allChipsOnBoard
		ifFalse: [
			self error: self class cantMoveBeforePuttingAllChipsOnBoardErrorDescription 
			].
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
	(self isAnOccupiedPosition: aDestinationBoardPosition)
		ifTrue:[
			self error: self class InvalidDestinationPositionToMove. 
			].
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[self error: self class invalidMovementErrorDescription ].
		
	oPlayerPositions add: aDestinationBoardPosition.
	oPlayerPositions remove: aSourceBoardPosition.
	
	turnState _ OPlayerTurn with: self.! !
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 19:33:25' prior: 50870197!
moveOnXPlayerTurnFrom: aSourceBoardPosition to: aDestinationBoardPosition

	
	self allChipsOnBoard
		ifFalse: [
			self error: self class cantMoveBeforePuttingAllChipsOnBoardErrorDescription 
			].
	
	(self isAnXPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
	(self isAnOccupiedPosition: aDestinationBoardPosition)
		ifTrue:[
			self error: self class InvalidDestinationPositionToMove. 
			].
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[self error: self class invalidMovementErrorDescription ].
		
	xPlayerPositions add: aDestinationBoardPosition.
	xPlayerPositions remove: aSourceBoardPosition.
	
	turnState _ OPlayerTurn with: self.! !
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 19:36:17' prior: 50870170!
moveOnOPlayerTurnFrom: aSourceBoardPosition to: aDestinationBoardPosition
	
	self allChipsOnBoard
		ifFalse: [
			self error: self class cantMoveBeforePuttingAllChipsOnBoardErrorDescription 
			].
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
	
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[self error: self class invalidMovementErrorDescription ].
	
	self putOnOPlayerTurnAt: aDestinationBoardPosition. 
	oPlayerPositions remove: aSourceBoardPosition.
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:27:54' prior: 50870134!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	turnState movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition. 
	
	self allChipsOnBoard
		ifFalse: [
			self error: self class cantMoveBeforePuttingAllChipsOnBoardErrorDescription 
			].
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
	(self isAnOccupiedPosition: aDestinationBoardPosition)
		ifTrue:[
			self error: self class InvalidDestinationPositionToMove. 
			].
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[self error: self class invalidMovementErrorDescription ].
		
	oPlayerPositions add: aDestinationBoardPosition.
	oPlayerPositions remove: aSourceBoardPosition.
	self playerXTakeTurn.
	
	
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:36:46' prior: 50870273!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self allChipsOnBoard
		ifFalse: [
			self error: self class cantMoveBeforePuttingAllChipsOnBoardErrorDescription 
			].
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
	(self isAnOccupiedPosition: aDestinationBoardPosition)
		ifTrue:[
			self error: self class InvalidDestinationPositionToMove. 
			].
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[self error: self class invalidMovementErrorDescription ].
		
	oPlayerPositions add: aDestinationBoardPosition.
	oPlayerPositions remove: aSourceBoardPosition.
	self playerXTakeTurn.
	
	
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:37:23' prior: 50870302!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self allChipsOnBoard
		ifFalse: [
			self error: self class cantMoveBeforePuttingAllChipsOnBoardErrorDescription 
			].
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[self error: self class invalidMovementErrorDescription ].
		
	self putOAt: aDestinationBoardPosition. 
	oPlayerPositions remove: aSourceBoardPosition.
	
	
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:37:57' prior: 50869172!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self isPlayingX
		ifFalse: [
			self error: self class InvalidTurnErrorDescription. 
		].
	
	self allChipsOnBoard
		ifFalse: [
			self error: self class cantMoveBeforePuttingAllChipsOnBoardErrorDescription 
			].
	
	(self isAnXPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
	
	
	(self isAnOccupiedPosition: aDestinationBoardPosition)
		ifTrue:[
			self error: self class InvalidDestinationPositionToMove. 
			].
	
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[self error: self class invalidMovementErrorDescription ].
		
	self putXAt: aDestinationBoardPosition. 
	xPlayerPositions remove: aSourceBoardPosition.
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:38:03' prior: 50870349!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self isPlayingX
		ifFalse: [
			self error: self class InvalidTurnErrorDescription. 
		].
	
	self allChipsOnBoard
		ifFalse: [
			self error: self class cantMoveBeforePuttingAllChipsOnBoardErrorDescription 
			].
	
	(self isAnXPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
	
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[self error: self class invalidMovementErrorDescription ].
		
	self putXAt: aDestinationBoardPosition. 
	xPlayerPositions remove: aSourceBoardPosition.
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:38:21' prior: 50870377!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self allChipsOnBoard
		ifFalse: [
			self error: self class cantMoveBeforePuttingAllChipsOnBoardErrorDescription 
			].
	
	(self isAnXPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
	
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[self error: self class invalidMovementErrorDescription ].
		
	self putXAt: aDestinationBoardPosition. 
	xPlayerPositions remove: aSourceBoardPosition.
	! !

!methodRemoval: TerniLapilli #moveOnXPlayerTurnFrom:to: stamp: 'HG 11/1/2020 19:38:33'!
moveOnXPlayerTurnFrom: aSourceBoardPosition to: aDestinationBoardPosition

	
	self allChipsOnBoard
		ifFalse: [
			self error: self class cantMoveBeforePuttingAllChipsOnBoardErrorDescription 
			].
	
	(self isAnXPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
	(self isAnOccupiedPosition: aDestinationBoardPosition)
		ifTrue:[
			self error: self class InvalidDestinationPositionToMove. 
			].
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[self error: self class invalidMovementErrorDescription ].
		
	xPlayerPositions add: aDestinationBoardPosition.
	xPlayerPositions remove: aSourceBoardPosition.
	
	turnState _ OPlayerTurn with: self.!

!methodRemoval: TerniLapilli #moveOnOPlayerTurnFrom:to: stamp: 'HG 11/1/2020 19:38:36'!
moveOnOPlayerTurnFrom: aSourceBoardPosition to: aDestinationBoardPosition
	
	self allChipsOnBoard
		ifFalse: [
			self error: self class cantMoveBeforePuttingAllChipsOnBoardErrorDescription 
			].
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
	
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[self error: self class invalidMovementErrorDescription ].
	
	self putOnOPlayerTurnAt: aDestinationBoardPosition. 
	oPlayerPositions remove: aSourceBoardPosition.
	!

!methodRemoval: OPlayerTurn #movePlayerOPositionFrom:to: stamp: 'HG 11/1/2020 19:38:41'!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	game moveOnOPlayerTurnFrom: aSourceBoardPosition to: aDestinationBoardPosition.!

!methodRemoval: OPlayerTurn #movePlayerXPositionFrom:to: stamp: 'HG 11/1/2020 19:38:43'!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	game signalInvalidTurn.!

!methodRemoval: XPlayerTurn #movePlayerOPositionFrom:to: stamp: 'HG 11/1/2020 19:38:47'!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	game signalInvalidTurn. !

!methodRemoval: XPlayerTurn #movePlayerXPositionFrom:to: stamp: 'HG 11/1/2020 19:38:49'!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	game moveOnXPlayerTurnFrom: aSourceBoardPosition to: aDestinationBoardPosition. !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:39:44'!
signalMovingBeforeAllChipsOnBoard

	^ self error: self class cantMoveBeforePuttingAllChipsOnBoardErrorDescription! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:39:44' prior: 50870328!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self allChipsOnBoard
		ifFalse: [
			self signalMovingBeforeAllChipsOnBoard 
			].
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[self error: self class invalidMovementErrorDescription ].
		
	self putOAt: aDestinationBoardPosition. 
	oPlayerPositions remove: aSourceBoardPosition.
	
	
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:39:50' prior: 50870504!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self allChipsOnBoard
		ifFalse: [ self signalMovingBeforeAllChipsOnBoard ].
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [
			self error: self class InvalidSourcePositionToMove. 	
		].
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[self error: self class invalidMovementErrorDescription ].
		
	self putOAt: aDestinationBoardPosition. 
	oPlayerPositions remove: aSourceBoardPosition.
	
	
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:40:14' prior: 50870524!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self allChipsOnBoard
		ifFalse: [ self signalMovingBeforeAllChipsOnBoard ].
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [ self error: self class InvalidSourcePositionToMove. ].
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[self error: self class invalidMovementErrorDescription ].
		
	self putOAt: aDestinationBoardPosition. 
	oPlayerPositions remove: aSourceBoardPosition.
	
	
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:41:17'!
signalInvalidSourcePosition

	^ self error: self class InvalidSourcePositionToMove! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:41:17' prior: 50870544!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self allChipsOnBoard
		ifFalse: [ self signalMovingBeforeAllChipsOnBoard ].
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [ self signalInvalidSourcePosition. ].
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[self error: self class invalidMovementErrorDescription ].
		
	self putOAt: aDestinationBoardPosition. 
	oPlayerPositions remove: aSourceBoardPosition.
	
	
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:41:21' prior: 50870569!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self allChipsOnBoard
		ifFalse: [ self signalMovingBeforeAllChipsOnBoard. ].
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [ self signalInvalidSourcePosition. ].
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[self error: self class invalidMovementErrorDescription ].
		
	self putOAt: aDestinationBoardPosition. 
	oPlayerPositions remove: aSourceBoardPosition.
	
	
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:41:28' prior: 50870588!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self allChipsOnBoard
		ifFalse: [ self signalMovingBeforeAllChipsOnBoard. ].
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [ self signalInvalidSourcePosition. ].
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[ self error: self class invalidMovementErrorDescription ].
		
	self putOAt: aDestinationBoardPosition. 
	oPlayerPositions remove: aSourceBoardPosition.
	
	
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:41:35'!
signalInvalidMovement

	^ self error: self class invalidMovementErrorDescription! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:41:35' prior: 50870607!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self allChipsOnBoard
		ifFalse: [ self signalMovingBeforeAllChipsOnBoard. ].
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [ self signalInvalidSourcePosition. ].
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[ self signalInvalidMovement ].
		
	self putOAt: aDestinationBoardPosition. 
	oPlayerPositions remove: aSourceBoardPosition.
	
	
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:41:38' prior: 50870632!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self allChipsOnBoard
		ifFalse: [ self signalMovingBeforeAllChipsOnBoard. ].
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [ self signalInvalidSourcePosition. ].
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[ self signalInvalidMovement. ].
		
	self putOAt: aDestinationBoardPosition. 
	oPlayerPositions remove: aSourceBoardPosition.
	
	
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:42:32' prior: 50870401!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self allChipsOnBoard
		ifFalse: [ self signalMovingBeforeAllChipsOnBoard. ].
	
	(self isAnXPlayerPosition: aSourceBoardPosition)
		ifFalse: [ self signalInvalidSourcePosition. ].
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[ self signalInvalidMovement. ].
		
		
	self putXAt: aDestinationBoardPosition. 
	xPlayerPositions remove: aSourceBoardPosition.
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:42:37' prior: 50870668!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self allChipsOnBoard
		ifFalse: [ self signalMovingBeforeAllChipsOnBoard. ].
	
	(self isAnXPlayerPosition: aSourceBoardPosition)
		ifFalse: [ self signalInvalidSourcePosition. ].
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[ self signalInvalidMovement. ].
		
	self putXAt: aDestinationBoardPosition. 
	xPlayerPositions remove: aSourceBoardPosition.
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:43:21'!
checkConditionsToMoveForPlayerXFrom: aDestinationBoardPosition to: aSourceBoardPosition

	self allChipsOnBoard
		ifFalse: [ self signalMovingBeforeAllChipsOnBoard. ].
	
	(self isAnXPlayerPosition: aSourceBoardPosition)
		ifFalse: [ self signalInvalidSourcePosition. ].
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[ self signalInvalidMovement. ]! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:43:21' prior: 50870686!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self checkConditionsToMoveForPlayerXFrom: aDestinationBoardPosition to: aSourceBoardPosition.
		
	self putXAt: aDestinationBoardPosition. 
	xPlayerPositions remove: aSourceBoardPosition.
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:44:01'!
checkConditionsToMoveForPlayerOFrom: aSourceBoardPosition to: aDestinationBoardPosition

	self allChipsOnBoard
		ifFalse: [ self signalMovingBeforeAllChipsOnBoard. ].
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [ self signalInvalidSourcePosition. ].
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[ self signalInvalidMovement. ]! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 19:44:01' prior: 50870650!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self checkConditionsToMoveForPlayerOFrom: aSourceBoardPosition to: aDestinationBoardPosition.
		
	self putOAt: aDestinationBoardPosition. 
	oPlayerPositions remove: aSourceBoardPosition.
	
	
	! !

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 11/1/2020 19:44:42'!
ERROR!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 11/1/2020 19:45:11'!
ERROR!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 11/1/2020 19:45:52'!
ERROR!
!TerniLapilliTurnState class methodsFor: 'instance creation' stamp: 'HG 11/1/2020 19:46:49' prior: 50869367!
with: aTerniLapilliGame
	^self new initializeWithGame: aTerniLapilliGame.! !

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 11/1/2020 19:46:54'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 11/1/2020 19:47:20'!
isPlayingX
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 11/1/2020 19:47:41' prior: 50870776!
isPlayingX
	^turnState isPlayingX.! !

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 11/1/2020 19:47:45'!
ERROR!
!XPlayerTurn methodsFor: 'testing' stamp: 'HG 11/1/2020 19:47:59'!
isPlayingX
	self shouldBeImplemented.! !
!XPlayerTurn methodsFor: 'testing' stamp: 'HG 11/1/2020 19:48:02' prior: 50870787!
isPlayingX
	^true.! !

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 11/1/2020 19:48:05'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 11/1/2020 19:48:14'!
isPlayingO
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 11/1/2020 19:48:22' prior: 50870798!
isPlayingO
	turnState isPlayingO.! !

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 11/1/2020 19:48:25'!
ERROR!
!XPlayerTurn methodsFor: 'testing' stamp: 'HG 11/1/2020 19:48:35'!
isPlayingO
	self shouldBeImplemented.! !
!XPlayerTurn methodsFor: 'testing' stamp: 'HG 11/1/2020 19:48:40' prior: 50870809!
isPlayingO
	^false.! !

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 11/1/2020 19:48:43'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 11/1/2020 19:49:06' prior: 50870802!
isPlayingO
	^turnState isPlayingO.! !

!testRun: #TerniLapilliTest #test04 stamp: 'HG 11/1/2020 19:49:12'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 11/1/2020 19:49:12'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 11/1/2020 19:49:12'!
ERROR!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 11/1/2020 19:49:12'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 11/1/2020 19:49:12'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 11/1/2020 19:49:12'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 11/1/2020 19:49:12'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 11/1/2020 19:49:12'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 11/1/2020 19:49:12'!
ERROR!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 11/1/2020 19:49:12'!
ERROR!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 11/1/2020 19:49:12'!
ERROR!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 11/1/2020 19:49:12'!
ERROR!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 11/1/2020 19:49:12'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'HG 11/1/2020 19:49:12'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 11/1/2020 19:49:12'!
FAILURE!

!testRun: #TerniLapilliTest #test15 stamp: 'HG 11/1/2020 19:49:12'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'HG 11/1/2020 19:49:12'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'HG 11/1/2020 19:49:12'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'HG 11/1/2020 19:49:12'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 11/1/2020 19:49:19'!
ERROR!
!OPlayerTurn methodsFor: 'testing' stamp: 'HG 11/1/2020 19:49:30'!
isPlayingO
	self shouldBeImplemented.! !
!OPlayerTurn methodsFor: 'testing' stamp: 'HG 11/1/2020 19:49:33' prior: 50870876!
isPlayingO
	^true.! !

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 11/1/2020 19:49:35'!
ERROR!
!OPlayerTurn methodsFor: 'testing' stamp: 'HG 11/1/2020 19:49:42'!
isPlayingX
	self shouldBeImplemented.! !
!OPlayerTurn methodsFor: 'testing' stamp: 'HG 11/1/2020 19:49:44' prior: 50870887!
isPlayingX
	^false.! !

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 11/1/2020 19:49:46'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 11/1/2020 19:49:52'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 11/1/2020 19:49:56'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 11/1/2020 19:49:57'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 11/1/2020 19:49:57'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 11/1/2020 19:49:59'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/1/2020 19:52:28' prior: 50868798!
test14
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@2.

	self 
		should: [ aTerniLapilliGame movePlayerXPositionFrom: 1@1 to: 2@2.  ]
		raise: Error
		withMessageText: TerniLapilli occupiedPositionErrorDescription.
		
			
	self assert: (aTerniLapilliGame isAnOPlayerPosition: 3@3).
	self deny: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	
	! !

!testRun: #TerniLapilliTest #test14 stamp: 'HG 11/1/2020 19:52:29'!
FAILURE!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 11/1/2020 19:52:40'!
FAILURE!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 11/1/2020 19:53:14'!
FAILURE!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 11/1/2020 19:53:51'!
FAILURE!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 11/1/2020 19:54:18'!
FAILURE!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 11/1/2020 19:54:35'!
FAILURE!

aSourceBoardPosition fourNeighbors !

aSourceBoardPosition eightNeighbors !

aDestionationBoardPosition eightNeighbors!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 11/1/2020 19:59:17' prior: 50868975!
isValidMoveFrom: aSourceBoardPosition to: aDestionationBoardPosition 
	(aSourceBoardPosition = (2@2) or: (aDestionationBoardPosition = (2@2)) )  ifTrue:[
								^aSourceBoardPosition eightNeighbors includes: aDestionationBoardPosition ]
							ifFalse:[
								^aSourceBoardPosition fourNeighbors includes: aDestionationBoardPosition ]
					! !

!testRun: #TerniLapilliTest #test14 stamp: 'HG 11/1/2020 19:59:20'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 11/1/2020 19:59:22'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 11/1/2020 19:59:22'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 11/1/2020 19:59:22'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 11/1/2020 19:59:22'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 11/1/2020 19:59:22'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 11/1/2020 19:59:22'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 11/1/2020 19:59:22'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 11/1/2020 19:59:22'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 11/1/2020 19:59:22'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 11/1/2020 19:59:22'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 11/1/2020 19:59:22'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 11/1/2020 19:59:22'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 11/1/2020 19:59:22'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'HG 11/1/2020 19:59:22'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 11/1/2020 19:59:22'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'HG 11/1/2020 19:59:22'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'HG 11/1/2020 19:59:22'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'HG 11/1/2020 19:59:22'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'HG 11/1/2020 19:59:22'!
PASSED!

Object subclass: #TerniLapilliGameplay
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!

!classDefinition: #TerniLapilliGameplay category: #TerniLapilliGame stamp: 'HG 11/1/2020 20:02:29'!
Object subclass: #TerniLapilliGameplay
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!

TerniLapilliGameplay subclass: #MovingStage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!

!classDefinition: #MovingStage category: #TerniLapilliGame stamp: 'HG 11/1/2020 20:03:30'!
TerniLapilliGameplay subclass: #MovingStage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!

TerniLapilliGameplay subclass: #PlacingStage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!

!classDefinition: #PlacingStage category: #TerniLapilliGame stamp: 'HG 11/1/2020 20:03:50'!
TerniLapilliGameplay subclass: #PlacingStage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!

TerniLapilliGameplay subclass: #GameOver
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!

!classDefinition: #GameOver category: #TerniLapilliGame stamp: 'HG 11/1/2020 20:03:58'!
TerniLapilliGameplay subclass: #GameOver
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!
!TerniLapilliGameplay class methodsFor: 'nil' stamp: 'HG 11/1/2020 20:04:29'!
with: ds! !
!TerniLapilliGameplay class methodsFor: 'as yet unclassified' stamp: 'HG 11/1/2020 20:04:43' prior: 50871069!
with: aTerniLapilliGame
	^self new initializeWithGame: aTerniLapilliGame.! !
!TerniLapilliGameplay methodsFor: 'initialization' stamp: 'HG 11/1/2020 20:05:03'!
initializeWithGame: a! !
!TerniLapilliGameplay methodsFor: 'initialization' stamp: 'HG 11/1/2020 20:05:06' prior: 50871078!
initializeWithGame: a
	game _ a.! !
!TerniLapilliGameplay methodsFor: 'initialization' stamp: 'HG 11/1/2020 20:05:17' prior: 50871082!
initializeWithGame: aTerniLapilliGame
	game _ aTerniLapilliGame.! !

!classDefinition: #TerniLapilli category: #TerniLapilliGame stamp: 'HG 11/1/2020 20:08:09'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'xPlayerPositions oPlayerPositions turnState gameplayState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!
!TerniLapilli methodsFor: 'initialization' stamp: 'HG 11/1/2020 20:08:07' prior: 50869360 overrides: 16896425!
initialize
	turnState _ XPlayerTurn with: self.
	gameplayState _ PlacingStage with: self.
	oPlayerPositions _ OrderedCollection new.
	xPlayerPositions _ OrderedCollection new.! !
!TerniLapilli methodsFor: 'initialization' stamp: 'HG 11/1/2020 20:08:31'!
initializePlayersPositions

	oPlayerPositions _ OrderedCollection new.
	xPlayerPositions _ OrderedCollection new! !
!TerniLapilli methodsFor: 'initialization' stamp: 'HG 11/1/2020 20:08:31' prior: 50871102 overrides: 16896425!
initialize
	turnState _ XPlayerTurn with: self.
	gameplayState _ PlacingStage with: self.
	self initializePlayersPositions.! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:11:50' prior: 50870731!
checkConditionsToMoveForPlayerOFrom: aSourceBoardPosition to: aDestinationBoardPosition
	
	self gameplayState.  
	self allChipsOnBoard
		ifFalse: [ self signalMovingBeforeAllChipsOnBoard. ].
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [ self signalInvalidSourcePosition. ].
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[ self signalInvalidMovement. ]! !
!TerniLapilliGameplay class methodsFor: 'nil' stamp: 'HG 11/1/2020 20:13:55'!
stateFor: aTerniLapilliGame

	^(self subclasses detect: [:aGameplayClass | aGameplayClass canHandle: aTerniLapilliGame ]) with: aTerniLapilliGame! !
!TerniLapilliGameplay class methodsFor: 'state selection' stamp: 'HG 11/1/2020 20:15:04'!
canHandle: aTerniLapilliGame
	
	! !
!TerniLapilliGameplay class methodsFor: 'state selection' stamp: 'HG 11/1/2020 20:15:12' prior: 50871149!
canHandle: aTerniLapilliGame
	self subclassResponsibility. ! !
!PlacingStage class methodsFor: 'state selection' stamp: 'HG 11/1/2020 20:15:59' overrides: 50871154!
canHandle: aTerniLapilliGame
	! !
!PlacingStage class methodsFor: 'state selection' stamp: 'HG 11/1/2020 20:16:52' prior: 50871160 overrides: 50871154!
canHandle: aTerniLapilliGame
	^aTerniLapilliGame allChipsOnBoard not.
	! !
!MovingStage class methodsFor: 'state selection' stamp: 'HG 11/1/2020 20:17:08' overrides: 50871154!
canHandle: aTerniLapilliGame
	^aTerniLapilliGame allChipsOnBoard.
	! !
!PlacingStage class methodsFor: 'state selection' stamp: 'HG 11/1/2020 20:19:19' prior: 50871165 overrides: 50871154!
canHandle: aTerniLapilliGame
	^((aTerniLapilliGame allChipsOnBoard) or: (aTerniLapilliGame isOver)) not.
	! !
!MovingStage class methodsFor: 'state selection' stamp: 'HG 11/1/2020 20:19:48' prior: 50871171 overrides: 50871154!
canHandle: aTerniLapilliGame
	^((aTerniLapilliGame allChipsOnBoard) and: (aTerniLapilliGame isOver not)).! !
!GameOver class methodsFor: 'state selection' stamp: 'HG 11/1/2020 20:20:12' overrides: 50871154!
canHandle: aTerniLapilliGame
	^aTerniLapilliGame isOver.! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:22:23' prior: 50870704!
checkConditionsToMoveForPlayerXFrom: aDestinationBoardPosition to: aSourceBoardPosition
	
	self allChipsOnBoard
		ifFalse: [ self signalMovingBeforeAllChipsOnBoard. ].
	
	(self isAnXPlayerPosition: aSourceBoardPosition)
		ifFalse: [ self signalInvalidSourcePosition. ].
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[ self signalInvalidMovement. ]! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:24:01' prior: 50871125!
checkConditionsToMoveForPlayerOFrom: aSourceBoardPosition to: aDestinationBoardPosition
	
	self allChipsOnBoard
		ifFalse: [ self signalMovingBeforeAllChipsOnBoard. ].
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [ self signalInvalidSourcePosition. ].
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[ self signalInvalidMovement. ]! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 20:25:41' prior: 50870720!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self gameplayState movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition.
	self checkConditionsToMoveForPlayerXFrom: aDestinationBoardPosition to: aSourceBoardPosition.
		
	self putXAt: aDestinationBoardPosition. 
	xPlayerPositions remove: aSourceBoardPosition.
	! !
!TerniLapilli methodsFor: 'private' stamp: 'HG 11/1/2020 20:26:17'!
gameplayState! !
!TerniLapilli methodsFor: 'private' stamp: 'HG 11/1/2020 20:26:19' prior: 50871243!
gameplayState
	! !
!TerniLapilli methodsFor: 'private' stamp: 'HG 11/1/2020 20:26:39' prior: 50871247!
gameplayState
	^TerniLapilliGameplay stateFor: self! !
!TerniLapilliGameplay class methodsFor: 'state selection' stamp: 'HG 11/1/2020 20:26:53' prior: 50871141!
stateFor: aTerniLapilliGame
	^(self subclasses detect: [:aGameplayClass | aGameplayClass canHandle: aTerniLapilliGame ]) with: aTerniLapilliGame! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 20:27:34' prior: 50871229!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self gameplayState movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition.
	
	
	self checkConditionsToMoveForPlayerXFrom: aDestinationBoardPosition to: aSourceBoardPosition.
		
	self putXAt: aDestinationBoardPosition. 
	xPlayerPositions remove: aSourceBoardPosition.
	! !
!PlacingStage methodsFor: 'game actions' stamp: 'HG 11/1/2020 20:28:03'!
movePlayerXPositionFrom:d ! !
!PlacingStage methodsFor: 'game actions' stamp: 'HG 11/1/2020 20:28:14'!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
! !

!methodRemoval: PlacingStage #movePlayerXPositionFrom: stamp: 'HG 11/1/2020 20:28:16'!
movePlayerXPositionFrom:d !
!PlacingStage methodsFor: 'game actions' stamp: 'HG 11/1/2020 20:28:25'!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
! !
!PlacingStage methodsFor: 'game actions' stamp: 'HG 11/1/2020 20:28:41' prior: 50871292!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	game d.
! !
!PlacingStage methodsFor: 'game actions' stamp: 'HG 11/1/2020 20:30:03' prior: 50871283!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	game signalMovingBeforeAllChipsOnBoard.! !
!PlacingStage methodsFor: 'game actions' stamp: 'HG 11/1/2020 20:30:08' prior: 50871298!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	game signalMovingBeforeAllChipsOnBoard.
! !
!MovingStage methodsFor: 'game actions' stamp: 'HG 11/1/2020 20:30:22'!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
! !
!MovingStage methodsFor: 'game actions' stamp: 'HG 11/1/2020 20:30:23'!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:31:05' prior: 50871197!
checkConditionsToMoveForPlayerXFrom: aDestinationBoardPosition to: aSourceBoardPosition
	
	(self isAnXPlayerPosition: aSourceBoardPosition)
		ifFalse: [ self signalInvalidSourcePosition. ].
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[ self signalInvalidMovement. ]! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 20:31:25' prior: 50871265!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self gameplayState movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition.
	
	
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 20:31:27' prior: 50871342!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	self gameplayState movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition.
	! !
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 20:32:08'!
move:aDestinationBoardPosition to: aSourceBoardPosition
	
	self checkConditionsToMoveForPlayerXFrom: aDestinationBoardPosition to: aSourceBoardPosition.
		
	self putXAt: aDestinationBoardPosition. 
	xPlayerPositions remove: aSourceBoardPosition.! !
!MovingStage methodsFor: 'game actions' stamp: 'HG 11/1/2020 20:33:01' prior: 50871318!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	game moveAtMovingStagePlayerOFrom: aSourceBoardPosition to: aDestinationBoardPosition.! !
!MovingStage methodsFor: 'game actions' stamp: 'HG 11/1/2020 20:33:13' prior: 50871323!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	game moveAtMovingStagePlayerXFrom: aSourceBoardPosition to: aDestinationBoardPosition! !
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 20:33:40'!
moveAtMovingStagePlayerXFrom: aDestinationBoardPosition to: aSourceBoardPosition
	
	self checkConditionsToMoveForPlayerXFrom: aDestinationBoardPosition to: aSourceBoardPosition.
		
	self putXAt: aDestinationBoardPosition. 
	xPlayerPositions remove: aSourceBoardPosition.! !

!methodRemoval: TerniLapilli #move:to: stamp: 'HG 11/1/2020 20:33:42'!
move:aDestinationBoardPosition to: aSourceBoardPosition
	
	self checkConditionsToMoveForPlayerXFrom: aDestinationBoardPosition to: aSourceBoardPosition.
		
	self putXAt: aDestinationBoardPosition. 
	xPlayerPositions remove: aSourceBoardPosition.!
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 20:33:55'!
moveAtMovingStagePlayeroFrom: aDestinationBoardPosition to: aSourceBoardPosition
	
	self checkConditionsToMoveForPlayerOFrom: aDestinationBoardPosition to: aSourceBoardPosition.
		
	self putOAt: aDestinationBoardPosition. 
	oPlayerPositions remove: aSourceBoardPosition.! !
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 20:34:10'!
moveAtMovingStagePlayerOFrom: aDestinationBoardPosition to: aSourceBoardPosition
	
	self checkConditionsToMoveForPlayerOFrom: aDestinationBoardPosition to: aSourceBoardPosition.
		
	self putOAt: aDestinationBoardPosition. 
	oPlayerPositions remove: aSourceBoardPosition.! !

!methodRemoval: TerniLapilli #moveAtMovingStagePlayeroFrom:to: stamp: 'HG 11/1/2020 20:34:12'!
moveAtMovingStagePlayeroFrom: aDestinationBoardPosition to: aSourceBoardPosition
	
	self checkConditionsToMoveForPlayerOFrom: aDestinationBoardPosition to: aSourceBoardPosition.
		
	self putOAt: aDestinationBoardPosition. 
	oPlayerPositions remove: aSourceBoardPosition.!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 11/1/2020 20:35:01'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 11/1/2020 20:35:01'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 11/1/2020 20:35:01'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 11/1/2020 20:35:01'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 11/1/2020 20:35:01'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 11/1/2020 20:35:01'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 11/1/2020 20:35:01'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 11/1/2020 20:35:01'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 11/1/2020 20:35:01'!
ERROR!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 11/1/2020 20:35:01'!
ERROR!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 11/1/2020 20:35:01'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 11/1/2020 20:35:01'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 11/1/2020 20:35:01'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'HG 11/1/2020 20:35:01'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 11/1/2020 20:35:01'!
FAILURE!

!testRun: #TerniLapilliTest #test15 stamp: 'HG 11/1/2020 20:35:01'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'HG 11/1/2020 20:35:01'!
FAILURE!

!testRun: #TerniLapilliTest #test17 stamp: 'HG 11/1/2020 20:35:01'!
FAILURE!

!testRun: #TerniLapilliTest #test18 stamp: 'HG 11/1/2020 20:35:01'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 11/1/2020 20:35:05'!
ERROR!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 11/1/2020 20:36:35'!
ERROR!
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:37:56' prior: 50871329!
checkConditionsToMoveForPlayerXFrom: aSourceBoardPosition to: aDestinationBoardPosition
	
	(self isAnXPlayerPosition: aSourceBoardPosition)
		ifFalse: [ self signalInvalidSourcePosition. ].
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[ self signalInvalidMovement. ]! !

!testRun: #TerniLapilliTest #test08 stamp: 'HG 11/1/2020 20:37:58'!
ERROR!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 11/1/2020 20:38:22'!
ERROR!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 11/1/2020 20:38:31'!
ERROR!
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 20:39:24' prior: 50871387!
moveAtMovingStagePlayerXFrom: aSourceBoardPosition to: aDestinationBoardPosition
	
	self checkConditionsToMoveForPlayerXFrom: aDestinationBoardPosition to: aSourceBoardPosition.
		
	self putXAt: aDestinationBoardPosition. 
	xPlayerPositions remove: aSourceBoardPosition.! !

!testRun: #TerniLapilliTest #test08 stamp: 'HG 11/1/2020 20:39:26'!
ERROR!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 11/1/2020 20:39:51'!
ERROR!
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 20:41:18' prior: 50871519!
moveAtMovingStagePlayerXFrom: aSourceBoardPosition to: aDestinationBoardPosition
	
	self checkConditionsToMoveForPlayerXFrom: aSourceBoardPosition to: aDestinationBoardPosition.
		
	self putXAt: aDestinationBoardPosition. 
	xPlayerPositions remove: aSourceBoardPosition.! !

!testRun: #TerniLapilliTest #test08 stamp: 'HG 11/1/2020 20:41:24'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 11/1/2020 20:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 11/1/2020 20:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 11/1/2020 20:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 11/1/2020 20:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 11/1/2020 20:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 11/1/2020 20:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 11/1/2020 20:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 11/1/2020 20:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 11/1/2020 20:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 11/1/2020 20:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 11/1/2020 20:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 11/1/2020 20:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 11/1/2020 20:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'HG 11/1/2020 20:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 11/1/2020 20:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'HG 11/1/2020 20:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'HG 11/1/2020 20:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'HG 11/1/2020 20:41:30'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'HG 11/1/2020 20:41:30'!
PASSED!
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:43:45' prior: 50871213!
checkConditionsToMoveForPlayerOFrom: aSourceBoardPosition to: aDestinationBoardPosition
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [ self signalInvalidSourcePosition. ].
		
	(self isValidMoveFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[ self signalInvalidMovement. ]! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:47:20' prior: 50868995!
playerOWinsByHorizontalRow
	^((oPlayerPositions intersection: self firstRow) size) = 3
	or: ((oPlayerPositions intersection: self secondRow) size) = 3
	or: ((oPlayerPositions intersection: self thirdRow) size) = 3.! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:50:00' prior: 50871612!
playerOWinsByHorizontalRow
	((oPlayerPositions intersection: self firstRow) size) = 3
	or: ((oPlayerPositions intersection: self secondRow) size) = 3
	or: ((oPlayerPositions intersection: self thirdRow) size) = 3.
	
	
	(1 to: 3) do: [
		:aRowIndex |
		((oPlayerPositions intersection: (self getRow: aRowIndex)) size = 3)
			ifTrue: [ ^true. ]
		]! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:50:42'!
oPlayerWinsByRow: aRowIndex

	^ (oPlayerPositions intersection: (self getRow: aRowIndex)) size = 3! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:50:42' prior: 50871622!
playerOWinsByHorizontalRow
	((oPlayerPositions intersection: self firstRow) size) = 3
	or: ((oPlayerPositions intersection: self secondRow) size) = 3
	or: ((oPlayerPositions intersection: self thirdRow) size) = 3.
	
	
	(1 to: 3) do: [
		:aRowIndex |
		((self oPlayerWinsByRow: aRowIndex))
			ifTrue: [ ^true. ]
		]! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:51:16' prior: 50871643!
playerOWinsByHorizontalRow

	| win |
	win _ false.
	(1 to: 3) do: [
		:aRowIndex |
		((self oPlayerWinsByRow: aRowIndex))
			ifTrue: [ win _ true. ]
		]
	
	^win.! !

!testRun: #TerniLapilliTest #test08 stamp: 'HG 11/1/2020 20:51:32'!
ERROR!
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:51:49' prior: 50871656!
playerOWinsByHorizontalRow

	| win |
	win _ false.
	(1 to: 3) do: [
		:aRowIndex |
		((self oPlayerWinsByRow: aRowIndex))
			ifTrue: [ win _ true. ]
		].
	
	^win.! !

!testRun: #TerniLapilliTest #test08 stamp: 'HG 11/1/2020 20:51:50'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 11/1/2020 20:51:50'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 11/1/2020 20:51:50'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 11/1/2020 20:51:50'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 11/1/2020 20:51:50'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 11/1/2020 20:51:50'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 11/1/2020 20:51:50'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 11/1/2020 20:51:50'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 11/1/2020 20:51:50'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 11/1/2020 20:51:50'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 11/1/2020 20:51:50'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 11/1/2020 20:51:50'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 11/1/2020 20:51:50'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'HG 11/1/2020 20:51:50'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 11/1/2020 20:51:50'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'HG 11/1/2020 20:51:50'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'HG 11/1/2020 20:51:50'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'HG 11/1/2020 20:51:50'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'HG 11/1/2020 20:51:50'!
PASSED!
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:52:16' prior: 50871636!
oPlayerWinsByRow: aRowIndex
	^(oPlayerPositions intersection: (self getRow: aRowIndex)) size = 3! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:52:17' prior: 50871724!
oPlayerWinsByRow: aRowIndex
	^(oPlayerPositions intersection: (self getRow: aRowIndex)) size = 3.! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:52:24'!
oPlayerWinsByRowIndex: aRowIndex
	^(oPlayerPositions intersection: (self getRow: aRowIndex)) size = 3.! !

!methodRemoval: TerniLapilli #oPlayerWinsByRow: stamp: 'HG 11/1/2020 20:52:26'!
oPlayerWinsByRow: aRowIndex
	^(oPlayerPositions intersection: (self getRow: aRowIndex)) size = 3.!
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:52:32' prior: 50871667!
playerOWinsByHorizontalRow

	| win |
	win _ false.
	(1 to: 3) do: [
		:aRowIndex |
		((self oPlayerWinsByRowIndex: aRowIndex))
			ifTrue: [ win _ true. ]
		].
	
	^win.! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:53:01' prior: 50871749!
playerOWinsByHorizontalRow

	| win boardRowIndexs |
	win _ false.
	boardRowIndexs _ (1 to: 3).
	
	boardRowIndexs do: [
		:aRowIndex |
		((self oPlayerWinsByRowIndex: aRowIndex))
			ifTrue: [ win _ true. ]
		].
	
	^win.! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:53:17' prior: 50871758!
playerOWinsByHorizontalRow

	| oWins boardRowIndexs |
	oWins _ false.
	boardRowIndexs _ (1 to: 3).
	
	boardRowIndexs do: [
		:aRowIndex |
		((self oPlayerWinsByRowIndex: aRowIndex))
			ifTrue: [ oWins _ true. ]
		].
	
	^oWins.! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:53:40' prior: 50871768!
playerOWinsByHorizontalRow

	| oWins boardRowIndexs |
	oWins _ false.
	boardRowIndexs _ (1 to: 3).
	
	boardRowIndexs do: [:aRowIndex | (self oPlayerWinsByRowIndex: aRowIndex) ifTrue: [ oWins _ true. ]].
	
	^oWins.! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:54:05' prior: 50871779!
playerOWinsByHorizontalRow

	| oWins boardRowIndexs |
	oWins _ false.
	boardRowIndexs _ (1 to: 3).
	boardRowIndexs do: [:aRowIndex | (self oPlayerWinsByRowIndex: aRowIndex) ifTrue: [ oWins _ true. ]].
	^oWins.! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:54:10' prior: 50871789!
playerOWinsByHorizontalRow
	| oWins boardRowIndexs |
	oWins _ false.
	boardRowIndexs _ (1 to: 3).
	boardRowIndexs do: [:aRowIndex | (self oPlayerWinsByRowIndex: aRowIndex) ifTrue: [ oWins _ true. ]].
	^oWins.! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:54:52' prior: 50869004!
playerOWinsByVerticalColumn
	
	| oWins boardColumnIndexs |
	oWins _ false.
	boardColumnIndexs _ (1 to: 3).
	boardColumnIndexs do: [:aColumnIndex | (self oPlayerWinsByColumnIndex: aColumnIndex) ifTrue: [ oWins _ true. ]].
	^oWins.! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:55:12'!
oPlayerWinsByColumnIndex: aRowIndex
	^(oPlayerPositions intersection: (self getRow: aRowIndex)) size = 3.! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:55:15' prior: 50871819!
oPlayerWinsByColumnIndex: aRowIndex
	^(oPlayerPositions intersection: (self getColumn: aRowIndex)) size = 3.! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:55:24' prior: 50871826!
oPlayerWinsByColumnIndex: aColumnIndex
	^(oPlayerPositions intersection: (self getColumn: aColumnIndex)) size = 3.! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:56:13' prior: 50869014!
playerXWinsByDiagonal
	^((xPlayerPositions intersection: self toLeftDiagonal) size) =3 or: ((xPlayerPositions intersection: self toRightDiagonal) size) =3.! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:56:32'!
playerXWinsByLeftDiagonal

	^ ((xPlayerPositions intersection: self toLeftDiagonal) size) =3! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:56:32' prior: 50871840!
playerXWinsByDiagonal
	^self playerXWinsByLeftDiagonal or: ((xPlayerPositions intersection: self toRightDiagonal) size) =3.! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:56:46'!
playerXWinsByRightDiagonal

	^ ((xPlayerPositions intersection: self toRightDiagonal) size) =3! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:56:46' prior: 50871854!
playerXWinsByDiagonal
	^self playerXWinsByLeftDiagonal or: self playerXWinsByRightDiagonal.! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:57:24'!
playerOWinsByRightDiagonal

	^ ((oPlayerPositions intersection: self toLeftDiagonal) size) =3! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:57:24' prior: 50868987!
playerOWinsByDiagonal
	^self playerOWinsByRightDiagonal
	or: ((oPlayerPositions intersection: self toRightDiagonal) size) =3.! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:57:34'!
playerOWinsByLeftDiagonal

	^ ((oPlayerPositions intersection: self toRightDiagonal) size) =3! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:57:34' prior: 50871880!
playerOWinsByDiagonal
	^self playerOWinsByRightDiagonal
	or: self playerOWinsByLeftDiagonal.! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:57:39' prior: 50871893!
playerOWinsByDiagonal
	^self playerOWinsByRightDiagonal or: self playerOWinsByLeftDiagonal.! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:58:08' prior: 50869022!
playerXWinsByHorizontalRow
	| xWins boardRowIndexs |
	xWins _ false.
	boardRowIndexs _ (1 to: 3).
	boardRowIndexs do: [:aRowIndex | (self xPlayerWinsByRowIndex: aRowIndex) ifTrue: [ xWins _ true. ]].
	^xWins.! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:59:03'!
playerWinsByRowIndex: aRowIndex withPositions: aPositionList
	^(aPositionList intersection: (self getRow: aRowIndex)) size = 3.! !

!methodRemoval: TerniLapilli #oPlayerWinsByRowIndex: stamp: 'HG 11/1/2020 20:59:11'!
oPlayerWinsByRowIndex: aRowIndex
	^(oPlayerPositions intersection: (self getRow: aRowIndex)) size = 3.!
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 20:59:39' prior: 50871799!
playerOWinsByHorizontalRow
	| oWins boardRowIndexs |
	oWins _ false.
	boardRowIndexs _ (1 to: 3).
	boardRowIndexs do: [:aRowIndex | (self playerWinsByRowIndex: aRowIndex withPositions: oPlayerPositions ) ifTrue: [ oWins _ true. ]].
	^oWins.! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 21:00:01' prior: 50871905!
playerXWinsByHorizontalRow
	| xWins boardRowIndexs |
	xWins _ false.
	boardRowIndexs _ (1 to: 3).
	boardRowIndexs do: [:aRowIndex | (self playerWinsByRowIndex: aRowIndex withPositions: xPlayerPositions ) ifTrue: [ xWins _ true. ]].
	^xWins.! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 21:00:29'!
playerWinsByColumnIndex: aColumnIndex withPositions: aPositionList
	^(aPositionList intersection: (self getColumn: aColumnIndex)) size = 3.! !

!methodRemoval: TerniLapilli #oPlayerWinsByColumnIndex: stamp: 'HG 11/1/2020 21:00:35'!
oPlayerWinsByColumnIndex: aColumnIndex
	^(oPlayerPositions intersection: (self getColumn: aColumnIndex)) size = 3.!
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 21:00:56' prior: 50871809!
playerOWinsByVerticalColumn
	
	| oWins boardColumnIndexs |
	oWins _ false.
	boardColumnIndexs _ (1 to: 3).
	boardColumnIndexs do: [:aColumnIndex | (self playerWinsByColumnIndex: aColumnIndex withPositions: oPlayerPositions) ifTrue: [ oWins _ true. ]].
	^oWins.! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/1/2020 21:01:42' prior: 50869031!
playerXWinsByVerticalColumn

	| xWins boardColumnIndexs |
	xWins _ false.
	boardColumnIndexs _ (1 to: 3).
	boardColumnIndexs do: [:aColumnIndex | (self playerWinsByColumnIndex: aColumnIndex withPositions: xPlayerPositions) ifTrue: [ xWins _ true. ]].
	^xWins.! !

!testRun: #TerniLapilliTest #test07 stamp: 'HG 11/1/2020 21:01:53'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 11/1/2020 21:01:53'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 11/1/2020 21:01:53'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 11/1/2020 21:01:53'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 11/1/2020 21:01:53'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 11/1/2020 21:01:53'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 11/1/2020 21:01:53'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 11/1/2020 21:01:53'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 11/1/2020 21:01:53'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 11/1/2020 21:01:53'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 11/1/2020 21:01:53'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 11/1/2020 21:01:53'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 11/1/2020 21:01:53'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'HG 11/1/2020 21:01:53'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 11/1/2020 21:01:53'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'HG 11/1/2020 21:01:53'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'HG 11/1/2020 21:01:53'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'HG 11/1/2020 21:01:53'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'HG 11/1/2020 21:01:53'!
PASSED!

!methodRemoval: TerniLapilli #firstColumn stamp: 'HG 11/1/2020 21:02:08'!
firstColumn
	^self getColumn: 1!

!methodRemoval: TerniLapilli #firstRow stamp: 'HG 11/1/2020 21:02:12'!
firstRow
	^self getRow:1!

!methodRemoval: TerniLapilli #thirdRow stamp: 'HG 11/1/2020 21:02:18'!
thirdRow
	^self getRow:3!

!methodRemoval: TerniLapilli #thirdColumn stamp: 'HG 11/1/2020 21:02:20'!
thirdColumn
	^self getColumn: 3!

!methodRemoval: TerniLapilli #secondRow stamp: 'HG 11/1/2020 21:02:29'!
secondRow
	^self getRow:2!

!methodRemoval: TerniLapilli #secondColumn stamp: 'HG 11/1/2020 21:02:30'!
secondColumn
	^self getColumn: 2!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 11/1/2020 21:03:04'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 11/1/2020 21:03:04'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 11/1/2020 21:03:04'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 11/1/2020 21:03:04'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 11/1/2020 21:03:04'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 11/1/2020 21:03:04'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 11/1/2020 21:03:04'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 11/1/2020 21:03:05'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 11/1/2020 21:03:05'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 11/1/2020 21:03:05'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 11/1/2020 21:03:05'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 11/1/2020 21:03:05'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 11/1/2020 21:03:05'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'HG 11/1/2020 21:03:05'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 11/1/2020 21:03:05'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'HG 11/1/2020 21:03:05'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'HG 11/1/2020 21:03:05'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'HG 11/1/2020 21:03:05'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'HG 11/1/2020 21:03:05'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/1/2020 21:04:07'!
test19
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 2@2.
	aTerniLapilliGame putOAt: 1@1.
	aTerniLapilliGame putXAt: 2@3.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 3@3.
	aTerniLapilliGame putOAt: 1@3.
	
	self deny: aTerniLapilliGame hasPlayerXWon.
	self assert: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/1/2020 21:06:30' prior: 50872104!
test19
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@3.
	aTerniLapilliGame putXAt: 1@3.
	
	
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.
	
	self 
		should: [ aTerniLapilliGame putOAt: 3@3.  ]
		raise: Error
		withMessageText: TerniLapilli invalidBoardPosition .
		
	self deny: (aTerniLapilliGame isAnOPlayerPosition: 3@3).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/1/2020 21:06:51' prior: 50872120!
test19
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@3.
	aTerniLapilliGame putXAt: 1@3.
	
	
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.
	
	self 
		should: [ aTerniLapilliGame putOAt: 3@3.  ]
		raise: Error
		withMessageText: TerniLapilli invalidActionWhenFinishGame .
		
	self deny: (aTerniLapilliGame isAnOPlayerPosition: 3@3).! !

!testRun: #TerniLapilliTest #test19 stamp: 'HG 11/1/2020 21:06:53'!
ERROR!
!TerniLapilli class methodsFor: 'error description' stamp: 'HG 11/1/2020 21:07:11'!
invalidActionWhenFinishGame
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error description' stamp: 'HG 11/1/2020 21:07:38' prior: 50872164!
invalidActionWhenFinishGame
	^'You cant add or move when the game is already finished.'.! !

!testRun: #TerniLapilliTest #test19 stamp: 'HG 11/1/2020 21:07:42'!
FAILURE!
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 21:09:11' prior: 50869884!
putOnOPlayerTurnAt: aBoardPosition
	
	self gameplayState putOnOPlayerTurnAt: aBoardPosition.
	
	"
	self occupiedBoardPositionCheck: aBoardPosition.
	
	turnState _ XPlayerTurn with: self.
	oPlayerPositions add: aBoardPosition.
	"! !
!GameOver methodsFor: 'game actions' stamp: 'HG 11/1/2020 21:40:33'!
moveAtMovingStagePlayerXFrom: aSourceBoardPosition to: aDestinationBoardPosition
	game signalGameIsAlreadyOver.! !
!GameOver methodsFor: 'game actions' stamp: 'HG 11/1/2020 21:40:36'!
moveAtMovingStagePlayerOFrom: aSourceBoardPosition to: aDestinationBoardPosition
	game signalGameIsAlreadyOver.! !
!TerniLapilli methodsFor: 'exceptions' stamp: 'HG 11/1/2020 21:41:10'!
signalGameIsAlreadyOver

	^ self error: self class gameAlreadyOver.! !
!TerniLapilli class methodsFor: 'error description' stamp: 'HG 11/1/2020 21:41:29'!
gameAlreadyOver
	^'Game is already over'.! !
!TerniLapilli class methodsFor: 'error description' stamp: 'HG 11/1/2020 21:41:34'!
gameAlreadyOverErrorDescription
	^'Game is already over'.! !

!methodRemoval: TerniLapilli class #gameAlreadyOver stamp: 'HG 11/1/2020 21:41:37'!
gameAlreadyOver
	^'Game is already over'.!
!GameOver methodsFor: 'game actions' stamp: 'HG 11/1/2020 21:43:19'!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	game signalGameIsAlreadyOver.! !
!GameOver methodsFor: 'game actions' stamp: 'HG 11/1/2020 21:43:21'!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	game signalGameIsAlreadyOver.! !

!methodRemoval: GameOver #moveAtMovingStagePlayerXFrom:to: stamp: 'HG 11/1/2020 21:43:34'!
moveAtMovingStagePlayerXFrom: aSourceBoardPosition to: aDestinationBoardPosition
	game signalGameIsAlreadyOver.!

!methodRemoval: GameOver #moveAtMovingStagePlayerOFrom:to: stamp: 'HG 11/1/2020 21:43:36'!
moveAtMovingStagePlayerOFrom: aSourceBoardPosition to: aDestinationBoardPosition
	game signalGameIsAlreadyOver.!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 11/1/2020 21:43:58'!
ERROR!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 11/1/2020 21:44:22'!
ERROR!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 11/1/2020 21:44:40'!
ERROR!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 11/1/2020 21:44:50'!
ERROR!
!PlacingStage methodsFor: 'game actions' stamp: 'HG 11/1/2020 21:46:08'!
putOnOPlayerTurnAt: aBoardPosition
	self shouldBeImplemented. ! !
!PlacingStage methodsFor: 'game actions' stamp: 'HG 11/1/2020 21:46:11'!
putOnXPlayerTurnAt: aBoardPosition
	self shouldBeImplemented. ! !
!GameOver methodsFor: 'game actions' stamp: 'HG 11/1/2020 21:46:29'!
putOnXPlayerTurnAt: aBoardPosition
	game signalGameIsAlreadyOver.! !
!GameOver methodsFor: 'game actions' stamp: 'HG 11/1/2020 21:46:31'!
putOnOPlayerTurnAt: aBoardPosition
	game signalGameIsAlreadyOver.! !
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 21:54:00'!
moveOnXPlayerTurnAt: aBoardPosition

	self occupiedBoardPositionCheck: aBoardPosition.
		
	turnState _ OPlayerTurn with: self.
	xPlayerPositions add: aBoardPosition.! !
!XPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 21:55:05' prior: 50869548 overrides: 50869395!
putXAt: aGameBoardPosition
	game putOnXPlayerTurnAt: aGameBoardPosition.! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 21:55:44' prior: 50871351!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	turnState movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition. 
	self gameplayState movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition.
	! !
!TerniLapilli methodsFor: 'game actions' stamp: 'HG 11/1/2020 21:55:50' prior: 50872289!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	
	turnState movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition.
	
	" 
	self gameplayState movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition.
	"! !
!OPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 21:56:08' overrides: 50869912!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition
	game signalInvalidTurn.! !
!OPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 21:56:18' overrides: 50869905!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition
	self shouldBeImplemented .! !
!XPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 21:56:34' overrides: 50869905!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition	
	game signalInvalidTurn.! !
!XPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 21:56:42' overrides: 50869912!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition	
	self shouldBeImplemented. ! !

!methodRemoval: TerniLapilli #moveOnXPlayerTurnAt: stamp: 'HG 11/1/2020 21:57:08'!
moveOnXPlayerTurnAt: aBoardPosition

	self occupiedBoardPositionCheck: aBoardPosition.
		
	turnState _ OPlayerTurn with: self.
	xPlayerPositions add: aBoardPosition.!
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 21:58:14'!
moveOnXPlayerTurnFrom: aSourceBoardPosition to: aDestinationBoardPosition
	self gameplayState movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition.! !
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 21:58:20'!
moveOnOPlayerTurnFrom: aSourceBoardPosition to: aDestinationBoardPosition
	self gameplayState movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition.! !
!PlacingStage methodsFor: 'game actions' stamp: 'HG 11/1/2020 21:58:42' prior: 50871304!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	game signalMovingBeforeAllChipsOnBoard.
! !
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 22:02:29' prior: 50871421!
moveAtMovingStagePlayerOFrom: aSourceBoardPosition to:  aDestinationBoardPosition
	
	self checkConditionsToMoveForPlayerOFrom: aSourceBoardPosition  to: aDestinationBoardPosition.
		
	self occupiedBoardPositionCheck: aDestinationBoardPosition.
	
	turnState _ XPlayerTurn with: self.
	oPlayerPositions add: aDestinationBoardPosition.
	oPlayerPositions remove: aSourceBoardPosition.! !
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 22:02:56' prior: 50872373!
moveAtMovingStagePlayerOFrom: aSourceBoardPosition to:  aDestinationBoardPosition
	
	self checkConditionsToMoveForPlayerOFrom: aSourceBoardPosition  to: aDestinationBoardPosition.
		
	self occupiedBoardPositionCheck: aDestinationBoardPosition.
	
	turnState _ XPlayerTurn with: self.
	oPlayerPositions add: aDestinationBoardPosition.
	
	oPlayerPositions remove: aSourceBoardPosition.! !
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 22:03:35'!
moveToDestination: aDestinationBoardPosition

	self occupiedBoardPositionCheck: aDestinationBoardPosition.
	
	turnState _ XPlayerTurn with: self.
	oPlayerPositions add: aDestinationBoardPosition! !
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 22:03:35' prior: 50872389!
moveAtMovingStagePlayerOFrom: aSourceBoardPosition to:  aDestinationBoardPosition
	
	self checkConditionsToMoveForPlayerOFrom: aSourceBoardPosition  to: aDestinationBoardPosition.
		
	self moveToDestination: aDestinationBoardPosition.
	
	oPlayerPositions remove: aSourceBoardPosition.! !
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 22:03:48' prior: 50872414!
moveAtMovingStagePlayerOFrom: aSourceBoardPosition to:  aDestinationBoardPosition
	
	self checkConditionsToMoveForPlayerOFrom: aSourceBoardPosition  to: aDestinationBoardPosition.
	self moveToDestination: aDestinationBoardPosition.
	oPlayerPositions remove: aSourceBoardPosition.! !
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 22:04:16' prior: 50872427!
moveAtMovingStagePlayerOFrom: aSourceBoardPosition to:  aDestinationBoardPosition
	
	self checkConditionsToMoveForPlayerOFrom: aSourceBoardPosition  to: aDestinationBoardPosition.
	self playerOMoveToDestination: aDestinationBoardPosition.
	oPlayerPositions remove: aSourceBoardPosition.! !
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 22:04:21'!
playerOMoveToDestination: aDestinationBoardPosition

	self occupiedBoardPositionCheck: aDestinationBoardPosition.
	
	turnState _ XPlayerTurn with: self.
	oPlayerPositions add: aDestinationBoardPosition! !
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 22:04:25'!
playerXMoveToDestination: aDestinationBoardPosition

	self occupiedBoardPositionCheck: aDestinationBoardPosition.
	
	turnState _ XPlayerTurn with: self.
	oPlayerPositions add: aDestinationBoardPosition! !
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 22:04:31' prior: 50872461!
playerXMoveToDestination: aDestinationBoardPosition

	self occupiedBoardPositionCheck: aDestinationBoardPosition.
	
	turnState _ OPlayerTurn with: self.
	xPlayerPositions add: aDestinationBoardPosition! !

!methodRemoval: TerniLapilli #moveToDestination: stamp: 'HG 11/1/2020 22:04:34'!
moveToDestination: aDestinationBoardPosition

	self occupiedBoardPositionCheck: aDestinationBoardPosition.
	
	turnState _ XPlayerTurn with: self.
	oPlayerPositions add: aDestinationBoardPosition!
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 22:04:45'!
playerOMovesToDestination: aDestinationBoardPosition

	self occupiedBoardPositionCheck: aDestinationBoardPosition.
	
	turnState _ XPlayerTurn with: self.
	oPlayerPositions add: aDestinationBoardPosition! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'HG 11/1/2020 22:04:45' prior: 50872439!
moveAtMovingStagePlayerOFrom: aSourceBoardPosition to:  aDestinationBoardPosition
	
	self checkConditionsToMoveForPlayerOFrom: aSourceBoardPosition  to: aDestinationBoardPosition.
	self playerOMovesToDestination: aDestinationBoardPosition.
	oPlayerPositions remove: aSourceBoardPosition.! !

!methodRemoval: TerniLapilli #playerOMoveToDestination: stamp: 'HG 11/1/2020 22:04:45'!
playerOMoveToDestination: aDestinationBoardPosition

	self occupiedBoardPositionCheck: aDestinationBoardPosition.
	
	turnState _ XPlayerTurn with: self.
	oPlayerPositions add: aDestinationBoardPosition!
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 22:04:50'!
playerXMovesToDestination: aDestinationBoardPosition

	self occupiedBoardPositionCheck: aDestinationBoardPosition.
	
	turnState _ OPlayerTurn with: self.
	xPlayerPositions add: aDestinationBoardPosition! !

!methodRemoval: TerniLapilli #playerXMoveToDestination: stamp: 'HG 11/1/2020 22:04:50'!
playerXMoveToDestination: aDestinationBoardPosition

	self occupiedBoardPositionCheck: aDestinationBoardPosition.
	
	turnState _ OPlayerTurn with: self.
	xPlayerPositions add: aDestinationBoardPosition!
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 22:05:09' prior: 50871536!
moveAtMovingStagePlayerXFrom: aSourceBoardPosition to: aDestinationBoardPosition
	
	self checkConditionsToMoveForPlayerXFrom: aSourceBoardPosition to: aDestinationBoardPosition.
	self playerXMovesToDestination: aDestinationBoardPosition.
	xPlayerPositions remove: aSourceBoardPosition.! !

!testRun: #TerniLapilliTest #test19 stamp: 'HG 11/1/2020 22:05:56'!
ERROR!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 11/1/2020 22:06:12'!
ERROR!
!OPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 22:07:01' prior: 50869560 overrides: 50869390!
putOAt: aGameBoardPosition

	game putOnOPlayerTurnAt: aGameBoardPosition.! !
!OPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 22:07:04' prior: 50872557 overrides: 50869390!
putOAt: aGameBoardPosition
	game putOnOPlayerTurnAt: aGameBoardPosition.! !
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 22:07:27' prior: 50869875!
putOnXPlayerTurnAt: aBoardPosition
	
	self gameplayState putOnXPlayerTurnAt: aBoardPosition.

	"
	self occupiedBoardPositionCheck: aBoardPosition.
		
	turnState _ OPlayerTurn with: self.
	xPlayerPositions add: aBoardPosition.
	"! !

!testRun: #TerniLapilliTest #test08 stamp: 'HG 11/1/2020 22:07:30'!
ERROR!
!PlacingStage methodsFor: 'game actions' stamp: 'HG 11/1/2020 22:08:10' prior: 50872254!
putOnOPlayerTurnAt: aBoardPosition
	! !
!PlacingStage methodsFor: 'game actions' stamp: 'HG 11/1/2020 22:08:52' prior: 50872582!
putOnOPlayerTurnAt: aBoardPosition
	game putOPlayerOnPlacingStageAt: aBoardPosition.! !
!PlacingStage methodsFor: 'game actions' stamp: 'HG 11/1/2020 22:09:07' prior: 50872259!
putOnXPlayerTurnAt: aBoardPosition
	game putXPlayerOnPlacingStageAt: aBoardPosition.! !
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 22:09:38'!
putOPlayerOnPlacingStageAt: aBoardPosition
	
	self occupiedBoardPositionCheck: aBoardPosition.
	
	turnState _ XPlayerTurn with: self.
	oPlayerPositions add: aBoardPosition.! !
!TerniLapilli methodsFor: 'game actions -- private' stamp: 'HG 11/1/2020 22:09:52'!
putXPlayerOnPlacingStageAt: aBoardPosition
	
	self occupiedBoardPositionCheck: aBoardPosition.
		
	turnState _ OPlayerTurn with: self.
	xPlayerPositions add: aBoardPosition.! !

!testRun: #TerniLapilliTest #test10 stamp: 'HG 11/1/2020 22:09:57'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 11/1/2020 22:09:57'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 11/1/2020 22:09:57'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 11/1/2020 22:09:57'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 11/1/2020 22:09:57'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 11/1/2020 22:09:57'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 11/1/2020 22:09:57'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 11/1/2020 22:09:57'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 11/1/2020 22:09:57'!
ERROR!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 11/1/2020 22:09:57'!
ERROR!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 11/1/2020 22:09:57'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 11/1/2020 22:09:57'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 11/1/2020 22:09:57'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'HG 11/1/2020 22:09:57'!
FAILURE!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 11/1/2020 22:09:57'!
FAILURE!

!testRun: #TerniLapilliTest #test15 stamp: 'HG 11/1/2020 22:09:57'!
FAILURE!

!testRun: #TerniLapilliTest #test16 stamp: 'HG 11/1/2020 22:09:57'!
FAILURE!

!testRun: #TerniLapilliTest #test17 stamp: 'HG 11/1/2020 22:09:57'!
FAILURE!

!testRun: #TerniLapilliTest #test18 stamp: 'HG 11/1/2020 22:09:57'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'HG 11/1/2020 22:09:57'!
FAILURE!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 11/1/2020 22:10:03'!
ERROR!
!OPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 22:11:04' prior: 50872320 overrides: 50869905!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition
	game moveOnXPlayerTurnFrom: aSourceBoardPosition to: aDestinationBoardPosition! !
!XPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 22:11:18' prior: 50872334 overrides: 50869912!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition	
	game moveOnXPlayerTurnFrom: aSourceBoardPosition to: aDestinationBoardPosition! !
!OPlayerTurn methodsFor: 'turn actions' stamp: 'HG 11/1/2020 22:11:23' prior: 50872671 overrides: 50869905!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition
	game moveOnOPlayerTurnFrom: aSourceBoardPosition to: aDestinationBoardPosition! !

!testRun: #TerniLapilliTest #test05 stamp: 'HG 11/1/2020 22:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 11/1/2020 22:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 11/1/2020 22:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 11/1/2020 22:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 11/1/2020 22:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 11/1/2020 22:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 11/1/2020 22:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 11/1/2020 22:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 11/1/2020 22:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 11/1/2020 22:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 11/1/2020 22:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 11/1/2020 22:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 11/1/2020 22:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'HG 11/1/2020 22:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 11/1/2020 22:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'HG 11/1/2020 22:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'HG 11/1/2020 22:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'HG 11/1/2020 22:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'HG 11/1/2020 22:11:28'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'HG 11/1/2020 22:11:28'!
FAILURE!

!testRun: #TerniLapilliTest #test19 stamp: 'HG 11/1/2020 22:11:28'!
FAILURE!
!TerniLapilli methodsFor: 'exceptions' stamp: 'HG 11/1/2020 22:12:14' prior: 50872200!
signalGameIsAlreadyOver

	^ self error: self class gameAlreadyOverErrorDescription.! !

!testRun: #TerniLapilliTest #test09 stamp: 'HG 11/1/2020 22:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 11/1/2020 22:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 11/1/2020 22:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 11/1/2020 22:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 11/1/2020 22:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 11/1/2020 22:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 11/1/2020 22:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 11/1/2020 22:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 11/1/2020 22:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 11/1/2020 22:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 11/1/2020 22:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 11/1/2020 22:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 11/1/2020 22:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'HG 11/1/2020 22:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 11/1/2020 22:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'HG 11/1/2020 22:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'HG 11/1/2020 22:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'HG 11/1/2020 22:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'HG 11/1/2020 22:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'HG 11/1/2020 22:12:17'!
FAILURE!

!testRun: #TerniLapilliTest #test19 stamp: 'HG 11/1/2020 22:12:17'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/1/2020 22:13:35' prior: 50872141!
test19
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@3.
	aTerniLapilliGame putXAt: 1@3.
	
	
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.
	
	self 
		should: [ aTerniLapilliGame putOAt: 3@3.  ]
		raise: Error
		withMessageText: TerniLapilli gameAlreadyOverErrorDescription .
		
	self deny: (aTerniLapilliGame isAnOPlayerPosition: 3@3).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/1/2020 22:13:37' prior: 50872811!
test19
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@3.
	aTerniLapilliGame putXAt: 1@3.
	
	
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.
	
	self 
		should: [ aTerniLapilliGame putOAt: 3@3.  ]
		raise: Error
		withMessageText: TerniLapilli gameAlreadyOverErrorDescription.
		
	self deny: (aTerniLapilliGame isAnOPlayerPosition: 3@3).! !

!testRun: #TerniLapilliTest #test19 stamp: 'HG 11/1/2020 22:13:39'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 11/1/2020 22:13:39'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 11/1/2020 22:13:39'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 11/1/2020 22:13:39'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 11/1/2020 22:13:39'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 11/1/2020 22:13:39'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 11/1/2020 22:13:39'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 11/1/2020 22:13:39'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 11/1/2020 22:13:39'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 11/1/2020 22:13:39'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 11/1/2020 22:13:39'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 11/1/2020 22:13:39'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 11/1/2020 22:13:39'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'HG 11/1/2020 22:13:39'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 11/1/2020 22:13:39'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'HG 11/1/2020 22:13:39'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'HG 11/1/2020 22:13:39'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'HG 11/1/2020 22:13:39'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'HG 11/1/2020 22:13:39'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'HG 11/1/2020 22:13:39'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/1/2020 22:16:16' prior: 50872832!
test19
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 2@2.
	aTerniLapilliGame putOAt: 1@1.
	aTerniLapilliGame putXAt: 2@3.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 3@3.
	aTerniLapilliGame putOAt: 1@3.
	
	self assert: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self assert: aTerniLapilliGame isOver.
	
	self 
		should: [ aTerniLapilliGame movePlayerXPositionFrom: 2@2 to: 2@1.  ]
		raise: Error
		withMessageText: TerniLapilli gameAlreadyOverErrorDescription.
		
	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@1).! !

!testRun: #TerniLapilliTest #test19 stamp: 'HG 11/1/2020 22:16:17'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 11/1/2020 22:16:17'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 11/1/2020 22:16:17'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 11/1/2020 22:16:17'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 11/1/2020 22:16:17'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 11/1/2020 22:16:17'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 11/1/2020 22:16:17'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 11/1/2020 22:16:17'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 11/1/2020 22:16:17'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 11/1/2020 22:16:17'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 11/1/2020 22:16:17'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 11/1/2020 22:16:17'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 11/1/2020 22:16:17'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'HG 11/1/2020 22:16:17'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 11/1/2020 22:16:17'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'HG 11/1/2020 22:16:17'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'HG 11/1/2020 22:16:17'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'HG 11/1/2020 22:16:17'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'HG 11/1/2020 22:16:17'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'HG 11/1/2020 22:16:17'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/1/2020 22:16:16' prior: 50872905!
test19
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 2@2.
	aTerniLapilliGame putOAt: 1@1.
	aTerniLapilliGame putXAt: 2@3.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 3@3.
	aTerniLapilliGame putOAt: 1@3.
	
	self assert: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self assert: aTerniLapilliGame isOver.
	
	self 
		should: [ aTerniLapilliGame movePlayerXPositionFrom: 2@2 to: 2@1.  ]
		raise: Error
		withMessageText: TerniLapilli gameAlreadyOverErrorDescription.
		
	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@1).! !

!testRun: #TerniLapilliTest #test19 stamp: 'HG 11/1/2020 22:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 11/1/2020 22:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 11/1/2020 22:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 11/1/2020 22:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 11/1/2020 22:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 11/1/2020 22:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 11/1/2020 22:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 11/1/2020 22:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 11/1/2020 22:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 11/1/2020 22:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 11/1/2020 22:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 11/1/2020 22:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 11/1/2020 22:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'HG 11/1/2020 22:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 11/1/2020 22:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'HG 11/1/2020 22:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'HG 11/1/2020 22:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'HG 11/1/2020 22:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'HG 11/1/2020 22:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'HG 11/1/2020 22:16:40'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/1/2020 22:16:53'!
test20
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 2@2.
	aTerniLapilliGame putOAt: 1@1.
	aTerniLapilliGame putXAt: 2@3.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 3@3.
	aTerniLapilliGame putOAt: 1@3.
	
	self assert: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self assert: aTerniLapilliGame isOver.
	
	self 
		should: [ aTerniLapilliGame movePlayerXPositionFrom: 2@2 to: 2@1.  ]
		raise: Error
		withMessageText: TerniLapilli gameAlreadyOverErrorDescription.
		
	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@1).! !

!testRun: #TerniLapilliTest #test20 stamp: 'HG 11/1/2020 22:16:54'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 11/1/2020 22:16:54'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 11/1/2020 22:16:54'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 11/1/2020 22:16:54'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'HG 11/1/2020 22:16:54'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'HG 11/1/2020 22:16:54'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'HG 11/1/2020 22:16:54'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'HG 11/1/2020 22:16:54'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'HG 11/1/2020 22:16:54'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'HG 11/1/2020 22:16:54'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'HG 11/1/2020 22:16:54'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'HG 11/1/2020 22:16:54'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'HG 11/1/2020 22:16:54'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'HG 11/1/2020 22:16:54'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'HG 11/1/2020 22:16:54'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'HG 11/1/2020 22:16:54'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'HG 11/1/2020 22:16:54'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'HG 11/1/2020 22:16:54'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'HG 11/1/2020 22:16:54'!
PASSED!

!testRun: #TerniLapilliTest #test19 stamp: 'HG 11/1/2020 22:16:54'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'HG 11/1/2020 22:16:54'!
PASSED!

!classRemoval: #XPlayerTurn stamp: 'HG 11/2/2020 10:33:37'!
TerniLapilliTurnState subclass: #XPlayerTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!

!classRemoval: #OPlayerTurn stamp: 'HG 11/2/2020 10:33:37'!
TerniLapilliTurnState subclass: #OPlayerTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!

!classRemoval: #TerniLapilliTurnState stamp: 'HG 11/2/2020 10:33:38'!
Object subclass: #TerniLapilliTurnState
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!

!classRemoval: #PlacingStage stamp: 'HG 11/2/2020 10:33:38'!
TerniLapilliGameplay subclass: #PlacingStage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!

!classRemoval: #MovingStage stamp: 'HG 11/2/2020 10:33:38'!
TerniLapilliGameplay subclass: #MovingStage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!

!classRemoval: #GameOver stamp: 'HG 11/2/2020 10:33:39'!
TerniLapilliGameplay subclass: #GameOver
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!

!classRemoval: #TerniLapilliGameplay stamp: 'HG 11/2/2020 10:33:39'!
Object subclass: #TerniLapilliGameplay
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!

!classRemoval: #TerniLapilli stamp: 'HG 11/2/2020 10:33:39'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'xPlayerPositions oPlayerPositions turnState gameplayState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!

!classRemoval: #TerniLapilliTest stamp: 'HG 11/2/2020 10:33:40'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliGame'!

----End fileIn of /Users/monteagudo/Desktop/Inge1/17-TerniLapilli/TerniLapilliGame.st----!

!methodRemoval: TerniLapilliTest #test20 stamp: 'HG 11/2/2020 10:35:33'!
test20
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 2@2.
	aTerniLapilliGame putOAt: 1@1.
	aTerniLapilliGame putXAt: 2@3.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 3@3.
	aTerniLapilliGame putOAt: 1@3.
	
	self assert: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self assert: aTerniLapilliGame isOver.
	
	self 
		should: [ aTerniLapilliGame movePlayerXPositionFrom: 2@2 to: 2@1.  ]
		raise: Error
		withMessageText: TerniLapilli gameAlreadyOverErrorDescription.
		
	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@1).!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 10:35:40'!
test20
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 2@3.
	
	self 
		should: [ aTerniLapilliGame putXAt: 2@2  ]
		raise: Error
		withMessageText: TerniLapilli allChipsAlreadyOnTheBoardErrorDescription.
		
! !

!methodRemoval: TerniLapilliTest #test21 stamp: 'HG 11/2/2020 10:35:43'!
test21
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 2@3.
	
	self 
		should: [ aTerniLapilliGame putXAt: 2@2  ]
		raise: Error
		withMessageText: TerniLapilli allChipsAlreadyOnTheBoardErrorDescription.
		
!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 10:37:53'!
test04AssertPlayerXWinsWhenPutsChip
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 3@1.
	
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.
! !

!methodRemoval: TerniLapilliTest #test04 stamp: 'HG 11/2/2020 10:37:55'!
test04
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 3@1.
	
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.
!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 10:38:12'!
test05AssertPlayerOWinsWhenPutsLastChip
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 3@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 3@3.
	aTerniLapilliGame putOAt: 3@2.

	self deny: aTerniLapilliGame hasPlayerXWon.
	self assert: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.
! !

!methodRemoval: TerniLapilliTest #test05 stamp: 'HG 11/2/2020 10:38:14'!
test05
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 3@1.
	aTerniLapilliGame putOAt: 2@2.
	aTerniLapilliGame putXAt: 3@3.
	aTerniLapilliGame putOAt: 3@2.

	self deny: aTerniLapilliGame hasPlayerXWon.
	self assert: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.
!

!methodRemoval: TerniLapilliTest #test06 stamp: 'HG 11/2/2020 10:38:47'!
test06
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 2@1.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 3@1.
	aTerniLapilliGame putXAt: 1@3.
	
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.!

!methodRemoval: TerniLapilliTest #test07 stamp: 'HG 11/2/2020 10:39:30'!
test07
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 2@2.
	aTerniLapilliGame putOAt: 1@1.
	aTerniLapilliGame putXAt: 2@3.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 3@3.
	aTerniLapilliGame putOAt: 1@3.
	
	self deny: aTerniLapilliGame hasPlayerXWon.
	self assert: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 10:42:42'!
test06AssertPlayerXMovesAChipCorrectly
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 2@2.
	aTerniLapilliGame putOAt: 2@3.
	
	aTerniLapilliGame movePlayerXPositionFrom: 2@2 to: 2@1. 

	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@2).	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 2@1).
	self assert: aTerniLapilliGame isPlayingO.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	
	
	
	! !

!methodRemoval: TerniLapilliTest #test08 stamp: 'HG 11/2/2020 10:42:44'!
test08
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 2@2.
	aTerniLapilliGame putOAt: 2@3.
	
	aTerniLapilliGame movePlayerXPositionFrom: 2@2 to: 2@1. 

	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@2).	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 2@1).
	self assert: aTerniLapilliGame isPlayingO.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	
	
	
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 10:43:25'!
test07AssertPlayerXWinsAfterMovingAChipCorrectly
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 2@3.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 2@2.
	aTerniLapilliGame putOAt: 3@1.
	
	aTerniLapilliGame movePlayerXPositionFrom: 2@2 to: 1@3. 

	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@2).	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@3).
	self assert: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 10:43:35' prior: 50873329!
test09
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 2@3.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 2@2.
	aTerniLapilliGame putOAt: 3@1.
	
	aTerniLapilliGame movePlayerXPositionFrom: 2@2 to: 1@3. 

	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@2).	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@3).
	self assert: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.
	! !

!methodRemoval: TerniLapilliTest #test09 stamp: 'HG 11/2/2020 10:43:40'!
test09
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 2@3.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 2@2.
	aTerniLapilliGame putOAt: 3@1.
	
	aTerniLapilliGame movePlayerXPositionFrom: 2@2 to: 1@3. 

	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@2).	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@3).
	self assert: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self assert: aTerniLapilliGame isOver.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 10:43:59' prior: 50873352!
test10
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	
	self 
		should: [ aTerniLapilliGame putXAt: 2@1. ]
		raise: Error
		withMessageText: TerniLapilli InvalidTurnErrorDescription.
		
		
	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@1).	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self assert: aTerniLapilliGame isPlayingO.
	self deny: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 10:45:32'!
test08CanNotPutAChipAtInvalidTurn
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	
	self 
		should: [ aTerniLapilliGame putXAt: 2@1. ]
		raise: Error
		withMessageText: TerniLapilli InvalidTurnErrorDescription.
		
		
	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@1).	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self assert: aTerniLapilliGame isPlayingO.
	self deny: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	! !

!methodRemoval: TerniLapilliTest #test10 stamp: 'HG 11/2/2020 10:45:37'!
test10
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	
	self 
		should: [ aTerniLapilliGame putXAt: 2@1. ]
		raise: Error
		withMessageText: TerniLapilli InvalidTurnErrorDescription.
		
		
	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@1).	
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self assert: aTerniLapilliGame isPlayingO.
	self deny: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 10:46:06'!
test09CanNotPutAChipInOccupiedPosition
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	
	self 
		should: [ aTerniLapilliGame putOAt: 1@1. ]
		raise: Error
		withMessageText: TerniLapilli occupiedPositionErrorDescription.
		
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).	
	self deny: (aTerniLapilliGame isAnOPlayerPosition: 1@1).
	self assert: aTerniLapilliGame isPlayingO.
	self deny: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	! !

!methodRemoval: TerniLapilliTest #test11 stamp: 'HG 11/2/2020 10:46:08'!
test11
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	
	self 
		should: [ aTerniLapilliGame putOAt: 1@1. ]
		raise: Error
		withMessageText: TerniLapilli occupiedPositionErrorDescription.
		
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).	
	self deny: (aTerniLapilliGame isAnOPlayerPosition: 1@1).
	self assert: aTerniLapilliGame isPlayingO.
	self deny: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 10:46:25'!
test10CanNotMoveAChipAtInvalidTurn
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@2.
	
	self 
		should: [ aTerniLapilliGame movePlayerOPositionFrom: 3@3 to: 2@3.  ]
		raise: Error
		withMessageText: TerniLapilli InvalidTurnErrorDescription.
		
		
	self deny: (aTerniLapilliGame isAnOPlayerPosition: 2@3).	
	self assert: (aTerniLapilliGame isAnOPlayerPosition: 3@3).
	self deny: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	! !

!methodRemoval: TerniLapilliTest #test12 stamp: 'HG 11/2/2020 10:46:29'!
test12
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@2.
	
	self 
		should: [ aTerniLapilliGame movePlayerOPositionFrom: 3@3 to: 2@3.  ]
		raise: Error
		withMessageText: TerniLapilli InvalidTurnErrorDescription.
		
		
	self deny: (aTerniLapilliGame isAnOPlayerPosition: 2@3).	
	self assert: (aTerniLapilliGame isAnOPlayerPosition: 3@3).
	self deny: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 10:48:56'!
test11CanNotMoveAChipFromInvalidSourcePosition
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@2.
	
	self 
		should: [ aTerniLapilliGame movePlayerXPositionFrom: 3@3 to: 2@3.  ]
		raise: Error
		withMessageText: TerniLapilli InvalidSourcePositionToMove.
		
			
	self assert: (aTerniLapilliGame isAnOPlayerPosition: 3@3).
	self deny: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	! !

!methodRemoval: TerniLapilliTest #test13 stamp: 'HG 11/2/2020 10:48:59'!
test13
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@2.
	
	self 
		should: [ aTerniLapilliGame movePlayerXPositionFrom: 3@3 to: 2@3.  ]
		raise: Error
		withMessageText: TerniLapilli InvalidSourcePositionToMove.
		
			
	self assert: (aTerniLapilliGame isAnOPlayerPosition: 3@3).
	self deny: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 10:49:34'!
test12CanNotMoveAChipToAnOccupiedPosition
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@2.

	self 
		should: [ aTerniLapilliGame movePlayerXPositionFrom: 1@1 to: 2@2.  ]
		raise: Error
		withMessageText: TerniLapilli occupiedPositionErrorDescription.
		
			
	self assert: (aTerniLapilliGame isAnOPlayerPosition: 3@3).
	self deny: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	
	! !

!methodRemoval: TerniLapilliTest #test14 stamp: 'HG 11/2/2020 10:49:36'!
test14
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@2.

	self 
		should: [ aTerniLapilliGame movePlayerXPositionFrom: 1@1 to: 2@2.  ]
		raise: Error
		withMessageText: TerniLapilli occupiedPositionErrorDescription.
		
			
	self assert: (aTerniLapilliGame isAnOPlayerPosition: 3@3).
	self deny: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 10:50:12'!
test13CanNotMoveChipsBeforeAllPlayersPutTheirChips
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	
	self 
		should: [ aTerniLapilliGame movePlayerXPositionFrom: 1@1 to: 2@2.  ]
		raise: Error
		withMessageText: TerniLapilli cantMoveBeforePuttingAllChipsOnBoardErrorDescription.
		
			
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self deny: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	
	! !

!methodRemoval: TerniLapilliTest #test15 stamp: 'HG 11/2/2020 10:50:17'!
test15
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	
	self 
		should: [ aTerniLapilliGame movePlayerXPositionFrom: 1@1 to: 2@2.  ]
		raise: Error
		withMessageText: TerniLapilli cantMoveBeforePuttingAllChipsOnBoardErrorDescription.
		
			
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self deny: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 10:50:25'!
test13CanNotMoveChipsBeforeAllChipsOnBoard
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	
	self 
		should: [ aTerniLapilliGame movePlayerXPositionFrom: 1@1 to: 2@2.  ]
		raise: Error
		withMessageText: TerniLapilli cantMoveBeforePuttingAllChipsOnBoardErrorDescription.
		
			
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self deny: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	
	! !

!methodRemoval: TerniLapilliTest #test13CanNotMoveChipsBeforeAllPlayersPutTheirChips stamp: 'HG 11/2/2020 10:50:27'!
test13CanNotMoveChipsBeforeAllPlayersPutTheirChips
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 1@2.
	
	self 
		should: [ aTerniLapilliGame movePlayerXPositionFrom: 1@1 to: 2@2.  ]
		raise: Error
		withMessageText: TerniLapilli cantMoveBeforePuttingAllChipsOnBoardErrorDescription.
		
			
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self deny: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 10:50:55'!
test14CanNotMoveChipIfMovementIsInvalid
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@2.
	
	self 
		should: [ aTerniLapilliGame movePlayerXPositionFrom: 1@1 to: 3@1.  ]
		raise: Error
		withMessageText: TerniLapilli invalidMovementErrorDescription .
		
			
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self deny: (aTerniLapilliGame isAnXPlayerPosition: 3@1).

	self deny: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	
	! !

!methodRemoval: TerniLapilliTest #test16 stamp: 'HG 11/2/2020 10:50:57'!
test16
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@2.
	
	self 
		should: [ aTerniLapilliGame movePlayerXPositionFrom: 1@1 to: 3@1.  ]
		raise: Error
		withMessageText: TerniLapilli invalidMovementErrorDescription .
		
			
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self deny: (aTerniLapilliGame isAnXPlayerPosition: 3@1).

	self deny: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 10:51:21'!
test14CanNotMoveChipIfMovementIsTooLong
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@2.
	
	self 
		should: [ aTerniLapilliGame movePlayerXPositionFrom: 1@1 to: 3@1.  ]
		raise: Error
		withMessageText: TerniLapilli invalidMovementErrorDescription .
		
			
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self deny: (aTerniLapilliGame isAnXPlayerPosition: 3@1).

	self deny: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	
	! !

!methodRemoval: TerniLapilliTest #test14CanNotMoveChipIfMovementIsInvalid stamp: 'HG 11/2/2020 10:51:24'!
test14CanNotMoveChipIfMovementIsInvalid
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 2@2.
	
	self 
		should: [ aTerniLapilliGame movePlayerXPositionFrom: 1@1 to: 3@1.  ]
		raise: Error
		withMessageText: TerniLapilli invalidMovementErrorDescription .
		
			
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 1@1).
	self deny: (aTerniLapilliGame isAnXPlayerPosition: 3@1).

	self deny: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 10:51:43'!
test15CanNotMoveChipIfMovementIsFakeDiagonal
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 2@2.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 1@3.
	aTerniLapilliGame putOAt: 1@1.
	
	self 
		should: [ aTerniLapilliGame movePlayerXPositionFrom: 2@1 to: 1@2.  ]
		raise: Error
		withMessageText: TerniLapilli invalidMovementErrorDescription .
		
			
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 2@1).
	self deny: (aTerniLapilliGame isAnXPlayerPosition: 1@2).

	self deny: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	
	! !

!methodRemoval: TerniLapilliTest #test17 stamp: 'HG 11/2/2020 10:51:47'!
test17
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 2@2.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 1@3.
	aTerniLapilliGame putOAt: 1@1.
	
	self 
		should: [ aTerniLapilliGame movePlayerXPositionFrom: 2@1 to: 1@2.  ]
		raise: Error
		withMessageText: TerniLapilli invalidMovementErrorDescription .
		
			
	self assert: (aTerniLapilliGame isAnXPlayerPosition: 2@1).
	self deny: (aTerniLapilliGame isAnXPlayerPosition: 1@2).

	self deny: aTerniLapilliGame isPlayingO.
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 10:52:04'!
test16CanNotPutChipsAtInvalidBoardPositions
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	
	self 
		should: [ aTerniLapilliGame putXAt: 0@0.  ]
		raise: Error
		withMessageText: TerniLapilli invalidBoardPosition .
		
			
	self deny: (aTerniLapilliGame isAnXPlayerPosition: 0@0).
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	
	! !

!methodRemoval: TerniLapilliTest #test18 stamp: 'HG 11/2/2020 10:52:06'!
test18
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	
	self 
		should: [ aTerniLapilliGame putXAt: 0@0.  ]
		raise: Error
		withMessageText: TerniLapilli invalidBoardPosition .
		
			
	self deny: (aTerniLapilliGame isAnXPlayerPosition: 0@0).
	self assert: aTerniLapilliGame isPlayingX.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self deny: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame isOver.
	
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 10:52:25'!
test17CanNotMoveChipsAfterGameIsOver
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 2@2.
	aTerniLapilliGame putOAt: 1@1.
	aTerniLapilliGame putXAt: 2@3.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 3@3.
	aTerniLapilliGame putOAt: 1@3.
	
	self assert: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self assert: aTerniLapilliGame isOver.
	
	self 
		should: [ aTerniLapilliGame movePlayerXPositionFrom: 2@2 to: 2@1.  ]
		raise: Error
		withMessageText: TerniLapilli gameAlreadyOverErrorDescription.
		
	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@1).! !

!methodRemoval: TerniLapilliTest #test19 stamp: 'HG 11/2/2020 10:52:29'!
test19
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 2@2.
	aTerniLapilliGame putOAt: 1@1.
	aTerniLapilliGame putXAt: 2@3.
	aTerniLapilliGame putOAt: 1@2.
	aTerniLapilliGame putXAt: 3@3.
	aTerniLapilliGame putOAt: 1@3.
	
	self assert: aTerniLapilliGame hasPlayerOWon.
	self deny: aTerniLapilliGame hasPlayerXWon.
	self assert: aTerniLapilliGame isOver.
	
	self 
		should: [ aTerniLapilliGame movePlayerXPositionFrom: 2@2 to: 2@1.  ]
		raise: Error
		withMessageText: TerniLapilli gameAlreadyOverErrorDescription.
		
	self deny: (aTerniLapilliGame isAnXPlayerPosition: 2@1).!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 10:52:44'!
test18CanNotPutChipsAfterGameIsOver
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 2@3.
	
	self 
		should: [ aTerniLapilliGame putXAt: 2@2  ]
		raise: Error
		withMessageText: TerniLapilli allChipsAlreadyOnTheBoardErrorDescription.
		
! !

!methodRemoval: TerniLapilliTest #test20 stamp: 'HG 11/2/2020 10:52:46'!
test20
	
	| aTerniLapilliGame |
	
	aTerniLapilliGame _ TerniLapilli new.
	aTerniLapilliGame putXAt: 1@1.
	aTerniLapilliGame putOAt: 3@3.
	aTerniLapilliGame putXAt: 1@2.
	aTerniLapilliGame putOAt: 3@2.
	aTerniLapilliGame putXAt: 2@1.
	aTerniLapilliGame putOAt: 2@3.
	
	self 
		should: [ aTerniLapilliGame putXAt: 2@2  ]
		raise: Error
		withMessageText: TerniLapilli allChipsAlreadyOnTheBoardErrorDescription.
		
!
!TerniLapilliGameplay methodsFor: 'game actions' stamp: 'HG 11/2/2020 10:54:31'!
putOnXPlayerTurnAt: aBoardPosition
	self subclassResponsibility.! !
!TerniLapilliGameplay methodsFor: 'game actions' stamp: 'HG 11/2/2020 10:54:34'!
putOnOPlayerTurnAt: aBoardPosition
	self subclassResponsibility.! !
!TerniLapilliGameplay methodsFor: 'game actions' stamp: 'HG 11/2/2020 10:54:47'!
movePlayerOPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	self subclassResponsibility.! !
!TerniLapilliGameplay methodsFor: 'game actions' stamp: 'HG 11/2/2020 10:54:49'!
movePlayerXPositionFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	self subclassResponsibility.! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 11/2/2020 10:55:27' prior: 50873814!
isAnOccupiedPosition: aBoardPosition 
	^(self isAnOPlayerPosition: aBoardPosition) or: (self isAnXPlayerPosition: aBoardPosition)! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 11/2/2020 10:55:28' prior: 50875399!
isAnOccupiedPosition: aBoardPosition 
	^(self isAnOPlayerPosition: aBoardPosition) or: (self isAnXPlayerPosition: aBoardPosition).! !

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 11/2/2020 10:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 11/2/2020 10:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 11/2/2020 10:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test04AssertPlayerXWinsWhenPutsChip stamp: 'HG 11/2/2020 10:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test05AssertPlayerOWinsWhenPutsLastChip stamp: 'HG 11/2/2020 10:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test06AssertPlayerXMovesAChipCorrectly stamp: 'HG 11/2/2020 10:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test07AssertPlayerXWinsAfterMovingAChipCorrectly stamp: 'HG 11/2/2020 10:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPutAChipAtInvalidTurn stamp: 'HG 11/2/2020 10:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test09CanNotPutAChipInOccupiedPosition stamp: 'HG 11/2/2020 10:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test10CanNotMoveAChipAtInvalidTurn stamp: 'HG 11/2/2020 10:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test11CanNotMoveAChipFromInvalidSourcePosition stamp: 'HG 11/2/2020 10:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test12CanNotMoveAChipToAnOccupiedPosition stamp: 'HG 11/2/2020 10:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test13CanNotMoveChipsBeforeAllChipsOnBoard stamp: 'HG 11/2/2020 10:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test14CanNotMoveChipIfMovementIsTooLong stamp: 'HG 11/2/2020 10:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test15CanNotMoveChipIfMovementIsFakeDiagonal stamp: 'HG 11/2/2020 10:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test16CanNotPutChipsAtInvalidBoardPositions stamp: 'HG 11/2/2020 10:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test17CanNotMoveChipsAfterGameIsOver stamp: 'HG 11/2/2020 10:55:30'!
PASSED!

!testRun: #TerniLapilliTest #test18CanNotPutChipsAfterGameIsOver stamp: 'HG 11/2/2020 10:55:30'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'HG 11/2/2020 10:56:04' prior: 50873795!
hasPlayerOWon
	^self playerOWinsByHorizontalRow or: self playerOWinsByDiagonal or: self playerOWinsByVerticalColumn.! !
!TerniLapilli methodsFor: 'testing' stamp: 'HG 11/2/2020 10:56:13' prior: 50873802!
hasPlayerXWon
	^self playerXWinsByHorizontalRow or: self playerXWinsByDiagonal or: self playerXWinsByVerticalColumn.! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/2/2020 10:57:45'!
allChipsOnBoardFromPlayer

	^ xPlayerPositions size = 3! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/2/2020 10:57:45' prior: 50873641!
allChipsOnBoard
	^(self allChipsOnBoardFromPlayer) and: (oPlayerPositions size = 3).! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/2/2020 10:58:04'!
allChipsOnBoardFromPlayer: aPlayerPositionList
	^aPlayerPositionList size = 3! !

!methodRemoval: TerniLapilli #allChipsOnBoardFromPlayer stamp: 'HG 11/2/2020 10:58:07'!
allChipsOnBoardFromPlayer

	^ xPlayerPositions size = 3!
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/2/2020 10:58:29' prior: 50875494!
allChipsOnBoard
	^(self allChipsOnBoardFromPlayer: xPlayerPositions) 
		and: (self allChipsOnBoardFromPlayer: oPlayerPositions).! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/2/2020 10:59:51'!
isValidMovementFrom: aSourceBoardPosition to: aDestionationBoardPosition 
	(aSourceBoardPosition = (2@2) or: (aDestionationBoardPosition = (2@2)) )  ifTrue:[
								^aSourceBoardPosition eightNeighbors includes: aDestionationBoardPosition ]
							ifFalse:[
								^aSourceBoardPosition fourNeighbors includes: aDestionationBoardPosition ]
					! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 10:59:51' prior: 50873647!
checkConditionsToMoveForPlayerOFrom: aSourceBoardPosition to: aDestinationBoardPosition
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [ self signalInvalidSourcePosition. ].
		
	(self isValidMovementFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[ self signalInvalidMovement. ]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 10:59:51' prior: 50873660!
checkConditionsToMoveForPlayerXFrom: aSourceBoardPosition to: aDestinationBoardPosition
	
	(self isAnXPlayerPosition: aSourceBoardPosition)
		ifFalse: [ self signalInvalidSourcePosition. ].
		
	(self isValidMovementFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[ self signalInvalidMovement. ]! !

!methodRemoval: TerniLapilli #isValidMoveFrom:to: stamp: 'HG 11/2/2020 10:59:51'!
isValidMoveFrom: aSourceBoardPosition to: aDestionationBoardPosition 
	(aSourceBoardPosition = (2@2) or: (aDestionationBoardPosition = (2@2)) )  ifTrue:[
								^aSourceBoardPosition eightNeighbors includes: aDestionationBoardPosition ]
							ifFalse:[
								^aSourceBoardPosition fourNeighbors includes: aDestionationBoardPosition ]
					!
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/2/2020 11:00:10'!
isValidPlayerMovementFrom: aSourceBoardPosition to: aDestionationBoardPosition 
	(aSourceBoardPosition = (2@2) or: (aDestionationBoardPosition = (2@2)) )  ifTrue:[
								^aSourceBoardPosition eightNeighbors includes: aDestionationBoardPosition ]
							ifFalse:[
								^aSourceBoardPosition fourNeighbors includes: aDestionationBoardPosition ]
					! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 11:00:10' prior: 50875545!
checkConditionsToMoveForPlayerXFrom: aSourceBoardPosition to: aDestinationBoardPosition
	
	(self isAnXPlayerPosition: aSourceBoardPosition)
		ifFalse: [ self signalInvalidSourcePosition. ].
		
	(self isValidPlayerMovementFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[ self signalInvalidMovement. ]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'HG 11/2/2020 11:00:10' prior: 50875532!
checkConditionsToMoveForPlayerOFrom: aSourceBoardPosition to: aDestinationBoardPosition
	
	(self isAnOPlayerPosition: aSourceBoardPosition)
		ifFalse: [ self signalInvalidSourcePosition. ].
		
	(self isValidPlayerMovementFrom: aSourceBoardPosition to: aDestinationBoardPosition )
		ifFalse:[ self signalInvalidMovement. ]! !

!methodRemoval: TerniLapilli #isValidMovementFrom:to: stamp: 'HG 11/2/2020 11:00:10'!
isValidMovementFrom: aSourceBoardPosition to: aDestionationBoardPosition 
	(aSourceBoardPosition = (2@2) or: (aDestionationBoardPosition = (2@2)) )  ifTrue:[
								^aSourceBoardPosition eightNeighbors includes: aDestionationBoardPosition ]
							ifFalse:[
								^aSourceBoardPosition fourNeighbors includes: aDestionationBoardPosition ]
					!
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/2/2020 11:00:42'!
isCenterPosition: aSourceBoardPosition

	^ aSourceBoardPosition = (2@2)! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/2/2020 11:00:42' prior: 50875571!
isValidPlayerMovementFrom: aSourceBoardPosition to: aDestionationBoardPosition 
	((self isCenterPosition: aSourceBoardPosition) or: (aDestionationBoardPosition = (2@2)) )  ifTrue:[
								^aSourceBoardPosition eightNeighbors includes: aDestionationBoardPosition ]
							ifFalse:[
								^aSourceBoardPosition fourNeighbors includes: aDestionationBoardPosition ]
					! !
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/2/2020 11:01:53' prior: 50875633!
isValidPlayerMovementFrom: aSourceBoardPosition to: aDestinationBoardPosition 
	((self isCenterPosition: aSourceBoardPosition) or: (self isCenterPosition: aDestinationBoardPosition)) 
			ifTrue:[ ^aSourceBoardPosition eightNeighbors includes: aDestinationBoardPosition ].
							
	^aSourceBoardPosition fourNeighbors includes: aDestinationBoardPosition.
					! !

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 11/2/2020 11:01:54'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 11/2/2020 11:01:54'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 11/2/2020 11:01:54'!
PASSED!

!testRun: #TerniLapilliTest #test04AssertPlayerXWinsWhenPutsChip stamp: 'HG 11/2/2020 11:01:54'!
PASSED!

!testRun: #TerniLapilliTest #test05AssertPlayerOWinsWhenPutsLastChip stamp: 'HG 11/2/2020 11:01:54'!
PASSED!

!testRun: #TerniLapilliTest #test06AssertPlayerXMovesAChipCorrectly stamp: 'HG 11/2/2020 11:01:54'!
PASSED!

!testRun: #TerniLapilliTest #test07AssertPlayerXWinsAfterMovingAChipCorrectly stamp: 'HG 11/2/2020 11:01:54'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPutAChipAtInvalidTurn stamp: 'HG 11/2/2020 11:01:54'!
PASSED!

!testRun: #TerniLapilliTest #test09CanNotPutAChipInOccupiedPosition stamp: 'HG 11/2/2020 11:01:54'!
PASSED!

!testRun: #TerniLapilliTest #test10CanNotMoveAChipAtInvalidTurn stamp: 'HG 11/2/2020 11:01:54'!
PASSED!

!testRun: #TerniLapilliTest #test11CanNotMoveAChipFromInvalidSourcePosition stamp: 'HG 11/2/2020 11:01:54'!
PASSED!

!testRun: #TerniLapilliTest #test12CanNotMoveAChipToAnOccupiedPosition stamp: 'HG 11/2/2020 11:01:54'!
PASSED!

!testRun: #TerniLapilliTest #test13CanNotMoveChipsBeforeAllChipsOnBoard stamp: 'HG 11/2/2020 11:01:54'!
PASSED!

!testRun: #TerniLapilliTest #test14CanNotMoveChipIfMovementIsTooLong stamp: 'HG 11/2/2020 11:01:54'!
PASSED!

!testRun: #TerniLapilliTest #test15CanNotMoveChipIfMovementIsFakeDiagonal stamp: 'HG 11/2/2020 11:01:54'!
PASSED!

!testRun: #TerniLapilliTest #test16CanNotPutChipsAtInvalidBoardPositions stamp: 'HG 11/2/2020 11:01:54'!
PASSED!

!testRun: #TerniLapilliTest #test17CanNotMoveChipsAfterGameIsOver stamp: 'HG 11/2/2020 11:01:54'!
PASSED!

!testRun: #TerniLapilliTest #test18CanNotPutChipsAfterGameIsOver stamp: 'HG 11/2/2020 11:01:54'!
PASSED!
!TerniLapilli methodsFor: 'testing -- private' stamp: 'HG 11/2/2020 11:05:25' prior: 50873687!
occupiedBoardPositionCheck: aBoardPosition
	^ (self isAnOccupiedPosition: aBoardPosition)
		ifTrue: [ self signalOccupiedPosition. ]! !
!XPlayerTurn methodsFor: 'testing' stamp: 'HG 11/2/2020 11:05:46' prior: 50874478!
isPlayingO
	^false.! !
!TerniLapilliTurnState methodsFor: 'testing' stamp: 'HG 11/2/2020 11:06:01'!
isPlayingO
	self subclassResponsibility. ! !
!TerniLapilliTurnState methodsFor: 'testing' stamp: 'HG 11/2/2020 11:06:02'!
isPlayingX
	self subclassResponsibility. ! !

!testRun: #TerniLapilliTest #test05AssertPlayerOWinsWhenPutsLastChip stamp: 'HG 11/2/2020 11:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test01AssertPlayerXStartsPlayingInNewGame stamp: 'HG 11/2/2020 11:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test02AssertPlayerOTurnIsAfterPlayerX stamp: 'HG 11/2/2020 11:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test03AssertPlayerXTurnIsAfterPlayerO stamp: 'HG 11/2/2020 11:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test04AssertPlayerXWinsWhenPutsChip stamp: 'HG 11/2/2020 11:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test05AssertPlayerOWinsWhenPutsLastChip stamp: 'HG 11/2/2020 11:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test06AssertPlayerXMovesAChipCorrectly stamp: 'HG 11/2/2020 11:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test07AssertPlayerXWinsAfterMovingAChipCorrectly stamp: 'HG 11/2/2020 11:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test08CanNotPutAChipAtInvalidTurn stamp: 'HG 11/2/2020 11:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test09CanNotPutAChipInOccupiedPosition stamp: 'HG 11/2/2020 11:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test10CanNotMoveAChipAtInvalidTurn stamp: 'HG 11/2/2020 11:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test11CanNotMoveAChipFromInvalidSourcePosition stamp: 'HG 11/2/2020 11:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test12CanNotMoveAChipToAnOccupiedPosition stamp: 'HG 11/2/2020 11:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test13CanNotMoveChipsBeforeAllChipsOnBoard stamp: 'HG 11/2/2020 11:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test14CanNotMoveChipIfMovementIsTooLong stamp: 'HG 11/2/2020 11:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test15CanNotMoveChipIfMovementIsFakeDiagonal stamp: 'HG 11/2/2020 11:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test16CanNotPutChipsAtInvalidBoardPositions stamp: 'HG 11/2/2020 11:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test17CanNotMoveChipsAfterGameIsOver stamp: 'HG 11/2/2020 11:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test18CanNotPutChipsAfterGameIsOver stamp: 'HG 11/2/2020 11:06:56'!
PASSED!

----SNAPSHOT----(2 November 2020 11:07:30) CuisUniversity-4137.image priorSource: 16968367!