

----STARTUP---- (16 November 2020 20:54:21) as /home/nahuel/Documents/cuisuniversity/CuisUniversity-4384.image!


----End fileIn of /home/nahuel/git/isw1-2c2020-ejercicios/20-TusLibros/TusLibros-1.st----!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/16/2020 20:56:02'!
PASSED!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/16/2020 20:56:02'!
PASSED!

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/16/2020 20:56:02'!
PASSED!

!testRun: #CartTest #test04AddingABookThatIsNotForSaleShouldSignalError stamp: 'NNH 11/16/2020 20:56:02'!
PASSED!

----QUIT----(16 November 2020 21:15:58) CuisUniversity-4384.image priorSource: 17155564!

----STARTUP---- (19 November 2020 18:49:19) as /home/nahuel/Documents/cuisuniversity/CuisUniversity-4384.image!


!classRemoval: #Cart stamp: 'NNH 11/19/2020 18:50:22'!
Object subclass: #Cart
	instanceVariableNames: 'books collectionOfBooksForSale'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'NNH 11/19/2020 18:50:22'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/nahuel/git/isw1-2c2020-ejercicios/20-TusLibros/TusLibros-1/TusLibros.st----!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'NNH 11/19/2020 18:54:22'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'NNH 11/19/2020 18:58:17'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'nil' stamp: 'NNH 11/19/2020 18:58:05'!
test01
	
	| aCart aCashier aCreditCard |
	aCashier := Cashier new.
	aCart = Cart withCatalogue: OrderedCollection new.
		
	self should: [aCashier checkOut: aCart with: aCreditCard] 
	raise: Error! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 19:00:06' prior: 50868144!
test01
	
	| aCart aCashier aCreditCard |
	aCashier := Cashier new.
	aCart := Cart withCatalogue: OrderedCollection new.	
		
	self should: [aCashier checkOut: aCart with: '4444 4444 4444 4444'] 
	raise: Error
	withMessageText: Cashier canNotCheckOutAnEmptyCartErrorDescription.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 19:00:17' prior: 50868154!
test01
	
	| aCart aCashier |
	aCashier := Cashier new.
	aCart := Cart withCatalogue: OrderedCollection new.	
		
	self should: [aCashier checkOut: aCart with: '4444 4444 4444 4444'] 
	raise: Error
	withMessageText: Cashier canNotCheckOutAnEmptyCartErrorDescription.! !

!testRun: #CashierTest #test01 stamp: 'NNH 11/19/2020 19:00:29'!
ERROR!

!testRun: #CashierTest #test01 stamp: 'NNH 11/19/2020 19:00:29'!
ERROR!
!Cashier class methodsFor: 'error descriptions' stamp: 'NNH 11/19/2020 19:00:52'!
canNotCheckOutAnEmptyCartErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error descriptions' stamp: 'NNH 11/19/2020 19:01:23' prior: 50868182!
canNotCheckOutAnEmptyCartErrorDescription
	^ 'A cashier can not check out an empty cart'! !

!testRun: #CashierTest #test01 stamp: 'NNH 11/19/2020 19:01:25'!
FAILURE!
!Cashier methodsFor: 'nil' stamp: 'NNH 11/19/2020 19:02:35'!
checkOut: aCart with: aCreditCard
	
	self error: self class canNotCheckOutAnEmptyCartErrorDescription .! !

!testRun: #CashierTest #test01 stamp: 'NNH 11/19/2020 19:02:43'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 19:05:05'!
test02
	
	| aCart aCashier aBook |
	aCashier := Cashier new.
	aBook := 'Harry Potter'.
	aCart := Cart withCatalogue: (OrderedCollection with: aBook).	
	aCart addToCart: aBook withOccurrences: 1. 
		
	aCashier checkOut: aCart with: '4444 4444 4444 4444'.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 19:05:20' prior: 50868205!
test02
	
	| aCart aCashier aBook |
	
	aCashier := Cashier new.
	aBook := 'Harry Potter'.
	aCart := Cart withCatalogue: (OrderedCollection with: aBook).	
	aCart addToCart: aBook withOccurrences: 1. 
		
	aCashier checkOut: aCart with: '4444 4444 4444 4444'.
! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'NNH 11/19/2020 19:12:14'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 19:12:07' prior: 50868217!
test02
	
	| aCart aCashier aCreditCard |
	
	aCashier := Cashier new.
	aCart := Cart withCatalogue: OrderedCollection new.
	aCreditCard := CreditCard new.
	
	aCashier checkOut: aCart with: aCreditCard.
! !

TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'NNH 11/19/2020 19:12:46'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'no messages' stamp: 'NNH 11/19/2020 19:18:45'!
test01

	| aCardId aCreditCard aMonthInCalendar aPerson |
	aCardId := 4444444444444444.
	aMonthInCalendar := November, 2020.
	aPerson := 'Hern�n'.
	aCreditCard := CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson.
	
	self assert: aCreditCard number equals: aCardId.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 19:20:26' prior: 50868255!
test01

	| aCardId aCreditCard aMonthInCalendar aPerson |
	
	aCardId := 4444444444444444.
	aMonthInCalendar := December, 2020.
	aPerson := 'Hern�n'.
	
	aCreditCard := CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson.
	
	self assert: aCreditCard number equals: aCardId.
	self assert: aCreditCard expirationDate equals: aMonthInCalendar.
	self assert: aCreditCard owner equals: aPerson.

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 19:20:49' prior: 50868268!
test01

	| aCardId aCreditCard aMonthInCalendar aPerson |
	
	aCardId := 4444444444444444.
	aMonthInCalendar := January, 2021.
	aPerson := 'Hern�n'.
	
	aCreditCard := CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson.
	
	self assert: aCreditCard number equals: aCardId.
	self assert: aCreditCard expirationDate equals: aMonthInCalendar.
	self assert: aCreditCard owner equals: aPerson.

	! !

!testRun: #CreditCardTest #test01 stamp: 'NNH 11/19/2020 19:20:58'!
ERROR!

!testRun: #CreditCardTest #test01 stamp: 'NNH 11/19/2020 19:20:58'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'NNH 11/19/2020 19:21:10'!
withNumber: aSmallInteger expirationDate: aGregorianMonthOfYear owner: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithNumber: aSmallInteger expirationDate: aGregorianMonthOfYear owner: aString ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'NNH 11/19/2020 19:24:38' prior: 50868306!
withNumber: aNumber expirationDate: aMonthAndAYear owner: aPerson 
	
	^ self new initializeWithNumber: aNumber expirationDate: aMonthAndAYear owner: aPerson . ! !

!testRun: #CreditCardTest #test01 stamp: 'NNH 11/19/2020 19:24:48'!
ERROR!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'NNH 11/19/2020 19:25:06'!
Object subclass: #CreditCard
	instanceVariableNames: 'number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'NNH 11/19/2020 19:25:07'!
Object subclass: #CreditCard
	instanceVariableNames: 'number monthAndAYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'NNH 11/19/2020 19:25:07'!
Object subclass: #CreditCard
	instanceVariableNames: 'number monthAndAYear person'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'NNH 11/19/2020 19:25:07'!
initializeWithNumber: aNumber expirationDate: aMonthAndAYear owner: aPerson 
	self shouldBeImplemented.
	number := aNumber.
	monthAndAYear := aMonthAndAYear.
	person := aPerson.! !
!CreditCard methodsFor: 'initialization' stamp: 'NNH 11/19/2020 19:25:47' prior: 50868350!
initializeWithNumber: aNumber expirationDate: aMonthAndAYear owner: aPerson 
	
	number := aNumber.
	monthAndAYear := aMonthAndAYear.
	person := aPerson.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'NNH 11/19/2020 19:25:53'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationDate person'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 19:25:53' prior: 50868359!
initializeWithNumber: aNumber expirationDate: aMonthAndAYear owner: aPerson 
	
	number := aNumber.
	expirationDate := aMonthAndAYear.
	person := aPerson.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'NNH 11/19/2020 19:26:00'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 19:26:00' prior: 50868375!
initializeWithNumber: aNumber expirationDate: aMonthAndAYear owner: aPerson 
	
	number := aNumber.
	expirationDate := aMonthAndAYear.
	owner := aPerson.! !

!testRun: #CreditCardTest #test01 stamp: 'NNH 11/19/2020 19:26:06'!
ERROR!
!CreditCard methodsFor: 'accessing' stamp: 'NNH 11/19/2020 19:26:17'!
number
	self shouldBeImplemented.
	^number! !
!CreditCard methodsFor: 'accessing' stamp: 'NNH 11/19/2020 19:26:26' prior: 50868401!
number

	^ number! !

!testRun: #CreditCardTest #test01 stamp: 'NNH 11/19/2020 19:26:28'!
ERROR!
!CreditCard methodsFor: 'accessing' stamp: 'NNH 11/19/2020 19:26:34'!
expirationDate
	self shouldBeImplemented.
	^expirationDate! !
!CreditCard methodsFor: 'accessing' stamp: 'NNH 11/19/2020 19:26:39' prior: 50868412!
expirationDate

	^ expirationDate! !

!testRun: #CreditCardTest #test01 stamp: 'NNH 11/19/2020 19:26:41'!
ERROR!
!CreditCard methodsFor: 'accessing' stamp: 'NNH 11/19/2020 19:26:47'!
owner
	self shouldBeImplemented.
	^owner! !
!CreditCard methodsFor: 'accessing' stamp: 'NNH 11/19/2020 19:26:51' prior: 50868423!
owner

	^ owner! !

!testRun: #CreditCardTest #test01 stamp: 'NNH 11/19/2020 19:26:53'!
PASSED!

!testRun: #CreditCardTest #test01 stamp: 'NNH 11/19/2020 19:26:59'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 19:27:05'!
test02

	| aCardId aCreditCard aMonthInCalendar aPerson |
	
	aCardId := 4444444444444444.
	aMonthInCalendar := January, 2021.
	aPerson := 'Hern�n'.
	
	aCreditCard := CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson.
	
	self assert: aCreditCard number equals: aCardId.
	self assert: aCreditCard expirationDate equals: aMonthInCalendar.
	self assert: aCreditCard owner equals: aPerson.

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 19:28:36' prior: 50868437!
test02

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 0.
	aMonthInCalendar := January, 2021.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	! !

!testRun: #CreditCardTest #test02 stamp: 'NNH 11/19/2020 19:28:51'!
ERROR!

!testRun: #CreditCardTest #test02 stamp: 'NNH 11/19/2020 19:28:51'!
ERROR!
!CreditCard class methodsFor: 'error descriptions' stamp: 'NNH 11/19/2020 19:29:07'!
invalidCardNumberErrorDescription
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'NNH 11/19/2020 19:29:51' prior: 50868471!
invalidCardNumberErrorDescription
	
	^ 'Credit card number must be a positive integer' .! !

!testRun: #CreditCardTest #test02 stamp: 'NNH 11/19/2020 19:29:56'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'NNH 11/19/2020 19:31:23' prior: 50868318!
withNumber: aNumber expirationDate: aMonthAndAYear owner: aPerson 
	
	aNumber <= 0 ifTrue: [ self error: self invalidCardNumberErrorDescription ] .
	
	
	^ self new initializeWithNumber: aNumber expirationDate: aMonthAndAYear owner: aPerson . ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'NNH 11/19/2020 19:31:27' prior: 50868486!
withNumber: aNumber expirationDate: aMonthAndAYear owner: aPerson 
	
	aNumber <= 0 ifTrue: [ self error: self invalidCardNumberErrorDescription ] .
	
	^ self new initializeWithNumber: aNumber expirationDate: aMonthAndAYear owner: aPerson . ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'NNH 11/19/2020 19:31:34' prior: 50868497!
withNumber: aNumber expirationDate: aMonthAndAYear owner: aPerson 
	
	aNumber <= 0 ifTrue: [ ^ self error: self invalidCardNumberErrorDescription ] .
	
	^ self new initializeWithNumber: aNumber expirationDate: aMonthAndAYear owner: aPerson . ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'NNH 11/19/2020 19:31:41' prior: 50868508!
withNumber: aNumber expirationDate: aMonthAndAYear owner: aPerson 
	
	aNumber <= 0 ifTrue: [ self error: self invalidCardNumberErrorDescription ] .
	
	^ self new initializeWithNumber: aNumber expirationDate: aMonthAndAYear owner: aPerson . ! !

!testRun: #CreditCardTest #test02 stamp: 'NNH 11/19/2020 19:31:54'!
PASSED!
!CartTest methodsFor: 'tests - errors' stamp: 'NNH 11/19/2020 19:32:35' prior: 50868005!
test04ABookShouldNotBeAddedWhenNotForSale

	| aCart catalogue |
	
	catalogue := OrderedCollection with: harryPotter.
	
	aCart := Cart withCatalogue: catalogue.
	
	self should: [ aCart addToCart: lordOfTheRings withOccurrences: 1 ]
		raise: Error
		withMessageText: Cart bookIsNotForSaleErrorDescription.
		
	self assert: aCart isEmpty. ! !

!testRun: #CartTest #test04ABookShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/19/2020 19:32:39'!
PASSED!
!CartTest methodsFor: 'tests - errors' stamp: 'NNH 11/19/2020 19:32:50' prior: 50868017!
test06ABookShouldNotBeAddedWithNonIntegerQuantity

	| aCart catalogue |
	
	catalogue := OrderedCollection with: harryPotter.
	
	aCart := Cart withCatalogue: catalogue.
	
	self should: [ aCart addToCart: harryPotter withOccurrences: 0.5 ]
		raise: Error
		withMessageText: Cart bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription.
		
	self assert: aCart isEmpty. ! !
!CartTest methodsFor: 'tests - errors' stamp: 'NNH 11/19/2020 19:32:57' prior: 50868030!
test07ABookShouldNotBeAddedWithNonPositiveQuantity

	| aCart catalogue |
	
	catalogue := OrderedCollection with: harryPotter.
	
	aCart := Cart withCatalogue: catalogue.
	
	self should: [ aCart addToCart: harryPotter withOccurrences: 0 ]
		raise: Error
		withMessageText: Cart bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription.
		
	self assert: aCart isEmpty. ! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/19/2020 19:33:01'!
PASSED!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/19/2020 19:33:01'!
PASSED!

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/19/2020 19:33:01'!
PASSED!

!testRun: #CartTest #test04ABookShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/19/2020 19:33:01'!
PASSED!

!testRun: #CartTest #test05ABookAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/19/2020 19:33:01'!
PASSED!

!testRun: #CartTest #test06ABookShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/19/2020 19:33:01'!
PASSED!

!testRun: #CartTest #test07ABookShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/19/2020 19:33:01'!
PASSED!

!testRun: #CartTest #test08ExternallyAddingBookToCartListShouldNotModifyCart stamp: 'NNH 11/19/2020 19:33:01'!
PASSED!

!testRun: #CreditCardTest #test02 stamp: 'NNH 11/19/2020 19:33:10'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 19:34:06'!
test03

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 4444444444444444.
	aMonthInCalendar := January, 2021.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	! !

January, 2021!
!CreditCard class methodsFor: 'instance creation' stamp: 'NNH 11/19/2020 19:34:48' prior: 50868519!
withNumber: aNumber expirationDate: aMonthOfYear owner: aPerson 
	
	aNumber <= 0 ifTrue: [ self error: self invalidCardNumberErrorDescription ] .
	
	^ self new initializeWithNumber: aNumber expirationDate: aMonthOfYear owner: aPerson . ! !
!CreditCard methodsFor: 'initialization' stamp: 'NNH 11/19/2020 19:34:56' prior: 50868391!
initializeWithNumber: aNumber expirationDate: aMonthOfYear owner: aPerson 
	
	number := aNumber.
	expirationDate := aMonthOfYear.
	owner := aPerson.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 19:35:48' prior: 50868609!
test03

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 4444444444444444.
	aMonthInCalendar := January, 26.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	! !

January, 26!

January, 26!

January/03!

January/03!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 19:36:48' prior: 50868642!
test03

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 4444444444444444.
	aMonthInCalendar := January/03/2021.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 19:36:57' prior: 50868657!
test03

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 4444444444444444.
	aMonthInCalendar := January/03/2021.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidExpirationDateErrorDescription .
	

	! !

!testRun: #CreditCardTest #test03 stamp: 'NNH 11/19/2020 19:37:02'!
ERROR!

!testRun: #CreditCardTest #test03 stamp: 'NNH 11/19/2020 19:37:02'!
ERROR!
!CreditCard class methodsFor: 'error descriptions' stamp: 'NNH 11/19/2020 19:37:20'!
invalidExpirationDateErrorDescription
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'NNH 11/19/2020 19:37:40' prior: 50868689!
invalidExpirationDateErrorDescription
	
	^ 'Expiration date must be a moth of year' .! !

!testRun: #CreditCardTest #test03 stamp: 'NNH 11/19/2020 19:37:43'!
FAILURE!

!testRun: #CreditCardTest #test03 stamp: 'NNH 11/19/2020 19:38:55'!
FAILURE!

!testRun: #CreditCardTest #test03 stamp: 'NNH 11/19/2020 19:38:55'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'NNH 11/19/2020 19:42:27' prior: 50868623!
withNumber: aNumber expirationDate: aMonthOfYear owner: aPerson 
	
	aNumber <= 0 ifTrue: [ self error: self invalidCardNumberErrorDescription ] .
	(aMonthOfYear isKindOf: GregorianMonthOfYear) ifFalse: [ self error: self invalidExpirationDateErrorDescription ] .
		
	^ self new initializeWithNumber: aNumber expirationDate: aMonthOfYear owner: aPerson . ! !

!testRun: #CreditCardTest #test01 stamp: 'NNH 11/19/2020 19:42:35'!
PASSED!

!testRun: #CreditCardTest #test02 stamp: 'NNH 11/19/2020 19:42:35'!
PASSED!

!testRun: #CreditCardTest #test03 stamp: 'NNH 11/19/2020 19:42:35'!
PASSED!

January/03/2021!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 19:43:32' prior: 50868671!
test03

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 4444444444444444.
	aMonthInCalendar := PointInTime new.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidExpirationDateErrorDescription .
	

	! !

!testRun: #CreditCardTest #test03 stamp: 'NNH 11/19/2020 19:43:36'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 19:44:03' prior: 50868732!
test03

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 4444444444444444.
	aMonthInCalendar := January, 2020.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidExpirationDateErrorDescription .
	

	! !

!testRun: #CreditCardTest #test03 stamp: 'NNH 11/19/2020 19:44:06'!
FAILURE!

!testRun: #CreditCardTest #test03 stamp: 'NNH 11/19/2020 19:44:06'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 19:36:57' prior: 50868748!
test03

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 4444444444444444.
	aMonthInCalendar := January/03/2021.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidExpirationDateErrorDescription .
	

	! !

!testRun: #CreditCardTest #test03 stamp: 'NNH 11/19/2020 19:44:34'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 19:44:41' prior: 50868767!
test03

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 4444444444444444.
	aMonthInCalendar := January/01/2021.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidExpirationDateErrorDescription .
	

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 19:45:06'!
test04

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 4444444444444444.
	aMonthInCalendar := January, 2021.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidExpirationDateErrorDescription .
	

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 19:45:40' prior: 50868796!
test04

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 0.5 .
	aMonthInCalendar := January, 2021.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidExpirationDateErrorDescription .
	

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 19:45:55' prior: 50868810!
test04

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 0.5 .
	aMonthInCalendar := January, 2021.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	! !

!testRun: #CreditCardTest #test04 stamp: 'NNH 11/19/2020 19:45:59'!
FAILURE!

!testRun: #CreditCardTest #test04 stamp: 'NNH 11/19/2020 19:45:59'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'NNH 11/19/2020 19:47:16' prior: 50868709!
withNumber: aNumber expirationDate: aMonthOfYear owner: aPerson 
	
	(aNumber isInteger and: [ aNumber > 0 ]) ifFalse: [ self error: self invalidCardNumberErrorDescription ] .
	(aMonthOfYear isKindOf: GregorianMonthOfYear) ifFalse: [ self error: self invalidExpirationDateErrorDescription ] .
		
	^ self new initializeWithNumber: aNumber expirationDate: aMonthOfYear owner: aPerson . ! !

!testRun: #CreditCardTest #test04 stamp: 'NNH 11/19/2020 19:47:28'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'NNH 11/19/2020 19:47:56'!
ERROR!

!testRun: #CashierTest #test02 stamp: 'NNH 11/19/2020 19:47:56'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 19:48:55' prior: 50868235!
test02
	
	| aCart aCashier aCreditCard |
	
	aCashier := Cashier new.
	aCart := Cart withCatalogue: OrderedCollection new.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  
	
	aCashier checkOut: aCart with: aCreditCard.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 19:51:42' prior: 50868864!
test02
	
	| aCart aCashier aCreditCard |
	
	aCashier := Cashier new.
	aCart := Cart withCatalogue: OrderedCollection new.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier creditCardIsInvalidErrorDescription.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 19:51:58' prior: 50868876!
test02
	
	| aCart aCashier aCreditCard |
	
	aCashier := Cashier new.
	aCart := Cart withCatalogue: OrderedCollection new.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier creditCardIsDeclinedErrorDescription.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 19:54:51' prior: 50868891!
test02
	
	| aCart aCashier aCreditCard |
	
	aCashier := Cashier new.
	aCart := Cart withCatalogue: OrderedCollection new.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier declinedCreditCardErrorDescription.
! !

!testRun: #CashierTest #test02 stamp: 'NNH 11/19/2020 19:54:57'!
ERROR!

!testRun: #CashierTest #test02 stamp: 'NNH 11/19/2020 19:54:57'!
ERROR!
!Cashier class methodsFor: 'error descriptions' stamp: 'NNH 11/19/2020 19:55:07'!
declinedCreditCardErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error descriptions' stamp: 'NNH 11/19/2020 19:55:22' prior: 50868925!
declinedCreditCardErrorDescription
	
	^ 'Credit card is declined'! !

!testRun: #CashierTest #test02 stamp: 'NNH 11/19/2020 19:55:43'!
FAILURE!

!testRun: #CashierTest #test02 stamp: 'NNH 11/19/2020 19:55:43'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 20:02:12' prior: 50868196!
checkOut: aCart with: aCreditCard
	
	(aCreditCard expirationDate distanceFrom: GregorianDate now) > 0 ifTrue: [ self error: self class  ].
	
	self error: self class canNotCheckOutAnEmptyCartErrorDescription .! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 20:02:24' prior: 50868941!
checkOut: aCart with: aCreditCard
	
	(aCreditCard expirationDate distanceFrom: GregorianDate now) > 0 ifTrue: [ self error: self declinedCreditCardErrorDescription ].
	
	self error: self class canNotCheckOutAnEmptyCartErrorDescription .! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 20:02:25' prior: 50868951!
checkOut: aCart with: aCreditCard
	
	(aCreditCard expirationDate distanceFrom: GregorianDate now) > 0 ifTrue: [ self error: self declinedCreditCardErrorDescription ] .
	
	self error: self class canNotCheckOutAnEmptyCartErrorDescription .! !

!testRun: #CreditCardTest #test04 stamp: 'NNH 11/19/2020 20:08:16'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 20:08:56' prior: 50868962!
checkOut: aCart with: aCreditCard
	
	(aCreditCard expirationDate < GregorianDate now) ifTrue: [ self error: self declinedCreditCardErrorDescription ] .
	
	self error: self class canNotCheckOutAnEmptyCartErrorDescription .! !

!testRun: #CashierTest #test01 stamp: 'NNH 11/19/2020 20:08:59'!
FAILURE!

!testRun: #CashierTest #test02 stamp: 'NNH 11/19/2020 20:08:59'!
FAILURE!

----End fileIn of /home/nahuel/Documents/cuisuniversity/Packages/TerseGuide.pck.st----!
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 20:11:40' prior: 50868975!
checkOut: aCart with: aCreditCard
	
	(aCreditCard expirationDate < GregorianDate today ) ifTrue: [ self error: self declinedCreditCardErrorDescription ] .
	
	self error: self class canNotCheckOutAnEmptyCartErrorDescription .! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 20:11:42' prior: 50871925!
checkOut: aCart with: aCreditCard
	
	(aCreditCard expirationDate < GregorianDate today) ifTrue: [ self error: self declinedCreditCardErrorDescription ] .
	
	self error: self class canNotCheckOutAnEmptyCartErrorDescription .! !

!testRun: #CashierTest #test01 stamp: 'NNH 11/19/2020 20:11:47'!
FAILURE!

!testRun: #CashierTest #test02 stamp: 'NNH 11/19/2020 20:11:47'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 20:12:08' prior: 50871936!
checkOut: aCart with: aCreditCard
	
	(aCreditCard expirationDate distanceTo: GregorianDate today) > 0 ifTrue: [ self error: self declinedCreditCardErrorDescription ] .
	
	self error: self class canNotCheckOutAnEmptyCartErrorDescription .! !

!testRun: #CashierTest #test02 stamp: 'NNH 11/19/2020 20:12:20'!
FAILURE!

!testRun: #CashierTest #test01 stamp: 'NNH 11/19/2020 20:12:20'!
FAILURE!

!testRun: #CashierTest #test01 stamp: 'NNH 11/19/2020 20:12:25'!
FAILURE!

!testRun: #CashierTest #test02 stamp: 'NNH 11/19/2020 20:12:25'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 20:12:33' prior: 50871951!
checkOut: aCart with: aCreditCard
	
	(aCreditCard expirationDate distanceTo: GregorianDate now) > 0 ifTrue: [ self error: self declinedCreditCardErrorDescription ] .
	
	self error: self class canNotCheckOutAnEmptyCartErrorDescription .! !

!testRun: #CashierTest #test01 stamp: 'NNH 11/19/2020 20:12:37'!
FAILURE!

!testRun: #CashierTest #test02 stamp: 'NNH 11/19/2020 20:12:37'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 20:12:56' prior: 50871971!
checkOut: aCart with: aCreditCard
	
	(aCreditCard expirationDate distanceFrom: GregorianDate now) > 0 ifTrue: [ self error: self declinedCreditCardErrorDescription ] .
	
	self error: self class canNotCheckOutAnEmptyCartErrorDescription .! !

!testRun: #CashierTest #test01 stamp: 'NNH 11/19/2020 20:12:59'!
FAILURE!

!testRun: #CashierTest #test02 stamp: 'NNH 11/19/2020 20:12:59'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 20:13:26' prior: 50871987!
checkOut: aCart with: aCreditCard
	
	(aCreditCard expirationDate distanceTo: GregorianDate now) > 0 ifTrue: [ self error: self declinedCreditCardErrorDescription ] .
	
	self error: self class canNotCheckOutAnEmptyCartErrorDescription .! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 20:13:47' prior: 50872003!
checkOut: aCart with: aCreditCard
	
	(aCreditCard expirationDate distanceTo: Date today) > 0 ifTrue: [ self error: self declinedCreditCardErrorDescription ] .
	
	self error: self class canNotCheckOutAnEmptyCartErrorDescription .! !

!testRun: #CashierTest #test01 stamp: 'NNH 11/19/2020 20:13:52'!
FAILURE!

!testRun: #CashierTest #test02 stamp: 'NNH 11/19/2020 20:13:52'!
FAILURE!

Date today!
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 20:14:28' prior: 50872014!
checkOut: aCart with: aCreditCard
	
	(aCreditCard expirationDate distanceTo: GregorianDate now) > 0 ifTrue: [ self error: self declinedCreditCardErrorDescription ] .
	
	self error: self class canNotCheckOutAnEmptyCartErrorDescription .! !

GregorianDate now!
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 20:16:17' prior: 50872030!
checkOut: aCart with: aCreditCard
	
	(aCreditCard expirationDate distanceTo: GregorianMonth ) > 0 ifTrue: [ self error: self declinedCreditCardErrorDescription ] .
	
	self error: self class canNotCheckOutAnEmptyCartErrorDescription .! !

GregorianMonth!
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 20:18:35' prior: 50872041!
checkOut: aCart with: aCreditCard
	
	(aCreditCard expirationDate distanceTo: Date today ) > 0 ifTrue: [ self error: self declinedCreditCardErrorDescription ] .
	
	self error: self class canNotCheckOutAnEmptyCartErrorDescription .! !

Date today!

January, 2020 distanceTo: Date today!

(January, 2020) distanceTo: Date today!

((January, 2020) dayOfMonth: 01) distanceTo: Date today!

((January, 2020) / 01)!

((January, 2020)  ) < Date today!

(January, 2020 ) < (Date today).!

(January, 2020 ) < (Date today).!

(GregorianDate newFrom: Date today).!

(January, 2020 ) < (February , 2020).!

(January, 2020 )> (February , 2020).!

FixedGregorianDate today.!

October, 2020 < FixedGregorianDate today.!

October, 2020 < FixedGregorianDate today.!

October, 2020 < FixedGregorianDate today.!

November, 2020 < FixedGregorianDate today. !

November, 2020 <= FixedGregorianDate today.  false !

November, 2020 <= FixedGregorianDate today. !

November, 2020 > FixedGregorianDate today. !

November, 2020 > FixedGregorianDate today. !

December, 2020 > FixedGregorianDate today. !

December, 2020 < FixedGregorianDate today. !
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 20:27:01' prior: 50872052!
checkOut: aCart with: aCreditCard
	
	(aCreditCard expirationDate < FixedGregorianDate today) ifTrue: [ self error: self declinedCreditCardErrorDescription ] .
	
	self error: self class canNotCheckOutAnEmptyCartErrorDescription .! !

!testRun: #CashierTest #test01 stamp: 'NNH 11/19/2020 20:27:07'!
FAILURE!

!testRun: #CashierTest #test02 stamp: 'NNH 11/19/2020 20:27:07'!
FAILURE!

!testRun: #CashierTest #test01 stamp: 'NNH 11/19/2020 20:27:40'!
FAILURE!

!testRun: #CashierTest #test01 stamp: 'NNH 11/19/2020 20:27:40'!
FAILURE!

!testRun: #CashierTest #test02 stamp: 'NNH 11/19/2020 20:28:00'!
FAILURE!

!testRun: #CashierTest #test02 stamp: 'NNH 11/19/2020 20:28:00'!
FAILURE!

!testRun: #CashierTest #test02 stamp: 'NNH 11/19/2020 20:28:20'!
FAILURE!

!testRun: #CashierTest #test02 stamp: 'NNH 11/19/2020 20:28:20'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 20:29:09' prior: 50868166!
test01
	
	| aCart aCashier aCreditCard |
	aCashier := Cashier new.
	aCart := Cart withCatalogue: OrderedCollection new.	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  

	self should: [aCashier checkOut: aCart with: aCreditCard] 
	raise: Error
	withMessageText: Cashier canNotCheckOutAnEmptyCartErrorDescription.! !

!testRun: #CashierTest #test01 stamp: 'NNH 11/19/2020 20:29:14'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'NNH 11/19/2020 20:29:19'!
FAILURE!

!testRun: #CashierTest #test02 stamp: 'NNH 11/19/2020 20:29:19'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 20:29:37' prior: 50872090!
checkOut: aCart with: aCreditCard
	
	(aCreditCard expirationDate < FixedGregorianDate today) ifTrue: [ self error: self class declinedCreditCardErrorDescription ] .
	
	self error: self class canNotCheckOutAnEmptyCartErrorDescription .! !

!testRun: #CashierTest #test01 stamp: 'NNH 11/19/2020 20:29:41'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'NNH 11/19/2020 20:29:41'!
PASSED!

----QUIT----(19 November 2020 20:34:16) CuisUniversity-4384.image priorSource: 17159933!

----STARTUP---- (19 November 2020 20:54:25) as /home/nahuel/Documents/cuisuniversity/CuisUniversity-4384.image!

!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 20:57:58' prior: 50868823!
test04

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 0.5 .
	aMonthInCalendar := January, 2021.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:03:16' prior: 50868454!
test02

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 9999999999999.
	aMonthInCalendar := January, 2021.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:03:44' prior: 50872177!
test02

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 10 ^ 16 - 1.
	aMonthInCalendar := January, 2021.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	! !

10 ^ 16 - 1.!

!testRun: #CreditCardTest #test02 stamp: 'NNH 11/19/2020 21:04:01'!
FAILURE!

!testRun: #CreditCardTest #test02 stamp: 'NNH 11/19/2020 21:04:01'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:04:27'!
test05

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 10 ^ 17.
	aMonthInCalendar := January, 2021.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	! !
!CreditCard class methodsFor: 'instance creation' stamp: 'NNH 11/19/2020 21:05:41' prior: 50868841!
withNumber: aNumber expirationDate: aMonthOfYear owner: aPerson 
	
	(aNumber isInteger and: [ aNumber between: 10 ^ 16 and: 10 ^ 17 ]) ifFalse: [ self error: self invalidCardNumberErrorDescription ] .
	(aMonthOfYear isKindOf: GregorianMonthOfYear) ifFalse: [ self error: self invalidExpirationDateErrorDescription ] .
		
	^ self new initializeWithNumber: aNumber expirationDate: aMonthOfYear owner: aPerson . ! !

!testRun: #CreditCardTest #test01 stamp: 'NNH 11/19/2020 21:05:44'!
ERROR!

!testRun: #CreditCardTest #test02 stamp: 'NNH 11/19/2020 21:05:44'!
PASSED!

!testRun: #CreditCardTest #test03 stamp: 'NNH 11/19/2020 21:05:44'!
FAILURE!

!testRun: #CreditCardTest #test04 stamp: 'NNH 11/19/2020 21:05:44'!
PASSED!

!testRun: #CreditCardTest #test05 stamp: 'NNH 11/19/2020 21:05:44'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'NNH 11/19/2020 21:06:02' prior: 50872222!
withNumber: aNumber expirationDate: aMonthOfYear owner: aPerson 
	
	(aNumber isInteger and: [ aNumber between: 10 ^ 15 and: 10 ^ 16 ]) ifFalse: [ self error: self invalidCardNumberErrorDescription ] .
	(aMonthOfYear isKindOf: GregorianMonthOfYear) ifFalse: [ self error: self invalidExpirationDateErrorDescription ] .
		
	^ self new initializeWithNumber: aNumber expirationDate: aMonthOfYear owner: aPerson . ! !

!testRun: #CreditCardTest #test01 stamp: 'NNH 11/19/2020 21:06:05'!
PASSED!

!testRun: #CreditCardTest #test02 stamp: 'NNH 11/19/2020 21:06:05'!
FAILURE!

!testRun: #CreditCardTest #test03 stamp: 'NNH 11/19/2020 21:06:05'!
PASSED!

!testRun: #CreditCardTest #test04 stamp: 'NNH 11/19/2020 21:06:05'!
PASSED!

!testRun: #CreditCardTest #test05 stamp: 'NNH 11/19/2020 21:06:05'!
PASSED!

!testRun: #CreditCardTest #test02 stamp: 'NNH 11/19/2020 21:06:05'!
FAILURE!

!testRun: #CreditCardTest #test01 stamp: 'NNH 11/19/2020 21:06:18'!
PASSED!

!testRun: #CreditCardTest #test02 stamp: 'NNH 11/19/2020 21:06:18'!
FAILURE!

!testRun: #CreditCardTest #test03 stamp: 'NNH 11/19/2020 21:06:18'!
PASSED!

!testRun: #CreditCardTest #test04 stamp: 'NNH 11/19/2020 21:06:18'!
PASSED!

!testRun: #CreditCardTest #test05 stamp: 'NNH 11/19/2020 21:06:18'!
PASSED!

!testRun: #CreditCardTest #test02 stamp: 'NNH 11/19/2020 21:06:18'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:06:30' prior: 50872191!
test02

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 10 ^ 15 - 1.
	aMonthInCalendar := January, 2021.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:06:34' prior: 50872209!
test05

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 10 ^ 16.
	aMonthInCalendar := January, 2021.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	! !

!testRun: #CreditCardTest #test01 stamp: 'NNH 11/19/2020 21:06:37'!
PASSED!

!testRun: #CreditCardTest #test02 stamp: 'NNH 11/19/2020 21:06:37'!
PASSED!

!testRun: #CreditCardTest #test03 stamp: 'NNH 11/19/2020 21:06:37'!
PASSED!

!testRun: #CreditCardTest #test04 stamp: 'NNH 11/19/2020 21:06:37'!
PASSED!

!testRun: #CreditCardTest #test05 stamp: 'NNH 11/19/2020 21:06:37'!
FAILURE!

!testRun: #CreditCardTest #test05 stamp: 'NNH 11/19/2020 21:06:37'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'NNH 11/19/2020 21:06:54' prior: 50872251!
withNumber: aNumber expirationDate: aMonthOfYear owner: aPerson 
	
	(aNumber isInteger and: [ aNumber between: 10 ^ 15 and: 10 ^ 16 - 1]) ifFalse: [ self error: self invalidCardNumberErrorDescription ] .
	(aMonthOfYear isKindOf: GregorianMonthOfYear) ifFalse: [ self error: self invalidExpirationDateErrorDescription ] .
		
	^ self new initializeWithNumber: aNumber expirationDate: aMonthOfYear owner: aPerson . ! !

!testRun: #CreditCardTest #test01 stamp: 'NNH 11/19/2020 21:06:59'!
PASSED!

!testRun: #CreditCardTest #test02 stamp: 'NNH 11/19/2020 21:06:59'!
PASSED!

!testRun: #CreditCardTest #test03 stamp: 'NNH 11/19/2020 21:06:59'!
PASSED!

!testRun: #CreditCardTest #test04 stamp: 'NNH 11/19/2020 21:06:59'!
PASSED!

!testRun: #CreditCardTest #test05 stamp: 'NNH 11/19/2020 21:06:59'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:09:52'!
test01validCardPropertiesAreCorrect

	| aCardId aCreditCard aMonthInCalendar aPerson |
	
	aCardId := 4444444444444444.
	aMonthInCalendar := January, 2021.
	aPerson := 'Hern�n'.
	
	aCreditCard := CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson.
	
	self assert: aCreditCard number equals: aCardId.
	self assert: aCreditCard expirationDate equals: aMonthInCalendar.
	self assert: aCreditCard owner equals: aPerson.

	! !

!methodRemoval: CreditCardTest #test01 stamp: 'NNH 11/19/2020 21:09:52'!
test01

	| aCardId aCreditCard aMonthInCalendar aPerson |
	
	aCardId := 4444444444444444.
	aMonthInCalendar := January, 2021.
	aPerson := 'Hern�n'.
	
	aCreditCard := CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson.
	
	self assert: aCreditCard number equals: aCardId.
	self assert: aCreditCard expirationDate equals: aMonthInCalendar.
	self assert: aCreditCard owner equals: aPerson.

	!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:10:08'!
test01ValidCardPropertiesAreCorrect

	| aCardId aCreditCard aMonthInCalendar aPerson |
	
	aCardId := 4444444444444444.
	aMonthInCalendar := January, 2021.
	aPerson := 'Hern�n'.
	
	aCreditCard := CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson.
	
	self assert: aCreditCard number equals: aCardId.
	self assert: aCreditCard expirationDate equals: aMonthInCalendar.
	self assert: aCreditCard owner equals: aPerson.

	! !

!methodRemoval: CreditCardTest #test01validCardPropertiesAreCorrect stamp: 'NNH 11/19/2020 21:10:08'!
test01validCardPropertiesAreCorrect

	| aCardId aCreditCard aMonthInCalendar aPerson |
	
	aCardId := 4444444444444444.
	aMonthInCalendar := January, 2021.
	aPerson := 'Hern�n'.
	
	aCreditCard := CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson.
	
	self assert: aCreditCard number equals: aCardId.
	self assert: aCreditCard expirationDate equals: aMonthInCalendar.
	self assert: aCreditCard owner equals: aPerson.

	!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:10:51'!
test02CardNumberShouldNotHaveLessThan16Digits

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 10 ^ 15 - 1.
	aMonthInCalendar := January, 2021.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	! !

!methodRemoval: CreditCardTest #test02 stamp: 'NNH 11/19/2020 21:10:51'!
test02

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 10 ^ 15 - 1.
	aMonthInCalendar := January, 2021.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:11:22'!
test03CardExpirationDateShouldAMonthOfAnYear

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 4444444444444444.
	aMonthInCalendar := January/01/2021.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidExpirationDateErrorDescription .
	

	! !

!methodRemoval: CreditCardTest #test03 stamp: 'NNH 11/19/2020 21:11:22'!
test03

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 4444444444444444.
	aMonthInCalendar := January/01/2021.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidExpirationDateErrorDescription .
	

	!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:11:30'!
test03CardExpirationDateShouldBeAMonthOfAnYear

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 4444444444444444.
	aMonthInCalendar := January/01/2021.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidExpirationDateErrorDescription .
	

	! !

!methodRemoval: CreditCardTest #test03CardExpirationDateShouldAMonthOfAnYear stamp: 'NNH 11/19/2020 21:11:30'!
test03CardExpirationDateShouldAMonthOfAnYear

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 4444444444444444.
	aMonthInCalendar := January/01/2021.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidExpirationDateErrorDescription .
	

	!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:11:50'!
test04CardNumberShouldBeAnInteger

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 0.5 .
	aMonthInCalendar := January, 2021.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	! !

!methodRemoval: CreditCardTest #test04 stamp: 'NNH 11/19/2020 21:11:50'!
test04

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 0.5 .
	aMonthInCalendar := January, 2021.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:12:10'!
test05CardNumberShouldNotHaveMoreThan16Digits

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 10 ^ 16.
	aMonthInCalendar := January, 2021.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	! !

!methodRemoval: CreditCardTest #test05 stamp: 'NNH 11/19/2020 21:12:10'!
test05

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 10 ^ 16.
	aMonthInCalendar := January, 2021.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:12:31'!
test06OwnerNameIsNotEmpty

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 10 ^ 16.
	aMonthInCalendar := January, 2021.
	aPerson := 'Hern�n'.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:13:06' prior: 50872568!
test06OwnerNameIsNotEmpty

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 4444444444444444.
	aMonthInCalendar := January, 2021.
	aPerson := ''.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard emptyOwnerNameErrorDescription .
	

	! !

!testRun: #CreditCardTest #test06OwnerNameIsNotEmpty stamp: 'NNH 11/19/2020 21:13:11'!
ERROR!

!testRun: #CreditCardTest #test06OwnerNameIsNotEmpty stamp: 'NNH 11/19/2020 21:13:11'!
ERROR!
!CreditCard class methodsFor: 'error descriptions' stamp: 'NNH 11/19/2020 21:13:21'!
emptyOwnerNameErrorDescription
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'NNH 11/19/2020 21:13:44' prior: 50872601!
emptyOwnerNameErrorDescription
	
	^ 'Credit card should not have an empty owner name'! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'NNH 11/19/2020 21:14:16' prior: 50872607!
emptyOwnerNameErrorDescription
	
	^ 'Credit card should not have an invalid owner name'! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'NNH 11/19/2020 21:14:32'!
invalidOwnerNameErrorDescription
	
	^ 'Credit card should not have an invalid owner name'! !

!methodRemoval: CreditCard class #emptyOwnerNameErrorDescription stamp: 'NNH 11/19/2020 21:14:32'!
emptyOwnerNameErrorDescription
	
	^ 'Credit card should not have an invalid owner name'!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:15:08' prior: 50872582!
test06OwnerNameIsNotEmpty

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 4444444444444444.
	aMonthInCalendar := January, 2021.
	aPerson := ''.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidOwnerNameErrorDescription .
	

	! !

!testRun: #CreditCardTest #test06OwnerNameIsNotEmpty stamp: 'NNH 11/19/2020 21:15:10'!
FAILURE!

!testRun: #CreditCardTest #test06OwnerNameIsNotEmpty stamp: 'NNH 11/19/2020 21:15:10'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'NNH 11/19/2020 21:16:07' prior: 50872339!
withNumber: aNumber expirationDate: aMonthOfYear owner: aPerson 
	
	( aNumber isInteger and: [ aNumber between: 10 ^ 15 and: 10 ^ 16 - 1]) ifFalse: [ self error: self invalidCardNumberErrorDescription ] .
	( aMonthOfYear isKindOf: GregorianMonthOfYear) ifFalse: [ self error: self invalidExpirationDateErrorDescription ] .
	aPerson isEmpty ifTrue: [ self error: self class invalidOwnerNameErrorDescription ] .
		
	^ self new initializeWithNumber: aNumber expirationDate: aMonthOfYear owner: aPerson . ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'NNH 11/19/2020 21:16:18' prior: 50872651!
withNumber: aNumber expirationDate: aMonthOfYear owner: aPerson 
	
	( aNumber isInteger and: [ aNumber between: 10 ^ 15 and: 10 ^ 16 - 1 ] ) ifFalse: [ self error: self invalidCardNumberErrorDescription ] .
	( aMonthOfYear isKindOf: GregorianMonthOfYear ) ifFalse: [ self error: self invalidExpirationDateErrorDescription ] .
	aPerson isEmpty ifTrue: [ self error: self class invalidOwnerNameErrorDescription ] .
		
	^ self new initializeWithNumber: aNumber expirationDate: aMonthOfYear owner: aPerson . ! !

!testRun: #CreditCardTest #test01ValidCardPropertiesAreCorrect stamp: 'NNH 11/19/2020 21:16:24'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/19/2020 21:16:24'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/19/2020 21:16:24'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/19/2020 21:16:24'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/19/2020 21:16:24'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameIsNotEmpty stamp: 'NNH 11/19/2020 21:16:24'!
FAILURE!

!testRun: #CreditCardTest #test06OwnerNameIsNotEmpty stamp: 'NNH 11/19/2020 21:16:24'!
FAILURE!

!testRun: #CreditCardTest #test06OwnerNameIsNotEmpty stamp: 'NNH 11/19/2020 21:16:41'!
FAILURE!

!testRun: #CreditCardTest #test06OwnerNameIsNotEmpty stamp: 'NNH 11/19/2020 21:16:41'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'NNH 11/19/2020 21:16:58' prior: 50872670!
withNumber: aNumber expirationDate: aMonthOfYear owner: aPerson 
	
	( aNumber isInteger and: [ aNumber between: 10 ^ 15 and: 10 ^ 16 - 1 ] ) ifFalse: [ self error: self invalidCardNumberErrorDescription ] .
	( aMonthOfYear isKindOf: GregorianMonthOfYear ) ifFalse: [ self error: self invalidExpirationDateErrorDescription ] .
	aPerson isEmpty ifTrue: [ self error: self invalidOwnerNameErrorDescription ] .
		
	^ self new initializeWithNumber: aNumber expirationDate: aMonthOfYear owner: aPerson . ! !

!testRun: #CreditCardTest #test01ValidCardPropertiesAreCorrect stamp: 'NNH 11/19/2020 21:17:07'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/19/2020 21:17:07'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/19/2020 21:17:07'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/19/2020 21:17:07'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/19/2020 21:17:07'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameIsNotEmpty stamp: 'NNH 11/19/2020 21:17:07'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:18:00'!
test07OwnerNameShouldNotBeBlank

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 4444444444444444.
	aMonthInCalendar := January, 2021.
	aPerson := ''.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidOwnerNameErrorDescription .
	

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:18:12'!
test06OwnerNameShouldNotBeEmpty

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 4444444444444444.
	aMonthInCalendar := January, 2021.
	aPerson := ''.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidOwnerNameErrorDescription .
	

	! !

!methodRemoval: CreditCardTest #test06OwnerNameIsNotEmpty stamp: 'NNH 11/19/2020 21:18:12'!
test06OwnerNameIsNotEmpty

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 4444444444444444.
	aMonthInCalendar := January, 2021.
	aPerson := ''.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidOwnerNameErrorDescription .
	

	!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:18:20' prior: 50872758!
test07OwnerNameShouldNotBeBlank

	| aCardId aMonthInCalendar aPerson |
	
	aCardId := 4444444444444444.
	aMonthInCalendar := January, 2021.
	aPerson := '          '.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: aMonthInCalendar owner: aPerson ]
	raise: Error
	withMessageText: CreditCard invalidOwnerNameErrorDescription .
	

	! !

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/19/2020 21:18:23'!
FAILURE!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/19/2020 21:18:23'!
FAILURE!

' '!
!CreditCard class methodsFor: 'instance creation' stamp: 'NNH 11/19/2020 21:21:38' prior: 50872719!
withNumber: aNumber expirationDate: aMonthOfYear owner: aPerson 
	
	( aNumber isInteger and: [ aNumber between: 10 ^ 15 and: 10 ^ 16 - 1 ] ) ifFalse: [ self error: self invalidCardNumberErrorDescription ] .
	( aMonthOfYear isKindOf: GregorianMonthOfYear ) ifFalse: [ self error: self invalidExpirationDateErrorDescription ] .
	aPerson withoutTrailingBlanks isEmpty ifTrue: [ self error: self invalidOwnerNameErrorDescription ] .
	
	^ self new initializeWithNumber: aNumber expirationDate: aMonthOfYear owner: aPerson . ! !

!testRun: #CreditCardTest #test01ValidCardPropertiesAreCorrect stamp: 'NNH 11/19/2020 21:21:42'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/19/2020 21:21:42'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/19/2020 21:21:42'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/19/2020 21:21:42'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/19/2020 21:21:42'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'NNH 11/19/2020 21:21:42'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/19/2020 21:21:42'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:23:03'!
test01CashierShouldNotCheckOutEmptyCart
	
	| aCart aCashier aCreditCard |
	aCashier := Cashier new.
	aCart := Cart withCatalogue: OrderedCollection new.	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  

	self should: [aCashier checkOut: aCart with: aCreditCard] 
	raise: Error
	withMessageText: Cashier canNotCheckOutAnEmptyCartErrorDescription.! !

!methodRemoval: CashierTest #test01 stamp: 'NNH 11/19/2020 21:23:03'!
test01
	
	| aCart aCashier aCreditCard |
	aCashier := Cashier new.
	aCart := Cart withCatalogue: OrderedCollection new.	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  

	self should: [aCashier checkOut: aCart with: aCreditCard] 
	raise: Error
	withMessageText: Cashier canNotCheckOutAnEmptyCartErrorDescription.!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:23:25'!
test02CashierShouldNotCheckOutExpiredCreditCard
	
	| aCart aCashier aCreditCard |
	
	aCashier := Cashier new.
	aCart := Cart withCatalogue: OrderedCollection new.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier declinedCreditCardErrorDescription.
! !

!methodRemoval: CashierTest #test02 stamp: 'NNH 11/19/2020 21:23:25'!
test02
	
	| aCart aCashier aCreditCard |
	
	aCashier := Cashier new.
	aCart := Cart withCatalogue: OrderedCollection new.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier declinedCreditCardErrorDescription.
!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/19/2020 21:23:38'!
PASSED!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/19/2020 21:23:38'!
PASSED!

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/19/2020 21:23:38'!
PASSED!

!testRun: #CartTest #test04ABookShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/19/2020 21:23:38'!
PASSED!

!testRun: #CartTest #test05ABookAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/19/2020 21:23:38'!
PASSED!

!testRun: #CartTest #test06ABookShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/19/2020 21:23:38'!
PASSED!

!testRun: #CartTest #test07ABookShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/19/2020 21:23:38'!
PASSED!

!testRun: #CartTest #test08ExternallyAddingBookToCartListShouldNotModifyCart stamp: 'NNH 11/19/2020 21:23:38'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotCheckOutEmptyCart stamp: 'NNH 11/19/2020 21:23:38'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotCheckOutExpiredCreditCard stamp: 'NNH 11/19/2020 21:23:38'!
PASSED!

!testRun: #CreditCardTest #test01ValidCardPropertiesAreCorrect stamp: 'NNH 11/19/2020 21:23:38'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/19/2020 21:23:38'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/19/2020 21:23:38'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/19/2020 21:23:38'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/19/2020 21:23:38'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'NNH 11/19/2020 21:23:38'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/19/2020 21:23:38'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:25:39'!
test03
	
	| aCart aCashier aCreditCard |
	
	aCashier := Cashier new.
	aCart := Cart withCatalogue: OrderedCollection new.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier declinedCreditCardErrorDescription.
! !

!classDefinition: #MerchantProcessorDouble category: 'TusLibros' stamp: 'NNH 11/19/2020 21:28:53'!
Object subclass: #MerchantProcessorDouble
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:28:43' prior: 50872982!
test03
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble |
	
	aCashier := Cashier new.
	aCart := Cart withCatalogue: OrderedCollection new.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier declinedCreditCardErrorDescription.
	
	self 
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:29:22' prior: 50873005!
test03
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble |
	
	aCashier := Cashier new.
	aCart := Cart withCatalogue: OrderedCollection new.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier declinedCreditCardErrorDescription.
	
	self deny: aMerchantProcessorDouble wasCalled.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:30:26' prior: 50873023!
test03
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.
	aCart := Cart withCatalogue: OrderedCollection new.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  
	
	
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier declinedCreditCardErrorDescription.
	
	self deny: aMerchantProcessorDouble wasCalled.
! !

!testRun: #CashierTest #test03 stamp: 'NNH 11/19/2020 21:30:47'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'NNH 11/19/2020 21:30:47'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'NNH 11/19/2020 21:30:55'!
with: aMerchantProcessorDouble 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aMerchantProcessorDouble ! !
!Cashier class methodsFor: 'instance creation' stamp: 'NNH 11/19/2020 21:31:25' prior: 50873066!
with: aMerchantProcessor 
	
	^ self new initializeWith: aMerchantProcessor! !

!testRun: #CashierTest #test03 stamp: 'NNH 11/19/2020 21:31:28'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'NNH 11/19/2020 21:31:44'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'NNH 11/19/2020 21:31:44'!
initializeWith: aMerchantProcessor 
	self shouldBeImplemented.
	merchantProcessor := aMerchantProcessor.! !
!Cashier methodsFor: 'initialization' stamp: 'NNH 11/19/2020 21:31:49' prior: 50873089!
initializeWith: aMerchantProcessor 
	
	merchantProcessor := aMerchantProcessor.! !

!testRun: #CashierTest #test03 stamp: 'NNH 11/19/2020 21:31:52'!
ERROR!
!MerchantProcessorDouble methodsFor: 'testing' stamp: 'NNH 11/19/2020 21:32:10'!
wasCalled
	self shouldBeImplemented.! !

!classDefinition: #MerchantProcessorDouble category: 'TusLibros' stamp: 'NNH 11/19/2020 21:32:22'!
Object subclass: #MerchantProcessorDouble
	instanceVariableNames: 'wasCalled'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorDouble methodsFor: 'testing' stamp: 'NNH 11/19/2020 21:32:20' prior: 50873104!
wasCalled

	^ wasCalled.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:32:27' prior: 50873042!
test03
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.
	aCart := Cart withCatalogue: OrderedCollection new.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier declinedCreditCardErrorDescription.
	
	self deny: aMerchantProcessorDouble wasCalled.
! !
!MerchantProcessorDouble methodsFor: 'testing' stamp: 'NNH 11/19/2020 21:33:26' overrides: 16896425!
initialize
	
	wasCalled := true.! !
!MerchantProcessorDouble methodsFor: 'nil' stamp: 'NNH 11/19/2020 21:35:38' overrides: 16881366!
doesNotUnderstand: aMessage
	
	wasCalled := true.! !
!MerchantProcessorDouble methodsFor: 'testing' stamp: 'NNH 11/19/2020 21:35:47' prior: 50873141 overrides: 16896425!
initialize
	
	wasCalled := false.! !

!testRun: #CreditCardTest #test01ValidCardPropertiesAreCorrect stamp: 'NNH 11/19/2020 21:35:55'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/19/2020 21:35:55'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/19/2020 21:35:55'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/19/2020 21:35:55'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/19/2020 21:35:55'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'NNH 11/19/2020 21:35:55'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/19/2020 21:35:55'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotCheckOutEmptyCart stamp: 'NNH 11/19/2020 21:36:04'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotCheckOutExpiredCreditCard stamp: 'NNH 11/19/2020 21:36:04'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/19/2020 21:36:04'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:38:10' prior: 50873121!
test03
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.

	aCart := Cart withCatalogue: OrderedCollection new.	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier declinedCreditCardErrorDescription.
	
	self deny: aMerchantProcessorDouble wasCalled.
! !

!testRun: #CashierTest #test03 stamp: 'NNH 11/19/2020 21:38:13'!
FAILURE!

!testRun: #CashierTest #test03 stamp: 'NNH 11/19/2020 21:38:13'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:38:23' prior: 50873190!
test03
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.

	aCart := Cart withCatalogue: OrderedCollection new.	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier canNotCheckOutAnEmptyCartErrorDescription s.
	
	self deny: aMerchantProcessorDouble wasCalled.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:38:25' prior: 50873215!
test03
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.

	aCart := Cart withCatalogue: OrderedCollection new.	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier canNotCheckOutAnEmptyCartErrorDescription .
	
	self deny: aMerchantProcessorDouble wasCalled.
! !

!testRun: #CashierTest #test03 stamp: 'NNH 11/19/2020 21:38:29'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:39:51'!
test03CashierShouldNotDispatchEmptyCart
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.

	aCart := Cart withCatalogue: OrderedCollection new.	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier canNotCheckOutAnEmptyCartErrorDescription .
	
	self deny: aMerchantProcessorDouble wasCalled.
! !

!methodRemoval: CashierTest #test03 stamp: 'NNH 11/19/2020 21:39:51'!
test03
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.

	aCart := Cart withCatalogue: OrderedCollection new.	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier canNotCheckOutAnEmptyCartErrorDescription .
	
	self deny: aMerchantProcessorDouble wasCalled.
!

!methodRemoval: CashierTest #test01CashierShouldNotCheckOutEmptyCart stamp: 'NNH 11/19/2020 21:40:37'!
test01CashierShouldNotCheckOutEmptyCart
	
	| aCart aCashier aCreditCard |
	aCashier := Cashier new.
	aCart := Cart withCatalogue: OrderedCollection new.	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  

	self should: [aCashier checkOut: aCart with: aCreditCard] 
	raise: Error
	withMessageText: Cashier canNotCheckOutAnEmptyCartErrorDescription.!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:40:43'!
test01CashierShouldNotDispatchEmptyCart
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.

	aCart := Cart withCatalogue: OrderedCollection new.	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier canNotCheckOutAnEmptyCartErrorDescription .
	
	self deny: aMerchantProcessorDouble wasCalled.
! !

!methodRemoval: CashierTest #test03CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/19/2020 21:40:43'!
test03CashierShouldNotDispatchEmptyCart
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.

	aCart := Cart withCatalogue: OrderedCollection new.	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier canNotCheckOutAnEmptyCartErrorDescription .
	
	self deny: aMerchantProcessorDouble wasCalled.
!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:40:55' prior: 50872894!
test02CashierShouldNotCheckOutExpiredCreditCard
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.
	aCart := Cart withCatalogue: OrderedCollection new.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier declinedCreditCardErrorDescription.
! !

!testRun: #CashierTest #test02CashierShouldNotCheckOutExpiredCreditCard stamp: 'NNH 11/19/2020 21:41:01'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:41:09' prior: 50873356!
test02CashierShouldNotCheckOutExpiredCreditCard
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.
	aCart := Cart withCatalogue: OrderedCollection new.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier declinedCreditCardErrorDescription.

	self deny: aMerchantProcessorDouble wasCalled.
! !

!testRun: #CashierTest #test02CashierShouldNotCheckOutExpiredCreditCard stamp: 'NNH 11/19/2020 21:41:12'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/19/2020 21:41:24'!
test02CashierShouldNotDispatchExpiredCreditCard
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.
	aCart := Cart withCatalogue: OrderedCollection new.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier declinedCreditCardErrorDescription.

	self deny: aMerchantProcessorDouble wasCalled.
! !

!methodRemoval: CashierTest #test02CashierShouldNotCheckOutExpiredCreditCard stamp: 'NNH 11/19/2020 21:41:24'!
test02CashierShouldNotCheckOutExpiredCreditCard
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.
	aCart := Cart withCatalogue: OrderedCollection new.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier declinedCreditCardErrorDescription.

	self deny: aMerchantProcessorDouble wasCalled.
!

----SNAPSHOT----(19 November 2020 21:41:43) CuisUniversity-4384.image priorSource: 17296193!

----QUIT----(19 November 2020 21:41:46) CuisUniversity-4384.image priorSource: 17337409!

----STARTUP---- (20 November 2020 18:12:43) as /home/nahuel/Documents/cuisuniversity/CuisUniversity-4384.image!


!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/20/2020 18:13:48'!
PASSED!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/20/2020 18:13:48'!
PASSED!

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/20/2020 18:13:48'!
PASSED!

!testRun: #CartTest #test04ABookShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/20/2020 18:13:48'!
PASSED!

!testRun: #CartTest #test05ABookAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/20/2020 18:13:48'!
PASSED!

!testRun: #CartTest #test06ABookShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/20/2020 18:13:48'!
PASSED!

!testRun: #CartTest #test07ABookShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/20/2020 18:13:48'!
PASSED!

!testRun: #CartTest #test08ExternallyAddingBookToCartListShouldNotModifyCart stamp: 'NNH 11/20/2020 18:13:48'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/20/2020 18:13:48'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/20/2020 18:13:48'!
PASSED!

!testRun: #CreditCardTest #test01ValidCardPropertiesAreCorrect stamp: 'NNH 11/20/2020 18:13:48'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/20/2020 18:13:48'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/20/2020 18:13:48'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/20/2020 18:13:48'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/20/2020 18:13:48'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'NNH 11/20/2020 18:13:48'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/20/2020 18:13:48'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:17:44'!
test03
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble aBook |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.
	aBook := 'Harry Potter'.
	aCart := Cart withCatalogue: (OrderedCollection with: aBook).
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier declinedCreditCardErrorDescription.

	self deny: aMerchantProcessorDouble wasCalled.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:18:07' prior: 50873513!
test03
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble aBook |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.
	aBook := 'Harry Potter'.
	aCart := Cart withCatalogue: (OrderedCollection with: aBook).
	aCart addToCart: aBook withOccurrences: 1.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier declinedCreditCardErrorDescription.

	self deny: aMerchantProcessorDouble wasCalled.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:20:46' prior: 50873534!
test03
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble aBook |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.
	aBook := 'Harry Potter'.
	aCart := Cart withCatalogue: (OrderedCollection with: aBook).
	aCart addToCart: aBook withOccurrences: 1.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  
	
	aCashier checkOut: aCart with: aCreditCard.

	self assert: aMerchantProcessorDouble wasCalled.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:22:37' prior: 50873557!
test03
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble aBook |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.
	aBook := 'Harry Potter'.
	aCart := Cart withCatalogue: (OrderedCollection with: aBook).
	aCart addToCart: aBook withOccurrences: 1.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  
	
	aCashier checkOut: aCart with: aCreditCard.

	self assert: aMerchantProcessorDouble wasCalled.
! !

!testRun: #CashierTest #test03 stamp: 'NNH 11/20/2020 18:22:41'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'NNH 11/20/2020 18:22:41'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:22:50' prior: 50873577!
test03
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble aBook |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.
	aBook := 'Harry Potter'.
	aCart := Cart withCatalogue: (OrderedCollection with: aBook).
	aCart addToCart: aBook withOccurrences: 1.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2020 owner: 'Hern�n'.  
	
	aCashier checkOut: aCart with: aCreditCard.

	self assert: aMerchantProcessorDouble wasCalled.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:22:52' prior: 50873601!
test03
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble aBook |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.
	aBook := 'Harry Potter'.
	aCart := Cart withCatalogue: (OrderedCollection with: aBook).
	aCart addToCart: aBook withOccurrences: 1.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	aCashier checkOut: aCart with: aCreditCard.

	self assert: aMerchantProcessorDouble wasCalled.
! !

!testRun: #CashierTest #test03 stamp: 'NNH 11/20/2020 18:22:55'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'NNH 11/20/2020 18:22:55'!
ERROR!

aCart!
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:24:10' prior: 50872142!
checkOut: aCart with: aCreditCard
	
	(aCreditCard expirationDate < FixedGregorianDate today) ifTrue: [ self error: self class declinedCreditCardErrorDescription ] .
	
	aCart isEmpty ifTrue: [ self error: self class canNotCheckOutAnEmptyCartErrorDescription ] .! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:25:39' prior: 50873646!
checkOut: aCart with: aCreditCard
	
	(aCreditCard expirationDate < FixedGregorianDate today) ifTrue: [ self error: self class declinedCreditCardErrorDescription ] .
	
	aCart isEmpty ifTrue: [ self error: self class canNotCheckOutAnEmptyCartErrorDescription ] .
	
	merchantProcessor process.! !

!testRun: #CashierTest #test03 stamp: 'NNH 11/20/2020 18:25:46'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/20/2020 18:25:49'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:27:01' prior: 50873621!
test03
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble aBook |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.
	aBook := 'Harry Potter'.
	aCart := Cart withCatalogue: (OrderedCollection with: aBook).
	aCart addToCart: aBook withOccurrences: 1.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	aCashier checkOut: aCart with: aCreditCard.

	self assert: (aMerchantProcessorDouble receivedMessage: #process) .
! !

!testRun: #CashierTest #test03 stamp: 'NNH 11/20/2020 18:27:10'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'NNH 11/20/2020 18:27:10'!
ERROR!

!classDefinition: #MerchantProcessorDouble category: 'TusLibros' stamp: 'NNH 11/20/2020 18:28:06'!
Object subclass: #MerchantProcessorDouble
	instanceVariableNames: 'messages'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorDouble methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:28:06' prior: 50873146 overrides: 16881366!
doesNotUnderstand: aMessage
	
	messages := true.! !
!MerchantProcessorDouble methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:28:06' prior: 50873117!
wasCalled

	^ messages.! !
!MerchantProcessorDouble methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:28:06' prior: 50873152 overrides: 16896425!
initialize
	
	messages := false.! !
!MerchantProcessorDouble methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:28:14' prior: 50873709 overrides: 16881366!
doesNotUnderstand: aMessage
	
	messages := Set new.! !
!MerchantProcessorDouble methodsFor: 'testing' stamp: 'NNH 11/20/2020 18:28:27' prior: 50873720 overrides: 16896425!
initialize
	
	messages := Set new.! !
!MerchantProcessorDouble methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:28:49' prior: 50873726 overrides: 16881366!
doesNotUnderstand: aMessage
	
	messages add: aMessage.! !
!MerchantProcessorDouble methodsFor: 'testing' stamp: 'NNH 11/20/2020 18:29:17'!
receivedMessage: aMessage

	^ messages includes: aMessage .! !
!MerchantProcessorDouble methodsFor: 'testing' stamp: 'NNH 11/20/2020 18:29:18' prior: 50873743!
receivedMessage: aMessage

	^ messages includes: aMessage ! !

!methodRemoval: MerchantProcessorDouble #wasCalled stamp: 'NNH 11/20/2020 18:29:25'!
wasCalled

	^ messages.!
!MerchantProcessorDouble methodsFor: 'testing' stamp: 'NNH 11/20/2020 18:29:59'!
wasCalled

	^ messages notEmpty .! !

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/20/2020 18:30:04'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/20/2020 18:30:04'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/20/2020 18:30:04'!
FAILURE!

!testRun: #CashierTest #test03 stamp: 'NNH 11/20/2020 18:30:04'!
FAILURE!

!testRun: #CashierTest #test03 stamp: 'NNH 11/20/2020 18:30:22'!
FAILURE!

!testRun: #CashierTest #test03 stamp: 'NNH 11/20/2020 18:30:22'!
FAILURE!

aMessage!

messages!
!MerchantProcessorDouble methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:31:50' prior: 50873738 overrides: 16881366!
doesNotUnderstand: aMessage
	
	messages add: aMessage asSymbol ! !

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/20/2020 18:31:54'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/20/2020 18:31:54'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/20/2020 18:31:54'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'NNH 11/20/2020 18:31:54'!
ERROR!
!MerchantProcessorDouble methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:32:19' prior: 50873779 overrides: 16881366!
doesNotUnderstand: aMessage
	
	messages add: aMessage asString ! !

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/20/2020 18:32:25'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/20/2020 18:32:25'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/20/2020 18:32:25'!
PASSED!

messages!

aMessage!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:36:08'!
test04
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble aBook ticket |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.
	aBook := 'Harry Potter'.
	aCart := Cart withCatalogue: (OrderedCollection with: aBook).
	aCart addToCart: aBook withOccurrences: 1.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	ticket := aCashier checkOut: aCart with: aCreditCard.

	self assert: ticket total equals: 100 .
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:36:49' prior: 50873812!
test04
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble aBook ticket |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.
	aBook := 'Harry Potter'.
	aCart := Cart withCatalogue: (Dictionary with: aBook -> 100).
	aCart addToCart: aBook withOccurrences: 1.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	ticket := aCashier checkOut: aCart with: aCreditCard.

	self assert: ticket total equals: 100 .
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:37:12' prior: 50873832!
test04
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble aBook ticket |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.
	aBook := 'Harry Potter'.
	aCart := Cart withCatalogue: (Dictionary with: '' -> 100).
	aCart addToCart: aBook withOccurrences: 1.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	ticket := aCashier checkOut: aCart with: aCreditCard.

	self assert: ticket total equals: 100 .
! !

Dictionary with: '' -> 100!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:37:31' prior: 50873852!
test04
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble aBook ticket |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.
	aBook := 'Harry Potter'.
	aCart := Cart withCatalogue: (Dictionary with: aBook -> 100).
	aCart addToCart: aBook withOccurrences: 1.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	ticket := aCashier checkOut: aCart with: aCreditCard.

	self assert: ticket total equals: 100 .
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:41:38' prior: 50873873!
test04
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble aBook ticket catalogue |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	
	aBook := 'Harry Potter'.
	catalogue := (Dictionary with: aBook -> 100).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: aBook withOccurrences: 1.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	ticket := aCashier checkOut: aCart with: aCreditCard.

	self assert: ticket total equals: 100 .
! !

!testRun: #CashierTest #test04 stamp: 'NNH 11/20/2020 18:41:44'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'NNH 11/20/2020 18:41:44'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:41:53'!
withProcessor: aMerchantProcessorDouble catalogue: aDictionary 
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:43:15' prior: 50873919!
withProcessor: aMerchantProcessor catalogue: aCatalogue 
	
	self new initializeWithProcessor: aMerchantProcessor andCatalogue: aCatalogue ! !

!testRun: #CashierTest #test04 stamp: 'NNH 11/20/2020 18:43:17'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'NNH 11/20/2020 18:43:31'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'NNH 11/20/2020 18:43:31'!
initializeWithProcessor: aMerchantProcessor andCatalogue: aCatalogue 
	self shouldBeImplemented.
	merchantProcessor := aMerchantProcessor.
	catalogue := aCatalogue.! !
!Cashier methodsFor: 'initialization' stamp: 'NNH 11/20/2020 18:43:39' prior: 50873943!
initializeWithProcessor: aMerchantProcessor andCatalogue: aCatalogue 
	
	merchantProcessor := aMerchantProcessor.
	catalogue := aCatalogue.! !

!testRun: #CashierTest #test04 stamp: 'NNH 11/20/2020 18:43:40'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'NNH 11/20/2020 18:43:50'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'NNH 11/20/2020 18:43:50'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'NNH 11/20/2020 18:45:31' prior: 50868066!
assertThatCanBeAdded: aBook withOccurences: aNumberOfOccurrences

	(catalogue includesKey: aBook ) 
		ifFalse: [ self signalBookIsNotForSale ].
		
	(aNumberOfOccurrences isInteger and: [ aNumberOfOccurrences > 0 ]) 
		ifFalse: [ self signalBookCanNotBeAddedANonNaturalNumberOfTimes ].! !

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/20/2020 18:45:40'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/20/2020 18:45:40'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/20/2020 18:45:40'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'NNH 11/20/2020 18:45:40'!
ERROR!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/20/2020 18:45:48'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/20/2020 18:45:48'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/20/2020 18:45:48'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'NNH 11/20/2020 18:45:48'!
ERROR!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/20/2020 18:45:54'!
PASSED!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/20/2020 18:45:54'!
ERROR!

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/20/2020 18:45:54'!
ERROR!

!testRun: #CartTest #test04ABookShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/20/2020 18:45:54'!
FAILURE!

!testRun: #CartTest #test05ABookAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/20/2020 18:45:54'!
ERROR!

!testRun: #CartTest #test06ABookShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/20/2020 18:45:54'!
FAILURE!

!testRun: #CartTest #test07ABookShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/20/2020 18:45:54'!
FAILURE!

!testRun: #CartTest #test08ExternallyAddingBookToCartListShouldNotModifyCart stamp: 'NNH 11/20/2020 18:45:54'!
PASSED!
!CartTest methodsFor: 'tests - adding' stamp: 'NNH 11/20/2020 18:46:25' prior: 50867947!
test02ABookAddedToCartIsSuccessfullyAdded

	| aCart catalogue |
	
	catalogue := Dictionary with: harryPotter -> 100.
	
	aCart := Cart withCatalogue: catalogue.
	
	aCart addToCart: harryPotter withOccurrences: 1.
	
	self deny: aCart isEmpty.
	self assert: ( aCart listCart hasEqualElements: {harryPotter} )! !
!CartTest methodsFor: 'tests - adding' stamp: 'NNH 11/20/2020 18:46:45' prior: 50867959!
test03ManyBooksAddedToCartAreSuccessfullyAdded

	| aCart catalogue |
	
	catalogue := OrderedCollection with: harryPotter -> 100
									with: lordOfTheRings -> 100
									with: ageOfEmpires -> 100.
	
	aCart := Cart withCatalogue: catalogue.
	
	aCart addToCart: harryPotter withOccurrences: 1. 
	aCart addToCart: lordOfTheRings withOccurrences: 1.
	aCart addToCart: ageOfEmpires withOccurrences: 1.
	
	self deny: aCart isEmpty.
	self assert: ( aCart listCart hasEqualElements: {harryPotter. lordOfTheRings. ageOfEmpires} )! !
!CartTest methodsFor: 'tests - adding' stamp: 'NNH 11/20/2020 18:46:54' prior: 50874041!
test03ManyBooksAddedToCartAreSuccessfullyAdded

	| aCart catalogue |
	
	catalogue := Dictionary with: harryPotter -> 100
									with: lordOfTheRings -> 100
									with: ageOfEmpires -> 100.
	
	aCart := Cart withCatalogue: catalogue.
	
	aCart addToCart: harryPotter withOccurrences: 1. 
	aCart addToCart: lordOfTheRings withOccurrences: 1.
	aCart addToCart: ageOfEmpires withOccurrences: 1.
	
	self deny: aCart isEmpty.
	self assert: ( aCart listCart hasEqualElements: {harryPotter. lordOfTheRings. ageOfEmpires} )! !
!CartTest methodsFor: 'tests - adding' stamp: 'NNH 11/20/2020 18:47:05' prior: 50867978!
test05ABookAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce

	| aCart catalogue |
	
	catalogue := Dictionary with: harryPotter -> 100.
	
	aCart := Cart withCatalogue: catalogue.
	
	aCart addToCart: harryPotter withOccurrences: 2. 
	
	self assert: ( aCart listCart hasEqualElements: {harryPotter. harryPotter} )! !
!CartTest methodsFor: 'tests - adding' stamp: 'NNH 11/20/2020 18:47:14' prior: 50867991!
test08ExternallyAddingBookToCartListShouldNotModifyCart

	| anEmptyCart catalogue emptyCartList |
	
	catalogue := Dictionary with: harryPotter -> 100.
	
	anEmptyCart := Cart withCatalogue: catalogue.
	emptyCartList := anEmptyCart listCart.
	emptyCartList add: harryPotter.
	
	self assert: anEmptyCart isEmpty.
	self assert: anEmptyCart listCart isEmpty.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/20/2020 18:47:18'!
PASSED!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/20/2020 18:47:18'!
PASSED!

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/20/2020 18:47:18'!
PASSED!

!testRun: #CartTest #test04ABookShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/20/2020 18:47:18'!
FAILURE!

!testRun: #CartTest #test05ABookAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/20/2020 18:47:18'!
PASSED!

!testRun: #CartTest #test06ABookShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/20/2020 18:47:18'!
FAILURE!

!testRun: #CartTest #test07ABookShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/20/2020 18:47:18'!
FAILURE!

!testRun: #CartTest #test08ExternallyAddingBookToCartListShouldNotModifyCart stamp: 'NNH 11/20/2020 18:47:18'!
PASSED!
!CartTest methodsFor: 'tests - errors' stamp: 'NNH 11/20/2020 18:47:32' prior: 50868532!
test04ABookShouldNotBeAddedWhenNotForSale

	| aCart catalogue |
	
	catalogue := Dictionary with: harryPotter -> 100.
	
	aCart := Cart withCatalogue: catalogue.
	
	self should: [ aCart addToCart: lordOfTheRings withOccurrences: 1 ]
		raise: Error
		withMessageText: Cart bookIsNotForSaleErrorDescription.
		
	self assert: aCart isEmpty. ! !
!CartTest methodsFor: 'tests - errors' stamp: 'NNH 11/20/2020 18:47:35' prior: 50868549!
test06ABookShouldNotBeAddedWithNonIntegerQuantity

	| aCart catalogue |
	
	catalogue := Dictionary with: harryPotter -> 100.
	
	aCart := Cart withCatalogue: catalogue.
	
	self should: [ aCart addToCart: harryPotter withOccurrences: 0.5 ]
		raise: Error
		withMessageText: Cart bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription.
		
	self assert: aCart isEmpty. ! !
!CartTest methodsFor: 'tests - errors' stamp: 'NNH 11/20/2020 18:47:38' prior: 50868564!
test07ABookShouldNotBeAddedWithNonPositiveQuantity

	| aCart catalogue |
	
	catalogue := Dictionary with: harryPotter -> 100.
	
	aCart := Cart withCatalogue: catalogue.
	
	self should: [ aCart addToCart: harryPotter withOccurrences: 0 ]
		raise: Error
		withMessageText: Cart bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription.
		
	self assert: aCart isEmpty. ! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/20/2020 18:47:42'!
PASSED!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/20/2020 18:47:42'!
PASSED!

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/20/2020 18:47:42'!
PASSED!

!testRun: #CartTest #test04ABookShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/20/2020 18:47:42'!
PASSED!

!testRun: #CartTest #test05ABookAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/20/2020 18:47:42'!
PASSED!

!testRun: #CartTest #test06ABookShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/20/2020 18:47:42'!
PASSED!

!testRun: #CartTest #test07ABookShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/20/2020 18:47:42'!
PASSED!

!testRun: #CartTest #test08ExternallyAddingBookToCartListShouldNotModifyCart stamp: 'NNH 11/20/2020 18:47:42'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/20/2020 18:47:45'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/20/2020 18:47:45'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/20/2020 18:47:45'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'NNH 11/20/2020 18:47:45'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:48:14' prior: 50873675!
test03
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble aBook catalogue |
	
	aBook := 'Harry Potter'.	
	catalogue := Dictionary with: aBook -> 100.
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.

	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: aBook withOccurrences: 1.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	aCashier checkOut: aCart with: aCreditCard.

	self assert: (aMerchantProcessorDouble receivedMessage: #process) .
! !

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/20/2020 18:48:28'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/20/2020 18:48:28'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/20/2020 18:48:28'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'NNH 11/20/2020 18:48:28'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'NNH 11/20/2020 18:48:28'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:48:56' prior: 50873926!
withProcessor: aMerchantProcessor catalogue: aCatalogue 
	
	^ self new initializeWithProcessor: aMerchantProcessor andCatalogue: aCatalogue ! !

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/20/2020 18:48:59'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/20/2020 18:48:59'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/20/2020 18:48:59'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'NNH 11/20/2020 18:48:59'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'NNH 11/20/2020 18:48:59'!
ERROR!

!classDefinition: #Ticket category: 'TusLibros' stamp: 'NNH 11/20/2020 18:51:08'!
Object subclass: #Ticket
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:51:02' prior: 50873658!
checkOut: aCart with: aCreditCard
	
	(aCreditCard expirationDate < FixedGregorianDate today) ifTrue: [ self error: self class declinedCreditCardErrorDescription ] .
	
	aCart isEmpty ifTrue: [ self error: self class canNotCheckOutAnEmptyCartErrorDescription ] .
	
	merchantProcessor process.
	
	^ Ticket total: 100 .! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:52:18' prior: 50874282!
checkOut: aCart with: aCreditCard
	
	(aCreditCard expirationDate < FixedGregorianDate today) ifTrue: [ self error: self class declinedCreditCardErrorDescription ] .
	
	aCart isEmpty ifTrue: [ self error: self class canNotCheckOutAnEmptyCartErrorDescription ] .
	
	merchantProcessor process.
	
	^ Ticket total: 100 products: 'Harry Potter' .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:52:59' prior: 50873893!
test04
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble aBook ticket catalogue |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	
	aBook := 'Harry Potter'.
	catalogue := (Dictionary with: aBook -> 100).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: aBook withOccurrences: 1.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	ticket := aCashier checkOut: aCart with: aCreditCard.

	self assert: ticket total equals: 100 .
	self assert: ticket products equals: aBook .
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:53:12' prior: 50874309!
test04
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble aBook ticket catalogue |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	
	aBook := 'Harry Potter'.
	catalogue := (Dictionary with: aBook -> 100).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: aBook withOccurrences: 1.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	ticket := aCashier checkOut: aCart with: aCreditCard.

	self assert: ticket total equals: 100 .
	self assert: ticket products hasEqualElements: aBook .
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:53:24' prior: 50874295!
checkOut: aCart with: aCreditCard
	
	(aCreditCard expirationDate < FixedGregorianDate today) ifTrue: [ self error: self class declinedCreditCardErrorDescription ] .
	
	aCart isEmpty ifTrue: [ self error: self class canNotCheckOutAnEmptyCartErrorDescription ] .
	
	merchantProcessor process.
	
	^ Ticket total: 100 products: {'Harry Potter'} .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:53:59' prior: 50874333!
test04
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble aBook ticket catalogue |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	
	aBook := 'Harry Potter'.
	catalogue := (Dictionary with: aBook -> 100).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: aBook withOccurrences: 1.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	ticket := aCashier checkOut: aCart with: aCreditCard.

	self assert: ticket total equals: 100 .
	self assert: ( ticket products hasEqualElements: aBook ) .
! !

!testRun: #CashierTest #test04 stamp: 'NNH 11/20/2020 18:54:08'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'NNH 11/20/2020 18:54:08'!
ERROR!
!Ticket class methodsFor: 'instance creation' stamp: 'NNH 11/20/2020 18:54:17'!
total: aSmallInteger products: anArray 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeTotal: aSmallInteger products: anArray ! !
!Ticket class methodsFor: 'instance creation' stamp: 'NNH 11/20/2020 18:54:43' prior: 50874399!
total: aTotal products: aCollectionOfProducts 
	
	^self new initializeTotal: aTotal products: aCollectionOfProducts ! !

!testRun: #CashierTest #test04 stamp: 'NNH 11/20/2020 18:54:44'!
ERROR!

!classDefinition: #Ticket category: 'TusLibros' stamp: 'NNH 11/20/2020 18:54:59'!
Object subclass: #Ticket
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Ticket category: 'TusLibros' stamp: 'NNH 11/20/2020 18:54:59'!
Object subclass: #Ticket
	instanceVariableNames: 'total collectionOfProducts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Ticket methodsFor: 'initialization' stamp: 'NNH 11/20/2020 18:54:59'!
initializeTotal: aTotal products: aCollectionOfProducts 
	self shouldBeImplemented.
	total := aTotal.
	collectionOfProducts := aCollectionOfProducts.! !
!Ticket methodsFor: 'initialization' stamp: 'NNH 11/20/2020 18:55:03' prior: 50874432!
initializeTotal: aTotal products: aCollectionOfProducts 
	
	total := aTotal.
	collectionOfProducts := aCollectionOfProducts.! !

!testRun: #CashierTest #test04 stamp: 'NNH 11/20/2020 18:55:05'!
ERROR!
!Ticket methodsFor: 'accessing' stamp: 'NNH 11/20/2020 18:55:12'!
total
	self shouldBeImplemented.
	^total! !
!Ticket methodsFor: 'accessing' stamp: 'NNH 11/20/2020 18:55:17' prior: 50874449!
total
	
	^ total! !

!testRun: #CashierTest #test04 stamp: 'NNH 11/20/2020 18:55:20'!
ERROR!
!Ticket methodsFor: 'accessing' stamp: 'NNH 11/20/2020 18:55:25'!
products
	self shouldBeImplemented.! !
!Ticket methodsFor: 'accessing' stamp: 'NNH 11/20/2020 18:55:37' prior: 50874458!
products

	^ collectionOfProducts ! !

!testRun: #CashierTest #test04 stamp: 'NNH 11/20/2020 18:55:38'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:55:54' prior: 50874371!
test04
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble aBook ticket catalogue |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	
	aBook := 'Harry Potter'.
	catalogue := (Dictionary with: aBook -> 100).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: aBook withOccurrences: 1.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	ticket := aCashier checkOut: aCart with: aCreditCard.

	self assert: ticket total equals: 100 .
	self assert: ( ticket products hasEqualElements: { aBook } ) .
! !

!testRun: #CashierTest #test04 stamp: 'NNH 11/20/2020 18:56:00'!
PASSED!

!classDefinition: #Ticket category: 'TusLibros' stamp: 'NNH 11/20/2020 18:56:21'!
Object subclass: #Ticket
	instanceVariableNames: 'total products'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Ticket methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:56:21' prior: 50874462!
products

	^ products ! !
!Ticket methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:56:21' prior: 50874440!
initializeTotal: aTotal products: aCollectionOfProducts 
	
	total := aTotal.
	products := aCollectionOfProducts.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:58:27'!
test05
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble aBook ticket catalogue ageOfEmpires harryPotter lordOfTheRings |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	
	harryPotter := 'Harry Potter'.
	lordOfTheRings := 'Lors Of The Rings'.
	ageOfEmpires := 'Age Of Empires'.
	catalogue := (Dictionary with: aBook -> 100 with: lordOfTheRings -> 50 with: ageOfEmpires -> 25).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: aBook withOccurrences: 1.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	ticket := aCashier checkOut: aCart with: aCreditCard.

	self assert: ticket total equals: 100 .
	self assert: ( ticket products hasEqualElements: { aBook } ) .
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:58:50' prior: 50874513!
test05
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble ticket catalogue ageOfEmpires harryPotter lordOfTheRings |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	
	harryPotter := 'Harry Potter'.
	lordOfTheRings := 'Lors Of The Rings'.
	ageOfEmpires := 'Age Of Empires'.
	catalogue := (Dictionary with: harryPotter -> 100 with: lordOfTheRings -> 50 with: ageOfEmpires -> 25).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: harryPotter withOccurrences: 1.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	ticket := aCashier checkOut: aCart with: aCreditCard.

	self assert: ticket total equals: 100 .
	self assert: ( ticket products hasEqualElements: { harryPotter } ) .
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 19:00:11' prior: 50874543!
test05
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble ticket catalogue ageOfEmpires harryPotter lordOfTheRings |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	
	harryPotter := 'Harry Potter'.
	lordOfTheRings := 'Lors Of The Rings'.
	ageOfEmpires := 'Age Of Empires'.
	catalogue := (Dictionary with: harryPotter -> 100 with: lordOfTheRings -> 50 with: ageOfEmpires -> 25).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: harryPotter withOccurrences: 1.
	aCart addToCart: lordOfTheRings withOccurrences: 1.
	aCart addToCart: ageOfEmpires withOccurrences: 1.

	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	ticket := aCashier checkOut: aCart with: aCreditCard.

	self assert: ticket total equals: 175 .
	self assert: ( ticket products hasEqualElements: { harryPotter. lordOfTheRings. ageOfEmpires } ) .
! !

!testRun: #CashierTest #test05 stamp: 'NNH 11/20/2020 19:00:15'!
FAILURE!

!testRun: #CashierTest #test05 stamp: 'NNH 11/20/2020 19:00:15'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 19:01:28' prior: 50874357!
checkOut: aCart with: aCreditCard
	
	(aCreditCard expirationDate < FixedGregorianDate today) ifTrue: [ self error: self class declinedCreditCardErrorDescription ] .
	
	aCart isEmpty ifTrue: [ self error: self class canNotCheckOutAnEmptyCartErrorDescription ] .
	
	merchantProcessor process.
	
	^ Ticket total: [aCart listCart sum: [ :aProduct | catalogue at: aProduct ] ] products: {'Harry Potter'} .! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 19:02:29' prior: 50874612!
checkOut: aCart with: aCreditCard
	
	| total |
	(aCreditCard expirationDate < FixedGregorianDate today) ifTrue: [ self error: self class declinedCreditCardErrorDescription ] .
	
	aCart isEmpty ifTrue: [ self error: self class canNotCheckOutAnEmptyCartErrorDescription ] .
	
	merchantProcessor process.
	
	total := aCart listCart sum: [ :aProduct | catalogue at: aProduct ] .
	
	^ Ticket total: total products: aCart listCart .! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 19:02:38' prior: 50874628!
checkOut: aCart with: aCreditCard
	
	| total |
	
	(aCreditCard expirationDate < FixedGregorianDate today) ifTrue: [ self error: self class declinedCreditCardErrorDescription ] .
	
	aCart isEmpty ifTrue: [ self error: self class canNotCheckOutAnEmptyCartErrorDescription ] .
	
	merchantProcessor process.
	
	total := aCart listCart sum: [ :aProduct | catalogue at: aProduct ] .
	
	^ Ticket total: total products: aCart listCart .! !

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/20/2020 19:02:49'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/20/2020 19:02:49'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/20/2020 19:02:49'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'NNH 11/20/2020 19:02:49'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'NNH 11/20/2020 19:02:49'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/20/2020 19:02:49'!
ERROR!

catalogue at: aProduct!

catalogue at: aProduct !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 19:06:02' prior: 50874573!
test05
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble ticket catalogue ageOfEmpires harryPotter lordOfTheRings |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	
	harryPotter := 'Harry Potter'.
	lordOfTheRings := 'Lord Of The Rings'.
	ageOfEmpires := 'Age Of Empires'.
	catalogue := (Dictionary with: harryPotter -> 100 with: lordOfTheRings -> 50 with: ageOfEmpires -> 25).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: harryPotter withOccurrences: 1.
	aCart addToCart: lordOfTheRings withOccurrences: 1.
	aCart addToCart: ageOfEmpires withOccurrences: 1.

	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	ticket := aCashier checkOut: aCart with: aCreditCard.

	self assert: ticket total equals: 175 .
	self assert: ( ticket products hasEqualElements: { harryPotter. lordOfTheRings. ageOfEmpires } ) .
! !

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/20/2020 19:06:06'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/20/2020 19:06:06'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/20/2020 19:06:06'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'NNH 11/20/2020 19:06:06'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'NNH 11/20/2020 19:06:06'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/20/2020 19:06:06'!
ERROR!

catalogue at: aProduct!

catalogue!

catalogue!

self at: 'Harry Potter'.!

self at: 'Lord Of The Rings'. !

aCart listCart!
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 19:08:57' prior: 50874645!
checkOut: aCart with: aCreditCard
	
	| total |
	
	(aCreditCard expirationDate < FixedGregorianDate today) ifTrue: [ self error: self class declinedCreditCardErrorDescription ] .
	
	aCart isEmpty ifTrue: [ self error: self class canNotCheckOutAnEmptyCartErrorDescription ] .
	
	merchantProcessor process.
	
	total := aCart listCart sum: [ :aProduct | catalogue at: aProduct ] ifEmpty: [ 0 ].
	
	^ Ticket total: total products: aCart listCart .! !

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/20/2020 19:09:12'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/20/2020 19:09:12'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/20/2020 19:09:12'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'NNH 11/20/2020 19:09:12'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'NNH 11/20/2020 19:09:12'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/20/2020 19:09:12'!
ERROR!
!Cart methodsFor: 'accessing' stamp: 'NNH 11/20/2020 19:10:12' prior: 50868054!
listCart
	
	^ books keys copy! !

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/20/2020 19:10:19'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/20/2020 19:10:19'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/20/2020 19:10:19'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'NNH 11/20/2020 19:10:19'!
ERROR!

!testRun: #CashierTest #test05 stamp: 'NNH 11/20/2020 19:10:19'!
ERROR!

!testRun: #CashierTest #test05 stamp: 'NNH 11/20/2020 19:10:27'!
ERROR!

!testRun: #CashierTest #test05 stamp: 'NNH 11/20/2020 19:10:27'!
ERROR!
!Cart methodsFor: 'initialization' stamp: 'NNH 11/20/2020 19:11:04' prior: 50868090!
initializeWithCatalogue: aCatalogue
	
	catalogue := aCatalogue.
	books := Bag new.! !
!Cart methodsFor: 'accessing' stamp: 'NNH 11/20/2020 19:11:21' prior: 50874767!
listCart
	
	^ books copy! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/20/2020 19:11:30'!
PASSED!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/20/2020 19:11:30'!
ERROR!

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/20/2020 19:11:30'!
ERROR!

!testRun: #CartTest #test04ABookShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/20/2020 19:11:30'!
PASSED!

!testRun: #CartTest #test05ABookAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/20/2020 19:11:30'!
ERROR!

!testRun: #CartTest #test06ABookShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/20/2020 19:11:30'!
PASSED!

!testRun: #CartTest #test07ABookShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/20/2020 19:11:30'!
PASSED!

!testRun: #CartTest #test08ExternallyAddingBookToCartListShouldNotModifyCart stamp: 'NNH 11/20/2020 19:11:30'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/20/2020 19:11:35'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/20/2020 19:11:35'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/20/2020 19:11:35'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'NNH 11/20/2020 19:11:35'!
ERROR!

!testRun: #CashierTest #test05 stamp: 'NNH 11/20/2020 19:11:35'!
ERROR!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/20/2020 19:11:48'!
ERROR!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/20/2020 19:11:48'!
ERROR!

----SNAPSHOT----(20 November 2020 19:12:56) CuisUniversity-4384.image priorSource: 17337503!

----QUIT----(20 November 2020 19:13:01) CuisUniversity-4384.image priorSource: 17382292!

----STARTUP---- (23 November 2020 10:11:34) as /home/nahuel/Documents/cuisuniversity/CuisUniversity-4384.image!


!classRemoval: #Ticket stamp: 'NNH 11/23/2020 10:12:31'!
Object subclass: #Ticket
	instanceVariableNames: 'total products'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProcessorDouble stamp: 'NNH 11/23/2020 10:12:31'!
Object subclass: #MerchantProcessorDouble
	instanceVariableNames: 'messages'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'NNH 11/23/2020 10:12:31'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'NNH 11/23/2020 10:12:32'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'NNH 11/23/2020 10:12:32'!
Object subclass: #Cart
	instanceVariableNames: 'books catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'NNH 11/23/2020 10:12:33'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'NNH 11/23/2020 10:12:33'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'NNH 11/23/2020 10:12:34'!
TestCase subclass: #CartTest
	instanceVariableNames: 'harryPotter lordOfTheRings ageOfEmpires'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/nahuel/git/isw1-2c2020-ejercicios/20-TusLibros/TusLibros-2/TusLibros.st----!

----STARTUP---- (23 November 2020 10:15:32) as /home/nahuel/Documents/cuisuniversity/CuisUniversity-4384.image!


!classRemoval: #Ticket stamp: 'NNH 11/23/2020 10:15:35'!
Object subclass: #Ticket
	instanceVariableNames: 'total products'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProcessorDouble stamp: 'NNH 11/23/2020 10:15:35'!
Object subclass: #MerchantProcessorDouble
	instanceVariableNames: 'messages'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'NNH 11/23/2020 10:15:35'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'NNH 11/23/2020 10:15:36'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'NNH 11/23/2020 10:15:36'!
Object subclass: #Cart
	instanceVariableNames: 'books catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'NNH 11/23/2020 10:15:36'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'NNH 11/23/2020 10:15:37'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'NNH 11/23/2020 10:15:37'!
TestCase subclass: #CartTest
	instanceVariableNames: 'harryPotter lordOfTheRings ageOfEmpires'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'NNH 11/23/2020 10:15:37'!
TestCase subclass: #CartTest
	instanceVariableNames: 'harryPotter lordOfTheRings ageOfEmpires'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'NNH 11/23/2020 10:15:37'!
TestCase subclass: #CartTest
	instanceVariableNames: 'harryPotter lordOfTheRings ageOfEmpires'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'setUp/tearDown' stamp: 'AM 11/17/2020 22:26:59' overrides: 16927572!
setUp

	harryPotter := #HarryPotter.
	lordOfTheRings := #LordOfTheRings.
	ageOfEmpires := #AgeOfEmpires
	! !
!CartTest methodsFor: 'tests - adding' stamp: 'AM 11/17/2020 22:35:26'!
test01NewCartIsEmpty

	| anEmptyCart catalogue |
	
	catalogue := OrderedCollection new.
	
	anEmptyCart := Cart withCatalogue: catalogue.
	
	self assert: anEmptyCart isEmpty.
	self assert: anEmptyCart listCart isEmpty.! !
!CartTest methodsFor: 'tests - adding' stamp: 'NNH 11/20/2020 18:46:25'!
test02ABookAddedToCartIsSuccessfullyAdded

	| aCart catalogue |
	
	catalogue := Dictionary with: harryPotter -> 100.
	
	aCart := Cart withCatalogue: catalogue.
	
	aCart addToCart: harryPotter withOccurrences: 1.
	
	self deny: aCart isEmpty.
	self assert: ( aCart listCart hasEqualElements: {harryPotter} )! !
!CartTest methodsFor: 'tests - adding' stamp: 'AM 11/20/2020 19:19:04'!
test03ManyBooksAddedToCartAreSuccessfullyAdded

	| aCart catalogue |
	
	catalogue := Dictionary with: harryPotter -> 100
						with: lordOfTheRings -> 100
						with: ageOfEmpires -> 100.
	
	aCart := Cart withCatalogue: catalogue.
	
	aCart addToCart: harryPotter withOccurrences: 1. 
	aCart addToCart: lordOfTheRings withOccurrences: 1.
	aCart addToCart: ageOfEmpires withOccurrences: 1.
	
	self deny: aCart isEmpty.
	self assert: ( aCart listCart hasEqualElements: {harryPotter. lordOfTheRings. ageOfEmpires} )! !
!CartTest methodsFor: 'tests - adding' stamp: 'NNH 11/20/2020 18:47:05'!
test05ABookAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce

	| aCart catalogue |
	
	catalogue := Dictionary with: harryPotter -> 100.
	
	aCart := Cart withCatalogue: catalogue.
	
	aCart addToCart: harryPotter withOccurrences: 2. 
	
	self assert: ( aCart listCart hasEqualElements: {harryPotter. harryPotter} )! !
!CartTest methodsFor: 'tests - adding' stamp: 'NNH 11/20/2020 18:47:14'!
test08ExternallyAddingBookToCartListShouldNotModifyCart

	| anEmptyCart catalogue emptyCartList |
	
	catalogue := Dictionary with: harryPotter -> 100.
	
	anEmptyCart := Cart withCatalogue: catalogue.
	emptyCartList := anEmptyCart listCart.
	emptyCartList add: harryPotter.
	
	self assert: anEmptyCart isEmpty.
	self assert: anEmptyCart listCart isEmpty.! !
!CartTest methodsFor: 'tests - errors' stamp: 'NNH 11/20/2020 18:47:32'!
test04ABookShouldNotBeAddedWhenNotForSale

	| aCart catalogue |
	
	catalogue := Dictionary with: harryPotter -> 100.
	
	aCart := Cart withCatalogue: catalogue.
	
	self should: [ aCart addToCart: lordOfTheRings withOccurrences: 1 ]
		raise: Error
		withMessageText: Cart bookIsNotForSaleErrorDescription.
		
	self assert: aCart isEmpty. ! !
!CartTest methodsFor: 'tests - errors' stamp: 'NNH 11/20/2020 18:47:35'!
test06ABookShouldNotBeAddedWithNonIntegerQuantity

	| aCart catalogue |
	
	catalogue := Dictionary with: harryPotter -> 100.
	
	aCart := Cart withCatalogue: catalogue.
	
	self should: [ aCart addToCart: harryPotter withOccurrences: 0.5 ]
		raise: Error
		withMessageText: Cart bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription.
		
	self assert: aCart isEmpty. ! !
!CartTest methodsFor: 'tests - errors' stamp: 'NNH 11/20/2020 18:47:38'!
test07ABookShouldNotBeAddedWithNonPositiveQuantity

	| aCart catalogue |
	
	catalogue := Dictionary with: harryPotter -> 100.
	
	aCart := Cart withCatalogue: catalogue.
	
	self should: [ aCart addToCart: harryPotter withOccurrences: 0 ]
		raise: Error
		withMessageText: Cart bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription.
		
	self assert: aCart isEmpty. ! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'NNH 11/23/2020 10:15:37'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'NNH 11/23/2020 10:15:37'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:18:09'!
test01CashierShouldNotDispatchEmptyCart
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.

	aCart := Cart withCatalogue: OrderedCollection new.	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier canNotCheckOutAnEmptyCartErrorDescription .
	
	self deny: aMerchantProcessorDouble receivedAMessage.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:27:51'!
test02CashierShouldNotDispatchExpiredCreditCard
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.
	
	aCart := Cart withCatalogue: OrderedCollection new.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier declinedCreditCardErrorDescription.

	self deny: aMerchantProcessorDouble receivedAMessage.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:17:25'!
test03
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble aBook catalogue |
	
	aBook := 'Harry Potter'.	
	catalogue := Dictionary with: aBook -> 100.
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue .

	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: aBook withOccurrences: 1.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	aCashier checkOut: aCart with: aCreditCard.

	self assert: (aMerchantProcessorDouble receivedMessage: #process) .
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:55:54'!
test04
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble aBook ticket catalogue |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	
	aBook := 'Harry Potter'.
	catalogue := (Dictionary with: aBook -> 100).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: aBook withOccurrences: 1.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	ticket := aCashier checkOut: aCart with: aCreditCard.

	self assert: ticket total equals: 100 .
	self assert: ( ticket products hasEqualElements: { aBook } ) .
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 19:06:02'!
test05
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble ticket catalogue ageOfEmpires harryPotter lordOfTheRings |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	
	harryPotter := 'Harry Potter'.
	lordOfTheRings := 'Lord Of The Rings'.
	ageOfEmpires := 'Age Of Empires'.
	catalogue := (Dictionary with: harryPotter -> 100 with: lordOfTheRings -> 50 with: ageOfEmpires -> 25).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: harryPotter withOccurrences: 1.
	aCart addToCart: lordOfTheRings withOccurrences: 1.
	aCart addToCart: ageOfEmpires withOccurrences: 1.

	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	ticket := aCashier checkOut: aCart with: aCreditCard.

	self assert: ticket total equals: 175 .
	self assert: ( ticket products hasEqualElements: { harryPotter. lordOfTheRings. ageOfEmpires } ) .
! !

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'NNH 11/23/2020 10:15:38'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'validCardNumber monthInACalendar hernan validCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'NNH 11/23/2020 10:15:38'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'validCardNumber monthInACalendar hernan validCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:21:52' overrides: 16927572!
setUp
	
	validCardNumber := 4444444444444444.
	monthInACalendar := January, 2021.
	hernan := 'Hern�n'.
	
	validCreditCard := CreditCard withNumber: validCardNumber expirationDate: monthInACalendar owner: hernan.
	
	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:22:21'!
test01ValidCardPropertiesAreCorrect
	
	self assert: validCreditCard number equals: validCardNumber .
	self assert: validCreditCard expirationDate equals: monthInACalendar .
	self assert: validCreditCard owner equals: hernan.

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:23:04'!
test02CardNumberShouldNotHaveLessThan16Digits

	| aCardId |
	
	aCardId := 10 ^ 15 - 1.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: monthInACalendar owner: hernan ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:24:01'!
test03CardExpirationDateShouldBeAMonthOfAnYear

	| aDayInAMonthOfAnYear |
	
	aDayInAMonthOfAnYear := January/01/2021.
	
	self should: [ CreditCard withNumber: validCardNumber expirationDate: aDayInAMonthOfAnYear owner: hernan ]
	raise: Error
	withMessageText: CreditCard invalidExpirationDateErrorDescription .
	

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:24:40'!
test04CardNumberShouldBeAnInteger

	| aNonIntegerCardNumber |
	
	aNonIntegerCardNumber := 0.5 .
	
	self should: [ CreditCard withNumber: aNonIntegerCardNumber expirationDate: monthInACalendar owner: hernan ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:25:10'!
test05CardNumberShouldNotHaveMoreThan16Digits

	| anInvalidCardNumber |
	
	anInvalidCardNumber := 10 ^ 16.
	
	self should: [ CreditCard withNumber: anInvalidCardNumber expirationDate: monthInACalendar owner: hernan ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:25:35'!
test06OwnerNameShouldNotBeEmpty
	
	self should: [ CreditCard withNumber: validCardNumber expirationDate: monthInACalendar owner: '' ]
	raise: Error
	withMessageText: CreditCard invalidOwnerNameErrorDescription .
	

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:26:13'!
test07OwnerNameShouldNotBeBlank.
	
	self should: [ CreditCard withNumber: validCardNumber expirationDate: monthInACalendar owner: '      ' ]
	raise: Error
	withMessageText: CreditCard invalidOwnerNameErrorDescription .
	

	! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'NNH 11/23/2020 10:15:38'!
Object subclass: #Cart
	instanceVariableNames: 'books catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'NNH 11/23/2020 10:15:38'!
Object subclass: #Cart
	instanceVariableNames: 'books catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'accessing' stamp: 'NNH 11/20/2020 19:11:21'!
listCart
	
	^ books copy! !
!Cart methodsFor: 'adding books' stamp: 'AM 11/17/2020 22:54:35'!
addToCart: aBook withOccurrences: aNumberOfOccurences

	self assertThatCanBeAdded: aBook 
		withOccurences: aNumberOfOccurences.
		
	books add: aBook 
		withOccurrences: aNumberOfOccurences 
	
	! !
!Cart methodsFor: 'assertions' stamp: 'NNH 11/20/2020 18:45:31'!
assertThatCanBeAdded: aBook withOccurences: aNumberOfOccurrences

	(catalogue includesKey: aBook ) 
		ifFalse: [ self signalBookIsNotForSale ].
		
	(aNumberOfOccurrences isInteger and: [ aNumberOfOccurrences > 0 ]) 
		ifFalse: [ self signalBookCanNotBeAddedANonNaturalNumberOfTimes ].! !
!Cart methodsFor: 'error signaling' stamp: 'AM 11/17/2020 22:52:59'!
signalBookCanNotBeAddedANonNaturalNumberOfTimes

	^ self error: self class bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription! !
!Cart methodsFor: 'error signaling' stamp: 'AM 11/17/2020 22:52:32'!
signalBookIsNotForSale

	^ self error: self class bookIsNotForSaleErrorDescription! !
!Cart methodsFor: 'initialization' stamp: 'AM 11/20/2020 19:15:43'!
initializeWithCatalogue: aCatalogue
	
	catalogue := aCatalogue.
	books := OrderedCollection new.! !
!Cart methodsFor: 'testing' stamp: 'AM 11/16/2020 19:06:48'!
isEmpty
	
	^ books isEmpty! !

!classDefinition: 'Cart class' category: 'TusLibros' stamp: 'NNH 11/23/2020 10:15:38'!
Cart class
	instanceVariableNames: ''!

!classDefinition: 'Cart class' category: 'TusLibros' stamp: 'NNH 11/23/2020 10:15:38'!
Cart class
	instanceVariableNames: ''!
!Cart class methodsFor: 'instance creation' stamp: 'AM 11/16/2020 21:28:41'!
withCatalogue: aCatalogue

	^self new initializeWithCatalogue: aCatalogue ! !
!Cart class methodsFor: 'error descriptions' stamp: 'AM 11/17/2020 22:41:12'!
bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription
	
	^ 'Books can not be added with a non natural number of occurrences'! !
!Cart class methodsFor: 'error descriptions' stamp: 'AM 11/16/2020 19:17:14'!
bookIsNotForSaleErrorDescription
	
	^ 'Book is not for sale'.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'NNH 11/23/2020 10:15:38'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'NNH 11/23/2020 10:15:38'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'AM 11/20/2020 19:16:48'!
checkOut: aCart with: aCreditCard
	
	| total |
	
	(aCreditCard expirationDate < FixedGregorianDate today) ifTrue: [ self error: self class declinedCreditCardErrorDescription ] .
	
	aCart isEmpty ifTrue: [ self error: self class canNotCheckOutAnEmptyCartErrorDescription ] .
	
	merchantProcessor process.
	
	total := aCart listCart sum: [ :aProduct | catalogue at: aProduct ].
	
	^ Ticket total: total products: aCart listCart .! !
!Cashier methodsFor: 'initialization' stamp: 'NNH 11/19/2020 21:31:49'!
initializeWith: aMerchantProcessor 
	
	merchantProcessor := aMerchantProcessor.! !
!Cashier methodsFor: 'initialization' stamp: 'NNH 11/20/2020 18:43:39'!
initializeWithProcessor: aMerchantProcessor andCatalogue: aCatalogue 
	
	merchantProcessor := aMerchantProcessor.
	catalogue := aCatalogue.! !

!classDefinition: 'Cashier class' category: 'TusLibros' stamp: 'NNH 11/23/2020 10:15:38'!
Cashier class
	instanceVariableNames: ''!

!classDefinition: 'Cashier class' category: 'TusLibros' stamp: 'NNH 11/23/2020 10:15:38'!
Cashier class
	instanceVariableNames: ''!
!Cashier class methodsFor: 'error descriptions' stamp: 'NNH 11/19/2020 19:01:23'!
canNotCheckOutAnEmptyCartErrorDescription
	^ 'A cashier can not check out an empty cart'! !
!Cashier class methodsFor: 'error descriptions' stamp: 'NNH 11/19/2020 19:55:22'!
declinedCreditCardErrorDescription
	
	^ 'Credit card is declined'! !
!Cashier class methodsFor: 'instance creation' stamp: 'NNH 11/19/2020 21:31:25'!
with: aMerchantProcessor 
	
	^ self new initializeWith: aMerchantProcessor! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'NNH 11/20/2020 18:48:56'!
withProcessor: aMerchantProcessor catalogue: aCatalogue 
	
	^ self new initializeWithProcessor: aMerchantProcessor andCatalogue: aCatalogue ! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'NNH 11/23/2020 10:15:38'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'NNH 11/23/2020 10:15:38'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'NNH 11/19/2020 19:34:56'!
initializeWithNumber: aNumber expirationDate: aMonthOfYear owner: aPerson 
	
	number := aNumber.
	expirationDate := aMonthOfYear.
	owner := aPerson.! !
!CreditCard methodsFor: 'accessing' stamp: 'NNH 11/19/2020 19:26:39'!
expirationDate

	^ expirationDate! !
!CreditCard methodsFor: 'accessing' stamp: 'NNH 11/19/2020 19:26:26'!
number

	^ number! !
!CreditCard methodsFor: 'accessing' stamp: 'NNH 11/19/2020 19:26:51'!
owner

	^ owner! !

!classDefinition: 'CreditCard class' category: 'TusLibros' stamp: 'NNH 11/23/2020 10:15:38'!
CreditCard class
	instanceVariableNames: ''!

!classDefinition: 'CreditCard class' category: 'TusLibros' stamp: 'NNH 11/23/2020 10:15:38'!
CreditCard class
	instanceVariableNames: ''!
!CreditCard class methodsFor: 'instance creation' stamp: 'NNH 11/19/2020 21:21:38'!
withNumber: aNumber expirationDate: aMonthOfYear owner: aPerson 
	
	( aNumber isInteger and: [ aNumber between: 10 ^ 15 and: 10 ^ 16 - 1 ] ) ifFalse: [ self error: self invalidCardNumberErrorDescription ] .
	( aMonthOfYear isKindOf: GregorianMonthOfYear ) ifFalse: [ self error: self invalidExpirationDateErrorDescription ] .
	aPerson withoutTrailingBlanks isEmpty ifTrue: [ self error: self invalidOwnerNameErrorDescription ] .
	
	^ self new initializeWithNumber: aNumber expirationDate: aMonthOfYear owner: aPerson . ! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'NNH 11/19/2020 19:29:51'!
invalidCardNumberErrorDescription
	
	^ 'Credit card number must be a positive integer' .! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'NNH 11/19/2020 19:37:40'!
invalidExpirationDateErrorDescription
	
	^ 'Expiration date must be a moth of year' .! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'NNH 11/19/2020 21:14:32'!
invalidOwnerNameErrorDescription
	
	^ 'Credit card should not have an invalid owner name'! !

!classDefinition: #MerchantProcessorDouble category: 'TusLibros' stamp: 'NNH 11/23/2020 10:15:38'!
Object subclass: #MerchantProcessorDouble
	instanceVariableNames: 'messages'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorDouble category: 'TusLibros' stamp: 'NNH 11/23/2020 10:15:38'!
Object subclass: #MerchantProcessorDouble
	instanceVariableNames: 'messages'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorDouble methodsFor: 'error handling' stamp: 'NNH 11/20/2020 18:32:19' overrides: 16881366!
doesNotUnderstand: aMessage
	
	messages add: aMessage asString ! !
!MerchantProcessorDouble methodsFor: 'initialization' stamp: 'NNH 11/20/2020 18:28:27' overrides: 16896425!
initialize
	
	messages := Set new.! !
!MerchantProcessorDouble methodsFor: 'testing' stamp: 'AM 11/20/2020 19:18:09'!
receivedAMessage

	^ messages notEmpty .! !
!MerchantProcessorDouble methodsFor: 'testing' stamp: 'NNH 11/20/2020 18:29:18'!
receivedMessage: aMessage

	^ messages includes: aMessage ! !

!classDefinition: #Ticket category: 'TusLibros' stamp: 'NNH 11/23/2020 10:15:38'!
Object subclass: #Ticket
	instanceVariableNames: 'total products'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Ticket category: 'TusLibros' stamp: 'NNH 11/23/2020 10:15:38'!
Object subclass: #Ticket
	instanceVariableNames: 'total products'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Ticket methodsFor: 'initialization' stamp: 'NNH 11/20/2020 18:56:21'!
initializeTotal: aTotal products: aCollectionOfProducts 
	
	total := aTotal.
	products := aCollectionOfProducts.! !
!Ticket methodsFor: 'accessing' stamp: 'NNH 11/20/2020 18:56:21'!
products

	^ products ! !
!Ticket methodsFor: 'accessing' stamp: 'NNH 11/20/2020 18:55:17'!
total
	
	^ total! !

!classDefinition: 'Ticket class' category: 'TusLibros' stamp: 'NNH 11/23/2020 10:15:38'!
Ticket class
	instanceVariableNames: ''!

!classDefinition: 'Ticket class' category: 'TusLibros' stamp: 'NNH 11/23/2020 10:15:38'!
Ticket class
	instanceVariableNames: ''!
!Ticket class methodsFor: 'instance creation' stamp: 'NNH 11/20/2020 18:54:43'!
total: aTotal products: aCollectionOfProducts 
	
	^self new initializeTotal: aTotal products: aCollectionOfProducts ! !

!classRemoval: #Ticket stamp: 'NNH 11/23/2020 10:17:16'!
Object subclass: #Ticket
	instanceVariableNames: 'total products'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProcessorDouble stamp: 'NNH 11/23/2020 10:17:16'!
Object subclass: #MerchantProcessorDouble
	instanceVariableNames: 'messages'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'NNH 11/23/2020 10:17:17'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'NNH 11/23/2020 10:17:17'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'NNH 11/23/2020 10:17:18'!
Object subclass: #Cart
	instanceVariableNames: 'books catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'NNH 11/23/2020 10:17:18'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'validCardNumber monthInACalendar hernan validCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'NNH 11/23/2020 10:17:19'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'NNH 11/23/2020 10:17:19'!
TestCase subclass: #CartTest
	instanceVariableNames: 'harryPotter lordOfTheRings ageOfEmpires'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/nahuel/git/isw1-2c2020-ejercicios/20-TusLibros/TusLibros-2/TusLibros.st----!

TestCase subclass: #CatalogueTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CatalogueTest category: 'TusLibros' stamp: 'NNH 11/23/2020 10:22:42'!
TestCase subclass: #CatalogueTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Catalogue category: 'TusLibros' stamp: 'NNH 11/23/2020 10:25:20'!
Object subclass: #Catalogue
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CatalogueTest methodsFor: 'nil' stamp: 'NNH 11/23/2020 10:25:14'!
test01
	
	| aCatalogue |
	aCatalogue := Catalogue new.
	
	self deny: ( aCatalogue includes: 'Harry Potter' ).! !
!CatalogueTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/23/2020 10:25:23' prior: 50877057!
test01
	
	| aCatalogue |
	
	aCatalogue := Catalogue new.
	
	self deny: ( aCatalogue includes: 'Harry Potter' ).! !

!testRun: #CatalogueTest #test01 stamp: 'NNH 11/23/2020 10:25:27'!
ERROR!

!testRun: #CatalogueTest #test01 stamp: 'NNH 11/23/2020 10:25:27'!
ERROR!
!Catalogue methodsFor: 'accessing' stamp: 'NNH 11/23/2020 10:25:35'!
includes: aString 
	self shouldBeImplemented.! !
!Catalogue methodsFor: 'accessing' stamp: 'NNH 11/23/2020 10:25:42' prior: 50877075!
includes: aString 
	
	^ false.! !

!testRun: #CatalogueTest #test01 stamp: 'NNH 11/23/2020 10:25:43'!
PASSED!
!Catalogue methodsFor: 'accessing' stamp: 'NNH 11/23/2020 10:25:56' prior: 50877080!
includes: aProduct 
	
	^ false.! !
!CatalogueTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/23/2020 10:27:46'!
test02
	
	| aCatalogue aBook |
	
	aCatalogue := Catalogue new.
	aBook := 'Harry Potter'.
	aCatalogue add: aBook withPrice: 100.
	
	self assert: ( aCatalogue includes: aBook ).
	self assert: ( aCatalogue priceFor: aBook ) equals: 100.! !

!testRun: #CatalogueTest #test02 stamp: 'NNH 11/23/2020 10:27:56'!
ERROR!

!testRun: #CatalogueTest #test02 stamp: 'NNH 11/23/2020 10:27:56'!
ERROR!
!Catalogue methodsFor: 'operations' stamp: 'NNH 11/23/2020 10:28:14'!
add: aString withPrice: aSmallInteger 
	self shouldBeImplemented.! !

!classDefinition: #Catalogue category: 'TusLibros' stamp: 'NNH 11/23/2020 10:28:52'!
Object subclass: #Catalogue
	instanceVariableNames: 'products'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Catalogue methodsFor: 'operations' stamp: 'NNH 11/23/2020 10:28:51' prior: 50877106!
add: aProduct withPrice: aPrice 

	products add: aProduct -> aPrice.! !

!classDefinition: #Catalogue category: 'TusLibros' stamp: 'NNH 11/23/2020 10:29:36'!
Object subclass: #Catalogue
	instanceVariableNames: 'products product'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Catalogue category: 'TusLibros' stamp: 'NNH 11/23/2020 10:29:37'!
Object subclass: #Catalogue
	instanceVariableNames: 'products product price'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Catalogue methodsFor: 'operations' stamp: 'NNH 11/23/2020 10:29:31' prior: 50877118!
add: aProduct withPrice: aPrice 

	product := aProduct.
	price := aPrice.! !

!testRun: #CatalogueTest #test02 stamp: 'NNH 11/23/2020 10:29:40'!
FAILURE!
!Catalogue methodsFor: 'testing' stamp: 'NNH 11/23/2020 10:30:00' prior: 50877087!
includes: aProduct 
	
	^ product  = aProduct.! !

!testRun: #CatalogueTest #test02 stamp: 'NNH 11/23/2020 10:30:08'!
ERROR!

!testRun: #CatalogueTest #test02 stamp: 'NNH 11/23/2020 10:30:08'!
ERROR!
!Catalogue methodsFor: 'accessing' stamp: 'NNH 11/23/2020 10:30:19'!
priceFor: aString 
	self shouldBeImplemented.! !
!Catalogue methodsFor: 'accessing' stamp: 'NNH 11/23/2020 10:30:37' prior: 50877155!
priceFor: aProduct 
	
	^ price.! !

!testRun: #CatalogueTest #test02 stamp: 'NNH 11/23/2020 10:30:39'!
PASSED!

!testRun: #CatalogueTest #test02 stamp: 'NNH 11/23/2020 10:30:48'!
PASSED!
!CatalogueTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/23/2020 10:32:12'!
test03
	
	| aCatalogue aBook anotherBook yetAnotherBook |
	
	aCatalogue := Catalogue new.
	aBook := 'Harry Potter'.
	anotherBook := 'Lord Of The Rings'.
	yetAnotherBook := 'Age Of Empires'.
	
	aCatalogue add: aBook withPrice: 100.
	aCatalogue add: anotherBook withPrice: 50.
	aCatalogue add: yetAnotherBook withPrice: 25.

	
	self assert: ( aCatalogue includes: aBook ).
	self assert: ( aCatalogue includes: anotherBook ).
	self assert: ( aCatalogue includes: yetAnotherBook ).

	self assert: ( aCatalogue priceFor: aBook ) equals: 100.
	self assert: ( aCatalogue priceFor: anotherBook ) equals: 50.
	self assert: ( aCatalogue priceFor: yetAnotherBook ) equals: 25.! !

!testRun: #CatalogueTest #test03 stamp: 'NNH 11/23/2020 10:32:16'!
FAILURE!

!testRun: #CatalogueTest #test03 stamp: 'NNH 11/23/2020 10:32:16'!
FAILURE!
!Catalogue methodsFor: 'testing' stamp: 'NNH 11/23/2020 10:32:35' prior: 50877146!
includes: aProduct 
	
	^ products includesKey: aProduct .! !
!Catalogue methodsFor: 'operations' stamp: 'NNH 11/23/2020 10:32:53' prior: 50877138!
add: aProduct withPrice: aPrice 

	products add: aProduct -> aPrice .! !
!Catalogue methodsFor: 'accessing' stamp: 'NNH 11/23/2020 10:33:19' prior: 50877160!
priceFor: aProduct 
	
	^ products at: aProduct .! !
!Catalogue methodsFor: 'nil' stamp: 'NNH 11/23/2020 10:33:53' overrides: 16896425!
initialize
	
	products := Dictionary new.! !

Object subclass: #Catalogue
	instanceVariableNames: 'products'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Catalogue category: 'TusLibros' stamp: 'NNH 11/23/2020 10:34:12'!
Object subclass: #Catalogue
	instanceVariableNames: 'products'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CatalogueTest #test03 stamp: 'NNH 11/23/2020 10:34:15'!
PASSED!

!testRun: #CatalogueTest #test01 stamp: 'NNH 11/23/2020 10:34:19'!
PASSED!

!testRun: #CatalogueTest #test02 stamp: 'NNH 11/23/2020 10:34:19'!
PASSED!

!testRun: #CatalogueTest #test03 stamp: 'NNH 11/23/2020 10:34:19'!
PASSED!
!CatalogueTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/23/2020 10:36:04' prior: 50877091!
test02
	
	| aCatalogue aBook |
	
	aCatalogue := Catalogue new.
	
	aBook := 'Harry Potter'.
	
	self should: [ aCatalogue add: aBook withPrice: 0 ]
	raise: Error
	withMessageText: Catalogue canNotAddProductWithNonPositivePrice.
! !
!CatalogueTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/23/2020 10:36:14'!
test04
	
	| aCatalogue aBook |
	
	aCatalogue := Catalogue new.
	
	aBook := 'Harry Potter'.
	
	self should: [ aCatalogue add: aBook withPrice: 0 ]
	raise: Error
	withMessageText: Catalogue canNotAddProductWithNonPositivePrice.
! !
!CatalogueTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/23/2020 10:27:46' prior: 50877239!
test02
	
	| aCatalogue aBook |
	
	aCatalogue := Catalogue new.
	aBook := 'Harry Potter'.
	aCatalogue add: aBook withPrice: 100.
	
	self assert: ( aCatalogue includes: aBook ).
	self assert: ( aCatalogue priceFor: aBook ) equals: 100.! !

!testRun: #CatalogueTest #test04 stamp: 'NNH 11/23/2020 10:36:27'!
ERROR!

!testRun: #CatalogueTest #test04 stamp: 'NNH 11/23/2020 10:36:27'!
ERROR!
!CatalogueTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/23/2020 10:36:51' prior: 50877249!
test04
	
	| aCatalogue aBook |
	
	aCatalogue := Catalogue new.
	
	aBook := 'Harry Potter'.
	
	self should: [ aCatalogue add: aBook withPrice: 0 ]
	raise: Error
	withMessageText: Catalogue canNotAddProductWithNonPositivePrice.
	
	self deny: ( aCatalogue includes: aBook ) .
! !

!testRun: #CatalogueTest #test04 stamp: 'NNH 11/23/2020 10:36:55'!
ERROR!

!testRun: #CatalogueTest #test04 stamp: 'NNH 11/23/2020 10:36:55'!
ERROR!
!Catalogue class methodsFor: 'error descriptions' stamp: 'NNH 11/23/2020 10:37:21'!
canNotAddProductWithNonPositivePrice
	self shouldBeImplemented.! !

!testRun: #CatalogueTest #test04 stamp: 'NNH 11/23/2020 10:37:36'!
ERROR!

!testRun: #CatalogueTest #test04 stamp: 'NNH 11/23/2020 10:37:36'!
ERROR!
!Catalogue class methodsFor: 'error handling' stamp: 'NNH 11/23/2020 10:37:40' overrides: 16881409!
error: aString 
	self shouldBeImplemented.! !
!Catalogue class methodsFor: 'error descriptions' stamp: 'NNH 11/23/2020 10:38:10' prior: 50877292!
canNotAddProductWithNonPositivePrice
	
	^ 'Can not add product with a non positive price'. ! !

!testRun: #CatalogueTest #test04 stamp: 'NNH 11/23/2020 10:38:12'!
FAILURE!

!methodRemoval: Catalogue class #error: stamp: 'NNH 11/23/2020 10:38:21'!
error: aString 
	self shouldBeImplemented.!

!testRun: #CatalogueTest #test01 stamp: 'NNH 11/23/2020 10:38:25'!
PASSED!

!testRun: #CatalogueTest #test02 stamp: 'NNH 11/23/2020 10:38:25'!
PASSED!

!testRun: #CatalogueTest #test03 stamp: 'NNH 11/23/2020 10:38:25'!
PASSED!

!testRun: #CatalogueTest #test04 stamp: 'NNH 11/23/2020 10:38:25'!
FAILURE!

!testRun: #CatalogueTest #test04 stamp: 'NNH 11/23/2020 10:38:25'!
FAILURE!
!Catalogue methodsFor: 'operations' stamp: 'NNH 11/23/2020 10:39:03' prior: 50877203!
add: aProduct withPrice: aPrice 

	aPrice <= 0 ifTrue: [ self error: self class canNotAddProductWithNonPositivePrice ].
	products add: aProduct -> aPrice .! !

!testRun: #CatalogueTest #test01 stamp: 'NNH 11/23/2020 10:39:10'!
PASSED!

!testRun: #CatalogueTest #test02 stamp: 'NNH 11/23/2020 10:39:10'!
PASSED!

!testRun: #CatalogueTest #test03 stamp: 'NNH 11/23/2020 10:39:10'!
PASSED!

!testRun: #CatalogueTest #test04 stamp: 'NNH 11/23/2020 10:39:10'!
PASSED!
!CatalogueTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/23/2020 10:41:29'!
test05
	
	| aCatalogue aBook |
	
	aCatalogue := Catalogue new.
	aBook := 'Harry Potter'.
	aCatalogue add: aBook withPrice: 100.
	aCatalogue add: aBook withPrice: 200.

	
	self assert: ( aCatalogue includes: aBook ).
	self assert: ( aCatalogue priceFor: aBook ) equals: 200.! !

!testRun: #CatalogueTest #test05 stamp: 'NNH 11/23/2020 10:41:33'!
PASSED!

!methodRemoval: CatalogueTest #test05 stamp: 'NNH 11/23/2020 10:41:46'!
test05
	
	| aCatalogue aBook |
	
	aCatalogue := Catalogue new.
	aBook := 'Harry Potter'.
	aCatalogue add: aBook withPrice: 100.
	aCatalogue add: aBook withPrice: 200.

	
	self assert: ( aCatalogue includes: aBook ).
	self assert: ( aCatalogue priceFor: aBook ) equals: 200.!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/23/2020 10:50:19' prior: 50876554!
test03
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble aBook catalogue |
	
	aBook := 'Harry Potter'.	
	catalogue := Dictionary with: aBook -> 100.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = aCreditCard ] ) ifTrue: [self error: 'Collaborators are not valid'] ].
	
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue .

	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: aBook withOccurrences: 1.	
	
	aCashier checkOut: aCart with: aCreditCard.

	self assert: (aMerchantProcessorDouble receivedMessage: #debit:from:) .
! !

!testRun: #CashierTest #test03 stamp: 'NNH 11/23/2020 10:50:25'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'NNH 11/23/2020 10:50:25'!
ERROR!
!MerchantProcessorDouble class methodsFor: 'instance creation' stamp: 'NNH 11/23/2020 10:50:32'!
with: aBlockClosure 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aBlockClosure ! !
!MerchantProcessorDouble class methodsFor: 'instance creation' stamp: 'NNH 11/23/2020 10:50:52' prior: 50877405!
with: aBlockForDebitFrom

	^self new initializeWith: aBlockForDebitFrom ! !

!testRun: #CashierTest #test03 stamp: 'NNH 11/23/2020 10:50:54'!
FAILURE!

!testRun: #CashierTest #test03 stamp: 'NNH 11/23/2020 10:51:11'!
FAILURE!

!testRun: #CashierTest #test03 stamp: 'NNH 11/23/2020 10:51:11'!
FAILURE!

!classDefinition: #MerchantProcessorDouble category: 'TusLibros' stamp: 'NNH 11/23/2020 10:51:59'!
Object subclass: #MerchantProcessorDouble
	instanceVariableNames: 'messages block'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorDouble methodsFor: 'initialization' stamp: 'NNH 11/23/2020 10:51:57'!
initializeWith: aBlockToDebitFrom
	
	messages := Set new.
	block := aBlockToDebitFrom .! !

!testRun: #CashierTest #test03 stamp: 'NNH 11/23/2020 10:52:13'!
FAILURE!

!testRun: #CashierTest #test03 stamp: 'NNH 11/23/2020 10:52:13'!
FAILURE!
!MerchantProcessorDouble methodsFor: 'nil' stamp: 'NNH 11/23/2020 10:54:20'!
debit: anAmount from: aCreditCard

! !
!MerchantProcessorDouble methodsFor: 'as yet unclassified' stamp: 'NNH 11/23/2020 10:55:04' prior: 50877445!
debit: anAmount from: aCreditCard

	messages add: #debit:from: .
	block value: anAmount value: aCreditCard .! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/23/2020 10:55:40' prior: 50876832!
checkOut: aCart with: aCreditCard
	
	| total |
	
	(aCreditCard expirationDate < FixedGregorianDate today) ifTrue: [ self error: self class declinedCreditCardErrorDescription ] .
	
	aCart isEmpty ifTrue: [ self error: self class canNotCheckOutAnEmptyCartErrorDescription ] .
	
	total := aCart listCart sum: [ :aProduct | catalogue at: aProduct ].
	
	merchantProcessor debit: total from: aCreditCard .

	^ Ticket total: total products: aCart listCart .! !

!testRun: #CashierTest #test03 stamp: 'NNH 11/23/2020 10:55:49'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'NNH 11/23/2020 10:55:49'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/23/2020 10:56:09' prior: 50877374!
test03
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble aBook catalogue |
	
	aBook := 'Harry Potter'.	
	catalogue := Dictionary with: aBook -> 100.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = aCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid'] ].
	
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue .

	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: aBook withOccurrences: 1.	
	
	aCashier checkOut: aCart with: aCreditCard.

	self assert: (aMerchantProcessorDouble receivedMessage: #debit:from:) .
! !

!testRun: #CashierTest #test03 stamp: 'NNH 11/23/2020 10:56:11'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/23/2020 10:56:57' prior: 50876576!
test04
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble aBook ticket catalogue |
	
	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = aCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid'] ].
	
	aBook := 'Harry Potter'.
	catalogue := (Dictionary with: aBook -> 100).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: aBook withOccurrences: 1.
	
	ticket := aCashier checkOut: aCart with: aCreditCard.

	self assert: ticket total equals: 100 .
	self assert: ( ticket products hasEqualElements: { aBook } ) .
! !

!testRun: #CashierTest #test04 stamp: 'NNH 11/23/2020 10:57:04'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/23/2020 10:57:35' prior: 50876600!
test05
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble ticket catalogue ageOfEmpires harryPotter lordOfTheRings |
	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 175 and: [ aCard = aCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid'] ].
		
	harryPotter := 'Harry Potter'.
	lordOfTheRings := 'Lord Of The Rings'.
	ageOfEmpires := 'Age Of Empires'.
	catalogue := (Dictionary with: harryPotter -> 100 with: lordOfTheRings -> 50 with: ageOfEmpires -> 25).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: harryPotter withOccurrences: 1.
	aCart addToCart: lordOfTheRings withOccurrences: 1.
	aCart addToCart: ageOfEmpires withOccurrences: 1.

	
	ticket := aCashier checkOut: aCart with: aCreditCard.

	self assert: ticket total equals: 175 .
	self assert: ( ticket products hasEqualElements: { harryPotter. lordOfTheRings. ageOfEmpires } ) .
! !

!testRun: #CashierTest #test05 stamp: 'NNH 11/23/2020 10:57:41'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/23/2020 11:00:01'!
test06
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble catalogue harryPotter |
	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 175 and: [ aCard = aCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit Card is Stolen'.
		].
		
	harryPotter := 'Harry Potter'.
	catalogue := (Dictionary with: harryPotter -> 100).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: harryPotter withOccurrences: 1.

	self should : [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: 'Credit Card is Stolen'.

! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/23/2020 11:00:14' prior: 50877579!
test06
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble catalogue harryPotter |
	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 175 and: [ aCard = aCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit Card is Stolen'.
		].
		
	harryPotter := 'Harry Potter'.
	catalogue := (Dictionary with: harryPotter -> 100).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: harryPotter withOccurrences: 1.

	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: 'Credit Card is Stolen'.

! !

!testRun: #CashierTest #test06 stamp: 'NNH 11/23/2020 11:00:17'!
FAILURE!

!testRun: #CashierTest #test06 stamp: 'NNH 11/23/2020 11:00:17'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/23/2020 11:00:24' prior: 50877608!
test06
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble catalogue harryPotter |
	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = aCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit Card is Stolen'.
		].
		
	harryPotter := 'Harry Potter'.
	catalogue := (Dictionary with: harryPotter -> 100).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: harryPotter withOccurrences: 1.

	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: 'Credit Card is Stolen'.

! !

!testRun: #CashierTest #test06 stamp: 'NNH 11/23/2020 11:00:26'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/23/2020 11:03:13' prior: 50877642!
test06
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble catalogue harryPotter |
	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = aCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit Card is Stolen'.
		].
		
	harryPotter := 'Harry Potter'.
	catalogue := (Dictionary with: harryPotter -> 100).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: harryPotter withOccurrences: 1.

	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: 'Credit Card is Stolen'.

! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/23/2020 11:05:04' prior: 50877673!
test06
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble catalogue harryPotter |
	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = aCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit Card is Stolen'.
		].
		
	harryPotter := 'Harry Potter'.
	catalogue := (Dictionary with: harryPotter -> 100).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: harryPotter withOccurrences: 1.


	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: 'Credit Card is Stolen'.

! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/23/2020 11:05:48' prior: 50877702!
test06
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble catalogue harryPotter |
	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = aCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card is stolen'.
		].
		
	harryPotter := 'Harry Potter'.
	catalogue := (Dictionary with: harryPotter -> 100).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: harryPotter withOccurrences: 1.


	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: 'Credit card is stolen'.

! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/23/2020 11:07:44' prior: 50877731!
test06
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble catalogue harryPotter |
	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = aCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card is stolen'.
		].
		
	harryPotter := 'Harry Potter'.
	catalogue := (Dictionary with: harryPotter -> 100).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: harryPotter withOccurrences: 1.

	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText equals: 'Credit card is stolen' ].

! !

!testRun: #CashierTest #test06 stamp: 'NNH 11/23/2020 11:07:48'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/23/2020 11:09:05' prior: 50877760!
test06
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble catalogue harryPotter |
	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = aCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card is stolen'.
		].
		
	harryPotter := 'Harry Potter'.
	catalogue := (Dictionary with: harryPotter -> 100).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: harryPotter withOccurrences: 1.

	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withExceptionDo: [ :anError | self halt. self assert: anError messageText equals: 'Credit card is stolen' ].

! !

anError!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/23/2020 11:10:07' prior: 50877793!
test06
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble catalogue harryPotter |
	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = aCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card is stolen'.
		].
		
	harryPotter := 'Harry Potter'.
	catalogue := (Dictionary with: harryPotter -> 100).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: harryPotter withOccurrences: 1.

	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText equals: 'Credit card is stolen' ].

! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/23/2020 11:11:12'!
test07
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble catalogue harryPotter |
	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = aCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card has no funds'.
		].
		
	harryPotter := 'Harry Potter'.
	catalogue := (Dictionary with: harryPotter -> 100).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: harryPotter withOccurrences: 1.

	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText equals: 'Credit card is stolen' ].

! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/23/2020 11:11:28' prior: 50877854!
test07
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble catalogue harryPotter |
	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = aCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card has no funds'.
		].
		
	harryPotter := 'Harry Potter'.
	catalogue := (Dictionary with: harryPotter -> 100).
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: catalogue.
	
	aCart := Cart withCatalogue: catalogue.
	aCart addToCart: harryPotter withOccurrences: 1.

	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText equals: 'Credit card has no funds' ].

! !

----QUIT----(23 November 2020 11:12:37) CuisUniversity-4384.image priorSource: 17382386!

----STARTUP---- (25 November 2020 19:28:10) as /home/nahuel/Documents/cuisuniversity/CuisUniversity-4384.image!


!classRemoval: #Ticket stamp: 'NNH 11/25/2020 19:28:37'!
Object subclass: #Ticket
	instanceVariableNames: 'total products'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProcessorDouble stamp: 'NNH 11/25/2020 19:28:37'!
Object subclass: #MerchantProcessorDouble
	instanceVariableNames: 'messages block'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'NNH 11/25/2020 19:28:38'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationDate owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Catalogue stamp: 'NNH 11/25/2020 19:28:38'!
Object subclass: #Catalogue
	instanceVariableNames: 'products'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'NNH 11/25/2020 19:28:39'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'NNH 11/25/2020 19:28:39'!
Object subclass: #Cart
	instanceVariableNames: 'books catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'NNH 11/25/2020 19:28:40'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'validCardNumber monthInACalendar hernan validCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CatalogueTest stamp: 'NNH 11/25/2020 19:28:40'!
TestCase subclass: #CatalogueTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'NNH 11/25/2020 19:28:41'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'NNH 11/25/2020 19:28:41'!
TestCase subclass: #CartTest
	instanceVariableNames: 'harryPotter lordOfTheRings ageOfEmpires'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/nahuel/git/isw1-2c2020-ejercicios/20-TusLibros/TusLibros-2/TusLibros.st----!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'NNH 11/25/2020 19:33:10'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'validCardNumber futureMonthInACalendar hernan validCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 19:33:10' prior: 50878467!
test07OwnerNameShouldNotBeBlank.
	
	self should: [ CreditCard withNumber: validCardNumber expirationDate: futureMonthInACalendar owner: '      ' ]
	raise: Error
	withMessageText: CreditCard invalidOwnerNameErrorDescription .
	

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 19:33:10' prior: 50878445!
test05CardNumberShouldNotHaveMoreThan16Digits

	| anInvalidCardNumber |
	
	anInvalidCardNumber := 10 ^ 16.
	
	self should: [ CreditCard withNumber: anInvalidCardNumber expirationDate: futureMonthInACalendar owner: hernan ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 19:33:10' prior: 50878399!
test01ValidCardPropertiesAreCorrect
	
	self assert: validCreditCard number equals: validCardNumber .
	self assert: validCreditCard expirationDate equals: futureMonthInACalendar .
	self assert: validCreditCard owner equals: hernan.

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 19:33:10' prior: 50878478 overrides: 16927572!
setUp
	
	validCardNumber := 4444444444444444.
	futureMonthInACalendar := January, 2021.
	hernan := 'Hern�n'.
	
	validCreditCard := CreditCard withNumber: validCardNumber expirationDate: futureMonthInACalendar owner: hernan.
	
	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 19:33:10' prior: 50878433!
test04CardNumberShouldBeAnInteger

	| aNonIntegerCardNumber |
	
	aNonIntegerCardNumber := 0.5 .
	
	self should: [ CreditCard withNumber: aNonIntegerCardNumber expirationDate: futureMonthInACalendar owner: hernan ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 19:33:10' prior: 50878409!
test02CardNumberShouldNotHaveLessThan16Digits

	| aCardId |
	
	aCardId := 10 ^ 15 - 1.
	
	self should: [ CreditCard withNumber: aCardId expirationDate: futureMonthInACalendar owner: hernan ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 19:33:10' prior: 50878457!
test06OwnerNameShouldNotBeEmpty
	
	self should: [ CreditCard withNumber: validCardNumber expirationDate: futureMonthInACalendar owner: '' ]
	raise: Error
	withMessageText: CreditCard invalidOwnerNameErrorDescription .
	

	! !
!CreditCardTest methodsFor: 'tests' stamp: 'NNH 11/25/2020 19:33:38' prior: 50878931!
test02CardNumberShouldNotHaveLessThan16Digits

	| anInvalidCardNumber |
	
	anInvalidCardNumber := 10 ^ 15 - 1.
	
	self should: [ CreditCard withNumber: anInvalidCardNumber expirationDate: futureMonthInACalendar owner: hernan ]
	raise: Error
	withMessageText: CreditCard invalidCardNumberErrorDescription .
	

	! !

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 19:34:02'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 19:34:02'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/25/2020 19:34:02'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'NNH 11/25/2020 19:34:02'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'NNH 11/25/2020 19:34:02'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'NNH 11/25/2020 19:34:02'!
PASSED!

!testRun: #CashierTest #test07 stamp: 'NNH 11/25/2020 19:34:02'!
PASSED!

!testRun: #CatalogueTest #test01 stamp: 'NNH 11/25/2020 19:34:02'!
PASSED!

!testRun: #CatalogueTest #test02 stamp: 'NNH 11/25/2020 19:34:02'!
PASSED!

!testRun: #CatalogueTest #test03 stamp: 'NNH 11/25/2020 19:34:02'!
PASSED!

!testRun: #CatalogueTest #test04 stamp: 'NNH 11/25/2020 19:34:02'!
PASSED!

!testRun: #CreditCardTest #test01ValidCardPropertiesAreCorrect stamp: 'NNH 11/25/2020 19:34:02'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/25/2020 19:34:02'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/25/2020 19:34:02'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/25/2020 19:34:02'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/25/2020 19:34:02'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'NNH 11/25/2020 19:34:02'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/25/2020 19:34:02'!
PASSED!

!testRun: #CatalogueTest #test01 stamp: 'NNH 11/25/2020 19:34:32'!
PASSED!

!testRun: #CatalogueTest #test02 stamp: 'NNH 11/25/2020 19:34:32'!
PASSED!

!testRun: #CatalogueTest #test03 stamp: 'NNH 11/25/2020 19:34:32'!
PASSED!

!testRun: #CatalogueTest #test04 stamp: 'NNH 11/25/2020 19:34:32'!
PASSED!
!CartTest methodsFor: 'setUp/tearDown' stamp: 'NNH 11/25/2020 19:36:05' prior: 50878003 overrides: 16927572!
setUp

	harryPotter := #HarryPotter.
	lordOfTheRings := #LordOfTheRings.
	ageOfEmpires := #AgeOfEmpires.
	
	harryPotterCatalogue := Catalogue new.
	harryPotterCatalogue add: harryPotter withPrice: 100.
	threeBookCatalogue := Catalogue new.
	threeBookCatalogue add: harryPotter withPrice: 100;
					add: lordOfTheRings withPrice: 50;
					add: ageOfEmpires withPrice: 25.
								
	! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/25/2020 19:36:10'!
PASSED!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/25/2020 19:36:10'!
ERROR!

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/25/2020 19:36:10'!
ERROR!

!testRun: #CartTest #test04ABookShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/25/2020 19:36:10'!
FAILURE!

!testRun: #CartTest #test05ABookAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/25/2020 19:36:10'!
ERROR!

!testRun: #CartTest #test06ABookShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/25/2020 19:36:10'!
FAILURE!

!testRun: #CartTest #test07ABookShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/25/2020 19:36:10'!
FAILURE!

!testRun: #CartTest #test08ExternallyAddingBookToCartListShouldNotModifyCart stamp: 'NNH 11/25/2020 19:36:10'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 19:36:10'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 19:36:10'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/25/2020 19:36:10'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'NNH 11/25/2020 19:36:10'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'NNH 11/25/2020 19:36:10'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'NNH 11/25/2020 19:36:10'!
PASSED!

!testRun: #CashierTest #test07 stamp: 'NNH 11/25/2020 19:36:10'!
PASSED!

!testRun: #CatalogueTest #test01 stamp: 'NNH 11/25/2020 19:36:10'!
PASSED!

!testRun: #CatalogueTest #test02 stamp: 'NNH 11/25/2020 19:36:10'!
PASSED!

!testRun: #CatalogueTest #test03 stamp: 'NNH 11/25/2020 19:36:10'!
PASSED!

!testRun: #CatalogueTest #test04 stamp: 'NNH 11/25/2020 19:36:10'!
PASSED!

!testRun: #CreditCardTest #test01ValidCardPropertiesAreCorrect stamp: 'NNH 11/25/2020 19:36:10'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/25/2020 19:36:10'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/25/2020 19:36:10'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/25/2020 19:36:10'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/25/2020 19:36:10'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'NNH 11/25/2020 19:36:10'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/25/2020 19:36:10'!
PASSED!
!CartTest methodsFor: 'setUp/tearDown' stamp: 'NNH 11/25/2020 19:36:31' prior: 50879028 overrides: 16927572!
setUp

	harryPotter := #HarryPotter.
	lordOfTheRings := #LordOfTheRings.
	ageOfEmpires := #AgeOfEmpires.
	
	harryPotterCatalogue := Catalogue new.
	harryPotterCatalogue add: harryPotter withPrice: 100.
	threeBookCatalogue := Catalogue new.
	threeBookCatalogue add: harryPotter withPrice: 100.
	threeBookCatalogue				add: lordOfTheRings withPrice: 50.
	threeBookCatalogue				add: ageOfEmpires withPrice: 25.
								
	! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/25/2020 19:36:35'!
PASSED!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/25/2020 19:36:35'!
ERROR!

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/25/2020 19:36:35'!
ERROR!

!testRun: #CartTest #test04ABookShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/25/2020 19:36:35'!
FAILURE!

!testRun: #CartTest #test05ABookAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/25/2020 19:36:35'!
ERROR!

!testRun: #CartTest #test06ABookShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/25/2020 19:36:35'!
FAILURE!

!testRun: #CartTest #test07ABookShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/25/2020 19:36:35'!
FAILURE!

!testRun: #CartTest #test08ExternallyAddingBookToCartListShouldNotModifyCart stamp: 'NNH 11/25/2020 19:36:35'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 19:36:35'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 19:36:35'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/25/2020 19:36:35'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'NNH 11/25/2020 19:36:35'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'NNH 11/25/2020 19:36:35'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'NNH 11/25/2020 19:36:35'!
PASSED!

!testRun: #CashierTest #test07 stamp: 'NNH 11/25/2020 19:36:35'!
PASSED!

!testRun: #CatalogueTest #test01 stamp: 'NNH 11/25/2020 19:36:35'!
PASSED!

!testRun: #CatalogueTest #test02 stamp: 'NNH 11/25/2020 19:36:35'!
PASSED!

!testRun: #CatalogueTest #test03 stamp: 'NNH 11/25/2020 19:36:35'!
PASSED!

!testRun: #CatalogueTest #test04 stamp: 'NNH 11/25/2020 19:36:35'!
PASSED!

!testRun: #CreditCardTest #test01ValidCardPropertiesAreCorrect stamp: 'NNH 11/25/2020 19:36:35'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/25/2020 19:36:35'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/25/2020 19:36:35'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/25/2020 19:36:35'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/25/2020 19:36:35'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'NNH 11/25/2020 19:36:35'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/25/2020 19:36:35'!
PASSED!
!CartTest methodsFor: 'setUp/tearDown' stamp: 'NNH 11/25/2020 19:36:41' prior: 50879123 overrides: 16927572!
setUp

	harryPotter := #HarryPotter.
	lordOfTheRings := #LordOfTheRings.
	ageOfEmpires := #AgeOfEmpires.
	
	harryPotterCatalogue := Catalogue new.
	harryPotterCatalogue add: harryPotter withPrice: 100.
	threeBookCatalogue := Catalogue new.
	threeBookCatalogue add: harryPotter withPrice: 100;
					add: lordOfTheRings withPrice: 50;
					add: ageOfEmpires withPrice: 25.
								
	! !

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/25/2020 19:36:53'!
ERROR!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/25/2020 19:36:53'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'NNH 11/25/2020 19:37:18' prior: 50878510!
assertThatCanBeAdded: aBook withOccurences: aNumberOfOccurrences

	(catalogue includes: aBook ) 
		ifFalse: [ self signalBookIsNotForSale ].
		
	(aNumberOfOccurrences isInteger and: [ aNumberOfOccurrences > 0 ]) 
		ifFalse: [ self signalBookCanNotBeAddedANonNaturalNumberOfTimes ].! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/25/2020 19:37:22'!
PASSED!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/25/2020 19:37:22'!
PASSED!

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/25/2020 19:37:22'!
PASSED!

!testRun: #CartTest #test04ABookShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/25/2020 19:37:22'!
PASSED!

!testRun: #CartTest #test05ABookAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/25/2020 19:37:22'!
PASSED!

!testRun: #CartTest #test06ABookShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/25/2020 19:37:22'!
PASSED!

!testRun: #CartTest #test07ABookShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/25/2020 19:37:22'!
PASSED!

!testRun: #CartTest #test08ExternallyAddingBookToCartListShouldNotModifyCart stamp: 'NNH 11/25/2020 19:37:22'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 19:37:22'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 19:37:22'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/25/2020 19:37:22'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'NNH 11/25/2020 19:37:22'!
ERROR!

!testRun: #CashierTest #test05 stamp: 'NNH 11/25/2020 19:37:22'!
ERROR!

!testRun: #CashierTest #test06 stamp: 'NNH 11/25/2020 19:37:22'!
ERROR!

!testRun: #CashierTest #test07 stamp: 'NNH 11/25/2020 19:37:22'!
ERROR!

!testRun: #CatalogueTest #test01 stamp: 'NNH 11/25/2020 19:37:22'!
PASSED!

!testRun: #CatalogueTest #test02 stamp: 'NNH 11/25/2020 19:37:22'!
PASSED!

!testRun: #CatalogueTest #test03 stamp: 'NNH 11/25/2020 19:37:22'!
PASSED!

!testRun: #CatalogueTest #test04 stamp: 'NNH 11/25/2020 19:37:22'!
PASSED!

!testRun: #CreditCardTest #test01ValidCardPropertiesAreCorrect stamp: 'NNH 11/25/2020 19:37:22'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/25/2020 19:37:22'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/25/2020 19:37:22'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/25/2020 19:37:22'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/25/2020 19:37:22'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'NNH 11/25/2020 19:37:22'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/25/2020 19:37:22'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/25/2020 19:37:31'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'NNH 11/25/2020 19:37:31'!
ERROR!

catalogue!
!CashierTest methodsFor: 'nil' stamp: 'NNH 11/25/2020 19:39:25' overrides: 16927572!
setUp
	
	! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'NNH 11/25/2020 19:40:06'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'harryPotterBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'NNH 11/25/2020 19:40:07'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'harryPotterBook lordOfTheRingsBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'NNH 11/25/2020 19:40:08'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'harryPotterBook lordOfTheRingsBook ageOfEmpiresBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'NNH 11/25/2020 19:40:09'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'harryPotterBook lordOfTheRingsBook ageOfEmpiresBook harryPotterCatalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'NNH 11/25/2020 19:40:31'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'harryPotterBook lordOfTheRingsBook ageOfEmpiresBook harryPotterCatalogue threeBookCatalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 19:40:29' prior: 50879337 overrides: 16927572!
setUp
	
	harryPotterBook := #HarryPotter.
	lordOfTheRingsBook := #LordOfTheRings.
	ageOfEmpiresBook := #AgeOfEmpires.
	
	harryPotterCatalogue := Catalogue new.
	harryPotterCatalogue add: harryPotterBook withPrice: 100.
	threeBookCatalogue := Catalogue new.
	threeBookCatalogue add: harryPotterBook withPrice: 100;
					add: lordOfTheRingsBook withPrice: 50;
					add: ageOfEmpiresBook withPrice: 25.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 19:41:06' prior: 50878124!
test01CashierShouldNotDispatchEmptyCart
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble |
	
	aMerchantProcessorDouble := MerchantProcessorDouble new.
	aCashier := Cashier with: aMerchantProcessorDouble.

	aCart := Cart withCatalogue: Catalogue new.	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier canNotCheckOutAnEmptyCartErrorDescription .
	
	self deny: aMerchantProcessorDouble receivedAMessage.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 19:42:57' prior: 50879400!
test01CashierShouldNotDispatchEmptyCart
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble |
	
	aMerchantProcessorDouble := MerchantProcessorDouble with: [:aTotal :aLalalala].
	aCashier := Cashier with: aMerchantProcessorDouble.

	aCart := Cart withCatalogue: Catalogue new.	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier canNotCheckOutAnEmptyCartErrorDescription .
	
	self deny: aMerchantProcessorDouble receivedAMessage.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 19:43:00' prior: 50879421!
test01CashierShouldNotDispatchEmptyCart
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble |
	
	aMerchantProcessorDouble := MerchantProcessorDouble with: [:aTotal :aLalalala | ].
	aCashier := Cashier with: aMerchantProcessorDouble.

	aCart := Cart withCatalogue: Catalogue new.	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier canNotCheckOutAnEmptyCartErrorDescription .
	
	self deny: aMerchantProcessorDouble receivedAMessage.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 19:43:18' prior: 50879443!
test01CashierShouldNotDispatchEmptyCart
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble |
	
	aMerchantProcessorDouble := MerchantProcessorDouble with: [:aTotal :aCard | ].
	aCashier := Cashier with: aMerchantProcessorDouble.

	aCart := Cart withCatalogue: Catalogue new.	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier canNotCheckOutAnEmptyCartErrorDescription .
	
	self deny: aMerchantProcessorDouble receivedAMessage.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 19:43:36' prior: 50878145!
test02CashierShouldNotDispatchExpiredCreditCard
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble |
	
	aMerchantProcessorDouble := MerchantProcessorDouble with: [:aTotal :aCard | ].
	aCashier := Cashier with: aMerchantProcessorDouble.
	
	aCart := Cart withCatalogue: OrderedCollection new.
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier declinedCreditCardErrorDescription.

	self deny: aMerchantProcessorDouble receivedAMessage.
! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/25/2020 19:44:30'!
PASSED!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/25/2020 19:44:30'!
PASSED!

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/25/2020 19:44:30'!
PASSED!

!testRun: #CartTest #test04ABookShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/25/2020 19:44:30'!
PASSED!

!testRun: #CartTest #test05ABookAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/25/2020 19:44:30'!
PASSED!

!testRun: #CartTest #test06ABookShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/25/2020 19:44:30'!
PASSED!

!testRun: #CartTest #test07ABookShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/25/2020 19:44:30'!
PASSED!

!testRun: #CartTest #test08ExternallyAddingBookToCartListShouldNotModifyCart stamp: 'NNH 11/25/2020 19:44:30'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 19:44:30'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 19:44:30'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/25/2020 19:44:30'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'NNH 11/25/2020 19:44:30'!
ERROR!

!testRun: #CashierTest #test05 stamp: 'NNH 11/25/2020 19:44:30'!
ERROR!

!testRun: #CashierTest #test06 stamp: 'NNH 11/25/2020 19:44:30'!
ERROR!

!testRun: #CashierTest #test07 stamp: 'NNH 11/25/2020 19:44:30'!
ERROR!

!testRun: #CatalogueTest #test01 stamp: 'NNH 11/25/2020 19:44:30'!
PASSED!

!testRun: #CatalogueTest #test02 stamp: 'NNH 11/25/2020 19:44:30'!
PASSED!

!testRun: #CatalogueTest #test03 stamp: 'NNH 11/25/2020 19:44:30'!
PASSED!

!testRun: #CatalogueTest #test04 stamp: 'NNH 11/25/2020 19:44:30'!
PASSED!

!testRun: #CreditCardTest #test01ValidCardPropertiesAreCorrect stamp: 'NNH 11/25/2020 19:44:30'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/25/2020 19:44:30'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/25/2020 19:44:30'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/25/2020 19:44:30'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/25/2020 19:44:30'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'NNH 11/25/2020 19:44:30'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/25/2020 19:44:30'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 19:45:27' prior: 50878166!
test03
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble |
	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = aCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid'] ].
	
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .

	aCart := Cart withCatalogue: harryPotterCatalogue .
	aCart addToCart: harryPotterBook withOccurrences: 1.	
	
	aCashier checkOut: aCart with: aCreditCard.

	self assert: (aMerchantProcessorDouble receivedMessage: #debit:from:) .
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 19:45:47' prior: 50879589!
test03
	
	| aCart aCashier aCreditCard aMerchantProcessorDouble |
	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = aCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid'] ].
	
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .

	aCart := Cart withCatalogue: harryPotterCatalogue .
	aCart addToCart: harryPotterBook withOccurrences: 1.	
	
	aCashier checkOut: aCart with: aCreditCard.

	self assert: (aMerchantProcessorDouble receivedMessage: #debit:from:) .
! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'NNH 11/25/2020 19:46:33'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'harryPotterBook lordOfTheRingsBook ageOfEmpiresBook harryPotterCatalogue threeBookCatalogue emptyMerchantProcessorDouble'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 19:46:32' prior: 50879384 overrides: 16927572!
setUp
	
	harryPotterBook := #HarryPotter.
	lordOfTheRingsBook := #LordOfTheRings.
	ageOfEmpiresBook := #AgeOfEmpires.
	
	harryPotterCatalogue := Catalogue new.
	harryPotterCatalogue add: harryPotterBook withPrice: 100.
	threeBookCatalogue := Catalogue new.
	threeBookCatalogue add: harryPotterBook withPrice: 100;
					add: lordOfTheRingsBook withPrice: 50;
					add: ageOfEmpiresBook withPrice: 25.
					
	emptyMerchantProcessorDouble := MerchantProcessorDouble with: [:aTotal :aCard | ].
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 19:46:54' prior: 50879465!
test01CashierShouldNotDispatchEmptyCart
	
	| aCart aCashier aCreditCard  |
	
	aCashier := Cashier with: emptyMerchantProcessorDouble .

	aCart := Cart withCatalogue: Catalogue new.	
	aCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	self should: [ aCashier checkOut: aCart with: aCreditCard ]
	raise: Error
	withMessageText: Cashier canNotCheckOutAnEmptyCartErrorDescription .
	
	self deny: emptyMerchantProcessorDouble receivedAMessage.
! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'NNH 11/25/2020 19:47:21'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'harryPotterBook lordOfTheRingsBook ageOfEmpiresBook harryPotterCatalogue threeBookCatalogue emptyMerchantProcessorDouble validCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 19:47:19' prior: 50879650 overrides: 16927572!
setUp
	
	harryPotterBook := #HarryPotter.
	lordOfTheRingsBook := #LordOfTheRings.
	ageOfEmpiresBook := #AgeOfEmpires.
	
	harryPotterCatalogue := Catalogue new.
	harryPotterCatalogue add: harryPotterBook withPrice: 100.
	threeBookCatalogue := Catalogue new.
	threeBookCatalogue add: harryPotterBook withPrice: 100;
					add: lordOfTheRingsBook withPrice: 50;
					add: ageOfEmpiresBook withPrice: 25.
					
	validCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	
	emptyMerchantProcessorDouble := MerchantProcessorDouble with: [:aTotal :aCard | ].
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 19:47:33' prior: 50879669!
test01CashierShouldNotDispatchEmptyCart
	
	| aCart aCashier |
	
	aCashier := Cashier with: emptyMerchantProcessorDouble .

	aCart := Cart withCatalogue: Catalogue new.	
	
	self should: [ aCashier checkOut: aCart with: validCreditCard ]
	raise: Error
	withMessageText: Cashier canNotCheckOutAnEmptyCartErrorDescription .
	
	self deny: emptyMerchantProcessorDouble receivedAMessage.
! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'NNH 11/25/2020 19:48:29'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'harryPotterBook lordOfTheRingsBook ageOfEmpiresBook harryPotterCatalogue threeBookCatalogue emptyMerchantProcessorDouble validCreditCard expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 19:48:26' prior: 50879700 overrides: 16927572!
setUp
	
	harryPotterBook := #HarryPotter.
	lordOfTheRingsBook := #LordOfTheRings.
	ageOfEmpiresBook := #AgeOfEmpires.
	
	harryPotterCatalogue := Catalogue new.
	harryPotterCatalogue add: harryPotterBook withPrice: 100.
	threeBookCatalogue := Catalogue new.
	threeBookCatalogue add: harryPotterBook withPrice: 100;
					add: lordOfTheRingsBook withPrice: 50;
					add: ageOfEmpiresBook withPrice: 25.
					
	validCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	expiredCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  

	emptyMerchantProcessorDouble := MerchantProcessorDouble with: [:aTotal :aCard | ].
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 19:48:53' prior: 50879487!
test02CashierShouldNotDispatchExpiredCreditCard
	
	| aCart aCashier |
	
	aCashier := Cashier with: emptyMerchantProcessorDouble .
	
	aCart := Cart withCatalogue: OrderedCollection new.
	
	self should: [ aCashier checkOut: aCart with: expiredCreditCard ]
	raise: Error
	withMessageText: Cashier declinedCreditCardErrorDescription.

	self deny: emptyMerchantProcessorDouble receivedAMessage.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 19:50:53' prior: 50879614!
test03
	
	| aCart aCashier aMerchantProcessorDouble |
	
	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = expiredCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid'] ].
	
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .

	aCart := Cart withCatalogue: harryPotterCatalogue .
	aCart addToCart: harryPotterBook withOccurrences: 1.	
	
	aCashier checkOut: aCart with: expiredCreditCard.

	self assert: (aMerchantProcessorDouble receivedMessage: #debit:from:) .
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 19:51:47' prior: 50878192!
test04
	
	| aCart aCashier aMerchantProcessorDouble ticket |
	
	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid'] ].
	
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	aCart := Cart withCatalogue: harryPotterCatalogue .
	aCart addToCart: harryPotterBook withOccurrences: 1.
	
	ticket := aCashier checkOut: aCart with: validCreditCard .

	self assert: ticket total equals: 100 .
	self assert: ( ticket products hasEqualElements: { harryPotterBook } ) .
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 19:53:14' prior: 50878220!
test05
	
	| aCart aCashier aMerchantProcessorDouble ticket |
	

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 175 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid'] ].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: threeBookCatalogue .
	
	aCart := Cart withCatalogue: threeBookCatalogue .
	aCart addToCart: harryPotterBook withOccurrences: 1.
	aCart addToCart: lordOfTheRingsBook withOccurrences: 1.
	aCart addToCart: ageOfEmpiresBook withOccurrences: 1.

	
	ticket := aCashier checkOut: aCart with: validCreditCard .

	self assert: ticket total equals: 175 .
	self assert: ( ticket products hasEqualElements: { harryPotterBook . lordOfTheRingsBook . ageOfEmpiresBook } ) .
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 19:53:21' prior: 50879837!
test05
	
	| aCart aCashier aMerchantProcessorDouble ticket |
	

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 175 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid'] ].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: threeBookCatalogue .
	
	aCart := Cart withCatalogue: threeBookCatalogue .
	aCart addToCart: harryPotterBook withOccurrences: 1.
	aCart addToCart: lordOfTheRingsBook withOccurrences: 1.
	aCart addToCart: ageOfEmpiresBook withOccurrences: 1.
	
	ticket := aCashier checkOut: aCart with: validCreditCard .

	self assert: ticket total equals: 175 .
	self assert: ( ticket products hasEqualElements: { harryPotterBook . lordOfTheRingsBook . ageOfEmpiresBook } ) .
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 19:54:14' prior: 50878258!
test06
	
	| aCart aCashier aMerchantProcessorDouble |
	

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card is stolen'.
		].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	aCart := Cart withCatalogue: harryPotterCatalogue.
	aCart addToCart: harryPotterBook withOccurrences: 1.

	self should: [ aCashier checkOut: aCart with: validCreditCard ]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText equals: 'Credit card is stolen'].

! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 19:54:30' prior: 50879893!
test06
	
	| aCart aCashier aMerchantProcessorDouble |
	

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card is stolen'.].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	aCart := Cart withCatalogue: harryPotterCatalogue.
	aCart addToCart: harryPotterBook withOccurrences: 1.

	self should: [ aCashier checkOut: aCart with: validCreditCard ]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText equals: 'Credit card is stolen'].

! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 19:56:34' prior: 50878288!
test07
	
	| aCart aCashier aMerchantProcessorDouble |
	

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card has no funds'.
		].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	aCart := Cart withCatalogue: harryPotterCatalogue .
	aCart addToCart: harryPotterBook withOccurrences: 1.

	self should: [ aCashier checkOut: aCart with: validCreditCard ]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText equals: 'Credit card has no funds' ].

! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/25/2020 19:56:40'!
PASSED!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/25/2020 19:56:40'!
PASSED!

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/25/2020 19:56:40'!
PASSED!

!testRun: #CartTest #test04ABookShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/25/2020 19:56:40'!
PASSED!

!testRun: #CartTest #test05ABookAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/25/2020 19:56:40'!
PASSED!

!testRun: #CartTest #test06ABookShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/25/2020 19:56:40'!
PASSED!

!testRun: #CartTest #test07ABookShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/25/2020 19:56:40'!
PASSED!

!testRun: #CartTest #test08ExternallyAddingBookToCartListShouldNotModifyCart stamp: 'NNH 11/25/2020 19:56:40'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 19:56:40'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 19:56:40'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/25/2020 19:56:40'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'NNH 11/25/2020 19:56:40'!
ERROR!

!testRun: #CashierTest #test05 stamp: 'NNH 11/25/2020 19:56:40'!
ERROR!

!testRun: #CashierTest #test06 stamp: 'NNH 11/25/2020 19:56:40'!
FAILURE!

!testRun: #CashierTest #test07 stamp: 'NNH 11/25/2020 19:56:40'!
FAILURE!

!testRun: #CatalogueTest #test01 stamp: 'NNH 11/25/2020 19:56:40'!
PASSED!

!testRun: #CatalogueTest #test02 stamp: 'NNH 11/25/2020 19:56:40'!
PASSED!

!testRun: #CatalogueTest #test03 stamp: 'NNH 11/25/2020 19:56:40'!
PASSED!

!testRun: #CatalogueTest #test04 stamp: 'NNH 11/25/2020 19:56:40'!
PASSED!

!testRun: #CreditCardTest #test01ValidCardPropertiesAreCorrect stamp: 'NNH 11/25/2020 19:56:40'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/25/2020 19:56:40'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/25/2020 19:56:40'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/25/2020 19:56:40'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/25/2020 19:56:40'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'NNH 11/25/2020 19:56:40'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/25/2020 19:56:40'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/25/2020 19:56:47'!
PASSED!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/25/2020 19:56:47'!
PASSED!

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/25/2020 19:56:47'!
PASSED!

!testRun: #CartTest #test04ABookShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/25/2020 19:56:47'!
PASSED!

!testRun: #CartTest #test05ABookAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/25/2020 19:56:47'!
PASSED!

!testRun: #CartTest #test06ABookShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/25/2020 19:56:47'!
PASSED!

!testRun: #CartTest #test07ABookShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/25/2020 19:56:47'!
PASSED!

!testRun: #CartTest #test08ExternallyAddingBookToCartListShouldNotModifyCart stamp: 'NNH 11/25/2020 19:56:47'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 19:56:47'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 19:56:48'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/25/2020 19:56:48'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'NNH 11/25/2020 19:56:48'!
ERROR!

!testRun: #CashierTest #test05 stamp: 'NNH 11/25/2020 19:56:48'!
ERROR!

!testRun: #CashierTest #test06 stamp: 'NNH 11/25/2020 19:56:48'!
FAILURE!

!testRun: #CashierTest #test07 stamp: 'NNH 11/25/2020 19:56:48'!
FAILURE!

!testRun: #CatalogueTest #test01 stamp: 'NNH 11/25/2020 19:56:48'!
PASSED!

!testRun: #CatalogueTest #test02 stamp: 'NNH 11/25/2020 19:56:48'!
PASSED!

!testRun: #CatalogueTest #test03 stamp: 'NNH 11/25/2020 19:56:48'!
PASSED!

!testRun: #CatalogueTest #test04 stamp: 'NNH 11/25/2020 19:56:48'!
PASSED!

!testRun: #CreditCardTest #test01ValidCardPropertiesAreCorrect stamp: 'NNH 11/25/2020 19:56:48'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/25/2020 19:56:48'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/25/2020 19:56:48'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/25/2020 19:56:48'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/25/2020 19:56:48'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'NNH 11/25/2020 19:56:48'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/25/2020 19:56:48'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/25/2020 19:57:12'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'NNH 11/25/2020 19:57:34'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'NNH 11/25/2020 19:57:34'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 19:57:58' prior: 50879792!
test03
	
	| aCart aCashier aMerchantProcessorDouble |
	
	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid'] ].
	
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .

	aCart := Cart withCatalogue: harryPotterCatalogue .
	aCart addToCart: harryPotterBook withOccurrences: 1.	
	
	aCashier checkOut: aCart with: validCreditCard.

	self assert: (aMerchantProcessorDouble receivedMessage: #debit:from:) .
! !

!testRun: #CashierTest #test03 stamp: 'NNH 11/25/2020 19:58:02'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'NNH 11/25/2020 19:58:02'!
ERROR!

aCart listCart!

catalogue!

catalogue!

catalogue at: aProduct!
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:01:29' prior: 50878580!
checkOut: aCart with: aCreditCard
	
	| total |
	
	(aCreditCard expirationDate < FixedGregorianDate today) ifTrue: [ self error: self class declinedCreditCardErrorDescription ] .
	
	aCart isEmpty ifTrue: [ self error: self class canNotCheckOutAnEmptyCartErrorDescription ] .
	
	total := aCart listCart sum: [ :aProduct | catalogue priceFor: aProduct ].
	
	merchantProcessor debit: total from: aCreditCard .

	^ Ticket total: total products: aCart listCart .! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/25/2020 20:01:32'!
PASSED!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/25/2020 20:01:32'!
PASSED!

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/25/2020 20:01:32'!
PASSED!

!testRun: #CartTest #test04ABookShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/25/2020 20:01:32'!
PASSED!

!testRun: #CartTest #test05ABookAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/25/2020 20:01:32'!
PASSED!

!testRun: #CartTest #test06ABookShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/25/2020 20:01:32'!
PASSED!

!testRun: #CartTest #test07ABookShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/25/2020 20:01:32'!
PASSED!

!testRun: #CartTest #test08ExternallyAddingBookToCartListShouldNotModifyCart stamp: 'NNH 11/25/2020 20:01:32'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 20:01:32'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 20:01:32'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/25/2020 20:01:32'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'NNH 11/25/2020 20:01:32'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'NNH 11/25/2020 20:01:32'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'NNH 11/25/2020 20:01:32'!
PASSED!

!testRun: #CashierTest #test07 stamp: 'NNH 11/25/2020 20:01:32'!
PASSED!

!testRun: #CatalogueTest #test01 stamp: 'NNH 11/25/2020 20:01:32'!
PASSED!

!testRun: #CatalogueTest #test02 stamp: 'NNH 11/25/2020 20:01:32'!
PASSED!

!testRun: #CatalogueTest #test03 stamp: 'NNH 11/25/2020 20:01:32'!
PASSED!

!testRun: #CatalogueTest #test04 stamp: 'NNH 11/25/2020 20:01:32'!
PASSED!

!testRun: #CreditCardTest #test01ValidCardPropertiesAreCorrect stamp: 'NNH 11/25/2020 20:01:32'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/25/2020 20:01:32'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/25/2020 20:01:32'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/25/2020 20:01:32'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/25/2020 20:01:32'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'NNH 11/25/2020 20:01:32'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/25/2020 20:01:32'!
PASSED!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'NNH 11/25/2020 20:11:30'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'harryPotterBook lordOfTheRingsBook ageOfEmpiresBook harryPotterCatalogue threeBookCatalogue emptyMerchantProcessorDouble validCreditCard expiredCreditCard emptyCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:11:28' prior: 50879750 overrides: 16927572!
setUp
	
	harryPotterBook := #HarryPotter.
	lordOfTheRingsBook := #LordOfTheRings.
	ageOfEmpiresBook := #AgeOfEmpires.
	
	harryPotterCatalogue := Catalogue new.
	harryPotterCatalogue add: harryPotterBook withPrice: 100.
	threeBookCatalogue := Catalogue new.
	threeBookCatalogue add: harryPotterBook withPrice: 100;
					add: lordOfTheRingsBook withPrice: 50;
					add: ageOfEmpiresBook withPrice: 25.
					
					
	emptyCart := Cart new.
					
	validCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	expiredCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  

	emptyMerchantProcessorDouble := MerchantProcessorDouble with: [:aTotal :aCard | ].
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:11:44' prior: 50880271 overrides: 16927572!
setUp
	
	harryPotterBook := #HarryPotter.
	lordOfTheRingsBook := #LordOfTheRings.
	ageOfEmpiresBook := #AgeOfEmpires.
	
	harryPotterCatalogue := Catalogue new.
	harryPotterCatalogue add: harryPotterBook withPrice: 100.
	threeBookCatalogue := Catalogue new.
	threeBookCatalogue add: harryPotterBook withPrice: 100;
					add: lordOfTheRingsBook withPrice: 50;
					add: ageOfEmpiresBook withPrice: 25.
					
					
	emptyCart := Cart withCatalogue: Catalogue new.	
					
	validCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	expiredCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  

	emptyMerchantProcessorDouble := MerchantProcessorDouble with: [:aTotal :aCard | ].
! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'NNH 11/25/2020 20:12:15'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'harryPotterBook lordOfTheRingsBook ageOfEmpiresBook harryPotterCatalogue threeBookCatalogue emptyMerchantProcessorDouble validCreditCard expiredCreditCard emptyCart harryPotterCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:12:14' prior: 50880299 overrides: 16927572!
setUp
	
	harryPotterBook := #HarryPotter.
	lordOfTheRingsBook := #LordOfTheRings.
	ageOfEmpiresBook := #AgeOfEmpires.
	
	harryPotterCatalogue := Catalogue new.
	harryPotterCatalogue add: harryPotterBook withPrice: 100.
	threeBookCatalogue := Catalogue new.
	threeBookCatalogue add: harryPotterBook withPrice: 100;
					add: lordOfTheRingsBook withPrice: 50;
					add: ageOfEmpiresBook withPrice: 25.
					
					
	emptyCart := Cart withCatalogue: Catalogue new.	
	harryPotterCart := Cart withCatalogue: harryPotterCatalogue .
	harryPotterCart addToCart: harryPotterBook withOccurrences: 1.	
					
	validCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	expiredCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  

	emptyMerchantProcessorDouble := MerchantProcessorDouble with: [:aTotal :aCard | ].
! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'NNH 11/25/2020 20:12:53'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'harryPotterBook lordOfTheRingsBook ageOfEmpiresBook harryPotterCatalogue threeBookCatalogue emptyMerchantProcessorDouble validCreditCard expiredCreditCard emptyCart harryPotterCart threeBookCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:12:51' prior: 50880340 overrides: 16927572!
setUp
	
	harryPotterBook := #HarryPotter.
	lordOfTheRingsBook := #LordOfTheRings.
	ageOfEmpiresBook := #AgeOfEmpires.
	
	harryPotterCatalogue := Catalogue new.
	harryPotterCatalogue add: harryPotterBook withPrice: 100.
	threeBookCatalogue := Catalogue new.
	threeBookCatalogue add: harryPotterBook withPrice: 100;
					add: lordOfTheRingsBook withPrice: 50;
					add: ageOfEmpiresBook withPrice: 25.
					
					
	emptyCart := Cart withCatalogue: Catalogue new.	
	harryPotterCart := Cart withCatalogue: harryPotterCatalogue .
	harryPotterCart addToCart: harryPotterBook withOccurrences: 1.	
	threeBookCart := Cart withCatalogue: threeBookCatalogue .
	threeBookCart addToCart: harryPotterBook withOccurrences: 1.
	threeBookCart addToCart: lordOfTheRingsBook withOccurrences: 1.
	threeBookCart addToCart: ageOfEmpiresBook withOccurrences: 1.
					
	validCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	expiredCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  

	emptyMerchantProcessorDouble := MerchantProcessorDouble with: [:aTotal :aCard | ].
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:13:03' prior: 50880385 overrides: 16927572!
setUp
	
	harryPotterBook := #HarryPotter.
	lordOfTheRingsBook := #LordOfTheRings.
	ageOfEmpiresBook := #AgeOfEmpires.
	
	harryPotterCatalogue := Catalogue new.
	harryPotterCatalogue add: harryPotterBook withPrice: 100.
	threeBookCatalogue := Catalogue new.
	threeBookCatalogue add: harryPotterBook withPrice: 100;
					add: lordOfTheRingsBook withPrice: 50;
					add: ageOfEmpiresBook withPrice: 25.
					
	emptyCart := Cart withCatalogue: Catalogue new.	
	harryPotterCart := Cart withCatalogue: harryPotterCatalogue .
	harryPotterCart addToCart: harryPotterBook withOccurrences: 1.	
	threeBookCart := Cart withCatalogue: threeBookCatalogue .
	threeBookCart addToCart: harryPotterBook withOccurrences: 1.
	threeBookCart addToCart: lordOfTheRingsBook withOccurrences: 1.
	threeBookCart addToCart: ageOfEmpiresBook withOccurrences: 1.
					
	validCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	expiredCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  

	emptyMerchantProcessorDouble := MerchantProcessorDouble with: [:aTotal :aCard | ].
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:13:14' prior: 50879722!
test01CashierShouldNotDispatchEmptyCart
	
	| aCashier |
	
	aCashier := Cashier with: emptyMerchantProcessorDouble .
	
	self should: [ aCashier checkOut: emptyCart with: validCreditCard ]
	raise: Error
	withMessageText: Cashier canNotCheckOutAnEmptyCartErrorDescription .
	
	self deny: emptyMerchantProcessorDouble receivedAMessage.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:13:24' prior: 50879776!
test02CashierShouldNotDispatchExpiredCreditCard
	
	| aCashier |
	
	aCashier := Cashier with: emptyMerchantProcessorDouble .
	
	self should: [ aCashier checkOut: emptyCart with: expiredCreditCard ]
	raise: Error
	withMessageText: Cashier declinedCreditCardErrorDescription.

	self deny: emptyMerchantProcessorDouble receivedAMessage.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:13:40' prior: 50880133!
test03
	
	| aCashier aMerchantProcessorDouble |
	
	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid'] ].
	
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	aCashier checkOut: harryPotterCart with: validCreditCard.

	self assert: (aMerchantProcessorDouble receivedMessage: #debit:from:) .
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:13:54' prior: 50879814!
test04
	
	| aCashier aMerchantProcessorDouble ticket |
	
	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid'] ].
	
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .
		
	ticket := aCashier checkOut: harryPotterCart with: validCreditCard .

	self assert: ticket total equals: 100 .
	self assert: ( ticket products hasEqualElements: { harryPotterBook } ) .
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:14:10' prior: 50879865!
test05
	
	| aCashier aMerchantProcessorDouble ticket |
	

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 175 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid'] ].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: threeBookCatalogue .
	
	ticket := aCashier checkOut: threeBookCart with: validCreditCard .

	self assert: ticket total equals: 175 .
	self assert: ( ticket products hasEqualElements: { harryPotterBook . lordOfTheRingsBook . ageOfEmpiresBook } ) .
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:14:27' prior: 50879918!
test06
	
	| aCashier aMerchantProcessorDouble |
	

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card is stolen'.].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .	

	self should: [ aCashier checkOut: harryPotterCart with: validCreditCard ]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText equals: 'Credit card is stolen'].

! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:14:52' prior: 50879943!
test07
	
	| aCashier aMerchantProcessorDouble |
	

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card has no funds'.
		].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	self should: [ aCashier checkOut: harryPotterCart with: validCreditCard ]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText equals: 'Credit card has no funds' ].

! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/25/2020 20:14:56'!
PASSED!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/25/2020 20:14:56'!
PASSED!

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/25/2020 20:14:56'!
PASSED!

!testRun: #CartTest #test04ABookShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/25/2020 20:14:56'!
PASSED!

!testRun: #CartTest #test05ABookAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/25/2020 20:14:56'!
PASSED!

!testRun: #CartTest #test06ABookShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/25/2020 20:14:56'!
PASSED!

!testRun: #CartTest #test07ABookShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/25/2020 20:14:56'!
PASSED!

!testRun: #CartTest #test08ExternallyAddingBookToCartListShouldNotModifyCart stamp: 'NNH 11/25/2020 20:14:56'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 20:14:56'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 20:14:56'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/25/2020 20:14:56'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'NNH 11/25/2020 20:14:56'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'NNH 11/25/2020 20:14:56'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'NNH 11/25/2020 20:14:56'!
PASSED!

!testRun: #CashierTest #test07 stamp: 'NNH 11/25/2020 20:14:56'!
PASSED!

!testRun: #CatalogueTest #test01 stamp: 'NNH 11/25/2020 20:14:56'!
PASSED!

!testRun: #CatalogueTest #test02 stamp: 'NNH 11/25/2020 20:14:56'!
PASSED!

!testRun: #CatalogueTest #test03 stamp: 'NNH 11/25/2020 20:14:56'!
PASSED!

!testRun: #CatalogueTest #test04 stamp: 'NNH 11/25/2020 20:14:56'!
PASSED!

!testRun: #CreditCardTest #test01ValidCardPropertiesAreCorrect stamp: 'NNH 11/25/2020 20:14:56'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/25/2020 20:14:56'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/25/2020 20:14:56'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/25/2020 20:14:56'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/25/2020 20:14:56'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'NNH 11/25/2020 20:14:56'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/25/2020 20:14:56'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:15:40' prior: 50880572!
test07
	
	| aCashier aMerchantProcessorDouble |

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card has no funds'.
		].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	self should: [ aCashier checkOut: harryPotterCart with: validCreditCard ]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText equals: 'Credit card has no funds' ].

! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:16:09' prior: 50880551!
test06
	
	| aCashier aMerchantProcessorDouble ticket |
	

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card is stolen'.].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .	

	self should: [ ticket := aCashier checkOut: harryPotterCart with: validCreditCard ]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText equals: 'Credit card is stolen'].
	
	

! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:16:34' prior: 50880695!
test06
	
	| aCashier aMerchantProcessorDouble ticket |
	

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card is stolen'.].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .	

	self should: [ ticket := aCashier checkOut: harryPotterCart with: validCreditCard ]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText equals: 'Credit card is stolen'].
	
	self assert: ticket isNil.
	

! !

!testRun: #CashierTest #test06 stamp: 'NNH 11/25/2020 20:16:37'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 20:16:37'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 20:16:37'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/25/2020 20:16:37'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'NNH 11/25/2020 20:16:37'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'NNH 11/25/2020 20:16:37'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'NNH 11/25/2020 20:16:37'!
PASSED!

!testRun: #CashierTest #test07 stamp: 'NNH 11/25/2020 20:16:37'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:16:57' prior: 50880673!
test07
	
	| aCashier aMerchantProcessorDouble ticket |

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card has no funds'.
		].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	self should: [ ticket := aCashier checkOut: harryPotterCart with: validCreditCard ]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText equals: 'Credit card has no funds' ].

! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:17:11' prior: 50880761!
test07
	
	| aCashier aMerchantProcessorDouble ticket |

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card has no funds'.
		].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	self should: [ ticket := aCashier checkOut: harryPotterCart with: validCreditCard ]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText equals: 'Credit card has no funds' ].

	self assert: ticket isNil .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:20:49' prior: 50880717!
test06
	
	| aCashier aMerchantProcessorDouble ticket |
	

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card is stolen'.].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .	

	self should: [ ticket := aCashier checkOut: harryPotterCart with: validCreditCard ]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText equals: 'Credit card is stolen'].
	
	self assert: ticket isNil.
	

! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:28:46' prior: 50880492!
test03
	
	| aCashier aMerchantProcessorDouble |
	
	
	aCashier := Cashier withProcessor: emptyMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	aCashier checkOut: harryPotterCart with: validCreditCard.

	self assert: (aMerchantProcessorDouble receivedMessage: #debit:from:) .
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:28:50' prior: 50880829!
test03
	
	| aCashier |
	
	
	aCashier := Cashier withProcessor: emptyMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	aCashier checkOut: harryPotterCart with: validCreditCard.

	self assert: (emptyMerchantProcessorDouble receivedMessage: #debit:from:) .
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:28:54' prior: 50880842!
test03
	
	| aCashier |
		
	aCashier := Cashier withProcessor: emptyMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	aCashier checkOut: harryPotterCart with: validCreditCard.

	self assert: (emptyMerchantProcessorDouble receivedMessage: #debit:from:) .
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:29:48' prior: 50880854!
test03
	
	| aCashier |
		
	aCashier := Cashier withProcessor: emptyMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	aCashier checkOut: harryPotterCart with: validCreditCard.

	self assert: (emptyMerchantProcessorDouble receivedMessage: #debit:from:) .
! !
!MerchantProcessorDouble methodsFor: 'testing' stamp: 'NNH 11/25/2020 20:30:39'!
messagesRecieved

	^ messages .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:31:08' prior: 50880866!
test03
	
	| aCashier |
		
	aCashier := Cashier withProcessor: emptyMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	aCashier checkOut: harryPotterCart with: validCreditCard.

	self assert: (emptyMerchantProcessorDouble messagesRecieved hasEqualElements: { #debit:from:. } ) .
! !

!testRun: #CashierTest #test03 stamp: 'NNH 11/25/2020 20:31:15'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'NNH 11/25/2020 20:31:15'!
ERROR!
!MerchantProcessorDouble methodsFor: 'initialization' stamp: 'NNH 11/25/2020 20:31:44' prior: 50878781 overrides: 16896425!
initialize
	
	messages := OrderedCollection new.! !
!MerchantProcessorDouble methodsFor: 'initialization' stamp: 'NNH 11/25/2020 20:31:48' prior: 50878785!
initializeWith: aBlockToDebitFrom
	
	messages := OrderedCollection new.
	block := aBlockToDebitFrom .! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/25/2020 20:31:55'!
PASSED!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/25/2020 20:31:55'!
PASSED!

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/25/2020 20:31:55'!
PASSED!

!testRun: #CartTest #test04ABookShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/25/2020 20:31:55'!
PASSED!

!testRun: #CartTest #test05ABookAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/25/2020 20:31:55'!
PASSED!

!testRun: #CartTest #test06ABookShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/25/2020 20:31:55'!
PASSED!

!testRun: #CartTest #test07ABookShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/25/2020 20:31:55'!
PASSED!

!testRun: #CartTest #test08ExternallyAddingBookToCartListShouldNotModifyCart stamp: 'NNH 11/25/2020 20:31:55'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 20:31:55'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 20:31:55'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/25/2020 20:31:55'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'NNH 11/25/2020 20:31:55'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'NNH 11/25/2020 20:31:55'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'NNH 11/25/2020 20:31:55'!
PASSED!

!testRun: #CashierTest #test07 stamp: 'NNH 11/25/2020 20:31:55'!
PASSED!

!testRun: #CatalogueTest #test01 stamp: 'NNH 11/25/2020 20:31:55'!
PASSED!

!testRun: #CatalogueTest #test02 stamp: 'NNH 11/25/2020 20:31:55'!
PASSED!

!testRun: #CatalogueTest #test03 stamp: 'NNH 11/25/2020 20:31:55'!
PASSED!

!testRun: #CatalogueTest #test04 stamp: 'NNH 11/25/2020 20:31:55'!
PASSED!

!testRun: #CreditCardTest #test01ValidCardPropertiesAreCorrect stamp: 'NNH 11/25/2020 20:31:55'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/25/2020 20:31:55'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/25/2020 20:31:55'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/25/2020 20:31:55'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/25/2020 20:31:55'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'NNH 11/25/2020 20:31:55'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/25/2020 20:31:55'!
PASSED!

!methodRemoval: MerchantProcessorDouble #initialize stamp: 'NNH 11/25/2020 20:32:05'!
initialize
	
	messages := OrderedCollection new.!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/25/2020 20:32:07'!
PASSED!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/25/2020 20:32:07'!
PASSED!

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/25/2020 20:32:07'!
PASSED!

!testRun: #CartTest #test04ABookShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/25/2020 20:32:07'!
PASSED!

!testRun: #CartTest #test05ABookAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/25/2020 20:32:07'!
PASSED!

!testRun: #CartTest #test06ABookShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/25/2020 20:32:07'!
PASSED!

!testRun: #CartTest #test07ABookShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/25/2020 20:32:07'!
PASSED!

!testRun: #CartTest #test08ExternallyAddingBookToCartListShouldNotModifyCart stamp: 'NNH 11/25/2020 20:32:07'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 20:32:07'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 20:32:07'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/25/2020 20:32:07'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'NNH 11/25/2020 20:32:07'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'NNH 11/25/2020 20:32:07'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'NNH 11/25/2020 20:32:07'!
PASSED!

!testRun: #CashierTest #test07 stamp: 'NNH 11/25/2020 20:32:07'!
PASSED!

!testRun: #CatalogueTest #test01 stamp: 'NNH 11/25/2020 20:32:07'!
PASSED!

!testRun: #CatalogueTest #test02 stamp: 'NNH 11/25/2020 20:32:07'!
PASSED!

!testRun: #CatalogueTest #test03 stamp: 'NNH 11/25/2020 20:32:07'!
PASSED!

!testRun: #CatalogueTest #test04 stamp: 'NNH 11/25/2020 20:32:07'!
PASSED!

!testRun: #CreditCardTest #test01ValidCardPropertiesAreCorrect stamp: 'NNH 11/25/2020 20:32:07'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/25/2020 20:32:07'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/25/2020 20:32:07'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/25/2020 20:32:07'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/25/2020 20:32:07'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'NNH 11/25/2020 20:32:07'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/25/2020 20:32:07'!
PASSED!

[:a : b :c | a = b] value: 100.!

[:a :b :c | a = b] value: 100.!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:49:12' prior: 50880806!
test06
	
	| aCashier aMerchantProcessorDouble ticket |
	

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card is stolen'.].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .	

	self should: [ ticket := aCashier checkOut: harryPotterCart with: validCreditCard ]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: 'Credit card is stolen'.
		self assert: anError receiver equals: aCashier
		 ].
	
	self assert: ticket isNil.
	

! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:49:47' prior: 50881077!
test06
	
	| aCashier aMerchantProcessorDouble ticket |
	

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card is stolen'.].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .	

	self should: [ ticket := aCashier checkOut: harryPotterCart with: validCreditCard ]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: 'Credit card is stolen' .
		self assert: anError receiver equals: aCashier
		 ].
	
	self assert: ticket isNil.
	

! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:49:49' prior: 50881102!
test06
	
	| aCashier aMerchantProcessorDouble ticket |
	

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card is stolen'.].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .	

	self should: [ ticket := aCashier checkOut: harryPotterCart with: validCreditCard ]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: 'Credit card is stolen' .
		self assert: anError receiver equals: aCashier .
		 ].
	
	self assert: ticket isNil.
	

! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:50:16' prior: 50881127!
test06
	
	| aCashier aMerchantProcessorDouble ticket |
	

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card is stolen'.].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .	

	self should: [ ticket := aCashier checkOut: harryPotterCart with: validCreditCard ]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: 'Credit card is stolen' .
		self assert: anError receiver equals: aCashier .
		self assert: ticket isNil .
		 ].
	
	

! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/25/2020 20:50:26'!
PASSED!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/25/2020 20:50:26'!
PASSED!

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/25/2020 20:50:26'!
PASSED!

!testRun: #CartTest #test04ABookShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/25/2020 20:50:26'!
PASSED!

!testRun: #CartTest #test05ABookAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/25/2020 20:50:26'!
PASSED!

!testRun: #CartTest #test06ABookShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/25/2020 20:50:26'!
PASSED!

!testRun: #CartTest #test07ABookShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/25/2020 20:50:26'!
PASSED!

!testRun: #CartTest #test08ExternallyAddingBookToCartListShouldNotModifyCart stamp: 'NNH 11/25/2020 20:50:26'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 20:50:26'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 20:50:26'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/25/2020 20:50:26'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'NNH 11/25/2020 20:50:26'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'NNH 11/25/2020 20:50:26'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'NNH 11/25/2020 20:50:26'!
FAILURE!

!testRun: #CashierTest #test07 stamp: 'NNH 11/25/2020 20:50:26'!
PASSED!

!testRun: #CatalogueTest #test01 stamp: 'NNH 11/25/2020 20:50:26'!
PASSED!

!testRun: #CatalogueTest #test02 stamp: 'NNH 11/25/2020 20:50:26'!
PASSED!

!testRun: #CatalogueTest #test03 stamp: 'NNH 11/25/2020 20:50:26'!
PASSED!

!testRun: #CatalogueTest #test04 stamp: 'NNH 11/25/2020 20:50:26'!
PASSED!

!testRun: #CreditCardTest #test01ValidCardPropertiesAreCorrect stamp: 'NNH 11/25/2020 20:50:26'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/25/2020 20:50:26'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/25/2020 20:50:26'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/25/2020 20:50:26'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/25/2020 20:50:26'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'NNH 11/25/2020 20:50:26'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/25/2020 20:50:26'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'NNH 11/25/2020 20:50:26'!
FAILURE!

!testRun: #CashierTest #test06 stamp: 'NNH 11/25/2020 20:50:38'!
FAILURE!

!testRun: #CashierTest #test06 stamp: 'NNH 11/25/2020 20:50:38'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:51:53' prior: 50880161!
checkOut: aCart with: aCreditCard
	
	| total |
	
	(aCreditCard expirationDate < FixedGregorianDate today) ifTrue: [ self error: self class declinedCreditCardErrorDescription ] .
	
	aCart isEmpty ifTrue: [ self error: self class canNotCheckOutAnEmptyCartErrorDescription ] .
	
	total := aCart listCart sum: [ :aProduct | catalogue priceFor: aProduct ].
	
	[ merchantProcessor debit: total from: aCreditCard ] on: Error do: [:anError |
		self error: 'Credit Card Is Stolen' .
		] .

	^ Ticket total: total products: aCart listCart .! !

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 20:52:01'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 20:52:01'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/25/2020 20:52:01'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'NNH 11/25/2020 20:52:01'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'NNH 11/25/2020 20:52:01'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'NNH 11/25/2020 20:52:01'!
FAILURE!

!testRun: #CashierTest #test07 stamp: 'NNH 11/25/2020 20:52:01'!
FAILURE!

!testRun: #CashierTest #test06 stamp: 'NNH 11/25/2020 20:52:07'!
FAILURE!

!testRun: #CashierTest #test06 stamp: 'NNH 11/25/2020 20:52:07'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:52:21' prior: 50881263!
checkOut: aCart with: aCreditCard
	
	| total |
	
	(aCreditCard expirationDate < FixedGregorianDate today) ifTrue: [ self error: self class declinedCreditCardErrorDescription ] .
	
	aCart isEmpty ifTrue: [ self error: self class canNotCheckOutAnEmptyCartErrorDescription ] .
	
	total := aCart listCart sum: [ :aProduct | catalogue priceFor: aProduct ].
	
	[ merchantProcessor debit: total from: aCreditCard ] on: Error do: [:anError |
		self error: 'Credit card is stolen' .
		] .

	^ Ticket total: total products: aCart listCart .! !

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 20:52:24'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 20:52:24'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/25/2020 20:52:24'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'NNH 11/25/2020 20:52:24'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'NNH 11/25/2020 20:52:24'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'NNH 11/25/2020 20:52:24'!
PASSED!

!testRun: #CashierTest #test07 stamp: 'NNH 11/25/2020 20:52:24'!
FAILURE!

!testRun: #CashierTest #test07 stamp: 'NNH 11/25/2020 20:52:24'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:53:18' prior: 50880783!
test07
	
	| aCashier aMerchantProcessorDouble ticket |

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card has no funds'.
		].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	
	
	self should: [ ticket := aCashier checkOut: harryPotterCart with: validCreditCard ]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: 'Credit card has no funds' .
		self assert: anError receiver equals: aCashier .
		self assert: ticket isNil .
		 ].
	
	self should: [ ticket := aCashier checkOut: harryPotterCart with: validCreditCard ]
	raise: Error
	withExceptionDo: [ :anError | self assert: anError messageText equals: 'Credit card has no funds' ].

	self assert: ticket isNil .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:53:27' prior: 50881347!
test07
	
	| aCashier aMerchantProcessorDouble ticket |

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card has no funds'.
		].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	
	
	self should: [ ticket := aCashier checkOut: harryPotterCart with: validCreditCard ]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: 'Credit card has no funds' .
		self assert: anError receiver equals: aCashier .
		self assert: ticket isNil .
		 ].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:53:29' prior: 50881379!
test07
	
	| aCashier aMerchantProcessorDouble ticket |

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card has no funds'.
		].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	
	
	self should: [ ticket := aCashier checkOut: harryPotterCart with: validCreditCard ]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: 'Credit card has no funds' .
		self assert: anError receiver equals: aCashier .
		self assert: ticket isNil .
		 ] .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:53:33' prior: 50881404!
test07
	
	| aCashier aMerchantProcessorDouble ticket |

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card has no funds'.
		].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	self should: [ ticket := aCashier checkOut: harryPotterCart with: validCreditCard ]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: 'Credit card has no funds' .
		self assert: anError receiver equals: aCashier .
		self assert: ticket isNil .
		 ] .! !

!testRun: #CashierTest #test07 stamp: 'NNH 11/25/2020 20:53:36'!
FAILURE!

!testRun: #CashierTest #test07 stamp: 'NNH 11/25/2020 20:53:36'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:54:30' prior: 50881306!
checkOut: aCart with: aCreditCard
	
	| total |
	
	(aCreditCard expirationDate < FixedGregorianDate today) ifTrue: [ self error: self class declinedCreditCardErrorDescription ] .
	
	aCart isEmpty ifTrue: [ self error: self class canNotCheckOutAnEmptyCartErrorDescription ] .
	
	total := aCart listCart sum: [ :aProduct | catalogue priceFor: aProduct ].
	
	[ merchantProcessor debit: total from: aCreditCard ] on: Error do: [:anError |
		self error: anError messageText .
		] .

	^ Ticket total: total products: aCart listCart .! !

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 20:54:39'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 20:54:39'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/25/2020 20:54:39'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'NNH 11/25/2020 20:54:39'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'NNH 11/25/2020 20:54:39'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'NNH 11/25/2020 20:54:39'!
PASSED!

!testRun: #CashierTest #test07 stamp: 'NNH 11/25/2020 20:54:39'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:57:28'!
test08
	
	| aCashier |


	aCashier := Cashier withProcessor: emptyMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	self should: [ aCashier checkOut: threeBookCart with: validCreditCard ]
	raise: Error
	withMessageText: Cashier bookNotAvailableErrorDescription .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 20:59:12' prior: 50881496!
test08
	
	| aCashier |


	aCashier := Cashier withProcessor: emptyMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	self should: [ aCashier checkOut: threeBookCart with: validCreditCard ]
	raise: Error
	withMessageText: Cashier productInCartIsNotForSaleErrorDescription .! !

!testRun: #CashierTest #test08 stamp: 'NNH 11/25/2020 20:59:21'!
ERROR!

!testRun: #CashierTest #test08 stamp: 'NNH 11/25/2020 20:59:21'!
ERROR!
!Cashier class methodsFor: 'error descriptions' stamp: 'NNH 11/25/2020 20:59:30'!
productInCartIsNotForSaleErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error descriptions' stamp: 'NNH 11/25/2020 20:59:54' prior: 50881525!
productInCartIsNotForSaleErrorDescription
	
	^ 'Product in cart is not for sale' .! !

!testRun: #CashierTest #test08 stamp: 'NNH 11/25/2020 21:00:00'!
FAILURE!

!testRun: #CashierTest #test08 stamp: 'NNH 11/25/2020 21:00:00'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:01:56' prior: 50881458!
checkOut: aCart with: aCreditCard
	
	| total |
	
	(aCreditCard expirationDate < FixedGregorianDate today) ifTrue: [ self error: self class declinedCreditCardErrorDescription ] .
	
	aCart isEmpty ifTrue: [ self error: self class canNotCheckOutAnEmptyCartErrorDescription ] .
	
	( aCart listCart allSatisfy: [ :aProduct | catalogue includes: aProduct ] ) ifFalse: [ self error: self class productInCartIsNotForSaleErrorDescription ] .
	
	total := aCart listCart sum: [ :aProduct | catalogue priceFor: aProduct ].
	
	[ merchantProcessor debit: total from: aCreditCard ] on: Error do: [:anError |
		self error: anError messageText .
		] .

	^ Ticket total: total products: aCart listCart .! !

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 21:02:02'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 21:02:02'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/25/2020 21:02:02'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'NNH 11/25/2020 21:02:02'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'NNH 11/25/2020 21:02:02'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'NNH 11/25/2020 21:02:02'!
PASSED!

!testRun: #CashierTest #test07 stamp: 'NNH 11/25/2020 21:02:02'!
PASSED!

!testRun: #CashierTest #test08 stamp: 'NNH 11/25/2020 21:02:02'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:02:37' prior: 50881542!
checkOut: aCart with: aCreditCard
	
	| total |
	
	(aCreditCard expirationDate < FixedGregorianDate today) ifTrue: [ self error: self class declinedCreditCardErrorDescription ] .
	
	aCart isEmpty ifTrue: [ self error: self class canNotCheckOutAnEmptyCartErrorDescription ] .
	
	( aCart listCart allSatisfy: [ :aProduct | catalogue includes: aProduct ] ) ifFalse: [ self error: self class productInCartIsNotForSaleErrorDescription ] .
	
	total := aCart listCart sum: [ :aProduct | catalogue priceFor: aProduct ].
	
	[ merchantProcessor debit: total from: aCreditCard ] on: Error do: [:anError |
		anError pass 
		] .

	^ Ticket total: total products: aCart listCart .! !

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 21:02:40'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 21:02:40'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/25/2020 21:02:40'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'NNH 11/25/2020 21:02:40'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'NNH 11/25/2020 21:02:40'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'NNH 11/25/2020 21:02:40'!
FAILURE!

!testRun: #CashierTest #test07 stamp: 'NNH 11/25/2020 21:02:40'!
FAILURE!

!testRun: #CashierTest #test08 stamp: 'NNH 11/25/2020 21:02:40'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:01:56' prior: 50881588!
checkOut: aCart with: aCreditCard
	
	| total |
	
	(aCreditCard expirationDate < FixedGregorianDate today) ifTrue: [ self error: self class declinedCreditCardErrorDescription ] .
	
	aCart isEmpty ifTrue: [ self error: self class canNotCheckOutAnEmptyCartErrorDescription ] .
	
	( aCart listCart allSatisfy: [ :aProduct | catalogue includes: aProduct ] ) ifFalse: [ self error: self class productInCartIsNotForSaleErrorDescription ] .
	
	total := aCart listCart sum: [ :aProduct | catalogue priceFor: aProduct ].
	
	[ merchantProcessor debit: total from: aCreditCard ] on: Error do: [:anError |
		self error: anError messageText .
		] .

	^ Ticket total: total products: aCart listCart .! !

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 21:03:03'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 21:03:03'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'NNH 11/25/2020 21:03:03'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'NNH 11/25/2020 21:03:03'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'NNH 11/25/2020 21:03:03'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'NNH 11/25/2020 21:03:03'!
PASSED!

!testRun: #CashierTest #test07 stamp: 'NNH 11/25/2020 21:03:03'!
PASSED!

!testRun: #CashierTest #test08 stamp: 'NNH 11/25/2020 21:03:03'!
PASSED!
!CatalogueTest methodsFor: 'tests' stamp: 'NNH 11/25/2020 21:04:14'!
test01EmptyCatalogContainsNoBook
	
	| aCatalogue |
	
	aCatalogue := Catalogue new.
	
	self deny: ( aCatalogue includes: harryPotter ).! !

!methodRemoval: CatalogueTest #test01 stamp: 'NNH 11/25/2020 21:04:14'!
test01
	
	| aCatalogue |
	
	aCatalogue := Catalogue new.
	
	self deny: ( aCatalogue includes: harryPotter ).!
!CatalogueTest methodsFor: 'tests' stamp: 'NNH 11/25/2020 21:04:20'!
test01EmptyCatalogueContainsNoBook
	
	| aCatalogue |
	
	aCatalogue := Catalogue new.
	
	self deny: ( aCatalogue includes: harryPotter ).! !

!methodRemoval: CatalogueTest #test01EmptyCatalogContainsNoBook stamp: 'NNH 11/25/2020 21:04:20'!
test01EmptyCatalogContainsNoBook
	
	| aCatalogue |
	
	aCatalogue := Catalogue new.
	
	self deny: ( aCatalogue includes: harryPotter ).!
!CatalogueTest methodsFor: 'tests' stamp: 'NNH 11/25/2020 21:05:13'!
test02OneProductCatalogueContainsItsOnlyElement
	
	| aCatalogue |
	
	aCatalogue := Catalogue new.
	
	aCatalogue add: harryPotter withPrice: 100.
	
	self assert: ( aCatalogue includes: harryPotter ).
	self assert: ( aCatalogue priceFor: harryPotter ) equals: 100.! !

!methodRemoval: CatalogueTest #test02 stamp: 'NNH 11/25/2020 21:05:13'!
test02
	
	| aCatalogue |
	
	aCatalogue := Catalogue new.
	
	aCatalogue add: harryPotter withPrice: 100.
	
	self assert: ( aCatalogue includes: harryPotter ).
	self assert: ( aCatalogue priceFor: harryPotter ) equals: 100.!
!CatalogueTest methodsFor: 'tests' stamp: 'NNH 11/25/2020 21:05:57'!
test03ACatalogueWithManyBooksIncludesAllOfThem
	
	| aCatalogue |
	
	aCatalogue := Catalogue new.
	
	aCatalogue add: harryPotter withPrice: 100.
	aCatalogue add: lordOfTheRings withPrice: 50.
	aCatalogue add: ageOfEmpires withPrice: 25.
	
	self assert: ( aCatalogue includes: harryPotter ).
	self assert: ( aCatalogue includes: lordOfTheRings ).
	self assert: ( aCatalogue includes: ageOfEmpires ).

	self assert: ( aCatalogue priceFor: harryPotter ) equals: 100.
	self assert: ( aCatalogue priceFor: lordOfTheRings ) equals: 50.
	self assert: ( aCatalogue priceFor: ageOfEmpires ) equals: 25.! !

!methodRemoval: CatalogueTest #test03 stamp: 'NNH 11/25/2020 21:05:57'!
test03
	
	| aCatalogue |
	
	aCatalogue := Catalogue new.
	
	aCatalogue add: harryPotter withPrice: 100.
	aCatalogue add: lordOfTheRings withPrice: 50.
	aCatalogue add: ageOfEmpires withPrice: 25.
	
	self assert: ( aCatalogue includes: harryPotter ).
	self assert: ( aCatalogue includes: lordOfTheRings ).
	self assert: ( aCatalogue includes: ageOfEmpires ).

	self assert: ( aCatalogue priceFor: harryPotter ) equals: 100.
	self assert: ( aCatalogue priceFor: lordOfTheRings ) equals: 50.
	self assert: ( aCatalogue priceFor: ageOfEmpires ) equals: 25.!
!CatalogueTest methodsFor: 'tests' stamp: 'NNH 11/25/2020 21:06:18'!
test04ACatalogueShouldNotAddAProductWithEmptyPrice
	
	| aCatalogue |
	
	aCatalogue := Catalogue new.
	
	self should: [ aCatalogue add: harryPotter withPrice: 0 ]
	raise: Error
	withMessageText: Catalogue canNotAddProductWithNonPositivePrice.
	
	self deny: ( aCatalogue includes: harryPotter ) .
! !

!methodRemoval: CatalogueTest #test04 stamp: 'NNH 11/25/2020 21:06:18'!
test04
	
	| aCatalogue |
	
	aCatalogue := Catalogue new.
	
	self should: [ aCatalogue add: harryPotter withPrice: 0 ]
	raise: Error
	withMessageText: Catalogue canNotAddProductWithNonPositivePrice.
	
	self deny: ( aCatalogue includes: harryPotter ) .
!
!CatalogueTest methodsFor: 'tests' stamp: 'NNH 11/25/2020 21:06:31'!
test04ACatalogueShouldNotAddAProductWithNonPositivePrice
	
	| aCatalogue |
	
	aCatalogue := Catalogue new.
	
	self should: [ aCatalogue add: harryPotter withPrice: 0 ]
	raise: Error
	withMessageText: Catalogue canNotAddProductWithNonPositivePrice.
	
	self deny: ( aCatalogue includes: harryPotter ) .
! !

!methodRemoval: CatalogueTest #test04ACatalogueShouldNotAddAProductWithEmptyPrice stamp: 'NNH 11/25/2020 21:06:31'!
test04ACatalogueShouldNotAddAProductWithEmptyPrice
	
	| aCatalogue |
	
	aCatalogue := Catalogue new.
	
	self should: [ aCatalogue add: harryPotter withPrice: 0 ]
	raise: Error
	withMessageText: Catalogue canNotAddProductWithNonPositivePrice.
	
	self deny: ( aCatalogue includes: harryPotter ) .
!
!CatalogueTest methodsFor: 'tests' stamp: 'NNH 11/25/2020 21:06:42'!
test04ShouldNotAddAProductWithNonPositivePrice
	
	| aCatalogue |
	
	aCatalogue := Catalogue new.
	
	self should: [ aCatalogue add: harryPotter withPrice: 0 ]
	raise: Error
	withMessageText: Catalogue canNotAddProductWithNonPositivePrice.
	
	self deny: ( aCatalogue includes: harryPotter ) .
! !

!methodRemoval: CatalogueTest #test04ACatalogueShouldNotAddAProductWithNonPositivePrice stamp: 'NNH 11/25/2020 21:06:42'!
test04ACatalogueShouldNotAddAProductWithNonPositivePrice
	
	| aCatalogue |
	
	aCatalogue := Catalogue new.
	
	self should: [ aCatalogue add: harryPotter withPrice: 0 ]
	raise: Error
	withMessageText: Catalogue canNotAddProductWithNonPositivePrice.
	
	self deny: ( aCatalogue includes: harryPotter ) .
!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:10:38'!
test03ACashierUsesMerchantProcessor
	
	| aCashier |
		
	aCashier := Cashier withProcessor: emptyMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	aCashier checkOut: harryPotterCart with: validCreditCard.

	self assert: (emptyMerchantProcessorDouble messagesRecieved hasEqualElements: { #debit:from:. } ) .
! !

!methodRemoval: CashierTest #test03 stamp: 'NNH 11/25/2020 21:10:38'!
test03
	
	| aCashier |
		
	aCashier := Cashier withProcessor: emptyMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	aCashier checkOut: harryPotterCart with: validCreditCard.

	self assert: (emptyMerchantProcessorDouble messagesRecieved hasEqualElements: { #debit:from:. } ) .
!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:12:41'!
test03CashierShouldUseMerchantProcessor
	
	| aCashier |
		
	aCashier := Cashier withProcessor: emptyMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	aCashier checkOut: harryPotterCart with: validCreditCard.

	self assert: (emptyMerchantProcessorDouble messagesRecieved hasEqualElements: { #debit:from:. } ) .
! !

!methodRemoval: CashierTest #test03ACashierUsesMerchantProcessor stamp: 'NNH 11/25/2020 21:12:41'!
test03ACashierUsesMerchantProcessor
	
	| aCashier |
		
	aCashier := Cashier withProcessor: emptyMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	aCashier checkOut: harryPotterCart with: validCreditCard.

	self assert: (emptyMerchantProcessorDouble messagesRecieved hasEqualElements: { #debit:from:. } ) .
!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:16:54'!
test03CashierShouldUseMerchantProcessorOnValidConditions
	
	| aCashier |
		
	aCashier := Cashier withProcessor: emptyMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	aCashier checkOut: harryPotterCart with: validCreditCard.

	self assert: (emptyMerchantProcessorDouble messagesRecieved hasEqualElements: { #debit:from:. } ) .
! !

!methodRemoval: CashierTest #test03CashierShouldUseMerchantProcessor stamp: 'NNH 11/25/2020 21:16:54'!
test03CashierShouldUseMerchantProcessor
	
	| aCashier |
		
	aCashier := Cashier withProcessor: emptyMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	aCashier checkOut: harryPotterCart with: validCreditCard.

	self assert: (emptyMerchantProcessorDouble messagesRecieved hasEqualElements: { #debit:from:. } ) .
!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:19:11'!
test04CashierShouldGiveValidInvoiceOnSuccessfulTransaction
	
	| aCashier aMerchantProcessorDouble ticket |
	
	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid'] ].
	
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .
		
	ticket := aCashier checkOut: harryPotterCart with: validCreditCard .

	self assert: ticket total equals: 100 .
	self assert: ( ticket products hasEqualElements: { harryPotterBook } ) .
! !

!methodRemoval: CashierTest #test04 stamp: 'NNH 11/25/2020 21:19:11'!
test04
	
	| aCashier aMerchantProcessorDouble ticket |
	
	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid'] ].
	
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .
		
	ticket := aCashier checkOut: harryPotterCart with: validCreditCard .

	self assert: ticket total equals: 100 .
	self assert: ( ticket products hasEqualElements: { harryPotterBook } ) .
!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:21:16'!
test04CashierSuccessfullyProcessesOneElementCart
	
	| aCashier aMerchantProcessorDouble ticket |
	
	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid'] ].
	
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .
		
	ticket := aCashier checkOut: harryPotterCart with: validCreditCard .

	self assert: ticket total equals: 100 .
	self assert: ( ticket products hasEqualElements: { harryPotterBook } ) .
! !

!methodRemoval: CashierTest #test04CashierShouldGiveValidInvoiceOnSuccessfulTransaction stamp: 'NNH 11/25/2020 21:21:16'!
test04CashierShouldGiveValidInvoiceOnSuccessfulTransaction
	
	| aCashier aMerchantProcessorDouble ticket |
	
	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid'] ].
	
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .
		
	ticket := aCashier checkOut: harryPotterCart with: validCreditCard .

	self assert: ticket total equals: 100 .
	self assert: ( ticket products hasEqualElements: { harryPotterBook } ) .
!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:21:37'!
test05CashierSuccessfullyProcessesManyElementsCart
	
	| aCashier aMerchantProcessorDouble ticket |
	

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 175 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid'] ].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: threeBookCatalogue .
	
	ticket := aCashier checkOut: threeBookCart with: validCreditCard .

	self assert: ticket total equals: 175 .
	self assert: ( ticket products hasEqualElements: { harryPotterBook . lordOfTheRingsBook . ageOfEmpiresBook } ) .
! !

!methodRemoval: CashierTest #test05 stamp: 'NNH 11/25/2020 21:21:37'!
test05
	
	| aCashier aMerchantProcessorDouble ticket |
	

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 175 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid'] ].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: threeBookCatalogue .
	
	ticket := aCashier checkOut: threeBookCart with: validCreditCard .

	self assert: ticket total equals: 175 .
	self assert: ( ticket products hasEqualElements: { harryPotterBook . lordOfTheRingsBook . ageOfEmpiresBook } ) .
!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:22:14'!
test06CashierHandlesMerchantProcessorException
	
	| aCashier aMerchantProcessorDouble ticket |
	

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card is stolen'.].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .	

	self should: [ ticket := aCashier checkOut: harryPotterCart with: validCreditCard ]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: 'Credit card is stolen' .
		self assert: anError receiver equals: aCashier .
		self assert: ticket isNil .
		 ].
	
	

! !

!methodRemoval: CashierTest #test06 stamp: 'NNH 11/25/2020 21:22:14'!
test06
	
	| aCashier aMerchantProcessorDouble ticket |
	

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card is stolen'.].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .	

	self should: [ ticket := aCashier checkOut: harryPotterCart with: validCreditCard ]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: 'Credit card is stolen' .
		self assert: anError receiver equals: aCashier .
		self assert: ticket isNil .
		 ].
	
	

!

!methodRemoval: CashierTest #test07 stamp: 'NNH 11/25/2020 21:22:52'!
test07
	
	| aCashier aMerchantProcessorDouble ticket |

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		( aTotal = 100 and: [ aCard = validCreditCard ] ) ifFalse: [self error: 'Collaborators are not valid']. 
		self error: 'Credit card has no funds'.
		].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	self should: [ ticket := aCashier checkOut: harryPotterCart with: validCreditCard ]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: 'Credit card has no funds' .
		self assert: anError receiver equals: aCashier .
		self assert: ticket isNil .
		 ] .!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:23:34'!
test08CashierShouldNotProcessProductWhenItIsNotForSale
	
	| aCashier |


	aCashier := Cashier withProcessor: emptyMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	self should: [ aCashier checkOut: threeBookCart with: validCreditCard ]
	raise: Error
	withMessageText: Cashier productInCartIsNotForSaleErrorDescription .! !

!methodRemoval: CashierTest #test08 stamp: 'NNH 11/25/2020 21:23:34'!
test08
	
	| aCashier |


	aCashier := Cashier withProcessor: emptyMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	self should: [ aCashier checkOut: threeBookCart with: validCreditCard ]
	raise: Error
	withMessageText: Cashier productInCartIsNotForSaleErrorDescription .!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:23:47'!
test08CashierShouldNotProcessProductWhenItIsNotInCatalogue
	
	| aCashier |


	aCashier := Cashier withProcessor: emptyMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	self should: [ aCashier checkOut: threeBookCart with: validCreditCard ]
	raise: Error
	withMessageText: Cashier productInCartIsNotForSaleErrorDescription .! !

!methodRemoval: CashierTest #test08CashierShouldNotProcessProductWhenItIsNotForSale stamp: 'NNH 11/25/2020 21:23:47'!
test08CashierShouldNotProcessProductWhenItIsNotForSale
	
	| aCashier |


	aCashier := Cashier withProcessor: emptyMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	self should: [ aCashier checkOut: threeBookCart with: validCreditCard ]
	raise: Error
	withMessageText: Cashier productInCartIsNotForSaleErrorDescription .!
!CreditCardTest methodsFor: 'tests' stamp: 'NNH 11/25/2020 21:27:06'!
test01ValidCardRetrievesPropertiesCorrectly
	
	self assert: validCreditCard number equals: validCardNumber .
	self assert: validCreditCard expirationDate equals: futureMonthInACalendar .
	self assert: validCreditCard owner equals: hernan.

	! !

!methodRemoval: CreditCardTest #test01ValidCardPropertiesAreCorrect stamp: 'NNH 11/25/2020 21:27:06'!
test01ValidCardPropertiesAreCorrect
	
	self assert: validCreditCard number equals: validCardNumber .
	self assert: validCreditCard expirationDate equals: futureMonthInACalendar .
	self assert: validCreditCard owner equals: hernan.

	!

!classRenamed: #Ticket as: #Invoice stamp: 'NNH 11/25/2020 21:28:00'!
Smalltalk renameClassNamed: #Ticket as: #Invoice!
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:28:01' prior: 50881633!
checkOut: aCart with: aCreditCard
	
	| total |
	
	(aCreditCard expirationDate < FixedGregorianDate today) ifTrue: [ self error: self class declinedCreditCardErrorDescription ] .
	
	aCart isEmpty ifTrue: [ self error: self class canNotCheckOutAnEmptyCartErrorDescription ] .
	
	( aCart listCart allSatisfy: [ :aProduct | catalogue includes: aProduct ] ) ifFalse: [ self error: self class productInCartIsNotForSaleErrorDescription ] .
	
	total := aCart listCart sum: [ :aProduct | catalogue priceFor: aProduct ].
	
	[ merchantProcessor debit: total from: aCreditCard ] on: Error do: [:anError |
		self error: anError messageText .
		] .

	^ Invoice total: total products: aCart listCart .! !
!Cart methodsFor: 'adding books' stamp: 'NNH 11/25/2020 21:28:32' prior: 50878501!
addToCart: aBook withOccurrences: aNumberOfOccurences

	self assertThatCanBeAdded: aBook withOccurences: aNumberOfOccurences.
		
	books add: aBook withOccurrences: aNumberOfOccurences 
	
	! !
!CartTest methodsFor: 'tests - adding' stamp: 'NNH 11/25/2020 21:29:21' prior: 50878026!
test02ABookAddedToCartIsSuccessfullyAdded

	| aCart |
	
	aCart := Cart withCatalogue: harryPotterCatalogue.
	
	aCart addToCart: harryPotter.
	
	self deny: aCart isEmpty.
	self assert: ( aCart listCart hasEqualElements: {harryPotter} )! !
!CartTest methodsFor: 'tests - adding' stamp: 'NNH 11/25/2020 21:29:36' prior: 50878037!
test03ManyBooksAddedToCartAreSuccessfullyAdded

	| aCart |
	
	aCart := Cart withCatalogue: threeBookCatalogue .
	
	aCart addToCart: harryPotter .
	aCart addToCart: lordOfTheRings .
	aCart addToCart: ageOfEmpires .
	
	self deny: aCart isEmpty.
	self assert: ( aCart listCart hasEqualElements: {harryPotter. lordOfTheRings. ageOfEmpires} )! !
!CartTest methodsFor: 'tests - errors' stamp: 'NNH 11/25/2020 21:29:58' prior: 50878075!
test04ABookShouldNotBeAddedWhenNotForSale

	| aCart |
	
	aCart := Cart withCatalogue: harryPotterCatalogue.
	
	self should: [ aCart addToCart: lordOfTheRings ]
		raise: Error
		withMessageText: Cart bookIsNotForSaleErrorDescription.
		
	self assert: aCart isEmpty. ! !

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/25/2020 21:30:08'!
ERROR!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/25/2020 21:30:08'!
ERROR!
!Cart methodsFor: 'sdasdasd' stamp: 'NNH 11/25/2020 21:30:21'!
addToCart: aSymbol 
	self shouldBeImplemented.! !
!Cart methodsFor: 'sdasdasd' stamp: 'NNH 11/25/2020 21:30:47' prior: 50882266!
addToCart: aProduct 
	
	self addToCart: aProduct withOccurrences: 1.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/25/2020 21:32:08'!
PASSED!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/25/2020 21:32:08'!
PASSED!

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/25/2020 21:32:08'!
PASSED!

!testRun: #CartTest #test04ABookShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/25/2020 21:32:08'!
PASSED!

!testRun: #CartTest #test05ABookAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/25/2020 21:32:08'!
PASSED!

!testRun: #CartTest #test06ABookShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/25/2020 21:32:08'!
PASSED!

!testRun: #CartTest #test07ABookShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/25/2020 21:32:08'!
PASSED!

!testRun: #CartTest #test08ExternallyAddingBookToCartListShouldNotModifyCart stamp: 'NNH 11/25/2020 21:32:08'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 21:32:08'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 21:32:08'!
PASSED!

!testRun: #CashierTest #test03CashierShouldUseMerchantProcessorOnValidConditions stamp: 'NNH 11/25/2020 21:32:08'!
PASSED!

!testRun: #CashierTest #test04CashierSuccessfullyProcessesOneElementCart stamp: 'NNH 11/25/2020 21:32:08'!
PASSED!

!testRun: #CashierTest #test05CashierSuccessfullyProcessesManyElementsCart stamp: 'NNH 11/25/2020 21:32:08'!
PASSED!

!testRun: #CashierTest #test06CashierHandlesMerchantProcessorException stamp: 'NNH 11/25/2020 21:32:08'!
PASSED!

!testRun: #CashierTest #test08CashierShouldNotProcessProductWhenItIsNotInCatalogue stamp: 'NNH 11/25/2020 21:32:08'!
PASSED!

!testRun: #CatalogueTest #test01EmptyCatalogueContainsNoBook stamp: 'NNH 11/25/2020 21:32:08'!
PASSED!

!testRun: #CatalogueTest #test02OneProductCatalogueContainsItsOnlyElement stamp: 'NNH 11/25/2020 21:32:08'!
PASSED!

!testRun: #CatalogueTest #test03ACatalogueWithManyBooksIncludesAllOfThem stamp: 'NNH 11/25/2020 21:32:08'!
PASSED!

!testRun: #CatalogueTest #test04ShouldNotAddAProductWithNonPositivePrice stamp: 'NNH 11/25/2020 21:32:08'!
PASSED!

!testRun: #CreditCardTest #test01ValidCardRetrievesPropertiesCorrectly stamp: 'NNH 11/25/2020 21:32:08'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/25/2020 21:32:08'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/25/2020 21:32:08'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/25/2020 21:32:08'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/25/2020 21:32:08'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'NNH 11/25/2020 21:32:08'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/25/2020 21:32:08'!
PASSED!
!Cart methodsFor: 'assertions' stamp: 'NNH 11/25/2020 21:32:33' prior: 50879241!
assertThatCanBeAdded: aBook withOccurences: aNumberOfOccurrences

	(catalogue includes: aBook ) ifFalse: [ self signalBookIsNotForSale ].
		
	(aNumberOfOccurrences isInteger and: [ aNumberOfOccurrences > 0 ] ) 
		ifFalse: [ self signalBookCanNotBeAddedANonNaturalNumberOfTimes ].! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'NNH 11/25/2020 21:33:08'!
Object subclass: #Cart
	instanceVariableNames: 'products catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:33:08' prior: 50878498!
listCart
	
	^ products copy! !
!Cart methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:33:08' prior: 50878540!
isEmpty
	
	^ products isEmpty! !
!Cart methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:33:08' prior: 50882215!
addToCart: aBook withOccurrences: aNumberOfOccurences

	self assertThatCanBeAdded: aBook withOccurences: aNumberOfOccurences.
		
	products add: aBook withOccurrences: aNumberOfOccurences 
	
	! !
!Cart methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:33:08' prior: 50878534!
initializeWithCatalogue: aCatalogue
	
	catalogue := aCatalogue.
	products := OrderedCollection new.! !
!Cart methodsFor: 'adding books' stamp: 'NNH 11/25/2020 21:33:24' prior: 50882395!
addToCart: aProduct withOccurrences: aNumberOfOccurences

	self assertThatCanBeAdded: aProduct withOccurences: aNumberOfOccurences.
		
	products add: aProduct withOccurrences: aNumberOfOccurences 
	
	! !
!Cart methodsFor: 'assertions' stamp: 'NNH 11/25/2020 21:33:33' prior: 50882368!
assertThatCanBeAdded: aProduct withOccurences: aNumberOfOccurrences

	(catalogue includes: aProduct ) ifFalse: [ self signalBookIsNotForSale ].
		
	(aNumberOfOccurrences isInteger and: [ aNumberOfOccurrences > 0 ] ) 
		ifFalse: [ self signalBookCanNotBeAddedANonNaturalNumberOfTimes ].! !
!Cart methodsFor: 'error signaling' stamp: 'NNH 11/25/2020 21:34:00'!
signalProductCanNotBeAddedANonNaturalNumberOfTimes

	^ self error: self class bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription! !
!Cart methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:34:00' prior: 50882419!
assertThatCanBeAdded: aProduct withOccurences: aNumberOfOccurrences

	(catalogue includes: aProduct ) ifFalse: [ self signalBookIsNotForSale ].
		
	(aNumberOfOccurrences isInteger and: [ aNumberOfOccurrences > 0 ] ) 
		ifFalse: [ self signalProductCanNotBeAddedANonNaturalNumberOfTimes ].! !

!methodRemoval: Cart #signalBookCanNotBeAddedANonNaturalNumberOfTimes stamp: 'NNH 11/25/2020 21:34:00'!
signalBookCanNotBeAddedANonNaturalNumberOfTimes

	^ self error: self class bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription!
!Cart methodsFor: 'error signaling' stamp: 'NNH 11/25/2020 21:34:12'!
signalProductIsNotForSale

	^ self error: self class bookIsNotForSaleErrorDescription! !
!Cart methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:34:12' prior: 50882439!
assertThatCanBeAdded: aProduct withOccurences: aNumberOfOccurrences

	(catalogue includes: aProduct ) ifFalse: [ self signalProductIsNotForSale ].
		
	(aNumberOfOccurrences isInteger and: [ aNumberOfOccurrences > 0 ] ) 
		ifFalse: [ self signalProductCanNotBeAddedANonNaturalNumberOfTimes ].! !

!methodRemoval: Cart #signalBookIsNotForSale stamp: 'NNH 11/25/2020 21:34:12'!
signalBookIsNotForSale

	^ self error: self class bookIsNotForSaleErrorDescription!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/25/2020 21:34:15'!
PASSED!

!testRun: #CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/25/2020 21:34:15'!
PASSED!

!testRun: #CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/25/2020 21:34:15'!
PASSED!

!testRun: #CartTest #test04ABookShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/25/2020 21:34:15'!
PASSED!

!testRun: #CartTest #test05ABookAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/25/2020 21:34:15'!
PASSED!

!testRun: #CartTest #test06ABookShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/25/2020 21:34:15'!
PASSED!

!testRun: #CartTest #test07ABookShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/25/2020 21:34:15'!
PASSED!

!testRun: #CartTest #test08ExternallyAddingBookToCartListShouldNotModifyCart stamp: 'NNH 11/25/2020 21:34:15'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 21:34:15'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 21:34:15'!
PASSED!

!testRun: #CashierTest #test03CashierShouldUseMerchantProcessorOnValidConditions stamp: 'NNH 11/25/2020 21:34:15'!
PASSED!

!testRun: #CashierTest #test04CashierSuccessfullyProcessesOneElementCart stamp: 'NNH 11/25/2020 21:34:15'!
PASSED!

!testRun: #CashierTest #test05CashierSuccessfullyProcessesManyElementsCart stamp: 'NNH 11/25/2020 21:34:15'!
PASSED!

!testRun: #CashierTest #test06CashierHandlesMerchantProcessorException stamp: 'NNH 11/25/2020 21:34:15'!
PASSED!

!testRun: #CashierTest #test08CashierShouldNotProcessProductWhenItIsNotInCatalogue stamp: 'NNH 11/25/2020 21:34:15'!
PASSED!

!testRun: #CatalogueTest #test01EmptyCatalogueContainsNoBook stamp: 'NNH 11/25/2020 21:34:15'!
PASSED!

!testRun: #CatalogueTest #test02OneProductCatalogueContainsItsOnlyElement stamp: 'NNH 11/25/2020 21:34:15'!
PASSED!

!testRun: #CatalogueTest #test03ACatalogueWithManyBooksIncludesAllOfThem stamp: 'NNH 11/25/2020 21:34:15'!
PASSED!

!testRun: #CatalogueTest #test04ShouldNotAddAProductWithNonPositivePrice stamp: 'NNH 11/25/2020 21:34:15'!
PASSED!

!testRun: #CreditCardTest #test01ValidCardRetrievesPropertiesCorrectly stamp: 'NNH 11/25/2020 21:34:15'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/25/2020 21:34:15'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/25/2020 21:34:15'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/25/2020 21:34:15'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/25/2020 21:34:15'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'NNH 11/25/2020 21:34:15'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/25/2020 21:34:15'!
PASSED!
!Cart class methodsFor: 'error descriptions' stamp: 'NNH 11/25/2020 21:34:36'!
productCanNotBeAddedANonNaturalNumberOfTimesErrorDescription
	
	^ 'Books can not be added with a non natural number of occurrences'! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:34:36' prior: 50878100!
test07ABookShouldNotBeAddedWithNonPositiveQuantity

	| aCart |
	
	aCart := Cart withCatalogue: harryPotterCatalogue.
	
	self should: [ aCart addToCart: harryPotter withOccurrences: 0 ]
		raise: Error
		withMessageText: Cart productCanNotBeAddedANonNaturalNumberOfTimesErrorDescription.
		
	self assert: aCart isEmpty. ! !
!Cart methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:34:36' prior: 50882431!
signalProductCanNotBeAddedANonNaturalNumberOfTimes

	^ self error: self class productCanNotBeAddedANonNaturalNumberOfTimesErrorDescription! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:34:36' prior: 50878087!
test06ABookShouldNotBeAddedWithNonIntegerQuantity

	| aCart |
	
	aCart := Cart withCatalogue: harryPotterCatalogue.
	
	self should: [ aCart addToCart: harryPotter withOccurrences: 0.5 ]
		raise: Error
		withMessageText: Cart productCanNotBeAddedANonNaturalNumberOfTimesErrorDescription.
		
	self assert: aCart isEmpty. ! !

!methodRemoval: Cart class #bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription stamp: 'NNH 11/25/2020 21:34:37'!
bookCanNotBeAddedANonNaturalNumberOfTimesErrorDescription
	
	^ 'Books can not be added with a non natural number of occurrences'!
!Cart class methodsFor: 'error descriptions' stamp: 'NNH 11/25/2020 21:34:52'!
productIsNotForSaleErrorDescription
	
	^ 'Book is not for sale'.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:34:52' prior: 50882458!
signalProductIsNotForSale

	^ self error: self class productIsNotForSaleErrorDescription! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:34:52' prior: 50882249!
test04ABookShouldNotBeAddedWhenNotForSale

	| aCart |
	
	aCart := Cart withCatalogue: harryPotterCatalogue.
	
	self should: [ aCart addToCart: lordOfTheRings ]
		raise: Error
		withMessageText: Cart productIsNotForSaleErrorDescription.
		
	self assert: aCart isEmpty. ! !

!methodRemoval: Cart class #bookIsNotForSaleErrorDescription stamp: 'NNH 11/25/2020 21:34:52'!
bookIsNotForSaleErrorDescription
	
	^ 'Book is not for sale'.!
!Cart class methodsFor: 'error descriptions' stamp: 'NNH 11/25/2020 21:34:55' prior: 50882623!
productIsNotForSaleErrorDescription
	
	^ 'Product is not for sale'.! !
!Cart class methodsFor: 'error descriptions' stamp: 'NNH 11/25/2020 21:35:01' prior: 50882573!
productCanNotBeAddedANonNaturalNumberOfTimesErrorDescription
	
	^ 'Products can not be added with a non natural number of occurrences'! !
!Cart class methodsFor: 'error descriptions' stamp: 'NNH 11/25/2020 21:35:37' prior: 50882657!
productCanNotBeAddedANonNaturalNumberOfTimesErrorDescription
	
	^ 'Product can not be added with a non natural number of occurrences'! !
!CartTest methodsFor: 'tests - adding' stamp: 'NNH 11/25/2020 21:36:10'!
test02AProductAddedToCartIsSuccessfullyAdded

	| aCart |
	
	aCart := Cart withCatalogue: harryPotterCatalogue.
	
	aCart addToCart: harryPotter.
	
	self deny: aCart isEmpty.
	self assert: ( aCart listCart hasEqualElements: {harryPotter} )! !

!methodRemoval: CartTest #test02ABookAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/25/2020 21:36:10'!
test02ABookAddedToCartIsSuccessfullyAdded

	| aCart |
	
	aCart := Cart withCatalogue: harryPotterCatalogue.
	
	aCart addToCart: harryPotter.
	
	self deny: aCart isEmpty.
	self assert: ( aCart listCart hasEqualElements: {harryPotter} )!
!CartTest methodsFor: 'tests - adding' stamp: 'NNH 11/25/2020 21:36:20'!
test03ManyProductsAddedToCartAreSuccessfullyAdded

	| aCart |
	
	aCart := Cart withCatalogue: threeBookCatalogue .
	
	aCart addToCart: harryPotter .
	aCart addToCart: lordOfTheRings .
	aCart addToCart: ageOfEmpires .
	
	self deny: aCart isEmpty.
	self assert: ( aCart listCart hasEqualElements: {harryPotter. lordOfTheRings. ageOfEmpires} )! !

!methodRemoval: CartTest #test03ManyBooksAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/25/2020 21:36:20'!
test03ManyBooksAddedToCartAreSuccessfullyAdded

	| aCart |
	
	aCart := Cart withCatalogue: threeBookCatalogue .
	
	aCart addToCart: harryPotter .
	aCart addToCart: lordOfTheRings .
	aCart addToCart: ageOfEmpires .
	
	self deny: aCart isEmpty.
	self assert: ( aCart listCart hasEqualElements: {harryPotter. lordOfTheRings. ageOfEmpires} )!
!CartTest methodsFor: 'tests - errors' stamp: 'NNH 11/25/2020 21:36:34'!
test04AProductShouldNotBeAddedWhenNotForSale

	| aCart |
	
	aCart := Cart withCatalogue: harryPotterCatalogue.
	
	self should: [ aCart addToCart: lordOfTheRings ]
		raise: Error
		withMessageText: Cart productIsNotForSaleErrorDescription.
		
	self assert: aCart isEmpty. ! !

!methodRemoval: CartTest #test04ABookShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/25/2020 21:36:34'!
test04ABookShouldNotBeAddedWhenNotForSale

	| aCart |
	
	aCart := Cart withCatalogue: harryPotterCatalogue.
	
	self should: [ aCart addToCart: lordOfTheRings ]
		raise: Error
		withMessageText: Cart productIsNotForSaleErrorDescription.
		
	self assert: aCart isEmpty. !
!CartTest methodsFor: 'tests - errors' stamp: 'NNH 11/25/2020 21:36:45'!
test06AProductShouldNotBeAddedWithNonIntegerQuantity

	| aCart |
	
	aCart := Cart withCatalogue: harryPotterCatalogue.
	
	self should: [ aCart addToCart: harryPotter withOccurrences: 0.5 ]
		raise: Error
		withMessageText: Cart productCanNotBeAddedANonNaturalNumberOfTimesErrorDescription.
		
	self assert: aCart isEmpty. ! !

!methodRemoval: CartTest #test06ABookShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/25/2020 21:36:45'!
test06ABookShouldNotBeAddedWithNonIntegerQuantity

	| aCart |
	
	aCart := Cart withCatalogue: harryPotterCatalogue.
	
	self should: [ aCart addToCart: harryPotter withOccurrences: 0.5 ]
		raise: Error
		withMessageText: Cart productCanNotBeAddedANonNaturalNumberOfTimesErrorDescription.
		
	self assert: aCart isEmpty. !
!CartTest methodsFor: 'tests - errors' stamp: 'NNH 11/25/2020 21:36:53'!
test07AProductShouldNotBeAddedWithNonPositiveQuantity

	| aCart |
	
	aCart := Cart withCatalogue: harryPotterCatalogue.
	
	self should: [ aCart addToCart: harryPotter withOccurrences: 0 ]
		raise: Error
		withMessageText: Cart productCanNotBeAddedANonNaturalNumberOfTimesErrorDescription.
		
	self assert: aCart isEmpty. ! !

!methodRemoval: CartTest #test07ABookShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/25/2020 21:36:53'!
test07ABookShouldNotBeAddedWithNonPositiveQuantity

	| aCart |
	
	aCart := Cart withCatalogue: harryPotterCatalogue.
	
	self should: [ aCart addToCart: harryPotter withOccurrences: 0 ]
		raise: Error
		withMessageText: Cart productCanNotBeAddedANonNaturalNumberOfTimesErrorDescription.
		
	self assert: aCart isEmpty. !
!CartTest methodsFor: 'tests - adding' stamp: 'NNH 11/25/2020 21:37:04'!
test05AProductAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce

	| aCart |
	
	aCart := Cart withCatalogue: harryPotterCatalogue.
	
	aCart addToCart: harryPotter withOccurrences: 2. 
	
	self assert: ( aCart listCart hasEqualElements: {harryPotter. harryPotter} )! !

!methodRemoval: CartTest #test05ABookAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/25/2020 21:37:04'!
test05ABookAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce

	| aCart |
	
	aCart := Cart withCatalogue: harryPotterCatalogue.
	
	aCart addToCart: harryPotter withOccurrences: 2. 
	
	self assert: ( aCart listCart hasEqualElements: {harryPotter. harryPotter} )!
!CartTest methodsFor: 'tests - adding' stamp: 'NNH 11/25/2020 21:37:14'!
test08ExternallyAddingProductToCartListShouldNotModifyCart

	| anEmptyCart emptyCartList |
	
	anEmptyCart := Cart withCatalogue: harryPotterCatalogue.
	emptyCartList := anEmptyCart listCart.
	emptyCartList add: harryPotter.
	
	self assert: anEmptyCart isEmpty.
	self assert: anEmptyCart listCart isEmpty.! !

!methodRemoval: CartTest #test08ExternallyAddingBookToCartListShouldNotModifyCart stamp: 'NNH 11/25/2020 21:37:14'!
test08ExternallyAddingBookToCartListShouldNotModifyCart

	| anEmptyCart emptyCartList |
	
	anEmptyCart := Cart withCatalogue: harryPotterCatalogue.
	emptyCartList := anEmptyCart listCart.
	emptyCartList add: harryPotter.
	
	self assert: anEmptyCart isEmpty.
	self assert: anEmptyCart listCart isEmpty.!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/25/2020 21:37:28'!
PASSED!

!testRun: #CartTest #test02AProductAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/25/2020 21:37:28'!
PASSED!

!testRun: #CartTest #test03ManyProductsAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/25/2020 21:37:28'!
PASSED!

!testRun: #CartTest #test04AProductShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/25/2020 21:37:28'!
PASSED!

!testRun: #CartTest #test05AProductAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/25/2020 21:37:28'!
PASSED!

!testRun: #CartTest #test06AProductShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/25/2020 21:37:28'!
PASSED!

!testRun: #CartTest #test07AProductShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/25/2020 21:37:28'!
PASSED!

!testRun: #CartTest #test08ExternallyAddingProductToCartListShouldNotModifyCart stamp: 'NNH 11/25/2020 21:37:28'!
PASSED!
!Catalogue methodsFor: 'accessing' stamp: 'NNH 11/25/2020 21:38:11'!
priceOf: aProduct 
	
	^ products at: aProduct .! !
!CatalogueTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:38:11' prior: 50881705!
test02OneProductCatalogueContainsItsOnlyElement
	
	| aCatalogue |
	
	aCatalogue := Catalogue new.
	
	aCatalogue add: harryPotter withPrice: 100.
	
	self assert: ( aCatalogue includes: harryPotter ).
	self assert: ( aCatalogue priceOf: harryPotter ) equals: 100.! !
!CatalogueTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:38:11' prior: 50881725!
test03ACatalogueWithManyBooksIncludesAllOfThem
	
	| aCatalogue |
	
	aCatalogue := Catalogue new.
	
	aCatalogue add: harryPotter withPrice: 100.
	aCatalogue add: lordOfTheRings withPrice: 50.
	aCatalogue add: ageOfEmpires withPrice: 25.
	
	self assert: ( aCatalogue includes: harryPotter ).
	self assert: ( aCatalogue includes: lordOfTheRings ).
	self assert: ( aCatalogue includes: ageOfEmpires ).

	self assert: ( aCatalogue priceOf: harryPotter ) equals: 100.
	self assert: ( aCatalogue priceOf: lordOfTheRings ) equals: 50.
	self assert: ( aCatalogue priceOf: ageOfEmpires ) equals: 25.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:38:11' prior: 50882190!
checkOut: aCart with: aCreditCard
	
	| total |
	
	(aCreditCard expirationDate < FixedGregorianDate today) ifTrue: [ self error: self class declinedCreditCardErrorDescription ] .
	
	aCart isEmpty ifTrue: [ self error: self class canNotCheckOutAnEmptyCartErrorDescription ] .
	
	( aCart listCart allSatisfy: [ :aProduct | catalogue includes: aProduct ] ) ifFalse: [ self error: self class productInCartIsNotForSaleErrorDescription ] .
	
	total := aCart listCart sum: [ :aProduct | catalogue priceOf: aProduct ].
	
	[ merchantProcessor debit: total from: aCreditCard ] on: Error do: [:anError |
		self error: anError messageText .
		] .

	^ Invoice total: total products: aCart listCart .! !

!methodRemoval: Catalogue #priceFor: stamp: 'NNH 11/25/2020 21:38:11'!
priceFor: aProduct 
	
	^ products at: aProduct .!
!CatalogueTest methodsFor: 'tests' stamp: 'NNH 11/25/2020 21:38:57'!
test01EmptyCatalogueContainsNoProduct
	
	| aCatalogue |
	
	aCatalogue := Catalogue new.
	
	self deny: ( aCatalogue includes: harryPotter ).! !

!methodRemoval: CatalogueTest #test01EmptyCatalogueContainsNoBook stamp: 'NNH 11/25/2020 21:38:57'!
test01EmptyCatalogueContainsNoBook
	
	| aCatalogue |
	
	aCatalogue := Catalogue new.
	
	self deny: ( aCatalogue includes: harryPotter ).!
!CatalogueTest methodsFor: 'tests' stamp: 'NNH 11/25/2020 21:39:13'!
test03ACatalogueWithManyProductsIncludesAllOfThem
	
	| aCatalogue |
	
	aCatalogue := Catalogue new.
	
	aCatalogue add: harryPotter withPrice: 100.
	aCatalogue add: lordOfTheRings withPrice: 50.
	aCatalogue add: ageOfEmpires withPrice: 25.
	
	self assert: ( aCatalogue includes: harryPotter ).
	self assert: ( aCatalogue includes: lordOfTheRings ).
	self assert: ( aCatalogue includes: ageOfEmpires ).

	self assert: ( aCatalogue priceOf: harryPotter ) equals: 100.
	self assert: ( aCatalogue priceOf: lordOfTheRings ) equals: 50.
	self assert: ( aCatalogue priceOf: ageOfEmpires ) equals: 25.! !

!methodRemoval: CatalogueTest #test03ACatalogueWithManyBooksIncludesAllOfThem stamp: 'NNH 11/25/2020 21:39:13'!
test03ACatalogueWithManyBooksIncludesAllOfThem
	
	| aCatalogue |
	
	aCatalogue := Catalogue new.
	
	aCatalogue add: harryPotter withPrice: 100.
	aCatalogue add: lordOfTheRings withPrice: 50.
	aCatalogue add: ageOfEmpires withPrice: 25.
	
	self assert: ( aCatalogue includes: harryPotter ).
	self assert: ( aCatalogue includes: lordOfTheRings ).
	self assert: ( aCatalogue includes: ageOfEmpires ).

	self assert: ( aCatalogue priceOf: harryPotter ) equals: 100.
	self assert: ( aCatalogue priceOf: lordOfTheRings ) equals: 50.
	self assert: ( aCatalogue priceOf: ageOfEmpires ) equals: 25.!
!CreditCard class methodsFor: 'instance creation' stamp: 'NNH 11/25/2020 21:40:48' prior: 50878725!
withNumber: aNumber expirationDate: aMonthOfYear owner: aPerson 
	
	( aNumber isInteger and: [ aNumber between: 10 ^ 15 and: 10 ^ 16 - 1 ] ) ifFalse: [ self error: self invalidCardNumberErrorDescription ] .
		
	( aMonthOfYear isKindOf: GregorianMonthOfYear ) ifFalse: [ self error: self invalidExpirationDateErrorDescription ] .
	
	aPerson withoutTrailingBlanks isEmpty ifTrue: [ self error: self invalidOwnerNameErrorDescription ] .
	
	^ self new initializeWithNumber: aNumber expirationDate: aMonthOfYear owner: aPerson . ! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/25/2020 21:41:43'!
PASSED!

!testRun: #CartTest #test02AProductAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/25/2020 21:41:43'!
PASSED!

!testRun: #CartTest #test03ManyProductsAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/25/2020 21:41:43'!
PASSED!

!testRun: #CartTest #test04AProductShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/25/2020 21:41:43'!
PASSED!

!testRun: #CartTest #test05AProductAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/25/2020 21:41:43'!
PASSED!

!testRun: #CartTest #test06AProductShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/25/2020 21:41:43'!
PASSED!

!testRun: #CartTest #test07AProductShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/25/2020 21:41:43'!
PASSED!

!testRun: #CartTest #test08ExternallyAddingProductToCartListShouldNotModifyCart stamp: 'NNH 11/25/2020 21:41:43'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 21:41:43'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 21:41:43'!
PASSED!

!testRun: #CashierTest #test03CashierShouldUseMerchantProcessorOnValidConditions stamp: 'NNH 11/25/2020 21:41:43'!
PASSED!

!testRun: #CashierTest #test04CashierSuccessfullyProcessesOneElementCart stamp: 'NNH 11/25/2020 21:41:43'!
PASSED!

!testRun: #CashierTest #test05CashierSuccessfullyProcessesManyElementsCart stamp: 'NNH 11/25/2020 21:41:43'!
PASSED!

!testRun: #CashierTest #test06CashierHandlesMerchantProcessorException stamp: 'NNH 11/25/2020 21:41:43'!
PASSED!

!testRun: #CashierTest #test08CashierShouldNotProcessProductWhenItIsNotInCatalogue stamp: 'NNH 11/25/2020 21:41:43'!
PASSED!

!testRun: #CatalogueTest #test01EmptyCatalogueContainsNoProduct stamp: 'NNH 11/25/2020 21:41:43'!
PASSED!

!testRun: #CatalogueTest #test02OneProductCatalogueContainsItsOnlyElement stamp: 'NNH 11/25/2020 21:41:43'!
PASSED!

!testRun: #CatalogueTest #test03ACatalogueWithManyProductsIncludesAllOfThem stamp: 'NNH 11/25/2020 21:41:43'!
PASSED!

!testRun: #CatalogueTest #test04ShouldNotAddAProductWithNonPositivePrice stamp: 'NNH 11/25/2020 21:41:43'!
PASSED!

!testRun: #CreditCardTest #test01ValidCardRetrievesPropertiesCorrectly stamp: 'NNH 11/25/2020 21:41:43'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/25/2020 21:41:43'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/25/2020 21:41:43'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/25/2020 21:41:43'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/25/2020 21:41:43'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'NNH 11/25/2020 21:41:43'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/25/2020 21:41:43'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'NNH 11/25/2020 21:43:25'!
assertCardNumberIsValid: aNumber
	
	( aNumber isInteger and: [ aNumber between: 10 ^ 15 and: 10 ^ 16 - 1 ] ) ifFalse: [ self error: self invalidCardNumberErrorDescription ] .! !
!CreditCard class methodsFor: 'instance creation' stamp: 'NNH 11/25/2020 21:43:46' prior: 50882998!
withNumber: aNumber expirationDate: aMonthOfYear owner: aPerson 
	
	self assertCardNumberIsValid: aNumber .
		
	( aMonthOfYear isKindOf: GregorianMonthOfYear ) ifFalse: [ self error: self invalidExpirationDateErrorDescription ] .
	
	aPerson withoutTrailingBlanks isEmpty ifTrue: [ self error: self invalidOwnerNameErrorDescription ] .
	
	^ self new initializeWithNumber: aNumber expirationDate: aMonthOfYear owner: aPerson . ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'NNH 11/25/2020 21:44:26'!
assertExpirationDateIsValid: aMonthOfYear
		
	( aMonthOfYear isKindOf: GregorianMonthOfYear ) ifFalse: [ self error: self invalidExpirationDateErrorDescription ] .
! !
!CreditCard class methodsFor: 'instance creation' stamp: 'NNH 11/25/2020 21:44:38' prior: 50883119!
withNumber: aNumber expirationDate: aMonthOfYear owner: aPerson 
	
	self assertCardNumberIsValid: aNumber .
		
	self assertExpirationDateIsValid: aMonthOfYear .
	
	aPerson withoutTrailingBlanks isEmpty ifTrue: [ self error: self invalidOwnerNameErrorDescription ] .
	
	^ self new initializeWithNumber: aNumber expirationDate: aMonthOfYear owner: aPerson . ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'NNH 11/25/2020 21:45:06'!
assertOwnerNameIsValid: aPerson 

	aPerson withoutTrailingBlanks isEmpty ifTrue: [ self error: self invalidOwnerNameErrorDescription ] .! !
!CreditCard class methodsFor: 'instance creation' stamp: 'NNH 11/25/2020 21:45:19' prior: 50883145!
withNumber: aNumber expirationDate: aMonthOfYear owner: aPerson 
	
	self assertCardNumberIsValid: aNumber .
		
	self assertExpirationDateIsValid: aMonthOfYear .
	
	self assertOwnerNameIsValid: aPerson .
	
	^ self new initializeWithNumber: aNumber expirationDate: aMonthOfYear owner: aPerson . ! !
!Cashier methodsFor: 'cart processing' stamp: 'NNH 11/25/2020 21:49:57'!
assert: aCreditCard canCheckOut: aCart

	(aCreditCard expirationDate < FixedGregorianDate today) ifTrue: [ self error: self class declinedCreditCardErrorDescription ] .
	
	aCart isEmpty ifTrue: [ self error: self class canNotCheckOutAnEmptyCartErrorDescription ] .
	
	( aCart listCart allSatisfy: [ :aProduct | catalogue includes: aProduct ] ) ifFalse: [ self error: self class productInCartIsNotForSaleErrorDescription ]! !
!Cashier methodsFor: 'cart processing' stamp: 'NNH 11/25/2020 21:49:58' prior: 50882911!
checkOut: aCart with: aCreditCard
	
	| total |
	
	self assert: aCreditCard canCheckOut: aCart .
	
	total := aCart listCart sum: [ :aProduct | catalogue priceOf: aProduct ].
	
	[ merchantProcessor debit: total from: aCreditCard ] on: Error do: [:anError |
		self error: anError messageText .
		] .

	^ Invoice total: total products: aCart listCart .! !
!Cashier methodsFor: 'assertions' stamp: 'NNH 11/25/2020 21:50:58'!
assertCardIsNotExpired: aCreditCard

	^ (aCreditCard expirationDate < FixedGregorianDate today) ifTrue: [ self error: self class declinedCreditCardErrorDescription ]! !
!Cashier methodsFor: 'assertions' stamp: 'NNH 11/25/2020 21:50:58' prior: 50883179!
assert: aCreditCard canCheckOut: aCart

	self assertCardIsNotExpired: aCreditCard .
	
	aCart isEmpty ifTrue: [ self error: self class canNotCheckOutAnEmptyCartErrorDescription ] .
	
	( aCart listCart allSatisfy: [ :aProduct | catalogue includes: aProduct ] ) ifFalse: [ self error: self class productInCartIsNotForSaleErrorDescription ]! !
!Cashier methodsFor: 'assertions' stamp: 'NNH 11/25/2020 21:51:33'!
assertCartIsNotEmpty: aCart

	^ aCart isEmpty ifTrue: [ self error: self class canNotCheckOutAnEmptyCartErrorDescription ]! !
!Cashier methodsFor: 'assertions' stamp: 'NNH 11/25/2020 21:51:34' prior: 50883218!
assert: aCreditCard canCheckOut: aCart

	self assertCardIsNotExpired: aCreditCard .
	
	self assertCartIsNotEmpty: aCart .
	
	( aCart listCart allSatisfy: [ :aProduct | catalogue includes: aProduct ] ) ifFalse: [ self error: self class productInCartIsNotForSaleErrorDescription ]! !
!Cashier methodsFor: 'assertions' stamp: 'NNH 11/25/2020 21:51:47' prior: 50883238!
assert: aCreditCard canCheckOut: aCart

	self assertCardIsNotExpired: aCreditCard .
	
	self assertCartIsNotEmpty: aCart .
	
	( aCart listCart allSatisfy: [ :aProduct | catalogue includes: aProduct ] ) ifFalse: [ self error: self class productInCartIsNotForSaleErrorDescription ] .! !
!Cashier methodsFor: 'assertions' stamp: 'NNH 11/25/2020 21:52:22'!
assertCartProductsAreInCatalogue: aCart	
	
	( aCart listCart allSatisfy: [ :aProduct | catalogue includes: aProduct ] ) ifFalse: [ self error: self class productInCartIsNotForSaleErrorDescription ] .! !
!Cashier methodsFor: 'assertions' stamp: 'NNH 11/25/2020 21:52:36' prior: 50883250!
assert: aCreditCard canCheckOut: aCart

	self assertCardIsNotExpired: aCreditCard .
	
	self assertCartIsNotEmpty: aCart .
	
	self assertCartProductsAreInCatalogue: aCart .! !
!Cashier methodsFor: 'assertions' stamp: 'NNH 11/25/2020 21:52:53'!
assertCard: aCreditCard canCheckOut: aCart

	self assertCardIsNotExpired: aCreditCard .
	
	self assertCartIsNotEmpty: aCart .
	
	self assertCartProductsAreInCatalogue: aCart .! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:52:53' prior: 50883196!
checkOut: aCart with: aCreditCard
	
	| total |
	
	self assertCard: aCreditCard canCheckOut: aCart .
	
	total := aCart listCart sum: [ :aProduct | catalogue priceOf: aProduct ].
	
	[ merchantProcessor debit: total from: aCreditCard ] on: Error do: [:anError |
		self error: anError messageText .
		] .

	^ Invoice total: total products: aCart listCart .! !

!methodRemoval: Cashier #assert:canCheckOut: stamp: 'NNH 11/25/2020 21:52:53'!
assert: aCreditCard canCheckOut: aCart

	self assertCardIsNotExpired: aCreditCard .
	
	self assertCartIsNotEmpty: aCart .
	
	self assertCartProductsAreInCatalogue: aCart .!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/25/2020 21:53:01'!
PASSED!

!testRun: #CartTest #test02AProductAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/25/2020 21:53:01'!
PASSED!

!testRun: #CartTest #test03ManyProductsAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/25/2020 21:53:01'!
PASSED!

!testRun: #CartTest #test04AProductShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/25/2020 21:53:01'!
PASSED!

!testRun: #CartTest #test05AProductAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/25/2020 21:53:01'!
PASSED!

!testRun: #CartTest #test06AProductShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/25/2020 21:53:01'!
PASSED!

!testRun: #CartTest #test07AProductShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/25/2020 21:53:01'!
PASSED!

!testRun: #CartTest #test08ExternallyAddingProductToCartListShouldNotModifyCart stamp: 'NNH 11/25/2020 21:53:01'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 21:53:01'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 21:53:01'!
PASSED!

!testRun: #CashierTest #test03CashierShouldUseMerchantProcessorOnValidConditions stamp: 'NNH 11/25/2020 21:53:01'!
PASSED!

!testRun: #CashierTest #test04CashierSuccessfullyProcessesOneElementCart stamp: 'NNH 11/25/2020 21:53:01'!
PASSED!

!testRun: #CashierTest #test05CashierSuccessfullyProcessesManyElementsCart stamp: 'NNH 11/25/2020 21:53:01'!
PASSED!

!testRun: #CashierTest #test06CashierHandlesMerchantProcessorException stamp: 'NNH 11/25/2020 21:53:01'!
PASSED!

!testRun: #CashierTest #test08CashierShouldNotProcessProductWhenItIsNotInCatalogue stamp: 'NNH 11/25/2020 21:53:01'!
PASSED!

!testRun: #CatalogueTest #test01EmptyCatalogueContainsNoProduct stamp: 'NNH 11/25/2020 21:53:01'!
PASSED!

!testRun: #CatalogueTest #test02OneProductCatalogueContainsItsOnlyElement stamp: 'NNH 11/25/2020 21:53:01'!
PASSED!

!testRun: #CatalogueTest #test03ACatalogueWithManyProductsIncludesAllOfThem stamp: 'NNH 11/25/2020 21:53:01'!
PASSED!

!testRun: #CatalogueTest #test04ShouldNotAddAProductWithNonPositivePrice stamp: 'NNH 11/25/2020 21:53:01'!
PASSED!

!testRun: #CreditCardTest #test01ValidCardRetrievesPropertiesCorrectly stamp: 'NNH 11/25/2020 21:53:01'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/25/2020 21:53:01'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/25/2020 21:53:01'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/25/2020 21:53:01'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/25/2020 21:53:01'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'NNH 11/25/2020 21:53:01'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/25/2020 21:53:01'!
PASSED!
!Cashier class methodsFor: 'error descriptions' stamp: 'NNH 11/25/2020 21:54:02'!
creditCardHasExpiredErrorDescription
	
	^ 'Credit card is declined'! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:54:02' prior: 50883210!
assertCardIsNotExpired: aCreditCard

	^ (aCreditCard expirationDate < FixedGregorianDate today) ifTrue: [ self error: self class creditCardHasExpiredErrorDescription ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:54:02' prior: 50880478!
test02CashierShouldNotDispatchExpiredCreditCard
	
	| aCashier |
	
	aCashier := Cashier with: emptyMerchantProcessorDouble .
	
	self should: [ aCashier checkOut: emptyCart with: expiredCreditCard ]
	raise: Error
	withMessageText: Cashier creditCardHasExpiredErrorDescription.

	self deny: emptyMerchantProcessorDouble receivedAMessage.
! !

!methodRemoval: Cashier class #declinedCreditCardErrorDescription stamp: 'NNH 11/25/2020 21:54:02'!
declinedCreditCardErrorDescription
	
	^ 'Credit card is declined'!
!Cashier class methodsFor: 'error descriptions' stamp: 'NNH 11/25/2020 21:54:19' prior: 50883401!
creditCardHasExpiredErrorDescription
	
	^ 'Credit card has expired'! !

!methodRemoval: Cashier class #with: stamp: 'NNH 11/25/2020 21:54:48'!
with: aMerchantProcessor 
	
	^ self new initializeWith: aMerchantProcessor!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:55:33' prior: 50880464!
test01CashierShouldNotDispatchEmptyCart
	
	| aCashier |
	
	aCashier := Cashier withProcessor: emptyMerchantProcessorDouble catalogue: Catalogue new.
	
	self should: [ aCashier checkOut: emptyCart with: validCreditCard ]
	raise: Error
	withMessageText: Cashier canNotCheckOutAnEmptyCartErrorDescription .
	
	self deny: emptyMerchantProcessorDouble receivedAMessage.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 21:55:40' prior: 50883416!
test02CashierShouldNotDispatchExpiredCreditCard
	
	| aCashier |
	
	aCashier := Cashier withProcessor: emptyMerchantProcessorDouble catalogue: Catalogue new.
	
	self should: [ aCashier checkOut: emptyCart with: expiredCreditCard ]
	raise: Error
	withMessageText: Cashier creditCardHasExpiredErrorDescription.

	self deny: emptyMerchantProcessorDouble receivedAMessage.
! !

!methodRemoval: Cashier #initializeWith: stamp: 'NNH 11/25/2020 21:55:54'!
initializeWith: aMerchantProcessor 
	
	merchantProcessor := aMerchantProcessor.!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/25/2020 21:56:15'!
PASSED!

!testRun: #CartTest #test02AProductAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/25/2020 21:56:15'!
PASSED!

!testRun: #CartTest #test03ManyProductsAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/25/2020 21:56:15'!
PASSED!

!testRun: #CartTest #test04AProductShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/25/2020 21:56:15'!
PASSED!

!testRun: #CartTest #test05AProductAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/25/2020 21:56:15'!
PASSED!

!testRun: #CartTest #test06AProductShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/25/2020 21:56:15'!
PASSED!

!testRun: #CartTest #test07AProductShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/25/2020 21:56:15'!
PASSED!

!testRun: #CartTest #test08ExternallyAddingProductToCartListShouldNotModifyCart stamp: 'NNH 11/25/2020 21:56:15'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 21:56:15'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 21:56:15'!
PASSED!

!testRun: #CashierTest #test03CashierShouldUseMerchantProcessorOnValidConditions stamp: 'NNH 11/25/2020 21:56:15'!
PASSED!

!testRun: #CashierTest #test04CashierSuccessfullyProcessesOneElementCart stamp: 'NNH 11/25/2020 21:56:15'!
PASSED!

!testRun: #CashierTest #test05CashierSuccessfullyProcessesManyElementsCart stamp: 'NNH 11/25/2020 21:56:15'!
PASSED!

!testRun: #CashierTest #test06CashierHandlesMerchantProcessorException stamp: 'NNH 11/25/2020 21:56:15'!
PASSED!

!testRun: #CashierTest #test08CashierShouldNotProcessProductWhenItIsNotInCatalogue stamp: 'NNH 11/25/2020 21:56:15'!
PASSED!

!testRun: #CatalogueTest #test01EmptyCatalogueContainsNoProduct stamp: 'NNH 11/25/2020 21:56:15'!
PASSED!

!testRun: #CatalogueTest #test02OneProductCatalogueContainsItsOnlyElement stamp: 'NNH 11/25/2020 21:56:15'!
PASSED!

!testRun: #CatalogueTest #test03ACatalogueWithManyProductsIncludesAllOfThem stamp: 'NNH 11/25/2020 21:56:15'!
PASSED!

!testRun: #CatalogueTest #test04ShouldNotAddAProductWithNonPositivePrice stamp: 'NNH 11/25/2020 21:56:15'!
PASSED!

!testRun: #CreditCardTest #test01ValidCardRetrievesPropertiesCorrectly stamp: 'NNH 11/25/2020 21:56:15'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/25/2020 21:56:15'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/25/2020 21:56:15'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/25/2020 21:56:15'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/25/2020 21:56:15'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'NNH 11/25/2020 21:56:15'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/25/2020 21:56:15'!
PASSED!
!Cashier methodsFor: 'cart processing' stamp: 'NNH 11/25/2020 21:57:35' prior: 50883287!
checkOut: aCart with: aCreditCard
	
	| total |
	
	self assertCard: aCreditCard canCheckOut: aCart .
	
	total := aCart listCart sum: [ :aProduct | catalogue priceOf: aProduct ].
	
	[ merchantProcessor debit: total from: aCreditCard ] 
		on: Error 
		do: [:anError | self error: anError messageText		] .

	^ Invoice total: total products: aCart listCart .! !

----SNAPSHOT----(25 November 2020 21:58:39) CuisUniversity-4384.image priorSource: 17480455!

----QUIT----(25 November 2020 21:58:43) CuisUniversity-4384.image priorSource: 17661924!

----STARTUP---- (25 November 2020 22:40:58) as /home/nahuel/Documents/cuisuniversity/CuisUniversity-4384.image!

!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 22:53:47' prior: 50881956!
test04CashierSuccessfullyProcessesOneElementCart
	
	| aCashier aMerchantProcessorDouble ticket |
	
	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		self assert: aTotal equals: 100.
		self assert: aCard = validCreditCard. 
		].
	
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .
		
	ticket := aCashier checkOut: harryPotterCart with: validCreditCard .

	self assert: ticket total equals: 100 .
	self assert: ( ticket products hasEqualElements: { harryPotterBook } ) .
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 22:54:55' prior: 50882041!
test06CashierHandlesMerchantProcessorException
	
	| aCashier aMerchantProcessorDouble ticket |
	

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		self error: 'Credit card is stolen'.
		].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .	

	self should: [ ticket := aCashier checkOut: harryPotterCart with: validCreditCard ]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: 'Credit card is stolen' .
		self assert: anError receiver equals: aCashier .
		self assert: ticket isNil .
		 ].
	
	

! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 22:55:15' prior: 50881999!
test05CashierSuccessfullyProcessesManyElementsCart
	
	| aCashier aMerchantProcessorDouble ticket |
	
	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		self assert: aTotal equals: 175.
		self assert: aCard = validCreditCard. 
		].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: threeBookCatalogue .
	
	ticket := aCashier checkOut: threeBookCart with: validCreditCard .

	self assert: ticket total equals: 175 .
	self assert: ( ticket products hasEqualElements: { harryPotterBook . lordOfTheRingsBook . ageOfEmpiresBook } ) .
! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/25/2020 22:55:32'!
PASSED!

!testRun: #CartTest #test02AProductAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/25/2020 22:55:32'!
PASSED!

!testRun: #CartTest #test03ManyProductsAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/25/2020 22:55:32'!
PASSED!

!testRun: #CartTest #test04AProductShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/25/2020 22:55:32'!
PASSED!

!testRun: #CartTest #test05AProductAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/25/2020 22:55:32'!
PASSED!

!testRun: #CartTest #test06AProductShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/25/2020 22:55:32'!
PASSED!

!testRun: #CartTest #test07AProductShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/25/2020 22:55:32'!
PASSED!

!testRun: #CartTest #test08ExternallyAddingProductToCartListShouldNotModifyCart stamp: 'NNH 11/25/2020 22:55:32'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 22:55:32'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 22:55:32'!
PASSED!

!testRun: #CashierTest #test03CashierShouldUseMerchantProcessorOnValidConditions stamp: 'NNH 11/25/2020 22:55:32'!
PASSED!

!testRun: #CashierTest #test04CashierSuccessfullyProcessesOneElementCart stamp: 'NNH 11/25/2020 22:55:32'!
PASSED!

!testRun: #CashierTest #test05CashierSuccessfullyProcessesManyElementsCart stamp: 'NNH 11/25/2020 22:55:32'!
PASSED!

!testRun: #CashierTest #test06CashierHandlesMerchantProcessorException stamp: 'NNH 11/25/2020 22:55:32'!
PASSED!

!testRun: #CashierTest #test08CashierShouldNotProcessProductWhenItIsNotInCatalogue stamp: 'NNH 11/25/2020 22:55:32'!
PASSED!

!testRun: #CatalogueTest #test01EmptyCatalogueContainsNoProduct stamp: 'NNH 11/25/2020 22:55:32'!
PASSED!

!testRun: #CatalogueTest #test02OneProductCatalogueContainsItsOnlyElement stamp: 'NNH 11/25/2020 22:55:32'!
PASSED!

!testRun: #CatalogueTest #test03ACatalogueWithManyProductsIncludesAllOfThem stamp: 'NNH 11/25/2020 22:55:32'!
PASSED!

!testRun: #CatalogueTest #test04ShouldNotAddAProductWithNonPositivePrice stamp: 'NNH 11/25/2020 22:55:32'!
PASSED!

!testRun: #CreditCardTest #test01ValidCardRetrievesPropertiesCorrectly stamp: 'NNH 11/25/2020 22:55:32'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/25/2020 22:55:32'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/25/2020 22:55:32'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/25/2020 22:55:32'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/25/2020 22:55:32'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'NNH 11/25/2020 22:55:32'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/25/2020 22:55:32'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 23:00:36' prior: 50883617!
test06CashierHandlesMerchantProcessorException
	
	| aCashier aMerchantProcessorDouble ticket |
	

	aMerchantProcessorDouble := MerchantProcessorDouble with: [ :aTotal :aCard | 
		self error: 'Credit card is stolen'.
		].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .	

	self should: [ ticket := aCashier checkOut: harryPotterCart with: validCreditCard ]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: 'Credit card is stolen' .
		self assert: anError receiver equals: aCashier .
		self assert: ticket isNil .
		 ].
	
	

! !
!MerchantProcessorDouble methodsFor: 'initialization' stamp: 'NNH 11/25/2020 23:10:38' overrides: 16896425!
initialize
	
	messages := OrderedCollection new.
	block := [:aTotal :aCard | ] .! !

!classDefinition: #MerchantProcessorDouble category: 'TusLibros' stamp: 'NNH 11/25/2020 23:11:24'!
Object subclass: #MerchantProcessorDouble
	instanceVariableNames: 'messages blockToExecuteOnDebitFrom'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorDouble methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 23:11:24' prior: 50880905!
initializeWith: aBlockToDebitFrom
	
	messages := OrderedCollection new.
	blockToExecuteOnDebitFrom := aBlockToDebitFrom .! !
!MerchantProcessorDouble methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 23:11:24' prior: 50883777 overrides: 16896425!
initialize
	
	messages := OrderedCollection new.
	blockToExecuteOnDebitFrom := [:aTotal :aCard | ] .! !
!MerchantProcessorDouble methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 23:11:24' prior: 50878800!
debit: anAmount from: aCreditCard

	messages add: #debit:from: .
	blockToExecuteOnDebitFrom value: anAmount value: aCreditCard .! !
!MerchantProcessorDouble methodsFor: 'initialization' stamp: 'NNH 11/25/2020 23:12:12' prior: 50883792!
initializeWith: aBlockToExecuteOnDebitFrom
	
	messages := OrderedCollection new.
	blockToExecuteOnDebitFrom := aBlockToExecuteOnDebitFrom .! !
!MerchantProcessorDouble methodsFor: 'initialization' stamp: 'NNH 11/25/2020 23:15:03'!
initializeWithDebitFromSimulationBlock: aBlockToExecuteOnDebitFrom
	
	messages := OrderedCollection new.
	blockToExecuteOnDebitFrom := aBlockToExecuteOnDebitFrom .! !
!MerchantProcessorDouble class methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 23:15:03' prior: 50878816!
with: aBlockForDebitFrom

	^self new initializeWithDebitFromSimulationBlock: aBlockForDebitFrom ! !

!methodRemoval: MerchantProcessorDouble #initializeWith: stamp: 'NNH 11/25/2020 23:15:03'!
initializeWith: aBlockToExecuteOnDebitFrom
	
	messages := OrderedCollection new.
	blockToExecuteOnDebitFrom := aBlockToExecuteOnDebitFrom .!
!MerchantProcessorDouble class methodsFor: 'instance creation' stamp: 'NNH 11/25/2020 23:16:03'!
withDebitFromSimulationBlock: aBlockForDebitFrom

	^self new initializeWithDebitFromSimulationBlock: aBlockForDebitFrom ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 23:16:03' prior: 50883640!
test05CashierSuccessfullyProcessesManyElementsCart
	
	| aCashier aMerchantProcessorDouble ticket |
	
	aMerchantProcessorDouble := MerchantProcessorDouble withDebitFromSimulationBlock: [ :aTotal :aCard | 
		self assert: aTotal equals: 175.
		self assert: aCard = validCreditCard. 
		].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: threeBookCatalogue .
	
	ticket := aCashier checkOut: threeBookCart with: validCreditCard .

	self assert: ticket total equals: 175 .
	self assert: ( ticket products hasEqualElements: { harryPotterBook . lordOfTheRingsBook . ageOfEmpiresBook } ) .
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 23:16:03' prior: 50883596!
test04CashierSuccessfullyProcessesOneElementCart
	
	| aCashier aMerchantProcessorDouble ticket |
	
	aMerchantProcessorDouble := MerchantProcessorDouble withDebitFromSimulationBlock: [ :aTotal :aCard | 
		self assert: aTotal equals: 100.
		self assert: aCard = validCreditCard. 
		].
	
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .
		
	ticket := aCashier checkOut: harryPotterCart with: validCreditCard .

	self assert: ticket total equals: 100 .
	self assert: ( ticket products hasEqualElements: { harryPotterBook } ) .
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 23:16:03' prior: 50883754!
test06CashierHandlesMerchantProcessorException
	
	| aCashier aMerchantProcessorDouble ticket |
	

	aMerchantProcessorDouble := MerchantProcessorDouble withDebitFromSimulationBlock: [ :aTotal :aCard | 
		self error: 'Credit card is stolen'.
		].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .	

	self should: [ ticket := aCashier checkOut: harryPotterCart with: validCreditCard ]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: 'Credit card is stolen' .
		self assert: anError receiver equals: aCashier .
		self assert: ticket isNil .
		 ].
	
	

! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 23:16:03' prior: 50880425 overrides: 16927572!
setUp
	
	harryPotterBook := #HarryPotter.
	lordOfTheRingsBook := #LordOfTheRings.
	ageOfEmpiresBook := #AgeOfEmpires.
	
	harryPotterCatalogue := Catalogue new.
	harryPotterCatalogue add: harryPotterBook withPrice: 100.
	threeBookCatalogue := Catalogue new.
	threeBookCatalogue add: harryPotterBook withPrice: 100;
					add: lordOfTheRingsBook withPrice: 50;
					add: ageOfEmpiresBook withPrice: 25.
					
	emptyCart := Cart withCatalogue: Catalogue new.	
	harryPotterCart := Cart withCatalogue: harryPotterCatalogue .
	harryPotterCart addToCart: harryPotterBook withOccurrences: 1.	
	threeBookCart := Cart withCatalogue: threeBookCatalogue .
	threeBookCart addToCart: harryPotterBook withOccurrences: 1.
	threeBookCart addToCart: lordOfTheRingsBook withOccurrences: 1.
	threeBookCart addToCart: ageOfEmpiresBook withOccurrences: 1.
					
	validCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	expiredCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  

	emptyMerchantProcessorDouble := MerchantProcessorDouble withDebitFromSimulationBlock: [:aTotal :aCard | ].
! !

!methodRemoval: MerchantProcessorDouble class #with: stamp: 'NNH 11/25/2020 23:16:03'!
with: aBlockForDebitFrom

	^self new initializeWithDebitFromSimulationBlock: aBlockForDebitFrom !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/25/2020 23:16:09'!
PASSED!

!testRun: #CartTest #test02AProductAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/25/2020 23:16:09'!
PASSED!

!testRun: #CartTest #test03ManyProductsAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/25/2020 23:16:09'!
PASSED!

!testRun: #CartTest #test04AProductShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/25/2020 23:16:09'!
PASSED!

!testRun: #CartTest #test05AProductAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/25/2020 23:16:09'!
PASSED!

!testRun: #CartTest #test06AProductShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/25/2020 23:16:09'!
PASSED!

!testRun: #CartTest #test07AProductShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/25/2020 23:16:09'!
PASSED!

!testRun: #CartTest #test08ExternallyAddingProductToCartListShouldNotModifyCart stamp: 'NNH 11/25/2020 23:16:09'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 23:16:09'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 23:16:09'!
PASSED!

!testRun: #CashierTest #test03CashierShouldUseMerchantProcessorOnValidConditions stamp: 'NNH 11/25/2020 23:16:09'!
PASSED!

!testRun: #CashierTest #test04CashierSuccessfullyProcessesOneElementCart stamp: 'NNH 11/25/2020 23:16:09'!
PASSED!

!testRun: #CashierTest #test05CashierSuccessfullyProcessesManyElementsCart stamp: 'NNH 11/25/2020 23:16:09'!
PASSED!

!testRun: #CashierTest #test06CashierHandlesMerchantProcessorException stamp: 'NNH 11/25/2020 23:16:09'!
PASSED!

!testRun: #CashierTest #test08CashierShouldNotProcessProductWhenItIsNotInCatalogue stamp: 'NNH 11/25/2020 23:16:09'!
PASSED!

!testRun: #CatalogueTest #test01EmptyCatalogueContainsNoProduct stamp: 'NNH 11/25/2020 23:16:09'!
PASSED!

!testRun: #CatalogueTest #test02OneProductCatalogueContainsItsOnlyElement stamp: 'NNH 11/25/2020 23:16:09'!
PASSED!

!testRun: #CatalogueTest #test03ACatalogueWithManyProductsIncludesAllOfThem stamp: 'NNH 11/25/2020 23:16:09'!
PASSED!

!testRun: #CatalogueTest #test04ShouldNotAddAProductWithNonPositivePrice stamp: 'NNH 11/25/2020 23:16:09'!
PASSED!

!testRun: #CreditCardTest #test01ValidCardRetrievesPropertiesCorrectly stamp: 'NNH 11/25/2020 23:16:09'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/25/2020 23:16:09'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/25/2020 23:16:09'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/25/2020 23:16:09'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/25/2020 23:16:09'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'NNH 11/25/2020 23:16:09'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/25/2020 23:16:09'!
PASSED!
!MerchantProcessorDouble class methodsFor: 'instance creation' stamp: 'NNH 11/25/2020 23:16:45'!
withSimulationBlockForDebitFrom: aBlockForDebitFrom

	^self new initializeWithDebitFromSimulationBlock: aBlockForDebitFrom ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 23:16:45' prior: 50883853!
test05CashierSuccessfullyProcessesManyElementsCart
	
	| aCashier aMerchantProcessorDouble ticket |
	
	aMerchantProcessorDouble := MerchantProcessorDouble withSimulationBlockForDebitFrom: [ :aTotal :aCard | 
		self assert: aTotal equals: 175.
		self assert: aCard = validCreditCard. 
		].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: threeBookCatalogue .
	
	ticket := aCashier checkOut: threeBookCart with: validCreditCard .

	self assert: ticket total equals: 175 .
	self assert: ( ticket products hasEqualElements: { harryPotterBook . lordOfTheRingsBook . ageOfEmpiresBook } ) .
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 23:16:45' prior: 50883921 overrides: 16927572!
setUp
	
	harryPotterBook := #HarryPotter.
	lordOfTheRingsBook := #LordOfTheRings.
	ageOfEmpiresBook := #AgeOfEmpires.
	
	harryPotterCatalogue := Catalogue new.
	harryPotterCatalogue add: harryPotterBook withPrice: 100.
	threeBookCatalogue := Catalogue new.
	threeBookCatalogue add: harryPotterBook withPrice: 100;
					add: lordOfTheRingsBook withPrice: 50;
					add: ageOfEmpiresBook withPrice: 25.
					
	emptyCart := Cart withCatalogue: Catalogue new.	
	harryPotterCart := Cart withCatalogue: harryPotterCatalogue .
	harryPotterCart addToCart: harryPotterBook withOccurrences: 1.	
	threeBookCart := Cart withCatalogue: threeBookCatalogue .
	threeBookCart addToCart: harryPotterBook withOccurrences: 1.
	threeBookCart addToCart: lordOfTheRingsBook withOccurrences: 1.
	threeBookCart addToCart: ageOfEmpiresBook withOccurrences: 1.
					
	validCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	expiredCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  

	emptyMerchantProcessorDouble := MerchantProcessorDouble withSimulationBlockForDebitFrom: [:aTotal :aCard | ].
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 23:16:45' prior: 50883876!
test04CashierSuccessfullyProcessesOneElementCart
	
	| aCashier aMerchantProcessorDouble ticket |
	
	aMerchantProcessorDouble := MerchantProcessorDouble withSimulationBlockForDebitFrom: [ :aTotal :aCard | 
		self assert: aTotal equals: 100.
		self assert: aCard = validCreditCard. 
		].
	
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .
		
	ticket := aCashier checkOut: harryPotterCart with: validCreditCard .

	self assert: ticket total equals: 100 .
	self assert: ( ticket products hasEqualElements: { harryPotterBook } ) .
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 23:16:45' prior: 50883897!
test06CashierHandlesMerchantProcessorException
	
	| aCashier aMerchantProcessorDouble ticket |
	

	aMerchantProcessorDouble := MerchantProcessorDouble withSimulationBlockForDebitFrom: [ :aTotal :aCard | 
		self error: 'Credit card is stolen'.
		].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .	

	self should: [ ticket := aCashier checkOut: harryPotterCart with: validCreditCard ]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: 'Credit card is stolen' .
		self assert: anError receiver equals: aCashier .
		self assert: ticket isNil .
		 ].
	
	

! !

!methodRemoval: MerchantProcessorDouble class #withDebitFromSimulationBlock: stamp: 'NNH 11/25/2020 23:16:45'!
withDebitFromSimulationBlock: aBlockForDebitFrom

	^self new initializeWithDebitFromSimulationBlock: aBlockForDebitFrom !
!MerchantProcessorDouble methodsFor: 'initialization' stamp: 'NNH 11/25/2020 23:17:03'!
initializeWithSimulationBlockForDebitFrom: aBlockToExecuteOnDebitFrom
	
	messages := OrderedCollection new.
	blockToExecuteOnDebitFrom := aBlockToExecuteOnDebitFrom .! !
!MerchantProcessorDouble class methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 23:17:03' prior: 50884059!
withSimulationBlockForDebitFrom: aBlockForDebitFrom

	^self new initializeWithSimulationBlockForDebitFrom: aBlockForDebitFrom ! !

!methodRemoval: MerchantProcessorDouble #initializeWithDebitFromSimulationBlock: stamp: 'NNH 11/25/2020 23:17:03'!
initializeWithDebitFromSimulationBlock: aBlockToExecuteOnDebitFrom
	
	messages := OrderedCollection new.
	blockToExecuteOnDebitFrom := aBlockToExecuteOnDebitFrom .!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/25/2020 23:17:08'!
PASSED!

!testRun: #CartTest #test02AProductAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/25/2020 23:17:08'!
PASSED!

!testRun: #CartTest #test03ManyProductsAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/25/2020 23:17:08'!
PASSED!

!testRun: #CartTest #test04AProductShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/25/2020 23:17:08'!
PASSED!

!testRun: #CartTest #test05AProductAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/25/2020 23:17:08'!
PASSED!

!testRun: #CartTest #test06AProductShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/25/2020 23:17:08'!
PASSED!

!testRun: #CartTest #test07AProductShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/25/2020 23:17:08'!
PASSED!

!testRun: #CartTest #test08ExternallyAddingProductToCartListShouldNotModifyCart stamp: 'NNH 11/25/2020 23:17:08'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 23:17:08'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 23:17:08'!
PASSED!

!testRun: #CashierTest #test03CashierShouldUseMerchantProcessorOnValidConditions stamp: 'NNH 11/25/2020 23:17:08'!
PASSED!

!testRun: #CashierTest #test04CashierSuccessfullyProcessesOneElementCart stamp: 'NNH 11/25/2020 23:17:08'!
PASSED!

!testRun: #CashierTest #test05CashierSuccessfullyProcessesManyElementsCart stamp: 'NNH 11/25/2020 23:17:08'!
PASSED!

!testRun: #CashierTest #test06CashierHandlesMerchantProcessorException stamp: 'NNH 11/25/2020 23:17:08'!
PASSED!

!testRun: #CashierTest #test08CashierShouldNotProcessProductWhenItIsNotInCatalogue stamp: 'NNH 11/25/2020 23:17:08'!
PASSED!

!testRun: #CatalogueTest #test01EmptyCatalogueContainsNoProduct stamp: 'NNH 11/25/2020 23:17:08'!
PASSED!

!testRun: #CatalogueTest #test02OneProductCatalogueContainsItsOnlyElement stamp: 'NNH 11/25/2020 23:17:08'!
PASSED!

!testRun: #CatalogueTest #test03ACatalogueWithManyProductsIncludesAllOfThem stamp: 'NNH 11/25/2020 23:17:08'!
PASSED!

!testRun: #CatalogueTest #test04ShouldNotAddAProductWithNonPositivePrice stamp: 'NNH 11/25/2020 23:17:08'!
PASSED!

!testRun: #CreditCardTest #test01ValidCardRetrievesPropertiesCorrectly stamp: 'NNH 11/25/2020 23:17:08'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/25/2020 23:17:08'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/25/2020 23:17:08'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/25/2020 23:17:08'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/25/2020 23:17:08'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'NNH 11/25/2020 23:17:08'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/25/2020 23:17:08'!
PASSED!
!MerchantProcessorDouble class methodsFor: 'instance creation' stamp: 'NNH 11/25/2020 23:17:57' prior: 50884191!
withSimulationBlockForDebitFrom: aBlockToExecuteOnDebitFrom

	^self new initializeWithSimulationBlockForDebitFrom: aBlockToExecuteOnDebitFrom ! !
!CashierTest methodsFor: 'setUp / tearDown' stamp: 'NNH 11/25/2020 23:18:19' prior: 50884089 overrides: 16927572!
setUp
	
	harryPotterBook := #HarryPotter.
	lordOfTheRingsBook := #LordOfTheRings.
	ageOfEmpiresBook := #AgeOfEmpires.
	
	harryPotterCatalogue := Catalogue new.
	harryPotterCatalogue add: harryPotterBook withPrice: 100.
	threeBookCatalogue := Catalogue new.
	threeBookCatalogue add: harryPotterBook withPrice: 100;
					add: lordOfTheRingsBook withPrice: 50;
					add: ageOfEmpiresBook withPrice: 25.
					
	emptyCart := Cart withCatalogue: Catalogue new.	
	harryPotterCart := Cart withCatalogue: harryPotterCatalogue .
	harryPotterCart addToCart: harryPotterBook withOccurrences: 1.	
	threeBookCart := Cart withCatalogue: threeBookCatalogue .
	threeBookCart addToCart: harryPotterBook withOccurrences: 1.
	threeBookCart addToCart: lordOfTheRingsBook withOccurrences: 1.
	threeBookCart addToCart: ageOfEmpiresBook withOccurrences: 1.
					
	validCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	expiredCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  

	emptyMerchantProcessorDouble := MerchantProcessorDouble new.
! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/25/2020 23:18:24'!
PASSED!

!testRun: #CartTest #test02AProductAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/25/2020 23:18:24'!
PASSED!

!testRun: #CartTest #test03ManyProductsAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/25/2020 23:18:24'!
PASSED!

!testRun: #CartTest #test04AProductShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/25/2020 23:18:24'!
PASSED!

!testRun: #CartTest #test05AProductAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/25/2020 23:18:24'!
PASSED!

!testRun: #CartTest #test06AProductShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/25/2020 23:18:24'!
PASSED!

!testRun: #CartTest #test07AProductShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/25/2020 23:18:24'!
PASSED!

!testRun: #CartTest #test08ExternallyAddingProductToCartListShouldNotModifyCart stamp: 'NNH 11/25/2020 23:18:24'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 23:18:24'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 23:18:24'!
PASSED!

!testRun: #CashierTest #test03CashierShouldUseMerchantProcessorOnValidConditions stamp: 'NNH 11/25/2020 23:18:24'!
PASSED!

!testRun: #CashierTest #test04CashierSuccessfullyProcessesOneElementCart stamp: 'NNH 11/25/2020 23:18:24'!
PASSED!

!testRun: #CashierTest #test05CashierSuccessfullyProcessesManyElementsCart stamp: 'NNH 11/25/2020 23:18:24'!
PASSED!

!testRun: #CashierTest #test06CashierHandlesMerchantProcessorException stamp: 'NNH 11/25/2020 23:18:24'!
PASSED!

!testRun: #CashierTest #test08CashierShouldNotProcessProductWhenItIsNotInCatalogue stamp: 'NNH 11/25/2020 23:18:24'!
PASSED!

!testRun: #CatalogueTest #test01EmptyCatalogueContainsNoProduct stamp: 'NNH 11/25/2020 23:18:24'!
PASSED!

!testRun: #CatalogueTest #test02OneProductCatalogueContainsItsOnlyElement stamp: 'NNH 11/25/2020 23:18:24'!
PASSED!

!testRun: #CatalogueTest #test03ACatalogueWithManyProductsIncludesAllOfThem stamp: 'NNH 11/25/2020 23:18:24'!
PASSED!

!testRun: #CatalogueTest #test04ShouldNotAddAProductWithNonPositivePrice stamp: 'NNH 11/25/2020 23:18:24'!
PASSED!

!testRun: #CreditCardTest #test01ValidCardRetrievesPropertiesCorrectly stamp: 'NNH 11/25/2020 23:18:24'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/25/2020 23:18:24'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/25/2020 23:18:24'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/25/2020 23:18:24'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/25/2020 23:18:24'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'NNH 11/25/2020 23:18:24'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/25/2020 23:18:24'!
PASSED!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'NNH 11/25/2020 23:20:53'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'harryPotterBook lordOfTheRingsBook ageOfEmpiresBook harryPotterCatalogue threeBookCatalogue simpleMerchantProcessorDouble validCreditCard expiredCreditCard emptyCart harryPotterCart threeBookCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 23:20:53' prior: 50882138!
test08CashierShouldNotProcessProductWhenItIsNotInCatalogue
	
	| aCashier |


	aCashier := Cashier withProcessor: simpleMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	self should: [ aCashier checkOut: threeBookCart with: validCreditCard ]
	raise: Error
	withMessageText: Cashier productInCartIsNotForSaleErrorDescription .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 23:20:53' prior: 50884309 overrides: 16927572!
setUp
	
	harryPotterBook := #HarryPotter.
	lordOfTheRingsBook := #LordOfTheRings.
	ageOfEmpiresBook := #AgeOfEmpires.
	
	harryPotterCatalogue := Catalogue new.
	harryPotterCatalogue add: harryPotterBook withPrice: 100.
	threeBookCatalogue := Catalogue new.
	threeBookCatalogue add: harryPotterBook withPrice: 100;
					add: lordOfTheRingsBook withPrice: 50;
					add: ageOfEmpiresBook withPrice: 25.
					
	emptyCart := Cart withCatalogue: Catalogue new.	
	harryPotterCart := Cart withCatalogue: harryPotterCatalogue .
	harryPotterCart addToCart: harryPotterBook withOccurrences: 1.	
	threeBookCart := Cart withCatalogue: threeBookCatalogue .
	threeBookCart addToCart: harryPotterBook withOccurrences: 1.
	threeBookCart addToCart: lordOfTheRingsBook withOccurrences: 1.
	threeBookCart addToCart: ageOfEmpiresBook withOccurrences: 1.
					
	validCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: January, 2021 owner: 'Hern�n'.  
	expiredCreditCard := CreditCard withNumber: 4444444444444444 expirationDate: October, 2020 owner: 'Hern�n'.  

	simpleMerchantProcessorDouble := MerchantProcessorDouble new.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 23:20:54' prior: 50881889!
test03CashierShouldUseMerchantProcessorOnValidConditions
	
	| aCashier |
		
	aCashier := Cashier withProcessor: simpleMerchantProcessorDouble catalogue: harryPotterCatalogue .
	
	aCashier checkOut: harryPotterCart with: validCreditCard.

	self assert: (simpleMerchantProcessorDouble messagesRecieved hasEqualElements: { #debit:from:. } ) .
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 23:20:54' prior: 50883445!
test01CashierShouldNotDispatchEmptyCart
	
	| aCashier |
	
	aCashier := Cashier withProcessor: simpleMerchantProcessorDouble catalogue: Catalogue new.
	
	self should: [ aCashier checkOut: emptyCart with: validCreditCard ]
	raise: Error
	withMessageText: Cashier canNotCheckOutAnEmptyCartErrorDescription .
	
	self deny: simpleMerchantProcessorDouble receivedAMessage.
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 23:20:54' prior: 50883460!
test02CashierShouldNotDispatchExpiredCreditCard
	
	| aCashier |
	
	aCashier := Cashier withProcessor: simpleMerchantProcessorDouble catalogue: Catalogue new.
	
	self should: [ aCashier checkOut: emptyCart with: expiredCreditCard ]
	raise: Error
	withMessageText: Cashier creditCardHasExpiredErrorDescription.

	self deny: simpleMerchantProcessorDouble receivedAMessage.
! !
!CashierTest methodsFor: 'tests' stamp: 'NNH 11/25/2020 23:27:05'!
merchantProcessorDoubleToTestCollaboratorsFor: anExpectedTotal
		
	^ MerchantProcessorDouble withSimulationBlockForDebitFrom: [ :aTotal :aCard | 
		self assert: aTotal equals: anExpectedTotal.
		self assert: aCard = validCreditCard. 
		].
	
! !
!CashierTest methodsFor: 'tests' stamp: 'NNH 11/25/2020 23:28:16' prior: 50884129!
test04CashierSuccessfullyProcessesOneElementCart
	
	| aCashier aMerchantProcessorDouble ticket |
	
	aMerchantProcessorDouble := self merchantProcessorDoubleToTestCollaboratorsFor: 100.
	
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .
		
	ticket := aCashier checkOut: harryPotterCart with: validCreditCard .

	self assert: ticket total equals: 100 .
	self assert: ( ticket products hasEqualElements: { harryPotterBook } ) .
! !
!CashierTest methodsFor: 'tests' stamp: 'NNH 11/25/2020 23:28:27' prior: 50884066!
test05CashierSuccessfullyProcessesManyElementsCart
	
	| aCashier aMerchantProcessorDouble ticket |
	
		aMerchantProcessorDouble := self merchantProcessorDoubleToTestCollaboratorsFor: 175.

		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: threeBookCatalogue .
	
	ticket := aCashier checkOut: threeBookCart with: validCreditCard .

	self assert: ticket total equals: 175 .
	self assert: ( ticket products hasEqualElements: { harryPotterBook . lordOfTheRingsBook . ageOfEmpiresBook } ) .
! !
!CashierTest methodsFor: 'tests' stamp: 'NNH 11/25/2020 23:28:32' prior: 50884579!
test05CashierSuccessfullyProcessesManyElementsCart
	
	| aCashier aMerchantProcessorDouble ticket |
	
	aMerchantProcessorDouble := self merchantProcessorDoubleToTestCollaboratorsFor: 175.

	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: threeBookCatalogue .
	
	ticket := aCashier checkOut: threeBookCart with: validCreditCard .

	self assert: ticket total equals: 175 .
	self assert: ( ticket products hasEqualElements: { harryPotterBook . lordOfTheRingsBook . ageOfEmpiresBook } ) .
! !
!CashierTest methodsFor: 'tests' stamp: 'NNH 11/25/2020 23:28:57' prior: 50884561!
test04CashierSuccessfullyProcessesOneElementCart
	
	| aCashier aMerchantProcessorDouble invoice |
	
	aMerchantProcessorDouble := self merchantProcessorDoubleToTestCollaboratorsFor: 100.
	
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .
		
	invoice := aCashier checkOut: harryPotterCart with: validCreditCard .

	self assert: invoice total equals: 100 .
	self assert: ( invoice products hasEqualElements: { harryPotterBook } ) .
! !
!CashierTest methodsFor: 'tests' stamp: 'NNH 11/25/2020 23:29:37' prior: 50884617!
test04CashierSuccessfullyProcessesOneElementCart
	
	| aCashier aMerchantProcessorDouble receipt |
	
	aMerchantProcessorDouble := self merchantProcessorDoubleToTestCollaboratorsFor: 100.
	
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .
		
	receipt := aCashier checkOut: harryPotterCart with: validCreditCard .

	self assert: receipt total equals: 100 .
	self assert: ( receipt products hasEqualElements: { harryPotterBook } ) .
! !
!CashierTest methodsFor: 'tests' stamp: 'NNH 11/25/2020 23:29:48' prior: 50884598!
test05CashierSuccessfullyProcessesManyElementsCart
	
	| aCashier aMerchantProcessorDouble receipt |
	
	aMerchantProcessorDouble := self merchantProcessorDoubleToTestCollaboratorsFor: 175.

	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: threeBookCatalogue .
	
	receipt := aCashier checkOut: threeBookCart with: validCreditCard .

	self assert: receipt total equals: 175 .
	self assert: ( receipt products hasEqualElements: { harryPotterBook . lordOfTheRingsBook . ageOfEmpiresBook } ) .
! !
!CashierTest methodsFor: 'tests' stamp: 'NNH 11/25/2020 23:29:55' prior: 50884151!
test06CashierHandlesMerchantProcessorException
	
	| aCashier aMerchantProcessorDouble receipt |
	

	aMerchantProcessorDouble := MerchantProcessorDouble withSimulationBlockForDebitFrom: [ :aTotal :aCard | 
		self error: 'Credit card is stolen'.
		].
		
	aCashier := Cashier withProcessor: aMerchantProcessorDouble catalogue: harryPotterCatalogue .	

	self should: [ receipt := aCashier checkOut: harryPotterCart with: validCreditCard ]
	raise: Error
	withExceptionDo: [ :anError |
		self assert: anError messageText equals: 'Credit card is stolen' .
		self assert: anError receiver equals: aCashier .
		self assert: receipt isNil .
		 ].
	
	

! !

!classRenamed: #Invoice as: #Receipt stamp: 'NNH 11/25/2020 23:30:06'!
Smalltalk renameClassNamed: #Invoice as: #Receipt!
!Cashier methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 23:30:06' prior: 50883572!
checkOut: aCart with: aCreditCard
	
	| total |
	
	self assertCard: aCreditCard canCheckOut: aCart .
	
	total := aCart listCart sum: [ :aProduct | catalogue priceOf: aProduct ].
	
	[ merchantProcessor debit: total from: aCreditCard ] 
		on: Error 
		do: [:anError | self error: anError messageText		] .

	^ Receipt total: total products: aCart listCart .! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/25/2020 23:30:14'!
PASSED!

!testRun: #CartTest #test02AProductAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/25/2020 23:30:14'!
PASSED!

!testRun: #CartTest #test03ManyProductsAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/25/2020 23:30:14'!
PASSED!

!testRun: #CartTest #test04AProductShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/25/2020 23:30:14'!
PASSED!

!testRun: #CartTest #test05AProductAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/25/2020 23:30:14'!
PASSED!

!testRun: #CartTest #test06AProductShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/25/2020 23:30:14'!
PASSED!

!testRun: #CartTest #test07AProductShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/25/2020 23:30:14'!
PASSED!

!testRun: #CartTest #test08ExternallyAddingProductToCartListShouldNotModifyCart stamp: 'NNH 11/25/2020 23:30:14'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 23:30:14'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 23:30:14'!
PASSED!

!testRun: #CashierTest #test03CashierShouldUseMerchantProcessorOnValidConditions stamp: 'NNH 11/25/2020 23:30:14'!
PASSED!

!testRun: #CashierTest #test04CashierSuccessfullyProcessesOneElementCart stamp: 'NNH 11/25/2020 23:30:14'!
PASSED!

!testRun: #CashierTest #test05CashierSuccessfullyProcessesManyElementsCart stamp: 'NNH 11/25/2020 23:30:14'!
PASSED!

!testRun: #CashierTest #test06CashierHandlesMerchantProcessorException stamp: 'NNH 11/25/2020 23:30:14'!
PASSED!

!testRun: #CashierTest #test08CashierShouldNotProcessProductWhenItIsNotInCatalogue stamp: 'NNH 11/25/2020 23:30:14'!
PASSED!

!testRun: #CatalogueTest #test01EmptyCatalogueContainsNoProduct stamp: 'NNH 11/25/2020 23:30:14'!
PASSED!

!testRun: #CatalogueTest #test02OneProductCatalogueContainsItsOnlyElement stamp: 'NNH 11/25/2020 23:30:14'!
PASSED!

!testRun: #CatalogueTest #test03ACatalogueWithManyProductsIncludesAllOfThem stamp: 'NNH 11/25/2020 23:30:14'!
PASSED!

!testRun: #CatalogueTest #test04ShouldNotAddAProductWithNonPositivePrice stamp: 'NNH 11/25/2020 23:30:14'!
PASSED!

!testRun: #CreditCardTest #test01ValidCardRetrievesPropertiesCorrectly stamp: 'NNH 11/25/2020 23:30:14'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/25/2020 23:30:14'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/25/2020 23:30:14'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/25/2020 23:30:14'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/25/2020 23:30:14'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'NNH 11/25/2020 23:30:14'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/25/2020 23:30:14'!
PASSED!

!methodRemoval: MerchantProcessorDouble #receivedMessage: stamp: 'NNH 11/25/2020 23:33:59'!
receivedMessage: aMessage

	^ messages includes: aMessage !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/25/2020 23:34:20'!
PASSED!

!testRun: #CartTest #test02AProductAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/25/2020 23:34:20'!
PASSED!

!testRun: #CartTest #test03ManyProductsAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/25/2020 23:34:20'!
PASSED!

!testRun: #CartTest #test04AProductShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/25/2020 23:34:20'!
PASSED!

!testRun: #CartTest #test05AProductAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/25/2020 23:34:20'!
PASSED!

!testRun: #CartTest #test06AProductShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/25/2020 23:34:20'!
PASSED!

!testRun: #CartTest #test07AProductShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/25/2020 23:34:20'!
PASSED!

!testRun: #CartTest #test08ExternallyAddingProductToCartListShouldNotModifyCart stamp: 'NNH 11/25/2020 23:34:20'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 23:34:20'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 23:34:21'!
PASSED!

!testRun: #CashierTest #test03CashierShouldUseMerchantProcessorOnValidConditions stamp: 'NNH 11/25/2020 23:34:21'!
PASSED!

!testRun: #CashierTest #test04CashierSuccessfullyProcessesOneElementCart stamp: 'NNH 11/25/2020 23:34:21'!
PASSED!

!testRun: #CashierTest #test05CashierSuccessfullyProcessesManyElementsCart stamp: 'NNH 11/25/2020 23:34:21'!
PASSED!

!testRun: #CashierTest #test06CashierHandlesMerchantProcessorException stamp: 'NNH 11/25/2020 23:34:21'!
PASSED!

!testRun: #CashierTest #test08CashierShouldNotProcessProductWhenItIsNotInCatalogue stamp: 'NNH 11/25/2020 23:34:21'!
PASSED!

!testRun: #CatalogueTest #test01EmptyCatalogueContainsNoProduct stamp: 'NNH 11/25/2020 23:34:21'!
PASSED!

!testRun: #CatalogueTest #test02OneProductCatalogueContainsItsOnlyElement stamp: 'NNH 11/25/2020 23:34:21'!
PASSED!

!testRun: #CatalogueTest #test03ACatalogueWithManyProductsIncludesAllOfThem stamp: 'NNH 11/25/2020 23:34:21'!
PASSED!

!testRun: #CatalogueTest #test04ShouldNotAddAProductWithNonPositivePrice stamp: 'NNH 11/25/2020 23:34:21'!
PASSED!

!testRun: #CreditCardTest #test01ValidCardRetrievesPropertiesCorrectly stamp: 'NNH 11/25/2020 23:34:21'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/25/2020 23:34:21'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/25/2020 23:34:21'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/25/2020 23:34:21'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/25/2020 23:34:21'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'NNH 11/25/2020 23:34:21'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/25/2020 23:34:21'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'NNH 11/25/2020 23:36:27'!
PASSED!

!testRun: #CartTest #test02AProductAddedToCartIsSuccessfullyAdded stamp: 'NNH 11/25/2020 23:36:27'!
PASSED!

!testRun: #CartTest #test03ManyProductsAddedToCartAreSuccessfullyAdded stamp: 'NNH 11/25/2020 23:36:27'!
PASSED!

!testRun: #CartTest #test04AProductShouldNotBeAddedWhenNotForSale stamp: 'NNH 11/25/2020 23:36:27'!
PASSED!

!testRun: #CartTest #test05AProductAddedMoreThanOnceIsSuccessfullyAddedMoreThanOnce stamp: 'NNH 11/25/2020 23:36:27'!
PASSED!

!testRun: #CartTest #test06AProductShouldNotBeAddedWithNonIntegerQuantity stamp: 'NNH 11/25/2020 23:36:27'!
PASSED!

!testRun: #CartTest #test07AProductShouldNotBeAddedWithNonPositiveQuantity stamp: 'NNH 11/25/2020 23:36:27'!
PASSED!

!testRun: #CartTest #test08ExternallyAddingProductToCartListShouldNotModifyCart stamp: 'NNH 11/25/2020 23:36:27'!
PASSED!

!testRun: #CashierTest #test01CashierShouldNotDispatchEmptyCart stamp: 'NNH 11/25/2020 23:36:27'!
PASSED!

!testRun: #CashierTest #test02CashierShouldNotDispatchExpiredCreditCard stamp: 'NNH 11/25/2020 23:36:27'!
PASSED!

!testRun: #CashierTest #test03CashierShouldUseMerchantProcessorOnValidConditions stamp: 'NNH 11/25/2020 23:36:27'!
PASSED!

!testRun: #CashierTest #test04CashierSuccessfullyProcessesOneElementCart stamp: 'NNH 11/25/2020 23:36:27'!
PASSED!

!testRun: #CashierTest #test05CashierSuccessfullyProcessesManyElementsCart stamp: 'NNH 11/25/2020 23:36:27'!
PASSED!

!testRun: #CashierTest #test06CashierHandlesMerchantProcessorException stamp: 'NNH 11/25/2020 23:36:27'!
PASSED!

!testRun: #CashierTest #test08CashierShouldNotProcessProductWhenItIsNotInCatalogue stamp: 'NNH 11/25/2020 23:36:27'!
PASSED!

!testRun: #CatalogueTest #test01EmptyCatalogueContainsNoProduct stamp: 'NNH 11/25/2020 23:36:27'!
PASSED!

!testRun: #CatalogueTest #test02OneProductCatalogueContainsItsOnlyElement stamp: 'NNH 11/25/2020 23:36:27'!
PASSED!

!testRun: #CatalogueTest #test03ACatalogueWithManyProductsIncludesAllOfThem stamp: 'NNH 11/25/2020 23:36:27'!
PASSED!

!testRun: #CatalogueTest #test04ShouldNotAddAProductWithNonPositivePrice stamp: 'NNH 11/25/2020 23:36:27'!
PASSED!

!testRun: #CreditCardTest #test01ValidCardRetrievesPropertiesCorrectly stamp: 'NNH 11/25/2020 23:36:27'!
PASSED!

!testRun: #CreditCardTest #test02CardNumberShouldNotHaveLessThan16Digits stamp: 'NNH 11/25/2020 23:36:27'!
PASSED!

!testRun: #CreditCardTest #test03CardExpirationDateShouldBeAMonthOfAnYear stamp: 'NNH 11/25/2020 23:36:27'!
PASSED!

!testRun: #CreditCardTest #test04CardNumberShouldBeAnInteger stamp: 'NNH 11/25/2020 23:36:27'!
PASSED!

!testRun: #CreditCardTest #test05CardNumberShouldNotHaveMoreThan16Digits stamp: 'NNH 11/25/2020 23:36:27'!
PASSED!

!testRun: #CreditCardTest #test06OwnerNameShouldNotBeEmpty stamp: 'NNH 11/25/2020 23:36:27'!
PASSED!

!testRun: #CreditCardTest #test07OwnerNameShouldNotBeBlank stamp: 'NNH 11/25/2020 23:36:27'!
PASSED!
!Catalogue methodsFor: 'operations' stamp: 'NNH 11/25/2020 23:38:37'!
signalCanNotAddProductWithNonPositivePrice

	^ self error: self class canNotAddProductWithNonPositivePrice! !
!Catalogue methodsFor: 'operations' stamp: 'NNH 11/25/2020 23:38:37' prior: 50878657!
add: aProduct withPrice: aPrice 

	aPrice <= 0 ifTrue: [ self signalCanNotAddProductWithNonPositivePrice ].
	products add: aProduct -> aPrice .! !
!Catalogue class methodsFor: 'error descriptions' stamp: 'NNH 11/25/2020 23:39:00'!
canNotAddProductWithNonPositivePriceErrorDescription
	
	^ 'Can not add product with a non positive price'. ! !
!Catalogue methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 23:39:00' prior: 50884994!
signalCanNotAddProductWithNonPositivePrice

	^ self error: self class canNotAddProductWithNonPositivePriceErrorDescription! !
!CatalogueTest methodsFor: 'as yet unclassified' stamp: 'NNH 11/25/2020 23:39:00' prior: 50881813!
test04ShouldNotAddAProductWithNonPositivePrice
	
	| aCatalogue |
	
	aCatalogue := Catalogue new.
	
	self should: [ aCatalogue add: harryPotter withPrice: 0 ]
	raise: Error
	withMessageText: Catalogue canNotAddProductWithNonPositivePriceErrorDescription.
	
	self deny: ( aCatalogue includes: harryPotter ) .
! !

!methodRemoval: Catalogue class #canNotAddProductWithNonPositivePrice stamp: 'NNH 11/25/2020 23:39:00'!
canNotAddProductWithNonPositivePrice
	
	^ 'Can not add product with a non positive price'. !

----SNAPSHOT----(25 November 2020 23:42:36) CuisUniversity-4384.image priorSource: 17662018!

----QUIT----(25 November 2020 23:42:39) CuisUniversity-4384.image priorSource: 17708540!