----End fileIn of /home/fede/Documentos/Facultad/Inge1/EjerciciosParaEntregar/2020-2c/20-TusLibros/Iteracion1/TusLibros-18.st----!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'fr 11/19/2020 18:55:09'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'fr 11/19/2020 18:55:31'!
test01

	| cart |
	cart _ Cart acceptingItemsOf: Array new.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'fr 11/19/2020 19:00:50'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 19:00:45' prior: 50867966!
test01

	| cart |
	cart _ Cart acceptingItemsOf: Array new.
	
	self  should: [Cashier for: cart]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckoutWithEmptyCartErrorDescription
	
! !

!testRun: #CashierTest #test01 stamp: 'fr 11/19/2020 19:00:55'!
ERROR!
!Cashier class methodsFor: 'error description' stamp: 'fr 11/19/2020 19:01:05'!
canNotCheckoutWithEmptyCartErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error description' stamp: 'fr 11/19/2020 19:01:19' prior: 50867990!
canNotCheckoutWithEmptyCartErrorDescription
	
	^'Can not checkout with empty cart'! !

!testRun: #CashierTest #test01 stamp: 'fr 11/19/2020 19:01:20'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/19/2020 19:01:25'!
for: aCart 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aCart ! !
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/19/2020 19:01:29' prior: 50868004!
for: aCart 
	
	^self new initializeFor: aCart ! !

!testRun: #CashierTest #test01 stamp: 'fr 11/19/2020 19:01:32'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'fr 11/19/2020 19:01:44'!
Object subclass: #Cashier
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'fr 11/19/2020 19:01:44'!
initializeFor: aCart 
	self shouldBeImplemented.
	cart := aCart.! !

!methodRemoval: Cashier class #for: stamp: 'fr 11/19/2020 19:01:55'!
for: aCart 
	
	^self new initializeFor: aCart !

!methodRemoval: Cashier #initializeFor: stamp: 'fr 11/19/2020 19:01:59'!
initializeFor: aCart 
	self shouldBeImplemented.
	cart := aCart.!

!testRun: #CashierTest #test01 stamp: 'fr 11/19/2020 19:02:04'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/19/2020 19:02:10'!
for: aCart 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aCart ! !
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/19/2020 19:02:34' prior: 50868040!
for: aCart 
	
	aCart isEmpty ifTrue: [self error: self canNotCheckoutWithEmptyCartErrorDescription].
		
	^self new initializeFor: aCart ! !

!testRun: #CashierTest #test01 stamp: 'fr 11/19/2020 19:02:36'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'fr 11/19/2020 19:02:36'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 19:02:40'!
test02

	| cart |
	cart _ Cart acceptingItemsOf: Array new.
	
	self  should: [Cashier for: cart]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckoutWithEmptyCartErrorDescription
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 19:05:23' prior: 50868060!
test02

	| cart cashier |
	cart _ Cart acceptingItemsOf: (Array with: 'an item').
	cart add: 'an item' withOccurrences: 1.
	
	cashier _ Cashier for: cart.
	
	self assert: cashier total equals: 50
	
! !

----End fileIn of /home/fede/Documentos/Facultad/Inge1/Cuises/tus-libros-2/Packages/TerseGuide.pck.st----!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 19:07:16' prior: 50868070!
test02

	| cart cashier catalogue |
	catalogue _ Dictionary new.
	catalogue add: 'an item' -> 50.
	cart _ Cart acceptingItemsOf: catalogue.
	cart add: 'an item' withOccurrences: 1.
	
	cashier _ Cashier for: cart.
	
	self assert: cashier total equals: 50
	
! !

!testRun: #CashierTest #test02 stamp: 'fr 11/19/2020 19:07:21'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 19:07:56' prior: 50871016!
test02

	| cart cashier catalogue |
	catalogue _ Dictionary new.
	catalogue add: 'an item' -> 50.
	cart _ Cart acceptingItemsOf: catalogue.
	cart add: 1 of: 'an item'.
	
	cashier _ Cashier for: cart.
	
	self assert: cashier total equals: 50
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 19:08:09' prior: 50871030!
test02

	| cart cashier catalogue |
	catalogue _ Dictionary new.
	catalogue add: 'an item' -> 50.
	cart _ Cart acceptingItemsOf: catalogue.
	cart add: 1 of: 'an item'.
	
	cashier _ Cashier for: cart.
	
	self assert: cashier total equals: 50
	
! !

!testRun: #CashierTest #test02 stamp: 'fr 11/19/2020 19:08:10'!
ERROR!

dict _ Dictionary new.!

dict add: 'Fede' -> 5. !

dict includes: 'Fede' !

dict includes: 5  !
!Cart methodsFor: 'assertions' stamp: 'fr 11/19/2020 19:11:34' prior: 50867790!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 11/19/2020 19:11:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 11/19/2020 19:11:37'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 11/19/2020 19:11:37'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 11/19/2020 19:11:37'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 11/19/2020 19:11:37'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 11/19/2020 19:11:37'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 11/19/2020 19:11:37'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 11/19/2020 19:11:37'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'fr 11/19/2020 19:12:36' prior: 50867942!
defaultCatalog
	
	^ Dictionary new add: self itemSellByTheStore -> 50; yourself! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 11/19/2020 19:12:39'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 11/19/2020 19:12:39'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 11/19/2020 19:12:39'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 11/19/2020 19:12:39'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 11/19/2020 19:12:39'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 11/19/2020 19:12:39'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 11/19/2020 19:12:39'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 11/19/2020 19:12:39'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'fr 11/19/2020 19:12:49'!
ERROR!
!Cashier methodsFor: 'initialization' stamp: 'fr 11/19/2020 19:12:58'!
initializeFor: aCart 
	self shouldBeImplemented.
	cart := aCart.! !
!Cashier methodsFor: 'initialization' stamp: 'fr 11/19/2020 19:13:04' prior: 50871122!
initializeFor: aCart 
	
	cart _ aCart.! !

!testRun: #CashierTest #test02 stamp: 'fr 11/19/2020 19:13:13'!
ERROR!
!Cashier methodsFor: 'total' stamp: 'fr 11/19/2020 19:13:21'!
total
	self shouldBeImplemented.! !
!Cashier methodsFor: 'total' stamp: 'fr 11/19/2020 19:13:27' prior: 50871133!
total
	
	^cart total! !

!testRun: #CashierTest #test02 stamp: 'fr 11/19/2020 19:13:29'!
ERROR!
!Cart methodsFor: 'total' stamp: 'fr 11/19/2020 19:13:39'!
total
	self shouldBeImplemented.! !
!Cart methodsFor: 'total' stamp: 'fr 11/19/2020 19:14:46' prior: 50871142!
total
	
	catalog addAll: catalog! !
!Cart methodsFor: 'total' stamp: 'fr 11/19/2020 19:14:49' prior: 50871146!
total
	
	^catalog addAll: catalog! !

!testRun: #CashierTest #test02 stamp: 'fr 11/19/2020 19:14:51'!
FAILURE!

cashier total!

dict _ Dictionary new add: 'Fede' -> 5. !

dict addAll: dict !

dict _ Dictionary new add: 'Fede' -> 5; yourself. !

dict addAll: dict !

dict sum  !

dict _ Dictionary new add: 'Fede' -> 5; add: 'Hernan' -> 10; yourself.  !

dict sum  !
!Cart methodsFor: 'total' stamp: 'fr 11/19/2020 19:16:48' prior: 50871150!
total
	
	^catalog sum! !

!testRun: #CashierTest #test02 stamp: 'fr 11/19/2020 19:16:49'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'fr 11/19/2020 19:16:49'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'fr 11/19/2020 19:16:49'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 19:17:07' prior: 50871041!
test02

	| cart cashier catalogue |
	catalogue _ Dictionary new add: 'an item' -> 50; yourself.
	cart _ Cart acceptingItemsOf: catalogue.
	cart add: 1 of: 'an item'.
	
	cashier _ Cashier for: cart.
	
	self assert: cashier total equals: 50
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 19:17:15' prior: 50871175!
test02

	| cart cashier  |
	catalogue _ Dictionary new add: 'an item' -> 50; yourself.
	cart _ Cart acceptingItemsOf: catalogue.
	cart add: 1 of: 'an item'.
	
	cashier _ Cashier for: cart.
	
	self assert: cashier total equals: 50
	
! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'fr 11/19/2020 19:17:15'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 19:18:47'!
catalogue

	^ Dictionary new add: 'an item' -> 50; yourself! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 19:18:47' prior: 50871186!
test02

	| cart cashier  |
	catalogue _ self catalogue.
	cart _ Cart acceptingItemsOf: catalogue.
	cart add: 1 of: 'an item'.
	
	cashier _ Cashier for: cart.
	
	self assert: cashier total equals: 50
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 19:18:57' prior: 50871208!
test02

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 1 of: 'an item'.
	
	cashier _ Cashier for: cart.
	
	self assert: cashier total equals: 50
	
! !

!testRun: #CashierTest #test02 stamp: 'fr 11/19/2020 19:18:58'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'fr 11/19/2020 19:18:58'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'fr 11/19/2020 19:18:58'!
PASSED!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'fr 11/19/2020 19:19:03'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CashierTest #test01 stamp: 'fr 11/19/2020 19:19:04'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'fr 11/19/2020 19:19:04'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 19:19:16' prior: 50867978!
test01

	| cart |
	cart _ Cart acceptingItemsOf: self catalogue.
	
	self  should: [Cashier for: cart]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckoutWithEmptyCartErrorDescription
	
! !

!testRun: #CashierTest #test01 stamp: 'fr 11/19/2020 19:19:17'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'fr 11/19/2020 19:19:17'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'fr 11/19/2020 19:19:17'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 19:19:38'!
test03

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 1 of: 'an item'.
	
	cashier _ Cashier for: cart.
	
	self assert: cashier total equals: 50
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 19:20:10' prior: 50871266!
test03

	| cart cashier  catalogue |
	catalogue _ self catalogue.
	catalogue add: 'another item' -> 15.
	cart _ Cart acceptingItemsOf: catalogue.
	cart add: 1 of: 'an item'.
	
	cashier _ Cashier for: cart.
	
	self assert: cashier total equals: 65
	
! !

!testRun: #CashierTest #test03 stamp: 'fr 11/19/2020 19:20:13'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'fr 11/19/2020 19:20:13'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'fr 11/19/2020 19:20:13'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'fr 11/19/2020 19:20:13'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 19:20:31' prior: 50871275!
test03

	| cart cashier  catalogue |
	catalogue _ self catalogue.
	catalogue add: 'another item' -> 15.
	cart _ Cart acceptingItemsOf: catalogue.
	cart add: 1 of: 'an item'.
	
	cashier _ Cashier for: cart.
	
	self assert: cashier total equals: 50
	
! !

!testRun: #CashierTest #test03 stamp: 'fr 11/19/2020 19:20:32'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 19:20:54' prior: 50871296!
test03

	| cart cashier  catalogue |
	catalogue _ self catalogue.
	cart _ Cart acceptingItemsOf: catalogue.
	cart add: 2 of: 'an item'.
	
	cashier _ Cashier for: cart.
	
	self assert: cashier total equals: 50
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 19:21:00' prior: 50871310!
test03

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue..
	cart add: 2 of: 'an item'.
	
	cashier _ Cashier for: cart.
	
	self assert: cashier total equals: 50
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 19:21:04' prior: 50871320!
test03

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue..
	cart add: 2 of: 'an item'.
	
	cashier _ Cashier for: cart.
	
	self assert: cashier total equals: 100
	
! !

!testRun: #CashierTest #test03 stamp: 'fr 11/19/2020 19:21:05'!
FAILURE!

dict _ Dictionary new add: 'Fede' -> 50; add: 'Hernan' -> 60; yourself.!

dict keysDo: [:aKey | aKey < 55]. !

index!

aBlock!

array at: index!

aBlock value: each!

aBlock value: each!

each!

dict keysDo: [:aKey | aKey]. !

dict keysDo: [:aKey | ].!
!Cart methodsFor: 'total' stamp: 'fr 11/19/2020 19:32:03' prior: 50871164!
total
	
	^catalog keys select: [:aKey | items includes: aKey] sum! !

!testRun: #CashierTest #test03 stamp: 'fr 11/19/2020 19:32:09'!
ERROR!
!Cart methodsFor: 'total' stamp: 'fr 11/19/2020 19:32:35' prior: 50871348!
total
	
	^(catalog keys select: [:aKey | items includes: aKey]) sum! !

!testRun: #CashierTest #test03 stamp: 'fr 11/19/2020 19:32:36'!
FAILURE!

cashier total!

cart total!

catalog keys!

catalog associations!

self first !

self first first!

self first key !

catalog associations!

self sum !

self sum: [:anAss | anAss value] !
!Cart methodsFor: 'total' stamp: 'fr 11/19/2020 19:36:30' prior: 50871355!
total
	
	^(catalog associations select: [:anAssociation | items includes: anAssociation key]) sum: [:anAssociation | anAssociation value]! !

!testRun: #CashierTest #test03 stamp: 'fr 11/19/2020 19:36:33'!
FAILURE!

!testRun: #CashierTest #test03 stamp: 'fr 11/19/2020 19:37:07'!
FAILURE!
!Cart methodsFor: 'total' stamp: 'fr 11/19/2020 19:37:52' prior: 50871368!
total
	
	^items sum: [:anItem | anItem * self occurrencesOf: anItem]! !

!testRun: #CashierTest #test03 stamp: 'fr 11/19/2020 19:37:53'!
ERROR!
!Cart methodsFor: 'total' stamp: 'fr 11/19/2020 19:38:31' prior: 50871380!
total
	
	^items sum: [:anItem | catalog at: anItem]! !

!testRun: #CashierTest #test03 stamp: 'fr 11/19/2020 19:38:32'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'fr 11/19/2020 19:38:32'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'fr 11/19/2020 19:38:32'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'fr 11/19/2020 19:38:32'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 19:39:18'!
test04

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue..
	cart add: 2 of: 'an item'.
	
	cashier _ Cashier for: cart.
	
	self assert: cashier total equals: 100
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 19:39:30' prior: 50871329!
test03

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.
	
	cashier _ Cashier for: cart.
	
	self assert: cashier total equals: 100
	
! !
!Cashier methodsFor: 'total' stamp: 'fr 11/19/2020 19:41:32'!
checkout
	
	^cart total! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 19:41:32' prior: 50871218!
test02

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 1 of: 'an item'.
	
	cashier _ Cashier for: cart.
	
	self assert: cashier checkout equals: 50
	
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 19:41:32' prior: 50871418!
checkout
	
	^cart total! !

!methodRemoval: Cashier #total stamp: 'fr 11/19/2020 19:41:32'!
total
	
	^cart total!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 19:42:02' prior: 50871410!
test03

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.
	
	cashier _ Cashier for: cart.
	
	self assert: cashier checkout equals: 100
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 19:58:31' prior: 50871401!
test04

	| cart cashier  card |
	cart _ Cart acceptingItemsOf: self catalogue..
	cart add: 2 of: 'an item'.
	
	cashier _ Cashier for: cart paymentMethod: card paymentProcessor: self.
	
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withMessageText: self invalidCardErrorDescription
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 19:59:29' prior: 50871447!
test04

	| cart cashier  card |
	cart _ Cart acceptingItemsOf: self catalogue..
	cart add: 2 of: 'an item'.
	
	card _ 'stolen card'.	
	cashier _ Cashier for: cart paymentMethod: card paymentProcessor: self.
	
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withMessageText: self invalidCardErrorDescription
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 19:59:38' prior: 50871460!
test04

	| cart cashier  card |
	cart _ Cart acceptingItemsOf: self catalogue..
	cart add: 2 of: 'an item'.
	
	card _ 'stolen card'.	
	
	cashier _ Cashier for: cart paymentMethod: card paymentProcessor: self.
	
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withMessageText: self invalidCardErrorDescription
	
! !

GregorianMonthOfYear decemberOf: (GregorianYear number: 2019)!

!classDefinition: #Card category: 'TusLibros' stamp: 'fr 11/19/2020 20:03:54'!
Object subclass: #Card
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 20:03:49' prior: 50871474!
test04

	| cart cashier  card |
	cart _ Cart acceptingItemsOf: self catalogue..
	cart add: 2 of: 'an item'.
	
	card _ Card withExpiration: (GregorianMonthOfYear decemberOf: (GregorianYear number: 2019)).	
	
	cashier _ Cashier for: cart paymentMethod: card paymentProcessor: self.
	
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withMessageText: self invalidCardErrorDescription
	
! !

!testRun: #CashierTest #test04 stamp: 'fr 11/19/2020 20:04:04'!
ERROR!
!Card class methodsFor: 'instance creation' stamp: 'fr 11/19/2020 20:04:15'!
withExpiration: aGregorianMonthOfYear 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithExpiration: aGregorianMonthOfYear ! !
!Card class methodsFor: 'instance creation' stamp: 'fr 11/19/2020 20:04:21' prior: 50871514!
withExpiration: aGregorianMonthOfYear 
	
	^self new initializeWithExpiration: aGregorianMonthOfYear ! !

!testRun: #CashierTest #test04 stamp: 'fr 11/19/2020 20:04:23'!
ERROR!

!classDefinition: #Card category: 'TusLibros' stamp: 'fr 11/19/2020 20:04:32'!
Object subclass: #Card
	instanceVariableNames: 'gregorianMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Card methodsFor: 'initialization' stamp: 'fr 11/19/2020 20:04:32'!
initializeWithExpiration: aGregorianMonthOfYear 
	self shouldBeImplemented.
	gregorianMonthOfYear := aGregorianMonthOfYear.! !
!Card methodsFor: 'initialization' stamp: 'fr 11/19/2020 20:04:35' prior: 50871539!
initializeWithExpiration: aGregorianMonthOfYear 
	
	gregorianMonthOfYear := aGregorianMonthOfYear.! !

!classDefinition: #Card category: 'TusLibros' stamp: 'fr 11/19/2020 20:04:43'!
Object subclass: #Card
	instanceVariableNames: 'expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Card methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 20:04:43' prior: 50871546!
initializeWithExpiration: aGregorianMonthOfYear 
	
	expirationDate := aGregorianMonthOfYear.! !
!Card methodsFor: 'initialization' stamp: 'fr 11/19/2020 20:04:46' prior: 50871559!
initializeWithExpiration: aGregorianMonthOfYear 
	
	expirationDate _ aGregorianMonthOfYear.! !
!Card methodsFor: 'initialization' stamp: 'fr 11/19/2020 20:04:55' prior: 50871565!
initializeWithExpiration: anExpirationMonth 
	
	expirationDate _ anExpirationMonth.! !

!testRun: #CashierTest #test04 stamp: 'fr 11/19/2020 20:05:03'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/19/2020 20:05:10'!
for: aCart paymentMethod: aCard paymentProcessor: aCashierTest 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aCart paymentMethod: aCard paymentProcessor: aCashierTest ! !
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/19/2020 20:05:14' prior: 50871579!
for: aCart paymentMethod: aCard paymentProcessor: aCashierTest 
	
	^self new initializeFor: aCart paymentMethod: aCard paymentProcessor: aCashierTest ! !
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/19/2020 20:05:25' prior: 50871590!
for: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor 
	
	^self new initializeFor: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor ! !

!testRun: #CashierTest #test04 stamp: 'fr 11/19/2020 20:05:29'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'fr 11/19/2020 20:05:37'!
Object subclass: #Cashier
	instanceVariableNames: 'cart card'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'fr 11/19/2020 20:05:38'!
Object subclass: #Cashier
	instanceVariableNames: 'cart card paymentProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'fr 11/19/2020 20:05:38'!
initializeFor: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor 
	self shouldBeImplemented.
	cart := aCart.
	card := aCard.
	paymentProcessor := aPaymentProcessor.! !
!Cashier methodsFor: 'initialization' stamp: 'fr 11/19/2020 20:05:40' prior: 50871622!
initializeFor: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor 

	cart := aCart.
	card := aCard.
	paymentProcessor := aPaymentProcessor.! !
!Cashier methodsFor: 'initialization' stamp: 'fr 11/19/2020 20:05:51' prior: 50871631!
initializeFor: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor 

	cart _ aCart.
	card _ aCard.
	paymentProcessor _ aPaymentProcessor.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'fr 11/19/2020 20:05:59'!
Object subclass: #Cashier
	instanceVariableNames: 'cart paymentMethod paymentProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 20:05:59' prior: 50871639!
initializeFor: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor 

	cart _ aCart.
	paymentMethod _ aCard.
	paymentProcessor _ aPaymentProcessor.! !

!testRun: #CashierTest #test04 stamp: 'fr 11/19/2020 20:06:03'!
ERROR!
!CashierTest methodsFor: 'error description' stamp: 'fr 11/19/2020 20:06:24'!
invalidCardErrorDescription
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'error description' stamp: 'fr 11/19/2020 20:06:44' prior: 50871665!
invalidCardErrorDescription
	
	^'Expired card'! !

!testRun: #CashierTest #test04 stamp: 'fr 11/19/2020 20:06:47'!
FAILURE!

!testRun: #CashierTest #test04 stamp: 'fr 11/19/2020 20:07:11'!
FAILURE!
!Cashier methodsFor: 'total' stamp: 'fr 11/19/2020 20:09:27' prior: 50871431!
checkout

	| total |
	total _ cart total.
	
	paymentProcessor charge: total from: paymentMethod.
	
	^total! !
!Cashier methodsFor: 'total' stamp: 'fr 11/19/2020 20:09:36' prior: 50871679!
checkout

	| total |
	total _ cart total.
	paymentProcessor charge: total from: paymentMethod.
	
	^total! !
!Cashier methodsFor: 'total' stamp: 'fr 11/19/2020 20:09:40' prior: 50871685!
checkout

	| total |
	total _ cart total.
	paymentProcessor charge: total from: paymentMethod.
	^total! !

!testRun: #CashierTest #test04 stamp: 'fr 11/19/2020 20:09:45'!
ERROR!
!CashierTest methodsFor: 'payment' stamp: 'fr 11/19/2020 20:09:55'!
charge: aSmallInteger from: aCard 
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'payment' stamp: 'fr 11/19/2020 20:09:57' prior: 50871699!
charge: aSmallInteger from: aCard 
	
	! !
!CashierTest methodsFor: 'payment' stamp: 'fr 11/19/2020 20:10:10' prior: 50871704!
charge: amountToCharge from: aCard 


	
	! !
!CashierTest methodsFor: 'payment' stamp: 'fr 11/19/2020 20:10:12' prior: 50871708!
charge: amountToCharge from: aCard 

	
	
	! !
!CashierTest methodsFor: 'payment' stamp: 'fr 11/19/2020 20:10:56' prior: 50871713!
charge: amountToCharge from: aCard 

	aCard = 'expired card' ifTrue: [self error: self invalidCardErrorDescription]
	
	! !
!CashierTest methodsFor: 'payment' stamp: 'fr 11/19/2020 20:11:00' prior: 50871718!
charge: amountToCharge from: aCard 

	aCard = 'expired card' ifTrue: [self error: self invalidCardErrorDescription]
	
	! !

!testRun: #CashierTest #test04 stamp: 'fr 11/19/2020 20:11:01'!
FAILURE!

!testRun: #CashierTest #test04 stamp: 'fr 11/19/2020 20:11:10'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'fr 11/19/2020 20:11:10'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'fr 11/19/2020 20:11:10'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'fr 11/19/2020 20:11:10'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'fr 11/19/2020 20:11:10'!
FAILURE!

!testRun: #CashierTest #test04 stamp: 'fr 11/19/2020 20:11:39'!
FAILURE!
!CashierTest methodsFor: 'payment' stamp: 'fr 11/19/2020 20:12:32' prior: 50871725!
charge: amountToCharge from: aCard 

	aCard expiration > GregorianMonthOfYear current ifTrue: [self error: self invalidCardErrorDescription]
	
	! !

!testRun: #CashierTest #test04 stamp: 'fr 11/19/2020 20:12:36'!
ERROR!
!Card methodsFor: 'expiration' stamp: 'fr 11/19/2020 20:12:44'!
expiration
	self shouldBeImplemented.! !
!Card methodsFor: 'expiration' stamp: 'fr 11/19/2020 20:12:48' prior: 50871757!
expiration
	
	^expirationDate ! !

!testRun: #CashierTest #test04 stamp: 'fr 11/19/2020 20:12:50'!
FAILURE!

aCard expiration!
!CashierTest methodsFor: 'payment' stamp: 'fr 11/19/2020 20:13:22' prior: 50871748!
charge: amountToCharge from: aCard 

	aCard expiration < GregorianMonthOfYear current ifTrue: [self error: self invalidCardErrorDescription]
	
	! !

!testRun: #CashierTest #test04 stamp: 'fr 11/19/2020 20:13:24'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'fr 11/19/2020 20:13:24'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'fr 11/19/2020 20:13:24'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'fr 11/19/2020 20:13:24'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'fr 11/19/2020 20:13:24'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 20:13:39'!
expiredCard

	^ Card withExpiration: (GregorianMonthOfYear decemberOf: (GregorianYear number: 2019))! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 20:13:39' prior: 50871496!
test04

	| cart cashier  card |
	cart _ Cart acceptingItemsOf: self catalogue..
	cart add: 2 of: 'an item'.
	
	card _ self expiredCard.	
	
	cashier _ Cashier for: cart paymentMethod: card paymentProcessor: self.
	
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withMessageText: self invalidCardErrorDescription
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 20:13:52' prior: 50871794!
test04

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue..
	cart add: 2 of: 'an item'.	
	
	cashier _ Cashier for: cart paymentMethod: self expiredCard paymentProcessor: self.
	
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withMessageText: self invalidCardErrorDescription
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 20:14:02' prior: 50871808!
test04

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.	
	
	cashier _ Cashier for: cart paymentMethod: self expiredCard paymentProcessor: self.
	
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withMessageText: self invalidCardErrorDescription
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 20:14:16' prior: 50871438!
test03

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.
	
	cashier _ Cashier for: cart paymentMethod: self expiredCard paymentProcessor: self.
	
	self assert: cashier checkout equals: 100
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 20:14:20' prior: 50871422!
test02

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 1 of: 'an item'.
	
	cashier _ Cashier for: cart paymentMethod: self expiredCard paymentProcessor: self.
	
	self assert: cashier checkout equals: 50
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 20:14:25' prior: 50871249!
test01

	| cart |
	cart _ Cart acceptingItemsOf: self catalogue.
	
	self  should: [Cashier Cashier for: cart paymentMethod: self expiredCard paymentProcessor: self]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckoutWithEmptyCartErrorDescription
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 20:14:30' prior: 50871858!
test01

	| cart |
	cart _ Cart acceptingItemsOf: self catalogue.
	
	self  should: [Cashier for: cart paymentMethod: self expiredCard paymentProcessor: self]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckoutWithEmptyCartErrorDescription
	
! !

!testRun: #CashierTest #test01 stamp: 'fr 11/19/2020 20:14:31'!
FAILURE!

!testRun: #CashierTest #test01 stamp: 'fr 11/19/2020 20:14:41'!
FAILURE!
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/19/2020 20:15:15' prior: 50871598!
for: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor 
	
	
	
	^self new initializeFor: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor ! !
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/19/2020 20:16:03' prior: 50871887!
for: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor 
	
	aCart isEmpty ifTrue: [self error: self canNotCheckoutWithEmptyCartErrorDescription].
	
	^self new initializeFor: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor ! !

!testRun: #CashierTest #test01 stamp: 'fr 11/19/2020 20:16:04'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'fr 11/19/2020 20:16:04'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'fr 11/19/2020 20:16:04'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'fr 11/19/2020 20:16:04'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'fr 11/19/2020 20:16:04'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'fr 11/19/2020 20:16:08'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'fr 11/19/2020 20:16:08'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'fr 11/19/2020 20:16:08'!
ERROR!

!testRun: #CashierTest #test03 stamp: 'fr 11/19/2020 20:16:08'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'fr 11/19/2020 20:16:08'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'fr 11/19/2020 20:16:15'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 20:16:33'!
nonExpiredCard

	^ Card withExpiration: (GregorianMonthOfYear decemberOf: (GregorianYear number: 2029))! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 20:16:50' prior: 50871847!
test02

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 1 of: 'an item'.
	
	cashier _ Cashier for: cart paymentMethod: self validCard paymentProcessor: self.
	
	self assert: cashier checkout equals: 50
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 20:17:01' prior: 50871836!
test03

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.
	
	cashier _ Cashier for: cart paymentMethod: self validCard paymentProcessor: self.
	
	self assert: cashier checkout equals: 100
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 20:17:10' prior: 50871870!
test01

	| cart |
	cart _ Cart acceptingItemsOf: self catalogue.
	
	self  should: [Cashier for: cart paymentMethod: self validCard paymentProcessor: self]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckoutWithEmptyCartErrorDescription
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/19/2020 20:17:18'!
validCard

	^ Card withExpiration: (GregorianMonthOfYear decemberOf: (GregorianYear number: 2029))! !

!methodRemoval: CashierTest #nonExpiredCard stamp: 'fr 11/19/2020 20:17:18'!
nonExpiredCard

	^ Card withExpiration: (GregorianMonthOfYear decemberOf: (GregorianYear number: 2029))!

!testRun: #CashierTest #test01 stamp: 'fr 11/19/2020 20:17:20'!
PASSED!

!testRun: #CashierTest #test01 stamp: 'fr 11/19/2020 20:17:20'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'fr 11/19/2020 20:17:20'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'fr 11/19/2020 20:17:20'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'fr 11/19/2020 20:17:20'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/19/2020 20:18:20'!
test05

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.	
	
	cashier _ Cashier for: cart paymentMethod: self expiredCard paymentProcessor: self.
	
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withMessageText: self invalidCardErrorDescription
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/19/2020 20:18:57'!
test01CanNotCheckoutEmptyCart

	| cart |
	cart _ Cart acceptingItemsOf: self catalogue.
	
	self  should: [Cashier for: cart paymentMethod: self validCard paymentProcessor: self]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckoutWithEmptyCartErrorDescription
	
! !

!methodRemoval: CashierTest #test01 stamp: 'fr 11/19/2020 20:18:57'!
test01

	| cart |
	cart _ Cart acceptingItemsOf: self catalogue.
	
	self  should: [Cashier for: cart paymentMethod: self validCard paymentProcessor: self]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckoutWithEmptyCartErrorDescription
	
!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/19/2020 20:22:16' prior: 50871822!
test04

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.	
	
	cashier _ Cashier for: cart paymentMethod: self expiredCard paymentProcessor: self.
	
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Cashier invalidCardErrorDescription
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/19/2020 20:22:25' prior: 50872031!
test04

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.	
	
	cashier _ Cashier for: cart paymentMethod: self expiredCard paymentProcessor: self.
	
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Cashier expiredCardErrorDescription
	
! !

!methodRemoval: CashierTest #test05 stamp: 'fr 11/19/2020 20:22:29'!
test05

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.	
	
	cashier _ Cashier for: cart paymentMethod: self expiredCard paymentProcessor: self.
	
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withMessageText: self invalidCardErrorDescription
	
!

!methodRemoval: CashierTest #invalidCardErrorDescription stamp: 'fr 11/19/2020 20:22:35'!
invalidCardErrorDescription
	
	^'Expired card'!

!testRun: #CashierTest #test04 stamp: 'fr 11/19/2020 20:22:38'!
ERROR!
!Cashier class methodsFor: 'error description' stamp: 'fr 11/19/2020 20:22:50'!
expiredCardErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error description' stamp: 'fr 11/19/2020 20:22:56' prior: 50872076!
expiredCardErrorDescription
	
	^'Expired card'! !

!testRun: #CashierTest #test04 stamp: 'fr 11/19/2020 20:22:58'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'fr 11/19/2020 20:23:03'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/19/2020 20:24:26' prior: 50871896!
for: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor 
	
	aCart isEmpty ifTrue: [self error: self canNotCheckoutWithEmptyCartErrorDescription].
	aCard expiration < GregorianMonthOfYear current ifTrue: [self error: self expiredCardErrorDescription].
	
	^self new initializeFor: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor ! !

!testRun: #CashierTest #test04 stamp: 'fr 11/19/2020 20:24:27'!
ERROR!

!testRun: #CashierTest #test04 stamp: 'fr 11/19/2020 20:24:40'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/19/2020 20:24:56' prior: 50872044!
test04

	| cart |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.	

	self  should: [Cashier for: cart paymentMethod: self expiredCard paymentProcessor: self] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Cashier expiredCardErrorDescription
	
! !

!testRun: #CashierTest #test04 stamp: 'fr 11/19/2020 20:25:00'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/19/2020 20:25:00'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'fr 11/19/2020 20:25:00'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'fr 11/19/2020 20:25:00'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'fr 11/19/2020 20:25:00'!
PASSED!
!CashierTest methodsFor: 'payment processor' stamp: 'fr 11/20/2020 20:10:11'!
charge: amountToCharge on: aCard 

	aCard expiration < GregorianMonthOfYear current ifTrue: [self error: self invalidCardErrorDescription]
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/20/2020 20:10:11' prior: 50871691!
checkout

	| total |
	total _ cart total.
	paymentProcessor charge: total on: paymentMethod.
	^total! !

!methodRemoval: CashierTest #charge:from: stamp: 'fr 11/20/2020 20:10:11'!
charge: amountToCharge from: aCard 

	aCard expiration < GregorianMonthOfYear current ifTrue: [self error: self invalidCardErrorDescription]
	
	!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/20/2020 20:10:12'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'fr 11/20/2020 20:10:12'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'fr 11/20/2020 20:10:12'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'fr 11/20/2020 20:10:12'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/20/2020 20:11:01' prior: 50871939!
test02

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.
	
	cashier _ Cashier for: cart paymentMethod: self validCard paymentProcessor: self.
	
	self assert: cashier checkout equals: 50
	
! !

!testRun: #CashierTest #test02 stamp: 'fr 11/20/2020 20:11:02'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/20/2020 20:11:02'!
PASSED!

!testRun: #CashierTest #test02 stamp: 'fr 11/20/2020 20:11:02'!
PASSED!

!testRun: #CashierTest #test03 stamp: 'fr 11/20/2020 20:11:02'!
PASSED!

!testRun: #CashierTest #test04 stamp: 'fr 11/20/2020 20:11:02'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/20/2020 20:11:50'!
test02CheckoutTotalIsCorrectForASingleItem

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.
	
	cashier _ Cashier for: cart paymentMethod: self validCard paymentProcessor: self.
	
	self assert: cashier checkout equals: 50
	
! !

!methodRemoval: CashierTest #test02 stamp: 'fr 11/20/2020 20:11:50'!
test02

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.
	
	cashier _ Cashier for: cart paymentMethod: self validCard paymentProcessor: self.
	
	self assert: cashier checkout equals: 50
	
!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/20/2020 20:12:10'!
test03CheckoutTotalIsCorrectForMultipleItems

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.
	
	cashier _ Cashier for: cart paymentMethod: self validCard paymentProcessor: self.
	
	self assert: cashier checkout equals: 100
	
! !

!methodRemoval: CashierTest #test03 stamp: 'fr 11/20/2020 20:12:10'!
test03

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.
	
	cashier _ Cashier for: cart paymentMethod: self validCard paymentProcessor: self.
	
	self assert: cashier checkout equals: 100
	
!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/20/2020 20:12:38'!
test04CashierDoesNotAcceptExpiredCards

	| cart |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.	

	self  should: [Cashier for: cart paymentMethod: self expiredCard paymentProcessor: self] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Cashier expiredCardErrorDescription
	
! !

!methodRemoval: CashierTest #test04 stamp: 'fr 11/20/2020 20:12:38'!
test04

	| cart |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.	

	self  should: [Cashier for: cart paymentMethod: self expiredCard paymentProcessor: self] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Cashier expiredCardErrorDescription
	
!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/20/2020 20:12:43'!
test05

	| cart |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.	

	self  should: [Cashier for: cart paymentMethod: self expiredCard paymentProcessor: self] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Cashier expiredCardErrorDescription
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/20/2020 20:14:57' prior: 50872252!
test05

	| cart |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.	

	self  should: [Cashier for: cart paymentMethod: self validCard paymentProcessor: self] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Cashier cardWithoutCreditErrorDescription
	
! !
!CashierTest methodsFor: 'utils' stamp: 'fr 11/20/2020 20:15:11'!
nonExpiredCard

	^ Card withExpiration: (GregorianMonthOfYear decemberOf: (GregorianYear number: 2029))! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/20/2020 20:15:11' prior: 50872207!
test03CheckoutTotalIsCorrectForMultipleItems

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.
	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	
	self assert: cashier checkout equals: 100
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/20/2020 20:15:11' prior: 50872187!
test02CheckoutTotalIsCorrectForASingleItem

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.
	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	
	self assert: cashier checkout equals: 50
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/20/2020 20:15:11' prior: 50872264!
test05

	| cart |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.	

	self  should: [Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Cashier cardWithoutCreditErrorDescription
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/20/2020 20:15:11' prior: 50872008!
test01CanNotCheckoutEmptyCart

	| cart |
	cart _ Cart acceptingItemsOf: self catalogue.
	
	self  should: [Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckoutWithEmptyCartErrorDescription
	
! !

!methodRemoval: CashierTest #validCard stamp: 'fr 11/20/2020 20:15:11'!
validCard

	^ Card withExpiration: (GregorianMonthOfYear decemberOf: (GregorianYear number: 2029))!

----QUIT----(20 November 2020 20:43:15) CuisUniversity-4384.image priorSource: 17155564!

----STARTUP---- (20 November 2020 21:01:55) as /home/fede/Documentos/Facultad/Inge1/Cuises/tus-libros-2/CuisUniversity-4384.image!


!classDefinition: #CashierTest category: 'TusLibros' stamp: 'fr 11/20/2020 21:03:54'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'chargingResponse'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/20/2020 21:03:48' prior: 50872307!
test05

	| cart cashier |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	chargingResponse = [:aCard | self error: Cashier cardWithoutCreditErrorDescription].
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Cashier cardWithoutCreditErrorDescription
	
! !

!testRun: #CashierTest #test05 stamp: 'fr 11/20/2020 21:03:59'!
ERROR!
!Cashier class methodsFor: 'error description' stamp: 'fr 11/20/2020 21:04:09'!
cardWithoutCreditErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error description' stamp: 'fr 11/20/2020 21:04:22' prior: 50872370!
cardWithoutCreditErrorDescription
	
	^'Card has no credit'! !

!testRun: #CashierTest #test05 stamp: 'fr 11/20/2020 21:04:23'!
FAILURE!
!CashierTest methodsFor: 'payment processor' stamp: 'fr 11/20/2020 21:05:44' prior: 50872134!
charge: amountToCharge on: aCard 

	chargingResponse value: aCard
	
	! !

!testRun: #CashierTest #test05 stamp: 'fr 11/20/2020 21:05:45'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/20/2020 21:06:06'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/20/2020 21:06:06'!
ERROR!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/20/2020 21:06:06'!
ERROR!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/20/2020 21:06:06'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'fr 11/20/2020 21:06:06'!
ERROR!

!testRun: #CashierTest #test05 stamp: 'fr 11/20/2020 21:06:11'!
ERROR!

!testRun: #CashierTest #test05 stamp: 'fr 11/20/2020 21:06:11'!
ERROR!

!testRun: #CashierTest #test05 stamp: 'fr 11/20/2020 21:06:17'!
ERROR!

chargingResponse!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/20/2020 21:06:52' prior: 50872352!
test05

	| cart cashier |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	chargingResponse _ [:aCard | self error: Cashier cardWithoutCreditErrorDescription].
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Cashier cardWithoutCreditErrorDescription
	
! !

!testRun: #CashierTest #test05 stamp: 'fr 11/20/2020 21:06:53'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/20/2020 21:06:53'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/20/2020 21:06:53'!
ERROR!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/20/2020 21:06:53'!
ERROR!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/20/2020 21:06:53'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'fr 11/20/2020 21:06:53'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/20/2020 21:07:18' prior: 50872295!
test02CheckoutTotalIsCorrectForASingleItem

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	chargingResponse _ [:aCard |].
	self assert: cashier checkout equals: 50
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/20/2020 21:07:27' prior: 50872283!
test03CheckoutTotalIsCorrectForMultipleItems

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	chargingResponse _ [:aCard |].
	
	self assert: cashier checkout equals: 100
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/20/2020 21:07:30' prior: 50872447!
test02CheckoutTotalIsCorrectForASingleItem

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	chargingResponse _ [:aCard |].

	self assert: cashier checkout equals: 50
	
! !

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/20/2020 21:07:31'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/20/2020 21:07:31'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/20/2020 21:07:31'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/20/2020 21:07:31'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/20/2020 21:07:31'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'fr 11/20/2020 21:07:31'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/20/2020 21:08:22' prior: 50872459!
test03CheckoutTotalIsCorrectForMultipleItems

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	chargingResponse _ [].
	
	self assert: cashier checkout equals: 100
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/20/2020 21:08:29' prior: 50872472!
test02CheckoutTotalIsCorrectForASingleItem

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	chargingResponse _ [].

	self assert: cashier checkout equals: 50
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/20/2020 21:08:35' prior: 50872413!
test05

	| cart cashier |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	chargingResponse _ [self error: Cashier cardWithoutCreditErrorDescription].
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Cashier cardWithoutCreditErrorDescription
	
! !

!testRun: #CashierTest #test05 stamp: 'fr 11/20/2020 21:08:36'!
FAILURE!
!CashierTest methodsFor: 'payment processor' stamp: 'fr 11/20/2020 21:09:07' prior: 50872383!
charge: amountToCharge on: aCard 

	chargingResponse value
	
	! !

!testRun: #CashierTest #test05 stamp: 'fr 11/20/2020 21:09:08'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/20/2020 21:09:08'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/20/2020 21:09:08'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/20/2020 21:09:08'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/20/2020 21:09:08'!
PASSED!

!testRun: #CashierTest #test05 stamp: 'fr 11/20/2020 21:09:08'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/20/2020 21:10:47'!
test05CanNotCheckoutWithACardWithoutCredit

	| cart cashier |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	chargingResponse _ [self error: Cashier cardWithoutCreditErrorDescription].
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Cashier cardWithoutCreditErrorDescription
	
! !

!methodRemoval: CashierTest #test05 stamp: 'fr 11/20/2020 21:10:47'!
test05

	| cart cashier |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	chargingResponse _ [self error: Cashier cardWithoutCreditErrorDescription].
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Cashier cardWithoutCreditErrorDescription
	
!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/20/2020 21:10:54'!
test06

	| cart cashier |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	chargingResponse _ [self error: Cashier cardWithoutCreditErrorDescription].
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Cashier cardWithoutCreditErrorDescription
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/20/2020 21:11:20' prior: 50872600!
test06

	| cart cashier total |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	total _ cashier checkout
	
! !

!testRun: #CashierTest #test06 stamp: 'fr 11/20/2020 21:11:26'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/20/2020 21:11:26'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/20/2020 21:11:26'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/20/2020 21:11:26'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/20/2020 21:11:26'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/20/2020 21:11:26'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'fr 11/20/2020 21:11:26'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/20/2020 21:12:35' prior: 50872616!
test06

	| cart cashier |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	self assert: cashier totalSales equals: 0
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/20/2020 21:13:06' prior: 50872647!
test06

	| cart cashier |
	cart _ Cart acceptingItemsOf: self catalogue.
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	self assert: cashier totalSales equals: 0
	
! !

!testRun: #CashierTest #test06 stamp: 'fr 11/20/2020 21:13:07'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/20/2020 21:13:13' prior: 50872658!
test06

	| cart cashier |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 1 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	self assert: cashier totalSales equals: 0
	
! !

!testRun: #CashierTest #test06 stamp: 'fr 11/20/2020 21:13:19'!
ERROR!

!methodRemoval: Cashier class #for: stamp: 'fr 11/20/2020 21:23:05'!
for: aCart 
	
	aCart isEmpty ifTrue: [self error: self canNotCheckoutWithEmptyCartErrorDescription].
		
	^self new initializeFor: aCart !

!methodRemoval: Cashier #initializeFor: stamp: 'fr 11/20/2020 21:23:24'!
initializeFor: aCart 
	
	cart _ aCart.!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/20/2020 21:23:27'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/20/2020 21:23:27'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/20/2020 21:23:27'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/20/2020 21:23:27'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/20/2020 21:23:27'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'fr 11/20/2020 21:23:27'!
ERROR!

!testRun: #CashierTest #test06 stamp: 'fr 11/20/2020 21:23:27'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/20/2020 21:23:33'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/20/2020 21:23:34'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/20/2020 21:23:35'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/20/2020 21:23:36'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/20/2020 21:23:37'!
PASSED!
!Card methodsFor: 'expiration' stamp: 'fr 11/20/2020 21:36:15'!
hasExpiredOn: aDate
	
	^expirationDate < aDate! !

!methodRemoval: Card #expiration stamp: 'fr 11/20/2020 21:36:20'!
expiration
	
	^expirationDate !
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/20/2020 21:36:41' prior: 50872091!
for: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor 
	
	aCart isEmpty ifTrue: [self error: self canNotCheckoutWithEmptyCartErrorDescription].
	(aCard hasExpiredOn: GregorianMonthOfYear current) ifTrue: [self error: self expiredCardErrorDescription].
	
	^self new initializeFor: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor ! !

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/20/2020 21:36:44'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/20/2020 21:36:44'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/20/2020 21:36:44'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/20/2020 21:36:44'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/20/2020 21:36:44'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'fr 11/20/2020 21:36:44'!
ERROR!

!testRun: #CashierTest #test06 stamp: 'fr 11/20/2020 21:36:44'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/20/2020 21:37:39'!
validateCart: aCart

	^ aCart isEmpty ifTrue: [self error: self canNotCheckoutWithEmptyCartErrorDescription]! !
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/20/2020 21:37:39' prior: 50872738!
for: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor 
	
	self validateCart: aCart.
	(aCard hasExpiredOn: GregorianMonthOfYear current) ifTrue: [self error: self expiredCardErrorDescription].
	
	^self new initializeFor: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor ! !
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/20/2020 21:37:51'!
validateCard: aCard

	^ (aCard hasExpiredOn: GregorianMonthOfYear current) ifTrue: [self error: self expiredCardErrorDescription]! !
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/20/2020 21:37:51' prior: 50872780!
for: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor 
	
	self validateCart: aCart.
	self validateCard: aCard.
	
	^self new initializeFor: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor ! !
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/20/2020 21:38:23'!
signalExpiredCardError

	^ self error: self expiredCardErrorDescription! !
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/20/2020 21:38:23' prior: 50872792!
validateCard: aCard

	^ (aCard hasExpiredOn: GregorianMonthOfYear current) ifTrue: [self signalExpiredCardError]! !
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/20/2020 21:38:48'!
signalCanNotCheckoutWithEmptyCardError

	^ self error: self canNotCheckoutWithEmptyCartErrorDescription! !
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/20/2020 21:38:48' prior: 50872773!
validateCart: aCart

	^ aCart isEmpty ifTrue: [self signalCanNotCheckoutWithEmptyCardError]! !

----SNAPSHOT----(20 November 2020 21:39:01) CuisUniversity-4384.image priorSource: 17301975!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/20/2020 23:00:46' prior: 50872670!
test06

	| cart cashier |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 1 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	self assert: cashier sales size equals: 0
	
! !

----SNAPSHOT----(20 November 2020 23:01:16) CuisUniversity-4384.image priorSource: 17317918!

----QUIT----(20 November 2020 23:01:22) CuisUniversity-4384.image priorSource: 17318350!

----STARTUP---- (22 November 2020 19:20:18) as /home/fede/Documentos/Facultad/Inge1/Cuises/tus-libros-2/CuisUniversity-4384.image!

!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 19:21:25' prior: 50872839!
test06

	| cart cashier |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 1 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	self assert: cashier revenue equals: 50.
	self assert: cashier totalSales equals: 0
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 19:22:01' prior: 50872859!
test06

	| cart cashier |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 1 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	cashier checkout.
	self assert: cashier revenue equals: 50.
	self assert: cashier totalSales equals: 0
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 19:22:41' prior: 50872871!
test06

	| cart cashier total |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 1 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	total _ cashier checkout.
	self assert: cashier revenue equals: total.
	self assert: cashier totalSales equals: 0
	
! !

Month month: 12 year: 2019. !

Month month: 12 year: 2019. !

Date today. !

Date today monthOfYear!


Date today mmddyyyy !

Date today mmddyyyy!

Date today  !

today _ Date today  !

today !

Date today !

today _ Date today month !

Month month: 12 year: 2019. !

today !

expired _ Month month: 12 year: 2019. !

today > expired  !

expired _ DateAndTime today. !

expired _ DateAndTime today month !

expired _ DateAndTime today month. !

expired _ DateAndTime monthOfYear.  !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 20:11:37' prior: 50872569!
test05CanNotCheckoutWithACardWithoutCredit

	| cart cashier |

	chargingResponse _ [self error: Cashier cardWithoutCreditErrorDescription].

	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Cashier cardWithoutCreditErrorDescription
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 20:11:47' prior: 50872503!
test03CheckoutTotalIsCorrectForMultipleItems

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	
	self assert: cashier checkout equals: 100
	
! !

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/22/2020 20:11:48'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/22/2020 20:11:48'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/22/2020 20:11:48'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/22/2020 20:11:48'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/22/2020 20:11:48'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/22/2020 20:11:48'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'fr 11/22/2020 20:11:48'!
ERROR!

!testRun: #CashierTest #test06 stamp: 'fr 11/22/2020 20:11:48'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 20:11:54' prior: 50872516!
test02CheckoutTotalIsCorrectForASingleItem

	| cart cashier  |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.

	self assert: cashier checkout equals: 50
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 20:12:25' prior: 50872928!
test03CheckoutTotalIsCorrectForMultipleItems

	| cart cashier  |
	
	chargingResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	
	self assert: cashier checkout equals: 100
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 20:12:48' prior: 50872964!
test02CheckoutTotalIsCorrectForASingleItem

	| cart cashier  |
	
	chargingResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.

	self assert: cashier checkout equals: 50
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 20:13:16'!
test07

	| cart cashier total |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 1 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	total _ cashier checkout.
	self assert: cashier revenue equals: total.
	self assert: cashier totalSales equals: 0
	
! !

!methodRemoval: CashierTest #test07 stamp: 'fr 11/22/2020 20:13:39'!
test07

	| cart cashier total |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 1 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	total _ cashier checkout.
	self assert: cashier revenue equals: total.
	self assert: cashier totalSales equals: 0
	
!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 20:17:57' prior: 50872883!
test06

	| cart cashier |
	
	chargingResponse _ [self error: Cashier stolenCardErrorDescription].


	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 1 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	
	self  should: [	cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier stolenCardErrorDescription.
			self assert: cashier totalSales equals: 0
		]
	
	
! !

!testRun: #CashierTest #test06 stamp: 'fr 11/22/2020 20:18:04'!
ERROR!
!Cashier class methodsFor: 'error description' stamp: 'fr 11/22/2020 20:18:11'!
stolenCardErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error description' stamp: 'fr 11/22/2020 20:18:22' prior: 50873046!
stolenCardErrorDescription
	
	^'Stolen card!!'! !

!testRun: #CashierTest #test06 stamp: 'fr 11/22/2020 20:18:24'!
ERROR!
!Cashier methodsFor: 'sales' stamp: 'fr 11/22/2020 20:18:30'!
totalSales
	self shouldBeImplemented.! !
!Cashier methodsFor: 'sales' stamp: 'fr 11/22/2020 20:18:34' prior: 50873057!
totalSales
	
	^0! !

!testRun: #CashierTest #test06 stamp: 'fr 11/22/2020 20:18:35'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/22/2020 20:18:35'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/22/2020 20:18:35'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/22/2020 20:18:35'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/22/2020 20:18:35'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/22/2020 20:18:35'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'fr 11/22/2020 20:18:35'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 20:19:27' prior: 50872911!
test05CanNotCheckoutWithACardWithoutCredit

	| cart cashier |

	chargingResponse _ [self error: Cashier cardWithoutCreditErrorDescription].

	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier cardWithoutCreditErrorDescription.
			self assert: cashier totalSales equals: 0
		]
	
! !

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/22/2020 20:19:27'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/22/2020 20:19:27'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/22/2020 20:19:27'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/22/2020 20:19:27'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/22/2020 20:19:27'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/22/2020 20:19:27'!
PASSED!

!testRun: #CashierTest #test06 stamp: 'fr 11/22/2020 20:19:27'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 20:20:10' prior: 50872228!
test04CashierDoesNotAcceptExpiredCards

	| cart |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.	

	self  should: [Cashier for: cart paymentMethod: self expiredCard paymentProcessor: self] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Cashier expiredCardErrorDescription
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 20:20:30' prior: 50873025!
test06

	| cart cashier |
	
	chargingResponse _ [self error: Cashier stolenCardErrorDescription].

	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 1 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	
	self  should: [	cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier stolenCardErrorDescription.
			self assert: cashier totalSales equals: 0
		]
	
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 20:20:59'!
test06CanNotCheckoutWithAStolenCard

	| cart cashier |
	
	chargingResponse _ [self error: Cashier stolenCardErrorDescription].

	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 1 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	
	self  should: [	cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier stolenCardErrorDescription.
			self assert: cashier totalSales equals: 0
		]
	
	
! !

!methodRemoval: CashierTest #test06 stamp: 'fr 11/22/2020 20:20:59'!
test06

	| cart cashier |
	
	chargingResponse _ [self error: Cashier stolenCardErrorDescription].

	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 1 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	
	self  should: [	cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier stolenCardErrorDescription.
			self assert: cashier totalSales equals: 0
		]
	
	
!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 20:21:12' prior: 50873086!
test05CanNotCheckoutWithACardWithoutCredit

	| cart cashier |

	chargingResponse _ [self error: Cashier cardWithoutCreditErrorDescription].

	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier cardWithoutCreditErrorDescription.
			self assert: cashier totalSales equals: 0
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 20:21:17' prior: 50873198!
test05CanNotCheckoutWithACardWithoutCredit

	| cart cashier |

	chargingResponse _ [self error: Cashier cardWithoutCreditErrorDescription].

	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 1 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier cardWithoutCreditErrorDescription.
			self assert: cashier totalSales equals: 0
		]
	
! !

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/22/2020 20:21:17'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/22/2020 20:21:17'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/22/2020 20:21:17'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/22/2020 20:21:17'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/22/2020 20:21:17'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/22/2020 20:21:17'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/22/2020 20:21:17'!
PASSED!

----SNAPSHOT----(22 November 2020 20:21:32) CuisUniversity-4384.image priorSource: 17318444!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/22/2020 20:22:12'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/22/2020 20:22:12'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/22/2020 20:22:12'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/22/2020 20:22:12'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/22/2020 20:22:12'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/22/2020 20:22:12'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 20:22:20'!
test07

	| cart cashier total |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 1 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	total _ cashier checkout.
	self assert: cashier revenue equals: total.
	self assert: cashier totalSales equals: 0! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 20:22:30' prior: 50873284!
test07

	| cart cashier total |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 1 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	total _ cashier checkout.
	self assert: cashier revenue equals: total.
	self assert: cashier totalSales equals: 1! !

!testRun: #CashierTest #test07 stamp: 'fr 11/22/2020 20:25:10'!
ERROR!
!Cashier methodsFor: 'sales' stamp: 'fr 11/22/2020 20:25:18'!
revenue
	self shouldBeImplemented.! !
!Cashier methodsFor: 'sales' stamp: 'fr 11/22/2020 20:25:25' prior: 50873311!
revenue
	
	^50! !

!testRun: #CashierTest #test07 stamp: 'fr 11/22/2020 20:25:26'!
FAILURE!
!Cashier methodsFor: 'total' stamp: 'fr 11/22/2020 20:27:02' prior: 50872142!
checkout

	| total |
	total _ cart total.
	paymentProcessor charge: total on: paymentMethod.
	^total! !

!classDefinition: #Cashier category: 'TusLibros - Exercise - II' stamp: 'fr 11/22/2020 20:27:44'!
Object subclass: #Cashier
	instanceVariableNames: 'cart paymentMethod paymentProcessor sales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!
!Cashier methodsFor: 'initialization' stamp: 'fr 11/22/2020 20:27:43' prior: 50871655!
initializeFor: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor 

	cart _ aCart.
	paymentMethod _ aCard.
	paymentProcessor _ aPaymentProcessor.
	sales _ OrderedCollection new! !

!testRun: #CashierTest #test07 stamp: 'fr 11/22/2020 20:27:47'!
FAILURE!
!Cashier methodsFor: 'total' stamp: 'fr 11/22/2020 20:28:16' prior: 50873321!
checkout

	| total |
	total _ cart total.
	paymentProcessor charge: total on: paymentMethod.
	sales add: total.
	^total! !

!testRun: #CashierTest #test07 stamp: 'fr 11/22/2020 20:28:50'!
FAILURE!
!Cashier methodsFor: 'sales' stamp: 'fr 11/22/2020 20:29:08' prior: 50873061!
totalSales
	
	^sales size! !

!testRun: #CashierTest #test07 stamp: 'fr 11/22/2020 20:29:10'!
FAILURE!

!testRun: #CashierTest #test07 stamp: 'fr 11/22/2020 20:29:13'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/22/2020 20:29:13'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/22/2020 20:29:13'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/22/2020 20:29:13'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/22/2020 20:29:13'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/22/2020 20:29:13'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/22/2020 20:29:13'!
PASSED!

!testRun: #CashierTest #test07 stamp: 'fr 11/22/2020 20:29:13'!
PASSED!

----STARTUP---- (23 November 2020 01:37:58) as /home/fede/Documentos/Facultad/Inge1/Cuises/linux64/CuisUniversity-4384.image!

!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 20:22:20'!
test07

	| cart cashier total |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 1 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	total _ cashier checkout.
	self assert: cashier revenue equals: total.
	self assert: cashier totalSales equals: 0! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 20:22:30' prior: 50876099!
test07

	| cart cashier total |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 1 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	total _ cashier checkout.
	self assert: cashier revenue equals: total.
	self assert: cashier totalSales equals: 1! !
!Cashier methodsFor: 'sales' stamp: 'fr 11/22/2020 20:25:18'!
revenue
	self shouldBeImplemented.! !
!Cashier methodsFor: 'sales' stamp: 'fr 11/22/2020 20:25:25' prior: 50876124!
revenue
	
	^50! !
!Cashier methodsFor: 'total' stamp: 'fr 11/22/2020 20:27:02' prior: 50872142!
checkout

	| total |
	total _ cart total.
	paymentProcessor charge: total on: paymentMethod.
	^total! !

!classDefinition: #Cashier category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 01:38:06'!
Object subclass: #Cashier
	instanceVariableNames: 'cart paymentMethod paymentProcessor sales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!
!Cashier methodsFor: 'initialization' stamp: 'fr 11/22/2020 20:27:43' prior: 50871655!
initializeFor: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor 

	cart _ aCart.
	paymentMethod _ aCard.
	paymentProcessor _ aPaymentProcessor.
	sales _ OrderedCollection new! !
!Cashier methodsFor: 'total' stamp: 'fr 11/22/2020 20:28:16' prior: 50876131!
checkout

	| total |
	total _ cart total.
	paymentProcessor charge: total on: paymentMethod.
	sales add: total.
	^total! !
!Cashier methodsFor: 'sales' stamp: 'fr 11/22/2020 20:29:08' prior: 50873061!
totalSales
	
	^sales size! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 20:39:17' prior: 50876112!
test07

	| cart cashier total |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	total _ cashier checkout.
	self assert: cashier revenue equals: total.
	self assert: cashier totalSales equals: 1! !
!Cashier methodsFor: 'sales' stamp: 'fr 11/22/2020 20:39:50' prior: 50876128!
revenue
	
	^sales sum! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 20:39:54' prior: 50876166!
test07

	| cart cashier total |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 1 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	total _ cashier checkout.
	self assert: cashier revenue equals: total.
	self assert: cashier totalSales equals: 1! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 20:40:46'!
test07CashierRegistersSalesProperly

	| cart cashier total |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 1 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	total _ cashier checkout.
	self assert: cashier revenue equals: total.
	self assert: cashier totalSales equals: 1! !

!methodRemoval: CashierTest #test07 stamp: 'fr 11/23/2020 01:38:06'!
test07

	| cart cashier total |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 1 of: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	total _ cashier checkout.
	self assert: cashier revenue equals: total.
	self assert: cashier totalSales equals: 1!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:08:48' prior: 50873218!
test05CanNotCheckoutWithACardWithoutCredit

	| cart cashier |

	chargingResponse _ [self error: Cashier cardWithoutCreditErrorDescription].

	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier cardWithoutCreditErrorDescription.
			self assert: cashier totalSales equals: 0
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:08:53' prior: 50873160!
test06CanNotCheckoutWithAStolenCard

	| cart cashier |
	
	chargingResponse _ [self error: Cashier stolenCardErrorDescription].

	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	
	self  should: [	cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier stolenCardErrorDescription.
			self assert: cashier totalSales equals: 0
		]
	
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:08:59' prior: 50876195!
test07CashierRegistersSalesProperly

	| cart cashier total |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	total _ cashier checkout.
	self assert: cashier revenue equals: total.
	self assert: cashier totalSales equals: 1! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:11:14' prior: 50876261!
test07CashierRegistersSalesProperly

	| cart cashier |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	self assert: cashier revenue equals: cashier checkout.
	self assert: cashier totalSales equals: 1! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:11:28' prior: 50876275!
test07CashierRegistersSalesProperly

	| cart cashier total |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	total _ cashier checkout.
	self assert: cashier revenue equals: total.
	self assert: cashier totalSales equals: 1! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:11:42' prior: 50876288!
test07CashierRegistersSalesProperly

	| cart cashier |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	self assert: cashier revenue equals: cashier checkout.
	self assert: cashier totalSales equals: 1! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:12:29' prior: 50876302!
test07CashierRegistersSalesProperly

	| cart cashier |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	self assert: cashier revenue equals: 0.! !
!Cashier methodsFor: 'sales' stamp: 'fr 11/22/2020 21:13:24' prior: 50876179!
revenue
	
	^sales sum: [:aSale | aSale] ifEmpty: [0]! !
!Cashier methodsFor: 'sales' stamp: 'fr 11/22/2020 21:14:13' prior: 50876326!
revenue
	
	^0! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:15:11' prior: 50876315!
test07CashierRegistersSalesProperly

	| cart cashier |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	
	self assert: cashier checkout equals: cashier revenue.! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:15:13' prior: 50876335!
test07CashierRegistersSalesProperly

	| cart cashier |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	self assert: cashier checkout equals: cashier revenue.! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:15:15' prior: 50876347!
test07CashierRegistersSalesProperly

	| cart cashier |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	self assert: cashier checkout equals: cashier revenue! !
!Cashier methodsFor: 'sales' stamp: 'fr 11/22/2020 21:16:03' prior: 50876331!
revenue
	
	^sales sum: [:aSale | aSale] ifEmpty: [0]! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:20:45' prior: 50876359!
test07CashierRegistersSalesProperly

	| cart cashier salesRegister|
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self.
	self assert: cashier checkout equals: cashier revenue! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:25:24' prior: 50876375!
test07CashierRegistersSalesProperly

	| cart cashier salesRegister|
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self registerOn: salesRegister.
	self assert: salesRegister size equals: 1.! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:25:34' prior: 50876388!
test07CashierRegistersSalesProperly

	| cart cashier salesRegister|
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self registerOn: salesRegister.
	cashier checkout.
	self assert: salesRegister size equals: 1.! !
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/22/2020 21:25:41'!
for: aCart paymentMethod: aCard paymentProcessor: aCashierTest registerOn: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aCart paymentMethod: aCard paymentProcessor: aCashierTest registerOn: anOrderedCollection ! !
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/22/2020 21:25:45' prior: 50876416!
for: aCart paymentMethod: aCard paymentProcessor: aCashierTest registerOn: anOrderedCollection 
	
	^self new initializeFor: aCart paymentMethod: aCard paymentProcessor: aCashierTest registerOn: anOrderedCollection ! !
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/22/2020 21:26:04' prior: 50876429!
for: aCart paymentMethod: aCard paymentProcessor: aCashierTest registerOn: anOrderedCollection 
	
	self validateCart: aCart.
	self validateCard: aCard.
		
	^self new initializeFor: aCart paymentMethod: aCard paymentProcessor: aCashierTest registerOn: anOrderedCollection ! !

!classDefinition: #Cashier category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 01:38:07'!
Object subclass: #Cashier
	instanceVariableNames: 'cart paymentMethod paymentProcessor sales card'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!

!classDefinition: #Cashier category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 01:38:07'!
Object subclass: #Cashier
	instanceVariableNames: 'cart paymentMethod paymentProcessor sales card cashierTest'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!

!classDefinition: #Cashier category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 01:38:07'!
Object subclass: #Cashier
	instanceVariableNames: 'cart paymentMethod paymentProcessor sales card cashierTest orderedCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!
!Cashier methodsFor: 'initialization' stamp: 'fr 11/22/2020 21:26:14'!
initializeFor: aCart paymentMethod: aCard paymentProcessor: aCashierTest registerOn: anOrderedCollection 
	self shouldBeImplemented.
	cart := aCart.
	card := aCard.
	cashierTest := aCashierTest.
	orderedCollection := anOrderedCollection.! !
!Cashier methodsFor: 'initialization' stamp: 'fr 11/22/2020 21:26:30' prior: 50876478!
initializeFor: aCart paymentMethod: aCard paymentProcessor: aCashierTest registerOn: anOrderedCollection 
	
	cart _ aCart.
	card _ aCard.
	cashierTest _ aCashierTest.
	orderedCollection _ anOrderedCollection.! !

!classDefinition: #Cashier category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 01:38:07'!
Object subclass: #Cashier
	instanceVariableNames: 'cart paymentMethod paymentProcessor sales card cashierTest salesRegister'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/22/2020 21:26:35' prior: 50876489!
initializeFor: aCart paymentMethod: aCard paymentProcessor: aCashierTest registerOn: anOrderedCollection 
	
	cart _ aCart.
	card _ aCard.
	cashierTest _ aCashierTest.
	salesRegister _ anOrderedCollection.! !
!Cashier methodsFor: 'initialization' stamp: 'fr 11/22/2020 21:26:41' prior: 50876509!
initializeFor: aCart paymentMethod: aCard paymentProcessor: aCashierTest registerOn: aSalesRegister 
	
	cart _ aCart.
	card _ aCard.
	cashierTest _ aCashierTest.
	salesRegister _ aSalesRegister.! !
!Cashier methodsFor: 'initialization' stamp: 'fr 11/22/2020 21:26:45' prior: 50876519!
initializeFor: aCart paymentMethod: aCard paymentProcessor: aCashierTest registerOn: aSalesRegister 
	
	cart _ aCart.
	card _ aCard.
	cashierTest _ aCashierTest.
	salesRegister _ aSalesRegister! !
!Cashier methodsFor: 'initialization' stamp: 'fr 11/22/2020 21:27:57' prior: 50876528!
initializeFor: aCart paymentMethod: aCard paymentProcessor: aCashierTest registerOn: aSalesRegister 
	
	cart _ aCart.
	card _ aCard.
	paymentProcessor _ aCashierTest.
	salesRegister _ aSalesRegister! !
!Cashier methodsFor: 'initialization' stamp: 'fr 11/22/2020 21:28:02' prior: 50876537!
initializeFor: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor registerOn: aSalesRegister 
	
	cart _ aCart.
	card _ aCard.
	paymentProcessor _ aPaymentProcessor.
	salesRegister _ aSalesRegister! !
!Cashier methodsFor: 'total' stamp: 'fr 11/22/2020 21:28:27' prior: 50876155!
checkout

	| total |
	total _ cart total.
	paymentProcessor charge: total on: paymentMethod.
	salesRegister add: total.
	^total! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:29:06' prior: 50876402!
test07CashierRegistersSalesProperly

	| cart cashier salesRegister|
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self registerOn: OrderedCollection new.
	cashier checkout.
	self assert: salesRegister size equals: 1.! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:29:20' prior: 50876564!
test07CashierRegistersSalesProperly

	| cart cashier salesRegister|
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self registerOn: salesRegister.
	cashier checkout.
	self assert: salesRegister size equals: 1.! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:29:48' prior: 50872988!
test02CheckoutTotalIsCorrectForASingleItem

	| cart cashier  salesRegister |
	
	chargingResponse _ [].
	
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self registerOn: salesRegister.

	self assert: cashier checkout equals: 50
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:30:19' prior: 50876591!
test02CheckoutTotalIsCorrectForASingleItem

	| cart cashier  |
	
	chargingResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self registerOn: OrderedCollection new.

	self assert: cashier checkout equals: 50
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:30:31' prior: 50872975!
test03CheckoutTotalIsCorrectForMultipleItems

	| cart cashier  |
	
	chargingResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self registerOn: OrderedCollection new.	
	self assert: cashier checkout equals: 100
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:30:49' prior: 50876606!
test02CheckoutTotalIsCorrectForASingleItem

	| cart cashier  |
	
	chargingResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self registerOn: OrderedCollection new.
	self assert: cashier checkout equals: 50
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:31:08' prior: 50872320!
test01CanNotCheckoutEmptyCart

	| cart |
	cart _ Cart acceptingItemsOf: self catalogue.
	
	self  should: [	Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self registerOn: OrderedCollection new.]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckoutWithEmptyCartErrorDescription
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:31:32' prior: 50873129!
test04CashierDoesNotAcceptExpiredCards

	| cart |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.	

	self  should: [	Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self registerOn: OrderedCollection new.] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Cashier expiredCardErrorDescription
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:32:28' prior: 50876221!
test05CanNotCheckoutWithACardWithoutCredit

	| cart cashier salesRegister |

	chargingResponse _ [self error: Cashier cardWithoutCreditErrorDescription].
	
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ 	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self registerOn: salesRegister.
	
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier cardWithoutCreditErrorDescription.
			self assert: cashier salesRegister size equals: 0
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:32:36' prior: 50876674!
test05CanNotCheckoutWithACardWithoutCredit

	| cart cashier salesRegister |

	chargingResponse _ [self error: Cashier cardWithoutCreditErrorDescription].
	
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ 	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self registerOn: salesRegister.
	
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier cardWithoutCreditErrorDescription.
			self assert: salesRegister size equals: 0
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:33:06' prior: 50876660!
test04CashierDoesNotAcceptExpiredCards

	| cart |
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.	

	self  should: [	Cashier for: cart paymentMethod: self expiredCard paymentProcessor: self registerOn: OrderedCollection new.] 
		raise: Error - MessageNotUnderstood  
		withMessageText: Cashier expiredCardErrorDescription
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:33:57' prior: 50876241!
test06CanNotCheckoutWithAStolenCard

	| cart cashier salesRegister |
	
	chargingResponse _ [self error: Cashier stolenCardErrorDescription].
	
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ 	cashier _ 	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self registerOn: salesRegister.
	
	self  should: [	cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier stolenCardErrorDescription.
			self assert: salesRegister size equals: 0
		]
	
	
! !

!methodRemoval: Cashier #revenue stamp: 'fr 11/23/2020 01:38:07'!
revenue
	
	^sales sum: [:aSale | aSale] ifEmpty: [0]!

!methodRemoval: Cashier #totalSales stamp: 'fr 11/23/2020 01:38:07'!
totalSales
	
	^sales size!

!methodRemoval: Cashier class #for:paymentMethod:paymentProcessor: stamp: 'fr 11/23/2020 01:38:07'!
for: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor 
	
	self validateCart: aCart.
	self validateCard: aCard.
	
	^self new initializeFor: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor !

!methodRemoval: Cashier #initializeFor:paymentMethod:paymentProcessor: stamp: 'fr 11/23/2020 01:38:07'!
initializeFor: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor 

	cart _ aCart.
	paymentMethod _ aCard.
	paymentProcessor _ aPaymentProcessor.
	sales _ OrderedCollection new!
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/22/2020 21:34:41' prior: 50876439!
for: aCart paymentMethod: aCard paymentProcessor: aCashierTest registerOn: aSalesRegister 
	
	self validateCart: aCart.
	self validateCard: aCard.
		
	^self new initializeFor: aCart paymentMethod: aCard paymentProcessor: aCashierTest registerOn: aSalesRegister ! !
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/22/2020 21:34:47' prior: 50876783!
for: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor registerOn: aSalesRegister 
	
	self validateCart: aCart.
	self validateCard: aCard.
		
	^self new initializeFor: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor registerOn: aSalesRegister ! !

!classDefinition: #Cashier category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 01:38:07'!
Object subclass: #Cashier
	instanceVariableNames: 'cart paymentMethod paymentProcessor card cashierTest salesRegister'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!

!classDefinition: #Cashier category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 01:38:07'!
Object subclass: #Cashier
	instanceVariableNames: 'cart paymentMethod paymentProcessor card cashierTest salesRegister'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!

!classDefinition: #Cashier category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 01:38:07'!
Object subclass: #Cashier
	instanceVariableNames: 'cart paymentMethod paymentProcessor card salesRegister'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!

!classDefinition: #Cashier category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 01:38:07'!
Object subclass: #Cashier
	instanceVariableNames: 'cart paymentMethod paymentProcessor card salesRegister'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!

!classDefinition: #Cashier category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 01:38:07'!
Object subclass: #Cashier
	instanceVariableNames: 'cart paymentMethod paymentProcessor salesRegister'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!

!classDefinition: #Cashier category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 01:38:07'!
Object subclass: #Cashier
	instanceVariableNames: 'cart paymentMethod paymentProcessor salesRegister'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:36:37' prior: 50876720!
test04CashierDoesNotAcceptExpiredCards

	| cart salesRegister |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.	

	self  should: [	Cashier for: cart paymentMethod: self expiredCard paymentProcessor: self registerOn: salesRegister.] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			
			self assert: anError messageText equals: Cashier expiredCardErrorDescription.
			self assert: salesRegister size equals: 0
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:36:41' prior: 50876862!
test04CashierDoesNotAcceptExpiredCards

	| cart salesRegister |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.	

	self  should: [	Cashier for: cart paymentMethod: self expiredCard paymentProcessor: self registerOn: salesRegister.] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier expiredCardErrorDescription.
			self assert: salesRegister size equals: 0
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:37:44' prior: 50876646!
test01CanNotCheckoutEmptyCart

	
	
	self  should: [
				Cashier 
					for: (Cart acceptingItemsOf: self catalogue)
					paymentMethod: self nonExpiredCard 
					paymentProcessor: self 
					registerOn: OrderedCollection new.
			   ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckoutWithEmptyCartErrorDescription
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:37:49' prior: 50876900!
test01CanNotCheckoutEmptyCart

	self  should: [
				Cashier 
					for: (Cart acceptingItemsOf: self catalogue)
					paymentMethod: self nonExpiredCard 
					paymentProcessor: self 
					registerOn: OrderedCollection new.
			   ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckoutWithEmptyCartErrorDescription
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:38:29' prior: 50876633!
test02CheckoutTotalIsCorrectForASingleItem

	| cart cashier  |
	
	chargingResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.
	self assert: cashier checkout equals: 50
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:38:31' prior: 50876928!
test02CheckoutTotalIsCorrectForASingleItem

	| cart cashier  |
	
	chargingResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.
				
	self assert: cashier checkout equals: 50
	
! !

!classDefinition: #CashierTest category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 01:38:07'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'paymentResponse'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/22/2020 21:38:48' prior: 50872547!
charge: amountToCharge on: aCard 

	paymentResponse value
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/22/2020 21:38:48' prior: 50876619!
test03CheckoutTotalIsCorrectForMultipleItems

	| cart cashier  |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.
	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self registerOn: OrderedCollection new.	
	self assert: cashier checkout equals: 100
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/22/2020 21:38:48' prior: 50876942!
test02CheckoutTotalIsCorrectForASingleItem

	| cart cashier  |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.
				
	self assert: cashier checkout equals: 50
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/22/2020 21:38:48' prior: 50876697!
test05CanNotCheckoutWithACardWithoutCredit

	| cart cashier salesRegister |

	paymentResponse _ [self error: Cashier cardWithoutCreditErrorDescription].
	
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ 	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self registerOn: salesRegister.
	
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier cardWithoutCreditErrorDescription.
			self assert: salesRegister size equals: 0
		]
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/22/2020 21:38:48' prior: 50876734!
test06CanNotCheckoutWithAStolenCard

	| cart cashier salesRegister |
	
	paymentResponse _ [self error: Cashier stolenCardErrorDescription].
	
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ 	cashier _ 	cashier _ Cashier for: cart paymentMethod: self nonExpiredCard paymentProcessor: self registerOn: salesRegister.
	
	self  should: [	cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier stolenCardErrorDescription.
			self assert: salesRegister size equals: 0
		]
	
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:40:56' prior: 50876971!
test03CheckoutTotalIsCorrectForMultipleItems

	| cart cashier  |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.	
				
	self assert: cashier checkout equals: 100
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:41:26' prior: 50876881!
test04CashierDoesNotAcceptExpiredCards

	| cart salesRegister |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: 'an item'.	

	self  should: [	Cashier 
					for: cart 
					paymentMethod: self expiredCard 
					paymentProcessor: self 
					registerOn: salesRegister.
			    ] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier expiredCardErrorDescription.
			self assert: salesRegister size equals: 0
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:42:01' prior: 50877000!
test05CanNotCheckoutWithACardWithoutCredit

	| cart cashier salesRegister |

	paymentResponse _ [self error: Cashier cardWithoutCreditErrorDescription].
	
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ 	cashier _ Cashier 
						for: cart 
						paymentMethod: self nonExpiredCard 
						paymentProcessor: self 
						registerOn: salesRegister.
	
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier cardWithoutCreditErrorDescription.
			self assert: salesRegister size equals: 0
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:42:19' prior: 50877024!
test06CanNotCheckoutWithAStolenCard

	| cart cashier salesRegister |
	
	paymentResponse _ [self error: Cashier stolenCardErrorDescription].
	
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ 	cashier _ 	cashier _ Cashier 
								for: cart 
								paymentMethod: self nonExpiredCard 
								paymentProcessor: self 
								registerOn: salesRegister.
	
	self  should: [	cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier stolenCardErrorDescription.
			self assert: salesRegister size equals: 0
		]
	
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:42:33' prior: 50876577!
test07CashierRegistersSalesProperly

	| cart cashier salesRegister|
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
	cashier checkout.
	self assert: salesRegister size equals: 1.! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:42:41' prior: 50877129!
test07CashierRegistersSalesProperly

	| cart cashier salesRegister|
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
	cashier checkout.
	self assert: salesRegister size equals: 1.! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:42:48' prior: 50877144!
test07CashierRegistersSalesProperly

	| cart cashier salesRegister|
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
				
	cashier checkout.
	self assert: salesRegister size equals: 1.! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:43:07' prior: 50877105!
test06CanNotCheckoutWithAStolenCard

	| cart cashier salesRegister |
	
	paymentResponse _ [self error: Cashier stolenCardErrorDescription].
	
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier 
								for: cart 
								paymentMethod: self nonExpiredCard 
								paymentProcessor: self 
								registerOn: salesRegister.
	
	self  should: [	cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier stolenCardErrorDescription.
			self assert: salesRegister size equals: 0
		]
	
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:43:11' prior: 50877174!
test06CanNotCheckoutWithAStolenCard

	| cart cashier salesRegister |
	
	paymentResponse _ [self error: Cashier stolenCardErrorDescription].
	
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.

	self  should: [	cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier stolenCardErrorDescription.
			self assert: salesRegister size equals: 0
		]
	
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:43:21' prior: 50877081!
test05CanNotCheckoutWithACardWithoutCredit

	| cart cashier salesRegister |

	paymentResponse _ [self error: Cashier cardWithoutCreditErrorDescription].
	
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
	
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier cardWithoutCreditErrorDescription.
			self assert: salesRegister size equals: 0
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:46:34' prior: 50877159!
test07CashierRegistersSalesProperly

	| cart cashier salesRegister|
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
				
	cashier checkout.
	self assert: salesRegister size equals: 1.
	self assert: salesRegister sum equals: 50! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:48:47' prior: 50877243!
test07CashierRegistersSalesProperly

	| cart cashier salesRegister|
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
				
	cashier checkout.
	self assert: salesRegister size equals: 1! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:57:18'!
test08

	| cart cashier salesRegister|
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
				
	cashier checkout.
	self assert: salesRegister size equals: 1 ! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 21:59:33' prior: 50877273!
test08

	| cart cashier salesRegister sale |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
				
	cashier checkout.
	sale _ salesRegister first.
	
	self assert: sale total equals: 50! !

!classDefinition: #Sale category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 01:38:07'!
Object subclass: #Sale
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!
!Cashier methodsFor: 'total' stamp: 'fr 11/22/2020 22:01:45' prior: 50876557!
checkout

	| total |
	total _ cart total.
	paymentProcessor charge: total on: paymentMethod.
	salesRegister add: (Sale total: total).
	^total! !
!Sale class methodsFor: 'instance creation' stamp: 'fr 11/22/2020 22:01:56'!
total: aSmallInteger 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeTotal: aSmallInteger ! !
!Sale class methodsFor: 'instance creation' stamp: 'fr 11/22/2020 22:02:01' prior: 50877316!
total: aSmallInteger 
	
	^self new initializeTotal: aSmallInteger ! !
!Sale class methodsFor: 'instance creation' stamp: 'fr 11/22/2020 22:02:05' prior: 50877325!
total: aTotal 
	
	^self new initializeTotal: aTotal ! !

!classDefinition: #Sale category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 01:38:07'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!
!Sale methodsFor: 'initialization' stamp: 'fr 11/22/2020 22:02:15'!
initializeTotal: aTotal 
	self shouldBeImplemented.
	total := aTotal.! !
!Sale methodsFor: 'initialization' stamp: 'fr 11/22/2020 22:02:19' prior: 50877343!
initializeTotal: aTotal 
	
	total _ aTotal.! !
!Sale methodsFor: 'total' stamp: 'fr 11/22/2020 22:02:29'!
total
	self shouldBeImplemented.
	^total! !
!Sale methodsFor: 'total' stamp: 'fr 11/22/2020 22:02:30' prior: 50877352!
total
	
	^total! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 22:02:56' prior: 50877287!
test08

	| cart cashier salesRegister sale |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
				
	cashier checkout.
	sale _ salesRegister first.
	
	self assert: sale total equals: 50.
	self assert: (sale includes: 'an item')! !
!Sale methodsFor: 'testing' stamp: 'fr 11/22/2020 22:03:15'!
includes: aString 
	self shouldBeImplemented.! !
!Sale methodsFor: 'testing' stamp: 'fr 11/22/2020 22:03:20' prior: 50877376!
includes: aString 
	! !
!Sale methodsFor: 'testing' stamp: 'fr 11/22/2020 22:03:25' prior: 50877380!
includes: anItem 
	! !

!classDefinition: #Sale category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 01:38:08'!
Object subclass: #Sale
	instanceVariableNames: 'total items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!
!Sale methodsFor: 'testing' stamp: 'fr 11/22/2020 22:03:37' prior: 50877384!
includes: anItem 
	
	^items includes: anItem
	! !

!methodRemoval: Sale #includes: stamp: 'fr 11/23/2020 01:38:08'!
includes: anItem 
	
	^items includes: anItem
	!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 22:11:02' prior: 50877360!
test08

	| cart cashier salesRegister sale |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
				
	cashier checkout.
	sale _ salesRegister first.
	
	self assert: sale total equals: 50.! !

!classDefinition: #Sale category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 01:38:08'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!

!classDefinition: #Sale category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 01:38:08'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 22:16:01'!
test08SalesHaveTheCorrectTotal

	| cart cashier salesRegister sale |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
				
	cashier checkout.
	sale _ salesRegister first.
	
	self assert: sale total equals: 50.! !

!methodRemoval: CashierTest #test08 stamp: 'fr 11/23/2020 01:38:08'!
test08

	| cart cashier salesRegister sale |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
				
	cashier checkout.
	sale _ salesRegister first.
	
	self assert: sale total equals: 50.!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 22:16:09'!
test08RegisteredSalesHaveTheCorrectTotal

	| cart cashier salesRegister sale |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
				
	cashier checkout.
	sale _ salesRegister first.
	
	self assert: sale total equals: 50.! !

!methodRemoval: CashierTest #test08SalesHaveTheCorrectTotal stamp: 'fr 11/23/2020 01:38:08'!
test08SalesHaveTheCorrectTotal

	| cart cashier salesRegister sale |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
				
	cashier checkout.
	sale _ salesRegister first.
	
	self assert: sale total equals: 50.!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 22:16:26'!
test08RegisteredSalesExhibitTheCorrectTotal

	| cart cashier salesRegister sale |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
				
	cashier checkout.
	sale _ salesRegister first.
	
	self assert: sale total equals: 50.! !

!methodRemoval: CashierTest #test08RegisteredSalesHaveTheCorrectTotal stamp: 'fr 11/23/2020 01:38:08'!
test08RegisteredSalesHaveTheCorrectTotal

	| cart cashier salesRegister sale |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
				
	cashier checkout.
	sale _ salesRegister first.
	
	self assert: sale total equals: 50.!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 22:16:49'!
test08RegisteredSalesDisplayTheCorrectTotal

	| cart cashier salesRegister sale |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
				
	cashier checkout.
	sale _ salesRegister first.
	
	self assert: sale total equals: 50.! !

!methodRemoval: CashierTest #test08RegisteredSalesExhibitTheCorrectTotal stamp: 'fr 11/23/2020 01:38:08'!
test08RegisteredSalesExhibitTheCorrectTotal

	| cart cashier salesRegister sale |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
				
	cashier checkout.
	sale _ salesRegister first.
	
	self assert: sale total equals: 50.!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 22:24:30' prior: 50877259!
test07CashierRegistersSalesProperly

	| cart cashier salesRegister|
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
				
	cashier checkout.
	self assert: salesRegister size equals: 1! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 22:24:54' prior: 50877524!
test08RegisteredSalesDisplayTheCorrectTotal

	| cart cashier salesRegister sale total |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 'an item'.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
				
	total _ cashier checkout.
	sale _ salesRegister first.
	
	self assert: sale total equals: total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/22/2020 22:26:59' prior: 50871787!
expiredCard

	^ CreditCard withExpiration: (GregorianMonthOfYear decemberOf: (GregorianYear number: 2019))! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/22/2020 22:26:59' prior: 50872276!
nonExpiredCard

	^ CreditCard withExpiration: (GregorianMonthOfYear decemberOf: (GregorianYear number: 2029))! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 22:29:31'!
itemInCatalogue

	^ 'an item'! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 22:29:31' prior: 50876985!
test02CheckoutTotalIsCorrectForASingleItem

	| cart cashier  |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.
				
	self assert: cashier checkout equals: 50
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 22:30:13' prior: 50877047!
test03CheckoutTotalIsCorrectForMultipleItems

	| cart cashier  |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.	
				
	self assert: cashier checkout equals: 100
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 22:30:19' prior: 50877061!
test04CashierDoesNotAcceptExpiredCards

	| cart salesRegister |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.	

	self  should: [	Cashier 
					for: cart 
					paymentMethod: self expiredCard 
					paymentProcessor: self 
					registerOn: salesRegister.
			    ] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier expiredCardErrorDescription.
			self assert: salesRegister size equals: 0
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 22:30:27' prior: 50877220!
test05CanNotCheckoutWithACardWithoutCredit

	| cart cashier salesRegister |

	paymentResponse _ [self error: Cashier cardWithoutCreditErrorDescription].
	
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
	
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier cardWithoutCreditErrorDescription.
			self assert: salesRegister size equals: 0
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 22:30:32' prior: 50877197!
test06CanNotCheckoutWithAStolenCard

	| cart cashier salesRegister |
	
	paymentResponse _ [self error: Cashier stolenCardErrorDescription].
	
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.

	self  should: [	cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier stolenCardErrorDescription.
			self assert: salesRegister size equals: 0
		]
	
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 22:30:37' prior: 50877557!
test07CashierRegistersSalesProperly

	| cart cashier salesRegister|
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
				
	cashier checkout.
	self assert: salesRegister size equals: 1! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 22:30:42' prior: 50877572!
test08RegisteredSalesDisplayTheCorrectTotal

	| cart cashier salesRegister sale total |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
				
	total _ cashier checkout.
	sale _ salesRegister first.
	
	self assert: sale total equals: total.! !
!CashierTest methodsFor: 'utils' stamp: 'fr 11/22/2020 22:31:03' prior: 50871203!
catalogue

	^ Dictionary new add: self itemInCatalogue -> 50; yourself! !
!CashierTest methodsFor: 'utils' stamp: 'fr 11/22/2020 22:31:50'!
itemInCataloguePrice

	^ 50! !
!CashierTest methodsFor: 'utils' stamp: 'fr 11/22/2020 22:31:51' prior: 50877734!
catalogue

	^ Dictionary new add: self itemInCatalogue -> self itemInCataloguePrice; yourself! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 22:32:08' prior: 50877606!
test02CheckoutTotalIsCorrectForASingleItem

	| cart cashier  |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.
				
	self assert: cashier checkout equals: self itemInCataloguePrice 
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/22/2020 22:32:42' prior: 50877620!
test03CheckoutTotalIsCorrectForMultipleItems

	| cart cashier  |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.	
				
	self assert: cashier checkout equals: (self itemInCataloguePrice * 2)
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 01:16:23' prior: 50877702!
test07CashierRegistersSalesProperly

	| cart cashier salesRegister|
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
				
	cashier checkout.
	
	self assert: salesRegister size equals: 1! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 01:16:48' prior: 50877717!
test08RegisteredSalesDisplayTheCorrectTotal

	| cart cashier salesRegister total |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
				
	total _ cashier checkout.! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 01:17:18' prior: 50877780!
test07CashierRegistersSalesProperly

	| cart cashier salesRegister total |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
				
	total _ cashier checkout.
	
	self assert: salesRegister size equals: 1.
	self assert: salesRegister first total equals: total.! !

!methodRemoval: CashierTest #test08RegisteredSalesDisplayTheCorrectTotal stamp: 'fr 11/23/2020 01:38:08'!
test08RegisteredSalesDisplayTheCorrectTotal

	| cart cashier salesRegister total |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
				
	total _ cashier checkout.!

!classRemoval: #Cart stamp: 'fr 11/23/2020 01:38:56'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Card stamp: 'fr 11/23/2020 01:38:56'!
Object subclass: #Card
	instanceVariableNames: 'expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'fr 11/23/2020 01:38:57'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/fede/Documentos/Facultad/Inge1/EjerciciosParaEntregar/2020-2c/20-TusLibros/Iteracion1/TusLibros-18.st----!

Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!

!classDefinition: #Cart category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 01:41:12'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!

TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!

!classDefinition: #CartTest category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 01:41:21'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 11/23/2020 01:41:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 11/23/2020 01:41:37'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 11/23/2020 01:41:37'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 11/23/2020 01:41:37'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 11/23/2020 01:41:37'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 11/23/2020 01:41:37'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 11/23/2020 01:41:37'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 11/23/2020 01:41:37'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/23/2020 01:41:37'!
ERROR!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 01:41:37'!
ERROR!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 01:41:37'!
ERROR!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 01:41:37'!
ERROR!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 01:41:37'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 01:41:37'!
ERROR!

!testRun: #CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 01:41:37'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/23/2020 01:41:55'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/23/2020 01:41:55'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 11/23/2020 01:42:16'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 11/23/2020 01:42:16'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 11/23/2020 01:42:16'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 11/23/2020 01:42:16'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 11/23/2020 01:42:16'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 11/23/2020 01:42:16'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 11/23/2020 01:42:16'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 11/23/2020 01:42:16'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/23/2020 01:42:32'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/23/2020 01:42:32'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 01:42:52' prior: 50876914!
test01CanNotCheckoutEmptyCart

	self  should: [
				Cashier 
					for: ( Cart acceptingItemsOf: self catalogue)
					paymentMethod: self nonExpiredCard 
					paymentProcessor: self 
					registerOn: OrderedCollection new.
			   ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckoutWithEmptyCartErrorDescription
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 01:42:54' prior: 50878157!
test01CanNotCheckoutEmptyCart

	self  should: [
				Cashier 
					for: (Cart acceptingItemsOf: self catalogue)
					paymentMethod: self nonExpiredCard 
					paymentProcessor: self 
					registerOn: OrderedCollection new.
			   ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckoutWithEmptyCartErrorDescription
	
! !

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/23/2020 01:42:54'!
ERROR!

!classDefinition: #CreditCard category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 01:43:34'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!
!CashierTest methodsFor: 'utils' stamp: 'fr 11/23/2020 01:43:24' prior: 50877596!
nonExpiredCard

	^ CreditCard withExpiration: (GregorianMonthOfYear decemberOf: (GregorianYear number: 2029))! !

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/23/2020 01:43:38'!
ERROR!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 01:43:38'!
ERROR!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 01:43:38'!
ERROR!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 01:43:38'!
ERROR!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 01:43:38'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 01:43:38'!
ERROR!

!testRun: #CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 01:43:38'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/23/2020 01:43:42'!
ERROR!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/23/2020 01:43:42'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'fr 11/23/2020 01:43:47'!
withExpiration: aGregorianMonthOfYear 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithExpiration: aGregorianMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'fr 11/23/2020 01:43:51' prior: 50878230!
withExpiration: aGregorianMonthOfYear 
	
	^self new initializeWithExpiration: aGregorianMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'fr 11/23/2020 01:43:56' prior: 50878240!
withExpiration: anExpirationDate 
	
	^self new initializeWithExpiration: anExpirationDate ! !

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/23/2020 01:43:58'!
ERROR!

!classDefinition: #CreditCard category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 01:44:07'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!
!CreditCard methodsFor: 'initialization' stamp: 'fr 11/23/2020 01:44:07'!
initializeWithExpiration: anExpirationDate 
	self shouldBeImplemented.
	expirationDate := anExpirationDate.! !
!CreditCard methodsFor: 'initialization' stamp: 'fr 11/23/2020 01:44:10' prior: 50878264!
initializeWithExpiration: anExpirationDate 
	
	expirationDate := anExpirationDate.! !
!CreditCard methodsFor: 'initialization' stamp: 'fr 11/23/2020 01:44:12' prior: 50878271!
initializeWithExpiration: anExpirationDate 
	
	expirationDate _ anExpirationDate.! !

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/23/2020 01:44:13'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/23/2020 01:44:16'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 01:44:18'!
ERROR!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 01:44:18'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 01:44:24' prior: 50877749!
test02CheckoutTotalIsCorrectForASingleItem

	| cart cashier  |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.
				
	self assert: cashier checkout equals: self itemInCataloguePrice 
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 01:44:25' prior: 50878295!
test02CheckoutTotalIsCorrectForASingleItem

	| cart cashier  |
	
	paymentResponse _ [].
	
	cart _ Cart  acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.
				
	self assert: cashier checkout equals: self itemInCataloguePrice 
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 01:44:26' prior: 50878310!
test02CheckoutTotalIsCorrectForASingleItem

	| cart cashier  |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.
				
	self assert: cashier checkout equals: self itemInCataloguePrice 
	
! !

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 01:44:27'!
ERROR!
!CashierTest methodsFor: 'utils' stamp: 'fr 11/23/2020 01:44:34' prior: 50877743!
catalogue

	^ Dictionary  new add: self itemInCatalogue -> self itemInCataloguePrice; yourself! !
!CashierTest methodsFor: 'utils' stamp: 'fr 11/23/2020 01:44:34' prior: 50878344!
catalogue

	^ Dictionary new add: self itemInCatalogue -> self itemInCataloguePrice; yourself! !

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 01:44:38'!
ERROR!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 01:44:38'!
ERROR!
!CashierTest methodsFor: 'utils' stamp: 'fr 11/23/2020 01:45:01' prior: 50877602!
itemInCatalogue

	^ 'an  item'! !
!CashierTest methodsFor: 'utils' stamp: 'fr 11/23/2020 01:45:02' prior: 50878363!
itemInCatalogue

	^ 'an item'! !

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 01:45:07'!
ERROR!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 01:45:07'!
ERROR!

self itemInCatalogue!
!CashierTest methodsFor: 'utils' stamp: 'fr 11/23/2020 01:45:29' prior: 50878367!
itemInCatalogue

	^'an item'! !

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/23/2020 01:45:35'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 01:45:35'!
ERROR!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 01:45:35'!
ERROR!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 01:45:35'!
ERROR!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 01:45:35'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 01:45:35'!
ERROR!

!testRun: #CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 01:45:35'!
ERROR!

self itemInCatalogue!

!methodRemoval: CashierTest #itemInCatalogue stamp: 'fr 11/23/2020 01:46:14'!
itemInCatalogue

	^'an item'!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 01:46:17'!
ERROR!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 01:46:17'!
ERROR!
!CashierTest methodsFor: 'utils' stamp: 'fr 11/23/2020 01:46:29'!
itemInCatalogue
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'utils' stamp: 'fr 11/23/2020 01:46:34' prior: 50878416!
itemInCatalogue
	
	^ 'an item'! !

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 01:46:35'!
ERROR!
!CashierTest methodsFor: 'utils' stamp: 'fr 11/23/2020 01:46:54' prior: 50878350!
catalogue

	^ Dictionary new add: (self itemInCatalogue -> self itemInCataloguePrice); yourself! !

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/23/2020 01:46:55'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 01:46:55'!
ERROR!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 01:46:55'!
ERROR!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 01:46:55'!
ERROR!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 01:46:55'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 01:46:55'!
ERROR!

!testRun: #CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 01:46:55'!
ERROR!

self itemInCatalogue!

----SNAPSHOT----(23 November 2020 01:47:38) CuisUniversity-4384.image priorSource: 17331536!

----QUIT----(23 November 2020 01:47:52) CuisUniversity-4384.image priorSource: 17497777!

----STARTUP---- (23 November 2020 01:48:39) as /home/fede/Documentos/Facultad/Inge1/Cuises/linux64/CuisUniversity-4384.image!


!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/23/2020 01:48:41'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 01:48:41'!
ERROR!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 01:48:41'!
ERROR!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 01:48:41'!
ERROR!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 01:48:41'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 01:48:41'!
ERROR!

!testRun: #CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 01:48:41'!
ERROR!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 01:48:54'!
ERROR!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 01:48:54'!
ERROR!

self catalogue.!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 01:49:21' prior: 50878325!
test02CheckoutTotalIsCorrectForASingleItem

	| cart cashier  |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf:  self catalogue.
	cart add: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.
				
	self assert: cashier checkout equals: self itemInCataloguePrice 
	
! !

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 01:49:21'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 01:49:25' prior: 50878496!
test02CheckoutTotalIsCorrectForASingleItem

	| cart cashier  |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.
				
	self assert: cashier checkout equals: self itemInCataloguePrice 
	
! !

self itemInCatalogue!

!methodRemoval: CashierTest #itemInCatalogue stamp: 'fr 11/23/2020 01:50:00'!
itemInCatalogue
	
	^ 'an item'!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 01:50:04'!
ERROR!
!CashierTest methodsFor: 'utils' stamp: 'fr 11/23/2020 01:50:15'!
itemInCatalogue
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'utils' stamp: 'fr 11/23/2020 01:50:22' prior: 50878537!
itemInCatalogue
	
	^'an item'! !

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 01:50:24'!
ERROR!

self itemInCatalogue!

self catalogue!

catalog!
!Cart methodsFor: 'assertions' stamp: 'fr 11/23/2020 01:51:15' prior: 50877881!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 01:51:19'!
ERROR!
!CreditCard methodsFor: 'expiration' stamp: 'fr 11/23/2020 01:51:29'!
hasExpiredOn: aGregorianMonthOfYear 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'expiration' stamp: 'fr 11/23/2020 01:51:31' prior: 50878560!
hasExpiredOn: aGregorianMonthOfYear 
	! !
!CreditCard methodsFor: 'expiration' stamp: 'fr 11/23/2020 01:51:44' prior: 50878565!
hasExpiredOn: aMonth 
	! !
!CreditCard methodsFor: 'expiration' stamp: 'fr 11/23/2020 01:51:48' prior: 50878569!
hasExpiredOn: aMonth 
	
		! !
!CreditCard methodsFor: 'expiration' stamp: 'fr 11/23/2020 01:51:59' prior: 50878573!
hasExpiredOn: aMonth 
	
	^expirationDate < aMonth 	! !

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 01:52:00'!
ERROR!
!Cart methodsFor: 'total' stamp: 'fr 11/23/2020 01:52:14'!
total
	self shouldBeImplemented.! !
!Cart methodsFor: 'total' stamp: 'fr 11/23/2020 01:52:45' prior: 50878584!
total
	
	^items sum: [:anItem | catalog at: anItem]! !

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 01:52:47'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/23/2020 01:52:47'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 01:52:47'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 01:52:47'!
ERROR!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 01:52:47'!
ERROR!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 01:52:47'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 01:52:47'!
ERROR!

!testRun: #CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 01:52:47'!
ERROR!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 01:52:52'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 01:52:57' prior: 50877764!
test03CheckoutTotalIsCorrectForMultipleItems

	| cart cashier  |
	
	paymentResponse _  [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.	
				
	self assert: cashier checkout equals: (self itemInCataloguePrice * 2)
	
! !

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 01:52:58'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/23/2020 01:52:58'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 01:52:58'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 01:52:58'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 01:52:58'!
ERROR!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 01:52:58'!
ERROR!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 01:52:58'!
ERROR!

!testRun: #CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 01:52:58'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 01:53:01' prior: 50878622!
test03CheckoutTotalIsCorrectForMultipleItems

	| cart cashier  |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.	
				
	self assert: cashier checkout equals: (self itemInCataloguePrice * 2)
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 01:53:04' prior: 50877635!
test04CashierDoesNotAcceptExpiredCards

	| cart salesRegister |
	salesRegister _ OrderedCollection  new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.	

	self  should: [	Cashier 
					for: cart 
					paymentMethod: self expiredCard 
					paymentProcessor: self 
					registerOn: salesRegister.
			    ] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier expiredCardErrorDescription.
			self assert: salesRegister size equals: 0
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 01:53:05' prior: 50878680!
test04CashierDoesNotAcceptExpiredCards

	| cart salesRegister |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.	

	self  should: [	Cashier 
					for: cart 
					paymentMethod: self expiredCard 
					paymentProcessor: self 
					registerOn: salesRegister.
			    ] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier expiredCardErrorDescription.
			self assert: salesRegister size equals: 0
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 01:53:08' prior: 50877655!
test05CanNotCheckoutWithACardWithoutCredit

	| cart cashier salesRegister |

	paymentResponse _ [self error: Cashier  cardWithoutCreditErrorDescription].
	
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
	
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier cardWithoutCreditErrorDescription.
			self assert: salesRegister size equals: 0
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 01:53:09' prior: 50878720!
test05CanNotCheckoutWithACardWithoutCredit

	| cart cashier salesRegister |

	paymentResponse _ [self error: Cashier cardWithoutCreditErrorDescription].
	
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
	
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier cardWithoutCreditErrorDescription.
			self assert: salesRegister size equals: 0
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 01:53:12' prior: 50877679!
test06CanNotCheckoutWithAStolenCard

	| cart cashier salesRegister |
	
	paymentResponse _ [self error: Cashier  stolenCardErrorDescription].
	
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.

	self  should: [	cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier stolenCardErrorDescription.
			self assert: salesRegister size equals: 0
		]
	
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 01:53:12' prior: 50878768!
test06CanNotCheckoutWithAStolenCard

	| cart cashier salesRegister |
	
	paymentResponse _ [self error: Cashier stolenCardErrorDescription].
	
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.

	self  should: [	cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier stolenCardErrorDescription.
			self assert: salesRegister size equals: 0
		]
	
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 01:53:15' prior: 50877810!
test07CashierRegistersSalesProperly

	| cart cashier salesRegister total |
	salesRegister _ OrderedCollection  new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
				
	total _ cashier checkout.
	
	self assert: salesRegister size equals: 1.
	self assert: salesRegister first total equals: total.! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 01:53:16' prior: 50878814!
test07CashierRegistersSalesProperly

	| cart cashier salesRegister total |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
				
	total _ cashier checkout.
	
	self assert: salesRegister size equals: 1.
	self assert: salesRegister first total equals: total.! !

!testRun: #CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 01:53:17'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/23/2020 01:53:17'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 01:53:17'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 01:53:17'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 01:53:17'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 01:53:17'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 01:53:17'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 01:53:17'!
PASSED!

----SNAPSHOT----(23 November 2020 01:53:26) CuisUniversity-4384.image priorSource: 17497871!

----SNAPSHOT----(23 November 2020 01:59:02) CuisUniversity-4384.image priorSource: 17511189!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 02:09:47'!
test08

	| cart cashier salesRegister total |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
	total _ cashier checkout.
	
	self assert: salesRegister size equals: 1.
	self assert: salesRegister first total equals: total.! !

!methodRemoval: CashierTest #test08 stamp: 'fr 11/23/2020 02:09:53'!
test08

	| cart cashier salesRegister total |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
	total _ cashier checkout.
	
	self assert: salesRegister size equals: 1.
	self assert: salesRegister first total equals: total.!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 02:09:57' prior: 50878832!
test07CashierRegistersSalesProperly

	| cart cashier salesRegister total |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.			
	total _ cashier checkout.
	
	self assert: salesRegister size equals: 1.
	self assert: salesRegister first total equals: total.! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 02:10:12' prior: 50878744!
test05CanNotCheckoutWithACardWithoutCredit

	| cart cashier salesRegister |

	paymentResponse _ [self error: Cashier cardWithoutCreditErrorDescription].
	
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.
	
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier cardWithoutCreditErrorDescription.
			self assert: salesRegister isEmpty 
		]
	
! !

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 02:10:13'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/23/2020 02:10:13'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 02:10:13'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 02:10:13'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 02:10:13'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 02:10:13'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 02:10:13'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 02:10:13'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 02:10:20' prior: 50878700!
test04CashierDoesNotAcceptExpiredCards

	| cart salesRegister |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.	

	self  should: [	Cashier 
					for: cart 
					paymentMethod: self expiredCard 
					paymentProcessor: self 
					registerOn: salesRegister.
			    ] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier expiredCardErrorDescription.
			self assert: salesRegister isEmpty
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 02:10:29' prior: 50878791!
test06CanNotCheckoutWithAStolenCard

	| cart cashier salesRegister |
	
	paymentResponse _ [self error: Cashier stolenCardErrorDescription].
	
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.

	self  should: [	cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier stolenCardErrorDescription.
			self assert: salesRegister isEmpty
		]
	
	
! !

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 02:10:29'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/23/2020 02:10:29'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 02:10:29'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 02:10:29'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 02:10:29'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 02:10:29'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 02:10:29'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 02:10:29'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 02:11:37'!
test01CashierDoesNotAcceptAnEmptyCart

	self  should: [
				Cashier 
					for: (Cart acceptingItemsOf: self catalogue)
					paymentMethod: self nonExpiredCard 
					paymentProcessor: self 
					registerOn: OrderedCollection new.
			   ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckoutWithEmptyCartErrorDescription
	
! !

!methodRemoval: CashierTest #test01CanNotCheckoutEmptyCart stamp: 'fr 11/23/2020 02:11:37'!
test01CanNotCheckoutEmptyCart

	self  should: [
				Cashier 
					for: (Cart acceptingItemsOf: self catalogue)
					paymentMethod: self nonExpiredCard 
					paymentProcessor: self 
					registerOn: OrderedCollection new.
			   ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckoutWithEmptyCartErrorDescription
	
!
!Cashier methodsFor: 'total' stamp: 'fr 11/23/2020 02:13:24'!
registerSaleOf: total

	^ salesRegister add: (Sale total: total)! !
!Cashier methodsFor: 'total' stamp: 'fr 11/23/2020 02:13:24' prior: 50877309!
checkout

	| total |
	total _ cart total.
	paymentProcessor charge: total on: paymentMethod.
	self registerSaleOf: total.
	^total! !
!Cashier methodsFor: 'total' stamp: 'fr 11/23/2020 02:14:22'!
proceedToPayment: total

	^ paymentProcessor charge: total on: paymentMethod! !
!Cashier methodsFor: 'total' stamp: 'fr 11/23/2020 02:14:22' prior: 50879082!
checkout

	| total |
	total _ cart total.
	self proceedToPayment: total.
	self registerSaleOf: total.
	^total! !

!classDefinition: #Cashier category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 02:15:04'!
Object subclass: #Cashier
	instanceVariableNames: 'cart paymentMethod paymentProcessor salesRegister total1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!
!Cashier methodsFor: 'total' stamp: 'fr 11/23/2020 02:15:03'!
registerSale

	^ salesRegister add: (Sale total: total1)! !

!methodRemoval: Cashier #registerSaleOf: stamp: 'fr 11/23/2020 02:15:09'!
registerSaleOf: total

	^ salesRegister add: (Sale total: total)!
!Cashier methodsFor: 'total' stamp: 'fr 11/23/2020 02:15:16'!
proceedToPayment

	^ paymentProcessor charge: total1 on: paymentMethod! !
!Cashier methodsFor: 'total' stamp: 'fr 11/23/2020 02:15:38' prior: 50879094!
checkout

	total1 _ cart total.
	self proceedToPayment.
	self registerSale.
	^total1! !
!Cashier methodsFor: 'total' stamp: 'fr 11/23/2020 02:15:47'!
obtainTotal

	^ total1 _ cart total! !
!Cashier methodsFor: 'total' stamp: 'fr 11/23/2020 02:15:47' prior: 50879123!
checkout

	self obtainTotal.
	self proceedToPayment.
	self registerSale.
	^total1! !

!methodRemoval: Cashier #proceedToPayment: stamp: 'fr 11/23/2020 02:15:59'!
proceedToPayment: total

	^ paymentProcessor charge: total on: paymentMethod!

!classDefinition: #Cashier category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 02:16:04'!
Object subclass: #Cashier
	instanceVariableNames: 'cart paymentMethod paymentProcessor salesRegister total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 02:16:04' prior: 50879109!
registerSale

	^ salesRegister add: (Sale total: total)! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 02:16:04' prior: 50879132!
checkout

	self obtainTotal.
	self proceedToPayment.
	self registerSale.
	^total! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 02:16:04' prior: 50879118!
proceedToPayment

	^ paymentProcessor charge: total on: paymentMethod! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 02:16:04' prior: 50879128!
obtainTotal

	^ total _ cart total! !

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 02:16:11'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 02:16:11'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 02:16:11'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 02:16:11'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 02:16:11'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 02:16:11'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 02:16:11'!
PASSED!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 02:17:13'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 02:17:13'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 02:17:13'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 02:17:13'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 02:17:13'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 02:17:13'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 02:17:13'!
PASSED!
!Cashier methodsFor: 'initialization' stamp: 'fr 11/23/2020 02:17:27' prior: 50876547!
initializeFor: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor registerOn: aSalesRegister 
	
	cart _ aCart.
	paymentMethod _ aCard.
	paymentProcessor _ aPaymentProcessor.
	salesRegister _ aSalesRegister! !

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 02:17:29'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 02:17:29'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 02:17:29'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 02:17:29'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 02:17:29'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 02:17:29'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 02:17:29'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 11/23/2020 02:33:20'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 11/23/2020 02:33:20'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 11/23/2020 02:33:20'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 11/23/2020 02:33:20'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 11/23/2020 02:33:20'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 11/23/2020 02:33:20'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 11/23/2020 02:33:20'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 11/23/2020 02:33:20'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'fr 11/23/2020 02:33:53' prior: 50878033!
defaultCatalog
	
	^ Dictionary new add: self itemSellByTheStore -> 50; yourself! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 11/23/2020 02:33:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 11/23/2020 02:33:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 11/23/2020 02:33:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 11/23/2020 02:33:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 11/23/2020 02:33:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 11/23/2020 02:33:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 11/23/2020 02:33:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 11/23/2020 02:33:54'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 11/23/2020 02:33:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 11/23/2020 02:33:56'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 11/23/2020 02:33:56'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 11/23/2020 02:33:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 11/23/2020 02:33:56'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 11/23/2020 02:33:56'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 11/23/2020 02:33:56'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 11/23/2020 02:33:56'!
PASSED!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 02:33:56'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 02:33:56'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 02:33:56'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 02:33:56'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 02:33:56'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 02:33:56'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 02:33:56'!
PASSED!
!CartTest methodsFor: 'support' stamp: 'fr 11/23/2020 02:34:11'!
itemSellByTheStorePrice

	^ 50! !
!CartTest methodsFor: 'support' stamp: 'fr 11/23/2020 02:34:11' prior: 50879279!
defaultCatalog
	
	^ Dictionary new add: self itemSellByTheStore -> self itemSellByTheStorePrice; yourself! !
!CashierTest methodsFor: 'utils' stamp: 'fr 11/23/2020 02:34:40' prior: 50878427!
catalogue

	^ Dictionary new add: self itemInCatalogue -> self itemInCataloguePrice; yourself! !

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 02:34:41'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 02:34:41'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 02:34:41'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 02:34:41'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 02:34:41'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 02:34:41'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 02:34:41'!
PASSED!

----SNAPSHOT----(23 November 2020 02:35:32) CuisUniversity-4384.image priorSource: 17511283!

----SNAPSHOT----(23 November 2020 02:42:04) CuisUniversity-4384.image priorSource: 17527878!

!classRenamed: #Sale as: #SaleTicket stamp: 'fr 11/23/2020 03:25:10'!
Smalltalk renameClassNamed: #Sale as: #SaleTicket!
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 03:25:10' prior: 50879152!
registerSale

	^ salesRegister add: (SaleTicket total: total)! !

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 03:26:25'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 03:26:25'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 03:26:25'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 03:26:25'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 03:26:25'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 03:26:25'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 03:26:25'!
PASSED!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 03:26:41'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 03:26:41'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 03:26:41'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 03:26:41'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 03:26:41'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 03:26:41'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 03:26:41'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 03:27:19'!
test08

	| cart cashier  |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.	
				
	self assert: cashier checkout equals: (self itemInCataloguePrice * 2)
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 03:27:47' prior: 50879458!
test08

	| cart cashier  |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.	
				
	self assert: cashier checkout 
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 03:28:13' prior: 50879472!
test08

	| cart cashier  ticket |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.	
				
	ticket _ cashier checkout 
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 03:28:20' prior: 50879485!
test08

	| cart cashier  ticket |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.	
	ticket _ cashier checkout 
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 03:30:18' prior: 50879498!
test08

	| cart cashier  ticket |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.	
	ticket _ cashier checkout.
	
	self assert: (ticket entries occurrencesOf: self itemInCatalogue) equals: 2.	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 03:30:47' prior: 50879511!
test08

	| cart cashier  ticket |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.	
	ticket _ cashier checkout.
	
	self assert: (ticket entries occurrencesOf: self itemInCatalogue) equals: 2.
	self assert: ticket entries size equals: 2.	
! !

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 03:31:14'!
ERROR!
!Cashier methodsFor: 'total' stamp: 'fr 11/23/2020 03:32:05' prior: 50879169!
obtainTotal

	^ total _ SaleTicket total: cart total! !

!classDefinition: #Cashier category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 03:32:38'!
Object subclass: #Cashier
	instanceVariableNames: 'cart paymentMethod paymentProcessor salesRegister ticket'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 03:32:38' prior: 50879407!
registerSale

	^ salesRegister add: (SaleTicket total: ticket)! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 03:32:38' prior: 50879157!
checkout

	self obtainTotal.
	self proceedToPayment.
	self registerSale.
	^ticket! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 03:32:38' prior: 50879163!
proceedToPayment

	^ paymentProcessor charge: ticket on: paymentMethod! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 03:32:38' prior: 50879546!
obtainTotal

	^ ticket _ SaleTicket total: cart total! !
!Cashier methodsFor: 'total' stamp: 'fr 11/23/2020 03:33:01' prior: 50879571!
proceedToPayment

	^ paymentProcessor charge: ticket total on: paymentMethod! !
!Cashier methodsFor: 'total' stamp: 'fr 11/23/2020 03:33:27' prior: 50879560!
registerSale

	^ salesRegister add: ticket! !

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 03:33:41'!
ERROR!

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 03:33:50'!
ERROR!
!SaleTicket methodsFor: 'listing' stamp: 'fr 11/23/2020 03:34:11'!
entries
	self shouldBeImplemented.! !
!SaleTicket methodsFor: 'listing' stamp: 'fr 11/23/2020 03:34:55' prior: 50879596!
entries
	
	^OrderedCollection with: 'an item'! !

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 03:34:57'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 03:35:09' prior: 50879527!
test08

	| cart cashier  ticket |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 1 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.	
	ticket _ cashier checkout.
	
	self assert: (ticket entries occurrencesOf: self itemInCatalogue) equals: 1.
	self assert: ticket entries size equals: 1.	
! !

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 03:35:11'!
PASSED!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 03:35:11'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 03:35:11'!
FAILURE!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 03:35:11'!
FAILURE!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 03:35:11'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 03:35:11'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 03:35:11'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 03:35:11'!
FAILURE!

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 03:35:11'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 03:35:20' prior: 50879607!
test08

	| cart cashier  ticket |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.	
	ticket _ cashier checkout.
	
	self assert: (ticket entries occurrencesOf: self itemInCatalogue) equals: 2.
	self assert: ticket entries size equals: 2.	
! !

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 03:35:21'!
FAILURE!

dict _ Dictionary new. !

dict add: 'Fede'->4;add: 'Hernan'->2;yourself. !

dict keysDo: [:aKey | aKey substrings] !

asd _ dict keysDo: [:aKey | aKey,'a'] !

asd !

OrderedCollection new. !

col _ OrderedCollection new. !

col add: 1;add: 2;add: 3;add:85 !

col !

col do: [:each | each * 5] !
!Cashier methodsFor: 'total' stamp: 'fr 11/23/2020 03:49:48' prior: 50879577!
obtainTotal

	| ticketEntries |
	ticketEntries _ cart itemsCollect: [:anItem | ]! !
!Cashier methodsFor: 'total' stamp: 'fr 11/23/2020 03:50:06' prior: 50879680!
obtainTotal

	| ticketEntries |
	ticketEntries _ OrderedCollection new.
	ticketEntries _ cart itemsCollect: [:anItem | ]! !
!Cashier methodsFor: 'total' stamp: 'fr 11/23/2020 03:50:14' prior: 50879686!
obtainTotal

	| ticketEntries |
	ticketEntries _ OrderedCollection new.
	ticketEntries _ cart itemsDo: [:anItem | ]! !
!Cashier methodsFor: 'total' stamp: 'fr 11/23/2020 03:50:49' prior: 50879693!
obtainTotal

	| ticketEntries |
	ticketEntries _ OrderedCollection new.
	ticketEntries _ cart itemsDo: [:anItem | ticketEntries add: anItem]! !
!Cashier methodsFor: 'total' stamp: 'fr 11/23/2020 03:51:11' prior: 50879700!
obtainTotal

	| ticketEntries |
	ticketEntries _ OrderedCollection new.
	ticketEntries _ cart itemsDo: [:anItem | ticketEntries add: anItem].
	ticket for: ticketEntries! !
!Cashier methodsFor: 'total' stamp: 'fr 11/23/2020 03:51:25' prior: 50879707!
obtainTotal

	| ticketEntries |
	ticketEntries _ OrderedCollection new.
	ticketEntries _ cart itemsDo: [:anItem | ticketEntries add: anItem].
	ticket _ SaleTicket for: ticketEntries! !

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 03:53:40'!
ERROR!
!Cart methodsFor: 'enumerating' stamp: 'fr 11/23/2020 03:54:29'!
itemsDo: aBlockClosure 
	self shouldBeImplemented.! !
!Cart methodsFor: 'enumerating' stamp: 'fr 11/23/2020 03:54:35' prior: 50879726!
itemsDo: aBlockClosure 
	
	! !

----SNAPSHOT----(23 November 2020 03:54:38) CuisUniversity-4384.image priorSource: 17527972!
!Cart methodsFor: 'enumerating' stamp: 'fr 11/23/2020 03:54:52' prior: 50879731!
itemsDo: aBlock

	

	
	
	! !
!Cart methodsFor: 'enumerating' stamp: 'fr 11/23/2020 03:55:27' prior: 50879738!
itemsDo: aBlock

	items keysDo: [:anItem | aBlock value: anItem]

	
	
	! !

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 03:55:29'!
ERROR!
!Cart methodsFor: 'enumerating' stamp: 'fr 11/23/2020 03:55:53' prior: 50879742!
itemsDo: aBlock

	items do: [:anItem | aBlock value: anItem]

	
	
	! !

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 03:55:55'!
ERROR!
!SaleTicket class methodsFor: 'instance creation' stamp: 'fr 11/23/2020 03:56:08'!
for: aCart 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aCart ! !
!SaleTicket class methodsFor: 'instance creation' stamp: 'fr 11/23/2020 03:56:14' prior: 50879758!
for: aCart 
	
	^self new initializeFor: aCart ! !
!SaleTicket class methodsFor: 'instance creation' stamp: 'fr 11/23/2020 03:56:30' prior: 50879766!
for: aListOfTicketEntries 
	
	^self new initializeFor: aListOfTicketEntries ! !

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 03:56:31'!
ERROR!

!classDefinition: #SaleTicket category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 03:56:40'!
Object subclass: #SaleTicket
	instanceVariableNames: 'total listOfTicketEntries'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!
!SaleTicket methodsFor: 'initialization' stamp: 'fr 11/23/2020 03:56:40'!
initializeFor: aListOfTicketEntries 
	self shouldBeImplemented.
	listOfTicketEntries := aListOfTicketEntries.! !
!SaleTicket methodsFor: 'initialization' stamp: 'fr 11/23/2020 03:56:43' prior: 50879787!
initializeFor: aListOfTicketEntries 
	
	listOfTicketEntries := aListOfTicketEntries.! !

!classDefinition: #SaleTicket category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 03:56:47'!
Object subclass: #SaleTicket
	instanceVariableNames: 'total entries'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!
!SaleTicket methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 03:56:47' prior: 50879794!
initializeFor: aListOfTicketEntries 
	
	entries := aListOfTicketEntries.! !
!SaleTicket methodsFor: 'initialization' stamp: 'fr 11/23/2020 03:56:50' prior: 50879808!
initializeFor: aListOfTicketEntries 
	
	entries _ aListOfTicketEntries.! !

!classDefinition: #SaleTicket category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 03:56:54'!
Object subclass: #SaleTicket
	instanceVariableNames: 'total ticketEntries'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!
!SaleTicket methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 03:56:54' prior: 50879814!
initializeFor: aListOfTicketEntries 
	
	ticketEntries _ aListOfTicketEntries.! !

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 03:56:57'!
FAILURE!
!Cashier methodsFor: 'total' stamp: 'fr 11/23/2020 03:57:27' prior: 50879715!
obtainTotal

	| ticketEntries |
	ticketEntries _ OrderedCollection new.
	cart itemsDo: [:anItem | ticketEntries add: anItem].
	ticket _ SaleTicket for: ticketEntries! !

ticket total!

ticket!
!Cashier methodsFor: 'total' stamp: 'fr 11/23/2020 03:59:19' prior: 50879587!
registerSale

	salesRegister add: ticket! !
!SaleTicket methodsFor: 'listing' stamp: 'fr 11/23/2020 04:00:22' prior: 50879600!
entries
	
	^ticketEntries copy! !

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 04:00:33'!
PASSED!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 04:00:33'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 04:00:33'!
FAILURE!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 04:00:33'!
FAILURE!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 04:00:33'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 04:00:33'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 04:00:33'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 04:00:33'!
FAILURE!

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 04:00:33'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 04:00:48' prior: 50878515!
test02CheckoutTotalIsCorrectForASingleItem

	| cart cashier  |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.
				
	self assert: cashier checkout total equals: self itemInCataloguePrice 
	
! !

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 04:00:50'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 04:00:57' prior: 50879881!
test02CheckoutTotalIsCorrectForASingleItem

	| cart cashier  |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.
				
	self assert: cashier checkout equals: self itemInCataloguePrice 
	
! !

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 04:00:58'!
FAILURE!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 04:01:02'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 04:01:02'!
FAILURE!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 04:01:02'!
FAILURE!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 04:01:02'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 04:01:02'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 04:01:02'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 04:01:02'!
FAILURE!

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 04:01:02'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 04:01:19' prior: 50879900!
test02CheckoutTotalIsCorrectForASingleItem

	| cart cashier  |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.
				
	self assert: cashier checkout total equals: self itemInCataloguePrice 
	
! !

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 04:01:26'!
FAILURE!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 04:04:53'!
FAILURE!
!SaleTicket methodsFor: 'total' stamp: 'fr 11/23/2020 04:05:49' prior: 50877356!
total
	
	^ticketEntries sum: [:aTicketEntry | aTicketEntry total]! !
!SaleTicket methodsFor: 'total' stamp: 'fr 11/23/2020 04:05:54' prior: 50879966!
total
	
	^ticketEntries sum: [:aTicketEntry | aTicketEntry subtotal]! !

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 04:06:02'!
FAILURE!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 04:06:07'!
ERROR!

!classDefinition: #TicketEntry category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 04:09:58'!
Object subclass: #TicketEntry
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!
!Cashier methodsFor: 'total' stamp: 'fr 11/23/2020 04:09:54' prior: 50879836!
obtainTotal

	| ticketEntries |
	ticketEntries _ OrderedCollection new.
	cart itemsAndPricesDo: [:anItem :aPrice | ticketEntries add: (TicketEntry for: anItem costing: aPrice)].
	ticket _ SaleTicket for: ticketEntries! !

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 04:12:31'!
ERROR!
!Cart methodsFor: 'enumerating' stamp: 'fr 11/23/2020 04:12:53'!
itemsAndPricesDo: aBlockClosure 
	self shouldBeImplemented.! !

catalog!
!Cart methodsFor: 'enumerating' stamp: 'fr 11/23/2020 04:13:35' prior: 50880004!
itemsAndPricesDo: aBlock
	
	items do: [:anItem | aBlock value: anItem value: (catalog at: anItem)]! !

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 04:13:47'!
ERROR!
!TicketEntry class methodsFor: 'instance creation' stamp: 'fr 11/23/2020 04:13:53'!
for: aString costing: aSmallInteger 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aString costing: aSmallInteger ! !
!TicketEntry class methodsFor: 'instance creation' stamp: 'fr 11/23/2020 04:13:57' prior: 50880019!
for: aString costing: aSmallInteger 
	
	^self new initializeFor: aString costing: aSmallInteger ! !
!TicketEntry class methodsFor: 'instance creation' stamp: 'fr 11/23/2020 04:14:12' prior: 50880029!
for: anItem costing: aUnitPrice 
	
	^self new initializeFor: anItem costing: aUnitPrice ! !

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 04:14:13'!
ERROR!

!classDefinition: #TicketEntry category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 04:14:20'!
Object subclass: #TicketEntry
	instanceVariableNames: 'item'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!

!classDefinition: #TicketEntry category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 04:14:21'!
Object subclass: #TicketEntry
	instanceVariableNames: 'item unitPrice'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!
!TicketEntry methodsFor: 'initialization' stamp: 'fr 11/23/2020 04:14:21'!
initializeFor: anItem costing: aUnitPrice 
	self shouldBeImplemented.
	item := anItem.
	unitPrice := aUnitPrice.! !
!TicketEntry methodsFor: 'initialization' stamp: 'fr 11/23/2020 04:14:27' prior: 50880061!
initializeFor: anItem costing: aUnitPrice 

	item _ anItem.
	unitPrice _ aUnitPrice.! !

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 04:14:31'!
ERROR!
!TicketEntry methodsFor: 'subtotal' stamp: 'fr 11/23/2020 04:14:47'!
subtotal
	self shouldBeImplemented.! !
!TicketEntry methodsFor: 'subtotal' stamp: 'fr 11/23/2020 04:14:50' prior: 50880077!
subtotal
	
	! !
!TicketEntry methodsFor: 'subtotal' stamp: 'fr 11/23/2020 04:15:01' prior: 50880081!
subtotal

	^unitPrice 
	
	! !

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 04:15:03'!
PASSED!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 04:15:03'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 04:15:03'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 04:15:03'!
FAILURE!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 04:15:03'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 04:15:03'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 04:15:03'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 04:15:03'!
FAILURE!

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 04:15:03'!
FAILURE!

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 04:15:10'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 04:15:35' prior: 50879652!
test08

	| cart cashier  ticket |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.	
	ticket _ cashier checkout.
	
	self assert: (ticket occurrencesOf: self itemInCatalogue) equals: 2.
	self assert: ticket entries size equals: 2.	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 04:15:38' prior: 50880120!
test08

	| cart cashier  ticket |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.	
	ticket _ cashier checkout.
	
	self assert: (ticket occurrencesOf: self itemInCatalogue) equals: 2.
	self assert: ticket size equals: 2.	
! !

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 04:15:46'!
ERROR!
!SaleTicket methodsFor: 'testing' stamp: 'fr 11/23/2020 04:16:03'!
occurrencesOf: aString 
	self shouldBeImplemented.! !

self first!
!SaleTicket methodsFor: 'testing' stamp: 'fr 11/23/2020 04:23:24' prior: 50880155!
occurrencesOf: anItem

	^(ticketEntries detect: [:aTicketEntry | aTicketEntry item = anItem]) quantity
	
	! !
!SaleTicket methodsFor: 'testing' stamp: 'fr 11/23/2020 04:23:49' prior: 50880160!
occurrencesOf: anItem

	^(ticketEntries detect: [:aTicketEntry | aTicketEntry item = anItem]) quantity
	
	! !

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 04:23:51'!
ERROR!
!TicketEntry methodsFor: 'accessing' stamp: 'fr 11/23/2020 04:24:00'!
item
	self shouldBeImplemented.
	^item! !
!TicketEntry methodsFor: 'accessing' stamp: 'fr 11/23/2020 04:24:02' prior: 50880175!
item
	
	^item! !

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 04:24:04'!
ERROR!
!TicketEntry methodsFor: 'accessing' stamp: 'fr 11/23/2020 04:24:11'!
quantity
	self shouldBeImplemented.! !

!classDefinition: #TicketEntry category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 04:24:19'!
Object subclass: #TicketEntry
	instanceVariableNames: 'item unitPrice quantity'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!
!TicketEntry methodsFor: 'accessing' stamp: 'fr 11/23/2020 04:24:17' prior: 50880184!
quantity
	
	^quantity! !

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 04:24:21'!
FAILURE!
!Cashier methodsFor: 'total' stamp: 'fr 11/23/2020 04:24:53' prior: 50879991!
obtainTotal

	| ticketEntries |
	ticketEntries _ OrderedCollection new.
	cart itemsQuantitiesAndPricesDo: [:anItem :aQuantity :aPrice | ticketEntries add: (TicketEntry for: aQuantity of: anItem costing: aPrice)].
	ticket _ SaleTicket for: ticketEntries! !

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 04:24:57'!
ERROR!
!Cart methodsFor: 'enumerating' stamp: 'fr 11/23/2020 04:25:03'!
itemsQuantitiesAndPricesDo: aBlockClosure 
	self shouldBeImplemented.! !
!Cart methodsFor: 'enumerating' stamp: 'fr 11/23/2020 04:25:09' prior: 50880216!
itemsQuantitiesAndPricesDo: aBlock

	 
	
	! !

bag _ Bag new. !

bag add: 'Fede' withOccurrences: 5; add: 'Hola' withOccurrences: 4.  !

bag !

bag sortedElements !

bag contents!

bag sortedElements  !

bag sortedElements  !

self class selectors !

 #(#sortBlock: #addFirst: #reSort #add: #indexForInserting: #at:put: #quickIndexOf: #indexOf:startingAt:ifAbsent: #postCopy #= #copy #sortBlock #select: #addAll: #insert:before: #defaultSort:to:) !

bag contents   !

bag contents !

self class selectors !

----SNAPSHOT----(23 November 2020 04:32:06) CuisUniversity-4384.image priorSource: 17538686!
!Cart methodsFor: 'enumerating' stamp: 'fr 11/23/2020 04:33:37' prior: 50880221!
itemsQuantitiesAndPricesDo: aBlock

	 items contents keysAndValuesDo: [:anItem :aQuantity | aBlock value: anItem value: aQuantity value: (catalog at: anItem)]
	! !

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 04:33:39'!
ERROR!
!Cart methodsFor: 'initialization' stamp: 'fr 11/23/2020 04:34:01' prior: 50877894!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !
!Cart methodsFor: 'adding' stamp: 'fr 11/23/2020 04:34:30' prior: 50877912!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	items add: anItem withOccurrences: aQuantity ! !

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 04:34:37'!
ERROR!
!TicketEntry class methodsFor: 'instance creation' stamp: 'fr 11/23/2020 04:34:45'!
for: aSmallInteger of: aString costing: aSmallInteger3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aSmallInteger of: aString costing: aSmallInteger3 ! !
!TicketEntry class methodsFor: 'instance creation' stamp: 'fr 11/23/2020 04:34:54' prior: 50880268!
for: aSmallInteger of: aString costing: aSmallInteger3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	
	^self new initializeFor: aSmallInteger of: aString costing: aSmallInteger3 ! !
!TicketEntry class methodsFor: 'instance creation' stamp: 'fr 11/23/2020 04:34:55' prior: 50880279!
for: aSmallInteger of: aString costing: aSmallInteger3 
	
	^self new initializeFor: aSmallInteger of: aString costing: aSmallInteger3 ! !
!TicketEntry class methodsFor: 'instance creation' stamp: 'fr 11/23/2020 04:35:00' prior: 50880289!
for: aQuantity of: aString costing: aSmallInteger3 
	
	^self new initializeFor: aQuantity of: aString costing: aSmallInteger3 ! !
!TicketEntry class methodsFor: 'instance creation' stamp: 'fr 11/23/2020 04:35:15' prior: 50880297!
for: aQuantity of: anItem costing: anUnitPrice 
	
	^self new initializeFor: aQuantity of: anItem costing: anUnitPrice ! !

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 04:35:16'!
ERROR!
!TicketEntry methodsFor: 'initialization' stamp: 'fr 11/23/2020 04:35:24'!
initializeFor: aQuantity of: anItem costing: anUnitPrice 
	self shouldBeImplemented.
	quantity := aQuantity.
	item := anItem.
	unitPrice := anUnitPrice.! !
!TicketEntry methodsFor: 'initialization' stamp: 'fr 11/23/2020 04:35:28' prior: 50880314!
initializeFor: aQuantity of: anItem costing: anUnitPrice 
	
	quantity := aQuantity.
	item := anItem.
	unitPrice := anUnitPrice.! !
!TicketEntry methodsFor: 'initialization' stamp: 'fr 11/23/2020 04:35:35' prior: 50880322!
initializeFor: aQuantity of: anItem costing: anUnitPrice 
	
	quantity _ aQuantity.
	item _ anItem.
	unitPrice _ anUnitPrice.! !

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 04:35:37'!
ERROR!

ticket occurrencesOf: self itemInCatalogue!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 04:36:20' prior: 50880137!
test08

	| cart cashier  ticket |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.	
	ticket _ cashier checkout.
	
	self assert: (ticket occurrencesOf: self itemInCatalogue) equals: 2.
	self assert: ticket totalEntries equals: 2.	
! !

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 04:36:25'!
ERROR!
!SaleTicket methodsFor: 'size' stamp: 'fr 11/23/2020 04:36:37'!
totalEntries
	self shouldBeImplemented.! !
!SaleTicket methodsFor: 'size' stamp: 'fr 11/23/2020 04:36:46' prior: 50880358!
totalEntries
	
	^ticketEntries size! !

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 04:36:47'!
FAILURE!
!SaleTicket methodsFor: 'size' stamp: 'fr 11/23/2020 04:37:21' prior: 50880362!
totalEntries
	
	^ticketEntries sum: [:aTicketEntry | aTicketEntry quantity]! !

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 04:37:33'!
PASSED!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 04:37:33'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 04:37:33'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 04:37:33'!
FAILURE!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 04:37:33'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 04:37:33'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 04:37:33'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 04:37:33'!
FAILURE!

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 04:37:33'!
PASSED!

!classRenamed: #TicketEntry as: #SalteTicketEntry stamp: 'fr 11/23/2020 04:37:44'!
Smalltalk renameClassNamed: #TicketEntry as: #SalteTicketEntry!
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 04:37:45' prior: 50880203!
obtainTotal

	| ticketEntries |
	ticketEntries _ OrderedCollection new.
	cart itemsQuantitiesAndPricesDo: [:anItem :aQuantity :aPrice | ticketEntries add: (SalteTicketEntry for: aQuantity of: anItem costing: aPrice)].
	ticket _ SaleTicket for: ticketEntries! !

!classRenamed: #SalteTicketEntry as: #SaleTicketEntry stamp: 'fr 11/23/2020 04:37:53'!
Smalltalk renameClassNamed: #SalteTicketEntry as: #SaleTicketEntry!
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 04:37:53' prior: 50880407!
obtainTotal

	| ticketEntries |
	ticketEntries _ OrderedCollection new.
	cart itemsQuantitiesAndPricesDo: [:anItem :aQuantity :aPrice | ticketEntries add: (SaleTicketEntry for: aQuantity of: anItem costing: aPrice)].
	ticket _ SaleTicket for: ticketEntries! !

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 04:38:01'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 04:38:02'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 04:38:04'!
FAILURE!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 04:38:04'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 04:38:16' prior: 50878664!
test03CheckoutTotalIsCorrectForMultipleItems

	| cart cashier  |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.	
				
	self assert: cashier checkout total equals: (self itemInCataloguePrice * 2)
	
! !

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 04:38:17'!
FAILURE!
!SaleTicketEntry methodsFor: 'subtotal' stamp: 'fr 11/23/2020 04:39:01' prior: 50880085!
subtotal

	^unitPrice * quantity 
	
	! !

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 04:39:07'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 04:39:08'!
PASSED!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 04:39:08'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 04:39:08'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 04:39:08'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 04:39:08'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 04:39:08'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 04:39:08'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 04:39:08'!
FAILURE!

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 04:39:08'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 04:39:08'!
FAILURE!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 04:39:14'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 04:39:16'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 04:39:17'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 04:39:18'!
FAILURE!

!testRun: #CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 04:39:18'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 04:39:24' prior: 50878913!
test07CashierRegistersSalesProperly

	| cart cashier salesRegister total |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.			
	total _ cashier checkout total.
	
	self assert: salesRegister size equals: 1.
	self assert: salesRegister first total equals: total.! !

!testRun: #CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 04:39:25'!
PASSED!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 04:39:25'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 04:39:25'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 04:39:25'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 04:39:25'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 04:39:25'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 04:39:25'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 04:39:25'!
PASSED!

!testRun: #CashierTest #test08 stamp: 'fr 11/23/2020 04:39:25'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 04:40:37'!
test08CheckoutTicketReflectsBoughtItemsCorrectly

	| cart cashier  ticket |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.	
	ticket _ cashier checkout.
	
	self assert: (ticket occurrencesOf: self itemInCatalogue) equals: 2.
	self assert: ticket totalEntries equals: 2.	
! !

!methodRemoval: CashierTest #test08 stamp: 'fr 11/23/2020 04:40:37'!
test08

	| cart cashier  ticket |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.	
	ticket _ cashier checkout.
	
	self assert: (ticket occurrencesOf: self itemInCatalogue) equals: 2.
	self assert: ticket totalEntries equals: 2.	
!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 04:40:54'!
test08CheckoutTicketReflectsBoughtItemsAsExpected

	| cart cashier  ticket |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.	
	ticket _ cashier checkout.
	
	self assert: (ticket occurrencesOf: self itemInCatalogue) equals: 2.
	self assert: ticket totalEntries equals: 2.	
! !

!methodRemoval: CashierTest #test08CheckoutTicketReflectsBoughtItemsCorrectly stamp: 'fr 11/23/2020 04:40:54'!
test08CheckoutTicketReflectsBoughtItemsCorrectly

	| cart cashier  ticket |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.	
	ticket _ cashier checkout.
	
	self assert: (ticket occurrencesOf: self itemInCatalogue) equals: 2.
	self assert: ticket totalEntries equals: 2.	
!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 04:41:01'!
test07CashierRegistersSalesAsExpected

	| cart cashier salesRegister total |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.			
	total _ cashier checkout total.
	
	self assert: salesRegister size equals: 1.
	self assert: salesRegister first total equals: total.! !

!methodRemoval: CashierTest #test07CashierRegistersSalesProperly stamp: 'fr 11/23/2020 04:41:01'!
test07CashierRegistersSalesProperly

	| cart cashier salesRegister total |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: salesRegister.			
	total _ cashier checkout total.
	
	self assert: salesRegister size equals: 1.
	self assert: salesRegister first total equals: total.!

!methodRemoval: SaleTicketEntry class #for:costing: stamp: 'fr 11/23/2020 04:41:21'!
for: anItem costing: aUnitPrice 
	
	^self new initializeFor: anItem costing: aUnitPrice !

!methodRemoval: SaleTicketEntry #initializeFor:costing: stamp: 'fr 11/23/2020 04:41:25'!
initializeFor: anItem costing: aUnitPrice 

	item _ anItem.
	unitPrice _ aUnitPrice.!

!methodRemoval: SaleTicket class #total: stamp: 'fr 11/23/2020 04:42:08'!
total: aTotal 
	
	^self new initializeTotal: aTotal !

!methodRemoval: SaleTicket #initializeTotal: stamp: 'fr 11/23/2020 04:42:15'!
initializeTotal: aTotal 
	
	total _ aTotal.!

!methodRemoval: SaleTicket #entries stamp: 'fr 11/23/2020 04:42:45'!
entries
	
	^ticketEntries copy!
!SaleTicket methodsFor: 'size' stamp: 'fr 11/23/2020 04:43:13'!
totalItems
	
	^ticketEntries sum: [:aTicketEntry | aTicketEntry quantity]! !

!methodRemoval: SaleTicket #totalEntries stamp: 'fr 11/23/2020 04:43:13'!
totalEntries
	
	^ticketEntries sum: [:aTicketEntry | aTicketEntry quantity]!
!SaleTicket methodsFor: 'testing' stamp: 'fr 11/23/2020 04:43:37'!
quantityOf: anItem

	^(ticketEntries detect: [:aTicketEntry | aTicketEntry item = anItem]) quantity
	
	! !

!methodRemoval: SaleTicket #occurrencesOf: stamp: 'fr 11/23/2020 04:43:37'!
occurrencesOf: anItem

	^(ticketEntries detect: [:aTicketEntry | aTicketEntry item = anItem]) quantity
	
	!

----SNAPSHOT----(23 November 2020 04:44:13) CuisUniversity-4384.image priorSource: 17554842!
!Cashier methodsFor: 'total' stamp: 'fr 11/23/2020 04:44:42'!
obtainTicket

	| ticketEntries |
	ticketEntries _ OrderedCollection new.
	cart itemsQuantitiesAndPricesDo: [:anItem :aQuantity :aPrice | ticketEntries add: (SaleTicketEntry for: aQuantity of: anItem costing: aPrice)].
	ticket _ SaleTicket for: ticketEntries! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 04:44:42' prior: 50879565!
checkout

	self obtainTicket.
	self proceedToPayment.
	self registerSale.
	^ticket! !

!methodRemoval: Cashier #obtainTotal stamp: 'fr 11/23/2020 04:44:42'!
obtainTotal

	| ticketEntries |
	ticketEntries _ OrderedCollection new.
	cart itemsQuantitiesAndPricesDo: [:anItem :aQuantity :aPrice | ticketEntries add: (SaleTicketEntry for: aQuantity of: anItem costing: aPrice)].
	ticket _ SaleTicket for: ticketEntries!
!Cashier methodsFor: 'total' stamp: 'fr 11/23/2020 04:45:16' prior: 50880720!
obtainTicket

	| ticketEntries |
	ticketEntries _ OrderedCollection new.
	cart itemsQuantitiesAndPricesDo: [:anItem :aQuantity :aPrice | 
		ticketEntries add: (SaleTicketEntry for: aQuantity of: anItem costing: aPrice)
	].
	ticket _ SaleTicket for: ticketEntries! !
!Cashier methodsFor: 'total' stamp: 'fr 11/23/2020 04:45:46' prior: 50880748!
obtainTicket

	| ticketEntries |
	ticketEntries _ OrderedCollection new.
	cart itemsQuantitiesAndPricesDo: [:anItem :aQuantity :aPrice | 
		ticketEntries add: (SaleTicketEntry for: aQuantity of: anItem costing: aPrice)
	].
	ticket _ SaleTicket for: ticketEntries! !
!Cashier methodsFor: 'total' stamp: 'fr 11/23/2020 04:46:43'!
collectTicketEntriesForTheCartInto: ticketEntries

	^ cart itemsQuantitiesAndPricesDo: [:anItem :aQuantity :aPrice | 
		ticketEntries add: (SaleTicketEntry for: aQuantity of: anItem costing: aPrice)
	]! !
!Cashier methodsFor: 'total' stamp: 'fr 11/23/2020 04:46:43' prior: 50880759!
obtainTicket

	| ticketEntries |
	ticketEntries _ OrderedCollection new.
	self collectTicketEntriesForTheCartInto: ticketEntries.
	ticket _ SaleTicket for: ticketEntries! !

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 04:47:01'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 04:47:01'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 04:47:01'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 04:47:01'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 04:47:01'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 04:47:01'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesAsExpected stamp: 'fr 11/23/2020 04:47:01'!
PASSED!

!testRun: #CashierTest #test08CheckoutTicketReflectsBoughtItemsAsExpected stamp: 'fr 11/23/2020 04:47:01'!
ERROR!

!testRun: #CashierTest #test08CheckoutTicketReflectsBoughtItemsAsExpected stamp: 'fr 11/23/2020 04:47:01'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 04:47:19' prior: 50880603!
test08CheckoutTicketReflectsBoughtItemsAsExpected

	| cart cashier  ticket |
	
	paymentResponse _ [].
	
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.	
	ticket _ cashier checkout.
	
	self assert: (ticket quantityOf: self itemInCatalogue) equals: 2.
	self assert: ticket totalItems equals: 2.	
! !

!testRun: #CashierTest #test08CheckoutTicketReflectsBoughtItemsAsExpected stamp: 'fr 11/23/2020 04:47:20'!
PASSED!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 04:47:20'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 04:47:20'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 04:47:20'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 04:47:20'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 04:47:20'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 04:47:20'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesAsExpected stamp: 'fr 11/23/2020 04:47:20'!
PASSED!

!testRun: #CashierTest #test08CheckoutTicketReflectsBoughtItemsAsExpected stamp: 'fr 11/23/2020 04:47:20'!
PASSED!
!SaleTicket methodsFor: 'testing' stamp: 'fr 11/23/2020 04:49:06'!
detectATicketEntryFor: anItem

	^ ticketEntries detect: [:aTicketEntry | aTicketEntry item = anItem]! !
!SaleTicket methodsFor: 'testing' stamp: 'fr 11/23/2020 04:49:06' prior: 50880706!
quantityOf: anItem

	^(self detectATicketEntryFor: anItem) quantity
	
	! !

!methodRemoval: Cart #itemsAndPricesDo: stamp: 'fr 11/23/2020 04:49:38'!
itemsAndPricesDo: aBlock
	
	items do: [:anItem | aBlock value: anItem value: (catalog at: anItem)]!

!methodRemoval: Cart #itemsDo: stamp: 'fr 11/23/2020 04:49:39'!
itemsDo: aBlock

	items do: [:anItem | aBlock value: anItem]

	
	
	!

GregorianYear current !

GregorianYear current + 1 !

GregorianYear current next !
!CashierTest methodsFor: 'utils' stamp: 'fr 11/23/2020 04:53:51' prior: 50878195!
nonExpiredCard

	^ CreditCard withExpiration: (GregorianMonthOfYear decemberOf: (GregorianYear current next))! !
!CashierTest methodsFor: 'utils' stamp: 'fr 11/23/2020 04:54:07' prior: 50877589!
expiredCard

	^ CreditCard withExpiration: (GregorianMonthOfYear decemberOf: (GregorianYear current previous))! !

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 04:54:09'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 04:54:09'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 04:54:09'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 04:54:09'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 04:54:09'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 04:54:09'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesAsExpected stamp: 'fr 11/23/2020 04:54:09'!
PASSED!

!testRun: #CashierTest #test08CheckoutTicketReflectsBoughtItemsAsExpected stamp: 'fr 11/23/2020 04:54:09'!
PASSED!
!CashierTest methodsFor: 'utils' stamp: 'fr 11/23/2020 04:54:16' prior: 50880897!
expiredCard

	^ CreditCard withExpiration: (GregorianMonthOfYear decemberOf: GregorianYear current previous)! !

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 04:54:17'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 04:54:17'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 04:54:17'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 04:54:17'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 04:54:17'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 04:54:17'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesAsExpected stamp: 'fr 11/23/2020 04:54:17'!
PASSED!

!testRun: #CashierTest #test08CheckoutTicketReflectsBoughtItemsAsExpected stamp: 'fr 11/23/2020 04:54:17'!
PASSED!
!CashierTest methodsFor: 'utils' stamp: 'fr 11/23/2020 04:54:24' prior: 50880890!
nonExpiredCard

	^ CreditCard withExpiration: (GregorianMonthOfYear decemberOf: GregorianYear current next)! !

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 04:54:25'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 04:54:25'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 04:54:25'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 04:54:25'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 04:54:25'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 04:54:25'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesAsExpected stamp: 'fr 11/23/2020 04:54:25'!
PASSED!

!testRun: #CashierTest #test08CheckoutTicketReflectsBoughtItemsAsExpected stamp: 'fr 11/23/2020 04:54:25'!
PASSED!
!CashierTest methodsFor: 'setup' stamp: 'fr 11/23/2020 04:55:23' overrides: 16927572!
setUp

	paymentResponse _ []! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 04:55:29' prior: 50879944!
test02CheckoutTotalIsCorrectForASingleItem

	| cart cashier  |
		
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.
				
	self assert: cashier checkout total equals: self itemInCataloguePrice 
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 04:55:32' prior: 50880448!
test03CheckoutTotalIsCorrectForMultipleItems

	| cart cashier  |
		
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.	
				
	self assert: cashier checkout total equals: (self itemInCataloguePrice * 2)
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 04:55:58' prior: 50880818!
test08CheckoutTicketReflectsBoughtItemsAsExpected

	| cart cashier  ticket |
		
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.	
	ticket _ cashier checkout.
	
	self assert: (ticket quantityOf: self itemInCatalogue) equals: 2.
	self assert: ticket totalItems equals: 2.	
! !

!testRun: #CashierTest #test08CheckoutTicketReflectsBoughtItemsAsExpected stamp: 'fr 11/23/2020 04:55:59'!
PASSED!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 04:55:59'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 04:55:59'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 04:55:59'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 04:55:59'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 04:55:59'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 04:55:59'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesAsExpected stamp: 'fr 11/23/2020 04:55:59'!
PASSED!

!testRun: #CashierTest #test08CheckoutTicketReflectsBoughtItemsAsExpected stamp: 'fr 11/23/2020 04:55:59'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 04:57:26'!
assertCheckoutTotalForCartWith: aCartBlock isEqualTo: aCheckoutTotal

	| cart cashier  |
		
	cart _ Cart acceptingItemsOf: self catalogue.
	aCartBlock value.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.	
				
	self assert: cashier checkout total equals: (self itemInCataloguePrice * 2)
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 04:57:31' prior: 50881078!
assertCheckoutTotalForCartWith: aCartBlock isEqualTo: aCheckoutTotal

	| cart cashier  |
		
	cart _ Cart acceptingItemsOf: self catalogue.
	aCartBlock value.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				paymentProcessor: self 
				registerOn: OrderedCollection new.	
				
	self assert: cashier checkout total equals: aCheckoutTotal 
	
! !

----SNAPSHOT----(23 November 2020 04:57:35) CuisUniversity-4384.image priorSource: 17570147!

!classDefinition: #Cashier category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 04:58:20'!
Object subclass: #Cashier
	instanceVariableNames: 'cart paymentMethod paymentProcessor salesRegister saleTicket'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 04:58:20' prior: 50879845!
registerSale

	salesRegister add: saleTicket! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 04:58:20' prior: 50880732!
checkout

	self obtainTicket.
	self proceedToPayment.
	self registerSale.
	^saleTicket! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 04:58:20' prior: 50879582!
proceedToPayment

	^ paymentProcessor charge: saleTicket total on: paymentMethod! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 04:58:20' prior: 50880779!
obtainTicket

	| ticketEntries |
	ticketEntries _ OrderedCollection new.
	self collectTicketEntriesForTheCartInto: ticketEntries.
	saleTicket _ SaleTicket for: ticketEntries! !

----SNAPSHOT----(23 November 2020 04:59:43) CuisUniversity-4384.image priorSource: 17582612!

!classDefinition: #Cashier category: 'TusLibros - Exercise - II' stamp: 'fr 11/23/2020 05:04:01'!
Object subclass: #Cashier
	instanceVariableNames: 'cart paymentMethod merchantProcessor salesRegister saleTicket'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - II'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 05:04:01' prior: 50879220!
initializeFor: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor registerOn: aSalesRegister 
	
	cart _ aCart.
	paymentMethod _ aCard.
	merchantProcessor _ aPaymentProcessor.
	salesRegister _ aSalesRegister! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 05:04:01' prior: 50881131!
proceedToPayment

	^ merchantProcessor charge: saleTicket total on: paymentMethod! !
!Cashier methodsFor: 'initialization' stamp: 'fr 11/23/2020 05:04:21'!
initializeFor: aCart paymentMethod: aCard merchantProcessor: aPaymentProcessor registerOn: aSalesRegister 
	
	cart _ aCart.
	paymentMethod _ aCard.
	merchantProcessor _ aPaymentProcessor.
	salesRegister _ aSalesRegister! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 05:04:21' prior: 50876795!
for: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor registerOn: aSalesRegister 
	
	self validateCart: aCart.
	self validateCard: aCard.
		
	^self new initializeFor: aCart paymentMethod: aCard merchantProcessor: aPaymentProcessor registerOn: aSalesRegister ! !

!methodRemoval: Cashier #initializeFor:paymentMethod:paymentProcessor:registerOn: stamp: 'fr 11/23/2020 05:04:21'!
initializeFor: aCart paymentMethod: aCard paymentProcessor: aPaymentProcessor registerOn: aSalesRegister 
	
	cart _ aCart.
	paymentMethod _ aCard.
	merchantProcessor _ aPaymentProcessor.
	salesRegister _ aSalesRegister!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 05:04:23'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 05:04:23'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 05:04:23'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 05:04:23'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 05:04:23'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 05:04:23'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesAsExpected stamp: 'fr 11/23/2020 05:04:23'!
PASSED!

!testRun: #CashierTest #test08CheckoutTicketReflectsBoughtItemsAsExpected stamp: 'fr 11/23/2020 05:04:23'!
PASSED!
!Cashier methodsFor: 'initialization' stamp: 'fr 11/23/2020 05:04:31' prior: 50881173!
initializeFor: aCart paymentMethod: aCard merchantProcessor: aMerchantProcessor registerOn: aSalesRegister 
	
	cart _ aCart.
	paymentMethod _ aCard.
	merchantProcessor _ aMerchantProcessor.
	salesRegister _ aSalesRegister! !

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 05:04:33'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 05:04:33'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 05:04:33'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 05:04:33'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 05:04:33'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 05:04:33'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesAsExpected stamp: 'fr 11/23/2020 05:04:33'!
PASSED!

!testRun: #CashierTest #test08CheckoutTicketReflectsBoughtItemsAsExpected stamp: 'fr 11/23/2020 05:04:33'!
PASSED!
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/23/2020 05:04:45' prior: 50881184!
for: aCart paymentMethod: aCard paymentProcessor: aMerchantProcessor registerOn: aSalesRegister 
	
	self validateCart: aCart.
	self validateCard: aCard.
		
	^self new initializeFor: aCart paymentMethod: aCard merchantProcessor: aMerchantProcessor registerOn: aSalesRegister ! !
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/23/2020 05:04:59'!
for: aCart paymentMethod: aCard merchantProcessor: aMerchantProcessor registerOn: aSalesRegister 
	
	self validateCart: aCart.
	self validateCard: aCard.
		
	^self new initializeFor: aCart paymentMethod: aCard merchantProcessor: aMerchantProcessor registerOn: aSalesRegister ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 05:04:59' prior: 50881093!
assertCheckoutTotalForCartWith: aCartBlock isEqualTo: aCheckoutTotal

	| cart cashier  |
		
	cart _ Cart acceptingItemsOf: self catalogue.
	aCartBlock value.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				merchantProcessor: self 
				registerOn: OrderedCollection new.	
				
	self assert: cashier checkout total equals: aCheckoutTotal 
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 05:04:59' prior: 50881001!
test02CheckoutTotalIsCorrectForASingleItem

	| cart cashier  |
		
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				merchantProcessor: self 
				registerOn: OrderedCollection new.
				
	self assert: cashier checkout total equals: self itemInCataloguePrice 
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 05:04:59' prior: 50878931!
test05CanNotCheckoutWithACardWithoutCredit

	| cart cashier salesRegister |

	paymentResponse _ [self error: Cashier cardWithoutCreditErrorDescription].
	
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				merchantProcessor: self 
				registerOn: salesRegister.
	
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier cardWithoutCreditErrorDescription.
			self assert: salesRegister isEmpty 
		]
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 05:04:59' prior: 50878981!
test04CashierDoesNotAcceptExpiredCards

	| cart salesRegister |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.	

	self  should: [	Cashier 
					for: cart 
					paymentMethod: self expiredCard 
					merchantProcessor: self 
					registerOn: salesRegister.
			    ] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier expiredCardErrorDescription.
			self assert: salesRegister isEmpty
		]
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 05:04:59' prior: 50881016!
test03CheckoutTotalIsCorrectForMultipleItems

	| cart cashier  |
		
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				merchantProcessor: self 
				registerOn: OrderedCollection new.	
				
	self assert: cashier checkout total equals: (self itemInCataloguePrice * 2)
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 05:04:59' prior: 50879001!
test06CanNotCheckoutWithAStolenCard

	| cart cashier salesRegister |
	
	paymentResponse _ [self error: Cashier stolenCardErrorDescription].
	
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				merchantProcessor: self 
				registerOn: salesRegister.

	self  should: [	cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier stolenCardErrorDescription.
			self assert: salesRegister isEmpty
		]
	
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 05:04:59' prior: 50881031!
test08CheckoutTicketReflectsBoughtItemsAsExpected

	| cart cashier  ticket |
		
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				merchantProcessor: self 
				registerOn: OrderedCollection new.	
	ticket _ cashier checkout.
	
	self assert: (ticket quantityOf: self itemInCatalogue) equals: 2.
	self assert: ticket totalItems equals: 2.	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 05:04:59' prior: 50879050!
test01CashierDoesNotAcceptAnEmptyCart

	self  should: [
				Cashier 
					for: (Cart acceptingItemsOf: self catalogue)
					paymentMethod: self nonExpiredCard 
					merchantProcessor: self 
					registerOn: OrderedCollection new.
			   ]
		raise: Error - MessageNotUnderstood 
		withMessageText: Cashier canNotCheckoutWithEmptyCartErrorDescription
	
! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'fr 11/23/2020 05:04:59' prior: 50880639!
test07CashierRegistersSalesAsExpected

	| cart cashier salesRegister total |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				merchantProcessor: self 
				registerOn: salesRegister.			
	total _ cashier checkout total.
	
	self assert: salesRegister size equals: 1.
	self assert: salesRegister first total equals: total.! !

!methodRemoval: Cashier class #for:paymentMethod:paymentProcessor:registerOn: stamp: 'fr 11/23/2020 05:04:59'!
for: aCart paymentMethod: aCard paymentProcessor: aMerchantProcessor registerOn: aSalesRegister 
	
	self validateCart: aCart.
	self validateCard: aCard.
		
	^self new initializeFor: aCart paymentMethod: aCard merchantProcessor: aMerchantProcessor registerOn: aSalesRegister !

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 05:05:01'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 05:05:01'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 05:05:01'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 05:05:01'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 05:05:01'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 05:05:01'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesAsExpected stamp: 'fr 11/23/2020 05:05:01'!
PASSED!

!testRun: #CashierTest #test08CheckoutTicketReflectsBoughtItemsAsExpected stamp: 'fr 11/23/2020 05:05:01'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 05:06:20' prior: 50881369!
test03CheckoutTotalIsCorrectForMultipleItems

	| cart cashier  |
		
	cart _ Cart acceptingItemsOf: self catalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				merchantProcessor: self 
				registerOn: OrderedCollection new.	
				
	self assert: cashier checkout total equals: (self itemInCataloguePrice * 2).
	
	self assertCheckoutTotalForCartWith: [	cart add: 2 of: self itemInCatalogue] isEqualTo: (self itemInCataloguePrice * 2)
	
! !

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 05:06:20'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 05:06:57' prior: 50881498!
test03CheckoutTotalIsCorrectForMultipleItems		
	
	self assertCheckoutTotalForCartWith: [:aCart | aCart add: 2 of: self itemInCatalogue] isEqualTo: (self itemInCataloguePrice * 2)
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 05:07:02' prior: 50881294!
assertCheckoutTotalForCartWith: aCartBlock isEqualTo: aCheckoutTotal

	| cart cashier  |
		
	cart _ Cart acceptingItemsOf: self catalogue.
	aCartBlock value: cart.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				merchantProcessor: self 
				registerOn: OrderedCollection new.	
				
	self assert: cashier checkout total equals: aCheckoutTotal 
	
! !

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 05:07:03'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 05:07:03'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 05:07:03'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 05:07:03'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 05:07:03'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 05:07:03'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesAsExpected stamp: 'fr 11/23/2020 05:07:03'!
PASSED!

!testRun: #CashierTest #test08CheckoutTicketReflectsBoughtItemsAsExpected stamp: 'fr 11/23/2020 05:07:03'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 05:07:51' prior: 50881309!
test02CheckoutTotalIsCorrectForASingleItem
	
	self assertCheckoutTotalForCartWith: [:aCart | aCart add: self itemInCatalogue] isEqualTo: self itemInCataloguePrice
	
! !

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 05:07:51'!
PASSED!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 05:07:51'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 05:07:51'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 05:07:51'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 05:07:51'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 05:07:51'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 05:07:51'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesAsExpected stamp: 'fr 11/23/2020 05:07:51'!
PASSED!

!testRun: #CashierTest #test08CheckoutTicketReflectsBoughtItemsAsExpected stamp: 'fr 11/23/2020 05:07:51'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 05:08:00' prior: 50881519!
test03CheckoutTotalIsCorrectForMultipleItems		
	
	self assertCheckoutTotalForCartWith: [:aCart | aCart add: 2 of: self itemInCatalogue] isEqualTo: self itemInCataloguePrice * 2
	
! !

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 05:08:01'!
PASSED!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 05:08:01'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 05:08:01'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 05:08:01'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 05:08:01'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 05:08:01'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 05:08:01'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesAsExpected stamp: 'fr 11/23/2020 05:08:01'!
PASSED!

!testRun: #CashierTest #test08CheckoutTicketReflectsBoughtItemsAsExpected stamp: 'fr 11/23/2020 05:08:01'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 05:08:28' prior: 50881385!
test06CanNotCheckoutWithAStolenCard

	| cart cashier salesRegister |
	
	paymentResponse _ [self error: Cashier stolenCardErrorDescription].
	
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				merchantProcessor: self 
				registerOn: salesRegister.

	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier stolenCardErrorDescription.
			self assert: salesRegister isEmpty
		]
	
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 05:09:01' prior: 50881324!
test05CanNotCheckoutWithACardWithoutCredit

	| cart cashier salesRegister |
	
	paymentResponse _ [self error: Cashier cardWithoutCreditErrorDescription].
		
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				merchantProcessor: self 
				registerOn: salesRegister.
	
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier cardWithoutCreditErrorDescription.
			self assert: salesRegister isEmpty 
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 05:09:54'!
assertCheckoutFailsWithError: anErrorMessage

	| cart cashier salesRegister |
	
	paymentResponse _ [self error: anErrorMessage].
		
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				merchantProcessor: self 
				registerOn: salesRegister.
	
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: anErrorMessage.
			self assert: salesRegister isEmpty 
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 05:10:36' prior: 50881671!
test05CanNotCheckoutWithACardWithoutCredit

	self assertCheckoutFailsWithError: Cashier cardWithoutCreditErrorDescription.
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 05:10:37' prior: 50881716!
test05CanNotCheckoutWithACardWithoutCredit

	self assertCheckoutFailsWithError: Cashier cardWithoutCreditErrorDescription
	
! !

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 05:10:38'!
PASSED!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 05:10:38'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 05:10:38'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 05:10:38'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 05:10:38'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 05:10:38'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 05:10:38'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesAsExpected stamp: 'fr 11/23/2020 05:10:38'!
PASSED!

!testRun: #CashierTest #test08CheckoutTicketReflectsBoughtItemsAsExpected stamp: 'fr 11/23/2020 05:10:38'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 05:11:02' prior: 50881648!
test06CanNotCheckoutWithAStolenCard

	self assertCheckoutFailsWithError: Cashier stolenCardErrorDescription
	
	
! !

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 05:11:02'!
PASSED!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 05:11:02'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 05:11:02'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 05:11:02'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 05:11:02'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 05:11:02'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 05:11:02'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesAsExpected stamp: 'fr 11/23/2020 05:11:02'!
PASSED!

!testRun: #CashierTest #test08CheckoutTicketReflectsBoughtItemsAsExpected stamp: 'fr 11/23/2020 05:11:02'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 05:11:30'!
test08CheckoutTicketReflectsOnlyBoughtItemsAsExpected

	| cart cashier  ticket |
		
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				merchantProcessor: self 
				registerOn: OrderedCollection new.	
	ticket _ cashier checkout.
	
	self assert: (ticket quantityOf: self itemInCatalogue) equals: 2.
	self assert: ticket totalItems equals: 2.	
! !

!methodRemoval: CashierTest #test08CheckoutTicketReflectsBoughtItemsAsExpected stamp: 'fr 11/23/2020 05:11:30'!
test08CheckoutTicketReflectsBoughtItemsAsExpected

	| cart cashier  ticket |
		
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				merchantProcessor: self 
				registerOn: OrderedCollection new.	
	ticket _ cashier checkout.
	
	self assert: (ticket quantityOf: self itemInCatalogue) equals: 2.
	self assert: ticket totalItems equals: 2.	
!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/23/2020 05:16:06' prior: 50881426!
test01CashierDoesNotAcceptAnEmptyCart
	
	| salesRegister |
	salesRegister _ OrderedCollection new.
	self  should: [
				Cashier 
					for: (Cart acceptingItemsOf: self catalogue)
					paymentMethod: self nonExpiredCard 
					merchantProcessor: self 
					registerOn: salesRegister
			   ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier canNotCheckoutWithEmptyCartErrorDescription.
			self assert: salesRegister isEmpty
		]
	
! !

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 05:16:08'!
PASSED!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 05:16:08'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 05:16:08'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 05:16:08'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 05:16:08'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 05:16:08'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 05:16:08'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesAsExpected stamp: 'fr 11/23/2020 05:16:08'!
PASSED!

!testRun: #CashierTest #test08CheckoutTicketReflectsOnlyBoughtItemsAsExpected stamp: 'fr 11/23/2020 05:16:08'!
PASSED!

----SNAPSHOT----(23 November 2020 05:16:18) CuisUniversity-4384.image priorSource: 17583824!

----SNAPSHOT----(23 November 2020 05:18:01) CuisUniversity-4384.image priorSource: 17607328!

----SNAPSHOT----(23 November 2020 05:20:13) CuisUniversity-4384.image priorSource: 17607422!
!CashierTest methodsFor: 'merchant processor' stamp: 'fr 11/23/2020 05:20:58' prior: 50876965!
charge: someAmountToCharge on: aCard 

	paymentResponse value
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 11/23/2020 05:21:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 11/23/2020 05:21:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 11/23/2020 05:21:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 11/23/2020 05:21:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 11/23/2020 05:21:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 11/23/2020 05:21:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 11/23/2020 05:21:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 11/23/2020 05:21:05'!
PASSED!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 05:21:05'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 05:21:05'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 05:21:05'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 05:21:05'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 05:21:05'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 05:21:05'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesAsExpected stamp: 'fr 11/23/2020 05:21:05'!
PASSED!

!testRun: #CashierTest #test08CheckoutTicketReflectsOnlyBoughtItemsAsExpected stamp: 'fr 11/23/2020 05:21:05'!
PASSED!

----SNAPSHOT----(23 November 2020 05:21:09) CuisUniversity-4384.image priorSource: 17607516!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 11/23/2020 05:21:11'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 11/23/2020 05:21:11'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 11/23/2020 05:21:11'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 11/23/2020 05:21:11'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 11/23/2020 05:21:11'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 11/23/2020 05:21:11'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 11/23/2020 05:21:11'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 11/23/2020 05:21:11'!
PASSED!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/23/2020 05:21:11'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/23/2020 05:21:11'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/23/2020 05:21:11'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/23/2020 05:21:11'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/23/2020 05:21:11'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/23/2020 05:21:11'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesAsExpected stamp: 'fr 11/23/2020 05:21:11'!
PASSED!

!testRun: #CashierTest #test08CheckoutTicketReflectsOnlyBoughtItemsAsExpected stamp: 'fr 11/23/2020 05:21:11'!
PASSED!

Date today!

Date today!

self month !

self month < self month next !

Date today!

self < self !

self month start !

self month next !

self month start !

self month next start !

self month start < self month next start !

self month start > self month next start !

self month start < self month next start !

self month start !

self month next start !

----SNAPSHOT----(23 November 2020 05:29:04) CuisUniversity-4384.image priorSource: 17609463!

DateAndTime today !

----SNAPSHOT----(23 November 2020 05:43:05) CuisUniversity-4384.image priorSource: 17611601!

----QUIT----(23 November 2020 05:47:05) CuisUniversity-4384.image priorSource: 17611716!

----STARTUP---- (26 November 2020 15:27:50) as /home/fede/Documentos/Facultad/Inge1/Cuises/linux64/CuisUniversity-4384.image!

!CashierTest methodsFor: 'tests' stamp: 'fr 11/26/2020 15:28:57'!
newCart

	^ Cart acceptingItemsOf: self catalogue! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/26/2020 15:28:57' prior: 50881348!
test04CashierDoesNotAcceptExpiredCards

	| cart salesRegister |
	salesRegister _ OrderedCollection new.
	cart _ self newCart.
	cart add: 2 of: self itemInCatalogue.	

	self  should: [	Cashier 
					for: cart 
					paymentMethod: self expiredCard 
					merchantProcessor: self 
					registerOn: salesRegister.
			    ] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier expiredCardErrorDescription.
			self assert: salesRegister isEmpty
		]
	
! !

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/26/2020 15:28:58'!
PASSED!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/26/2020 15:28:58'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/26/2020 15:28:58'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/26/2020 15:28:58'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/26/2020 15:28:58'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/26/2020 15:28:58'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/26/2020 15:28:58'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesAsExpected stamp: 'fr 11/26/2020 15:28:58'!
PASSED!

!testRun: #CashierTest #test08CheckoutTicketReflectsOnlyBoughtItemsAsExpected stamp: 'fr 11/26/2020 15:28:58'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/26/2020 15:29:12' prior: 50881441!
test07CashierRegistersSalesAsExpected

	| cart cashier salesRegister total |
	salesRegister _ OrderedCollection new.
	cart _ self newCart.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				merchantProcessor: self 
				registerOn: salesRegister.			
	total _ cashier checkout total.
	
	self assert: salesRegister size equals: 1.
	self assert: salesRegister first total equals: total.! !

!testRun: #CashierTest #test07CashierRegistersSalesAsExpected stamp: 'fr 11/26/2020 15:29:13'!
PASSED!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/26/2020 15:29:13'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/26/2020 15:29:13'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/26/2020 15:29:13'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/26/2020 15:29:13'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/26/2020 15:29:13'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/26/2020 15:29:13'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesAsExpected stamp: 'fr 11/26/2020 15:29:13'!
PASSED!

!testRun: #CashierTest #test08CheckoutTicketReflectsOnlyBoughtItemsAsExpected stamp: 'fr 11/26/2020 15:29:13'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/26/2020 15:29:19' prior: 50882081!
test07CashierRegistersSalesAsExpected

	| cart cashier salesRegister total |
	salesRegister _ OrderedCollection new.
	cart _ Cart acceptingItemsOf: self catalogue.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				merchantProcessor: self 
				registerOn: salesRegister.			
	total _ cashier checkout total.
	
	self assert: salesRegister size equals: 1.
	self assert: salesRegister first total equals: total.! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/26/2020 15:29:28' prior: 50882128!
test07CashierRegistersSalesAsExpected

	| cart cashier salesRegister total |
	salesRegister _ OrderedCollection new.
	cart _ self newCart.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				merchantProcessor: self 
				registerOn: salesRegister.			
	total _ cashier checkout total.
	
	self assert: salesRegister size equals: 1.
	self assert: salesRegister first total equals: total.! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/26/2020 15:29:36' prior: 50881796!
test08CheckoutTicketReflectsOnlyBoughtItemsAsExpected

	| cart cashier  ticket |
		
	cart _ self newCart.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				merchantProcessor: self 
				registerOn: OrderedCollection new.	
	ticket _ cashier checkout.
	
	self assert: (ticket quantityOf: self itemInCatalogue) equals: 2.
	self assert: ticket totalItems equals: 2.	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/26/2020 15:29:59' prior: 50881831!
test01CashierDoesNotAcceptAnEmptyCart
	
	| salesRegister |
	salesRegister _ OrderedCollection new.
	self  should: [
				Cashier 
					for: self newCart
					paymentMethod: self nonExpiredCard 
					merchantProcessor: self 
					registerOn: salesRegister
			   ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier canNotCheckoutWithEmptyCartErrorDescription.
			self assert: salesRegister isEmpty
		]
	
! !

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/26/2020 15:29:59'!
PASSED!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/26/2020 15:29:59'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/26/2020 15:29:59'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/26/2020 15:29:59'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/26/2020 15:29:59'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/26/2020 15:29:59'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/26/2020 15:29:59'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesAsExpected stamp: 'fr 11/26/2020 15:29:59'!
PASSED!

!testRun: #CashierTest #test08CheckoutTicketReflectsOnlyBoughtItemsAsExpected stamp: 'fr 11/26/2020 15:29:59'!
PASSED!
!CashierTest methodsFor: 'private' stamp: 'fr 11/26/2020 15:32:16' prior: 50881694!
assertCheckoutFailsWithError: anErrorMessage

	| cart cashier salesRegister |
	
	paymentResponse _ [self error: anErrorMessage].
		
	salesRegister _ OrderedCollection new.
	cart _ self newCart.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				merchantProcessor: self 
				registerOn: salesRegister.
	
	self  should: [cashier checkout] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: anErrorMessage.
			self assert: salesRegister isEmpty 
		]
	
! !
!CashierTest methodsFor: 'private' stamp: 'fr 11/26/2020 15:32:25' prior: 50881528!
assertCheckoutTotalForCartWith: aCartBlock isEqualTo: aCheckoutTotal

	| cart cashier  |
		
	cart _ self newCart.
	aCartBlock value: cart.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				merchantProcessor: self 
				registerOn: OrderedCollection new.	
				
	self assert: cashier checkout total equals: aCheckoutTotal 
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/26/2020 15:34:16'!
test08CheckoutTicketReflectsBoughtItemsAsExpected

	| cart cashier  ticket |
		
	cart _ self newCart.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				merchantProcessor: self 
				registerOn: OrderedCollection new.	
	ticket _ cashier checkout.
	
	self assert: (ticket quantityOf: self itemInCatalogue) equals: 2.
	self assert: ticket totalItems equals: 2.	
! !

!methodRemoval: CashierTest #test08CheckoutTicketReflectsOnlyBoughtItemsAsExpected stamp: 'fr 11/26/2020 15:34:16'!
test08CheckoutTicketReflectsOnlyBoughtItemsAsExpected

	| cart cashier  ticket |
		
	cart _ self newCart.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				merchantProcessor: self 
				registerOn: OrderedCollection new.	
	ticket _ cashier checkout.
	
	self assert: (ticket quantityOf: self itemInCatalogue) equals: 2.
	self assert: ticket totalItems equals: 2.	
!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/26/2020 15:34:47' prior: 50882263!
test08CheckoutTicketReflectsBoughtItemsAsExpected

	| cart cashier ticket |
		
	cart _ self newCart.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				merchantProcessor: self 
				registerOn: OrderedCollection new.	
	ticket _ cashier checkout.
	
	self assert: (ticket quantityOf: self itemInCatalogue) equals: 2.
	self assert: ticket totalItems equals: 2.	
! !
!CashierTest methodsFor: 'utils' stamp: 'fr 11/26/2020 15:35:11' prior: 50878541!
itemInCatalogue
	
	^ 'an item'! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/26/2020 15:35:22'!
newSalesRegister

	^ OrderedCollection new! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/26/2020 15:35:22' prior: 50882180!
test01CashierDoesNotAcceptAnEmptyCart
	
	| salesRegister |
	salesRegister _ self newSalesRegister.
	self  should: [
				Cashier 
					for: self newCart
					paymentMethod: self nonExpiredCard 
					merchantProcessor: self 
					registerOn: salesRegister
			   ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier canNotCheckoutWithEmptyCartErrorDescription.
			self assert: salesRegister isEmpty
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/26/2020 15:35:36' prior: 50882031!
test04CashierDoesNotAcceptExpiredCards

	| cart salesRegister |
	salesRegister _ self newSalesRegister.
	cart _ self newCart.
	cart add: 2 of: self itemInCatalogue.	

	self  should: [	Cashier 
					for: cart 
					paymentMethod: self expiredCard 
					merchantProcessor: self 
					registerOn: salesRegister.
			    ] 
		raise: Error - MessageNotUnderstood  
		withExceptionDo: [:anError | 
			self assert: anError messageText equals: Cashier expiredCardErrorDescription.
			self assert: salesRegister isEmpty
		]
	
! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/26/2020 15:35:45' prior: 50882146!
test07CashierRegistersSalesAsExpected

	| cart cashier salesRegister total |
	salesRegister _ self newSalesRegister.
	cart _ self newCart.
	cart add: self itemInCatalogue.	
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				merchantProcessor: self 
				registerOn: salesRegister.			
	total _ cashier checkout total.
	
	self assert: salesRegister size equals: 1.
	self assert: salesRegister first total equals: total.! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/26/2020 15:35:58' prior: 50882297!
test08CheckoutTicketReflectsBoughtItemsAsExpected

	| cart cashier ticket |
		
	cart _ self newCart.
	cart add: 2 of: self itemInCatalogue.
	cashier _ Cashier 
				for: cart 
				paymentMethod: self nonExpiredCard 
				merchantProcessor: self 
				registerOn: self newSalesRegister.	
	ticket _ cashier checkout.
	
	self assert: (ticket quantityOf: self itemInCatalogue) equals: 2.
	self assert: ticket totalItems equals: 2.	
! !

!testRun: #CashierTest #test08CheckoutTicketReflectsBoughtItemsAsExpected stamp: 'fr 11/26/2020 15:36:01'!
PASSED!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/26/2020 15:36:01'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/26/2020 15:36:01'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/26/2020 15:36:01'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/26/2020 15:36:01'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/26/2020 15:36:01'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/26/2020 15:36:01'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesAsExpected stamp: 'fr 11/26/2020 15:36:01'!
PASSED!

!testRun: #CashierTest #test08CheckoutTicketReflectsBoughtItemsAsExpected stamp: 'fr 11/26/2020 15:36:01'!
PASSED!
!SaleTicket methodsFor: 'total' stamp: 'fr 11/26/2020 15:38:29'!
totalFor: aTicketEntryBlock
	
	^ticketEntries sum: [:aTicketEntry | aTicketEntryBlock value: aTicketEntry]! !
!SaleTicket methodsFor: 'total' stamp: 'fr 11/26/2020 15:38:49' prior: 50879971!
total
	
	^self totalFor: [:aTicketEntry | aTicketEntry subtotal]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 11/26/2020 15:38:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 11/26/2020 15:38:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 11/26/2020 15:38:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 11/26/2020 15:38:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 11/26/2020 15:38:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 11/26/2020 15:38:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 11/26/2020 15:38:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 11/26/2020 15:38:54'!
PASSED!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/26/2020 15:38:54'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/26/2020 15:38:54'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/26/2020 15:38:54'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/26/2020 15:38:54'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/26/2020 15:38:54'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/26/2020 15:38:54'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesAsExpected stamp: 'fr 11/26/2020 15:38:54'!
PASSED!

!testRun: #CashierTest #test08CheckoutTicketReflectsBoughtItemsAsExpected stamp: 'fr 11/26/2020 15:38:54'!
PASSED!

!methodRemoval: SaleTicket #totalFor: stamp: 'fr 11/26/2020 15:39:07'!
totalFor: aTicketEntryBlock
	
	^ticketEntries sum: [:aTicketEntry | aTicketEntryBlock value: aTicketEntry]!
!SaleTicket methodsFor: 'total' stamp: 'fr 11/26/2020 15:39:19' prior: 50882427!
total
	
	^ticketEntries sum: [:aTicketEntry | aTicketEntry subtotal]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 11/26/2020 15:39:21'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 11/26/2020 15:39:21'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 11/26/2020 15:39:21'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 11/26/2020 15:39:21'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 11/26/2020 15:39:21'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 11/26/2020 15:39:21'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 11/26/2020 15:39:21'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 11/26/2020 15:39:21'!
PASSED!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/26/2020 15:39:21'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/26/2020 15:39:21'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/26/2020 15:39:21'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/26/2020 15:39:21'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/26/2020 15:39:21'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/26/2020 15:39:21'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesAsExpected stamp: 'fr 11/26/2020 15:39:21'!
PASSED!

!testRun: #CashierTest #test08CheckoutTicketReflectsBoughtItemsAsExpected stamp: 'fr 11/26/2020 15:39:21'!
PASSED!
!SaleTicket methodsFor: 'total' stamp: 'fr 11/26/2020 15:41:53'!
totalFor: aSelector
	
	^ticketEntries sum: [:aTicketEntry | aSelector sendTo: aTicketEntry]! !
!SaleTicket methodsFor: 'total' stamp: 'fr 11/26/2020 15:42:09' prior: 50882490!
total
	
	^self totalFor: #subtotal! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 11/26/2020 15:42:13'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 11/26/2020 15:42:13'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 11/26/2020 15:42:13'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 11/26/2020 15:42:13'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 11/26/2020 15:42:13'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 11/26/2020 15:42:13'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 11/26/2020 15:42:13'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 11/26/2020 15:42:13'!
PASSED!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/26/2020 15:42:13'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/26/2020 15:42:13'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/26/2020 15:42:13'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/26/2020 15:42:13'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/26/2020 15:42:13'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/26/2020 15:42:13'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesAsExpected stamp: 'fr 11/26/2020 15:42:13'!
PASSED!

!testRun: #CashierTest #test08CheckoutTicketReflectsBoughtItemsAsExpected stamp: 'fr 11/26/2020 15:42:13'!
PASSED!
!SaleTicket methodsFor: 'total' stamp: 'fr 11/26/2020 15:39:19' prior: 50882553!
total
	
	^ticketEntries sum: [:aTicketEntry | aTicketEntry subtotal]! !

!methodRemoval: SaleTicket #totalFor: stamp: 'fr 11/26/2020 15:43:10'!
totalFor: aSelector
	
	^ticketEntries sum: [:aTicketEntry | aSelector sendTo: aTicketEntry]!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 11/26/2020 15:43:12'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 11/26/2020 15:43:12'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 11/26/2020 15:43:12'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 11/26/2020 15:43:12'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 11/26/2020 15:43:12'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 11/26/2020 15:43:12'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 11/26/2020 15:43:12'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 11/26/2020 15:43:12'!
PASSED!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/26/2020 15:43:12'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/26/2020 15:43:12'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/26/2020 15:43:12'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/26/2020 15:43:12'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/26/2020 15:43:12'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/26/2020 15:43:12'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesAsExpected stamp: 'fr 11/26/2020 15:43:12'!
PASSED!

!testRun: #CashierTest #test08CheckoutTicketReflectsBoughtItemsAsExpected stamp: 'fr 11/26/2020 15:43:12'!
PASSED!
!SaleTicket methodsFor: 'private' stamp: 'fr 11/26/2020 15:43:25' prior: 50880866!
detectATicketEntryFor: anItem

	^ticketEntries detect: [:aTicketEntry | aTicketEntry item = anItem]! !
!Cashier methodsFor: 'private' stamp: 'fr 11/26/2020 15:45:06' prior: 50881168!
proceedToPayment

	merchantProcessor charge: saleTicket total on: paymentMethod! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 11/26/2020 15:45:07'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 11/26/2020 15:45:07'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 11/26/2020 15:45:07'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 11/26/2020 15:45:07'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 11/26/2020 15:45:07'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 11/26/2020 15:45:07'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 11/26/2020 15:45:07'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 11/26/2020 15:45:07'!
PASSED!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/26/2020 15:45:07'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/26/2020 15:45:07'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/26/2020 15:45:07'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/26/2020 15:45:07'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/26/2020 15:45:07'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/26/2020 15:45:07'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesAsExpected stamp: 'fr 11/26/2020 15:45:07'!
PASSED!

!testRun: #CashierTest #test08CheckoutTicketReflectsBoughtItemsAsExpected stamp: 'fr 11/26/2020 15:45:07'!
PASSED!
!Cashier methodsFor: 'private' stamp: 'fr 11/26/2020 15:45:30' prior: 50880770!
collectTicketEntriesForTheCartInto: ticketEntries

	cart itemsQuantitiesAndPricesDo: [:anItem :aQuantity :aPrice | 
		ticketEntries add: (SaleTicketEntry for: aQuantity of: anItem costing: aPrice)
	]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 11/26/2020 15:45:32'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 11/26/2020 15:45:32'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 11/26/2020 15:45:32'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 11/26/2020 15:45:32'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 11/26/2020 15:45:32'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 11/26/2020 15:45:32'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 11/26/2020 15:45:32'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 11/26/2020 15:45:32'!
PASSED!

!testRun: #CashierTest #test01CashierDoesNotAcceptAnEmptyCart stamp: 'fr 11/26/2020 15:45:32'!
PASSED!

!testRun: #CashierTest #test02CheckoutTotalIsCorrectForASingleItem stamp: 'fr 11/26/2020 15:45:32'!
PASSED!

!testRun: #CashierTest #test03CheckoutTotalIsCorrectForMultipleItems stamp: 'fr 11/26/2020 15:45:32'!
PASSED!

!testRun: #CashierTest #test04CashierDoesNotAcceptExpiredCards stamp: 'fr 11/26/2020 15:45:32'!
PASSED!

!testRun: #CashierTest #test05CanNotCheckoutWithACardWithoutCredit stamp: 'fr 11/26/2020 15:45:32'!
PASSED!

!testRun: #CashierTest #test06CanNotCheckoutWithAStolenCard stamp: 'fr 11/26/2020 15:45:32'!
PASSED!

!testRun: #CashierTest #test07CashierRegistersSalesAsExpected stamp: 'fr 11/26/2020 15:45:32'!
PASSED!

!testRun: #CashierTest #test08CheckoutTicketReflectsBoughtItemsAsExpected stamp: 'fr 11/26/2020 15:45:32'!
PASSED!

----SNAPSHOT----(26 November 2020 15:47:07) CuisUniversity-4384.image priorSource: 17611810!