

----STARTUP---- (1 November 2020 10:32:29) as /home/rodrigo/cuis-linux64/CuisUniversity-4384.image!


----End fileIn of /home/rodrigo/cuis-linux64/TerniLapilli.st----!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 10:33:48' prior: 50867855!
test08AssertPlayerWinsWithThreeOnFirstColumn
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 1@1.
	aTerniLapilli putOAt: 2@1.
	aTerniLapilli putXAt: 1@2.
	aTerniLapilli putOAt: 2@2.
	aTerniLapilli putXAt: 1@3.
	self assert: aTerniLapilli playerXHasWon.	! !

!testRun: #TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumn stamp: 'RL 11/1/2020 10:33:51'!
PASSED!

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/1/2020 10:34:17'!
ERROR!

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/1/2020 10:34:17'!
ERROR!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 10:34:22' prior: 50867868!
test09AssertPlayerWinsWithThreeOnMiddleColumn
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 2@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 1@3.
	aTerniLapilli putXAt: 2@3.
	self assert: aTerniLapilli playerXHasWon.	! !

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/1/2020 10:34:24'!
PASSED!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 10:35:00' prior: 50867881!
test10AssertPlayerWinsWithThreeOnFirstRow
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 1@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@1.
	aTerniLapilli putOAt: 2@2.
	aTerniLapilli putXAt: 3@1.
	self assert: aTerniLapilli playerXHasWon.	! !

!testRun: #TerniLapilliTests #test10AssertPlayerWinsWithThreeOnFirstRow stamp: 'RL 11/1/2020 10:35:02'!
PASSED!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 10:35:30' prior: 50867894!
test11AssertPlayerWinsWithThreeOn11to33Diagonal
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 1@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 3@3.
	self assert: aTerniLapilli playerXHasWon.	! !

!methodRemoval: TerniLapilliTests #test11AssertPlayerWinsWithThreeOn11to33Diagonal stamp: 'RL 11/1/2020 10:35:33'!
test11AssertPlayerWinsWithThreeOn11to33Diagonal
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 1@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 3@3.
	self assert: aTerniLapilli playerXHasWon.	!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 10:36:48'!
test11AssertPlayerWinsWithThreeOn11to33Diagonal
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 1@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 3@3.
	self assert: aTerniLapilli playerXHasWon.! !
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 10:37:22' prior: 50867907!
test12AssertPlayerWinsWithThreeOn31to13Diagonal
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	self assert: aTerniLapilli playerXHasWon.	! !
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 10:37:57' prior: 50867920!
test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	self
		should: [ aTerniLapilli move: #O from: 2@3 to: 3@3. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli thereArePiecesLeftToPut ]! !
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 10:38:30' prior: 50867938!
test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	self
		should: [ aTerniLapilli move: #X from: 2@2 to: 1@2. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidPositionErrorMessage ]! !

!testRun: #TerniLapilliTests #test01PlayerXStartsGame stamp: 'RL 11/1/2020 10:38:36'!
PASSED!

!testRun: #TerniLapilliTests #test02PlayerXPutAtCorrectPosition stamp: 'RL 11/1/2020 10:38:36'!
PASSED!

!testRun: #TerniLapilliTests #test03ThrowExceptionWhenPlayerPutOnInvalidPosition stamp: 'RL 11/1/2020 10:38:36'!
PASSED!

!testRun: #TerniLapilliTests #test04PlayerOHasSecondTurn stamp: 'RL 11/1/2020 10:38:36'!
PASSED!

!testRun: #TerniLapilliTests #test05PlayerOPutAtCorrectPosition stamp: 'RL 11/1/2020 10:38:36'!
PASSED!

!testRun: #TerniLapilliTests #test06ThrowExceptionWhenPlayerPutAtAnAlreadyTakenPosition stamp: 'RL 11/1/2020 10:38:36'!
PASSED!

!testRun: #TerniLapilliTests #test07ThrowExceptionWhenPlayerPlaysNotInItsTurn stamp: 'RL 11/1/2020 10:38:36'!
PASSED!

!testRun: #TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumn stamp: 'RL 11/1/2020 10:38:36'!
PASSED!

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/1/2020 10:38:36'!
PASSED!

!testRun: #TerniLapilliTests #test10AssertPlayerWinsWithThreeOnFirstRow stamp: 'RL 11/1/2020 10:38:36'!
PASSED!

!testRun: #TerniLapilliTests #test11AssertPlayerWinsWithThreeOn11to33Diagonal stamp: 'RL 11/1/2020 10:38:36'!
PASSED!

!testRun: #TerniLapilliTests #test12AssertPlayerWinsWithThreeOn31to13Diagonal stamp: 'RL 11/1/2020 10:38:36'!
PASSED!

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/1/2020 10:38:36'!
PASSED!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/1/2020 10:38:36'!
PASSED!
!Player methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 10:39:11' prior: 50867968!
addPieceAt: aPosition 
	pieces add: aPosition.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 10:40:05' prior: 50868035 overrides: 16896425!
initialize
	playerX  := Player newAs: #X.
	playerO  := Player newAs: #O.
	turn := #X.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 10:40:10' prior: 50868043!
is: aPlayer at: aPosition
	^aPlayer hasPieceAt: aPosition.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 10:40:49' prior: 50868070!
move: aPlayer from: aPosition to: anotherPosition
	playerX numberOfPiecesOnGame + playerO numberOfPiecesOnGame < 6
		ifTrue: [^Error signal: self class thereArePiecesLeftToPut ].
	((playerX hasPieceAt: aPosition) or: [playerO hasPieceAt: aPosition])
		ifTrue: [^Error signal: self class notValidPositionErrorMessage ].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 10:40:59' prior: 50868094!
playerOHasWon
	^playerO hasWon. ! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 10:41:06' prior: 50868107!
playerXHasWon
	^playerX hasWon. ! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 10:42:09' prior: 50868120!
put: aPlayer at: aPosition
	((aPosition x between: 1 and: 3) and: [aPosition y between: 1 and: 3]) not
		ifTrue: [	^Error signal: self class notValidPositionErrorMessage ].
	
	((playerX hasPieceAt: aPosition) or: [playerO hasPieceAt: aPosition])
		ifTrue: [^Error signal: self class notValidPositionErrorMessage ].

	(self isTurnOfPlayer: aPlayer) ifFalse: [^Error signal: self class notPlayersTurn ]. 
	
	aPlayer addPieceAt: aPosition.
	self nextTurn.! !

----SNAPSHOT----(1 November 2020 10:43:51) CuisUniversity-4384.image priorSource: 17155564!

Object subclass: #TerniLapilliTurnState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliTurnState category: 'TerniLapilli' stamp: 'RL 11/1/2020 10:45:30'!
Object subclass: #TerniLapilliTurnState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TerniLapilliTurnState subclass: #TerniLapilliPlayerXTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliPlayerXTurn category: 'TerniLapilli' stamp: 'RL 11/1/2020 10:46:02'!
TerniLapilliTurnState subclass: #TerniLapilliPlayerXTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TerniLapilliTurnState subclass: #TerniLapilliPlayerOTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliPlayerOTurn category: 'TerniLapilli' stamp: 'RL 11/1/2020 10:46:09'!
TerniLapilliTurnState subclass: #TerniLapilliPlayerOTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 10:47:14' prior: 50868386 overrides: 16896425!
initialize
	playerX  := Player newAs: #X.
	playerO  := Player newAs: #O.
	"turn := #X."
	turn := TerniLapilliPlayerXTurn new! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 10:48:04' prior: 50868480 overrides: 16896425!
initialize
	playerX  := Player newAs: #X.
	playerO  := Player newAs: #O.
	"turn := #X."
	turn := TerniLapilliPlayerXTurn new.! !

Object subclass: #Player
	instanceVariableNames: 'pieces'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #Player category: 'TerniLapilli' stamp: 'RL 11/1/2020 10:55:16'!
Object subclass: #Player
	instanceVariableNames: 'pieces'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

Player subclass: #PlayerX
	instanceVariableNames: 'pieces'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

Player subclass: #PlayerX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #PlayerX category: 'TerniLapilli' stamp: 'RL 11/1/2020 10:55:45'!
Player subclass: #PlayerX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

Player subclass: #PlayerO
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #PlayerO category: 'TerniLapilli' stamp: 'RL 11/1/2020 10:55:48'!
Player subclass: #PlayerO
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!Player methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 10:56:30' overrides: 16896425!
initialize
	pieces := OrderedCollection new.! !

!methodRemoval: Player #initializeAs: stamp: 'RL 11/1/2020 10:56:35'!
initializeAs: aPlayerType
	playerType := aPlayerType.
	pieces := OrderedCollection new.!

!methodRemoval: Player #playerType stamp: 'RL 11/1/2020 10:56:48'!
playerType
	^playerType !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 10:57:32' prior: 50868488 overrides: 16896425!
initialize
	playerX  := PlayerX new.
	playerO  := PlayerO new.
	turn := TerniLapilliPlayerXTurn new.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 10:59:30' prior: 50868056!
isTurnOfPlayer: aPlayer
	^turn belongsTo: aPlayer.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:03:38' prior: 50868553!
isTurnOfPlayer: aPlayer
	^aPlayer isPlayerTurn: turn.! !
!PlayerX methodsFor: 'no messages' stamp: 'RL 11/1/2020 11:04:32'!
isPlayerTurn: aTurn
	^aTurn isPlayerXTurn.! !
!PlayerO methodsFor: 'no messages' stamp: 'RL 11/1/2020 11:04:53'!
isPlayerTurn: aTurn
	^aTurn isPlayerOTurn.! !
!TerniLapilliPlayerOTurn methodsFor: 'no messages' stamp: 'RL 11/1/2020 11:05:32'!
isPlayerOTurn
	^true.! !
!TerniLapilliPlayerOTurn methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:05:35'!
isPlayerXTurn
	^true.! !
!TerniLapilliPlayerOTurn methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:05:39' prior: 50868575!
isPlayerXTurn
	^false.! !
!TerniLapilliPlayerXTurn methodsFor: 'no messages' stamp: 'RL 11/1/2020 11:05:56'!
isPlayerOTurn
	^false.! !
!TerniLapilliPlayerXTurn methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:06:03'!
isPlayerXTurn
	^true.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:07:13' prior: 50868066!
isXTurn
	^self isTurnOfPlayer: playerX.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:07:42'!
isOTurn
	^self isXTurn not.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:10:06' prior: 50868089!
nextTurn
	"turn = #X ifTrue: [turn := #O] ifFalse: [turn := #X] ."
	turn := turn next.! !
!TerniLapilliPlayerOTurn methodsFor: 'nil' stamp: 'RL 11/1/2020 11:10:43'!
next
	^TerniLapilliPlayerXTurn new.! !
!TerniLapilliPlayerXTurn methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:10:58'!
next
	^TerniLapilliPlayerOTurn new.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:11:13' prior: 50868600!
nextTurn
	turn := turn next.! !

!methodRemoval: TerniLapilli #turn stamp: 'RL 11/1/2020 11:11:44'!
turn
	^turn!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:16:39' prior: 50868421!
put: aPlayer at: aPosition
	((aPosition x between: 1 and: 3) and: [aPosition y between: 1 and: 3]) not
		ifTrue: [	^Error signal: self class notValidPositionErrorMessage ].
	
	((playerX hasPieceAt: aPosition) or: [playerO hasPieceAt: aPosition])
		ifTrue: [^Error signal: self class notValidPositionErrorMessage ].

	"(self isTurnOfPlayer: aPlayer) ifFalse: [^Error signal: self class notPlayersTurn ]. 
	
	aPlayer addPieceAt: aPosition."
	turn validate: aPlayer andAddPieceAt: aPosition.
	self nextTurn.! !
!TerniLapilliPlayerOTurn methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:18:56'!
validate: aPlayer andAddPieceAt: aPosition
	aPlayer addPieceOnOturnAt: aPosition.! !
!TerniLapilliPlayerXTurn methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:19:17'!
validate: aPlayer andAddPieceAt: aPosition
	aPlayer addPieceOnXturnAt: aPosition.! !
!PlayerO methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:19:37'!
addPieceOnXturnAt: aPosition! !
!PlayerO methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:20:27'!
addPieceOnOturnAt: aPosition
	^Error signal: TerniLapilli notPlayersTurn! !
!PlayerO methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:21:16' prior: 50868653!
addPieceOnXturnAt: aPosition
	pieces add: aPosition! !
!PlayerX methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:21:35'!
addPieceOnOturnAt: aPosition
	pieces add: aPosition! !
!PlayerX methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:21:38'!
addPieceOnXturnAt: aPosition
	pieces add: aPosition! !
!PlayerO methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:22:05' prior: 50868657!
addPieceOnOturnAt: aPosition
	pieces add: aPosition! !
!PlayerO methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:22:09' prior: 50868663!
addPieceOnXturnAt: aPosition
	^Error signal: TerniLapilli notPlayersTurn! !
!PlayerX methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:22:33' prior: 50868668!
addPieceOnOturnAt: aPosition
	^Error signal: TerniLapilli notPlayersTurn! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:23:23' prior: 50868623!
put: aPlayer at: aPosition
	((aPosition x between: 1 and: 3) and: [aPosition y between: 1 and: 3]) not
		ifTrue: [	^Error signal: self class notValidPositionErrorMessage ].
	
	((playerX hasPieceAt: aPosition) or: [playerO hasPieceAt: aPosition])
		ifTrue: [^Error signal: self class notValidPositionErrorMessage ].

	turn validate: aPlayer andAddPieceAt: aPosition.
	self nextTurn.! !

!testRun: #TerniLapilliTests #test01PlayerXStartsGame stamp: 'RL 11/1/2020 11:24:39'!
PASSED!

!testRun: #TerniLapilliTests #test02PlayerXPutAtCorrectPosition stamp: 'RL 11/1/2020 11:24:39'!
PASSED!

!testRun: #TerniLapilliTests #test03ThrowExceptionWhenPlayerPutOnInvalidPosition stamp: 'RL 11/1/2020 11:24:39'!
PASSED!

!testRun: #TerniLapilliTests #test04PlayerOHasSecondTurn stamp: 'RL 11/1/2020 11:24:39'!
PASSED!

!testRun: #TerniLapilliTests #test05PlayerOPutAtCorrectPosition stamp: 'RL 11/1/2020 11:24:39'!
PASSED!

!testRun: #TerniLapilliTests #test06ThrowExceptionWhenPlayerPutAtAnAlreadyTakenPosition stamp: 'RL 11/1/2020 11:24:39'!
PASSED!

!testRun: #TerniLapilliTests #test07ThrowExceptionWhenPlayerPlaysNotInItsTurn stamp: 'RL 11/1/2020 11:24:39'!
PASSED!

!testRun: #TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumn stamp: 'RL 11/1/2020 11:24:39'!
PASSED!

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/1/2020 11:24:39'!
PASSED!

!testRun: #TerniLapilliTests #test10AssertPlayerWinsWithThreeOnFirstRow stamp: 'RL 11/1/2020 11:24:39'!
PASSED!

!testRun: #TerniLapilliTests #test11AssertPlayerWinsWithThreeOn11to33Diagonal stamp: 'RL 11/1/2020 11:24:39'!
PASSED!

!testRun: #TerniLapilliTests #test12AssertPlayerWinsWithThreeOn31to13Diagonal stamp: 'RL 11/1/2020 11:24:39'!
PASSED!

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/1/2020 11:24:39'!
PASSED!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/1/2020 11:24:39'!
PASSED!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:24:50' prior: 50867792!
test02PlayerXPutAtCorrectPosition
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.
	aTerniLapilli putXAt: 1@1.
	self assert: (aTerniLapilli isXAt: 1@1).! !
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:26:56' prior: 50868294!
test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	self
		should: [ aTerniLapilli moveOFrom: 2@3 to: 3@3. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli thereArePiecesLeftToPut ]! !
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:27:06' prior: 50868311!
test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	self
		should: [ aTerniLapilli moveXFrom: 2@2 to: 1@2. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidPositionErrorMessage ]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:27:40'!
moveXFrom: aPosition to: anotherPosition
	self move: playerX from: aPosition to: anotherPosition! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:27:51'!
moveOFrom: aPosition to: anotherPosition
	self move: playerO from: aPosition to: anotherPosition! !

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/1/2020 11:27:58'!
PASSED!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/1/2020 11:28:02'!
PASSED!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:28:59'!
test14ThrowExceptionWhenMovingAPieceToAnInvalidPosition
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	self
		should: [ aTerniLapilli moveXFrom: 1@2 to: 0@2. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidPositionErrorMessage ]! !
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:29:20'!
test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	self
		should: [ aTerniLapilli moveXFrom: 1@2 to: 0@2. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidPositionErrorMessage ]! !

!methodRemoval: TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/1/2020 11:29:20'!
test14ThrowExceptionWhenMovingAPieceToAnInvalidPosition
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	self
		should: [ aTerniLapilli moveXFrom: 1@2 to: 0@2. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidPositionErrorMessage ]!

!testRun: #TerniLapilliTests #test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/1/2020 11:29:30'!
PASSED!

playerX numberOfPiecesOnGame + playerO numberOfPiecesOnGame!

playerO hasPieceAt: aPosition!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:33:19' prior: 50868397!
move: aPlayer from: aPosition to: anotherPosition
	playerX numberOfPiecesOnGame + playerO numberOfPiecesOnGame < 6
		ifTrue: [^Error signal: self class thereArePiecesLeftToPut ].
	((playerX hasPieceAt: anotherPosition) or: [playerO hasPieceAt: anotherPosition])
		ifTrue: [^Error signal: self class notValidPositionErrorMessage ].! !

!testRun: #TerniLapilliTests #test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/1/2020 11:33:33'!
FAILURE!

!testRun: #TerniLapilliTests #test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/1/2020 11:33:33'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:35:30'!
validate: aPosition
	((aPosition x between: 1 and: 3) and: [aPosition y between: 1 and: 3]) not
		ifTrue: [	^Error signal: self class notValidPositionErrorMessage ].
	
	((playerX hasPieceAt: aPosition) or: [playerO hasPieceAt: aPosition])
		ifTrue: [^Error signal: self class notValidPositionErrorMessage ].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:35:49'!
validatePosition: aPosition
	((aPosition x between: 1 and: 3) and: [aPosition y between: 1 and: 3]) not
		ifTrue: [	^Error signal: self class notValidPositionErrorMessage ].
	
	((playerX hasPieceAt: aPosition) or: [playerO hasPieceAt: aPosition])
		ifTrue: [^Error signal: self class notValidPositionErrorMessage ].! !

!methodRemoval: TerniLapilli #validate: stamp: 'RL 11/1/2020 11:35:55'!
validate: aPosition
	((aPosition x between: 1 and: 3) and: [aPosition y between: 1 and: 3]) not
		ifTrue: [	^Error signal: self class notValidPositionErrorMessage ].
	
	((playerX hasPieceAt: aPosition) or: [playerO hasPieceAt: aPosition])
		ifTrue: [^Error signal: self class notValidPositionErrorMessage ].!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:36:18' prior: 50868695!
put: aPlayer at: aPosition
	self validatePosition: aPosition.
	turn validate: aPlayer andAddPieceAt: aPosition.
	self nextTurn.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:36:47' prior: 50868887!
move: aPlayer from: aPosition to: anotherPosition
	playerX numberOfPiecesOnGame + playerO numberOfPiecesOnGame < 6
		ifTrue: [^Error signal: self class thereArePiecesLeftToPut ].
	self validatePosition: anotherPosition.! !

!testRun: #TerniLapilliTests #test01PlayerXStartsGame stamp: 'RL 11/1/2020 11:36:57'!
PASSED!

!testRun: #TerniLapilliTests #test02PlayerXPutAtCorrectPosition stamp: 'RL 11/1/2020 11:36:57'!
PASSED!

!testRun: #TerniLapilliTests #test03ThrowExceptionWhenPlayerPutOnInvalidPosition stamp: 'RL 11/1/2020 11:36:57'!
PASSED!

!testRun: #TerniLapilliTests #test04PlayerOHasSecondTurn stamp: 'RL 11/1/2020 11:36:57'!
PASSED!

!testRun: #TerniLapilliTests #test05PlayerOPutAtCorrectPosition stamp: 'RL 11/1/2020 11:36:57'!
PASSED!

!testRun: #TerniLapilliTests #test06ThrowExceptionWhenPlayerPutAtAnAlreadyTakenPosition stamp: 'RL 11/1/2020 11:36:57'!
PASSED!

!testRun: #TerniLapilliTests #test07ThrowExceptionWhenPlayerPlaysNotInItsTurn stamp: 'RL 11/1/2020 11:36:57'!
PASSED!

!testRun: #TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumn stamp: 'RL 11/1/2020 11:36:57'!
PASSED!

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/1/2020 11:36:57'!
PASSED!

!testRun: #TerniLapilliTests #test10AssertPlayerWinsWithThreeOnFirstRow stamp: 'RL 11/1/2020 11:36:57'!
PASSED!

!testRun: #TerniLapilliTests #test11AssertPlayerWinsWithThreeOn11to33Diagonal stamp: 'RL 11/1/2020 11:36:57'!
PASSED!

!testRun: #TerniLapilliTests #test12AssertPlayerWinsWithThreeOn31to13Diagonal stamp: 'RL 11/1/2020 11:36:57'!
PASSED!

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/1/2020 11:36:57'!
PASSED!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/1/2020 11:36:57'!
PASSED!

!testRun: #TerniLapilliTests #test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/1/2020 11:36:57'!
PASSED!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:46:33'!
test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	self
		should: [ aTerniLapilli moveXFrom: 1@1 to: 3@2. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidPositionErrorMessage ]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:50:03' prior: 50868954!
move: aPlayer from: aPosition to: anotherPosition
	playerX numberOfPiecesOnGame + playerO numberOfPiecesOnGame < 6
		ifTrue: [ ^Error signal: self class thereArePiecesLeftToPut ].
	self validatePosition: anotherPosition.
	(aPlayer hasPieceAt: aPosition) ifFalse: [ ^Error signal: self class notValidPositionErrorMessage ]! !

!testRun: #TerniLapilliTests #test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition stamp: 'RL 11/1/2020 11:50:11'!
PASSED!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:56:50'!
test16MoveCorrectlyAPieceFrom22To21
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	
	aTerniLapilli moveXFrom: 2@2 to: 2@1.
	"self assert: "! !
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:57:15'!
test17MoveCorrectlyAPieceFrom22To21
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	
	aTerniLapilli moveXFrom: 2@2 to: 2@1.
	"self assert: "! !

!methodRemoval: TerniLapilliTests #test16MoveCorrectlyAPieceFrom22To21 stamp: 'RL 11/1/2020 11:57:15'!
test16MoveCorrectlyAPieceFrom22To21
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	
	aTerniLapilli moveXFrom: 2@2 to: 2@1.
	"self assert: "!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 11:58:13' prior: 50869066!
test17MoveCorrectlyAPieceFrom22To21
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	
	aTerniLapilli moveXFrom: 2@2 to: 2@1.
	self deny: (aTerniLapilli isXAt: 2@2).
	self assert: (aTerniLapilli isXAt: 2@1).! !

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom22To21 stamp: 'RL 11/1/2020 11:58:16'!
FAILURE!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom22To21 stamp: 'RL 11/1/2020 11:58:16'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:00:27' prior: 50869036!
move: aPlayer from: aPosition to: anotherPosition
	playerX numberOfPiecesOnGame + playerO numberOfPiecesOnGame < 6
		ifTrue: [ ^Error signal: self class thereArePiecesLeftToPut ].
	self validatePosition: anotherPosition.
	(aPlayer hasPieceAt: aPosition) ifFalse: [ ^Error signal: self class notValidPositionErrorMessage ].
	
	aPlayer moveFrom: aPosition to: anotherPosition.! !
!Player methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:02:00'!
moveFrom: aPosition to: anotherPosition
	pieces remove: aPosition.
	pieces add: anotherPosition.! !

!testRun: #TerniLapilliTests #test01PlayerXStartsGame stamp: 'RL 11/1/2020 12:02:46'!
PASSED!

!testRun: #TerniLapilliTests #test02PlayerXPutAtCorrectPosition stamp: 'RL 11/1/2020 12:02:46'!
PASSED!

!testRun: #TerniLapilliTests #test03ThrowExceptionWhenPlayerPutOnInvalidPosition stamp: 'RL 11/1/2020 12:02:46'!
PASSED!

!testRun: #TerniLapilliTests #test04PlayerOHasSecondTurn stamp: 'RL 11/1/2020 12:02:46'!
PASSED!

!testRun: #TerniLapilliTests #test05PlayerOPutAtCorrectPosition stamp: 'RL 11/1/2020 12:02:46'!
PASSED!

!testRun: #TerniLapilliTests #test06ThrowExceptionWhenPlayerPutAtAnAlreadyTakenPosition stamp: 'RL 11/1/2020 12:02:46'!
PASSED!

!testRun: #TerniLapilliTests #test07ThrowExceptionWhenPlayerPlaysNotInItsTurn stamp: 'RL 11/1/2020 12:02:46'!
PASSED!

!testRun: #TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumn stamp: 'RL 11/1/2020 12:02:46'!
PASSED!

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/1/2020 12:02:46'!
PASSED!

!testRun: #TerniLapilliTests #test10AssertPlayerWinsWithThreeOnFirstRow stamp: 'RL 11/1/2020 12:02:46'!
PASSED!

!testRun: #TerniLapilliTests #test11AssertPlayerWinsWithThreeOn11to33Diagonal stamp: 'RL 11/1/2020 12:02:46'!
PASSED!

!testRun: #TerniLapilliTests #test12AssertPlayerWinsWithThreeOn31to13Diagonal stamp: 'RL 11/1/2020 12:02:46'!
PASSED!

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/1/2020 12:02:46'!
PASSED!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/1/2020 12:02:46'!
PASSED!

!testRun: #TerniLapilliTests #test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/1/2020 12:02:46'!
PASSED!

!testRun: #TerniLapilliTests #test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition stamp: 'RL 11/1/2020 12:02:46'!
PASSED!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom22To21 stamp: 'RL 11/1/2020 12:02:46'!
PASSED!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:05:40'!
test18ThrowExceptionWhenMovingFrom31to33
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	
	aTerniLapilli moveXFrom: 2@2 to: 2@1.
	self deny: (aTerniLapilli isXAt: 2@2).
	self assert: (aTerniLapilli isXAt: 2@1).! !

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom22To21 stamp: 'RL 11/1/2020 12:06:32'!
PASSED!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:06:35'!
test17MoveCorrectlyAPieceFrom31To32
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	
	aTerniLapilli moveXFrom: 3@1 to: 3@2.
	self deny: (aTerniLapilli isXAt: 3@1).
	self assert: (aTerniLapilli isXAt: 3@2).! !

!methodRemoval: TerniLapilliTests #test17MoveCorrectlyAPieceFrom22To21 stamp: 'RL 11/1/2020 12:06:39'!
test17MoveCorrectlyAPieceFrom22To21
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	
	aTerniLapilli moveXFrom: 2@2 to: 2@1.
	self deny: (aTerniLapilli isXAt: 2@2).
	self assert: (aTerniLapilli isXAt: 2@1).!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom31To32 stamp: 'RL 11/1/2020 12:06:43'!
PASSED!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:07:24' prior: 50869198!
test18ThrowExceptionWhenMovingFrom31to33
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	
	self
		should: [ aTerniLapilli moveXFrom: 1@1 to: 3@2. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidPositionErrorMessage ]! !
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:08:00' prior: 50869251!
test18ThrowExceptionWhenMovingFrom31to33
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	
	self
		should: [ aTerniLapilli moveXFrom: 3@1 to: 3@3. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidMoveErrorMessage ]! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:08:33'!
notValidMoveErrorMessage
	^'This move is not valid!!'! !

!methodRemoval: TerniLapilliTests #setUp stamp: 'RL 11/1/2020 12:08:53'!
setUp
	Player initialize.!

1@1 dist: 2@2!

1@1 dist: 2@1!

(1@1) - (2@1)!

(1@1) - (2@2) -1@0 !

(1@1) - (2@2)!

(1@1) eightNeighbors !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:21:36' prior: 50869115!
move: aPlayer from: aPosition to: anotherPosition
	playerX numberOfPiecesOnGame + playerO numberOfPiecesOnGame < 6
		ifTrue: [ ^Error signal: self class thereArePiecesLeftToPut ].
	self validatePosition: anotherPosition.
	(aPlayer hasPieceAt: aPosition) ifFalse: [ ^Error signal: self class notValidPositionErrorMessage ].
	
	(aPosition = 3@1 and: [ anotherPosition = 3@3 ]) ifTrue: [ ^Error signal: self class notValidMoveErrorMessage ].
	
	aPlayer moveFrom: aPosition to: anotherPosition.! !

!testRun: #TerniLapilliTests #test01PlayerXStartsGame stamp: 'RL 11/1/2020 12:21:42'!
PASSED!

!testRun: #TerniLapilliTests #test02PlayerXPutAtCorrectPosition stamp: 'RL 11/1/2020 12:21:42'!
PASSED!

!testRun: #TerniLapilliTests #test03ThrowExceptionWhenPlayerPutOnInvalidPosition stamp: 'RL 11/1/2020 12:21:42'!
PASSED!

!testRun: #TerniLapilliTests #test04PlayerOHasSecondTurn stamp: 'RL 11/1/2020 12:21:42'!
PASSED!

!testRun: #TerniLapilliTests #test05PlayerOPutAtCorrectPosition stamp: 'RL 11/1/2020 12:21:42'!
PASSED!

!testRun: #TerniLapilliTests #test06ThrowExceptionWhenPlayerPutAtAnAlreadyTakenPosition stamp: 'RL 11/1/2020 12:21:42'!
PASSED!

!testRun: #TerniLapilliTests #test07ThrowExceptionWhenPlayerPlaysNotInItsTurn stamp: 'RL 11/1/2020 12:21:42'!
PASSED!

!testRun: #TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumn stamp: 'RL 11/1/2020 12:21:42'!
PASSED!

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/1/2020 12:21:42'!
PASSED!

!testRun: #TerniLapilliTests #test10AssertPlayerWinsWithThreeOnFirstRow stamp: 'RL 11/1/2020 12:21:42'!
PASSED!

!testRun: #TerniLapilliTests #test11AssertPlayerWinsWithThreeOn11to33Diagonal stamp: 'RL 11/1/2020 12:21:42'!
PASSED!

!testRun: #TerniLapilliTests #test12AssertPlayerWinsWithThreeOn31to13Diagonal stamp: 'RL 11/1/2020 12:21:42'!
PASSED!

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/1/2020 12:21:42'!
PASSED!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/1/2020 12:21:42'!
PASSED!

!testRun: #TerniLapilliTests #test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/1/2020 12:21:42'!
PASSED!

!testRun: #TerniLapilliTests #test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition stamp: 'RL 11/1/2020 12:21:42'!
PASSED!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom31To32 stamp: 'RL 11/1/2020 12:21:42'!
ERROR!

!testRun: #TerniLapilliTests #test18ThrowExceptionWhenMovingFrom31to33 stamp: 'RL 11/1/2020 12:21:42'!
FAILURE!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom31To32 stamp: 'RL 11/1/2020 12:21:51'!
ERROR!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom31To32 stamp: 'RL 11/1/2020 12:21:51'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:22:20' prior: 50869298!
move: aPlayer from: aPosition to: anotherPosition
	playerX numberOfPiecesOnGame + playerO numberOfPiecesOnGame < 6
		ifTrue: [ ^Error signal: self class thereArePiecesLeftToPut ].
	self validatePosition: anotherPosition.
	(aPlayer hasPieceAt: aPosition) ifFalse: [ ^Error signal: self class notValidPositionErrorMessage ].
	
	(aPosition = (3@1) and: [ anotherPosition = (3@3) ]) ifTrue: [ ^Error signal: self class notValidMoveErrorMessage ].
	
	aPlayer moveFrom: aPosition to: anotherPosition.! !

!testRun: #TerniLapilliTests #test01PlayerXStartsGame stamp: 'RL 11/1/2020 12:22:25'!
PASSED!

!testRun: #TerniLapilliTests #test02PlayerXPutAtCorrectPosition stamp: 'RL 11/1/2020 12:22:25'!
PASSED!

!testRun: #TerniLapilliTests #test03ThrowExceptionWhenPlayerPutOnInvalidPosition stamp: 'RL 11/1/2020 12:22:25'!
PASSED!

!testRun: #TerniLapilliTests #test04PlayerOHasSecondTurn stamp: 'RL 11/1/2020 12:22:25'!
PASSED!

!testRun: #TerniLapilliTests #test05PlayerOPutAtCorrectPosition stamp: 'RL 11/1/2020 12:22:25'!
PASSED!

!testRun: #TerniLapilliTests #test06ThrowExceptionWhenPlayerPutAtAnAlreadyTakenPosition stamp: 'RL 11/1/2020 12:22:25'!
PASSED!

!testRun: #TerniLapilliTests #test07ThrowExceptionWhenPlayerPlaysNotInItsTurn stamp: 'RL 11/1/2020 12:22:25'!
PASSED!

!testRun: #TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumn stamp: 'RL 11/1/2020 12:22:25'!
PASSED!

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/1/2020 12:22:25'!
PASSED!

!testRun: #TerniLapilliTests #test10AssertPlayerWinsWithThreeOnFirstRow stamp: 'RL 11/1/2020 12:22:25'!
PASSED!

!testRun: #TerniLapilliTests #test11AssertPlayerWinsWithThreeOn11to33Diagonal stamp: 'RL 11/1/2020 12:22:25'!
PASSED!

!testRun: #TerniLapilliTests #test12AssertPlayerWinsWithThreeOn31to13Diagonal stamp: 'RL 11/1/2020 12:22:25'!
PASSED!

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/1/2020 12:22:25'!
PASSED!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/1/2020 12:22:25'!
PASSED!

!testRun: #TerniLapilliTests #test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/1/2020 12:22:25'!
PASSED!

!testRun: #TerniLapilliTests #test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition stamp: 'RL 11/1/2020 12:22:25'!
PASSED!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom31To32 stamp: 'RL 11/1/2020 12:22:25'!
PASSED!

!testRun: #TerniLapilliTests #test18ThrowExceptionWhenMovingFrom31to33 stamp: 'RL 11/1/2020 12:22:25'!
PASSED!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:24:37'!
test18ThrowExceptionWhenMovingFrom13to33
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	
	self
		should: [ aTerniLapilli moveXFrom: 1@3 to: 3@3. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidMoveErrorMessage ]! !
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:24:54'!
test19ThrowExceptionWhenMovingFrom13to33
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	
	self
		should: [ aTerniLapilli moveXFrom: 1@3 to: 3@3. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidMoveErrorMessage ]! !

!methodRemoval: TerniLapilliTests #test18ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/1/2020 12:24:54'!
test18ThrowExceptionWhenMovingFrom13to33
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	
	self
		should: [ aTerniLapilli moveXFrom: 1@3 to: 3@3. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidMoveErrorMessage ]!

!testRun: #TerniLapilliTests #test19ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/1/2020 12:25:02'!
FAILURE!

!testRun: #TerniLapilliTests #test19ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/1/2020 12:25:02'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:26:35' prior: 50869389!
move: aPlayer from: aPosition to: anotherPosition
	playerX numberOfPiecesOnGame + playerO numberOfPiecesOnGame < 6
		ifTrue: [ ^Error signal: self class thereArePiecesLeftToPut ].
	self validatePosition: anotherPosition.
	(aPlayer hasPieceAt: aPosition) ifFalse: [ ^Error signal: self class notValidPositionErrorMessage ].
	
	(aPosition eightNeighbors includes: anotherPosition) ifTrue: [ ^Error signal: self class notValidMoveErrorMessage ].
	
	aPlayer moveFrom: aPosition to: anotherPosition.! !

!testRun: #TerniLapilliTests #test19ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/1/2020 12:26:42'!
FAILURE!

!testRun: #TerniLapilliTests #test19ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/1/2020 12:26:42'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:27:07' prior: 50869532!
move: aPlayer from: aPosition to: anotherPosition
	playerX numberOfPiecesOnGame + playerO numberOfPiecesOnGame < 6
		ifTrue: [ ^Error signal: self class thereArePiecesLeftToPut ].
	self validatePosition: anotherPosition.
	(aPlayer hasPieceAt: aPosition) ifFalse: [ ^Error signal: self class notValidPositionErrorMessage ].
	
	(aPosition eightNeighbors includes: anotherPosition) ifFalse: [ ^Error signal: self class notValidMoveErrorMessage ].
	
	aPlayer moveFrom: aPosition to: anotherPosition.! !

!testRun: #TerniLapilliTests #test01PlayerXStartsGame stamp: 'RL 11/1/2020 12:27:11'!
PASSED!

!testRun: #TerniLapilliTests #test02PlayerXPutAtCorrectPosition stamp: 'RL 11/1/2020 12:27:11'!
PASSED!

!testRun: #TerniLapilliTests #test03ThrowExceptionWhenPlayerPutOnInvalidPosition stamp: 'RL 11/1/2020 12:27:11'!
PASSED!

!testRun: #TerniLapilliTests #test04PlayerOHasSecondTurn stamp: 'RL 11/1/2020 12:27:11'!
PASSED!

!testRun: #TerniLapilliTests #test05PlayerOPutAtCorrectPosition stamp: 'RL 11/1/2020 12:27:12'!
PASSED!

!testRun: #TerniLapilliTests #test06ThrowExceptionWhenPlayerPutAtAnAlreadyTakenPosition stamp: 'RL 11/1/2020 12:27:12'!
PASSED!

!testRun: #TerniLapilliTests #test07ThrowExceptionWhenPlayerPlaysNotInItsTurn stamp: 'RL 11/1/2020 12:27:12'!
PASSED!

!testRun: #TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumn stamp: 'RL 11/1/2020 12:27:12'!
PASSED!

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/1/2020 12:27:12'!
PASSED!

!testRun: #TerniLapilliTests #test10AssertPlayerWinsWithThreeOnFirstRow stamp: 'RL 11/1/2020 12:27:12'!
PASSED!

!testRun: #TerniLapilliTests #test11AssertPlayerWinsWithThreeOn11to33Diagonal stamp: 'RL 11/1/2020 12:27:12'!
PASSED!

!testRun: #TerniLapilliTests #test12AssertPlayerWinsWithThreeOn31to13Diagonal stamp: 'RL 11/1/2020 12:27:12'!
PASSED!

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/1/2020 12:27:12'!
PASSED!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/1/2020 12:27:12'!
PASSED!

!testRun: #TerniLapilliTests #test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/1/2020 12:27:12'!
PASSED!

!testRun: #TerniLapilliTests #test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition stamp: 'RL 11/1/2020 12:27:12'!
PASSED!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom31To32 stamp: 'RL 11/1/2020 12:27:12'!
PASSED!

!testRun: #TerniLapilliTests #test18ThrowExceptionWhenMovingFrom31to33 stamp: 'RL 11/1/2020 12:27:12'!
PASSED!

!testRun: #TerniLapilliTests #test19ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/1/2020 12:27:12'!
PASSED!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:29:39'!
test20ThrowExceptionWhenMovingFrom13to33
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	
	aTerniLapilli moveXFrom: 3@1 to: 3@2.
	
	self
		should: [ aTerniLapilli moveXFrom: 1@2 to: 2@1. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidMoveErrorMessage ]! !
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:30:04'!
test20ThrowExceptionWhenMovingFrom12to21
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	
	aTerniLapilli moveXFrom: 3@1 to: 3@2.
	
	self
		should: [ aTerniLapilli moveXFrom: 1@2 to: 2@1. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidMoveErrorMessage ]! !

!methodRemoval: TerniLapilliTests #test20ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/1/2020 12:30:04'!
test20ThrowExceptionWhenMovingFrom13to33
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	
	aTerniLapilli moveXFrom: 3@1 to: 3@2.
	
	self
		should: [ aTerniLapilli moveXFrom: 1@2 to: 2@1. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidMoveErrorMessage ]!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:30:24' prior: 50869664!
test20ThrowExceptionWhenMovingFrom12to21
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	
	aTerniLapilli moveXFrom: 3@1 to: 3@2.
	
	self
		should: [ aTerniLapilli moveOFrom: 1@2 to: 2@1. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidMoveErrorMessage ]! !

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/1/2020 12:30:30'!
FAILURE!

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/1/2020 12:30:30'!
FAILURE!

Error signal: self class notValidMoveErrorMessage!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:40:04' prior: 50869558!
move: aPlayer from: aPosition to: anotherPosition
	playerX numberOfPiecesOnGame + playerO numberOfPiecesOnGame < 6
		ifTrue: [ ^Error signal: self class thereArePiecesLeftToPut ].
	self validatePosition: anotherPosition.
	(aPlayer hasPieceAt: aPosition) ifFalse: [ ^Error signal: self class notValidPositionErrorMessage ].
	
	(aPosition eightNeighbors includes: anotherPosition) ifFalse: [ ^Error signal: self class notValidMoveErrorMessage ].
	(aPosition = (1@2) and: [ anotherPosition = (2@1) ]) ifTrue: [ ^Error signal: self class notValidMoveErrorMessage ].
	
	aPlayer moveFrom: aPosition to: anotherPosition.! !

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/1/2020 12:40:31'!
PASSED!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:43:22'!
test21ThrowExceptionWhenMovingFrom23to32
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	
	aTerniLapilli moveXFrom: 3@1 to: 2@1.
	
	self
		should: [ aTerniLapilli moveOFrom: 2@3 to: 3@2. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidMoveErrorMessage ]! !

!testRun: #TerniLapilliTests #test21ThrowExceptionWhenMovingFrom23to32 stamp: 'RL 11/1/2020 12:43:27'!
FAILURE!

!testRun: #TerniLapilliTests #test21ThrowExceptionWhenMovingFrom23to32 stamp: 'RL 11/1/2020 12:43:27'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:50:21' prior: 50869730!
move: aPlayer from: aPosition to: anotherPosition
	playerX numberOfPiecesOnGame + playerO numberOfPiecesOnGame < 6
		ifTrue: [ ^Error signal: self class thereArePiecesLeftToPut ].
	self validatePosition: anotherPosition.
	(aPlayer hasPieceAt: aPosition) ifFalse: [ ^Error signal: self class notValidPositionErrorMessage ].
	
	(aPosition x + aPosition y) even
		ifTrue: [(aPosition eightNeighbors includes: anotherPosition) 
			ifFalse: [ ^Error signal: self class notValidMoveErrorMessage ]]
		ifFalse: [(aPosition fourNeighbors includes: anotherPosition) 
			ifFalse: [ ^Error signal: self class notValidMoveErrorMessage ]].
	
	aPlayer moveFrom: aPosition to: anotherPosition.! !

!testRun: #TerniLapilliTests #test01PlayerXStartsGame stamp: 'RL 11/1/2020 12:50:34'!
PASSED!

!testRun: #TerniLapilliTests #test02PlayerXPutAtCorrectPosition stamp: 'RL 11/1/2020 12:50:34'!
PASSED!

!testRun: #TerniLapilliTests #test03ThrowExceptionWhenPlayerPutOnInvalidPosition stamp: 'RL 11/1/2020 12:50:34'!
PASSED!

!testRun: #TerniLapilliTests #test04PlayerOHasSecondTurn stamp: 'RL 11/1/2020 12:50:34'!
PASSED!

!testRun: #TerniLapilliTests #test05PlayerOPutAtCorrectPosition stamp: 'RL 11/1/2020 12:50:34'!
PASSED!

!testRun: #TerniLapilliTests #test06ThrowExceptionWhenPlayerPutAtAnAlreadyTakenPosition stamp: 'RL 11/1/2020 12:50:34'!
PASSED!

!testRun: #TerniLapilliTests #test07ThrowExceptionWhenPlayerPlaysNotInItsTurn stamp: 'RL 11/1/2020 12:50:34'!
PASSED!

!testRun: #TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumn stamp: 'RL 11/1/2020 12:50:34'!
PASSED!

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/1/2020 12:50:34'!
PASSED!

!testRun: #TerniLapilliTests #test10AssertPlayerWinsWithThreeOnFirstRow stamp: 'RL 11/1/2020 12:50:34'!
PASSED!

!testRun: #TerniLapilliTests #test11AssertPlayerWinsWithThreeOn11to33Diagonal stamp: 'RL 11/1/2020 12:50:34'!
PASSED!

!testRun: #TerniLapilliTests #test12AssertPlayerWinsWithThreeOn31to13Diagonal stamp: 'RL 11/1/2020 12:50:34'!
PASSED!

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/1/2020 12:50:34'!
PASSED!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/1/2020 12:50:34'!
PASSED!

!testRun: #TerniLapilliTests #test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/1/2020 12:50:34'!
PASSED!

!testRun: #TerniLapilliTests #test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition stamp: 'RL 11/1/2020 12:50:34'!
PASSED!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom31To32 stamp: 'RL 11/1/2020 12:50:34'!
PASSED!

!testRun: #TerniLapilliTests #test18ThrowExceptionWhenMovingFrom31to33 stamp: 'RL 11/1/2020 12:50:34'!
PASSED!

!testRun: #TerniLapilliTests #test19ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/1/2020 12:50:34'!
PASSED!

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/1/2020 12:50:34'!
PASSED!

!testRun: #TerniLapilliTests #test21ThrowExceptionWhenMovingFrom23to32 stamp: 'RL 11/1/2020 12:50:34'!
PASSED!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:51:22'!
test22ThrowExceptionWhenPlayerMovesNotInItsTurn
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	self
		should: [ aTerniLapilli putOAt: 1@1 ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notPlayersTurn ]
	! !
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:51:46' prior: 50869882!
test22ThrowExceptionWhenPlayerMovesNotInItsTurn
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	
	self
		should: [ aTerniLapilli moveXFrom: 1@3 to: 3@3. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidMoveErrorMessage ]
	! !
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:52:30' prior: 50869894!
test22ThrowExceptionWhenPlayerMovesNotInItsTurn
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	
	self
		should: [ aTerniLapilli moveOFrom: 1@1 to: 2@1. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notPlayersTurn ]
	! !

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/1/2020 12:52:35'!
FAILURE!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/1/2020 12:52:35'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:54:13' prior: 50869782!
move: aPlayer from: aPosition to: anotherPosition
	playerX numberOfPiecesOnGame + playerO numberOfPiecesOnGame < 6
		ifTrue: [ ^Error signal: self class thereArePiecesLeftToPut ].
	self validatePosition: anotherPosition.
	(aPlayer hasPieceAt: aPosition) ifFalse: [ ^Error signal: self class notValidPositionErrorMessage ].
	
	(aPosition x + aPosition y) even
		ifTrue: [(aPosition eightNeighbors includes: anotherPosition) 
			ifFalse: [ ^Error signal: self class notValidMoveErrorMessage ]]
		ifFalse: [(aPosition fourNeighbors includes: anotherPosition) 
			ifFalse: [ ^Error signal: self class notValidMoveErrorMessage ]].
		
	turn validate: aPlayer andMoveFrom: aPosition to: anotherPosition.
	
	"aPlayer moveFrom: aPosition to: anotherPosition."! !
!TerniLapilliPlayerOTurn methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:55:26'!
validate: aPlayer andMoveFrom: aPosition to: anotherPosition
	aPlayer movePieceOnOturnFrom: aPosition to: anotherPosition.! !
!TerniLapilliPlayerXTurn methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:55:45'!
validate: aPlayer andMoveFrom: aPosition to: anotherPosition
	aPlayer movePieceOnXturnFrom: aPosition to: anotherPosition.! !
!PlayerO methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:56:06'!
movePieceOnXturnFrom: aPosition to: anotherPosition
	^Error signal: TerniLapilli notPlayersTurn! !
!PlayerX methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:56:32'!
movePieceOnXturnFrom: aPosition to: anotherPosition
	pieces add: aPosition! !
!Player methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:56:46' prior: 50869130!
moveFrom: aPosition to: anotherPosition
	self subclassResponsibility ! !
!PlayerX methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:57:07' prior: 50869984!
movePieceOnXturnFrom: aPosition to: anotherPosition
	pieces remove: aPosition.
	pieces add: anotherPosition.! !
!PlayerO methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:57:38'!
movePieceOnOturnFrom: aPosition to: anotherPosition
	^Error signal: TerniLapilli notPlayersTurn! !
!PlayerO methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:57:52' prior: 50870002!
movePieceOnOturnFrom: aPosition to: anotherPosition
	pieces remove: aPosition.
	pieces add: anotherPosition.! !
!PlayerX methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 12:58:06'!
movePieceOnOturnFrom: aPosition to: anotherPosition
	^Error signal: TerniLapilli notPlayersTurn! !

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/1/2020 12:58:31'!
PASSED!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 13:09:07'!
test08AssertPlayerWinsWithThreeOnFirstColumnAndGameIsOver
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 1@1.
	aTerniLapilli putOAt: 2@1.
	aTerniLapilli putXAt: 1@2.
	aTerniLapilli putOAt: 2@2.
	aTerniLapilli putXAt: 1@3.
	self assert: aTerniLapilli playerXHasWon.	
	self assert: aTerniLapilli isOver.! !

!methodRemoval: TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumn stamp: 'RL 11/1/2020 13:09:26'!
test08AssertPlayerWinsWithThreeOnFirstColumn
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 1@1.
	aTerniLapilli putOAt: 2@1.
	aTerniLapilli putXAt: 1@2.
	aTerniLapilli putOAt: 2@2.
	aTerniLapilli putXAt: 1@3.
	self assert: aTerniLapilli playerXHasWon.	!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 13:10:48'!
isOver
	^true! !

!testRun: #TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumnAndGameIsOver stamp: 'RL 11/1/2020 13:11:09'!
PASSED!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 13:12:18'!
test08AssertGameIsNotOverIfNoPlayerWon
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 1@1.
	aTerniLapilli putOAt: 2@1.
	aTerniLapilli putXAt: 1@2.
	aTerniLapilli putOAt: 2@2.
	self deny: aTerniLapilli playerXHasWon.	
	self deny: aTerniLapilli playerOHasWon.	
	self deny: aTerniLapilli isOver.! !
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 13:12:45'!
test23AssertGameIsNotOverIfNoPlayerWon
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 1@1.
	aTerniLapilli putOAt: 2@1.
	aTerniLapilli putXAt: 1@2.
	aTerniLapilli putOAt: 2@2.
	self deny: aTerniLapilli playerXHasWon.	
	self deny: aTerniLapilli playerOHasWon.	
	self deny: aTerniLapilli isOver.! !

!methodRemoval: TerniLapilliTests #test08AssertGameIsNotOverIfNoPlayerWon stamp: 'RL 11/1/2020 13:12:45'!
test08AssertGameIsNotOverIfNoPlayerWon
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 1@1.
	aTerniLapilli putOAt: 2@1.
	aTerniLapilli putXAt: 1@2.
	aTerniLapilli putOAt: 2@2.
	self deny: aTerniLapilli playerXHasWon.	
	self deny: aTerniLapilli playerOHasWon.	
	self deny: aTerniLapilli isOver.!

!testRun: #TerniLapilliTests #test23AssertGameIsNotOverIfNoPlayerWon stamp: 'RL 11/1/2020 13:13:16'!
ERROR!

!testRun: #TerniLapilliTests #test23AssertGameIsNotOverIfNoPlayerWon stamp: 'RL 11/1/2020 13:13:16'!
ERROR!

!testRun: #TerniLapilliTests #test23AssertGameIsNotOverIfNoPlayerWon stamp: 'RL 11/1/2020 13:13:28'!
ERROR!

!testRun: #TerniLapilliTests #test23AssertGameIsNotOverIfNoPlayerWon stamp: 'RL 11/1/2020 13:13:28'!
ERROR!
!Player methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 13:15:25' prior: 50867981!
hasWon
	^
	(pieces size = 3) and:
		[((pieces at: 1) x = (pieces at: 2) x and: [(pieces at: 1) x = (pieces at: 3) x])
		or:
		[((pieces at: 1) y = (pieces at: 2) y and: [(pieces at: 1) y = (pieces at: 3) y])]
		or:
		[(pieces includes: 1@1) and: [pieces includes: 2@2] and: [pieces includes: 3@3]]
		or:
		[(pieces includes: 3@1) and: [pieces includes: 2@2] and: [pieces includes: 1@3]]].! !

!testRun: #TerniLapilliTests #test01PlayerXStartsGame stamp: 'RL 11/1/2020 13:15:36'!
PASSED!

!testRun: #TerniLapilliTests #test02PlayerXPutAtCorrectPosition stamp: 'RL 11/1/2020 13:15:36'!
PASSED!

!testRun: #TerniLapilliTests #test03ThrowExceptionWhenPlayerPutOnInvalidPosition stamp: 'RL 11/1/2020 13:15:36'!
PASSED!

!testRun: #TerniLapilliTests #test04PlayerOHasSecondTurn stamp: 'RL 11/1/2020 13:15:36'!
PASSED!

!testRun: #TerniLapilliTests #test05PlayerOPutAtCorrectPosition stamp: 'RL 11/1/2020 13:15:36'!
PASSED!

!testRun: #TerniLapilliTests #test06ThrowExceptionWhenPlayerPutAtAnAlreadyTakenPosition stamp: 'RL 11/1/2020 13:15:36'!
PASSED!

!testRun: #TerniLapilliTests #test07ThrowExceptionWhenPlayerPlaysNotInItsTurn stamp: 'RL 11/1/2020 13:15:36'!
PASSED!

!testRun: #TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumnAndGameIsOver stamp: 'RL 11/1/2020 13:15:36'!
PASSED!

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/1/2020 13:15:36'!
PASSED!

!testRun: #TerniLapilliTests #test10AssertPlayerWinsWithThreeOnFirstRow stamp: 'RL 11/1/2020 13:15:36'!
PASSED!

!testRun: #TerniLapilliTests #test11AssertPlayerWinsWithThreeOn11to33Diagonal stamp: 'RL 11/1/2020 13:15:36'!
PASSED!

!testRun: #TerniLapilliTests #test12AssertPlayerWinsWithThreeOn31to13Diagonal stamp: 'RL 11/1/2020 13:15:36'!
PASSED!

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/1/2020 13:15:36'!
PASSED!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/1/2020 13:15:36'!
PASSED!

!testRun: #TerniLapilliTests #test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/1/2020 13:15:36'!
PASSED!

!testRun: #TerniLapilliTests #test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition stamp: 'RL 11/1/2020 13:15:36'!
PASSED!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom31To32 stamp: 'RL 11/1/2020 13:15:36'!
PASSED!

!testRun: #TerniLapilliTests #test18ThrowExceptionWhenMovingFrom31to33 stamp: 'RL 11/1/2020 13:15:36'!
PASSED!

!testRun: #TerniLapilliTests #test19ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/1/2020 13:15:36'!
PASSED!

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/1/2020 13:15:36'!
PASSED!

!testRun: #TerniLapilliTests #test21ThrowExceptionWhenMovingFrom23to32 stamp: 'RL 11/1/2020 13:15:36'!
PASSED!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/1/2020 13:15:36'!
PASSED!

!testRun: #TerniLapilliTests #test23AssertGameIsNotOverIfNoPlayerWon stamp: 'RL 11/1/2020 13:15:36'!
FAILURE!

!testRun: #TerniLapilliTests #test23AssertGameIsNotOverIfNoPlayerWon stamp: 'RL 11/1/2020 13:15:36'!
FAILURE!

!testRun: #TerniLapilliTests #test23AssertGameIsNotOverIfNoPlayerWon stamp: 'RL 11/1/2020 13:16:04'!
FAILURE!

!testRun: #TerniLapilliTests #test23AssertGameIsNotOverIfNoPlayerWon stamp: 'RL 11/1/2020 13:16:04'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 13:17:09' prior: 50870050!
isOver
	^playerX hasWon or: [ playerO hasWon ].! !

!testRun: #TerniLapilliTests #test01PlayerXStartsGame stamp: 'RL 11/1/2020 13:17:13'!
PASSED!

!testRun: #TerniLapilliTests #test02PlayerXPutAtCorrectPosition stamp: 'RL 11/1/2020 13:17:13'!
PASSED!

!testRun: #TerniLapilliTests #test03ThrowExceptionWhenPlayerPutOnInvalidPosition stamp: 'RL 11/1/2020 13:17:13'!
PASSED!

!testRun: #TerniLapilliTests #test04PlayerOHasSecondTurn stamp: 'RL 11/1/2020 13:17:13'!
PASSED!

!testRun: #TerniLapilliTests #test05PlayerOPutAtCorrectPosition stamp: 'RL 11/1/2020 13:17:13'!
PASSED!

!testRun: #TerniLapilliTests #test06ThrowExceptionWhenPlayerPutAtAnAlreadyTakenPosition stamp: 'RL 11/1/2020 13:17:13'!
PASSED!

!testRun: #TerniLapilliTests #test07ThrowExceptionWhenPlayerPlaysNotInItsTurn stamp: 'RL 11/1/2020 13:17:13'!
PASSED!

!testRun: #TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumnAndGameIsOver stamp: 'RL 11/1/2020 13:17:13'!
PASSED!

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/1/2020 13:17:13'!
PASSED!

!testRun: #TerniLapilliTests #test10AssertPlayerWinsWithThreeOnFirstRow stamp: 'RL 11/1/2020 13:17:13'!
PASSED!

!testRun: #TerniLapilliTests #test11AssertPlayerWinsWithThreeOn11to33Diagonal stamp: 'RL 11/1/2020 13:17:13'!
PASSED!

!testRun: #TerniLapilliTests #test12AssertPlayerWinsWithThreeOn31to13Diagonal stamp: 'RL 11/1/2020 13:17:13'!
PASSED!

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/1/2020 13:17:13'!
PASSED!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/1/2020 13:17:13'!
PASSED!

!testRun: #TerniLapilliTests #test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/1/2020 13:17:13'!
PASSED!

!testRun: #TerniLapilliTests #test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition stamp: 'RL 11/1/2020 13:17:13'!
PASSED!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom31To32 stamp: 'RL 11/1/2020 13:17:13'!
PASSED!

!testRun: #TerniLapilliTests #test18ThrowExceptionWhenMovingFrom31to33 stamp: 'RL 11/1/2020 13:17:13'!
PASSED!

!testRun: #TerniLapilliTests #test19ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/1/2020 13:17:13'!
PASSED!

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/1/2020 13:17:13'!
PASSED!

!testRun: #TerniLapilliTests #test21ThrowExceptionWhenMovingFrom23to32 stamp: 'RL 11/1/2020 13:17:13'!
PASSED!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/1/2020 13:17:13'!
PASSED!

!testRun: #TerniLapilliTests #test23AssertGameIsNotOverIfNoPlayerWon stamp: 'RL 11/1/2020 13:17:13'!
PASSED!

!testRun: #TerniLapilliTests #test23AssertGameIsNotOverIfNoPlayerWon stamp: 'RL 11/1/2020 13:19:27'!
PASSED!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 13:21:25'!
test24ThrowExceptionWhenPuttingPieceWithAlreadyFinishedGame
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 1@1.
	aTerniLapilli putOAt: 2@1.
	aTerniLapilli putXAt: 1@2.
	aTerniLapilli putOAt: 2@2.
	self deny: aTerniLapilli playerXHasWon.	
	self deny: aTerniLapilli playerOHasWon.	
	self deny: aTerniLapilli isOver.! !
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 13:22:42' prior: 50870312!
test24ThrowExceptionWhenPuttingPieceWithAlreadyFinishedGame
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 1@1.
	aTerniLapilli putOAt: 2@1.
	aTerniLapilli putXAt: 1@2.
	aTerniLapilli putOAt: 2@2.
	aTerniLapilli putXAt: 1@3.
	self assert: aTerniLapilli playerXHasWon.	
	self assert: aTerniLapilli isOver.! !
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 13:25:35' prior: 50870327!
test24ThrowExceptionWhenPuttingPieceWithAlreadyFinishedGame
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 1@1.
	aTerniLapilli putOAt: 2@1.
	aTerniLapilli putXAt: 1@2.
	aTerniLapilli putOAt: 2@2.
	aTerniLapilli putXAt: 1@3.
	
	self assert: aTerniLapilli isOver.
	self
		should: [ aTerniLapilli putOAt: 3@1 ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli gameIsOverErrorMessage
			]! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 13:26:00'!
gameIsOverErrorMessage
	^'The game is over!!'! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 13:27:14' prior: 50868946!
put: aPlayer at: aPosition
	self isOver ifTrue: [ self class gameIsOverErrorMessage ].
	self validatePosition: aPosition.
	turn validate: aPlayer andAddPieceAt: aPosition.
	self nextTurn.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 13:27:39' prior: 50870364!
put: aPlayer at: aPosition
	self isOver ifTrue: [ ^Error signal: self class gameIsOverErrorMessage ].
	self validatePosition: aPosition.
	turn validate: aPlayer andAddPieceAt: aPosition.
	self nextTurn.! !

!testRun: #TerniLapilliTests #test24ThrowExceptionWhenPuttingPieceWithAlreadyFinishedGame stamp: 'RL 11/1/2020 13:27:46'!
PASSED!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 13:29:52'!
test25ThrowExceptionWhenMovingPieceWithAlreadyFinishedGame
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 1@1.
	aTerniLapilli putOAt: 2@1.
	aTerniLapilli putXAt: 1@2.
	aTerniLapilli putOAt: 2@2.
	aTerniLapilli putXAt: 3@3.
	aTerniLapilli putOAt: 2@3.
	
	self assert: aTerniLapilli isOver.
	self
		should: [ aTerniLapilli moveXFrom: 3@3 to: 3@2]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli gameIsOverErrorMessage
			]! !

!testRun: #TerniLapilliTests #test25ThrowExceptionWhenMovingPieceWithAlreadyFinishedGame stamp: 'RL 11/1/2020 13:29:55'!
FAILURE!

!testRun: #TerniLapilliTests #test25ThrowExceptionWhenMovingPieceWithAlreadyFinishedGame stamp: 'RL 11/1/2020 13:29:55'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/1/2020 13:30:16' prior: 50869937!
move: aPlayer from: aPosition to: anotherPosition
	self isOver ifTrue: [ ^Error signal: self class gameIsOverErrorMessage ].
	playerX numberOfPiecesOnGame + playerO numberOfPiecesOnGame < 6
		ifTrue: [ ^Error signal: self class thereArePiecesLeftToPut ].
	self validatePosition: anotherPosition.
	(aPlayer hasPieceAt: aPosition) ifFalse: [ ^Error signal: self class notValidPositionErrorMessage ].
	
	(aPosition x + aPosition y) even
		ifTrue: [(aPosition eightNeighbors includes: anotherPosition) 
			ifFalse: [ ^Error signal: self class notValidMoveErrorMessage ]]
		ifFalse: [(aPosition fourNeighbors includes: anotherPosition) 
			ifFalse: [ ^Error signal: self class notValidMoveErrorMessage ]].
		
	turn validate: aPlayer andMoveFrom: aPosition to: anotherPosition.
	
	"aPlayer moveFrom: aPosition to: anotherPosition."! !

!testRun: #TerniLapilliTests #test25ThrowExceptionWhenMovingPieceWithAlreadyFinishedGame stamp: 'RL 11/1/2020 13:30:24'!
PASSED!

----QUIT----(1 November 2020 13:31:04) CuisUniversity-4384.image priorSource: 17177191!

----STARTUP---- (2 November 2020 14:32:35) as /home/rodrigo/cuis-linux64/CuisUniversity-4384.image!


!methodRemoval: Player #addPieceAt: stamp: 'RL 11/2/2020 14:34:54'!
addPieceAt: aPosition 
	pieces add: aPosition.!

!methodRemoval: Player #moveFrom:to: stamp: 'RL 11/2/2020 14:35:10'!
moveFrom: aPosition to: anotherPosition
	self subclassResponsibility !
!Player methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 14:36:01'!
addPieceOnOturnAt: aPosition
	self subclassResponsibility ! !
!Player methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 14:36:14'!
addPieceOnXturnAt: aPosition
	self subclassResponsibility ! !
!Player methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 14:36:27'!
isPlayerTurn: aTurn
	self subclassResponsibility ! !
!Player methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 14:36:43'!
movePieceOnOturnFrom: aPosition to: anotherPosition
	self subclassResponsibility ! !
!Player methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 14:36:47'!
movePieceOnXturnFrom: aPosition to: anotherPosition
	self subclassResponsibility ! !

----End fileIn of /home/rodrigo/cuis-linux64/Packages/TerseGuide.pck.st----!

collect := OrderedCollection with: 1 with: 2 with: 3.!

colaux := OrderedCollection with: 2 with: 3.!

collect includes: colaux .!
!Player methodsFor: 'queries' stamp: 'RL 11/2/2020 14:52:32'!
xxx: position1 yyy: position2
	(pieces includes: position1) and: [pieces includes: 2@2] and: [pieces includes: position2]! !
!Player methodsFor: 'queries' stamp: 'RL 11/2/2020 14:53:47'!
hasWonWithDiagonalFrom: position1 to: position2
	(pieces includes: position1) and: [pieces includes: 2@2] and: [pieces includes: position2]! !

!methodRemoval: Player #xxx:yyy: stamp: 'RL 11/2/2020 14:53:51'!
xxx: position1 yyy: position2
	(pieces includes: position1) and: [pieces includes: 2@2] and: [pieces includes: position2]!
!Player methodsFor: 'queries' stamp: 'RL 11/2/2020 14:54:11' prior: 50873431!
hasWonWithDiagonalFrom: position1 to: position2
	^(pieces includes: position1) and: [pieces includes: 2@2] and: [pieces includes: position2].! !
!Player methodsFor: 'queries' stamp: 'RL 11/2/2020 15:03:25'!
hasWonWithLineInAxis: anAxisAsSymbol
	^((pieces at: 1) perform: anAxisAsSymbol) = ((pieces at: 2) perform: anAxisAsSymbol)
	and:
	[ ((pieces at: 1) perform: anAxisAsSymbol) = ((pieces at: 3) perform: anAxisAsSymbol) ].! !
!Player methodsFor: 'queries' stamp: 'RL 11/2/2020 15:08:13'!
firstPieceIsAlignedOver: anAxisAsSymbol with: aPieceIndex
	^((pieces at: 1) perform: anAxisAsSymbol) = ((pieces at: aPieceIndex) perform: anAxisAsSymbol)! !
!Player methodsFor: 'queries' stamp: 'RL 11/2/2020 15:09:05' prior: 50873451!
hasWonWithLineInAxis: anAxisAsSymbol
	^(self firstPieceIsAlignedOver: anAxisAsSymbol with: 2)
	and:
	[ self firstPieceIsAlignedOver: anAxisAsSymbol with: 3 ].! !
!Player methodsFor: 'queries' stamp: 'RL 11/2/2020 15:12:31' prior: 50870112!
hasWon
	^
	(pieces size = 3) and:
		[(self hasWonWithLineInAxis: #x)
		or:
		[ self hasWonWithLineInAxis: #y]
		or:
		[ self hasWonWithDiagonalFrom: 1@1 to: 3@3 ]
		or:
		[ self hasWonWithDiagonalFrom: 3@1 to: 1@3 ]].! !

!testRun: #TerniLapilliTests #test01PlayerXStartsGame stamp: 'RL 11/2/2020 15:12:35'!
PASSED!

!testRun: #TerniLapilliTests #test02PlayerXPutAtCorrectPosition stamp: 'RL 11/2/2020 15:12:35'!
PASSED!

!testRun: #TerniLapilliTests #test03ThrowExceptionWhenPlayerPutOnInvalidPosition stamp: 'RL 11/2/2020 15:12:35'!
PASSED!

!testRun: #TerniLapilliTests #test04PlayerOHasSecondTurn stamp: 'RL 11/2/2020 15:12:35'!
PASSED!

!testRun: #TerniLapilliTests #test05PlayerOPutAtCorrectPosition stamp: 'RL 11/2/2020 15:12:35'!
PASSED!

!testRun: #TerniLapilliTests #test06ThrowExceptionWhenPlayerPutAtAnAlreadyTakenPosition stamp: 'RL 11/2/2020 15:12:35'!
PASSED!

!testRun: #TerniLapilliTests #test07ThrowExceptionWhenPlayerPlaysNotInItsTurn stamp: 'RL 11/2/2020 15:12:35'!
PASSED!

!testRun: #TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumnAndGameIsOver stamp: 'RL 11/2/2020 15:12:35'!
PASSED!

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/2/2020 15:12:35'!
PASSED!

!testRun: #TerniLapilliTests #test10AssertPlayerWinsWithThreeOnFirstRow stamp: 'RL 11/2/2020 15:12:35'!
PASSED!

!testRun: #TerniLapilliTests #test11AssertPlayerWinsWithThreeOn11to33Diagonal stamp: 'RL 11/2/2020 15:12:35'!
PASSED!

!testRun: #TerniLapilliTests #test12AssertPlayerWinsWithThreeOn31to13Diagonal stamp: 'RL 11/2/2020 15:12:35'!
PASSED!

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/2/2020 15:12:35'!
FAILURE!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/2/2020 15:12:35'!
ERROR!

!testRun: #TerniLapilliTests #test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/2/2020 15:12:35'!
ERROR!

!testRun: #TerniLapilliTests #test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition stamp: 'RL 11/2/2020 15:12:35'!
ERROR!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom31To32 stamp: 'RL 11/2/2020 15:12:35'!
ERROR!

!testRun: #TerniLapilliTests #test18ThrowExceptionWhenMovingFrom31to33 stamp: 'RL 11/2/2020 15:12:35'!
ERROR!

!testRun: #TerniLapilliTests #test19ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/2/2020 15:12:35'!
ERROR!

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/2/2020 15:12:35'!
ERROR!

!testRun: #TerniLapilliTests #test21ThrowExceptionWhenMovingFrom23to32 stamp: 'RL 11/2/2020 15:12:35'!
ERROR!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:12:35'!
ERROR!

!testRun: #TerniLapilliTests #test23AssertGameIsNotOverIfNoPlayerWon stamp: 'RL 11/2/2020 15:12:35'!
PASSED!

!testRun: #TerniLapilliTests #test24ThrowExceptionWhenPuttingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 15:12:35'!
PASSED!

!testRun: #TerniLapilliTests #test25ThrowExceptionWhenMovingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 15:12:35'!
PASSED!

!testRun: #TerniLapilliTests #test01PlayerXStartsGame stamp: 'RL 11/2/2020 15:13:19'!
PASSED!

!testRun: #TerniLapilliTests #test02PlayerXPutAtCorrectPosition stamp: 'RL 11/2/2020 15:13:19'!
PASSED!

!testRun: #TerniLapilliTests #test03ThrowExceptionWhenPlayerPutOnInvalidPosition stamp: 'RL 11/2/2020 15:13:19'!
PASSED!

!testRun: #TerniLapilliTests #test04PlayerOHasSecondTurn stamp: 'RL 11/2/2020 15:13:19'!
PASSED!

!testRun: #TerniLapilliTests #test05PlayerOPutAtCorrectPosition stamp: 'RL 11/2/2020 15:13:19'!
PASSED!

!testRun: #TerniLapilliTests #test06ThrowExceptionWhenPlayerPutAtAnAlreadyTakenPosition stamp: 'RL 11/2/2020 15:13:19'!
PASSED!

!testRun: #TerniLapilliTests #test07ThrowExceptionWhenPlayerPlaysNotInItsTurn stamp: 'RL 11/2/2020 15:13:19'!
PASSED!

!testRun: #TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumnAndGameIsOver stamp: 'RL 11/2/2020 15:13:19'!
PASSED!

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/2/2020 15:13:19'!
PASSED!

!testRun: #TerniLapilliTests #test10AssertPlayerWinsWithThreeOnFirstRow stamp: 'RL 11/2/2020 15:13:19'!
PASSED!

!testRun: #TerniLapilliTests #test11AssertPlayerWinsWithThreeOn11to33Diagonal stamp: 'RL 11/2/2020 15:13:19'!
PASSED!

!testRun: #TerniLapilliTests #test12AssertPlayerWinsWithThreeOn31to13Diagonal stamp: 'RL 11/2/2020 15:13:19'!
PASSED!

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/2/2020 15:13:19'!
FAILURE!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/2/2020 15:13:19'!
ERROR!

!testRun: #TerniLapilliTests #test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/2/2020 15:13:19'!
ERROR!

!testRun: #TerniLapilliTests #test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition stamp: 'RL 11/2/2020 15:13:19'!
ERROR!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom31To32 stamp: 'RL 11/2/2020 15:13:19'!
ERROR!

!testRun: #TerniLapilliTests #test18ThrowExceptionWhenMovingFrom31to33 stamp: 'RL 11/2/2020 15:13:19'!
ERROR!

!testRun: #TerniLapilliTests #test19ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/2/2020 15:13:19'!
ERROR!

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/2/2020 15:13:19'!
ERROR!

!testRun: #TerniLapilliTests #test21ThrowExceptionWhenMovingFrom23to32 stamp: 'RL 11/2/2020 15:13:19'!
ERROR!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:13:19'!
ERROR!

!testRun: #TerniLapilliTests #test23AssertGameIsNotOverIfNoPlayerWon stamp: 'RL 11/2/2020 15:13:19'!
PASSED!

!testRun: #TerniLapilliTests #test24ThrowExceptionWhenPuttingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 15:13:19'!
PASSED!

!testRun: #TerniLapilliTests #test25ThrowExceptionWhenMovingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 15:13:19'!
PASSED!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/2/2020 15:13:43'!
ERROR!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/2/2020 15:13:43'!
ERROR!

!testRun: #TerniLapilliTests #test01PlayerXStartsGame stamp: 'RL 11/2/2020 15:17:24'!
PASSED!

!testRun: #TerniLapilliTests #test02PlayerXPutAtCorrectPosition stamp: 'RL 11/2/2020 15:17:24'!
PASSED!

!testRun: #TerniLapilliTests #test03ThrowExceptionWhenPlayerPutOnInvalidPosition stamp: 'RL 11/2/2020 15:17:24'!
PASSED!

!testRun: #TerniLapilliTests #test04PlayerOHasSecondTurn stamp: 'RL 11/2/2020 15:17:24'!
PASSED!

!testRun: #TerniLapilliTests #test05PlayerOPutAtCorrectPosition stamp: 'RL 11/2/2020 15:17:24'!
PASSED!

!testRun: #TerniLapilliTests #test06ThrowExceptionWhenPlayerPutAtAnAlreadyTakenPosition stamp: 'RL 11/2/2020 15:17:24'!
PASSED!

!testRun: #TerniLapilliTests #test07ThrowExceptionWhenPlayerPlaysNotInItsTurn stamp: 'RL 11/2/2020 15:17:24'!
PASSED!

!testRun: #TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumnAndGameIsOver stamp: 'RL 11/2/2020 15:17:24'!
PASSED!

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/2/2020 15:17:24'!
PASSED!

!testRun: #TerniLapilliTests #test10AssertPlayerWinsWithThreeOnFirstRow stamp: 'RL 11/2/2020 15:17:24'!
PASSED!

!testRun: #TerniLapilliTests #test11AssertPlayerWinsWithThreeOn11to33Diagonal stamp: 'RL 11/2/2020 15:17:24'!
PASSED!

!testRun: #TerniLapilliTests #test12AssertPlayerWinsWithThreeOn31to13Diagonal stamp: 'RL 11/2/2020 15:17:24'!
PASSED!

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/2/2020 15:17:24'!
FAILURE!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/2/2020 15:17:24'!
ERROR!

!testRun: #TerniLapilliTests #test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/2/2020 15:17:24'!
ERROR!

!testRun: #TerniLapilliTests #test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition stamp: 'RL 11/2/2020 15:17:24'!
ERROR!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom31To32 stamp: 'RL 11/2/2020 15:17:24'!
ERROR!

!testRun: #TerniLapilliTests #test18ThrowExceptionWhenMovingFrom31to33 stamp: 'RL 11/2/2020 15:17:24'!
ERROR!

!testRun: #TerniLapilliTests #test19ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/2/2020 15:17:24'!
ERROR!

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/2/2020 15:17:24'!
ERROR!

!testRun: #TerniLapilliTests #test21ThrowExceptionWhenMovingFrom23to32 stamp: 'RL 11/2/2020 15:17:24'!
ERROR!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:17:24'!
ERROR!

!testRun: #TerniLapilliTests #test23AssertGameIsNotOverIfNoPlayerWon stamp: 'RL 11/2/2020 15:17:24'!
PASSED!

!testRun: #TerniLapilliTests #test24ThrowExceptionWhenPuttingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 15:17:24'!
PASSED!

!testRun: #TerniLapilliTests #test25ThrowExceptionWhenMovingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 15:17:24'!
PASSED!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/2/2020 15:18:11'!
ERROR!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/2/2020 15:18:11'!
ERROR!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 15:18:14' prior: 50868787!
test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 3@2.
	aTerniLapilli putOAt: 1@1.	
	self
		should: [ aTerniLapilli moveXFrom: 2@2 to: 1@2. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidPositionErrorMessage ]! !

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/2/2020 15:18:18'!
PASSED!

!testRun: #TerniLapilliTests #test01PlayerXStartsGame stamp: 'RL 11/2/2020 15:18:24'!
PASSED!

!testRun: #TerniLapilliTests #test02PlayerXPutAtCorrectPosition stamp: 'RL 11/2/2020 15:18:24'!
PASSED!

!testRun: #TerniLapilliTests #test03ThrowExceptionWhenPlayerPutOnInvalidPosition stamp: 'RL 11/2/2020 15:18:24'!
PASSED!

!testRun: #TerniLapilliTests #test04PlayerOHasSecondTurn stamp: 'RL 11/2/2020 15:18:24'!
PASSED!

!testRun: #TerniLapilliTests #test05PlayerOPutAtCorrectPosition stamp: 'RL 11/2/2020 15:18:24'!
PASSED!

!testRun: #TerniLapilliTests #test06ThrowExceptionWhenPlayerPutAtAnAlreadyTakenPosition stamp: 'RL 11/2/2020 15:18:24'!
PASSED!

!testRun: #TerniLapilliTests #test07ThrowExceptionWhenPlayerPlaysNotInItsTurn stamp: 'RL 11/2/2020 15:18:24'!
PASSED!

!testRun: #TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumnAndGameIsOver stamp: 'RL 11/2/2020 15:18:24'!
PASSED!

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/2/2020 15:18:24'!
PASSED!

!testRun: #TerniLapilliTests #test10AssertPlayerWinsWithThreeOnFirstRow stamp: 'RL 11/2/2020 15:18:24'!
PASSED!

!testRun: #TerniLapilliTests #test11AssertPlayerWinsWithThreeOn11to33Diagonal stamp: 'RL 11/2/2020 15:18:24'!
PASSED!

!testRun: #TerniLapilliTests #test12AssertPlayerWinsWithThreeOn31to13Diagonal stamp: 'RL 11/2/2020 15:18:24'!
PASSED!

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/2/2020 15:18:24'!
FAILURE!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/2/2020 15:18:24'!
PASSED!

!testRun: #TerniLapilliTests #test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/2/2020 15:18:24'!
ERROR!

!testRun: #TerniLapilliTests #test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition stamp: 'RL 11/2/2020 15:18:24'!
ERROR!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom31To32 stamp: 'RL 11/2/2020 15:18:24'!
ERROR!

!testRun: #TerniLapilliTests #test18ThrowExceptionWhenMovingFrom31to33 stamp: 'RL 11/2/2020 15:18:24'!
ERROR!

!testRun: #TerniLapilliTests #test19ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/2/2020 15:18:24'!
ERROR!

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/2/2020 15:18:24'!
ERROR!

!testRun: #TerniLapilliTests #test21ThrowExceptionWhenMovingFrom23to32 stamp: 'RL 11/2/2020 15:18:24'!
ERROR!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:18:24'!
ERROR!

!testRun: #TerniLapilliTests #test23AssertGameIsNotOverIfNoPlayerWon stamp: 'RL 11/2/2020 15:18:24'!
PASSED!

!testRun: #TerniLapilliTests #test24ThrowExceptionWhenPuttingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 15:18:24'!
PASSED!

!testRun: #TerniLapilliTests #test25ThrowExceptionWhenMovingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 15:18:24'!
PASSED!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 15:19:05' prior: 50868843!
test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 3@2.
	aTerniLapilli putOAt: 1@1.	
	self
		should: [ aTerniLapilli moveXFrom: 1@2 to: 0@2. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidPositionErrorMessage ]! !

!testRun: #TerniLapilliTests #test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/2/2020 15:19:07'!
PASSED!

!testRun: #TerniLapilliTests #test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition stamp: 'RL 11/2/2020 15:19:11'!
ERROR!

!testRun: #TerniLapilliTests #test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition stamp: 'RL 11/2/2020 15:19:11'!
ERROR!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 15:19:41' prior: 50869018!
test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 2@1.
	aTerniLapilli putOAt: 1@1.	
	self
		should: [ aTerniLapilli moveXFrom: 1@1 to: 3@2. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidPositionErrorMessage ]! !

!testRun: #TerniLapilliTests #test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition stamp: 'RL 11/2/2020 15:19:45'!
PASSED!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 15:19:55' prior: 50873890!
test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 2@1.
	aTerniLapilli putOAt: 1@1.	
	self
		should: [ aTerniLapilli moveXFrom: 1@2 to: 0@2. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidPositionErrorMessage ]! !
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 15:20:08' prior: 50873776!
test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 2@1.
	aTerniLapilli putOAt: 1@1.	
	self
		should: [ aTerniLapilli moveXFrom: 2@2 to: 1@2. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidPositionErrorMessage ]! !

!testRun: #TerniLapilliTests #test01PlayerXStartsGame stamp: 'RL 11/2/2020 15:20:13'!
PASSED!

!testRun: #TerniLapilliTests #test02PlayerXPutAtCorrectPosition stamp: 'RL 11/2/2020 15:20:13'!
PASSED!

!testRun: #TerniLapilliTests #test03ThrowExceptionWhenPlayerPutOnInvalidPosition stamp: 'RL 11/2/2020 15:20:13'!
PASSED!

!testRun: #TerniLapilliTests #test04PlayerOHasSecondTurn stamp: 'RL 11/2/2020 15:20:13'!
PASSED!

!testRun: #TerniLapilliTests #test05PlayerOPutAtCorrectPosition stamp: 'RL 11/2/2020 15:20:13'!
PASSED!

!testRun: #TerniLapilliTests #test06ThrowExceptionWhenPlayerPutAtAnAlreadyTakenPosition stamp: 'RL 11/2/2020 15:20:13'!
PASSED!

!testRun: #TerniLapilliTests #test07ThrowExceptionWhenPlayerPlaysNotInItsTurn stamp: 'RL 11/2/2020 15:20:13'!
PASSED!

!testRun: #TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumnAndGameIsOver stamp: 'RL 11/2/2020 15:20:13'!
PASSED!

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/2/2020 15:20:13'!
PASSED!

!testRun: #TerniLapilliTests #test10AssertPlayerWinsWithThreeOnFirstRow stamp: 'RL 11/2/2020 15:20:13'!
PASSED!

!testRun: #TerniLapilliTests #test11AssertPlayerWinsWithThreeOn11to33Diagonal stamp: 'RL 11/2/2020 15:20:13'!
PASSED!

!testRun: #TerniLapilliTests #test12AssertPlayerWinsWithThreeOn31to13Diagonal stamp: 'RL 11/2/2020 15:20:13'!
PASSED!

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/2/2020 15:20:13'!
FAILURE!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/2/2020 15:20:13'!
PASSED!

!testRun: #TerniLapilliTests #test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/2/2020 15:20:13'!
PASSED!

!testRun: #TerniLapilliTests #test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition stamp: 'RL 11/2/2020 15:20:13'!
PASSED!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom31To32 stamp: 'RL 11/2/2020 15:20:13'!
ERROR!

!testRun: #TerniLapilliTests #test18ThrowExceptionWhenMovingFrom31to33 stamp: 'RL 11/2/2020 15:20:13'!
ERROR!

!testRun: #TerniLapilliTests #test19ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/2/2020 15:20:13'!
ERROR!

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/2/2020 15:20:13'!
ERROR!

!testRun: #TerniLapilliTests #test21ThrowExceptionWhenMovingFrom23to32 stamp: 'RL 11/2/2020 15:20:13'!
ERROR!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:20:13'!
ERROR!

!testRun: #TerniLapilliTests #test23AssertGameIsNotOverIfNoPlayerWon stamp: 'RL 11/2/2020 15:20:13'!
PASSED!

!testRun: #TerniLapilliTests #test24ThrowExceptionWhenPuttingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 15:20:13'!
PASSED!

!testRun: #TerniLapilliTests #test25ThrowExceptionWhenMovingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 15:20:13'!
PASSED!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom31To32 stamp: 'RL 11/2/2020 15:20:25'!
ERROR!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom31To32 stamp: 'RL 11/2/2020 15:20:25'!
ERROR!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 15:20:45' prior: 50869217!
test17MoveCorrectlyAPieceFrom31To32
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 2@1.
	aTerniLapilli putOAt: 1@1.	
	
	aTerniLapilli moveXFrom: 3@1 to: 3@2.
	self deny: (aTerniLapilli isXAt: 3@1).
	self assert: (aTerniLapilli isXAt: 3@2).! !
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 15:20:54' prior: 50869269!
test18ThrowExceptionWhenMovingFrom31to33
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 2@1.
	aTerniLapilli putOAt: 1@1.	
	
	self
		should: [ aTerniLapilli moveXFrom: 3@1 to: 3@3. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidMoveErrorMessage ]! !

!testRun: #TerniLapilliTests #test01PlayerXStartsGame stamp: 'RL 11/2/2020 15:21:14'!
PASSED!

!testRun: #TerniLapilliTests #test02PlayerXPutAtCorrectPosition stamp: 'RL 11/2/2020 15:21:14'!
PASSED!

!testRun: #TerniLapilliTests #test03ThrowExceptionWhenPlayerPutOnInvalidPosition stamp: 'RL 11/2/2020 15:21:14'!
PASSED!

!testRun: #TerniLapilliTests #test04PlayerOHasSecondTurn stamp: 'RL 11/2/2020 15:21:14'!
PASSED!

!testRun: #TerniLapilliTests #test05PlayerOPutAtCorrectPosition stamp: 'RL 11/2/2020 15:21:14'!
PASSED!

!testRun: #TerniLapilliTests #test06ThrowExceptionWhenPlayerPutAtAnAlreadyTakenPosition stamp: 'RL 11/2/2020 15:21:14'!
PASSED!

!testRun: #TerniLapilliTests #test07ThrowExceptionWhenPlayerPlaysNotInItsTurn stamp: 'RL 11/2/2020 15:21:14'!
PASSED!

!testRun: #TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumnAndGameIsOver stamp: 'RL 11/2/2020 15:21:14'!
PASSED!

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/2/2020 15:21:14'!
PASSED!

!testRun: #TerniLapilliTests #test10AssertPlayerWinsWithThreeOnFirstRow stamp: 'RL 11/2/2020 15:21:14'!
PASSED!

!testRun: #TerniLapilliTests #test11AssertPlayerWinsWithThreeOn11to33Diagonal stamp: 'RL 11/2/2020 15:21:14'!
PASSED!

!testRun: #TerniLapilliTests #test12AssertPlayerWinsWithThreeOn31to13Diagonal stamp: 'RL 11/2/2020 15:21:14'!
PASSED!

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/2/2020 15:21:14'!
FAILURE!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/2/2020 15:21:14'!
PASSED!

!testRun: #TerniLapilliTests #test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/2/2020 15:21:14'!
PASSED!

!testRun: #TerniLapilliTests #test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition stamp: 'RL 11/2/2020 15:21:14'!
PASSED!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom31To32 stamp: 'RL 11/2/2020 15:21:14'!
PASSED!

!testRun: #TerniLapilliTests #test18ThrowExceptionWhenMovingFrom31to33 stamp: 'RL 11/2/2020 15:21:14'!
PASSED!

!testRun: #TerniLapilliTests #test19ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/2/2020 15:21:14'!
ERROR!

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/2/2020 15:21:14'!
ERROR!

!testRun: #TerniLapilliTests #test21ThrowExceptionWhenMovingFrom23to32 stamp: 'RL 11/2/2020 15:21:14'!
ERROR!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:21:14'!
ERROR!

!testRun: #TerniLapilliTests #test23AssertGameIsNotOverIfNoPlayerWon stamp: 'RL 11/2/2020 15:21:14'!
PASSED!

!testRun: #TerniLapilliTests #test24ThrowExceptionWhenPuttingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 15:21:14'!
PASSED!

!testRun: #TerniLapilliTests #test25ThrowExceptionWhenMovingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 15:21:14'!
PASSED!

!testRun: #TerniLapilliTests #test01PlayerXStartsGame stamp: 'RL 11/2/2020 15:24:09'!
PASSED!

!testRun: #TerniLapilliTests #test02PlayerXPutAtCorrectPosition stamp: 'RL 11/2/2020 15:24:09'!
PASSED!

!testRun: #TerniLapilliTests #test03ThrowExceptionWhenPlayerPutOnInvalidPosition stamp: 'RL 11/2/2020 15:24:09'!
PASSED!

!testRun: #TerniLapilliTests #test04PlayerOHasSecondTurn stamp: 'RL 11/2/2020 15:24:09'!
PASSED!

!testRun: #TerniLapilliTests #test05PlayerOPutAtCorrectPosition stamp: 'RL 11/2/2020 15:24:09'!
PASSED!

!testRun: #TerniLapilliTests #test06ThrowExceptionWhenPlayerPutAtAnAlreadyTakenPosition stamp: 'RL 11/2/2020 15:24:09'!
PASSED!

!testRun: #TerniLapilliTests #test07ThrowExceptionWhenPlayerPlaysNotInItsTurn stamp: 'RL 11/2/2020 15:24:09'!
PASSED!

!testRun: #TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumnAndGameIsOver stamp: 'RL 11/2/2020 15:24:09'!
PASSED!

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/2/2020 15:24:09'!
PASSED!

!testRun: #TerniLapilliTests #test10AssertPlayerWinsWithThreeOnFirstRow stamp: 'RL 11/2/2020 15:24:09'!
PASSED!

!testRun: #TerniLapilliTests #test11AssertPlayerWinsWithThreeOn11to33Diagonal stamp: 'RL 11/2/2020 15:24:09'!
PASSED!

!testRun: #TerniLapilliTests #test12AssertPlayerWinsWithThreeOn31to13Diagonal stamp: 'RL 11/2/2020 15:24:09'!
PASSED!

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/2/2020 15:24:09'!
FAILURE!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/2/2020 15:24:09'!
PASSED!

!testRun: #TerniLapilliTests #test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/2/2020 15:24:09'!
PASSED!

!testRun: #TerniLapilliTests #test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition stamp: 'RL 11/2/2020 15:24:09'!
PASSED!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom31To32 stamp: 'RL 11/2/2020 15:24:09'!
PASSED!

!testRun: #TerniLapilliTests #test18ThrowExceptionWhenMovingFrom31to33 stamp: 'RL 11/2/2020 15:24:09'!
PASSED!

!testRun: #TerniLapilliTests #test19ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/2/2020 15:24:09'!
ERROR!

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/2/2020 15:24:09'!
ERROR!

!testRun: #TerniLapilliTests #test21ThrowExceptionWhenMovingFrom23to32 stamp: 'RL 11/2/2020 15:24:09'!
ERROR!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:24:09'!
ERROR!

!testRun: #TerniLapilliTests #test23AssertGameIsNotOverIfNoPlayerWon stamp: 'RL 11/2/2020 15:24:09'!
PASSED!

!testRun: #TerniLapilliTests #test24ThrowExceptionWhenPuttingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 15:24:09'!
PASSED!

!testRun: #TerniLapilliTests #test25ThrowExceptionWhenMovingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 15:24:09'!
PASSED!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 15:24:15' prior: 50869490!
test19ThrowExceptionWhenMovingFrom13to33
	"| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	
	self
		should: [ aTerniLapilli moveXFrom: 1@3 to: 3@3. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidMoveErrorMessage ]"! !

!testRun: #TerniLapilliTests #test19ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/2/2020 15:24:18'!
PASSED!

!testRun: #TerniLapilliTests #test01PlayerXStartsGame stamp: 'RL 11/2/2020 15:24:23'!
PASSED!

!testRun: #TerniLapilliTests #test02PlayerXPutAtCorrectPosition stamp: 'RL 11/2/2020 15:24:23'!
PASSED!

!testRun: #TerniLapilliTests #test03ThrowExceptionWhenPlayerPutOnInvalidPosition stamp: 'RL 11/2/2020 15:24:23'!
PASSED!

!testRun: #TerniLapilliTests #test04PlayerOHasSecondTurn stamp: 'RL 11/2/2020 15:24:23'!
PASSED!

!testRun: #TerniLapilliTests #test05PlayerOPutAtCorrectPosition stamp: 'RL 11/2/2020 15:24:23'!
PASSED!

!testRun: #TerniLapilliTests #test06ThrowExceptionWhenPlayerPutAtAnAlreadyTakenPosition stamp: 'RL 11/2/2020 15:24:23'!
PASSED!

!testRun: #TerniLapilliTests #test07ThrowExceptionWhenPlayerPlaysNotInItsTurn stamp: 'RL 11/2/2020 15:24:23'!
PASSED!

!testRun: #TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumnAndGameIsOver stamp: 'RL 11/2/2020 15:24:23'!
PASSED!

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/2/2020 15:24:23'!
PASSED!

!testRun: #TerniLapilliTests #test10AssertPlayerWinsWithThreeOnFirstRow stamp: 'RL 11/2/2020 15:24:23'!
PASSED!

!testRun: #TerniLapilliTests #test11AssertPlayerWinsWithThreeOn11to33Diagonal stamp: 'RL 11/2/2020 15:24:23'!
PASSED!

!testRun: #TerniLapilliTests #test12AssertPlayerWinsWithThreeOn31to13Diagonal stamp: 'RL 11/2/2020 15:24:23'!
PASSED!

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/2/2020 15:24:23'!
FAILURE!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/2/2020 15:24:23'!
PASSED!

!testRun: #TerniLapilliTests #test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/2/2020 15:24:23'!
PASSED!

!testRun: #TerniLapilliTests #test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition stamp: 'RL 11/2/2020 15:24:23'!
PASSED!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom31To32 stamp: 'RL 11/2/2020 15:24:23'!
PASSED!

!testRun: #TerniLapilliTests #test18ThrowExceptionWhenMovingFrom31to33 stamp: 'RL 11/2/2020 15:24:23'!
PASSED!

!testRun: #TerniLapilliTests #test19ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/2/2020 15:24:23'!
PASSED!

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/2/2020 15:24:23'!
ERROR!

!testRun: #TerniLapilliTests #test21ThrowExceptionWhenMovingFrom23to32 stamp: 'RL 11/2/2020 15:24:23'!
ERROR!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:24:23'!
ERROR!

!testRun: #TerniLapilliTests #test23AssertGameIsNotOverIfNoPlayerWon stamp: 'RL 11/2/2020 15:24:23'!
PASSED!

!testRun: #TerniLapilliTests #test24ThrowExceptionWhenPuttingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 15:24:23'!
PASSED!

!testRun: #TerniLapilliTests #test25ThrowExceptionWhenMovingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 15:24:23'!
PASSED!

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/2/2020 15:24:37'!
FAILURE!

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/2/2020 15:24:37'!
FAILURE!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 15:25:22' prior: 50868770!
test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 2@1.
	self
		should: [ aTerniLapilli moveOFrom: 2@3 to: 3@3. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli thereArePiecesLeftToPut ]! !

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/2/2020 15:25:25'!
PASSED!

!testRun: #TerniLapilliTests #test01PlayerXStartsGame stamp: 'RL 11/2/2020 15:25:29'!
PASSED!

!testRun: #TerniLapilliTests #test02PlayerXPutAtCorrectPosition stamp: 'RL 11/2/2020 15:25:29'!
PASSED!

!testRun: #TerniLapilliTests #test03ThrowExceptionWhenPlayerPutOnInvalidPosition stamp: 'RL 11/2/2020 15:25:29'!
PASSED!

!testRun: #TerniLapilliTests #test04PlayerOHasSecondTurn stamp: 'RL 11/2/2020 15:25:29'!
PASSED!

!testRun: #TerniLapilliTests #test05PlayerOPutAtCorrectPosition stamp: 'RL 11/2/2020 15:25:29'!
PASSED!

!testRun: #TerniLapilliTests #test06ThrowExceptionWhenPlayerPutAtAnAlreadyTakenPosition stamp: 'RL 11/2/2020 15:25:29'!
PASSED!

!testRun: #TerniLapilliTests #test07ThrowExceptionWhenPlayerPlaysNotInItsTurn stamp: 'RL 11/2/2020 15:25:29'!
PASSED!

!testRun: #TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumnAndGameIsOver stamp: 'RL 11/2/2020 15:25:29'!
PASSED!

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/2/2020 15:25:29'!
PASSED!

!testRun: #TerniLapilliTests #test10AssertPlayerWinsWithThreeOnFirstRow stamp: 'RL 11/2/2020 15:25:29'!
PASSED!

!testRun: #TerniLapilliTests #test11AssertPlayerWinsWithThreeOn11to33Diagonal stamp: 'RL 11/2/2020 15:25:29'!
PASSED!

!testRun: #TerniLapilliTests #test12AssertPlayerWinsWithThreeOn31to13Diagonal stamp: 'RL 11/2/2020 15:25:29'!
PASSED!

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/2/2020 15:25:29'!
PASSED!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/2/2020 15:25:29'!
PASSED!

!testRun: #TerniLapilliTests #test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/2/2020 15:25:29'!
PASSED!

!testRun: #TerniLapilliTests #test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition stamp: 'RL 11/2/2020 15:25:29'!
PASSED!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom31To32 stamp: 'RL 11/2/2020 15:25:29'!
PASSED!

!testRun: #TerniLapilliTests #test18ThrowExceptionWhenMovingFrom31to33 stamp: 'RL 11/2/2020 15:25:29'!
PASSED!

!testRun: #TerniLapilliTests #test19ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/2/2020 15:25:29'!
PASSED!

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/2/2020 15:25:29'!
ERROR!

!testRun: #TerniLapilliTests #test21ThrowExceptionWhenMovingFrom23to32 stamp: 'RL 11/2/2020 15:25:29'!
ERROR!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:25:29'!
ERROR!

!testRun: #TerniLapilliTests #test23AssertGameIsNotOverIfNoPlayerWon stamp: 'RL 11/2/2020 15:25:29'!
PASSED!

!testRun: #TerniLapilliTests #test24ThrowExceptionWhenPuttingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 15:25:29'!
PASSED!

!testRun: #TerniLapilliTests #test25ThrowExceptionWhenMovingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 15:25:29'!
PASSED!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 15:25:51' prior: 50869702!
test20ThrowExceptionWhenMovingFrom12to21
	"| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	
	aTerniLapilli moveXFrom: 3@1 to: 3@2.
	
	self
		should: [ aTerniLapilli moveOFrom: 1@2 to: 2@1. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidMoveErrorMessage ]"! !
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 15:26:00' prior: 50869756!
test21ThrowExceptionWhenMovingFrom23to32
	"| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	
	aTerniLapilli moveXFrom: 3@1 to: 2@1.
	
	self
		should: [ aTerniLapilli moveOFrom: 2@3 to: 3@2. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidMoveErrorMessage ]"! !

!testRun: #TerniLapilliTests #test19ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/2/2020 15:32:54'!
PASSED!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 15:32:59' prior: 50874294!
test19ThrowExceptionWhenMovingFrom13to33
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@1.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	
	self
		should: [ aTerniLapilli moveXFrom: 1@3 to: 3@3. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidMoveErrorMessage ]! !

!testRun: #TerniLapilliTests #test19ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/2/2020 15:33:03'!
PASSED!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 15:33:23' prior: 50874528!
test20ThrowExceptionWhenMovingFrom12to21
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	
	aTerniLapilli moveXFrom: 3@1 to: 3@2.
	
	self
		should: [ aTerniLapilli moveOFrom: 1@2 to: 2@1. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidMoveErrorMessage ]! !

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/2/2020 15:33:26'!
ERROR!

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/2/2020 15:33:26'!
ERROR!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 15:35:45' prior: 50874591!
test20ThrowExceptionWhenMovingFrom12to21
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@1.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	
	aTerniLapilli moveXFrom: 2@1 to: 3@2.
	
	self
		should: [ aTerniLapilli moveOFrom: 1@2 to: 2@1. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidMoveErrorMessage ]! !

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/2/2020 15:35:50'!
ERROR!

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/2/2020 15:35:50'!
ERROR!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 15:39:06' prior: 50874617!
test20ThrowExceptionWhenMovingFrom12to21
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@1.
	aTerniLapilli putOAt: 3@1.	
	
	aTerniLapilli moveXFrom: 3@1 to: 3@2.
	
	self
		should: [ aTerniLapilli moveOFrom: 1@2 to: 2@1. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidMoveErrorMessage ]! !

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/2/2020 15:39:16'!
ERROR!

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/2/2020 15:39:16'!
ERROR!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 15:40:04' prior: 50874643!
test20ThrowExceptionWhenMovingFrom12to21
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@1.
	aTerniLapilli putOAt: 3@3.	
	
	aTerniLapilli moveXFrom: 3@1 to: 3@2.
	
	self
		should: [ aTerniLapilli moveOFrom: 1@2 to: 2@1. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidMoveErrorMessage ]! !

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/2/2020 15:40:07'!
PASSED!

!testRun: #TerniLapilliTests #test21ThrowExceptionWhenMovingFrom23to32 stamp: 'RL 11/2/2020 15:40:32'!
PASSED!

!testRun: #TerniLapilliTests #test01PlayerXStartsGame stamp: 'RL 11/2/2020 15:40:37'!
PASSED!

!testRun: #TerniLapilliTests #test02PlayerXPutAtCorrectPosition stamp: 'RL 11/2/2020 15:40:37'!
PASSED!

!testRun: #TerniLapilliTests #test03ThrowExceptionWhenPlayerPutOnInvalidPosition stamp: 'RL 11/2/2020 15:40:37'!
PASSED!

!testRun: #TerniLapilliTests #test04PlayerOHasSecondTurn stamp: 'RL 11/2/2020 15:40:37'!
PASSED!

!testRun: #TerniLapilliTests #test05PlayerOPutAtCorrectPosition stamp: 'RL 11/2/2020 15:40:37'!
PASSED!

!testRun: #TerniLapilliTests #test06ThrowExceptionWhenPlayerPutAtAnAlreadyTakenPosition stamp: 'RL 11/2/2020 15:40:37'!
PASSED!

!testRun: #TerniLapilliTests #test07ThrowExceptionWhenPlayerPlaysNotInItsTurn stamp: 'RL 11/2/2020 15:40:37'!
PASSED!

!testRun: #TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumnAndGameIsOver stamp: 'RL 11/2/2020 15:40:37'!
PASSED!

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/2/2020 15:40:37'!
PASSED!

!testRun: #TerniLapilliTests #test10AssertPlayerWinsWithThreeOnFirstRow stamp: 'RL 11/2/2020 15:40:37'!
PASSED!

!testRun: #TerniLapilliTests #test11AssertPlayerWinsWithThreeOn11to33Diagonal stamp: 'RL 11/2/2020 15:40:37'!
PASSED!

!testRun: #TerniLapilliTests #test12AssertPlayerWinsWithThreeOn31to13Diagonal stamp: 'RL 11/2/2020 15:40:37'!
PASSED!

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/2/2020 15:40:37'!
PASSED!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/2/2020 15:40:37'!
PASSED!

!testRun: #TerniLapilliTests #test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/2/2020 15:40:37'!
PASSED!

!testRun: #TerniLapilliTests #test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition stamp: 'RL 11/2/2020 15:40:37'!
PASSED!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom31To32 stamp: 'RL 11/2/2020 15:40:37'!
PASSED!

!testRun: #TerniLapilliTests #test18ThrowExceptionWhenMovingFrom31to33 stamp: 'RL 11/2/2020 15:40:37'!
PASSED!

!testRun: #TerniLapilliTests #test19ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/2/2020 15:40:37'!
PASSED!

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/2/2020 15:40:37'!
PASSED!

!testRun: #TerniLapilliTests #test21ThrowExceptionWhenMovingFrom23to32 stamp: 'RL 11/2/2020 15:40:37'!
PASSED!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:40:37'!
ERROR!

!testRun: #TerniLapilliTests #test23AssertGameIsNotOverIfNoPlayerWon stamp: 'RL 11/2/2020 15:40:37'!
PASSED!

!testRun: #TerniLapilliTests #test24ThrowExceptionWhenPuttingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 15:40:37'!
PASSED!

!testRun: #TerniLapilliTests #test25ThrowExceptionWhenMovingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 15:40:37'!
PASSED!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:40:37'!
ERROR!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:40:51'!
ERROR!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:40:51'!
ERROR!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 15:41:32' prior: 50869912!
test22ThrowExceptionWhenPlayerMovesNotInItsTurn
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 1@3.
	aTerniLapilli putXAt: 2@3.
	aTerniLapilli putOAt: 1@1.	
	
	self
		should: [ aTerniLapilli moveOFrom: 1@1 to: 2@1. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notPlayersTurn ]
	! !

!testRun: #TerniLapilliTests #test01PlayerXStartsGame stamp: 'RL 11/2/2020 15:41:35'!
PASSED!

!testRun: #TerniLapilliTests #test02PlayerXPutAtCorrectPosition stamp: 'RL 11/2/2020 15:41:35'!
PASSED!

!testRun: #TerniLapilliTests #test03ThrowExceptionWhenPlayerPutOnInvalidPosition stamp: 'RL 11/2/2020 15:41:35'!
PASSED!

!testRun: #TerniLapilliTests #test04PlayerOHasSecondTurn stamp: 'RL 11/2/2020 15:41:35'!
PASSED!

!testRun: #TerniLapilliTests #test05PlayerOPutAtCorrectPosition stamp: 'RL 11/2/2020 15:41:35'!
PASSED!

!testRun: #TerniLapilliTests #test06ThrowExceptionWhenPlayerPutAtAnAlreadyTakenPosition stamp: 'RL 11/2/2020 15:41:35'!
PASSED!

!testRun: #TerniLapilliTests #test07ThrowExceptionWhenPlayerPlaysNotInItsTurn stamp: 'RL 11/2/2020 15:41:35'!
PASSED!

!testRun: #TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumnAndGameIsOver stamp: 'RL 11/2/2020 15:41:35'!
PASSED!

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/2/2020 15:41:35'!
PASSED!

!testRun: #TerniLapilliTests #test10AssertPlayerWinsWithThreeOnFirstRow stamp: 'RL 11/2/2020 15:41:35'!
PASSED!

!testRun: #TerniLapilliTests #test11AssertPlayerWinsWithThreeOn11to33Diagonal stamp: 'RL 11/2/2020 15:41:35'!
PASSED!

!testRun: #TerniLapilliTests #test12AssertPlayerWinsWithThreeOn31to13Diagonal stamp: 'RL 11/2/2020 15:41:35'!
PASSED!

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/2/2020 15:41:35'!
PASSED!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/2/2020 15:41:35'!
PASSED!

!testRun: #TerniLapilliTests #test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/2/2020 15:41:35'!
PASSED!

!testRun: #TerniLapilliTests #test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition stamp: 'RL 11/2/2020 15:41:35'!
PASSED!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom31To32 stamp: 'RL 11/2/2020 15:41:35'!
PASSED!

!testRun: #TerniLapilliTests #test18ThrowExceptionWhenMovingFrom31to33 stamp: 'RL 11/2/2020 15:41:35'!
PASSED!

!testRun: #TerniLapilliTests #test19ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/2/2020 15:41:35'!
PASSED!

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/2/2020 15:41:35'!
PASSED!

!testRun: #TerniLapilliTests #test21ThrowExceptionWhenMovingFrom23to32 stamp: 'RL 11/2/2020 15:41:35'!
PASSED!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:41:35'!
FAILURE!

!testRun: #TerniLapilliTests #test23AssertGameIsNotOverIfNoPlayerWon stamp: 'RL 11/2/2020 15:41:35'!
PASSED!

!testRun: #TerniLapilliTests #test24ThrowExceptionWhenPuttingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 15:41:35'!
PASSED!

!testRun: #TerniLapilliTests #test25ThrowExceptionWhenMovingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 15:41:35'!
PASSED!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:41:35'!
FAILURE!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:41:50'!
FAILURE!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:41:50'!
FAILURE!

aTerniLapilli moveOFrom: 1@1 to: 2@1.!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:42:13'!
FAILURE!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:42:13'!
FAILURE!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 15:42:58' prior: 50874798!
test22ThrowExceptionWhenPlayerMovesNotInItsTurn
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 1@3.
	aTerniLapilli putXAt: 2@3.
	aTerniLapilli putOAt: 3@2.	
	
	self
		should: [ aTerniLapilli moveOFrom: 1@1 to: 2@1. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notPlayersTurn ]
	! !

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:43:00'!
FAILURE!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:43:00'!
FAILURE!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:43:15'!
FAILURE!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:43:15'!
FAILURE!

aTerniLapilli moveOFrom: 1@1 to: 2@1. !

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:43:45'!
FAILURE!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:43:45'!
FAILURE!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:45:49'!
FAILURE!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:45:49'!
FAILURE!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 15:46:25' prior: 50874927!
test22ThrowExceptionWhenPlayerMovesNotInItsTurn
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 1@3.
	aTerniLapilli putXAt: 2@3.
	aTerniLapilli putOAt: 1@1.	
	
	self
		should: [ aTerniLapilli moveOFrom: 1@1 to: 2@1. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notPlayersTurn ]
	! !

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:46:31'!
FAILURE!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:46:31'!
FAILURE!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 15:46:53' prior: 50874976!
test22ThrowExceptionWhenPlayerMovesNotInItsTurn
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	
	self
		should: [ aTerniLapilli moveOFrom: 1@1 to: 2@1. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notPlayersTurn ]
	! !

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:46:55'!
ERROR!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:46:55'!
ERROR!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 15:47:29' prior: 50875001!
test22ThrowExceptionWhenPlayerMovesNotInItsTurn
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 1@2.
	aTerniLapilli putOAt: 3@1.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 1@3.
	aTerniLapilli putXAt: 2@3.
	aTerniLapilli putOAt: 1@1.	
	
	self
		should: [ aTerniLapilli moveOFrom: 1@1 to: 2@1. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notPlayersTurn ]
	! !

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:47:31'!
PASSED!

!testRun: #TerniLapilliTests #test01PlayerXStartsGame stamp: 'RL 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTests #test02PlayerXPutAtCorrectPosition stamp: 'RL 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTests #test03ThrowExceptionWhenPlayerPutOnInvalidPosition stamp: 'RL 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTests #test04PlayerOHasSecondTurn stamp: 'RL 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTests #test05PlayerOPutAtCorrectPosition stamp: 'RL 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTests #test06ThrowExceptionWhenPlayerPutAtAnAlreadyTakenPosition stamp: 'RL 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTests #test07ThrowExceptionWhenPlayerPlaysNotInItsTurn stamp: 'RL 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumnAndGameIsOver stamp: 'RL 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTests #test10AssertPlayerWinsWithThreeOnFirstRow stamp: 'RL 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTests #test11AssertPlayerWinsWithThreeOn11to33Diagonal stamp: 'RL 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTests #test12AssertPlayerWinsWithThreeOn31to13Diagonal stamp: 'RL 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTests #test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTests #test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition stamp: 'RL 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom31To32 stamp: 'RL 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTests #test18ThrowExceptionWhenMovingFrom31to33 stamp: 'RL 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTests #test19ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTests #test21ThrowExceptionWhenMovingFrom23to32 stamp: 'RL 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTests #test23AssertGameIsNotOverIfNoPlayerWon stamp: 'RL 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTests #test24ThrowExceptionWhenPuttingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 15:47:36'!
PASSED!

!testRun: #TerniLapilliTests #test25ThrowExceptionWhenMovingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 15:47:36'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 15:55:47'!
checkIf: destination isNeighbourOf: origin with: numberOfNeighboursAsSymbol 
	((origin perform: numberOfNeighboursAsSymbol) includes: destination) 
		ifFalse: [ ^Error signal: self class notValidMoveErrorMessage ]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 15:57:25' prior: 50870415!
move: aPlayer from: aPosition to: anotherPosition
	self isOver ifTrue: [ ^Error signal: self class gameIsOverErrorMessage ].
	playerX numberOfPiecesOnGame + playerO numberOfPiecesOnGame < 6
		ifTrue: [ ^Error signal: self class thereArePiecesLeftToPut ].
	self validatePosition: anotherPosition.
	(aPlayer hasPieceAt: aPosition) ifFalse: [ ^Error signal: self class notValidPositionErrorMessage ].
	
	(aPosition x + aPosition y) even
		ifTrue: [self checkIf: anotherPosition isNeighbourOf: aPosition with: #eightNeighbors ]
		ifFalse: [self checkIf: anotherPosition isNeighbourOf: aPosition with: #fourNeighbors].
		
	turn validate: aPlayer andMoveFrom: aPosition to: anotherPosition.
	
	"aPlayer moveFrom: aPosition to: anotherPosition."! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 15:57:35' prior: 50875148!
move: aPlayer from: aPosition to: anotherPosition
	self isOver ifTrue: [ ^Error signal: self class gameIsOverErrorMessage ].
	playerX numberOfPiecesOnGame + playerO numberOfPiecesOnGame < 6
		ifTrue: [ ^Error signal: self class thereArePiecesLeftToPut ].
	self validatePosition: anotherPosition.
	(aPlayer hasPieceAt: aPosition) ifFalse: [ ^Error signal: self class notValidPositionErrorMessage ].
	
	(aPosition x + aPosition y) even
		ifTrue: [self checkIf: anotherPosition isNeighbourOf: aPosition with: #eightNeighbors ]
		ifFalse: [self checkIf: anotherPosition isNeighbourOf: aPosition with: #fourNeighbors].
		
	turn validate: aPlayer andMoveFrom: aPosition to: anotherPosition.! !

!testRun: #TerniLapilliTests #test01PlayerXStartsGame stamp: 'RL 11/2/2020 15:58:09'!
PASSED!

!testRun: #TerniLapilliTests #test02PlayerXPutAtCorrectPosition stamp: 'RL 11/2/2020 15:58:09'!
PASSED!

!testRun: #TerniLapilliTests #test03ThrowExceptionWhenPlayerPutOnInvalidPosition stamp: 'RL 11/2/2020 15:58:09'!
PASSED!

!testRun: #TerniLapilliTests #test04PlayerOHasSecondTurn stamp: 'RL 11/2/2020 15:58:09'!
PASSED!

!testRun: #TerniLapilliTests #test05PlayerOPutAtCorrectPosition stamp: 'RL 11/2/2020 15:58:09'!
PASSED!

!testRun: #TerniLapilliTests #test06ThrowExceptionWhenPlayerPutAtAnAlreadyTakenPosition stamp: 'RL 11/2/2020 15:58:09'!
PASSED!

!testRun: #TerniLapilliTests #test07ThrowExceptionWhenPlayerPlaysNotInItsTurn stamp: 'RL 11/2/2020 15:58:09'!
PASSED!

!testRun: #TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumnAndGameIsOver stamp: 'RL 11/2/2020 15:58:09'!
PASSED!

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/2/2020 15:58:09'!
PASSED!

!testRun: #TerniLapilliTests #test10AssertPlayerWinsWithThreeOnFirstRow stamp: 'RL 11/2/2020 15:58:09'!
PASSED!

!testRun: #TerniLapilliTests #test11AssertPlayerWinsWithThreeOn11to33Diagonal stamp: 'RL 11/2/2020 15:58:09'!
PASSED!

!testRun: #TerniLapilliTests #test12AssertPlayerWinsWithThreeOn31to13Diagonal stamp: 'RL 11/2/2020 15:58:09'!
PASSED!

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/2/2020 15:58:09'!
PASSED!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/2/2020 15:58:09'!
PASSED!

!testRun: #TerniLapilliTests #test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/2/2020 15:58:09'!
PASSED!

!testRun: #TerniLapilliTests #test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition stamp: 'RL 11/2/2020 15:58:09'!
PASSED!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom31To32 stamp: 'RL 11/2/2020 15:58:09'!
PASSED!

!testRun: #TerniLapilliTests #test18ThrowExceptionWhenMovingFrom31to33 stamp: 'RL 11/2/2020 15:58:09'!
PASSED!

!testRun: #TerniLapilliTests #test19ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/2/2020 15:58:09'!
PASSED!

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/2/2020 15:58:09'!
PASSED!

!testRun: #TerniLapilliTests #test21ThrowExceptionWhenMovingFrom23to32 stamp: 'RL 11/2/2020 15:58:09'!
PASSED!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 15:58:09'!
PASSED!

!testRun: #TerniLapilliTests #test23AssertGameIsNotOverIfNoPlayerWon stamp: 'RL 11/2/2020 15:58:09'!
PASSED!

!testRun: #TerniLapilliTests #test24ThrowExceptionWhenPuttingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 15:58:09'!
PASSED!

!testRun: #TerniLapilliTests #test25ThrowExceptionWhenMovingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 15:58:09'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 15:58:25' prior: 50875175!
move: aPlayer from: aPosition to: anotherPosition
	self isOver ifTrue: [ ^Error signal: self class gameIsOverErrorMessage ].
	
	playerX numberOfPiecesOnGame + playerO numberOfPiecesOnGame < 6
		ifTrue: [ ^Error signal: self class thereArePiecesLeftToPut ].
		
	self validatePosition: anotherPosition.
	
	(aPlayer hasPieceAt: aPosition) ifFalse: [ ^Error signal: self class notValidPositionErrorMessage ].
	
	(aPosition x + aPosition y) even
		ifTrue: [self checkIf: anotherPosition isNeighbourOf: aPosition with: #eightNeighbors ]
		ifFalse: [self checkIf: anotherPosition isNeighbourOf: aPosition with: #fourNeighbors].
		
	turn validate: aPlayer andMoveFrom: aPosition to: anotherPosition.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 15:59:59'!
arePiecesLeftToPut
	^playerX numberOfPiecesOnGame + playerO numberOfPiecesOnGame < 6! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 16:01:29' prior: 50875291!
move: aPlayer from: aPosition to: anotherPosition
	self isOver ifTrue: [ ^Error signal: self class gameIsOverErrorMessage ].
	
	self arePiecesLeftToPut 	ifTrue: [ ^Error signal: self class thereArePiecesLeftToPut ].
		
	self validatePosition: anotherPosition.
	
	(aPlayer hasPieceAt: aPosition) ifFalse: [ ^Error signal: self class notValidPositionErrorMessage ].
	
	(aPosition x + aPosition y) even
		ifTrue: [self checkIf: anotherPosition isNeighbourOf: aPosition with: #eightNeighbors ]
		ifFalse: [self checkIf: anotherPosition isNeighbourOf: aPosition with: #fourNeighbors].
		
	turn validate: aPlayer andMoveFrom: aPosition to: anotherPosition.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 16:05:23' prior: 50868921!
validatePosition: aPosition
	(((aPosition x between: 1 and: 3) and: [aPosition y between: 1 and: 3] not)
	or:	
	[(playerX hasPieceAt: aPosition) or: [playerO hasPieceAt: aPosition]])
	ifTrue: 
	[^Error signal: self class notValidPositionErrorMessage ].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 16:07:07'!
validPositionOnTerniLapilliGrid: aPosition
	^(aPosition x between: 1 and: 3) and: [aPosition y between: 1 and: 3]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 16:08:39'!
isPositionTaken: aPosition
	^(playerX hasPieceAt: aPosition) or: [playerO hasPieceAt: aPosition]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 16:10:00' prior: 50875346!
validatePosition: aPosition
	((self validPositionOnTerniLapilliGrid: aPosition) not
	or:	
	[self isPositionTaken: aPosition])
	ifTrue: 
	[^Error signal: self class notValidPositionErrorMessage ].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 16:14:44' prior: 50875322!
move: aPlayer from: aPosition to: anotherPosition
	self isOver ifTrue: [ ^Error signal: self class gameIsOverErrorMessage ].
	
	self arePiecesLeftToPut 	ifTrue: [ ^Error signal: self class thereArePiecesLeftToPut ].
		
	(aPlayer hasPieceAt: aPosition) ifFalse: [ ^Error signal: self class notValidPositionErrorMessage ].
	
	self validatePosition: anotherPosition.
	
	(aPosition x + aPosition y) even
		ifTrue: [self checkIf: anotherPosition isNeighbourOf: aPosition with: #eightNeighbors ]
		ifFalse: [self checkIf: anotherPosition isNeighbourOf: aPosition with: #fourNeighbors].
	
	self validateTerniLapilliConditionsFor: aPlayer movingFrom: aPosition.
		
	turn validate: aPlayer andMoveFrom: aPosition to: anotherPosition.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 16:15:03' prior: 50875381!
move: aPlayer from: aPosition to: anotherPosition
	
	
	self validatePosition: anotherPosition.
	
	(aPosition x + aPosition y) even
		ifTrue: [self checkIf: anotherPosition isNeighbourOf: aPosition with: #eightNeighbors ]
		ifFalse: [self checkIf: anotherPosition isNeighbourOf: aPosition with: #fourNeighbors].
	
	self validateTerniLapilliConditionsFor: aPlayer movingFrom: aPosition.
		
	turn validate: aPlayer andMoveFrom: aPosition to: anotherPosition.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 16:15:35'!
validateTerniLapilliConditionsFor: aPlayer movingFrom: aPosition.
	self isOver ifTrue: [ ^Error signal: self class gameIsOverErrorMessage ].
	self arePiecesLeftToPut 	ifTrue: [ ^Error signal: self class thereArePiecesLeftToPut ].
	(aPlayer hasPieceAt: aPosition) ifFalse: [ ^Error signal: self class notValidPositionErrorMessage ].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 16:16:50' prior: 50875407!
move: aPlayer from: aPosition to: anotherPosition
	self validateTerniLapilliConditionsFor: aPlayer movingFrom: aPosition.
	
	self validatePosition: anotherPosition.
	
	(aPosition x + aPosition y) even
		ifTrue: [self checkIf: anotherPosition isNeighbourOf: aPosition with: #eightNeighbors ]
		ifFalse: [self checkIf: anotherPosition isNeighbourOf: aPosition with: #fourNeighbors].
		
	turn validate: aPlayer andMoveFrom: aPosition to: anotherPosition.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 16:17:40'!
validateMoveFrom: anotherPosition to: aPosition
	(aPosition x + aPosition y) even
		ifTrue: [self checkIf: anotherPosition isNeighbourOf: aPosition with: #eightNeighbors ]
		ifFalse: [self checkIf: anotherPosition isNeighbourOf: aPosition with: #fourNeighbors].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 16:18:15' prior: 50875455!
validateMoveFrom: destination to: aPosition
	(aPosition x + aPosition y) even
		"ifTrue: [self checkIf: anotherPosition isNeighbourOf: aPosition with: #eightNeighbors ]
		ifFalse: [self checkIf: anotherPosition isNeighbourOf: aPosition with: #fourNeighbors]."! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 16:19:18' prior: 50875467!
validateMoveFrom: origin to: destination
	(origin x + origin y) even
		ifTrue: [self checkIf: destination isNeighbourOf: origin with: #eightNeighbors ]
		ifFalse: [self checkIf: destination isNeighbourOf: origin with: #fourNeighbors].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 16:20:11' prior: 50875438!
move: aPlayer from: aPosition to: anotherPosition
	self validateTerniLapilliConditionsFor: aPlayer movingFrom: aPosition.
	self validatePosition: anotherPosition.
	self validateMoveFrom: aPosition to: anotherPosition.
	turn validate: aPlayer andMoveFrom: aPosition to: anotherPosition.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 16:20:55' prior: 50875490!
move: aPlayer from: aPosition to: anotherPosition
	self validateTerniLapilliConditionsFor: aPlayer movingFrom: aPosition.
	self validatePosition: anotherPosition.
	self validateMoveFrom: aPosition to: anotherPosition.
	turn validate: aPlayer andMoveFrom: aPosition to: anotherPosition.
	! !
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 16:22:21' prior: 50874547!
test21ThrowExceptionWhenMovingFrom23to32
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	
	aTerniLapilli moveXFrom: 3@1 to: 2@1.
	
	self
		should: [ aTerniLapilli moveOFrom: 2@3 to: 3@2. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidMoveErrorMessage ]! !

!testRun: #TerniLapilliTests #test21ThrowExceptionWhenMovingFrom23to32 stamp: 'RL 11/2/2020 16:22:24'!
ERROR!

!testRun: #TerniLapilliTests #test21ThrowExceptionWhenMovingFrom23to32 stamp: 'RL 11/2/2020 16:22:24'!
ERROR!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 16:23:24' prior: 50875516!
test21ThrowExceptionWhenMovingFrom23to32
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 2@2.
	aTerniLapilli putXAt: 1@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 1@3.
	aTerniLapilli putOAt: 1@1.	
	
	aTerniLapilli moveXFrom: 3@1 to: 2@1.
	
	self
		should: [ aTerniLapilli moveOFrom: 2@3 to: 3@2. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: anError messageText = TerniLapilli notValidMoveErrorMessage ]! !

!testRun: #TerniLapilliTests #test01PlayerXStartsGame stamp: 'RL 11/2/2020 16:23:33'!
PASSED!

!testRun: #TerniLapilliTests #test02PlayerXPutAtCorrectPosition stamp: 'RL 11/2/2020 16:23:33'!
PASSED!

!testRun: #TerniLapilliTests #test03ThrowExceptionWhenPlayerPutOnInvalidPosition stamp: 'RL 11/2/2020 16:23:33'!
PASSED!

!testRun: #TerniLapilliTests #test04PlayerOHasSecondTurn stamp: 'RL 11/2/2020 16:23:33'!
PASSED!

!testRun: #TerniLapilliTests #test05PlayerOPutAtCorrectPosition stamp: 'RL 11/2/2020 16:23:33'!
PASSED!

!testRun: #TerniLapilliTests #test06ThrowExceptionWhenPlayerPutAtAnAlreadyTakenPosition stamp: 'RL 11/2/2020 16:23:33'!
PASSED!

!testRun: #TerniLapilliTests #test07ThrowExceptionWhenPlayerPlaysNotInItsTurn stamp: 'RL 11/2/2020 16:23:33'!
PASSED!

!testRun: #TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumnAndGameIsOver stamp: 'RL 11/2/2020 16:23:33'!
PASSED!

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/2/2020 16:23:33'!
PASSED!

!testRun: #TerniLapilliTests #test10AssertPlayerWinsWithThreeOnFirstRow stamp: 'RL 11/2/2020 16:23:33'!
PASSED!

!testRun: #TerniLapilliTests #test11AssertPlayerWinsWithThreeOn11to33Diagonal stamp: 'RL 11/2/2020 16:23:33'!
PASSED!

!testRun: #TerniLapilliTests #test12AssertPlayerWinsWithThreeOn31to13Diagonal stamp: 'RL 11/2/2020 16:23:33'!
PASSED!

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/2/2020 16:23:33'!
PASSED!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/2/2020 16:23:33'!
PASSED!

!testRun: #TerniLapilliTests #test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/2/2020 16:23:33'!
PASSED!

!testRun: #TerniLapilliTests #test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition stamp: 'RL 11/2/2020 16:23:33'!
PASSED!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom31To32 stamp: 'RL 11/2/2020 16:23:33'!
PASSED!

!testRun: #TerniLapilliTests #test18ThrowExceptionWhenMovingFrom31to33 stamp: 'RL 11/2/2020 16:23:33'!
PASSED!

!testRun: #TerniLapilliTests #test19ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/2/2020 16:23:33'!
PASSED!

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/2/2020 16:23:33'!
PASSED!

!testRun: #TerniLapilliTests #test21ThrowExceptionWhenMovingFrom23to32 stamp: 'RL 11/2/2020 16:23:33'!
PASSED!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 16:23:33'!
PASSED!

!testRun: #TerniLapilliTests #test23AssertGameIsNotOverIfNoPlayerWon stamp: 'RL 11/2/2020 16:23:33'!
PASSED!

!testRun: #TerniLapilliTests #test24ThrowExceptionWhenPuttingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 16:23:33'!
PASSED!

!testRun: #TerniLapilliTests #test25ThrowExceptionWhenMovingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 16:23:33'!
PASSED!

!testRun: #TerniLapilliTests #test21ThrowExceptionWhenMovingFrom23to32 stamp: 'RL 11/2/2020 16:23:37'!
PASSED!

!testRun: #TerniLapilliTests #test21ThrowExceptionWhenMovingFrom23to32 stamp: 'RL 11/2/2020 16:23:42'!
PASSED!
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 16:24:42'!
test26MoveCorrectlyAPieceFrom31To32
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 2@1.
	aTerniLapilli putOAt: 1@1.	
	
	aTerniLapilli moveXFrom: 3@1 to: 3@2.
	self deny: aTerniLapilli isXTurn.! !
!TerniLapilliTests methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 16:25:15'!
test26MovingAPieceChangesThePlayerTurn
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 2@1.
	aTerniLapilli putOAt: 1@1.	
	
	aTerniLapilli moveXFrom: 3@1 to: 3@2.
	self deny: aTerniLapilli isXTurn.! !

!methodRemoval: TerniLapilliTests #test26MoveCorrectlyAPieceFrom31To32 stamp: 'RL 11/2/2020 16:25:19'!
test26MoveCorrectlyAPieceFrom31To32
	| aTerniLapilli |
	aTerniLapilli := TerniLapilli new.	
	aTerniLapilli putXAt: 3@1.
	aTerniLapilli putOAt: 1@2.
	aTerniLapilli putXAt: 2@2.
	aTerniLapilli putOAt: 2@3.
	aTerniLapilli putXAt: 2@1.
	aTerniLapilli putOAt: 1@1.	
	
	aTerniLapilli moveXFrom: 3@1 to: 3@2.
	self deny: aTerniLapilli isXTurn.!

!testRun: #TerniLapilliTests #test26MovingAPieceChangesThePlayerTurn stamp: 'RL 11/2/2020 16:25:28'!
FAILURE!

!testRun: #TerniLapilliTests #test26MovingAPieceChangesThePlayerTurn stamp: 'RL 11/2/2020 16:25:28'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 16:25:55' prior: 50875503!
move: aPlayer from: aPosition to: anotherPosition
	self validateTerniLapilliConditionsFor: aPlayer movingFrom: aPosition.
	self validatePosition: anotherPosition.
	self validateMoveFrom: aPosition to: anotherPosition.
	turn validate: aPlayer andMoveFrom: aPosition to: anotherPosition.
	self
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 16:26:06' prior: 50875708!
move: aPlayer from: aPosition to: anotherPosition
	self validateTerniLapilliConditionsFor: aPlayer movingFrom: aPosition.
	self validatePosition: anotherPosition.
	self validateMoveFrom: aPosition to: anotherPosition.
	turn validate: aPlayer andMoveFrom: aPosition to: anotherPosition.
	self nextTurn.! !

!testRun: #TerniLapilliTests #test01PlayerXStartsGame stamp: 'RL 11/2/2020 16:26:11'!
PASSED!

!testRun: #TerniLapilliTests #test02PlayerXPutAtCorrectPosition stamp: 'RL 11/2/2020 16:26:11'!
PASSED!

!testRun: #TerniLapilliTests #test03ThrowExceptionWhenPlayerPutOnInvalidPosition stamp: 'RL 11/2/2020 16:26:11'!
PASSED!

!testRun: #TerniLapilliTests #test04PlayerOHasSecondTurn stamp: 'RL 11/2/2020 16:26:11'!
PASSED!

!testRun: #TerniLapilliTests #test05PlayerOPutAtCorrectPosition stamp: 'RL 11/2/2020 16:26:11'!
PASSED!

!testRun: #TerniLapilliTests #test06ThrowExceptionWhenPlayerPutAtAnAlreadyTakenPosition stamp: 'RL 11/2/2020 16:26:11'!
PASSED!

!testRun: #TerniLapilliTests #test07ThrowExceptionWhenPlayerPlaysNotInItsTurn stamp: 'RL 11/2/2020 16:26:11'!
PASSED!

!testRun: #TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumnAndGameIsOver stamp: 'RL 11/2/2020 16:26:11'!
PASSED!

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/2/2020 16:26:11'!
PASSED!

!testRun: #TerniLapilliTests #test10AssertPlayerWinsWithThreeOnFirstRow stamp: 'RL 11/2/2020 16:26:11'!
PASSED!

!testRun: #TerniLapilliTests #test11AssertPlayerWinsWithThreeOn11to33Diagonal stamp: 'RL 11/2/2020 16:26:11'!
PASSED!

!testRun: #TerniLapilliTests #test12AssertPlayerWinsWithThreeOn31to13Diagonal stamp: 'RL 11/2/2020 16:26:11'!
PASSED!

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/2/2020 16:26:11'!
PASSED!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/2/2020 16:26:11'!
PASSED!

!testRun: #TerniLapilliTests #test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/2/2020 16:26:11'!
PASSED!

!testRun: #TerniLapilliTests #test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition stamp: 'RL 11/2/2020 16:26:11'!
PASSED!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom31To32 stamp: 'RL 11/2/2020 16:26:11'!
PASSED!

!testRun: #TerniLapilliTests #test18ThrowExceptionWhenMovingFrom31to33 stamp: 'RL 11/2/2020 16:26:11'!
PASSED!

!testRun: #TerniLapilliTests #test19ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/2/2020 16:26:11'!
PASSED!

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/2/2020 16:26:11'!
PASSED!

!testRun: #TerniLapilliTests #test21ThrowExceptionWhenMovingFrom23to32 stamp: 'RL 11/2/2020 16:26:11'!
PASSED!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 16:26:11'!
PASSED!

!testRun: #TerniLapilliTests #test23AssertGameIsNotOverIfNoPlayerWon stamp: 'RL 11/2/2020 16:26:11'!
PASSED!

!testRun: #TerniLapilliTests #test24ThrowExceptionWhenPuttingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 16:26:11'!
PASSED!

!testRun: #TerniLapilliTests #test25ThrowExceptionWhenMovingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 16:26:11'!
PASSED!

!testRun: #TerniLapilliTests #test26MovingAPieceChangesThePlayerTurn stamp: 'RL 11/2/2020 16:26:11'!
PASSED!
!TerniLapilliTurnState methodsFor: 'no messages' stamp: 'RL 11/2/2020 16:26:54'!
isPlayerOTurn
	self subclassResponsibility ! !
!TerniLapilliTurnState methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 16:26:58'!
isPlayerXTurn
	self subclassResponsibility ! !
!TerniLapilliTurnState methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 16:27:11'!
validate: aPlayer andAddPieceAt: aPosition
	self subclassResponsibility ! !
!TerniLapilliTurnState methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 16:27:15'!
next
	self subclassResponsibility ! !
!TerniLapilliTurnState methodsFor: 'as yet unclassified' stamp: 'RL 11/2/2020 16:27:35'!
validate: aPlayer andMoveFrom: aPosition to: anotherPosition
	self subclassResponsibility ! !

!testRun: #TerniLapilliTests #test01PlayerXStartsGame stamp: 'RL 11/2/2020 16:37:26'!
PASSED!

!testRun: #TerniLapilliTests #test02PlayerXPutAtCorrectPosition stamp: 'RL 11/2/2020 16:37:26'!
PASSED!

!testRun: #TerniLapilliTests #test03ThrowExceptionWhenPlayerPutOnInvalidPosition stamp: 'RL 11/2/2020 16:37:26'!
PASSED!

!testRun: #TerniLapilliTests #test04PlayerOHasSecondTurn stamp: 'RL 11/2/2020 16:37:26'!
PASSED!

!testRun: #TerniLapilliTests #test05PlayerOPutAtCorrectPosition stamp: 'RL 11/2/2020 16:37:26'!
PASSED!

!testRun: #TerniLapilliTests #test06ThrowExceptionWhenPlayerPutAtAnAlreadyTakenPosition stamp: 'RL 11/2/2020 16:37:26'!
PASSED!

!testRun: #TerniLapilliTests #test07ThrowExceptionWhenPlayerPlaysNotInItsTurn stamp: 'RL 11/2/2020 16:37:26'!
PASSED!

!testRun: #TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumnAndGameIsOver stamp: 'RL 11/2/2020 16:37:26'!
PASSED!

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/2/2020 16:37:26'!
PASSED!

!testRun: #TerniLapilliTests #test10AssertPlayerWinsWithThreeOnFirstRow stamp: 'RL 11/2/2020 16:37:26'!
PASSED!

!testRun: #TerniLapilliTests #test11AssertPlayerWinsWithThreeOn11to33Diagonal stamp: 'RL 11/2/2020 16:37:26'!
PASSED!

!testRun: #TerniLapilliTests #test12AssertPlayerWinsWithThreeOn31to13Diagonal stamp: 'RL 11/2/2020 16:37:26'!
PASSED!

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/2/2020 16:37:26'!
PASSED!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/2/2020 16:37:26'!
PASSED!

!testRun: #TerniLapilliTests #test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/2/2020 16:37:26'!
PASSED!

!testRun: #TerniLapilliTests #test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition stamp: 'RL 11/2/2020 16:37:26'!
PASSED!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom31To32 stamp: 'RL 11/2/2020 16:37:26'!
PASSED!

!testRun: #TerniLapilliTests #test18ThrowExceptionWhenMovingFrom31to33 stamp: 'RL 11/2/2020 16:37:26'!
PASSED!

!testRun: #TerniLapilliTests #test19ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/2/2020 16:37:26'!
PASSED!

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/2/2020 16:37:26'!
PASSED!

!testRun: #TerniLapilliTests #test21ThrowExceptionWhenMovingFrom23to32 stamp: 'RL 11/2/2020 16:37:26'!
PASSED!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 16:37:26'!
PASSED!

!testRun: #TerniLapilliTests #test23AssertGameIsNotOverIfNoPlayerWon stamp: 'RL 11/2/2020 16:37:26'!
PASSED!

!testRun: #TerniLapilliTests #test24ThrowExceptionWhenPuttingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 16:37:26'!
PASSED!

!testRun: #TerniLapilliTests #test25ThrowExceptionWhenMovingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 16:37:26'!
PASSED!

!testRun: #TerniLapilliTests #test26MovingAPieceChangesThePlayerTurn stamp: 'RL 11/2/2020 16:37:26'!
PASSED!

!testRun: #TerniLapilliTests #test01PlayerXStartsGame stamp: 'RL 11/2/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTests #test02PlayerXPutAtCorrectPosition stamp: 'RL 11/2/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTests #test03ThrowExceptionWhenPlayerPutOnInvalidPosition stamp: 'RL 11/2/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTests #test04PlayerOHasSecondTurn stamp: 'RL 11/2/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTests #test05PlayerOPutAtCorrectPosition stamp: 'RL 11/2/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTests #test06ThrowExceptionWhenPlayerPutAtAnAlreadyTakenPosition stamp: 'RL 11/2/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTests #test07ThrowExceptionWhenPlayerPlaysNotInItsTurn stamp: 'RL 11/2/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTests #test08AssertPlayerWinsWithThreeOnFirstColumnAndGameIsOver stamp: 'RL 11/2/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTests #test09AssertPlayerWinsWithThreeOnMiddleColumn stamp: 'RL 11/2/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTests #test10AssertPlayerWinsWithThreeOnFirstRow stamp: 'RL 11/2/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTests #test11AssertPlayerWinsWithThreeOn11to33Diagonal stamp: 'RL 11/2/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTests #test12AssertPlayerWinsWithThreeOn31to13Diagonal stamp: 'RL 11/2/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTests #test13ThrowExceptionWhenMovingPiecesWithStillLeftToPut stamp: 'RL 11/2/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTests #test14ThrowExceptionWhenMovingAPieceToAnOcuppiedPosition stamp: 'RL 11/2/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTests #test15ThrowExceptionWhenMovingAPieceToAnInvalidPosition stamp: 'RL 11/2/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTests #test16ThrowExceptionWhenMovingAPieceNotFromAPlayerPosition stamp: 'RL 11/2/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTests #test17MoveCorrectlyAPieceFrom31To32 stamp: 'RL 11/2/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTests #test18ThrowExceptionWhenMovingFrom31to33 stamp: 'RL 11/2/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTests #test19ThrowExceptionWhenMovingFrom13to33 stamp: 'RL 11/2/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTests #test20ThrowExceptionWhenMovingFrom12to21 stamp: 'RL 11/2/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTests #test21ThrowExceptionWhenMovingFrom23to32 stamp: 'RL 11/2/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTests #test22ThrowExceptionWhenPlayerMovesNotInItsTurn stamp: 'RL 11/2/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTests #test23AssertGameIsNotOverIfNoPlayerWon stamp: 'RL 11/2/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTests #test24ThrowExceptionWhenPuttingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTests #test25ThrowExceptionWhenMovingPieceWithAlreadyFinishedGame stamp: 'RL 11/2/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTests #test26MovingAPieceChangesThePlayerTurn stamp: 'RL 11/2/2020 16:37:46'!
PASSED!