----STARTUP---- (29 November 2020 16:25:30) as C:\Users\FACU PC\Documents\Clases Virtuales\Cosas IS 1\Cuis University\CuisUniversity-4384.image!


----End fileIn of C:\Users\FACU PC\Downloads\Ejercicio-TusLibros.com (3).st----!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 16:26:48'!
newa
	^self basicNew initialize.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 16:26:48' prior: 50868467!
ticketOf: aCart
	
	| ticket |
	
	ticket := OrderedCollection newa.
	aCart books asSet do: [:aBook | ticket add: (aCart quantityOf: aBook asString ,(aBook , '   ')) , ((aCart catalogue at: aBook) * (aCart quantityOf: aBook) ) asString].
	ticket add: 'Total   ' , (self purchaseTotalOf: aCart) asString.
	
	^ ticket.
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 16:26:48' prior: 50868440 overrides: 16896425!
initialize
	
	interface := InterfaceSimulator newa.! !

!methodRemoval: Cashier class #new stamp: 'FG 11/29/2020 16:26:48'!
new
	^self basicNew initialize.!

!methodRemoval: Cashier class #newa stamp: 'FG 11/29/2020 16:27:10'!
newa
	^self basicNew initialize.!

!classRemoval: #InterfaceSimulator stamp: 'FG 11/29/2020 18:45:21'!
Object subclass: #InterfaceSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classRemoval: #CreditCard stamp: 'FG 11/29/2020 18:45:21'!
Object subclass: #CreditCard
	instanceVariableNames: 'plasticNumber ownerName expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classRemoval: #Cashier stamp: 'FG 11/29/2020 18:45:22'!
Object subclass: #Cashier
	instanceVariableNames: 'interface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classRemoval: #Cart stamp: 'FG 11/29/2020 18:45:22'!
Object subclass: #Cart
	instanceVariableNames: 'books catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classRemoval: #CreditCardTests stamp: 'FG 11/29/2020 18:45:22'!
TusLibrosExerciseTests subclass: #CreditCardTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classRemoval: #CashierTests stamp: 'FG 11/29/2020 18:45:23'!
TusLibrosExerciseTests subclass: #CashierTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classRemoval: #CartTests stamp: 'FG 11/29/2020 18:45:23'!
TusLibrosExerciseTests subclass: #CartTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classRemoval: #TusLibrosExerciseTests stamp: 'FG 11/29/2020 18:45:24'!
TestCase subclass: #TusLibrosExerciseTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

----End fileIn of C:\Users\FACU PC\Downloads\Ejercicio-TusLibros.com (4).st----!

----STARTUP---- (29 November 2020 19:26:29) as C:\Users\FACU PC\Documents\Clases Virtuales\Cosas IS 1\Cuis University\CuisUniversity-4384.image!


!classDefinition: #TusLibrosExerciseTests category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:36'!
TestCase subclass: #TusLibrosExerciseTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #TusLibrosExerciseTests category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:36'!
TestCase subclass: #TusLibrosExerciseTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!TusLibrosExerciseTests methodsFor: 'as yet unclassified' stamp: 'LNB 11/19/2020 19:14:41'!
should: aBlockThatShouldFail raisingAnErrorAndAsserting: aVerificationBlock
	
	[aBlockThatShouldFail value. self fail.]
		on: Error
		do: aVerificationBlock.! !

!classDefinition: #CartTests category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:36'!
TusLibrosExerciseTests subclass: #CartTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #CartTests category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:36'!
TusLibrosExerciseTests subclass: #CartTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!CartTests methodsFor: 'cart tests' stamp: 'LNB 11/21/2020 18:30:33'!
test01NewCartShouldBeEmpty

	| cart catalogue |
	
	catalogue := Dictionary new.
	cart := Cart with: catalogue.
	
	self assert: cart isEmpty. ! !
!CartTests methodsFor: 'cart tests' stamp: 'LNB 11/21/2020 18:32:44'!
test02CartWithABookShouldNotBeEmpty

	| cart catalogue book |
	
	book := 'Book'.
	catalogue := Dictionary new.
	catalogue add: book -> 100.
		
	cart := Cart with: catalogue.
	
	cart add: 10 of: book.
	
	self assert: cart isEmpty not. ! !
!CartTests methodsFor: 'cart tests' stamp: 'LNB 11/21/2020 18:33:06'!
test03EmptyCartDoesntHasABook

	| cart catalogue book |
	
	book := 'Book'.
	catalogue := Dictionary new.
	catalogue add: book -> 100.
	
	cart := Cart with: catalogue.
	
	self assert: (cart has: book) not.! !
!CartTests methodsFor: 'cart tests' stamp: 'LNB 11/21/2020 18:33:22'!
test04CartShouldHaveAddedBook

	| cart catalogue book |
	
	book := 'Book'.
	catalogue := Dictionary new.
	catalogue add: book -> 100.
	
	cart := Cart with: catalogue.
	
	cart add: 10 of: book. 
	
	self assert: (cart has: book).! !
!CartTests methodsFor: 'cart tests' stamp: 'LNB 11/21/2020 18:34:10'!
test05CartShouldNotHaveNonAddedBook

	| cart catalogue historyBook mathBook |
	
	mathBook := 'MathBook'.
	historyBook := 'HistoryBook'.
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	catalogue add: historyBook -> 100.
	
	cart := Cart with: catalogue.
	
	cart add: 10 of: historyBook. 
	
	self assert: (cart has: mathBook) not.
	! !
!CartTests methodsFor: 'cart tests' stamp: 'LNB 11/21/2020 18:34:33'!
test06CartShouldAnswerQuantityOfAnAddedBook

	| cart catalogue historyBook mathBook|
	
	historyBook := 'HistoryBook'.
	mathBook := 'MathBook'.
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	catalogue add: historyBook -> 100.
	
	cart := Cart with: catalogue.
		
	cart add: 100 of: historyBook.
	cart add: 50 of: mathBook. 
	
	self assert: (cart quantityOf: historyBook) equals: 100.
	self assert: (cart quantityOf: mathBook) equals: 50.
	! !
!CartTests methodsFor: 'cart tests' stamp: 'LNB 11/21/2020 18:35:13'!
test07CartShouldProperlyAddMoreCopiesOfAnAlreadyAddedBook

	| cart catalogue book|
	
	book := 'Book'.
	catalogue := Dictionary new.
	catalogue add: book -> 100.
	
	cart := Cart with: catalogue .
		
	cart add: 50 of: book. 
	cart add: 150 of: book.
		
	self assert: (cart quantityOf: book) equals: 200.! !
!CartTests methodsFor: 'cart tests' stamp: 'LNB 11/21/2020 18:35:48'!
test08CartShouldBeAbleToAnswerWhatBooksItHas

	| cart catalogue mathBook historyBook|
	
	mathBook := 'MathBook'.
	historyBook := 'HistoryBook'.		
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	catalogue add: historyBook -> 100.
	
	cart := Cart with: catalogue.
	
	cart add: 50 of: mathBook.
		
	self assert: cart books size equals: 50.
	self assert: (cart books includes: mathBook).
	
	cart add: 100 of: historyBook.
	
	self assert: cart books size equals: 150.
	self assert: (cart books includes: historyBook).
	! !
!CartTests methodsFor: 'cart tests' stamp: 'LNB 11/21/2020 18:36:06'!
test09CartCantAddBookThatAreNotInTheCatalogue

	| cart catalogue mathBook historyBook|
	
	mathBook := 'MathBook'.
	historyBook := 'HistoryBook'.	
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	cart := Cart with: catalogue.
	
	[cart add: 100 of: historyBook. self fail]
		on: Error
		do: [:anError | self assert: anError messageText equals: Cart cantAddBooksThatAreNotInTheCatalogue. ].	
! !
!CartTests methodsFor: 'cart tests' stamp: 'LNB 11/21/2020 18:36:23'!
test10CartCantAddANonIntegerAmountOfBooks

	| cart catalogue mathBook|
	
	mathBook := 'MathBook'.
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	cart := Cart with: catalogue.
	
	[cart add: 2.5 of: mathBook. self fail]
		on: Error
		do: [:anError | self assert: anError messageText equals: Cart cantAddANonIntegerAmountOfBooks. ].	
! !
!CartTests methodsFor: 'cart tests' stamp: 'LNB 11/21/2020 18:36:35'!
test11CartCantAddANonPositiveAmountOfBooks

	| cart catalogue mathBook|
	
	mathBook := 'MathBook'.
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	cart := Cart with: catalogue.
	
	
	self should: [cart add: 0 of: mathBook] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: Cart cantAddANonPositiveAmountOfBooks. ]
	! !

!classDefinition: #CashierTests category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:37'!
TusLibrosExerciseTests subclass: #CashierTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #CashierTests category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:37'!
TusLibrosExerciseTests subclass: #CashierTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!CashierTests methodsFor: 'as yet unclassified' stamp: 'LNB 11/25/2020 20:18:34'!
test01CantCheckoutWithAnEmptyCart

	| cart cashier creditCard |
	
	creditCard := CreditCard 
		withPlasticNumber: '0000000000000000' 
		namedAfter: 'Pepito'
		validThrough: (GregorianMonthOfYear novemberOf: (GregorianYear createYear: 2024)).
		
	cart := Cart with: Set new.
	cashier := Cashier new.
	
	self should: [cashier checkout: cart payingWith: creditCard.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: Cashier cantCheckoutWithAnEmptyCart. ]! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'LNB 11/25/2020 20:19:33'!
test02CheckingOutACartWithABookReturnsItsPrice

	| cart cashier catalogue mathBook creditCard |
	
	creditCard := CreditCard 
		withPlasticNumber: '0000000000000000' 
		namedAfter: 'Pepito'
		validThrough: (GregorianMonthOfYear novemberOf: (GregorianYear createYear: 2024)).
		
	mathBook := 'MathBook'.
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	
	cart := Cart with: catalogue.
	cart add: 1 of: mathBook. 
	
	cashier := Cashier new.
	
	self assert: (cashier checkout: cart payingWith: creditCard) equals: 100.! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'LNB 11/25/2020 20:20:23'!
test03CheckingOutWithTwoDifferentBooksReturnsTheSumOfBothPrices
	
	| cart cashier catalogue mathBook historyBook creditCard |
	
	creditCard := CreditCard 
		withPlasticNumber: '0000000000000000' 
		namedAfter: 'Pepito'
		validThrough: (GregorianMonthOfYear novemberOf: (GregorianYear createYear: 2024)).
	
	mathBook := 'MathBook'.
	historyBook := 'HistoryBook'.	
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	catalogue add: historyBook -> 75.
	
	cart := Cart with: catalogue.
	cart add: 1 of: mathBook.
	cart add: 1 of: historyBook.
	
	cashier := Cashier new.
	
	self assert: (cashier checkout: cart payingWith: creditCard ) equals: 175.! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'LNB 11/25/2020 20:21:22'!
test04CheckingOutMultipleCopiesOfTheSameBookReturnsItsPriceTimesTheQuantity

	| cart cashier catalogue mathBook creditCard |
	
	creditCard := CreditCard 
		withPlasticNumber: '0000000000000000' 
		namedAfter: 'Pepito'
		validThrough: (GregorianMonthOfYear novemberOf: (GregorianYear createYear: 2024)).
	
	mathBook := 'MathBook'.	
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	
	cart := Cart with: catalogue.
	cart add: 3 of: mathBook.
	
	cashier := Cashier new.
	
	self assert: (cashier checkout: cart payingWith: creditCard ) equals: 300.! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'LNB 11/25/2020 20:22:01'!
test05CantCheckoutWithAnExpiredCreditCard
	
	| cart cashier catalogue mathBook creditCard |
	
	creditCard := CreditCard 
		withPlasticNumber: '0000000000000000' 
		namedAfter: 'Pepito' 
		validThrough: (GregorianMonthOfYear decemberOf: (GregorianYear createYear: 2019)).
	
	mathBook := 'MathBook'.
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	
	cart := Cart with: catalogue.
	cart add: 1 of: mathBook.
	
	cashier := Cashier new.
	
	self should: [cashier checkout: cart payingWith: creditCard.] 
		raisingAnErrorAndAsserting: [ :anError | self assert: anError messageText equals: Cashier creditCardHasExpired. ].	
	
	! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'LNB 11/25/2020 20:23:54'!
test06CantCheckoutWhenTotalAmountToPayHasMoreThan15Digits
	| cart cashier catalogue mathBook creditCard |
	
	creditCard := CreditCard 
		withPlasticNumber: '0000000000000000' 
		namedAfter: 'Pepito' 
		validThrough: (GregorianMonthOfYear decemberOf: (GregorianYear createYear: 2021)).
	
	mathBook := 'MathBook'.
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 1000000000000000.
	
	cart := Cart with: catalogue.
	cart add: 1 of: mathBook.
	
	cashier := Cashier new.
	
	self should: [cashier checkout: cart payingWith: creditCard] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: Cashier amountToBigToProcess. ].
	
	! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'LNB 11/25/2020 20:24:48'!
test07CentsMustBeRoundedUpToTwoDigits
	| cart cashier catalogue mathBook creditCard |
	
	creditCard := CreditCard 
		withPlasticNumber: '0000000000000000' 
		namedAfter: 'Pepito'
		validThrough: (GregorianMonthOfYear novemberOf: (GregorianYear createYear: 2024)).
	
	mathBook := 'MathBook'.	
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.002.
	
	cart := Cart with: catalogue.
	cart add: 1 of: mathBook.
	
	cashier := Cashier new.
	
	self assert: (cashier checkout: cart payingWith: creditCard ) equals: 100.01.! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'LNB 11/25/2020 20:25:23'!
test08CantCheckOutIfPurchaseIsInvalidatedByMerchantProcessorBecauseOfInvalidParameter
	
	| cart cashier catalogue mathBook creditCard |
	
	creditCard := CreditCard 
		withPlasticNumber: '1234567890123456' 
		namedAfter: 'Nombre Incorrecto' 
		validThrough: (GregorianMonthOfYear decemberOf: (GregorianYear createYear: 2024)).
	
	mathBook := 'MathBook'.
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	
	cart := Cart with: catalogue.
	cart add: 1 of: mathBook.
	
	cashier := Cashier new.
	
	self should: [cashier checkout: cart payingWith: creditCard] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: Cashier purchaseInvalidatedByMerchantProcessorBecauseOfInvalidParameter . ].
	
	! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'LNB 11/25/2020 20:25:55'!
test09CantCheckOutIfPurchaseIsInvalidatedByMerchantProcessorBecauseOfAGivenError
	| cart cashier catalogue mathBook creditCard |
	
	creditCard := CreditCard 
		withPlasticNumber: '1234567890123456' 
		namedAfter: 'TarjetaRobada' 
		validThrough: (GregorianMonthOfYear decemberOf: (GregorianYear createYear: 2024)).
	
	mathBook := 'MathBook'.
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	
	cart := Cart with: catalogue.
	cart add: 1 of: mathBook.
	
	cashier := Cashier new.
	
	self should: [cashier checkout: cart payingWith: creditCard] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: 'Tarjeta Robada'. ].
	
	! !

!classDefinition: #CreditCardTests category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:37'!
TusLibrosExerciseTests subclass: #CreditCardTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #CreditCardTests category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:37'!
TusLibrosExerciseTests subclass: #CreditCardTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!CreditCardTests methodsFor: 'credit card tests' stamp: 'FG 11/25/2020 13:51:03'!
test01CreditCardNumberMustBeComposedOfDigits

	self should: [	CreditCard 
				withPlasticNumber: 'No soy un n�mero'
				namedAfter: 'Pepito'
				validThrough: (GregorianMonthOfYear novemberOf: (GregorianYear createYear: 2024)).] 
		raisingAnErrorAndAsserting: [ :anError | self assert: anError messageText equals: CreditCard plasticNumberMustBeMadeOfDigits. ].	! !
!CreditCardTests methodsFor: 'credit card tests' stamp: 'FG 11/25/2020 13:53:16'!
test02CreditCardNumberShouldHaveExactlySixteenDigits

	self should: [	CreditCard 
				withPlasticNumber: '000000000900000' 
				namedAfter: 'Pepito'
				validThrough: (GregorianMonthOfYear novemberOf: (GregorianYear createYear: 2024)).] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: CreditCard plasticNumberMustHaveSixteenDigits. ].	
	
	self should: [	CreditCard 
				withPlasticNumber: '00000000090000000'
				namedAfter: 'Pepito'
				validThrough: (GregorianMonthOfYear novemberOf: (GregorianYear createYear: 2024)).] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: CreditCard plasticNumberMustHaveSixteenDigits. ].! !
!CreditCardTests methodsFor: 'credit card tests' stamp: 'FG 11/25/2020 13:55:05'!
test03CreditCardOwnerNameCanNotBeEmpty

	self should: [	CreditCard 
				withPlasticNumber: '0000000009000000' 
				namedAfter: ''
				validThrough: (GregorianMonthOfYear novemberOf: (GregorianYear createYear: 2024)).] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: CreditCard plasticOwnerMustHaveAName. ].	
	! !
!CreditCardTests methodsFor: 'credit card tests' stamp: 'FG 11/25/2020 13:57:42'!
test04CreditCardCanShowTheirOwnerName

	| ownerName creditCard |
	
	ownerName := 'Pepito'.
	
	creditCard := CreditCard 
		withPlasticNumber: '0000000009000000' 
		namedAfter: ownerName
		validThrough: (GregorianMonthOfYear novemberOf: (GregorianYear createYear: 2024)).
	
	self assert: creditCard ownerName equals: ownerName.
	
	
	! !
!CreditCardTests methodsFor: 'credit card tests' stamp: 'FG 11/25/2020 17:55:31'!
test05IfOwnerNameHasMoreThanThirtyCharactersThenItGetsTruncated

	| ownerName truncatedOwnerName creditCard |
	
	ownerName := 'Pepito Gabriel de la Santisima Trinidad'.
	truncatedOwnerName := 'Pepito Gabriel de la Santisima'.
	
	creditCard := CreditCard 
		withPlasticNumber: '0000000009000000' 
		namedAfter: ownerName
		validThrough: (GregorianMonthOfYear novemberOf: (GregorianYear createYear: 2024)).
	
	self assert: creditCard ownerName equals: truncatedOwnerName.
	
	
	! !
!CreditCardTests methodsFor: 'credit card tests' stamp: 'FG 11/25/2020 14:05:27'!
test06CreditCardCanShowTheirPlasticNumber
	
	| creditCard creditCardNumber |
	
	creditCardNumber := '0000000009000000'.
	
	creditCard := CreditCard 
		withPlasticNumber: creditCardNumber 
		namedAfter: 'Pepito'
		validThrough: (GregorianMonthOfYear novemberOf: (GregorianYear createYear: 2024)).
	
	self assert: creditCard plasticNumber equals: creditCardNumber.
	
	
	! !
!CreditCardTests methodsFor: 'credit card tests' stamp: 'FG 11/25/2020 14:05:55'!
test07CreditCarCanShowExpirationDate

	| creditCard creditCardExpiration |
	
	creditCardExpiration := GregorianMonthOfYear novemberOf: (GregorianYear createYear: 2024).
	
	creditCard := CreditCard 
		withPlasticNumber: '0000000000000000' 
		namedAfter: 'Pepito' 
		validThrough: creditCardExpiration.
	
	self assert: creditCard expirationDate equals: creditCardExpiration.! !
!CreditCardTests methodsFor: 'credit card tests' stamp: 'FG 11/25/2020 18:00:32'!
test08CreditCardExpirationDateIsKindaOfGregorianMonthOfYear
	
	self should: [ CreditCard 
		withPlasticNumber: '0000000000000000' 
		namedAfter: 'Pepito' 
		validThrough: 0596. ] 
	raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: CreditCard expirationDateShouldBeGregorianMonthOfYear. ]. 
	! !

!classDefinition: #Cart category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:38'!
Object subclass: #Cart
	instanceVariableNames: 'books catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #Cart category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:38'!
Object subclass: #Cart
	instanceVariableNames: 'books catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!Cart methodsFor: 'adding' stamp: 'LNB 11/19/2020 19:01:59'!
add: aQuantity of: aBook 

	self assertIsInCatalogue: aBook.
	self assertIsValidQuantity: aQuantity.
	
	^ books add: aBook withOccurrences: aQuantity.! !
!Cart methodsFor: 'accesing' stamp: 'FG 11/18/2020 17:46:38'!
books
	^ books copy.! !
!Cart methodsFor: 'accesing' stamp: 'LNB 11/21/2020 18:47:15'!
catalogue
	^ catalogue copy.! !
!Cart methodsFor: 'accesing' stamp: 'FG 11/16/2020 19:15:54'!
has: aBook
	^ books includes: aBook.! !
!Cart methodsFor: 'accesing' stamp: 'FG 11/16/2020 19:15:27'!
isEmpty
	^ books isEmpty.! !
!Cart methodsFor: 'accesing' stamp: 'FG 11/16/2020 19:26:32'!
quantityOf: aBook
	^ books occurrencesOf: aBook.! !
!Cart methodsFor: 'asserting' stamp: 'LNB 11/21/2020 18:30:01'!
assertIsInCatalogue: aBook

	^ (catalogue includesKey: aBook) ifFalse: [self error: Cart cantAddBooksThatAreNotInTheCatalogue]! !
!Cart methodsFor: 'asserting' stamp: 'LNB 11/19/2020 18:59:07'!
assertIsValidQuantity: aQuantity

	aQuantity isInteger ifFalse: [self error: Cart cantAddANonIntegerAmountOfBooks].
	aQuantity strictlyPositive ifFalse: [self error: Cart cantAddANonPositiveAmountOfBooks ]! !
!Cart methodsFor: 'initialization' stamp: 'FG 11/18/2020 18:02:03'!
initializeWith: aCatalogue

	catalogue := aCatalogue.
	books := Bag new.! !

!classDefinition: 'Cart class' category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:38'!
Cart class
	instanceVariableNames: ''!

!classDefinition: 'Cart class' category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:38'!
Cart class
	instanceVariableNames: ''!
!Cart class methodsFor: 'intialization' stamp: 'FG 11/18/2020 18:01:21'!
with: aCatalogue
	^ self basicNew initializeWith: aCatalogue.! !
!Cart class methodsFor: 'error checking' stamp: 'LNB 11/19/2020 17:47:17'!
cantAddANonIntegerAmountOfBooks
	^ 'Cant add a non integer amount of books'.! !
!Cart class methodsFor: 'error checking' stamp: 'LNB 11/19/2020 18:55:50'!
cantAddANonPositiveAmountOfBooks
	^ 'Cant add a non positive amount of books'.! !
!Cart class methodsFor: 'error checking' stamp: 'FG 11/18/2020 18:05:15'!
cantAddBooksThatAreNotInTheCatalogue
	^ 'Cant add book because is not in the catalogue'.! !

!classDefinition: #Cashier category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:39'!
Object subclass: #Cashier
	instanceVariableNames: 'interface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #Cashier category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:39'!
Object subclass: #Cashier
	instanceVariableNames: 'interface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!Cashier methodsFor: 'checkout' stamp: 'LNB 11/25/2020 19:30:14'!
assertThatAmountIsNotTooBig: aCart
	
	((self purchaseTotalOf: aCart) < 1000000000000000) ifFalse:[self error: Cashier amountToBigToProcess].! !
!Cashier methodsFor: 'checkout' stamp: 'FG 11/25/2020 14:15:58'!
assertThatCartIsNotEmpty: aCart
	
	aCart isEmpty ifTrue: [self error: Cashier cantCheckoutWithAnEmptyCart].! !
!Cashier methodsFor: 'checkout' stamp: 'LNB 11/25/2020 18:49:37'!
assertThatCreditCardHasNotExpired: aCreditCard	
	
	(aCreditCard expirationDate < GregorianMonthOfYear current) ifTrue: [ self error: Cashier creditCardHasExpired ].! !
!Cashier methodsFor: 'checkout' stamp: 'LNB 11/25/2020 19:50:03'!
checkout: aCart payingWith: aCreditCard
	
	self assertThatCreditCardHasNotExpired: aCreditCard.
	self assertThatCartIsNotEmpty: aCart.
	self assertThatAmountIsNotTooBig: aCart.
	
	^ interface payWith: aCreditCard for: (self purchaseTotalOf: aCart) requestedBy: self.! !
!Cashier methodsFor: 'checkout' stamp: 'LNB 11/25/2020 18:50:15'!
checkoutWithTicket: aCart payingWith: aCreditCard
	
	self assertThatCreditCardHasNotExpired: aCreditCard.
	self assertThatCartIsNotEmpty: aCart.
	self assertThatAmountIsNotTooBig: aCart.
	
	^ self ticketOf: aCart.! !
!Cashier methodsFor: 'checkout' stamp: 'LNB 11/25/2020 19:45:59' overrides: 16896425!
initialize
	
	interface := InterfaceSimulator new.! !
!Cashier methodsFor: 'checkout' stamp: 'LNB 11/25/2020 20:13:53'!
invalidatePurchaseBecauseOf: anError.
	
	self error: anError.! !
!Cashier methodsFor: 'checkout' stamp: 'LNB 11/25/2020 20:06:46'!
invalidatePurchaseBecauseOfInvalidParameter
	
	self error: Cashier purchaseInvalidatedByMerchantProcessorBecauseOfInvalidParameter.! !
!Cashier methodsFor: 'checkout' stamp: 'LNB 11/25/2020 18:46:50'!
purchaseTotalOf: aCart
	
	| total |
	
	total := 0.
	aCart books do: [:aBook | total := total + (aCart catalogue at: aBook)].
	^total roundUpTo: 0.01.! !
!Cashier methodsFor: 'checkout' stamp: 'LNB 11/25/2020 19:54:47'!
reportPayment: anAmount
	^ anAmount.
	! !
!Cashier methodsFor: 'checkout' stamp: 'FG 11/25/2020 18:12:21'!
ticketOf: aCart
	
	| ticket |
	
	ticket := OrderedCollection new.
	aCart books asSet do: [:aBook | ticket add: (aCart quantityOf: aBook asString ,(aBook , '   ')) , ((aCart catalogue at: aBook) * (aCart quantityOf: aBook) ) asString].
	ticket add: 'Total   ' , (self purchaseTotalOf: aCart) asString.
	
	^ ticket.
	! !

!classDefinition: 'Cashier class' category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:39'!
Cashier class
	instanceVariableNames: ''!

!classDefinition: 'Cashier class' category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:39'!
Cashier class
	instanceVariableNames: ''!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'FG 11/25/2020 17:47:20'!
amountToBigToProcess
	^ 'Total amount to pay should be below the Sixteen digits'.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'LNB 11/19/2020 19:18:38'!
cantCheckoutWithAnEmptyCart
	^'Cant checkout with an empty cart'! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'LNB 11/23/2020 17:44:32'!
creditCardHasExpired
	^'Cant checkout with an expired Credit Card'! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'LNB 11/25/2020 19:44:51' overrides: 16783533!
new
	^self basicNew initialize.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'LNB 11/25/2020 20:04:19'!
purchaseInvalidatedByMerchantProcessorBecauseOfInvalidParameter
	^ 'The Merchant Processor invalidated your purchase because of an invalid Parameter'.! !

!classDefinition: #CreditCard category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:39'!
Object subclass: #CreditCard
	instanceVariableNames: 'plasticNumber ownerName expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #CreditCard category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:39'!
Object subclass: #CreditCard
	instanceVariableNames: 'plasticNumber ownerName expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!CreditCard methodsFor: 'accessing' stamp: 'FG 11/25/2020 12:38:53'!
expirationDate

	^ expirationDate copy.! !
!CreditCard methodsFor: 'accessing' stamp: 'FG 11/25/2020 12:39:36'!
ownerName

	^ ownerName copy.! !
!CreditCard methodsFor: 'accessing' stamp: 'LNB 11/21/2020 20:26:11'!
plasticNumber

	^ plasticNumber copy.! !
!CreditCard methodsFor: 'initialization' stamp: 'FG 11/25/2020 18:02:11'!
assertThatExpirationDateIsGregorianMonthOfYear: creditCardExpiration.
	
	(creditCardExpiration isKindOf: GregorianMonthOfYear) ifFalse: [self error: CreditCard expirationDateShouldBeGregorianMonthOfYear ].! !
!CreditCard methodsFor: 'initialization' stamp: 'FG 11/25/2020 13:46:54'!
assertThatIsValidCreditCardNumber: aCreditCardNumber
	
	(aCreditCardNumber size = 16) ifFalse: [ self error: CreditCard plasticNumberMustHaveSixteenDigits ].
	aCreditCardNumber do: [:aCharacter | (aCharacter isDigit) ifFalse: [self error: CreditCard plasticNumberMustBeMadeOfDigits] ].
	! !
!CreditCard methodsFor: 'initialization' stamp: 'FG 11/25/2020 13:05:56'!
assertThatIsValidOwnerName: anOwnerName.

	anOwnerName isEmpty ifTrue: [ self error: CreditCard plasticOwnerMustHaveAName ].! !
!CreditCard methodsFor: 'initialization' stamp: 'FG 11/25/2020 17:58:03'!
initializeWithPlasticNumber: aCreditCardNumber namedAfter: anOwnerName validThrough: 	creditCardExpiration
	
	self assertThatIsValidCreditCardNumber: aCreditCardNumber.
	self assertThatIsValidOwnerName: anOwnerName.
	self assertThatExpirationDateIsGregorianMonthOfYear: creditCardExpiration.
	
	plasticNumber := aCreditCardNumber.
	ownerName := anOwnerName truncateTo: 30.
	expirationDate := creditCardExpiration. ! !

!classDefinition: 'CreditCard class' category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:40'!
CreditCard class
	instanceVariableNames: ''!

!classDefinition: 'CreditCard class' category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:40'!
CreditCard class
	instanceVariableNames: ''!
!CreditCard class methodsFor: 'error texts' stamp: 'FG 11/25/2020 18:01:06'!
expirationDateShouldBeGregorianMonthOfYear
	^ 'Expiration Date should be kind of Gregorian Month Of Year'.! !
!CreditCard class methodsFor: 'error texts' stamp: 'LNB 11/21/2020 19:50:47'!
plasticNumberMustBeMadeOfDigits
	^'Credit Card number must be made of digits.'.! !
!CreditCard class methodsFor: 'error texts' stamp: 'LNB 11/21/2020 19:45:32'!
plasticNumberMustHaveSixteenDigits
	^'Credit Card number must have 16 digits.'.! !
!CreditCard class methodsFor: 'error texts' stamp: 'LNB 11/21/2020 19:57:19'!
plasticOwnerMustHaveAName
	'Plastic owner must have a name'.! !
!CreditCard class methodsFor: 'initialization' stamp: 'LNB 11/23/2020 17:30:02'!
withPlasticNumber: aCreditCardNumber namedAfter: anOwnerName validThrough: creditCardExpiration

	^self basicNew initializeWithPlasticNumber: aCreditCardNumber namedAfter: anOwnerName validThrough: creditCardExpiration.! !

!classDefinition: #InterfaceSimulator category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:40'!
Object subclass: #InterfaceSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #InterfaceSimulator category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:40'!
Object subclass: #InterfaceSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!InterfaceSimulator methodsFor: 'as yet unclassified' stamp: 'LNB 11/25/2020 20:12:37'!
payWith: aCreditCard for: anAmount requestedBy: aCashier

	"mandar al merchantProcesor"
	
	(aCreditCard ownerName = 'Nombre Incorrecto') ifTrue: [aCashier invalidatePurchaseBecauseOfInvalidParameter.].
	(aCreditCard ownerName = 'TarjetaRobada') ifTrue: [aCashier invalidatePurchaseBecauseOf: 'Tarjeta Robada'.].
	
	^aCashier reportPayment: anAmount.
	! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 16:26:48'!
newa
	^self basicNew initialize.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 16:26:48' prior: 50870707!
ticketOf: aCart
	
	| ticket |
	
	ticket := OrderedCollection newa.
	aCart books asSet do: [:aBook | ticket add: (aCart quantityOf: aBook asString ,(aBook , '   ')) , ((aCart catalogue at: aBook) * (aCart quantityOf: aBook) ) asString].
	ticket add: 'Total   ' , (self purchaseTotalOf: aCart) asString.
	
	^ ticket.
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 16:26:48' prior: 50870680 overrides: 16896425!
initialize
	
	interface := InterfaceSimulator newa.! !

!methodRemoval: Cashier class #new stamp: 'FG 11/29/2020 19:26:41'!
new
	^self basicNew initialize.!

!methodRemoval: Cashier class #newa stamp: 'FG 11/29/2020 19:26:41'!
newa
	^self basicNew initialize.!

!classRemoval: #InterfaceSimulator stamp: 'FG 11/29/2020 19:26:41'!
Object subclass: #InterfaceSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classRemoval: #CreditCard stamp: 'FG 11/29/2020 19:26:41'!
Object subclass: #CreditCard
	instanceVariableNames: 'plasticNumber ownerName expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classRemoval: #Cashier stamp: 'FG 11/29/2020 19:26:42'!
Object subclass: #Cashier
	instanceVariableNames: 'interface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classRemoval: #Cart stamp: 'FG 11/29/2020 19:26:42'!
Object subclass: #Cart
	instanceVariableNames: 'books catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classRemoval: #CreditCardTests stamp: 'FG 11/29/2020 19:26:42'!
TusLibrosExerciseTests subclass: #CreditCardTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classRemoval: #CashierTests stamp: 'FG 11/29/2020 19:26:43'!
TusLibrosExerciseTests subclass: #CashierTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classRemoval: #CartTests stamp: 'FG 11/29/2020 19:26:43'!
TusLibrosExerciseTests subclass: #CartTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classRemoval: #TusLibrosExerciseTests stamp: 'FG 11/29/2020 19:26:43'!
TestCase subclass: #TusLibrosExerciseTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #TusLibrosExerciseTests category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:43'!
TestCase subclass: #TusLibrosExerciseTests
	instanceVariableNames: 'builder'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #TusLibrosExerciseTests category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:43'!
TestCase subclass: #TusLibrosExerciseTests
	instanceVariableNames: 'builder'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!TusLibrosExerciseTests methodsFor: 'as yet unclassified' stamp: 'LNB 11/29/2020 15:54:08' overrides: 16927572!
setUp

	builder := TestObjectBuilder at: DateAndTime now.! !
!TusLibrosExerciseTests methodsFor: 'as yet unclassified' stamp: 'LNB 11/19/2020 19:14:41'!
should: aBlockThatShouldFail raisingAnErrorAndAsserting: aVerificationBlock
	
	[aBlockThatShouldFail value. self fail.]
		on: Error
		do: aVerificationBlock.! !

!classDefinition: #CartTests category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:43'!
TusLibrosExerciseTests subclass: #CartTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #CartTests category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:44'!
TusLibrosExerciseTests subclass: #CartTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!CartTests methodsFor: 'cart tests' stamp: 'LNB 11/21/2020 18:30:33'!
test01NewCartShouldBeEmpty

	| cart catalogue |
	
	catalogue := Dictionary new.
	cart := Cart with: catalogue.
	
	self assert: cart isEmpty. ! !
!CartTests methodsFor: 'cart tests' stamp: 'LNB 11/21/2020 18:32:44'!
test02CartWithABookShouldNotBeEmpty

	| cart catalogue book |
	
	book := 'Book'.
	catalogue := Dictionary new.
	catalogue add: book -> 100.
		
	cart := Cart with: catalogue.
	
	cart add: 10 of: book.
	
	self assert: cart isEmpty not. ! !
!CartTests methodsFor: 'cart tests' stamp: 'LNB 11/21/2020 18:33:06'!
test03EmptyCartDoesntHasABook

	| cart catalogue book |
	
	book := 'Book'.
	catalogue := Dictionary new.
	catalogue add: book -> 100.
	
	cart := Cart with: catalogue.
	
	self assert: (cart has: book) not.! !
!CartTests methodsFor: 'cart tests' stamp: 'LNB 11/21/2020 18:33:22'!
test04CartShouldHaveAddedBook

	| cart catalogue book |
	
	book := 'Book'.
	catalogue := Dictionary new.
	catalogue add: book -> 100.
	
	cart := Cart with: catalogue.
	
	cart add: 10 of: book. 
	
	self assert: (cart has: book).! !
!CartTests methodsFor: 'cart tests' stamp: 'LNB 11/21/2020 18:34:10'!
test05CartShouldNotHaveNonAddedBook

	| cart catalogue historyBook mathBook |
	
	mathBook := 'MathBook'.
	historyBook := 'HistoryBook'.
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	catalogue add: historyBook -> 100.
	
	cart := Cart with: catalogue.
	
	cart add: 10 of: historyBook. 
	
	self assert: (cart has: mathBook) not.
	! !
!CartTests methodsFor: 'cart tests' stamp: 'LNB 11/21/2020 18:34:33'!
test06CartShouldAnswerQuantityOfAnAddedBook

	| cart catalogue historyBook mathBook|
	
	historyBook := 'HistoryBook'.
	mathBook := 'MathBook'.
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	catalogue add: historyBook -> 100.
	
	cart := Cart with: catalogue.
		
	cart add: 100 of: historyBook.
	cart add: 50 of: mathBook. 
	
	self assert: (cart quantityOf: historyBook) equals: 100.
	self assert: (cart quantityOf: mathBook) equals: 50.
	! !
!CartTests methodsFor: 'cart tests' stamp: 'LNB 11/21/2020 18:35:13'!
test07CartShouldProperlyAddMoreCopiesOfAnAlreadyAddedBook

	| cart catalogue book|
	
	book := 'Book'.
	catalogue := Dictionary new.
	catalogue add: book -> 100.
	
	cart := Cart with: catalogue .
		
	cart add: 50 of: book. 
	cart add: 150 of: book.
		
	self assert: (cart quantityOf: book) equals: 200.! !
!CartTests methodsFor: 'cart tests' stamp: 'LNB 11/21/2020 18:35:48'!
test08CartShouldBeAbleToAnswerWhatBooksItHas

	| cart catalogue mathBook historyBook|
	
	mathBook := 'MathBook'.
	historyBook := 'HistoryBook'.		
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	catalogue add: historyBook -> 100.
	
	cart := Cart with: catalogue.
	
	cart add: 50 of: mathBook.
		
	self assert: cart books size equals: 50.
	self assert: (cart books includes: mathBook).
	
	cart add: 100 of: historyBook.
	
	self assert: cart books size equals: 150.
	self assert: (cart books includes: historyBook).
	! !
!CartTests methodsFor: 'cart tests' stamp: 'LNB 11/21/2020 18:36:06'!
test09CartCantAddBookThatAreNotInTheCatalogue

	| cart catalogue mathBook historyBook|
	
	mathBook := 'MathBook'.
	historyBook := 'HistoryBook'.	
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	cart := Cart with: catalogue.
	
	[cart add: 100 of: historyBook. self fail]
		on: Error
		do: [:anError | self assert: anError messageText equals: Cart cantAddBooksThatAreNotInTheCatalogue. ].	
! !
!CartTests methodsFor: 'cart tests' stamp: 'LNB 11/21/2020 18:36:23'!
test10CartCantAddANonIntegerAmountOfBooks

	| cart catalogue mathBook|
	
	mathBook := 'MathBook'.
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	cart := Cart with: catalogue.
	
	[cart add: 2.5 of: mathBook. self fail]
		on: Error
		do: [:anError | self assert: anError messageText equals: Cart cantAddANonIntegerAmountOfBooks. ].	
! !
!CartTests methodsFor: 'cart tests' stamp: 'LNB 11/21/2020 18:36:35'!
test11CartCantAddANonPositiveAmountOfBooks

	| cart catalogue mathBook|
	
	mathBook := 'MathBook'.
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	cart := Cart with: catalogue.
	
	
	self should: [cart add: 0 of: mathBook] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: Cart cantAddANonPositiveAmountOfBooks. ]
	! !

!classDefinition: #CashierTests category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:44'!
TusLibrosExerciseTests subclass: #CashierTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #CashierTests category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:44'!
TusLibrosExerciseTests subclass: #CashierTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!CashierTests methodsFor: 'cashier tests' stamp: 'LNB 11/29/2020 16:41:23'!
test01CantCheckoutWithAnEmptyCart

	| cart cashier creditCard |
	
	creditCard := builder validCreditCard.
		
	cart := Cart with: Set new.
	cashier := Cashier payingThrough: OutputInterfaceSimulator new.
	
	self should: [cashier checkout: cart payingWith: creditCard.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: Cashier cantCheckoutWithAnEmptyCart. ]! !
!CashierTests methodsFor: 'cashier tests' stamp: 'LNB 11/29/2020 16:41:23'!
test02CheckingOutACartWithABookReturnsItsPrice

	| cart cashier catalogue mathBook creditCard |
	
	creditCard := builder validCreditCard.
		
	mathBook := 'MathBook'.
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	
	cart := Cart with: catalogue.
	cart add: 1 of: mathBook. 
	
	cashier := Cashier payingThrough: OutputInterfaceSimulator new.
	
	self assert: (cashier checkout: cart payingWith: creditCard) equals: 100.! !
!CashierTests methodsFor: 'cashier tests' stamp: 'LNB 11/29/2020 16:41:23'!
test03CheckingOutWithTwoDifferentBooksReturnsTheSumOfBothPrices
	
	| cart cashier catalogue mathBook historyBook creditCard |
	
	creditCard := builder validCreditCard.
	
	mathBook := 'MathBook'.
	historyBook := 'HistoryBook'.	
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	catalogue add: historyBook -> 75.
	
	cart := Cart with: catalogue.
	cart add: 1 of: mathBook.
	cart add: 1 of: historyBook.
	
	cashier := Cashier payingThrough: OutputInterfaceSimulator new.
	
	self assert: (cashier checkout: cart payingWith: creditCard ) equals: 175.! !
!CashierTests methodsFor: 'cashier tests' stamp: 'LNB 11/29/2020 16:41:23'!
test04CheckingOutMultipleCopiesOfTheSameBookReturnsItsPriceTimesTheQuantity

	| cart cashier catalogue mathBook creditCard |
	
	creditCard := builder validCreditCard.
	
	mathBook := 'MathBook'.	
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	
	cart := Cart with: catalogue.
	cart add: 3 of: mathBook.
	
	cashier := Cashier payingThrough: OutputInterfaceSimulator new.
	
	self assert: (cashier checkout: cart payingWith: creditCard ) equals: 300.! !
!CashierTests methodsFor: 'cashier tests' stamp: 'LNB 11/29/2020 16:41:23'!
test05CantCheckoutWithAnExpiredCreditCard
	
	| cart cashier catalogue mathBook creditCard |
	
	creditCard := builder expiredCreditCard.
	
	mathBook := 'MathBook'.
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	
	cart := Cart with: catalogue.
	cart add: 1 of: mathBook.
	
	cashier := Cashier payingThrough: OutputInterfaceSimulator new.
	
	self should: [cashier checkout: cart payingWith: creditCard.] 
		raisingAnErrorAndAsserting: [ :anError | self assert: anError messageText equals: Cashier creditCardHasExpired. ].	
	
	! !
!CashierTests methodsFor: 'cashier tests' stamp: 'LNB 11/29/2020 16:41:23'!
test06CantCheckoutWhenTotalAmountToPayHasMoreThan15Digits
	| cart cashier catalogue mathBook creditCard |
	
	creditCard := builder validCreditCard.
	
	mathBook := 'MathBook'.
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 1000000000000000.
	
	cart := Cart with: catalogue.
	cart add: 1 of: mathBook.
	
	cashier := Cashier payingThrough: OutputInterfaceSimulator new.
	
	self should: [cashier checkout: cart payingWith: creditCard] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: Cashier amountToBigToProcess. ].
	
	! !
!CashierTests methodsFor: 'cashier tests' stamp: 'LNB 11/29/2020 16:41:23'!
test07CentsMustBeRoundedUpToTwoDigits
	| cart cashier catalogue mathBook creditCard |
	
	creditCard := builder validCreditCard.
	
	mathBook := 'MathBook'.	
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.002.
	
	cart := Cart with: catalogue.
	cart add: 1 of: mathBook.
	
	cashier := Cashier payingThrough: OutputInterfaceSimulator new.
	
	self assert: (cashier checkout: cart payingWith: creditCard ) equals: 100.01.! !
!CashierTests methodsFor: 'cashier tests' stamp: 'LNB 11/29/2020 16:41:23'!
test08CantCheckOutIfPurchaseIsInvalidatedByMerchantProcessorBecauseOfInvalidParameter
	
	| cart cashier catalogue mathBook creditCard |
	
	creditCard := builder validCreditCard.
	
	mathBook := 'MathBook'.
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	
	cart := Cart with: catalogue.
	cart add: 1 of: mathBook.
	
	cashier := Cashier payingThrough: OutputInterfaceSimulator new invalidateNextPurchasesBecauseOfInvalidParameters.
	
	self should: [cashier checkout: cart payingWith: creditCard] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: Cashier purchaseInvalidatedByMerchantProcessorBecauseOfInvalidParameter . ].
	
	! !
!CashierTests methodsFor: 'cashier tests' stamp: 'LNB 11/29/2020 16:41:23'!
test09CantCheckOutIfPurchaseIsInvalidatedByMerchantProcessorBecauseOfAGivenError
	| cart cashier catalogue mathBook creditCard |
	
	creditCard := builder validCreditCard.
	
	mathBook := 'MathBook'.
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	
	cart := Cart with: catalogue.
	cart add: 1 of: mathBook.
	
	cashier := Cashier payingThrough: (OutputInterfaceSimulator new invalidateNextPurchaseForACustomErrorDescription: 'Tarjeta Robada').
	
	self should: [cashier checkout: cart payingWith: creditCard] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: 'Tarjeta Robada'. ].
	
	! !

!classDefinition: #CreditCardTests category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:45'!
TusLibrosExerciseTests subclass: #CreditCardTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #CreditCardTests category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:45'!
TusLibrosExerciseTests subclass: #CreditCardTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!CreditCardTests methodsFor: 'credit card tests' stamp: 'LNB 11/29/2020 16:05:16'!
test01CreditCardNumberMustBeComposedOfDigits

	self should: [	builder creditCardWithInvalidPlasticNumber.] 
		raisingAnErrorAndAsserting: [ :anError | self assert: anError messageText equals: CreditCard plasticNumberMustBeMadeOfDigits. ].	! !
!CreditCardTests methodsFor: 'credit card tests' stamp: 'LNB 11/29/2020 16:05:39'!
test02CreditCardNumberShouldHaveExactlySixteenDigits

	self should: [	builder creditCardWithLessThan16DigitsInItsPlasticNumber.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: CreditCard plasticNumberMustHaveSixteenDigits. ].	
	
	self should: [	builder creditCardWithMoreThan16DigitsInItsPlasticNumber.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: CreditCard plasticNumberMustHaveSixteenDigits. ].! !
!CreditCardTests methodsFor: 'credit card tests' stamp: 'LNB 11/29/2020 16:05:50'!
test03CreditCardOwnerNameCanNotBeEmpty

	self should: [	builder creditCardWithEmptyOwnerName.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: CreditCard plasticOwnerMustHaveAName. ].	
	! !
!CreditCardTests methodsFor: 'credit card tests' stamp: 'LNB 11/29/2020 16:08:05'!
test04IfOwnerNameHasMoreThanThirtyCharactersThenItGetsTruncated

	| ownerName truncatedOwnerName creditCard |
	
	ownerName := 'Pepito Gabriel de la Santisima Trinidad'.
	truncatedOwnerName := 'Pepito Gabriel de la Santisima'.
	
	creditCard := builder creditCardWithCustomOwnerName: ownerName.
	
	self assert: creditCard ownerName equals: truncatedOwnerName.
	
	
	! !
!CreditCardTests methodsFor: 'credit card tests' stamp: 'LNB 11/29/2020 16:08:13'!
test05CreditCardExpirationDateIsKindaOfGregorianMonthOfYear
	
	self should: [ builder creditCardWithInvalidExpirationDate ] 
	raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: CreditCard expirationDateShouldBeGregorianMonthOfYear. ]. 
	! !

!classDefinition: #InputInterfaceTests category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:45'!
TusLibrosExerciseTests subclass: #InputInterfaceTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #InputInterfaceTests category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:45'!
TusLibrosExerciseTests subclass: #InputInterfaceTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'LNB 11/29/2020 19:01:23'!
test01

	| inputInterface users catalogue aCartID|
	
	users := Dictionary new.
	
	users add: 'User'->'Password'.
	
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue.
	
	aCartID := inputInterface createCartFor: 'User' withPassword: 'Password'.
	
	
	self assert: (inputInterface isAValidCartID: aCartID).! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'LNB 11/29/2020 18:34:57'!
test02

	| inputInterface users catalogue |
	
	users := Dictionary new.
	
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue.
	
	
	self should: [inputInterface createCartFor: 'WrongUser' withPassword: 'Password'] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongUsername. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'LNB 11/29/2020 18:37:45'!
test03

	| inputInterface users catalogue |
	
	users := Dictionary new.
	
	users add: 'User'->'Password'.
	
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue.
	
	
	self should: [inputInterface createCartFor: 'User' withPassword: 'Wrong Password'] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongPassword. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'LNB 11/29/2020 18:37:50'!
test04

	| inputInterface users catalogue cartID1 cartID2 |
	
	users := Dictionary new.
	
	users add: 'User'->'Password'.
	
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue.
	
	cartID1 := inputInterface createCartFor: 'User' withPassword: 'Password'.
	
	cartID2 := inputInterface createCartFor: 'User' withPassword: 'Password'.
	
	self assert: (cartID1 = cartID2) not.! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'LNB 11/29/2020 18:37:53'!
test05

	| inputInterface users catalogue cartID |
	
	users := Dictionary new.
	
	users add: 'User'->'Password'.
	
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue.
	
	cartID := inputInterface createCartFor: 'User' withPassword: 'Password'.
	
	
	self assert: (inputInterface listCart: cartID) equals: Bag new.! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'LNB 11/29/2020 18:37:56'!
test06

	| inputInterface users catalogue cartID |
	
	users := Dictionary new.
	
	users add: 'User'->'Password'.
	
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue.
	
	cartID := '1' asSymbol.
	
	self should: [inputInterface listCart: cartID] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongCartID. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'LNB 11/29/2020 18:40:58'!
test07

	| inputInterface users catalogue cartID resultingContents |
	
	users := Dictionary new.
	
	users add: 'User'->'Password'.
	
	catalogue := Dictionary new.
	
	catalogue add: 'mathBook'->100.
	
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue.
	
	cartID := inputInterface createCartFor: 'User' withPassword: 'Password'.
	
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	resultingContents := Bag new.
	
	resultingContents add: 'mathBook' withOccurrences: 1.
	
	self assert: (inputInterface listCart: cartID) equals: resultingContents.! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'LNB 11/29/2020 18:43:14'!
test08

	| inputInterface users catalogue cartID |
	
	users := Dictionary new.
	
	users add: 'User'->'Password'.
	
	catalogue := Dictionary new.
	
	catalogue add: 'mathBook'->100.
	
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue.
	
	cartID := '1' asSymbol.
	
	
	self should: [inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongCartID. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'LNB 11/29/2020 19:00:48'!
test09

	| inputInterface users catalogue cartID aTransactionID |
	
	users := Dictionary new.
	
	users add: 'User'->'Password'.
	
	catalogue := Dictionary new.
	
	catalogue add: 'mathBook'->100.
	
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue.
	
	cartID := inputInterface createCartFor: 'User' withPassword: 'Password'.
	
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	aTransactionID := inputInterface checkoutCart: cartID withPlasticNumber: '0000000000000000' validThrough: '012021' namedAfter: 'Valid Name'.
	
	self assert: (inputInterface isAValidTransactionId: aTransactionID).! !

!classDefinition: #Cart category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:46'!
Object subclass: #Cart
	instanceVariableNames: 'books catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #Cart category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:46'!
Object subclass: #Cart
	instanceVariableNames: 'books catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!Cart methodsFor: 'adding' stamp: 'LNB 11/19/2020 19:01:59'!
add: aQuantity of: aBook 

	self assertIsInCatalogue: aBook.
	self assertIsValidQuantity: aQuantity.
	
	^ books add: aBook withOccurrences: aQuantity.! !
!Cart methodsFor: 'accesing' stamp: 'FG 11/18/2020 17:46:38'!
books
	^ books copy.! !
!Cart methodsFor: 'accesing' stamp: 'LNB 11/21/2020 18:47:15'!
catalogue
	^ catalogue copy.! !
!Cart methodsFor: 'accesing' stamp: 'FG 11/16/2020 19:15:54'!
has: aBook
	^ books includes: aBook.! !
!Cart methodsFor: 'accesing' stamp: 'FG 11/16/2020 19:15:27'!
isEmpty
	^ books isEmpty.! !
!Cart methodsFor: 'accesing' stamp: 'FG 11/16/2020 19:26:32'!
quantityOf: aBook
	^ books occurrencesOf: aBook.! !
!Cart methodsFor: 'asserting' stamp: 'LNB 11/21/2020 18:30:01'!
assertIsInCatalogue: aBook

	^ (catalogue includesKey: aBook) ifFalse: [self error: Cart cantAddBooksThatAreNotInTheCatalogue]! !
!Cart methodsFor: 'asserting' stamp: 'LNB 11/19/2020 18:59:07'!
assertIsValidQuantity: aQuantity

	aQuantity isInteger ifFalse: [self error: Cart cantAddANonIntegerAmountOfBooks].
	aQuantity strictlyPositive ifFalse: [self error: Cart cantAddANonPositiveAmountOfBooks ]! !
!Cart methodsFor: 'initialization' stamp: 'FG 11/18/2020 18:02:03'!
initializeWith: aCatalogue

	catalogue := aCatalogue.
	books := Bag new.! !

!classDefinition: 'Cart class' category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:46'!
Cart class
	instanceVariableNames: ''!

!classDefinition: 'Cart class' category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:46'!
Cart class
	instanceVariableNames: ''!
!Cart class methodsFor: 'intialization' stamp: 'FG 11/18/2020 18:01:21'!
with: aCatalogue
	^ self basicNew initializeWith: aCatalogue.! !
!Cart class methodsFor: 'error checking' stamp: 'LNB 11/19/2020 17:47:17'!
cantAddANonIntegerAmountOfBooks
	^ 'Cant add a non integer amount of books'.! !
!Cart class methodsFor: 'error checking' stamp: 'LNB 11/19/2020 18:55:50'!
cantAddANonPositiveAmountOfBooks
	^ 'Cant add a non positive amount of books'.! !
!Cart class methodsFor: 'error checking' stamp: 'FG 11/18/2020 18:05:15'!
cantAddBooksThatAreNotInTheCatalogue
	^ 'Cant add book because is not in the catalogue'.! !

!classDefinition: #Cashier category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:47'!
Object subclass: #Cashier
	instanceVariableNames: 'interface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #Cashier category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:47'!
Object subclass: #Cashier
	instanceVariableNames: 'interface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!Cashier methodsFor: 'initialization' stamp: 'LNB 11/29/2020 16:19:41'!
initializeWith: aMerchantProcessor
	
	interface := aMerchantProcessor.! !
!Cashier methodsFor: 'checkout' stamp: 'LNB 11/25/2020 19:50:03'!
checkout: aCart payingWith: aCreditCard
	
	self assertThatCreditCardHasNotExpired: aCreditCard.
	self assertThatCartIsNotEmpty: aCart.
	self assertThatAmountIsNotTooBig: aCart.
	
	^ interface payWith: aCreditCard for: (self purchaseTotalOf: aCart) requestedBy: self.! !
!Cashier methodsFor: 'checkout' stamp: 'LNB 11/25/2020 18:50:15'!
checkoutWithTicket: aCart payingWith: aCreditCard
	
	self assertThatCreditCardHasNotExpired: aCreditCard.
	self assertThatCartIsNotEmpty: aCart.
	self assertThatAmountIsNotTooBig: aCart.
	
	^ self ticketOf: aCart.! !
!Cashier methodsFor: 'checkout' stamp: 'LNB 11/25/2020 18:46:50'!
purchaseTotalOf: aCart
	
	| total |
	
	total := 0.
	aCart books do: [:aBook | total := total + (aCart catalogue at: aBook)].
	^total roundUpTo: 0.01.! !
!Cashier methodsFor: 'checkout' stamp: 'LNB 11/29/2020 16:37:14'!
ticketOf: aCart
	
	| ticket |
	
	ticket := OrderedCollection new.
	aCart books asSet do: [:aBook | ticket add: (aCart quantityOf: aBook asString ,(aBook , '   ')) , ((aCart catalogue at: aBook) * (aCart quantityOf: aBook) ) asString].
	ticket add: 'Total   ' , (self purchaseTotalOf: aCart) asString.
	
	^ ticket.
	! !
!Cashier methodsFor: 'checkout reports' stamp: 'LNB 11/25/2020 20:13:53'!
invalidatePurchaseBecauseOf: anError.
	
	self error: anError.! !
!Cashier methodsFor: 'checkout reports' stamp: 'LNB 11/25/2020 20:06:46'!
invalidatePurchaseBecauseOfInvalidParameter
	
	self error: Cashier purchaseInvalidatedByMerchantProcessorBecauseOfInvalidParameter.! !
!Cashier methodsFor: 'checkout reports' stamp: 'LNB 11/25/2020 19:54:47'!
reportPayment: anAmount
	^ anAmount.
	! !
!Cashier methodsFor: 'checkoutAssertions' stamp: 'LNB 11/25/2020 19:30:14'!
assertThatAmountIsNotTooBig: aCart
	
	((self purchaseTotalOf: aCart) < 1000000000000000) ifFalse:[self error: Cashier amountToBigToProcess].! !
!Cashier methodsFor: 'checkoutAssertions' stamp: 'FG 11/25/2020 14:15:58'!
assertThatCartIsNotEmpty: aCart
	
	aCart isEmpty ifTrue: [self error: Cashier cantCheckoutWithAnEmptyCart].! !
!Cashier methodsFor: 'checkoutAssertions' stamp: 'LNB 11/25/2020 18:49:37'!
assertThatCreditCardHasNotExpired: aCreditCard	
	
	(aCreditCard expirationDate < GregorianMonthOfYear current) ifTrue: [ self error: Cashier creditCardHasExpired ].! !

!classDefinition: 'Cashier class' category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:47'!
Cashier class
	instanceVariableNames: ''!

!classDefinition: 'Cashier class' category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:47'!
Cashier class
	instanceVariableNames: ''!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'FG 11/25/2020 17:47:20'!
amountToBigToProcess
	^ 'Total amount to pay should be below the Sixteen digits'.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'LNB 11/19/2020 19:18:38'!
cantCheckoutWithAnEmptyCart
	^'Cant checkout with an empty cart'! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'LNB 11/23/2020 17:44:32'!
creditCardHasExpired
	^'Cant checkout with an expired Credit Card'! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'LNB 11/29/2020 16:33:32'!
payingThrough: aMerchantProcessor
	^self basicNew initializeWith: aMerchantProcessor.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'LNB 11/25/2020 20:04:19'!
purchaseInvalidatedByMerchantProcessorBecauseOfInvalidParameter
	^ 'The Merchant Processor invalidated your purchase because of an invalid Parameter'.! !

!classDefinition: #CreditCard category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:48'!
Object subclass: #CreditCard
	instanceVariableNames: 'plasticNumber ownerName expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #CreditCard category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:48'!
Object subclass: #CreditCard
	instanceVariableNames: 'plasticNumber ownerName expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!CreditCard methodsFor: 'accessing' stamp: 'FG 11/25/2020 12:38:53'!
expirationDate

	^ expirationDate copy.! !
!CreditCard methodsFor: 'accessing' stamp: 'FG 11/25/2020 12:39:36'!
ownerName

	^ ownerName copy.! !
!CreditCard methodsFor: 'accessing' stamp: 'LNB 11/21/2020 20:26:11'!
plasticNumber

	^ plasticNumber copy.! !
!CreditCard methodsFor: 'initialization' stamp: 'LNB 11/29/2020 16:10:40'!
assertNonExpiredCreditCardFor: aDate
	
	(expirationDate < aDate monthOfYear) ifTrue: [ self error: CreditCard plasticHasExpired ].! !
!CreditCard methodsFor: 'initialization' stamp: 'FG 11/25/2020 18:02:11'!
assertThatExpirationDateIsGregorianMonthOfYear: creditCardExpiration.
	
	(creditCardExpiration isKindOf: GregorianMonthOfYear) ifFalse: [self error: CreditCard expirationDateShouldBeGregorianMonthOfYear ].! !
!CreditCard methodsFor: 'initialization' stamp: 'FG 11/25/2020 13:46:54'!
assertThatIsValidCreditCardNumber: aCreditCardNumber
	
	(aCreditCardNumber size = 16) ifFalse: [ self error: CreditCard plasticNumberMustHaveSixteenDigits ].
	aCreditCardNumber do: [:aCharacter | (aCharacter isDigit) ifFalse: [self error: CreditCard plasticNumberMustBeMadeOfDigits] ].
	! !
!CreditCard methodsFor: 'initialization' stamp: 'FG 11/25/2020 13:05:56'!
assertThatIsValidOwnerName: anOwnerName.

	anOwnerName isEmpty ifTrue: [ self error: CreditCard plasticOwnerMustHaveAName ].! !
!CreditCard methodsFor: 'initialization' stamp: 'FG 11/25/2020 17:58:03'!
initializeWithPlasticNumber: aCreditCardNumber namedAfter: anOwnerName validThrough: 	creditCardExpiration
	
	self assertThatIsValidCreditCardNumber: aCreditCardNumber.
	self assertThatIsValidOwnerName: anOwnerName.
	self assertThatExpirationDateIsGregorianMonthOfYear: creditCardExpiration.
	
	plasticNumber := aCreditCardNumber.
	ownerName := anOwnerName truncateTo: 30.
	expirationDate := creditCardExpiration. ! !

!classDefinition: 'CreditCard class' category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:48'!
CreditCard class
	instanceVariableNames: ''!

!classDefinition: 'CreditCard class' category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:48'!
CreditCard class
	instanceVariableNames: ''!
!CreditCard class methodsFor: 'error texts' stamp: 'FG 11/25/2020 18:01:06'!
expirationDateShouldBeGregorianMonthOfYear
	^ 'Expiration Date should be kind of Gregorian Month Of Year'.! !
!CreditCard class methodsFor: 'error texts' stamp: 'LNB 11/29/2020 16:11:25'!
plasticHasExpired
	^'Cant operate with an expired Credit Card'! !
!CreditCard class methodsFor: 'error texts' stamp: 'LNB 11/21/2020 19:50:47'!
plasticNumberMustBeMadeOfDigits
	^'Credit Card number must be made of digits.'.! !
!CreditCard class methodsFor: 'error texts' stamp: 'LNB 11/21/2020 19:45:32'!
plasticNumberMustHaveSixteenDigits
	^'Credit Card number must have 16 digits.'.! !
!CreditCard class methodsFor: 'error texts' stamp: 'LNB 11/21/2020 19:57:19'!
plasticOwnerMustHaveAName
	'Plastic owner must have a name'.! !
!CreditCard class methodsFor: 'initialization' stamp: 'LNB 11/23/2020 17:30:02'!
withPlasticNumber: aCreditCardNumber namedAfter: anOwnerName validThrough: creditCardExpiration

	^self basicNew initializeWithPlasticNumber: aCreditCardNumber namedAfter: anOwnerName validThrough: creditCardExpiration.! !

!classDefinition: #InputInterface category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:49'!
Object subclass: #InputInterface
	instanceVariableNames: 'usersLog catalogue carts globalNextID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #InputInterface category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:49'!
Object subclass: #InputInterface
	instanceVariableNames: 'usersLog catalogue carts globalNextID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'LNB 11/29/2020 18:43:41'!
addToCart: aCartID anAmount: anAmount ofABookISBN: aBookISBN

	(carts keys includes: aCartID) ifFalse: [self error: InputInterface wrongCartID].

	(carts at: aCartID) add: anAmount of: aBookISBN.! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'LNB 11/29/2020 18:14:24'!
createCartFor: anUsername withPassword: aPassword
	
	| cartID |
	
	(usersLog keys includes: anUsername) ifFalse: [self error: InputInterface wrongUsername].
	
	((usersLog at: anUsername) = aPassword) ifFalse: [self error: InputInterface wrongPassword].

	cartID := self generateCartId.
	
	carts add: cartID->(Cart with: catalogue).
	
	^cartID.! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'LNB 11/29/2020 18:14:36'!
generateCartId
	globalNextID := (globalNextID asInteger + 1) asString.
	^globalNextID asSymbol.! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'LNB 11/29/2020 18:14:36'!
initializeWith: anUsersLog andACatalogue: aCatalogue

	usersLog := anUsersLog.
	catalogue := aCatalogue.
	carts := Dictionary new.
	globalNextID := '0'.! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'LNB 11/29/2020 19:01:23'!
isAValidCartID: aCartID

	^carts keys includes: aCartID.! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'LNB 11/29/2020 19:03:46'!
isAValidTransactionID: aCartID

	^carts keys includes: aCartID.! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'LNB 11/29/2020 18:16:58'!
listCart: aCartID

	(carts keys includes: aCartID) ifFalse: [self error: InputInterface wrongCartID].
	
	^(carts at: aCartID) books.! !

!classDefinition: 'InputInterface class' category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:49'!
InputInterface class
	instanceVariableNames: ''!

!classDefinition: 'InputInterface class' category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:50'!
InputInterface class
	instanceVariableNames: ''!
!InputInterface class methodsFor: 'as yet unclassified' stamp: 'LNB 11/29/2020 17:03:14'!
newWith: anUsersLog andACatalogue: aCatalogue

	^self basicNew initializeWith: anUsersLog andACatalogue: aCatalogue.! !
!InputInterface class methodsFor: 'as yet unclassified' stamp: 'LNB 11/29/2020 18:14:03'!
wrongCartID

	^'Invalid CartID'! !
!InputInterface class methodsFor: 'as yet unclassified' stamp: 'LNB 11/29/2020 17:18:35'!
wrongPassword

	^'Invalid password'! !
!InputInterface class methodsFor: 'as yet unclassified' stamp: 'LNB 11/29/2020 17:13:34'!
wrongUsername

	^'Invalid username'! !

!classDefinition: #OutputInterfaceSimulator category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:50'!
Object subclass: #OutputInterfaceSimulator
	instanceVariableNames: 'expectedBehaviourBlock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #OutputInterfaceSimulator category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:50'!
Object subclass: #OutputInterfaceSimulator
	instanceVariableNames: 'expectedBehaviourBlock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!OutputInterfaceSimulator methodsFor: 'change behaviour' stamp: 'LNB 11/29/2020 16:03:20'!
invalidateNextPurchaseForACustomErrorDescription: anErrorDescription
	expectedBehaviourBlock _ [ :aCashier :anAmount |
	aCashier invalidatePurchaseBecauseOf: anErrorDescription ].! !
!OutputInterfaceSimulator methodsFor: 'change behaviour' stamp: 'LNB 11/29/2020 16:02:47'!
invalidateNextPurchasesBecauseOfInvalidParameters
	expectedBehaviourBlock _ [ :aCashier :anAmount |
	aCashier invalidatePurchaseBecauseOfInvalidParameter ].! !
!OutputInterfaceSimulator methodsFor: 'change behaviour' stamp: 'LNB 11/29/2020 16:01:56'!
nextPurchasesAreValidAndNeedToBeReported
	expectedBehaviourBlock _ [ :aCashier :anAmount |
	aCashier reportPayment: anAmount ].! !
!OutputInterfaceSimulator methodsFor: 'initialize' stamp: 'LNB 11/29/2020 16:01:18' overrides: 16896425!
initialize
	self nextPurchasesAreValidAndNeedToBeReported.! !
!OutputInterfaceSimulator methodsFor: 'simulate' stamp: 'LNB 11/29/2020 16:04:33'!
payWith: aCreditCard for: anAmount requestedBy: aCashier

	"mandar al merchantProcesor"
	
	^expectedBehaviourBlock value: aCashier value: anAmount.
	! !

!classDefinition: #TestObjectBuilder category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:50'!
Object subclass: #TestObjectBuilder
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #TestObjectBuilder category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:50'!
Object subclass: #TestObjectBuilder
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!TestObjectBuilder methodsFor: 'build credit cards' stamp: 'LNB 11/29/2020 15:55:30'!
creditCardWithCustomExpirationDate: anExpirationDate
	^ CreditCard
		withPlasticNumber: '0000000000000000'
		namedAfter: 'Pepito'
		validThrough: anExpirationDate.! !
!TestObjectBuilder methodsFor: 'build credit cards' stamp: 'LNB 11/29/2020 15:56:12'!
creditCardWithCustomOwnerName: anOwnerName
	^ CreditCard
		withPlasticNumber: '0000000000000000'
		namedAfter: anOwnerName
		validThrough:
			(GregorianMonthOfYear
				year: (GregorianYear number: today yearNumber + 1)
				monthNumber: today monthIndex).! !
!TestObjectBuilder methodsFor: 'build credit cards' stamp: 'LNB 11/29/2020 15:57:04'!
creditCardWithEmptyOwnerName
	^ CreditCard
		withPlasticNumber: '0000000009000000'
		namedAfter: ''
		validThrough:
			(GregorianMonthOfYear
				year: (GregorianYear number: today yearNumber + 1)
				monthNumber: today monthIndex).! !
!TestObjectBuilder methodsFor: 'build credit cards' stamp: 'LNB 11/29/2020 15:57:24'!
creditCardWithInvalidExpirationDate
	^ CreditCard
		withPlasticNumber: '0000000000000000'
		namedAfter: 'Pepito'
		validThrough: 0596.! !
!TestObjectBuilder methodsFor: 'build credit cards' stamp: 'LNB 11/29/2020 15:57:59'!
creditCardWithInvalidPlasticNumber
	^ CreditCard
		withPlasticNumber: 'NaN %&/NaNNaNNaN'
		namedAfter: 'Pepito'
		validThrough:
			(GregorianMonthOfYear
				year: (GregorianYear number: today yearNumber + 1)
				monthNumber: today monthIndex).! !
!TestObjectBuilder methodsFor: 'build credit cards' stamp: 'LNB 11/29/2020 15:58:30'!
creditCardWithLessThan16DigitsInItsPlasticNumber
	^ CreditCard
		withPlasticNumber: '000000000900000'
		namedAfter: 'Pepito'
		validThrough:
			(GregorianMonthOfYear
				year: (GregorianYear number: today yearNumber + 1)
				monthNumber: today monthIndex).! !
!TestObjectBuilder methodsFor: 'build credit cards' stamp: 'LNB 11/29/2020 15:58:38'!
creditCardWithMoreThan16DigitsInItsPlasticNumber
	^ CreditCard
		withPlasticNumber: '00000000090000000'
		namedAfter: 'Pepito'
		validThrough:
			(GregorianMonthOfYear
				year: (GregorianYear number: today yearNumber + 1)
				monthNumber: today monthIndex).! !
!TestObjectBuilder methodsFor: 'build credit cards' stamp: 'LNB 11/29/2020 15:59:34'!
expiredCreditCard
	^CreditCard 
		withPlasticNumber: '0000000000000000' 
		namedAfter: 'Pepito'
		validThrough: (GregorianMonthOfYear year: (GregorianYear number: today yearNumber - 1) monthNumber: today monthIndex).! !
!TestObjectBuilder methodsFor: 'build credit cards' stamp: 'LNB 11/29/2020 15:59:54'!
validCreditCard
	^ CreditCard
		withPlasticNumber: '0000000000000000'
		namedAfter: 'Pepito'
		validThrough:
			(GregorianMonthOfYear
				year: (GregorianYear number: today yearNumber + 1)
				monthNumber: today monthIndex).! !
!TestObjectBuilder methodsFor: 'build time objects' stamp: 'LNB 11/29/2020 15:58:55'!
currentMonthOfYear
	^ today monthOfYear.! !
!TestObjectBuilder methodsFor: 'initialize' stamp: 'LNB 11/29/2020 15:56:33'!
initializeAt: aCurrentDateAndTime
	
	today := aCurrentDateAndTime.! !

!classDefinition: 'TestObjectBuilder class' category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:51'!
TestObjectBuilder class
	instanceVariableNames: ''!

!classDefinition: 'TestObjectBuilder class' category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:26:51'!
TestObjectBuilder class
	instanceVariableNames: ''!
!TestObjectBuilder class methodsFor: 'as yet unclassified' stamp: 'LNB 11/29/2020 15:54:59' overrides: 16880774!
at: aCurrentDateAndTime
	^self basicNew initializeAt: aCurrentDateAndTime.! !

!methodRemoval: Cashier #ticketOf: stamp: 'FG 11/29/2020 19:27:45'!
ticketOf: aCart
	
	| ticket |
	
	ticket := OrderedCollection new.
	aCart books asSet do: [:aBook | ticket add: (aCart quantityOf: aBook asString ,(aBook , '   ')) , ((aCart catalogue at: aBook) * (aCart quantityOf: aBook) ) asString].
	ticket add: 'Total   ' , (self purchaseTotalOf: aCart) asString.
	
	^ ticket.
	!

!methodRemoval: Cashier #checkoutWithTicket:payingWith: stamp: 'FG 11/29/2020 19:27:50'!
checkoutWithTicket: aCart payingWith: aCreditCard
	
	self assertThatCreditCardHasNotExpired: aCreditCard.
	self assertThatCartIsNotEmpty: aCart.
	self assertThatAmountIsNotTooBig: aCart.
	
	^ self ticketOf: aCart.!
!Cart methodsFor: 'initialization' stamp: 'FG 11/29/2020 19:42:16'!
total
	| total |
	
	total := 0.
	books do: [:aBook | total := total + (catalogue at: aBook)].
	^total roundUpTo: 0.01.! !
!Cashier methodsFor: 'checkout' stamp: 'FG 11/29/2020 19:44:19' prior: 50871734!
checkout: aCart payingWith: aCreditCard
	
	self assertThatCreditCardHasNotExpired: aCreditCard.
	self assertThatCartIsNotEmpty: aCart.
	self assertThatAmountIsNotTooBig: aCart.
	
	^ interface payWith: aCreditCard for: (aCart total) requestedBy: self.! !

!methodRemoval: Cashier #purchaseTotalOf: stamp: 'FG 11/29/2020 19:44:37'!
purchaseTotalOf: aCart
	
	| total |
	
	total := 0.
	aCart books do: [:aBook | total := total + (aCart catalogue at: aBook)].
	^total roundUpTo: 0.01.!

Object subclass: #Sales
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #Sales category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:49:59'!
Object subclass: #Sales
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

Object subclass: #Sales
	instanceVariableNames: 'total products'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #Sales category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:53:14'!
Object subclass: #Sales
	instanceVariableNames: 'total products'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!Sales class methodsFor: 'no messages' stamp: 'FG 11/29/2020 19:58:14'!
of: aCart
	^ self basicNew initializeWith: aCart.! !

!classDefinition: #Sales category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 19:59:29'!
Object subclass: #Sales
	instanceVariableNames: 'total products books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!Sales methodsFor: 'no messages' stamp: 'FG 11/29/2020 19:59:27'!
intializeWith: aCart
	books := aCart books.
	total := aCart total.
	! !
!Sales methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 20:00:04'!
total
	^ total.! !
!Sales methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 20:00:19'!
books
	^ books. ! !
!Sales methodsFor: 'initialization' stamp: 'FG 11/29/2020 20:01:29'!
initializeWith: aCart
	books := aCart books.
	total := aCart total.
	! !

!methodRemoval: Sales #intializeWith: stamp: 'FG 11/29/2020 20:01:48'!
intializeWith: aCart
	books := aCart books.
	total := aCart total.
	!

Object subclass: #Sales
	instanceVariableNames: 'total books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #Sales category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 20:02:19'!
Object subclass: #Sales
	instanceVariableNames: 'total books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!Cashier methodsFor: 'checkout reports' stamp: 'FG 11/29/2020 20:03:15' prior: 50871786!
reportPayment: aSale
	^ aSale.
	! !

!classRenamed: #Sales as: #Sale stamp: 'FG 11/29/2020 20:03:58'!
Smalltalk renameClassNamed: #Sales as: #Sale!
!Cashier methodsFor: 'checkout' stamp: 'FG 11/29/2020 20:08:29' prior: 50872298!
checkout: aCart payingWith: aCreditCard
	
	self assertThatCreditCardHasNotExpired: aCreditCard.
	self assertThatCartIsNotEmpty: aCart.
	self assertThatAmountIsNotTooBig: aCart.
	
	^ interface payWith: aCreditCard for: (Sale of: aCart) requestedBy: self.! !
!OutputInterfaceSimulator methodsFor: 'simulate' stamp: 'FG 11/29/2020 20:08:45' prior: 50872129!
payWith: aCreditCard for: aSale requestedBy: aCashier

	"mandar al merchantProcesor"
	
	^expectedBehaviourBlock value: aCashier value: aSale.
	! !
!OutputInterfaceSimulator methodsFor: 'change behaviour' stamp: 'FG 11/29/2020 20:09:08' prior: 50872116!
nextPurchasesAreValidAndNeedToBeReported
	expectedBehaviourBlock _ [ :aCashier :aSale |
	aCashier reportPayment: aSale ].! !
!OutputInterfaceSimulator methodsFor: 'change behaviour' stamp: 'FG 11/29/2020 20:09:17' prior: 50872108!
invalidateNextPurchasesBecauseOfInvalidParameters
	expectedBehaviourBlock _ [ :aCashier :aSale |
	aCashier invalidatePurchaseBecauseOfInvalidParameter ].! !
!OutputInterfaceSimulator methodsFor: 'change behaviour' stamp: 'FG 11/29/2020 20:09:27' prior: 50872099!
invalidateNextPurchaseForACustomErrorDescription: anErrorDescription
	expectedBehaviourBlock _ [ :aCashier :aSale |
	aCashier invalidatePurchaseBecauseOf: anErrorDescription ].! !

!testRun: #CartTests #test01NewCartShouldBeEmpty stamp: 'FG 11/29/2020 20:11:35'!
PASSED!

!testRun: #CartTests #test02CartWithABookShouldNotBeEmpty stamp: 'FG 11/29/2020 20:11:35'!
PASSED!

!testRun: #CartTests #test03EmptyCartDoesntHasABook stamp: 'FG 11/29/2020 20:11:35'!
PASSED!

!testRun: #CartTests #test04CartShouldHaveAddedBook stamp: 'FG 11/29/2020 20:11:35'!
PASSED!

!testRun: #CartTests #test05CartShouldNotHaveNonAddedBook stamp: 'FG 11/29/2020 20:11:35'!
PASSED!

!testRun: #CartTests #test06CartShouldAnswerQuantityOfAnAddedBook stamp: 'FG 11/29/2020 20:11:35'!
PASSED!

!testRun: #CartTests #test07CartShouldProperlyAddMoreCopiesOfAnAlreadyAddedBook stamp: 'FG 11/29/2020 20:11:35'!
PASSED!

!testRun: #CartTests #test08CartShouldBeAbleToAnswerWhatBooksItHas stamp: 'FG 11/29/2020 20:11:35'!
PASSED!

!testRun: #CartTests #test09CartCantAddBookThatAreNotInTheCatalogue stamp: 'FG 11/29/2020 20:11:35'!
PASSED!

!testRun: #CartTests #test10CartCantAddANonIntegerAmountOfBooks stamp: 'FG 11/29/2020 20:11:35'!
PASSED!

!testRun: #CartTests #test11CartCantAddANonPositiveAmountOfBooks stamp: 'FG 11/29/2020 20:11:35'!
PASSED!
!CashierTests methodsFor: 'cashier tests' stamp: 'FG 11/29/2020 20:11:54' prior: 50871207!
test02CheckingOutACartWithABookReturnsItsPrice

	| cart cashier catalogue mathBook creditCard |
	
	creditCard := builder validCreditCard.
		
	mathBook := 'MathBook'.
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	
	cart := Cart with: catalogue.
	cart add: 1 of: mathBook. 
	
	cashier := Cashier payingThrough: OutputInterfaceSimulator new.
	
	self assert: (cashier checkout: cart payingWith: creditCard) total equals: 100.! !

!testRun: #CashierTests #test02CheckingOutACartWithABookReturnsItsPrice stamp: 'FG 11/29/2020 20:11:56'!
ERROR!

!testRun: #CashierTests #test02CheckingOutACartWithABookReturnsItsPrice stamp: 'FG 11/29/2020 20:11:56'!
ERROR!
!Cashier methodsFor: 'checkoutAssertions' stamp: 'FG 11/29/2020 20:12:29' prior: 50871790!
assertThatAmountIsNotTooBig: aCart
	
	((aCart total) < 1000000000000000) ifFalse:[self error: Cashier amountToBigToProcess].! !

!testRun: #CashierTests #test02CheckingOutACartWithABookReturnsItsPrice stamp: 'FG 11/29/2020 20:12:37'!
PASSED!
!CashierTests methodsFor: 'cashier tests' stamp: 'FG 11/29/2020 20:12:43' prior: 50871224!
test03CheckingOutWithTwoDifferentBooksReturnsTheSumOfBothPrices
	
	| cart cashier catalogue mathBook historyBook creditCard |
	
	creditCard := builder validCreditCard.
	
	mathBook := 'MathBook'.
	historyBook := 'HistoryBook'.	
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	catalogue add: historyBook -> 75.
	
	cart := Cart with: catalogue.
	cart add: 1 of: mathBook.
	cart add: 1 of: historyBook.
	
	cashier := Cashier payingThrough: OutputInterfaceSimulator new.
	
	self assert: (cashier checkout: cart payingWith: creditCard) total equals: 175.! !

!testRun: #CashierTests #test03CheckingOutWithTwoDifferentBooksReturnsTheSumOfBothPrices stamp: 'FG 11/29/2020 20:12:45'!
PASSED!
!CashierTests methodsFor: 'cashier tests' stamp: 'FG 11/29/2020 20:12:53' prior: 50871245!
test04CheckingOutMultipleCopiesOfTheSameBookReturnsItsPriceTimesTheQuantity

	| cart cashier catalogue mathBook creditCard |
	
	creditCard := builder validCreditCard.
	
	mathBook := 'MathBook'.	
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	
	cart := Cart with: catalogue.
	cart add: 3 of: mathBook.
	
	cashier := Cashier payingThrough: OutputInterfaceSimulator new.
	
	self assert: (cashier checkout: cart payingWith: creditCard) total equals: 300.! !

!testRun: #CashierTests #test04CheckingOutMultipleCopiesOfTheSameBookReturnsItsPriceTimesTheQuantity stamp: 'FG 11/29/2020 20:12:55'!
PASSED!
!CashierTests methodsFor: 'cashier tests' stamp: 'FG 11/29/2020 20:13:08' prior: 50871303!
test07CentsMustBeRoundedUpToTwoDigits
	| cart cashier catalogue mathBook creditCard |
	
	creditCard := builder validCreditCard.
	
	mathBook := 'MathBook'.	
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.002.
	
	cart := Cart with: catalogue.
	cart add: 1 of: mathBook.
	
	cashier := Cashier payingThrough: OutputInterfaceSimulator new.
	
	self assert: (cashier checkout: cart payingWith: creditCard) total equals: 100.01.! !

!testRun: #CashierTests #test07CentsMustBeRoundedUpToTwoDigits stamp: 'FG 11/29/2020 20:13:10'!
PASSED!

!testRun: #CreditCardTests #test01CreditCardNumberMustBeComposedOfDigits stamp: 'FG 11/29/2020 20:13:19'!
PASSED!

!testRun: #CreditCardTests #test02CreditCardNumberShouldHaveExactlySixteenDigits stamp: 'FG 11/29/2020 20:13:19'!
PASSED!

!testRun: #CreditCardTests #test03CreditCardOwnerNameCanNotBeEmpty stamp: 'FG 11/29/2020 20:13:19'!
PASSED!

!testRun: #CreditCardTests #test04IfOwnerNameHasMoreThanThirtyCharactersThenItGetsTruncated stamp: 'FG 11/29/2020 20:13:19'!
PASSED!

!testRun: #CreditCardTests #test05CreditCardExpirationDateIsKindaOfGregorianMonthOfYear stamp: 'FG 11/29/2020 20:13:19'!
PASSED!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 20:18:43' prior: 50871601!
test09

	| inputInterface users catalogue cartID aTransactionID |
	
	users := Dictionary new.
	users add: 'User'->'Password'.
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue.
	
	cartID := inputInterface createCartFor: 'User' withPassword: 'Password'.
	
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	aTransactionID := inputInterface checkoutCart: cartID withPlasticNumber: '0000000000000000' validThrough: '012021' namedAfter: 'Valid Name'.
	
	self assert: (inputInterface isAValidTransactionId: aTransactionID).! !

Object subclass: #InputInterface
	instanceVariableNames: 'usersLog userTransactions transactionsLog catalogue carts globalNextUserID globalTransactionsID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #InputInterface category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 20:19:55'!
Object subclass: #InputInterface
	instanceVariableNames: 'usersLog userTransactions transactionsLog catalogue carts globalNextUserID globalTransactionsID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!InputInterface methodsFor: 'export' stamp: 'FG 11/29/2020 20:20:37' prior: 50872018!
generateCartId
	globalNextUserID := (globalNextUserID asInteger + 1) asString.
	^globalNextUserID asSymbol.! !
!InputInterface methodsFor: 'export' stamp: 'FG 11/29/2020 20:20:45' prior: 50872639!
generateCartId
	globalNextUserID := (globalNextUserID asInteger + 1) asString.
	^globalNextUserID.! !

!testRun: #InputInterfaceTests #test01 stamp: 'FG 11/29/2020 20:20:56'!
ERROR!

!testRun: #InputInterfaceTests #test01 stamp: 'FG 11/29/2020 20:20:56'!
ERROR!

!testRun: #InputInterfaceTests #test01 stamp: 'FG 11/29/2020 20:21:05'!
ERROR!

!testRun: #InputInterfaceTests #test01 stamp: 'FG 11/29/2020 20:21:05'!
ERROR!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 20:21:40' prior: 50872024!
initializeWith: anUsersLog andACatalogue: aCatalogue

	usersLog := anUsersLog.
	catalogue := aCatalogue.
	carts := Dictionary new.
	globalNextUserID := '0'.! !

!testRun: #InputInterfaceTests #test01 stamp: 'FG 11/29/2020 20:21:46'!
PASSED!

!testRun: #InputInterfaceTests #test02 stamp: 'FG 11/29/2020 20:21:47'!
PASSED!

!testRun: #InputInterfaceTests #test03 stamp: 'FG 11/29/2020 20:21:48'!
PASSED!

!testRun: #InputInterfaceTests #test04 stamp: 'FG 11/29/2020 20:21:50'!
PASSED!

!testRun: #InputInterfaceTests #test05 stamp: 'FG 11/29/2020 20:21:51'!
PASSED!

!testRun: #InputInterfaceTests #test06 stamp: 'FG 11/29/2020 20:21:52'!
PASSED!

!testRun: #InputInterfaceTests #test07 stamp: 'FG 11/29/2020 20:21:53'!
PASSED!

!testRun: #InputInterfaceTests #test08 stamp: 'FG 11/29/2020 20:21:54'!
PASSED!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 20:24:51'!
checkoutCart: cartID withPlasticNumber: aPlasticNumber validThrough: aMonthAndYear namedAfter: anOwnerName

	! !
!InputInterface methodsFor: 'export' stamp: 'FG 11/29/2020 20:25:43' prior: 50872691!
checkoutCart: cartID withPlasticNumber: aPlasticNumber validThrough: aMonthAndYear namedAfter: anOwnerName

	| sale |
	
	sale := Cashier.

	! !
!InputInterface methodsFor: 'export' stamp: 'FG 11/29/2020 20:38:48' prior: 50872698!
checkoutCart: cartID withPlasticNumber: aPlasticNumber validThrough: aMonthAndYear namedAfter: anOwnerName

	| sale |
	
	sale := (Cashier payingThrough: OutputInterfaceSimulator new) 
				checkout: (carts at: cartID) 
				payingWith: (CreditCard withPlasticNumber: aPlasticNumber namedAfter: anOwnerName validThrough: (self changeDate: aMonthAndYear)) .

	! !
!InputInterface methodsFor: 'export' stamp: 'FG 11/29/2020 20:39:05' prior: 50872706!
checkoutCart: cartID withPlasticNumber: aPlasticNumber validThrough: aMonthAndYear namedAfter: anOwnerName

	| sale |
	
	sale := (Cashier payingThrough: OutputInterfaceSimulator new) 
				checkout: (carts at: cartID) 
				payingWith: (CreditCard withPlasticNumber: aPlasticNumber namedAfter: anOwnerName validThrough: (self changeDate: aMonthAndYear)) .
				
	^ sale.

	! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 20:40:58' prior: 50872663!
initializeWith: anUsersLog andACatalogue: aCatalogue

	usersLog := anUsersLog.
	catalogue := aCatalogue.
	carts := Dictionary new.
	transactionsLog  := Dictionary new..
	usersLog := Dictionary new.
	globalNextUserID := '0'.
	globalTransactionsID := '0'.! !
!InputInterface methodsFor: 'export' stamp: 'FG 11/29/2020 20:41:47' prior: 50872720!
checkoutCart: cartID withPlasticNumber: aPlasticNumber validThrough: aMonthAndYear namedAfter: anOwnerName

	| sale transactionID |
	
	sale := (Cashier payingThrough: OutputInterfaceSimulator new) 
				checkout: (carts at: cartID) 
				payingWith: (CreditCard withPlasticNumber: aPlasticNumber namedAfter: anOwnerName validThrough: (self changeDate: aMonthAndYear)) .
				
	transactionID.

	! !
!InputInterface methodsFor: 'export' stamp: 'FG 11/29/2020 20:42:56'!
generateTrasactionsId
	globalTransactionsID := (globalTransactionsID asInteger + 1) asString.
	^globalTransactionsID.! !
!InputInterface methodsFor: 'export' stamp: 'FG 11/29/2020 20:46:21' prior: 50872746!
checkoutCart: cartID withPlasticNumber: aPlasticNumber validThrough: aMonthAndYear namedAfter: anOwnerName

	| sale transactionID |
	
	sale := (Cashier payingThrough: OutputInterfaceSimulator new) 
				checkout: (carts at: cartID) 
				payingWith: (CreditCard withPlasticNumber: aPlasticNumber namedAfter: anOwnerName validThrough: (self changeDate: aMonthAndYear)) .
				
	transactionID := self generateTrasactionsId.
	
	transactionsLog add: transactionID -> sale.
	 
	
	^ transactionID.

	! !

Object subclass: #Constumer
	instanceVariableNames: 'username password carts sales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #Constumer category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 22:51:05'!
Object subclass: #Constumer
	instanceVariableNames: 'username password carts sales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!Constumer class methodsFor: 'no messages' stamp: 'FG 11/29/2020 22:52:43'!
withUsername: anUsername andPassword: aPassword

	^ self basicNew initializeWith: anUsername and: aPassword.! !
!Constumer methodsFor: 'nil' stamp: 'FG 11/29/2020 22:53:18'!
initializeWith: anUsername and: aPassword
	username  := anUsername.
	password  := aPassword.! !
!Constumer methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 22:53:42' prior: 50872806!
initializeWith: anUsername and: aPassword
	username  := anUsername.
	password  := aPassword.
	carts := Dictionary new.
	sales := Dictionary new.
	! !
!Constumer methodsFor: 'initialization' stamp: 'FG 11/29/2020 22:54:15' prior: 50872812!
initializeWith: anUsername and: aPassword
	username  := anUsername.
	password  := aPassword.
	carts := Dictionary new.
	sales := Dictionary new.
	! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 22:55:10' prior: 50871466!
test01

	| inputInterface users catalogue aCartID|
	
	users := OrderedCollection with: (0).
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue.
	
	aCartID := inputInterface createCartFor: 'User' withPassword: 'Password'.
	
	
	self assert: (inputInterface isAValidCartID: aCartID).! !

!classRenamed: #Constumer as: #Costumer stamp: 'FG 11/29/2020 22:55:16'!
Smalltalk renameClassNamed: #Constumer as: #Costumer!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 22:55:55' prior: 50872828!
test01

	| inputInterface users catalogue aCartID|
	
	users := OrderedCollection with: (Costumer withUsername: 'Username' andPassword: 'Password').
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue.
	
	aCartID := inputInterface createCartFor: 'User' withPassword: 'Password'.
	
	
	self assert: (inputInterface isAValidCartID: aCartID).! !
!InputInterface class methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 22:56:37' prior: 50872060!
newWith: anUsersCollection andACatalogue: aCatalogue

	^self basicNew initializeWith: anUsersCollection andACatalogue: aCatalogue.! !

!classDefinition: #InputInterface category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 22:57:01'!
Object subclass: #InputInterface
	instanceVariableNames: 'usersLog userTransactions transactionsLog catalogue carts globalNextUserID globalTransactionsID users'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 22:56:59' prior: 50872735!
initializeWith: anUsersCollection andACatalogue: aCatalogue

	users := anUsersCollection.
	catalogue := aCatalogue.
	carts := Dictionary new.
	transactionsLog  := Dictionary new..
	usersLog := Dictionary new.
	globalNextUserID := '0'.
	globalTransactionsID := '0'.! !

Object subclass: #InputInterface
	instanceVariableNames: 'userTransactions transactionsLog catalogue carts globalNextUserID globalTransactionsID users'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #InputInterface category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 22:57:09'!
Object subclass: #InputInterface
	instanceVariableNames: 'userTransactions transactionsLog catalogue carts globalNextUserID globalTransactionsID users'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 22:57:20' prior: 50872881!
initializeWith: anUsersCollection andACatalogue: aCatalogue

	users := anUsersCollection.
	catalogue := aCatalogue.
	carts := Dictionary new.
	transactionsLog  := Dictionary new.
	globalNextUserID := '0'.
	globalTransactionsID := '0'.! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 22:58:03' prior: 50872846!
test01

	| inputInterface users catalogue aCartID|
	
	users := OrderedCollection with: (Costumer withUsername: 'Username' andPassword: 'Password').
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue.
	
	aCartID := inputInterface createCartFor: 'User' withPassword: 'Password'.
	
	self assert: (inputInterface isAValidCartID: aCartID).! !

----End fileIn of C:\Users\FACU PC\Documents\Clases Virtuales\Cosas IS 1\Cuis University\Packages\TerseGuide.pck.st----!
!InputInterface methodsFor: 'export' stamp: 'FG 11/29/2020 23:01:53' prior: 50872004!
createCartFor: anUsername withPassword: aPassword
	
	| cartID |
	
	
	
	(users select:[:user | user username = anUsername]) isEmpty ifFalse: [self error: InputInterface wrongUsername].
	
	"((usersLog at: anUsername) = aPassword) ifFalse: [self error: InputInterface wrongPassword]."

	cartID := self generateCartId.
	
	carts add: cartID->(Cart with: catalogue).
	
	^cartID.! !
!Costumer methodsFor: 'nil' stamp: 'FG 11/29/2020 23:02:08'!
username 
	^ username.! !
!InputInterface methodsFor: 'export' stamp: 'FG 11/29/2020 23:05:28' prior: 50875874!
createCartFor: anUsername withPassword: aPassword
	
	| cartID |
	
	(users select:[:user | user username = anUsername]) isEmpty ifTrue: [self error: InputInterface wrongUsername].
	((users findFirst:[:user | user username = anUsername]) password = aPassword) ifFalse: [self error: InputInterface wrongPassword].

	cartID := self generateCartId.
	
	carts add: cartID->(Cart with: catalogue).
	
	^cartID.! !
!Costumer methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 23:05:41'!
password
	^ password.! !
!InputInterface methodsFor: 'export' stamp: 'FG 11/29/2020 23:08:14' prior: 50875892!
createCartFor: anUsername withPassword: aPassword
	
	| cartID foundUser |
	
	(users select:[:user | user username = anUsername]) isEmpty ifTrue: [self error: InputInterface wrongUsername].
	
	foundUser := users findFirst:[:user | user username = anUsername].
	
	(foundUser password = aPassword) ifFalse: [self error: InputInterface wrongPassword].

	cartID := self generateCartId.
	
	foundUser addCart: (Cart with: catalogue) withID: cartID.

	^cartID.! !
!Costumer methodsFor: 'nil' stamp: 'FG 11/29/2020 23:09:09'!
addCart: aCart with: aCartID

	carts add: aCartID -> aCart.! !
!Costumer methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 23:09:33'!
addCart: aCart withID: aCartID

	carts add: aCartID -> aCart.! !

!methodRemoval: Costumer #addCart:with: stamp: 'FG 11/29/2020 23:09:35'!
addCart: aCart with: aCartID

	carts add: aCartID -> aCart.!
!InputInterface methodsFor: 'export' stamp: 'FG 11/29/2020 23:09:48' prior: 50875912!
createCartFor: anUsername withPassword: aPassword
	
	| cartID foundUser |
	
	(users select:[:user | user username = anUsername]) isEmpty ifTrue: [self error: InputInterface wrongUsername].
	
	foundUser := users findFirst:[:user | user username = anUsername].
	
	(foundUser password = aPassword) ifFalse: [self error: InputInterface wrongPassword].

	cartID := self generateCartId.
	
	foundUser addCart: (Cart with: catalogue) withID: cartID.

	^ cartID.! !
!Costumer methodsFor: 'nil' stamp: 'FG 11/29/2020 23:11:05'!
isAValidCartID: cartID
	carts keys includes: cartID.! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 23:15:52' prior: 50872032!
isAValidCartID: aCartID

	^ users allSatisfy: [:user | (user isAValidCartID: aCartID) not ] not.	
	
	! !

!testRun: #InputInterfaceTests #test01 stamp: 'FG 11/29/2020 23:16:05'!
ERROR!

!testRun: #InputInterfaceTests #test01 stamp: 'FG 11/29/2020 23:16:05'!
ERROR!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 23:16:18' prior: 50872922!
test01

	| inputInterface users catalogue aCartID|
	
	users := OrderedCollection with: (Costumer withUsername: 'Username' andPassword: 'Password').
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue.
	
	aCartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	self assert: (inputInterface isAValidCartID: aCartID).! !

!testRun: #InputInterfaceTests #test01 stamp: 'FG 11/29/2020 23:16:19'!
ERROR!

!testRun: #InputInterfaceTests #test01 stamp: 'FG 11/29/2020 23:16:19'!
ERROR!

foundUser password!
!InputInterface methodsFor: 'export' stamp: 'FG 11/29/2020 23:17:38' prior: 50875943!
createCartFor: anUsername withPassword: aPassword
	
	| cartID foundUser |
	
	(users select:[:user | user username = anUsername]) isEmpty ifTrue: [self error: InputInterface wrongUsername].
	
	foundUser := users at: (users findFirst:[:user | user username = anUsername]).
	
	(foundUser password = aPassword) ifFalse: [self error: InputInterface wrongPassword].

	cartID := self generateCartId.
	
	foundUser addCart: (Cart with: catalogue) withID: cartID.

	^ cartID.! !

!testRun: #InputInterfaceTests #test01 stamp: 'FG 11/29/2020 23:17:42'!
ERROR!

!testRun: #InputInterfaceTests #test01 stamp: 'FG 11/29/2020 23:17:42'!
ERROR!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 23:18:28' prior: 50875965!
isAValidCartID: aCartID

	^ (users allSatisfy: [:user | (user isAValidCartID: aCartID) not ]) not.	
	
	! !

!testRun: #InputInterfaceTests #test01 stamp: 'FG 11/29/2020 23:18:32'!
ERROR!

!testRun: #InputInterfaceTests #test01 stamp: 'FG 11/29/2020 23:18:32'!
ERROR!
!Costumer methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 23:18:59' prior: 50875960!
isAValidCartID: cartID
	^ carts keys includes: cartID.! !

!testRun: #InputInterfaceTests #test01 stamp: 'FG 11/29/2020 23:19:06'!
PASSED!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 23:20:16' prior: 50871481!
test02

	| inputInterface users catalogue |
	
	users := OrderedCollection new.
	catalogue := Dictionary new.
	inputInterface := InputInterface newWith: users andACatalogue: catalogue.
	
	
	self should: [inputInterface createCartFor: 'WrongUser' withPassword: 'Password'] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongUsername. ].! !

!testRun: #InputInterfaceTests #test02 stamp: 'FG 11/29/2020 23:20:19'!
PASSED!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 23:21:30' prior: 50871496!
test03

	| inputInterface users catalogue |
	
	users := OrderedCollection with: (Costumer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue.
	
	self should: [inputInterface createCartFor: 'Username' withPassword: 'Wrong Password'] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongPassword. ].! !

!testRun: #InputInterfaceTests #test03 stamp: 'FG 11/29/2020 23:21:32'!
PASSED!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 23:22:37' prior: 50871512!
test04

	| inputInterface users catalogue cartID1 cartID2 |
	
	users := OrderedCollection with: (Costumer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue.
	
	cartID1 := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	cartID2 := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	self assert: (cartID1 = cartID2) not.! !

!testRun: #InputInterfaceTests #test04 stamp: 'FG 11/29/2020 23:22:40'!
PASSED!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 23:23:30' prior: 50871529!
test05

	| inputInterface users catalogue cartID |
	
	users := OrderedCollection with: (Costumer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue.
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	self assert: (inputInterface listCart: cartID) equals: Bag new.! !
!InputInterface methodsFor: 'export' stamp: 'FG 11/29/2020 23:30:49' prior: 50872042!
listCart: aCartID

	| user |
	
	(self isAValidCartID: aCartID) ifFalse: [self error: InputInterface wrongCartID].
	
	user := users at: (users findFirst:[:anUser | (anUser isAValidCartID: aCartID)]).
	
	^ (user carts at: aCartID) books.! !
!Costumer methodsFor: 'accessing' stamp: 'FG 11/29/2020 23:31:07'!
carts
	^ carts copy.! !

!testRun: #InputInterfaceTests #test05 stamp: 'FG 11/29/2020 23:31:25'!
PASSED!

!testRun: #InputInterfaceTests #test06 stamp: 'FG 11/29/2020 23:31:29'!
FAILURE!

!testRun: #InputInterfaceTests #test06 stamp: 'FG 11/29/2020 23:31:29'!
FAILURE!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 23:32:03' prior: 50871544!
test06

	| inputInterface users catalogue cartID |
	
	users := OrderedCollection with: (Costumer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue.
	
	cartID := '1' asSymbol.
	
	self should: [inputInterface listCart: cartID] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongCartID. ].! !

!testRun: #InputInterfaceTests #test06 stamp: 'FG 11/29/2020 23:32:10'!
PASSED!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 23:33:29' prior: 50871560!
test07

	| inputInterface users catalogue cartID resultingContents |
	
	users := OrderedCollection with: (Costumer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue.
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	resultingContents := Bag new.
	resultingContents add: 'mathBook' withOccurrences: 1.
	
	self assert: (inputInterface listCart: cartID) equals: resultingContents.! !
!InputInterface methodsFor: 'export' stamp: 'FG 11/29/2020 23:34:06' prior: 50871995!
addToCart: aCartID anAmount: anAmount ofABookISBN: aBookISBN

	(self isAValidCartID: aCartID) ifFalse: [self error: InputInterface wrongCartID].

	(carts at: aCartID) add: anAmount of: aBookISBN.! !
!InputInterface methodsFor: 'export' stamp: 'FG 11/29/2020 23:35:30' prior: 50876182!
addToCart: aCartID anAmount: anAmount ofABookISBN: aBookISBN

	(self isAValidCartID: aCartID) ifFalse: [self error: InputInterface wrongCartID].

	(users at: (users findFirst:[:anUser | (anUser isAValidCartID: aCartID)])) add: anAmount of: aBookISBN to: aCartID.! !
!Costumer methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 23:36:26'!
add: anAmount of: aBookISBN to: aCartID

	(carts at: aCartID) add: anAmount of: aBookISBN.! !

!testRun: #InputInterfaceTests #test07 stamp: 'FG 11/29/2020 23:36:40'!
PASSED!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 23:36:54' prior: 50871582!
test08

	| inputInterface users catalogue cartID |
	
	users := Dictionary new.
	
	users add: 'User'->'Password'.
	
	catalogue := Dictionary new.
	
	catalogue add: 'mathBook'->100.
	
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue.
	
	cartID := '1' asSymbol.
	
	self should: [inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongCartID. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 23:37:17' prior: 50876211!
test08

	| inputInterface users catalogue cartID |
	
	users := OrderedCollection with: (Costumer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue.
	
	cartID := '1' asSymbol.
	
	self should: [inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongCartID. ].! !

!testRun: #InputInterfaceTests #test08 stamp: 'FG 11/29/2020 23:37:19'!
PASSED!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 23:38:57'!
isAValidSalesID: aSaleID

	^carts keys includes: aSaleID.! !

!methodRemoval: InputInterface #isAValidTransactionID: stamp: 'FG 11/29/2020 23:39:02'!
isAValidTransactionID: aCartID

	^carts keys includes: aCartID.!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 23:39:25' prior: 50872598!
test09

	| inputInterface users catalogue cartID aTransactionID |
	
	users := Dictionary new.
	users add: 'User'->'Password'.
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue.
	
	cartID := inputInterface createCartFor: 'User' withPassword: 'Password'.
	
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	aTransactionID := inputInterface checkoutCart: cartID withPlasticNumber: '0000000000000000' validThrough: '012021' namedAfter: 'Valid Name'.
	
	self assert: (inputInterface isAValidSalesID: aTransactionID).! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 23:40:00' prior: 50876262!
test09

	| inputInterface users catalogue cartID aSaleID |
	
	users := Dictionary new.
	users add: 'User'->'Password'.
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue.
	
	cartID := inputInterface createCartFor: 'User' withPassword: 'Password'.
	
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	aSaleID := inputInterface checkoutCart: cartID withPlasticNumber: '0000000000000000' validThrough: '012021' namedAfter: 'Valid Name'.
	
	self assert: (inputInterface isAValidSalesID: aSaleID).! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 23:40:17' prior: 50876285!
test09

	| inputInterface users catalogue cartID aSaleID |
	
	users := OrderedCollection with: (Costumer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue.
	
	cartID := inputInterface createCartFor: 'User' withPassword: 'Password'.
	
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	aSaleID := inputInterface checkoutCart: cartID withPlasticNumber: '0000000000000000' validThrough: '012021' namedAfter: 'Valid Name'.
	
	self assert: (inputInterface isAValidSalesID: aSaleID).! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 23:40:49' prior: 50876308!
test09

	| inputInterface users catalogue cartID aSaleID |
	
	users := OrderedCollection with: (Costumer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue.
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	aSaleID := inputInterface checkoutCart: cartID withPlasticNumber: '0000000000000000' validThrough: '012021' namedAfter: 'Valid Name'.
	
	self assert: (inputInterface isAValidSalesID: aSaleID).! !

Object subclass: #InputInterface
	instanceVariableNames: 'catalogue globalNextUserID globalTransactionsID users'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #InputInterface category: 'Ejercicio-TusLibros.com' stamp: 'FG 11/29/2020 23:41:39'!
Object subclass: #InputInterface
	instanceVariableNames: 'catalogue globalNextUserID globalTransactionsID users'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 23:41:55' prior: 50872911!
initializeWith: anUsersCollection andACatalogue: aCatalogue

	users := anUsersCollection.
	catalogue := aCatalogue.
	globalNextUserID := '0'.
	globalTransactionsID := '0'.! !
!InputInterface methodsFor: 'export' stamp: 'FG 11/29/2020 23:44:59' prior: 50872768!
checkoutCart: cartID withPlasticNumber: aPlasticNumber validThrough: aMonthAndYear namedAfter: anOwnerName

	| sale saleID foundUser |
	
	sale := (Cashier payingThrough: OutputInterfaceSimulator new) 
				checkout: (cartID) 
				payingWith: (CreditCard withPlasticNumber: aPlasticNumber namedAfter: anOwnerName validThrough: (self changeDate: aMonthAndYear)) .
				
	saleID := self generateTrasactionsId.
	
	foundUser addSale: sale withID: saleID.

	^ saleID.

	! !
!InputInterface methodsFor: 'export' stamp: 'FG 11/29/2020 23:45:29'!
generateSaleID
	globalTransactionsID := (globalTransactionsID asInteger + 1) asString.
	^globalTransactionsID.! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 23:45:29' prior: 50876380!
checkoutCart: cartID withPlasticNumber: aPlasticNumber validThrough: aMonthAndYear namedAfter: anOwnerName

	| sale saleID foundUser |
	
	sale := (Cashier payingThrough: OutputInterfaceSimulator new) 
				checkout: (cartID) 
				payingWith: (CreditCard withPlasticNumber: aPlasticNumber namedAfter: anOwnerName validThrough: (self changeDate: aMonthAndYear)) .
				
	saleID := self generateSaleID.
	
	foundUser addSale: sale withID: saleID.

	^ saleID.

	! !

!methodRemoval: InputInterface #generateTrasactionsId stamp: 'FG 11/29/2020 23:45:29'!
generateTrasactionsId
	globalTransactionsID := (globalTransactionsID asInteger + 1) asString.
	^globalTransactionsID.!
!InputInterface methodsFor: 'export' stamp: 'FG 11/29/2020 23:47:41' prior: 50876404!
checkoutCart: aCartID withPlasticNumber: aPlasticNumber validThrough: aMonthAndYearString namedAfter: anOwnerName

	| sale saleID foundUser |

	(self isAValidCartID: aCartID) ifFalse: [self error: InputInterface wrongCartID].

	foundUser := users at: (users findFirst:[:anUser | (anUser isAValidCartID: aCartID)]).
	
	sale := (Cashier payingThrough: OutputInterfaceSimulator new) 
				checkout: (foundUser carts at: aCartID) 
				payingWith: (CreditCard withPlasticNumber: aPlasticNumber namedAfter: anOwnerName validThrough: (self changeDate: aMonthAndYearString)) .
				
	saleID := self generateSaleID.
	
	foundUser addSale: sale withID: saleID.

	^ saleID.

	! !
!Costumer methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 23:48:15'!
addSale: sale withID: saleID.

	sales add: saleID -> sale.! !
!InputInterface methodsFor: 'export' stamp: 'FG 11/29/2020 23:52:36'!
changeDate: aMonthAndYearString

	|month year|
	
	month := (aMonthAndYearString copyFrom: 0 to: 2) asInteger.
	year :=  (aMonthAndYearString copyFrom: 2 to: 6) asInteger.
	
	^ GregorianMonthOfYear year: (GregorianYear createYear: year) month: month.

	! !

!testRun: #InputInterfaceTests #test09 stamp: 'FG 11/29/2020 23:52:51'!
ERROR!

!testRun: #InputInterfaceTests #test09 stamp: 'FG 11/29/2020 23:52:51'!
ERROR!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 23:53:32' prior: 50876457!
changeDate: aMonthAndYearString

	|month year|
	
	month := (aMonthAndYearString copyFrom: 1 to: 2) asInteger.
	year :=  (aMonthAndYearString copyFrom: 3 to: 6) asInteger.
	
	^ GregorianMonthOfYear year: (GregorianYear createYear: year) month: month.

	! !

!testRun: #InputInterfaceTests #test09 stamp: 'FG 11/29/2020 23:53:41'!
ERROR!

!testRun: #InputInterfaceTests #test09 stamp: 'FG 11/29/2020 23:53:41'!
ERROR!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 23:54:27' prior: 50876252!
isAValidSalesID: aSaleID

	^ (users allSatisfy: [:user | (user isAValidSaleID: aSaleID) not ]) not.	! !
!Costumer methodsFor: 'as yet unclassified' stamp: 'FG 11/29/2020 23:54:49'!
isAValidSaleID: saleID
	^ sales keys includes: saleID.! !

!testRun: #InputInterfaceTests #test09 stamp: 'FG 11/29/2020 23:54:54'!
PASSED!

----QUIT----(29 November 2020 23:57:33) CuisUniversity-4384.image priorSource: 17155564!

----STARTUP---- (30 November 2020 18:04:41) as C:\Users\FACU PC\Documents\Clases Virtuales\Cosas IS 1\Cuis University\CuisUniversity-4384.image!


----QUIT----(30 November 2020 20:12:05) CuisUniversity-4384.image priorSource: 17435306!

----STARTUP---- (30 November 2020 23:32:59) as C:\Users\FACU PC\Documents\Clases Virtuales\Cosas IS 1\Cuis University\CuisUniversity-4384.image!


----QUIT----(1 December 2020 00:52:53) CuisUniversity-4384.image priorSource: 17435543!

----STARTUP---- (1 December 2020 21:57:05) as C:\Users\FACU PC\Documents\Clases Virtuales\Cosas IS 1\Cuis University\CuisUniversity-4384.image!


!classRemoval: #TestObjectBuilder stamp: 'FG 12/1/2020 21:57:10'!
Object subclass: #TestObjectBuilder
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classRemoval: #Sale stamp: 'FG 12/1/2020 21:57:11'!
Object subclass: #Sale
	instanceVariableNames: 'total books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classRemoval: #OutputInterfaceSimulator stamp: 'FG 12/1/2020 21:57:11'!
Object subclass: #OutputInterfaceSimulator
	instanceVariableNames: 'expectedBehaviourBlock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classRemoval: #InputInterface stamp: 'FG 12/1/2020 21:57:11'!
Object subclass: #InputInterface
	instanceVariableNames: 'catalogue globalNextUserID globalTransactionsID users'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classRemoval: #CreditCard stamp: 'FG 12/1/2020 21:57:11'!
Object subclass: #CreditCard
	instanceVariableNames: 'plasticNumber ownerName expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classRemoval: #Costumer stamp: 'FG 12/1/2020 21:57:12'!
Object subclass: #Costumer
	instanceVariableNames: 'username password carts sales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classRemoval: #Cashier stamp: 'FG 12/1/2020 21:57:12'!
Object subclass: #Cashier
	instanceVariableNames: 'interface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classRemoval: #Cart stamp: 'FG 12/1/2020 21:57:13'!
Object subclass: #Cart
	instanceVariableNames: 'books catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classRemoval: #InputInterfaceTests stamp: 'FG 12/1/2020 21:57:13'!
TusLibrosExerciseTests subclass: #InputInterfaceTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classRemoval: #CreditCardTests stamp: 'FG 12/1/2020 21:57:13'!
TusLibrosExerciseTests subclass: #CreditCardTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classRemoval: #CashierTests stamp: 'FG 12/1/2020 21:57:13'!
TusLibrosExerciseTests subclass: #CashierTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classRemoval: #CartTests stamp: 'FG 12/1/2020 21:57:14'!
TusLibrosExerciseTests subclass: #CartTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classRemoval: #TusLibrosExerciseTests stamp: 'FG 12/1/2020 21:57:14'!
TestCase subclass: #TusLibrosExerciseTests
	instanceVariableNames: 'builder'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

----End fileIn of C:\Users\FACU PC\Downloads\Ejercicio-TusLibros.com (5).st----!
!Customer methodsFor: 'initialization' stamp: 'FG 12/1/2020 22:34:52' prior: 50877652!
initializeWith: anUsername and: aPassword and: aCartAuthenticationDuration 
	
	username  := anUsername.
	password  := aPassword.
	carts := Dictionary new.
	sales := Dictionary new.
	authenticationDuration := aCartAuthenticationDuration.! !

Object subclass: #InputInterface
	instanceVariableNames: 'catalogue globalNextUserID globalTransactionsID users carts clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #InputInterface category: 'Ejercicio-TusLibros.com' stamp: 'FG 12/1/2020 22:42:01'!
Object subclass: #InputInterface
	instanceVariableNames: 'catalogue globalNextUserID globalTransactionsID users carts clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'FG 12/1/2020 22:43:54' prior: 50877765!
initializeWith: anUsersCollection andACatalogue: aCatalogue withClock: aClock

	
	
	users := self createUserDirectoryFrom: anUsersCollection.
	catalogue := aCatalogue.
	clock := aClock.
	globalNextUserID := '0'.
	globalTransactionsID := '0'.! !

!methodRemoval: InputInterface #initializeWith:andACatalogue: stamp: 'FG 12/1/2020 22:44:15'!
initializeWith: anUsersCollection andACatalogue: aCatalogue

	users := anUsersCollection.
	catalogue := aCatalogue.
	globalNextUserID := '0'.
	globalTransactionsID := '0'.!
!InputInterface methodsFor: 'initialization' stamp: 'FG 12/1/2020 22:47:57'!
createUserDirectoryFrom: anUsersCollection
	
	| userDirectory |
	
	userDirectory := Dictionary new.
	
	anUsersCollection do: [:anUser | userDirectory add: anUser username -> anUser ].
	
	^ userDirectory.! !
!InputInterface methodsFor: 'initialization' stamp: 'FG 12/1/2020 22:52:43' prior: 50878182!
initializeWith: anUsersCollection andACatalogue: aCatalogue withClock: aClock

	users := self createUserDirectoryFrom: anUsersCollection.
	carts := Dictionary new.
	catalogue := aCatalogue.
	clock := aClock.
	globalNextUserID := '0'.
	globalTransactionsID := '0'.! !
!InputInterface methodsFor: 'export' stamp: 'FG 12/1/2020 22:56:38' prior: 50877826!
createCartFor: anUsername withPassword: aPassword
	
	| cartID |
	
	(users keys includes: anUsername) ifTrue: [self error: InputInterface wrongUsername].
	
	((users at: anUsername) password = aPassword) ifFalse: [self error: InputInterface wrongPassword].

	cartID := self generateCartId.
	
	(users at: anUsername) addCart: (Cart with: catalogue) withID: cartID at: clock now.

	^ cartID.! !
!InputInterface methodsFor: 'assertions' stamp: 'FG 12/1/2020 22:57:19'!
assertValidUsername: anUsername

	(users keys includes: anUsername) ifTrue: [self error: InputInterface wrongUsername].! !
!InputInterface methodsFor: 'export' stamp: 'FG 12/1/2020 22:58:54'!
assertThan: aPassword isPasswordOf: anUsername

	((users at: anUsername) password = aPassword) ifFalse: [self error: InputInterface wrongPassword].! !
!InputInterface methodsFor: 'assertions' stamp: 'FG 12/1/2020 22:59:31'!
validateUsername: anUsername

	(users keys includes: anUsername) ifTrue: [self error: InputInterface wrongUsername].! !

!methodRemoval: InputInterface #assertValidUsername: stamp: 'FG 12/1/2020 22:59:31'!
assertValidUsername: anUsername

	(users keys includes: anUsername) ifTrue: [self error: InputInterface wrongUsername].!
!InputInterface methodsFor: 'assertions' stamp: 'FG 12/1/2020 22:59:53'!
validatePassword: aPassword for: anUsername

	((users at: anUsername) password = aPassword) ifFalse: [self error: InputInterface wrongPassword].! !

!methodRemoval: InputInterface #assertThan:isPasswordOf: stamp: 'FG 12/1/2020 22:59:53'!
assertThan: aPassword isPasswordOf: anUsername

	((users at: anUsername) password = aPassword) ifFalse: [self error: InputInterface wrongPassword].!
!InputInterface methodsFor: 'export' stamp: 'FG 12/1/2020 23:01:58' prior: 50878222!
createCartFor: anUsername withPassword: aPassword
	
	| cartID |
	
	self validateUsername: anUsername.
	self validatePassword: aPassword for: anUsername.
	
	cartID := self generateCartId.
	
	(users at: anUsername) addCart: (Cart with: catalogue) withID: cartID at: clock now.

	^ cartID.! !
!InputInterface methodsFor: 'export' stamp: 'FG 12/1/2020 23:04:12' prior: 50878278!
createCartFor: anUsername withPassword: aPassword
	
	| cartID |
	
	self validateUsername: anUsername.
	self validatePassword: aPassword for: anUsername.
	
	cartID := self generateCartId.
	
	carts add: cartID -> anUsername.
	(users at: anUsername) addCart: (Cart with: catalogue) withID: cartID at: clock now.

	^ cartID.! !
!InputInterface methodsFor: 'validations' stamp: 'FG 12/1/2020 23:05:10'!
validateCartID: aCartID

	^ (users allSatisfy: [:user | (user isAValidCartID: aCartID) not ]) not.	
	
	! !
!Customer methodsFor: 'as yet unclassified' stamp: 'FG 12/1/2020 23:05:10'!
validateCartID: cartID
	^ carts keys includes: cartID.! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/1/2020 23:05:10' prior: 50877088!
test01

	| inputInterface users catalogue aCartID|
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password' authenticatingCartsFor: (Duration minutes: 30)).
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new.
	
	aCartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	self assert: (inputInterface validateCartID: aCartID).! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'FG 12/1/2020 23:05:10' prior: 50877775!
isAValidCartID: aCartID

	^ (users allSatisfy: [:user | (user validateCartID: aCartID) not ]) not.	
	
	! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'FG 12/1/2020 23:05:10' prior: 50877802!
checkoutCart: aCartID withPlasticNumber: aPlasticNumber validThrough: aMonthAndYearString namedAfter: anOwnerName

	| sale saleID foundUser |

	(self validateCartID: aCartID) ifFalse: [self error: InputInterface wrongCartID].

	foundUser := users at: (users findFirst:[:anUser | (anUser validateCartID: aCartID)]).
	
	sale := (Cashier payingThrough: OutputInterfaceSimulator new) 
				checkout: (foundUser carts at: aCartID) 
				payingWith: (CreditCard withPlasticNumber: aPlasticNumber namedAfter: anOwnerName validThrough: (self changeDate: aMonthAndYearString)) at: builder currentMonthOfYear .
				
	saleID := self generateSaleID.
	
	foundUser addSale: sale withID: saleID.

	^ saleID.

	! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'FG 12/1/2020 23:05:10' prior: 50877787!
addToCart: aCartID anAmount: anAmount ofABookISBN: aBookISBN

	| user |
	
	(self validateCartID: aCartID) ifFalse: [self error: InputInterface wrongCartID].
	
	user := users at: (users findFirst:[:anUser | (anUser validateCartID: aCartID)]).
	
	"user checkCartID: aCartID isStillAuthenticatedFor: self at: clock now."

	user add: anAmount of: aBookISBN to: aCartID at: clock now for: self.! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'FG 12/1/2020 23:05:10' prior: 50877856!
listCart: aCartID

	| user |
	
	(self validateCartID: aCartID) ifFalse: [self error: InputInterface wrongCartID].
	
	user := users at: (users findFirst:[:anUser | (anUser validateCartID: aCartID)]).
	
	^ (user carts at: aCartID) books.! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'FG 12/1/2020 23:05:10' prior: 50878303!
validateCartID: aCartID

	^ (users allSatisfy: [:user | (user validateCartID: aCartID) not ]) not.	
	
	! !

!methodRemoval: InputInterface #isAValidCartID: stamp: 'FG 12/1/2020 23:05:10'!
isAValidCartID: aCartID

	^ (users allSatisfy: [:user | (user validateCartID: aCartID) not ]) not.	
	
	!

!methodRemoval: Customer #isAValidCartID: stamp: 'FG 12/1/2020 23:05:10'!
isAValidCartID: cartID
	^ carts keys includes: cartID.!
!InputInterface methodsFor: 'validations' stamp: 'FG 12/1/2020 23:05:33'!
validateSaleID: aSaleID

	^ (users allSatisfy: [:user | (user isAValidSaleID: aSaleID) not ]) not.	! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/1/2020 23:05:33' prior: 50877275!
test20

	| inputInterface users catalogue cartID aSaleID |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password' authenticatingCartsFor: (Duration minutes: 30)).
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new.
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	aSaleID := inputInterface checkoutCart: cartID withPlasticNumber: '0000000000000000' validThrough: '012021' namedAfter: 'Valid Name'.
	
	self assert: (inputInterface validateSaleID: aSaleID).! !

!methodRemoval: InputInterface #isAValidSalesID: stamp: 'FG 12/1/2020 23:05:33'!
isAValidSalesID: aSaleID

	^ (users allSatisfy: [:user | (user isAValidSaleID: aSaleID) not ]) not.	!
!InputInterface methodsFor: 'validations' stamp: 'FG 12/1/2020 23:07:02' prior: 50878392!
validateCartID: aCartID

	^ (users at: (carts at: aCartID)) validateCartID: aCartID .	
	
	! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'FG 12/1/2020 23:07:40'!
ownerOf: aCartID
	^ (users at: (carts at: aCartID))
	! !
!InputInterface methodsFor: 'validations' stamp: 'FG 12/1/2020 23:08:26' prior: 50878447!
validateCartID: aCartID

	^ (self ownerOf: aCartID) validateCartID: aCartID .	
	
	! !
!InputInterface methodsFor: 'validations' stamp: 'FG 12/1/2020 23:27:31' prior: 50878458!
validateCartID: aCartID

	^ (carts keys includes: aCartID) and: [(self ownerOf: aCartID) validateCartID: aCartID].	
	
	! !

!testRun: #InputInterfaceTests #test01 stamp: 'FG 12/1/2020 23:28:41'!
ERROR!

!testRun: #InputInterfaceTests #test01 stamp: 'FG 12/1/2020 23:28:41'!
ERROR!
!InputInterface methodsFor: 'initialization' stamp: 'FG 12/1/2020 23:29:45' prior: 50878201!
createUserDirectoryFrom: anUsersCollection
	
	| userDirectory |
	
	userDirectory := Dictionary new.
	
	anUsersCollection do: [:anUser | userDirectory add: (anUser username) -> anUser ].
	
	^ userDirectory.! !

!testRun: #InputInterfaceTests #test01 stamp: 'FG 12/1/2020 23:29:48'!
ERROR!

!testRun: #InputInterfaceTests #test01 stamp: 'FG 12/1/2020 23:29:48'!
ERROR!

!testRun: #InputInterfaceTests #test01 stamp: 'FG 12/1/2020 23:29:59'!
ERROR!
!InputInterface methodsFor: 'validations' stamp: 'FG 12/1/2020 23:30:38' prior: 50878250!
validateUsername: anUsername

	(users keys includes: anUsername) ifFalse: [self error: InputInterface wrongUsername].! !

!testRun: #InputInterfaceTests #test01 stamp: 'FG 12/1/2020 23:30:59'!
PASSED!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/1/2020 23:31:17' prior: 50877106!
test02

	| inputInterface users catalogue |
	
	users := OrderedCollection new.
	catalogue := Dictionary new.
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new.
	
	self should: [inputInterface createCartFor: 'WrongUser' withPassword: 'Password'] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongUsername. ].! !

!testRun: #InputInterfaceTests #test02 stamp: 'FG 12/1/2020 23:31:19'!
PASSED!

!testRun: #InputInterfaceTests #test03 stamp: 'FG 12/1/2020 23:31:23'!
PASSED!

!testRun: #InputInterfaceTests #test04 stamp: 'FG 12/1/2020 23:31:35'!
PASSED!
!InputInterface methodsFor: 'validations' stamp: 'FG 12/1/2020 23:34:10' prior: 50878464!
validateCartID: aCartID

	^ ((carts keys includes: aCartID) and: [(self ownerOf: aCartID) validateCartID: aCartID])
		ifFalse: [self error: 'asdas'].	
	
	! !
!InputInterface methodsFor: 'validations' stamp: 'FG 12/1/2020 23:34:39' prior: 50878527!
validateCartID: aCartID

	^ ((carts keys includes: aCartID) and: [(self ownerOf: aCartID) validateCartID: aCartID])
		ifFalse: [self error: InputInterface wrongCartID].	
	
	! !

!testRun: #InputInterfaceTests #test01 stamp: 'FG 12/1/2020 23:35:12'!
ERROR!

!testRun: #InputInterfaceTests #test01 stamp: 'FG 12/1/2020 23:35:12'!
ERROR!
!InputInterface methodsFor: 'validations' stamp: 'FG 12/1/2020 23:35:41' prior: 50878535!
validateCartID: aCartID

	^ ((carts keys includes: aCartID) and: [(self ownerOf: aCartID) validateCartID: aCartID])
	
	! !
!InputInterface methodsFor: 'validations' stamp: 'FG 12/1/2020 23:36:36'!
isValidCartID: aCartID

	^ ((carts keys includes: aCartID) and: [(self ownerOf: aCartID) validateCartID: aCartID])
	
	! !
!Customer methodsFor: 'as yet unclassified' stamp: 'FG 12/1/2020 23:36:36'!
isValidCartID: cartID
	^ carts keys includes: cartID.! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/1/2020 23:36:36' prior: 50878315!
test01

	| inputInterface users catalogue aCartID|
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password' authenticatingCartsFor: (Duration minutes: 30)).
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new.
	
	aCartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	self assert: (inputInterface isValidCartID: aCartID).! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'FG 12/1/2020 23:36:36' prior: 50878381!
listCart: aCartID

	| user |
	
	(self isValidCartID: aCartID) ifFalse: [self error: InputInterface wrongCartID].
	
	user := users at: (users findFirst:[:anUser | (anUser isValidCartID: aCartID)]).
	
	^ (user carts at: aCartID) books.! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'FG 12/1/2020 23:36:36' prior: 50878549!
validateCartID: aCartID

	^ ((carts keys includes: aCartID) and: [(self ownerOf: aCartID) isValidCartID: aCartID])
	
	! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'FG 12/1/2020 23:36:36' prior: 50878340!
checkoutCart: aCartID withPlasticNumber: aPlasticNumber validThrough: aMonthAndYearString namedAfter: anOwnerName

	| sale saleID foundUser |

	(self isValidCartID: aCartID) ifFalse: [self error: InputInterface wrongCartID].

	foundUser := users at: (users findFirst:[:anUser | (anUser isValidCartID: aCartID)]).
	
	sale := (Cashier payingThrough: OutputInterfaceSimulator new) 
				checkout: (foundUser carts at: aCartID) 
				payingWith: (CreditCard withPlasticNumber: aPlasticNumber namedAfter: anOwnerName validThrough: (self changeDate: aMonthAndYearString)) at: builder currentMonthOfYear .
				
	saleID := self generateSaleID.
	
	foundUser addSale: sale withID: saleID.

	^ saleID.

	! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'FG 12/1/2020 23:36:36' prior: 50878365!
addToCart: aCartID anAmount: anAmount ofABookISBN: aBookISBN

	| user |
	
	(self isValidCartID: aCartID) ifFalse: [self error: InputInterface wrongCartID].
	
	user := users at: (users findFirst:[:anUser | (anUser isValidCartID: aCartID)]).
	
	"user checkCartID: aCartID isStillAuthenticatedFor: self at: clock now."

	user add: anAmount of: aBookISBN to: aCartID at: clock now for: self.! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'FG 12/1/2020 23:36:36' prior: 50878556!
isValidCartID: aCartID

	^ ((carts keys includes: aCartID) and: [(self ownerOf: aCartID) isValidCartID: aCartID])
	
	! !

!methodRemoval: InputInterface #validateCartID: stamp: 'FG 12/1/2020 23:36:36'!
validateCartID: aCartID

	^ ((carts keys includes: aCartID) and: [(self ownerOf: aCartID) isValidCartID: aCartID])
	
	!

!methodRemoval: Customer #validateCartID: stamp: 'FG 12/1/2020 23:36:36'!
validateCartID: cartID
	^ carts keys includes: cartID.!
!InputInterface methodsFor: 'validations' stamp: 'FG 12/1/2020 23:36:58'!
isValidSaleID: aSaleID

	^ (users allSatisfy: [:user | (user isAValidSaleID: aSaleID) not ]) not.	! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/1/2020 23:36:58' prior: 50878415!
test20

	| inputInterface users catalogue cartID aSaleID |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password' authenticatingCartsFor: (Duration minutes: 30)).
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new.
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	aSaleID := inputInterface checkoutCart: cartID withPlasticNumber: '0000000000000000' validThrough: '012021' namedAfter: 'Valid Name'.
	
	self assert: (inputInterface isValidSaleID: aSaleID).! !

!methodRemoval: InputInterface #validateSaleID: stamp: 'FG 12/1/2020 23:36:58'!
validateSaleID: aSaleID

	^ (users allSatisfy: [:user | (user isAValidSaleID: aSaleID) not ]) not.	!
!InputInterface methodsFor: 'validations' stamp: 'FG 12/1/2020 23:38:35'!
validateCartID: aCartID
	
	(self isValidCartID: aCartID) ifFalse: [self error: InputInterface wrongCartID].
	! !
!InputInterface methodsFor: 'export' stamp: 'FG 12/1/2020 23:40:06' prior: 50878586!
listCart: aCartID

	
	
	self validateCartID: aCartID.
	
	^ ((self ownerOf: aCartID) carts at: aCartID) books.! !
!InputInterface methodsFor: 'export' stamp: 'FG 12/1/2020 23:40:12' prior: 50878707!
listCart: aCartID

	self validateCartID: aCartID.
	
	^ ((self ownerOf: aCartID) carts at: aCartID) books.! !

!testRun: #InputInterfaceTests #test05 stamp: 'FG 12/1/2020 23:40:29'!
PASSED!

!testRun: #InputInterfaceTests #test06 stamp: 'FG 12/1/2020 23:40:31'!
PASSED!

!testRun: #InputInterfaceTests #test07 stamp: 'FG 12/1/2020 23:40:38'!
ERROR!

!testRun: #InputInterfaceTests #test07 stamp: 'FG 12/1/2020 23:40:38'!
ERROR!
!InputInterface methodsFor: 'export' stamp: 'FG 12/1/2020 23:42:33' prior: 50878629!
addToCart: aCartID anAmount: anAmount ofABookISBN: aBookISBN

	
	
	self validateCartID: aCartID.
	"user checkCartID: aCartID isStillAuthenticatedFor: self at: clock now."

	(self ownerOf: aCartID) add: anAmount of: aBookISBN to: aCartID at: clock now for: self.! !
!InputInterface methodsFor: 'export' stamp: 'FG 12/1/2020 23:42:38' prior: 50878730!
addToCart: aCartID anAmount: anAmount ofABookISBN: aBookISBN

	self validateCartID: aCartID.
	"user checkCartID: aCartID isStillAuthenticatedFor: self at: clock now."

	(self ownerOf: aCartID) add: anAmount of: aBookISBN to: aCartID at: clock now for: self.! !

!testRun: #InputInterfaceTests #test07 stamp: 'FG 12/1/2020 23:42:52'!
PASSED!

!testRun: #InputInterfaceTests #test08 stamp: 'FG 12/1/2020 23:42:56'!
PASSED!
!Cart methodsFor: 'asserting' stamp: 'FG 12/2/2020 00:06:53'!
lastAccessWasBefore: aDuration from: aCurrentDateAndTime for: aRequestingInterface
	
	^ (lastAccess + aDuration < aCurrentDateAndTime) ifTrue: [ aRequestingInterface reportCartAuthenticationExpired ].! !
!Customer methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:06:53' prior: 50877672!
add: anAmount of: aBookISBN to: aCartID at: aCurrentDateAndTime for: aRequestingInterface

	| cart |

	cart := (carts at: aCartID).
	
	cart lastAccessWasBefore: authenticationDuration from: aCurrentDateAndTime for: aRequestingInterface.

	cart add: anAmount of: aBookISBN.
	
	cart updateLastAccessTo: aCurrentDateAndTime.! !

!methodRemoval: Cart #assertLastAccessWasBefore:from:for: stamp: 'FG 12/2/2020 00:06:53'!
assertLastAccessWasBefore: aDuration from: aCurrentDateAndTime for: aRequestingInterface
	
	^ (lastAccess + aDuration < aCurrentDateAndTime) ifTrue: [ aRequestingInterface reportCartAuthenticationExpired ].!

Object subclass: #InputInterface
	instanceVariableNames: 'catalogue globalNextUserID globalTransactionsID users carts clock cartExpirationTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #InputInterface category: 'Ejercicio-TusLibros.com' stamp: 'FG 12/2/2020 00:08:05'!
Object subclass: #InputInterface
	instanceVariableNames: 'catalogue globalNextUserID globalTransactionsID users carts clock cartExpirationTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!Cart methodsFor: 'initialization' stamp: 'FG 12/2/2020 00:09:48' prior: 50877367!
initializeWith: aCatalogue

	catalogue := aCatalogue.
	books := Bag new.! !
!InputInterface class methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:11:01'!
newWith: anUsersCollection andACatalogue: aCatalogue withClock: aClock andCartExpiration: aDuration

	^self basicNew initializeWith: anUsersCollection andACatalogue: aCatalogue withClock: aClock andCartExpiration: aDuration.! !

Object subclass: #Customer
	instanceVariableNames: 'username password carts sales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #Customer category: 'Ejercicio-TusLibros.com' stamp: 'FG 12/2/2020 00:11:21'!
Object subclass: #Customer
	instanceVariableNames: 'username password carts sales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!Customer class methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:11:38'!
withUsername: anUsername andPassword: aPassword

	^ self basicNew initializeWith: anUsername and: aPassword.! !
!Customer methodsFor: 'initialization' stamp: 'FG 12/2/2020 00:11:58'!
initializeWith: anUsername and: aPassword 
	
	username  := anUsername.
	password  := aPassword.
	carts := Dictionary new.
	sales := Dictionary new.! !

!methodRemoval: Customer #initializeWith:and:and: stamp: 'FG 12/2/2020 00:12:16'!
initializeWith: anUsername and: aPassword and: aCartAuthenticationDuration 
	
	username  := anUsername.
	password  := aPassword.
	carts := Dictionary new.
	sales := Dictionary new.
	authenticationDuration := aCartAuthenticationDuration.!

!methodRemoval: Customer class #withUsername:andPassword:authenticatingCartsFor: stamp: 'FG 12/2/2020 00:13:12'!
withUsername: anUsername andPassword: aPassword authenticatingCartsFor: aDuration 

	^ self basicNew initializeWith: anUsername and: aPassword and: aDuration.!
!Customer methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:14:23' prior: 50878767!
add: anAmount of: aBookISBN to: aCartID at: aCurrentDateAndTime for: aRequestingInterface

	| cart |

	cart := (carts at: aCartID).

	cart add: anAmount of: aBookISBN.
	
	cart updateLastAccessTo: aCurrentDateAndTime.! !
!InputInterface methodsFor: 'initialization' stamp: 'FG 12/2/2020 00:15:23'!
initializeWith: anUsersCollection andACatalogue: aCatalogue withClock: aClock andCartExpirationOf: aDuration.

	users := self createUserDirectoryFrom: anUsersCollection.
	carts := Dictionary new.
	catalogue := aCatalogue.
	clock := aClock.
	cartExpirationTime := aDuration.
	globalNextUserID := '0'.
	globalTransactionsID := '0'.! !

!methodRemoval: InputInterface #initializeWith:andACatalogue:withClock: stamp: 'FG 12/2/2020 00:15:33'!
initializeWith: anUsersCollection andACatalogue: aCatalogue withClock: aClock

	users := self createUserDirectoryFrom: anUsersCollection.
	carts := Dictionary new.
	catalogue := aCatalogue.
	clock := aClock.
	globalNextUserID := '0'.
	globalTransactionsID := '0'.!
!InputInterface class methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:15:54' prior: 50878813!
newWith: anUsersCollection andACatalogue: aCatalogue withClock: aClock andCartExpiration: aDuration

	^self basicNew initializeWith: anUsersCollection andACatalogue: aCatalogue withClock: aClock andCartExpirationOf: aDuration.! !

!methodRemoval: InputInterface class #newWith:andACatalogue:withClock: stamp: 'FG 12/2/2020 00:16:00'!
newWith: anUsersCollection andACatalogue: aCatalogue withClock: aClock 

	^self basicNew initializeWith: anUsersCollection andACatalogue: aCatalogue withClock: aClock.!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:18:55' prior: 50878568!
test01

	| inputInterface users catalogue aCartID|
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30) .
	
	aCartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	self assert: (inputInterface isValidCartID: aCartID).! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:19:57' prior: 50878925!
test01

	| inputInterface users catalogue aCartID|
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpiration:(Duration minutes: 30) .
	
	aCartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	self assert: (inputInterface isValidCartID: aCartID).! !
!InputInterface class methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:20:30'!
newWith: anUsersCollection andACatalogue: aCatalogue withClock: aClock andCartExpirationOf: aDuration

	^self basicNew initializeWith: anUsersCollection andACatalogue: aCatalogue withClock: aClock andCartExpirationOf: aDuration.! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:20:30' prior: 50878943!
test01

	| inputInterface users catalogue aCartID|
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30) .
	
	aCartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	self assert: (inputInterface isValidCartID: aCartID).! !

!methodRemoval: InputInterface class #newWith:andACatalogue:withClock:andCartExpiration: stamp: 'FG 12/2/2020 00:20:30'!
newWith: anUsersCollection andACatalogue: aCatalogue withClock: aClock andCartExpiration: aDuration

	^self basicNew initializeWith: anUsersCollection andACatalogue: aCatalogue withClock: aClock andCartExpirationOf: aDuration.!

!testRun: #InputInterfaceTests #test01 stamp: 'FG 12/2/2020 00:20:44'!
PASSED!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:21:01' prior: 50878503!
test02

	| inputInterface users catalogue |
	
	users := OrderedCollection new.
	catalogue := Dictionary new.
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	self should: [inputInterface createCartFor: 'WrongUser' withPassword: 'Password'] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongUsername. ].! !

!testRun: #InputInterfaceTests #test02 stamp: 'FG 12/2/2020 00:21:03'!
PASSED!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:21:09' prior: 50877122!
test03

	| inputInterface users catalogue |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password' authenticatingCartsFor: (Duration minutes: 30)).
	
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	self should: [inputInterface createCartFor: 'Username' withPassword: 'Wrong Password'] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongPassword. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:21:13' prior: 50877142!
test04

	| inputInterface users catalogue cartID1 cartID2 |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password' authenticatingCartsFor: (Duration minutes: 30)).
	
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID1 := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	cartID2 := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	self assert: (cartID1 = cartID2) not.! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:21:16' prior: 50877162!
test05

	| inputInterface users catalogue cartID |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password' authenticatingCartsFor: (Duration minutes: 30)).
	
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	self assert: (inputInterface listCart: cartID) equals: Bag new.! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:21:20' prior: 50877180!
test06

	| inputInterface users catalogue cartID |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password' authenticatingCartsFor: (Duration minutes: 30)).
	
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := '1' asSymbol.
	
	self should: [inputInterface listCart: cartID] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongCartID. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:21:24' prior: 50877200!
test07

	| inputInterface users catalogue cartID resultingContents |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password' authenticatingCartsFor: (Duration minutes: 30)).
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	resultingContents := Bag new.
	resultingContents add: 'mathBook' withOccurrences: 1.
	
	self assert: (inputInterface listCart: cartID) equals: resultingContents.! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:21:29' prior: 50877225!
test08

	| inputInterface users catalogue cartID |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password' authenticatingCartsFor: (Duration minutes: 30)).
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := '1' asSymbol.
	
	self should: [inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongCartID. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:21:34' prior: 50877247!
test09

	| inputInterface users catalogue cartID adulteratedClock |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password' authenticatingCartsFor: (Duration minutes: 30)).
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	
	adulteratedClock := SimulatedClock new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: adulteratedClock andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	adulteratedClock offsetTimeTo: (Duration minutes: 31).
	
	self should: [inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface cartAuthenticationExpired. ].! !

!testRun: #InputInterfaceTests #test02 stamp: 'FG 12/2/2020 00:21:39'!
PASSED!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:21:46' prior: 50879025!
test03

	| inputInterface users catalogue |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	self should: [inputInterface createCartFor: 'Username' withPassword: 'Wrong Password'] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongPassword. ].! !

!testRun: #InputInterfaceTests #test03 stamp: 'FG 12/2/2020 00:21:48'!
PASSED!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:21:56' prior: 50879047!
test04

	| inputInterface users catalogue cartID1 cartID2 |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID1 := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	cartID2 := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	self assert: (cartID1 = cartID2) not.! !

!testRun: #InputInterfaceTests #test04 stamp: 'FG 12/2/2020 00:21:57'!
PASSED!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:22:03' prior: 50879069!
test05

	| inputInterface users catalogue cartID |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	self assert: (inputInterface listCart: cartID) equals: Bag new.! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:22:09' prior: 50879089!
test06

	| inputInterface users catalogue cartID |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := '1' asSymbol.
	
	self should: [inputInterface listCart: cartID] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongCartID. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:22:13' prior: 50879111!
test07

	| inputInterface users catalogue cartID resultingContents |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	resultingContents := Bag new.
	resultingContents add: 'mathBook' withOccurrences: 1.
	
	self assert: (inputInterface listCart: cartID) equals: resultingContents.! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:22:18' prior: 50879138!
test08

	| inputInterface users catalogue cartID |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := '1' asSymbol.
	
	self should: [inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongCartID. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:22:23' prior: 50879162!
test09

	| inputInterface users catalogue cartID adulteratedClock |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	
	adulteratedClock := SimulatedClock new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: adulteratedClock andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	adulteratedClock offsetTimeTo: (Duration minutes: 31).
	
	self should: [inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface cartAuthenticationExpired. ].! !

!testRun: #InputInterfaceTests #test04 stamp: 'FG 12/2/2020 00:22:28'!
PASSED!

!testRun: #InputInterfaceTests #test05 stamp: 'FG 12/2/2020 00:22:29'!
PASSED!

!testRun: #InputInterfaceTests #test06 stamp: 'FG 12/2/2020 00:22:30'!
PASSED!

!testRun: #InputInterfaceTests #test07 stamp: 'FG 12/2/2020 00:22:32'!
PASSED!

!testRun: #InputInterfaceTests #test08 stamp: 'FG 12/2/2020 00:22:33'!
PASSED!
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 00:26:03' prior: 50878741!
addToCart: aCartID anAmount: anAmount ofABookISBN: aBookISBN

	self validateCartID: aCartID.
	
	(self ownerOf: aCartID) cartHasExpired: aCartID.
	"user checkCartID: aCartID isStillAuthenticatedFor: self at: clock now."

	(self ownerOf: aCartID) add: anAmount of: aBookISBN to: aCartID at: clock now for: self.! !
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 00:26:45' prior: 50879367!
addToCart: aCartID anAmount: anAmount ofABookISBN: aBookISBN

	self validateCartID: aCartID.
	
	(self ownerOf: aCartID) cartHasExpired: aCartID by: cartExpirationTime.
	"user checkCartID: aCartID isStillAuthenticatedFor: self at: clock now."

	(self ownerOf: aCartID) add: anAmount of: aBookISBN to: aCartID at: clock now for: self.! !
!Cart methodsFor: 'asserting' stamp: 'FG 12/2/2020 00:29:33'!
lastAccessWasBefore: aDuration from: aCurrentDateAndTime 
	
	^ (lastAccess + aDuration < aCurrentDateAndTime)! !

!methodRemoval: Cart #lastAccessWasBefore:from:for: stamp: 'FG 12/2/2020 00:29:35'!
lastAccessWasBefore: aDuration from: aCurrentDateAndTime for: aRequestingInterface
	
	^ (lastAccess + aDuration < aCurrentDateAndTime) ifTrue: [ aRequestingInterface reportCartAuthenticationExpired ].!
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 00:32:43' prior: 50879380!
addToCart: aCartID anAmount: anAmount ofABookISBN: aBookISBN

	self validateCartID: aCartID.
	
	(self ownerOf: aCartID) cartHasExpired: aCartID after: cartExpirationTime at: clock now.
	"user checkCartID: aCartID isStillAuthenticatedFor: self at: clock now."

	(self ownerOf: aCartID) add: anAmount of: aBookISBN to: aCartID at: clock now for: self.! !
!Customer methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:34:16'!
cartHasExpired: aCartID after: aDuration at: aDateAndTime.

	^ (carts at: aCartID) 
	
	! !

!methodRemoval: Customer #checkCartID:isStillAuthenticatedFor:at: stamp: 'FG 12/2/2020 00:34:20'!
checkCartID: aCartID isStillAuthenticatedFor: aRequestingInterface at: aDateAndTime.
	
	!
!Customer methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:35:08' prior: 50879423!
cartHasExpired: aCartID after: aDuration at: aDateAndTime.

	^ (carts at: aCartID) lastAccessWasBefore: aDuration from: aDateAndTime. 
	
	! !
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 00:36:03' prior: 50879409!
addToCart: aCartID anAmount: anAmount ofABookISBN: aBookISBN

	self validateCartID: aCartID.
	
	((self ownerOf: aCartID) cartHasExpired: aCartID after: cartExpirationTime at: clock now) ifTrue: [self error: InputInterface cartAuthenticationExpired ].
	"user checkCartID: aCartID isStillAuthenticatedFor: self at: clock now."

	(self ownerOf: aCartID) add: anAmount of: aBookISBN to: aCartID at: clock now for: self.! !
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 00:36:08' prior: 50879443!
addToCart: aCartID anAmount: anAmount ofABookISBN: aBookISBN

	self validateCartID: aCartID.
	
	((self ownerOf: aCartID) cartHasExpired: aCartID after: cartExpirationTime at: clock now) ifTrue: [self error: InputInterface cartAuthenticationExpired ].

	(self ownerOf: aCartID) add: anAmount of: aBookISBN to: aCartID at: clock now for: self.! !

!testRun: #InputInterfaceTests #test09 stamp: 'FG 12/2/2020 00:36:13'!
PASSED!
!InputInterface methodsFor: 'validations' stamp: 'FG 12/2/2020 00:37:28'!
validateThatCartHasNotExpired: aCartID

	
	! !
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 00:37:44' prior: 50879459!
addToCart: aCartID anAmount: anAmount ofABookISBN: aBookISBN

	self validateCartID: aCartID.
	

	(self ownerOf: aCartID) add: anAmount of: aBookISBN to: aCartID at: clock now for: self.! !
!InputInterface methodsFor: 'validations' stamp: 'FG 12/2/2020 00:37:50' prior: 50879475!
validateThatCartHasNotExpired: aCartID

	((self ownerOf: aCartID) cartHasExpired: aCartID after: cartExpirationTime at: clock now) ifTrue: [self error: InputInterface cartAuthenticationExpired ].

	
	! !
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 00:38:42' prior: 50879480!
addToCart: aCartID anAmount: anAmount ofABookISBN: aBookISBN

	self validateCartID: aCartID.
	self validateThatCartHasNotExpired: aCartID.

	(self ownerOf: aCartID) add: anAmount of: aBookISBN to: aCartID at: clock now for: self.! !
!Customer methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:41:32'!
cartHasExpired: aCartID at: aDateAndTime after: aDuration

	^ (carts at: aCartID) lastAccessWasBefore: aDuration from: aDateAndTime. 
	
	! !

!methodRemoval: Customer #cartHasExpired:after:at: stamp: 'FG 12/2/2020 00:41:36'!
cartHasExpired: aCartID after: aDuration at: aDateAndTime.

	^ (carts at: aCartID) lastAccessWasBefore: aDuration from: aDateAndTime. 
	
	!
!InputInterface methodsFor: 'validations' stamp: 'FG 12/2/2020 00:41:53' prior: 50879489!
validateThatCartHasNotExpired: aCartID

	((self ownerOf: aCartID) cartHasExpired: aCartID at: clock now after: cartExpirationTime) ifTrue: [self error: InputInterface cartAuthenticationExpired ].

	
	! !
!Customer methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:45:07'!
add: anAmount of: aBookISBN to: aCartID at: aCurrentDateAndTime

	| cart |

	cart := (carts at: aCartID).

	cart add: anAmount of: aBookISBN.
	
	cart updateLastAccessTo: aCurrentDateAndTime.! !

!methodRemoval: Customer #add:of:to:at:for: stamp: 'FG 12/2/2020 00:45:10'!
add: anAmount of: aBookISBN to: aCartID at: aCurrentDateAndTime for: aRequestingInterface

	| cart |

	cart := (carts at: aCartID).

	cart add: anAmount of: aBookISBN.
	
	cart updateLastAccessTo: aCurrentDateAndTime.!
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 00:45:21' prior: 50879499!
addToCart: aCartID anAmount: anAmount ofABookISBN: aBookISBN

	self validateCartID: aCartID.
	self validateThatCartHasNotExpired: aCartID.

	(self ownerOf: aCartID) add: anAmount of: aBookISBN to: aCartID at: clock now.! !
!Cart class methodsFor: 'intialization' stamp: 'FG 12/2/2020 00:50:40'!
with: aCatalogue at: aDateAndTime 
	^ self basicNew initializeWith: aCatalogue.! !

!methodRemoval: Cart class #with: stamp: 'FG 12/2/2020 00:50:40'!
with: aCatalogue
	^ self basicNew initializeWith: aCatalogue.!
!Cart methodsFor: 'initialization' stamp: 'FG 12/2/2020 00:51:35'!
initializeWith: aCatalogue at: aDateAndTime 

	catalogue := aCatalogue.
	books := Bag new.! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:51:35' prior: 50879561!
with: aCatalogue at: aDateAndTime 
	^ self basicNew initializeWith: aCatalogue at: aDateAndTime.! !

!methodRemoval: Cart #initializeWith: stamp: 'FG 12/2/2020 00:51:35'!
initializeWith: aCatalogue

	catalogue := aCatalogue.
	books := Bag new.!
!Cart methodsFor: 'initialization' stamp: 'FG 12/2/2020 00:51:49' prior: 50879570!
initializeWith: aCatalogue at: aDateAndTime 

	catalogue := aCatalogue.
	lastAccess := aDateAndTime.
	books := Bag new.! !
!CartTests methodsFor: 'cart tests' stamp: 'FG 12/2/2020 00:52:38' prior: 50876657!
test01NewCartShouldBeEmpty

	| cart catalogue |
	
	catalogue := Dictionary new.
	cart := Cart with: catalogue at: (SimulatedClock new now).
	
	self assert: cart isEmpty. ! !

!testRun: #CartTests #test01NewCartShouldBeEmpty stamp: 'FG 12/2/2020 00:52:40'!
PASSED!
!CartTests methodsFor: 'cart tests' stamp: 'FG 12/2/2020 00:53:07' prior: 50876664!
test02CartWithABookShouldNotBeEmpty

	| cart catalogue book |
	
	book := 'Book'.
	catalogue := Dictionary new.
	catalogue add: book -> 100.
		
	cart := Cart with: catalogue at: (SimulatedClock new now).
	
	cart add: 10 of: book.
	
	self assert: cart isEmpty not. ! !
!CartTests methodsFor: 'cart tests' stamp: 'FG 12/2/2020 00:53:12' prior: 50876674!
test03EmptyCartDoesntHasABook

	| cart catalogue book |
	
	book := 'Book'.
	catalogue := Dictionary new.
	catalogue add: book -> 100.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	
	self assert: (cart has: book) not.! !
!CartTests methodsFor: 'cart tests' stamp: 'FG 12/2/2020 00:53:16' prior: 50876683!
test04CartShouldHaveAddedBook

	| cart catalogue book |
	
	book := 'Book'.
	catalogue := Dictionary new.
	catalogue add: book -> 100.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	
	cart add: 10 of: book. 
	
	self assert: (cart has: book).! !
!CartTests methodsFor: 'cart tests' stamp: 'FG 12/2/2020 00:53:21' prior: 50876693!
test05CartShouldNotHaveNonAddedBook

	| cart catalogue historyBook mathBook |
	
	mathBook := 'MathBook'.
	historyBook := 'HistoryBook'.
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	catalogue add: historyBook -> 100.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	
	cart add: 10 of: historyBook. 
	
	self assert: (cart has: mathBook) not.
	! !
!CartTests methodsFor: 'cart tests' stamp: 'FG 12/2/2020 00:53:28' prior: 50876707!
test06CartShouldAnswerQuantityOfAnAddedBook

	| cart catalogue historyBook mathBook|
	
	historyBook := 'HistoryBook'.
	mathBook := 'MathBook'.
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	catalogue add: historyBook -> 100.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
		
	cart add: 100 of: historyBook.
	cart add: 50 of: mathBook. 
	
	self assert: (cart quantityOf: historyBook) equals: 100.
	self assert: (cart quantityOf: mathBook) equals: 50.
	! !
!CartTests methodsFor: 'cart tests' stamp: 'FG 12/2/2020 00:53:34' prior: 50876724!
test07CartShouldProperlyAddMoreCopiesOfAnAlreadyAddedBook

	| cart catalogue book|
	
	book := 'Book'.
	catalogue := Dictionary new.
	catalogue add: book -> 100.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
		
	cart add: 50 of: book. 
	cart add: 150 of: book.
		
	self assert: (cart quantityOf: book) equals: 200.! !
!CartTests methodsFor: 'cart tests' stamp: 'FG 12/2/2020 00:53:44' prior: 50876736!
test08CartShouldBeAbleToAnswerWhatBooksItHas

	| cart catalogue mathBook historyBook|
	
	mathBook := 'MathBook'.
	historyBook := 'HistoryBook'.		
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	catalogue add: historyBook -> 100.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	
	cart add: 50 of: mathBook.
		
	self assert: cart books size equals: 50.
	self assert: (cart books includes: mathBook).
	
	cart add: 100 of: historyBook.
	
	self assert: cart books size equals: 150.
	self assert: (cart books includes: historyBook).
	! !
!CartTests methodsFor: 'cart tests' stamp: 'FG 12/2/2020 00:53:49' prior: 50876755!
test09CartCantAddBookThatAreNotInTheCatalogue

	| cart catalogue mathBook historyBook|
	
	mathBook := 'MathBook'.
	historyBook := 'HistoryBook'.	
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	cart := Cart with: catalogue at: (SimulatedClock new now).
	
	[cart add: 100 of: historyBook. self fail]
		on: Error
		do: [:anError | self assert: anError messageText equals: Cart cantAddBooksThatAreNotInTheCatalogue. ].	
! !
!CartTests methodsFor: 'cart tests' stamp: 'FG 12/2/2020 00:53:53' prior: 50876770!
test10CartCantAddANonIntegerAmountOfBooks

	| cart catalogue mathBook|
	
	mathBook := 'MathBook'.
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	cart := Cart with: catalogue at: (SimulatedClock new now).
	
	[cart add: 2.5 of: mathBook. self fail]
		on: Error
		do: [:anError | self assert: anError messageText equals: Cart cantAddANonIntegerAmountOfBooks. ].	
! !
!CartTests methodsFor: 'cart tests' stamp: 'FG 12/2/2020 00:53:57' prior: 50876784!
test11CartCantAddANonPositiveAmountOfBooks

	| cart catalogue mathBook|
	
	mathBook := 'MathBook'.
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	cart := Cart with: catalogue at: (SimulatedClock new now).
	
	
	self should: [cart add: 0 of: mathBook] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: Cart cantAddANonPositiveAmountOfBooks. ]
	! !

!testRun: #CartTests #test01NewCartShouldBeEmpty stamp: 'FG 12/2/2020 00:54:00'!
PASSED!

!testRun: #CartTests #test02CartWithABookShouldNotBeEmpty stamp: 'FG 12/2/2020 00:54:00'!
PASSED!

!testRun: #CartTests #test03EmptyCartDoesntHasABook stamp: 'FG 12/2/2020 00:54:00'!
PASSED!

!testRun: #CartTests #test04CartShouldHaveAddedBook stamp: 'FG 12/2/2020 00:54:00'!
PASSED!

!testRun: #CartTests #test05CartShouldNotHaveNonAddedBook stamp: 'FG 12/2/2020 00:54:00'!
PASSED!

!testRun: #CartTests #test06CartShouldAnswerQuantityOfAnAddedBook stamp: 'FG 12/2/2020 00:54:00'!
PASSED!

!testRun: #CartTests #test07CartShouldProperlyAddMoreCopiesOfAnAlreadyAddedBook stamp: 'FG 12/2/2020 00:54:00'!
PASSED!

!testRun: #CartTests #test08CartShouldBeAbleToAnswerWhatBooksItHas stamp: 'FG 12/2/2020 00:54:00'!
PASSED!

!testRun: #CartTests #test09CartCantAddBookThatAreNotInTheCatalogue stamp: 'FG 12/2/2020 00:54:00'!
PASSED!

!testRun: #CartTests #test10CartCantAddANonIntegerAmountOfBooks stamp: 'FG 12/2/2020 00:54:00'!
PASSED!

!testRun: #CartTests #test11CartCantAddANonPositiveAmountOfBooks stamp: 'FG 12/2/2020 00:54:00'!
PASSED!

!testRun: #CashierTests #test01CantCheckoutWithAnEmptyCart stamp: 'FG 12/2/2020 00:54:04'!
ERROR!

!testRun: #CashierTests #test02CheckingOutACartWithABookReturnsItsPrice stamp: 'FG 12/2/2020 00:54:04'!
ERROR!

!testRun: #CashierTests #test03CheckingOutWithTwoDifferentBooksReturnsTheSumOfBothPrices stamp: 'FG 12/2/2020 00:54:04'!
ERROR!

!testRun: #CashierTests #test04CheckingOutMultipleCopiesOfTheSameBookReturnsItsPriceTimesTheQuantity stamp: 'FG 12/2/2020 00:54:04'!
ERROR!

!testRun: #CashierTests #test05CantCheckoutWithAnExpiredCreditCard stamp: 'FG 12/2/2020 00:54:04'!
ERROR!

!testRun: #CashierTests #test06CantCheckoutWhenTotalAmountToPayHasMoreThan15Digits stamp: 'FG 12/2/2020 00:54:04'!
ERROR!

!testRun: #CashierTests #test07CentsMustBeRoundedUpToTwoDigits stamp: 'FG 12/2/2020 00:54:04'!
ERROR!

!testRun: #CashierTests #test08CantCheckOutIfPurchaseIsInvalidatedByMerchantProcessorBecauseOfInvalidParameter stamp: 'FG 12/2/2020 00:54:04'!
ERROR!

!testRun: #CashierTests #test09CantCheckOutIfPurchaseIsInvalidatedByMerchantProcessorBecauseOfAGivenError stamp: 'FG 12/2/2020 00:54:04'!
ERROR!
!CashierTests methodsFor: 'cashier tests' stamp: 'FG 12/2/2020 00:54:16' prior: 50876811!
test01CantCheckoutWithAnEmptyCart

	| cart cashier creditCard |
	
	creditCard := builder validCreditCard.
		
	cart := Cart with: Set new at: (SimulatedClock new now).
	cashier := Cashier payingThrough: OutputInterfaceSimulator new.
	
	self should: [cashier checkout: cart payingWith: creditCard at: builder currentMonthOfYear.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: Cashier cantCheckoutWithAnEmptyCart. ]! !
!CashierTests methodsFor: 'cashier tests' stamp: 'FG 12/2/2020 00:54:23' prior: 50876827!
test02CheckingOutACartWithABookReturnsItsPrice

	| cart cashier catalogue mathBook creditCard |
	
	creditCard := builder validCreditCard.
		
	mathBook := 'MathBook'.
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	cart add: 1 of: mathBook. 
	
	cashier := Cashier payingThrough: OutputInterfaceSimulator new.
	
	self assert: (cashier checkout: cart payingWith: creditCard at: builder currentMonthOfYear) total equals: 100.! !
!CashierTests methodsFor: 'cashier tests' stamp: 'FG 12/2/2020 00:54:29' prior: 50876845!
test03CheckingOutWithTwoDifferentBooksReturnsTheSumOfBothPrices
	
	| cart cashier catalogue mathBook historyBook creditCard |
	
	creditCard := builder validCreditCard.
	
	mathBook := 'MathBook'.
	historyBook := 'HistoryBook'.	
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	catalogue add: historyBook -> 75.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	cart add: 1 of: mathBook.
	cart add: 1 of: historyBook.
	
	cashier := Cashier payingThrough: OutputInterfaceSimulator new.
	
	self assert: (cashier checkout: cart payingWith: creditCard at: builder currentMonthOfYear) total equals: 175.! !
!CashierTests methodsFor: 'cashier tests' stamp: 'FG 12/2/2020 00:54:32' prior: 50876867!
test04CheckingOutMultipleCopiesOfTheSameBookReturnsItsPriceTimesTheQuantity

	| cart cashier catalogue mathBook creditCard |
	
	creditCard := builder validCreditCard.
	
	mathBook := 'MathBook'.	
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	
	cart := Cart with: catalogue .
	cart add: 3 of: mathBook.
	
	cashier := Cashier payingThrough: OutputInterfaceSimulator new.
	
	self assert: (cashier checkout: cart payingWith: creditCard at: builder currentMonthOfYear) total equals: 300.! !
!CashierTests methodsFor: 'cashier tests' stamp: 'FG 12/2/2020 00:54:34' prior: 50879883!
test04CheckingOutMultipleCopiesOfTheSameBookReturnsItsPriceTimesTheQuantity

	| cart cashier catalogue mathBook creditCard |
	
	creditCard := builder validCreditCard.
	
	mathBook := 'MathBook'.	
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	cart add: 3 of: mathBook.
	
	cashier := Cashier payingThrough: OutputInterfaceSimulator new.
	
	self assert: (cashier checkout: cart payingWith: creditCard at: builder currentMonthOfYear) total equals: 300.! !
!CashierTests methodsFor: 'cashier tests' stamp: 'FG 12/2/2020 00:54:39' prior: 50876886!
test05CantCheckoutWithAnExpiredCreditCard
	
	| cart cashier catalogue mathBook creditCard |
	
	creditCard := builder expiredCreditCard.
	
	mathBook := 'MathBook'.
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	cart add: 1 of: mathBook.
	
	cashier := Cashier payingThrough: OutputInterfaceSimulator new.
	
	self should: [cashier checkout: cart payingWith: creditCard at: builder currentMonthOfYear.] 
		raisingAnErrorAndAsserting: [ :anError | self assert: anError messageText equals: Cashier creditCardHasExpired. ].	
	
	! !
!CashierTests methodsFor: 'cashier tests' stamp: 'FG 12/2/2020 00:54:43' prior: 50876907!
test06CantCheckoutWhenTotalAmountToPayHasMoreThan15Digits
	| cart cashier catalogue mathBook creditCard |
	
	creditCard := builder validCreditCard.
	
	mathBook := 'MathBook'.
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 1000000000000000.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	cart add: 1 of: mathBook.
	
	cashier := Cashier payingThrough: OutputInterfaceSimulator new.
	
	self should: [cashier checkout: cart payingWith: creditCard at: builder currentMonthOfYear] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: Cashier amountToBigToProcess. ].
	
	! !
!CashierTests methodsFor: 'cashier tests' stamp: 'FG 12/2/2020 00:54:48' prior: 50876929!
test07CentsMustBeRoundedUpToTwoDigits
	| cart cashier catalogue mathBook creditCard |
	
	creditCard := builder validCreditCard.
	
	mathBook := 'MathBook'.	
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.002.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	cart add: 1 of: mathBook.
	
	cashier := Cashier payingThrough: OutputInterfaceSimulator new.
	
	self assert: (cashier checkout: cart payingWith: creditCard at: builder currentMonthOfYear) total equals: 100.01.! !
!CashierTests methodsFor: 'cashier tests' stamp: 'FG 12/2/2020 00:54:52' prior: 50876947!
test08CantCheckOutIfPurchaseIsInvalidatedByMerchantProcessorBecauseOfInvalidParameter
	
	| cart cashier catalogue mathBook creditCard |
	
	creditCard := builder validCreditCard.
	
	mathBook := 'MathBook'.
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	cart add: 1 of: mathBook.
	
	cashier := Cashier payingThrough: OutputInterfaceSimulator new invalidateNextPurchasesBecauseOfInvalidParameters.
	
	self should: [cashier checkout: cart payingWith: creditCard at: builder currentMonthOfYear] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: Cashier purchaseInvalidatedByMerchantProcessorBecauseOfInvalidParameter . ].
	
	! !
!CashierTests methodsFor: 'cashier tests' stamp: 'FG 12/2/2020 00:54:56' prior: 50876972!
test09CantCheckOutIfPurchaseIsInvalidatedByMerchantProcessorBecauseOfAGivenError
	| cart cashier catalogue mathBook creditCard |
	
	creditCard := builder validCreditCard.
	
	mathBook := 'MathBook'.
	
	catalogue := Dictionary new.
	catalogue add: mathBook -> 100.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	cart add: 1 of: mathBook.
	
	cashier := Cashier payingThrough: (OutputInterfaceSimulator new invalidateNextPurchaseForACustomErrorDescription: 'Tarjeta Robada').
	
	self should: [cashier checkout: cart payingWith: creditCard at: builder currentMonthOfYear] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: 'Tarjeta Robada'. ].
	
	! !

!testRun: #CashierTests #test01CantCheckoutWithAnEmptyCart stamp: 'FG 12/2/2020 00:55:00'!
PASSED!

!testRun: #CashierTests #test02CheckingOutACartWithABookReturnsItsPrice stamp: 'FG 12/2/2020 00:55:00'!
PASSED!

!testRun: #CashierTests #test03CheckingOutWithTwoDifferentBooksReturnsTheSumOfBothPrices stamp: 'FG 12/2/2020 00:55:00'!
PASSED!

!testRun: #CashierTests #test04CheckingOutMultipleCopiesOfTheSameBookReturnsItsPriceTimesTheQuantity stamp: 'FG 12/2/2020 00:55:00'!
PASSED!

!testRun: #CashierTests #test05CantCheckoutWithAnExpiredCreditCard stamp: 'FG 12/2/2020 00:55:00'!
PASSED!

!testRun: #CashierTests #test06CantCheckoutWhenTotalAmountToPayHasMoreThan15Digits stamp: 'FG 12/2/2020 00:55:00'!
PASSED!

!testRun: #CashierTests #test07CentsMustBeRoundedUpToTwoDigits stamp: 'FG 12/2/2020 00:55:01'!
PASSED!

!testRun: #CashierTests #test08CantCheckOutIfPurchaseIsInvalidatedByMerchantProcessorBecauseOfInvalidParameter stamp: 'FG 12/2/2020 00:55:01'!
PASSED!

!testRun: #CashierTests #test09CantCheckOutIfPurchaseIsInvalidatedByMerchantProcessorBecauseOfAGivenError stamp: 'FG 12/2/2020 00:55:01'!
PASSED!

!testRun: #CreditCardTests #test01CreditCardNumberMustBeComposedOfDigits stamp: 'FG 12/2/2020 00:55:03'!
PASSED!

!testRun: #CreditCardTests #test02CreditCardNumberShouldHaveExactlySixteenDigits stamp: 'FG 12/2/2020 00:55:03'!
PASSED!

!testRun: #CreditCardTests #test03CreditCardOwnerNameCanNotBeEmpty stamp: 'FG 12/2/2020 00:55:03'!
PASSED!

!testRun: #CreditCardTests #test04IfOwnerNameHasMoreThanThirtyCharactersThenItGetsTruncated stamp: 'FG 12/2/2020 00:55:03'!
PASSED!

!testRun: #CreditCardTests #test05CreditCardExpirationDateIsKindaOfGregorianMonthOfYear stamp: 'FG 12/2/2020 00:55:03'!
PASSED!
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 00:55:49' prior: 50878290!
createCartFor: anUsername withPassword: aPassword
	
	| cartID |
	
	self validateUsername: anUsername.
	self validatePassword: aPassword for: anUsername.
	
	cartID := self generateCartId.
	
	carts add: cartID -> anUsername.
	(users at: anUsername) addCart: (Cart with: catalogue at: clock now) withID: cartID.

	^ cartID.! !
!Customer methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 00:56:26'!
addCart: aCart withID: aCartID

	carts add: aCartID -> aCart.! !

!methodRemoval: Customer #addCart:withID:at: stamp: 'FG 12/2/2020 00:56:29'!
addCart: aCart withID: aCartID at: aCurrentDateAndTime 

	carts add: aCartID -> aCart.
	aCart updateLastAccessTo: aCurrentDateAndTime.!
!Customer methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 01:04:35'!
updateCart: aCartID at: aDateAndTime
	(carts at: aCartID).! !
!Customer methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 01:05:20' prior: 50880116!
updateCart: aCartID at: aDateAndTime
	(carts at: aCartID) updateLastAccessTo: aDateAndTime.! !
!Customer methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 01:05:33'!
add: anAmount of: aBookISBN to: aCartID

	| cart |

	cart := (carts at: aCartID).

	cart add: anAmount of: aBookISBN.! !

!methodRemoval: Customer #add:of:to:at: stamp: 'FG 12/2/2020 01:05:37'!
add: anAmount of: aBookISBN to: aCartID at: aCurrentDateAndTime

	| cart |

	cart := (carts at: aCartID).

	cart add: anAmount of: aBookISBN.
	
	cart updateLastAccessTo: aCurrentDateAndTime.!
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 01:06:04' prior: 50879551!
addToCart: aCartID anAmount: anAmount ofABookISBN: aBookISBN

	self validateCartID: aCartID.
	self validateThatCartHasNotExpired: aCartID.

	(self ownerOf: aCartID) add: anAmount of: aBookISBN to: aCartID.
	(self ownerOf: aCartID) updateCart: aCartID at: clock now.
	! !

!testRun: #InputInterfaceTests #test01 stamp: 'FG 12/2/2020 01:07:19'!
PASSED!

!testRun: #InputInterfaceTests #test02 stamp: 'FG 12/2/2020 01:07:19'!
PASSED!

!testRun: #InputInterfaceTests #test03 stamp: 'FG 12/2/2020 01:07:19'!
PASSED!

!testRun: #InputInterfaceTests #test04 stamp: 'FG 12/2/2020 01:07:19'!
PASSED!

!testRun: #InputInterfaceTests #test05 stamp: 'FG 12/2/2020 01:07:19'!
PASSED!

!testRun: #InputInterfaceTests #test06 stamp: 'FG 12/2/2020 01:07:19'!
PASSED!

!testRun: #InputInterfaceTests #test07 stamp: 'FG 12/2/2020 01:07:19'!
PASSED!

!testRun: #InputInterfaceTests #test08 stamp: 'FG 12/2/2020 01:07:19'!
PASSED!

!testRun: #InputInterfaceTests #test09 stamp: 'FG 12/2/2020 01:07:19'!
PASSED!

!testRun: #InputInterfaceTests #test20 stamp: 'FG 12/2/2020 01:07:19'!
ERROR!

!testRun: #InputInterfaceTests #test20 stamp: 'FG 12/2/2020 01:07:19'!
ERROR!

!testRun: #InputInterfaceTests #test09 stamp: 'FG 12/2/2020 01:07:22'!
PASSED!
!Customer methodsFor: 'accessing' stamp: 'FG 12/2/2020 01:10:23'!
cartAt: aCartID
	^ carts at: aCartID.! !

!methodRemoval: Customer #carts stamp: 'FG 12/2/2020 01:10:28'!
carts
	^ carts copy.!
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 01:10:52' prior: 50878714!
listCart: aCartID

	self validateCartID: aCartID.
	
	^ ((self ownerOf: aCartID) cartAt: aCartID) books.! !

!methodRemoval: InputInterface #reportCartAuthenticationExpired stamp: 'FG 12/2/2020 01:11:32'!
reportCartAuthenticationExpired
	
	^self error: InputInterface cartAuthenticationExpired.!
!InputInterface methodsFor: 'initialization' stamp: 'FG 12/2/2020 01:14:13'!
initializeWithUsers: anUsersCollection withCatalogue: aCatalogue withClock: aClock withCartExpirationOf: aDuration.

	users := self createUserDirectoryFrom: anUsersCollection.
	carts := Dictionary new.
	catalogue := aCatalogue.
	clock := aClock.
	cartExpirationTime := aDuration.
	globalNextUserID := '0'.
	globalTransactionsID := '0'.! !
!InputInterface class methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 01:14:13' prior: 50878961!
newWith: anUsersCollection andACatalogue: aCatalogue withClock: aClock andCartExpirationOf: aDuration

	^self basicNew initializeWithUsers: anUsersCollection withCatalogue: aCatalogue withClock: aClock withCartExpirationOf: aDuration.! !

!methodRemoval: InputInterface #initializeWith:andACatalogue:withClock:andCartExpirationOf: stamp: 'FG 12/2/2020 01:14:13'!
initializeWith: anUsersCollection andACatalogue: aCatalogue withClock: aClock andCartExpirationOf: aDuration.

	users := self createUserDirectoryFrom: anUsersCollection.
	carts := Dictionary new.
	catalogue := aCatalogue.
	clock := aClock.
	cartExpirationTime := aDuration.
	globalNextUserID := '0'.
	globalTransactionsID := '0'.!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 01:18:53'!
test10

	| inputInterface users catalogue cartID adulteratedClock |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	
	adulteratedClock := SimulatedClock new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: adulteratedClock andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	adulteratedClock offsetTimeTo: (Duration minutes: 31).
	
	self should: [inputInterface listCart: cartID.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface cartAuthenticationExpired. ].! !

!testRun: #InputInterfaceTests #test10 stamp: 'FG 12/2/2020 01:18:57'!
FAILURE!

!testRun: #InputInterfaceTests #test10 stamp: 'FG 12/2/2020 01:18:57'!
FAILURE!
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 01:19:17' prior: 50880190!
listCart: aCartID

	self validateCartID: aCartID.
	self validateThatCartHasNotExpired: aCartID.
	
	^ ((self ownerOf: aCartID) cartAt: aCartID) books.! !
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 01:20:04' prior: 50880272!
listCart: aCartID

	self validateCartID: aCartID.
	self validateThatCartHasNotExpired: aCartID.
	
	(self ownerOf: aCartID) updateCart: aCartID at: clock now .
	^ ((self ownerOf: aCartID) cartAt: aCartID) books.! !
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 01:20:05' prior: 50880280!
listCart: aCartID

	self validateCartID: aCartID.
	self validateThatCartHasNotExpired: aCartID.
	
	(self ownerOf: aCartID) updateCart: aCartID at: clock now.
	^ ((self ownerOf: aCartID) cartAt: aCartID) books.! !
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 01:20:14' prior: 50880142!
addToCart: aCartID anAmount: anAmount ofABookISBN: aBookISBN

	self validateCartID: aCartID.
	self validateThatCartHasNotExpired: aCartID.

	(self ownerOf: aCartID) updateCart: aCartID at: clock now.
	(self ownerOf: aCartID) add: anAmount of: aBookISBN to: aCartID.
	! !

!testRun: #InputInterfaceTests #test10 stamp: 'FG 12/2/2020 01:20:38'!
PASSED!

!testRun: #InputInterfaceTests #test09 stamp: 'FG 12/2/2020 01:20:40'!
PASSED!

!methodRemoval: InputInterfaceTests #test20 stamp: 'FG 12/2/2020 01:20:44'!
test20

	| inputInterface users catalogue cartID aSaleID |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password' authenticatingCartsFor: (Duration minutes: 30)).
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new.
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	aSaleID := inputInterface checkoutCart: cartID withPlasticNumber: '0000000000000000' validThrough: '012021' namedAfter: 'Valid Name'.
	
	self assert: (inputInterface isValidSaleID: aSaleID).!

!testRun: #InputInterfaceTests #test01 stamp: 'FG 12/2/2020 01:20:45'!
PASSED!

!testRun: #InputInterfaceTests #test02 stamp: 'FG 12/2/2020 01:20:45'!
PASSED!

!testRun: #InputInterfaceTests #test03 stamp: 'FG 12/2/2020 01:20:45'!
PASSED!

!testRun: #InputInterfaceTests #test04 stamp: 'FG 12/2/2020 01:20:45'!
PASSED!

!testRun: #InputInterfaceTests #test05 stamp: 'FG 12/2/2020 01:20:45'!
PASSED!

!testRun: #InputInterfaceTests #test06 stamp: 'FG 12/2/2020 01:20:45'!
PASSED!

!testRun: #InputInterfaceTests #test07 stamp: 'FG 12/2/2020 01:20:46'!
PASSED!

!testRun: #InputInterfaceTests #test08 stamp: 'FG 12/2/2020 01:20:46'!
PASSED!

!testRun: #InputInterfaceTests #test09 stamp: 'FG 12/2/2020 01:20:46'!
PASSED!

!testRun: #InputInterfaceTests #test10 stamp: 'FG 12/2/2020 01:20:46'!
PASSED!
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 01:27:01' prior: 50878604!
checkoutCart: aCartID withPlasticNumber: aPlasticNumber validThrough: aMonthAndYearString namedAfter: anOwnerName

	| sale saleID foundUser |

	self validateCartID: aCartID.

	foundUser := users at: (users findFirst:[:anUser | (anUser isValidCartID: aCartID)]).
	
	sale := (Cashier payingThrough: OutputInterfaceSimulator new) 
				checkout: (foundUser cartAt: aCartID) 
				payingWith: (CreditCard withPlasticNumber: aPlasticNumber namedAfter: anOwnerName validThrough: (self changeDate: aMonthAndYearString)) 
				at: carts .
				
	saleID := self generateSaleID.
	
	foundUser addSale: sale withID: saleID.

	^ saleID.

	! !
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 01:31:09' prior: 50880367!
checkoutCart: aCartID withPlasticNumber: aPlasticNumber validThrough: aMonthAndYearString namedAfter: anOwnerName

	| sale saleID |

	self validateCartID: aCartID.
	self validateThatCartHasNotExpired: aCartID.
	
	sale := (Cashier payingThrough: OutputInterfaceSimulator new) 
				checkout: ((self ownerOf: aCartID) cartAt: aCartID) 
				payingWith: (CreditCard withPlasticNumber: aPlasticNumber namedAfter: anOwnerName validThrough: (self changeDate: aMonthAndYearString)) 
				at: clock now.
				
	saleID := self generateSaleID.
	
	(self ownerOf: aCartID) updateCart: aCartID at: clock now. 
	(self ownerOf: aCartID) addSale: sale withID: saleID.

	^ saleID.

	! !
!InputInterface methodsFor: 'validations' stamp: 'FG 12/2/2020 01:33:10' prior: 50878662!
isValidSaleID: aSaleID

	^ (users values allSatisfy: [:user | (user isValidSaleID: aSaleID) not ]) not.	! !
!Customer methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 01:33:29'!
isValidSaleID: saleID
	^ sales keys includes: saleID.! !

!methodRemoval: Customer #isAValidSaleID: stamp: 'FG 12/2/2020 01:33:31'!
isAValidSaleID: saleID
	^ sales keys includes: saleID.!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 01:36:04'!
test11

	| inputInterface users catalogue cartID |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.

	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	self should: [inputInterface listCart: cartID.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface cartAuthenticationExpired. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 01:36:15' prior: 50879327!
test09

	| inputInterface users catalogue cartID adulteratedClock |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	
	adulteratedClock := SimulatedClock new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: adulteratedClock andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	adulteratedClock offsetTimeTo: (Duration minutes: 31).
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	self should: [inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface cartAuthenticationExpired. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 01:38:43' prior: 50880429!
test11

	| inputInterface users catalogue cartID saleID|
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.

	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	saleID := inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: 022021  namedAfter: 'Nombre Valido'.
	
	self assert: (inputInterface isValidSaleID: saleID).! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 01:42:44' prior: 50880482!
test11

	| inputInterface users catalogue cartID |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.

	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := '1' asSymbol.
	
	self should: [inputInterface listCart: cartID] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongCartID. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 01:44:37' prior: 50880508!
test11

	| inputInterface users catalogue cartID |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.

	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := '1' asSymbol.
	
	self should: [inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongCartID. ].! !

!testRun: #InputInterfaceTests #test11 stamp: 'FG 12/2/2020 01:44:39'!
PASSED!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 01:38:43' prior: 50880529!
test11

	| inputInterface users catalogue cartID saleID|
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.

	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	saleID := inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: 022021  namedAfter: 'Nombre Valido'.
	
	self assert: (inputInterface isValidSaleID: saleID).! !

!testRun: #InputInterfaceTests #test11 stamp: 'FG 12/2/2020 01:45:43'!
ERROR!

!testRun: #InputInterfaceTests #test11 stamp: 'FG 12/2/2020 01:45:43'!
ERROR!

!testRun: #InputInterfaceTests #test11 stamp: 'FG 12/2/2020 01:45:54'!
ERROR!

!testRun: #InputInterfaceTests #test11 stamp: 'FG 12/2/2020 01:45:55'!
ERROR!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 01:46:09' prior: 50880556!
test11

	| inputInterface users catalogue cartID saleID|
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.

	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	saleID := inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.
	
	self assert: (inputInterface isValidSaleID: saleID).! !

!testRun: #InputInterfaceTests #test11 stamp: 'FG 12/2/2020 01:46:10'!
PASSED!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 01:46:21'!
test12

	| inputInterface users catalogue cartID saleID|
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.

	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	saleID := inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.
	
	self assert: (inputInterface isValidSaleID: saleID).! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 01:46:38' prior: 50880620!
test12

	| inputInterface users catalogue cartID saleID|
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.

	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	saleID := inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.
	
	self should: [inputInterface listCart: cartID] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongCartID. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 01:47:08' prior: 50880646!
test12

	| inputInterface users catalogue cartID saleID|
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.

	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := '1' asSymbol.
	
	self should: [inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongCartID. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 01:47:15' prior: 50880676!
test12

	| inputInterface users catalogue cartID|
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.

	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := '1' asSymbol.
	
	self should: [inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongCartID. ].! !

!testRun: #InputInterfaceTests #test12 stamp: 'FG 12/2/2020 01:47:40'!
PASSED!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 01:48:25' prior: 50880700!
test12

	| inputInterface users catalogue cartID adulteratedClock|
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.

	adulteratedClock := SimulatedClock new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: adulteratedClock andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	
	adulteratedClock offsetTimeTo: (Duration minutes: 31).
	
	self should: [inputInterface listCart: cartID.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface cartAuthenticationExpired. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 01:49:00' prior: 50880727!
test12

	| inputInterface users catalogue cartID adulteratedClock|
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.

	adulteratedClock := SimulatedClock new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: adulteratedClock andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	adulteratedClock offsetTimeTo: (Duration minutes: 31).
	
	self should: [inputInterface listCart: cartID.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface cartAuthenticationExpired. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 01:49:17' prior: 50880754!
test12

	| inputInterface users catalogue cartID adulteratedClock|
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.

	adulteratedClock := SimulatedClock new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: adulteratedClock andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	adulteratedClock offsetTimeTo: (Duration minutes: 31).
	
	self should: [inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface cartAuthenticationExpired. ].! !

!testRun: #InputInterfaceTests #test12 stamp: 'FG 12/2/2020 01:49:22'!
PASSED!
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 01:52:12'!
listPurchasesOf: anUsername withPassword: aPassword

	! !
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 02:00:24' prior: 50880816!
listPurchasesOf: anUsername withPassword: aPassword
	
	self validateUsername: anUsername.
	self validatePassword: aPassword for: anUsername.
	
	

	! !
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 02:04:26' prior: 50880821!
listPurchasesOf: anUsername withPassword: aPassword
	
	self validateUsername: anUsername.
	self validatePassword: aPassword for: anUsername.
	
	^ (users at: anUsername) totalPurchases

	! !
!Customer methodsFor: 'accessing' stamp: 'FG 12/2/2020 02:13:45'!
totalPurchases

	sales values do:[].! !

bag := Bag new.
bag add: 'Caca' withOccurrences: 5.
!

bag asOrderedCollection.!

bag asSet. !
!Customer methodsFor: 'accessing' stamp: 'FG 12/2/2020 02:26:50' prior: 50880837!
totalPurchases

	| totalBooks total |

	totalBooks := Bag new.
	total := 0.

	sales values do:[:aSale | 
			aSale books asSet do:[:aBook | totalBooks add: aBook withOccurrences: (aSale occurrencesOf: aBook)].	
			total := total + aSale total.
		].! !
!Customer methodsFor: 'accessing' stamp: 'FG 12/2/2020 02:29:24' prior: 50880844!
totalPurchases

	| totalBooks total |

	totalBooks := Bag new.
	total := 0.

	sales values do:[:aSale | 
			aSale books asSet do:[:aBook | totalBooks add: aBook withOccurrences: (aSale occurrencesOf: aBook)].	
			total := total + aSale total.
		].
	
! !
!Sale class methodsFor: 'initialization' stamp: 'FG 12/2/2020 02:30:58'!
withProducts: aBagOfProducts forATotalOf: anAmount
	^ self basicNew initializeWithProducts: aBagOfProducts forATotalOf: anAmount.! !
!Sale methodsFor: 'initialization' stamp: 'FG 12/2/2020 02:32:47'!
initializeWithProducts: aBagOfProducts forATotalOf: anAmount
	books := aBagOfProducts.
	total := anAmount.
	! !
!Sale methodsFor: 'initialization' stamp: 'FG 12/2/2020 02:33:11'!
asdasdadadazeWith: aCart
	books := aCart books.
	total := aCart total.
	! !
!Sale class methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 02:33:11' prior: 50877992!
of: aCart
	^ self basicNew asdasdadadazeWith: aCart.! !

!methodRemoval: Sale #initializeWith: stamp: 'FG 12/2/2020 02:33:11'!
initializeWith: aCart
	books := aCart books.
	total := aCart total.
	!

!methodRemoval: Sale #asdasdadadazeWith: stamp: 'FG 12/2/2020 02:33:16'!
asdasdadadazeWith: aCart
	books := aCart books.
	total := aCart total.
	!

!methodRemoval: Sale class #of: stamp: 'FG 12/2/2020 02:33:21'!
of: aCart
	^ self basicNew asdasdadadazeWith: aCart.!
!Cashier methodsFor: 'checkout' stamp: 'FG 12/2/2020 02:36:01' prior: 50877424!
checkout: aCart payingWith: aCreditCard at: aCurrentGregorianMonthOfYear 
	
	self assertThatCreditCardHasNotExpired: aCreditCard for: aCurrentGregorianMonthOfYear.
	self assertThatCartIsNotEmpty: aCart.
	self assertThatAmountIsNotTooBig: aCart.
	
	^ interface payWith: aCreditCard for: (Sale withProducts: aCart books forATotalOf: aCart total ) requestedBy: self.! !

!testRun: #CartTests #test01NewCartShouldBeEmpty stamp: 'FG 12/2/2020 02:36:06'!
PASSED!

!testRun: #CartTests #test02CartWithABookShouldNotBeEmpty stamp: 'FG 12/2/2020 02:36:06'!
PASSED!

!testRun: #CartTests #test03EmptyCartDoesntHasABook stamp: 'FG 12/2/2020 02:36:06'!
PASSED!

!testRun: #CartTests #test04CartShouldHaveAddedBook stamp: 'FG 12/2/2020 02:36:06'!
PASSED!

!testRun: #CartTests #test05CartShouldNotHaveNonAddedBook stamp: 'FG 12/2/2020 02:36:06'!
PASSED!

!testRun: #CartTests #test06CartShouldAnswerQuantityOfAnAddedBook stamp: 'FG 12/2/2020 02:36:06'!
PASSED!

!testRun: #CartTests #test07CartShouldProperlyAddMoreCopiesOfAnAlreadyAddedBook stamp: 'FG 12/2/2020 02:36:06'!
PASSED!

!testRun: #CartTests #test08CartShouldBeAbleToAnswerWhatBooksItHas stamp: 'FG 12/2/2020 02:36:06'!
PASSED!

!testRun: #CartTests #test09CartCantAddBookThatAreNotInTheCatalogue stamp: 'FG 12/2/2020 02:36:07'!
PASSED!

!testRun: #CartTests #test10CartCantAddANonIntegerAmountOfBooks stamp: 'FG 12/2/2020 02:36:07'!
PASSED!

!testRun: #CartTests #test11CartCantAddANonPositiveAmountOfBooks stamp: 'FG 12/2/2020 02:36:07'!
PASSED!

!testRun: #CashierTests #test01CantCheckoutWithAnEmptyCart stamp: 'FG 12/2/2020 02:36:08'!
PASSED!

!testRun: #CashierTests #test02CheckingOutACartWithABookReturnsItsPrice stamp: 'FG 12/2/2020 02:36:09'!
PASSED!

!testRun: #CashierTests #test03CheckingOutWithTwoDifferentBooksReturnsTheSumOfBothPrices stamp: 'FG 12/2/2020 02:36:09'!
PASSED!

!testRun: #CashierTests #test04CheckingOutMultipleCopiesOfTheSameBookReturnsItsPriceTimesTheQuantity stamp: 'FG 12/2/2020 02:36:09'!
PASSED!

!testRun: #CashierTests #test05CantCheckoutWithAnExpiredCreditCard stamp: 'FG 12/2/2020 02:36:09'!
PASSED!

!testRun: #CashierTests #test06CantCheckoutWhenTotalAmountToPayHasMoreThan15Digits stamp: 'FG 12/2/2020 02:36:09'!
PASSED!

!testRun: #CashierTests #test07CentsMustBeRoundedUpToTwoDigits stamp: 'FG 12/2/2020 02:36:09'!
PASSED!

!testRun: #CashierTests #test08CantCheckOutIfPurchaseIsInvalidatedByMerchantProcessorBecauseOfInvalidParameter stamp: 'FG 12/2/2020 02:36:09'!
PASSED!

!testRun: #CashierTests #test09CantCheckOutIfPurchaseIsInvalidatedByMerchantProcessorBecauseOfAGivenError stamp: 'FG 12/2/2020 02:36:09'!
PASSED!

!testRun: #CreditCardTests #test01CreditCardNumberMustBeComposedOfDigits stamp: 'FG 12/2/2020 02:36:11'!
PASSED!

!testRun: #CreditCardTests #test02CreditCardNumberShouldHaveExactlySixteenDigits stamp: 'FG 12/2/2020 02:36:11'!
PASSED!

!testRun: #CreditCardTests #test03CreditCardOwnerNameCanNotBeEmpty stamp: 'FG 12/2/2020 02:36:11'!
PASSED!

!testRun: #CreditCardTests #test04IfOwnerNameHasMoreThanThirtyCharactersThenItGetsTruncated stamp: 'FG 12/2/2020 02:36:11'!
PASSED!

!testRun: #CreditCardTests #test05CreditCardExpirationDateIsKindaOfGregorianMonthOfYear stamp: 'FG 12/2/2020 02:36:11'!
PASSED!
!Customer methodsFor: 'accessing' stamp: 'FG 12/2/2020 02:37:03' prior: 50880855!
totalPurchases

	| totalBooks total |

	totalBooks := Bag new.
	total := 0.

	sales values do:[:aSale | 
			aSale books asSet do:[:aBook | totalBooks add: aBook withOccurrences: (aSale occurrencesOf: aBook)].	
			total := total + aSale total.
		].
	
	^ Sale withProducts: totalBooks forATotalOf: total. 
! !
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 02:39:31' prior: 50880829!
listPurchasesOf: anUsername withPassword: aPassword
	
	self validateUsername: anUsername.
	self validatePassword: aPassword for: anUsername.
	
	^ (users at: anUsername) totalPurchases.

	! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 02:50:48'!
test13

	| inputInterface users catalogue cartID saleID|
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	catalogue add: 'historyBook' -> 200.

	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 3 ofABookISBN: 'historyBook'.
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.
	
	self assert: (inputInterface listPurchasesOf: 'Username' withPassword: 'Password') equals: (Sale ).! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 02:50:53' prior: 50881029!
test13

	| inputInterface users catalogue cartID|
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	catalogue add: 'historyBook' -> 200.

	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 3 ofABookISBN: 'historyBook'.
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.
	
	self assert: (inputInterface listPurchasesOf: 'Username' withPassword: 'Password') equals: (Sale ).! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 02:54:53' prior: 50881066!
test13

	| inputInterface users catalogue cartID books |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	catalogue add: 'historyBook' -> 200.

	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 3 ofABookISBN: 'historyBook'.
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.
	
	books := Bag new.
	books add: 'mathBook' withOccurrences: 1.
	books add: 'historyBook' withOccurrences: 3.
	 	
	self assert: (inputInterface listPurchasesOf: 'Username' withPassword: 'Password') equals: (Sale withProducts: books forATotalOf: 700 ).! !

!testRun: #InputInterfaceTests #test13 stamp: 'FG 12/2/2020 02:54:55'!
ERROR!

!testRun: #InputInterfaceTests #test13 stamp: 'FG 12/2/2020 02:54:55'!
ERROR!
!Customer methodsFor: 'accessing' stamp: 'FG 12/2/2020 02:56:11' prior: 50881007!
totalPurchases

	| totalBooks total |

	totalBooks := Bag new.
	total := 0.

	sales values do:[:aSale | 
			aSale books asSet do:[:aBook | totalBooks add: aBook withOccurrences: (aSale books occurrencesOf: aBook)].	
			total := total + aSale total.
		].
	
	^ Sale withProducts: totalBooks forATotalOf: total. 
! !

!testRun: #InputInterfaceTests #test13 stamp: 'FG 12/2/2020 02:56:18'!
FAILURE!

!testRun: #InputInterfaceTests #test13 stamp: 'FG 12/2/2020 02:56:18'!
FAILURE!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 02:57:29' prior: 50881103!
test13

	| inputInterface users catalogue cartID books |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	catalogue add: 'historyBook' -> 200.

	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 3 ofABookISBN: 'historyBook'.
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.
	
	books := Bag new.
	books add: 'mathBook' withOccurrences: 1.
	books add: 'historyBook' withOccurrences: 3.
	 	
	self assert: (inputInterface listPurchasesOf: 'Username' withPassword: 'Password') equals: (Sale withProducts: books forATotalOf: 700.0 ).! !

!testRun: #InputInterfaceTests #test13 stamp: 'FG 12/2/2020 02:57:31'!
FAILURE!

!testRun: #InputInterfaceTests #test13 stamp: 'FG 12/2/2020 02:57:31'!
FAILURE!

!testRun: #InputInterfaceTests #test13 stamp: 'FG 12/2/2020 03:01:50'!
FAILURE!

!testRun: #InputInterfaceTests #test13 stamp: 'FG 12/2/2020 03:01:50'!
FAILURE!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 03:05:02' prior: 50881168!
test13

	| inputInterface users catalogue cartID books |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	catalogue add: 'historyBook' -> 200.

	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 3 ofABookISBN: 'historyBook'.
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.
	
	books := Bag new.
	books add: 'mathBook' withOccurrences: 1.
	books add: 'historyBook' withOccurrences: 3.
	
	(inputInterface listPurchasesOf: 'Username' withPassword: 'Password') = (Sale withProducts: books forATotalOf: 700.0 ).
	 	
	self assert: (inputInterface listPurchasesOf: 'Username' withPassword: 'Password') equals: (Sale withProducts: books forATotalOf: 700.0 ).! !

(inputInterface listPurchasesOf: 'Username' withPassword: 'Password') = (Sale withProducts: books forATotalOf: 700.0 ).!

(inputInterface listPurchasesOf: 'Username' withPassword: 'Password') = (Sale withProducts: books forATotalOf: 700.0 ).!

(Sale withProducts: books forATotalOf: 700.0 )!

(inputInterface listPurchasesOf: 'Username' withPassword: 'Password')!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 03:08:00' prior: 50881220!
test13

	| inputInterface users catalogue cartID books |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	catalogue add: 'historyBook' -> 200.

	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 3 ofABookISBN: 'historyBook'.
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.
	
	books := Bag new.
	books add: 'mathBook' withOccurrences: 1.
	books add: 'historyBook' withOccurrences: 3.
	
	(inputInterface listPurchasesOf: 'Username' withPassword: 'Password') = (Sale withProducts: books forATotalOf: 700.0 ).
	 	
	self assert: (inputInterface listPurchasesOf: 'Username' withPassword: 'Password') equals: (Sale withProducts: books forATotalOf: 700.0 ).! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 03:09:18' prior: 50881277!
test13

	| inputInterface users catalogue cartID books |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	catalogue add: 'historyBook' -> 200.

	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 3 ofABookISBN: 'historyBook'.
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.
	
	books := Bag new.
	books add: 'mathBook' withOccurrences: 1.
	books add: 'historyBook' withOccurrences: 3.
	 	
	self assert: (inputInterface listPurchasesOf: 'Username' withPassword: 'Password') books equals: (Sale withProducts: books forATotalOf: 700.0 ) books.
	self assert: (inputInterface listPurchasesOf: 'Username' withPassword: 'Password') total equals: (Sale withProducts: books forATotalOf: 700.0 ) total.
	! !

!testRun: #InputInterfaceTests #test13 stamp: 'FG 12/2/2020 03:09:22'!
PASSED!

----QUIT----(2 December 2020 03:10:05) CuisUniversity-4384.image priorSource: 17435780!

----STARTUP---- (2 December 2020 12:09:45) as C:\Users\FACU PC\Documents\Clases Virtuales\Cosas IS 1\Cuis University\CuisUniversity-4384.image!


Object subclass: #IDGenerator
	instanceVariableNames: 'currentID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #IDGenerator category: 'Ejercicio-TusLibros.com' stamp: 'FG 12/2/2020 12:11:03'!
Object subclass: #IDGenerator
	instanceVariableNames: 'currentID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

Object subclass: #IDGenerator
	instanceVariableNames: 'currentID generationProtocol'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #IDGenerator category: 'Ejercicio-TusLibros.com' stamp: 'FG 12/2/2020 12:11:13'!
Object subclass: #IDGenerator
	instanceVariableNames: 'currentID generationProtocol'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!IDGenerator class methodsFor: 'no messages' stamp: 'FG 12/2/2020 12:12:33'!
startingWith: anID withProtocol: aClosure

	^ self basicNew initializeStartingWith: anID withProtocol: aClosure.! !
!IDGenerator methodsFor: 'nil' stamp: 'FG 12/2/2020 12:13:21'!
initializeStartingWith: anID withProtocol: aClosure.

	currentID := anID.
	generationProtocol := aClosure.! !
!IDGenerator methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 12:13:55'!
initializeWithID: anID withProtocol: aClosure.

	currentID := anID.
	generationProtocol := aClosure.! !
!IDGenerator class methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 12:13:55' prior: 50881405!
startingWith: anID withProtocol: aClosure

	^ self basicNew initializeWithID: anID withProtocol: aClosure.! !

!methodRemoval: IDGenerator #initializeStartingWith:withProtocol: stamp: 'FG 12/2/2020 12:13:55'!
initializeStartingWith: anID withProtocol: aClosure.

	currentID := anID.
	generationProtocol := aClosure.!
!IDGenerator methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 12:15:54'!
generateNewID
	! !
!IDGenerator methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 12:36:43' prior: 50881437!
generateNewID
	
	currentID := generationProtocol value: currentID.
	^ currentID.! !

Object subclass: #InputInterface
	instanceVariableNames: 'catalogue userIDGenerator saleIDGenerator users carts clock cartExpirationTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #InputInterface category: 'Ejercicio-TusLibros.com' stamp: 'FG 12/2/2020 12:38:01'!
Object subclass: #InputInterface
	instanceVariableNames: 'catalogue userIDGenerator saleIDGenerator users carts clock cartExpirationTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!InputInterface methodsFor: 'initialization' stamp: 'FG 12/2/2020 12:39:13' prior: 50880202!
initializeWithUsers: anUsersCollection withCatalogue: aCatalogue withClock: aClock withCartExpirationOf: aDuration.

	users := self createUserDirectoryFrom: anUsersCollection.
	carts := Dictionary new.
	catalogue := aCatalogue.
	clock := aClock.
	cartExpirationTime := aDuration.
	userIDGenerator := IDGenerator startingWith: '0' withProtocol: [:aCurrentID | ] .
	saleIDGenerator := IDGenerator startingWith: '5' withProtocol: [:aCurrentID | ].! !
!InputInterface methodsFor: 'initialization' stamp: 'FG 12/2/2020 12:40:23' prior: 50881464!
initializeWithUsers: anUsersCollection withCatalogue: aCatalogue withClock: aClock withCartExpirationOf: aDuration.

	users := self createUserDirectoryFrom: anUsersCollection.
	carts := Dictionary new.
	catalogue := aCatalogue.
	clock := aClock.
	cartExpirationTime := aDuration.
	userIDGenerator := IDGenerator startingWith: '0' withProtocol: [:aCurrentID | (aCurrentID asInteger + 3) asString ] .
	saleIDGenerator := IDGenerator startingWith: '5' withProtocol: [:aCurrentID | (aCurrentID asInteger + 1) asString ].! !

!methodRemoval: InputInterface #generateCartId stamp: 'FG 12/2/2020 12:40:28'!
generateCartId
	globalNextUserID := (globalNextUserID asInteger + 1) asString.
	^globalNextUserID.!

!methodRemoval: InputInterface #generateSaleID stamp: 'FG 12/2/2020 12:40:31'!
generateSaleID
	globalTransactionsID := (globalTransactionsID asInteger + 1) asString.
	^globalTransactionsID.!
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 12:41:04' prior: 50880091!
createCartFor: anUsername withPassword: aPassword
	
	| cartID |
	
	self validateUsername: anUsername.
	self validatePassword: aPassword for: anUsername.
	
	cartID := 0.
	
	carts add: cartID -> anUsername.
	(users at: anUsername) addCart: (Cart with: catalogue at: clock now) withID: cartID.

	^ cartID.! !

Object subclass: #InputInterface
	instanceVariableNames: 'catalogue cartIDGenerator saleIDGenerator users carts clock cartExpirationTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!

!classDefinition: #InputInterface category: 'Ejercicio-TusLibros.com' stamp: 'FG 12/2/2020 12:41:13'!
Object subclass: #InputInterface
	instanceVariableNames: 'catalogue cartIDGenerator saleIDGenerator users carts clock cartExpirationTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!InputInterface methodsFor: 'initialization' stamp: 'FG 12/2/2020 12:41:21' prior: 50881481!
initializeWithUsers: anUsersCollection withCatalogue: aCatalogue withClock: aClock withCartExpirationOf: aDuration.

	users := self createUserDirectoryFrom: anUsersCollection.
	carts := Dictionary new.
	catalogue := aCatalogue.
	clock := aClock.
	cartExpirationTime := aDuration.
	cartIDGenerator := IDGenerator startingWith: '0' withProtocol: [:aCurrentID | (aCurrentID asInteger + 3) asString ] .
	saleIDGenerator := IDGenerator startingWith: '5' withProtocol: [:aCurrentID | (aCurrentID asInteger + 1) asString ].! !
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 12:41:41' prior: 50881512!
createCartFor: anUsername withPassword: aPassword
	
	| cartID |
	
	self validateUsername: anUsername.
	self validatePassword: aPassword for: anUsername.
	
	cartID := cartIDGenerator.
	
	carts add: cartID -> anUsername.
	(users at: anUsername) addCart: (Cart with: catalogue at: clock now) withID: cartID.

	^ cartID.! !
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 12:41:58' prior: 50881561!
createCartFor: anUsername withPassword: aPassword
	
	| cartID |
	
	self validateUsername: anUsername.
	self validatePassword: aPassword for: anUsername.
	
	cartID := cartIDGenerator generateNewID.
	
	carts add: cartID -> anUsername.
	(users at: anUsername) addCart: (Cart with: catalogue at: clock now) withID: cartID.

	^ cartID.! !
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 12:43:07' prior: 50880390!
checkoutCart: aCartID withPlasticNumber: aPlasticNumber validThrough: aMonthAndYearString namedAfter: anOwnerName

	| sale saleID |

	self validateCartID: aCartID.
	self validateThatCartHasNotExpired: aCartID.
	
	sale := (Cashier payingThrough: OutputInterfaceSimulator new) 
				checkout: ((self ownerOf: aCartID) cartAt: aCartID) 
				payingWith: (CreditCard withPlasticNumber: aPlasticNumber namedAfter: anOwnerName validThrough: (self changeDate: aMonthAndYearString)) 
				at: clock now.
				
	saleID := saleIDGenerator.
	
	(self ownerOf: aCartID) updateCart: aCartID at: clock now. 
	(self ownerOf: aCartID) addSale: sale withID: saleID.

	^ saleID.

	! !
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 12:43:18' prior: 50881588!
checkoutCart: aCartID withPlasticNumber: aPlasticNumber validThrough: aMonthAndYearString namedAfter: anOwnerName

	| sale saleID |

	self validateCartID: aCartID.
	self validateThatCartHasNotExpired: aCartID.
	
	sale := (Cashier payingThrough: OutputInterfaceSimulator new) 
				checkout: ((self ownerOf: aCartID) cartAt: aCartID) 
				payingWith: (CreditCard withPlasticNumber: aPlasticNumber namedAfter: anOwnerName validThrough: (self changeDate: aMonthAndYearString)) 
				at: clock now.
				
	saleID := saleIDGenerator generateNewID.
	
	(self ownerOf: aCartID) updateCart: aCartID at: clock now. 
	(self ownerOf: aCartID) addSale: sale withID: saleID.

	^ saleID.

	! !

!testRun: #InputInterfaceTests #test01 stamp: 'FG 12/2/2020 12:43:31'!
PASSED!

!testRun: #InputInterfaceTests #test02 stamp: 'FG 12/2/2020 12:43:31'!
PASSED!

!testRun: #InputInterfaceTests #test03 stamp: 'FG 12/2/2020 12:43:31'!
PASSED!

!testRun: #InputInterfaceTests #test04 stamp: 'FG 12/2/2020 12:43:31'!
PASSED!

!testRun: #InputInterfaceTests #test05 stamp: 'FG 12/2/2020 12:43:31'!
PASSED!

!testRun: #InputInterfaceTests #test06 stamp: 'FG 12/2/2020 12:43:31'!
PASSED!

!testRun: #InputInterfaceTests #test07 stamp: 'FG 12/2/2020 12:43:31'!
PASSED!

!testRun: #InputInterfaceTests #test08 stamp: 'FG 12/2/2020 12:43:31'!
PASSED!

!testRun: #InputInterfaceTests #test09 stamp: 'FG 12/2/2020 12:43:31'!
ERROR!

!testRun: #InputInterfaceTests #test10 stamp: 'FG 12/2/2020 12:43:31'!
PASSED!

!testRun: #InputInterfaceTests #test11 stamp: 'FG 12/2/2020 12:43:31'!
PASSED!

!testRun: #InputInterfaceTests #test12 stamp: 'FG 12/2/2020 12:43:31'!
PASSED!

!testRun: #InputInterfaceTests #test13 stamp: 'FG 12/2/2020 12:43:32'!
PASSED!

!testRun: #InputInterfaceTests #test09 stamp: 'FG 12/2/2020 12:43:32'!
ERROR!

!testRun: #InputInterfaceTests #test01 stamp: 'FG 12/2/2020 12:43:38'!
PASSED!

!testRun: #InputInterfaceTests #test02 stamp: 'FG 12/2/2020 12:43:38'!
PASSED!

!testRun: #InputInterfaceTests #test03 stamp: 'FG 12/2/2020 12:43:38'!
PASSED!

!testRun: #InputInterfaceTests #test04 stamp: 'FG 12/2/2020 12:43:38'!
PASSED!

!testRun: #InputInterfaceTests #test05 stamp: 'FG 12/2/2020 12:43:38'!
PASSED!

!testRun: #InputInterfaceTests #test06 stamp: 'FG 12/2/2020 12:43:38'!
PASSED!

!testRun: #InputInterfaceTests #test07 stamp: 'FG 12/2/2020 12:43:38'!
PASSED!

!testRun: #InputInterfaceTests #test08 stamp: 'FG 12/2/2020 12:43:38'!
PASSED!

!testRun: #InputInterfaceTests #test09 stamp: 'FG 12/2/2020 12:43:38'!
ERROR!

!testRun: #InputInterfaceTests #test10 stamp: 'FG 12/2/2020 12:43:38'!
PASSED!

!testRun: #InputInterfaceTests #test11 stamp: 'FG 12/2/2020 12:43:38'!
PASSED!

!testRun: #InputInterfaceTests #test12 stamp: 'FG 12/2/2020 12:43:38'!
PASSED!

!testRun: #InputInterfaceTests #test13 stamp: 'FG 12/2/2020 12:43:38'!
PASSED!

!testRun: #InputInterfaceTests #test09 stamp: 'FG 12/2/2020 12:43:38'!
ERROR!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 12:43:54' prior: 50880452!
test09

	| inputInterface users catalogue cartID adulteratedClock |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	
	adulteratedClock := SimulatedClock new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: adulteratedClock andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	adulteratedClock offsetTimeTo: (Duration minutes: 31).
	
	self should: [inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface cartAuthenticationExpired. ].! !

!testRun: #InputInterfaceTests #test09 stamp: 'FG 12/2/2020 12:43:56'!
PASSED!

!testRun: #InputInterfaceTests #test01 stamp: 'FG 12/2/2020 12:43:59'!
PASSED!

!testRun: #InputInterfaceTests #test02 stamp: 'FG 12/2/2020 12:43:59'!
PASSED!

!testRun: #InputInterfaceTests #test03 stamp: 'FG 12/2/2020 12:43:59'!
PASSED!

!testRun: #InputInterfaceTests #test04 stamp: 'FG 12/2/2020 12:43:59'!
PASSED!

!testRun: #InputInterfaceTests #test05 stamp: 'FG 12/2/2020 12:43:59'!
PASSED!

!testRun: #InputInterfaceTests #test06 stamp: 'FG 12/2/2020 12:43:59'!
PASSED!

!testRun: #InputInterfaceTests #test07 stamp: 'FG 12/2/2020 12:43:59'!
PASSED!

!testRun: #InputInterfaceTests #test08 stamp: 'FG 12/2/2020 12:43:59'!
PASSED!

!testRun: #InputInterfaceTests #test09 stamp: 'FG 12/2/2020 12:43:59'!
PASSED!

!testRun: #InputInterfaceTests #test10 stamp: 'FG 12/2/2020 12:43:59'!
PASSED!

!testRun: #InputInterfaceTests #test11 stamp: 'FG 12/2/2020 12:43:59'!
PASSED!

!testRun: #InputInterfaceTests #test12 stamp: 'FG 12/2/2020 12:43:59'!
PASSED!

!testRun: #InputInterfaceTests #test13 stamp: 'FG 12/2/2020 12:43:59'!
PASSED!
!InputInterface methodsFor: 'private' stamp: 'FG 12/2/2020 13:09:37'!
removeCart: aCartID

	! !
!InputInterface methodsFor: 'private' stamp: 'FG 12/2/2020 13:11:32' prior: 50881769!
removeCart: aCartID

	(self ownerOf: aCartID) removeCart: aCartID.
	carts removeKey: aCartID.
	
	

	! !
!Customer methodsFor: 'accessing' stamp: 'FG 12/2/2020 13:12:03'!
removeCart: aCartID

	carts removeKey: aCartID.! !

!testRun: #CartTests #test01NewCartShouldBeEmpty stamp: 'FG 12/2/2020 13:23:05'!
PASSED!

!testRun: #CartTests #test02CartWithABookShouldNotBeEmpty stamp: 'FG 12/2/2020 13:23:05'!
PASSED!

!testRun: #CartTests #test03EmptyCartDoesntHasABook stamp: 'FG 12/2/2020 13:23:05'!
PASSED!

!testRun: #CartTests #test04CartShouldHaveAddedBook stamp: 'FG 12/2/2020 13:23:05'!
PASSED!

!testRun: #CartTests #test05CartShouldNotHaveNonAddedBook stamp: 'FG 12/2/2020 13:23:05'!
PASSED!

!testRun: #CartTests #test06CartShouldAnswerQuantityOfAnAddedBook stamp: 'FG 12/2/2020 13:23:05'!
PASSED!

!testRun: #CartTests #test07CartShouldProperlyAddMoreCopiesOfAnAlreadyAddedBook stamp: 'FG 12/2/2020 13:23:05'!
PASSED!

!testRun: #CartTests #test08CartShouldBeAbleToAnswerWhatBooksItHas stamp: 'FG 12/2/2020 13:23:05'!
PASSED!

!testRun: #CartTests #test09CartCantAddBookThatAreNotInTheCatalogue stamp: 'FG 12/2/2020 13:23:05'!
PASSED!

!testRun: #CartTests #test10CartCantAddANonIntegerAmountOfBooks stamp: 'FG 12/2/2020 13:23:05'!
PASSED!

!testRun: #CartTests #test11CartCantAddANonPositiveAmountOfBooks stamp: 'FG 12/2/2020 13:23:05'!
PASSED!

!testRun: #CashierTests #test01CantCheckoutWithAnEmptyCart stamp: 'FG 12/2/2020 13:23:07'!
PASSED!

!testRun: #CashierTests #test02CheckingOutACartWithABookReturnsItsPrice stamp: 'FG 12/2/2020 13:23:07'!
PASSED!

!testRun: #CashierTests #test03CheckingOutWithTwoDifferentBooksReturnsTheSumOfBothPrices stamp: 'FG 12/2/2020 13:23:07'!
PASSED!

!testRun: #CashierTests #test04CheckingOutMultipleCopiesOfTheSameBookReturnsItsPriceTimesTheQuantity stamp: 'FG 12/2/2020 13:23:07'!
PASSED!

!testRun: #CashierTests #test05CantCheckoutWithAnExpiredCreditCard stamp: 'FG 12/2/2020 13:23:07'!
PASSED!

!testRun: #CashierTests #test06CantCheckoutWhenTotalAmountToPayHasMoreThan15Digits stamp: 'FG 12/2/2020 13:23:07'!
PASSED!

!testRun: #CashierTests #test07CentsMustBeRoundedUpToTwoDigits stamp: 'FG 12/2/2020 13:23:07'!
PASSED!

!testRun: #CashierTests #test08CantCheckOutIfPurchaseIsInvalidatedByMerchantProcessorBecauseOfInvalidParameter stamp: 'FG 12/2/2020 13:23:07'!
PASSED!

!testRun: #CashierTests #test09CantCheckOutIfPurchaseIsInvalidatedByMerchantProcessorBecauseOfAGivenError stamp: 'FG 12/2/2020 13:23:07'!
PASSED!

!testRun: #CreditCardTests #test01CreditCardNumberMustBeComposedOfDigits stamp: 'FG 12/2/2020 13:23:09'!
PASSED!

!testRun: #CreditCardTests #test02CreditCardNumberShouldHaveExactlySixteenDigits stamp: 'FG 12/2/2020 13:23:09'!
PASSED!

!testRun: #CreditCardTests #test03CreditCardOwnerNameCanNotBeEmpty stamp: 'FG 12/2/2020 13:23:09'!
PASSED!

!testRun: #CreditCardTests #test04IfOwnerNameHasMoreThanThirtyCharactersThenItGetsTruncated stamp: 'FG 12/2/2020 13:23:09'!
PASSED!

!testRun: #CreditCardTests #test05CreditCardExpirationDateIsKindaOfGregorianMonthOfYear stamp: 'FG 12/2/2020 13:23:09'!
PASSED!

!testRun: #InputInterfaceTests #test01 stamp: 'FG 12/2/2020 13:23:10'!
PASSED!

!testRun: #InputInterfaceTests #test02 stamp: 'FG 12/2/2020 13:23:10'!
PASSED!

!testRun: #InputInterfaceTests #test03 stamp: 'FG 12/2/2020 13:23:10'!
PASSED!

!testRun: #InputInterfaceTests #test04 stamp: 'FG 12/2/2020 13:23:10'!
PASSED!

!testRun: #InputInterfaceTests #test05 stamp: 'FG 12/2/2020 13:23:11'!
PASSED!

!testRun: #InputInterfaceTests #test06 stamp: 'FG 12/2/2020 13:23:11'!
PASSED!

!testRun: #InputInterfaceTests #test07 stamp: 'FG 12/2/2020 13:23:11'!
PASSED!

!testRun: #InputInterfaceTests #test08 stamp: 'FG 12/2/2020 13:23:11'!
PASSED!

!testRun: #InputInterfaceTests #test09 stamp: 'FG 12/2/2020 13:23:11'!
PASSED!

!testRun: #InputInterfaceTests #test10 stamp: 'FG 12/2/2020 13:23:11'!
PASSED!

!testRun: #InputInterfaceTests #test11 stamp: 'FG 12/2/2020 13:23:11'!
PASSED!

!testRun: #InputInterfaceTests #test12 stamp: 'FG 12/2/2020 13:23:11'!
PASSED!

!testRun: #InputInterfaceTests #test13 stamp: 'FG 12/2/2020 13:23:11'!
PASSED!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 13:31:49' prior: 50879004!
test02

	| inputInterface users catalogue |
	
	users := OrderedCollection new.
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	self should: [inputInterface createCartFor: 'WrongUser' withPassword: 'Password'] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongUsername. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 13:31:53' prior: 50879194!
test03

	| inputInterface users catalogue |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	self should: [inputInterface createCartFor: 'Username' withPassword: 'Wrong Password'] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongPassword. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 13:31:57' prior: 50879217!
test04

	| inputInterface users catalogue cartID1 cartID2 |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID1 := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	cartID2 := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	self assert: (cartID1 = cartID2) not.! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 13:32:02' prior: 50879240!
test05

	| inputInterface users catalogue cartID |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	self assert: (inputInterface listCart: cartID) equals: Bag new.! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 13:32:06' prior: 50879259!
test06

	| inputInterface users catalogue cartID |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := '1' asSymbol.
	
	self should: [inputInterface listCart: cartID] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongCartID. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 13:32:10' prior: 50879279!
test07

	| inputInterface users catalogue cartID resultingContents |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	resultingContents := Bag new.
	resultingContents add: 'mathBook' withOccurrences: 1.
	
	self assert: (inputInterface listCart: cartID) equals: resultingContents.! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 13:32:14' prior: 50879305!
test08

	| inputInterface users catalogue cartID |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := '1' asSymbol.
	
	self should: [inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongCartID. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 13:32:19' prior: 50881707!
test09

	| inputInterface users catalogue cartID adulteratedClock |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	
	adulteratedClock := SimulatedClock new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: adulteratedClock andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	adulteratedClock offsetTimeTo: (Duration minutes: 31).
	
	self should: [inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface cartAuthenticationExpired. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 13:32:24' prior: 50880241!
test10

	| inputInterface users catalogue cartID adulteratedClock |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	
	adulteratedClock := SimulatedClock new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: adulteratedClock andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	adulteratedClock offsetTimeTo: (Duration minutes: 31).
	
	self should: [inputInterface listCart: cartID.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface cartAuthenticationExpired. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 13:32:28' prior: 50880592!
test11

	| inputInterface users catalogue cartID saleID|
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.

	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	saleID := inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.
	
	self assert: (inputInterface isValidSaleID: saleID).! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 13:32:33' prior: 50880783!
test12

	| inputInterface users catalogue cartID adulteratedClock|
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.

	adulteratedClock := SimulatedClock new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: adulteratedClock andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	adulteratedClock offsetTimeTo: (Duration minutes: 31).
	
	self should: [inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface cartAuthenticationExpired. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 13:32:38' prior: 50881323!
test13

	| inputInterface users catalogue cartID books |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	catalogue add: 'historyBook' -> 200.

	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 3 ofABookISBN: 'historyBook'.
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.
	
	books := Bag new.
	books add: 'mathBook' withOccurrences: 1.
	books add: 'historyBook' withOccurrences: 3.
	 	
	self assert: (inputInterface listPurchasesOf: 'Username' withPassword: 'Password') books equals: (Sale withProducts: books forATotalOf: 700.0 ) books.
	self assert: (inputInterface listPurchasesOf: 'Username' withPassword: 'Password') total equals: (Sale withProducts: books forATotalOf: 700.0 ) total.
	! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 13:33:46' prior: 50878972!
test01

	| inputInterface users catalogue cartID|
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30) .
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	self assert: (inputInterface isValidCartID: cartID).! !
!TestObjectBuilder methodsFor: 'nil' stamp: 'FG 12/2/2020 13:36:53'!
users
	! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 13:38:14' prior: 50882212!
test01

	| inputInterface users catalogue cartID|
	
	users := builder users.
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30) .
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	self assert: (inputInterface isValidCartID: cartID).! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 13:38:25' prior: 50882233!
test01

	| inputInterface users catalogue cartID|
	
	users := builder users.
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30) .
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	self assert: (inputInterface isValidCartID: cartID).! !
!TestObjectBuilder methodsFor: 'build users' stamp: 'FG 12/2/2020 13:38:38' prior: 50882229!
users

	^ OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password')
	! !
!TestObjectBuilder methodsFor: 'nil' stamp: 'FG 12/2/2020 13:39:45'!
emptyCatalogue

	^ Dictionary new.
	! !
!TestObjectBuilder methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 13:41:13'!
catalogueWithABook

	| catalogue |
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	
	^ catalogue.
	! !
!TestObjectBuilder methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 13:41:27'!
catalogueWithTwoBooks

	| catalogue |
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	catalogue add: 'historyBook' -> 200.
	
	^ catalogue.
	! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 13:42:49'!
test01CreateACartGeneratesAValidCartID

	| inputInterface users catalogue cartID|
	
	users := builder users.
	catalogue := builder emptyCatalogue.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30) .
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	self assert: (inputInterface isValidCartID: cartID).! !

!methodRemoval: InputInterfaceTests #test01 stamp: 'FG 12/2/2020 13:42:58'!
test01

	| inputInterface users catalogue cartID|
	
	users := builder users.
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30) .
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	self assert: (inputInterface isValidCartID: cartID).!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 13:43:44' prior: 50881906!
test02

	| inputInterface users catalogue |
	
	users := builder users.
	catalogue := builder emptyCatalogue.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	self should: [inputInterface createCartFor: 'WrongUser' withPassword: 'Password'] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongUsername. ].! !

!testRun: #InputInterfaceTests #test01CreateACartGeneratesAValidCartID stamp: 'FG 12/2/2020 13:43:46'!
PASSED!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 13:45:05'!
test02CantCreateACardForAInvalidUsername

	| inputInterface users catalogue |
	
	users := builder users.
	catalogue := builder emptyCatalogue.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	self should: [inputInterface createCartFor: 'WrongUser' withPassword: 'Password'] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongUsername. ].! !

!methodRemoval: InputInterfaceTests #test02 stamp: 'FG 12/2/2020 13:45:09'!
test02

	| inputInterface users catalogue |
	
	users := builder users.
	catalogue := builder emptyCatalogue.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	self should: [inputInterface createCartFor: 'WrongUser' withPassword: 'Password'] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongUsername. ].!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 13:46:03'!
test03CantCreateACardForAnInvalidPassword

	| inputInterface users catalogue |
	
	users := builder users.
	catalogue := builder emptyCatalogue.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	self should: [inputInterface createCartFor: 'Username' withPassword: 'Wrong Password'] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongPassword. ].! !

!methodRemoval: InputInterfaceTests #test03 stamp: 'FG 12/2/2020 13:46:06'!
test03

	| inputInterface users catalogue |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	self should: [inputInterface createCartFor: 'Username' withPassword: 'Wrong Password'] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongPassword. ].!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 13:46:10'!
test02CantCreateACardForAnInvalidUsername

	| inputInterface users catalogue |
	
	users := builder users.
	catalogue := builder emptyCatalogue.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	self should: [inputInterface createCartFor: 'WrongUser' withPassword: 'Password'] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongUsername. ].! !

!methodRemoval: InputInterfaceTests #test02CantCreateACardForAInvalidUsername stamp: 'FG 12/2/2020 13:46:13'!
test02CantCreateACardForAInvalidUsername

	| inputInterface users catalogue |
	
	users := builder users.
	catalogue := builder emptyCatalogue.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	self should: [inputInterface createCartFor: 'WrongUser' withPassword: 'Password'] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongUsername. ].!

!testRun: #InputInterfaceTests #test03CantCreateACardForAnInvalidPassword stamp: 'FG 12/2/2020 13:46:17'!
PASSED!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 13:47:30'!
test04TwoCreatedCartsHaveDifferentIDs

	| inputInterface users catalogue cartID1 cartID2 |
	
	users := builder users.
	catalogue := builder emptyCatalogue.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID1 := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	cartID2 := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	self assert: (cartID1 = cartID2) not.! !

!methodRemoval: InputInterfaceTests #test04 stamp: 'FG 12/2/2020 13:47:32'!
test04

	| inputInterface users catalogue cartID1 cartID2 |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID1 := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	cartID2 := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	self assert: (cartID1 = cartID2) not.!

!testRun: #InputInterfaceTests #test04TwoCreatedCartsHaveDifferentIDs stamp: 'FG 12/2/2020 13:47:34'!
PASSED!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 13:49:15'!
test05ListingANewCartShouldReturnAnEmptyBag

	| inputInterface users catalogue cartID |
	
	users := builder users.
	catalogue := builder emptyCatalogue.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	self assert: (inputInterface listCart: cartID) equals: Bag new.! !

!methodRemoval: InputInterfaceTests #test05 stamp: 'FG 12/2/2020 13:49:18'!
test05

	| inputInterface users catalogue cartID |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	catalogue := Dictionary new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	self assert: (inputInterface listCart: cartID) equals: Bag new.!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 13:56:09' prior: 50881984!
test06

	| inputInterface users catalogue cartID |
	
	users := builder users.
	catalogue := builder emptyCatalogue.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := 'Este no es un ID'.
	
	self should: [inputInterface listCart: cartID] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongCartID. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 13:56:32'!
test06CantListAInvalidCart

	| inputInterface users catalogue cartID |
	
	users := builder users.
	catalogue := builder emptyCatalogue.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := 'Este no es un ID'.
	
	self should: [inputInterface listCart: cartID] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongCartID. ].! !

!testRun: #InputInterfaceTests #test06CantListAInvalidCart stamp: 'FG 12/2/2020 13:56:34'!
PASSED!

!methodRemoval: InputInterfaceTests #test06 stamp: 'FG 12/2/2020 13:56:36'!
test06

	| inputInterface users catalogue cartID |
	
	users := builder users.
	catalogue := builder emptyCatalogue.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := 'Este no es un ID'.
	
	self should: [inputInterface listCart: cartID] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongCartID. ].!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 13:58:36'!
test07ListShouldDisplayAddedBooksToTheCart

	| inputInterface users catalogue cartID resultingContents |
	
	users := builder users.
	catalogue := builder catalogueWithABook.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	resultingContents := Bag new.
	resultingContents add: 'mathBook' withOccurrences: 1.
	
	self assert: (inputInterface listCart: cartID) equals: resultingContents.! !

!methodRemoval: InputInterfaceTests #test07 stamp: 'FG 12/2/2020 13:58:40'!
test07

	| inputInterface users catalogue cartID resultingContents |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	resultingContents := Bag new.
	resultingContents add: 'mathBook' withOccurrences: 1.
	
	self assert: (inputInterface listCart: cartID) equals: resultingContents.!

!testRun: #InputInterfaceTests #test07ListShouldDisplayAddedBooksToTheCart stamp: 'FG 12/2/2020 13:58:42'!
PASSED!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 13:59:11' prior: 50882030!
test08

	| inputInterface users catalogue cartID |
	
	users := builder users.
	catalogue := builder catalogueWithABook.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := '1' asSymbol.
	
	self should: [inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongCartID. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 13:59:31' prior: 50882646!
test08

	| inputInterface users catalogue cartID |
	
	users := builder users.
	catalogue := builder catalogueWithABook.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := 'Este no es un ID'.
	
	self should: [inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBookUnmatched string quote ->'.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongCartID. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 14:00:50'!
test08CantAddToAnInvalidCart

	| inputInterface users catalogue cartID |
	
	users := builder users.
	catalogue := builder catalogueWithABook.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := 'Este no es un ID'.
	
	self should: [inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongCartID. ].! !

!methodRemoval: InputInterfaceTests #test08 stamp: 'FG 12/2/2020 14:00:53'!
test08

	| inputInterface users catalogue cartID |
	
	users := builder users.
	catalogue := builder catalogueWithABook.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := 'Este no es un ID'.
	
	self should: [inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBookUnmatched string quote ->'.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongCartID. ].!

!testRun: #InputInterfaceTests #test08CantAddToAnInvalidCart stamp: 'FG 12/2/2020 14:00:55'!
PASSED!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 14:00:59'!
test06CantListAnInvalidCart

	| inputInterface users catalogue cartID |
	
	users := builder users.
	catalogue := builder emptyCatalogue.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := 'Este no es un ID'.
	
	self should: [inputInterface listCart: cartID] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongCartID. ].! !

!methodRemoval: InputInterfaceTests #test06CantListAInvalidCart stamp: 'FG 12/2/2020 14:01:02'!
test06CantListAInvalidCart

	| inputInterface users catalogue cartID |
	
	users := builder users.
	catalogue := builder emptyCatalogue.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := 'Este no es un ID'.
	
	self should: [inputInterface listCart: cartID] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongCartID. ].!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 14:01:56'!
test09CantAddToAnExpiredCart

	| inputInterface users catalogue cartID adulteratedClock |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	catalogue := builder catalogueWithABook.
	
	adulteratedClock := SimulatedClock new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: adulteratedClock andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	adulteratedClock offsetTimeTo: (Duration minutes: 31).
	
	self should: [inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface cartAuthenticationExpired. ].! !

!methodRemoval: InputInterfaceTests #test09 stamp: 'FG 12/2/2020 14:01:58'!
test09

	| inputInterface users catalogue cartID adulteratedClock |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	
	adulteratedClock := SimulatedClock new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: adulteratedClock andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	adulteratedClock offsetTimeTo: (Duration minutes: 31).
	
	self should: [inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface cartAuthenticationExpired. ].!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 14:02:08' prior: 50882764!
test09CantAddToAnExpiredCart

	| inputInterface users catalogue cartID adulteratedClock |
	
	users := builder users.
	catalogue := builder catalogueWithABook.
	
	adulteratedClock := SimulatedClock new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: adulteratedClock andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	adulteratedClock offsetTimeTo: (Duration minutes: 31).
	
	self should: [inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface cartAuthenticationExpired. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 14:03:15'!
test10CantListAnExpiredCart

	| inputInterface users catalogue cartID adulteratedClock |
	
	users := builder users.
	catalogue := builder catalogueWithABook.
	
	adulteratedClock := SimulatedClock new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: adulteratedClock andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	adulteratedClock offsetTimeTo: (Duration minutes: 31).
	
	self should: [inputInterface listCart: cartID.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface cartAuthenticationExpired. ].! !

!methodRemoval: InputInterfaceTests #test10 stamp: 'FG 12/2/2020 14:03:18'!
test10

	| inputInterface users catalogue cartID adulteratedClock |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	
	adulteratedClock := SimulatedClock new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: adulteratedClock andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	adulteratedClock offsetTimeTo: (Duration minutes: 31).
	
	self should: [inputInterface listCart: cartID.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface cartAuthenticationExpired. ].!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 14:04:17' prior: 50882107!
test11

	| inputInterface users catalogue cartID saleID|
	
	users := builder users.
	catalogue := builder catalogueWithABook.

	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	saleID := inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Valid Name'.
	
	self assert: (inputInterface isValidSaleID: saleID).! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 14:04:43'!
test11CheckingOutACartGeneratesAValidSaleID

	| inputInterface users catalogue cartID saleID|
	
	users := builder users.
	catalogue := builder catalogueWithABook.

	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	saleID := inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Valid Name'.
	
	self assert: (inputInterface isValidSaleID: saleID).! !

!methodRemoval: InputInterfaceTests #test11 stamp: 'FG 12/2/2020 14:04:45'!
test11

	| inputInterface users catalogue cartID saleID|
	
	users := builder users.
	catalogue := builder catalogueWithABook.

	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	saleID := inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Valid Name'.
	
	self assert: (inputInterface isValidSaleID: saleID).!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 14:06:24'!
test12CantCheckoutAnExpiredCart

	| inputInterface users catalogue cartID adulteratedClock|
	
	users := builder users.
	catalogue := builder catalogueWithABook.

	adulteratedClock := SimulatedClock new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: adulteratedClock andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	adulteratedClock offsetTimeTo: (Duration minutes: 31).
	
	self should: [inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Valid Name'.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface cartAuthenticationExpired. ].! !

!methodRemoval: InputInterfaceTests #test12 stamp: 'FG 12/2/2020 14:06:27'!
test12

	| inputInterface users catalogue cartID adulteratedClock|
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.

	adulteratedClock := SimulatedClock new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: adulteratedClock andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	
	adulteratedClock offsetTimeTo: (Duration minutes: 31).
	
	self should: [inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface cartAuthenticationExpired. ].!
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 14:08:54'!
test13ListOfPurchasesShowBooksAndTotalAmountFromAllSalesDone

	| inputInterface users catalogue cartID books |
	
	users := builder users.
	catalogue := builder catalogueWithTwoBooks.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 3 ofABookISBN: 'historyBook'.
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.
	
	books := Bag new.
	books add: 'mathBook' withOccurrences: 1.
	books add: 'historyBook' withOccurrences: 3.
	 	
	self assert: (inputInterface listPurchasesOf: 'Username' withPassword: 'Password') books equals: (Sale withProducts: books forATotalOf: 700.0 ) books.
	self assert: (inputInterface listPurchasesOf: 'Username' withPassword: 'Password') total equals: (Sale withProducts: books forATotalOf: 700.0 ) total.
	! !

!methodRemoval: InputInterfaceTests #test13 stamp: 'FG 12/2/2020 14:08:56'!
test13

	| inputInterface users catalogue cartID books |
	
	users := OrderedCollection with: (Customer withUsername: 'Username' andPassword: 'Password').
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.
	catalogue add: 'historyBook' -> 200.

	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: 'mathBook'.
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 3 ofABookISBN: 'historyBook'.
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.
	
	books := Bag new.
	books add: 'mathBook' withOccurrences: 1.
	books add: 'historyBook' withOccurrences: 3.
	 	
	self assert: (inputInterface listPurchasesOf: 'Username' withPassword: 'Password') books equals: (Sale withProducts: books forATotalOf: 700.0 ) books.
	self assert: (inputInterface listPurchasesOf: 'Username' withPassword: 'Password') total equals: (Sale withProducts: books forATotalOf: 700.0 ) total.
	!

!testRun: #InputInterfaceTests #test01CreateACartGeneratesAValidCartID stamp: 'FG 12/2/2020 14:08:58'!
PASSED!

!testRun: #InputInterfaceTests #test02CantCreateACardForAnInvalidUsername stamp: 'FG 12/2/2020 14:08:58'!
PASSED!

!testRun: #InputInterfaceTests #test03CantCreateACardForAnInvalidPassword stamp: 'FG 12/2/2020 14:08:58'!
PASSED!

!testRun: #InputInterfaceTests #test04TwoCreatedCartsHaveDifferentIDs stamp: 'FG 12/2/2020 14:08:58'!
PASSED!

!testRun: #InputInterfaceTests #test05ListingANewCartShouldReturnAnEmptyBag stamp: 'FG 12/2/2020 14:08:58'!
PASSED!

!testRun: #InputInterfaceTests #test06CantListAnInvalidCart stamp: 'FG 12/2/2020 14:08:58'!
PASSED!

!testRun: #InputInterfaceTests #test07ListShouldDisplayAddedBooksToTheCart stamp: 'FG 12/2/2020 14:08:58'!
PASSED!

!testRun: #InputInterfaceTests #test08CantAddToAnInvalidCart stamp: 'FG 12/2/2020 14:08:58'!
PASSED!

!testRun: #InputInterfaceTests #test09CantAddToAnExpiredCart stamp: 'FG 12/2/2020 14:08:58'!
PASSED!

!testRun: #InputInterfaceTests #test10CantListAnExpiredCart stamp: 'FG 12/2/2020 14:08:58'!
PASSED!

!testRun: #InputInterfaceTests #test11CheckingOutACartGeneratesAValidSaleID stamp: 'FG 12/2/2020 14:08:58'!
PASSED!

!testRun: #InputInterfaceTests #test12CantCheckoutAnExpiredCart stamp: 'FG 12/2/2020 14:08:58'!
PASSED!

!testRun: #InputInterfaceTests #test13ListOfPurchasesShowBooksAndTotalAmountFromAllSalesDone stamp: 'FG 12/2/2020 14:08:58'!
PASSED!
!CartTests methodsFor: 'cart tests' stamp: 'FG 12/2/2020 14:09:47' prior: 50879594!
test01NewCartShouldBeEmpty

	| cart catalogue |
	
	catalogue := builder emptyCatalogue.
	cart := Cart with: catalogue at: (SimulatedClock new now).
	
	self assert: cart isEmpty. ! !
!TestObjectBuilder methodsFor: 'build catalogue' stamp: 'FG 12/2/2020 14:10:55'!
catalogueFirstBook
	^ 'mathBook'! !
!TestObjectBuilder methodsFor: 'build catalogue' stamp: 'FG 12/2/2020 14:11:04'!
catalogueSecondBook
	^ 'historyBook'! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 14:12:12' prior: 50882594!
test07ListShouldDisplayAddedBooksToTheCart

	| inputInterface users catalogue cartID resultingContents |
	
	users := builder users.
	catalogue := builder catalogueWithABook.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: builder catalogueFirstBook.
	
	resultingContents := Bag new.
	resultingContents add: builder catalogueFirstBook withOccurrences: 1.
	
	self assert: (inputInterface listCart: cartID) equals: resultingContents.! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 14:12:20' prior: 50882685!
test08CantAddToAnInvalidCart

	| inputInterface users catalogue cartID |
	
	users := builder users.
	catalogue := builder catalogueWithABook.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := 'Este no es un ID'.
	
	self should: [inputInterface addToCart: cartID anAmount: 1 ofABookISBN: builder catalogueFirstBook.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongCartID. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 14:12:26' prior: 50882819!
test09CantAddToAnExpiredCart

	| inputInterface users catalogue cartID adulteratedClock |
	
	users := builder users.
	catalogue := builder catalogueWithABook.
	
	adulteratedClock := SimulatedClock new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: adulteratedClock andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	adulteratedClock offsetTimeTo: (Duration minutes: 31).
	
	self should: [inputInterface addToCart: cartID anAmount: 1 ofABookISBN: builder catalogueFirstBook.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface cartAuthenticationExpired. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 14:13:13' prior: 50882917!
test11CheckingOutACartGeneratesAValidSaleID

	| inputInterface users catalogue cartID saleID|
	
	users := builder users.
	catalogue := builder catalogueWithABook.

	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: builder catalogueFirstBook.
	
	saleID := inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Valid Name'.
	
	self assert: (inputInterface isValidSaleID: saleID).! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 14:13:21' prior: 50882963!
test12CantCheckoutAnExpiredCart

	| inputInterface users catalogue cartID adulteratedClock|
	
	users := builder users.
	catalogue := builder catalogueWithABook.

	adulteratedClock := SimulatedClock new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: adulteratedClock andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: builder catalogueFirstBook.
	
	adulteratedClock offsetTimeTo: (Duration minutes: 31).
	
	self should: [inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Valid Name'.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface cartAuthenticationExpired. ].! !
!InputInterfaceTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 14:14:15' prior: 50883023!
test13ListOfPurchasesShowBooksAndTotalAmountFromAllSalesDone

	| inputInterface users catalogue cartID books |
	
	users := builder users.
	catalogue := builder catalogueWithTwoBooks.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: builder catalogueFirstBook.
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 3 ofABookISBN: builder catalogueSecondBook .
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Nombre Valido'.
	
	books := Bag new.
	books add: builder catalogueFirstBook withOccurrences: 1.
	books add: builder catalogueSecondBook withOccurrences: 3.
	 	
	self assert: (inputInterface listPurchasesOf: 'Username' withPassword: 'Password') books equals: (Sale withProducts: books forATotalOf: 700.0 ) books.
	self assert: (inputInterface listPurchasesOf: 'Username' withPassword: 'Password') total equals: (Sale withProducts: books forATotalOf: 700.0 ) total.
	! !

!testRun: #InputInterfaceTests #test01CreateACartGeneratesAValidCartID stamp: 'FG 12/2/2020 14:14:17'!
PASSED!

!testRun: #InputInterfaceTests #test02CantCreateACardForAnInvalidUsername stamp: 'FG 12/2/2020 14:14:17'!
PASSED!

!testRun: #InputInterfaceTests #test03CantCreateACardForAnInvalidPassword stamp: 'FG 12/2/2020 14:14:17'!
PASSED!

!testRun: #InputInterfaceTests #test04TwoCreatedCartsHaveDifferentIDs stamp: 'FG 12/2/2020 14:14:18'!
PASSED!

!testRun: #InputInterfaceTests #test05ListingANewCartShouldReturnAnEmptyBag stamp: 'FG 12/2/2020 14:14:18'!
PASSED!

!testRun: #InputInterfaceTests #test06CantListAnInvalidCart stamp: 'FG 12/2/2020 14:14:18'!
PASSED!

!testRun: #InputInterfaceTests #test07ListShouldDisplayAddedBooksToTheCart stamp: 'FG 12/2/2020 14:14:18'!
PASSED!

!testRun: #InputInterfaceTests #test08CantAddToAnInvalidCart stamp: 'FG 12/2/2020 14:14:18'!
PASSED!

!testRun: #InputInterfaceTests #test09CantAddToAnExpiredCart stamp: 'FG 12/2/2020 14:14:18'!
PASSED!

!testRun: #InputInterfaceTests #test10CantListAnExpiredCart stamp: 'FG 12/2/2020 14:14:18'!
PASSED!

!testRun: #InputInterfaceTests #test11CheckingOutACartGeneratesAValidSaleID stamp: 'FG 12/2/2020 14:14:18'!
PASSED!

!testRun: #InputInterfaceTests #test12CantCheckoutAnExpiredCart stamp: 'FG 12/2/2020 14:14:18'!
PASSED!

!testRun: #InputInterfaceTests #test13ListOfPurchasesShowBooksAndTotalAmountFromAllSalesDone stamp: 'FG 12/2/2020 14:14:18'!
PASSED!
!CartTests methodsFor: 'cart tests' stamp: 'FG 12/2/2020 14:15:16' prior: 50879605!
test02CartWithABookShouldNotBeEmpty

	| cart catalogue |
	
	catalogue := builder catalogueWithABook. 
		
	cart := Cart with: catalogue at: (SimulatedClock new now).
	
	cart add: 10 of: builder catalogueFirstBook.
	
	self assert: cart isEmpty not. ! !

!testRun: #CartTests #test02CartWithABookShouldNotBeEmpty stamp: 'FG 12/2/2020 14:15:19'!
PASSED!
!CartTests methodsFor: 'cart tests' stamp: 'FG 12/2/2020 14:16:08' prior: 50879616!
test03EmptyCartDoesntHasABook

	| cart catalogue book |
	
	catalogue := builder catalogueWithABook.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	
	self assert: (cart has: builder catalogueFirstBook) not.! !
!CartTests methodsFor: 'cart tests' stamp: 'FG 12/2/2020 14:16:14' prior: 50883408!
test03EmptyCartDoesntHasABook

	| cart catalogue |
	
	catalogue := builder catalogueWithABook.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	
	self assert: (cart has: builder catalogueFirstBook) not.! !

!testRun: #CartTests #test03EmptyCartDoesntHasABook stamp: 'FG 12/2/2020 14:16:16'!
PASSED!
!CartTests methodsFor: 'cart tests' stamp: 'FG 12/2/2020 14:17:53' prior: 50879627!
test04CartShouldHaveAddedBook

	| cart catalogue book |
	
	catalogue := builder catalogueWithABook. 
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	
	cart add: 10 of: builder catalogueFirstBook. 
	
	self assert: (cart has: builder catalogueFirstBook).! !
!CartTests methodsFor: 'cart tests' stamp: 'FG 12/2/2020 14:18:00' prior: 50883431!
test04CartShouldHaveAddedBook

	| cart catalogue |
	
	catalogue := builder catalogueWithABook. 
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	
	cart add: 10 of: builder catalogueFirstBook. 
	
	self assert: (cart has: builder catalogueFirstBook).! !
!CartTests methodsFor: 'cart tests' stamp: 'FG 12/2/2020 14:18:59' prior: 50879638!
test05CartShouldNotHaveNonAddedBook

	| cart catalogue |
	
	catalogue := builder catalogueWithTwoBooks.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	
	cart add: 10 of: builder catalogueSecondBook. 
	
	self assert: (cart has: builder catalogueFirstBook) not.
	! !

!testRun: #CartTests #test05CartShouldNotHaveNonAddedBook stamp: 'FG 12/2/2020 14:19:06'!
PASSED!

!testRun: #CartTests #test04CartShouldHaveAddedBook stamp: 'FG 12/2/2020 14:19:08'!
PASSED!

!testRun: #CartTests #test03EmptyCartDoesntHasABook stamp: 'FG 12/2/2020 14:19:09'!
PASSED!
!CartTests methodsFor: 'cart tests' stamp: 'FG 12/2/2020 14:20:36' prior: 50879653!
test06CartShouldAnswerQuantityOfAnAddedBook

	| cart catalogue |
	
	catalogue := builder catalogueWithTwoBooks.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
		
	cart add: 100 of: builder catalogueSecondBook.
	cart add: 50 of: builder catalogueFirstBook. 
	
	self assert: (cart quantityOf: builder catalogueSecondBook ) equals: 100.
	self assert: (cart quantityOf: builder catalogueFirstBook ) equals: 50.
	! !

!testRun: #CartTests #test06CartShouldAnswerQuantityOfAnAddedBook stamp: 'FG 12/2/2020 14:20:41'!
PASSED!
!CartTests methodsFor: 'cart tests' stamp: 'FG 12/2/2020 14:21:37' prior: 50879671!
test07CartShouldProperlyAddMoreCopiesOfAnAlreadyAddedBook

	| cart catalogue |
	
	catalogue := builder catalogueWithABook.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
		
	cart add: 50 of: builder catalogueFirstBook . 
	cart add: 150 of: builder catalogueFirstBook .
		
	self assert: (cart quantityOf: builder catalogueFirstBook ) equals: 200.! !

!testRun: #CartTests #test07CartShouldProperlyAddMoreCopiesOfAnAlreadyAddedBook stamp: 'FG 12/2/2020 14:21:41'!
PASSED!
!CartTests methodsFor: 'cart tests' stamp: 'FG 12/2/2020 14:22:51' prior: 50879685!
test08CartShouldBeAbleToAnswerWhatBooksItHas

	| cart catalogue |
	
	catalogue := builder catalogueWithTwoBooks.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	
	cart add: 50 of: builder catalogueFirstBook.
		
	self assert: cart books size equals: 50.
	self assert: (cart books includes: builder catalogueFirstBook ).
	
	cart add: 100 of: builder catalogueSecondBook .
	
	self assert: cart books size equals: 150.
	self assert: (cart books includes: builder catalogueSecondBook ).
	! !

!testRun: #CartTests #test08CartShouldBeAbleToAnswerWhatBooksItHas stamp: 'FG 12/2/2020 14:22:58'!
PASSED!
!CartTests methodsFor: 'cart tests' stamp: 'FG 12/2/2020 14:24:30' prior: 50879706!
test09CartCantAddBookThatAreNotInTheCatalogue

	| cart catalogue |
	
	catalogue := builder catalogueWithABook.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	
	self should: [cart add: 100 of: builder catalogueSecondBook.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: Cart cantAddBooksThatAreNotInTheCatalogue. ].	
! !

!testRun: #CartTests #test09CartCantAddBookThatAreNotInTheCatalogue stamp: 'FG 12/2/2020 14:24:34'!
PASSED!
!CartTests methodsFor: 'cart tests' stamp: 'FG 12/2/2020 14:26:01' prior: 50879723!
test10CartCantAddANonIntegerAmountOfBooks

	| cart catalogue |
	
	catalogue := builder catalogueWithABook.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	
	self should: [cart add: 2.5 of: builder catalogueFirstBook.] 
		 raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: Cart cantAddANonIntegerAmountOfBooks. ].	
! !
!CartTests methodsFor: 'cart tests' stamp: 'FG 12/2/2020 14:26:45' prior: 50879738!
test11CartCantAddANonPositiveAmountOfBooks

	| cart catalogue |
	
	catalogue := builder catalogueWithABook.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	
	self should: [cart add: 0 of: builder catalogueFirstBook.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: Cart cantAddANonPositiveAmountOfBooks. ]
	! !

!testRun: #CartTests #test11CartCantAddANonPositiveAmountOfBooks stamp: 'FG 12/2/2020 14:26:48'!
PASSED!

!testRun: #CartTests #test01NewCartShouldBeEmpty stamp: 'FG 12/2/2020 14:26:51'!
PASSED!

!testRun: #CartTests #test02CartWithABookShouldNotBeEmpty stamp: 'FG 12/2/2020 14:26:51'!
PASSED!

!testRun: #CartTests #test03EmptyCartDoesntHasABook stamp: 'FG 12/2/2020 14:26:51'!
PASSED!

!testRun: #CartTests #test04CartShouldHaveAddedBook stamp: 'FG 12/2/2020 14:26:51'!
PASSED!

!testRun: #CartTests #test05CartShouldNotHaveNonAddedBook stamp: 'FG 12/2/2020 14:26:51'!
PASSED!

!testRun: #CartTests #test06CartShouldAnswerQuantityOfAnAddedBook stamp: 'FG 12/2/2020 14:26:51'!
PASSED!

!testRun: #CartTests #test07CartShouldProperlyAddMoreCopiesOfAnAlreadyAddedBook stamp: 'FG 12/2/2020 14:26:51'!
PASSED!

!testRun: #CartTests #test08CartShouldBeAbleToAnswerWhatBooksItHas stamp: 'FG 12/2/2020 14:26:51'!
PASSED!

!testRun: #CartTests #test09CartCantAddBookThatAreNotInTheCatalogue stamp: 'FG 12/2/2020 14:26:51'!
PASSED!

!testRun: #CartTests #test10CartCantAddANonIntegerAmountOfBooks stamp: 'FG 12/2/2020 14:26:51'!
PASSED!

!testRun: #CartTests #test11CartCantAddANonPositiveAmountOfBooks stamp: 'FG 12/2/2020 14:26:51'!
PASSED!
!CashierTests methodsFor: 'cashier tests' stamp: 'FG 12/2/2020 14:27:37' prior: 50879824!
test01CantCheckoutWithAnEmptyCart

	| cart cashier creditCard |
	
	creditCard := builder validCreditCard.
		
	cart := Cart with: builder emptyCatalogue at: (SimulatedClock new now).
	cashier := Cashier payingThrough: OutputInterfaceSimulator new.
	
	self should: [cashier checkout: cart payingWith: creditCard at: builder currentMonthOfYear.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: Cashier cantCheckoutWithAnEmptyCart. ]! !

!testRun: #CashierTests #test01CantCheckoutWithAnEmptyCart stamp: 'FG 12/2/2020 14:27:38'!
PASSED!
!CashierTests methodsFor: 'cashier tests' stamp: 'FG 12/2/2020 14:28:37' prior: 50879841!
test02CheckingOutACartWithABookReturnsItsPrice

	| cart cashier catalogue creditCard |
	
	creditCard := builder validCreditCard.
	catalogue := builder catalogueWithABook.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	cart add: 1 of: builder catalogueFirstBook. 
	
	cashier := Cashier payingThrough: OutputInterfaceSimulator new.
	
	self assert: (cashier checkout: cart payingWith: creditCard at: builder currentMonthOfYear) total equals: 100.! !
!CashierTests methodsFor: 'cashier tests' stamp: 'FG 12/2/2020 14:28:55' prior: 50883620!
test01CantCheckoutWithAnEmptyCart

	| cart cashier creditCard |
	
	creditCard := builder validCreditCard.
	cart := Cart with: builder emptyCatalogue at: (SimulatedClock new now).
	
	cashier := Cashier payingThrough: OutputInterfaceSimulator new.
	
	self should: [cashier checkout: cart payingWith: creditCard at: builder currentMonthOfYear.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: Cashier cantCheckoutWithAnEmptyCart. ]! !
!CashierTests methodsFor: 'cashier tests' stamp: 'FG 12/2/2020 14:30:20' prior: 50879860!
test03CheckingOutWithTwoDifferentBooksReturnsTheSumOfBothPrices
	
	| cart cashier catalogue creditCard |
	
	creditCard := builder validCreditCard.
	catalogue := builder catalogueWithTwoBooks.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	cart add: 1 of: builder catalogueFirstBook.
	cart add: 1 of: builder catalogueSecondBook.
	
	cashier := Cashier payingThrough: OutputInterfaceSimulator new.
	
	self assert: (cashier checkout: cart payingWith: creditCard at: builder currentMonthOfYear) total equals: 300.! !

!testRun: #CashierTests #test03CheckingOutWithTwoDifferentBooksReturnsTheSumOfBothPrices stamp: 'FG 12/2/2020 14:30:27'!
PASSED!
!CashierTests methodsFor: 'cashier tests' stamp: 'FG 12/2/2020 14:31:31' prior: 50879902!
test04CheckingOutMultipleCopiesOfTheSameBookReturnsItsPriceTimesTheQuantity

	| cart cashier catalogue creditCard |
	
	creditCard := builder validCreditCard.
	catalogue := builder catalogueWithABook.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	cart add: 3 of: builder catalogueFirstBook.
	
	cashier := Cashier payingThrough: OutputInterfaceSimulator new.
	
	self assert: (cashier checkout: cart payingWith: creditCard at: builder currentMonthOfYear) total equals: 300.! !
!CashierTests methodsFor: 'cashier tests' stamp: 'FG 12/2/2020 14:33:06' prior: 50879922!
test05CantCheckoutWithAnExpiredCreditCard
	
	| cart cashier catalogue creditCard |
	
	creditCard := builder expiredCreditCard.
	catalogue := builder catalogueWithABook.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	cart add: 1 of: builder catalogueFirstBook.
	
	cashier := Cashier payingThrough: OutputInterfaceSimulator new.
	
	self should: [cashier checkout: cart payingWith: creditCard at: builder currentMonthOfYear.] 
		raisingAnErrorAndAsserting: [ :anError | self assert: anError messageText equals: Cashier creditCardHasExpired. ].	
	
	! !
!TestObjectBuilder methodsFor: 'build catalogue' stamp: 'FG 12/2/2020 14:33:51'!
catalogueWithOverlyExpensiveBook

	| catalogue |
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100000000000.
	
	^ catalogue.! !
!TestObjectBuilder methodsFor: 'build catalogue' stamp: 'FG 12/2/2020 14:34:12' prior: 50883741!
catalogueWithOverlyExpensiveBook

	| catalogue |
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->1000000000000000.
	
	^ catalogue.! !
!CashierTests methodsFor: 'cashier tests' stamp: 'FG 12/2/2020 14:34:53' prior: 50879944!
test06CantCheckoutWhenTotalAmountToPayHasMoreThan15Digits
	| cart cashier catalogue creditCard |
	
	creditCard := builder validCreditCard.
	catalogue := builder catalogueWithOverlyExpensiveBook.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	cart add: 1 of: builder catalogueFirstBook.
	
	cashier := Cashier payingThrough: OutputInterfaceSimulator new.
	
	self should: [cashier checkout: cart payingWith: creditCard at: builder currentMonthOfYear] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: Cashier amountToBigToProcess. ].
	
	! !
!TestObjectBuilder methodsFor: 'build catalogue' stamp: 'FG 12/2/2020 14:36:11'!
catalogueWithABookWithAnOverlyEspecificPrice

	| catalogue |
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.002.
	
	^ catalogue.! !
!CashierTests methodsFor: 'cashier tests' stamp: 'FG 12/2/2020 14:37:16' prior: 50879967!
test07CentsMustBeRoundedUpToTwoDigits
	| cart cashier catalogue creditCard |
	
	creditCard := builder validCreditCard.
	catalogue := builder catalogueWithABookWithAnOverlyEspecificPrice. 
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	cart add: 1 of: builder catalogueFirstBook.
	
	cashier := Cashier payingThrough: OutputInterfaceSimulator new.
	
	self assert: (cashier checkout: cart payingWith: creditCard at: builder currentMonthOfYear) total equals: 100.01.! !
!TestObjectBuilder methodsFor: 'build catalogue' stamp: 'FG 12/2/2020 14:37:30'!
catalogueWithABookWithAnOverlySpecificPrice

	| catalogue |
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.002.
	
	^ catalogue.! !
!CashierTests methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 14:37:30' prior: 50883786!
test07CentsMustBeRoundedUpToTwoDigits
	| cart cashier catalogue creditCard |
	
	creditCard := builder validCreditCard.
	catalogue := builder catalogueWithABookWithAnOverlySpecificPrice. 
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	cart add: 1 of: builder catalogueFirstBook.
	
	cashier := Cashier payingThrough: OutputInterfaceSimulator new.
	
	self assert: (cashier checkout: cart payingWith: creditCard at: builder currentMonthOfYear) total equals: 100.01.! !

!methodRemoval: TestObjectBuilder #catalogueWithABookWithAnOverlyEspecificPrice stamp: 'FG 12/2/2020 14:37:30'!
catalogueWithABookWithAnOverlyEspecificPrice

	| catalogue |
	
	catalogue := Dictionary new.
	catalogue add: 'mathBook'->100.002.
	
	^ catalogue.!
!CashierTests methodsFor: 'cashier tests' stamp: 'FG 12/2/2020 14:38:28' prior: 50879986!
test08CantCheckOutIfPurchaseIsInvalidatedByMerchantProcessorBecauseOfInvalidParameter
	
	| cart cashier catalogue creditCard |
	
	creditCard := builder validCreditCard.
	catalogue := builder catalogueWithABook.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	cart add: 1 of: builder catalogueFirstBook.
	
	cashier := Cashier payingThrough: OutputInterfaceSimulator new invalidateNextPurchasesBecauseOfInvalidParameters.
	
	self should: [cashier checkout: cart payingWith: creditCard at: builder currentMonthOfYear] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: Cashier purchaseInvalidatedByMerchantProcessorBecauseOfInvalidParameter . ].
	
	! !
!CashierTests methodsFor: 'cashier tests' stamp: 'FG 12/2/2020 14:39:45' prior: 50880012!
test09CantCheckOutIfPurchaseIsInvalidatedByMerchantProcessorBecauseOfAGivenError
	| cart cashier catalogue creditCard |
	
	creditCard := builder validCreditCard.
	catalogue := builder catalogueWithABook.
	
	cart := Cart with: catalogue at: (SimulatedClock new now).
	cart add: 1 of: builder catalogueFirstBook.
	
	cashier := Cashier payingThrough: (OutputInterfaceSimulator new invalidateNextPurchaseForACustomErrorDescription: 'Tarjeta Robada').
	
	self should: [cashier checkout: cart payingWith: creditCard at: builder currentMonthOfYear] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: 'Tarjeta Robada'. ].
	
	! !

!testRun: #CashierTests #test09CantCheckOutIfPurchaseIsInvalidatedByMerchantProcessorBecauseOfAGivenError stamp: 'FG 12/2/2020 14:39:48'!
PASSED!

!testRun: #CashierTests #test01CantCheckoutWithAnEmptyCart stamp: 'FG 12/2/2020 14:39:50'!
PASSED!

!testRun: #CashierTests #test02CheckingOutACartWithABookReturnsItsPrice stamp: 'FG 12/2/2020 14:39:50'!
PASSED!

!testRun: #CashierTests #test03CheckingOutWithTwoDifferentBooksReturnsTheSumOfBothPrices stamp: 'FG 12/2/2020 14:39:50'!
PASSED!

!testRun: #CashierTests #test04CheckingOutMultipleCopiesOfTheSameBookReturnsItsPriceTimesTheQuantity stamp: 'FG 12/2/2020 14:39:50'!
PASSED!

!testRun: #CashierTests #test05CantCheckoutWithAnExpiredCreditCard stamp: 'FG 12/2/2020 14:39:50'!
PASSED!

!testRun: #CashierTests #test06CantCheckoutWhenTotalAmountToPayHasMoreThan15Digits stamp: 'FG 12/2/2020 14:39:50'!
PASSED!

!testRun: #CashierTests #test07CentsMustBeRoundedUpToTwoDigits stamp: 'FG 12/2/2020 14:39:50'!
PASSED!

!testRun: #CashierTests #test08CantCheckOutIfPurchaseIsInvalidatedByMerchantProcessorBecauseOfInvalidParameter stamp: 'FG 12/2/2020 14:39:50'!
PASSED!

!testRun: #CashierTests #test09CantCheckOutIfPurchaseIsInvalidatedByMerchantProcessorBecauseOfAGivenError stamp: 'FG 12/2/2020 14:39:50'!
PASSED!

!testRun: #CreditCardTests #test01CreditCardNumberMustBeComposedOfDigits stamp: 'FG 12/2/2020 14:39:58'!
PASSED!

!testRun: #CreditCardTests #test02CreditCardNumberShouldHaveExactlySixteenDigits stamp: 'FG 12/2/2020 14:39:58'!
PASSED!

!testRun: #CreditCardTests #test03CreditCardOwnerNameCanNotBeEmpty stamp: 'FG 12/2/2020 14:39:58'!
PASSED!

!testRun: #CreditCardTests #test04IfOwnerNameHasMoreThanThirtyCharactersThenItGetsTruncated stamp: 'FG 12/2/2020 14:39:58'!
PASSED!

!testRun: #CreditCardTests #test05CreditCardExpirationDateIsKindaOfGregorianMonthOfYear stamp: 'FG 12/2/2020 14:39:59'!
PASSED!

!testRun: #CartTests #test01NewCartShouldBeEmpty stamp: 'FG 12/2/2020 14:40:00'!
PASSED!

!testRun: #CartTests #test02CartWithABookShouldNotBeEmpty stamp: 'FG 12/2/2020 14:40:00'!
PASSED!

!testRun: #CartTests #test03EmptyCartDoesntHasABook stamp: 'FG 12/2/2020 14:40:00'!
PASSED!

!testRun: #CartTests #test04CartShouldHaveAddedBook stamp: 'FG 12/2/2020 14:40:00'!
PASSED!

!testRun: #CartTests #test05CartShouldNotHaveNonAddedBook stamp: 'FG 12/2/2020 14:40:00'!
PASSED!

!testRun: #CartTests #test06CartShouldAnswerQuantityOfAnAddedBook stamp: 'FG 12/2/2020 14:40:00'!
PASSED!

!testRun: #CartTests #test07CartShouldProperlyAddMoreCopiesOfAnAlreadyAddedBook stamp: 'FG 12/2/2020 14:40:00'!
PASSED!

!testRun: #CartTests #test08CartShouldBeAbleToAnswerWhatBooksItHas stamp: 'FG 12/2/2020 14:40:00'!
PASSED!

!testRun: #CartTests #test09CartCantAddBookThatAreNotInTheCatalogue stamp: 'FG 12/2/2020 14:40:00'!
PASSED!

!testRun: #CartTests #test10CartCantAddANonIntegerAmountOfBooks stamp: 'FG 12/2/2020 14:40:00'!
PASSED!

!testRun: #CartTests #test11CartCantAddANonPositiveAmountOfBooks stamp: 'FG 12/2/2020 14:40:00'!
PASSED!

!testRun: #InputInterfaceTests #test01CreateACartGeneratesAValidCartID stamp: 'FG 12/2/2020 14:40:02'!
PASSED!

!testRun: #InputInterfaceTests #test02CantCreateACardForAnInvalidUsername stamp: 'FG 12/2/2020 14:40:02'!
PASSED!

!testRun: #InputInterfaceTests #test03CantCreateACardForAnInvalidPassword stamp: 'FG 12/2/2020 14:40:02'!
PASSED!

!testRun: #InputInterfaceTests #test04TwoCreatedCartsHaveDifferentIDs stamp: 'FG 12/2/2020 14:40:02'!
PASSED!

!testRun: #InputInterfaceTests #test05ListingANewCartShouldReturnAnEmptyBag stamp: 'FG 12/2/2020 14:40:02'!
PASSED!

!testRun: #InputInterfaceTests #test06CantListAnInvalidCart stamp: 'FG 12/2/2020 14:40:02'!
PASSED!

!testRun: #InputInterfaceTests #test07ListShouldDisplayAddedBooksToTheCart stamp: 'FG 12/2/2020 14:40:02'!
PASSED!

!testRun: #InputInterfaceTests #test08CantAddToAnInvalidCart stamp: 'FG 12/2/2020 14:40:02'!
PASSED!

!testRun: #InputInterfaceTests #test09CantAddToAnExpiredCart stamp: 'FG 12/2/2020 14:40:02'!
PASSED!

!testRun: #InputInterfaceTests #test10CantListAnExpiredCart stamp: 'FG 12/2/2020 14:40:02'!
PASSED!

!testRun: #InputInterfaceTests #test11CheckingOutACartGeneratesAValidSaleID stamp: 'FG 12/2/2020 14:40:02'!
PASSED!

!testRun: #InputInterfaceTests #test12CantCheckoutAnExpiredCart stamp: 'FG 12/2/2020 14:40:02'!
PASSED!

!testRun: #InputInterfaceTests #test13ListOfPurchasesShowBooksAndTotalAmountFromAllSalesDone stamp: 'FG 12/2/2020 14:40:02'!
PASSED!
!InputInterfaceTests methodsFor: 'input interface tests' stamp: 'FG 12/2/2020 15:46:08' prior: 50883303!
test13ListOfPurchasesShowBooksAndTotalAmountFromAllSalesDone

	| inputInterface users catalogue cartID books |
	
	users := builder users.
	catalogue := builder catalogueWithTwoBooks.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: builder catalogueFirstBook.
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Valid Name'.
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 3 ofABookISBN: builder catalogueSecondBook .
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Valid Name'.
	
	books := Bag new.
	books add: builder catalogueFirstBook withOccurrences: 1.
	books add: builder catalogueSecondBook withOccurrences: 3.
	 	
	self assert: (inputInterface listPurchasesOf: 'Username' withPassword: 'Password') books equals: (Sale withProducts: books forATotalOf: 700.0 ) books.
	self assert: (inputInterface listPurchasesOf: 'Username' withPassword: 'Password') total equals: (Sale withProducts: books forATotalOf: 700.0 ) total.
	! !
!InputInterfaceTests methodsFor: 'input interface tests' stamp: 'FG 12/2/2020 15:57:37'!
test14

	| inputInterface users catalogue cartID |
	
	users := builder users.
	catalogue := builder catalogueWithTwoBooks.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: builder catalogueFirstBook.
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Valid Name'.
	 	
	self assert: (inputInterface isValidCartID: cartID) not.! !

!testRun: #InputInterfaceTests #test14 stamp: 'FG 12/2/2020 15:57:49'!
FAILURE!

!testRun: #InputInterfaceTests #test14 stamp: 'FG 12/2/2020 15:57:49'!
FAILURE!
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 15:58:16' prior: 50881612!
checkoutCart: aCartID withPlasticNumber: aPlasticNumber validThrough: aMonthAndYearString namedAfter: anOwnerName

	| sale saleID |

	self validateCartID: aCartID.
	self validateThatCartHasNotExpired: aCartID.
	
	sale := (Cashier payingThrough: OutputInterfaceSimulator new) 
				checkout: ((self ownerOf: aCartID) cartAt: aCartID) 
				payingWith: (CreditCard withPlasticNumber: aPlasticNumber namedAfter: anOwnerName validThrough: (self changeDate: aMonthAndYearString)) 
				at: clock now.
				
	saleID := saleIDGenerator generateNewID.
	
	self removeCart: aCartID.
	(self ownerOf: aCartID) addSale: sale withID: saleID.

	^ saleID.

	! !

!testRun: #InputInterfaceTests #test14 stamp: 'FG 12/2/2020 15:58:25'!
ERROR!

!testRun: #InputInterfaceTests #test14 stamp: 'FG 12/2/2020 15:58:25'!
ERROR!
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 15:58:54' prior: 50884100!
checkoutCart: aCartID withPlasticNumber: aPlasticNumber validThrough: aMonthAndYearString namedAfter: anOwnerName

	| sale saleID |

	self validateCartID: aCartID.
	self validateThatCartHasNotExpired: aCartID.
	
	sale := (Cashier payingThrough: OutputInterfaceSimulator new) 
				checkout: ((self ownerOf: aCartID) cartAt: aCartID) 
				payingWith: (CreditCard withPlasticNumber: aPlasticNumber namedAfter: anOwnerName validThrough: (self changeDate: aMonthAndYearString)) 
				at: clock now.
				
	saleID := saleIDGenerator generateNewID.
	
	(self ownerOf: aCartID) addSale: sale withID: saleID.
	self removeCart: aCartID.

	^ saleID.

	! !

!testRun: #InputInterfaceTests #test14 stamp: 'FG 12/2/2020 15:59:01'!
PASSED!
!InputInterfaceTests methodsFor: 'input interface tests' stamp: 'FG 12/2/2020 16:00:09'!
test14CartShouldBeRemovedAfterCheckout

	| inputInterface users catalogue cartID |
	
	users := builder users.
	catalogue := builder catalogueWithTwoBooks.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: builder catalogueFirstBook.
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Valid Name'.
	 	
	self assert: (inputInterface isValidCartID: cartID) not.! !

!methodRemoval: InputInterfaceTests #test14 stamp: 'FG 12/2/2020 16:00:11'!
test14

	| inputInterface users catalogue cartID |
	
	users := builder users.
	catalogue := builder catalogueWithTwoBooks.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: builder catalogueFirstBook.
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Valid Name'.
	 	
	self assert: (inputInterface isValidCartID: cartID) not.!
!InputInterfaceTests methodsFor: 'input interface tests' stamp: 'FG 12/2/2020 16:01:00'!
test14ExpiredCardShouldBeRemovedBeforeReporting

	| inputInterface users catalogue cartID |
	
	users := builder users.
	catalogue := builder catalogueWithTwoBooks.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: builder catalogueFirstBook.
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Valid Name'.
	 	
	self assert: (inputInterface isValidCartID: cartID) not.! !
!InputInterfaceTests methodsFor: 'input interface tests' stamp: 'FG 12/2/2020 16:01:05'!
test15ExpiredCardShouldBeRemovedBeforeReporting

	| inputInterface users catalogue cartID |
	
	users := builder users.
	catalogue := builder catalogueWithTwoBooks.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: builder catalogueFirstBook.
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Valid Name'.
	 	
	self assert: (inputInterface isValidCartID: cartID) not.! !

!methodRemoval: InputInterfaceTests #test14ExpiredCardShouldBeRemovedBeforeReporting stamp: 'FG 12/2/2020 16:01:08'!
test14ExpiredCardShouldBeRemovedBeforeReporting

	| inputInterface users catalogue cartID |
	
	users := builder users.
	catalogue := builder catalogueWithTwoBooks.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: builder catalogueFirstBook.
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Valid Name'.
	 	
	self assert: (inputInterface isValidCartID: cartID) not.!
!InputInterfaceTests methodsFor: 'input interface tests' stamp: 'FG 12/2/2020 16:05:19' prior: 50884224!
test15ExpiredCardShouldBeRemovedBeforeReporting

	| inputInterface users catalogue cartID |
	
	users := builder users.
	catalogue := builder catalogueWithTwoBooks.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	

	
	 	
	self assert: (inputInterface isValidCartID: cartID) not.! !
!InputInterfaceTests methodsFor: 'input interface tests' stamp: 'FG 12/2/2020 16:07:05' prior: 50884273!
test15ExpiredCardShouldBeRemovedBeforeReporting

	| inputInterface users catalogue cartID adulteratedClock |
	
	users := builder users.
	catalogue := builder catalogueWithABook.
	
	adulteratedClock := SimulatedClock new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: adulteratedClock andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	adulteratedClock offsetTimeTo: (Duration minutes: 31).
	 	
	self assert: (inputInterface isValidCartID: cartID) not.! !
!InputInterfaceTests methodsFor: 'input interface tests' stamp: 'FG 12/2/2020 16:09:55' prior: 50884289!
test15ExpiredCardShouldBeRemovedBeforeReporting

	| inputInterface users catalogue cartID adulteratedClock |
	
	users := builder users.
	catalogue := builder catalogueWithABook.
	
	adulteratedClock := SimulatedClock new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: adulteratedClock andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	adulteratedClock offsetTimeTo: (Duration minutes: 31).
	 	
	self should: [inputInterface addToCart: cartID anAmount: 1 ofABookISBN: builder catalogueFirstBook.] 
		raisingAnErrorAndAsserting: [self assert: (inputInterface isValidCartID: cartID) not.].! !

!testRun: #InputInterfaceTests #test15ExpiredCardShouldBeRemovedBeforeReporting stamp: 'FG 12/2/2020 16:09:59'!
FAILURE!

!testRun: #InputInterfaceTests #test15ExpiredCardShouldBeRemovedBeforeReporting stamp: 'FG 12/2/2020 16:09:59'!
FAILURE!
!InputInterface methodsFor: 'validations' stamp: 'FG 12/2/2020 16:10:38' prior: 50879524!
validateThatCartHasNotExpired: aCartID

	((self ownerOf: aCartID) cartHasExpired: aCartID at: clock now after: cartExpirationTime) 
		ifTrue: [
			self removeCart: aCartID.
			self error: InputInterface cartAuthenticationExpired. 
		].

	
	! !

!testRun: #InputInterfaceTests #test15ExpiredCardShouldBeRemovedBeforeReporting stamp: 'FG 12/2/2020 16:10:44'!
PASSED!

!testRun: #InputInterfaceTests #test01CreateACartGeneratesAValidCartID stamp: 'FG 12/2/2020 16:10:47'!
PASSED!

!testRun: #InputInterfaceTests #test02CantCreateACardForAnInvalidUsername stamp: 'FG 12/2/2020 16:10:47'!
PASSED!

!testRun: #InputInterfaceTests #test03CantCreateACardForAnInvalidPassword stamp: 'FG 12/2/2020 16:10:47'!
PASSED!

!testRun: #InputInterfaceTests #test04TwoCreatedCartsHaveDifferentIDs stamp: 'FG 12/2/2020 16:10:47'!
PASSED!

!testRun: #InputInterfaceTests #test05ListingANewCartShouldReturnAnEmptyBag stamp: 'FG 12/2/2020 16:10:47'!
PASSED!

!testRun: #InputInterfaceTests #test06CantListAnInvalidCart stamp: 'FG 12/2/2020 16:10:47'!
PASSED!

!testRun: #InputInterfaceTests #test07ListShouldDisplayAddedBooksToTheCart stamp: 'FG 12/2/2020 16:10:47'!
PASSED!

!testRun: #InputInterfaceTests #test08CantAddToAnInvalidCart stamp: 'FG 12/2/2020 16:10:47'!
PASSED!

!testRun: #InputInterfaceTests #test09CantAddToAnExpiredCart stamp: 'FG 12/2/2020 16:10:47'!
PASSED!

!testRun: #InputInterfaceTests #test10CantListAnExpiredCart stamp: 'FG 12/2/2020 16:10:47'!
PASSED!

!testRun: #InputInterfaceTests #test11CheckingOutACartGeneratesAValidSaleID stamp: 'FG 12/2/2020 16:10:47'!
PASSED!

!testRun: #InputInterfaceTests #test12CantCheckoutAnExpiredCart stamp: 'FG 12/2/2020 16:10:47'!
PASSED!

!testRun: #InputInterfaceTests #test13ListOfPurchasesShowBooksAndTotalAmountFromAllSalesDone stamp: 'FG 12/2/2020 16:10:47'!
PASSED!

!testRun: #InputInterfaceTests #test14CartShouldBeRemovedAfterCheckout stamp: 'FG 12/2/2020 16:10:47'!
PASSED!

!testRun: #InputInterfaceTests #test15ExpiredCardShouldBeRemovedBeforeReporting stamp: 'FG 12/2/2020 16:10:47'!
PASSED!
!InputInterfaceTests methodsFor: 'input interface tests' stamp: 'FG 12/2/2020 17:25:06'!
test15ExpiredCartShouldBeRemovedBeforeReporting

	| inputInterface users catalogue cartID adulteratedClock |
	
	users := builder users.
	catalogue := builder catalogueWithABook.
	
	adulteratedClock := SimulatedClock new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: adulteratedClock andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	adulteratedClock offsetTimeTo: (Duration minutes: 31).
	 	
	self should: [inputInterface addToCart: cartID anAmount: 1 ofABookISBN: builder catalogueFirstBook.] 
		raisingAnErrorAndAsserting: [self assert: (inputInterface isValidCartID: cartID) not.].! !

!methodRemoval: InputInterfaceTests #test15ExpiredCardShouldBeRemovedBeforeReporting stamp: 'FG 12/2/2020 17:25:10'!
test15ExpiredCardShouldBeRemovedBeforeReporting

	| inputInterface users catalogue cartID adulteratedClock |
	
	users := builder users.
	catalogue := builder catalogueWithABook.
	
	adulteratedClock := SimulatedClock new.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: adulteratedClock andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	
	adulteratedClock offsetTimeTo: (Duration minutes: 31).
	 	
	self should: [inputInterface addToCart: cartID anAmount: 1 ofABookISBN: builder catalogueFirstBook.] 
		raisingAnErrorAndAsserting: [self assert: (inputInterface isValidCartID: cartID) not.].!
!InputInterface methodsFor: 'initialization' stamp: 'FG 12/2/2020 17:28:28' prior: 50881542!
initializeWithUsers: anUsersCollection withCatalogue: aCatalogue withClock: aClock withCartExpirationOf: aDuration.

	users := self createUserDirectoryFrom: anUsersCollection.
	carts := Dictionary new.
	catalogue := aCatalogue.
	clock := aClock.
	cartExpirationTime := aDuration.
	cartIDGenerator := IDGenerator startingWith: '0' withProtocol: [:aCurrentID | (aCurrentID asInteger + 3) asString ].
	saleIDGenerator := IDGenerator startingWith: '5' withProtocol: [:aCurrentID | (aCurrentID asInteger + 1) asString ].! !
!InputInterface methodsFor: 'initialization' stamp: 'FG 12/2/2020 17:32:28' prior: 50878476!
createUserDirectoryFrom: anUsersCollection
	
	| userDirectory |
	
	userDirectory := Dictionary new.
	
	anUsersCollection do: [:anUser | userDirectory add: (anUser username) -> anUser ].
	
	^ userDirectory.
	! !

!classDefinition: #InputInterface category: 'Ejercicio-TusLibros.com' stamp: 'FG 12/2/2020 17:33:06'!
Object subclass: #InputInterface
	instanceVariableNames: 'catalogue cartIDGenerator saleIDGenerator users userByCart clock cartExpirationTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-TusLibros.com'!
!InputInterface methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 17:33:06' prior: 50878453!
ownerOf: aCartID
	^ (users at: (userByCart at: aCartID))
	! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 17:33:06' prior: 50884462!
initializeWithUsers: anUsersCollection withCatalogue: aCatalogue withClock: aClock withCartExpirationOf: aDuration.

	users := self createUserDirectoryFrom: anUsersCollection.
	userByCart := Dictionary new.
	catalogue := aCatalogue.
	clock := aClock.
	cartExpirationTime := aDuration.
	cartIDGenerator := IDGenerator startingWith: '0' withProtocol: [:aCurrentID | (aCurrentID asInteger + 3) asString ].
	saleIDGenerator := IDGenerator startingWith: '5' withProtocol: [:aCurrentID | (aCurrentID asInteger + 1) asString ].! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 17:33:06' prior: 50881574!
createCartFor: anUsername withPassword: aPassword
	
	| cartID |
	
	self validateUsername: anUsername.
	self validatePassword: aPassword for: anUsername.
	
	cartID := cartIDGenerator generateNewID.
	
	userByCart add: cartID -> anUsername.
	(users at: anUsername) addCart: (Cart with: catalogue at: clock now) withID: cartID.

	^ cartID.! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 17:33:06' prior: 50878645!
isValidCartID: aCartID

	^ ((userByCart keys includes: aCartID) and: [(self ownerOf: aCartID) isValidCartID: aCartID])
	
	! !
!InputInterface methodsFor: 'as yet unclassified' stamp: 'FG 12/2/2020 17:33:06' prior: 50881773!
removeCart: aCartID

	(self ownerOf: aCartID) removeCart: aCartID.
	userByCart removeKey: aCartID.
	
	

	! !
!InputInterface methodsFor: 'private' stamp: 'FG 12/2/2020 17:40:27' prior: 50884502!
ownerOf: aCartID
	^ (users at: (userByCart at: aCartID)).
	! !
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 17:44:47' prior: 50880300!
addToCart: aCartID anAmount: anAmount ofABookISBN: aBookISBN

	self validateCartID: aCartID.
	self validateThatCartHasNotExpired: aCartID.

	(self ownerOf: aCartID) updateCart: aCartID at: clock now.
	(self ownerOf: aCartID) add: anAmount of: aBookISBN to: aCartID.
	! !
!InputInterface methodsFor: 'export' stamp: 'FG 12/2/2020 17:50:42' prior: 50884128!
checkoutCart: aCartID withPlasticNumber: aPlasticNumber validThrough: aMonthAndYearString namedAfter: anOwnerName

	| sale saleID |

	self validateCartID: aCartID.
	self validateThatCartHasNotExpired: aCartID.
	
	sale := (Cashier payingThrough: OutputInterfaceSimulator new) 
				checkout: ((self ownerOf: aCartID) cartAt: aCartID) 
				payingWith: (CreditCard withPlasticNumber: aPlasticNumber namedAfter: anOwnerName validThrough: (self changeDate: aMonthAndYearString)) 
				at: clock now.
				
	saleID := saleIDGenerator generateNewID.
	
	(self ownerOf: aCartID) addSale: sale withID: saleID.
	self removeCart: aCartID.

	^ saleID.	! !
!Customer methodsFor: 'accessing' stamp: 'FG 12/2/2020 17:52:40' prior: 50881149!
totalPurchases

	| totalBooks total |

	totalBooks := Bag new.
	total := 0.

	sales values do:[:aSale | 
			totalBooks addAll: aSale books.	
			total := total + aSale total.
		].
	
	^ Sale withProducts: totalBooks forATotalOf: total. 

	! !

!testRun: #InputInterfaceTests #test13ListOfPurchasesShowBooksAndTotalAmountFromAllSalesDone stamp: 'FG 12/2/2020 17:52:48'!
PASSED!
!InputInterfaceTests methodsFor: 'input interface tests' stamp: 'FG 12/2/2020 17:56:12' prior: 50884026!
test13ListOfPurchasesShowBooksAndTotalAmountFromAllSalesDone

	| inputInterface users catalogue cartID books |
	
	users := builder users.
	catalogue := builder catalogueWithTwoBooks.
	
	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 1 ofABookISBN: builder catalogueFirstBook.
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Valid Name'.
	
	cartID := inputInterface createCartFor: 'Username' withPassword: 'Password'.
	inputInterface addToCart: cartID anAmount: 3 ofABookISBN: builder catalogueSecondBook .
	inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Valid Name'.
	
	books := Bag new.
	books add: builder catalogueFirstBook withOccurrences: 1.
	books add: builder catalogueSecondBook withOccurrences: 3.
	 	
	self assert: (inputInterface listPurchasesOf: 'Username' withPassword: 'Password') books equals: books.
	self assert: (inputInterface listPurchasesOf: 'Username' withPassword: 'Password') total equals: 700.0.
	! !

!testRun: #InputInterfaceTests #test13ListOfPurchasesShowBooksAndTotalAmountFromAllSalesDone stamp: 'FG 12/2/2020 17:56:14'!
PASSED!
!InputInterfaceTests methodsFor: 'input interface tests' stamp: 'FG 12/2/2020 18:15:57'!
test16CantCheckoutAnInvalidCart

	| inputInterface users catalogue cartID |
	
	users := builder users.
	catalogue := builder catalogueWithABook.

	inputInterface := InputInterface newWith: users andACatalogue: catalogue withClock: SimulatedClock new andCartExpirationOf:(Duration minutes: 30).
	
	cartID := 'Este no es un ID'	.
	
	self should: [inputInterface checkoutCart: cartID withPlasticNumber: '0000111122223333' validThrough: '022021'  namedAfter: 'Valid Name'.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: InputInterface wrongCartID. ].! !

!testRun: #InputInterfaceTests #test16CantCheckoutAnInvalidCart stamp: 'FG 12/2/2020 18:16:01'!
PASSED!