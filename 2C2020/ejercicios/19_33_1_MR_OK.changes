

----SNAPSHOT----(24 October 2020 14:09:26) CuisUniversity-4365.image priorSource: 18141396!

Object subclass: #MarsRover
	instanceVariableNames: 'universeSize aliveCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: #MarsRover stamp: 'FG 10/24/2020 14:19:59'!
Object subclass: #MarsRover
	instanceVariableNames: 'universeSize aliveCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'universeSize aliveCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: #MarsRover stamp: 'FG 10/24/2020 14:20:16'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'universeSize aliveCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'nil' stamp: 'FG 10/24/2020 14:33:33'!
test01

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:1@0.
	
	self assert: (marsRover position) equals: 3@3.
	self assert: (marsRover direction) equals: 1@0.! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 10/24/2020 14:33:40'!
ERROR!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:33:51'!
landIn: aPoint pointingTo: aPoint2 
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:35:34' prior: 50898615!
landIn: aPoint pointingTo: aCardinalPoint 
	^ self basicNew initializeIn: aPoint pointingTo: aCardinalPoint! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 10/24/2020 14:35:40'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'FG 10/24/2020 14:35:40'!
ERROR!

!classDefinition: #MarsRover category: #MarsRover stamp: 'FG 10/24/2020 14:35:49'!
Object subclass: #MarsRover
	instanceVariableNames: 'universeSize aliveCells point'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: #MarsRover stamp: 'FG 10/24/2020 14:35:49'!
Object subclass: #MarsRover
	instanceVariableNames: 'universeSize aliveCells point cardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: '}' stamp: 'FG 10/24/2020 14:35:49'!
initializeIn: aPoint pointingTo: aCardinalPoint 
	self shouldBeImplemented.
	point := aPoint.
	cardinalPoint := aCardinalPoint.! !
!MarsRover methodsFor: '}' stamp: 'FG 10/24/2020 14:35:58' prior: 50898647!
initializeIn: aPoint pointingTo: aCardinalPoint 
	point := aPoint.
	cardinalPoint := aCardinalPoint.! !

!methodRemoval: MarsRover #initializeIn:pointingTo: stamp: 'FG 10/24/2020 14:36:45'!
initializeIn: aPoint pointingTo: aCardinalPoint 
	point := aPoint.
	cardinalPoint := aCardinalPoint.!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:37:21' prior: 50898621!
landIn: aPosition pointingTo: aDirection 
	^ self basicNew initializeIn: aPosition pointingTo: aDirection.! !

Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: #MarsRover stamp: 'FG 10/24/2020 14:37:32'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!testRun: #MarsRoverTest #test01 stamp: 'FG 10/24/2020 14:37:41'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'FG 10/24/2020 14:37:41'!
ERROR!

!classDefinition: #MarsRover category: #MarsRover stamp: 'FG 10/24/2020 14:37:51'!
Object subclass: #MarsRover
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: #MarsRover stamp: 'FG 10/24/2020 14:37:51'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'FG 10/24/2020 14:37:51'!
initializeIn: aPosition pointingTo: aDirection 
	self shouldBeImplemented.
	position := aPosition.
	direction := aDirection.! !
!MarsRover methodsFor: 'initialization' stamp: 'FG 10/24/2020 14:38:00' prior: 50898702!
initializeIn: aPosition pointingTo: aDirection 
	position := aPosition.
	direction := aDirection.! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 10/24/2020 14:38:10'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'FG 10/24/2020 14:38:10'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:38:21'!
position
	self shouldBeImplemented.
	^position! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:38:27' prior: 50898720!
position
	^position! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 10/24/2020 14:38:42'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'FG 10/24/2020 14:38:42'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:38:49'!
direction
	self shouldBeImplemented.
	^direction! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:38:53' prior: 50898733!
direction
	^direction! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 10/24/2020 14:38:56'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:41:20'!
test02

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:1@0.
	marsRover execute: 'f'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:42:37' prior: 50898744!
test02

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:1@0.
	marsRover execute: 'f'.
	
	self assert: marsRover position equals: 4@3.
	self assert: marsRover direction equals: 1@0.! !

!testRun: #MarsRoverTest #test02 stamp: 'FG 10/24/2020 14:42:41'!
ERROR!

!testRun: #MarsRoverTest #test02 stamp: 'FG 10/24/2020 14:42:41'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:42:50'!
execute: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:43:54' prior: 50898765!
execute: aCommandLine 
	position = 4@3.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:44:21' prior: 50898770!
execute: aCommandLine 
	position := 4@3.! !

!testRun: #MarsRoverTest #test02 stamp: 'FG 10/24/2020 14:44:26'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:45:05' prior: 50898751!
test02

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	marsRover execute: 'f'.
	
	self assert: marsRover position equals: 3@4.
	self assert: marsRover direction equals: 1@0.! !

!testRun: #MarsRoverTest #test02 stamp: 'FG 10/24/2020 14:45:12'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'FG 10/24/2020 14:45:12'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:45:20'!
test03

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	marsRover execute: 'f'.
	
	self assert: marsRover position equals: 3@4.
	self assert: marsRover direction equals: 1@0.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:45:31' prior: 50898782!
test02

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:1@0.
	marsRover execute: 'f'.
	
	self assert: marsRover position equals: 4@3.
	self assert: marsRover direction equals: 1@0.! !

!testRun: #MarsRoverTest #test02 stamp: 'FG 10/24/2020 14:45:33'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 10/24/2020 14:45:35'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'FG 10/24/2020 14:45:35'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:47:00' prior: 50898775!
execute: aCommandLine 
	position := position + aCommandLine.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:47:06' prior: 50898823!
execute: aCommandLine 
	position := position + direction.! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 10/24/2020 14:47:15'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 10/24/2020 14:47:16'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 10/24/2020 14:47:17'!
FAILURE!

!testRun: #MarsRoverTest #test03 stamp: 'FG 10/24/2020 14:47:17'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:47:32' prior: 50898796!
test03

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	marsRover execute: 'f'.
	
	self assert: marsRover position equals: 3@4.
	self assert: marsRover direction equals: 0@1.! !

!testRun: #MarsRoverTest #test03 stamp: 'FG 10/24/2020 14:47:35'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:47:48'!
test04

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	marsRover execute: 'b'.
	
	self assert: marsRover position equals: 3@4.
	self assert: marsRover direction equals: 0@1.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:48:10' prior: 50898855!
test04

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	marsRover execute: 'b'.
	
	self assert: marsRover position equals: 3@2.
	self assert: marsRover direction equals: 0@1.! !

!testRun: #MarsRoverTest #test04 stamp: 'FG 10/24/2020 14:48:18'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'FG 10/24/2020 14:48:18'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'FG 10/24/2020 14:48:24'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'FG 10/24/2020 14:48:24'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:50:01' prior: 50898828!
execute: aCommandLine 
	aCommandLine = 'f' ifTrue:[position := position + direction] ifFalse:[position := position - direction].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:51:25' prior: 50898884!
execute: aCommandLine 
	aCommandLine = 'f' ifTrue:[position := position + direction] ifFalse:[position := position - direction].! !

!testRun: #MarsRoverTest #test04 stamp: 'FG 10/24/2020 14:51:33'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FG 10/24/2020 14:51:38'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'FG 10/24/2020 14:51:56'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 10/24/2020 14:51:56'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 10/24/2020 14:51:56'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FG 10/24/2020 14:51:56'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:52:56' prior: 50898865!
test04

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	marsRover execute: 'l'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: -1@0.! !

!testRun: #MarsRoverTest #test04 stamp: 'FG 10/24/2020 14:53:02'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'FG 10/24/2020 14:53:02'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:54:37' prior: 50898892!
execute: aCommandLine 
	aCommandLine = 'f' ifTrue:[position := position + direction]. 
	aCommandLine = 'b' ifTrue:[position := position - direction].
	aCommandLine = 'l' ifTrue:[direction := -1@0].! !

!testRun: #MarsRoverTest #test04 stamp: 'FG 10/24/2020 14:54:46'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 10/24/2020 14:54:48'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:55:17' prior: 50898914!
test04

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	marsRover execute: 'r'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: 1@0.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:55:24'!
test05

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	marsRover execute: 'r'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: 1@0.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:55:42' prior: 50898943!
test04

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	marsRover execute: 'l'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: -1@0.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:02:10' prior: 50898952!
test05

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:1@0.
	marsRover execute: 'l'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: 0@-1.! !

1@0 x. !

1@0 x. !

1@0 y. !

1@0!

self x. !

self y.  !

!testRun: #MarsRoverTest #test05 stamp: 'FG 10/24/2020 15:03:37'!
FAILURE!

!testRun: #MarsRoverTest #test05 stamp: 'FG 10/24/2020 15:03:37'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:07:41' prior: 50898928!
execute: aCommandLine 
	aCommandLine = 'f' ifTrue:[position := position + direction]. 
	aCommandLine = 'b' ifTrue:[position := position - direction].
	aCommandLine = 'l' ifTrue:[direction :=  (direction y = 0) ifTrue: [direction y @ direction x] ifFalse: [(direction y * -1) @ direction x]].! !

!testRun: #MarsRoverTest #test04 stamp: 'FG 10/24/2020 15:07:50'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FG 10/24/2020 15:07:52'!
FAILURE!

!testRun: #MarsRoverTest #test05 stamp: 'FG 10/24/2020 15:07:52'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:08:28' prior: 50898972!
test05

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:1@0.
	marsRover execute: 'l'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: 0@1.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:08:53'!
test06

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:1@0.
	marsRover execute: 'r'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: 0@1.! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 10/24/2020 15:08:56'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 10/24/2020 15:08:57'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 10/24/2020 15:08:58'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FG 10/24/2020 15:08:59'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FG 10/24/2020 15:09:00'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:09:23' prior: 50899017!
test06

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:1@0.
	marsRover execute: 'r'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: 0@-1.! !

!testRun: #MarsRoverTest #test06 stamp: 'FG 10/24/2020 15:09:26'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'FG 10/24/2020 15:09:26'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'FG 10/24/2020 15:09:36'!
FAILURE!

!testRun: #MarsRoverTest #test06 stamp: 'FG 10/24/2020 15:09:36'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:10:08' prior: 50898988!
execute: aCommandLine 
	aCommandLine = 'f' ifTrue:[position := position + direction]. 
	aCommandLine = 'b' ifTrue:[position := position - direction].
	aCommandLine = 'l' ifTrue:[direction :=  (direction y = 0) ifTrue: [direction y @ direction x] ifFalse: [(direction y * -1) @ direction x]].
	aCommandLine = 'r' ifTrue:[direction := 0@-1].! !

!testRun: #MarsRoverTest #test06 stamp: 'FG 10/24/2020 15:10:19'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FG 10/24/2020 15:10:22'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FG 10/24/2020 15:10:24'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:11:10'!
test07

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	marsRover execute: 'r'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: 1@0.! !

!testRun: #MarsRoverTest #test07 stamp: 'FG 10/24/2020 15:11:13'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'FG 10/24/2020 15:11:13'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'FG 10/24/2020 15:11:18'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'FG 10/24/2020 15:11:18'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'FG 10/24/2020 15:11:52'!
FAILURE!

!testRun: #MarsRoverTest #test07 stamp: 'FG 10/24/2020 15:11:52'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:13:34' prior: 50899058!
execute: aCommandLine 
	aCommandLine = 'f' ifTrue:[position := position + direction]. 
	aCommandLine = 'b' ifTrue:[position := position - direction].
	aCommandLine = 'l' ifTrue:[direction :=  (direction y = 0) ifTrue: [direction y @ direction x] ifFalse: [(direction y * -1) @ direction x]].
	aCommandLine = 'r' ifTrue:[direction := (direction x = 0) ifTrue: [direction y @ direction x] ifFalse: [direction y @ (direction x * -1)]].! !

!testRun: #MarsRoverTest #test07 stamp: 'FG 10/24/2020 15:13:49'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FG 10/24/2020 15:13:51'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'FG 10/24/2020 15:14:00'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 10/24/2020 15:14:00'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 10/24/2020 15:14:00'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FG 10/24/2020 15:14:00'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FG 10/24/2020 15:14:00'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FG 10/24/2020 15:14:00'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FG 10/24/2020 15:14:00'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:20:16'!
test08

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	marsRover execute: 'frflblf'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: -1@0.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:22:04' prior: 50899141!
test08

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	marsRover execute: 'frflblfr'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: 0@1.! !

!testRun: #MarsRoverTest #test08 stamp: 'FG 10/24/2020 15:22:07'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:26:21' prior: 50899151!
test08

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	marsRover execute: 'frfflbl'.
	
	self assert: marsRover position equals: 5@3.
	self assert: marsRover direction equals: -1@0.! !

!testRun: #MarsRoverTest #test08 stamp: 'FG 10/24/2020 15:26:24'!
FAILURE!

!testRun: #MarsRoverTest #test08 stamp: 'FG 10/24/2020 15:26:24'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:28:43' prior: 50899103!
execute: aCommandLine

	aCommandLine do: [:aCommand |  
	aCommand = 'f' ifTrue:[position := position + direction]. 
	aCommand = 'b' ifTrue:[position := position - direction].
	aCommand = 'l' ifTrue:[direction :=  (direction y = 0) ifTrue: [direction y @ direction x] ifFalse: [(direction y * -1) @ direction x]].
	aCommand = 'r' ifTrue:[direction := (direction x = 0) ifTrue: [direction y @ direction x] ifFalse: [direction y @ (direction x * -1)]].
	
	].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:29:18' prior: 50899178!
execute: aCommandLine

	aCommandLine do: [:aCommand |  
		aCommand = $f ifTrue:[position := position + direction]. 
		aCommand = $b ifTrue:[position := position - direction].
		aCommand = $l  ifTrue:[direction :=  (direction y = 0) ifTrue: [direction y @ direction x] ifFalse: [(direction y * -1) @ direction x]].
		aCommand = $r ifTrue:[direction := (direction x = 0) ifTrue: [direction y @ direction x] ifFalse: [direction y @ (direction x * -1)]].
	].! !

!testRun: #MarsRoverTest #test08 stamp: 'FG 10/24/2020 15:29:27'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'FG 10/24/2020 15:29:30'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 10/24/2020 15:29:31'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 10/24/2020 15:29:32'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FG 10/24/2020 15:29:33'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FG 10/24/2020 15:29:34'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FG 10/24/2020 15:29:35'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FG 10/24/2020 15:29:36'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FG 10/24/2020 15:29:37'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:34:13'!
test09

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	marsRover execute: 'frff%lbl'.
	
	self assert: marsRover position equals: 5@4.
	self assert: marsRover direction equals: 1@0.! !

!testRun: #MarsRoverTest #test09 stamp: 'FG 10/24/2020 15:34:30'!
FAILURE!

!testRun: #MarsRoverTest #test09 stamp: 'FG 10/24/2020 15:34:30'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:36:30' prior: 50899196!
execute: aCommandLine

	aCommandLine do: [:aCommand |  
		aCommand = $f ifTrue:[position := position + direction]. 
		aCommand = $b ifTrue:[position := position - direction].
		aCommand = $l  ifTrue:[direction :=  (direction y = 0) ifTrue: [direction y @ direction x] ifFalse: [(direction y * -1) @ direction x]].
		aCommand = $r ifTrue:[direction := (direction x = 0) ifTrue: [direction y @ direction x] ifFalse: [direction y @ (direction x * -1)]].
		
	].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 16:04:38' prior: 50899249!
execute: aCommandLine

	aCommandLine do: [:aCommand |  
		('fblr' includes: aCommand) not ifTrue: [ self error: MarsRover invalidCommandFoundInCommandLine ] .  
		aCommand = $f ifTrue:[position := position + direction]. 
		aCommand = $b ifTrue:[position := position - direction].
		aCommand = $l  ifTrue:[direction :=  (direction y = 0) ifTrue: [direction y @ direction x] ifFalse: [(direction y * -1) @ direction x]].
		aCommand = $r ifTrue:[direction := (direction x = 0) ifTrue: [direction y @ direction x] ifFalse: [direction y @ (direction x * -1)]].
	].! !

!testRun: #MarsRoverTest #test09 stamp: 'FG 10/24/2020 16:04:59'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'FG 10/24/2020 16:04:59'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'FG 10/24/2020 16:05:15'!
ERROR!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 16:06:14'!
invalidCommandFoundInCommandLine
	^ 'Invalid command found in Command line'.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 16:06:42' prior: 50899267!
execute: aCommandLine

	aCommandLine do: [:aCommand |  
		('fblr' includes: aCommand) not ifTrue: [ ^ self error: MarsRover invalidCommandFoundInCommandLine ] .  
		aCommand = $f ifTrue:[position := position + direction]. 
		aCommand = $b ifTrue:[position := position - direction].
		aCommand = $l  ifTrue:[direction :=  (direction y = 0) ifTrue: [direction y @ direction x] ifFalse: [(direction y * -1) @ direction x]].
		aCommand = $r ifTrue:[direction := (direction x = 0) ifTrue: [direction y @ direction x] ifFalse: [direction y @ (direction x * -1)]].
	].! !

!testRun: #MarsRoverTest #test09 stamp: 'FG 10/24/2020 16:06:47'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'FG 10/24/2020 16:06:47'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 16:11:56' prior: 50899234!
test09

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	
	self should: [marsRover execute: 'frff%lbl'. self fail] 
		raise: Error 
		withExceptionDo: [
			self assert: marsRover position equals: 5@4.
			self assert: marsRover direction equals: 1@0.
		].! !

!testRun: #MarsRoverTest #test09 stamp: 'FG 10/24/2020 16:11:58'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'FG 10/24/2020 16:11:58'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 16:13:53' prior: 50899327!
test09

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	
	self should: [marsRover execute: 'frff%lbl'.] 
		raise: Error 
		withExceptionDo: [
			self assert: marsRover position equals: 5@4.
			self assert: marsRover direction equals: 1@0.
		].! !

!testRun: #MarsRoverTest #test09 stamp: 'FG 10/24/2020 16:13:58'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'FG 10/24/2020 16:13:58'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 16:18:20' prior: 50899301!
execute: aCommandLine

	aCommandLine do: [:aCommand |  
		('fblr' includes: aCommand) not ifTrue: [ ^ self error: MarsRover invalidCommandFoundInCommandLine ] .  
		aCommand = $f ifTrue:[position := position + direction]. 
		aCommand = $b ifTrue:[position := position - direction].
		aCommand = $l  ifTrue:[direction :=  (direction y = 0) ifTrue: [direction y @ direction x] ifFalse: [(direction y * -1) @ direction x]].
		aCommand = $r ifTrue:[direction := (direction x = 0) ifTrue: [direction y @ direction x] ifFalse: [direction y @ (direction x * -1)]].
	].! !

!testRun: #MarsRoverTest #test09 stamp: 'FG 10/24/2020 16:18:50'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'FG 10/24/2020 16:18:50'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 16:19:23' prior: 50899344!
test09

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	
	self should: [marsRover execute: 'frff%lbl'.] 
		raise: MarsRover invalidCommandFoundInCommandLine
		withExceptionDo: [
			self assert: marsRover position equals: 5@4.
			self assert: marsRover direction equals: 1@0.
		].! !

!testRun: #MarsRoverTest #test09 stamp: 'FG 10/24/2020 16:19:26'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'FG 10/24/2020 16:19:26'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 16:19:40' prior: 50899386!
test09

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	
	self should: [marsRover execute: 'frff%lbl'.] 
		raise: [MarsRover invalidCommandFoundInCommandLine]
		withExceptionDo: [
			self assert: marsRover position equals: 5@4.
			self assert: marsRover direction equals: 1@0.
		].! !

----STARTUP---- (24 October 2020 16:20:40) as C:\Users\FACU PC\Documents\Clases Virtuales\Cosas IS 1\Cuis University\CuisUniversity-4365.image!


!classDefinition: #MarsRover category: #MarsRover stamp: 'FG 10/24/2020 16:20:43'!
Object subclass: #MarsRover
	instanceVariableNames: 'universeSize aliveCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: #MarsRover stamp: 'FG 10/24/2020 16:20:43'!
Object subclass: #MarsRover
	instanceVariableNames: 'universeSize aliveCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: #MarsRover stamp: 'FG 10/24/2020 16:20:43'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'universeSize aliveCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: #MarsRover stamp: 'FG 10/24/2020 16:20:43'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'universeSize aliveCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'nil' stamp: 'FG 10/24/2020 14:33:33'!
test01

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:1@0.
	
	self assert: (marsRover position) equals: 3@3.
	self assert: (marsRover direction) equals: 1@0.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:33:51'!
landIn: aPoint pointingTo: aPoint2 
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:35:34' prior: 50899459!
landIn: aPoint pointingTo: aCardinalPoint 
	^ self basicNew initializeIn: aPoint pointingTo: aCardinalPoint! !

!classDefinition: #MarsRover category: #MarsRover stamp: 'FG 10/24/2020 16:20:44'!
Object subclass: #MarsRover
	instanceVariableNames: 'universeSize aliveCells point'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: #MarsRover stamp: 'FG 10/24/2020 16:20:44'!
Object subclass: #MarsRover
	instanceVariableNames: 'universeSize aliveCells point cardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: '}' stamp: 'FG 10/24/2020 14:35:49'!
initializeIn: aPoint pointingTo: aCardinalPoint 
	self shouldBeImplemented.
	point := aPoint.
	cardinalPoint := aCardinalPoint.! !
!MarsRover methodsFor: '}' stamp: 'FG 10/24/2020 14:35:58' prior: 50899486!
initializeIn: aPoint pointingTo: aCardinalPoint 
	point := aPoint.
	cardinalPoint := aCardinalPoint.! !

!methodRemoval: MarsRover #initializeIn:pointingTo: stamp: 'FG 10/24/2020 16:20:44'!
initializeIn: aPoint pointingTo: aCardinalPoint 
	point := aPoint.
	cardinalPoint := aCardinalPoint.!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:37:21' prior: 50899465!
landIn: aPosition pointingTo: aDirection 
	^ self basicNew initializeIn: aPosition pointingTo: aDirection.! !

!classDefinition: #MarsRover category: #MarsRover stamp: 'FG 10/24/2020 16:20:44'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: #MarsRover stamp: 'FG 10/24/2020 16:20:44'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: #MarsRover stamp: 'FG 10/24/2020 16:20:44'!
Object subclass: #MarsRover
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: #MarsRover stamp: 'FG 10/24/2020 16:20:44'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'FG 10/24/2020 14:37:51'!
initializeIn: aPosition pointingTo: aDirection 
	self shouldBeImplemented.
	position := aPosition.
	direction := aDirection.! !
!MarsRover methodsFor: 'initialization' stamp: 'FG 10/24/2020 14:38:00' prior: 50899539!
initializeIn: aPosition pointingTo: aDirection 
	position := aPosition.
	direction := aDirection.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:38:21'!
position
	self shouldBeImplemented.
	^position! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:38:27' prior: 50899552!
position
	^position! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:38:49'!
direction
	self shouldBeImplemented.
	^direction! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:38:53' prior: 50899561!
direction
	^direction! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:41:20'!
test02

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:1@0.
	marsRover execute: 'f'.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:42:37' prior: 50899570!
test02

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:1@0.
	marsRover execute: 'f'.
	
	self assert: marsRover position equals: 4@3.
	self assert: marsRover direction equals: 1@0.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:42:50'!
execute: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:43:54' prior: 50899586!
execute: aCommandLine 
	position = 4@3.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:44:21' prior: 50899591!
execute: aCommandLine 
	position := 4@3.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:45:05' prior: 50899577!
test02

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	marsRover execute: 'f'.
	
	self assert: marsRover position equals: 3@4.
	self assert: marsRover direction equals: 1@0.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:45:20'!
test03

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	marsRover execute: 'f'.
	
	self assert: marsRover position equals: 3@4.
	self assert: marsRover direction equals: 1@0.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:45:31' prior: 50899601!
test02

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:1@0.
	marsRover execute: 'f'.
	
	self assert: marsRover position equals: 4@3.
	self assert: marsRover direction equals: 1@0.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:47:00' prior: 50899596!
execute: aCommandLine 
	position := position + aCommandLine.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:47:06' prior: 50899630!
execute: aCommandLine 
	position := position + direction.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:47:32' prior: 50899610!
test03

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	marsRover execute: 'f'.
	
	self assert: marsRover position equals: 3@4.
	self assert: marsRover direction equals: 0@1.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:47:48'!
test04

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	marsRover execute: 'b'.
	
	self assert: marsRover position equals: 3@4.
	self assert: marsRover direction equals: 0@1.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:48:10' prior: 50899649!
test04

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	marsRover execute: 'b'.
	
	self assert: marsRover position equals: 3@2.
	self assert: marsRover direction equals: 0@1.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:50:01' prior: 50899635!
execute: aCommandLine 
	aCommandLine = 'f' ifTrue:[position := position + direction] ifFalse:[position := position - direction].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:51:25' prior: 50899669!
execute: aCommandLine 
	aCommandLine = 'f' ifTrue:[position := position + direction] ifFalse:[position := position - direction].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:52:56' prior: 50899659!
test04

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	marsRover execute: 'l'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: -1@0.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:54:37' prior: 50899677!
execute: aCommandLine 
	aCommandLine = 'f' ifTrue:[position := position + direction]. 
	aCommandLine = 'b' ifTrue:[position := position - direction].
	aCommandLine = 'l' ifTrue:[direction := -1@0].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:55:17' prior: 50899685!
test04

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	marsRover execute: 'r'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: 1@0.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:55:24'!
test05

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	marsRover execute: 'r'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: 1@0.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 14:55:42' prior: 50899705!
test04

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	marsRover execute: 'l'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: -1@0.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:02:10' prior: 50899714!
test05

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:1@0.
	marsRover execute: 'l'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: 0@-1.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:07:41' prior: 50899695!
execute: aCommandLine 
	aCommandLine = 'f' ifTrue:[position := position + direction]. 
	aCommandLine = 'b' ifTrue:[position := position - direction].
	aCommandLine = 'l' ifTrue:[direction :=  (direction y = 0) ifTrue: [direction y @ direction x] ifFalse: [(direction y * -1) @ direction x]].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:08:28' prior: 50899734!
test05

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:1@0.
	marsRover execute: 'l'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: 0@1.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:08:53'!
test06

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:1@0.
	marsRover execute: 'r'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: 0@1.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:09:23' prior: 50899766!
test06

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:1@0.
	marsRover execute: 'r'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: 0@-1.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:10:08' prior: 50899744!
execute: aCommandLine 
	aCommandLine = 'f' ifTrue:[position := position + direction]. 
	aCommandLine = 'b' ifTrue:[position := position - direction].
	aCommandLine = 'l' ifTrue:[direction :=  (direction y = 0) ifTrue: [direction y @ direction x] ifFalse: [(direction y * -1) @ direction x]].
	aCommandLine = 'r' ifTrue:[direction := 0@-1].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:11:10'!
test07

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	marsRover execute: 'r'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: 1@0.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:13:34' prior: 50899786!
execute: aCommandLine 
	aCommandLine = 'f' ifTrue:[position := position + direction]. 
	aCommandLine = 'b' ifTrue:[position := position - direction].
	aCommandLine = 'l' ifTrue:[direction :=  (direction y = 0) ifTrue: [direction y @ direction x] ifFalse: [(direction y * -1) @ direction x]].
	aCommandLine = 'r' ifTrue:[direction := (direction x = 0) ifTrue: [direction y @ direction x] ifFalse: [direction y @ (direction x * -1)]].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:20:16'!
test08

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	marsRover execute: 'frflblf'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: -1@0.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:22:04' prior: 50899827!
test08

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	marsRover execute: 'frflblfr'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: 0@1.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:26:21' prior: 50899837!
test08

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	marsRover execute: 'frfflbl'.
	
	self assert: marsRover position equals: 5@3.
	self assert: marsRover direction equals: -1@0.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:28:43' prior: 50899810!
execute: aCommandLine

	aCommandLine do: [:aCommand |  
	aCommand = 'f' ifTrue:[position := position + direction]. 
	aCommand = 'b' ifTrue:[position := position - direction].
	aCommand = 'l' ifTrue:[direction :=  (direction y = 0) ifTrue: [direction y @ direction x] ifFalse: [(direction y * -1) @ direction x]].
	aCommand = 'r' ifTrue:[direction := (direction x = 0) ifTrue: [direction y @ direction x] ifFalse: [direction y @ (direction x * -1)]].
	
	].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:29:18' prior: 50899857!
execute: aCommandLine

	aCommandLine do: [:aCommand |  
		aCommand = $f ifTrue:[position := position + direction]. 
		aCommand = $b ifTrue:[position := position - direction].
		aCommand = $l  ifTrue:[direction :=  (direction y = 0) ifTrue: [direction y @ direction x] ifFalse: [(direction y * -1) @ direction x]].
		aCommand = $r ifTrue:[direction := (direction x = 0) ifTrue: [direction y @ direction x] ifFalse: [direction y @ (direction x * -1)]].
	].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:34:13'!
test09

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	marsRover execute: 'frff%lbl'.
	
	self assert: marsRover position equals: 5@4.
	self assert: marsRover direction equals: 1@0.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 15:36:30' prior: 50899875!
execute: aCommandLine

	aCommandLine do: [:aCommand |  
		aCommand = $f ifTrue:[position := position + direction]. 
		aCommand = $b ifTrue:[position := position - direction].
		aCommand = $l  ifTrue:[direction :=  (direction y = 0) ifTrue: [direction y @ direction x] ifFalse: [(direction y * -1) @ direction x]].
		aCommand = $r ifTrue:[direction := (direction x = 0) ifTrue: [direction y @ direction x] ifFalse: [direction y @ (direction x * -1)]].
		
	].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 16:04:38' prior: 50899902!
execute: aCommandLine

	aCommandLine do: [:aCommand |  
		('fblr' includes: aCommand) not ifTrue: [ self error: MarsRover invalidCommandFoundInCommandLine ] .  
		aCommand = $f ifTrue:[position := position + direction]. 
		aCommand = $b ifTrue:[position := position - direction].
		aCommand = $l  ifTrue:[direction :=  (direction y = 0) ifTrue: [direction y @ direction x] ifFalse: [(direction y * -1) @ direction x]].
		aCommand = $r ifTrue:[direction := (direction x = 0) ifTrue: [direction y @ direction x] ifFalse: [direction y @ (direction x * -1)]].
	].! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 16:06:14'!
invalidCommandFoundInCommandLine
	^ 'Invalid command found in Command line'.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 16:06:42' prior: 50899920!
execute: aCommandLine

	aCommandLine do: [:aCommand |  
		('fblr' includes: aCommand) not ifTrue: [ ^ self error: MarsRover invalidCommandFoundInCommandLine ] .  
		aCommand = $f ifTrue:[position := position + direction]. 
		aCommand = $b ifTrue:[position := position - direction].
		aCommand = $l  ifTrue:[direction :=  (direction y = 0) ifTrue: [direction y @ direction x] ifFalse: [(direction y * -1) @ direction x]].
		aCommand = $r ifTrue:[direction := (direction x = 0) ifTrue: [direction y @ direction x] ifFalse: [direction y @ (direction x * -1)]].
	].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 16:11:56' prior: 50899892!
test09

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	
	self should: [marsRover execute: 'frff%lbl'. self fail] 
		raise: Error 
		withExceptionDo: [
			self assert: marsRover position equals: 5@4.
			self assert: marsRover direction equals: 1@0.
		].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 16:13:53' prior: 50899968!
test09

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	
	self should: [marsRover execute: 'frff%lbl'.] 
		raise: Error 
		withExceptionDo: [
			self assert: marsRover position equals: 5@4.
			self assert: marsRover direction equals: 1@0.
		].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 16:18:20' prior: 50899947!
execute: aCommandLine

	aCommandLine do: [:aCommand |  
		('fblr' includes: aCommand) not ifTrue: [ ^ self error: MarsRover invalidCommandFoundInCommandLine ] .  
		aCommand = $f ifTrue:[position := position + direction]. 
		aCommand = $b ifTrue:[position := position - direction].
		aCommand = $l  ifTrue:[direction :=  (direction y = 0) ifTrue: [direction y @ direction x] ifFalse: [(direction y * -1) @ direction x]].
		aCommand = $r ifTrue:[direction := (direction x = 0) ifTrue: [direction y @ direction x] ifFalse: [direction y @ (direction x * -1)]].
	].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 16:19:23' prior: 50899980!
test09

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	
	self should: [marsRover execute: 'frff%lbl'.] 
		raise: MarsRover invalidCommandFoundInCommandLine
		withExceptionDo: [
			self assert: marsRover position equals: 5@4.
			self assert: marsRover direction equals: 1@0.
		].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 16:19:40' prior: 50900013!
test09

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	
	self should: [marsRover execute: 'frff%lbl'.] 
		raise: [MarsRover invalidCommandFoundInCommandLine]
		withExceptionDo: [
			self assert: marsRover position equals: 5@4.
			self assert: marsRover direction equals: 1@0.
		].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 16:24:51' prior: 50900026!
test09

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	
	[marsRover execute: 'frff%lbl'. self fail.]
	on: MarsRover invalidCommandFoundInCommandLine
	do: [	self assert: marsRover position equals: 5@4.
		self assert: marsRover direction equals: 1@0.
		].! !

!testRun: #MarsRoverTest #test09 stamp: 'FG 10/24/2020 16:24:57'!
ERROR!

!testRun: #MarsRoverTest #test09 stamp: 'FG 10/24/2020 16:24:57'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 16:27:14' prior: 50900039!
test09

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@1.
	
	[marsRover execute: 'frff%lbl'. self fail.]
	on: Error
	do: [:anError |
		self assert: anError messageText  = MarsRover invalidCommandFoundInCommandLine.
		self assert: marsRover position equals: 5@4.
		self assert: marsRover direction equals: 1@0.
		].! !

!testRun: #MarsRoverTest #test09 stamp: 'FG 10/24/2020 16:27:20'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FG 10/24/2020 16:27:32'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 16:31:43'!
test10

	| marsRover |
	
	[marsRover := MarsRover landIn: 3@3  pointingTo:0@2. self fail]
	on: Error
	do: [:anError | self assert: anError messageText  = MarsRover invalidDirectionDuringInitialization.].! !

!testRun: #MarsRoverTest #test10 stamp: 'FG 10/24/2020 16:31:52'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'FG 10/24/2020 16:31:52'!
FAILURE!
!MarsRover methodsFor: 'initialization' stamp: 'FG 10/24/2020 16:32:53' prior: 50899546!
initializeIn: aPosition pointingTo: aDirection 
	
	position := aPosition.
	direction := aDirection.! !
!MarsRover methodsFor: 'initialization' stamp: 'FG 10/24/2020 16:41:20' prior: 50900088!
initializeIn: aPosition pointingTo: aDirection 
	(aDirection abs x + aDirection abs y) = 1 ifTrue: [self error: MarsRover ].
	position := aPosition.
	direction := aDirection.! !
!MarsRover methodsFor: 'initialization' stamp: 'FG 10/24/2020 16:41:35' prior: 50900094!
initializeIn: aPosition pointingTo: aDirection 
	(aDirection abs x + aDirection abs y) = 1 ifTrue: [self error: MarsRover invalidDirectionDuringInitialization].
	position := aPosition.
	direction := aDirection.! !
!MarsRover methodsFor: 'initialization' stamp: 'FG 10/24/2020 16:54:18' prior: 50900103!
initializeIn: aPosition pointingTo: aDirection 
	((aDirection normal = 1) and: [aDirection rounded = aDirection]) ifTrue: [self error: MarsRover invalidDirectionDuringInitialization].
	position := aPosition. 
	direction := aDirection.! !

!testRun: #MarsRoverTest #test10 stamp: 'FG 10/24/2020 16:54:50'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'FG 10/24/2020 16:54:50'!
FAILURE!
!MarsRover class methodsFor: 'nil' stamp: 'FG 10/24/2020 16:56:10'!
invalidDirectionDuringInitialization
	^ ' Error - MarsRover should be pointing to a cardinal point '! !

!testRun: #MarsRoverTest #test10 stamp: 'FG 10/24/2020 16:56:21'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'FG 10/24/2020 16:56:21'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 16:56:52' prior: 50900074!
test10

	| marsRover |
	
	marsRover := MarsRover landIn: 3@3  pointingTo:0@2.
	
	[marsRover := MarsRover landIn: 3@3  pointingTo:0@2. self fail]
	on: Error
	do: [:anError | self assert: anError messageText  = MarsRover invalidDirectionDuringInitialization.].! !

!testRun: #MarsRoverTest #test10 stamp: 'FG 10/24/2020 16:57:06'!
FAILURE!

!testRun: #MarsRoverTest #test10 stamp: 'FG 10/24/2020 16:57:06'!
FAILURE!
!MarsRover methodsFor: 'initialization' stamp: 'FG 10/24/2020 16:58:25' prior: 50900113!
initializeIn: aPosition pointingTo: aDirection 
	((aDirection normal = 1) and: [aDirection rounded = aDirection]) ifFalse: [^ self error: MarsRover invalidDirectionDuringInitialization].
	position := aPosition. 
	direction := aDirection.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 16:58:36' prior: 50900140!
test10

	| marsRover |
	
	"marsRover := MarsRover landIn: 3@3  pointingTo:0@2."
	
	[marsRover := MarsRover landIn: 3@3  pointingTo:0@2. self fail]
	on: Error
	do: [:anError | self assert: anError messageText  = MarsRover invalidDirectionDuringInitialization.].! !

!testRun: #MarsRoverTest #test10 stamp: 'FG 10/24/2020 16:58:44'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 10/24/2020 16:58:50'!
ERROR!

!testRun: #MarsRoverTest #test02 stamp: 'FG 10/24/2020 16:58:50'!
ERROR!

!testRun: #MarsRoverTest #test02 stamp: 'FG 10/24/2020 16:59:06'!
ERROR!

!testRun: #MarsRoverTest #test02 stamp: 'FG 10/24/2020 16:59:06'!
ERROR!
!MarsRover methodsFor: 'initialization' stamp: 'FG 10/24/2020 17:00:59' prior: 50900156!
initializeIn: aPosition pointingTo: aDirection 
	(((aDirection x abs + aDirection y abs) = 1) and: [aDirection rounded = aDirection]) ifFalse: [^ self error: MarsRover invalidDirectionDuringInitialization].
	position := aPosition. 
	direction := aDirection.! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 10/24/2020 17:01:25'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 10/24/2020 17:01:26'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 10/24/2020 17:01:28'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FG 10/24/2020 17:01:30'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FG 10/24/2020 17:01:31'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FG 10/24/2020 17:01:31'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FG 10/24/2020 17:01:32'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FG 10/24/2020 17:01:33'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FG 10/24/2020 17:01:35'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FG 10/24/2020 17:01:36'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FG 10/24/2020 17:01:37'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:01:57'!
test11

	| marsRover |
	
	"marsRover := MarsRover landIn: 3@3  pointingTo:0@2."
	
	[marsRover := MarsRover landIn: 3@3  pointingTo:0.5@0.5. self fail]
	on: Error
	do: [:anError | self assert: anError messageText  = MarsRover invalidDirectionDuringInitialization.].! !

!testRun: #MarsRoverTest #test11 stamp: 'FG 10/24/2020 17:02:09'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:02:31' prior: 50900227!
test11

	[MarsRover landIn: 3@3  pointingTo:0.5@0.5. self fail]
	on: Error
	do: [:anError | self assert: anError messageText  = MarsRover invalidDirectionDuringInitialization.].! !

!testRun: #MarsRoverTest #test11 stamp: 'FG 10/24/2020 17:02:34'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:02:46' prior: 50900167!
test10

	[MarsRover landIn: 3@3  pointingTo:0@2. self fail]
	on: Error
	do: [:anError | self assert: anError messageText  = MarsRover invalidDirectionDuringInitialization.].! !
!MarsRover methodsFor: 'initialization' stamp: 'FG 10/24/2020 17:03:24' prior: 50900190!
initializeIn: aPosition pointingTo: aDirection 
	((aDirection magnitude = 1) and: [aDirection rounded = aDirection]) ifFalse: [^ self error: MarsRover invalidDirectionDuringInitialization].
	position := aPosition. 
	direction := aDirection.! !

!testRun: #MarsRoverTest #test01 stamp: 'FG 10/24/2020 17:03:29'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 10/24/2020 17:03:30'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 10/24/2020 17:03:31'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FG 10/24/2020 17:03:33'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FG 10/24/2020 17:03:34'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FG 10/24/2020 17:03:35'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FG 10/24/2020 17:03:36'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FG 10/24/2020 17:03:37'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FG 10/24/2020 17:03:38'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FG 10/24/2020 17:03:39'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'FG 10/24/2020 17:03:40'!
PASSED!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:06:04'!
invalidPointDuringInitialization
	^ ' Error - Invalid point given for initialization'! !

!methodRemoval: MarsRover class #invalidDirectionDuringInitialization stamp: 'FG 10/24/2020 17:06:16'!
invalidDirectionDuringInitialization
	^ ' Error - MarsRover should be pointing to a cardinal point '!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:06:29' prior: 50900253!
test10

	[MarsRover landIn: 3@3  pointingTo:0@2. self fail]
	on: Error
	do: [:anError | self assert: anError messageText  = MarsRover invalidPointDuringInitialization .].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:06:40' prior: 50900241!
test11

	[MarsRover landIn: 3@3  pointingTo:0.5@0.5. self fail]
	on: Error
	do: [:anError | self assert: anError messageText  = MarsRover invalidPointDuringInitialization .].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:06:43' prior: 50900321!
test11

	[MarsRover landIn: 3@3  pointingTo:0.5@0.5. self fail]
	on: Error
	do: [:anError | self assert: anError messageText  = MarsRover invalidPointDuringInitialization.].! !
!MarsRover methodsFor: 'initialization' stamp: 'FG 10/24/2020 17:16:05' prior: 50900262!
initializeIn: aPosition pointingTo: aDirection 

	(aPosition rounded = aPosition) ifFalse: [^ self error: MarsRover invalidPositionDuringInitialization].
	((aDirection rounded = aDirection) and: [aDirection magnitude = 1]) ifFalse:[^ self error: MarsRover invalidDirectionDuringInitialization].
	position := aPosition. 
	direction := aDirection.! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:16:40'!
invalidPositionDuringInitialization
	^ ' Error - Invalid position during initialization'! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:17:08'!
invalidDirectionDuringInitialization
	^ ' Error - Invalid point given for initialization'! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:17:08' prior: 50900330!
test11

	[MarsRover landIn: 3@3  pointingTo:0.5@0.5. self fail]
	on: Error
	do: [:anError | self assert: anError messageText  = MarsRover invalidDirectionDuringInitialization.].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:17:08' prior: 50900312!
test10

	[MarsRover landIn: 3@3  pointingTo:0@2. self fail]
	on: Error
	do: [:anError | self assert: anError messageText  = MarsRover invalidDirectionDuringInitialization .].! !

!methodRemoval: MarsRover class #invalidPointDuringInitialization stamp: 'FG 10/24/2020 17:17:08'!
invalidPointDuringInitialization
	^ ' Error - Invalid point given for initialization'!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:17:18' prior: 50900359!
invalidDirectionDuringInitialization
	^ ' Error - Invalid direction given for initialization'! !
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:17:27' prior: 50900353!
invalidPositionDuringInitialization
	^ ' Error - Invalid position given for initialization'! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:18:15'!
test12

	[MarsRover landIn: 3.2@0.5  pointingTo:1@0. self fail]
	on: Error
	do: [:anError | self assert: anError messageText  = MarsRover invalidPositionDuringInitialization.]! !

!testRun: #MarsRoverTest #test12 stamp: 'FG 10/24/2020 17:18:18'!
PASSED!
!MarsRover class methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:25:39'!
landingIn: aPosition pointingTo: aDirection 
	^ self basicNew initializeIn: aPosition pointingTo: aDirection.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:25:40' prior: 50899450!
test01

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:1@0.
	
	self assert: (marsRover position) equals: 3@3.
	self assert: (marsRover direction) equals: 1@0.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:25:40' prior: 50899620!
test02

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:1@0.
	marsRover execute: 'f'.
	
	self assert: marsRover position equals: 4@3.
	self assert: marsRover direction equals: 1@0.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:25:40' prior: 50900374!
test10

	[MarsRover landingIn: 3@3  pointingTo:0@2. self fail]
	on: Error
	do: [:anError | self assert: anError messageText  = MarsRover invalidDirectionDuringInitialization .].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:25:40' prior: 50899640!
test03

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:0@1.
	marsRover execute: 'f'.
	
	self assert: marsRover position equals: 3@4.
	self assert: marsRover direction equals: 0@1.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:25:40' prior: 50900365!
test11

	[MarsRover landingIn: 3@3  pointingTo:0.5@0.5. self fail]
	on: Error
	do: [:anError | self assert: anError messageText  = MarsRover invalidDirectionDuringInitialization.].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:25:40' prior: 50899776!
test06

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:1@0.
	marsRover execute: 'r'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: 0@-1.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:25:40' prior: 50900402!
test12

	[MarsRover landingIn: 3.2@0.5  pointingTo:1@0. self fail]
	on: Error
	do: [:anError | self assert: anError messageText  = MarsRover invalidPositionDuringInitialization.]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:25:40' prior: 50899757!
test05

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:1@0.
	marsRover execute: 'l'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: 0@1.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:25:40' prior: 50900056!
test09

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:0@1.
	
	[marsRover execute: 'frff%lbl'. self fail.]
	on: Error
	do: [:anError |
		self assert: anError messageText  = MarsRover invalidCommandFoundInCommandLine.
		self assert: marsRover position equals: 5@4.
		self assert: marsRover direction equals: 1@0.
		].! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:25:40' prior: 50899800!
test07

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:0@1.
	marsRover execute: 'r'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: 1@0.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:25:40' prior: 50899847!
test08

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:0@1.
	marsRover execute: 'frfflbl'.
	
	self assert: marsRover position equals: 5@3.
	self assert: marsRover direction equals: -1@0.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:25:40' prior: 50899724!
test04

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:0@1.
	marsRover execute: 'l'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: -1@0.! !

!methodRemoval: MarsRover class #landIn:pointingTo: stamp: 'FG 10/24/2020 17:25:40'!
landIn: aPosition pointingTo: aDirection 
	^ self basicNew initializeIn: aPosition pointingTo: aDirection.!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 10/24/2020 17:28:22'!
marsRoverMantainsPositionAndDirectionAfterLanding

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:1@0.
	
	self assert: (marsRover position) equals: 3@3.
	self assert: (marsRover direction) equals: 1@0.! !
!GameOfLifeTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:22'!
marsRoverMantainsPositionAndDirectionAfterLanding 
	|myGameOfLife|
	
	myGameOfLife := GameOfLife withAlliveCells: {1@1 . 1@0 } andSize: 3@3.
	myGameOfLife nextGeneration.
	
	self assert: (myGameOfLife cellIsAliveIn: 1@1) equals: false! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:22' prior: 50822385!
test10WhenAModelMethodIsRemovedIsStillInRed
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object. 
	self compileMethod: 'm1 ^ 1.' in: #ModelClass.
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestSomething.
		self removeMethodWithSelector: #m1 from: #ModelClass ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Red.
	self assertHasNoErrors: result.! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:22' prior: 50822278!
test06WhenTheNewTestPassesButAnotherTestFailsThenIsStillInRed
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: (ModelClass new m1) equals: 1.' in: #TestSomething.
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestSomething.
		self newClassNamed: #ModelClass subclassOf: Object. 
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestSomething.
		self compileMethod: 'test02 self assert: (ModelClass new m1) equals: 2.' in: #TestSomething.
		self runTest: #test02 class: #TestSomething.
		self compileMethod: 'm1 ^ 2' in: #ModelClass.
		self runAllTestsOf: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:22' prior: 50822188!
test01WhenAProductionClassIsAddedIsStillInRed
	| result  |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestSomething.
		self newClassNamed: #ProductionClass subclassOf: Object ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:22' prior: 50823181!
test11WhenATestWithTheSameNameIsChangedInOtherClassThenIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestSomethingA subclassOf: TestCase.
	self newClassNamed: #TestSomethingB subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomethingA.
	self compileMethod: 'test01 self assert: true' in: #TestSomethingB.
	
	tddGuru initialTestClasses: { self classNamed: #TestSomethingA. self classNamed: #TestSomethingB }.
	tddGuru initialState: (WritingAFailingTest currentTest: (UninstalledMethodReference selector: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestSomethingA)).
	
	self logChangesWhile: [ 	
		self compileMethod: 'test01 self assert: false' in: #TestSomethingB.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasErrorWithDescription: (TDDGuru testChangedWhileThisTestWasBeingWritten:  #marsRoverMantainsPositionAndDirectionAfterLanding in: #TestSomethingB)! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:22' prior: 50822474!
test14WhenATestIsRemovedResultShouldHaveAnErrorAndIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestSomething subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true.' in: #TestSomething.
	tddGuru initialTestClasses: { self classNamed: #TestSomething }.
		
	self logChangesWhile: [ 
		self compileMethod: 'test02 self assert: false.' in: #TestSomething. 
		self runTest: #test02 class: #TestSomething.
		self removeMethodWithSelector: #marsRoverMantainsPositionAndDirectionAfterLanding from: #TestSomething. ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasErrorWithDescription: (TDDGuru testRemovedWhileInRed: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestSomething)! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:22' prior: 50823211!
test12WhenADifferentTestIsChangedThenIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestSomethingA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestSomethingA.
	self compileMethod: 'test02 self assert: false' in: #TestSomethingA.
	tddGuru initialState: (WritingAFailingTest currentTest: (UninstalledMethodReference selector: #test02 class: #TestSomethingA)).
	tddGuru initialTestClasses: { self classNamed: #TestSomethingA}.
	
	self logChangesWhile: [ 	
		self compileMethod: 'test01 self assert: true' in: #TestSomethingA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testChangedWhileThisTestWasBeingWritten: #marsRoverMantainsPositionAndDirectionAfterLanding in: #TestSomethingA)
	! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:22' prior: 50821225!
test03WhenTheFirstOfTheTestsIsRemovedIsBackToWritingAFailingTest
	| result |

	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self removeMethodWithSelector: #marsRoverMantainsPositionAndDirectionAfterLanding from:  #TestClassA.
	].

	result := tddGuru run.
	
	self assertHasNoErrors: result.
	self assertCurrentStateIs: WritingAFailingTest.
	self assert: tddGuru currentState currentTest selector equals: #test02
	! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:23' prior: 50823302!
test16WhenATestIsRenamedThenIsStillWritingAFailingTest
	| result |
	
	self newClassNamed: #TestSomethingA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomethingA.
	tddGuru initialTestClasses: { self classNamed: #TestSomethingA }.

	self logChangesWhile: [ 	
		self compileMethod: 'test02 self assert: false' in: #TestSomethingA.
		self compileMethod: 'test01A self assert: true' in: #TestSomethingA.
		self removeMethodWithSelector: #marsRoverMantainsPositionAndDirectionAfterLanding from: #TestSomethingA.
		self compileMethod: 'test02 self assert: false' in: #TestSomethingA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: WritingAFailingTest.
	self assertHasNoErrors: result.
! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:23' prior: 50822335!
test08WhenATestIsAddedIsNotDoingTDD
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestSomething.
		self compileMethod: 'test02 self assert: false.' in: #TestSomething. ].
		
	result _ tddGuru run.
		
	self assert: tddGuru currentState equals: NotDoingTDD.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedErrorMessage: #test02 class: #TestSomething).! !
!RefactorTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:23' prior: 50822969!
test23WhenATestClassIsRenamedThoseTestsAreStillTakenIntoAccount
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: ModelClassA new m1 equals: 1' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
		self newClassNamed: #ModelClassA subclassOf: Object.
		self compileMethod: 'm1 ^ 1' in: #ModelClassA.
		self runAllTestsOf: #TestClassA.
		self renameClass: #TestClassA to: #TestClassB.
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestClassB
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Green.
	self assertHasNoErrors: result ! !
!NotDoingTDDTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:23' prior: 50821659!
test08WhenThereIsOneTestAndPassesThenIsInGreen
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	tddGuru initialTestClasses: { self classNamed: #TestClassA}.
	tddGuru initialState: (NotDoingTDD new).
	
	self logChangesWhile: [ self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: Green ! !
!RefactorTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:23' prior: 50822579!
test05WhenATestIsRenamedIsStillRefactoring
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestClassA.
	tddGuru initialState: Refactor new.
	tddGuru initialTestClasses: { self classNamed: #TestClassA}.
	
	self logChangesWhile: [  
		self compileMethod: 'test01A self assert: true' in: #TestClassA.
		self removeMethodWithSelector: #marsRoverMantainsPositionAndDirectionAfterLanding from: #TestClassA ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Refactor.! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:23' prior: 50822240!
test04WhenTheTestFailsIsStillInRed
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: (ModelClass new m1) equals: 1.' in: #TestSomething.
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestSomething.
		self newClassNamed: #ModelClass subclassOf: Object. 
		self compileMethod: 'm1 ^ 2' in: #ModelClass.
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!RefactorTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:23' prior: 50822722!
test13WhenATestIsRemovedIsNoLongerTakenIntoAccount
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	self compileMethod: 'test02 self assert: true' in: #TestClassA.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	tddGuru initialState: Refactor new.
	
	self logChangesWhile: [ 
		self removeMethodWithSelector: #test02 from: #TestClassA.
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestClassA ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Green.! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:23' prior: 50822259!
test05WhenAProductionMethodIsChangedIsStillInRed
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestSomething.
		self newClassNamed: #ModelClass subclassOf: Object. 
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self compileMethod: 'm1 ^ 2' in: #ModelClass ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:23' prior: 50823362!
test19AnotherTestIsRemovedAnErrorIsReportedAndIsStillWritingAFailingTest
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self newClassNamed: #TestClassB subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true.' in: #TestClassA.
	self compileMethod: 'test01 self assert: true.' in: #TestClassB.
	tddGuru initialTestClasses: { self classNamed: #TestClassA . self classNamed: #TestClassB }.
	
	self logChangesWhile: [ 
		self compileMethod: 'test02 self assert: false.' in: #TestClassA.
		self removeMethodWithSelector: #marsRoverMantainsPositionAndDirectionAfterLanding from: #TestClassB ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru methodRemovedWhileWritingATest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestClassB).
	self assert: tddGuru currentState equals: WritingAFailingTest.! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:23' prior: 50821486!
test15WhenAllOfTheTestsPassErrorsAreReportedAndGoesToGreen
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true' in: #TestClassA.
		self compileMethod: 'test02 self assert: true' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: Green.
	self assert: result hasNErrors: 3.
	self assert: result hasErrorWithDescription: (TDDGuru testDidNotFail: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestClassA).
	self assert: result hasErrorWithDescription: (TDDGuru testDidNotFail: #test02 class: #TestClassA).
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test02 class: #TestClassA)! !
!GreenTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:23' prior: 50821053!
test09WhenATestHasAnErrorAnErrorIsReportedAndTransitionsToRed
	| result |
	
	self newClassNamed: #TestClass subclassOf: TestCase.
	self compileMethod: 'test01 self error' in: #TestClass. 
	tddGuru initialState: Green new.
	tddGuru initialTestClasses: { self classNamed: #TestClass }.
	
	self logChangesWhile: [ self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestClass ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testUnexpectedlyFailedErrorMessage: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestClass).
	self assert: tddGuru currentState equals: Red.
	! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:23' prior: 50821205!
test02WhenTheLastOfTheTestsIsRemovedIsBackToWritingAFailingTest
	| result |

	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self removeMethodWithSelector: #test02 from:  #TestClassA.
	].

	result := tddGuru run.
	
	self assertHasNoErrors: result.
	self assertCurrentStateIs: WritingAFailingTest.
	self assert: tddGuru currentState currentTest selector equals: #marsRoverMantainsPositionAndDirectionAfterLanding
	! !
!NotStartedTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:23' prior: 50821990!
test13WhenATestIsRenamedThenIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestSomething subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomething.
	
	tddGuru initialTestClasses: { self classNamed: #TestSomething}.
	
	self logChangesWhile: [ 
		self compileMethod: 'test01A self assert: false' in: #TestSomething. 
		self removeMethodWithSelector: #marsRoverMantainsPositionAndDirectionAfterLanding from: #TestSomething ].
		
	result _ tddGuru run.
		
	self assert: tddGuru currentState equals: NotDoingTDD.
	self assert: result hasErrorWithDescription: (TDDGuru testRenamedBeforeRunningTheTests: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestSomething)! !
!NotDoingTDDTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:23' prior: 50821691!
test10WhenOneOfTheTestIsNotRunThenIsStillNotDoingTDD
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 ^ self assert: true' in: #TestClassA.
	self compileMethod: 'test02 ^ self assert: true' in: #TestClassA.

	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	tddGuru initialState: NotDoingTDD new.
	
	self logChangesWhile: [ self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD ! !
!OtherTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:23' prior: 50822039!
test03TDDStateForEachChange
	| result firstChange secondChange thirdChange changes |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClass subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestClass.
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestClass
	].
		
	result _ tddGuru run.
		
	changes := result changes.
	firstChange := changes first.
	secondChange := changes second.
	thirdChange := changes third.
	
	self assert: (result stateAfter: firstChange) equals: WritingAFailingTest .
	self assert: (result stateAfter: secondChange) equals: WritingAFailingTest .
	self assert: (result stateAfter: thirdChange) equals: Red .! !
!OtherTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:23' prior: 50822134!
test08ReRunTheWholeAnalysis
	| result changes |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestClassA
	].
		
	result _ tddGuru run.
	
	self logChangesWhile: [ 
		self compileMethod: 'test01 self assert: true' in: #TestClassA.
	].

	result _ tddGuru rerun.
	changes := result changes.
	self assert: changes size equals: 4.

	! !
!NotDoingTDDTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:23' prior: 50821709!
test11WhenATestIsRenamedIsStillNotDoingTDD
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestClassA.
	tddGuru initialState: NotDoingTDD new.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	self logChangesWhile: [ 
		self compileMethod: 'test01bla self assert: false' in: #TestClassA.
		self removeMethodWithSelector: #marsRoverMantainsPositionAndDirectionAfterLanding from: #TestClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD ! !
!GreenTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:23' prior: 50821094!
test11WhenATestFailsAnErrorIsReportedAndTransitionsToRed
	| result |
	
	self newClassNamed: #TestClass subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestClass.
	tddGuru initialState: Green new.
	tddGuru initialTestClasses: { self classNamed: #TestClass }.
	
	self logChangesWhile: [ self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestClass ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testUnexpectedlyFailedErrorMessage: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestClass).
	self assert: tddGuru currentState equals: Red.! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:23' prior: 50822204!
test02WhenAProductionMethodIsAddedIsStillInRed
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestSomething.
		self newClassNamed: #ModelClass subclassOf: Object. 
		self compileMethod: 'm1 ^ 1' in: #ModelClass ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:23' prior: 50822354!
test09WhenATestIsRenamedAndAllTestsPassThenIsInGreen
	| result |
	self newClassNamed: #ModelClass subclassOf: Object.
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: (ModelClass new m1) equals: 1.' in: #TestSomething.
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestSomething.
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestSomething.
		self compileMethod: 'test02 self assert: (ModelClass new m2) equals: 2.' in: #TestSomething.
		self runTest: #test02 class: #TestSomething.
		self compileMethod: 'test02A self assert: (ModelClass new m2) equals: 2.' in: #TestSomething.
		self removeMethodWithSelector: #test02 from: #TestSomething.
		self compileMethod: 'm2 ^ 2' in: #ModelClass.
		self runAllTestsOf: #TestSomething ].

	result _ tddGuru run.
	
	self assertHasNoErrors: result.
	self assertCurrentStateIs: Green.! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:23' prior: 50823287!
test15WhenTheTestIsRemovedThenIsInGreen
	| result |

	self logChangesWhile: [ 	
		self newClassNamed: #TestSomethingA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true' in: #TestSomethingA.
		self removeMethodWithSelector: #marsRoverMantainsPositionAndDirectionAfterLanding from: #TestSomethingA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Green.
	self assertHasNoErrors: result.
! !
!OtherTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:23' prior: 50822118!
test07RunFromASpecificChange
	| result changes |
	
	self logChangesWhile: [ 
		self newClassNamed: #ExampleClass subclassOf: Object.
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 ^ self error: ''An error''' in: #TestClassA.
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestClassA
	].
		
	tddGuru startingFromChange: 2.
	result _ tddGuru run.
	changes := result changes.
	self assert: changes size equals: 3.

	! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:23' prior: 50823239!
test13WhenATestWithTheSameNameIsAddedInOtherClassThenIsInMoreThanOneTestWritten
	| result |
	
	self newClassNamed: #TestSomethingA subclassOf: TestCase.
	self newClassNamed: #TestSomethingB subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomethingA.
	
	tddGuru initialTestClasses: { self classNamed: #TestSomethingA. self classNamed: #TestSomethingB }.
	tddGuru initialState: (WritingAFailingTest currentTest: (UninstalledMethodReference selector: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestSomethingA)).
	
	self logChangesWhile: [ 	
		self compileMethod: 'test01 self assert: false' in: #TestSomethingB.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: MoreThanOneTestWritten .
	self assertHasNoErrors: result.
! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:23' prior: 50823344!
test18WhenTheTestPassesAnErrorIsReportedAndGoesToGreen
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true.' in: #TestSomething.
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestSomething ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testDidNotFail: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestSomething).
	self assert: tddGuru currentState equals: Green.! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:23' prior: 50823407!
test21WhenAModelMethodIsAddedBeforeRunningTestsThenIsNotDoingTDD
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object.
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: #marsRoverMantainsPositionAndDirectionAfterLanding in: #TestSomething.
		self compileMethod: 'm1 ^ 1' in: #ModelClass ].
		
	result _ tddGuru run.
		
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru modelMethodAddedBeforeRunningTests: #m1 class: #ModelClass).
	self assert: tddGuru currentState equals: NotDoingTDD.! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:23' prior: 50821442!
test13WhenATestFailsAnErrorIsReportedAndGoesToRed
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestClassA
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: Red.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test02 class: #TestClassA)! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:23' prior: 50821462!
test14WhenOneOfTheTestsPassesTwoErrorsAreReported
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true' in: #TestClassA.
		self compileMethod: 'test02 self assert: true' in: #TestClassA.
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: MoreThanOneTestWritten.
	self assert: result hasNErrors: 2.
	self assert: result hasErrorWithDescription: (TDDGuru testDidNotFail: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestClassA).
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test02 class: #TestClassA)! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:24' prior: 50822436!
test12WhenTheTestIsChangedIsStillInRed
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object. 
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestSomething.
		self compileMethod: 'test01 self assert: true.' in: #TestSomething. ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Red.
	self assertHasNoErrors: result.! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:24' prior: 50823391!
test20WhenAFirstTestIsAddedIsStillWritingAFailingTest
	| result |
	
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true.' in: #TestClassA. ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assertCurrentStateIs: WritingAFailingTest.
	self assert: tddGuru currentState currentTest selector equals: #marsRoverMantainsPositionAndDirectionAfterLanding.! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:24' prior: 50823057!
test04WhenATestFailsThenIsInRedState
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!GreenTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:24' prior: 50821022!
test07WhenATestPassesNothingHappens
	| result |
	
	self newClassNamed: #TestClass subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClass.
	tddGuru initialState: Green new.
	tddGuru initialTestClasses: { self classNamed: #TestClass }.
	
	self logChangesWhile: [ self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestClass ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Green.! !
!OtherTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:24' prior: 50822100!
test06WhenATestHasAnErrorThisTestDoesNotFail
	| result changes |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 ^ self error: ''An error''' in: #TestClassA.
	
	self logChangesWhile: [ 
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestClassA
	].
		
	result _ tddGuru run.
	changes := result changes.
	self assert: changes size equals: 1.
	self assert: changes first category equals: #testRun.
	self assert: changes first testSelector equals: #marsRoverMantainsPositionAndDirectionAfterLanding.
	! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:24' prior: 50822305!
test07WhenAllTestsPassThenIsInGreen
	| result |
	self newClassNamed: #ModelClass subclassOf: Object.
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: (ModelClass new m1) equals: 1.' in: #TestSomething.
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestSomething.
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestSomething.
		self compileMethod: 'test02 self assert: (ModelClass new m2) equals: 2.' in: #TestSomething.
		self runTest: #test02 class: #TestSomething.
		self compileMethod: 'm1 ^ 2' in: #ModelClass.
		self compileMethod: 'm2 ^ 2' in: #ModelClass.
		self runAllTestsOf: #TestSomething.
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self runAllTestsOf: #TestSomething ].

	result _ tddGuru run.
	
	self assertHasNoErrors: result.
	self assertCurrentStateIs: Green.! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:24' prior: 50821531!
test17WhenAnotherTestIsRenamedIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	self logChangesWhile: [
		self compileMethod: 'test02 self assert: true' in: #TestClassA.
		self compileMethod: 'test03 self assert: true' in: #TestClassA.
		self compileMethod: 'test01bla self assert: true' in: #TestClassA.
		self removeMethodWithSelector: #marsRoverMantainsPositionAndDirectionAfterLanding from: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test03 class: #TestClassA)! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:24' prior: 50822221!
test03WhenTheTestPassesThenIsInGreen
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: (ModelClass new m1) equals: 1.' in: #TestSomething.
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestSomething.
		self newClassNamed: #ModelClass subclassOf: Object. 
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Green.! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:24' prior: 50822404!
test11WhenAModelClassIsRemovedIsStillInRed
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object. 
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestSomething.
		self removeClass: #ModelClass ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Red.
	self assertHasNoErrors: result.! !
!OtherTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:24' prior: 50822020!
test02ResultKnowsTheChangesThatWereDone
	| result changes |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestClass subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestClass. 
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestClass.
	].
		
	result _ tddGuru run.
	
	changes := result changes.
	self assert: changes size equals: 3.
	self assert: changes first category equals: #newTestClass.
	self assert: changes second category equals: #newTest.
	self assert: changes third category equals: #testRun.! !
!OtherTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:24' prior: 50822151!
test09ReRunFromASpecificChange
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #ModelClassA subclassOf: Object.
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestClassA
	].
		
	tddGuru startingFromChange: 2.
	tddGuru run.
	
	self logChangesWhile: [ 
		self compileMethod: 'test01 self assert: true' in: #TestClassA.
	].

	result _ tddGuru rerun.
	self assert: result changes size equals: 4.

	! !
!NotStartedTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:24' prior: 50821970!
test12WhenATestIsChangedThenIsWritingAFailingTest
	| result |
	
	self newClassNamed: #TestSomething subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestSomething.
	
	tddGuru initialTestClasses: { self classNamed: #TestSomething}.
	
	self logChangesWhile: [ self compileMethod: 'test01 self assert: false' in: #TestSomething. ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: WritingAFailingTest.
	self assert: tddGuru currentState currentTest selector equals: #marsRoverMantainsPositionAndDirectionAfterLanding.! !
!GreenTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:24' prior: 50821074!
test10WhenATestIsRenamedThenIsRefactoring
	| result |
	
	self newClassNamed: #TestClass subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestClass.
	tddGuru initialState: Green new.
	tddGuru initialTestClasses: { self classNamed: #TestClass }.
	
	self logChangesWhile: [ 
		self compileMethod: 'test01A self assert: true' in: #TestClass.
		self removeMethodWithSelector: #marsRoverMantainsPositionAndDirectionAfterLanding from: #TestClass ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Refactor.! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:24' prior: 50821245!
test04WhenAnotherTestIsRemovedIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestClassA.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.

	self logChangesWhile: [
		self newClassNamed: #TestClassB subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassB.
		self compileMethod: 'test02 self assert: false' in: #TestClassB.
		self removeMethodWithSelector: #marsRoverMantainsPositionAndDirectionAfterLanding from:  #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1. 
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother:  #test02 class: #TestClassB).! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 17:28:24' prior: 50822420!
test11WhenATestClassIsAddedIsStillInRed
	| result |
		
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #marsRoverMantainsPositionAndDirectionAfterLanding class: #TestSomething.
		self newClassNamed: #TestSomethingB subclassOf: TestCase. ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Red.
	self assertHasNoErrors: result.! !

!methodRemoval: MarsRoverTest #test01 stamp: 'FG 10/24/2020 17:28:24'!
test01

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:1@0.
	
	self assert: (marsRover position) equals: 3@3.
	self assert: (marsRover direction) equals: 1@0.!

!methodRemoval: GameOfLifeTest #test01 stamp: 'FG 10/24/2020 17:28:24'!
test01 
	|myGameOfLife|
	
	myGameOfLife := GameOfLife withAlliveCells: {1@1 . 1@0 } andSize: 3@3.
	myGameOfLife nextGeneration.
	
	self assert: (myGameOfLife cellIsAliveIn: 1@1) equals: false!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 10/24/2020 17:28:57'!
test01MarsRoverMantainsPositionAndDirectionAfterLanding

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:1@0.
	
	self assert: (marsRover position) equals: 3@3.
	self assert: (marsRover direction) equals: 1@0.! !

!methodRemoval: MarsRoverTest #marsRoverMantainsPositionAndDirectionAfterLanding stamp: 'FG 10/24/2020 17:29:26'!
marsRoverMantainsPositionAndDirectionAfterLanding

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:1@0.
	
	self assert: (marsRover position) equals: 3@3.
	self assert: (marsRover direction) equals: 1@0.!

!testRun: #MarsRoverTest #test01MarsRoverMantainsPositionAndDirectionAfterLanding stamp: 'FG 10/24/2020 17:29:29'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMantainsPositionAndDirectionAfterLanding stamp: 'FG 10/24/2020 17:29:31'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMantainsPositionAndDirectionAfterLanding stamp: 'FG 10/24/2020 17:29:33'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMantainsPositionAndDirectionAfterLanding stamp: 'FG 10/24/2020 17:29:34'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMantainsPositionAndDirectionAfterLanding stamp: 'FG 10/24/2020 17:29:34'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMantainsPositionAndDirectionAfterLanding stamp: 'FG 10/24/2020 17:29:34'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMantainsPositionAndDirectionAfterLanding stamp: 'FG 10/24/2020 17:29:36'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMantainsPositionAndDirectionAfterLanding stamp: 'FG 10/24/2020 17:29:39'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMantainsPositionAndDirectionAfterLanding stamp: 'FG 10/24/2020 17:29:44'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 10/24/2020 17:29:45'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 10/24/2020 17:29:46'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FG 10/24/2020 17:29:48'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FG 10/24/2020 17:29:50'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMantainsPositionAndDirectionAfterLanding stamp: 'FG 10/24/2020 17:29:56'!
PASSED!

----QUIT----(24 October 2020 17:34:56) CuisUniversity-4365.image priorSource: 18141631!

----STARTUP---- (24 October 2020 17:35:26) as C:\Users\FACU PC\Documents\Clases Virtuales\Cosas IS 1\Cuis University\CuisUniversity-4365.image!


!testRun: #MarsRoverTest #test01MarsRoverMantainsPositionAndDirectionAfterLanding stamp: 'FG 10/24/2020 17:35:31'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMantainsPositionAndDirectionAfterLanding stamp: 'FG 10/24/2020 17:35:47'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMantainsPositionAndDirectionAfterLanding stamp: 'FG 10/24/2020 17:35:52'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'FG 10/24/2020 17:35:52'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'FG 10/24/2020 17:35:52'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'FG 10/24/2020 17:35:52'!
PASSED!

!testRun: #MarsRoverTest #test05 stamp: 'FG 10/24/2020 17:35:52'!
PASSED!

!testRun: #MarsRoverTest #test06 stamp: 'FG 10/24/2020 17:35:52'!
PASSED!

!testRun: #MarsRoverTest #test07 stamp: 'FG 10/24/2020 17:35:52'!
PASSED!

!testRun: #MarsRoverTest #test08 stamp: 'FG 10/24/2020 17:35:52'!
PASSED!

!testRun: #MarsRoverTest #test09 stamp: 'FG 10/24/2020 17:35:52'!
PASSED!

!testRun: #MarsRoverTest #test10 stamp: 'FG 10/24/2020 17:35:52'!
PASSED!

!testRun: #MarsRoverTest #test11 stamp: 'FG 10/24/2020 17:35:52'!
PASSED!

!testRun: #MarsRoverTest #test12 stamp: 'FG 10/24/2020 17:35:52'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 10/24/2020 17:36:53'!
test02MarsRoverMoversForwardInADirection

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:1@0.
	marsRover execute: 'f'.
	
	self assert: marsRover position equals: 4@3.
	self assert: marsRover direction equals: 1@0.! !

!methodRemoval: MarsRoverTest #test02 stamp: 'FG 10/24/2020 17:37:03'!
test02

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:1@0.
	marsRover execute: 'f'.
	
	self assert: marsRover position equals: 4@3.
	self assert: marsRover direction equals: 1@0.!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 10/24/2020 17:38:34'!
test03MarsRoverMovesFowardInAnotherDirection

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:0@1.
	marsRover execute: 'f'.
	
	self assert: marsRover position equals: 3@4.
	self assert: marsRover direction equals: 0@1.! !

!methodRemoval: MarsRoverTest #test03 stamp: 'FG 10/24/2020 17:38:38'!
test03

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:0@1.
	marsRover execute: 'f'.
	
	self assert: marsRover position equals: 3@4.
	self assert: marsRover direction equals: 0@1.!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 10/24/2020 17:41:16'!
test03MarsRoverMovesBackwardsInADirection

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:0@1.
	marsRover execute: 'b'.
	
	self assert: marsRover position equals: 3@2.
	self assert: marsRover direction equals: 0@1.! !

!methodRemoval: MarsRoverTest #test03MarsRoverMovesFowardInAnotherDirection stamp: 'FG 10/24/2020 17:41:20'!
test03MarsRoverMovesFowardInAnotherDirection

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:0@1.
	marsRover execute: 'f'.
	
	self assert: marsRover position equals: 3@4.
	self assert: marsRover direction equals: 0@1.!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsInADirection stamp: 'FG 10/24/2020 17:41:24'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMoversForwardInADirection stamp: 'FG 10/24/2020 17:41:27'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMantainsPositionAndDirectionAfterLanding stamp: 'FG 10/24/2020 17:41:29'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 10/24/2020 17:41:54'!
test04MarsRoversTurnsLeft

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:0@1.
	marsRover execute: 'l'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: -1@0.! !

!methodRemoval: MarsRoverTest #test04 stamp: 'FG 10/24/2020 17:41:57'!
test04

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:0@1.
	marsRover execute: 'l'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: -1@0.!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 10/24/2020 17:42:28'!
test04MarsRoverTurnsLeft

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:0@1.
	marsRover execute: 'l'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: -1@0.! !

!methodRemoval: MarsRoverTest #test04MarsRoversTurnsLeft stamp: 'FG 10/24/2020 17:42:31'!
test04MarsRoversTurnsLeft

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:0@1.
	marsRover execute: 'l'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: -1@0.!

!methodRemoval: MarsRoverTest #test05 stamp: 'FG 10/24/2020 17:42:47'!
test05

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:1@0.
	marsRover execute: 'l'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: 0@1.!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 10/24/2020 17:43:01'!
test05MarsRoverTurnsRight

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:1@0.
	marsRover execute: 'r'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: 0@-1.! !

!methodRemoval: MarsRoverTest #test06 stamp: 'FG 10/24/2020 17:43:19'!
test06

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:1@0.
	marsRover execute: 'r'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: 0@-1.!

!methodRemoval: MarsRoverTest #test07 stamp: 'FG 10/24/2020 17:43:31'!
test07

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:0@1.
	marsRover execute: 'r'.
	
	self assert: marsRover position equals: 3@3.
	self assert: marsRover direction equals: 1@0.!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 10/24/2020 17:44:28'!
test06MarsRoverObeysMultipleCommands

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:0@1.
	marsRover execute: 'frfflbl'.
	
	self assert: marsRover position equals: 5@3.
	self assert: marsRover direction equals: -1@0.! !

!methodRemoval: MarsRoverTest #test08 stamp: 'FG 10/24/2020 17:44:31'!
test08

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:0@1.
	marsRover execute: 'frfflbl'.
	
	self assert: marsRover position equals: 5@3.
	self assert: marsRover direction equals: -1@0.!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 10/24/2020 17:45:06'!
test07MarsRoverStopsWhenInvalidCommandFound

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:0@1.
	
	[marsRover execute: 'frff%lbl'. self fail.]
	on: Error
	do: [:anError |
		self assert: anError messageText  = MarsRover invalidCommandFoundInCommandLine.
		self assert: marsRover position equals: 5@4.
		self assert: marsRover direction equals: 1@0.
		].! !

!methodRemoval: MarsRoverTest #test09 stamp: 'FG 10/24/2020 17:45:10'!
test09

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:0@1.
	
	[marsRover execute: 'frff%lbl'. self fail.]
	on: Error
	do: [:anError |
		self assert: anError messageText  = MarsRover invalidCommandFoundInCommandLine.
		self assert: marsRover position equals: 5@4.
		self assert: marsRover direction equals: 1@0.
		].!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 10/24/2020 17:46:49'!
test08MarsRoverDoesntReceiveNotCardinalPointAsDirection

	[MarsRover landingIn: 3@3  pointingTo:0@2. self fail]
	on: Error
	do: [:anError | self assert: anError messageText  = MarsRover invalidDirectionDuringInitialization .].! !
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 10/24/2020 17:46:55'!
test08MarsRoverDoesntReceiveNonCardinalPointAsDirection

	[MarsRover landingIn: 3@3  pointingTo:0@2. self fail]
	on: Error
	do: [:anError | self assert: anError messageText  = MarsRover invalidDirectionDuringInitialization .].! !

!methodRemoval: MarsRoverTest #test08MarsRoverDoesntReceiveNotCardinalPointAsDirection stamp: 'FG 10/24/2020 17:46:58'!
test08MarsRoverDoesntReceiveNotCardinalPointAsDirection

	[MarsRover landingIn: 3@3  pointingTo:0@2. self fail]
	on: Error
	do: [:anError | self assert: anError messageText  = MarsRover invalidDirectionDuringInitialization .].!

!methodRemoval: MarsRoverTest #test10 stamp: 'FG 10/24/2020 17:47:41'!
test10

	[MarsRover landingIn: 3@3  pointingTo:0@2. self fail]
	on: Error
	do: [:anError | self assert: anError messageText  = MarsRover invalidDirectionDuringInitialization .].!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 10/24/2020 17:48:25'!
test09MarsRoverDoesntReceiveRationalsPointsAsDirection

	[MarsRover landingIn: 3@3  pointingTo:0.5@0.5. self fail]
	on: Error
	do: [:anError | self assert: anError messageText  = MarsRover invalidDirectionDuringInitialization.].! !

!methodRemoval: MarsRoverTest #test11 stamp: 'FG 10/24/2020 17:48:31'!
test11

	[MarsRover landingIn: 3@3  pointingTo:0.5@0.5. self fail]
	on: Error
	do: [:anError | self assert: anError messageText  = MarsRover invalidDirectionDuringInitialization.].!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 10/24/2020 17:48:54'!
test10MarsRoverDoesntReceiveRationalsPointsAsPosition

	[MarsRover landingIn: 3.2@0.5  pointingTo:1@0. self fail]
	on: Error
	do: [:anError | self assert: anError messageText  = MarsRover invalidPositionDuringInitialization.]! !

!methodRemoval: MarsRoverTest #test12 stamp: 'FG 10/24/2020 17:48:57'!
test12

	[MarsRover landingIn: 3.2@0.5  pointingTo:1@0. self fail]
	on: Error
	do: [:anError | self assert: anError messageText  = MarsRover invalidPositionDuringInitialization.]!
!MarsRover methodsFor: 'initialization' stamp: 'FG 10/24/2020 17:54:03' prior: 50900339!
initializeIn: aPosition pointingTo: aDirection 

	(aPosition isIntegerPoint ) ifFalse: [^ self error: MarsRover invalidPositionDuringInitialization].
	((aDirection isIntegerPoint) and: [aDirection magnitude = 1]) ifFalse:[^ self error: MarsRover invalidDirectionDuringInitialization].
	position := aPosition. 
	direction := aDirection.! !

!testRun: #MarsRoverTest #test09MarsRoverDoesntReceiveRationalsPointsAsDirection stamp: 'FG 10/24/2020 17:54:33'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverDoesntReceiveRationalsPointsAsPosition stamp: 'FG 10/24/2020 17:54:35'!
PASSED!

-1 isInteger.!

!testRun: #MarsRoverTest #test01MarsRoverMantainsPositionAndDirectionAfterLanding stamp: 'FG 10/24/2020 17:55:35'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMoversForwardInADirection stamp: 'FG 10/24/2020 17:55:36'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverMantainsPositionAndDirectionAfterLanding stamp: 'FG 10/24/2020 17:55:39'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMoversForwardInADirection stamp: 'FG 10/24/2020 17:55:39'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsInADirection stamp: 'FG 10/24/2020 17:55:39'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverTurnsLeft stamp: 'FG 10/24/2020 17:55:39'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverTurnsRight stamp: 'FG 10/24/2020 17:55:39'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverObeysMultipleCommands stamp: 'FG 10/24/2020 17:55:39'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverStopsWhenInvalidCommandFound stamp: 'FG 10/24/2020 17:55:39'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverDoesntReceiveNonCardinalPointAsDirection stamp: 'FG 10/24/2020 17:55:39'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverDoesntReceiveRationalsPointsAsDirection stamp: 'FG 10/24/2020 17:55:39'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverDoesntReceiveRationalsPointsAsPosition stamp: 'FG 10/24/2020 17:55:39'!
PASSED!
!MarsRover methodsFor: 'initialization' stamp: 'FG 10/24/2020 17:58:17'!
positionIsValid: aPosition

	(aPosition isIntegerPoint ) ifFalse: [^ self error: MarsRover invalidPositionDuringInitialization].
! !
!MarsRover methodsFor: 'initialization' stamp: 'FG 10/24/2020 17:58:38'!
directionIsValid: aDirection
	((aDirection isIntegerPoint) and: [aDirection magnitude = 1]) ifFalse:[^ self error: MarsRover invalidDirectionDuringInitialization].
! !
!MarsRover methodsFor: 'initialization' stamp: 'FG 10/24/2020 17:59:10' prior: 50902107!
initializeIn: aPosition pointingTo: aDirection 

	self positionIsValid: aPosition.
	self directionIsValid:  aDirection.
	position := aPosition. 
	direction := aDirection.! !

!testRun: #MarsRoverTest #test01MarsRoverMantainsPositionAndDirectionAfterLanding stamp: 'FG 10/24/2020 17:59:14'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMoversForwardInADirection stamp: 'FG 10/24/2020 17:59:14'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsInADirection stamp: 'FG 10/24/2020 17:59:14'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverTurnsLeft stamp: 'FG 10/24/2020 17:59:14'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverTurnsRight stamp: 'FG 10/24/2020 17:59:14'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverObeysMultipleCommands stamp: 'FG 10/24/2020 17:59:14'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverStopsWhenInvalidCommandFound stamp: 'FG 10/24/2020 17:59:14'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverDoesntReceiveNonCardinalPointAsDirection stamp: 'FG 10/24/2020 17:59:14'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverDoesntReceiveRationalsPointsAsDirection stamp: 'FG 10/24/2020 17:59:14'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverDoesntReceiveRationalsPointsAsPosition stamp: 'FG 10/24/2020 17:59:14'!
PASSED!

5 negated.!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 18:03:54' prior: 50899992!
execute: aCommandLine

	aCommandLine do: [:aCommand |  
		('fblr' includes: aCommand) not ifTrue: [ ^ self error: MarsRover invalidCommandFoundInCommandLine ] .  
		aCommand = $f ifTrue:[position := position + direction]. 
		aCommand = $b ifTrue:[position := position - direction].
		aCommand = $l  ifTrue:[direction :=  (direction y = 0) ifTrue: [direction y @ direction x] ifFalse: [(direction y negated) @ direction x]].
		aCommand = $r ifTrue:[direction := (direction x = 0) ifTrue: [direction y @ direction x] ifFalse: [direction y @ (direction x negated)]].
	].! !

!testRun: #MarsRoverTest #test01MarsRoverMantainsPositionAndDirectionAfterLanding stamp: 'FG 10/24/2020 18:03:59'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMoversForwardInADirection stamp: 'FG 10/24/2020 18:03:59'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsInADirection stamp: 'FG 10/24/2020 18:03:59'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverTurnsLeft stamp: 'FG 10/24/2020 18:03:59'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverTurnsRight stamp: 'FG 10/24/2020 18:03:59'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverObeysMultipleCommands stamp: 'FG 10/24/2020 18:03:59'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverStopsWhenInvalidCommandFound stamp: 'FG 10/24/2020 18:03:59'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverDoesntReceiveNonCardinalPointAsDirection stamp: 'FG 10/24/2020 18:03:59'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverDoesntReceiveRationalsPointsAsDirection stamp: 'FG 10/24/2020 18:03:59'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverDoesntReceiveRationalsPointsAsPosition stamp: 'FG 10/24/2020 18:03:59'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'FG 10/24/2020 18:04:22' prior: 50899566!
direction
	^direction! !
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 10/24/2020 18:14:35'!
should: aBlockThatShouldFail raisingAnErrorAndAsserting: aVerificationBlock

	[aBlockThatShouldFail value. self fail.]
	on: Error
	do: aVerificationBlock.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 10/24/2020 18:16:19' prior: 50902005!
test07MarsRoverStopsWhenInvalidCommandFound

	| marsRover |
	
	marsRover := MarsRover landingIn: 3@3  pointingTo:0@1.
	
	self should: [marsRover execute: 'frff%lbl'] 
		raisingAnErrorAndAsserting: [:anError |
			self assert: anError messageText  = MarsRover invalidCommandFoundInCommandLine.
			self assert: marsRover position equals: 5@4.
			self assert: marsRover direction equals: 1@0.
		].! !

!testRun: #MarsRoverTest #test07MarsRoverStopsWhenInvalidCommandFound stamp: 'FG 10/24/2020 18:16:23'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 10/24/2020 18:17:05' prior: 50902042!
test08MarsRoverDoesntReceiveNonCardinalPointAsDirection

	self should: [MarsRover landingIn: 3@3  pointingTo:0@2] 
	raisingAnErrorAndAsserting: [:anError | self assert: anError messageText  = MarsRover invalidDirectionDuringInitialization .].! !

!testRun: #MarsRoverTest #test08MarsRoverDoesntReceiveNonCardinalPointAsDirection stamp: 'FG 10/24/2020 18:17:07'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 10/24/2020 18:17:42' prior: 50902071!
test09MarsRoverDoesntReceiveRationalsPointsAsDirection

	self should: [MarsRover landingIn: 3@3  pointingTo:0.5@0.5. ] 
		raisingAnErrorAndAsserting:  [:anError | self assert: anError messageText  = MarsRover invalidDirectionDuringInitialization.].! !

!testRun: #MarsRoverTest #test09MarsRoverDoesntReceiveRationalsPointsAsDirection stamp: 'FG 10/24/2020 18:17:44'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'FG 10/24/2020 18:18:17' prior: 50902089!
test10MarsRoverDoesntReceiveRationalsPointsAsPosition

	self should: 	[MarsRover landingIn: 3.2@0.5  pointingTo:1@0]
 		raisingAnErrorAndAsserting:  [:anError | self assert: anError messageText  = MarsRover invalidPositionDuringInitialization.]! !

!testRun: #MarsRoverTest #test10MarsRoverDoesntReceiveRationalsPointsAsPosition stamp: 'FG 10/24/2020 18:18:20'!
PASSED!

----QUIT----(24 October 2020 18:21:28) CuisUniversity-4365.image priorSource: 18244734!