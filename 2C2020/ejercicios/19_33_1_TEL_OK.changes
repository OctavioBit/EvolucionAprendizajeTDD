

----SNAPSHOT----(29 October 2020 17:09:11) CuisUniversity-4365.image priorSource: 18262737!

Object subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliTest category: #'Terni Lapilli' stamp: 'FG 10/29/2020 17:20:01'!
Object subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliTest category: #'Terni Lapilli' stamp: 'FG 10/29/2020 17:30:48'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilliTest methodsFor: 'nil' stamp: 'FG 10/29/2020 17:37:21'!
test01PlayerXPutsAPieceInTheBoard! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 17:39:17'!
test02PlayerXPutsAPieceInTheBoardInADifferentePossition! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 17:41:27'!
test03PlayerOPutsAPieceInTheBoard! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:12:30'!
test01PlayerXPutsAPieceInAnEmptyPlaceOnTheBoard! !

!methodRemoval: TerniLapilliTest #test01PlayerXPutsAPieceInTheBoard stamp: 'FG 10/29/2020 18:12:33'!
test01PlayerXPutsAPieceInTheBoard!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:13:17'!
test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard! !

!methodRemoval: TerniLapilliTest #test02PlayerXPutsAPieceInTheBoardInADifferentePossition stamp: 'FG 10/29/2020 18:13:22'!
test02PlayerXPutsAPieceInTheBoardInADifferentePossition!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:13:27'!
test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard! !

!methodRemoval: TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPlaceOnTheBoard stamp: 'FG 10/29/2020 18:13:30'!
test01PlayerXPutsAPieceInAnEmptyPlaceOnTheBoard!

!classDefinition: #TerniLapilli category: #'Terni Lapilli' stamp: 'FG 10/29/2020 18:21:39'!
Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:21:23' prior: 50902454!
test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard

| terniLapilli |

terniLapilli := TerniLapilli new.
terniLapilli putXAt: 1@1.

self assert: (TerniLapilli ocupiedByX: 1@1) equals: true.
 ! !

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/29/2020 18:21:49'!
ERROR!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/29/2020 18:21:49'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:22:09'!
putXAt: aPoint 
	self shouldBeImplemented.! !

!classDefinition: #TerniLapilli category: #'Terni Lapilli' stamp: 'FG 10/29/2020 18:26:05'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'xPieces'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:26:03' prior: 50902489!
putXAt: aPoint 
	xPieces add: aPoint.! !
!TerniLapilli class methodsFor: 'nil' stamp: 'FG 10/29/2020 18:27:04' overrides: 16783533!
new
	^ self basicNew initalize! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:27:20' prior: 50902506 overrides: 16783533!
new
	^ self basicNew newGame! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:27:34'!
newGame
	^ self basicNew initalizeGame! !

!methodRemoval: TerniLapilli class #new stamp: 'FG 10/29/2020 18:27:40'!
new
	^ self basicNew newGame!
!TerniLapilli methodsFor: 'nil' stamp: 'FG 10/29/2020 18:28:13'!
initializeGame
	xPieces := Set new.! !

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/29/2020 18:28:25'!
ERROR!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/29/2020 18:28:25'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:29:46' prior: 50902472!
test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard

| terniLapilli |

terniLapilli := TerniLapilli newGame.
terniLapilli putXAt: 1@1.

self assert: (TerniLapilli ocupiedByX: 1@1) equals: true.
 ! !

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/29/2020 18:29:55'!
ERROR!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/29/2020 18:29:55'!
ERROR!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:30:19' prior: 50902515!
newGame
	^ self basicNew initializeGame! !

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/29/2020 18:30:24'!
ERROR!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/29/2020 18:30:24'!
ERROR!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:30:54'!
ocupiedByX: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:31:40' prior: 50902563!
ocupiedByX: aPoint 
	^ true.! !

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/29/2020 18:31:45'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:32:16' prior: 50902443!
test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard

! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:33:57' prior: 50902576!
test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 3@3.

	self assert: (TerniLapilli ocupiedByX: 3@3) equals: true.
	self assert: (TerniLapilli ocupiedByX: 3@3) equals: false.
 

! !

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/29/2020 18:33:59'!
FAILURE!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/29/2020 18:33:59'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:35:39' prior: 50902534!
test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard

| terniLapilli |

terniLapilli := TerniLapilli newGame.
terniLapilli putXAt: 1@1.

self assert: (terniLapilli ocupiedByX: 1@1) equals: true.
 ! !

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/29/2020 18:35:50'!
ERROR!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/29/2020 18:35:50'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:36:00'!
ocupiedByX: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:36:08' prior: 50902620!
ocupiedByX: aPoint 
	^true.! !

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/29/2020 18:36:14'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:36:27' prior: 50902582!
test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 3@3.

	self assert: (terniLapilli ocupiedByX: 3@3) equals: true.
	self assert: (terniLapilli ocupiedByX: 3@3) equals: false.
 

! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:36:31' prior: 50902633!
test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 3@3.

	self assert: (terniLapilli ocupiedByX: 3@3) equals: true.
	self assert: (terniLapilli ocupiedByX: 1@1) equals: false.
 

! !

!methodRemoval: TerniLapilli class #ocupiedByX: stamp: 'FG 10/29/2020 18:36:41'!
ocupiedByX: aPoint 
	^ true.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:36:58' prior: 50902603!
test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1.

	self assert: (terniLapilli ocupiedByX: 1@1) equals: true.
 ! !

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/29/2020 18:37:05'!
FAILURE!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/29/2020 18:37:05'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:37:28' prior: 50902625!
ocupiedByX: aPoint 
	^ xPieces includes: aPoint.! !

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/29/2020 18:37:39'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:38:06'!
test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard! !

!methodRemoval: TerniLapilliTest #test03PlayerOPutsAPieceInTheBoard stamp: 'FG 10/29/2020 18:38:15'!
test03PlayerOPutsAPieceInTheBoard!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:38:48' prior: 50902688!
test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putOAt: 1@1.

	self assert: (terniLapilli ocupiedByO: 1@1) equals: true.
 ! !

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/29/2020 18:38:53'!
ERROR!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/29/2020 18:38:53'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:39:10'!
putOAt: aPoint 
	self shouldBeImplemented.! !

!classDefinition: #TerniLapilli category: #'Terni Lapilli' stamp: 'FG 10/29/2020 18:39:35'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'xPieces oPieces'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:39:32' prior: 50902715!
putOAt: aPoint 
	^ oPieces add: aPoint.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:39:49' prior: 50902522!
initializeGame
	xPieces := Set new.
	oPieces := Set new.! !

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/29/2020 18:40:01'!
ERROR!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/29/2020 18:40:01'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:40:40'!
ocupiedByO: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:40:56' prior: 50902744!
ocupiedByO: aPoint 
	^ oPieces includes: aPoint.! !

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/29/2020 18:41:02'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:43:37'!
test03GameIsntOverAtTheBegginnig

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self assert: (terniLapilli isOver) equals: false.
 ! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:43:47'!
test04GameIsntOverAtTheBegginnig

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self assert: (terniLapilli isOver) equals: false.
 ! !

!methodRemoval: TerniLapilliTest #test03GameIsntOverAtTheBegginnig stamp: 'FG 10/29/2020 18:43:50'!
test03GameIsntOverAtTheBegginnig

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self assert: (terniLapilli isOver) equals: false.
 !

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/29/2020 18:44:09'!
ERROR!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/29/2020 18:44:09'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:44:18'!
isOver
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:44:29' prior: 50902788!
isOver
	 ^ false.! !

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/29/2020 18:44:37'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:45:52'!
test04IsTurnOfXAtTheBeggining

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self assert: (terniLapilli isPlayingX) equals: true.
 ! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:45:59'!
test05IsTurnOfXAtTheBeggining

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self assert: (terniLapilli isPlayingX) equals: true.
 ! !

!methodRemoval: TerniLapilliTest #test04IsTurnOfXAtTheBeggining stamp: 'FG 10/29/2020 18:46:01'!
test04IsTurnOfXAtTheBeggining

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self assert: (terniLapilli isPlayingX) equals: true.
 !

!testRun: #TerniLapilliTest #test05IsTurnOfXAtTheBeggining stamp: 'FG 10/29/2020 18:46:06'!
ERROR!

!testRun: #TerniLapilliTest #test05IsTurnOfXAtTheBeggining stamp: 'FG 10/29/2020 18:46:06'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:46:15'!
isPlayingX
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:46:24' prior: 50902830!
isPlayingX
	^ true.! !

!testRun: #TerniLapilliTest #test05IsTurnOfXAtTheBeggining stamp: 'FG 10/29/2020 18:46:32'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:47:47'!
test06IsTurnOfOAfterXPlayed

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1.
	
	self assert: (terniLapilli isPlayingX) equals: false.
	self assert: (terniLapilli isPlayingO) equals: true.
 ! !

!testRun: #TerniLapilliTest #test06IsTurnOfOAfterXPlayed stamp: 'FG 10/29/2020 18:47:51'!
FAILURE!

!testRun: #TerniLapilliTest #test06IsTurnOfOAfterXPlayed stamp: 'FG 10/29/2020 18:47:51'!
FAILURE!

!classDefinition: #TerniLapilli category: #'Terni Lapilli' stamp: 'FG 10/29/2020 18:50:25'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'xPieces oPieces xTurn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:50:22' prior: 50902835!
isPlayingX
	^ xTurn.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:50:38' prior: 50902732!
initializeGame
	xTurn := true.
	xPieces := Set new.
	oPieces := Set new.! !

!testRun: #TerniLapilliTest #test05IsTurnOfXAtTheBeggining stamp: 'FG 10/29/2020 18:50:47'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfOAfterXPlayed stamp: 'FG 10/29/2020 18:50:49'!
FAILURE!

!testRun: #TerniLapilliTest #test06IsTurnOfOAfterXPlayed stamp: 'FG 10/29/2020 18:50:50'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:52:18' prior: 50902727!
putOAt: aPoint 
	xTurn := xTurn negated.
	oPieces add: aPoint.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:53:04' prior: 50902501!
putXAt: aPoint 
	xTurn := xTurn negated.
	xPieces add: aPoint.! !

!testRun: #TerniLapilliTest #test06IsTurnOfOAfterXPlayed stamp: 'FG 10/29/2020 18:53:13'!
ERROR!

!testRun: #TerniLapilliTest #test06IsTurnOfOAfterXPlayed stamp: 'FG 10/29/2020 18:53:13'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:54:15' prior: 50902892!
putXAt: aPoint 
	xTurn := xTurn not.
	xPieces add: aPoint.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:54:38' prior: 50902886!
putOAt: aPoint 
	oPieces add: aPoint.! !

!testRun: #TerniLapilliTest #test06IsTurnOfOAfterXPlayed stamp: 'FG 10/29/2020 18:55:30'!
ERROR!

!testRun: #TerniLapilliTest #test06IsTurnOfOAfterXPlayed stamp: 'FG 10/29/2020 18:55:30'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:55:40'!
isPlayingO
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:55:58' prior: 50902919!
isPlayingO
	^ xTurn not.! !

!testRun: #TerniLapilliTest #test06IsTurnOfOAfterXPlayed stamp: 'FG 10/29/2020 18:56:06'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/29/2020 18:56:09'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/29/2020 18:56:09'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/29/2020 18:56:09'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/29/2020 18:56:09'!
PASSED!

!testRun: #TerniLapilliTest #test05IsTurnOfXAtTheBeggining stamp: 'FG 10/29/2020 18:56:09'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfOAfterXPlayed stamp: 'FG 10/29/2020 18:56:10'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:56:42'!
test06IsTurnOfXAfterOPlayed

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	
	self assert: (terniLapilli isPlayingX) equals: false.
	self assert: (terniLapilli isPlayingO) equals: true.
 ! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:56:49'!
test07IsTurnOfXAfterOPlayed

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	
	self assert: (terniLapilli isPlayingX) equals: false.
	self assert: (terniLapilli isPlayingO) equals: true.
 ! !

!methodRemoval: TerniLapilliTest #test06IsTurnOfXAfterOPlayed stamp: 'FG 10/29/2020 18:56:53'!
test06IsTurnOfXAfterOPlayed

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	
	self assert: (terniLapilli isPlayingX) equals: false.
	self assert: (terniLapilli isPlayingO) equals: true.
 !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:57:03' prior: 50902963!
test07IsTurnOfXAfterOPlayed

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	
	self assert: (terniLapilli isPlayingX) equals: true.
	self assert: (terniLapilli isPlayingO) equals: false.
 ! !

!testRun: #TerniLapilliTest #test07IsTurnOfXAfterOPlayed stamp: 'FG 10/29/2020 18:57:06'!
FAILURE!

!testRun: #TerniLapilliTest #test07IsTurnOfXAfterOPlayed stamp: 'FG 10/29/2020 18:57:06'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 18:57:37' prior: 50902909!
putOAt: aPoint 
	xTurn := xTurn not.
	oPieces add: aPoint.! !

!testRun: #TerniLapilliTest #test07IsTurnOfXAfterOPlayed stamp: 'FG 10/29/2020 18:57:41'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/29/2020 18:57:45'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/29/2020 18:57:45'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/29/2020 18:57:45'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/29/2020 18:57:45'!
PASSED!

!testRun: #TerniLapilliTest #test05IsTurnOfXAtTheBeggining stamp: 'FG 10/29/2020 18:57:45'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfOAfterXPlayed stamp: 'FG 10/29/2020 18:57:45'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfXAfterOPlayed stamp: 'FG 10/29/2020 18:57:45'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 19:02:27'!
test04PlayersHadntWonAtTheBegginnig

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self assert: (terniLapilli hasPlayerXWon) equals: false.
	self assert: (terniLapilli hasPlayerOWon) equals: false.
 ! !

!testRun: #TerniLapilliTest #test04PlayersHadntWonAtTheBegginnig stamp: 'FG 10/29/2020 19:02:33'!
ERROR!

!testRun: #TerniLapilliTest #test04PlayersHadntWonAtTheBegginnig stamp: 'FG 10/29/2020 19:02:33'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 19:02:41'!
hasPlayerXWon
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 19:02:50' prior: 50903053!
hasPlayerXWon
	^ false.! !

!testRun: #TerniLapilliTest #test04PlayersHadntWonAtTheBegginnig stamp: 'FG 10/29/2020 19:02:56'!
ERROR!

!testRun: #TerniLapilliTest #test04PlayersHadntWonAtTheBegginnig stamp: 'FG 10/29/2020 19:02:56'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 19:03:03'!
hasPlayerOWon
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 19:03:16' prior: 50903068!
hasPlayerOWon
	 ^ false.! !

!testRun: #TerniLapilliTest #test04PlayersHadntWonAtTheBegginnig stamp: 'FG 10/29/2020 19:03:21'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 19:03:27'!
test05PlayersHadntWonAtTheBegginnig

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self assert: (terniLapilli hasPlayerXWon) equals: false.
	self assert: (terniLapilli hasPlayerOWon) equals: false.
 ! !

!methodRemoval: TerniLapilliTest #test04PlayersHadntWonAtTheBegginnig stamp: 'FG 10/29/2020 19:03:42'!
test04PlayersHadntWonAtTheBegginnig

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self assert: (terniLapilli hasPlayerXWon) equals: false.
	self assert: (terniLapilli hasPlayerOWon) equals: false.
 !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 19:03:49'!
test06IsTurnOfXAtTheBeggining

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self assert: (terniLapilli isPlayingX) equals: true.
 ! !

!methodRemoval: TerniLapilliTest #test05IsTurnOfXAtTheBeggining stamp: 'FG 10/29/2020 19:03:52'!
test05IsTurnOfXAtTheBeggining

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self assert: (terniLapilli isPlayingX) equals: true.
 !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 19:04:00'!
test07IsTurnOfOAfterXPlayed

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1.
	
	self assert: (terniLapilli isPlayingX) equals: false.
	self assert: (terniLapilli isPlayingO) equals: true.
 ! !

!methodRemoval: TerniLapilliTest #test06IsTurnOfOAfterXPlayed stamp: 'FG 10/29/2020 19:04:03'!
test06IsTurnOfOAfterXPlayed

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1.
	
	self assert: (terniLapilli isPlayingX) equals: false.
	self assert: (terniLapilli isPlayingO) equals: true.
 !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 19:04:09'!
test08IsTurnOfXAfterOPlayed

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	
	self assert: (terniLapilli isPlayingX) equals: true.
	self assert: (terniLapilli isPlayingO) equals: false.
 ! !

!methodRemoval: TerniLapilliTest #test07IsTurnOfXAfterOPlayed stamp: 'FG 10/29/2020 19:04:13'!
test07IsTurnOfXAfterOPlayed

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	
	self assert: (terniLapilli isPlayingX) equals: true.
	self assert: (terniLapilli isPlayingO) equals: false.
 !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 19:19:35'!
test01PlayerXMovesAPiece

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 3@3.
	terniLapilli putOAt: 3@1.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 3@2.

	terniLapilli moveXFrom: 1@1 to: 1@2.	

	self assert: (terniLapilli ocupiedByX: 1@1) equals: false.
	self assert: (terniLapilli ocupiedByX: 1@2) equals: true.
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 19:19:45'!
test09PlayerXMovesAPiece

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 3@3.
	terniLapilli putOAt: 3@1.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 3@2.

	terniLapilli moveXFrom: 1@1 to: 1@2.	

	self assert: (terniLapilli ocupiedByX: 1@1) equals: false.
	self assert: (terniLapilli ocupiedByX: 1@2) equals: true.
	
	! !

!methodRemoval: TerniLapilliTest #test01PlayerXMovesAPiece stamp: 'FG 10/29/2020 19:19:47'!
test01PlayerXMovesAPiece

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 3@3.
	terniLapilli putOAt: 3@1.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 3@2.

	terniLapilli moveXFrom: 1@1 to: 1@2.	

	self assert: (terniLapilli ocupiedByX: 1@1) equals: false.
	self assert: (terniLapilli ocupiedByX: 1@2) equals: true.
	
	!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/29/2020 19:21:08'!
ERROR!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/29/2020 19:21:08'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 19:21:18'!
moveXFrom: aPoint to: aPoint2 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 19:22:46' prior: 50903212!
moveXFrom: originPoint to: destinationPoint
	xPieces remove: originPoint.
	xPieces add: destinationPoint.! !

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/29/2020 19:22:55'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 19:25:20'!
test09PlayerOMovesAPiece

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 3@3.
	terniLapilli putOAt: 3@1.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 3@2.

	terniLapilli moveXFrom: 1@1 to: 1@2.	
	terniLapilli moveOFrom: 3@1 to: 2@1.

	self assert: (terniLapilli ocupiedByO: 3@1) equals: false.
	self assert: (terniLapilli ocupiedByO: 2@1) equals: true.
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 19:25:33'!
test10PlayerOMovesAPiece

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 3@3.
	terniLapilli putOAt: 3@1.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 3@2.

	terniLapilli moveXFrom: 1@1 to: 1@2.	
	terniLapilli moveOFrom: 3@1 to: 2@1.

	self assert: (terniLapilli ocupiedByO: 3@1) equals: false.
	self assert: (terniLapilli ocupiedByO: 2@1) equals: true.
	
	! !

!methodRemoval: TerniLapilliTest #test09PlayerOMovesAPiece stamp: 'FG 10/29/2020 19:25:36'!
test09PlayerOMovesAPiece

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 3@3.
	terniLapilli putOAt: 3@1.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 3@2.

	terniLapilli moveXFrom: 1@1 to: 1@2.	
	terniLapilli moveOFrom: 3@1 to: 2@1.

	self assert: (terniLapilli ocupiedByO: 3@1) equals: false.
	self assert: (terniLapilli ocupiedByO: 2@1) equals: true.
	
	!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/29/2020 19:25:40'!
ERROR!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/29/2020 19:25:40'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 19:25:49'!
moveOFrom: aPoint to: aPoint2 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 19:26:37' prior: 50903284!
moveOFrom: originPoint to: destinationPoint 
	oPieces remove: originPoint.
	oPieces add: destinationPoint.! !

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/29/2020 19:26:51'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/29/2020 19:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/29/2020 19:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/29/2020 19:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/29/2020 19:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/29/2020 19:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/29/2020 19:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/29/2020 19:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/29/2020 19:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/29/2020 19:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/29/2020 19:26:54'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 19:40:34'!
test10PlayerXWinsWithThreePiecesInARow

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 1@2.
	terniLapilli putOAt: 3@1.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 3@2.

	self assert: (terniLapilli isOver) equals: true.
	self assert: (terniLapilli hasPlayerXWon) equals: true.
	self assert: (terniLapilli hasPlayerOWon) equals: false.
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 19:40:40'!
test11PlayerXWinsWithThreePiecesInARow

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 1@2.
	terniLapilli putOAt: 3@1.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 3@2.

	self assert: (terniLapilli isOver) equals: true.
	self assert: (terniLapilli hasPlayerXWon) equals: true.
	self assert: (terniLapilli hasPlayerOWon) equals: false.
	
	! !

!methodRemoval: TerniLapilliTest #test10PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/29/2020 19:40:42'!
test10PlayerXWinsWithThreePiecesInARow

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 1@2.
	terniLapilli putOAt: 3@1.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 3@2.

	self assert: (terniLapilli isOver) equals: true.
	self assert: (terniLapilli hasPlayerXWon) equals: true.
	self assert: (terniLapilli hasPlayerOWon) equals: false.
	
	!

Object subclass: #TerniLapilli
	instanceVariableNames: 'xPieces oPieces xTurn gameEnded xWon'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: #'Terni Lapilli' stamp: 'FG 10/29/2020 20:24:48'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'xPieces oPieces xTurn gameEnded xWon'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 20:25:09' prior: 50902871!
initializeGame
	xTurn := true.
	xWon := false.
	gameEnded  := false.
	xPieces := Set new.
	oPieces := Set new.! !

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/29/2020 20:25:29'!
FAILURE!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/29/2020 20:25:29'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 20:25:50' prior: 50902793!
isOver
	 ^ gameEnded.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 20:26:07' prior: 50903058!
hasPlayerXWon
	^ xWon.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 20:27:39' prior: 50903073!
hasPlayerOWon
	 ^ gameEnded and: [xWon not].! !

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/29/2020 20:28:12'!
FAILURE!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/29/2020 20:28:12'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 20:32:14' prior: 50902904!
putXAt: aPoint 
	xTurn := xTurn not.
	xPieces add: aPoint.
	self checkIfXWon.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 20:49:51'!
checkIfXWon
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 20:50:10' prior: 50903396!
initializeGame
	xTurn := true.
	xWon := false.
	gameEnded  := false.
	xPieces := OrderedCollection new.
	oPieces := OrderedCollection new.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 20:55:03' prior: 50903436!
checkIfXWon

	xWon := (xPieces size = 3) and: [xPieces allSatisfy: [ :aPiece | aPiece x  = xPieces first x  ] ].
	gameEnded := xWon.! !

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/29/2020 20:55:34'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/29/2020 20:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/29/2020 20:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/29/2020 20:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/29/2020 20:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/29/2020 20:55:39'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/29/2020 20:55:39'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/29/2020 20:55:39'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/29/2020 20:55:39'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/29/2020 20:55:39'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/29/2020 20:55:39'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/29/2020 20:55:39'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 20:56:18'!
test12PlayerXWinsWithThreePiecesInAColumn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 3@1.
	terniLapilli putXAt: 3@1.

	self assert: (terniLapilli isOver) equals: true.
	self assert: (terniLapilli hasPlayerXWon) equals: true.
	self assert: (terniLapilli hasPlayerOWon) equals: false.
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 20:56:25' prior: 50903349!
test11PlayerXWinsWithThreePiecesInARow

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 1@2.
	terniLapilli putOAt: 3@1.
	terniLapilli putXAt: 1@3.

	self assert: (terniLapilli isOver) equals: true.
	self assert: (terniLapilli hasPlayerXWon) equals: true.
	self assert: (terniLapilli hasPlayerOWon) equals: false.
	
	! !

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/29/2020 20:56:36'!
FAILURE!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/29/2020 20:56:36'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 20:58:40' prior: 50903448!
checkIfXWon

	xWon := (xPieces size = 3) and: [(xPieces allSatisfy: [ :aPiece | aPiece x  = xPieces first x  ] ) or: [ xPieces allSatisfy: [ :aPiece | aPiece y  = xPieces first y  ] ] ]  .
	gameEnded := xWon.! !

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/29/2020 20:58:47'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/29/2020 20:58:51'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/29/2020 20:58:51'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/29/2020 20:58:51'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/29/2020 20:58:51'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/29/2020 20:58:51'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/29/2020 20:58:51'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/29/2020 20:58:51'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/29/2020 20:58:51'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/29/2020 20:58:51'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/29/2020 20:58:51'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/29/2020 20:58:51'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/29/2020 20:58:51'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 20:59:07'!
test12PlayerXWinsWithThreePiecesInADiagonal

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 3@1.
	terniLapilli putXAt: 3@1.

	self assert: (terniLapilli isOver) equals: true.
	self assert: (terniLapilli hasPlayerXWon) equals: true.
	self assert: (terniLapilli hasPlayerOWon) equals: false.
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/29/2020 20:59:20'!
test13PlayerXWinsWithThreePiecesInADiagonal

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@1.
	terniLapilli putXAt: 2@2.
	terniLapilli putOAt: 3@1.
	terniLapilli putXAt: 3@3.

	self assert: (terniLapilli isOver) equals: true.
	self assert: (terniLapilli hasPlayerXWon) equals: true.
	self assert: (terniLapilli hasPlayerOWon) equals: false.
	
	! !

!methodRemoval: TerniLapilliTest #test12PlayerXWinsWithThreePiecesInADiagonal stamp: 'FG 10/29/2020 20:59:25'!
test12PlayerXWinsWithThreePiecesInADiagonal

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 3@1.
	terniLapilli putXAt: 3@1.

	self assert: (terniLapilli isOver) equals: true.
	self assert: (terniLapilli hasPlayerXWon) equals: true.
	self assert: (terniLapilli hasPlayerOWon) equals: false.
	
	!

!methodRemoval: TerniLapilliTest #test13PlayerXWinsWithThreePiecesInADiagonal stamp: 'FG 10/29/2020 21:26:46'!
test13PlayerXWinsWithThreePiecesInADiagonal

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@1.
	terniLapilli putXAt: 2@2.
	terniLapilli putOAt: 3@1.
	terniLapilli putXAt: 3@3.

	self assert: (terniLapilli isOver) equals: true.
	self assert: (terniLapilli hasPlayerXWon) equals: true.
	self assert: (terniLapilli hasPlayerOWon) equals: false.
	
	!

x := Set with: 1 with: 2 with: 3. !

y := Set with: (Set with: 1 with:2 with:3).!

y includes: x. !

y := Set with: (Set with: 2 with:3 with:1).!

y includes: x. !

x := Set with: 1 with: 2 with: 3. !

y := Set with: (Set with: 2 with:3 with:1).!

y includes: x. !

----QUIT----(29 October 2020 21:47:44) CuisUniversity-4365.image priorSource: 18263802!

----STARTUP---- (31 October 2020 15:15:59) as C:\Users\FACU PC\Documents\Clases Virtuales\Cosas IS 1\Cuis University\CuisUniversity-4365.image!


x := Set new.!

y := Set with: 1 with: 5 with: 8.!

x add y.!

x add: y.!

x includes: (Set with: 8 with: 1 with: 5).!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 15:50:35' prior: 50903440!
initializeGame
	xTurn := true.
	xWon := false.
	gameEnded  := false.
	xPieces := Set new.
	oPieces := Set new.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 15:51:20' prior: 50903496!
test12PlayerXWinsWithThreePiecesInAColumn
"
	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 3@1.
	terniLapilli putXAt: 3@1.

	self assert: (terniLapilli isOver) equals: true.
	self assert: (terniLapilli hasPlayerXWon) equals: true.
	self assert: (terniLapilli hasPlayerOWon) equals: false.
"! !

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 15:51:26'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 15:51:26'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 15:51:26'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 15:51:26'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 15:51:26'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 15:51:26'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 15:51:26'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 15:51:26'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 15:51:26'!
ERROR!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 15:51:26'!
ERROR!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 15:51:26'!
ERROR!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 15:51:26'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 15:52:14'!
ERROR!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 15:52:14'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 15:53:11' prior: 50903430!
putXAt: aPoint 
	xTurn := xTurn not.
	xPieces add: aPoint.
	"self checkIfXWon".! !

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 15:53:17'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 15:53:17'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 15:53:17'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 15:53:17'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 15:53:17'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 15:53:17'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 15:53:17'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 15:53:17'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 15:53:17'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 15:53:17'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 15:53:17'!
FAILURE!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 15:53:17'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 15:53:17'!
FAILURE!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 15:53:23'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 15:53:23'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 15:53:23'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 15:53:23'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 15:53:23'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 15:53:23'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 15:53:23'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 15:53:23'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 15:53:23'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 15:53:23'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 15:53:23'!
FAILURE!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 15:53:23'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 15:53:23'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 15:53:40' prior: 50903512!
test11PlayerXWinsWithThreePiecesInARow
"
	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 1@2.
	terniLapilli putOAt: 3@1.
	terniLapilli putXAt: 1@3.

	self assert: (terniLapilli isOver) equals: true.
	self assert: (terniLapilli hasPlayerXWon) equals: true.
	self assert: (terniLapilli hasPlayerOWon) equals: false.
"	
	! !

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 15:53:43'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 15:53:43'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 15:53:43'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 15:53:43'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 15:53:43'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 15:53:43'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 15:53:43'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 15:53:43'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 15:53:43'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 15:53:43'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 15:53:43'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 15:53:43'!
PASSED!

Object subclass: #TerniLapilli
	instanceVariableNames: 'xPieces oPieces xTurn gameEnded xWon winningCombinations'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: #'Terni Lapilli' stamp: 'FG 10/31/2020 15:54:42'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'xPieces oPieces xTurn gameEnded xWon winningCombinations'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 15:55:54' prior: 50903674!
initializeGame
	xTurn := true.
	xWon := false.
	gameEnded  := false.
	xPieces := Set new.
	oPieces := Set new.
       self createWinningCombinations.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 15:56:15'!
createWinningCombinations
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 15:57:35' prior: 50903919!
createWinningCombinations

	winningCombinations := Set new.
	
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 15:57:49' prior: 50903923!
createWinningCombinations

	winningCombinations := Set new.
	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 15:58:12' prior: 50903839!
test11PlayerXWinsWithThreePiecesInARow

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 1@2.
	terniLapilli putOAt: 3@1.
	terniLapilli putXAt: 1@3.

	self assert: (terniLapilli isOver) equals: true.
	self assert: (terniLapilli hasPlayerXWon) equals: true.
	self assert: (terniLapilli hasPlayerOWon) equals: false.
	
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 15:58:27' prior: 50903535!
checkIfXWon

! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 15:58:29' prior: 50903951!
checkIfXWon

	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 15:58:38' prior: 50903955!
checkIfXWon

	
	"xWon := (xPieces size = 3) and: [(xPieces allSatisfy: [ :aPiece | aPiece x  = xPieces first x  ] ) or: [ xPieces allSatisfy: [ :aPiece | aPiece y  = xPieces first y  ] ] ]  .
	gameEnded := xWon."! !

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 15:58:43'!
FAILURE!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 15:58:43'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 15:59:15' prior: 50903744!
putXAt: aPoint 
	xTurn := xTurn not.
	xPieces add: aPoint.
	self checkIfXWon.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 16:00:18' prior: 50903959!
checkIfXWon

	^ winningCombinations includes: xPieces.	
	"xWon := (xPieces size = 3) and: [(xPieces allSatisfy: [ :aPiece | aPiece x  = xPieces first x  ] ) or: [ xPieces allSatisfy: [ :aPiece | aPiece y  = xPieces first y  ] ] ]  .
	gameEnded := xWon."! !

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 16:00:43'!
FAILURE!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 16:00:43'!
FAILURE!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 16:00:54'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 16:11:01' prior: 50903929!
createWinningCombinations

	
	| auxArray auxSet|
	
	winningCombinations := Set new.
	
	auxArray := 	{1,2,3}.
	
	auxArray do:[:aElement |
		     auxSet := Set new. 
		     auxArray do: [:anotherElement | auxSet add: aElement@anotherElement].
		     winningCombinations add: auxSet.
		].
	
	
	
	! !

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 16:11:08'!
ERROR!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 16:11:08'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 16:11:57' prior: 50904004!
createWinningCombinations

	
	| auxArray auxSet|
	
	winningCombinations := Set new.
	
	auxArray := 	#(1 2 3).
	
	auxArray do:[:aElement |
		     auxSet := Set new. 
		     auxArray do: [:anotherElement | auxSet add: aElement@anotherElement].
		     winningCombinations add: auxSet.
		].
	
	
	
	! !

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 16:12:04'!
FAILURE!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 16:12:04'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 16:14:53' prior: 50903982!
checkIfXWon

	(winningCombinations includes: xPieces) 
		ifTrue:[ xWon := true.
			    gameEnded := true. ]! !

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 16:14:59'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 16:15:30' prior: 50903681!
test12PlayerXWinsWithThreePiecesInAColumn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 3@1.
	terniLapilli putXAt: 3@1.

	self assert: (terniLapilli isOver) equals: true.
	self assert: (terniLapilli hasPlayerXWon) equals: true.
	self assert: (terniLapilli hasPlayerOWon) equals: false.
! !

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 16:15:33'!
FAILURE!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 16:15:33'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 16:16:40' prior: 50904024!
createWinningCombinations

	
	| auxArray auxSet|
	
	winningCombinations := Set new.
	
	auxArray := 	#(1 2 3).
	
	auxArray do:[:aElement |
		     auxSet := Set new. 
		     auxArray do: [:anotherElement | auxSet add: aElement@anotherElement].
		     winningCombinations add: auxSet.
		].
	
	auxArray do:[:aElement |
		     auxSet := Set new. 
		     auxArray do: [:anotherElement | auxSet add: anotherElement@aElement].
		     winningCombinations add: auxSet.
		]
	
	
	
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 16:16:50' prior: 50904078!
createWinningCombinations

	
	| auxArray auxSet|
	
	winningCombinations := Set new.
	
	auxArray := 	#(1 2 3).
	
	auxArray do:[:aElement |
		     auxSet := Set new. 
		     auxArray do: [:anotherElement | auxSet add: aElement@anotherElement].
		     winningCombinations add: auxSet.
		].
	
	auxArray do:[:aElement |
		     auxSet := Set new. 
		     auxArray do: [:anotherElement | auxSet add: anotherElement@aElement].
		     winningCombinations add: auxSet.
		].
	
	
	
	! !

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 16:16:55'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 16:20:25'!
test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@1.
	terniLapilli putXAt: 2@2.
	terniLapilli putOAt: 3@1.
	terniLapilli putXAt: 3@3.

	self assert: (terniLapilli isOver) equals: true.
	self assert: (terniLapilli hasPlayerXWon) equals: true.
	self assert: (terniLapilli hasPlayerOWon) equals: false.
! !

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 16:20:28'!
FAILURE!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 16:20:28'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 16:21:56' prior: 50904096!
createWinningCombinations

	
	| auxArray auxSet|
	
	winningCombinations := Set new.
	
	auxArray := 	#(1 2 3).
	
	auxArray do:[:aElement |
		     auxSet := Set new. 
		     auxArray do: [:anotherElement | auxSet add: aElement@anotherElement].
		     winningCombinations add: auxSet.
		].
	
	auxArray do:[:aElement |
		     auxSet := Set new. 
		     auxArray do: [:anotherElement | auxSet add: anotherElement@aElement].
		     winningCombinations add: auxSet.
		].
	
	winningCombinations add: (Set with: 1@1 with: 2@2 with: 3@3).
	
	
	
	! !

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 16:22:09'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 16:22:13'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 16:22:13'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 16:22:13'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 16:22:13'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 16:22:13'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 16:22:13'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 16:22:13'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 16:22:13'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 16:22:13'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 16:22:13'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 16:22:13'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 16:22:13'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 16:22:13'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 16:23:01'!
test13PlayerXWinsWithThreePiecesInTheDecreasingDiagonal

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 2@2.
	terniLapilli putOAt: 1@1.
	terniLapilli putXAt: 3@1.

	self assert: (terniLapilli isOver) equals: true.
	self assert: (terniLapilli hasPlayerXWon) equals: true.
	self assert: (terniLapilli hasPlayerOWon) equals: false.
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 16:23:10'!
test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 2@2.
	terniLapilli putOAt: 1@1.
	terniLapilli putXAt: 3@1.

	self assert: (terniLapilli isOver) equals: true.
	self assert: (terniLapilli hasPlayerXWon) equals: true.
	self assert: (terniLapilli hasPlayerOWon) equals: false.
! !

!methodRemoval: TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 16:23:12'!
test13PlayerXWinsWithThreePiecesInTheDecreasingDiagonal

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 2@2.
	terniLapilli putOAt: 1@1.
	terniLapilli putXAt: 3@1.

	self assert: (terniLapilli isOver) equals: true.
	self assert: (terniLapilli hasPlayerXWon) equals: true.
	self assert: (terniLapilli hasPlayerOWon) equals: false.
!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 16:23:15'!
FAILURE!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 16:23:15'!
FAILURE!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 16:23:15'!
FAILURE!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 16:23:15'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 16:23:43' prior: 50904143!
createWinningCombinations

	
	| auxArray auxSet|
	
	winningCombinations := Set new.
	
	auxArray := 	#(1 2 3).
	
	auxArray do:[:aElement |
		     auxSet := Set new. 
		     auxArray do: [:anotherElement | auxSet add: aElement@anotherElement].
		     winningCombinations add: auxSet.
		].
	
	auxArray do:[:aElement |
		     auxSet := Set new. 
		     auxArray do: [:anotherElement | auxSet add: anotherElement@aElement].
		     winningCombinations add: auxSet.
		].
	
	winningCombinations add: (Set with: 1@1 with: 2@2 with: 3@3).
	winningCombinations add: (Set with: 1@3 with: 2@2 with: 3@1).
	
	
	
	! !

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 16:23:58'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 16:29:10'!
test15PlayerOWinsWithThreePiecesInARow

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 3@2.
	terniLapilli putXAt: 2@2.
	terniLapilli putOAt: 3@3.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 3@1.

	self assert: (terniLapilli isOver) equals: true.
	self assert: (terniLapilli hasPlayerXWon) equals: false.
	self assert: (terniLapilli hasPlayerOWon) equals: true.
	
	! !

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 16:29:13'!
FAILURE!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 16:29:13'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 16:29:53' prior: 50903004!
putOAt: aPoint 
	xTurn := xTurn not.
	oPieces add: aPoint.
	self checkIfOWon.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 16:30:39'!
checkIfOWon

	(winningCombinations includes: oPieces) 
		ifTrue:[ xWon := false.
			    gameEnded := true. ]! !

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 16:30:48'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 16:30:53'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 16:30:53'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 16:30:53'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 16:30:53'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 16:30:53'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 16:30:53'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 16:30:53'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 16:30:53'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 16:30:53'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 16:30:53'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 16:30:53'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 16:30:53'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 16:30:53'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 16:30:53'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 16:30:53'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 16:31:13'!
test15PlayerOWinsWithThreePiecesInAWinningCombination

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 3@2.
	terniLapilli putXAt: 2@2.
	terniLapilli putOAt: 3@3.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 3@1.

	self assert: (terniLapilli isOver) equals: true.
	self assert: (terniLapilli hasPlayerXWon) equals: false.
	self assert: (terniLapilli hasPlayerOWon) equals: true.
	
	! !

!methodRemoval: TerniLapilliTest #test15PlayerOWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 16:31:16'!
test15PlayerOWinsWithThreePiecesInARow

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 3@2.
	terniLapilli putXAt: 2@2.
	terniLapilli putOAt: 3@3.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 3@1.

	self assert: (terniLapilli isOver) equals: true.
	self assert: (terniLapilli hasPlayerXWon) equals: false.
	self assert: (terniLapilli hasPlayerOWon) equals: true.
	
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 16:33:49'!
test16PlayerXCantPutAPieceInAInvalidPosition

	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 16:45:40'!
should: aBlockThatShouldFail raisingAnErrorAndAsserting: aVerificationBlock

    [aBlockThatShouldFail value. self fail.]
    on: Error
    do: aVerificationBlock.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 16:45:50' prior: 50904430!
test16PlayerXCantPutAPieceInAInvalidPosition

	

	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 16:49:35' prior: 50904444!
test16PlayerXCantPutAPieceInAInvalidPosition

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self should: [terniLapilli putXAt: 1@4] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli invalidPositionErrorMessage ].
	self should: [terniLapilli putXAt: 2.3@3] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli invalidPositionErrorMessage].
	

	

	
	
	! !

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 16:49:49'!
FAILURE!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 16:49:49'!
FAILURE!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 16:50:32'!
FAILURE!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 16:50:41'!
FAILURE!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 16:50:41'!
FAILURE!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 16:51:30'!
FAILURE!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 16:51:30'!
FAILURE!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 16:52:01'!
FAILURE!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 16:53:22'!
invalidPositionErrorMessage 
	^ 'Cant put piece in this position'! !

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 16:53:41'!
FAILURE!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 16:53:41'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 16:54:21' prior: 50903976!
putXAt: aPoint 

	self checkIsValidPoint : aPoint.

	xTurn := xTurn not.
	xPieces add: aPoint.
	self checkIfXWon.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 16:58:35'!
checkIsValidPoint: aPoint
	(aPoint isIntegerPoint and: [(aPoint x between: 1 and: 3) and: [(aPoint y between: 1 and: 3)]]) ifFalse: [self error: TerniLapilli invalidPositionErrorMessage].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 16:58:46'!
checkIfValidPoint: aPoint
	(aPoint isIntegerPoint and: [(aPoint x between: 1 and: 3) and: [(aPoint y between: 1 and: 3)]]) ifFalse: [self error: TerniLapilli invalidPositionErrorMessage].! !

!methodRemoval: TerniLapilli #checkIsValidPoint: stamp: 'FG 10/31/2020 16:58:54'!
checkIsValidPoint: aPoint
	(aPoint isIntegerPoint and: [(aPoint x between: 1 and: 3) and: [(aPoint y between: 1 and: 3)]]) ifFalse: [self error: TerniLapilli invalidPositionErrorMessage].!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 16:59:30' prior: 50904508!
putXAt: aPoint 

	self checkIfValidPoint: aPoint.

	xTurn := xTurn not.
	xPieces add: aPoint.
	self checkIfXWon.! !

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 16:59:38'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:01:04'!
test16PlayerOCantPutAPieceInAInvalidPosition

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self should: [terniLapilli putXAt: 1@2. terniLapilli putOAt:-1@4] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli invalidPositionErrorMessage ].
	self should: [terniLapilli putXAt: 1@3. terniLapilli putOAt: 2.5@3]
		 raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli invalidPositionErrorMessage].
	

	

	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:01:10'!
test17PlayerOCantPutAPieceInAInvalidPosition

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self should: [terniLapilli putXAt: 1@2. terniLapilli putOAt:-1@4] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli invalidPositionErrorMessage ].
	self should: [terniLapilli putXAt: 1@3. terniLapilli putOAt: 2.5@3]
		 raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli invalidPositionErrorMessage].
	

	

	
	
	! !

!methodRemoval: TerniLapilliTest #test16PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:01:12'!
test16PlayerOCantPutAPieceInAInvalidPosition

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self should: [terniLapilli putXAt: 1@2. terniLapilli putOAt:-1@4] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli invalidPositionErrorMessage ].
	self should: [terniLapilli putXAt: 1@3. terniLapilli putOAt: 2.5@3]
		 raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli invalidPositionErrorMessage].
	

	

	
	
	!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:01:24'!
FAILURE!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:01:24'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:01:46' prior: 50904328!
putOAt: aPoint 

	self checkIfValidPoint: aPoint.
	
	xTurn := xTurn not.
	oPieces add: aPoint.
	self checkIfOWon.! !

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:01:57'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:01:59'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 17:02:01'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 17:02:01'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 17:02:01'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 17:02:01'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 17:02:01'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 17:02:01'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 17:02:01'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 17:02:01'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 17:02:02'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 17:02:02'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 17:02:02'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 17:02:02'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 17:02:02'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 17:02:02'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 17:02:02'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:02:02'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:02:02'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:05:46'!
test18PlayerXCantPutAPieceInAPositionWithAnotherPiece

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self should: [terniLapilli putXAt: 1@2. terniLapilli putOAt:1@3. terniLapilli putXAt: 1@3] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli invalidPositionErrorMessage].
	self should: [terniLapilli putXAt: 1@2]
		 raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli invalidPositionErrorMessage].
	

	

	
	
	! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:09:43'!
cantPutPieceOverPieceErrorMessage 
	^ 'Error - Piece already in this position'! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:10:08' prior: 50904691!
test18PlayerXCantPutAPieceInAPositionWithAnotherPiece

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self should: [terniLapilli putXAt: 1@2. terniLapilli putOAt:1@3. terniLapilli putXAt: 1@3] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutPieceOverPieceErrorMessage].
	self should: [terniLapilli putXAt: 1@2]
		 raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutPieceOverPieceErrorMessage].
	

	

	
	
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:11:26' prior: 50904542!
putXAt: aPoint 

	self checkIfValidPoint: aPoint.

	xTurn := xTurn not.
	xPieces add: aPoint.
	self checkIfXWon.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:14:22'!
checkIfValidPlacement: aPoint
	((xPieces includes: aPoint) or: [oPieces includes: aPoint]) ifTrue: [self error: TerniLapilli cantPutPieceOverPieceErrorMessage].! !

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 17:14:42'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 17:14:43'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 17:14:43'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 17:14:43'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 17:14:43'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 17:14:43'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 17:14:43'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 17:14:43'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 17:14:43'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 17:14:43'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 17:14:43'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 17:14:43'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 17:14:43'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 17:14:43'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 17:14:43'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:14:43'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:14:43'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 17:14:43'!
FAILURE!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 17:14:43'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:15:20' prior: 50904736!
putXAt: aPoint 

	self checkIfValidPoint: aPoint.
	self checkIfValidPlacement: aPoint.

	xTurn := xTurn not.
	xPieces add: aPoint.
	self checkIfXWon.! !

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 17:15:33'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 17:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 17:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 17:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 17:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 17:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 17:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 17:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 17:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 17:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 17:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 17:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 17:15:37'!
ERROR!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 17:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 17:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 17:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 17:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 17:15:37'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:16:12' prior: 50904055!
test12PlayerXWinsWithThreePiecesInAColumn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 2@3.
	terniLapilli putXAt: 3@1.

	self assert: (terniLapilli isOver) equals: true.
	self assert: (terniLapilli hasPlayerXWon) equals: true.
	self assert: (terniLapilli hasPlayerOWon) equals: false.
! !

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 17:16:13'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 17:16:13'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 17:16:14'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 17:16:14'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 17:16:14'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 17:16:14'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 17:16:14'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 17:16:14'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 17:16:14'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 17:16:14'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 17:16:14'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 17:16:14'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 17:16:14'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 17:16:14'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 17:16:14'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:16:14'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:16:14'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 17:16:14'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:18:42'!
test18PlayerOCantPutAPieceInAPositionWithAnotherPiece

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self should: [terniLapilli putXAt: 1@2. terniLapilli putOAt:1@2] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutPieceOverPieceErrorMessage].
	self should: [terniLapilli putXAt: 1@2]
		 raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutPieceOverPieceErrorMessage].
	

	

	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:18:47'!
test19PlayerOCantPutAPieceInAPositionWithAnotherPiece

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self should: [terniLapilli putXAt: 1@2. terniLapilli putOAt:1@2] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutPieceOverPieceErrorMessage].
	self should: [terniLapilli putXAt: 1@2]
		 raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutPieceOverPieceErrorMessage].
	

	

	
	
	! !

!methodRemoval: TerniLapilliTest #test18PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 17:18:50'!
test18PlayerOCantPutAPieceInAPositionWithAnotherPiece

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self should: [terniLapilli putXAt: 1@2. terniLapilli putOAt:1@2] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutPieceOverPieceErrorMessage].
	self should: [terniLapilli putXAt: 1@2]
		 raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutPieceOverPieceErrorMessage].
	

	

	
	
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:21:00' prior: 50904997!
test19PlayerOCantPutAPieceInAPositionWithAnotherPiece

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self should: [terniLapilli putXAt: 1@2. terniLapilli putOAt:1@2] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutPieceOverPieceErrorMessage].
	self should: [terniLapilli putOAt: 1@3. terniLapilli putXAt: 1@1. terniLapilli putOAt: 1@3]
		 raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutPieceOverPieceErrorMessage].
	

	

	
	
	! !

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 17:21:03'!
FAILURE!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 17:21:03'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:21:17' prior: 50904617!
putOAt: aPoint 

	self checkIfValidPoint: aPoint.
	self checkIfValidPlacement: aPoint.
	
	xTurn := xTurn not.
	oPieces add: aPoint.
	self checkIfOWon.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:24:06'!
test20PlayerXCantPlayDuringOTurn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self should: [terniLapilli putXAt: 1@2. terniLapilli putXAt:1@3] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayInAnotherPlayerTurn].

	

	
	
	! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:24:57'!
cantPlayInAnotherPlayerTurn
	^ 'Error - You are trying to play in another player turn'! !

!testRun: #TerniLapilliTest #test20PlayerXCantPlayDuringOTurn stamp: 'FG 10/31/2020 17:25:05'!
FAILURE!

!testRun: #TerniLapilliTest #test20PlayerXCantPlayDuringOTurn stamp: 'FG 10/31/2020 17:25:05'!
FAILURE!

!testRun: #TerniLapilliTest #test20PlayerXCantPlayDuringOTurn stamp: 'FG 10/31/2020 17:25:05'!
FAILURE!

!testRun: #TerniLapilliTest #test20PlayerXCantPlayDuringOTurn stamp: 'FG 10/31/2020 17:25:05'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:26:08' prior: 50904819!
putXAt: aPoint 

	self checkIfValidPoint: aPoint.
	self checkIfValidPlacement: aPoint.
	self checkIfIsXTurn.

	xTurn := xTurn not.
	xPieces add: aPoint.
	self checkIfXWon.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:27:08' prior: 50905102!
putXAt: aPoint 

	self checkIfValidPoint: aPoint.
	self checkIfValidPlacement: aPoint.
	xTurn ifFalse: [self error: TerniLapilli cantPlayInAnotherPlayerTurn].

	xTurn := xTurn not.
	xPieces add: aPoint.
	self checkIfXWon.! !

!testRun: #TerniLapilliTest #test20PlayerXCantPlayDuringOTurn stamp: 'FG 10/31/2020 17:27:14'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 17:27:16'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 17:27:16'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 17:27:16'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 17:27:16'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 17:27:16'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 17:27:16'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 17:27:16'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 17:27:16'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 17:27:16'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 17:27:16'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 17:27:16'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 17:27:17'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 17:27:17'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 17:27:17'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 17:27:17'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:27:17'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:27:17'!
FAILURE!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 17:27:17'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 17:27:17'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPlayDuringOTurn stamp: 'FG 10/31/2020 17:27:17'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:27:17'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:27:44' prior: 50904571!
test17PlayerOCantPutAPieceInAInvalidPosition

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self should: [terniLapilli putXAt: 1@2. terniLapilli putOAt:0@4] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli invalidPositionErrorMessage ].
	self should: [terniLapilli putXAt: 1@3. terniLapilli putOAt: 2.5@3]
		 raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli invalidPositionErrorMessage].
	

	

	
	
	! !

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 17:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 17:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 17:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 17:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 17:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 17:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 17:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 17:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 17:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 17:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 17:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 17:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 17:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 17:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 17:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:27:47'!
FAILURE!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 17:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 17:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPlayDuringOTurn stamp: 'FG 10/31/2020 17:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:27:47'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:28:26' prior: 50905199!
test17PlayerOCantPutAPieceInAInvalidPosition

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self should: [terniLapilli putXAt: 1@2. terniLapilli putOAt:0@4] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli invalidPositionErrorMessage ].
	self should: [terniLapilli putOAt: 2.5@3]
		 raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli invalidPositionErrorMessage].
	

	

	
	
	! !

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:28:29'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 17:28:31'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 17:28:31'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 17:28:31'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 17:28:31'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 17:28:31'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 17:28:31'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 17:28:31'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 17:28:31'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 17:28:31'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 17:28:31'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 17:28:31'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 17:28:31'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 17:28:31'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 17:28:31'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 17:28:31'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:28:31'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:28:31'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 17:28:31'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 17:28:31'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPlayDuringOTurn stamp: 'FG 10/31/2020 17:28:31'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:29:06'!
test21PlayerOCantPlayDuringXTurn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self should: [terniLapilli putOAt: 1@2.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayInAnotherPlayerTurn].

	

	
	
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:29:30' prior: 50905063!
putOAt: aPoint 

	self checkIfValidPoint: aPoint.
	self checkIfValidPlacement: aPoint.
	xTurn ifTrue: [self error: TerniLapilli cantPlayInAnotherPlayerTurn].
	
	xTurn := xTurn not.
	oPieces add: aPoint.
	self checkIfOWon.! !

!testRun: #TerniLapilliTest #test21PlayerOCantPlayDuringXTurn stamp: 'FG 10/31/2020 17:29:36'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 17:29:40'!
ERROR!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPlayDuringOTurn stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPlayDuringXTurn stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 17:29:40'!
ERROR!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 17:29:40'!
ERROR!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 17:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 17:29:41'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 17:29:41'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 17:29:41'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 17:29:41'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:29:41'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:29:41'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 17:29:41'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 17:29:41'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPlayDuringOTurn stamp: 'FG 10/31/2020 17:29:41'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPlayDuringXTurn stamp: 'FG 10/31/2020 17:29:41'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 17:29:41'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:30:22' prior: 50902698!
test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 3@3.
	terniLapilli putOAt: 1@1.

	self assert: (terniLapilli ocupiedByO: 1@1) equals: true.
 ! !

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 17:30:24'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 17:30:24'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 17:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 17:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 17:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 17:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 17:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 17:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 17:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 17:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 17:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 17:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 17:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 17:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 17:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 17:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 17:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPlayDuringOTurn stamp: 'FG 10/31/2020 17:30:25'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPlayDuringXTurn stamp: 'FG 10/31/2020 17:30:25'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:32:08'!
test22PlayerXCantPutMoreThanThreePieces

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self should: [terniLapilli putOAt: 1@2.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayInAnotherPlayerTurn].

	

	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:32:32' prior: 50905293!
test17PlayerOCantPutAPieceInAInvalidPosition

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@2. 
	
	self should: [terniLapilli putOAt:0@4] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli invalidPositionErrorMessage ].
	self should: [terniLapilli putOAt: 2.5@3]
		 raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli invalidPositionErrorMessage].
	

	

	
	
	! !

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:32:35'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:32:35'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:32:57' prior: 50904716!
test18PlayerXCantPutAPieceInAPositionWithAnotherPiece

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@2. 
	terniLapilli putOAt:1@3. 
	
	self should: [terniLapilli putXAt: 1@3] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutPieceOverPieceErrorMessage].
	
	self should: [terniLapilli putXAt: 1@2]
		 raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutPieceOverPieceErrorMessage].
	

	

	
	
	! !

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 17:32:58'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:33:31' prior: 50905035!
test19PlayerOCantPutAPieceInAPositionWithAnotherPiece

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@2. 
	
	self should: [terniLapilli putOAt:1@2] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutPieceOverPieceErrorMessage].
	
	terniLapilli putOAt: 1@3. 
	terniLapilli putXAt: 1@1.
	
	self should: [ terniLapilli putOAt: 1@3]
		 raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutPieceOverPieceErrorMessage].
	

	

	
	
	! !

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 17:33:33'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 17:33:33'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:33:46' prior: 50905071!
test20PlayerXCantPlayDuringOTurn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@2. 
	
	self should: [terniLapilli putXAt:1@3] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayInAnotherPlayerTurn].

	

	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:36:45' prior: 50905651!
test22PlayerXCantPutMoreThanThreePieces

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 1@3.
	terniLapilli putXAt: 3@3.
	terniLapilli putOAt: 1@2.
	
	self should: [terniLapilli putXAt: 2@3.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayInAnotherPlayerTurn].

	

	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:36:56' prior: 50905755!
test22PlayerXCantPutMoreThanThreePieces

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 1@3.
	terniLapilli putXAt: 3@3.
	terniLapilli putOAt: 1@2.
	
	self should: [terniLapilli putXAt: 2@3.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutMorePieces].

	

	
	
	! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:37:22'!
cantPutMorePieces
	^ 'Error - Cant put more pieces in the board'! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:39:04' prior: 50905111!
putXAt: aPoint 

	self checkIfValidPoint: aPoint.
	self checkIfValidPlacement: aPoint.
	xTurn ifFalse: [self error: TerniLapilli cantPlayInAnotherPlayerTurn].
	(xPieces size < 3) ifFalse: [self error: TerniLapilli cantPutMorePieces]. 

	xTurn := xTurn not.
	xPieces add: aPoint.
	self checkIfXWon.! !

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 17:39:11'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 17:39:14'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 17:39:14'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 17:39:14'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 17:39:14'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 17:39:14'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 17:39:14'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 17:39:14'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 17:39:14'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 17:39:14'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 17:39:14'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 17:39:14'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 17:39:14'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 17:39:14'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 17:39:14'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 17:39:14'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:39:14'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:39:14'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 17:39:14'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 17:39:14'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPlayDuringOTurn stamp: 'FG 10/31/2020 17:39:14'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPlayDuringXTurn stamp: 'FG 10/31/2020 17:39:14'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 17:39:14'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:46:50'!
test22PlayerOCantPutMoreThanThreePieces

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 1@3.
	terniLapilli putXAt: 3@3.
	terniLapilli putOAt: 1@2.
	terniLapilli moveXFrom: 3@3 to: 2@3. 
	
	self should: [terniLapilli putOAt: 3@3.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutMorePieces].

	

	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:47:01'!
test23PlayerOCantPutMoreThanThreePieces

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 1@3.
	terniLapilli putXAt: 3@3.
	terniLapilli putOAt: 1@2.
	terniLapilli moveXFrom: 3@3 to: 2@3. 
	
	self should: [terniLapilli putOAt: 3@3.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutMorePieces].

	

	
	
	! !

!methodRemoval: TerniLapilliTest #test22PlayerOCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 17:47:03'!
test22PlayerOCantPutMoreThanThreePieces

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 1@3.
	terniLapilli putXAt: 3@3.
	terniLapilli putOAt: 1@2.
	terniLapilli moveXFrom: 3@3 to: 2@3. 
	
	self should: [terniLapilli putOAt: 3@3.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutMorePieces].

	

	
	
	!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:48:56' prior: 50905397!
putOAt: aPoint 

	self checkIfValidPoint: aPoint.
	self checkIfValidPlacement: aPoint.
	xTurn ifTrue: [self error: TerniLapilli cantPlayInAnotherPlayerTurn].
	(oPieces size < 3) ifFalse:[self error: TerniLapilli cantPutMorePieces].
	
	xTurn := xTurn not.
	oPieces add: aPoint.
	self checkIfOWon.! !

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 17:49:05'!
FAILURE!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 17:49:05'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:50:00' prior: 50905907!
test23PlayerOCantPutMoreThanThreePieces

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 1@3.
	terniLapilli putXAt: 3@3.
	terniLapilli putOAt: 1@2.
	terniLapilli moveXFrom: 3@3 to:2@3. 
	
	self should: [terniLapilli putOAt: 3@3.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutMorePieces].

	

	
	
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:52:31' prior: 50903217!
moveXFrom: originPoint to: destinationPoint
	xPieces remove: originPoint.
	xPieces add: destinationPoint.
	xTurn not.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:53:11' prior: 50903289!
moveOFrom: originPoint to: destinationPoint 
	oPieces remove: originPoint.
	oPieces add: destinationPoint.
	xTurn := xTurn not.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:53:20' prior: 50905981!
moveXFrom: originPoint to: destinationPoint
	xPieces remove: originPoint.
	xPieces add: destinationPoint.
	xTurn := xTurn not.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:55:43' prior: 50903116!
test07IsTurnOfOAfterXPlayed

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1.
	
	self assert: (terniLapilli isPlayingX) equals: false.
	self assert: (terniLapilli isPlayingO) equals: true.
	
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 3@3.
	terniLapilli moveXFrom: 2@1 to: 3@1. 
 
	self assert: (terniLapilli isPlayingX) equals: false.
	self assert: (terniLapilli isPlayingO) equals: true.
	! !

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 17:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 17:56:26'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 17:58:33' prior: 50903136!
test08IsTurnOfXAfterOPlayed

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 1@2.
	
	self assert: (terniLapilli isPlayingX) equals: true.
	self assert: (terniLapilli isPlayingO) equals: false.
	
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 3@3.
	terniLapilli moveXFrom: 2@1 to: 3@1. 
	terniLapilli moveOFrom: 2@2 to: 2@1.  

	self assert: (terniLapilli isPlayingX) equals: true.
	self assert: (terniLapilli isPlayingO) equals: false.
 ! !

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 17:58:35'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 17:58:39'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 17:58:39'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 17:58:39'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 17:58:39'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 17:58:39'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 17:58:39'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 17:58:39'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 17:58:39'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 17:58:39'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 17:58:39'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 17:58:39'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 17:58:39'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 17:58:39'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 17:58:39'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 17:58:39'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:58:39'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:58:39'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 17:58:39'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 17:58:39'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPlayDuringOTurn stamp: 'FG 10/31/2020 17:58:39'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPlayDuringXTurn stamp: 'FG 10/31/2020 17:58:39'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 17:58:39'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 17:58:39'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 17:58:40'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 17:58:40'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 17:58:40'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 17:58:40'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 17:58:40'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 17:58:40'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 17:58:40'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 17:58:40'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 17:58:40'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 17:58:40'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 17:58:40'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 17:58:40'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 17:58:40'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 17:58:40'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 17:58:40'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:58:40'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 17:58:40'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 17:58:40'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 17:58:40'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPlayDuringOTurn stamp: 'FG 10/31/2020 17:58:40'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPlayDuringXTurn stamp: 'FG 10/31/2020 17:58:40'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 17:58:40'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 17:58:40'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:01:37' prior: 50905742!
test20PlayerXCantPlayDuringOTurn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@2. 
	
	self should: [terniLapilli putXAt:1@3] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayInAnotherPlayerTurn].
		

	

	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:03:22' prior: 50906216!
test20PlayerXCantPlayDuringOTurn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1. 
	
	self should: [terniLapilli putXAt:1@3] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayInAnotherPlayerTurn].
		
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 3@3.
	terniLapilli moveXFrom: 2@1 to: 3@1. 
		
	self should: [terniLapilli moveXFrom: 3@1 to: 2@1] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayInAnotherPlayerTurn].
		

	
	
	! !

!testRun: #TerniLapilliTest #test20PlayerXCantPlayDuringOTurn stamp: 'FG 10/31/2020 18:03:25'!
FAILURE!

!testRun: #TerniLapilliTest #test20PlayerXCantPlayDuringOTurn stamp: 'FG 10/31/2020 18:03:25'!
FAILURE!

!testRun: #TerniLapilliTest #test20PlayerXCantPlayDuringOTurn stamp: 'FG 10/31/2020 18:03:37'!
FAILURE!

!testRun: #TerniLapilliTest #test20PlayerXCantPlayDuringOTurn stamp: 'FG 10/31/2020 18:03:37'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:05:38'!
test20PlayerXCantPutAPieceDuringOTurn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1. 
	
	self should: [terniLapilli putXAt:1@3] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayInAnotherPlayerTurn].
		


	
	
	! !

!methodRemoval: TerniLapilliTest #test20PlayerXCantPlayDuringOTurn stamp: 'FG 10/31/2020 18:05:42'!
test20PlayerXCantPlayDuringOTurn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1. 
	
	self should: [terniLapilli putXAt:1@3] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayInAnotherPlayerTurn].
		
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 3@3.
	terniLapilli moveXFrom: 2@1 to: 3@1. 
		
	self should: [terniLapilli moveXFrom: 3@1 to: 2@1] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayInAnotherPlayerTurn].
		

	
	
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:05:51'!
test21PlayerOCantPutDuringXTurn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self should: [terniLapilli putOAt: 1@2.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayInAnotherPlayerTurn].

	

	
	
	! !

!methodRemoval: TerniLapilliTest #test21PlayerOCantPlayDuringXTurn stamp: 'FG 10/31/2020 18:05:54'!
test21PlayerOCantPlayDuringXTurn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self should: [terniLapilli putOAt: 1@2.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayInAnotherPlayerTurn].

	

	
	
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:06:02'!
test21PlayerOCantPutAPieceDuringXTurn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self should: [terniLapilli putOAt: 1@2.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayInAnotherPlayerTurn].

	

	
	
	! !

!methodRemoval: TerniLapilliTest #test21PlayerOCantPutDuringXTurn stamp: 'FG 10/31/2020 18:06:05'!
test21PlayerOCantPutDuringXTurn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self should: [terniLapilli putOAt: 1@2.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayInAnotherPlayerTurn].

	

	
	
	!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 18:06:09'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 18:06:09'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 18:06:09'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 18:06:09'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 18:06:09'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 18:06:09'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 18:06:09'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 18:06:09'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 18:06:09'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 18:06:09'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 18:06:09'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 18:06:09'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 18:06:09'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 18:06:09'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 18:06:09'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 18:06:09'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 18:06:09'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 18:06:09'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 18:06:09'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPutAPieceDuringOTurn stamp: 'FG 10/31/2020 18:06:09'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPutAPieceDuringXTurn stamp: 'FG 10/31/2020 18:06:09'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 18:06:09'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 18:06:09'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:11:49'!
test23PlayerOCantPutAPieceWhenGameIsOver

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 1@2.
	terniLapilli putOAt: 3@3.
	terniLapilli putXAt: 1@3.
	
	self should: [terniLapilli putOAt: 2@3.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayWhenGameIsOver].

	

	
	
	! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:12:36'!
cantPlayWhenGameIsOver
	^ 'Error - You cant play when the game is already over'! !

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 18:12:50'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:13:09'!
test24PlayerOCantPutAPieceWhenGameIsOver

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 1@2.
	terniLapilli putOAt: 3@3.
	terniLapilli putXAt: 1@3.
	
	self should: [terniLapilli putOAt: 2@3.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayWhenGameIsOver].

	

	
	
	! !

!methodRemoval: TerniLapilliTest #test23PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 10/31/2020 18:13:11'!
test23PlayerOCantPutAPieceWhenGameIsOver

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 1@2.
	terniLapilli putOAt: 3@3.
	terniLapilli putXAt: 1@3.
	
	self should: [terniLapilli putOAt: 2@3.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayWhenGameIsOver].

	

	
	
	!

!testRun: #TerniLapilliTest #test24PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 10/31/2020 18:13:17'!
FAILURE!

!testRun: #TerniLapilliTest #test24PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 10/31/2020 18:13:17'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:14:04' prior: 50905943!
putOAt: aPoint 

	self checkIfValidPoint: aPoint.
	self checkIfValidPlacement: aPoint.
	xTurn ifTrue: [self error: TerniLapilli cantPlayInAnotherPlayerTurn].
	(oPieces size < 3) ifFalse:[self error: TerniLapilli cantPutMorePieces].
	gameEnded ifTrue:[self error: TerniLapilli cantPlayWhenGameIsOver]. 
	
	xTurn := xTurn not.
	oPieces add: aPoint.
	self checkIfOWon.! !

!testRun: #TerniLapilliTest #test24PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 10/31/2020 18:14:08'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 18:14:11'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 18:14:11'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 18:14:11'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 18:14:11'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 18:14:11'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 18:14:11'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 18:14:11'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 18:14:11'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 18:14:11'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 18:14:11'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 18:14:11'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 18:14:11'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 18:14:11'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 18:14:11'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 18:14:11'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 18:14:12'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 18:14:12'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 18:14:12'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 18:14:12'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPutAPieceDuringOTurn stamp: 'FG 10/31/2020 18:14:12'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPutAPieceDuringXTurn stamp: 'FG 10/31/2020 18:14:12'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 18:14:12'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 18:14:12'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 10/31/2020 18:14:12'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:23:56'!
test25PlayerXCantMoveAPieceThatHeDoesntOwn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@1.
	terniLapilli putXAt: 3@1.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	
	self should: [terniLapilli moveXFrom: 3@4 to: 2@2 ] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveInvalidPiece ].
	self should: [terniLapilli moveXFrom:  1.3@3 to: 2@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveInvalidPiece].
	self should: [terniLapilli moveXFrom:  3@3 to: 2@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveInvalidPiece].
	self should: [terniLapilli moveXFrom:  1@2 to: 2@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveInvalidPiece].

	

	
	
	! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:24:37'!
cantMoveInvalidPiece
	^'Error - Cant move invalid piece'.! !

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 18:24:51'!
FAILURE!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 18:24:51'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:26:35' prior: 50905996!
moveXFrom: originPoint to: destinationPoint

	(xPieces includes: originPoint) ifFalse:[self error: TerniLapilli cantMoveInvalidPiece].

	xPieces remove: originPoint.
	xPieces add: destinationPoint.
	xTurn := xTurn not.! !

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 18:26:48'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 18:26:53'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 18:26:53'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 18:26:53'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 18:26:53'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 18:26:53'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 18:26:53'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 18:26:53'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 18:26:53'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 18:26:53'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 18:26:53'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 18:26:53'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 18:26:53'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 18:26:53'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 18:26:53'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 18:26:53'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 18:26:53'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 18:26:53'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 18:26:53'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 18:26:53'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPutAPieceDuringOTurn stamp: 'FG 10/31/2020 18:26:53'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPutAPieceDuringXTurn stamp: 'FG 10/31/2020 18:26:53'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 18:26:53'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 18:26:53'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 10/31/2020 18:26:53'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 18:26:53'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:30:01'!
test25PlayerOCantMoveAPieceThatHeDoesntOwn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@1.
	terniLapilli putXAt: 3@1.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	terniLapilli moveXFrom: 3@1 to: 3@2.  
	
	self should: [terniLapilli moveOFrom: 3@4 to: 2@2 ] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveInvalidPiece ].
	self should: [terniLapilli moveOFrom:  1.3@3 to: 2@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveInvalidPiece].
	self should: [terniLapilli moveOFrom:  3@3 to: 2@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveInvalidPiece].
	self should: [terniLapilli moveOFrom:  1@1 to: 2@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveInvalidPiece].

	

	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:30:08'!
test26PlayerOCantMoveAPieceThatHeDoesntOwn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@1.
	terniLapilli putXAt: 3@1.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	terniLapilli moveXFrom: 3@1 to: 3@2.  
	
	self should: [terniLapilli moveOFrom: 3@4 to: 2@2 ] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveInvalidPiece ].
	self should: [terniLapilli moveOFrom:  1.3@3 to: 2@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveInvalidPiece].
	self should: [terniLapilli moveOFrom:  3@3 to: 2@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveInvalidPiece].
	self should: [terniLapilli moveOFrom:  1@1 to: 2@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveInvalidPiece].

	

	
	
	! !

!methodRemoval: TerniLapilliTest #test25PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 18:30:12'!
test25PlayerOCantMoveAPieceThatHeDoesntOwn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@1.
	terniLapilli putXAt: 3@1.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	terniLapilli moveXFrom: 3@1 to: 3@2.  
	
	self should: [terniLapilli moveOFrom: 3@4 to: 2@2 ] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveInvalidPiece ].
	self should: [terniLapilli moveOFrom:  1.3@3 to: 2@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveInvalidPiece].
	self should: [terniLapilli moveOFrom:  3@3 to: 2@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveInvalidPiece].
	self should: [terniLapilli moveOFrom:  1@1 to: 2@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveInvalidPiece].

	

	
	
	!

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 18:30:18'!
FAILURE!

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 18:30:18'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:30:57' prior: 50905988!
moveOFrom: originPoint to: destinationPoint 

	(oPieces includes: originPoint) ifFalse:[self error: TerniLapilli cantMoveInvalidPiece].

	oPieces remove: originPoint.
	oPieces add: destinationPoint.
	xTurn := xTurn not.! !

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 18:31:06'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 18:31:11'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 18:31:11'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 18:31:11'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 18:31:11'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 18:31:11'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 18:31:12'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 18:31:12'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 18:31:12'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 18:31:12'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 18:31:12'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 18:31:12'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 18:31:12'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 18:31:12'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 18:31:12'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 18:31:12'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 18:31:12'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 18:31:12'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 18:31:12'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 18:31:12'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPutAPieceDuringOTurn stamp: 'FG 10/31/2020 18:31:12'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPutAPieceDuringXTurn stamp: 'FG 10/31/2020 18:31:12'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 18:31:12'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 18:31:12'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 10/31/2020 18:31:12'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 18:31:12'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 18:31:12'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:34:25'!
test27PlayerXCantMoveAPieceToANonExistentPosition

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@1.
	terniLapilli putXAt: 3@1.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	
	self should: [terniLapilli moveOFrom: 1@1 to: 0@2 ] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveInvalidPiece ].
	self should: [terniLapilli moveOFrom:  1@1 to: 2.3@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveInvalidPiece].

	

	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:34:33'!
test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@1.
	terniLapilli putXAt: 3@1.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	
	self should: [terniLapilli moveOFrom: 1@1 to: 0@2 ] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveInvalidPiece ].
	self should: [terniLapilli moveOFrom:  1@1 to: 2.3@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveInvalidPiece].

	

	
	
	! !

!methodRemoval: TerniLapilliTest #test27PlayerXCantMoveAPieceToANonExistentPosition stamp: 'FG 10/31/2020 18:34:35'!
test27PlayerXCantMoveAPieceToANonExistentPosition

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@1.
	terniLapilli putXAt: 3@1.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	
	self should: [terniLapilli moveOFrom: 1@1 to: 0@2 ] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveInvalidPiece ].
	self should: [terniLapilli moveOFrom:  1@1 to: 2.3@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveInvalidPiece].

	

	
	
	!

!testRun: #TerniLapilliTest #test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 18:34:51'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 18:34:51'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:36:06' prior: 50906982!
test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@1.
	terniLapilli putXAt: 3@1.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	
	self should: [terniLapilli moveXFrom: 1@1 to: 0@2 ] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveToNonExistentPosition ].
	self should: [terniLapilli moveXFrom:  1@1 to: 2.3@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveToNonExistentPosition].

	

	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:36:12' prior: 50907036!
test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@1.
	terniLapilli putXAt: 3@1.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	
	self should: [terniLapilli moveXFrom: 1@1 to: 0@4 ] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveToNonExistentPosition ].
	self should: [terniLapilli moveXFrom:  1@1 to: 2.3@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveToNonExistentPosition].

	

	
	
	! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:36:50'!
cantMoveToNonExistentPosition
	^ 'Error - Cant move piece to non-existent position'! !

!testRun: #TerniLapilliTest #test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 18:36:56'!
FAILURE!

!testRun: #TerniLapilliTest #test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 18:36:57'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:37:31' prior: 50906643!
moveXFrom: originPoint to: destinationPoint

	(xPieces includes: originPoint) ifFalse:[self error: TerniLapilli cantMoveInvalidPiece].
	self checkIfValidPoint: destinationPoint.

	xPieces remove: originPoint.
	xPieces add: destinationPoint.
	xTurn := xTurn not.! !

!methodRemoval: TerniLapilli class #cantMoveToNonExistentPosition stamp: 'FG 10/31/2020 18:37:41'!
cantMoveToNonExistentPosition
	^ 'Error - Cant move piece to non-existent position'!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:38:19' prior: 50907060!
test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@1.
	terniLapilli putXAt: 3@1.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	
	self should: [terniLapilli moveXFrom: 1@1 to: 0@4 ] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli invalidPositionErrorMessage ].
	self should: [terniLapilli moveXFrom:  1@1 to: 2.3@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli invalidPositionErrorMessage ].

	

	
	
	! !

!testRun: #TerniLapilliTest #test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 18:38:23'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 18:38:40'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 18:38:40'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 18:38:40'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 18:38:40'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 18:38:40'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 18:38:40'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 18:38:40'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 18:38:40'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 18:38:40'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 18:38:40'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 18:38:40'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 18:38:40'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 18:38:40'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 18:38:40'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 18:38:41'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 18:38:41'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 18:38:41'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 18:38:41'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 18:38:41'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPutAPieceDuringOTurn stamp: 'FG 10/31/2020 18:38:41'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPutAPieceDuringXTurn stamp: 'FG 10/31/2020 18:38:41'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 18:38:41'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 18:38:41'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 10/31/2020 18:38:41'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 18:38:41'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 18:38:41'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 18:38:41'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:39:53'!
test28PlayerOCantMoveAPieceToANonExistentPositionInTheBoard

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@1.
	terniLapilli putXAt: 3@1.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	terniLapilli moveXFrom: 1@1 to: 2@2. 
	
	self should: [terniLapilli moveOFrom: 2@1 to: 0@4 ] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli invalidPositionErrorMessage ].
	self should: [terniLapilli moveOFrom:  2@1 to: 2.3@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli invalidPositionErrorMessage ].

	

	
	
	! !

!testRun: #TerniLapilliTest #test28PlayerOCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 18:39:56'!
FAILURE!

!testRun: #TerniLapilliTest #test28PlayerOCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 18:39:56'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:40:17' prior: 50906854!
moveOFrom: originPoint to: destinationPoint 

	(oPieces includes: originPoint) ifFalse:[self error: TerniLapilli cantMoveInvalidPiece].
	self checkIfValidPoint: destinationPoint.

	oPieces remove: originPoint.
	oPieces add: destinationPoint.
	xTurn := xTurn not.! !

!testRun: #TerniLapilliTest #test28PlayerOCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 18:40:22'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 18:40:24'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 18:40:24'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 18:40:24'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 18:40:24'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 18:40:24'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 18:40:24'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 18:40:24'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 18:40:24'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 18:40:24'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 18:40:24'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 18:40:24'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 18:40:24'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 18:40:24'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 18:40:25'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 18:40:25'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 18:40:25'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 18:40:25'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 18:40:25'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 18:40:25'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPutAPieceDuringOTurn stamp: 'FG 10/31/2020 18:40:25'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPutAPieceDuringXTurn stamp: 'FG 10/31/2020 18:40:25'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 18:40:25'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 18:40:25'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 10/31/2020 18:40:25'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 18:40:25'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 18:40:25'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 18:40:25'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 18:40:25'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:44:22'!
test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 2@2.
	terniLapilli putOAt: 2@1.
	terniLapilli putXAt: 3@1.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	
	self should: [terniLapilli moveXFrom: 2@2 to: 2@1 ] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli invalidPositionErrorMessage ].
	self should: [terniLapilli moveXFrom:  2@2 to: 3@1] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli invalidPositionErrorMessage ].

	

	
	
	! !

!testRun: #TerniLapilliTest #test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 18:44:30'!
ERROR!

!testRun: #TerniLapilliTest #test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 18:44:30'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:45:14' prior: 50907387!
test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 2@2.
	terniLapilli putOAt: 2@1.
	terniLapilli putXAt: 3@2.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	
	self should: [terniLapilli moveXFrom: 2@2 to: 2@1 ] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli invalidPositionErrorMessage ].
	self should: [terniLapilli moveXFrom:  2@2 to: 3@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli invalidPositionErrorMessage ].

	

	
	
	! !

!testRun: #TerniLapilliTest #test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 18:45:16'!
FAILURE!

!testRun: #TerniLapilliTest #test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 18:45:16'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:45:51' prior: 50907097!
moveXFrom: originPoint to: destinationPoint

	(xPieces includes: originPoint) ifFalse:[self error: TerniLapilli cantMoveInvalidPiece].
	self checkIfValidPoint: destinationPoint.
	self checkIfValidPlacement: destinationPoint.

	xPieces remove: originPoint.
	xPieces add: destinationPoint.
	xTurn := xTurn not.! !

!testRun: #TerniLapilliTest #test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 18:45:59'!
FAILURE!

!testRun: #TerniLapilliTest #test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 18:45:59'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:46:49' prior: 50907419!
test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 2@2.
	terniLapilli putOAt: 2@1.
	terniLapilli putXAt: 3@2.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	
	self should: [terniLapilli moveXFrom: 2@2 to: 2@1 ] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutPieceOverPieceErrorMessage ].
	self should: [terniLapilli moveXFrom:  2@2 to: 3@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutPieceOverPieceErrorMessage].

	

	
	
	! !

!testRun: #TerniLapilliTest #test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 18:46:51'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 18:46:54'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 18:46:54'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 18:46:54'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 18:46:54'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 18:46:54'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 18:46:54'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 18:46:54'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 18:46:54'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 18:46:54'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 18:46:54'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 18:46:54'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 18:46:54'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 18:46:54'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 18:46:54'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 18:46:54'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 18:46:54'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 18:46:54'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 18:46:54'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 18:46:54'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPutAPieceDuringOTurn stamp: 'FG 10/31/2020 18:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPutAPieceDuringXTurn stamp: 'FG 10/31/2020 18:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 18:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 18:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 10/31/2020 18:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 18:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 18:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 18:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 18:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 18:46:55'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:49:29'!
test29PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 3@2.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	terniLapilli moveXFrom: 2@1 to: 1@1. 
	
	self should: [terniLapilli moveXFrom: 2@2 to: 2@1 ] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutPieceOverPieceErrorMessage ].
	self should: [terniLapilli moveXFrom:  2@2 to: 1@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutPieceOverPieceErrorMessage].

	

	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:49:35'!
test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 3@2.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	terniLapilli moveXFrom: 2@1 to: 1@1. 
	
	self should: [terniLapilli moveXFrom: 2@2 to: 2@1 ] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutPieceOverPieceErrorMessage ].
	self should: [terniLapilli moveXFrom:  2@2 to: 1@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutPieceOverPieceErrorMessage].

	

	
	
	! !

!methodRemoval: TerniLapilliTest #test29PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 18:49:38'!
test29PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 3@2.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	terniLapilli moveXFrom: 2@1 to: 1@1. 
	
	self should: [terniLapilli moveXFrom: 2@2 to: 2@1 ] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutPieceOverPieceErrorMessage ].
	self should: [terniLapilli moveXFrom:  2@2 to: 1@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutPieceOverPieceErrorMessage].

	

	
	
	!

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 18:49:41'!
FAILURE!

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 18:49:41'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:49:55' prior: 50907271!
moveOFrom: originPoint to: destinationPoint 

	(oPieces includes: originPoint) ifFalse:[self error: TerniLapilli cantMoveInvalidPiece].
	self checkIfValidPoint: destinationPoint.
	self checkIfValidPlacement: destinationPoint.

	oPieces remove: originPoint.
	oPieces add: destinationPoint.
	xTurn := xTurn not.! !

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 18:50:00'!
FAILURE!

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 18:50:00'!
FAILURE!

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 18:50:14'!
FAILURE!

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 18:50:14'!
FAILURE!

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 18:50:25'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:50:48' prior: 50907630!
test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 3@2.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	terniLapilli moveXFrom: 2@1 to: 1@1. 
	
	self should: [terniLapilli moveOFrom: 2@2 to: 2@1 ] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutPieceOverPieceErrorMessage ].
	self should: [terniLapilli moveOFrom:  2@2 to: 1@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutPieceOverPieceErrorMessage].

	

	
	
	! !

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 18:50:50'!
FAILURE!

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 18:50:50'!
FAILURE!

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 18:51:01'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:51:41' prior: 50907723!
test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 3@2.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	terniLapilli moveXFrom: 2@1 to: 1@1. 
	
	self should: [terniLapilli moveOFrom: 2@2 to: 1@1 ] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutPieceOverPieceErrorMessage ].
	self should: [terniLapilli moveOFrom:  2@2 to: 1@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutPieceOverPieceErrorMessage].

	

	
	
	! !

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 18:51:43'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 18:51:46'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 18:51:46'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 18:51:46'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 18:51:46'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 18:51:46'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 18:51:46'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 18:51:46'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 18:51:46'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 18:51:46'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 18:51:46'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 18:51:46'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 18:51:46'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 18:51:46'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 18:51:46'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 18:51:46'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 18:51:46'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 18:51:46'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 18:51:46'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 18:51:46'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPutAPieceDuringOTurn stamp: 'FG 10/31/2020 18:51:46'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPutAPieceDuringXTurn stamp: 'FG 10/31/2020 18:51:46'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 18:51:46'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 18:51:46'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 10/31/2020 18:51:46'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 18:51:46'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 18:51:46'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 18:51:46'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 18:51:46'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 18:51:46'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 18:51:46'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:55:36'!
test31PlayerXCantMoveDuringPlayerOTurn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 3@2.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	
	self should: [terniLapilli moveXFrom: 2@1 to: 1@1 ] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayInAnotherPlayerTurn ].

	

	
	
	! !

!testRun: #TerniLapilliTest #test31PlayerXCantMoveDuringPlayerOTurn stamp: 'FG 10/31/2020 18:55:41'!
FAILURE!

!testRun: #TerniLapilliTest #test31PlayerXCantMoveDuringPlayerOTurn stamp: 'FG 10/31/2020 18:55:41'!
FAILURE!

!testRun: #TerniLapilliTest #test31PlayerXCantMoveDuringPlayerOTurn stamp: 'FG 10/31/2020 18:55:41'!
FAILURE!

!testRun: #TerniLapilliTest #test31PlayerXCantMoveDuringPlayerOTurn stamp: 'FG 10/31/2020 18:55:41'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:56:01' prior: 50907451!
moveXFrom: originPoint to: destinationPoint

	(xPieces includes: originPoint) ifFalse:[self error: TerniLapilli cantMoveInvalidPiece].
	self checkIfValidPoint: destinationPoint.
	self checkIfValidPlacement: destinationPoint.
	xTurn ifFalse: [self error: TerniLapilli cantPlayInAnotherPlayerTurn].

	xPieces remove: originPoint.
	xPieces add: destinationPoint.
	xTurn := xTurn not.! !

!testRun: #TerniLapilliTest #test31PlayerXCantMoveDuringPlayerOTurn stamp: 'FG 10/31/2020 18:56:10'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 18:56:12'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 18:56:12'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 18:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 18:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 18:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 18:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 18:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 18:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 18:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 18:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 18:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 18:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 18:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 18:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 18:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 18:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 18:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 18:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 18:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPutAPieceDuringOTurn stamp: 'FG 10/31/2020 18:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPutAPieceDuringXTurn stamp: 'FG 10/31/2020 18:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 18:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 18:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 10/31/2020 18:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 18:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 18:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 18:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 18:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 18:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 18:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test31PlayerXCantMoveDuringPlayerOTurn stamp: 'FG 10/31/2020 18:56:13'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:57:29'!
test32PlayerOCantMoveDuringPlayerXTurn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 3@2.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	
	self should: [terniLapilli moveOFrom: 2@2 to: 1@1] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayInAnotherPlayerTurn ].

	
	! !

!testRun: #TerniLapilliTest #test32PlayerOCantMoveDuringPlayerXTurn stamp: 'FG 10/31/2020 18:57:32'!
FAILURE!

!testRun: #TerniLapilliTest #test32PlayerOCantMoveDuringPlayerXTurn stamp: 'FG 10/31/2020 18:57:32'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 18:57:56' prior: 50907689!
moveOFrom: originPoint to: destinationPoint 

	(oPieces includes: originPoint) ifFalse:[self error: TerniLapilli cantMoveInvalidPiece].
	self checkIfValidPoint: destinationPoint.
	self checkIfValidPlacement: destinationPoint.
	xTurn ifTrue: [self error: TerniLapilli cantPlayInAnotherPlayerTurn].

	oPieces remove: originPoint.
	oPieces add: destinationPoint.
	xTurn := xTurn not.! !

!testRun: #TerniLapilliTest #test32PlayerOCantMoveDuringPlayerXTurn stamp: 'FG 10/31/2020 18:57:59'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 18:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 18:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 18:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 18:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 18:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 18:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 18:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 18:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 18:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 18:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 18:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 18:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 18:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 18:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 18:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 18:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 18:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 18:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 18:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPutAPieceDuringOTurn stamp: 'FG 10/31/2020 18:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPutAPieceDuringXTurn stamp: 'FG 10/31/2020 18:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 18:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 18:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 10/31/2020 18:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 18:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 18:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 18:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 18:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 18:58:01'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test31PlayerXCantMoveDuringPlayerOTurn stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test32PlayerOCantMoveDuringPlayerXTurn stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPutAPieceDuringOTurn stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPutAPieceDuringXTurn stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test31PlayerXCantMoveDuringPlayerOTurn stamp: 'FG 10/31/2020 18:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test32PlayerOCantMoveDuringPlayerXTurn stamp: 'FG 10/31/2020 18:58:02'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 19:07:22'!
test32PlayerXMustMoveThroughBoardLines

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 3@2.
	terniLapilli putOAt: 1@1.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	
	self should: [terniLapilli moveXFrom: 2@1 to: 1@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveThroughBoardLines ].

	
	! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 19:07:50'!
cantMoveThroughBoardLines
	 ^ 'Error - You must move using the board lines'.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 19:29:34'!
moveFrom: originPosition throghLinesTo: destinationPosition.

	((originPosition fourNeighbors includes: destinationPosition) not and: [((originPosition = 2@2) or: [destinationPosition  = 2@2]) not]) 
		ifTrue: [self error: 	TerniLapilli cantMoveThroughBoardLines].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 19:30:01' prior: 50907929!
moveXFrom: originPoint to: destinationPoint

	(xPieces includes: originPoint) ifFalse:[self error: TerniLapilli cantMoveInvalidPiece].
	self checkIfValidPoint: destinationPoint.
	self checkIfValidPlacement: destinationPoint.
	xTurn ifFalse: [self error: TerniLapilli cantPlayInAnotherPlayerTurn].
	self moveFrom: originPoint throghLinesTo: destinationPoint.

	xPieces remove: originPoint.
	xPieces add: destinationPoint.
	xTurn := xTurn not.! !

!testRun: #TerniLapilliTest #test32PlayerXMustMoveThroughBoardLines stamp: 'FG 10/31/2020 19:30:15'!
FAILURE!

!testRun: #TerniLapilliTest #test32PlayerXMustMoveThroughBoardLines stamp: 'FG 10/31/2020 19:30:15'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 19:30:44' prior: 50908332!
test32PlayerXMustMoveThroughBoardLines

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 3@2.
	terniLapilli putOAt: 1@1.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	
	terniLapilli moveXFrom: 2@1 to: 1@2.
	
	self should: [terniLapilli moveXFrom: 2@1 to: 1@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveThroughBoardLines ].

	
	! !

!testRun: #TerniLapilliTest #test32PlayerXMustMoveThroughBoardLines stamp: 'FG 10/31/2020 19:31:10'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 19:32:09' prior: 50908355!
moveFrom: originPosition throghLinesTo: destinationPosition.

	((originPosition fourNeighbors includes: destinationPosition) not and: [((originPosition = (2@2)) or: [destinationPosition  = (2@2)]) not]) 
		ifTrue: [self error: 	TerniLapilli cantMoveThroughBoardLines].! !

!testRun: #TerniLapilliTest #test32PlayerXMustMoveThroughBoardLines stamp: 'FG 10/31/2020 19:32:12'!
ERROR!

!testRun: #TerniLapilliTest #test32PlayerXMustMoveThroughBoardLines stamp: 'FG 10/31/2020 19:32:12'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 19:32:19' prior: 50908391!
test32PlayerXMustMoveThroughBoardLines

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 3@2.
	terniLapilli putOAt: 1@1.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	
	self should: [terniLapilli moveXFrom: 2@1 to: 1@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveThroughBoardLines ].

	
	! !

!testRun: #TerniLapilliTest #test32PlayerXMustMoveThroughBoardLines stamp: 'FG 10/31/2020 19:32:21'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 19:33:18' prior: 50908432!
test32PlayerXMustMoveThroughBoardLines

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 3@2.
	terniLapilli putOAt: 1@1.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	
	self should: [terniLapilli moveXFrom: 2@1 to: 1@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveThroughBoardLines ].

	
	! !

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPutAPieceDuringOTurn stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPutAPieceDuringXTurn stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test31PlayerXCantMoveDuringPlayerOTurn stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test32PlayerOCantMoveDuringPlayerXTurn stamp: 'FG 10/31/2020 19:33:21'!
PASSED!

!testRun: #TerniLapilliTest #test32PlayerXMustMoveThroughBoardLines stamp: 'FG 10/31/2020 19:33:21'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 19:33:47'!
test33PlayerXMustMoveThroughBoardLines

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 3@2.
	terniLapilli putOAt: 1@1.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	
	self should: [terniLapilli moveXFrom: 2@1 to: 1@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveThroughBoardLines ].

	
	! !

!methodRemoval: TerniLapilliTest #test32PlayerXMustMoveThroughBoardLines stamp: 'FG 10/31/2020 19:33:50'!
test32PlayerXMustMoveThroughBoardLines

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 3@2.
	terniLapilli putOAt: 1@1.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	
	self should: [terniLapilli moveXFrom: 2@1 to: 1@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveThroughBoardLines ].

	
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 19:35:30'!
test33PlayerOMustMoveThroughBoardLines

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 3@2.
	terniLapilli putOAt: 1@1.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	terniLapilli moveXFrom: 3@2 to: 3@1.
	
	self should: [terniLapilli moveOFrom: 2@3 to: 1@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveThroughBoardLines ].

	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 19:35:36'!
test34PlayerOMustMoveThroughBoardLines

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 3@2.
	terniLapilli putOAt: 1@1.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	terniLapilli moveXFrom: 3@2 to: 3@1.
	
	self should: [terniLapilli moveOFrom: 2@3 to: 1@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveThroughBoardLines ].

	
	! !

!methodRemoval: TerniLapilliTest #test33PlayerOMustMoveThroughBoardLines stamp: 'FG 10/31/2020 19:35:39'!
test33PlayerOMustMoveThroughBoardLines

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 3@2.
	terniLapilli putOAt: 1@1.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	terniLapilli moveXFrom: 3@2 to: 3@1.
	
	self should: [terniLapilli moveOFrom: 2@3 to: 1@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveThroughBoardLines ].

	
	!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 19:35:58' prior: 50908083!
moveOFrom: originPoint to: destinationPoint 

	(oPieces includes: originPoint) ifFalse:[self error: TerniLapilli cantMoveInvalidPiece].
	self checkIfValidPoint: destinationPoint.
	self checkIfValidPlacement: destinationPoint.
	xTurn ifTrue: [self error: TerniLapilli cantPlayInAnotherPlayerTurn].
	self moveFrom: originPoint throghLinesTo: destinationPoint.

	oPieces remove: originPoint.
	oPieces add: destinationPoint.
	xTurn := xTurn not.! !

!testRun: #TerniLapilliTest #test34PlayerOMustMoveThroughBoardLines stamp: 'FG 10/31/2020 19:36:01'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPutAPieceDuringOTurn stamp: 'FG 10/31/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPutAPieceDuringXTurn stamp: 'FG 10/31/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 10/31/2020 19:36:05'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 19:36:05'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 19:36:05'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 19:36:05'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 19:36:05'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 19:36:05'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 19:36:05'!
PASSED!

!testRun: #TerniLapilliTest #test31PlayerXCantMoveDuringPlayerOTurn stamp: 'FG 10/31/2020 19:36:05'!
PASSED!

!testRun: #TerniLapilliTest #test32PlayerOCantMoveDuringPlayerXTurn stamp: 'FG 10/31/2020 19:36:05'!
PASSED!

!testRun: #TerniLapilliTest #test33PlayerXMustMoveThroughBoardLines stamp: 'FG 10/31/2020 19:36:05'!
PASSED!

!testRun: #TerniLapilliTest #test34PlayerOMustMoveThroughBoardLines stamp: 'FG 10/31/2020 19:36:05'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 19:38:33'!
test35PlayerXCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 1@1.
	terniLapilli  putOAt: 2@2.
	
	self should: [terniLapilli moveXFrom: 1@1 to: 1@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveBeforeThreePieces].

	
	! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 19:39:08'!
cantMoveBeforeThreePieces
	^ 'Error - Cant move pieces before having three pieces on the board'! !

!testRun: #TerniLapilliTest #test35PlayerXCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 10/31/2020 19:39:18'!
FAILURE!

!testRun: #TerniLapilliTest #test35PlayerXCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 10/31/2020 19:39:18'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 19:41:22' prior: 50908367!
moveXFrom: originPoint to: destinationPoint

	(xPieces includes: originPoint) ifFalse:[self error: TerniLapilli cantMoveInvalidPiece].
	self checkIfValidPoint: destinationPoint.
	self checkIfValidPlacement: destinationPoint.
	xTurn ifFalse: [self error: TerniLapilli cantPlayInAnotherPlayerTurn].
	(xPieces size < 3) ifTrue:[self error: TerniLapilli cantMoveBeforeThreePieces].
	self moveFrom: originPoint throghLinesTo: destinationPoint.

	xPieces remove: originPoint.
	xPieces add: destinationPoint.
	xTurn := xTurn not.! !

!testRun: #TerniLapilliTest #test35PlayerXCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 10/31/2020 19:41:41'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 19:41:43'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 19:41:43'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 19:41:43'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 19:41:43'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 19:41:43'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 19:41:43'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 19:41:43'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 19:41:43'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 19:41:43'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 19:41:43'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 19:41:43'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 19:41:43'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 19:41:43'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 19:41:43'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 19:41:43'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 19:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 19:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 19:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 19:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPutAPieceDuringOTurn stamp: 'FG 10/31/2020 19:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPutAPieceDuringXTurn stamp: 'FG 10/31/2020 19:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 19:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 19:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 10/31/2020 19:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 19:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 19:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 19:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 19:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 19:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 19:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test31PlayerXCantMoveDuringPlayerOTurn stamp: 'FG 10/31/2020 19:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test32PlayerOCantMoveDuringPlayerXTurn stamp: 'FG 10/31/2020 19:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test33PlayerXMustMoveThroughBoardLines stamp: 'FG 10/31/2020 19:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test34PlayerOMustMoveThroughBoardLines stamp: 'FG 10/31/2020 19:41:44'!
PASSED!

!testRun: #TerniLapilliTest #test35PlayerXCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 10/31/2020 19:41:44'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 19:42:11'!
test35PlayerOCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 1@1.
	terniLapilli  putOAt: 2@2.
	terniLapilli putXAt: 3@3.
	
	self should: [terniLapilli moveXFrom: 2@2 to: 1@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveBeforeThreePieces].

	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 19:42:19'!
test36PlayerOCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 1@1.
	terniLapilli  putOAt: 2@2.
	terniLapilli putXAt: 3@3.
	
	self should: [terniLapilli moveXFrom: 2@2 to: 1@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveBeforeThreePieces].

	
	! !

!methodRemoval: TerniLapilliTest #test35PlayerOCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 10/31/2020 19:42:21'!
test35PlayerOCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 1@1.
	terniLapilli  putOAt: 2@2.
	terniLapilli putXAt: 3@3.
	
	self should: [terniLapilli moveXFrom: 2@2 to: 1@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveBeforeThreePieces].

	
	!

!testRun: #TerniLapilliTest #test36PlayerOCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 10/31/2020 19:42:25'!
FAILURE!

!testRun: #TerniLapilliTest #test36PlayerOCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 10/31/2020 19:42:25'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 19:42:43' prior: 50908678!
moveOFrom: originPoint to: destinationPoint 

	(oPieces includes: originPoint) ifFalse:[self error: TerniLapilli cantMoveInvalidPiece].
	self checkIfValidPoint: destinationPoint.
	self checkIfValidPlacement: destinationPoint.
	xTurn ifTrue: [self error: TerniLapilli cantPlayInAnotherPlayerTurn].
	(xPieces size < 3) ifTrue:[self error: TerniLapilli cantMoveBeforeThreePieces].
	self moveFrom: originPoint throghLinesTo: destinationPoint.

	oPieces remove: originPoint.
	oPieces add: destinationPoint.
	xTurn := xTurn not.! !

!testRun: #TerniLapilliTest #test36PlayerOCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 10/31/2020 19:42:46'!
FAILURE!

!testRun: #TerniLapilliTest #test36PlayerOCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 10/31/2020 19:42:46'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 19:43:03' prior: 50909015!
test36PlayerOCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 1@1.
	terniLapilli  putOAt: 2@2.
	terniLapilli putXAt: 3@3.
	
	self should: [terniLapilli moveOFrom: 2@2 to: 1@2] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveBeforeThreePieces].

	
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 19:43:15' prior: 50909056!
moveOFrom: originPoint to: destinationPoint 

	(oPieces includes: originPoint) ifFalse:[self error: TerniLapilli cantMoveInvalidPiece].
	self checkIfValidPoint: destinationPoint.
	self checkIfValidPlacement: destinationPoint.
	xTurn ifTrue: [self error: TerniLapilli cantPlayInAnotherPlayerTurn].
	(oPieces size < 3) ifTrue:[self error: TerniLapilli cantMoveBeforeThreePieces].
	self moveFrom: originPoint throghLinesTo: destinationPoint.

	oPieces remove: originPoint.
	oPieces add: destinationPoint.
	xTurn := xTurn not.! !

!testRun: #TerniLapilliTest #test36PlayerOCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 10/31/2020 19:43:17'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 19:43:20'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 19:43:20'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 19:43:20'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 19:43:20'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 19:43:20'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 19:43:20'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 19:43:20'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 19:43:20'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 19:43:20'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 19:43:20'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 19:43:20'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 19:43:20'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 19:43:20'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 19:43:20'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 19:43:20'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 19:43:20'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 19:43:20'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 19:43:20'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 19:43:20'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPutAPieceDuringOTurn stamp: 'FG 10/31/2020 19:43:20'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPutAPieceDuringXTurn stamp: 'FG 10/31/2020 19:43:20'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 19:43:20'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 19:43:20'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 10/31/2020 19:43:20'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 19:43:20'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 19:43:20'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 19:43:21'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 19:43:21'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 19:43:21'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 19:43:21'!
PASSED!

!testRun: #TerniLapilliTest #test31PlayerXCantMoveDuringPlayerOTurn stamp: 'FG 10/31/2020 19:43:21'!
PASSED!

!testRun: #TerniLapilliTest #test32PlayerOCantMoveDuringPlayerXTurn stamp: 'FG 10/31/2020 19:43:21'!
PASSED!

!testRun: #TerniLapilliTest #test33PlayerXMustMoveThroughBoardLines stamp: 'FG 10/31/2020 19:43:21'!
PASSED!

!testRun: #TerniLapilliTest #test34PlayerOMustMoveThroughBoardLines stamp: 'FG 10/31/2020 19:43:21'!
PASSED!

!testRun: #TerniLapilliTest #test35PlayerXCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 10/31/2020 19:43:21'!
PASSED!

!testRun: #TerniLapilliTest #test36PlayerOCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 10/31/2020 19:43:21'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 19:51:20'!
test24PlayerXCantMoveAPieceWhenGameIsOver

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 3@2.
	terniLapilli putXAt: 1@2.
	terniLapilli putOAt: 3@3.
	terniLapilli putXAt: 2@3.
	terniLapilli putOAt: 3@1.
	
	self should: [terniLapilli moveXFrom: 1@1 to: 2@2 ] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayWhenGameIsOver].

	

	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 19:51:30'!
test37PlayerXCantMoveAPieceWhenGameIsOver

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 3@2.
	terniLapilli putXAt: 1@2.
	terniLapilli putOAt: 3@3.
	terniLapilli putXAt: 2@3.
	terniLapilli putOAt: 3@1.
	
	self should: [terniLapilli moveXFrom: 1@1 to: 2@2 ] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayWhenGameIsOver].

	

	
	
	! !

!methodRemoval: TerniLapilliTest #test24PlayerXCantMoveAPieceWhenGameIsOver stamp: 'FG 10/31/2020 19:51:41'!
test24PlayerXCantMoveAPieceWhenGameIsOver

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 3@2.
	terniLapilli putXAt: 1@2.
	terniLapilli putOAt: 3@3.
	terniLapilli putXAt: 2@3.
	terniLapilli putOAt: 3@1.
	
	self should: [terniLapilli moveXFrom: 1@1 to: 2@2 ] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayWhenGameIsOver].

	

	
	
	!

!testRun: #TerniLapilliTest #test37PlayerXCantMoveAPieceWhenGameIsOver stamp: 'FG 10/31/2020 19:51:46'!
FAILURE!

!testRun: #TerniLapilliTest #test37PlayerXCantMoveAPieceWhenGameIsOver stamp: 'FG 10/31/2020 19:51:46'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 19:53:19' prior: 50908850!
moveXFrom: originPoint to: destinationPoint

	(xPieces includes: originPoint) ifFalse:[self error: TerniLapilli cantMoveInvalidPiece].
	self checkIfValidPoint: destinationPoint.
	self checkIfValidPlacement: destinationPoint.
	xTurn ifFalse: [self error: TerniLapilli cantPlayInAnotherPlayerTurn].
	(xPieces size < 3) ifTrue:[self error: TerniLapilli cantMoveBeforeThreePieces].
	self moveFrom: originPoint throghLinesTo: destinationPoint.
	gameEnded ifTrue:[self error: TerniLapilli cantPlayWhenGameIsOver]. 

	xPieces remove: originPoint.
	xPieces add: destinationPoint.
	xTurn := xTurn not.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 19:53:32' prior: 50909101!
moveOFrom: originPoint to: destinationPoint 

	(oPieces includes: originPoint) ifFalse:[self error: TerniLapilli cantMoveInvalidPiece].
	self checkIfValidPoint: destinationPoint.
	self checkIfValidPlacement: destinationPoint.
	xTurn ifTrue: [self error: TerniLapilli cantPlayInAnotherPlayerTurn].
	(oPieces size < 3) ifTrue:[self error: TerniLapilli cantMoveBeforeThreePieces].
	self moveFrom: originPoint throghLinesTo: destinationPoint.
	gameEnded ifTrue:[self error: TerniLapilli cantPlayWhenGameIsOver]. 

	oPieces remove: originPoint.
	oPieces add: destinationPoint.
	xTurn := xTurn not.! !

!testRun: #TerniLapilliTest #test37PlayerXCantMoveAPieceWhenGameIsOver stamp: 'FG 10/31/2020 19:53:39'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 19:53:41'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 19:53:41'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 19:53:41'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 19:53:41'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 19:53:41'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 19:53:41'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 19:53:41'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 19:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 19:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 19:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 19:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 19:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 19:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 19:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 19:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 19:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 19:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 19:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 19:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPutAPieceDuringOTurn stamp: 'FG 10/31/2020 19:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPutAPieceDuringXTurn stamp: 'FG 10/31/2020 19:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 19:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 19:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 10/31/2020 19:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 19:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 19:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 19:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 19:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 19:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 19:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test31PlayerXCantMoveDuringPlayerOTurn stamp: 'FG 10/31/2020 19:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test32PlayerOCantMoveDuringPlayerXTurn stamp: 'FG 10/31/2020 19:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test33PlayerXMustMoveThroughBoardLines stamp: 'FG 10/31/2020 19:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test34PlayerOMustMoveThroughBoardLines stamp: 'FG 10/31/2020 19:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test35PlayerXCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 10/31/2020 19:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test36PlayerOCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 10/31/2020 19:53:42'!
PASSED!

!testRun: #TerniLapilliTest #test37PlayerXCantMoveAPieceWhenGameIsOver stamp: 'FG 10/31/2020 19:53:42'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 19:55:51'!
test37PlayerOCantMoveAPieceWhenGameIsOver

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 3@2.
	terniLapilli putXAt: 2@2.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 2@3.
	terniLapilli putOAt: 3@1.
	terniLapilli moveXFrom: 2@3 to: 3@3.
	
	self should: [terniLapilli moveOFrom: 1@2  to:1@3] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayWhenGameIsOver].

	

	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 19:55:56'!
test38PlayerOCantMoveAPieceWhenGameIsOver

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 3@2.
	terniLapilli putXAt: 2@2.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 2@3.
	terniLapilli putOAt: 3@1.
	terniLapilli moveXFrom: 2@3 to: 3@3.
	
	self should: [terniLapilli moveOFrom: 1@2  to:1@3] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayWhenGameIsOver].

	

	
	
	! !

!methodRemoval: TerniLapilliTest #test37PlayerOCantMoveAPieceWhenGameIsOver stamp: 'FG 10/31/2020 19:55:58'!
test37PlayerOCantMoveAPieceWhenGameIsOver

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 3@2.
	terniLapilli putXAt: 2@2.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 2@3.
	terniLapilli putOAt: 3@1.
	terniLapilli moveXFrom: 2@3 to: 3@3.
	
	self should: [terniLapilli moveOFrom: 1@2  to:1@3] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayWhenGameIsOver].

	

	
	
	!

!testRun: #TerniLapilliTest #test38PlayerOCantMoveAPieceWhenGameIsOver stamp: 'FG 10/31/2020 19:56:00'!
FAILURE!

!testRun: #TerniLapilliTest #test38PlayerOCantMoveAPieceWhenGameIsOver stamp: 'FG 10/31/2020 19:56:00'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 19:57:28' prior: 50909315!
moveXFrom: originPoint to: destinationPoint

	(xPieces includes: originPoint) ifFalse:[self error: TerniLapilli cantMoveInvalidPiece].
	self checkIfValidPoint: destinationPoint.
	self checkIfValidPlacement: destinationPoint.
	xTurn ifFalse: [self error: TerniLapilli cantPlayInAnotherPlayerTurn].
	(xPieces size < 3) ifTrue:[self error: TerniLapilli cantMoveBeforeThreePieces].
	self moveFrom: originPoint throghLinesTo: destinationPoint.
	gameEnded ifTrue:[self error: TerniLapilli cantPlayWhenGameIsOver]. 

	xPieces remove: originPoint.
	xPieces add: destinationPoint.
	xTurn := xTurn not.
	self checkIfXWon.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 10/31/2020 19:57:35' prior: 50909337!
moveOFrom: originPoint to: destinationPoint 

	(oPieces includes: originPoint) ifFalse:[self error: TerniLapilli cantMoveInvalidPiece].
	self checkIfValidPoint: destinationPoint.
	self checkIfValidPlacement: destinationPoint.
	xTurn ifTrue: [self error: TerniLapilli cantPlayInAnotherPlayerTurn].
	(oPieces size < 3) ifTrue:[self error: TerniLapilli cantMoveBeforeThreePieces].
	self moveFrom: originPoint throghLinesTo: destinationPoint.
	gameEnded ifTrue:[self error: TerniLapilli cantPlayWhenGameIsOver]. 

	oPieces remove: originPoint.
	oPieces add: destinationPoint.
	xTurn := xTurn not.
	self checkIfXWon.! !

!testRun: #TerniLapilliTest #test38PlayerOCantMoveAPieceWhenGameIsOver stamp: 'FG 10/31/2020 19:57:39'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 19:57:42'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 10/31/2020 19:57:42'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 10/31/2020 19:57:42'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 10/31/2020 19:57:42'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 10/31/2020 19:57:42'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 10/31/2020 19:57:42'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 10/31/2020 19:57:42'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 10/31/2020 19:57:42'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 10/31/2020 19:57:42'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 10/31/2020 19:57:42'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 10/31/2020 19:57:42'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 10/31/2020 19:57:42'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 10/31/2020 19:57:42'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 10/31/2020 19:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 10/31/2020 19:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 19:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 10/31/2020 19:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 19:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 10/31/2020 19:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPutAPieceDuringOTurn stamp: 'FG 10/31/2020 19:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPutAPieceDuringXTurn stamp: 'FG 10/31/2020 19:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 19:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 10/31/2020 19:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 10/31/2020 19:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 19:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 10/31/2020 19:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 19:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 10/31/2020 19:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 19:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 10/31/2020 19:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test31PlayerXCantMoveDuringPlayerOTurn stamp: 'FG 10/31/2020 19:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test32PlayerOCantMoveDuringPlayerXTurn stamp: 'FG 10/31/2020 19:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test33PlayerXMustMoveThroughBoardLines stamp: 'FG 10/31/2020 19:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test34PlayerOMustMoveThroughBoardLines stamp: 'FG 10/31/2020 19:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test35PlayerXCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 10/31/2020 19:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test36PlayerOCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 10/31/2020 19:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test37PlayerXCantMoveAPieceWhenGameIsOver stamp: 'FG 10/31/2020 19:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test38PlayerOCantMoveAPieceWhenGameIsOver stamp: 'FG 10/31/2020 19:57:43'!
PASSED!

----QUIT----(31 October 2020 19:59:04) CuisUniversity-4365.image priorSource: 18304348!

----STARTUP---- (1 November 2020 11:33:34) as C:\Users\FACU PC\Documents\Clases Virtuales\Cosas IS 1\Cuis University\CuisUniversity-4365.image!


Object subclass: #Player
	instanceVariableNames: 'pieces turn winner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #Player category: #'Terni Lapilli' stamp: 'FG 11/1/2020 11:36:37'!
Object subclass: #Player
	instanceVariableNames: 'pieces turn winner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Object subclass: #Player
	instanceVariableNames: 'pieces turn victory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #Player category: #'Terni Lapilli' stamp: 'FG 11/1/2020 11:36:59'!
Object subclass: #Player
	instanceVariableNames: 'pieces turn victory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Player subclass: #PlayerX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #PlayerX category: #'Terni Lapilli' stamp: 'FG 11/1/2020 11:37:15'!
Player subclass: #PlayerX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Player subclass: #PlayerY
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #PlayerY category: #'Terni Lapilli' stamp: 'FG 11/1/2020 11:37:19'!
Player subclass: #PlayerY
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Object subclass: #Player
	instanceVariableNames: 'piecesOnBoard turn victory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #Player category: #'Terni Lapilli' stamp: 'FG 11/1/2020 11:42:56'!
Object subclass: #Player
	instanceVariableNames: 'piecesOnBoard turn victory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!Player methodsFor: 'nil' stamp: 'FG 11/1/2020 11:43:13'!
pieces
	^ piecesOnBoard! !
!Player methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 11:43:25'!
hadWon 
	^ victory! !
!Player methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 11:44:01'!
turn
	^ turn! !
!Player methodsFor: 'nil' stamp: 'FG 11/1/2020 11:46:53'!
starting: aBool
	turn := aBool.! !
!Player methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 11:48:28' prior: 50909819!
starting: aBool
	piecesOnBoard := Set new.
	victory := false.
	turn := aBool.! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'playerX playerO gameEnded winningCombinations'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: #'Terni Lapilli' stamp: 'FG 11/1/2020 11:51:52'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'playerX playerO gameEnded winningCombinations'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'initialization' stamp: 'FG 11/1/2020 11:53:55' prior: 50903911!
initializeGame

	playerX := PlayerX new starting: true.
	playerO := PlayerY new starting: false.
	gameEnded  := false.
       self createWinningCombinations.! !
!Player methodsFor: 'nil' stamp: 'FG 11/1/2020 12:01:52'!
putPieceIn: aPosition
	piecesOnBoard add: aPosition.! !
!Player methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 12:05:13'!
checkIfValidPoint: aPoint
	(aPoint isIntegerPoint and: [(aPoint x between: 1 and: 3) and: [(aPoint y between: 1 and: 3)]]) 
		ifFalse: [self error: TerniLapilli invalidPositionErrorMessage].! !
!Player methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 12:07:30' prior: 50909855!
checkIfValidPoint: aPoint
	(aPoint isIntegerPoint and: [aPoint between: 1@1 and: 3@3 ]) 
		ifFalse: [self error: TerniLapilli invalidPositionErrorMessage].! !
!Player methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 12:08:10'!
checkIfValidPosition: aPosition
	(aPosition isIntegerPoint and: [aPosition between: 1@1 and: 3@3 ]) 
		ifFalse: [self error: TerniLapilli invalidPositionErrorMessage].! !

!methodRemoval: Player #checkIfValidPoint: stamp: 'FG 11/1/2020 12:08:16'!
checkIfValidPoint: aPoint
	(aPoint isIntegerPoint and: [aPoint between: 1@1 and: 3@3 ]) 
		ifFalse: [self error: TerniLapilli invalidPositionErrorMessage].!
!Player methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 12:09:21' prior: 50909850!
putPieceIn: aPosition
	
	self checkIfValidPosition: aPosition.

	piecesOnBoard add: aPosition.! !
!Player methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 12:10:08' prior: 50909888!
putPieceIn: aPosition
	
	self checkIfValidPosition: aPosition.
	self checkIfValidPlacement: aPosition..

	piecesOnBoard add: aPosition.! !

!methodRemoval: TerniLapilli #checkIfValidPoint: stamp: 'FG 11/1/2020 12:10:29'!
checkIfValidPoint: aPoint
	(aPoint isIntegerPoint and: [(aPoint x between: 1 and: 3) and: [(aPoint y between: 1 and: 3)]]) ifFalse: [self error: TerniLapilli invalidPositionErrorMessage].!
!Player methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 12:18:13'!
checkThatImNotStackingPiecesIn: aPosition takingIntoTheAccount: otherPlayerPieces
	((piecesOnBoard union: otherPlayerPieces) includes: aPosition) ifTrue: [self error: TerniLapilli cantPutPieceOverPieceErrorMessage].! !
!Player methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 12:19:15'!
putPieceIn: aPosition takingIntoTheAccount: otherPlayer
	
	self checkIfValidPosition: aPosition.
	self checkIfValidPlacement: aPosition..

	piecesOnBoard add: aPosition.! !

!methodRemoval: Player #putPieceIn: stamp: 'FG 11/1/2020 12:19:18'!
putPieceIn: aPosition
	
	self checkIfValidPosition: aPosition.
	self checkIfValidPlacement: aPosition..

	piecesOnBoard add: aPosition.!

!methodRemoval: TerniLapilli #checkIfValidPlacement: stamp: 'FG 11/1/2020 12:19:31'!
checkIfValidPlacement: aPoint
	((xPieces includes: aPoint) or: [oPieces includes: aPoint]) ifTrue: [self error: TerniLapilli cantPutPieceOverPieceErrorMessage].!
!Player methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 12:21:04' prior: 50909920!
putPieceIn: aPosition takingIntoTheAccount: otherPlayer
	
	self checkIfValidPosition: aPosition.
	self checkThatImNotStackingPiecesIn: aPosition takingIntoTheAccount: otherPlayer pieces. 
	turn ifFalse: [self error: TerniLapilli cantPlayInAnotherPlayerTurn].

	piecesOnBoard add: aPosition.! !
!Player methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 12:22:08' prior: 50909943!
putPieceIn: aPosition takingIntoTheAccount: otherPlayer
	
	self checkIfValidPosition: aPosition.
	self checkThatImNotStackingPiecesIn: aPosition takingIntoTheAccount: otherPlayer pieces. 
	turn ifFalse: [self error: TerniLapilli cantPlayInAnotherPlayerTurn].
	(piecesOnBoard size < 3) ifFalse: [self error: TerniLapilli cantPutMorePieces]. 

	piecesOnBoard add: aPosition.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 12:22:46' prior: 50905795!
putXAt: aPoint 

	self checkIfXWon.! !
!Player methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 12:24:30' prior: 50909955!
putPieceIn: aPosition takingIntoTheAccount: otherPlayer
	
	self checkIfValidPosition: aPosition.
	self checkThatImNotStackingPiecesIn: aPosition takingIntoTheAccount: otherPlayer pieces. 
	turn ifFalse: [self error: TerniLapilli cantPlayInAnotherPlayerTurn].
	(piecesOnBoard size < 3) ifFalse: [self error: TerniLapilli cantPutMorePieces]. 

	piecesOnBoard add: aPosition.! !
!Player methodsFor: 'getters' stamp: 'FG 11/1/2020 12:25:08'!
passTurn
	turn := turn not.! !

!methodRemoval: Player #turn stamp: 'FG 11/1/2020 12:25:13'!
turn
	^ turn!
!Player methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 12:26:05' prior: 50909975!
putPieceIn: aPosition takingIntoTheAccount: otherPlayer
	
	self checkIfValidPosition: aPosition.
	self checkThatImNotStackingPiecesIn: aPosition takingIntoTheAccount: otherPlayer pieces. 
	turn ifFalse: [self error: TerniLapilli cantPlayInAnotherPlayerTurn].
	(piecesOnBoard size < 3) ifFalse: [self error: TerniLapilli cantPutMorePieces]. 

	self passTurn.
	otherPlayer passTurn.
	piecesOnBoard add: aPosition.! !

Object subclass: #Player
	instanceVariableNames: 'piecesOnBoard playing winning'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #Player category: #'Terni Lapilli' stamp: 'FG 11/1/2020 12:35:26'!
Object subclass: #Player
	instanceVariableNames: 'piecesOnBoard playing winning'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!Player methodsFor: 'getters' stamp: 'FG 11/1/2020 12:35:41' prior: 50909989!
passTurn
	playing := playing not.! !
!Player methodsFor: 'getters' stamp: 'FG 11/1/2020 12:35:49' prior: 50909813!
hadWon 
	^ winning! !
!Player methodsFor: 'initialization' stamp: 'FG 11/1/2020 12:36:04' prior: 50909823!
starting: aBool
	piecesOnBoard := Set new.
	winning := false.
	playing := aBool.! !
!Player methodsFor: 'action' stamp: 'FG 11/1/2020 12:36:32' prior: 50909996!
putPieceIn: aPosition takingIntoTheAccount: otherPlayer
	
	self checkIfValidPosition: aPosition.
	self checkThatImNotStackingPiecesIn: aPosition takingIntoTheAccount: otherPlayer pieces. 
	playing ifFalse: [self error: TerniLapilli cantPlayInAnotherPlayerTurn].
	(piecesOnBoard size < 3) ifFalse: [self error: TerniLapilli cantPutMorePieces]. 

	self passTurn.
	otherPlayer passTurn.
	piecesOnBoard add: aPosition.! !
!Player methodsFor: 'action' stamp: 'FG 11/1/2020 12:38:09'!
checkIfWonWith: winningCombinations
	
	| victory |
	victory := winningCombinations includes: piecesOnBoard.
	winning := victory.
	^ victory ! !

x := 10. !

x := true.  !

y := (x:=4). !

y.!
!Player methodsFor: 'action' stamp: 'FG 11/1/2020 12:40:03' prior: 50910053!
checkIfWonWith: winningCombinations
	^ winning := (winningCombinations includes: piecesOnBoard). ! !

!methodRemoval: TerniLapilli #checkIfXWon stamp: 'FG 11/1/2020 12:40:30'!
checkIfXWon

	(winningCombinations includes: xPieces) 
		ifTrue:[ xWon := true.
			    gameEnded := true. ]!

!methodRemoval: TerniLapilli #checkIfOWon stamp: 'FG 11/1/2020 12:40:32'!
checkIfOWon

	(winningCombinations includes: oPieces) 
		ifTrue:[ xWon := false.
			    gameEnded := true. ]!
!TerniLapilli methodsFor: 'error check' stamp: 'FG 11/1/2020 12:46:35'!
checkThatImNotStackingPiecesIn: aPosition 
	((playerX pieces union: playerO pieces) includes: aPosition) ifTrue: [self error: TerniLapilli cantPutPieceOverPieceErrorMessage].! !
!TerniLapilli methodsFor: 'error check' stamp: 'FG 11/1/2020 12:46:49'!
checkIfValidPosition: aPosition
	(aPosition isIntegerPoint and: [aPosition between: 1@1 and: 3@3 ]) 
		ifFalse: [self error: TerniLapilli invalidPositionErrorMessage].! !

!methodRemoval: Player #checkIfValidPosition: stamp: 'FG 11/1/2020 12:46:59'!
checkIfValidPosition: aPosition
	(aPosition isIntegerPoint and: [aPosition between: 1@1 and: 3@3 ]) 
		ifFalse: [self error: TerniLapilli invalidPositionErrorMessage].!

!methodRemoval: Player #checkThatImNotStackingPiecesIn:takingIntoTheAccount: stamp: 'FG 11/1/2020 12:47:00'!
checkThatImNotStackingPiecesIn: aPosition takingIntoTheAccount: otherPlayerPieces
	((piecesOnBoard union: otherPlayerPieces) includes: aPosition) ifTrue: [self error: TerniLapilli cantPutPieceOverPieceErrorMessage].!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 13:25:38' prior: 50909970!
putXAt: aPosition

	self checkIfValidPosition: aPosition.
	
	gameEnded := playerX checkIfWonWith: winningCombinations.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 13:26:08' prior: 50910114!
putXAt: aPosition

	self checkIfValidPosition: aPosition.
	self checkThatImNotStackingPiecesIn: aPosition.
	
	gameEnded := playerX checkIfWonWith: winningCombinations.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 13:27:02' prior: 50910121!
putXAt: aPosition

	self checkIfValidPosition: aPosition.
	self checkThatImNotStackingPiecesIn: aPosition.
	
	
	gameEnded := playerX checkIfWonWith: winningCombinations.! !
!Player methodsFor: 'error check' stamp: 'FG 11/1/2020 13:28:31'!
checkThatIsMyTurn
	playing ifFalse: [self error: TerniLapilli cantPlayInAnotherPlayerTurn].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 13:29:01' prior: 50910130!
putXAt: aPosition

	self checkIfValidPosition: aPosition.
	self checkThatImNotStackingPiecesIn: aPosition.
	playerX checkThatIsMyTurn.
	
	
	gameEnded := playerX checkIfWonWith: winningCombinations.! !
!Player methodsFor: 'action' stamp: 'FG 11/1/2020 13:29:50'!
checkIHaveLessThanThreePieces
	(piecesOnBoard size < 3) ifFalse: [self error: TerniLapilli cantPutMorePieces]. ! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 13:30:32' prior: 50910144!
putXAt: aPosition

	self checkIfValidPosition: aPosition.
	self checkThatImNotStackingPiecesIn: aPosition.
	playerX checkThatIsMyTurn.
	playerX checkThatIHaveLessThanThreePieces.
	
	
	gameEnded := playerX checkIfWonWith: winningCombinations.! !
!Player methodsFor: 'error check' stamp: 'FG 11/1/2020 13:30:42'!
checkThatIHaveLessThanThreePieces
	(piecesOnBoard size < 3) ifFalse: [self error: TerniLapilli cantPutMorePieces]. ! !

!methodRemoval: Player #checkIHaveLessThanThreePieces stamp: 'FG 11/1/2020 13:30:47'!
checkIHaveLessThanThreePieces
	(piecesOnBoard size < 3) ifFalse: [self error: TerniLapilli cantPutMorePieces]. !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 13:31:23' prior: 50910160!
putXAt: aPosition

	self checkIfValidPosition: aPosition.
	self checkThatImNotStackingPiecesIn: aPosition.
	playerX checkThatIsMyTurn.
	playerX checkThatIHaveLessThanThreePieces.
	
	
	gameEnded := playerX checkIfWonWith: winningCombinations.! !
!TerniLapilli methodsFor: 'error check' stamp: 'FG 11/1/2020 13:31:54'!
checkThatGameIsNotOver
	gameEnded ifTrue:[self error: TerniLapilli cantPlayWhenGameIsOver]. ! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 13:32:49' prior: 50910183!
putXAt: aPosition

	self checkIfValidPosition: aPosition.
	self checkThatImNotStackingPiecesIn: aPosition.
	self checkThatGameIsNotOver.
	playerX checkThatIsMyTurn.
	playerX checkThatIHaveLessThanThreePieces.
	
	
	
	gameEnded := playerX checkIfWonWith: winningCombinations.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 13:33:33' prior: 50910199!
putXAt: aPosition

	self checkIfValidPosition: aPosition.
	self checkThatImNotStackingPiecesIn: aPosition.
	self checkThatGameIsNotOver.
	playerX checkThatIsMyTurn.
	playerX checkThatIHaveLessThanThreePieces.
	
	playerX putPieceIn: aPosition.
	gameEnded := playerX checkIfWonWith: winningCombinations.! !
!Player methodsFor: 'action' stamp: 'FG 11/1/2020 13:33:48'!
putPieceIn: aPosition
	
	piecesOnBoard add: aPosition.! !

!methodRemoval: Player #putPieceIn:takingIntoTheAccount: stamp: 'FG 11/1/2020 13:33:51'!
putPieceIn: aPosition takingIntoTheAccount: otherPlayer
	
	self checkIfValidPosition: aPosition.
	self checkThatImNotStackingPiecesIn: aPosition takingIntoTheAccount: otherPlayer pieces. 
	playing ifFalse: [self error: TerniLapilli cantPlayInAnotherPlayerTurn].
	(piecesOnBoard size < 3) ifFalse: [self error: TerniLapilli cantPutMorePieces]. 

	self passTurn.
	otherPlayer passTurn.
	piecesOnBoard add: aPosition.!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 13:35:33' prior: 50910211!
putXAt: aPosition

	self checkIfValidPosition: aPosition.
	self checkThatImNotStackingPiecesIn: aPosition.
	self checkThatGameIsNotOver.
	playerX checkThatIsMyTurn.
	playerX checkThatIHaveLessThanThreePieces.
	
	playerX putPieceIn: aPosition.
	playerX passTurn.
	playerO passTurn.
	gameEnded := playerX checkIfWonWith: winningCombinations.! !

Player subclass: #PlayerO
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #PlayerO category: #'Terni Lapilli' stamp: 'FG 11/1/2020 13:36:02'!
Player subclass: #PlayerO
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'initialization' stamp: 'FG 11/1/2020 13:36:12' prior: 50909843!
initializeGame

	playerX := PlayerX new starting: true.
	playerO := PlayerO new starting: false.
	gameEnded  := false.
       self createWinningCombinations.! !

!classRemoval: #PlayerY stamp: 'FG 11/1/2020 13:36:19'!
Player subclass: #PlayerY
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!Player methodsFor: 'action' stamp: 'FG 11/1/2020 13:37:45' prior: 50910223!
putPieceIn: aPosition
	piecesOnBoard add: aPosition.! !

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 11/1/2020 13:38:24'!
ERROR!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 11/1/2020 13:38:24'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FG 11/1/2020 13:39:51' prior: 50902749!
ocupiedByO: aPoint 
	^ playerO pieces includes: aPoint.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FG 11/1/2020 13:40:03' prior: 50902679!
ocupiedByX: aPoint 
	^ playerX pieces includes: aPoint.! !

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 11/1/2020 13:40:34'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 11/1/2020 13:40:37'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 11/1/2020 13:40:55'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 11/1/2020 13:41:41'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 11/1/2020 13:41:52'!
FAILURE!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 11/1/2020 13:41:52'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 13:42:26' prior: 50903418!
hasPlayerOWon
	 ^ playerX.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 13:43:10' prior: 50910327!
hasPlayerOWon
	 ^ playerX hadWon.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 13:43:25' prior: 50903414!
hasPlayerXWon
	^ playerX hadWon.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 13:43:34' prior: 50910331!
hasPlayerOWon
	 ^ playerO hadWon.! !

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 11/1/2020 13:43:58'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 11/1/2020 13:44:00'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 11/1/2020 13:44:08'!
FAILURE!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 11/1/2020 13:44:08'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 13:44:40' prior: 50902924!
isPlayingO
	^ playerX not.! !
!Player methodsFor: 'getters' stamp: 'FG 11/1/2020 13:45:13'!
isPlaying
	^ playing.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 13:45:52' prior: 50910358!
isPlayingO
	^ playerO isPlaying.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 13:46:05' prior: 50902867!
isPlayingX
	^ playerX isPlaying.! !

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 11/1/2020 13:47:45'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 11/1/2020 13:47:47'!
ERROR!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 11/1/2020 13:47:47'!
ERROR!
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 13:50:15' prior: 50906494!
putOAt: aPosition 

	self checkIfValidPosition: aPosition.
	self checkThatImNotStackingPiecesIn: aPosition.
	self checkThatGameIsNotOver.
	playerO checkThatIsMyTurn.
	playerO checkThatIHaveLessThanThreePieces.
	
	playerO putPieceIn: aPosition.
	playerX passTurn.
	playerO passTurn.
	gameEnded := playerO checkIfWonWith: winningCombinations.! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 13:55:52' prior: 50909559!
moveXFrom: originPosition to: destinationPosition

	"(xPieces includes: originPoint) ifFalse:[self error: TerniLapilli cantMoveInvalidPiece].
	"
	self checkIfValidPosition: destinationPosition.
	self checkThatImNotStackingPiecesIn: destinationPosition.
	self checkThatGameIsNotOver.
	"
	xTurn ifFalse: [self error: TerniLapilli cantPlayInAnotherPlayerTurn].
	(xPieces size < 3) ifTrue:[self error: TerniLapilli cantMoveBeforeThreePieces].
	self moveFrom: originPoint throghLinesTo: destinationPoint.

	xPieces remove: originPoint.
	xPieces add: destinationPoint.
	xTurn := xTurn not.
	self checkIfXWon."! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 13:56:39' prior: 50910397!
moveXFrom: originPosition to: destinationPosition

	"(xPieces includes: originPoint) ifFalse:[self error: TerniLapilli cantMoveInvalidPiece].
	"
	self checkIfValidPosition: destinationPosition.
	self checkThatImNotStackingPiecesIn: destinationPosition.
	self checkThatGameIsNotOver.
	playerX checkThatIsMyTurn.
	"
	(xPieces size < 3) ifTrue:[self error: TerniLapilli cantMoveBeforeThreePieces].
	self moveFrom: originPoint throghLinesTo: destinationPoint.

	xPieces remove: originPoint.
	xPieces add: destinationPoint.
	xTurn := xTurn not.
	self checkIfXWon."! !
!Player methodsFor: 'error check' stamp: 'FG 11/1/2020 13:57:59'!
checkThatIHaveThreePieces
	(piecesOnBoard size < 3) ifTrue:[self error: TerniLapilli cantMoveBeforeThreePieces].! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 13:59:13' prior: 50910419!
moveXFrom: originPosition to: destinationPosition

	"(xPieces includes: originPoint) ifFalse:[self error: TerniLapilli cantMoveInvalidPiece].
	"
	self checkIfValidPosition: destinationPosition.
	self checkThatImNotStackingPiecesIn: destinationPosition.
	self checkThatGameIsNotOver.
	playerX checkThatIsMyTurn.
	playerX checkThatIHaveThreePieces.
	
	"
	self moveFrom: originPoint throghLinesTo: destinationPoint.

	xPieces remove: originPoint.
	xPieces add: destinationPoint.
	xTurn := xTurn not.
	self checkIfXWon."! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 14:02:34' prior: 50910446!
moveXFrom: originPosition to: destinationPosition

	"(xPieces includes: originPoint) ifFalse:[self error: TerniLapilli cantMoveInvalidPiece].
	"
	self checkIfValidPosition: destinationPosition.
	self checkThatImNotStackingPiecesIn: destinationPosition.
	self checkThatGameIsNotOver.
	playerX checkThatIsMyTurn.
	playerX checkThatIHaveThreePieces.
	
	"
	self moveFrom: originPoint throghLinesTo: destinationPoint.

	xPieces remove: originPoint.
	xPieces add: destinationPoint.
	xTurn := xTurn not.
	self checkIfXWon."! !
!Player methodsFor: 'getters' stamp: 'FG 11/1/2020 14:04:03'!
hadPieceIn: aPosition
	^ piecesOnBoard includes: aPosition.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FG 11/1/2020 14:04:30' prior: 50910300!
ocupiedByX: aPosition 
	^ playerX hadPieceIn: aPosition.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FG 11/1/2020 14:04:52' prior: 50910295!
ocupiedByO: aPosition 
	^ playerO hadPieceIn: aPosition.! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 14:07:56' prior: 50910465!
moveXFrom: originPosition to: destinationPosition

	self checkIfValidPosition: destinationPosition.
	self checkThatImNotStackingPiecesIn: destinationPosition.
	self checkThatGameIsNotOver.
	playerX checkThatIsMyTurn.
	playerX checkThatIHaveThreePieces.
	
	(playerX hadPieceIn: originPosition) ifFalse: [self error: TerniLapilli cantMoveInvalidPiece].
	
	"
	self moveFrom: originPoint throghLinesTo: destinationPoint.

	xPieces remove: originPoint.
	xPieces add: destinationPoint.
	xTurn := xTurn not.
	self checkIfXWon."! !
!TerniLapilli methodsFor: 'error check' stamp: 'FG 11/1/2020 14:11:12'!
checkIfMovementRulesAreRespectedByMovingFrom: originPosition to: destinationPosition.

	((originPosition fourNeighbors includes: destinationPosition) not and: [((originPosition = (2@2)) or: [destinationPosition  = (2@2)]) not]) 
		ifTrue: [self error: 	TerniLapilli cantMoveThroughBoardLines].! !

!methodRemoval: TerniLapilli #moveFrom:throghLinesTo: stamp: 'FG 11/1/2020 14:11:15'!
moveFrom: originPosition throghLinesTo: destinationPosition.

	((originPosition fourNeighbors includes: destinationPosition) not and: [((originPosition = (2@2)) or: [destinationPosition  = (2@2)]) not]) 
		ifTrue: [self error: 	TerniLapilli cantMoveThroughBoardLines].!
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 14:12:09' prior: 50910499!
moveXFrom: originPosition to: destinationPosition

	self checkIfValidPosition: destinationPosition.
	self checkThatImNotStackingPiecesIn: destinationPosition.
	self checkThatGameIsNotOver.
	playerX checkThatIsMyTurn.
	playerX checkThatIHaveThreePieces.
	
	(playerX hadPieceIn: originPosition) ifFalse: [self error: TerniLapilli cantMoveInvalidPiece].
	self checkIfMovementRulesAreRespectedByMovingFrom: originPosition to: destinationPosition.
	
	"
	self moveFrom: originPoint throghLinesTo: destinationPoint.

	xPieces remove: originPoint.
	xPieces add: destinationPoint.
	xTurn := xTurn not.
	self checkIfXWon."! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 14:12:39' prior: 50910542!
moveXFrom: originPosition to: destinationPosition

	self checkIfValidPosition: destinationPosition.
	self checkThatImNotStackingPiecesIn: destinationPosition.
	self checkThatGameIsNotOver.
	playerX checkThatIsMyTurn.
	playerX checkThatIHaveThreePieces.
	
	(playerX hadPieceIn: originPosition) ifFalse: [self error: TerniLapilli cantMoveInvalidPiece].
	self checkIfMovementRulesAreRespectedByMovingFrom: originPosition to: destinationPosition.
"
	xPieces remove: originPoint.
	xPieces add: destinationPoint.
	xTurn := xTurn not.
	self checkIfXWon."! !
!Player methodsFor: 'action' stamp: 'FG 11/1/2020 14:13:24'!
movePieceFrom: originPosition to: destinationPosition
	piecesOnBoard remove: originPosition.
	piecesOnBoard add: destinationPosition.! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 14:14:56' prior: 50910564!
moveXFrom: originPosition to: destinationPosition

	self checkIfValidPosition: destinationPosition.
	self checkThatImNotStackingPiecesIn: destinationPosition.
	self checkThatGameIsNotOver.
	playerX checkThatIsMyTurn.
	playerX checkThatIHaveThreePieces.
	
	(playerX hadPieceIn: originPosition) ifFalse: [self error: TerniLapilli cantMoveInvalidPiece].
	self checkIfMovementRulesAreRespectedByMovingFrom: originPosition to: destinationPosition.
	
	playerX movePieceFrom: originPosition to: destinationPosition. 
	playerX passTurn.
	playerO passTurn.
	gameEnded := playerX checkIfWonWith: winningCombinations.! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 14:16:01' prior: 50909582!
moveOFrom: originPosition to: destinationPosition 

	self checkIfValidPosition: destinationPosition.
	self checkThatImNotStackingPiecesIn: destinationPosition.
	self checkThatGameIsNotOver.
	playerO checkThatIsMyTurn.
	playerO checkThatIHaveThreePieces.
	
	(playerO hadPieceIn: originPosition) ifFalse: [self error: TerniLapilli cantMoveInvalidPiece].
	self checkIfMovementRulesAreRespectedByMovingFrom: originPosition to: destinationPosition.
	
	playerO movePieceFrom: originPosition to: destinationPosition. 
	playerX passTurn.
	playerO passTurn.
	gameEnded := playerO checkIfWonWith: winningCombinations.! !
!TerniLapilli methodsFor: 'initialization' stamp: 'FG 11/1/2020 14:16:44' prior: 50910269!
initializeGame

	playerX := Player new starting: true.
	playerO := Player new starting: false.
	gameEnded  := false.
       self createWinningCombinations.! !

!classRemoval: #PlayerX stamp: 'FG 11/1/2020 14:17:20'!
Player subclass: #PlayerX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #PlayerO stamp: 'FG 11/1/2020 14:17:23'!
Player subclass: #PlayerO
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPutAPieceDuringOTurn stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPutAPieceDuringXTurn stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test31PlayerXCantMoveDuringPlayerOTurn stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test32PlayerOCantMoveDuringPlayerXTurn stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test33PlayerXMustMoveThroughBoardLines stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test34PlayerOMustMoveThroughBoardLines stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test35PlayerXCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test36PlayerOCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test37PlayerXCantMoveAPieceWhenGameIsOver stamp: 'FG 11/1/2020 14:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test38PlayerOCantMoveAPieceWhenGameIsOver stamp: 'FG 11/1/2020 14:19:26'!
PASSED!
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 14:21:36' prior: 50910383!
putOAt: aPosition 

	self checkIfValidPosition: aPosition.
	self checkThatImNotStackingPiecesIn: aPosition.
	self checkThatGameIsNotOver.
	playerO checkThatIsMyTurn.
	
	playerO checkThatIHaveLessThanThreePieces.
	
	playerO putPieceIn: aPosition.
	playerX passTurn.
	playerO passTurn.
	gameEnded := playerO checkIfWonWith: winningCombinations.! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 14:21:40' prior: 50910244!
putXAt: aPosition

	self checkIfValidPosition: aPosition.
	self checkThatImNotStackingPiecesIn: aPosition.
	self checkThatGameIsNotOver.
	playerX checkThatIsMyTurn.
	
	playerX checkThatIHaveLessThanThreePieces.
	
	playerX putPieceIn: aPosition.
	playerX passTurn.
	playerO passTurn.
	gameEnded := playerX checkIfWonWith: winningCombinations.! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 14:21:47' prior: 50910591!
moveXFrom: originPosition to: destinationPosition

	self checkIfValidPosition: destinationPosition.
	self checkThatImNotStackingPiecesIn: destinationPosition.
	self checkThatGameIsNotOver.
	playerX checkThatIsMyTurn.
	
	playerX checkThatIHaveThreePieces.
	
	(playerX hadPieceIn: originPosition) ifFalse: [self error: TerniLapilli cantMoveInvalidPiece].
	self checkIfMovementRulesAreRespectedByMovingFrom: originPosition to: destinationPosition.
	
	playerX movePieceFrom: originPosition to: destinationPosition. 
	playerX passTurn.
	playerO passTurn.
	gameEnded := playerX checkIfWonWith: winningCombinations.! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 14:21:51' prior: 50910613!
moveOFrom: originPosition to: destinationPosition 

	self checkIfValidPosition: destinationPosition.
	self checkThatImNotStackingPiecesIn: destinationPosition.
	self checkThatGameIsNotOver.
	playerO checkThatIsMyTurn.
	
	playerO checkThatIHaveThreePieces.
	
	(playerO hadPieceIn: originPosition) ifFalse: [self error: TerniLapilli cantMoveInvalidPiece].
	self checkIfMovementRulesAreRespectedByMovingFrom: originPosition to: destinationPosition.
	
	playerO movePieceFrom: originPosition to: destinationPosition. 
	playerX passTurn.
	playerO passTurn.
	gameEnded := playerO checkIfWonWith: winningCombinations.! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 14:24:47'!
checkThatPlayer: aPlayer isNotBreakingAnyRulesWhileMovingOrPutingAPieceInto: aPosition

	self checkIfValidPosition: aPosition.
	self checkThatImNotStackingPiecesIn: aPosition.
	self checkThatGameIsNotOver.
	aPlayer checkThatIsMyTurn.! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 14:25:30' prior: 50910841!
moveOFrom: originPosition to: destinationPosition 

	self checkThatPlayer: playerO isNotBreakingAnyRulesWhileMovingOrPutingAPieceInto: destinationPosition. 
	
	playerO checkThatIHaveThreePieces.
	
	(playerO hadPieceIn: originPosition) ifFalse: [self error: TerniLapilli cantMoveInvalidPiece].
	self checkIfMovementRulesAreRespectedByMovingFrom: originPosition to: destinationPosition.
	
	playerO movePieceFrom: originPosition to: destinationPosition. 
	playerX passTurn.
	playerO passTurn.
	gameEnded := playerO checkIfWonWith: winningCombinations.! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 14:25:41' prior: 50910819!
moveXFrom: originPosition to: destinationPosition

	self checkThatPlayer: playerX isNotBreakingAnyRulesWhileMovingOrPutingAPieceInto: destinationPosition.
	
	playerX checkThatIHaveThreePieces.
	
	(playerX hadPieceIn: originPosition) ifFalse: [self error: TerniLapilli cantMoveInvalidPiece].
	self checkIfMovementRulesAreRespectedByMovingFrom: originPosition to: destinationPosition.
	
	playerX movePieceFrom: originPosition to: destinationPosition. 
	playerX passTurn.
	playerO passTurn.
	gameEnded := playerX checkIfWonWith: winningCombinations.! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 14:26:38' prior: 50910791!
putOAt: aPosition 

	self checkThatPlayer: playerO isNotBreakingAnyRulesWhileMovingOrPutingAPieceInto: aPosition. 
	
	playerO checkThatIHaveLessThanThreePieces.
	
	playerO putPieceIn: aPosition.
	playerX passTurn.
	playerO passTurn.
	gameEnded := playerO checkIfWonWith: winningCombinations.! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 14:27:01' prior: 50910805!
putXAt: aPosition

	self checkThatPlayer: playerX isNotBreakingAnyRulesWhileMovingOrPutingAPieceInto: aPosition. 
	
	playerX checkThatIHaveLessThanThreePieces.
	
	playerX putPieceIn: aPosition.
	playerX passTurn.
	playerO passTurn.
	gameEnded := playerX checkIfWonWith: winningCombinations.! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 14:27:20' prior: 50910913!
putOAt: aPosition 

	self checkThatPlayer: playerO isNotBreakingAnyRulesWhileMovingOrPutingAPieceInto: aPosition. 
	playerO checkThatIHaveLessThanThreePieces.
	
	playerO putPieceIn: aPosition.
	playerX passTurn.
	playerO passTurn.
	gameEnded := playerO checkIfWonWith: winningCombinations.! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 14:27:43'!
passTurn
	playerX passTurn.
	playerO passTurn.
	! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 14:27:57' prior: 50910925!
putXAt: aPosition

	self checkThatPlayer: playerX isNotBreakingAnyRulesWhileMovingOrPutingAPieceInto: aPosition. 
	
	playerX checkThatIHaveLessThanThreePieces.
	
	playerX putPieceIn: aPosition.
	self passTurn.
	gameEnded := playerX checkIfWonWith: winningCombinations.! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 14:28:03' prior: 50910937!
putOAt: aPosition 

	self checkThatPlayer: playerO isNotBreakingAnyRulesWhileMovingOrPutingAPieceInto: aPosition. 
	playerO checkThatIHaveLessThanThreePieces.
	
	playerO putPieceIn: aPosition.
	self passTurn.
	gameEnded := playerO checkIfWonWith: winningCombinations.! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 14:28:09' prior: 50910893!
moveXFrom: originPosition to: destinationPosition

	self checkThatPlayer: playerX isNotBreakingAnyRulesWhileMovingOrPutingAPieceInto: destinationPosition.
	
	playerX checkThatIHaveThreePieces.
	
	(playerX hadPieceIn: originPosition) ifFalse: [self error: TerniLapilli cantMoveInvalidPiece].
	self checkIfMovementRulesAreRespectedByMovingFrom: originPosition to: destinationPosition.
	
	playerX movePieceFrom: originPosition to: destinationPosition. 
	self passTurn.
	gameEnded := playerX checkIfWonWith: winningCombinations.! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 14:28:16' prior: 50910873!
moveOFrom: originPosition to: destinationPosition 

	self checkThatPlayer: playerO isNotBreakingAnyRulesWhileMovingOrPutingAPieceInto: destinationPosition. 
	
	playerO checkThatIHaveThreePieces.
	
	(playerO hadPieceIn: originPosition) ifFalse: [self error: TerniLapilli cantMoveInvalidPiece].
	self checkIfMovementRulesAreRespectedByMovingFrom: originPosition to: destinationPosition.
	
	playerO movePieceFrom: originPosition to: destinationPosition. 
	self passTurn.
	gameEnded := playerO checkIfWonWith: winningCombinations.! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 14:30:44' prior: 50910954!
putXAt: aPosition

	self checkThatPlayer: playerX isNotBreakingAnyRulesWhileMovingOrPutingAPieceInto: aPosition. 
	playerX checkThatIHaveLessThanThreePieces.
	
	playerX putPieceIn: aPosition.
	self passTurn.
	gameEnded := playerX checkIfWonWith: winningCombinations.! !
!TerniLapilli methodsFor: 'error check' stamp: 'FG 11/1/2020 14:31:52'!
checkThatPlayer: aPlayer isNotBreakingAnyRulesWhileMovingAPieceFrom: originPosition to: destinationPosition

	self checkThatGameIsNotOver.
	aPlayer checkThatIsMyTurn.! !
!TerniLapilli methodsFor: 'error check' stamp: 'FG 11/1/2020 14:32:53' prior: 50911029!
checkThatPlayer: aPlayer isNotBreakingAnyRulesWhileMovingAPieceFrom: originPosition to: destinationPosition

	aPlayer checkThatIHaveThreePieces.
	(aPlayer hadPieceIn: originPosition) ifFalse: [self error: TerniLapilli cantMoveInvalidPiece].
	self checkIfMovementRulesAreRespectedByMovingFrom: originPosition to: destinationPosition.! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 14:33:44' prior: 50910998!
moveOFrom: originPosition to: destinationPosition 

	self checkThatPlayer: playerO isNotBreakingAnyRulesWhileMovingOrPutingAPieceInto: destinationPosition. 
	self checkThatPlayer: playerO isNotBreakingAnyRulesWhileMovingAPieceFrom: originPosition  to: destinationPosition. 
	
	playerO movePieceFrom: originPosition to: destinationPosition. 
	self passTurn.
	gameEnded := playerO checkIfWonWith: winningCombinations.! !
!TerniLapilli methodsFor: 'initialization' stamp: 'FG 11/1/2020 14:47:36'!
createCombinationsForEachRow	
	
	|rows positionsInEachRow|
	
	rows := 	#(1 2 3).
	
	rows do:[ :aElement |
		     positionsInEachRow := Set new. 
		     rows do: [:anotherElement | positionsInEachRow add: aElement@anotherElement].
		     winningCombinations add: positionsInEachRow.
		].
	
	^ positionsInEachRow.
	
	
	
	! !
!TerniLapilli methodsFor: 'initialization' stamp: 'FG 11/1/2020 14:54:13' prior: 50911068!
createCombinationsForEachRow	
	
	|boardLines combinationsForEachRow|
	
	boardLines := 	#(1 2 3).
	
	boardLines do:[ :row |
		     combinationsForEachRow := Set new. 
		     boardLines do: [:column | combinationsForEachRow add: row@column].
		     winningCombinations add: combinationsForEachRow.
		].
	
	^ combinationsForEachRow.
	
	
	
	! !
!TerniLapilli methodsFor: 'initialization' stamp: 'FG 11/1/2020 14:55:12' prior: 50904278!
createWinningCombinations

	
	| auxArray auxSet|
	
	winningCombinations := Set new.
	
	auxArray := 	#(1 2 3).
	
	winningCombinations add: self createCombinationsForEachRow.
	
	auxArray do:[:aElement |
		     auxSet := Set new. 
		     auxArray do: [:anotherElement | auxSet add: anotherElement@aElement].
		     winningCombinations add: auxSet.
		].
	
	winningCombinations add: (Set with: 1@1 with: 2@2 with: 3@3).
	winningCombinations add: (Set with: 1@3 with: 2@2 with: 3@1).
	
	
	
	! !
!TerniLapilli methodsFor: 'initialization' stamp: 'FG 11/1/2020 15:00:04'!
createCombinationsForEachColumn
	
	^ self createCombinationsForEachRow do:[:aCombination | aCombination do: [:aPosition | aPosition transposed ] ].
	
	
	
	! !
!TerniLapilli methodsFor: 'initialization' stamp: 'FG 11/1/2020 15:00:50' prior: 50911095!
createWinningCombinations

	winningCombinations := Set new.
	
	winningCombinations add: self createCombinationsForEachRow.
	winningCombinations add: self createCombinationsForEachColumn. 
	
	winningCombinations add: (Set with: 1@1 with: 2@2 with: 3@3).
	winningCombinations add: (Set with: 1@3 with: 2@2 with: 3@1).
	
	
	
	! !

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 11/1/2020 15:01:23'!
ERROR!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 11/1/2020 15:01:33'!
ERROR!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 11/1/2020 15:01:48'!
ERROR!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 11/1/2020 15:02:02'!
ERROR!
!TerniLapilli methodsFor: 'initialization' stamp: 'FG 11/1/2020 15:03:25' prior: 50911113!
createCombinationsForEachColumn
	
	
	
	! !
!TerniLapilli methodsFor: 'initialization' stamp: 'FG 11/1/2020 15:04:20' prior: 50911150!
createCombinationsForEachColumn

	|boardLines combinationsForEachColumn|
	
	boardLines := 	#(1 2 3).
	
	boardLines do:[ :column |
		     combinationsForEachColumn := Set new. 
		     boardLines do: [:row | combinationsForEachColumn add: row@column].
		     winningCombinations add: combinationsForEachColumn.
		].
	
	^ combinationsForEachColumn.
	
	
	
	! !

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 11/1/2020 15:04:34'!
PASSED!
!TerniLapilli methodsFor: 'initialization' stamp: 'FG 11/1/2020 15:09:03' prior: 50910635!
initializeGame

	gameEnded  := false.
	playerX := Player new starting: true.
	playerO := Player new starting: false.
       self createWinningCombinations.! !
!Player methodsFor: 'error checking' stamp: 'FG 11/1/2020 15:10:27' prior: 50910439!
checkThatIHaveThreePieces
	(piecesOnBoard size = 3) ifFalse:[self error: TerniLapilli cantMoveBeforeThreePieces].! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 15:11:41' prior: 50908835!
cantMoveBeforeThreePieces
	^ 'Error - Can not move pieces before having three pieces on the board'! !
!TerniLapilli class methodsFor: 'error text' stamp: 'FG 11/1/2020 15:14:26'!
cantPutPieceIfThereIsThreePiecesOnBoard
	^ 'Error - Can not put more pieces in the board'! !

!methodRemoval: TerniLapilli class #cantPutMorePieces stamp: 'FG 11/1/2020 15:14:31'!
cantPutMorePieces
	^ 'Error - Cant put more pieces in the board'!
!TerniLapilli class methodsFor: 'error text' stamp: 'FG 11/1/2020 15:15:30'!
cantMoveBeforeHavingThreePiecesOnTheBoard
	^ 'Error - Can not move pieces before having three pieces on the board'! !
!TerniLapilli class methodsFor: 'error text' stamp: 'FG 11/1/2020 15:15:45'!
cantMovePieceBeforeHavingThreePiecesOnTheBoard
	^ 'Error - Can not move pieces before having three pieces on the board'! !

!methodRemoval: TerniLapilli class #cantMoveBeforeThreePieces stamp: 'FG 11/1/2020 15:15:48'!
cantMoveBeforeThreePieces
	^ 'Error - Can not move pieces before having three pieces on the board'!

!methodRemoval: TerniLapilli class #cantMoveBeforeHavingThreePiecesOnTheBoard stamp: 'FG 11/1/2020 15:15:49'!
cantMoveBeforeHavingThreePiecesOnTheBoard
	^ 'Error - Can not move pieces before having three pieces on the board'!
!TerniLapilli class methodsFor: 'error text' stamp: 'FG 11/1/2020 15:16:49'!
cantPlayIfItsNotMyTurn
	^ 'Error - You are trying to play in another player turn'! !

!methodRemoval: TerniLapilli class #cantPlayInAnotherPlayerTurn stamp: 'FG 11/1/2020 15:16:55'!
cantPlayInAnotherPlayerTurn
	^ 'Error - You are trying to play in another player turn'!
!Player methodsFor: 'error checking' stamp: 'FG 11/1/2020 15:18:54' prior: 50910170!
checkThatIHaveLessThanThreePieces
	(piecesOnBoard size < 3) ifFalse: [self error: TerniLapilli cantPutPieceIfThereIsThreePiecesOnBoard ]. ! !
!Player methodsFor: 'error checking' stamp: 'FG 11/1/2020 15:19:13' prior: 50911181!
checkThatIHaveThreePieces
	(piecesOnBoard size = 3) ifFalse:[self error: TerniLapilli cantMovePieceBeforeHavingThreePiecesOnTheBoard ].! !
!Player methodsFor: 'error checking' stamp: 'FG 11/1/2020 15:19:21' prior: 50910138!
checkThatIsMyTurn
	playing ifFalse: [self error: TerniLapilli cantPlayIfItsNotMyTurn].! !
!TerniLapilli class methodsFor: 'error text' stamp: 'FG 11/1/2020 15:21:24'!
cantMovePIeceToAnInvalidPosition
	^ 'Error - Can not put piece in this position'! !

!methodRemoval: TerniLapilli class #invalidPositionErrorMessage stamp: 'FG 11/1/2020 15:21:28'!
invalidPositionErrorMessage 
	^ 'Cant put piece in this position'!
!TerniLapilli methodsFor: 'error check' stamp: 'FG 11/1/2020 15:22:04' prior: 50910087!
checkIfValidPosition: aPosition
	(aPosition isIntegerPoint and: [aPosition between: 1@1 and: 3@3 ]) 
		ifFalse: [self error: TerniLapilli cantMovePIeceToAnInvalidPosition].! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 15:23:00'!
cantStackPieces
	^ 'Error - Piece already in this position'! !

!methodRemoval: TerniLapilli class #cantPutPieceOverPieceErrorMessage stamp: 'FG 11/1/2020 15:23:04'!
cantPutPieceOverPieceErrorMessage 
	^ 'Error - Piece already in this position'!
!TerniLapilli methodsFor: 'error check' stamp: 'FG 11/1/2020 15:24:38' prior: 50910079!
checkThatImNotStackingPiecesIn: aPosition 
	((playerX pieces union: playerO pieces) includes: aPosition) ifTrue: [self error: TerniLapilli cantStackPieces].! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 15:26:23'!
cantMoveAPieceYouDontHave
	^'Error - Can not move piece because you dont have it'.! !

!methodRemoval: TerniLapilli class #cantMoveInvalidPiece stamp: 'FG 11/1/2020 15:26:28'!
cantMoveInvalidPiece
	^'Error - Cant move invalid piece'.!
!TerniLapilli methodsFor: 'error check' stamp: 'FG 11/1/2020 15:26:49' prior: 50911038!
checkThatPlayer: aPlayer isNotBreakingAnyRulesWhileMovingAPieceFrom: originPosition to: destinationPosition

	aPlayer checkThatIHaveThreePieces.
	(aPlayer hadPieceIn: originPosition) ifFalse: [self error: TerniLapilli cantMoveAPieceYouDontHave].
	self checkIfMovementRulesAreRespectedByMovingFrom: originPosition to: destinationPosition.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 15:27:29'!
cantBreakMovementRules
	 ^ 'Error - You are performing a movement against the rules'.! !

!methodRemoval: TerniLapilli class #cantMoveThroughBoardLines stamp: 'FG 11/1/2020 15:27:34'!
cantMoveThroughBoardLines
	 ^ 'Error - You must move using the board lines'.!
!TerniLapilli methodsFor: 'error check' stamp: 'FG 11/1/2020 15:27:52' prior: 50910518!
checkIfMovementRulesAreRespectedByMovingFrom: originPosition to: destinationPosition.

	((originPosition fourNeighbors includes: destinationPosition) not and: [((originPosition = (2@2)) or: [destinationPosition  = (2@2)]) not]) 
		ifTrue: [self error: 	TerniLapilli cantBreakMovementRules].! !

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 11/1/2020 15:28:52'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 11/1/2020 15:28:52'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 11/1/2020 15:28:52'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 11/1/2020 15:28:52'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 11/1/2020 15:28:52'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 11/1/2020 15:28:53'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 11/1/2020 15:28:53'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 11/1/2020 15:28:53'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 11/1/2020 15:28:53'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 11/1/2020 15:28:53'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 11/1/2020 15:28:53'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 11/1/2020 15:28:53'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 11/1/2020 15:28:53'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 11/1/2020 15:28:53'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 11/1/2020 15:28:53'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 11/1/2020 15:28:53'!
ERROR!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 11/1/2020 15:28:53'!
ERROR!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 11/1/2020 15:28:53'!
ERROR!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 11/1/2020 15:28:53'!
ERROR!

!testRun: #TerniLapilliTest #test20PlayerXCantPutAPieceDuringOTurn stamp: 'FG 11/1/2020 15:28:53'!
ERROR!

!testRun: #TerniLapilliTest #test21PlayerOCantPutAPieceDuringXTurn stamp: 'FG 11/1/2020 15:28:53'!
ERROR!

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 11/1/2020 15:28:53'!
ERROR!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 11/1/2020 15:28:53'!
ERROR!

!testRun: #TerniLapilliTest #test24PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 11/1/2020 15:28:53'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 15:28:53'!
ERROR!

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 15:28:53'!
ERROR!

!testRun: #TerniLapilliTest #test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 11/1/2020 15:28:53'!
ERROR!

!testRun: #TerniLapilliTest #test28PlayerOCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 11/1/2020 15:28:53'!
ERROR!

!testRun: #TerniLapilliTest #test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 11/1/2020 15:28:53'!
ERROR!

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 11/1/2020 15:28:53'!
ERROR!

!testRun: #TerniLapilliTest #test31PlayerXCantMoveDuringPlayerOTurn stamp: 'FG 11/1/2020 15:28:53'!
ERROR!

!testRun: #TerniLapilliTest #test32PlayerOCantMoveDuringPlayerXTurn stamp: 'FG 11/1/2020 15:28:53'!
ERROR!

!testRun: #TerniLapilliTest #test33PlayerXMustMoveThroughBoardLines stamp: 'FG 11/1/2020 15:28:53'!
ERROR!

!testRun: #TerniLapilliTest #test34PlayerOMustMoveThroughBoardLines stamp: 'FG 11/1/2020 15:28:53'!
ERROR!

!testRun: #TerniLapilliTest #test35PlayerXCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 11/1/2020 15:28:53'!
ERROR!

!testRun: #TerniLapilliTest #test36PlayerOCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 11/1/2020 15:28:53'!
ERROR!

!testRun: #TerniLapilliTest #test37PlayerXCantMoveAPieceWhenGameIsOver stamp: 'FG 11/1/2020 15:28:53'!
PASSED!

!testRun: #TerniLapilliTest #test38PlayerOCantMoveAPieceWhenGameIsOver stamp: 'FG 11/1/2020 15:28:53'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 15:30:40' prior: 50909085!
test36PlayerOCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 1@1.
	terniLapilli  putOAt: 2@2.
	terniLapilli putXAt: 3@3.
	
	self should: [terniLapilli moveOFrom: 2@2 to: 1@2] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMovePieceBeforeHavingThreePiecesOnTheBoard ].

	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 15:31:04' prior: 50908821!
test35PlayerXCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 1@1.
	terniLapilli  putOAt: 2@2.
	
	self should: [terniLapilli moveXFrom: 1@1 to: 1@2] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMovePieceBeforeHavingThreePiecesOnTheBoard].

	
	! !

!testRun: #TerniLapilliTest #test36PlayerOCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 11/1/2020 15:31:09'!
PASSED!

!testRun: #TerniLapilliTest #test35PlayerXCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 11/1/2020 15:31:12'!
PASSED!

!testRun: #TerniLapilliTest #test37PlayerXCantMoveAPieceWhenGameIsOver stamp: 'FG 11/1/2020 15:31:15'!
PASSED!

!testRun: #TerniLapilliTest #test38PlayerOCantMoveAPieceWhenGameIsOver stamp: 'FG 11/1/2020 15:31:18'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 15:31:53' prior: 50908641!
test34PlayerOMustMoveThroughBoardLines

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 3@2.
	terniLapilli putOAt: 1@1.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	terniLapilli moveXFrom: 3@2 to: 3@1.
	
	self should: [terniLapilli moveOFrom: 2@3 to: 1@2] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantBreakMovementRules].

	
	! !

!testRun: #TerniLapilliTest #test34PlayerOMustMoveThroughBoardLines stamp: 'FG 11/1/2020 15:31:55'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 15:32:12' prior: 50908589!
test33PlayerXMustMoveThroughBoardLines

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 3@2.
	terniLapilli putOAt: 1@1.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	
	self should: [terniLapilli moveXFrom: 2@1 to: 1@2] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantBreakMovementRules].

	
	! !

!testRun: #TerniLapilliTest #test33PlayerXMustMoveThroughBoardLines stamp: 'FG 11/1/2020 15:32:14'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 15:32:30' prior: 50908059!
test32PlayerOCantMoveDuringPlayerXTurn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 3@2.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	
	self should: [terniLapilli moveOFrom: 2@2 to: 1@1] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayIfItsNotMyTurn].

	
	! !

!testRun: #TerniLapilliTest #test32PlayerOCantMoveDuringPlayerXTurn stamp: 'FG 11/1/2020 15:32:33'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 15:32:41' prior: 50907898!
test31PlayerXCantMoveDuringPlayerOTurn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 3@2.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	
	self should: [terniLapilli moveXFrom: 2@1 to: 1@1 ] raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayIfItsNotMyTurn].

	

	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 15:32:45' prior: 50911601!
test31PlayerXCantMoveDuringPlayerOTurn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 3@2.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	
	self should: [terniLapilli moveXFrom: 2@1 to: 1@1 ] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayIfItsNotMyTurn].

	

	
	
	! !

!testRun: #TerniLapilliTest #test31PlayerXCantMoveDuringPlayerOTurn stamp: 'FG 11/1/2020 15:32:48'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 15:32:54' prior: 50911580!
test32PlayerOCantMoveDuringPlayerXTurn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 3@2.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	
	self should: [terniLapilli moveOFrom: 2@2 to: 1@1] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayIfItsNotMyTurn].

	
	! !

!testRun: #TerniLapilliTest #test32PlayerOCantMoveDuringPlayerXTurn stamp: 'FG 11/1/2020 15:32:56'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 15:33:30' prior: 50907761!
test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 3@2.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	terniLapilli moveXFrom: 2@1 to: 1@1. 
	
	self should: [terniLapilli moveOFrom: 2@2 to: 1@1 ] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantStackPieces ].
	self should: [terniLapilli moveOFrom:  2@2 to: 1@2] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantStackPieces ].

	

	
	
	! !

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 11/1/2020 15:33:34'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 15:33:58' prior: 50907473!
test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 2@2.
	terniLapilli putOAt: 2@1.
	terniLapilli putXAt: 3@2.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	
	self should: [terniLapilli moveXFrom: 2@2 to: 2@1 ] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantStackPieces].
	self should: [terniLapilli moveXFrom:  2@2 to: 3@2] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantStackPieces].

	

	
	
	! !

!testRun: #TerniLapilliTest #test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 11/1/2020 15:34:01'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 15:35:19' prior: 50907238!
test28PlayerOCantMoveAPieceToANonExistentPositionInTheBoard

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@1.
	terniLapilli putXAt: 3@1.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	terniLapilli moveXFrom: 1@1 to: 2@2. 
	
	self should: [terniLapilli moveOFrom: 2@1 to: 0@4 ] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMovePIeceToAnInvalidPosition].
	self should: [terniLapilli moveOFrom:  2@1 to: 2.3@2] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMovePIeceToAnInvalidPosition].

	

	
	
	! !

!testRun: #TerniLapilliTest #test28PlayerOCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 11/1/2020 15:35:22'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 15:36:00' prior: 50907115!
test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@1.
	terniLapilli putXAt: 3@1.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	
	self should: [terniLapilli moveXFrom: 1@1 to: 0@4 ] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMovePIeceToAnInvalidPosition].
	self should: [terniLapilli moveXFrom:  1@1 to: 2.3@2] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMovePIeceToAnInvalidPosition].

	

	
	
	! !

!testRun: #TerniLapilliTest #test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 11/1/2020 15:36:05'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 15:36:57' prior: 50906779!
test26PlayerOCantMoveAPieceThatHeDoesntOwn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@1.
	terniLapilli putXAt: 3@1.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	terniLapilli moveXFrom: 3@1 to: 3@2.  
	
	self should: [terniLapilli moveOFrom: 3@4 to: 2@2 ] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveAPieceYouDontHave].
	self should: [terniLapilli moveOFrom:  1.3@3 to: 2@2] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveAPieceYouDontHave].
	self should: [terniLapilli moveOFrom:  3@3 to: 2@2] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveAPieceYouDontHave].
	self should: [terniLapilli moveOFrom:  1@1 to: 2@2] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveAPieceYouDontHave].

	

	
	
	! !

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 15:37:09'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 15:37:43' prior: 50906597!
test25PlayerXCantMoveAPieceThatHeDoesntOwn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@1.
	terniLapilli putXAt: 3@1.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	
	self should: [terniLapilli moveXFrom: 3@4 to: 2@2 ] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveAPieceYouDontHave ].
	self should: [terniLapilli moveXFrom:  1.3@3 to: 2@2] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveAPieceYouDontHave ].
	self should: [terniLapilli moveXFrom:  3@3 to: 2@2] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveAPieceYouDontHave ].
	self should: [terniLapilli moveXFrom:  1@2 to: 2@2] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveAPieceYouDontHave ].

	

	
	
	! !

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 15:37:47'!
FAILURE!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 15:37:47'!
FAILURE!

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 15:38:12'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 15:38:19'!
FAILURE!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 15:38:19'!
FAILURE!

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 15:39:03'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 15:40:34' prior: 50904449!
test16PlayerXCantPutAPieceInAInvalidPosition

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self should: [terniLapilli putXAt: 1@4] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMovePIeceToAnInvalidPosition ].
	self should: [terniLapilli putXAt: 2.3@3] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMovePIeceToAnInvalidPosition ].
	

	

	
	
	! !

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 11/1/2020 15:40:37'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 15:41:07' prior: 50905663!
test17PlayerOCantPutAPieceInAInvalidPosition

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@2. 
	
	self should: [terniLapilli putOAt:0@4] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMovePIeceToAnInvalidPosition ].
	self should: [terniLapilli putOAt: 2.5@3]
		 raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMovePIeceToAnInvalidPosition ].
	

	

	
	
	! !

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 11/1/2020 15:41:09'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 15:41:24' prior: 50905689!
test18PlayerXCantPutAPieceInAPositionWithAnotherPiece

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@2. 
	terniLapilli putOAt:1@3. 
	
	self should: [terniLapilli putXAt: 1@3] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantStackPieces ].
	
	self should: [terniLapilli putXAt: 1@2]
		 raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantStackPieces ].
	

	

	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 15:41:44' prior: 50905713!
test19PlayerOCantPutAPieceInAPositionWithAnotherPiece

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@2. 
	
	self should: [terniLapilli putOAt:1@2] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantStackPieces ].
	
	terniLapilli putOAt: 1@3. 
	terniLapilli putXAt: 1@1.
	
	self should: [ terniLapilli putOAt: 1@3]
		 raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantStackPieces ].
	

	

	
	
	! !

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 11/1/2020 15:41:49'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 15:42:02' prior: 50906266!
test20PlayerXCantPutAPieceDuringOTurn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1. 
	
	self should: [terniLapilli putXAt:1@3] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayIfItsNotMyTurn ].
		


	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 15:42:11' prior: 50906325!
test21PlayerOCantPutAPieceDuringXTurn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	
	self should: [terniLapilli putOAt: 1@2.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPlayIfItsNotMyTurn ].

	

	
	
	! !

!testRun: #TerniLapilliTest #test20PlayerXCantPutAPieceDuringOTurn stamp: 'FG 11/1/2020 15:42:13'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPutAPieceDuringXTurn stamp: 'FG 11/1/2020 15:42:15'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 15:42:37' prior: 50905772!
test22PlayerXCantPutMoreThanThreePieces

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 1@3.
	terniLapilli putXAt: 3@3.
	terniLapilli putOAt: 1@2.
	
	self should: [terniLapilli putXAt: 2@3.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutPieceIfThereIsThreePiecesOnBoard ].

	

	
	
	! !

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 11/1/2020 15:42:39'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 15:42:55' prior: 50905963!
test23PlayerOCantPutMoreThanThreePieces

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.
	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@2.
	terniLapilli putXAt: 2@1.
	terniLapilli putOAt: 1@3.
	terniLapilli putXAt: 3@3.
	terniLapilli putOAt: 1@2.
	terniLapilli moveXFrom: 3@3 to:2@3. 
	
	self should: [terniLapilli putOAt: 3@3.] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantPutPieceIfThereIsThreePiecesOnBoard].

	

	
	
	! !

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 11/1/2020 15:43:00'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 11/1/2020 15:43:06'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 15:43:08'!
FAILURE!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 15:43:08'!
FAILURE!

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 15:43:12'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 15:44:17' prior: 50911810!
test25PlayerXCantMoveAPieceThatHeDoesntOwn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@1.
	terniLapilli putXAt: 3@1.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	
	terniLapilli moveXFrom: 3@4 to: 2@2.
	
	self should: [terniLapilli moveXFrom: 3@4 to: 2@2 ] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveAPieceYouDontHave ].
	self should: [terniLapilli moveXFrom:  1.3@3 to: 2@2] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveAPieceYouDontHave ].
	self should: [terniLapilli moveXFrom:  3@3 to: 2@2] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveAPieceYouDontHave ].
	self should: [terniLapilli moveXFrom:  1@2 to: 2@2] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveAPieceYouDontHave ].

	

	
	
	! !

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 15:44:18'!
ERROR!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 15:44:18'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 15:44:43' prior: 50912041!
test25PlayerXCantMoveAPieceThatHeDoesntOwn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@1.
	terniLapilli putXAt: 3@1.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	
	terniLapilli moveXFrom: 3@4 to: 2@2.
	
	self should: [terniLapilli moveXFrom: 3@4 to: 2@2 ] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveAPieceYouDontHave ].
	self should: [terniLapilli moveXFrom:  1.3@3 to: 2@2] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveAPieceYouDontHave ].
	self should: [terniLapilli moveXFrom:  3@3 to: 2@2] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveAPieceYouDontHave ].
	self should: [terniLapilli moveXFrom:  1@2 to: 2@2] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveAPieceYouDontHave ].

	

	
	
	! !

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 15:44:59'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 15:45:06' prior: 50912083!
test25PlayerXCantMoveAPieceThatHeDoesntOwn

	| terniLapilli |

	terniLapilli := TerniLapilli newGame.

	terniLapilli putXAt: 1@1.
	terniLapilli putOAt: 2@1.
	terniLapilli putXAt: 3@1.
	terniLapilli putOAt: 1@2.
	terniLapilli putXAt: 1@3.
	terniLapilli putOAt: 2@3.
	
	self should: [terniLapilli moveXFrom: 3@4 to: 2@2 ] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveAPieceYouDontHave ].
	self should: [terniLapilli moveXFrom:  1.3@3 to: 2@2] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveAPieceYouDontHave ].
	self should: [terniLapilli moveXFrom:  3@3 to: 2@2] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveAPieceYouDontHave ].
	self should: [terniLapilli moveXFrom:  1@2 to: 2@2] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText = TerniLapilli cantMoveAPieceYouDontHave ].

	

	
	
	! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 15:46:06' prior: 50910978!
moveXFrom: originPosition to: destinationPosition

	self checkThatPlayer: playerX isNotBreakingAnyRulesWhileMovingOrPutingAPieceInto: destinationPosition.
	self checkThatPlayer: playerX isNotBreakingAnyRulesWhileMovingAPieceFrom: originPosition  to: destinationPosition. 
	
	playerX movePieceFrom: originPosition to: destinationPosition. 
	self passTurn.
	gameEnded := playerX checkIfWonWith: winningCombinations.! !

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 15:46:16'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 15:46:17'!
PASSED!
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 15:47:14'!
moveFrom: originPosition to: destinationPosition by: aPlayer

	self checkThatPlayer: aPlayer isNotBreakingAnyRulesWhileMovingOrPutingAPieceInto: destinationPosition.
	self checkThatPlayer: aPlayer isNotBreakingAnyRulesWhileMovingAPieceFrom: originPosition  to: destinationPosition. 
	
	aPlayer movePieceFrom: originPosition to: destinationPosition. 
	self passTurn.
	gameEnded := aPlayer checkIfWonWith: winningCombinations.! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 15:47:48' prior: 50912156!
moveXFrom: originPosition to: destinationPosition
	self moveFrom: originPosition to: destinationPosition by: playerX. ! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 15:48:07' prior: 50911052!
moveOFrom: originPosition to: destinationPosition 

	self moveFrom: originPosition to: destinationPosition by: playerO. ! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 15:48:20' prior: 50912195!
moveXFrom: originPosition to: destinationPosition

	self moveFrom: originPosition to: destinationPosition by: playerX. ! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 15:49:04'!
putOAt: aPosition by: aPlayer

	self checkThatPlayer: aPlayer isNotBreakingAnyRulesWhileMovingOrPutingAPieceInto: aPosition. 
	aPlayer checkThatIHaveLessThanThreePieces.
	
	aPlayer putPieceIn: aPosition.
	self passTurn.
	gameEnded := aPlayer checkIfWonWith: winningCombinations.! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 15:49:15'!
putAt: aPosition by: aPlayer

	self checkThatPlayer: aPlayer isNotBreakingAnyRulesWhileMovingOrPutingAPieceInto: aPosition. 
	aPlayer checkThatIHaveLessThanThreePieces.
	
	aPlayer putPieceIn: aPosition.
	self passTurn.
	gameEnded := aPlayer checkIfWonWith: winningCombinations.! !

!methodRemoval: TerniLapilli #putOAt:by: stamp: 'FG 11/1/2020 15:49:17'!
putOAt: aPosition by: aPlayer

	self checkThatPlayer: aPlayer isNotBreakingAnyRulesWhileMovingOrPutingAPieceInto: aPosition. 
	aPlayer checkThatIHaveLessThanThreePieces.
	
	aPlayer putPieceIn: aPosition.
	self passTurn.
	gameEnded := aPlayer checkIfWonWith: winningCombinations.!
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 15:49:54' prior: 50910966!
putOAt: aPosition 

	self putAt: aPosition by: playerO. ! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 15:50:17' prior: 50911018!
putXAt: aPosition

	self putAt: aPosition by: playerX ! !
!TerniLapilli methodsFor: 'action' stamp: 'FG 11/1/2020 15:50:19' prior: 50912254!
putXAt: aPosition

	self putAt: aPosition by: playerX. ! !

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 11/1/2020 15:50:37'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 11/1/2020 15:50:37'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 11/1/2020 15:50:37'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 11/1/2020 15:50:37'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPutAPieceDuringOTurn stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPutAPieceDuringXTurn stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test31PlayerXCantMoveDuringPlayerOTurn stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test32PlayerOCantMoveDuringPlayerXTurn stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test33PlayerXMustMoveThroughBoardLines stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test34PlayerOMustMoveThroughBoardLines stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test35PlayerXCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test36PlayerOCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test37PlayerXCantMoveAPieceWhenGameIsOver stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

!testRun: #TerniLapilliTest #test38PlayerOCantMoveAPieceWhenGameIsOver stamp: 'FG 11/1/2020 15:50:38'!
PASSED!

----SNAPSHOT----(1 November 2020 15:50:48) CuisUniversity-4365.image priorSource: 18499029!
!TerniLapilli methodsFor: 'error check' stamp: 'FG 11/1/2020 16:09:11' prior: 50911276!
checkIfValidPosition: aPosition
	(aPosition isIntegerPoint and: [aPosition between: 1@1 and: 3@3]) 
		ifFalse: [self error: TerniLapilli cantMovePIeceToAnInvalidPosition].! !
!TerniLapilli methodsFor: 'error check' stamp: 'FG 11/1/2020 16:10:39' prior: 50911296!
checkThatImNotStackingPiecesIn: aPosition 
	((playerX pieces union: playerO pieces) includes: aPosition) ifTrue: [self error: TerniLapilli cantStackPieces].
	
	! !

Object subclass: #XTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #XTurn category: #'Terni Lapilli' stamp: 'FG 11/1/2020 16:26:11'!
Object subclass: #XTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Object subclass: #OTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #OTurn category: #'Terni Lapilli' stamp: 'FG 11/1/2020 16:26:18'!
Object subclass: #OTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!Player methodsFor: 'initialization' stamp: 'FG 11/1/2020 16:27:16' prior: 50910032!
starting: aBool
	piecesOnBoard := Set new.
	winning := false.
	playing := XTurn new.! !
!Player methodsFor: 'action' stamp: 'FG 11/1/2020 16:28:22' prior: 50910024!
passTurn
	playing passTurn.! !
!Player methodsFor: 'action' stamp: 'FG 11/1/2020 16:29:26' prior: 50912448!
passTurn
	playing := playing passTurn.! !

Object subclass: #Turn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #Turn category: #'Terni Lapilli' stamp: 'FG 11/1/2020 16:29:46'!
Object subclass: #Turn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Turn subclass: #XTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #XTurn category: #'Terni Lapilli' stamp: 'FG 11/1/2020 16:29:53'!
Turn subclass: #XTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Turn subclass: #OTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #OTurn category: #'Terni Lapilli' stamp: 'FG 11/1/2020 16:29:59'!
Turn subclass: #OTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!OTurn methodsFor: 'no messages' stamp: 'FG 11/1/2020 16:30:22'!
passTurn 
	^ XTurn new.! !
!XTurn methodsFor: 'nil' stamp: 'FG 11/1/2020 16:30:37'!
passTurn
	^ OTurn new.! !
!Player methodsFor: 'error checking' stamp: 'FG 11/1/2020 16:31:41' prior: 50911259!
checkThatIsMyTurn
	playing checkThatIsMyTurn.

	playing ifFalse: [self error: TerniLapilli cantPlayIfItsNotMyTurn].! !
!Player methodsFor: 'error checking' stamp: 'FG 11/1/2020 16:37:21' prior: 50912494!
checkThatIsMyTurn
	playing checkThatIsMyTurn.

	playing ifFalse: [self error: TerniLapilli cantPlayIfItsNotMyTurn].! !

Player subclass: #PlayerX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #PlayerX category: #'Terni Lapilli' stamp: 'FG 11/1/2020 16:37:39'!
Player subclass: #PlayerX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Player subclass: #PlayerO
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #PlayerO category: #'Terni Lapilli' stamp: 'FG 11/1/2020 16:37:43'!
Player subclass: #PlayerO
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'initialization' stamp: 'FG 11/1/2020 16:37:58' prior: 50911173!
initializeGame

	gameEnded  := false.
	playerX := PlayerX new starting: true.
	playerO := PlayerO new starting: false.
       self createWinningCombinations.! !
!PlayerO methodsFor: 'nil' stamp: 'FG 11/1/2020 16:38:44' overrides: 50912501!
checkThatIsMyTurn
	playing checkThatIsOTurn.! !
!PlayerX methodsFor: 'nil' stamp: 'FG 11/1/2020 16:38:56' overrides: 50912501!
checkThatIsMyTurn
	playing checkThatIsXTurn.! !
!Player methodsFor: 'error checking' stamp: 'FG 11/1/2020 16:39:21' prior: 50912501!
checkThatIsMyTurn
	self subclassResponsibility.
	"playing ifFalse: [self error: TerniLapilli cantPlayIfItsNotMyTurn]."! !
!Player methodsFor: 'initialization' stamp: 'FG 11/1/2020 16:40:14'!
starting
	piecesOnBoard := Set new.
	winning := false.
	playing := XTurn new.! !

!methodRemoval: Player #starting stamp: 'FG 11/1/2020 16:40:18'!
starting
	piecesOnBoard := Set new.
	winning := false.
	playing := XTurn new.!
!Player methodsFor: 'initialization' stamp: 'FG 11/1/2020 16:41:10'!
starting
	piecesOnBoard := Set new.
	winning := false.
	playing := XTurn new.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 16:41:10' prior: 50912529!
initializeGame

	gameEnded  := false.
	playerX := PlayerX new starting.
	playerO := PlayerO new starting.
       self createWinningCombinations.! !

!methodRemoval: Player #starting: stamp: 'FG 11/1/2020 16:41:10'!
starting: aBool
	piecesOnBoard := Set new.
	winning := false.
	playing := XTurn new.!
!OTurn methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 16:42:12'!
checkIfXTurn
	self error: TerniLapilli cantPlayIfItsNotMyTurn.! !
!OTurn methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 16:42:26'!
checkIfOTurn! !
!XTurn methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 16:43:17'!
checkIfOTurn
	self error: TerniLapilli cantPlayIfItsNotMyTurn.! !
!XTurn methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 16:43:27'!
checkIfXTurn! !

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 11/1/2020 16:43:38'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 11/1/2020 16:43:38'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 11/1/2020 16:43:38'!
FAILURE!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 11/1/2020 16:43:38'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test20PlayerXCantPutAPieceDuringOTurn stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test21PlayerOCantPutAPieceDuringXTurn stamp: 'FG 11/1/2020 16:43:38'!
FAILURE!

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test24PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test28PlayerOCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test31PlayerXCantMoveDuringPlayerOTurn stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test32PlayerOCantMoveDuringPlayerXTurn stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test33PlayerXMustMoveThroughBoardLines stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test34PlayerOMustMoveThroughBoardLines stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test35PlayerXCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test36PlayerOCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test37PlayerXCantMoveAPieceWhenGameIsOver stamp: 'FG 11/1/2020 16:43:38'!
ERROR!

!testRun: #TerniLapilliTest #test38PlayerOCantMoveAPieceWhenGameIsOver stamp: 'FG 11/1/2020 16:43:38'!
ERROR!
!PlayerO methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 16:44:22' prior: 50912537 overrides: 50912546!
checkThatIsMyTurn
	playing checkIfOTurn.! !
!PlayerX methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 16:44:31' prior: 50912541 overrides: 50912546!
checkThatIsMyTurn
	playing checkIfXTurn.! !

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 11/1/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 11/1/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 11/1/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 11/1/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 11/1/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 11/1/2020 16:44:38'!
FAILURE!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 11/1/2020 16:44:38'!
FAILURE!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 11/1/2020 16:44:38'!
FAILURE!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 11/1/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 11/1/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 11/1/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 11/1/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 11/1/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 11/1/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 11/1/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 11/1/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 11/1/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 11/1/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 11/1/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPutAPieceDuringOTurn stamp: 'FG 11/1/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPutAPieceDuringXTurn stamp: 'FG 11/1/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 11/1/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 11/1/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 11/1/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 11/1/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 11/1/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 11/1/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 11/1/2020 16:44:39'!
PASSED!

!testRun: #TerniLapilliTest #test31PlayerXCantMoveDuringPlayerOTurn stamp: 'FG 11/1/2020 16:44:39'!
PASSED!

!testRun: #TerniLapilliTest #test32PlayerOCantMoveDuringPlayerXTurn stamp: 'FG 11/1/2020 16:44:39'!
PASSED!

!testRun: #TerniLapilliTest #test33PlayerXMustMoveThroughBoardLines stamp: 'FG 11/1/2020 16:44:39'!
PASSED!

!testRun: #TerniLapilliTest #test34PlayerOMustMoveThroughBoardLines stamp: 'FG 11/1/2020 16:44:39'!
PASSED!

!testRun: #TerniLapilliTest #test35PlayerXCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 11/1/2020 16:44:39'!
PASSED!

!testRun: #TerniLapilliTest #test36PlayerOCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 11/1/2020 16:44:39'!
PASSED!

!testRun: #TerniLapilliTest #test37PlayerXCantMoveAPieceWhenGameIsOver stamp: 'FG 11/1/2020 16:44:39'!
PASSED!

!testRun: #TerniLapilliTest #test38PlayerOCantMoveAPieceWhenGameIsOver stamp: 'FG 11/1/2020 16:44:39'!
PASSED!
!PlayerX methodsFor: 'nil' stamp: 'FG 11/1/2020 16:45:54' overrides: 50910361!
isPlaying
	playing isPlayingX.! !
!PlayerO methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 16:46:15' overrides: 50910361!
isPlaying
	playing isPlayingO.! !
!Player methodsFor: 'accessing' stamp: 'FG 11/1/2020 16:46:33' prior: 50910361!
isPlaying
	^ self subclassResponsibility.! !
!PlayerO methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 16:46:40' prior: 50912884 overrides: 50912888!
isPlaying
	^ playing isPlayingO.! !
!PlayerX methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 16:46:47' prior: 50912879 overrides: 50912888!
isPlaying
	^ playing isPlayingX.! !
!OTurn methodsFor: 'nil' stamp: 'FG 11/1/2020 16:47:03'!
isPlayingX
	^ false.! !
!OTurn methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 16:47:09'!
isPlayingO
	^ true.! !
!XTurn methodsFor: 'nil' stamp: 'FG 11/1/2020 16:47:48'!
isPlayingX
	^true.
	! !
!XTurn methodsFor: 'as yet unclassified' stamp: 'FG 11/1/2020 16:47:55'!
isPlayingO
	^false.
	! !

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 11/1/2020 16:48:00'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 11/1/2020 16:48:00'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 11/1/2020 16:48:00'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 11/1/2020 16:48:00'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 11/1/2020 16:48:00'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 11/1/2020 16:48:00'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 11/1/2020 16:48:00'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPutAPieceDuringOTurn stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPutAPieceDuringXTurn stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test31PlayerXCantMoveDuringPlayerOTurn stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test32PlayerOCantMoveDuringPlayerXTurn stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test33PlayerXMustMoveThroughBoardLines stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test34PlayerOMustMoveThroughBoardLines stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test35PlayerXCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test36PlayerOCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test37PlayerXCantMoveAPieceWhenGameIsOver stamp: 'FG 11/1/2020 16:48:01'!
PASSED!

!testRun: #TerniLapilliTest #test38PlayerOCantMoveAPieceWhenGameIsOver stamp: 'FG 11/1/2020 16:48:01'!
PASSED!
!Player methodsFor: 'error checking' stamp: 'FG 11/1/2020 16:48:42' prior: 50912546!
checkThatIsMyTurn
	self subclassResponsibility.! !

Object subclass: #Game
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #Game category: #'Terni Lapilli' stamp: 'FG 11/1/2020 16:54:51'!
Object subclass: #Game
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Object subclass: #GameState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #GameState category: #'Terni Lapilli' stamp: 'FG 11/1/2020 16:54:55'!
Object subclass: #GameState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #Game stamp: 'FG 11/1/2020 16:54:57'!
Object subclass: #Game
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

GameState subclass: #OngoingGame
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #OngoingGame category: #'Terni Lapilli' stamp: 'FG 11/1/2020 16:55:13'!
GameState subclass: #OngoingGame
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

GameState subclass: #GameOver
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #GameOver category: #'Terni Lapilli' stamp: 'FG 11/1/2020 16:55:33'!
GameState subclass: #GameOver
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

GameState subclass: #GameOngoing
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #GameOngoing category: #'Terni Lapilli' stamp: 'FG 11/1/2020 16:55:50'!
GameState subclass: #GameOngoing
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #OngoingGame stamp: 'FG 11/1/2020 16:55:54'!
GameState subclass: #OngoingGame
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'initialization' stamp: 'FG 11/1/2020 16:56:08' prior: 50912568!
initializeGame

	gameEnded  := GameOngoing new.
	playerX := PlayerX new starting.
	playerO := PlayerO new starting.
       self createWinningCombinations.! !
!TerniLapilli methodsFor: 'initialization' stamp: 'FG 11/1/2020 16:58:51' prior: 50913124!
initializeGame

	gameEnded  := false.
	playerX := PlayerX new starting.
	playerO := PlayerO new starting.
       self createWinningCombinations.! !

!classRemoval: #GameOver stamp: 'FG 11/1/2020 16:59:01'!
GameState subclass: #GameOver
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #GameOngoing stamp: 'FG 11/1/2020 16:59:01'!
GameState subclass: #GameOngoing
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #GameState stamp: 'FG 11/1/2020 16:59:02'!
Object subclass: #GameState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPutAPieceDuringOTurn stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPutAPieceDuringXTurn stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test31PlayerXCantMoveDuringPlayerOTurn stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test32PlayerOCantMoveDuringPlayerXTurn stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test33PlayerXMustMoveThroughBoardLines stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test34PlayerOMustMoveThroughBoardLines stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test35PlayerXCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test36PlayerOCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test37PlayerXCantMoveAPieceWhenGameIsOver stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

!testRun: #TerniLapilliTest #test38PlayerOCantMoveAPieceWhenGameIsOver stamp: 'FG 11/1/2020 16:59:18'!
PASSED!

(1@2) transposed !
!TerniLapilli methodsFor: 'initialization' stamp: 'FG 11/1/2020 17:03:57' prior: 50911155!
createCombinationsForEachColumn

	|boardLines combinationsForEachColumn|
	
	boardLines := 	#(1 2 3).
	
	boardLines do:[ :column |
		     combinationsForEachColumn := Set new. 
		     boardLines do: [:row | combinationsForEachColumn add: row@column].
		     winningCombinations add: combinationsForEachColumn.
		].
	
	^ combinationsForEachColumn.
	
	
	
	! !

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPutAPieceDuringOTurn stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPutAPieceDuringXTurn stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test31PlayerXCantMoveDuringPlayerOTurn stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test32PlayerOCantMoveDuringPlayerXTurn stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test33PlayerXMustMoveThroughBoardLines stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test34PlayerOMustMoveThroughBoardLines stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test35PlayerXCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test36PlayerOCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test37PlayerXCantMoveAPieceWhenGameIsOver stamp: 'FG 11/1/2020 17:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test38PlayerOCantMoveAPieceWhenGameIsOver stamp: 'FG 11/1/2020 17:04:02'!
PASSED!
!TerniLapilli methodsFor: 'error check' stamp: 'FG 11/1/2020 17:09:23'!
checkIf: destinationPosition isNotOneOfThe4NeighborsOf: originPosition	
	
	^ (originPosition fourNeighbors includes: destinationPosition) not ! !
!TerniLapilli methodsFor: 'error check' stamp: 'FG 11/1/2020 17:12:24'!
checkThatCenterPositionIsNot: originPosition Or: destinationPosition

	^ ((originPosition = (2@2)) or: [destinationPosition  = (2@2)]) not 
! !
!TerniLapilli methodsFor: 'error check' stamp: 'FG 11/1/2020 17:13:22' prior: 50911340!
checkIfMovementRulesAreRespectedByMovingFrom: originPosition to: destinationPosition.

	((originPosition fourNeighbors includes: destinationPosition) not 
		and: [self checkThatCenterPositionIsNot: originPosition Or: destinationPosition]) 
			ifTrue: [self error: 	TerniLapilli cantBreakMovementRules].! !
!TerniLapilli methodsFor: 'error check' stamp: 'FG 11/1/2020 17:14:25' prior: 50913461!
checkIfMovementRulesAreRespectedByMovingFrom: originPosition to: destinationPosition.

	( (self checkIf: destinationPosition  isNotOneOfThe4NeighborsOf: originPosition) and: [self checkThatCenterPositionIsNot: destinationPosition Or: originPosition]) 
			ifTrue: [self error: 	TerniLapilli cantBreakMovementRules].! !

!testRun: #TerniLapilliTest #test01PlayerXPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 11/1/2020 17:14:51'!
PASSED!

!testRun: #TerniLapilliTest #test02PlayerXPutsAPieceInAnEmptyAndDifferentPositionOnTheBoard stamp: 'FG 11/1/2020 17:14:51'!
PASSED!

!testRun: #TerniLapilliTest #test03PlayerOPutsAPieceInAnEmptyPositionOnTheBoard stamp: 'FG 11/1/2020 17:14:51'!
PASSED!

!testRun: #TerniLapilliTest #test04GameIsntOverAtTheBegginnig stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayersHadntWonAtTheBegginnig stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test06IsTurnOfXAtTheBeggining stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test07IsTurnOfOAfterXPlayed stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test08IsTurnOfXAfterOPlayed stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXMovesAPiece stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test10PlayerOMovesAPiece stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test11PlayerXWinsWithThreePiecesInARow stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test12PlayerXWinsWithThreePiecesInAColumn stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test13PlayerXWinsWithThreePiecesInTheIncreasingDiagonal stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test14PlayerXWinsWithThreePiecesInTheDecreasingDiagonal stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerOWinsWithThreePiecesInAWinningCombination stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerXCantPutAPieceInAInvalidPosition stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerOCantPutAPieceInAInvalidPosition stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerXCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerOCantPutAPieceInAPositionWithAnotherPiece stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerXCantPutAPieceDuringOTurn stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test21PlayerOCantPutAPieceDuringXTurn stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test22PlayerXCantPutMoreThanThreePieces stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test23PlayerOCantPutMoreThanThreePieces stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test24PlayerOCantPutAPieceWhenGameIsOver stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test25PlayerXCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test26PlayerOCantMoveAPieceThatHeDoesntOwn stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test27PlayerXCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test28PlayerOCantMoveAPieceToANonExistentPositionInTheBoard stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test29PlayerXCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test30PlayerOCantMoveAPieceToAPositionOccupiedByAnotherPiece stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test31PlayerXCantMoveDuringPlayerOTurn stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test32PlayerOCantMoveDuringPlayerXTurn stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test33PlayerXMustMoveThroughBoardLines stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test34PlayerOMustMoveThroughBoardLines stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test35PlayerXCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test36PlayerOCantMovePiecesIfThereAreLessThanThreeXPiecesInTheBoard stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test37PlayerXCantMoveAPieceWhenGameIsOver stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test38PlayerOCantMoveAPieceWhenGameIsOver stamp: 'FG 11/1/2020 17:14:52'!
PASSED!

----QUIT----(1 November 2020 17:21:11) CuisUniversity-4365.image priorSource: 18583986!