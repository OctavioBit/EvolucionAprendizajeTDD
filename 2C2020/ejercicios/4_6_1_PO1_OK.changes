

----End fileIn of /home/grosinov/linux64/Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 19:13:22'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 19:13:22'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 19:13:26'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/2/2020 19:13:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 19:13:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/2/2020 19:13:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/2/2020 19:13:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/2/2020 19:13:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/2/2020 19:13:36'!
PASSED!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'GR 11/2/2020 19:25:38' prior: 50925021!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
	
	^ transaction! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'GR 11/2/2020 19:26:38' prior: 50925123!
balance

	^transactions sum: [ :aTransaction | aTransaction addToBalanceDependingOnTransaction ] ifEmpty: [ 0 ]! !
!AccountTransaction methodsFor: 'value' stamp: 'GR 11/2/2020 19:27:07'!
addToBalanceDependingOnTransaction

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'GR 11/2/2020 19:27:31' overrides: 50925183!
addToBalanceDependingOnTransaction

	^ value! !
!Withdraw methodsFor: 'value' stamp: 'GR 11/2/2020 19:27:52' overrides: 50925183!
addToBalanceDependingOnTransaction

	^ value negated! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 19:28:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 19:28:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/2/2020 19:28:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 19:28:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 19:28:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/2/2020 19:28:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/2/2020 19:28:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/2/2020 19:28:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/2/2020 19:28:20'!
PASSED!

TestCase subclass: #ProtfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ProtfolioTest category: 'Portfolio-Ejercicio' stamp: 'GR 11/2/2020 19:29:04'!
TestCase subclass: #ProtfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'GR 11/2/2020 19:31:08'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ProtfolioTest methodsFor: 'nil' stamp: 'GR 11/2/2020 19:30:51'!
test01CanCreateAnEmptyPortfolio

	self assert: Portfolio new isEmpty.! !

Object subclass: #Portfolio
	instanceVariableNames: 'grouping'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'GR 11/2/2020 19:32:06'!
Object subclass: #Portfolio
	instanceVariableNames: 'grouping'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'GR 11/2/2020 19:32:18'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 19:32:34' prior: 50925250!
test01CanCreateAnEmptyPortfolio

	! !

!classRemoval: #Portfolio stamp: 'GR 11/2/2020 19:32:39'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'GR 11/2/2020 19:36:08'!
Object subclass: #Portfolio
	instanceVariableNames: 'contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 19:32:54' prior: 50925279!
test01CanCreateAnEmptyPortfolio

	self assert: Portfolio new isEmpty.! !

!testRun: #ProtfolioTest #test01CanCreateAnEmptyPortfolio stamp: 'GR 11/2/2020 19:36:12'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 19:36:23'!
isEmpty
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 19:36:32' prior: 50925305!
isEmpty
	
	contents isEmpty.! !

!testRun: #ProtfolioTest #test01CanCreateAnEmptyPortfolio stamp: 'GR 11/2/2020 19:36:33'!
ERROR!
!Portfolio methodsFor: 'nil' stamp: 'GR 11/2/2020 19:37:36' overrides: 16896425!
initialize

	contents := Set new.! !

!testRun: #ProtfolioTest #test01CanCreateAnEmptyPortfolio stamp: 'GR 11/2/2020 19:37:46'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 19:38:01' prior: 50925309!
isEmpty
	
	^ contents isEmpty.! !

!testRun: #ProtfolioTest #test01CanCreateAnEmptyPortfolio stamp: 'GR 11/2/2020 19:38:02'!
PASSED!

!testRun: #ProtfolioTest #test01CanCreateAnEmptyPortfolio stamp: 'GR 11/2/2020 19:38:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/2/2020 19:38:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 19:38:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 19:38:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/2/2020 19:38:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/2/2020 19:38:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/2/2020 19:38:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/2/2020 19:38:02'!
PASSED!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 19:39:03'!
test02CanAddAnAccountToPortfolio

	! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 19:39:56' prior: 50925297!
test01CanCreateAnEmptyPortfolio

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.! !
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 19:40:50' prior: 50925323!
isEmpty
	
	^ true! !

!testRun: #ProtfolioTest #test01CanCreateAnEmptyPortfolio stamp: 'GR 11/2/2020 19:40:53'!
ERROR!

!testRun: #ProtfolioTest #test01CanCreateAnEmptyPortfolio stamp: 'GR 11/2/2020 19:40:53'!
ERROR!

!testRun: #ProtfolioTest #test01CanCreateAnEmptyPortfolio stamp: 'GR 11/2/2020 19:41:00'!
ERROR!

!testRun: #ProtfolioTest #test01CanCreateAnEmptyPortfolio stamp: 'GR 11/2/2020 19:41:00'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 19:41:10'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 19:41:14' prior: 50925388!
balance
	
	^0! !

!testRun: #ProtfolioTest #test01CanCreateAnEmptyPortfolio stamp: 'GR 11/2/2020 19:41:16'!
PASSED!

!testRun: #ProtfolioTest #test01CanCreateAnEmptyPortfolio stamp: 'GR 11/2/2020 19:41:18'!
PASSED!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 19:43:08' prior: 50925360!
test02CanAddAnAccountToPortfolio

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: ReceptiveAccount .
	
	self assert: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 19:43:26' prior: 50925402!
test02CanAddAnAccountToPortfolio

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: ReceptiveAccount new.
	
	self assert: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 19:43:36' prior: 50925412!
test02CanAddAnAccountToPortfolio

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: ReceptiveAccount new.
	
	self deny: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.! !

!testRun: #ProtfolioTest #test02CanAddAnAccountToPortfolio stamp: 'GR 11/2/2020 19:43:39'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/2/2020 19:44:06'!
add: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/2/2020 19:44:34' prior: 50925434!
add: aReceptiveAccount 
	
	contents add: aReceptiveAccount.! !

!testRun: #ProtfolioTest #test02CanAddAnAccountToPortfolio stamp: 'GR 11/2/2020 19:44:36'!
FAILURE!

!testRun: #ProtfolioTest #test02CanAddAnAccountToPortfolio stamp: 'GR 11/2/2020 19:45:01'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 19:45:31' prior: 50925373!
isEmpty
	
	^ contents isEmpty! !

!testRun: #ProtfolioTest #test02CanAddAnAccountToPortfolio stamp: 'GR 11/2/2020 19:45:37'!
PASSED!

!testRun: #ProtfolioTest #test01CanCreateAnEmptyPortfolio stamp: 'GR 11/2/2020 19:45:37'!
PASSED!

!testRun: #ProtfolioTest #test02CanAddAnAccountToPortfolio stamp: 'GR 11/2/2020 19:45:37'!
PASSED!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 19:46:16'!
test03

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: ReceptiveAccount new.
	
	self deny: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 19:47:11'!
test02CanAddAnAccountWithBalanceToPortfolio

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: ReceptiveAccount new.
	
	self deny: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.! !

!methodRemoval: ProtfolioTest #test02CanAddAnAccountToPortfolio stamp: 'GR 11/2/2020 19:47:11'!
test02CanAddAnAccountToPortfolio

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: ReceptiveAccount new.
	
	self deny: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 19:47:58' prior: 50925471!
test02CanAddAnAccountWithBalanceToPortfolio

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio add: account.
	
	self deny: portfolio isEmpty.
	self assert: 100 equals: portfolio balance.! !

!testRun: #ProtfolioTest #test02CanAddAnAccountWithBalanceToPortfolio stamp: 'GR 11/2/2020 19:48:01'!
FAILURE!

!testRun: #ProtfolioTest #test02CanAddAnAccountWithBalanceToPortfolio stamp: 'GR 11/2/2020 19:48:01'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 19:51:39' prior: 50925392!
balance
	
	| totalBalance |
	
	totalBalance := 0. 
	
	contents do: [:anAccount | totalBalance := totalBalance + anAccount balance]. 
	
	^totalBalance.! !

!testRun: #ProtfolioTest #test02CanAddAnAccountWithBalanceToPortfolio stamp: 'GR 11/2/2020 19:51:57'!
PASSED!

!testRun: #ProtfolioTest #test02CanAddAnAccountWithBalanceToPortfolio stamp: 'GR 11/2/2020 19:51:59'!
PASSED!

!testRun: #ProtfolioTest #test01CanCreateAnEmptyPortfolio stamp: 'GR 11/2/2020 19:51:59'!
PASSED!

!testRun: #ProtfolioTest #test02CanAddAnAccountWithBalanceToPortfolio stamp: 'GR 11/2/2020 19:51:59'!
PASSED!

!testRun: #ProtfolioTest #test03 stamp: 'GR 11/2/2020 19:51:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/2/2020 19:51:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 19:51:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 19:51:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/2/2020 19:51:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/2/2020 19:51:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/2/2020 19:51:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/2/2020 19:51:59'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'GR 11/2/2020 20:16:58' prior: 50925177!
balance
	
	| balance |
	
	balance := 0.
	
	transactions do: [ :aTransaction | balance := aTransaction addToBalance: balance].
	
	^balance! !
!Withdraw methodsFor: 'private' stamp: 'GR 11/2/2020 20:17:17'!
addToBalance: aBalance

	^ aBalance - value.! !

!methodRemoval: Withdraw #addToBalanceDependingOnTransaction stamp: 'GR 11/2/2020 20:17:22'!
addToBalanceDependingOnTransaction

	^ value negated!
!Deposit methodsFor: 'private' stamp: 'GR 11/2/2020 20:17:36'!
addToBalance: aBalance

	^ aBalance + value.! !

!methodRemoval: Deposit #addToBalanceDependingOnTransaction stamp: 'GR 11/2/2020 20:17:40'!
addToBalanceDependingOnTransaction

	^ value!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 20:17:46'!
PASSED!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:34:58'!
test03BalanceWithAnAccountAndAPortfolio

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: ReceptiveAccount new.
	
	self deny: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.! !

!methodRemoval: ProtfolioTest #test03 stamp: 'GR 11/2/2020 20:35:04'!
test03

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: ReceptiveAccount new.
	
	self deny: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:35:19'!
test02BalanceWithAnAccount

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio add: account.
	
	self deny: portfolio isEmpty.
	self assert: 100 equals: portfolio balance.! !

!methodRemoval: ProtfolioTest #test02CanAddAnAccountWithBalanceToPortfolio stamp: 'GR 11/2/2020 20:35:19'!
test02CanAddAnAccountWithBalanceToPortfolio

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio add: account.
	
	self deny: portfolio isEmpty.
	self assert: 100 equals: portfolio balance.!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:35:40'!
test01PortfolioStartsWithBalanceCero

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.! !

!methodRemoval: ProtfolioTest #test01CanCreateAnEmptyPortfolio stamp: 'GR 11/2/2020 20:35:40'!
test01CanCreateAnEmptyPortfolio

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:35:52' prior: 50925588!
test03BalanceWithAnAccountAndAPortfolio

	| portfolio subPortfolio |
	
	portfolio := Portfolio new.
	portfolio add: ReceptiveAccount new.
	
	self deny: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:37:22' prior: 50925645!
test03BalanceWithAnAccountAndAPortfolio

	| portfolio account subPortfolio account2 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	Deposit register: 50 on: account2.
	
	portfolio add: account.
	subPortfolio add: account2.
	
	self deny: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:37:45' prior: 50925655!
test03BalanceWithAnAccountAndAPortfolio

	| portfolio account subPortfolio account2 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	Deposit register: 50 on: account2.
	
	portfolio add: account.
	subPortfolio add: account2.
	portfolio add: subPortfolio.
	
	self deny: portfolio isEmpty.
	self assert: 150 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:37:53' prior: 50925672!
test03BalanceWithAnAccountAndAPortfolio

	| portfolio account subPortfolio account2 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	Deposit register: 50 on: account2.
	
	portfolio add: account.
	subPortfolio add: account2.
	portfolio add: subPortfolio.
	
	self assert: 150 equals: portfolio balance.! !

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 20:38:02'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 20:38:02'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 20:38:02'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 20:38:02'!
PASSED!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:38:54' prior: 50925690!
test03BalanceWithAnAccountAndAPortfolio

	| portfolio account subPortfolio account2 account3 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	Deposit register: 50 on: account2.
	Deposit register: 30 on: account3.
	
	portfolio add: account.
	subPortfolio add: account2.
	subPortfolio add: account3.
	portfolio add: subPortfolio.
	
	self assert: 150 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:38:57' prior: 50925720!
test03BalanceWithAnAccountAndAPortfolio

	| portfolio account subPortfolio account2 account3 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	Deposit register: 50 on: account2.
	Deposit register: 30 on: account3.
	
	portfolio add: account.
	subPortfolio add: account2.
	subPortfolio add: account3.
	portfolio add: subPortfolio.
	
	self assert: 180 equals: portfolio balance.! !

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 20:38:59'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 20:38:59'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 20:38:59'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 20:38:59'!
PASSED!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:43:46'!
test04TransactionsWithEmptyPortfolioReturnsNoTransactions

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:44:23' prior: 50925773!
test04TransactionsWithEmptyPortfolioReturnsNoTransactions

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: OrderedCollection new equals: portfolio transactions.! !

!testRun: #ProtfolioTest #test04TransactionsWithEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 20:44:27'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 20:44:56'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 20:45:14' prior: 50925794!
transactions
	
	^ OrderedCollection new.! !

!testRun: #ProtfolioTest #test04TransactionsWithEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 20:45:15'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 20:45:15'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 20:45:15'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 20:45:15'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsWithEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 20:45:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/2/2020 20:45:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 20:45:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 20:45:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/2/2020 20:45:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/2/2020 20:45:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/2/2020 20:45:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/2/2020 20:45:15'!
PASSED!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:45:49'!
test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: OrderedCollection new equals: portfolio transactions.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:46:00'!
test04TransactionsOfEmptyPortfolioReturnsNoTransactions

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: OrderedCollection new equals: portfolio transactions.! !

!methodRemoval: ProtfolioTest #test04TransactionsWithEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 20:46:00'!
test04TransactionsWithEmptyPortfolioReturnsNoTransactions

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: OrderedCollection new equals: portfolio transactions.!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:46:20' prior: 50925846!
test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio add: account.
	
	self assert: OrderedCollection new equals: portfolio transactions.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:48:01' prior: 50925873!
test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio add: account.
	
	self assert: (OrderedCollection with: deposit) equals: portfolio transactions.! !

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 20:48:16'!
FAILURE!
!Portfolio methodsFor: 'initialization' stamp: 'GR 11/2/2020 20:48:52' prior: 50925316 overrides: 16896425!
initialize

	contents := OrderedCollection new.! !

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 20:49:07'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 20:49:09'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 20:49:10'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 20:49:11'!
PASSED!
!Portfolio methodsFor: 'initialization' stamp: 'GR 11/2/2020 20:49:46' prior: 50925905 overrides: 16896425!
initialize

	contents := Set new.! !

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 20:53:33'!
FAILURE!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 20:53:33'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 20:55:25' prior: 50925798!
transactions
	
	| account |
	
	account := contents detect: [:anAccount | true].
	
	^ account transactions.! !

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 20:55:27'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 20:55:33'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 20:55:33'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 20:55:33'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 20:55:33'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 20:55:33'!
ERROR!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 20:55:33'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 20:55:33'!
ERROR!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 20:56:06'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 20:56:06'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 20:56:06'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 20:56:06'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 20:56:06'!
ERROR!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 20:56:06'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 20:56:06'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 20:56:25' prior: 50925937!
transactions
	
	| account |
	
	account := contents detect: [:anAccount | true].
	
	^ account transactions.! !
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 20:56:43' prior: 50926000!
transactions
	
	| account |

	account := contents detect: [:anAccount | true].
	
	^ account transactions.! !
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 20:56:56' prior: 50926007!
transactions
	
	| account |

	account := contents detect: [:anAccount | true] ifNone: [^OrderedCollection new].
	
	^ account transactions.! !

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 20:56:57'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 20:56:59'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 20:56:59'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 20:56:59'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 20:56:59'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 20:56:59'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 20:56:59'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 20:57:24'!
test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio add: account.
	
	self assert: (OrderedCollection with: deposit) equals: portfolio transactions.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 20:58:46' prior: 50926046!
test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction

	| portfolio account subPortfolio account2 deposit1 deposit2 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account.
	deposit2 := Deposit register: 50 on: account2.
	
	portfolio add: account.
	subPortfolio add: account2.
	portfolio add: subPortfolio.
	
	self assert: (OrderedCollection with: deposit1 with: deposit2) equals: portfolio transactions.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 20:59:00' prior: 50925740!
test03BalanceWithAnAccountAndAPortfolio

	| portfolio account subPortfolio account2 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	Deposit register: 50 on: account2.
	
	portfolio add: account.
	subPortfolio add: account2.
	portfolio add: subPortfolio.
	
	self assert: 180 equals: portfolio balance.! !

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 20:59:33'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 21:02:30' prior: 50926013!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	
	contents do: [:anElement | transactions add: anElement transactions].
	
	^ transactions.! !
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 21:05:03' prior: 50926102!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	
	contents do: [:anElement | transactions addAll: anElement transactions].
	
	^ transactions.! !

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:05:04'!
FAILURE!

portfolio transactions!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:12:38' prior: 50926060!
test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction

	| portfolio account subPortfolio account2 deposit1 deposit2 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account.
	deposit2 := Deposit register: 50 on: account2.
	
	portfolio add: account.
	subPortfolio add: account2.
	portfolio add: subPortfolio.
	
	self assert: (OrderedCollection with: deposit2 with: deposit1) equals: portfolio transactions.! !

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:18:00'!
FAILURE!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:18:00'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:18:01'!
FAILURE!

(OrderedCollection with: deposit2 with: deposit1)!

portfolio transactions!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:22:27' prior: 50926124!
test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction

	| portfolio account subPortfolio account2 deposit1 deposit2 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account.
	deposit2 := Deposit register: 50 on: account2.
	
	portfolio add: account.
	subPortfolio add: account2.
	portfolio add: subPortfolio.
	
	self assert: (OrderedCollection with: deposit1 with: deposit2) equals: portfolio transactions.! !

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:22:29'!
FAILURE!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:22:29'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:22:30'!
FAILURE!

(OrderedCollection with: deposit1 with: deposit2)!

portfolio transactions!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:23:51' prior: 50926161!
test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction

	| portfolio account subPortfolio account2 deposit1 deposit2 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account.
	deposit2 := Deposit register: 50 on: account2.
	
	portfolio add: account.
	subPortfolio add: account2.
	portfolio add: subPortfolio.
	
	self assert: (( portfolio transactions includes: deposit1 ) and: (portfolio transactions includes: deposit2)).! !

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:23:59'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 21:23:59'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 21:23:59'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 21:23:59'!
FAILURE!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 21:23:59'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 21:23:59'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:23:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/2/2020 21:23:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 21:23:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 21:23:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/2/2020 21:23:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/2/2020 21:23:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/2/2020 21:23:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/2/2020 21:23:59'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 21:23:59'!
FAILURE!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:24:22' prior: 50926081!
test03BalanceWithAnAccountAndAPortfolio

	| portfolio account subPortfolio account2 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	Deposit register: 50 on: account2.
	
	portfolio add: account.
	subPortfolio add: account2.
	portfolio add: subPortfolio.
	
	self assert: 150 equals: portfolio balance.! !

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 21:24:24'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 21:24:24'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 21:24:24'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 21:24:24'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 21:24:24'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 21:24:24'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:24:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/2/2020 21:24:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 21:24:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 21:24:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/2/2020 21:24:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/2/2020 21:24:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/2/2020 21:24:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/2/2020 21:24:24'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:29:31'!
test07hasRegisteredOfEmptyPortfolioReturnsNoTransactions

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: OrderedCollection new equals: portfolio transactions.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:30:20' prior: 50926344!
test07hasRegisteredOfEmptyPortfolioReturnsNoTransactions

	| portfolio |
	
	portfolio := Portfolio new.
	
	self deny: true.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:31:22' prior: 50926353!
test07hasRegisteredOfEmptyPortfolioReturnsNoTransactions

	| portfolio deposit |
	
	portfolio := Portfolio new.
	
	deposit := Deposit for: 100.
	
	self deny: (portfolio hasRegistered: deposit).! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:35:25'!
test07EmptyPortfolioHasNotARegisteredTransaction

	| portfolio deposit |
	
	portfolio := Portfolio new.
	
	deposit := Deposit for: 100.
	
	self deny: (portfolio hasRegistered: deposit).! !

!methodRemoval: ProtfolioTest #test07hasRegisteredOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 21:35:25'!
test07hasRegisteredOfEmptyPortfolioReturnsNoTransactions

	| portfolio deposit |
	
	portfolio := Portfolio new.
	
	deposit := Deposit for: 100.
	
	self deny: (portfolio hasRegistered: deposit).!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/2/2020 21:35:36'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'GR 11/2/2020 21:36:11'!
hasRegistered: aDeposit 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'testing' stamp: 'GR 11/2/2020 21:36:17' prior: 50926391!
hasRegistered: aDeposit 
	
	^false! !

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/2/2020 21:36:19'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 21:36:19'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 21:36:19'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 21:36:19'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 21:36:19'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 21:36:19'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:36:19'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/2/2020 21:36:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/2/2020 21:36:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 21:36:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 21:36:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/2/2020 21:36:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/2/2020 21:36:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/2/2020 21:36:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/2/2020 21:36:19'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:37:36'!
test08PortfolioWithAccountHasRegisteredTransactions

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit).! !

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasRegisteredTransactions stamp: 'GR 11/2/2020 21:37:38'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'GR 11/2/2020 21:41:37' prior: 50926396!
hasRegistered: aTransaction
	
	| account |
	
	account := contents detect: [:anAccount | true].
	
	^account hasRegistered: aTransaction.! !

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasRegisteredTransactions stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/2/2020 21:41:38'!
ERROR!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasRegisteredTransactions stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/2/2020 21:41:38'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'GR 11/2/2020 21:42:14' prior: 50926471!
hasRegistered: aTransaction
	
	| account |
	
	account := contents detect: [:anAccount | true] ifNone: [^false].
	
	^account hasRegistered: aTransaction.! !

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/2/2020 21:42:15'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasRegisteredTransactions stamp: 'GR 11/2/2020 21:42:18'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 21:42:18'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 21:42:18'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 21:42:18'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 21:42:18'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 21:42:18'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:42:18'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/2/2020 21:42:18'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasRegisteredTransactions stamp: 'GR 11/2/2020 21:42:18'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:43:04'!
test09PortfolioWithAccountAndAPortfolioHasARegisteredTransaction

	| portfolio account subPortfolio account2 deposit1 deposit2 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account.
	deposit2 := Deposit register: 50 on: account2.
	
	portfolio add: account.
	subPortfolio add: account2.
	portfolio add: subPortfolio.
	
	self assert: (( portfolio transactions includes: deposit1 ) and: (portfolio transactions includes: deposit2)).! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:43:13'!
test08PortfolioWithAccountHasARegisteredTransaction

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit).! !

!methodRemoval: ProtfolioTest #test08PortfolioWithAccountHasRegisteredTransactions stamp: 'GR 11/2/2020 21:43:13'!
test08PortfolioWithAccountHasRegisteredTransactions

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit).!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:43:35' prior: 50926587!
test09PortfolioWithAccountAndAPortfolioHasARegisteredTransaction

	| portfolio account subPortfolio account2 deposit1 deposit2 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account.
	deposit2 := Deposit register: 50 on: account2.
	
	portfolio add: account.
	subPortfolio add: account2.
	portfolio add: subPortfolio.
	
	self assert: (portfolio hasRegistered: deposit2).! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:44:08' prior: 50926631!
test09PortfolioWithAccountAndAPortfolioHasARegisteredTransaction

	| portfolio account subPortfolio account2 deposit |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	deposit := Deposit register: 50 on: account2.
	
	portfolio add: account.
	subPortfolio add: account2.
	portfolio add: subPortfolio.
	
	self assert: (portfolio hasRegistered: deposit).! !

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransaction stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransaction stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransaction stamp: 'GR 11/2/2020 21:44:14'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransaction stamp: 'GR 11/2/2020 21:44:14'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'GR 11/2/2020 21:46:50' prior: 50926542!
hasRegistered: aTransaction
	
	| hasRegistered |
	
	hasRegistered := false.
	
	contents do: [:anElement |  hasRegistered or: (anElement  hasRegistered: aTransaction) ].
	
	^ hasRegistered.! !

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransaction stamp: 'GR 11/2/2020 21:46:51'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'GR 11/2/2020 21:48:05' prior: 50926736!
hasRegistered: aTransaction
	
	| hasRegistered |
	
	hasRegistered := false.
	
	contents do: [:anElement |  hasRegistered := hasRegistered or: (anElement  hasRegistered: aTransaction) ].
	
	^ hasRegistered.! !

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransaction stamp: 'GR 11/2/2020 21:48:06'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransaction stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransaction stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransaction stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/2/2020 21:48:08'!
PASSED!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 21:52:32' prior: 50925509!
balance
	
	| totalBalance |
	
	totalBalance := 0. 
	
	contents do: [:anElement | totalBalance := totalBalance + anElement balance]. 
	
	^totalBalance.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:53:53'!
test07EmptyPortfolioHasNotARegisteredTransactionInAnyAccount

	| portfolio deposit |
	
	portfolio := Portfolio new.
	
	deposit := Deposit for: 100.
	
	self deny: (portfolio hasRegistered: deposit).! !

!methodRemoval: ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/2/2020 21:53:53'!
test07EmptyPortfolioHasNotARegisteredTransaction

	| portfolio deposit |
	
	portfolio := Portfolio new.
	
	deposit := Deposit for: 100.
	
	self deny: (portfolio hasRegistered: deposit).!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:54:06'!
test07EmptyPortfolioHasNotARegisteredTransaction

	| portfolio deposit |
	
	portfolio := Portfolio new.
	
	deposit := Deposit for: 100.
	
	self deny: (portfolio hasRegistered: deposit).! !

!methodRemoval: ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransactionInAnyAccount stamp: 'GR 11/2/2020 21:54:06'!
test07EmptyPortfolioHasNotARegisteredTransactionInAnyAccount

	| portfolio deposit |
	
	portfolio := Portfolio new.
	
	deposit := Deposit for: 100.
	
	self deny: (portfolio hasRegistered: deposit).!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:54:23'!
test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit).! !

!methodRemoval: ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransaction stamp: 'GR 11/2/2020 21:54:23'!
test08PortfolioWithAccountHasARegisteredTransaction

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit).!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:54:34'!
test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount

	| portfolio account subPortfolio account2 deposit |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	deposit := Deposit register: 50 on: account2.
	
	portfolio add: account.
	subPortfolio add: account2.
	portfolio add: subPortfolio.
	
	self assert: (portfolio hasRegistered: deposit).! !

!methodRemoval: ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransaction stamp: 'GR 11/2/2020 21:54:34'!
test09PortfolioWithAccountAndAPortfolioHasARegisteredTransaction

	| portfolio account subPortfolio account2 deposit |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	deposit := Deposit register: 50 on: account2.
	
	portfolio add: account.
	subPortfolio add: account2.
	portfolio add: subPortfolio.
	
	self assert: (portfolio hasRegistered: deposit).!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/2/2020 21:55:15' prior: 50925439!
add: anElement
	
	contents add: anElement.! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/2/2020 21:55:50' prior: 50926932!
add: aBankingEntity
	
	contents add: aBankingEntity.! !
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 21:55:55' prior: 50926827!
balance
	
	| totalBalance |
	
	totalBalance := 0. 
	
	contents do: [:aBankingEntity | totalBalance := totalBalance + aBankingEntity balance]. 
	
	^totalBalance.! !
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 21:56:01' prior: 50926110!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	
	contents do: [:aBankingEntity | transactions addAll: aBankingEntity transactions].
	
	^ transactions.! !
!Portfolio methodsFor: 'testing' stamp: 'GR 11/2/2020 21:56:10' prior: 50926749!
hasRegistered: aTransaction
	
	| hasRegistered |
	
	hasRegistered := false.
	
	contents do: [:aBankingEntity |  hasRegistered := hasRegistered or: (aBankingEntity  hasRegistered: aTransaction) ].
	
	^ hasRegistered.! !
!Portfolio methodsFor: 'testing' stamp: 'GR 11/2/2020 21:56:54' prior: 50926958!
hasRegistered: aTransaction
	
	^ contents do: [:aBankingEntity |
		| hasRegistered |
		hasRegistered := false.
		hasRegistered := hasRegistered or: (aBankingEntity  hasRegistered: aTransaction) ].! !

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 21:56:58'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 21:56:58'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 21:56:58'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 21:56:58'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 21:56:58'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 21:56:58'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:56:58'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/2/2020 21:56:58'!
ERROR!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/2/2020 21:56:58'!
ERROR!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/2/2020 21:56:58'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/2/2020 21:56:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 21:56:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 21:56:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/2/2020 21:56:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/2/2020 21:56:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/2/2020 21:56:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/2/2020 21:56:58'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'GR 11/2/2020 21:56:10' prior: 50926968!
hasRegistered: aTransaction
	
	| hasRegistered |
	
	hasRegistered := false.
	
	contents do: [:aBankingEntity |  hasRegistered := hasRegistered or: (aBankingEntity  hasRegistered: aTransaction) ].
	
	^ hasRegistered.! !

----QUIT----(2 November 2020 22:39:49) CuisUniversity-4383.image priorSource: 18984119!

----STARTUP---- (4 November 2020 14:56:42) as /home/grosinov/linux64/CuisUniversity-4383.image!

!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:10:11'!
test10CanNotAddAPortfolioToItself

	| portfolio |
	
	portfolio := Portfolio new.
	
	self
		should: [ portfolio add: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/4/2020 15:10:18'!
FAILURE!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/4/2020 15:10:34'!
FAILURE!
!Portfolio class methodsFor: 'no messages' stamp: 'GR 11/4/2020 15:13:09'!
cycleHierarchyError

	^ 'You are adding a portfolio that already exists in the hierarchy'! !
!Portfolio class methodsFor: 'error handling' stamp: 'GR 11/4/2020 15:15:00' prior: 50927074!
cycleHierarchyError

	^ 'You are adding an account or portfolio that already exists in the hierarchy'! !

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/4/2020 15:15:10'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 15:15:50' prior: 50926936!
add: aBankingEntity
	
	(self = aBankingEntity) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	contents add: aBankingEntity.! !

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/4/2020 15:15:53'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/4/2020 15:15:53'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/4/2020 15:15:53'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 15:15:53'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/4/2020 15:15:53'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/4/2020 15:15:53'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/4/2020 15:15:53'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/4/2020 15:15:53'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 15:15:53'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 15:15:53'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/4/2020 15:15:53'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:19:17'!
test10CanNotAddAPortfolioThatAlreadyExistsInThePortfolio

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio add: portfolio2.
	
	self
		should: [ portfolio add: portfolio2 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:19:27'!
test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio add: portfolio2.
	
	self
		should: [ portfolio add: portfolio2 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!methodRemoval: ProtfolioTest #test10CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/4/2020 15:19:27'!
test10CanNotAddAPortfolioThatAlreadyExistsInThePortfolio

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio add: portfolio2.
	
	self
		should: [ portfolio add: portfolio2 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/4/2020 15:19:36'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 15:21:19' prior: 50927089!
add: aBankingEntity
	
	(self = aBankingEntity) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	(contents includes: aBankingEntity ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	contents add: aBankingEntity.! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 15:21:57' prior: 50927182!
add: aBankingEntity
	
	(self == aBankingEntity) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	(contents includes: aBankingEntity ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	contents add: aBankingEntity.! !

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/4/2020 15:22:01'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:23:00'!
test12

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio add: portfolio2.
	
	self
		should: [ portfolio add: portfolio2 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:28:13' prior: 50927274!
test12

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio add: portfolio2.
	
	self
		should: [ portfolio2 add: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!testRun: #ProtfolioTest #test12 stamp: 'GR 11/4/2020 15:29:26'!
FAILURE!

Object subclass: #Portfolio
	instanceVariableNames: 'contents parentPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'GR 11/4/2020 15:30:05'!
Object subclass: #Portfolio
	instanceVariableNames: 'contents parentPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #ProtfolioTest #test12 stamp: 'GR 11/4/2020 15:30:33'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 15:33:10' prior: 50927192!
add: aBankingEntity
	
	(self == aBankingEntity) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	(contents includes: aBankingEntity ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	( parentPortfolio == aBankingEntity ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	contents add: aBankingEntity.! !

!testRun: #ProtfolioTest #test12 stamp: 'GR 11/4/2020 15:33:11'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 15:33:48' prior: 50927316!
add: aBankingEntity
	
	(self == aBankingEntity) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	(contents includes: aBankingEntity ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	( parentPortfolio == aBankingEntity ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	contents add: aBankingEntity.
	
	aBankingEntity childOf: self! !

!testRun: #ProtfolioTest #test12 stamp: 'GR 11/4/2020 15:33:53'!
FAILURE!

!testRun: #ProtfolioTest #test12 stamp: 'GR 11/4/2020 15:35:08'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'GR 11/4/2020 15:35:22'!
childOf: aPortfolio 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/4/2020 15:35:33' prior: 50927350!
childOf: aPortfolio 
	
	parentPortfolio := aPortfolio .! !

!testRun: #ProtfolioTest #test12 stamp: 'GR 11/4/2020 15:35:36'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/4/2020 15:35:36'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/4/2020 15:35:36'!
ERROR!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 15:35:36'!
ERROR!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/4/2020 15:35:36'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/4/2020 15:35:36'!
ERROR!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/4/2020 15:35:36'!
ERROR!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/4/2020 15:35:36'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 15:35:36'!
ERROR!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 15:35:36'!
ERROR!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/4/2020 15:35:36'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/4/2020 15:35:36'!
PASSED!

!testRun: #ProtfolioTest #test12 stamp: 'GR 11/4/2020 15:35:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/4/2020 15:35:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/4/2020 15:35:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/4/2020 15:35:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/4/2020 15:35:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/4/2020 15:35:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/4/2020 15:35:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/4/2020 15:35:36'!
PASSED!

!testRun: #ProtfolioTest #test12 stamp: 'GR 11/4/2020 15:35:38'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/4/2020 15:35:38'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/4/2020 15:35:38'!
ERROR!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 15:35:38'!
ERROR!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/4/2020 15:35:38'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/4/2020 15:35:38'!
ERROR!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/4/2020 15:35:38'!
ERROR!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/4/2020 15:35:38'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 15:35:38'!
ERROR!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 15:35:38'!
ERROR!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/4/2020 15:35:38'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/4/2020 15:35:38'!
PASSED!

!testRun: #ProtfolioTest #test12 stamp: 'GR 11/4/2020 15:35:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/4/2020 15:35:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/4/2020 15:35:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/4/2020 15:35:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/4/2020 15:35:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/4/2020 15:35:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/4/2020 15:35:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/4/2020 15:35:38'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/4/2020 15:35:42'!
ERROR!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:36:43' prior: 50925605!
test02BalanceWithAnAccount

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio addAccount: account.
	
	self deny: portfolio isEmpty.
	self assert: 100 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:37:05' prior: 50926276!
test03BalanceWithAnAccountAndAPortfolio

	| portfolio account subPortfolio account2 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	Deposit register: 50 on: account2.
	
	portfolio addAccount: account.
	subPortfolio addAccount: account2.
	portfolio addPortfolio: subPortfolio.
	
	self assert: 150 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:37:14' prior: 50925886!
test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio addAccount: account.
	
	self assert: (OrderedCollection with: deposit) equals: portfolio transactions.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:37:21' prior: 50926198!
test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction

	| portfolio account subPortfolio account2 deposit1 deposit2 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account.
	deposit2 := Deposit register: 50 on: account2.
	
	portfolio addAccount: account.
	subPortfolio addAccount: account2.
	portfolio addPortfolio: subPortfolio.
	
	self assert: (( portfolio transactions includes: deposit1 ) and: (portfolio transactions includes: deposit2)).! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:37:31' prior: 50926871!
test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	
	portfolio addAccount: account.
	
	self assert: (portfolio hasRegistered: deposit).! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:37:38' prior: 50926895!
test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount

	| portfolio account subPortfolio account2 deposit |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	deposit := Deposit register: 50 on: account2.
	
	portfolio addAccount: account.
	subPortfolio addAccount: account2.
	portfolio addPortfolio: subPortfolio.
	
	self assert: (portfolio hasRegistered: deposit).! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:37:49' prior: 50927057!
test10CanNotAddAPortfolioToItself

	| portfolio |
	
	portfolio := Portfolio new.
	
	self
		should: [ portfolio addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:37:56' prior: 50927150!
test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio add: portfolio2.
	
	self
		should: [ portfolio addPortfolio: portfolio2 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:38:03' prior: 50927614!
test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	
	self
		should: [ portfolio addPortfolio: portfolio2 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:38:10' prior: 50927286!
test12

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	
	self
		should: [ portfolio2 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/4/2020 15:38:38'!
ERROR!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/4/2020 15:38:38'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 11/4/2020 15:39:01'!
addAccount: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 11/4/2020 15:39:51' prior: 50927660!
addAccount: aReceptiveAccount 
	
	contents add: aReceptiveAccount ! !

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/4/2020 15:39:52'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 15:40:16'!
ERROR!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 15:40:16'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 15:40:23'!
addPortfolio: aPortfolio 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 15:40:51' prior: 50927679!
addPortfolio: aPortfolio 

	(self == aPortfolio) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	(contents includes: aPortfolio ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	( parentPortfolio == aPortfolio ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 15:41:08' prior: 50927684!
addPortfolio: aPortfolio 

	(self == aPortfolio) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	( parentPortfolio == aPortfolio ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	(contents includes: aPortfolio ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 15:41:12'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/4/2020 15:41:15'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/4/2020 15:41:15'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/4/2020 15:41:15'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 15:41:15'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/4/2020 15:41:15'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/4/2020 15:41:15'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/4/2020 15:41:15'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/4/2020 15:41:15'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 15:41:15'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 15:41:15'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/4/2020 15:41:15'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/4/2020 15:41:15'!
PASSED!

!testRun: #ProtfolioTest #test12 stamp: 'GR 11/4/2020 15:41:15'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:42:32'!
test12CanNotAddToPortfolioItsParentPortfolio

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	
	self
		should: [ portfolio2 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!methodRemoval: ProtfolioTest #test12 stamp: 'GR 11/4/2020 15:42:32'!
test12

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	
	self
		should: [ portfolio2 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]!

!methodRemoval: Portfolio #add: stamp: 'GR 11/4/2020 15:44:00'!
add: aBankingEntity
	
	(self == aBankingEntity) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	(contents includes: aBankingEntity ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	( parentPortfolio == aBankingEntity ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	contents add: aBankingEntity.
	
	aBankingEntity childOf: self!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:45:48'!
test13CanNotAddAPortfolioThatAlreadyExistsInThePortfolioHierarchy

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	
	self
		should: [ portfolio2 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:46:35' prior: 50927802!
test13CanNotAddAPortfolioThatAlreadyExistsInThePortfolioHierarchy

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio3 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!testRun: #ProtfolioTest #test13CanNotAddAPortfolioThatAlreadyExistsInThePortfolioHierarchy stamp: 'GR 11/4/2020 15:46:40'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 15:54:38' prior: 50927698!
addPortfolio: aPortfolio 

	self seeIfAlreadyExistsInHierarchy: aPortfolio.
	
	(self == aPortfolio) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	( parentPortfolio == aPortfolio ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	(contents includes: aPortfolio ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !

!testRun: #ProtfolioTest #test13CanNotAddAPortfolioThatAlreadyExistsInThePortfolioHierarchy stamp: 'GR 11/4/2020 15:54:46'!
FAILURE!

!testRun: #ProtfolioTest #test13CanNotAddAPortfolioThatAlreadyExistsInThePortfolioHierarchy stamp: 'GR 11/4/2020 15:54:50'!
ERROR!

!testRun: #ProtfolioTest #test13CanNotAddAPortfolioThatAlreadyExistsInThePortfolioHierarchy stamp: 'GR 11/4/2020 15:54:55'!
ERROR!

!testRun: #ProtfolioTest #test13CanNotAddAPortfolioThatAlreadyExistsInThePortfolioHierarchy stamp: 'GR 11/4/2020 15:55:03'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'GR 11/4/2020 15:55:16'!
seeIfAlreadyExistsInHierarchy: aPortfolio 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/4/2020 15:56:10' prior: 50927870!
seeIfAlreadyExistsInHierarchy: aPortfolio 
	
	parentPortfolio ifNil: [ self seeIfAlreadyExistsInHierarchy: aPortfolio].! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/4/2020 15:56:31'!
askRootIfAlreadyExistsInHierarchy: aPortfolio 
	
	parentPortfolio ifNil: [ self seeIfAlreadyExistsInHierarchy: aPortfolio].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 11/4/2020 15:56:31' prior: 50927875!
seeIfAlreadyExistsInHierarchy: aPortfolio 
	
	parentPortfolio ifNil: [ self askRootIfAlreadyExistsInHierarchy: aPortfolio].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 11/4/2020 15:56:31' prior: 50927838!
addPortfolio: aPortfolio 

	self askRootIfAlreadyExistsInHierarchy: aPortfolio.
	
	(self == aPortfolio) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	( parentPortfolio == aPortfolio ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	(contents includes: aPortfolio ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 11/4/2020 15:56:31' prior: 50927881!
askRootIfAlreadyExistsInHierarchy: aPortfolio 
	
	parentPortfolio ifNil: [ self askRootIfAlreadyExistsInHierarchy: aPortfolio].! !

!methodRemoval: Portfolio #seeIfAlreadyExistsInHierarchy: stamp: 'GR 11/4/2020 15:56:31'!
seeIfAlreadyExistsInHierarchy: aPortfolio 
	
	parentPortfolio ifNil: [ self askRootIfAlreadyExistsInHierarchy: aPortfolio].!
!Portfolio methodsFor: 'private' stamp: 'GR 11/4/2020 15:58:28' prior: 50927911!
askRootIfAlreadyExistsInHierarchy: aPortfolio 
	
	parentPortfolio ifNotNil: [ parentPortfolio askRootIfAlreadyExistsInHierarchy: aPortfolio].! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/4/2020 16:09:07' prior: 50927925!
askRootIfAlreadyExistsInHierarchy: aPortfolio 
	
	parentPortfolio ifNotNil: [ parentPortfolio askRootIfAlreadyExistsInHierarchy: aPortfolio]
				ifNil: [
		contents do: [ :aBankingEntity | aBankingEntity seeIfAlreadyExistsInHierarchy ]
	].! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 16:28:12' prior: 50927817!
test13CanNotAddAPortfolioThatAlreadyExistsInThePortfolioHierarchy

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio2.
	
	self
		should: [ portfolio addPortfolio: portfolio3 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 16:29:36'!
test13

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio2.
	
	self
		should: [ portfolio addPortfolio: portfolio3 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!methodRemoval: ProtfolioTest #test13CanNotAddAPortfolioThatAlreadyExistsInThePortfolioHierarchy stamp: 'GR 11/4/2020 16:29:36'!
test13CanNotAddAPortfolioThatAlreadyExistsInThePortfolioHierarchy

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio2.
	
	self
		should: [ portfolio addPortfolio: portfolio3 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]!
!Portfolio methodsFor: 'testing' stamp: 'GR 11/4/2020 16:34:04' prior: 50927042!
hasRegistered: aTransaction
	
	| hasRegistered |
	
	hasRegistered := false.
	
	contents do: [:aBankingEntity |  hasRegistered := hasRegistered or: (aBankingEntity  hasRegistered: aTransaction) ].
	
	^ hasRegistered.! !
!Portfolio methodsFor: 'testing' stamp: 'GR 11/4/2020 16:38:26'!
startWith: aValue andWithEveryElementDo: aBlock
	
	| return |
	
	return := aValue.
	
	contents do: [ :aBankingEntity | aBlock value: aBankingEntity value: return].
	
	^ return.! !

!methodRemoval: Portfolio #startWith:andWithEveryElementDo: stamp: 'GR 11/4/2020 16:39:56'!
startWith: aValue andWithEveryElementDo: aBlock
	
	| return |
	
	return := aValue.
	
	contents do: [ :aBankingEntity | aBlock value: aBankingEntity value: return].
	
	^ return.!
!Portfolio methodsFor: 'testing' stamp: 'GR 11/4/2020 16:40:03' prior: 50927994!
hasRegistered: aTransaction
	
	| hasRegistered |
	
	hasRegistered := false.
	
	contents do: [ :aBankingEntity |  hasRegistered := hasRegistered or: (aBankingEntity  hasRegistered: aTransaction) ].
	
	^ hasRegistered.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 16:42:08'!
test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt

	| portfolio account |
	
	portfolio := Portfolio new.
	account  := ReceptiveAccount new.
	portfolio addAccount: account.
	
	self
		should: [ portfolio addPortfolio: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!testRun: #ProtfolioTest #test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/4/2020 16:42:13'!
FAILURE!

!testRun: #ProtfolioTest #test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/4/2020 16:42:13'!
FAILURE!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 16:42:29' prior: 50928030!
test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt

	| portfolio account |
	
	portfolio := Portfolio new.
	account  := ReceptiveAccount new.
	portfolio addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!testRun: #ProtfolioTest #test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/4/2020 16:42:31'!
FAILURE!

!testRun: #ProtfolioTest #test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/4/2020 16:42:31'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 16:43:19' prior: 50927665!
addAccount: aReceptiveAccount 
	
	(contents includes: aReceptiveAccount) ifTrue: [ self error: Portfolio cycleHierarchyError ]. 
	
	contents add: aReceptiveAccount ! !

!testRun: #ProtfolioTest #test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/4/2020 16:43:21'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/4/2020 16:43:22'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/4/2020 16:43:22'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/4/2020 16:43:22'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 16:43:22'!
ERROR!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/4/2020 16:43:22'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/4/2020 16:43:22'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/4/2020 16:43:22'!
ERROR!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/4/2020 16:43:22'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 16:43:22'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 16:43:22'!
ERROR!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/4/2020 16:43:22'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/4/2020 16:43:22'!
FAILURE!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioItsParentPortfolio stamp: 'GR 11/4/2020 16:43:22'!
FAILURE!

!testRun: #ProtfolioTest #test13 stamp: 'GR 11/4/2020 16:43:22'!
FAILURE!

!testRun: #ProtfolioTest #test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/4/2020 16:43:22'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 16:43:30'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 16:46:23' prior: 50928074!
addAccount: aReceptiveAccount 
	
	(contents allSatisfy: [ :aBankingEntity | aBankingEntity ~~ aReceptiveAccount ]) ifFalse: [ self error: Portfolio cycleHierarchyError ]. 
	
	contents add: aReceptiveAccount ! !

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 16:46:25'!
ERROR!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/4/2020 16:46:36'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 16:46:38'!
ERROR!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 16:46:38'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 16:46:57' prior: 50927895!
addPortfolio: aPortfolio 

	(self == aPortfolio) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	( parentPortfolio == aPortfolio ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	(contents includes: aPortfolio ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !

!methodRemoval: ProtfolioTest #test13 stamp: 'GR 11/4/2020 16:47:08'!
test13

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio2.
	
	self
		should: [ portfolio addPortfolio: portfolio3 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioItsParentPortfolio stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/4/2020 16:47:10'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 16:52:38'!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt

	| portfolio portfolio2 account |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account  := ReceptiveAccount new.
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 16:53:08' prior: 50928274!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt

	| portfolio portfolio2 account |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account  := ReceptiveAccount new.
	
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 16:55:09'!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio

	| portfolio portfolio2 account |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account  := ReceptiveAccount new.
	
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!methodRemoval: ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/4/2020 16:55:12'!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt

	| portfolio portfolio2 account |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account  := ReceptiveAccount new.
	
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 16:56:57'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 16:58:56' prior: 50928145!
addAccount: aReceptiveAccount 
	
	(contents allSatisfy: [ :aBankingEntity | aBankingEntity ~~ aReceptiveAccount ]) ifFalse: [ self error: Portfolio cycleHierarchyError ]. 
	
	parentPortfolio seeIfAlreadyInHierarchy.
	
	contents add: aReceptiveAccount ! !

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 16:59:04'!
FAILURE!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:00:08'!
ERROR!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:00:08'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'GR 11/4/2020 17:00:21'!
seeIfAlreadyInHierarchy
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 17:01:05' prior: 50928345!
addAccount: aReceptiveAccount 
	
	parentPortfolio seeIfAlreadyInHierarchy.
	
	contents add: aReceptiveAccount ! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 17:01:33' prior: 50928373!
addAccount: aReceptiveAccount 
	
	(contents allSatisfy: [ :aBankingEntity | aBankingEntity ~~ aReceptiveAccount ]) ifFalse: [ self error: Portfolio cycleHierarchyError ]. 
	
	parentPortfolio seeIfAlreadyInHierarchy.
	
	contents add: aReceptiveAccount ! !

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:01:36'!
ERROR!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:01:36'!
ERROR!

!methodRemoval: Portfolio #seeIfAlreadyInHierarchy stamp: 'GR 11/4/2020 17:01:55'!
seeIfAlreadyInHierarchy
	self shouldBeImplemented.!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 17:02:02' prior: 50928380!
addAccount: aReceptiveAccount 
	
	(contents allSatisfy: [ :aBankingEntity | aBankingEntity ~~ aReceptiveAccount ]) ifFalse: [ self error: Portfolio cycleHierarchyError ].
	
	contents add: aReceptiveAccount ! !

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:02:09'!
FAILURE!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:02:09'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 17:02:40' prior: 50928404!
addAccount: aReceptiveAccount 
	
	self seeIfAlreadyInHierarchy: aReceptiveAccount.
	
	contents add: aReceptiveAccount ! !

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:02:42'!
FAILURE!
!Portfolio methodsFor: 'private' stamp: 'GR 11/4/2020 17:03:01'!
seeIfAlreadyInHierarchy: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/4/2020 17:03:41' prior: 50928433!
seeIfAlreadyInHierarchy: aReceptiveAccount 
	
	parentPortfolio ifNotNil: [ parentPortfolio seeIfAlreadyInHierarchy: aReceptiveAccount ].
	
	(contents allSatisfy: [ :aBankingEntity | aBankingEntity ~~ aReceptiveAccount ]) ifFalse: [ self error: Portfolio cycleHierarchyError ].! !

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:04:07'!
FAILURE!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:04:07'!
FAILURE!
!Portfolio methodsFor: 'private' stamp: 'GR 11/4/2020 17:07:47' prior: 50928438!
seeIfAlreadyInHierarchy: aReceptiveAccount 
	
	contents do: [ :aBankingEntity | aBankingEntity seeIfAlreadyInHierarchy ].
	
	(contents allSatisfy: [ :aBankingEntity | aBankingEntity ~~ aReceptiveAccount ]) ifFalse: [ self error: Portfolio cycleHierarchyError ].! !

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:07:50'!
FAILURE!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:08:20'!
FAILURE!

!methodRemoval: Portfolio #askRootIfAlreadyExistsInHierarchy: stamp: 'GR 11/4/2020 17:08:38'!
askRootIfAlreadyExistsInHierarchy: aPortfolio 
	
	parentPortfolio ifNotNil: [ parentPortfolio askRootIfAlreadyExistsInHierarchy: aPortfolio]
				ifNil: [
		contents do: [ :aBankingEntity | aBankingEntity seeIfAlreadyExistsInHierarchy ]
	].!
!Portfolio methodsFor: 'private' stamp: 'GR 11/4/2020 17:08:58' prior: 50928458!
seeIfAlreadyInHierarchy: aReceptiveAccount 
	
	contents do: [ :aBankingEntity | aBankingEntity seeIfAlreadyInHierarchy: aReceptiveAccount ].
	
	(contents allSatisfy: [ :aBankingEntity | aBankingEntity ~~ aReceptiveAccount ]) ifFalse: [ self error: Portfolio cycleHierarchyError ].! !

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:09:04'!
FAILURE!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:09:04'!
FAILURE!
!ReceptiveAccount methodsFor: 'private' stamp: 'GR 11/4/2020 17:09:20'!
seeIfAlreadyInHierarchy: aReceptiveAccount 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'private' stamp: 'GR 11/4/2020 17:10:07' prior: 50928508!
seeIfAlreadyInHierarchy: aReceptiveAccount 
	
	^ self == aReceptiveAccount ! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/4/2020 17:11:59' prior: 50928488!
seeIfAlreadyInHierarchy: aReceptiveAccount 
	
	(contents allSatisfy: [ :aBankingEntity | aBankingEntity seeIfAlreadyInHierarchy: aReceptiveAccount ]) ifFalse: [ self error: Portfolio cycleHierarchyError ].! !

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:12:03'!
FAILURE!
!ReceptiveAccount methodsFor: 'private' stamp: 'GR 11/4/2020 17:13:12' prior: 50928514!
seeIfAlreadyInHierarchy: aReceptiveAccount 
	
	^ self ~~ aReceptiveAccount ! !

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:13:33'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioItsParentPortfolio stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/4/2020 17:13:35'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 17:18:48'!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsDownInTheHierarchy

	| portfolio portfolio2 account |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account  := ReceptiveAccount new.
	
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!methodRemoval: ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:18:48'!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio

	| portfolio portfolio2 account |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account  := ReceptiveAccount new.
	
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]!

----QUIT----(4 November 2020 17:34:57) CuisUniversity-4383.image priorSource: 19052826!

----STARTUP---- (5 November 2020 17:56:02) as /home/grosinov/linux64/CuisUniversity-4383.image!


	self == super!

1 class class!

1 class class class!

1 class class class class!

1 class class class class class!

1 class class class class class class!

1 class class class class class class class!

1 class class class class class class class class !

1 class class class class class class class class class !

1 class class class class class class class class class class!

1 class superclass !

1 class superclass superclass superclass superclass superclass superclass superclass superclass superclass !

1 class superclass superclass superclass superclass superclass superclass superclass superclass !

1 class superclass superclass superclass superclass !

1 class superclass superclass superclass superclass superclass !

1 class superclass superclass superclass superclass superclass !

1 class superclass superclass superclass superclass superclass superclass !

1 class class superclass superclass superclass superclass superclass superclass !

1 class class superclass superclass superclass superclass superclass superclass superclass !

1 class class superclass superclass superclass superclass superclass superclass superclass superclass !

1 class class superclass superclass superclass superclass superclass superclass superclass superclass superclass !

1 class class superclass superclass superclass superclass superclass superclass superclass superclass superclass !

1 class class superclass superclass superclass superclass superclass superclass superclass superclass superclass superclass !

1 class class superclass superclass superclass superclass superclass superclass superclass superclass superclass superclass !

1 class class superclass superclass superclass superclass superclass superclass superclass superclass superclass superclass superclass !

1 class superclass class!

1 class class!

1 class class class!

1 class class !

1 class class class !

1 class class class class!

1 class !

1 class class!

1 class superclass!

1 class class superclass!

1 class class class superclass!

1 class class class !

1 class class !

1 class class superclass!

1 class class superclass superclass !

1 class class superclass superclass superclass !

1 class class superclass superclass superclass superclass !

1 class class superclass superclass superclass superclass superclass !

1 class class superclass superclass superclass superclass superclass !

1 class class superclass superclass superclass superclass superclass superclass !

OrderedCollection instVarNames !

OrderedCollection class!

OrderedCollection superclass!

OrderedCollection superclass class!

OrderedCollection superclass superclass!

OrderedCollection superclass superclass superclass!

OrderedCollection superclass superclass superclass superclass !

OrderedCollection superclass superclass superclass superclass class!

OrderedCollection superclass superclass superclass superclass class class!

OrderedCollection superclass superclass superclass superclass class superclass!

OrderedCollection superclass superclass superclass superclass class superclass class!

OrderedCollection superclass superclass superclass superclass class superclass class class!

OrderedCollection superclass superclass superclass superclass class superclass class class class!

OrderedCollection superclass superclass superclass superclass class superclass class class class class!

1 !

1 class!

1 self!

1 !

1 class!

1 class class!

1 class class class !

1 class class class class!

1 class class class class class!

1 class class!

1 class class super!

1 class class superclass !

1 class class superclass class!

1 class class superclass superclass!

1 class class superclass superclass superclass!

1 class class superclass superclass superclass superclass!

1 class class superclass superclass superclass superclass superclass!

1 class class superclass superclass superclass superclass superclass !

1 class class superclass superclass superclass superclass superclass superclass!

1 class class superclass superclass superclass superclass superclass superclass !

1 class class superclass superclass superclass superclass superclass superclass superclass!

1 class class superclass superclass superclass superclass superclass superclass superclass superclass!

1 class class superclass superclass superclass superclass superclass superclass superclass superclass superclass!

1 class class superclass superclass superclass superclass superclass superclass superclass superclass superclass superclass!

1 class class superclass superclass superclass superclass superclass superclass superclass superclass superclass superclass superclass!

1 class class superclass superclass superclass superclass superclass superclass superclass superclass superclass superclass class !

GameOfLife compile: 'm10 ^10'!
!GameOfLife methodsFor: 'as yet unclassified' stamp: 'GR 11/5/2020 21:18:01'!
m10 ^10! !

!methodRemoval: GameOfLife #m10 stamp: 'GR 11/5/2020 21:18:25'!
m10 ^10!

----QUIT----(5 November 2020 21:38:35) CuisUniversity-4383.image priorSource: 19104318!

----STARTUP---- (7 November 2020 14:52:30) as /home/grosinov/linux64/CuisUniversity-4383.image!


!testRun: #ProtfolioTest #test12CanNotAddToPortfolioItsParentPortfolio stamp: 'GR 11/7/2020 14:53:43'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 14:57:40'!
test13

	"CanNotAddToPortfolioAnAlreadyGrandchildPortfolio"

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	
	self
		should: [ portfolio addPortfolio: portfolio2 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 14:58:10' prior: 50928832!
test13

	"CanNotAddToPortfolioAnAlreadyGrandchildPortfolio"

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio addPortfolio: portfolio2 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 14:58:22' prior: 50928846!
test13

	"CanNotAddToPortfolioAnAlreadyGrandchildPortfolio"

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio addPortfolio: portfolio3 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!testRun: #ProtfolioTest #test13 stamp: 'GR 11/7/2020 14:58:23'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 15:01:42' prior: 50928167!
addPortfolio: aPortfolio 

	(self == aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	( parentPortfolio == aPortfolio ) ifTrue: [ self error: self class cycleHierarchyError ].
	
	(contents includes: aPortfolio ) ifTrue: [ self error: self class cycleHierarchyError ].
	
	contents do: [:aBankingEntity | (aBankingEntity seeIfAlreadyInHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ] ].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 15:01:57' prior: 50928882!
addPortfolio: aPortfolio 

	(self == aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	( parentPortfolio == aPortfolio ) ifTrue: [ self error: self class cycleHierarchyError ].
	
	contents do: [:aBankingEntity | (aBankingEntity seeIfAlreadyInHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ] ].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 15:02:58' prior: 50928519!
seeIfAlreadyInHierarchy: bankingEntity
	
	(contents allSatisfy: [ :aBankingEntity | aBankingEntity seeIfAlreadyInHierarchy: bankingEntity ]) ifFalse: [ self error: Portfolio cycleHierarchyError ].! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 15:05:40' prior: 50928916!
seeIfAlreadyInHierarchy: bankingEntity
	
	(contents allSatisfy: [ :aBankingEntity | aBankingEntity seeIfAlreadyInHierarchy: bankingEntity ]) ifFalse: [ self error: Portfolio cycleHierarchyError ].
	
	^ self == bankingEntity! !

!testRun: #ProtfolioTest #test13 stamp: 'GR 11/7/2020 15:06:19'!
FAILURE!
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 15:09:33' prior: 50928925!
seeIfAlreadyInHierarchy: bankingEntity
	
	contents 
		detect: [ :aBankingEntity | aBankingEntity seeIfAlreadyInHierarchy: bankingEntity ] 
		ifFound: [ ^true ] 
		ifNone: [ ^ self == bankingEntity ].
	
	! !

!testRun: #ProtfolioTest #test13 stamp: 'GR 11/7/2020 15:09:47'!
FAILURE!

!testRun: #ProtfolioTest #test13 stamp: 'GR 11/7/2020 15:09:47'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 15:11:16' prior: 50928900!
addPortfolio: aPortfolio 

	(self == aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	( parentPortfolio == aPortfolio ) ifTrue: [ self error: self class cycleHierarchyError ].
	
	self seeIfAlreadyInHierarchy: aPortfolio.
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 15:13:20' prior: 50928937!
seeIfAlreadyInHierarchy: bankingEntity
	
	contents 
		detect: [ :aBankingEntity | aBankingEntity seeIfAlreadyInHierarchy: bankingEntity ] 
		ifFound: [ ^true ] 
		ifNone: [ ^ self == bankingEntity ].! !

!testRun: #ProtfolioTest #test13 stamp: 'GR 11/7/2020 15:13:23'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 15:13:59' prior: 50928951!
addPortfolio: aPortfolio 

	(self == aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	( parentPortfolio == aPortfolio ) ifTrue: [ self error: self class cycleHierarchyError ].
	
	(self seeIfAlreadyInHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 15:14:09' prior: 50928975!
addPortfolio: aPortfolio 

	( parentPortfolio == aPortfolio ) ifTrue: [ self error: self class cycleHierarchyError ].
	
	(self seeIfAlreadyInHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 15:15:34' prior: 50928963!
seeIfAlreadyInHierarchy: bankingEntity
	
	contents 
		detect: [ :aBankingEntity | aBankingEntity seeIfAlreadyInHierarchy: bankingEntity ] 
		ifFound: [ :aBankingEntity | ^true ] 
		ifNone: [ ^ self == bankingEntity ].! !

!testRun: #ProtfolioTest #test13 stamp: 'GR 11/7/2020 15:15:53'!
PASSED!

!testRun: #ProtfolioTest #test13 stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/7/2020 15:15:55'!
ERROR!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/7/2020 15:15:55'!
ERROR!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 15:15:55'!
ERROR!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioItsParentPortfolio stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ProtfolioTest #test13 stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/7/2020 15:15:55'!
FAILURE!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsDownInTheHierarchy stamp: 'GR 11/7/2020 15:15:55'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/7/2020 15:16:02'!
ERROR!
!ReceptiveAccount methodsFor: 'private' stamp: 'GR 11/7/2020 15:16:58' prior: 50928533!
seeIfAlreadyInHierarchy: aReceptiveAccount 
	
	^ self == aReceptiveAccount ! !

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/7/2020 15:16:59'!
PASSED!

!testRun: #ProtfolioTest #test13 stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioItsParentPortfolio stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test13 stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/7/2020 15:17:03'!
FAILURE!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsDownInTheHierarchy stamp: 'GR 11/7/2020 15:17:03'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/7/2020 15:17:14'!
FAILURE!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 15:17:47' prior: 50928863!
test13

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio addPortfolio: portfolio3 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 15:17:56'!
test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio addPortfolio: portfolio3 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!methodRemoval: ProtfolioTest #test13 stamp: 'GR 11/7/2020 15:17:56'!
test13

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio addPortfolio: portfolio3 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 15:28:01'!
test14

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio addPortfolio: portfolio3 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 15:32:20'!
test12CanNotAddToPortfolioAnyOfItsParents

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	
	self
		should: [ portfolio2 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!methodRemoval: ProtfolioTest #test12CanNotAddToPortfolioItsParentPortfolio stamp: 'GR 11/7/2020 15:32:20'!
test12CanNotAddToPortfolioItsParentPortfolio

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	
	self
		should: [ portfolio2 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 15:33:30' prior: 50929259!
test12CanNotAddToPortfolioAnyOfItsParents

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio3.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio3 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ].
	
	self
		should: [ portfolio3 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 15:33:38' prior: 50929287!
test12CanNotAddToPortfolioAnyOfItsParents

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio3.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio3 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ].
	
	self
		should: [ portfolio3 addPortfolio: portfolio2 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/7/2020 15:33:56'!
FAILURE!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/7/2020 15:33:56'!
FAILURE!

Object subclass: #Portfolio
	instanceVariableNames: 'contents containees'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'GR 11/7/2020 15:34:24'!
Object subclass: #Portfolio
	instanceVariableNames: 'contents containees'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/7/2020 15:45:18'!
FAILURE!

Object subclass: #Portfolio
	instanceVariableNames: 'contents parentsPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'GR 11/7/2020 15:48:17'!
Object subclass: #Portfolio
	instanceVariableNames: 'contents parentsPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 15:50:02' prior: 50928989!
addPortfolio: aPortfolio 

	parentsPortfolio detect: [ :portfolio | portfolio == aPortfolio ] ifFound: [:portfolio | self error: self class cycleHierarchyError ] ifNone: [].
	
	(self seeIfAlreadyInHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/7/2020 15:50:05'!
FAILURE!
!Portfolio methodsFor: 'initialization' stamp: 'GR 11/7/2020 15:50:44' prior: 50925924 overrides: 16896425!
initialize

	contents := Set new.
	parentsPortfolio  := Set new.! !

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/7/2020 15:50:48'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 15:51:53' prior: 50929367!
addPortfolio: aPortfolio 

	parentsPortfolio detect: [ :portfolio | portfolio == aPortfolio ] ifFound: [:portfolio | self error: self class cycleHierarchyError ] ifNone: [].
	
	(self seeIfAlreadyInHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 15:52:06' prior: 50927355!
childOf: aPortfolio 
	
	parentsPortfolio add: aPortfolio .! !

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/7/2020 15:52:07'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test14 stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/7/2020 15:52:09'!
FAILURE!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsDownInTheHierarchy stamp: 'GR 11/7/2020 15:52:09'!
FAILURE!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/7/2020 15:52:11'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 15:53:16' prior: 50929244!
test14

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio3 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!testRun: #ProtfolioTest #test14 stamp: 'GR 11/7/2020 15:59:58'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 16:00:55' prior: 50929394!
addPortfolio: aPortfolio 
	
	(self seeIfAlreadyInHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:01:23' prior: 50929001!
seeIfAlreadyInHierarchy: bankingEntity
	
	parentsPortfolio 
		detect: [ :portfolio | portfolio == bankingEntity ] 
		ifFound: [:portfolio | self error: self class cycleHierarchyError ] 
		ifNone: [].
	
	contents 
		detect: [ :aBankingEntity | aBankingEntity seeIfAlreadyInHierarchy: bankingEntity ] 
		ifFound: [ :aBankingEntity | ^true ] 
		ifNone: [ ^ self == bankingEntity ].! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:01:57' prior: 50929509!
seeIfAlreadyInHierarchy: bankingEntity
	
	parentsPortfolio 
		detect: [ :portfolio | portfolio seeIfAlreadyInHierarchy: bankingEntity ] 
		ifFound: [:portfolio | ^true ] 
		ifNone: [].
	
	contents 
		detect: [ :aBankingEntity | aBankingEntity seeIfAlreadyInHierarchy: bankingEntity ] 
		ifFound: [ :aBankingEntity | ^true ] 
		ifNone: [ ^ self == bankingEntity ].! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:02:37' prior: 50929524!
seeIfAlreadyInHierarchy: bankingEntity
	
	contents 
		detect: [ :aBankingEntity | aBankingEntity seeIfAlreadyInHierarchy: bankingEntity ] 
		ifFound: [ :aBankingEntity | ^true ] 
		ifNone: [ ^ self == bankingEntity ].! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 16:06:49' prior: 50929500!
addPortfolio: aPortfolio 
	
	(self seeIfAlreadyInHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	parentsPortfolio 
		detect: [ :portfolio | portfolio seeIfAlreadyInHierarchy: aPortfolio ] 
		ifFound: [:portfolio | ^true ] 
		ifNone: [].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 16:07:05' prior: 50929548!
addPortfolio: aPortfolio 
	
	(self seeIfAlreadyInHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	parentsPortfolio 
		detect: [ :portfolio | portfolio seeIfAlreadyInHierarchy: aPortfolio ] 
		ifFound: [:portfolio | true ] 
		ifNone: [].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 16:07:19'!
seeIfItsUpInTheHierarchy: aPortfolio

	^ parentsPortfolio 
		detect: [ :portfolio | portfolio seeIfAlreadyInHierarchy: aPortfolio ] 
		ifFound: [:portfolio | true ] 
		ifNone: []! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 16:07:19' prior: 50929561!
addPortfolio: aPortfolio 
	
	(self seeIfAlreadyInHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	self seeIfItsUpInTheHierarchy: aPortfolio.
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 16:07:43' prior: 50929574!
seeIfItsUpInTheHierarchy: aPortfolio

	^ parentsPortfolio 
		detect: [ :portfolio | portfolio seeIfItsUpInTheHierarchy: aPortfolio ] 
		ifFound: [:portfolio | true ] 
		ifNone: []! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 16:07:57' prior: 50929593!
seeIfItsUpInTheHierarchy: aPortfolio

	^ parentsPortfolio 
		detect: [ :portfolio | portfolio seeIfItsUpInTheHierarchy: aPortfolio ] 
		ifFound: [:portfolio | true ] 
		ifNone: [ false ]! !

!testRun: #ProtfolioTest #test14 stamp: 'GR 11/7/2020 16:08:05'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 16:08:31' prior: 50929583!
addPortfolio: aPortfolio 
	
	(self seeIfAlreadyInHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	(self seeIfItsUpInTheHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !

!testRun: #ProtfolioTest #test14 stamp: 'GR 11/7/2020 16:08:32'!
FAILURE!

!testRun: #ProtfolioTest #test14 stamp: 'GR 11/7/2020 16:08:36'!
FAILURE!

!testRun: #ProtfolioTest #test14 stamp: 'GR 11/7/2020 16:08:36'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 16:09:23' prior: 50929602!
seeIfItsUpInTheHierarchy: aPortfolio

	^ parentsPortfolio 
		detect: [ :portfolio | portfolio seeIfItsUpInTheHierarchy: aPortfolio ] 
		ifFound: [:portfolio | true ] 
		ifNone: [ self == aPortfolio ]! !

!testRun: #ProtfolioTest #test14 stamp: 'GR 11/7/2020 16:09:26'!
PASSED!

!testRun: #ProtfolioTest #test14 stamp: 'GR 11/7/2020 16:09:28'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 16:09:52'!
test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio3 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!methodRemoval: ProtfolioTest #test14 stamp: 'GR 11/7/2020 16:09:52'!
test14

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio3 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 16:10:17'!
test15CanNotAddToPortfolioAPortfolioInAnotherBranch

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio3 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 16:10:29' prior: 50929677!
test15CanNotAddToPortfolioAPortfolioInAnotherBranch

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio addPortfolio: portfolio3.
	
	self
		should: [ portfolio3 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 16:10:37' prior: 50929694!
test15CanNotAddToPortfolioAPortfolioInAnotherBranch

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio addPortfolio: portfolio3.
	
	self
		should: [ portfolio2 addPortfolio: portfolio3 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

Object subclass: #Portfolio
	instanceVariableNames: 'contents rootPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'GR 11/7/2020 16:11:00'!
Object subclass: #Portfolio
	instanceVariableNames: 'contents rootPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'GR 11/7/2020 16:11:24'!
Object subclass: #Portfolio
	instanceVariableNames: 'bankingEntities rootPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 16:11:24' prior: 50928020!
hasRegistered: aTransaction
	
	| hasRegistered |
	
	hasRegistered := false.
	
	bankingEntities do: [ :aBankingEntity |  hasRegistered := hasRegistered or: (aBankingEntity  hasRegistered: aTransaction) ].
	
	^ hasRegistered.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 16:11:24' prior: 50926949!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	
	bankingEntities do: [:aBankingEntity | transactions addAll: aBankingEntity transactions].
	
	^ transactions.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 16:11:24' prior: 50929385 overrides: 16896425!
initialize

	bankingEntities := Set new.
	parentsPortfolio  := Set new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 16:11:24' prior: 50926941!
balance
	
	| totalBalance |
	
	totalBalance := 0. 
	
	bankingEntities do: [:aBankingEntity | totalBalance := totalBalance + aBankingEntity balance]. 
	
	^totalBalance.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 16:11:24' prior: 50928422!
addAccount: aReceptiveAccount 
	
	self seeIfAlreadyInHierarchy: aReceptiveAccount.
	
	bankingEntities add: aReceptiveAccount ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 16:11:24' prior: 50929538!
seeIfAlreadyInHierarchy: bankingEntity
	
	bankingEntities 
		detect: [ :aBankingEntity | aBankingEntity seeIfAlreadyInHierarchy: bankingEntity ] 
		ifFound: [ :aBankingEntity | ^true ] 
		ifNone: [ ^ self == bankingEntity ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 16:11:24' prior: 50925450!
isEmpty
	
	^ bankingEntities isEmpty! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 16:11:24' prior: 50929613!
addPortfolio: aPortfolio 
	
	(self seeIfAlreadyInHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	(self seeIfItsUpInTheHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	bankingEntities add: aPortfolio.
	
	aPortfolio childOf: self! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:15:49' prior: 50929791!
seeIfAlreadyInHierarchy: bankingEntity
	
	| isInTheHierarchy |
	
	isInTheHierarchy := false.
	
	rootPortfolios do: [ :aRootPortfolio | isInTheHierarchy := isInTheHierarchy or: (aRootPortfolio lookFor: bankingEntity)].
	
	^isInTheHierarchy 
	
	"bankingEntities 
		detect: [ :aBankingEntity | aBankingEntity seeIfAlreadyInHierarchy: bankingEntity ] 
		ifFound: [ :aBankingEntity | ^true ] 
		ifNone: [ ^ self == bankingEntity ]."! !

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/7/2020 16:16:06'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'GR 11/7/2020 16:16:21' prior: 50929769 overrides: 16896425!
initialize

	bankingEntities := Set new.
	rootPortfolios  := Set new.! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 16:17:26' prior: 50929807!
addPortfolio: aPortfolio 
	
	(self seeIfAlreadyInHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	bankingEntities add: aPortfolio.
	
	aPortfolio addRootsOfParent: self! !

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/7/2020 16:17:31'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:17:37'!
addRootsOfParent: aPortfolio 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:17:57' prior: 50929858!
addRootsOfParent: aPortfolio 
	
	rootPortfolios := aPortfolio rootPortfolios.! !

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/7/2020 16:18:00'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/7/2020 16:18:04'!
rootPortfolios
	self shouldBeImplemented.
	^rootPortfolios! !
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/7/2020 16:18:07' prior: 50929872!
rootPortfolios
	
	^rootPortfolios! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:19:46' prior: 50929863!
addRootsOfParent: aPortfolio 
	
	rootPortfolios addAll: aPortfolio rootPortfolios.! !

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/7/2020 16:20:06'!
FAILURE!
!Portfolio methodsFor: 'initialization' stamp: 'GR 11/7/2020 16:21:33' prior: 50929840 overrides: 16896425!
initialize

	bankingEntities := Set new.
	rootPortfolios  := Set with: self.! !

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/7/2020 16:21:55'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:22:14'!
lookFor: aPortfolio 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:25:48' prior: 50929900!
lookFor: aPortfolio 
	
	bankingEntities 
		detect: [ :aBankingEntity | aBankingEntity lookFor: aPortfolio ]
		ifFound: [ ^true ]
		ifNone: [ ^self == aPortfolio ]! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:28:33' prior: 50929881!
addRootsOfParent: aPortfolio 
	
	rootPortfolios addAll: aPortfolio rootPortfolios.
	rootPortfolios remove: self ifAbsent: [].! !

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/7/2020 16:29:24'!
FAILURE!
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:30:06' prior: 50929905!
lookFor: aPortfolio 
	
	bankingEntities 
		detect: [ :aBankingEntity | aBankingEntity lookFor: aPortfolio ]
		ifFound: [ :aBankingEntity | ^true ]
		ifNone: [ ^ self == aPortfolio ]! !

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/7/2020 16:30:09'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/7/2020 16:30:10'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 16:33:06'!
test16

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio.
	
	self
		should: [ portfolio2 addPortfolio: portfolio3 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!testRun: #ProtfolioTest #test16 stamp: 'GR 11/7/2020 16:33:07'!
FAILURE!
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:40:29' prior: 50929913!
addRootsOfParent: aPortfolio 
	
	rootPortfolios addAll: aPortfolio rootPortfolios.
	bankingEntities do: [ :aBankingEntity | aBankingEntity addRootsOfParent: aPortfolio ].
	rootPortfolios remove: self ifAbsent: [].! !

!testRun: #ProtfolioTest #test16 stamp: 'GR 11/7/2020 16:40:58'!
PASSED!

!testRun: #ProtfolioTest #test16 stamp: 'GR 11/7/2020 16:41:00'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 16:42:54'!
test16CanNotAddToPortfolioAPortfolioThatContainsIt

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio.
	
	self
		should: [ portfolio2 addPortfolio: portfolio3 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!methodRemoval: ProtfolioTest #test16 stamp: 'GR 11/7/2020 16:42:54'!
test16

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio.
	
	self
		should: [ portfolio2 addPortfolio: portfolio3 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 16:43:07'!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt

	| portfolio account |
	
	portfolio := Portfolio new.
	account  := ReceptiveAccount new.
	portfolio addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!methodRemoval: ProtfolioTest #test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/7/2020 16:43:07'!
test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt

	| portfolio account |
	
	portfolio := Portfolio new.
	account  := ReceptiveAccount new.
	portfolio addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]!

!methodRemoval: Portfolio #seeIfItsUpInTheHierarchy: stamp: 'GR 11/7/2020 16:46:30'!
seeIfItsUpInTheHierarchy: aPortfolio

	^ parentsPortfolio 
		detect: [ :portfolio | portfolio seeIfItsUpInTheHierarchy: aPortfolio ] 
		ifFound: [:portfolio | true ] 
		ifNone: [ self == aPortfolio ]!
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:46:41' prior: 50929957!
addRootsOfParent: aPortfolio 
	
	rootPortfolios addAll: aPortfolio rootPortfolios.
	"bankingEntities do: [ :aBankingEntity | aBankingEntity addRootsOfParent: aPortfolio ]."
	rootPortfolios remove: self ifAbsent: [].! !

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/7/2020 16:46:48'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsDownInTheHierarchy stamp: 'GR 11/7/2020 16:46:58'!
FAILURE!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsDownInTheHierarchy stamp: 'GR 11/7/2020 16:46:58'!
FAILURE!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/7/2020 16:47:01'!
FAILURE!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/7/2020 16:47:01'!
FAILURE!
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:47:13' prior: 50930039!
addRootsOfParent: aPortfolio 
	
	rootPortfolios addAll: aPortfolio rootPortfolios.
	bankingEntities do: [ :aBankingEntity | aBankingEntity addRootsOfParent: aPortfolio ].
	rootPortfolios remove: self ifAbsent: [].! !

!methodRemoval: Portfolio #childOf: stamp: 'GR 11/7/2020 16:48:09'!
childOf: aPortfolio 
	
	parentsPortfolio add: aPortfolio .!
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:48:21' prior: 50929819!
seeIfAlreadyInHierarchy: bankingEntity
	
	| isInTheHierarchy |
	
	isInTheHierarchy := false.
	
	rootPortfolios do: [ :aRootPortfolio | isInTheHierarchy := isInTheHierarchy or: (aRootPortfolio lookFor: bankingEntity)].
	
	^isInTheHierarchy! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 16:49:05'!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy

	| portfolio portfolio2 account |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account  := ReceptiveAccount new.
	
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!methodRemoval: ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsDownInTheHierarchy stamp: 'GR 11/7/2020 16:49:05'!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsDownInTheHierarchy

	| portfolio portfolio2 account |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account  := ReceptiveAccount new.
	
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 16:49:16'!
test18CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt

	| portfolio account |
	
	portfolio := Portfolio new.
	account  := ReceptiveAccount new.
	portfolio addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!methodRemoval: ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/7/2020 16:49:16'!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt

	| portfolio account |
	
	portfolio := Portfolio new.
	account  := ReceptiveAccount new.
	portfolio addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 16:50:23'!
FAILURE!
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:51:51' prior: 50929924!
lookFor: bankingEntity 
	
	bankingEntities 
		detect: [ :aBankingEntity | aBankingEntity lookFor: bankingEntity ]
		ifFound: [ :aBankingEntity | ^true ]
		ifNone: [ ^ self == bankingEntity ]! !

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 16:52:36'!
FAILURE!
!ReceptiveAccount methodsFor: 'private' stamp: 'GR 11/7/2020 16:52:50'!
lookFor: aReceptiveAccount 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'private' stamp: 'GR 11/7/2020 16:53:26' prior: 50930174!
lookFor: aBankingEntity 
	
	^ self == aBankingEntity! !

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 16:53:39'!
FAILURE!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 16:53:44'!
FAILURE!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 16:53:44'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 16:54:31' prior: 50929784!
addAccount: aReceptiveAccount 
	
	(self seeIfAlreadyInHierarchy: aReceptiveAccount) ifTrue: [self error: Portfolio cycleHierarchyError ].
	
	bankingEntities add: aReceptiveAccount ! !

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 16:54:32'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 16:54:34'!
PASSED!

!methodRemoval: ProtfolioTest #test18CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/7/2020 16:54:39'!
test18CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt

	| portfolio account |
	
	portfolio := Portfolio new.
	account  := ReceptiveAccount new.
	portfolio addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/7/2020 16:54:41'!
ERROR!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/7/2020 16:54:41'!
ERROR!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 16:54:41'!
ERROR!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/7/2020 16:54:46'!
ERROR!
!ReceptiveAccount methodsFor: 'private' stamp: 'GR 11/7/2020 16:55:16'!
addRootsOfParent: aPortfolio 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'private' stamp: 'GR 11/7/2020 16:55:19' prior: 50930326!
addRootsOfParent: aPortfolio 
	
	! !

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/7/2020 16:57:36'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/7/2020 16:57:38'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 16:57:39'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

----QUIT----(7 November 2020 17:02:56) CuisUniversity-4383.image priorSource: 19109492!

----STARTUP---- (7 November 2020 17:03:21) as /home/grosinov/linux64/CuisUniversity-4383.image!

!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:04:38' prior: 50927603!
test10CanNotAddAPortfolioToItself

	| portfolio |
	
	portfolio := Portfolio new.
	
	self
		should: [ portfolio addPortfolio: portfolio ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:04:47' prior: 50927628!
test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	
	self
		should: [ portfolio addPortfolio: portfolio2 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:04:59' prior: 50929309!
test12CanNotAddToPortfolioAnyOfItsParents

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio3.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio3 addPortfolio: portfolio ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.
	
	self
		should: [ portfolio3 addPortfolio: portfolio2 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:05:03' prior: 50929213!
test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio addPortfolio: portfolio3 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:05:06' prior: 50929646!
test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio3 addPortfolio: portfolio ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:05:12' prior: 50929711!
test15CanNotAddToPortfolioAPortfolioInAnotherBranch

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio addPortfolio: portfolio3.
	
	self
		should: [ portfolio2 addPortfolio: portfolio3 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:05:17' prior: 50929971!
test16CanNotAddToPortfolioAPortfolioThatContainsIt

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio.
	
	self
		should: [ portfolio2 addPortfolio: portfolio3 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:05:21' prior: 50930093!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy

	| portfolio portfolio2 account |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account  := ReceptiveAccount new.
	
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 17:05:37'!
PASSED!
!ProtfolioTest methodsFor: 'nil' stamp: 'GR 11/7/2020 17:05:56' overrides: 16927572!
setUp

	! !

TestCase subclass: #ProtfolioTest
	instanceVariableNames: 'portfolio portfolio2 portfolio3 account account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TestCase subclass: #ProtfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ProtfolioTest category: 'Portfolio-Ejercicio' stamp: 'GR 11/7/2020 17:06:21'!
TestCase subclass: #ProtfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:06:37' prior: 50925628!
test01PortfolioStartsWithBalanceCero

	| portfolio |
	self assert: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.! !

TestCase subclass: #ProtfolioTest
	instanceVariableNames: 'portfolio portfolio2 portfolio3 account account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TestCase subclass: #ProtfolioTest
	instanceVariableNames: 'portfolio1 portfolio4 portfolio5 account6 account7'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ProtfolioTest category: 'Portfolio-Ejercicio' stamp: 'GR 11/7/2020 17:07:07'!
TestCase subclass: #ProtfolioTest
	instanceVariableNames: 'portfolio1 portfolio4 portfolio5 account6 account7'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:07:23' prior: 50930750!
test01PortfolioStartsWithBalanceCero

	self assert: portfolio1 isEmpty.
	self assert: 0 equals: portfolio1 balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:08:07' prior: 50930729 overrides: 16927572!
setUp

	portfolio1 := Portfolio new.
	portfolio4 := Portfolio new.
	portfolio5 := Portfolio new.
	account6  := ReceptiveAccount new.
	account7  := ReceptiveAccount new.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:08:33' prior: 50927508!
test02BalanceWithAnAccount

	Deposit register: 100 on: account6.
	portfolio1 addAccount: account6.
	
	self deny: portfolio1 isEmpty.
	self assert: 100 equals: portfolio1 balance.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:10:16' prior: 50927519!
test03BalanceWithAnAccountAndAPortfolio

	
	
	portfolio1 := Portfolio new.
	portfolio4 := Portfolio new.
	account6 := ReceptiveAccount new.
	account7 := ReceptiveAccount new.
	
	Deposit register: 100 on: account6.
	Deposit register: 50 on: account7.
	
	portfolio1 addAccount: account6.
	portfolio4 addAccount: account7.
	portfolio1 addPortfolio: portfolio4.
	
	self assert: 150 equals: portfolio1 balance.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:10:27' prior: 50930804!
test03BalanceWithAnAccountAndAPortfolio

	portfolio1 := Portfolio new.
	portfolio4 := Portfolio new.
	account6 := ReceptiveAccount new.
	account7 := ReceptiveAccount new.
	
	Deposit register: 100 on: account6.
	Deposit register: 50 on: account7.
	
	portfolio1 addAccount: account6.
	portfolio4 addAccount: account7.
	portfolio1 addPortfolio: portfolio4.
	
	self assert: 150 equals: portfolio1 balance.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:10:37' prior: 50925855!
test04TransactionsOfEmptyPortfolioReturnsNoTransactions

	self assert: OrderedCollection new equals: portfolio1 transactions.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:11:26' prior: 50927536!
test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount

	| deposit |
	
	deposit := Deposit register: 100 on: account6.
	portfolio1 addAccount: account6.
	
	self assert: (OrderedCollection with: deposit) equals: portfolio1 transactions.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:12:54' prior: 50927550!
test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction

	| deposit1 deposit2 |
	
	deposit1 := Deposit register: 100 on: account6.
	deposit2 := Deposit register: 50 on: account7.
	
	portfolio1 addAccount: account6.
	portfolio4 addAccount: account7.
	portfolio1 addPortfolio: portfolio4 .
	
	self assert: (( portfolio1 transactions includes: deposit1 ) and: (portfolio1 transactions includes: deposit2)).! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:13:22' prior: 50926852!
test07EmptyPortfolioHasNotARegisteredTransaction

	| deposit |
	
	deposit := Deposit for: 100.
	
	self deny: (portfolio1 hasRegistered: deposit).! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:13:41' prior: 50927572!
test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount

	| deposit |
	
	deposit := Deposit register: 100 on: account6.
	
	portfolio1 addAccount: account6.
	
	self assert: (portfolio1 hasRegistered: deposit).! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:14:42' prior: 50927584!
test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount

	| deposit |
	
	Deposit register: 100 on: account6.
	deposit := Deposit register: 50 on: account7.
	
	portfolio1 addAccount: account6.
	portfolio4 addAccount: account7.
	portfolio1 addPortfolio: portfolio4 .
	
	self assert: (portfolio1 hasRegistered: deposit).! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:14:59' prior: 50930543!
test10CanNotAddAPortfolioToItself

	self
		should: [ portfolio1 addPortfolio: portfolio1 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:15:37' prior: 50930553!
test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio

	
	portfolio1 addPortfolio: portfolio4.
	
	self
		should: [ portfolio1 addPortfolio: portfolio4 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:16:35' prior: 50930566!
test12CanNotAddToPortfolioAnyOfItsParents

	portfolio1 addPortfolio: portfolio5.
	portfolio4 addPortfolio: portfolio5.
	
	self
		should: [ portfolio5 addPortfolio: portfolio1 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.
	
	self
		should: [ portfolio5 addPortfolio: portfolio4 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:17:04' prior: 50930585!
test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio

	portfolio1 addPortfolio: portfolio4.
	portfolio4 addPortfolio: portfolio5.
	
	self
		should: [ portfolio1 addPortfolio: portfolio5 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:18:07' prior: 50930600!
test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio

	portfolio1 addPortfolio: portfolio4.
	portfolio4 addPortfolio: portfolio5.
	
	self
		should: [ portfolio5 addPortfolio: portfolio1 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:18:24' prior: 50930615!
test15CanNotAddToPortfolioAPortfolioInAnotherBranch

	portfolio1 addPortfolio: portfolio4.
	portfolio1 addPortfolio: portfolio5.
	
	self
		should: [ portfolio4 addPortfolio: portfolio5 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:18:57' prior: 50930630!
test16CanNotAddToPortfolioAPortfolioThatContainsIt

	portfolio1 addPortfolio: portfolio4.
	portfolio5 addPortfolio: portfolio1.
	
	self
		should: [ portfolio4 addPortfolio: portfolio5 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:19:17' prior: 50930645!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy

	portfolio1 addPortfolio: portfolio4.
	portfolio4 addAccount: account6.
	
	self
		should: [ portfolio1 addAccount: account6 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !

!classDefinition: #ProtfolioTest category: 'Portfolio-Ejercicio' stamp: 'GR 11/7/2020 17:19:27'!
TestCase subclass: #ProtfolioTest
	instanceVariableNames: 'portfolio portfolio4 portfolio5 account6 account7'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930980!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy

	portfolio addPortfolio: portfolio4.
	portfolio4 addAccount: account6.
	
	self
		should: [ portfolio addAccount: account6 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930903!
test10CanNotAddAPortfolioToItself

	self
		should: [ portfolio addPortfolio: portfolio ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930958!
test15CanNotAddToPortfolioAPortfolioInAnotherBranch

	portfolio addPortfolio: portfolio4.
	portfolio addPortfolio: portfolio5.
	
	self
		should: [ portfolio4 addPortfolio: portfolio5 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930879!
test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount

	| deposit |
	
	deposit := Deposit register: 100 on: account6.
	
	portfolio addAccount: account6.
	
	self assert: (portfolio hasRegistered: deposit).! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930836!
test04TransactionsOfEmptyPortfolioReturnsNoTransactions

	self assert: OrderedCollection new equals: portfolio transactions.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930778!
test01PortfolioStartsWithBalanceCero

	self assert: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930947!
test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio

	portfolio addPortfolio: portfolio4.
	portfolio4 addPortfolio: portfolio5.
	
	self
		should: [ portfolio5 addPortfolio: portfolio ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930921!
test12CanNotAddToPortfolioAnyOfItsParents

	portfolio addPortfolio: portfolio5.
	portfolio4 addPortfolio: portfolio5.
	
	self
		should: [ portfolio5 addPortfolio: portfolio ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.
	
	self
		should: [ portfolio5 addPortfolio: portfolio4 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930786 overrides: 16927572!
setUp

	portfolio := Portfolio new.
	portfolio4 := Portfolio new.
	portfolio5 := Portfolio new.
	account6  := ReceptiveAccount new.
	account7  := ReceptiveAccount new.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930820!
test03BalanceWithAnAccountAndAPortfolio

	portfolio := Portfolio new.
	portfolio4 := Portfolio new.
	account6 := ReceptiveAccount new.
	account7 := ReceptiveAccount new.
	
	Deposit register: 100 on: account6.
	Deposit register: 50 on: account7.
	
	portfolio addAccount: account6.
	portfolio4 addAccount: account7.
	portfolio addPortfolio: portfolio4.
	
	self assert: 150 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930936!
test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio

	portfolio addPortfolio: portfolio4.
	portfolio4 addPortfolio: portfolio5.
	
	self
		should: [ portfolio addPortfolio: portfolio5 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930889!
test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount

	| deposit |
	
	Deposit register: 100 on: account6.
	deposit := Deposit register: 50 on: account7.
	
	portfolio addAccount: account6.
	portfolio4 addAccount: account7.
	portfolio addPortfolio: portfolio4 .
	
	self assert: (portfolio hasRegistered: deposit).! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930911!
test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio

	
	portfolio addPortfolio: portfolio4.
	
	self
		should: [ portfolio addPortfolio: portfolio4 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930854!
test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction

	| deposit1 deposit2 |
	
	deposit1 := Deposit register: 100 on: account6.
	deposit2 := Deposit register: 50 on: account7.
	
	portfolio addAccount: account6.
	portfolio4 addAccount: account7.
	portfolio addPortfolio: portfolio4 .
	
	self assert: (( portfolio transactions includes: deposit1 ) and: (portfolio transactions includes: deposit2)).! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930795!
test02BalanceWithAnAccount

	Deposit register: 100 on: account6.
	portfolio addAccount: account6.
	
	self deny: portfolio isEmpty.
	self assert: 100 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930969!
test16CanNotAddToPortfolioAPortfolioThatContainsIt

	portfolio addPortfolio: portfolio4.
	portfolio5 addPortfolio: portfolio.
	
	self
		should: [ portfolio4 addPortfolio: portfolio5 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930843!
test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount

	| deposit |
	
	deposit := Deposit register: 100 on: account6.
	portfolio addAccount: account6.
	
	self assert: (OrderedCollection with: deposit) equals: portfolio transactions.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930871!
test07EmptyPortfolioHasNotARegisteredTransaction

	| deposit |
	
	deposit := Deposit for: 100.
	
	self deny: (portfolio hasRegistered: deposit).! !

!classDefinition: #ProtfolioTest category: 'Portfolio-Ejercicio' stamp: 'GR 11/7/2020 17:19:31'!
TestCase subclass: #ProtfolioTest
	instanceVariableNames: 'portfolio portfolio2 portfolio5 account6 account7'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:31' prior: 50931146!
test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction

	| deposit1 deposit2 |
	
	deposit1 := Deposit register: 100 on: account6.
	deposit2 := Deposit register: 50 on: account7.
	
	portfolio addAccount: account6.
	portfolio2 addAccount: account7.
	portfolio addPortfolio: portfolio2 .
	
	self assert: (( portfolio transactions includes: deposit1 ) and: (portfolio transactions includes: deposit2)).! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:31' prior: 50931085 overrides: 16927572!
setUp

	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio5 := Portfolio new.
	account6  := ReceptiveAccount new.
	account7  := ReceptiveAccount new.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:31' prior: 50931136!
test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio

	
	portfolio addPortfolio: portfolio2.
	
	self
		should: [ portfolio addPortfolio: portfolio2 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:31' prior: 50931057!
test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio

	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio5.
	
	self
		should: [ portfolio5 addPortfolio: portfolio ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:31' prior: 50931021!
test15CanNotAddToPortfolioAPortfolioInAnotherBranch

	portfolio addPortfolio: portfolio2.
	portfolio addPortfolio: portfolio5.
	
	self
		should: [ portfolio2 addPortfolio: portfolio5 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:31' prior: 50931001!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy

	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account6.
	
	self
		should: [ portfolio addAccount: account6 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:31' prior: 50931122!
test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount

	| deposit |
	
	Deposit register: 100 on: account6.
	deposit := Deposit register: 50 on: account7.
	
	portfolio addAccount: account6.
	portfolio2 addAccount: account7.
	portfolio addPortfolio: portfolio2 .
	
	self assert: (portfolio hasRegistered: deposit).! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:31' prior: 50931172!
test16CanNotAddToPortfolioAPortfolioThatContainsIt

	portfolio addPortfolio: portfolio2.
	portfolio5 addPortfolio: portfolio.
	
	self
		should: [ portfolio2 addPortfolio: portfolio5 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:31' prior: 50931094!
test03BalanceWithAnAccountAndAPortfolio

	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account6 := ReceptiveAccount new.
	account7 := ReceptiveAccount new.
	
	Deposit register: 100 on: account6.
	Deposit register: 50 on: account7.
	
	portfolio addAccount: account6.
	portfolio2 addAccount: account7.
	portfolio addPortfolio: portfolio2.
	
	self assert: 150 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:31' prior: 50931110!
test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio

	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio5.
	
	self
		should: [ portfolio addPortfolio: portfolio5 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:31' prior: 50931069!
test12CanNotAddToPortfolioAnyOfItsParents

	portfolio addPortfolio: portfolio5.
	portfolio2 addPortfolio: portfolio5.
	
	self
		should: [ portfolio5 addPortfolio: portfolio ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.
	
	self
		should: [ portfolio5 addPortfolio: portfolio2 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !

!classDefinition: #ProtfolioTest category: 'Portfolio-Ejercicio' stamp: 'GR 11/7/2020 17:19:34'!
TestCase subclass: #ProtfolioTest
	instanceVariableNames: 'portfolio portfolio2 portfolio3 account6 account7'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:34' prior: 50931260!
test15CanNotAddToPortfolioAPortfolioInAnotherBranch

	portfolio addPortfolio: portfolio2.
	portfolio addPortfolio: portfolio3.
	
	self
		should: [ portfolio2 addPortfolio: portfolio3 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:34' prior: 50931229 overrides: 16927572!
setUp

	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account6  := ReceptiveAccount new.
	account7  := ReceptiveAccount new.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:35' prior: 50931324!
test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio

	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio addPortfolio: portfolio3 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:35' prior: 50931248!
test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio

	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio3 addPortfolio: portfolio ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:35' prior: 50931297!
test16CanNotAddToPortfolioAPortfolioThatContainsIt

	portfolio addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio.
	
	self
		should: [ portfolio2 addPortfolio: portfolio3 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:35' prior: 50931336!
test12CanNotAddToPortfolioAnyOfItsParents

	portfolio addPortfolio: portfolio3.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio3 addPortfolio: portfolio ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.
	
	self
		should: [ portfolio3 addPortfolio: portfolio2 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !

!classDefinition: #ProtfolioTest category: 'Portfolio-Ejercicio' stamp: 'GR 11/7/2020 17:19:46'!
TestCase subclass: #ProtfolioTest
	instanceVariableNames: 'portfolio portfolio2 portfolio3 account account7'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:46' prior: 50931032!
test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount

	| deposit |
	
	deposit := Deposit register: 100 on: account.
	
	portfolio addAccount: account.
	
	self assert: (portfolio hasRegistered: deposit).! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:46' prior: 50931212!
test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction

	| deposit1 deposit2 |
	
	deposit1 := Deposit register: 100 on: account.
	deposit2 := Deposit register: 50 on: account7.
	
	portfolio addAccount: account.
	portfolio2 addAccount: account7.
	portfolio addPortfolio: portfolio2 .
	
	self assert: (( portfolio transactions includes: deposit1 ) and: (portfolio transactions includes: deposit2)).! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:46' prior: 50931163!
test02BalanceWithAnAccount

	Deposit register: 100 on: account.
	portfolio addAccount: account.
	
	self deny: portfolio isEmpty.
	self assert: 100 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:46' prior: 50931308!
test03BalanceWithAnAccountAndAPortfolio

	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	account7 := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	Deposit register: 50 on: account7.
	
	portfolio addAccount: account.
	portfolio2 addAccount: account7.
	portfolio addPortfolio: portfolio2.
	
	self assert: 150 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:46' prior: 50931183!
test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount

	| deposit |
	
	deposit := Deposit register: 100 on: account.
	portfolio addAccount: account.
	
	self assert: (OrderedCollection with: deposit) equals: portfolio transactions.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:46' prior: 50931372 overrides: 16927572!
setUp

	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account  := ReceptiveAccount new.
	account7  := ReceptiveAccount new.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:46' prior: 50931283!
test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount

	| deposit |
	
	Deposit register: 100 on: account.
	deposit := Deposit register: 50 on: account7.
	
	portfolio addAccount: account.
	portfolio2 addAccount: account7.
	portfolio addPortfolio: portfolio2 .
	
	self assert: (portfolio hasRegistered: deposit).! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:46' prior: 50931271!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy

	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !

!classDefinition: #ProtfolioTest category: 'Portfolio-Ejercicio' stamp: 'GR 11/7/2020 17:19:51'!
TestCase subclass: #ProtfolioTest
	instanceVariableNames: 'portfolio portfolio2 portfolio3 account account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:51' prior: 50931476!
test03BalanceWithAnAccountAndAPortfolio

	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	Deposit register: 50 on: account2.
	
	portfolio addAccount: account.
	portfolio2 addAccount: account2.
	portfolio addPortfolio: portfolio2.
	
	self assert: 150 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:51' prior: 50931513!
test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount

	| deposit |
	
	Deposit register: 100 on: account.
	deposit := Deposit register: 50 on: account2.
	
	portfolio addAccount: account.
	portfolio2 addAccount: account2.
	portfolio addPortfolio: portfolio2 .
	
	self assert: (portfolio hasRegistered: deposit).! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:51' prior: 50931504 overrides: 16927572!
setUp

	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account  := ReceptiveAccount new.
	account2  := ReceptiveAccount new.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:51' prior: 50931450!
test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction

	| deposit1 deposit2 |
	
	deposit1 := Deposit register: 100 on: account.
	deposit2 := Deposit register: 50 on: account2.
	
	portfolio addAccount: account.
	portfolio2 addAccount: account2.
	portfolio addPortfolio: portfolio2 .
	
	self assert: (( portfolio transactions includes: deposit1 ) and: (portfolio transactions includes: deposit2)).! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:20:04' prior: 50931548!
test03BalanceWithAnAccountAndAPortfolio

	Deposit register: 100 on: account.
	Deposit register: 50 on: account2.
	
	portfolio addAccount: account.
	portfolio2 addAccount: account2.
	portfolio addPortfolio: portfolio2.
	
	self assert: 150 equals: portfolio balance.! !

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/7/2020 17:20:27'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

----QUIT----(7 November 2020 17:22:00) CuisUniversity-4383.image priorSource: 19164353!

----STARTUP---- (7 November 2020 17:22:22) as /home/grosinov/linux64/CuisUniversity-4383.image!


----QUIT----(7 November 2020 17:22:43) CuisUniversity-4383.image priorSource: 19202003!

----STARTUP---- (8 November 2020 18:30:56) as /home/grosinov/linux64/CuisUniversity-4383.image!


Object subclass: #BankingEntity
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #BankingEntity category: 'Portfolio-Ejercicio' stamp: 'GR 11/8/2020 18:32:53'!
Object subclass: #BankingEntity
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

BankingEntity subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'GR 11/8/2020 18:33:03'!
BankingEntity subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

BankingEntity subclass: #Portfolio
	instanceVariableNames: 'bankingEntities rootPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'GR 11/8/2020 18:33:10'!
BankingEntity subclass: #Portfolio
	instanceVariableNames: 'bankingEntities rootPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!BankingEntity methodsFor: 'no messages' stamp: 'GR 11/8/2020 18:33:50'!
seeIfAlreadyInHierarchy

	self subclassResponsibility.! !
!BankingEntity methodsFor: 'as yet unclassified' stamp: 'GR 11/8/2020 18:34:05'!
seeIfAlreadyInHierarchy: bankingEntity

	self subclassResponsibility.! !

!methodRemoval: BankingEntity #seeIfAlreadyInHierarchy stamp: 'GR 11/8/2020 18:34:08'!
seeIfAlreadyInHierarchy

	self subclassResponsibility.!
!BankingEntity methodsFor: 'as yet unclassified' stamp: 'GR 11/8/2020 18:34:17'!
lookFor: bankingEntity ! !
!BankingEntity methodsFor: 'as yet unclassified' stamp: 'GR 11/8/2020 18:34:28'!
addRootsOfParent: aPortfolio ! !
!BankingEntity methodsFor: 'as yet unclassified' stamp: 'GR 11/8/2020 18:34:34' prior: 50931779!
lookFor: bankingEntity 

	self subclassResponsibility.! !
!BankingEntity methodsFor: 'as yet unclassified' stamp: 'GR 11/8/2020 18:34:41' prior: 50931783!
addRootsOfParent: aPortfolio

	self subclassResponsibility.! !
!BankingEntity methodsFor: 'as yet unclassified' stamp: 'GR 11/8/2020 18:36:47'!
balance

	self subclassResponsibility.! !
!BankingEntity methodsFor: 'as yet unclassified' stamp: 'GR 11/8/2020 18:37:03'!
hasRegistered: aTransaction

	self subclassResponsibility! !
!BankingEntity methodsFor: 'as yet unclassified' stamp: 'GR 11/8/2020 18:37:06' prior: 50931802!
hasRegistered: aTransaction

	self subclassResponsibility.! !
!BankingEntity methodsFor: 'as yet unclassified' stamp: 'GR 11/8/2020 18:37:35'!
transactions

	self subclassResponsibility.! !

----QUIT----(8 November 2020 18:40:00) CuisUniversity-4383.image priorSource: 19202190!

----STARTUP---- (9 November 2020 16:48:51) as /home/grosinov/linux64/CuisUniversity-4383.image!

!Portfolio methodsFor: 'adding' stamp: 'GR 11/9/2020 16:50:36'!
addBankingEntity: aReceptiveAccount

	(self seeIfAlreadyInHierarchy: aReceptiveAccount) ifTrue: [self error: Portfolio cycleHierarchyError ].
	
	bankingEntities add: aReceptiveAccount! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/9/2020 16:50:36' prior: 50930196!
addAccount: aReceptiveAccount 
	
	self addBankingEntity: aReceptiveAccount ! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/9/2020 16:50:56' prior: 50929845!
addPortfolio: aPortfolio 
	
	self addBankingEntity: aPortfolio.
	
	aPortfolio addRootsOfParent: self! !

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 16:51:00'!
PASSED!
!Portfolio methodsFor: 'adding -- private' stamp: 'GR 11/9/2020 16:51:54' prior: 50931822!
addBankingEntity: aBankingEntity

	(self seeIfAlreadyInHierarchy: aBankingEntity) ifTrue: [self error: Portfolio cycleHierarchyError ].
	
	bankingEntities add: aBankingEntity! !
!Portfolio methodsFor: 'adding -- private' stamp: 'GR 11/9/2020 16:52:01' prior: 50931938!
addBankingEntity: aBankingEntity

	(self seeIfAlreadyInHierarchy: aBankingEntity) ifTrue: [self error: self class cycleHierarchyError ].
	
	bankingEntities add: aBankingEntity! !

----QUIT----(9 November 2020 16:52:26) CuisUniversity-4383.image priorSource: 19205294!

----STARTUP---- (9 November 2020 16:53:36) as /home/grosinov/linux64/CuisUniversity-4383.image!

!AccountTransaction methodsFor: 'private' stamp: 'GR 11/9/2020 17:39:31'!
addToBalance: aValue

	self subclassResponsibility ! !

!methodRemoval: AccountTransaction #addToBalanceDependingOnTransaction stamp: 'GR 11/9/2020 17:39:37'!
addToBalanceDependingOnTransaction

	self subclassResponsibility !
!AccountTransaction methodsFor: 'private' stamp: 'GR 11/9/2020 17:39:47' prior: 50931961!
addToBalance: aBalance

	self subclassResponsibility ! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'GR 11/9/2020 17:54:50' prior: 50925559 overrides: 50931798!
balance
	
	transactions inject: 0 into: [ :aBalance :aTransaction | aTransaction addToBalance: aBalance].
	
	"| balance |
	
	balance := 0.
	
	transactions do: [ :aTransaction | balance := aTransaction addToBalance: balance].
	
	^balance"! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/9/2020 17:54:58'!
ERROR!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 17:54:58'!
ERROR!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 17:54:58'!
FAILURE!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 17:54:58'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 17:54:58'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 17:56:14'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 17:56:14'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'GR 11/9/2020 17:56:27' prior: 50931977 overrides: 50931798!
balance
	
	^ transactions inject: 0 into: [ :aBalance :aTransaction | aTransaction addToBalance: aBalance].
	
	"| balance |
	
	balance := 0.
	
	transactions do: [ :aTransaction | balance := aTransaction addToBalance: balance].
	
	^balance"! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 17:56:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 17:56:30'!
PASSED!
!Portfolio methodsFor: 'balance' stamp: 'GR 11/9/2020 17:57:36' prior: 50929775 overrides: 50931798!
balance
	
	bankingEntities inject: 0 into: [:totalBalance :aBankingEntity | totalBalance + aBankingEntity balance]
	
	"| totalBalance |
	
	totalBalance := 0. 
	
	bankingEntities do: [:aBankingEntity | totalBalance := totalBalance + aBankingEntity balance]. 
	
	^totalBalance."! !

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 17:57:41'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'GR 11/9/2020 17:58:56' prior: 50932200 overrides: 50931798!
balance
	
	^ bankingEntities inject: 0 into: [:totalBalance :aBankingEntity | totalBalance + aBankingEntity balance]
	
	"| totalBalance |
	
	totalBalance := 0. 
	
	bankingEntities do: [:aBankingEntity | totalBalance := totalBalance + aBankingEntity balance]. 
	
	^totalBalance."! !

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 17:58:57'!
FAILURE!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 17:59:00'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 17:59:01'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'GR 11/9/2020 17:59:48' prior: 50929759 overrides: 50931812!
transactions

	bankingEntities inject: OrderedCollection new into: [:transactions :aBankingEntity | transactions addAll: aBankingEntity transactions]
	
	"| transactions |
	
	transactions := OrderedCollection new.
	
	bankingEntities do: [:aBankingEntity | transactions addAll: aBankingEntity transactions].
	
	^ transactions."! !
!Portfolio methodsFor: 'transactions' stamp: 'GR 11/9/2020 17:59:53' prior: 50932326 overrides: 50931812!
transactions

	^ bankingEntities inject: OrderedCollection new into: [:transactions :aBankingEntity | transactions addAll: aBankingEntity transactions]
	
	"| transactions |
	
	transactions := OrderedCollection new.
	
	bankingEntities do: [:aBankingEntity | transactions addAll: aBankingEntity transactions].
	
	^ transactions."! !

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 17:59:56'!
FAILURE!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 17:59:56'!
FAILURE!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 18:00:05'!
ERROR!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 18:01:35'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'GR 11/7/2020 16:11:24' prior: 50932340 overrides: 50931812!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	
	bankingEntities do: [:aBankingEntity | transactions addAll: aBankingEntity transactions].
	
	^ transactions.! !

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 18:03:03'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'GR 11/9/2020 18:05:30' prior: 50932463 overrides: 50931812!
transactions

	^ bankingEntities inject: OrderedCollection new into: [:transactions :aBankingEntity | transactions addAll: aBankingEntity transactions]
	
	"| transactions |
	
	transactions := OrderedCollection new.
	
	bankingEntities do: [:aBankingEntity | transactions addAll: aBankingEntity transactions].
	
	^ transactions."! !

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 18:05:33'!
FAILURE!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 18:05:33'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'GR 11/9/2020 18:07:16' prior: 50932567 overrides: 50931812!
transactions

	"^ bankingEntities inject: OrderedCollection new into: [:transactions :aBankingEntity | transactions addAll: aBankingEntity transactions]"
	
	| transactions |
	
	transactions := OrderedCollection new.
	
	bankingEntities do: [:aBankingEntity | transactions addAll: aBankingEntity transactions].
	
	^ transactions.! !
!Portfolio methodsFor: 'testing' stamp: 'GR 11/9/2020 18:07:58' prior: 50929749 overrides: 50931807!
hasRegistered: aTransaction
	
	^ bankingEntities inject: false into: [ :hasRegistered :aBankingEntity |  hasRegistered or: (aBankingEntity  hasRegistered: aTransaction) ]
	
	"| hasRegistered |
	
	hasRegistered := false.
	
	bankingEntities do: [ :aBankingEntity |  hasRegistered := hasRegistered or: (aBankingEntity  hasRegistered: aTransaction) ].
	
	^ hasRegistered."! !

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 18:08:03'!
PASSED!
!Portfolio methodsFor: 'balance' stamp: 'GR 11/9/2020 18:08:19' prior: 50932216 overrides: 50931798!
balance
	
	^ bankingEntities inject: 0 into: [:totalBalance :aBankingEntity | totalBalance + aBankingEntity balance]! !
!Portfolio methodsFor: 'testing' stamp: 'GR 11/9/2020 18:08:30' prior: 50932695 overrides: 50931807!
hasRegistered: aTransaction
	
	^ bankingEntities inject: false into: [ :hasRegistered :aBankingEntity |  hasRegistered or: (aBankingEntity  hasRegistered: aTransaction) ]! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/9/2020 18:09:07' prior: 50930083 overrides: 50931769!
seeIfAlreadyInHierarchy: bankingEntity
	
	^ rootPortfolios inject: false into: [ :isInTheHierarchy :aRootPortfolio | isInTheHierarchy or: (aRootPortfolio lookFor: bankingEntity)]
	
	"| isInTheHierarchy |
	
	isInTheHierarchy := false.
	
	rootPortfolios do: [ :aRootPortfolio | isInTheHierarchy := isInTheHierarchy or: (aRootPortfolio lookFor: bankingEntity)].
	
	^isInTheHierarchy"! !

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 18:09:14'!
PASSED!
!Portfolio methodsFor: 'private' stamp: 'GR 11/9/2020 18:09:25' prior: 50932820 overrides: 50931769!
seeIfAlreadyInHierarchy: bankingEntity
	
	^ rootPortfolios inject: false into: [ :isInTheHierarchy :aRootPortfolio | isInTheHierarchy or: (aRootPortfolio lookFor: bankingEntity)]! !
!Portfolio methodsFor: 'transactions' stamp: 'GR 11/9/2020 18:15:20' prior: 50932681 overrides: 50931812!
transactions

	^ bankingEntities inject: OrderedCollection new addingAll: [:aBankingEntity | aBankingEntity transactions].! !

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 18:15:24'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/9/2020 18:23:37'!
test17

	portfolio addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio.
	
	self
		should: [ portfolio2 addPortfolio: portfolio3 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/9/2020 18:23:48'!
test18

	portfolio addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio.
	
	self
		should: [ portfolio2 addPortfolio: portfolio3 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !

!methodRemoval: ProtfolioTest #test17 stamp: 'GR 11/9/2020 18:23:48'!
test17

	portfolio addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio.
	
	self
		should: [ portfolio2 addPortfolio: portfolio3 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.!

!methodRemoval: ProtfolioTest #test18 stamp: 'GR 11/9/2020 18:26:52'!
test18

	portfolio addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio.
	
	self
		should: [ portfolio2 addPortfolio: portfolio3 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.!

----QUIT----(9 November 2020 18:31:05) CuisUniversity-4383.image priorSource: 19209746!

----STARTUP---- (9 November 2020 18:32:01) as /home/grosinov/linux64/CuisUniversity-4383.image!

!ReceptiveAccount methodsFor: 'balance' stamp: 'GR 11/9/2020 18:32:15' prior: 50932090 overrides: 50931798!
balance
	
	^ transactions inject: 0 into: [ :aBalance :aTransaction | aTransaction addToBalance: aBalance].! !

!methodRemoval: ReceptiveAccount #seeIfAlreadyInHierarchy: stamp: 'GR 11/9/2020 18:32:52'!
seeIfAlreadyInHierarchy: aReceptiveAccount 
	
	^ self == aReceptiveAccount !

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

----QUIT----(9 November 2020 18:34:00) CuisUniversity-4383.image priorSource: 19245593!