

----End fileIn of /home/jampuero/Documentos/isw1/linux64/Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ja 11/2/2020 19:19:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ja 11/2/2020 19:19:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ja 11/2/2020 19:19:57'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ja 11/2/2020 19:19:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ja 11/2/2020 19:19:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ja 11/2/2020 19:19:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ja 11/2/2020 19:19:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ja 11/2/2020 19:19:57'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ja 11/2/2020 19:21:37'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'ja 11/2/2020 19:31:08' prior: 50945545!
balance
	
	"^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]"

	| deposit withdraw | 

	deposit  _ transactions select: [:accountTransaction | accountTransaction isKindOf: Deposit].
	withdraw  _ transactions select: [:accountTransaction | accountTransaction isKindOf: Withdraw].! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'ja 11/2/2020 19:31:26' prior: 50945592!
balance
	
	"^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]"

	| deposits withdraw | 

	deposits  _ transactions select: [:accountTransaction | accountTransaction isKindOf: Deposit].
	withdraw  _ transactions select: [:accountTransaction | accountTransaction isKindOf: Withdraw].! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'ja 11/2/2020 19:31:38' prior: 50945605!
balance
	
	"^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]"

	| deposits withdraws | 

	deposits  _ transactions select: [:accountTransaction | accountTransaction isKindOf: Deposit].
	withdraws  _ transactions select: [:accountTransaction | accountTransaction isKindOf: Withdraw].! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'ja 11/2/2020 19:34:08' prior: 50945618!
balance
	
	"^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]"

	| deposits withdraws totalDeposited totalWithdrawed | 

	deposits  _ transactions select: [:aTransaction | aTransaction isKindOf: Deposit].
	
	withdraws  _ transactions select: [:aTransaction | aTransaction isKindOf: Withdraw].
	
	totalDeposited _ deposits sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].
	
	totalWithdrawed _ withdraws sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].
	! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'ja 11/2/2020 19:34:22' prior: 50945631!
balance
	
	"^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]"

	| deposits withdraws totalDeposited totalWithdrawed | 

	deposits  _ transactions select: [:aTransaction | aTransaction isKindOf: Deposit].
	
	withdraws  _ transactions select: [:aTransaction | aTransaction isKindOf: Withdraw].
	
	totalDeposited _ deposits sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].
	
	totalWithdrawed _ withdraws sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].
	
	^ totalDeposited - totalWithdrawed .
	! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'ja 11/2/2020 19:34:31' prior: 50945650!
balance

	| deposits withdraws totalDeposited totalWithdrawed | 

	deposits  _ transactions select: [:aTransaction | aTransaction isKindOf: Deposit].
	
	withdraws  _ transactions select: [:aTransaction | aTransaction isKindOf: Withdraw].
	
	totalDeposited _ deposits sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].
	
	totalWithdrawed _ withdraws sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].
	
	^ totalDeposited - totalWithdrawed .
	! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ja 11/2/2020 19:34:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ja 11/2/2020 19:34:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ja 11/2/2020 19:34:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ja 11/2/2020 19:34:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ja 11/2/2020 19:34:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ja 11/2/2020 19:34:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ja 11/2/2020 19:34:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ja 11/2/2020 19:34:37'!
PASSED!

Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'ja 11/2/2020 19:36:23'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: #'Portfolio-Ejercicio' stamp: 'ja 11/2/2020 19:36:39'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'ja 11/2/2020 19:39:05'!
test01PortfolioHasNotAccountWhenCreated

	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: portfolio isEmpty.! !

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/2/2020 19:39:08'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/2/2020 19:39:08'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 19:39:19'!
isEmpty
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 19:39:27' prior: 50945754!
isEmpty
	
	^ true .! !

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/2/2020 19:39:32'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 19:41:39'!
test02

	| portfolio receptiveAccount |
	
	portfolio _ Portfolio new.
	receptiveAccount  _ ReceptiveAccount new.
	portfolio add: receptiveAccount.
	
	self assert: portfolio isEmpty.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 19:44:13'!
test02AccountsCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	portfolio add: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccount.! !

!methodRemoval: PortfolioTest #test02 stamp: 'ja 11/2/2020 19:44:28'!
test02

	| portfolio receptiveAccount |
	
	portfolio _ Portfolio new.
	receptiveAccount  _ ReceptiveAccount new.
	portfolio add: receptiveAccount.
	
	self assert: portfolio isEmpty.!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 19:44:32'!
ERROR!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 19:44:32'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 19:44:46'!
add: aReceptiveAccount 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'ja 11/2/2020 19:45:27'!
Object subclass: #Portfolio
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 19:45:21' prior: 50945800!
add: anAccount 

	account add: anAccount .

	
	! !

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 19:45:29'!
ERROR!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 19:45:49'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 19:46:49' overrides: 16896425!
initialize

	account _ OrderedCollection new.! !

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 19:47:18'!
FAILURE!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 19:47:18'!
FAILURE!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 19:47:47'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 19:48:15' prior: 50945759!
isEmpty
	
	^ account size = 0.! !

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 19:48:20'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 19:48:33'!
amountOfAccount
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 19:48:45' prior: 50945845!
amountOfAccount
	
	^ account size.! !

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 19:48:47'!
PASSED!

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'ja 11/2/2020 19:49:03'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 19:49:03' prior: 50945838!
isEmpty
	
	^ accounts size = 0.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 19:49:03' prior: 50945823 overrides: 16896425!
initialize

	accounts _ OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 19:49:03' prior: 50945812!
add: anAccount 

	accounts add: anAccount .

	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 19:49:03' prior: 50945850!
amountOfAccount
	
	^ accounts size.! !

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/2/2020 19:49:16'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 19:49:16'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 19:51:49'!
test03

	| portfolio portfolio2 |
	
	portfolio _ Portfolio new.
	portfolio2  _ Portfolio new.
	portfolio add: portfolio2.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfPortfolios.! !

!testRun: #PortfolioTest #test03 stamp: 'ja 11/2/2020 19:52:04'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'ja 11/2/2020 19:52:04'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 19:52:18'!
amountOfPortfolios
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'ja 11/2/2020 19:52:34'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 19:52:31' prior: 50945905!
amountOfPortfolios
	
	^ portfolios size.! !

!testRun: #PortfolioTest #test03 stamp: 'ja 11/2/2020 19:52:37'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 19:53:00' prior: 50945870 overrides: 16896425!
initialize

	accounts _ OrderedCollection new.
	portfolios _ OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 19:53:02' prior: 50945926 overrides: 16896425!
initialize

	accounts _ OrderedCollection new.
	
	portfolios _ OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 19:53:17'!
amountOfAccounts
	
	^ accounts size.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 19:53:17' prior: 50945775!
test02AccountsCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	portfolio add: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.! !

!methodRemoval: Portfolio #amountOfAccount stamp: 'ja 11/2/2020 19:53:17'!
amountOfAccount
	
	^ accounts size.!

!testRun: #PortfolioTest #test03 stamp: 'ja 11/2/2020 19:53:35'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'ja 11/2/2020 19:53:35'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 19:59:18' prior: 50945875!
add: anAccount 
	
	(anAccount isKindOf: ReceptiveAccount) ifTrue:[ accounts add: anAccount ].
	(anAccount isKindOf: Portfolio ) ifTrue:[ portfolios add: anAccount ].

	
	! !

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/2/2020 19:59:23'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 19:59:23'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'ja 11/2/2020 19:59:23'!
FAILURE!

!testRun: #PortfolioTest #test03 stamp: 'ja 11/2/2020 19:59:23'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 19:59:59' prior: 50945865!
isEmpty
	
	^ accounts size = 0 or: [ portfolios size = 0].! !

!testRun: #PortfolioTest #test03 stamp: 'ja 11/2/2020 20:00:02'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 20:00:36'!
test03PortfoliosCanBeAddedToPortfolio

	| portfolio portfolio2 |
	
	portfolio _ Portfolio new.
	portfolio2  _ Portfolio new.
	portfolio add: portfolio2.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfPortfolios.! !

!methodRemoval: PortfolioTest #test03 stamp: 'ja 11/2/2020 20:00:36'!
test03

	| portfolio portfolio2 |
	
	portfolio _ Portfolio new.
	portfolio2  _ Portfolio new.
	portfolio add: portfolio2.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfPortfolios.!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/2/2020 20:00:42'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 20:00:42'!
FAILURE!

!testRun: #PortfolioTest #test03PortfoliosCanBeAddedToPortfolio stamp: 'ja 11/2/2020 20:00:42'!
FAILURE!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 20:01:13'!
FAILURE!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 20:01:13'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 20:02:33' prior: 50945983!
isEmpty
	
	^ (accounts size = 0) or: [ portfolios size = 0].! !

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 20:02:39'!
PASSED!

!testRun: #PortfolioTest #test03PortfoliosCanBeAddedToPortfolio stamp: 'ja 11/2/2020 20:02:47'!
FAILURE!

!testRun: #PortfolioTest #test03PortfoliosCanBeAddedToPortfolio stamp: 'ja 11/2/2020 20:02:47'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 20:04:14' prior: 50946026!
isEmpty
	
	^ (accounts size = 0) or: [ portfolios size = 0].! !

!testRun: #PortfolioTest #test03PortfoliosCanBeAddedToPortfolio stamp: 'ja 11/2/2020 20:04:31'!
FAILURE!

!testRun: #PortfolioTest #test03PortfoliosCanBeAddedToPortfolio stamp: 'ja 11/2/2020 20:04:31'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/2/2020 20:21:10'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 20:21:10'!
FAILURE!

!testRun: #PortfolioTest #test03PortfoliosCanBeAddedToPortfolio stamp: 'ja 11/2/2020 20:21:10'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/2/2020 20:21:16'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 20:21:17'!
FAILURE!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 20:21:17'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 20:22:02' prior: 50946041!
isEmpty
	
	^ (accounts size = 0) and: [ portfolios size = 0].! !

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/2/2020 20:22:06'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 20:22:06'!
PASSED!

!testRun: #PortfolioTest #test03PortfoliosCanBeAddedToPortfolio stamp: 'ja 11/2/2020 20:22:06'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'ja 11/2/2020 20:34:48' prior: 50945670!
balance

"	| deposits withdraws totalDeposited totalWithdrawed | 

	deposits  _ transactions select: [:aTransaction | aTransaction isKindOf: Deposit].
	
	withdraws  _ transactions select: [:aTransaction | aTransaction isKindOf: Withdraw].
	
	totalDeposited _ deposits sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].
	
	totalWithdrawed _ withdraws sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].
	
	^ totalDeposited - totalWithdrawed ."
	| balance |
	
	transactions do:[ :aTransactions | aTransactions addToBalance: balance].
	
	^ balance
	! !
!AccountTransaction methodsFor: 'value' stamp: 'ja 11/2/2020 20:35:27'!
addToBalance: aBalance 

	self subclassResponsibility ! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'ja 11/2/2020 20:38:15' prior: 50946088!
balance

"	| deposits withdraws totalDeposited totalWithdrawed | 

	deposits  _ transactions select: [:aTransaction | aTransaction isKindOf: Deposit].
	
	withdraws  _ transactions select: [:aTransaction | aTransaction isKindOf: Withdraw].
	
	totalDeposited _ deposits sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].
	
	totalWithdrawed _ withdraws sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].
	
	^ totalDeposited - totalWithdrawed ."
	| balance |
	
	transactions do:[ :aTransactions | balance _ balance + aTransactions addToBalance].
	
	^ balance
	! !
!AccountTransaction methodsFor: 'value' stamp: 'ja 11/2/2020 20:38:53'!
addToBalance

	self subclassResponsibility ! !

!methodRemoval: AccountTransaction #addToBalance: stamp: 'ja 11/2/2020 20:38:56'!
addToBalance: aBalance 

	self subclassResponsibility !
!Deposit methodsFor: 'value' stamp: 'ja 11/2/2020 20:39:20' overrides: 50946134!
addToBalance

	^ value! !
!Withdraw methodsFor: 'value' stamp: 'ja 11/2/2020 20:39:49' overrides: 50946134!
addToBalance

	^ value * (-1)! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ja 11/2/2020 20:40:01'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ja 11/2/2020 20:40:01'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ja 11/2/2020 20:41:07'!
FAILURE!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ja 11/2/2020 20:41:07'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ja 11/2/2020 20:41:07'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'ja 11/2/2020 20:41:51' prior: 50946113!
balance

"	| deposits withdraws totalDeposited totalWithdrawed | 

	deposits  _ transactions select: [:aTransaction | aTransaction isKindOf: Deposit].
	
	withdraws  _ transactions select: [:aTransaction | aTransaction isKindOf: Withdraw].
	
	totalDeposited _ deposits sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].
	
	totalWithdrawed _ withdraws sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].
	
	^ totalDeposited - totalWithdrawed ."
	| balance |
	balance _ 0.
	transactions do:[ :aTransactions | balance _ balance + aTransactions addToBalance].
	
	^ balance
	! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ja 11/2/2020 20:41:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ja 11/2/2020 20:42:02'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'ja 11/2/2020 20:42:20' prior: 50946170!
balance

	| balance |
	
	balance _ 0.
	
	transactions do:[ :aTransactions | balance _ balance + aTransactions addToBalance].
	
	^ balance
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 20:44:05'!
test05PortfoliosCanBeAddedToPortfolio

	| portfolio portfolio2 |
	
	portfolio _ Portfolio new.
	portfolio2  _ Portfolio new.
	portfolio add: portfolio2.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfPortfolios.! !

!methodRemoval: PortfolioTest #test03PortfoliosCanBeAddedToPortfolio stamp: 'ja 11/2/2020 20:44:05'!
test03PortfoliosCanBeAddedToPortfolio

	| portfolio portfolio2 |
	
	portfolio _ Portfolio new.
	portfolio2  _ Portfolio new.
	portfolio add: portfolio2.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfPortfolios.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 20:44:52'!
test03AccountsCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	portfolio add: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 20:45:32' prior: 50945741!
test01PortfolioHasNotAccountWhenCreated

	| portfolio |
	
	portfolio _ Portfolio new.
	
	self assert: portfolio isEmpty.
	
	self assert: 0 equals: portfolio balance.! !

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/2/2020 20:45:50'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/2/2020 20:45:50'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 20:45:58'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 20:46:18' prior: 50946255!
balance
	
	^ accounts balance .! !

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/2/2020 20:46:20'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 20:48:20' prior: 50946260!
balance
	
	^ accounts sum: [ :anAccount | anAccount balance] ifEmpty: [0] .! !

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/2/2020 20:48:33'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 20:49:23' prior: 50946227!
test03AccountsCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	portfolio add: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 50 equals: portfolio balance.! !

!testRun: #PortfolioTest #test03AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 20:49:28'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 20:49:31'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 20:52:35'!
test05AccountsCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	portfolio add: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 50 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 20:53:03' prior: 50946277!
test03AccountsCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	
	portfolio add: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 300 equals: portfolio balance.! !

!testRun: #PortfolioTest #test03AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 20:53:06'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 20:53:58'!
test04AccountsCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 1000 on: account.
	
	portfolio add: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 300 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 20:54:41' prior: 50946332!
test04AccountsCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 1000 on: account.
	Withdraw register: 50 on: account.
	Withdraw register: 50 on: account.
	Withdraw register: 50 on: account.
	
	portfolio add: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 850 equals: portfolio balance.! !

!testRun: #PortfolioTest #test04AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 20:54:45'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 20:55:43' prior: 50946298!
test05AccountsCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	portfolio add: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 50 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 20:56:17' prior: 50946366!
test05AccountsCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	portfolio add: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 150 equals: portfolio balance.! !

!testRun: #PortfolioTest #test05AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 20:56:20'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 20:56:42'!
testzzzzzzPortfoliosCanBeAddedToPortfolio

	| portfolio portfolio2 |
	
	portfolio _ Portfolio new.
	portfolio2  _ Portfolio new.
	portfolio add: portfolio2.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfPortfolios.! !

!methodRemoval: PortfolioTest #test05PortfoliosCanBeAddedToPortfolio stamp: 'ja 11/2/2020 20:56:42'!
test05PortfoliosCanBeAddedToPortfolio

	| portfolio portfolio2 |
	
	portfolio _ Portfolio new.
	portfolio2  _ Portfolio new.
	portfolio add: portfolio2.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfPortfolios.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 20:58:34'!
test06AccountsCanBeAddedToPortfolio

	| portfolio account1 account2 account3 |
	
	portfolio _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio add: account1.
	portfolio add: account2.
	portfolio add: account3.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 150 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 20:58:47' prior: 50946429!
test06AccountsCanBeAddedToPortfolio

	| portfolio account1 account2 account3 |
	
	portfolio _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio add: account1.
	portfolio add: account2.
	portfolio add: account3.
	
	self deny: portfolio isEmpty.
	
	self assert: 3 equals: portfolio amountOfAccounts.
	
	self assert: 150 equals: portfolio balance.! !

!testRun: #PortfolioTest #test06AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 20:59:02'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 21:00:57'!
test06MultipleAccountsCanBeAddedToPortfolio

	| portfolio account1 account2 account3 |
	
	portfolio _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio add: account1.
	portfolio add: account2.
	portfolio add: account3.
	
	self deny: portfolio isEmpty.
	
	self assert: 3 equals: portfolio amountOfAccounts.
	
	self assert: 150 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test06AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 21:01:02'!
test06AccountsCanBeAddedToPortfolio

	| portfolio account1 account2 account3 |
	
	portfolio _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio add: account1.
	portfolio add: account2.
	portfolio add: account3.
	
	self deny: portfolio isEmpty.
	
	self assert: 3 equals: portfolio amountOfAccounts.
	
	self assert: 150 equals: portfolio balance.!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 21:01:04'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 21:01:48'!
test05AccountCanBeAddedToPortfolioWithMultipleTransaction

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	portfolio add: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 150 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test05AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 21:01:53'!
test05AccountsCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	portfolio add: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 150 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 21:02:26'!
test04AccountCanBeAddedToPortfolioWithMultipleWithdraw

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 1000 on: account.
	Withdraw register: 50 on: account.
	Withdraw register: 50 on: account.
	Withdraw register: 50 on: account.
	
	portfolio add: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 850 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test04AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 21:02:26'!
test04AccountsCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 1000 on: account.
	Withdraw register: 50 on: account.
	Withdraw register: 50 on: account.
	Withdraw register: 50 on: account.
	
	portfolio add: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 850 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 21:02:59'!
test03AccountCanBeAddedToPortfolioWithMultipleDeposit

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	
	portfolio add: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 300 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test03AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 21:02:59'!
test03AccountsCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	
	portfolio add: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 300 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 21:04:45'!
test200

	| portfolio portfolio2 |
	
	portfolio _ Portfolio new.
	portfolio2  _ Portfolio new.
	portfolio add: portfolio2.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfPortfolios.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 21:05:38' prior: 50946634!
test200

	| portfolio account1|
	
	portfolio _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Withdraw register: 50 on: account1.
	
	portfolio add: account1 .
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfPortfolios.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 21:05:42' prior: 50946644!
test200

	| portfolio account1|
	
	portfolio _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Withdraw register: 50 on: account1.
	
	portfolio add: account1 .
	
	! !

!testRun: #PortfolioTest #test200 stamp: 'ja 11/2/2020 21:05:45'!
PASSED!

!methodRemoval: PortfolioTest #test200 stamp: 'ja 11/2/2020 21:09:14'!
test200

	| portfolio account1|
	
	portfolio _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Withdraw register: 50 on: account1.
	
	portfolio add: account1 .
	
	!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/2/2020 21:09:17'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 21:09:19'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'ja 11/2/2020 21:09:20'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'ja 11/2/2020 21:09:22'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransaction stamp: 'ja 11/2/2020 21:09:23'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAddedToPortfolio stamp: 'ja 11/2/2020 21:09:24'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 21:10:40'!
test07PortfoliosCanBeAddedToPortfolio

	| portfolio portfolio2 |
	
	portfolio _ Portfolio new.
	portfolio2  _ Portfolio new.
	portfolio add: portfolio2.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfPortfolios.! !

!methodRemoval: PortfolioTest #testzzzzzzPortfoliosCanBeAddedToPortfolio stamp: 'ja 11/2/2020 21:10:40'!
testzzzzzzPortfoliosCanBeAddedToPortfolio

	| portfolio portfolio2 |
	
	portfolio _ Portfolio new.
	portfolio2  _ Portfolio new.
	portfolio add: portfolio2.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfPortfolios.!

!testRun: #PortfolioTest #test07PortfoliosCanBeAddedToPortfolio stamp: 'ja 11/2/2020 21:10:43'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 21:11:20'!
test08PortfoliosCanBeAddedToPortfolio

	| portfolio portfolio2 |
	
	portfolio _ Portfolio new.
	portfolio2  _ Portfolio new.
	
	
	portfolio add: portfolio2.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfPortfolios.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/2/2020 21:11:54'!
test08

	| portfolio portfolio2 |
	
	portfolio _ Portfolio new.
	portfolio2  _ Portfolio new.
	
	
	portfolio add: portfolio2.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfPortfolios.! !

!methodRemoval: PortfolioTest #test08PortfoliosCanBeAddedToPortfolio stamp: 'ja 11/2/2020 21:11:54'!
test08PortfoliosCanBeAddedToPortfolio

	| portfolio portfolio2 |
	
	portfolio _ Portfolio new.
	portfolio2  _ Portfolio new.
	
	
	portfolio add: portfolio2.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfPortfolios.!

----QUIT----(2 November 2020 23:06:28) CuisUniversity-4365.image priorSource: 19637593!

----STARTUP---- (6 November 2020 16:51:53) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4365.image!


!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ja 11/6/2020 16:52:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ja 11/6/2020 16:52:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ja 11/6/2020 16:52:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ja 11/6/2020 16:52:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ja 11/6/2020 16:52:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ja 11/6/2020 16:52:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ja 11/6/2020 16:52:46'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/6/2020 16:52:48'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/6/2020 16:52:48'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'ja 11/6/2020 16:52:48'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'ja 11/6/2020 16:52:48'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransaction stamp: 'ja 11/6/2020 16:52:48'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAddedToPortfolio stamp: 'ja 11/6/2020 16:52:48'!
PASSED!

!testRun: #PortfolioTest #test07PortfoliosCanBeAddedToPortfolio stamp: 'ja 11/6/2020 16:52:48'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'ja 11/6/2020 16:52:48'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:03:20'!
test05AccountCanBeAddedToPortfolioWithMultipleTransactions

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	portfolio add: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 150 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransaction stamp: 'ja 11/6/2020 17:03:20'!
test05AccountCanBeAddedToPortfolioWithMultipleTransaction

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	portfolio add: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 150 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:05:10' prior: 50946696!
test07PortfoliosCanBeAddedToPortfolio

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2  _ Portfolio new.
	portfolio1 add: portfolio2.
	
	self deny: portfolio1 isEmpty.
	
	self assert: 1 equals: portfolio1 amountOfPortfolios.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:11:50'!
addTransaction: anAccount 
	
	(anAccount isKindOf: ReceptiveAccount) ifTrue:[ accounts add: anAccount ].
	(anAccount isKindOf: Portfolio ) ifTrue:[ portfolios add: anAccount ].

	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:11:50' prior: 50946852!
test07PortfoliosCanBeAddedToPortfolio

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2  _ Portfolio new.
	portfolio1 addTransaction: portfolio2.
	
	self deny: portfolio1 isEmpty.
	
	self assert: 1 equals: portfolio1 amountOfPortfolios.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:11:50' prior: 50945963!
add: anAccount 
	
	(anAccount isKindOf: ReceptiveAccount) ifTrue:[ accounts addTransaction: anAccount ].
	(anAccount isKindOf: Portfolio ) ifTrue:[ portfolios addTransaction: anAccount ].

	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:11:50' prior: 50946603!
test03AccountCanBeAddedToPortfolioWithMultipleDeposit

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	
	portfolio addTransaction: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 300 equals: portfolio balance.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:11:50' prior: 50945536!
register: aTransaction

	transactions addTransaction: aTransaction 
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:11:50' prior: 50946480!
test06MultipleAccountsCanBeAddedToPortfolio

	| portfolio account1 account2 account3 |
	
	portfolio _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio addTransaction: account1.
	portfolio addTransaction: account2.
	portfolio addTransaction: account3.
	
	self deny: portfolio isEmpty.
	
	self assert: 3 equals: portfolio amountOfAccounts.
	
	self assert: 150 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:11:50' prior: 50945944!
test02AccountsCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	portfolio addTransaction: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:11:50' prior: 50946732!
test08

	| portfolio portfolio2 |
	
	portfolio _ Portfolio new.
	portfolio2  _ Portfolio new.
	
	
	portfolio addTransaction: portfolio2.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfPortfolios.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:11:50' prior: 50946812!
test05AccountCanBeAddedToPortfolioWithMultipleTransactions

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	portfolio addTransaction: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 150 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:11:50' prior: 50946569!
test04AccountCanBeAddedToPortfolioWithMultipleWithdraw

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 1000 on: account.
	Withdraw register: 50 on: account.
	Withdraw register: 50 on: account.
	Withdraw register: 50 on: account.
	
	portfolio addTransaction: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 850 equals: portfolio balance.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:11:50' prior: 50946863!
addTransaction: anAccount 
	
	(anAccount isKindOf: ReceptiveAccount) ifTrue:[ accounts addTransaction: anAccount ].
	(anAccount isKindOf: Portfolio ) ifTrue:[ portfolios addTransaction: anAccount ].

	
	! !

!methodRemoval: Portfolio #add: stamp: 'ja 11/6/2020 17:11:50'!
add: anAccount 
	
	(anAccount isKindOf: ReceptiveAccount) ifTrue:[ accounts addTransaction: anAccount ].
	(anAccount isKindOf: Portfolio ) ifTrue:[ portfolios addTransaction: anAccount ].

	
	!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/6/2020 17:11:56'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/6/2020 17:11:56'!
ERROR!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'ja 11/6/2020 17:11:56'!
ERROR!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'ja 11/6/2020 17:11:56'!
ERROR!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'ja 11/6/2020 17:11:56'!
ERROR!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAddedToPortfolio stamp: 'ja 11/6/2020 17:11:56'!
ERROR!

!testRun: #PortfolioTest #test07PortfoliosCanBeAddedToPortfolio stamp: 'ja 11/6/2020 17:11:56'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'ja 11/6/2020 17:11:56'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/6/2020 17:12:43'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/6/2020 17:12:43'!
ERROR!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'ja 11/6/2020 17:12:43'!
ERROR!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'ja 11/6/2020 17:12:43'!
ERROR!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'ja 11/6/2020 17:12:43'!
ERROR!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAddedToPortfolio stamp: 'ja 11/6/2020 17:12:43'!
ERROR!

!testRun: #PortfolioTest #test07PortfoliosCanBeAddedToPortfolio stamp: 'ja 11/6/2020 17:12:43'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'ja 11/6/2020 17:12:43'!
ERROR!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/6/2020 17:12:49'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:13:23' prior: 50947002!
addTransaction: anAccount 
	
	(anAccount isKindOf: ReceptiveAccount) ifTrue:[ accounts add: anAccount ].
	(anAccount isKindOf: Portfolio ) ifTrue:[ portfolios add: anAccount ].

	
	! !

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/6/2020 17:13:27'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/6/2020 17:13:27'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'ja 11/6/2020 17:13:27'!
ERROR!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'ja 11/6/2020 17:13:27'!
ERROR!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'ja 11/6/2020 17:13:27'!
ERROR!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAddedToPortfolio stamp: 'ja 11/6/2020 17:13:27'!
ERROR!

!testRun: #PortfolioTest #test07PortfoliosCanBeAddedToPortfolio stamp: 'ja 11/6/2020 17:13:27'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'ja 11/6/2020 17:13:27'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'ja 11/6/2020 17:13:32'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'ja 11/6/2020 17:14:05' prior: 50946911!
register: aTransaction

	transactions add: aTransaction 
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ja 11/6/2020 17:14:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ja 11/6/2020 17:14:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ja 11/6/2020 17:14:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ja 11/6/2020 17:14:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ja 11/6/2020 17:14:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ja 11/6/2020 17:14:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ja 11/6/2020 17:14:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ja 11/6/2020 17:14:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ja 11/6/2020 17:14:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ja 11/6/2020 17:14:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ja 11/6/2020 17:14:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ja 11/6/2020 17:14:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ja 11/6/2020 17:14:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ja 11/6/2020 17:14:29'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/6/2020 17:14:33'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/6/2020 17:14:33'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'ja 11/6/2020 17:14:33'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'ja 11/6/2020 17:14:33'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'ja 11/6/2020 17:14:33'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAddedToPortfolio stamp: 'ja 11/6/2020 17:14:33'!
PASSED!

!testRun: #PortfolioTest #test07PortfoliosCanBeAddedToPortfolio stamp: 'ja 11/6/2020 17:14:33'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'ja 11/6/2020 17:14:33'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:16:30' prior: 50947077!
addTransaction: aTransaction 
	
	(aTransaction isKindOf: ReceptiveAccount) ifTrue:[ accounts add: aTransaction ].
	(aTransaction isKindOf: Portfolio ) ifTrue:[ portfolios add: aTransaction ].

	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:20:03' prior: 50946942!
test02AccountsCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	
	portfolio addTransaction: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:20:46' prior: 50947212!
test02AccountsCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	
	portfolio addTransaction: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 0 equals: portfolio balance.! !

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/6/2020 17:20:49'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:23:40' prior: 50946917!
test06MultipleAccountsCanBeAddedToPortfolio

	| portfolio account1 account2 account3 total|
	
	portfolio _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio addTransaction: account1.
	portfolio addTransaction: account2.
	portfolio addTransaction: account3.
	
	total _ account1 balance + account2 balance + account3 balance
	
	self deny: portfolio isEmpty.
	
	self assert: 3 equals: portfolio amountOfAccounts.
	
	self assert: 150 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:23:52' prior: 50947239!
test06MultipleAccountsCanBeAddedToPortfolio

	| portfolio account1 account2 account3 total|
	
	portfolio _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio addTransaction: account1.
	portfolio addTransaction: account2.
	portfolio addTransaction: account3.
	
	total _ account1 balance + account2 balance + account3 balance.
	
	self deny: portfolio isEmpty.
	
	self assert: 3 equals: portfolio amountOfAccounts.
	
	self assert: total equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:23:55' prior: 50947267!
test06MultipleAccountsCanBeAddedToPortfolio

	| portfolio account1 account2 account3 total|
	
	portfolio _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio addTransaction: account1.
	portfolio addTransaction: account2.
	portfolio addTransaction: account3.
	
	total _ account1 balance + account2 balance + account3 balance.
	
	self deny: portfolio isEmpty.
	
	self assert: 3 equals: portfolio amountOfAccounts.
	
	self assert: total equals: portfolio balance.! !

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAddedToPortfolio stamp: 'ja 11/6/2020 17:23:58'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:25:55' prior: 50947295!
test06MultipleAccountsCanBeAddedToPortfolio

	| portfolio account1 account2 account3 total |
	
	portfolio _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio addTransaction: account1.
	portfolio addTransaction: account2.
	portfolio addTransaction: account3.
	
	total _ account1 balance + account2 balance + account3 balance.
	
	self deny: portfolio isEmpty.
	
	self assert: 3 equals: portfolio amountOfAccounts.
	
	self assert: total equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:26:16' prior: 50947326!
test06MultipleAccountsCanBeAddedToPortfolio

	| portfolio account1 account2 account3 totalBalance |
	
	portfolio _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio addTransaction: account1.
	portfolio addTransaction: account2.
	portfolio addTransaction: account3.
	
	totalBalance _ account1 balance + account2 balance + account3 balance.
	
	self deny: portfolio isEmpty.
	
	self assert: 3 equals: portfolio amountOfAccounts.
	
	self assert: totalBalance equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:27:48' prior: 50946872!
test07PortfoliosCanBeAddedToPortfolio

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2  _ Portfolio new.
	portfolio1 addTransaction: portfolio2.
	
	self deny: portfolio1 isEmpty.
	
	self assert: 1 equals: portfolio1 amountOfPortfolios.
	
	self assert: 0 equals: portfolio1 balance .! !

!testRun: #PortfolioTest #test07PortfoliosCanBeAddedToPortfolio stamp: 'ja 11/6/2020 17:27:49'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/6/2020 17:27:49'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/6/2020 17:27:49'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'ja 11/6/2020 17:27:49'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'ja 11/6/2020 17:27:49'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'ja 11/6/2020 17:27:49'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAddedToPortfolio stamp: 'ja 11/6/2020 17:27:49'!
PASSED!

!testRun: #PortfolioTest #test07PortfoliosCanBeAddedToPortfolio stamp: 'ja 11/6/2020 17:27:49'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'ja 11/6/2020 17:27:49'!
PASSED!

!testRun: #PortfolioTest #test07PortfoliosCanBeAddedToPortfolio stamp: 'ja 11/6/2020 17:27:56'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:29:14'!
test07EmptyPortfolioCanBeAddedToPortfolio

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2  _ Portfolio new.
	portfolio1 addTransaction: portfolio2.
	
	self deny: portfolio1 isEmpty.
	
	self assert: 1 equals: portfolio1 amountOfPortfolios.
	
	self assert: 0 equals: portfolio1 balance .! !

!methodRemoval: PortfolioTest #test07PortfoliosCanBeAddedToPortfolio stamp: 'ja 11/6/2020 17:29:14'!
test07PortfoliosCanBeAddedToPortfolio

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2  _ Portfolio new.
	portfolio1 addTransaction: portfolio2.
	
	self deny: portfolio1 isEmpty.
	
	self assert: 1 equals: portfolio1 amountOfPortfolios.
	
	self assert: 0 equals: portfolio1 balance .!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:30:28'!
test08NotEmptyPortfolioCanBeAdedToPortfolio

	| portfolio portfolio2 |
	
	portfolio _ Portfolio new.
	portfolio2  _ Portfolio new.
	
	
	portfolio addTransaction: portfolio2.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfPortfolios.! !

!methodRemoval: PortfolioTest #test08 stamp: 'ja 11/6/2020 17:30:31'!
test08

	| portfolio portfolio2 |
	
	portfolio _ Portfolio new.
	portfolio2  _ Portfolio new.
	
	
	portfolio addTransaction: portfolio2.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfPortfolios.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:30:47'!
test06MultipleAccountsCanBeAdedToPortfolio

	| portfolio account1 account2 account3 totalBalance |
	
	portfolio _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio addTransaction: account1.
	portfolio addTransaction: account2.
	portfolio addTransaction: account3.
	
	totalBalance _ account1 balance + account2 balance + account3 balance.
	
	self deny: portfolio isEmpty.
	
	self assert: 3 equals: portfolio amountOfAccounts.
	
	self assert: totalBalance equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test06MultipleAccountsCanBeAddedToPortfolio stamp: 'ja 11/6/2020 17:30:47'!
test06MultipleAccountsCanBeAddedToPortfolio

	| portfolio account1 account2 account3 totalBalance |
	
	portfolio _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio addTransaction: account1.
	portfolio addTransaction: account2.
	portfolio addTransaction: account3.
	
	totalBalance _ account1 balance + account2 balance + account3 balance.
	
	self deny: portfolio isEmpty.
	
	self assert: 3 equals: portfolio amountOfAccounts.
	
	self assert: totalBalance equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:31:02'!
test07EmptyPortfolioCanBeAdedToPortfolio

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2  _ Portfolio new.
	portfolio1 addTransaction: portfolio2.
	
	self deny: portfolio1 isEmpty.
	
	self assert: 1 equals: portfolio1 amountOfPortfolios.
	
	self assert: 0 equals: portfolio1 balance .! !

!methodRemoval: PortfolioTest #test07EmptyPortfolioCanBeAddedToPortfolio stamp: 'ja 11/6/2020 17:31:02'!
test07EmptyPortfolioCanBeAddedToPortfolio

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2  _ Portfolio new.
	portfolio1 addTransaction: portfolio2.
	
	self deny: portfolio1 isEmpty.
	
	self assert: 1 equals: portfolio1 amountOfPortfolios.
	
	self assert: 0 equals: portfolio1 balance .!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:31:13' prior: 50947454!
test08NotEmptyPortfolioCanBeAdedToPortfolio

	| portfolio portfolio2 |
	
	portfolio _ Portfolio new.
	portfolio2  _ Portfolio new.
	
	
	
	portfolio addTransaction: portfolio2.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfPortfolios.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:31:28' prior: 50947557!
test08NotEmptyPortfolioCanBeAdedToPortfolio

	| portfolio portfolio2 account |
	
	portfolio _ Portfolio new.
	portfolio2  _ Portfolio new.
	
	account  _ ReceptiveAccount new.
	Deposit register: 1000 on: account.
	Withdraw register: 50 on: account.
	Withdraw register: 50 on: account.
	Withdraw register: 50 on: account.
	
	
	
	portfolio addTransaction: portfolio2.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfPortfolios.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:31:54' prior: 50947569!
test08NotEmptyPortfolioCanBeAdedToPortfolio

	| portfolio1 portfolio2 account |
	
	portfolio1 _ Portfolio new.
	portfolio2  _ Portfolio new.
	
	account  _ ReceptiveAccount new.
	Deposit register: 1000 on: account.
	Withdraw register: 50 on: account.
	Withdraw register: 50 on: account.
	Withdraw register: 50 on: account.
	
	portfolio2 addTransaction: account .
	
	portfolio1 addTransaction: portfolio2.
	
	self deny: portfolio1 isEmpty.
	
	self assert: 1 equals: portfolio1 amountOfPortfolios.! !

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/6/2020 17:32:34'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:33:22' prior: 50947587!
test08NotEmptyPortfolioCanBeAdedToPortfolio

	| portfolio1 portfolio2 account |
	
	portfolio1 _ Portfolio new.
	portfolio2  _ Portfolio new.
	
	account  _ ReceptiveAccount new.
	Deposit register: 1000 on: account.
	Withdraw register: 50 on: account.
	Withdraw register: 50 on: account.
	Withdraw register: 50 on: account.
	
	portfolio2 addTransaction: account .
	
	portfolio1 addTransaction: portfolio2.
	
	self deny: portfolio1 isEmpty.
	
	self assert: 1 equals: portfolio1 amountOfPortfolios.
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:34:47' prior: 50947610!
test08NotEmptyPortfolioCanBeAdedToPortfolio

	| portfolio1 portfolio2 account1 account2 account3 |
	
	portfolio1 _ Portfolio new.
	portfolio2  _ Portfolio new.
	
account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio2 addTransaction: account1.
	portfolio2 addTransaction: account2.
	portfolio2 addTransaction: account3.
	
	portfolio1 addTransaction: portfolio2.
	
	self deny: portfolio1 isEmpty.
	
	self assert: 1 equals: portfolio1 amountOfPortfolios.
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:34:56' prior: 50947629!
test08NotEmptyPortfolioCanBeAdedToPortfolio

	| portfolio1 portfolio2 account1 account2 account3 |
	
	portfolio1 _ Portfolio new.
	portfolio2  _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio2 addTransaction: account1.
	portfolio2 addTransaction: account2.
	portfolio2 addTransaction: account3.
	
	portfolio1 addTransaction: portfolio2.
	
	self deny: portfolio1 isEmpty.
	
	self assert: 1 equals: portfolio1 amountOfPortfolios.
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:35:16' prior: 50947656!
test08NotEmptyPortfolioCanBeAdedToPortfolio

	| portfolioRoot portfolio2 account1 account2 account3 |
	
	portfolioRoot _ Portfolio new.
	portfolio2  _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio2 addTransaction: account1.
	portfolio2 addTransaction: account2.
	portfolio2 addTransaction: account3.
	
	portfolioRoot addTransaction: portfolio2.
	
	self deny: portfolioRoot isEmpty.
	
	self assert: 1 equals: portfolioRoot amountOfPortfolios.
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:36:16' prior: 50947683!
test08NotEmptyPortfolioCanBeAdedToPortfolio

	| portfolioRoot portfolio2 account1 account2 account3 |
	
	portfolioRoot _ Portfolio new.
	portfolio2  _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio2 addTransaction: account1.
	portfolio2 addTransaction: account2.
	portfolio2 addTransaction: account3.
	
	portfolioRoot addTransaction: portfolio2.
	
	self deny: portfolioRoot isEmpty.
	
	self assert: 1 equals: portfolioRoot amountOfPortfolios.
	
	self assert: 150 equals: portfolioRoot balance .
	
	! !

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/6/2020 17:36:19'!
FAILURE!

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/6/2020 17:36:19'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:37:12' prior: 50947710!
test08NotEmptyPortfolioCanBeAdedToPortfolio

	| portfolioRoot portfolio2 account1 account2 account3 |
	
	portfolioRoot _ Portfolio new.
	portfolio2  _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio2 addTransaction: account1.
	portfolio2 addTransaction: account2.
	portfolio2 addTransaction: account3.
	
	portfolioRoot addTransaction: portfolio2.
	
	self deny: portfolioRoot isEmpty.
	
	self assert: 1 equals: portfolioRoot amountOfPortfolios.
	
	self assert: 150 equals: portfolioRoot balance.
	
	! !

portfolioRoot balance!

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/6/2020 17:42:40'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:49:49' prior: 50946268!
balance
	
	| balanceAccounts balancePortfolio |
	
	balanceAccounts _ accounts sum: [ :anAccount | anAccount balance] ifEmpty: [0] .
	
	balancePortfolio _ portfolios sum: [:x | x balance ] ifEmpty: [0].
	
	^ balancePortfolio + balanceAccounts .
		
		! !

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/6/2020 17:50:08'!
PASSED!

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/6/2020 17:50:15'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 17:51:24' prior: 50947746!
test08NotEmptyPortfolioCanBeAdedToPortfolio

	| portfolioRoot portfolio2 account1 account2 account3 |
	
	portfolioRoot _ Portfolio new.
	portfolio2  _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio2 addTransaction: account1.
	portfolio2 addTransaction: account2.
	portfolio2 addTransaction: account3.
	
	portfolioRoot addTransaction: portfolio2.
	
	self deny: portfolioRoot isEmpty.
	
	self assert: 1 equals: portfolioRoot amountOfPortfolios.
	
	self assert: 150 equals: portfolioRoot balance.
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 18:01:34'!
test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio

	| portfolioRoot portfolio2 account1 |
	
	portfolioRoot _ Portfolio new.
	portfolio2  _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolio2 addTransaction: account1.
	
	portfolioRoot addTransaction: portfolio2.
	
	self deny: portfolioRoot isEmpty.
	
	self assert: 1 equals: portfolioRoot amountOfPortfolios.
	
	self assert: 150 equals: portfolioRoot balance.
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 18:08:21'!
register: aTransaction 
	
	(aTransaction isKindOf: ReceptiveAccount) ifTrue:[ accounts add: aTransaction ].
	(aTransaction isKindOf: Portfolio ) ifTrue:[ portfolios add: aTransaction ].

	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 18:08:21' prior: 50947825!
test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio

	| portfolioRoot portfolio2 account1 |
	
	portfolioRoot _ Portfolio new.
	portfolio2  _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolio2 register: account1.
	
	portfolioRoot register: portfolio2.
	
	self deny: portfolioRoot isEmpty.
	
	self assert: 1 equals: portfolioRoot amountOfPortfolios.
	
	self assert: 150 equals: portfolioRoot balance.
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 18:08:21' prior: 50947223!
test02AccountsCanBeAddedToPortfolio

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	
	portfolio register: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 0 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 18:08:21' prior: 50947531!
test07EmptyPortfolioCanBeAdedToPortfolio

	| portfolio1 portfolio2 |
	
	portfolio1 _ Portfolio new.
	portfolio2  _ Portfolio new.
	portfolio1 register: portfolio2.
	
	self deny: portfolio1 isEmpty.
	
	self assert: 1 equals: portfolio1 amountOfPortfolios.
	
	self assert: 0 equals: portfolio1 balance .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 18:08:21' prior: 50946964!
test05AccountCanBeAddedToPortfolioWithMultipleTransactions

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	
	portfolio register: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 150 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 18:08:22' prior: 50946894!
test03AccountCanBeAddedToPortfolioWithMultipleDeposit

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	
	portfolio register: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 300 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 18:08:22' prior: 50946984!
test04AccountCanBeAddedToPortfolioWithMultipleWithdraw

	| portfolio account |
	
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 1000 on: account.
	Withdraw register: 50 on: account.
	Withdraw register: 50 on: account.
	Withdraw register: 50 on: account.
	
	portfolio register: account.
	
	self deny: portfolio isEmpty.
	
	self assert: 1 equals: portfolio amountOfAccounts.
	
	self assert: 850 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 18:08:22' prior: 50947797!
test08NotEmptyPortfolioCanBeAdedToPortfolio

	| portfolioRoot portfolio2 account1 account2 account3 |
	
	portfolioRoot _ Portfolio new.
	portfolio2  _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio2 register: account1.
	portfolio2 register: account2.
	portfolio2 register: account3.
	
	portfolioRoot register: portfolio2.
	
	self deny: portfolioRoot isEmpty.
	
	self assert: 1 equals: portfolioRoot amountOfPortfolios.
	
	self assert: 150 equals: portfolioRoot balance.
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 18:08:22' prior: 50947475!
test06MultipleAccountsCanBeAdedToPortfolio

	| portfolio account1 account2 account3 totalBalance |
	
	portfolio _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio register: account1.
	portfolio register: account2.
	portfolio register: account3.
	
	totalBalance _ account1 balance + account2 balance + account3 balance.
	
	self deny: portfolio isEmpty.
	
	self assert: 3 equals: portfolio amountOfAccounts.
	
	self assert: totalBalance equals: portfolio balance.! !

!methodRemoval: Portfolio #addTransaction: stamp: 'ja 11/6/2020 18:08:22'!
addTransaction: aTransaction 
	
	(aTransaction isKindOf: ReceptiveAccount) ifTrue:[ accounts add: aTransaction ].
	(aTransaction isKindOf: Portfolio ) ifTrue:[ portfolios add: aTransaction ].

	
	!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/6/2020 18:08:30'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/6/2020 18:08:30'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'ja 11/6/2020 18:08:30'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'ja 11/6/2020 18:08:30'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'ja 11/6/2020 18:08:30'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'ja 11/6/2020 18:08:30'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/6/2020 18:08:30'!
PASSED!

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/6/2020 18:08:30'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'ja 11/6/2020 18:08:30'!
FAILURE!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'ja 11/6/2020 18:08:30'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ja 11/6/2020 18:08:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ja 11/6/2020 18:08:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ja 11/6/2020 18:08:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ja 11/6/2020 18:08:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ja 11/6/2020 18:08:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ja 11/6/2020 18:08:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ja 11/6/2020 18:08:51'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'ja 11/6/2020 19:17:00'!
FAILURE!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'ja 11/6/2020 19:17:00'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 19:17:19' prior: 50947854!
test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio

	| portfolioRoot portfolioChild1 account1 |
	
	portfolioRoot _ Portfolio new.
	portfolioChild1  _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioChild1 register: account1.
	
	portfolioRoot register: portfolioChild1.
	
	self deny: portfolioRoot isEmpty.
	
	self assert: 1 equals: portfolioRoot amountOfPortfolios.
	
	self assert: 150 equals: portfolioRoot balance.
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 19:18:04' prior: 50948087!
test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio

	| portfolioRoot portfolioChild1 account1 |
	
	portfolioRoot _ Portfolio new.
	portfolioChild1  _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioChild1 register: account1.
	
	portfolioRoot register: portfolioChild1.
	
	self deny: portfolioRoot isEmpty.
	
	self assert: 1 equals: portfolioRoot amountOfPortfolios.
	
	self assert: 150 equals: portfolioRoot balance.
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 19:37:20'!
test08ANotEmptyPortfolioCanBeAdedToPortfolio

	| portfolioRoot portfolio2 account1 account2 account3 |
	
	portfolioRoot _ Portfolio new.
	portfolio2  _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio2 register: account1.
	portfolio2 register: account2.
	portfolio2 register: account3.
	
	portfolioRoot register: portfolio2.
	
	self deny: portfolioRoot isEmpty.
	
	self assert: 1 equals: portfolioRoot amountOfPortfolios.
	
	self assert: 150 equals: portfolioRoot balance.
	
	! !

!methodRemoval: PortfolioTest #test08NotEmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/6/2020 19:37:20'!
test08NotEmptyPortfolioCanBeAdedToPortfolio

	| portfolioRoot portfolio2 account1 account2 account3 |
	
	portfolioRoot _ Portfolio new.
	portfolio2  _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolio2 register: account1.
	portfolio2 register: account2.
	portfolio2 register: account3.
	
	portfolioRoot register: portfolio2.
	
	self deny: portfolioRoot isEmpty.
	
	self assert: 1 equals: portfolioRoot amountOfPortfolios.
	
	self assert: 150 equals: portfolioRoot balance.
	
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 19:37:44' prior: 50948106!
test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio

	| portfolioRoot portfolioChild1 portfolioChild2 portfolioChild3 account1 |
	
	portfolioRoot _ Portfolio new.
	portfolioChild1  _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioChild1 register: account1.
	
	portfolioRoot register: portfolioChild1.
	
	self deny: portfolioRoot isEmpty.
	
	self assert: 1 equals: portfolioRoot amountOfPortfolios.
	
	self assert: 150 equals: portfolioRoot balance.
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 19:39:03' prior: 50948181!
test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio

	| portfolioRoot portfolioChild1 portfolioChild2 portfolioChild3 account1 |
	
	portfolioRoot _ Portfolio new.
	portfolioChild1  _ Portfolio new.
	portfolioChild2  _ Portfolio new.
	portfolioChild3 _ Portfolio new.
		
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioChild1 register: account1.
	
	portfolioRoot register: portfolioChild1.
	
	self deny: portfolioRoot isEmpty.
	
	self assert: 1 equals: portfolioRoot amountOfPortfolios.
	
	self assert: 150 equals: portfolioRoot balance.
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 19:40:27' prior: 50948201!
test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio

	| portfolioRoot portfolioChild1 portfolioChild2 account1 account2|
	
	portfolioRoot _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
		
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioChild1 register: account1.
	
	portfolioRoot register: portfolioChild1.
	
	self deny: portfolioRoot isEmpty.
	
	self assert: 1 equals: portfolioRoot amountOfPortfolios.
	
	self assert: 150 equals: portfolioRoot balance.
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 19:42:19' prior: 50948224!
test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio

	| portfolioRoot portfolioChild1 portfolioChild2 account1 account2|
	
	portfolioRoot _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
		
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	portfolioChild1 register: account1.
	portfolioChild2  register: account2.
	
	portfolioRoot register: portfolioChild1.
	portfolioRoot register: portfolioChild2.
		
	self deny: portfolioRoot isEmpty.
	
	self assert: 2 equals: portfolioRoot amountOfPortfolios.
	
	self assert: 100 equals: portfolioRoot balance.
	
	! !

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'ja 11/6/2020 19:43:41'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 19:46:05'!
test10

	| portfolioRoot1 portfolioRoot2 portfolioChild1 portfolioChild2 account1 account2|
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
		
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	portfolioChild1 register: account1.
	portfolioChild2  register: account2.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild2.
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	
	self assert: 100 equals: portfolioRoot1 balance.
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 19:46:33' prior: 50948275!
test10

	| portfolioRoot1 portfolioRoot2 portfolioChild1 portfolioChild2 account1 account2|
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
		
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	portfolioChild1 register: account1.
	portfolioChild2  register: account2.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild2.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
		
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 2 equals: portfolioRoot2 amountOfPortfolios.
	
	self assert: 100 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	! !

!testRun: #PortfolioTest #test10 stamp: 'ja 11/6/2020 19:46:37'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 19:47:40'!
test10casoPadresDistintos

	| portfolioRoot1 portfolioRoot2 portfolioChild1 portfolioChild2 account1 account2|
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
		
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	portfolioChild1 register: account1.
	portfolioChild2  register: account2.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild2.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
		
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 2 equals: portfolioRoot2 amountOfPortfolios.
	
	self assert: 100 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	! !

!methodRemoval: PortfolioTest #test10 stamp: 'ja 11/6/2020 19:47:44'!
test10

	| portfolioRoot1 portfolioRoot2 portfolioChild1 portfolioChild2 account1 account2|
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
		
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	portfolioChild1 register: account1.
	portfolioChild2  register: account2.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild2.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
		
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 2 equals: portfolioRoot2 amountOfPortfolios.
	
	self assert: 100 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 19:47:51' prior: 50948342!
test10casoPadresDistintos

	| portfolioRoot1 portfolioRoot2 portfolioChild1 portfolioChild2 account1 account2 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
		
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	portfolioChild1 register: account1.
	portfolioChild2  register: account2.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild2.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
		
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 2 equals: portfolioRoot2 amountOfPortfolios.
	
	self assert: 100 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 19:49:14'!
test11

	| portfolioRoot1 portfolioRoot2 portfolioChildOfPortfolioChild1 portfolioChild1 portfolioChild2 account1 account2 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
		
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	portfolioChild1 register: account1.
	portfolioChild2  register: account2.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild2.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
		
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 2 equals: portfolioRoot2 amountOfPortfolios.
	
	self assert: 100 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 19:49:33' prior: 50948446!
test11

	| portfolioRoot1 portfolioRoot2 portfolioChildOfPortfolioChild1 portfolioChild1 portfolioChild2 account1 account2 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChildOfPortfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	portfolioChild1 register: account1.
	portfolioChild2  register: account2.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild2.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
		
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 2 equals: portfolioRoot2 amountOfPortfolios.
	
	self assert: 100 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 19:50:05' prior: 50948482!
test11

	| portfolioRoot1 portfolioRoot2 portfolioChildOfPortfolioChild1 portfolioChild1 portfolioChild2 account1 account2 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChildOfPortfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChildOfPortfolioChild1. 
	portfolioChild2  register: account2.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild2.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
		
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 2 equals: portfolioRoot2 amountOfPortfolios.
	
	self assert: 100 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 19:51:55' prior: 50948520!
test11

	| portfolioRoot1 portfolioRoot2 portfolioChildOfPortfolioChild1 portfolioChild1 portfolioChild2 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChildOfPortfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 150 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChildOfPortfolioChild1. 
	portfolioChild2  register: account2.
	portfolioChildOfPortfolioChild1 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild2.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
		
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 2 equals: portfolioRoot2 amountOfPortfolios.
	
	self assert: 100 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 19:54:21' prior: 50948560!
test11

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChildOfPortfolioChild1 portfolioChild1 portfolioChild2 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChildOfPortfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 150 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChildOfPortfolioChild1. 
	portfolioChild2  register: account2.
	portfolioChildOfPortfolioChild1 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChildOfPortfolioChild1 .
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
		
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 2 equals: portfolioRoot2 amountOfPortfolios.
	
	self assert: 100 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 19:55:33' prior: 50948605!
test11

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild3 portfolioChild1 portfolioChild2 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 150 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3 .
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
		
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 2 equals: portfolioRoot2 amountOfPortfolios.
	
	self assert: 100 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 19:55:45' prior: 50948654!
test11

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 150 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3 .
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
		
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 2 equals: portfolioRoot2 amountOfPortfolios.
	
	self assert: 100 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 20:01:48' prior: 50948700!
test11

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3 .
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 250 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		! !

!testRun: #PortfolioTest #test11 stamp: 'ja 11/6/2020 20:04:47'!
FAILURE!

!testRun: #PortfolioTest #test11 stamp: 'ja 11/6/2020 20:04:47'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 20:05:04' prior: 50948746!
test11

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3 .
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		! !

!testRun: #PortfolioTest #test11 stamp: 'ja 11/6/2020 20:05:07'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/6/2020 20:05:11'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/6/2020 20:05:11'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'ja 11/6/2020 20:05:11'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'ja 11/6/2020 20:05:11'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'ja 11/6/2020 20:05:11'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'ja 11/6/2020 20:05:11'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/6/2020 20:05:11'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/6/2020 20:05:11'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'ja 11/6/2020 20:05:11'!
PASSED!

!testRun: #PortfolioTest #test10casoPadresDistintos stamp: 'ja 11/6/2020 20:05:11'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'ja 11/6/2020 20:05:11'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 20:06:58'!
test11muchosPadresPuedenTenerMuchosHijos

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3 .
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		! !

!methodRemoval: PortfolioTest #test11 stamp: 'ja 11/6/2020 20:07:01'!
test11

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3 .
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 20:07:47'!
test12

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3.
	
	portfolioChild3 register: portfolioRoot2.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 20:09:18' prior: 50948986!
test12

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3.
	
	self should: [ portfolioChild3 register: portfolioRoot2. self fail ]  
		raise: Error
		withMessageText: Portfolio class errorCicloNoSePuede.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 20:17:29'!
test12DetectandoCiclos

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3.
	
	self should: [ portfolioChild3 register: portfolioRoot2. self fail ]  
		raise: Error
		withMessageText: Portfolio class errorCicloNoSePuede.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		! !

!methodRemoval: PortfolioTest #test12 stamp: 'ja 11/6/2020 20:17:32'!
test12

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3.
	
	self should: [ portfolioChild3 register: portfolioRoot2. self fail ]  
		raise: Error
		withMessageText: Portfolio class errorCicloNoSePuede.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:19:36'!
ERROR!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:19:36'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 20:20:45' prior: 50949090!
test12DetectandoCiclos

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3.
	
	self should: [ portfolioChild3 register: portfolioRoot2. self fail ]  
		raise: Error
		withMessageText: portfolioChild3 class errorCicloNoSePuede.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		! !

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:20:53'!
ERROR!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:20:53'!
ERROR!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 20:21:02'!
errorCicloNoSePuede
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 20:21:22' prior: 50949262!
errorCicloNoSePuede
	
	^ 'No se admiten ciclos rey'! !

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:21:25'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 20:24:02' prior: 50947844!
register: aTransaction 
	
	(self hasRegistered: aTransaction) ifTrue: [self error: self class errorCicloNoSePuede].
	
	(aTransaction isKindOf: ReceptiveAccount) ifTrue:[ accounts add: aTransaction ].
	(aTransaction isKindOf: Portfolio ) ifTrue:[ portfolios add: aTransaction ].

	
	! !

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:24:09'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:24:39'!
ERROR!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:24:39'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 20:24:51'!
hasRegistered: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 20:25:48' prior: 50949295!
hasRegistered: aPortfolioEntry 
	
	^ true! !

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:25:50'!
ERROR!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:26:25'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 20:28:39' prior: 50949300!
hasRegistered: aPortfolioEntry 
	
	^ self includes: aPortfolioEntry .! !

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:28:44'!
ERROR!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:28:44'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 20:29:57'!
portfolios

	^ portfolios! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 20:30:07'!
accounts

	^ accounts ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 20:30:38' prior: 50949310!
hasRegistered: aPortfolioEntry 
	
	^ (self portfolios includes: aPortfolioEntry) or:[ self accounts includes: aPortfolioEntry ].! !

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:31:16'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:31:16'!
FAILURE!

(self portfolios includes: aPortfolioEntry)!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:35:38'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:35:38'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:36:25'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:36:37'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:36:37'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 20:36:56' prior: 50949275!
register: aTransaction 
	
	(self hasRegistered: aTransaction) ifTrue: [^ self error: self class errorCicloNoSePuede].
	
	(aTransaction isKindOf: ReceptiveAccount) ifTrue:[ accounts add: aTransaction ].
	(aTransaction isKindOf: Portfolio ) ifTrue:[ portfolios add: aTransaction ].

	
	! !

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:37:01'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:37:01'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 20:37:39' prior: 50949202!
test12DetectandoCiclos

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3.
	
	self should: [ portfolioChild3 register: portfolioRoot2. self fail ]  
		raise: Error
		withMessageText: Portfolio errorCicloNoSePuede.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		! !

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:37:42'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:37:42'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 20:38:38' prior: 50949358!
register: aTransaction 
	
	(self hasRegistered: aTransaction) ifTrue: [ self error: self class errorCicloNoSePuede ].
	
	(aTransaction isKindOf: ReceptiveAccount) ifTrue:[ accounts add: aTransaction ].
	(aTransaction isKindOf: Portfolio ) ifTrue:[ portfolios add: aTransaction ].

	
	! !

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:40:02'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:40:02'!
FAILURE!

self hasRegistered: aTransaction!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 20:41:05' prior: 50949376!
test12DetectandoCiclos

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3.
	
	self should: [ portfolioChild3 register: portfolioRoot2 ]  
		raise: Error
		withMessageText: Portfolio errorCicloNoSePuede.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		! !

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:41:08'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 20:41:26' prior: 50949455!
test12DetectandoCiclos

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3.
	
	self should: [ portfolioChild3 register: portfolioRoot2 . self fail]  
		raise: Error
		withMessageText: Portfolio errorCicloNoSePuede.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		! !

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:41:29'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:41:56'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:42:24'!
FAILURE!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 20:43:56'!
cicloNoSePuedeErrorDescription
	
	^ 'No se admiten ciclos rey'! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 20:43:56' prior: 50949436!
register: aTransaction 
	
	(self hasRegistered: aTransaction) ifTrue: [ self error: self class cicloNoSePuedeErrorDescription ].
	
	(aTransaction isKindOf: ReceptiveAccount) ifTrue:[ accounts add: aTransaction ].
	(aTransaction isKindOf: Portfolio ) ifTrue:[ portfolios add: aTransaction ].

	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 20:43:56' prior: 50949512!
test12DetectandoCiclos

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3.
	
	self should: [ portfolioChild3 register: portfolioRoot2 . self fail]  
		raise: Error
		withMessageText: Portfolio cicloNoSePuedeErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		! !

!methodRemoval: Portfolio class #errorCicloNoSePuede stamp: 'ja 11/6/2020 20:43:56'!
errorCicloNoSePuede
	
	^ 'No se admiten ciclos rey'!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:44:50'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:44:50'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:46:23'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:46:29'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:46:29'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:48:15'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:48:15'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:48:25'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:48:41'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:48:41'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:50:37'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:50:37'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 20:53:47' prior: 50949592!
test12DetectandoCiclos

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3.
	
	self should: [ portfolioChild3 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio cicloNoSePuedeErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		! !

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:53:50'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:53:50'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:54:16'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:54:16'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:54:51'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:54:51'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:57:31'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 20:57:31'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 21:02:43' prior: 50949329!
hasRegistered: aPortfolioEntry 
	
	^ (self portfolios includes: aPortfolioEntry) or:[ self accounts includes: aPortfolioEntry ] .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:01:04'!
test13DetectandoCiclos

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3.
	
	self should: [ portfolioChild3 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio cicloNoSePuedeErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		! !

!methodRemoval: PortfolioTest #test12DetectandoCiclos stamp: 'ja 11/6/2020 22:01:04'!
test12DetectandoCiclos

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3.
	
	self should: [ portfolioChild3 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio cicloNoSePuedeErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:04:48'!
test12DetectandoCiclosSimple

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioChild1 register: account1 . self fail]  
		raise: Error
		withMessageText: Portfolio cicloNoSePuedeErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !

!testRun: #PortfolioTest #test12DetectandoCiclosSimple stamp: 'ja 11/6/2020 22:06:09'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclosSimple stamp: 'ja 11/6/2020 22:06:09'!
FAILURE!

!testRun: #PortfolioTest #test12DetectandoCiclosSimple stamp: 'ja 11/6/2020 22:09:58'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:12:07' prior: 50949579!
register: aPortfolioEntry 
	
	(self hasRegistered: aPortfolioEntry) ifTrue: [ self error: self class cicloNoSePuedeErrorDescription ].
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue:[ accounts add: aPortfolioEntry ].
	(aPortfolioEntry isKindOf: Portfolio ) ifTrue:[ portfolios add: aPortfolioEntry ].

	
	! !

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/6/2020 22:13:59'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/6/2020 22:13:59'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'ja 11/6/2020 22:13:59'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'ja 11/6/2020 22:13:59'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'ja 11/6/2020 22:13:59'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'ja 11/6/2020 22:13:59'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/6/2020 22:13:59'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/6/2020 22:13:59'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'ja 11/6/2020 22:13:59'!
PASSED!

!testRun: #PortfolioTest #test10casoPadresDistintos stamp: 'ja 11/6/2020 22:13:59'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'ja 11/6/2020 22:13:59'!
PASSED!

!testRun: #PortfolioTest #test12DetectandoCiclosSimple stamp: 'ja 11/6/2020 22:13:59'!
FAILURE!

!testRun: #PortfolioTest #test13DetectandoCiclos stamp: 'ja 11/6/2020 22:14:00'!
FAILURE!

Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'ja 11/6/2020 22:14:47'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:15:02' prior: 50945933 overrides: 16896425!
initialize

	accounts _ OrderedCollection new.
	
	portfolios _ OrderedCollection new.
	
	parent _ self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:16:21' prior: 50949913!
register: aPortfolioEntry 
	
	(self hasRegistered: aPortfolioEntry) ifTrue: [ self error: self class cicloNoSePuedeErrorDescription ].
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue:[ accounts add: aPortfolioEntry ].
	(aPortfolioEntry isKindOf: Portfolio ) ifTrue:[ aPortfolioEntry parent: self. 
										portfolios add: aPortfolioEntry ].

	
	! !
!ClosureTraceNode methodsFor: 'private - accessing' stamp: 'ja 11/6/2020 22:17:00' prior: 16808635!
parent: aPortfolio

	parent _ aPortfolio! !
!ClosureTraceNode methodsFor: 'private - accessing' stamp: 'sqr 12/15/2013 23:23' prior: 50950006!
parent: aTraceNode

	parent _ aTraceNode! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:18:15' prior: 50949991!
register: aPortfolioEntry 
	
	(self hasRegistered: aPortfolioEntry) ifTrue: [ self error: self class cicloNoSePuedeErrorDescription ].
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue:[ accounts add: aPortfolioEntry ].
	(aPortfolioEntry isKindOf: Portfolio ) ifTrue:[ aPortfolioEntry parentIs: self. 
										portfolios add: aPortfolioEntry ].

	
	! !

!testRun: #PortfolioTest #test12DetectandoCiclosSimple stamp: 'ja 11/6/2020 22:18:32'!
ERROR!

!testRun: #PortfolioTest #test12DetectandoCiclosSimple stamp: 'ja 11/6/2020 22:18:32'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:18:40'!
parentIs: aPortfolio 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:18:49' prior: 50950036!
parentIs: aPortfolio 
	
	parent _ aPortfolio .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:21:31' prior: 50949762!
hasRegistered: aPortfolioEntry 
	
	^ (self portfolios includes: aPortfolioEntry) or:[ self accounts includes: aPortfolioEntry ] or: [ self isInHierarchy: aPortfolioEntry ].! !

!testRun: #PortfolioTest #test12DetectandoCiclosSimple stamp: 'ja 11/6/2020 22:21:56'!
ERROR!

!testRun: #PortfolioTest #test12DetectandoCiclosSimple stamp: 'ja 11/6/2020 22:21:56'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:22:03'!
isInHierarchy: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:22:29' prior: 50950060!
isInHierarchy: aPortofolioEntry 
	
	^ true! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:23:42' prior: 50950065!
isInHierarchy: aPortofolioEntry 
	
	^ false! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:24:44'!
test13DetectandoCiclosSimple

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioChild1 register: account1 . self fail]  
		raise: Error
		withMessageText: Portfolio cicloNoSePuedeErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !

!methodRemoval: PortfolioTest #test12DetectandoCiclosSimple stamp: 'ja 11/6/2020 22:24:44'!
test12DetectandoCiclosSimple

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioChild1 register: account1 . self fail]  
		raise: Error
		withMessageText: Portfolio cicloNoSePuedeErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:24:55'!
test14DetectandoCiclos

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3.
	
	self should: [ portfolioChild3 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio cicloNoSePuedeErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		! !

!methodRemoval: PortfolioTest #test13DetectandoCiclos stamp: 'ja 11/6/2020 22:24:55'!
test13DetectandoCiclos

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3.
	
	self should: [ portfolioChild3 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio cicloNoSePuedeErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:25:45'!
test12CicloSuperSimple

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioChild1 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio cicloNoSePuedeErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !

!testRun: #PortfolioTest #test12CicloSuperSimple stamp: 'ja 11/6/2020 22:25:47'!
FAILURE!

!testRun: #PortfolioTest #test12CicloSuperSimple stamp: 'ja 11/6/2020 22:25:47'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:26:21' prior: 50950234!
test12CicloSuperSimple

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioChild1 register: portfolioRoot1. self fail]  
		raise: Error
		withMessageText: Portfolio cicloNoSePuedeErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:26:43' prior: 50950266!
test12CicloSuperSimple

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioRoot1 register: portfolioChild1 . self fail]  
		raise: Error
		withMessageText: Portfolio cicloNoSePuedeErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !

!testRun: #PortfolioTest #test12CicloSuperSimple stamp: 'ja 11/6/2020 22:26:46'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'ja 11/6/2020 22:26:55'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:27:24'!
test12NoSePuedeAgregarDosVecesElMismoElem

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioRoot1 register: portfolioChild1 . self fail]  
		raise: Error
		withMessageText: Portfolio cicloNoSePuedeErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !

!methodRemoval: PortfolioTest #test12CicloSuperSimple stamp: 'ja 11/6/2020 22:27:38'!
test12CicloSuperSimple

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioRoot1 register: portfolioChild1 . self fail]  
		raise: Error
		withMessageText: Portfolio cicloNoSePuedeErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:28:11'!
test14DetectandoCiclosSimple

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioChild1 register: account1 . self fail]  
		raise: Error
		withMessageText: Portfolio cicloNoSePuedeErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !

!methodRemoval: PortfolioTest #test13DetectandoCiclosSimple stamp: 'ja 11/6/2020 22:28:11'!
test13DetectandoCiclosSimple

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioChild1 register: account1 . self fail]  
		raise: Error
		withMessageText: Portfolio cicloNoSePuedeErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:28:19'!
test15DetectandoCiclos

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3.
	
	self should: [ portfolioChild3 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio cicloNoSePuedeErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		! !

!methodRemoval: PortfolioTest #test14DetectandoCiclos stamp: 'ja 11/6/2020 22:28:19'!
test14DetectandoCiclos

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3.
	
	self should: [ portfolioChild3 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio cicloNoSePuedeErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:28:40'!
test13NoSePuedeAgregarDosVecesElMismoElem

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioRoot1 register: portfolioChild1 . self fail]  
		raise: Error
		withMessageText: Portfolio cicloNoSePuedeErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !

!methodRemoval: PortfolioTest #test12NoSePuedeAgregarDosVecesElMismoElem stamp: 'ja 11/6/2020 22:28:40'!
test12NoSePuedeAgregarDosVecesElMismoElem

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioRoot1 register: portfolioChild1 . self fail]  
		raise: Error
		withMessageText: Portfolio cicloNoSePuedeErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:28:58'!
test12NoTePodesAgregarAVosMismo

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioRoot1 register: portfolioChild1 . self fail]  
		raise: Error
		withMessageText: Portfolio cicloNoSePuedeErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:31:29' prior: 50950592!
test12NoTePodesAgregarAVosMismo

	| portfolioRoot |
	
	portfolioRoot _ Portfolio new.
	
	self should: [ portfolioRoot register: portfolioRoot . self fail]  
		raise: Error
		withMessageText: Portfolio noTePodesAgregarAVosMismoErrorDescription.
		
	self assert: 0 equals: portfolioRoot amountOfAccounts.
			
	self assert: 0 equals: portfolioRoot balance.! !

!testRun: #PortfolioTest #test12NoTePodesAgregarAVosMismo stamp: 'ja 11/6/2020 22:31:34'!
ERROR!

!testRun: #PortfolioTest #test12NoTePodesAgregarAVosMismo stamp: 'ja 11/6/2020 22:31:34'!
ERROR!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:31:41'!
noTePodesAgregarAVosMismoErrorDescription
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:32:06' prior: 50950639!
noTePodesAgregarAVosMismoErrorDescription
	
	^ 'No te podes agregar a vos mismo'! !

!testRun: #PortfolioTest #test12NoTePodesAgregarAVosMismo stamp: 'ja 11/6/2020 22:32:10'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:33:49' prior: 50950016!
register: aPortfolioEntry 
	
	(self hasRegistered: aPortfolioEntry) ifTrue: [ self error: self class cicloNoSePuedeErrorDescription ].
	
	(self = aPortfolioEntry) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue:[ accounts add: aPortfolioEntry ].
	(aPortfolioEntry isKindOf: Portfolio ) ifTrue:[ aPortfolioEntry parentIs: self. 
										portfolios add: aPortfolioEntry ].

	
	! !

!testRun: #PortfolioTest #test12NoTePodesAgregarAVosMismo stamp: 'ja 11/6/2020 22:34:33'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:35:02' prior: 50950538!
test13NoSePuedeAgregarDosVecesElMismoElem

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioRoot1 register: portfolioChild1 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !

!testRun: #PortfolioTest #test13NoSePuedeAgregarDosVecesElMismoElem stamp: 'ja 11/6/2020 22:35:08'!
ERROR!

!testRun: #PortfolioTest #test13NoSePuedeAgregarDosVecesElMismoElem stamp: 'ja 11/6/2020 22:35:08'!
ERROR!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:35:16'!
noSePuedeAgregarDosVecesElMismoElemErrorDescription
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:35:48' prior: 50950709!
noSePuedeAgregarDosVecesElMismoElemErrorDescription
	
	^ 'No se puede agregar dos veces el mismo elem' ! !

!testRun: #PortfolioTest #test13NoSePuedeAgregarDosVecesElMismoElem stamp: 'ja 11/6/2020 22:35:53'!
FAILURE!

!testRun: #PortfolioTest #test13NoSePuedeAgregarDosVecesElMismoElem stamp: 'ja 11/6/2020 22:36:08'!
PASSED!

!testRun: #PortfolioTest #test13NoSePuedeAgregarDosVecesElMismoElem stamp: 'ja 11/6/2020 22:36:11'!
FAILURE!

!testRun: #PortfolioTest #test13NoSePuedeAgregarDosVecesElMismoElem stamp: 'ja 11/6/2020 22:36:11'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:38:21' prior: 50950654!
register: aPortfolioEntry 
	
	(self hasRegistered: aPortfolioEntry) ifTrue: [ self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ].
	
	(self = aPortfolioEntry) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue:[ accounts add: aPortfolioEntry ].
	(aPortfolioEntry isKindOf: Portfolio ) ifTrue:[ aPortfolioEntry parentIs: self. 
										portfolios add: aPortfolioEntry ].

	
	! !

!testRun: #PortfolioTest #test13NoSePuedeAgregarDosVecesElMismoElem stamp: 'ja 11/6/2020 22:38:30'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:39:22'!
deepSearch: aPortfolioEntry 
	
	^ (self portfolios includes: aPortfolioEntry) or:[ self accounts includes: aPortfolioEntry ] or: [ self isInHierarchy: aPortfolioEntry ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:39:22' prior: 50950735!
register: aPortfolioEntry 
	
	(self deepSearch: aPortfolioEntry) ifTrue: [ self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ].
	
	(self = aPortfolioEntry) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue:[ accounts add: aPortfolioEntry ].
	(aPortfolioEntry isKindOf: Portfolio ) ifTrue:[ aPortfolioEntry parentIs: self. 
										portfolios add: aPortfolioEntry ].

	
	! !

!methodRemoval: Portfolio #hasRegistered: stamp: 'ja 11/6/2020 22:39:22'!
hasRegistered: aPortfolioEntry 
	
	^ (self portfolios includes: aPortfolioEntry) or:[ self accounts includes: aPortfolioEntry ] or: [ self isInHierarchy: aPortfolioEntry ].!

!testRun: #PortfolioTest #test13NoSePuedeAgregarDosVecesElMismoElem stamp: 'ja 11/6/2020 22:47:14'!
PASSED!

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/6/2020 22:47:29'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/6/2020 22:47:29'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 22:47:56' prior: 50950378!
test14DetectandoCiclosSimple

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioChild1 register: account1 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/6/2020 22:48:00'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/6/2020 22:48:00'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/6/2020 22:51:54'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/6/2020 22:51:54'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/6/2020 22:52:53'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/6/2020 22:52:53'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 23:01:11' prior: 50950070!
isInHierarchy: aPortofolioEntry 
	
	| parentRootSelf  parentRootOther |
	
	parentRootSelf _ self parentRoot.
	
	parentRootOther _ aPortofolioEntry parentRoot.
	
	^ parentRootSelf matchElementsOf: parentRootOther .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 23:06:03'!
parentRoot

	(self = parent) ifTrue: [ ^ self ].
	
	parent parentRoot.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 23:07:09'!
matchElementsOf: anotherPortfolioRoot

	 ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 23:07:40' prior: 50950863!
matchElementsOf: aPortfolioRoot

	 ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 23:07:42' prior: 50950868!
matchElementsOf: aPortfolioRoot

		 ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 23:08:31' prior: 50950873!
matchElementsOf: aPortfolioRootToAdd

		 ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 23:09:11' prior: 50950878!
matchElementsOf: aPortfolioRootToAdd

		
	
		 ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 23:10:31' prior: 50950883!
matchElementsOf: aPortfolioRootToAdd

	portfolios add: self.
	aPortfolioRootToAdd portfolios add: aPortfolioRootToAdd.
		
	
		 ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 23:17:07' prior: 50950888!
matchElementsOf: aPortfolioRootToAdd
	
	| otherPortfolio |
	
	portfolios add: self.
	otherPortfolio _ aPortfolioRootToAdd portfolios.
	otherPortfolio add: aPortfolioRootToAdd.
	
	portfolios addAllLast: accounts.
	otherPortfolio addAllLast: aPortfolioRootToAdd accounts.
	
		
	
		 ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 23:18:58' prior: 50950895!
matchElementsOf: aPortfolioRootToAdd
	
	| otherPortfolio |
	
	portfolios add: self.
	otherPortfolio _ aPortfolioRootToAdd portfolios.
	otherPortfolio add: aPortfolioRootToAdd.
	
	portfolios addAllLast: accounts.
	otherPortfolio addAllLast: aPortfolioRootToAdd accounts.
	
	^ portfolios intersection: otherPortfolio.
	
	
		
	
		 ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 23:20:08' prior: 50950907!
matchElementsOf: aPortfolioRootToAdd
	
	| portfolioSelf otherPortfolio |
	
	portfolioSelf _ portfolios.
	portfolioSelf add: self.
	
	otherPortfolio _ aPortfolioRootToAdd portfolios.
	otherPortfolio add: aPortfolioRootToAdd.
	
	portfolioSelf addAllLast: accounts.
	otherPortfolio addAllLast: aPortfolioRootToAdd accounts.
	
	^ portfolioSelf intersection: otherPortfolio.
	
	
		
	
		 ! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/6/2020 23:25:49'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/6/2020 23:25:49'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/6/2020 23:26:04'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/6/2020 23:26:24'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/6/2020 23:29:48' prior: 50950757!
deepSearch: aPortfolioEntry 

	| isInPortfolio isInAccounts isInHierarchy |
	
	isInPortfolio _ self portfolios includes: aPortfolioEntry.
	isInAccounts _ self accounts includes: aPortfolioEntry.
	isInHierarchy _ self isInHierarchy: aPortfolioEntry.
	
	^ ( isInPortfolio or: isInAccounts or: isInHierarchy )! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/6/2020 23:30:20'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/6/2020 23:30:20'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/6/2020 23:30:32'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/6/2020 23:30:39'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/6/2020 23:30:39'!
ERROR!

self = parent!

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/6/2020 23:31:59'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/6/2020 23:32:09'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/6/2020 23:32:09'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/6/2020 23:32:13'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/6/2020 23:32:18'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/6/2020 23:32:18'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/6/2020 23:34:04'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 00:11:44' prior: 50950766!
register: aPortfolioEntry 
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue:[ accounts add: aPortfolioEntry ].
	(aPortfolioEntry isKindOf: Portfolio ) ifTrue:[ 
		(self deepSearch: aPortfolioEntry) ifTrue: [ self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ].
	
		(self = aPortfolioEntry) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
		
		aPortfolioEntry parentIs: self. 
		
		portfolios add: aPortfolioEntry ].

	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 00:12:00' prior: 50950997!
register: aPortfolioEntry 
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue:[ accounts add: aPortfolioEntry ].
	(aPortfolioEntry isKindOf: Portfolio ) ifTrue:[ 
		(self deepSearch: aPortfolioEntry) ifTrue: [ self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ].
		(self = aPortfolioEntry) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
		aPortfolioEntry parentIs: self. 
		portfolios add: aPortfolioEntry ].

	
	! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/7/2020 00:12:12'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/7/2020 00:12:12'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/7/2020 00:12:36'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/7/2020 00:12:38'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'ja 11/7/2020 00:12:39'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'ja 11/7/2020 00:12:41'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'ja 11/7/2020 00:12:42'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'ja 11/7/2020 00:12:43'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/7/2020 00:12:45'!
ERROR!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/7/2020 00:12:45'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 00:18:09' prior: 50950921!
matchElementsOf: aPortfolioRootToAdd
	
	| portfolioSelf otherPortfolio |
	
	portfolioSelf _ portfolios.
	portfolioSelf add: self.
	
	otherPortfolio _ aPortfolioRootToAdd portfolios.
	otherPortfolio add: aPortfolioRootToAdd.
	
	portfolioSelf addAllLast: accounts.
	otherPortfolio addAllLast: aPortfolioRootToAdd accounts.
	
	^ (portfolioSelf intersection: otherPortfolio) size > 0 .
	
	
		
	
		 ! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/7/2020 00:18:14'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/7/2020 00:18:14'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 00:19:54' prior: 50951068!
matchElementsOf: aPortfolioRootToAdd
	
	| portfolioSelf otherPortfolio |
	
	portfolioSelf  _ OrderedCollection new.
	portfolioSelf _ portfolios copy.
	portfolioSelf add: self.
	
	otherPortfolio _ aPortfolioRootToAdd portfolios.
	otherPortfolio add: aPortfolioRootToAdd.
	
	portfolioSelf addAllLast: accounts.
	otherPortfolio addAllLast: aPortfolioRootToAdd accounts.
	
	^ (portfolioSelf intersection: otherPortfolio) size > 0 .
	
	
		
	
		 ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 00:20:23' prior: 50951090!
matchElementsOf: aPortfolioRootToAdd
	
	| portfolioSelf otherPortfolio |
	
	portfolioSelf  _ OrderedCollection new.
	otherPortfolio _ OrderedCollection new.
	
	portfolioSelf _ portfolios copy.
	portfolioSelf add: self.
	
	otherPortfolio _ aPortfolioRootToAdd portfolios copy.
	otherPortfolio add: aPortfolioRootToAdd.
	
	portfolioSelf addAllLast: accounts.
	otherPortfolio addAllLast: aPortfolioRootToAdd accounts.
	
	^ (portfolioSelf intersection: otherPortfolio) size > 0 .
	
	
		
	
		 ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 00:20:40' prior: 50951107!
matchElementsOf: aPortfolioRootToAdd
	
	| portfolioSelf otherPortfolio |
	
	
	portfolioSelf _ portfolios copy.
	portfolioSelf add: self.
	
	otherPortfolio _ aPortfolioRootToAdd portfolios copy.
	otherPortfolio add: aPortfolioRootToAdd.
	
	portfolioSelf addAllLast: accounts.
	otherPortfolio addAllLast: aPortfolioRootToAdd accounts.
	
	^ (portfolioSelf intersection: otherPortfolio) size > 0 .
	
	
		
	
		 ! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/7/2020 00:20:48'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/7/2020 00:20:48'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 00:23:25' prior: 50950802!
test14DetectandoCiclosSimple

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioChild1 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/7/2020 00:23:29'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 00:24:55' prior: 50951148!
test14DetectandoCiclosSimple

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioChild1 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 00:25:05'!
test14DetectandoCiclosSimpleEntreDosCiclos

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioChild1 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !

!methodRemoval: PortfolioTest #test14DetectandoCiclosSimple stamp: 'ja 11/7/2020 00:25:05'!
test14DetectandoCiclosSimple

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioChild1 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 00:25:24'!
test14DetectandoCiclosSimpleEntreDosPortfolios

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioChild1 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !

!methodRemoval: PortfolioTest #test14DetectandoCiclosSimpleEntreDosCiclos stamp: 'ja 11/7/2020 00:25:24'!
test14DetectandoCiclosSimpleEntreDosCiclos

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioChild1 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 00:25:40'!
test15DetectandoCiclosDificiles

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3.
	
	self should: [ portfolioChild3 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio cicloNoSePuedeErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		! !

!methodRemoval: PortfolioTest #test15DetectandoCiclos stamp: 'ja 11/7/2020 00:25:40'!
test15DetectandoCiclos

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3.
	
	self should: [ portfolioChild3 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio cicloNoSePuedeErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		!

!testRun: #PortfolioTest #test15DetectandoCiclosDificiles stamp: 'ja 11/7/2020 00:25:43'!
FAILURE!

!testRun: #PortfolioTest #test15DetectandoCiclosDificiles stamp: 'ja 11/7/2020 00:25:43'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 00:30:26' prior: 50951016!
register: aPortfolioEntry 
	
	(self deepSearch: aPortfolioEntry) ifTrue: [ self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ].
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue:[ accounts add: aPortfolioEntry ].
	
	(aPortfolioEntry isKindOf: Portfolio ) ifTrue:[ 	
		(self = aPortfolioEntry) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
		aPortfolioEntry parentIs: self. 
		portfolios add: aPortfolioEntry ].

	
	! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/7/2020 00:30:30'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/7/2020 00:30:30'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/7/2020 00:31:05'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/7/2020 00:31:05'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 00:34:07' prior: 50950948!
deepSearch: aPortfolioEntry 

	| isInPortfolio isInAccounts isInHierarchy |
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue: [	^ self accounts includes: aPortfolioEntry ].
	
	isInPortfolio _ self portfolios includes: aPortfolioEntry.
	isInHierarchy _ self isInHierarchy: aPortfolioEntry.
	
	^ ( isInPortfolio or: isInHierarchy )! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 00:34:14' prior: 50951465!
deepSearch: aPortfolioEntry 

	| isInPortfolio isInHierarchy |
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue: [	^ self accounts includes: aPortfolioEntry ].
	
	isInPortfolio _ self portfolios includes: aPortfolioEntry.
	isInHierarchy _ self isInHierarchy: aPortfolioEntry.
	
	^ ( isInPortfolio or: isInHierarchy )! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/7/2020 00:34:30'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 00:34:56'!
test15DetectandoCiclosSimpleEntrePortfolioYAccount

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioChild1 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 00:35:05'!
test16DetectandoCiclosDificiles

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3.
	
	self should: [ portfolioChild3 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio cicloNoSePuedeErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		! !

!methodRemoval: PortfolioTest #test15DetectandoCiclosDificiles stamp: 'ja 11/7/2020 00:35:05'!
test15DetectandoCiclosDificiles

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3.
	
	self should: [ portfolioChild3 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio cicloNoSePuedeErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 00:35:15' prior: 50951496!
test15DetectandoCiclosSimpleEntrePortfolioYAccount

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioChild1 register: account1 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !

!testRun: #PortfolioTest #test15DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/7/2020 00:35:22'!
FAILURE!

!testRun: #PortfolioTest #test15DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/7/2020 00:35:22'!
FAILURE!

self deepSearch: aPortfolioEntry!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 00:47:13' prior: 50951479!
deepSearch: aPortfolioEntry 

	| isInPortfolio isInHierarchy |
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue: [	 
				^(self accounts includes: aPortfolioEntry) ifFalse: [
					^self parentRoot portfolios includes: aPortfolioEntry.							] ].
	
	isInPortfolio _ self portfolios includes: aPortfolioEntry.
	isInHierarchy _ self isInHierarchy: aPortfolioEntry.
	
	^ ( isInPortfolio or: isInHierarchy )! !

!testRun: #PortfolioTest #test15DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/7/2020 00:47:43'!
FAILURE!

self parentRoot !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 00:49:12' prior: 50951670!
deepSearch: aPortfolioEntry 

	| isInPortfolio isInHierarchy |
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue: [	 
				^(self accounts includes: aPortfolioEntry) ifFalse: [
					^(self parentRoot) portfolios includes: aPortfolioEntry.							] ].
	
	isInPortfolio _ self portfolios includes: aPortfolioEntry.
	isInHierarchy _ self isInHierarchy: aPortfolioEntry.
	
	^ ( isInPortfolio or: isInHierarchy )! !

!testRun: #PortfolioTest #test15DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/7/2020 00:49:17'!
FAILURE!

self parentRoot!

parent accounts .!

(self parentRoot) portfolios!

(self parentRoot) portfolios!

self.!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 00:53:31' prior: 50951691!
deepSearch: aPortfolioEntry 

	| isInPortfolio isInHierarchy |
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue: [	 
				^(self accounts includes: aPortfolioEntry) ifFalse: [
					^(self parentRoot) accounts includes: aPortfolioEntry.							] ].
	
	isInPortfolio _ self portfolios includes: aPortfolioEntry.
	isInHierarchy _ self isInHierarchy: aPortfolioEntry.
	
	^ ( isInPortfolio or: isInHierarchy )! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 00:54:59' prior: 50951714!
deepSearch: aPortfolioEntry 

	| isInPortfolio isInHierarchy |
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue: [	 
				^(self accounts includes: aPortfolioEntry) ifFalse: [
					^(self parentRoot) searchAccountInHierarchy: aPortfolioEntry.							] ].
	
	isInPortfolio _ self portfolios includes: aPortfolioEntry.
	isInHierarchy _ self isInHierarchy: aPortfolioEntry.
	
	^ ( isInPortfolio or: isInHierarchy )! !

!testRun: #PortfolioTest #test15DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/7/2020 00:55:09'!
FAILURE!

!testRun: #PortfolioTest #test15DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/7/2020 00:55:26'!
ERROR!

!testRun: #PortfolioTest #test15DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/7/2020 00:55:26'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 00:55:34'!
searchAccountInHierarchy: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 00:58:55' prior: 50951757!
searchAccountInHierarchy: aReceptiveAccount 
	
	| isInAccounts isInPortfolio |
	
	(accounts includes: aReceptiveAccount) ifFalse: [
	isInPortfolio _ portfolios do: [:x | x searchAccountInHierarchy: aReceptiveAccount ]].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 01:00:01' prior: 50951763!
searchAccountInHierarchy: aReceptiveAccount 
	
	| isInPortfolio |
	
	^ (accounts includes: aReceptiveAccount) ifFalse: [
			portfolios do: [:x | x searchAccountInHierarchy: aReceptiveAccount ]].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 01:00:11' prior: 50951773!
searchAccountInHierarchy: aReceptiveAccount
	
	^ (accounts includes: aReceptiveAccount) ifFalse: [
			portfolios do: [:x | x searchAccountInHierarchy: aReceptiveAccount ]].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 01:04:39' prior: 50951783!
searchAccountInHierarchy: aReceptiveAccount
	
	^ (accounts includes: aReceptiveAccount) ifFalse: [
			(portfolios isEmpty) ifTrue: [^self].
			 portfolios do: [:x | x searchAccountInHierarchy: aReceptiveAccount ]].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 01:05:03' prior: 50951792!
searchAccountInHierarchy: aReceptiveAccount
	
	^ (accounts includes: aReceptiveAccount) ifFalse: [
			(portfolios isEmpty) ifTrue: [^false].
			 portfolios do: [:x | x searchAccountInHierarchy: aReceptiveAccount ]].
	! !

!testRun: #PortfolioTest #test15DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/7/2020 01:05:05'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/7/2020 01:05:13'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 01:07:56' prior: 50951730!
deepSearch: aPortfolioEntry 

	| isInPortfolio isInHierarchy |
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue: [	 
				^(self accounts includes: aPortfolioEntry) ifFalse: [
					^self  searchAccountInHierarchy: aPortfolioEntry.							] ].
	
	isInPortfolio _ self portfolios includes: aPortfolioEntry.
	isInHierarchy _ self isInHierarchy: aPortfolioEntry.
	
	^ ( isInPortfolio or: isInHierarchy )! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 01:09:19' prior: 50951802!
searchAccountInHierarchy: aReceptiveAccount
	
	| parentRoot |
	
	^ (accounts includes: aReceptiveAccount) ifFalse: [
			parentRoot _ self parentRoot.
			( parentRoot portfolios isEmpty) ifTrue: [^false].
			 parentRoot portfolios do: [:x | x searchAccountInHierarchy: aReceptiveAccount ]].
	! !

self parentRoot!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 01:11:23' prior: 50951836!
searchAccountInHierarchy: aReceptiveAccount
	
	| parentRoot |
	
	^ (accounts includes: aReceptiveAccount) ifFalse: [
			parentRoot _ (self parentRoot).
			( parentRoot portfolios isEmpty) ifTrue: [^false].
			 parentRoot portfolios do: [:x | x searchAccountInHierarchy: aReceptiveAccount ]].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 01:13:25' prior: 50950858!
parentRoot

	(self = parent) ifTrue: [ ^ self ].
	
	^ parent parentRoot.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 01:16:45' prior: 50951849!
searchAccountInHierarchy: aReceptiveAccount
	
	
	
	^ (accounts includes: aReceptiveAccount) ifFalse: [
			
			(self portfolios isEmpty) ifTrue: [^false].
			 self portfolios do: [:x | x searchAccountInHierarchy: aReceptiveAccount ]].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 01:17:13' prior: 50951820!
deepSearch: aPortfolioEntry 

	| isInPortfolio isInHierarchy |
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue: [	 
				^(self accounts includes: aPortfolioEntry) ifFalse: [
					^(self parentRoot) searchAccountInHierarchy: aPortfolioEntry.							] ].
	
	isInPortfolio _ self portfolios includes: aPortfolioEntry.
	isInHierarchy _ self isInHierarchy: aPortfolioEntry.
	
	^ ( isInPortfolio or: isInHierarchy )! !

!testRun: #PortfolioTest #test15DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/7/2020 01:17:38'!
FAILURE!

!testRun: #PortfolioTest #test15DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/7/2020 01:17:38'!
FAILURE!

accounts includes: aReceptiveAccount!

!testRun: #PortfolioTest #test15DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/7/2020 01:19:31'!
FAILURE!

!testRun: #PortfolioTest #test15DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/7/2020 01:19:45'!
FAILURE!

!testRun: #PortfolioTest #test15DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/7/2020 01:19:45'!
FAILURE!

!testRun: #PortfolioTest #test15DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/7/2020 01:20:25'!
FAILURE!

!testRun: #PortfolioTest #test15DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/7/2020 01:20:25'!
FAILURE!

self deepSearch: aPortfolioEntry!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 01:21:51' prior: 50951879!
deepSearch: aPortfolioEntry 

	| isInPortfolio isInHierarchy |
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue: [	 
				^(self accounts includes: aPortfolioEntry) ifFalse: [
					^((self parentRoot) searchAccountInHierarchy: aPortfolioEntry)							] ].
	
	isInPortfolio _ self portfolios includes: aPortfolioEntry.
	isInHierarchy _ self isInHierarchy: aPortfolioEntry.
	
	^ ( isInPortfolio or: isInHierarchy )! !

((self parentRoot) searchAccountInHierarchy: aPortfolioEntry)				!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 01:23:05' prior: 50951924!
deepSearch: aPortfolioEntry 

	| isInPortfolio isInHierarchy  xxx |
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue: [	 
				^(self accounts includes: aPortfolioEntry) ifFalse: [
					^((self parentRoot) searchAccountInHierarchy: aPortfolioEntry)							] ].
	
	isInPortfolio _ self portfolios includes: aPortfolioEntry.
	isInHierarchy _ self isInHierarchy: aPortfolioEntry.
	
	^ ( isInPortfolio or: isInHierarchy )! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 01:23:24' prior: 50951943!
deepSearch: aPortfolioEntry 

	| isInPortfolio isInHierarchy  xxx |
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue: [	 
				^(self accounts includes: aPortfolioEntry) ifFalse: [
					xxx _ ((self parentRoot) searchAccountInHierarchy: aPortfolioEntry)					. ^xxx		] ].
	
	isInPortfolio _ self portfolios includes: aPortfolioEntry.
	isInHierarchy _ self isInHierarchy: aPortfolioEntry.
	
	^ ( isInPortfolio or: isInHierarchy )! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 01:24:26' prior: 50951868!
searchAccountInHierarchy: aReceptiveAccount
	
	
	
	(accounts includes: aReceptiveAccount) ifTrue: [^ true ] 
		ifFalse: [		(self portfolios isEmpty) ifTrue: [^false].
			 self portfolios do: [:x | x searchAccountInHierarchy: aReceptiveAccount ]].
	! !

!testRun: #PortfolioTest #test15DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/7/2020 01:24:40'!
PASSED!

!testRun: #PortfolioTest #test15DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/7/2020 01:24:42'!
PASSED!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/7/2020 01:24:44'!
PASSED!

!testRun: #PortfolioTest #test15DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/7/2020 01:24:46'!
PASSED!

!testRun: #PortfolioTest #test16DetectandoCiclosDificiles stamp: 'ja 11/7/2020 01:25:32'!
ERROR!

!testRun: #PortfolioTest #test16DetectandoCiclosDificiles stamp: 'ja 11/7/2020 01:25:32'!
ERROR!

!testRun: #PortfolioTest #test16DetectandoCiclosDificiles stamp: 'ja 11/7/2020 01:25:51'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 01:26:57' prior: 50951960!
deepSearch: aPortfolioEntry 

	| isInPortfolio isInHierarchy  xxx |
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue: [	 
				(self accounts includes: aPortfolioEntry) ifTrue: [^true ]
				 ifFalse: [ ^ ((self parentRoot) searchAccountInHierarchy: aPortfolioEntry) ] ].
	
	isInPortfolio _ self portfolios includes: aPortfolioEntry.
	isInHierarchy _ self isInHierarchy: aPortfolioEntry.
	
	^ ( isInPortfolio or: isInHierarchy )! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 01:27:04' prior: 50952012!
deepSearch: aPortfolioEntry 

	| isInPortfolio isInHierarchy |
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue: [	 
				(self accounts includes: aPortfolioEntry) ifTrue: [^true ]
				 ifFalse: [ ^ ((self parentRoot) searchAccountInHierarchy: aPortfolioEntry) ] ].
	
	isInPortfolio _ self portfolios includes: aPortfolioEntry.
	isInHierarchy _ self isInHierarchy: aPortfolioEntry.
	
	^ ( isInPortfolio or: isInHierarchy )! !

!testRun: #PortfolioTest #test15DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/7/2020 01:27:17'!
PASSED!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/7/2020 01:27:18'!
PASSED!

!testRun: #PortfolioTest #test13NoSePuedeAgregarDosVecesElMismoElem stamp: 'ja 11/7/2020 01:27:20'!
PASSED!

!testRun: #PortfolioTest #test12NoTePodesAgregarAVosMismo stamp: 'ja 11/7/2020 01:27:21'!
FAILURE!

!testRun: #PortfolioTest #test12NoTePodesAgregarAVosMismo stamp: 'ja 11/7/2020 01:27:21'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 01:27:43' prior: 50950619!
test12NoTePodesAgregarAVosMismo

	| portfolioRoot |
	
	portfolioRoot _ Portfolio new.
	
	self should: [ portfolioRoot register: portfolioRoot . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
		
	self assert: 0 equals: portfolioRoot amountOfAccounts.
			
	self assert: 0 equals: portfolioRoot balance.! !

!testRun: #PortfolioTest #test12NoTePodesAgregarAVosMismo stamp: 'ja 11/7/2020 01:27:45'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'ja 11/7/2020 01:27:47'!
ERROR!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'ja 11/7/2020 01:27:47'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/7/2020 01:28:01'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/7/2020 01:28:01'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'ja 11/7/2020 01:28:01'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'ja 11/7/2020 01:28:01'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'ja 11/7/2020 01:28:01'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'ja 11/7/2020 01:28:01'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/7/2020 01:28:01'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/7/2020 01:28:01'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'ja 11/7/2020 01:28:01'!
PASSED!

!testRun: #PortfolioTest #test10casoPadresDistintos stamp: 'ja 11/7/2020 01:28:01'!
ERROR!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'ja 11/7/2020 01:28:01'!
ERROR!

!testRun: #PortfolioTest #test12NoTePodesAgregarAVosMismo stamp: 'ja 11/7/2020 01:28:01'!
PASSED!

!testRun: #PortfolioTest #test13NoSePuedeAgregarDosVecesElMismoElem stamp: 'ja 11/7/2020 01:28:01'!
PASSED!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/7/2020 01:28:01'!
PASSED!

!testRun: #PortfolioTest #test15DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/7/2020 01:28:01'!
PASSED!

!testRun: #PortfolioTest #test16DetectandoCiclosDificiles stamp: 'ja 11/7/2020 01:28:01'!
ERROR!

!testRun: #PortfolioTest #test10casoPadresDistintos stamp: 'ja 11/7/2020 01:28:49'!
ERROR!

!testRun: #PortfolioTest #test10casoPadresDistintos stamp: 'ja 11/7/2020 01:28:49'!
ERROR!

!testRun: #PortfolioTest #test10casoPadresDistintos stamp: 'ja 11/7/2020 01:30:23'!
ERROR!

!testRun: #PortfolioTest #test10casoPadresDistintos stamp: 'ja 11/7/2020 01:30:49'!
ERROR!

!testRun: #PortfolioTest #test10casoPadresDistintos stamp: 'ja 11/7/2020 01:30:49'!
ERROR!

!testRun: #PortfolioTest #test15DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/7/2020 01:50:03'!
PASSED!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/7/2020 01:50:05'!
PASSED!

!testRun: #PortfolioTest #test13NoSePuedeAgregarDosVecesElMismoElem stamp: 'ja 11/7/2020 01:50:06'!
PASSED!

!testRun: #PortfolioTest #test12NoTePodesAgregarAVosMismo stamp: 'ja 11/7/2020 01:50:07'!
PASSED!

!testRun: #PortfolioTest #test10casoPadresDistintos stamp: 'ja 11/7/2020 01:50:25'!
ERROR!

!testRun: #PortfolioTest #test10casoPadresDistintos stamp: 'ja 11/7/2020 01:50:25'!
ERROR!

----QUIT----(7 November 2020 01:55:07) CuisUniversity-4365.image priorSource: 19683254!

----STARTUP---- (7 November 2020 08:51:02) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4365.image!

!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 08:52:24' prior: 50949984 overrides: 16896425!
initialize

	accounts _ OrderedCollection new.
	
	portfolios _ OrderedCollection new.
	
	parent _ OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 08:54:22'!
addParent: aPortfolio 
	
	parent _ aPortfolio .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 08:54:22' prior: 50951432!
register: aPortfolioEntry 
	
	(self deepSearch: aPortfolioEntry) ifTrue: [ self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ].
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue:[ accounts add: aPortfolioEntry ].
	
	(aPortfolioEntry isKindOf: Portfolio ) ifTrue:[ 	
		(self = aPortfolioEntry) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
		aPortfolioEntry addParent: self. 
		portfolios add: aPortfolioEntry ].

	
	! !

!methodRemoval: Portfolio #parentIs: stamp: 'ja 11/7/2020 08:54:22'!
parentIs: aPortfolio 
	
	parent _ aPortfolio .!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 09:10:35' prior: 50952029!
deepSearch: aPortfolioEntry 
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue: [	 
				(self accounts includes: aPortfolioEntry) ifTrue: [^true ]
				 ifFalse: [ ^ ((self parentRoot) searchAccountInHierarchy: aPortfolioEntry) ] ].
	
	(aPortfolioEntry isKindOf: Portfolio) ifTrue:[^ self isInHierarchy: aPortfolioEntry].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 09:11:13' prior: 50952218!
deepSearch: aPortfolioEntry 
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue: [	 
				(self accounts includes: aPortfolioEntry) ifTrue: [^true ]
				 ifFalse: [ ^ ((self parentRoot) searchAccountInHierarchy: aPortfolioEntry) ] ].
	
	(aPortfolioEntry isKindOf: Portfolio) ifTrue:[^ self portfolioIsInHierarchy: aPortfolioEntry].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 09:11:43' prior: 50952232!
deepSearch: aPortfolioEntry 
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue: [	 
				(self accounts includes: aPortfolioEntry) ifTrue: [^true ]
				 ifFalse: [ ^ ((self parentRoot) accountIsInHierarchy: aPortfolioEntry) ] ].
	
	(aPortfolioEntry isKindOf: Portfolio) ifTrue:[^ self portfolioIsInHierarchy: aPortfolioEntry].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 09:12:15' prior: 50952246!
deepSearch: aPortfolioEntry 
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue: [	 ^ (self  accountIsInHierarchy: aPortfolioEntry) ].
	
	(aPortfolioEntry isKindOf: Portfolio) ifTrue:[^ self portfolioIsInHierarchy: aPortfolioEntry].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 09:12:58'!
portfolioIsInHierarchy: aPortofolioEntry 
	
	| parentRootSelf  parentRootOther |
	
	parentRootSelf _ self parentRoot.
	
	parentRootOther _ aPortofolioEntry parentRoot.
	
	^ parentRootSelf matchElementsOf: parentRootOther .! !

!methodRemoval: Portfolio #isInHierarchy: stamp: 'ja 11/7/2020 09:12:58'!
isInHierarchy: aPortofolioEntry 
	
	| parentRootSelf  parentRootOther |
	
	parentRootSelf _ self parentRoot.
	
	parentRootOther _ aPortofolioEntry parentRoot.
	
	^ parentRootSelf matchElementsOf: parentRootOther .!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 09:13:32'!
accountIsInHierarchy: aReceptiveAccount
	
	
	
	(accounts includes: aReceptiveAccount) ifTrue: [^ true ] 
		ifFalse: [		(self portfolios isEmpty) ifTrue: [^false].
			 self portfolios do: [:x | x searchAccountInHierarchy: aReceptiveAccount ]].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 09:13:32' prior: 50951977!
searchAccountInHierarchy: aReceptiveAccount
	
	
	
	(accounts includes: aReceptiveAccount) ifTrue: [^ true ] 
		ifFalse: [		(self portfolios isEmpty) ifTrue: [^false].
			 self portfolios do: [:x | x accountIsInHierarchy: aReceptiveAccount ]].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 09:13:32' prior: 50952289!
accountIsInHierarchy: aReceptiveAccount
	
	
	
	(accounts includes: aReceptiveAccount) ifTrue: [^ true ] 
		ifFalse: [		(self portfolios isEmpty) ifTrue: [^false].
			 self portfolios do: [:x | x accountIsInHierarchy: aReceptiveAccount ]].
	! !

!methodRemoval: Portfolio #searchAccountInHierarchy: stamp: 'ja 11/7/2020 09:13:32'!
searchAccountInHierarchy: aReceptiveAccount
	
	
	
	(accounts includes: aReceptiveAccount) ifTrue: [^ true ] 
		ifFalse: [		(self portfolios isEmpty) ifTrue: [^false].
			 self portfolios do: [:x | x accountIsInHierarchy: aReceptiveAccount ]].
	!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 09:13:42' prior: 50952260!
deepSearch: aPortfolioEntry 
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue: [	 ^ (self accountIsInHierarchy: aPortfolioEntry) ].
	
	(aPortfolioEntry isKindOf: Portfolio) ifTrue:[^ self portfolioIsInHierarchy: aPortfolioEntry].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 09:17:02' prior: 50952191!
addParent: aPortfolio 
	
	parent add: aPortfolio .! !

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'ja 11/7/2020 09:17:39'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 09:17:39' prior: 50951862!
parentRoot

	(self = parents) ifTrue: [ ^ self ].
	
	^ parents parentRoot.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 09:17:39' prior: 50952184 overrides: 16896425!
initialize

	accounts _ OrderedCollection new.
	
	portfolios _ OrderedCollection new.
	
	parents _ OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 09:17:39' prior: 50952343!
addParent: aPortfolio 
	
	parents add: aPortfolio .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 09:19:12' prior: 50952356!
parentRoot

	"2(self = parents) ifTrue: [ ^ self ].
	
	^ parents parentRoot."! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 09:24:40' prior: 50952311!
accountIsInHierarchy: aReceptiveAccount
	
	
	
	(accounts includes: aReceptiveAccount) ifTrue: [^ true ] 
		ifFalse: [	 (self portfolios isEmpty) ifTrue:[ ^ false ] 
			ifFalse:[ self portfolios do: [:x | x accountIsInHierarchy: aReceptiveAccount ]]].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 09:24:47' prior: 50952380!
accountIsInHierarchy: aReceptiveAccount
	
	
	
	(accounts includes: aReceptiveAccount) ifTrue: [^ true ] 
		ifFalse: [ (self portfolios isEmpty) ifTrue:[ ^ false ] 
			ifFalse:[ self portfolios do: [:x | x accountIsInHierarchy: aReceptiveAccount ]]].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 09:32:25' prior: 50952391!
accountIsInHierarchy: aReceptiveAccount
	
	"esta en la jerarquia de abajo"	
	(accounts includes: aReceptiveAccount) ifTrue: [^ true ] 
		ifFalse: [ (self portfolios isEmpty) ifTrue:[ ^ false ] 
			ifFalse:[ self portfolios do: [:x | x accountIsInHierarchy: aReceptiveAccount ]]].
		
	"esta en la jerarquia de arriba"
	self parents 
	! !

!methodRemoval: Portfolio #parentRoot stamp: 'ja 11/7/2020 09:32:30'!
parentRoot

	"2(self = parents) ifTrue: [ ^ self ].
	
	^ parents parentRoot."!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 09:34:42' prior: 50952402!
accountIsInHierarchy: aReceptiveAccount
	
	"esta en la jerarquia de abajo"	
	(accounts includes: aReceptiveAccount) ifTrue: [^ true ] 
		ifFalse: [ (self portfolios isEmpty) ifTrue:[ ^ false ] 
			ifFalse:[ self portfolios do: [:x | x accountIsInHierarchy: aReceptiveAccount ]]].
		
	"esta en la jerarquia de arriba"
	self parents do:[:x | x accountIsInHierarchy: aReceptiveAccount ]. 
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 10:06:29' prior: 50952421!
accountIsInHierarchy: aReceptiveAccount
	
	
	"esta en la jerarquia de abajo"	
	(accounts includes: aReceptiveAccount) ifTrue: [^ true ] 
		ifFalse: [ (self portfolios isEmpty) ifTrue:[ ^ false ] 
			ifFalse:[ self portfolios do: [:x | x accountIsInHierarchy: aReceptiveAccount ]]].
		
	"esta en la jerarquia de arriba"
	self parents do:[:x | x accountIsInHierarchy: aReceptiveAccount of: self ]. 
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 10:07:43' prior: 50952437!
accountIsInHierarchy: aReceptiveAccount
	
	
	"esta en la jerarquia de abajo"	
	(accounts includes: aReceptiveAccount) ifTrue: [^ true ] 
		ifFalse: [ (self portfolios isEmpty) ifTrue:[ ^ false ] 
			ifFalse:[ self portfolios do: [:x | x accountIsInHierarchy: aReceptiveAccount ]]].
		
	"esta en la jerarquia de arriba"
	self parents do:[:x | x accountIsInHierarchy: aReceptiveAccount of: self ]. 
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 10:08:38' prior: 50952453!
accountIsInHierarchy: aReceptiveAccount
	
	| down up |
	"esta en la jerarquia de abajo"	
	down _ (accounts includes: aReceptiveAccount) ifTrue: [^ true ] 
		ifFalse: [ (self portfolios isEmpty) ifTrue:[ ^ false ] 
			ifFalse:[ self portfolios do: [:x | x accountIsInHierarchy: aReceptiveAccount ]]].
		
	"esta en la jerarquia de arriba"
	up _ self parents do:[:x | x accountIsInHierarchy: aReceptiveAccount of: self ]. 
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 10:09:49' prior: 50952469!
accountIsInHierarchy: aReceptiveAccount
	
	| down up |
	"esta en la jerarquia de abajo"	
	down _ (accounts includes: aReceptiveAccount) ifTrue: [^ true ] 
		ifFalse: [ (self portfolios isEmpty) ifTrue:[ ^ false ] 
			ifFalse:[ self portfolios do: [:x | x accountIsInHierarchyDown: aReceptiveAccount ]]].
		
	"esta en la jerarquia de arriba"
	up _ self parents do:[:x | x accountIsInHierarchy: aReceptiveAccount of: self ]. 
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 10:10:28'!
accountIsInHierarchyDown: aReceptiveAccount
	
	(accounts includes: aReceptiveAccount) ifTrue: [^ true ] 
		ifFalse: [ (self portfolios isEmpty) ifTrue:[ ^ false ] 
			ifFalse:[ self portfolios do: [:x | x accountIsInHierarchyDown: aReceptiveAccount ]]].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 10:10:52' prior: 50952486!
accountIsInHierarchy: aReceptiveAccount
	
	| down up |
	"esta en la jerarquia de abajo"	
	down _ self accountIsInHierarchyDown: aReceptiveAccount .
		
	"esta en la jerarquia de arriba"
	up _ self parents do:[:x | x accountIsInHierarchy: aReceptiveAccount of: self ]. 
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 10:11:22' prior: 50952513!
accountIsInHierarchy: aReceptiveAccount
	
	| down up |
	"esta en la jerarquia de abajo"	
	down _ self accountIsInHierarchyDown: aReceptiveAccount .
		
	"esta en la jerarquia de arriba"
	up _ self parents do:[:x | x accountIsInHierarchy: aReceptiveAccount of: self ]. 
	
	^ down or: up.
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 10:11:34' prior: 50952525!
accountIsInHierarchy: aReceptiveAccount
	
	| down up |
	"esta en la jerarquia de abajo"	
	down _ self accountIsInHierarchyDown: aReceptiveAccount .
		
	"esta en la jerarquia de arriba"
	up _ self parents do:[:x | x accountIsInHierarchyUp: aReceptiveAccount of: self ]. 
	
	^ down or: up.
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 10:12:19' prior: 50952537!
accountIsInHierarchy: aReceptiveAccount
	
	| down up |
	"esta en la jerarquia de abajo"	
	down _ self accountIsInHierarchyDown: aReceptiveAccount .
		
	"esta en la jerarquia de arriba"
	up _ self accountIsInHierarchyUp: aReceptiveAccount of: self . 
	
	^ down or: up.
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 10:23:36'!
accountIsInHierarchyUp: aReceptiveAccount of: aPortfolioSelf
	
	| portfoliosChild |
	portfoliosChild _ self parents portfolios copy.
	portfoliosChild remove: self.
	(self parents accounts includes: aReceptiveAccount) ifTrue:[^ true] 
		ifFalse: [ portfoliosChild do:[:x | x accountIsInHierarchyUp: aReceptiveAccount of: self ]].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 10:24:33' prior: 50952561!
accountIsInHierarchyUp: aReceptiveAccount of: aPortfolioSelf
	
	| portfoliosChild |
	portfoliosChild _ self parents portfolios copy.
	((portfoliosChild remove: self) isEmpty) ifTrue: [^ false].
	(self parents accounts includes: aReceptiveAccount) ifTrue:[^ true] 
		ifFalse: [ portfoliosChild do:[:x | x accountIsInHierarchyUp: aReceptiveAccount of: self ]].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 10:25:58' prior: 50952575!
accountIsInHierarchyUp: aReceptiveAccount of: aPortfolioSelf
	
	| portfoliosChild |
	
	(self parents accounts includes: aReceptiveAccount) ifTrue:[^ true] 
		ifFalse: [ portfoliosChild _ self parents portfolios copy.
			((portfoliosChild remove: self) isEmpty) ifTrue: [^ false].
			portfoliosChild do:[:x | x accountIsInHierarchyUp: aReceptiveAccount of: self ]].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 10:26:54' prior: 50952590!
accountIsInHierarchyUp: aReceptiveAccount of: aPortfolioSelf
	
	| portfoliosChild |
	
	(self parents accounts includes: aReceptiveAccount) ifTrue:[^ true] 
		ifFalse: [ portfoliosChild _ self parents portfolios copy.
			((portfoliosChild remove: aPortfolioSelf ) isEmpty) ifTrue: [^ false].
			portfoliosChild do:[:x | x accountIsInHierarchyUp: aReceptiveAccount of: self ]].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 10:28:42' prior: 50952605!
accountIsInHierarchyUp: aReceptiveAccount of: aPortfolioSelf
	
	| portfoliosChild |
	
	(self parents accounts includes: aReceptiveAccount) ifTrue:[^ true] 
		ifFalse: [ portfoliosChild _ self parents portfolios copy.
			(portfoliosChild isEmpty) ifTrue: [^ false].
			portfoliosChild do:[:x | x accountIsInHierarchyUp: aReceptiveAccount of: self ]].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 10:29:44' prior: 50952620!
accountIsInHierarchyUp: aReceptiveAccount of: aPortfolioSelf
	
	| portfoliosRoot |
	
	(self parents accounts includes: aReceptiveAccount) ifTrue:[^ true] 
		ifFalse: [ portfoliosRoot _ self parents portfolios copy.
			(portfoliosRoot isEmpty) ifTrue: [^ false].
			portfoliosRoot do:[:x | x accountIsInHierarchyUp: aReceptiveAccount of: self ]].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 10:32:20' prior: 50952634!
accountIsInHierarchyUp: aReceptiveAccount of: aPortfolioSelf
	
	| portfoliosRoot |
	
	(self parents accounts includes: aReceptiveAccount) ifTrue:[^ true] 
		ifFalse: [ portfoliosRoot _ self parents portfolios copy.
			(portfoliosRoot isEmpty) ifTrue: [^ false].
			portfoliosRoot do:[:x | x accountIsInHierarchyDown: aReceptiveAccount ]].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 10:33:50' prior: 50952648!
accountIsInHierarchyUp: aReceptiveAccount of: aPortfolioSelf
	
	| portfoliosRoot |
	
	(self parents accounts includes: aReceptiveAccount) ifTrue:[^ true] 
		ifFalse: [ portfoliosRoot _ self parents portfolios copy.
			(portfoliosRoot isEmpty) ifTrue: [^ false].
			portfoliosRoot do:[:x | (x accountIsInHierarchyDown: aReceptiveAccount) ifTrue: [^ true ] ]].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 10:35:42'!
accountIsInHierarchyUp: aReceptiveAccount

	
	| portfoliosRoot |
	
	(self parents accounts includes: aReceptiveAccount) ifTrue:[^ true] 
		ifFalse: [ portfoliosRoot _ self parents portfolios copy.
			(portfoliosRoot isEmpty) ifTrue: [^ false].
			portfoliosRoot do:[:x | (x accountIsInHierarchyDown: aReceptiveAccount) ifTrue: [^ true ] ]].! !

!methodRemoval: Portfolio #accountIsInHierarchyUp:of: stamp: 'ja 11/7/2020 10:35:49'!
accountIsInHierarchyUp: aReceptiveAccount of: aPortfolioSelf
	
	| portfoliosRoot |
	
	(self parents accounts includes: aReceptiveAccount) ifTrue:[^ true] 
		ifFalse: [ portfoliosRoot _ self parents portfolios copy.
			(portfoliosRoot isEmpty) ifTrue: [^ false].
			portfoliosRoot do:[:x | (x accountIsInHierarchyDown: aReceptiveAccount) ifTrue: [^ true ] ]].!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 10:35:59' prior: 50952550!
accountIsInHierarchy: aReceptiveAccount
	
	| down up |
	"esta en la jerarquia de abajo"	
	down _ self accountIsInHierarchyDown: aReceptiveAccount .
		
	"esta en la jerarquia de arriba"
	up _ self accountIsInHierarchyUp: aReceptiveAccount. 
	
	^ down or: up.
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 10:41:39' prior: 50952676!
accountIsInHierarchyUp: aReceptiveAccount

	
	| portfoliosRoot |
	
	(self parents accounts includes: aReceptiveAccount) ifTrue:[^ true] 
		ifFalse: [ portfoliosRoot _ self parents portfolios copy.
			(portfoliosRoot isEmpty) ifTrue: [^ false].
			portfoliosRoot do:[:x | (x accountIsInHierarchyDown: aReceptiveAccount) ifTrue: [^ true ] ]].
	! !

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'ja 11/7/2020 10:42:04'!
ERROR!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'ja 11/7/2020 10:42:04'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 10:43:05'!
parents
	
	^ parents .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 10:43:23' prior: 50952196!
register: aPortfolioEntry 
	
	"(self deepSearch: aPortfolioEntry) ifTrue: [ self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ]."
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue:[ accounts add: aPortfolioEntry ].
	
	(aPortfolioEntry isKindOf: Portfolio ) ifTrue:[ 	
		(self = aPortfolioEntry) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
		aPortfolioEntry addParent: self. 
		portfolios add: aPortfolioEntry ].

	
	! !

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/7/2020 10:43:26'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/7/2020 10:43:26'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'ja 11/7/2020 10:43:26'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'ja 11/7/2020 10:43:26'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'ja 11/7/2020 10:43:26'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'ja 11/7/2020 10:43:26'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/7/2020 10:43:26'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/7/2020 10:43:26'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'ja 11/7/2020 10:43:26'!
PASSED!

!testRun: #PortfolioTest #test10casoPadresDistintos stamp: 'ja 11/7/2020 10:43:26'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'ja 11/7/2020 10:43:26'!
PASSED!

!testRun: #PortfolioTest #test12NoTePodesAgregarAVosMismo stamp: 'ja 11/7/2020 10:43:26'!
FAILURE!

!testRun: #PortfolioTest #test13NoSePuedeAgregarDosVecesElMismoElem stamp: 'ja 11/7/2020 10:43:26'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/7/2020 10:43:26'!
FAILURE!

!testRun: #PortfolioTest #test15DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/7/2020 10:43:26'!
FAILURE!

!testRun: #PortfolioTest #test16DetectandoCiclosDificiles stamp: 'ja 11/7/2020 10:43:26'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 10:43:56' prior: 50952741!
register: aPortfolioEntry 
	
	(self deepSearch: aPortfolioEntry) ifTrue: [ self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ].
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue:[ accounts add: aPortfolioEntry ].
	
	(aPortfolioEntry isKindOf: Portfolio ) ifTrue:[ 	
		(self = aPortfolioEntry) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
		aPortfolioEntry addParent: self. 
		portfolios add: aPortfolioEntry ].

	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 10:45:27' prior: 50952270!
portfolioIsInHierarchy: aPortofolioEntry 
	
	
	
	( self = aPortofolioEntry ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].! !

!testRun: #PortfolioTest #test12NoTePodesAgregarAVosMismo stamp: 'ja 11/7/2020 10:45:37'!
FAILURE!

!testRun: #PortfolioTest #test12NoTePodesAgregarAVosMismo stamp: 'ja 11/7/2020 10:45:37'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 10:45:50' prior: 50952063!
test12NoTePodesAgregarAVosMismo

	| portfolioRoot |
	
	portfolioRoot _ Portfolio new.
	
	self should: [ portfolioRoot register: portfolioRoot . self fail]  
		raise: Error
		withMessageText: Portfolio noTePodesAgregarAVosMismoErrorDescription .
		
	self assert: 0 equals: portfolioRoot amountOfAccounts.
			
	self assert: 0 equals: portfolioRoot balance.! !

!testRun: #PortfolioTest #test12NoTePodesAgregarAVosMismo stamp: 'ja 11/7/2020 10:45:52'!
PASSED!

!testRun: #PortfolioTest #test13NoSePuedeAgregarDosVecesElMismoElem stamp: 'ja 11/7/2020 10:45:57'!
ERROR!

!testRun: #PortfolioTest #test13NoSePuedeAgregarDosVecesElMismoElem stamp: 'ja 11/7/2020 10:45:57'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 10:48:54' prior: 50952716!
accountIsInHierarchyUp: aReceptiveAccount

	
	| portfoliosRoot |
	
	(self parents do:[:y | (y accounts includes: aReceptiveAccount) ifTrue:[^ true]] ) 
		ifFalse: [ portfoliosRoot _ self parents portfolios copy.
			(portfoliosRoot isEmpty) ifTrue: [^ false].
			portfoliosRoot do:[:x | (x accountIsInHierarchyDown: aReceptiveAccount) ifTrue: [^ true ] ]].
	! !

----QUIT----(7 November 2020 10:49:12) CuisUniversity-4365.image priorSource: 19856805!

----STARTUP---- (7 November 2020 19:55:03) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4365.image!

!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:02:11' prior: 50952815!
register: aPortfolioEntry 
	
	"(self deepSearch: aPortfolioEntry) ifTrue: [ self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ]."
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue:[ accounts add: aPortfolioEntry ].
	
	(aPortfolioEntry isKindOf: Portfolio ) ifTrue:[ 	
		(self = aPortfolioEntry) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
		aPortfolioEntry addParent: self. 
		portfolios add: aPortfolioEntry ].

	
	! !

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/7/2020 20:02:16'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/7/2020 20:02:16'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'ja 11/7/2020 20:02:16'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'ja 11/7/2020 20:02:16'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'ja 11/7/2020 20:02:16'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'ja 11/7/2020 20:02:16'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/7/2020 20:02:16'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/7/2020 20:02:16'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'ja 11/7/2020 20:02:16'!
PASSED!

!testRun: #PortfolioTest #test10casoPadresDistintos stamp: 'ja 11/7/2020 20:02:16'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'ja 11/7/2020 20:02:16'!
PASSED!

!testRun: #PortfolioTest #test12NoTePodesAgregarAVosMismo stamp: 'ja 11/7/2020 20:02:16'!
PASSED!

!testRun: #PortfolioTest #test13NoSePuedeAgregarDosVecesElMismoElem stamp: 'ja 11/7/2020 20:02:16'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/7/2020 20:02:16'!
FAILURE!

!testRun: #PortfolioTest #test15DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/7/2020 20:02:16'!
FAILURE!

!testRun: #PortfolioTest #test16DetectandoCiclosDificiles stamp: 'ja 11/7/2020 20:02:16'!
FAILURE!

Object subclass: #Investments
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Investments category: #'Portfolio-Ejercicio' stamp: 'ja 11/7/2020 20:09:37'!
Object subclass: #Investments
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #FinancialInvestments
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #FinancialInvestments category: #'Portfolio-Ejercicio' stamp: 'ja 11/7/2020 20:09:55'!
Object subclass: #FinancialInvestments
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Investments stamp: 'ja 11/7/2020 20:10:05'!
Object subclass: #Investments
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialInvestments subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'ja 11/7/2020 20:10:18'!
FinancialInvestments subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialInvestments subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: #'Portfolio-Ejercicio' stamp: 'ja 11/7/2020 20:10:24'!
FinancialInvestments subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRenamed: #FinancialInvestments as: #FinancialInvestment stamp: 'ja 11/7/2020 20:10:40'!
Smalltalk renameClassNamed: #FinancialInvestments as: #FinancialInvestment!
!FinancialInvestment methodsFor: 'no messages' stamp: 'ja 11/7/2020 20:11:17'!
balance
	
	self subclassResponsibility ! !
!FinancialInvestment methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:11:31'!
register
	
	self subclassResponsibility ! !
!FinancialInvestment methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:11:52'!
hasRegistered: s
	
	self subclassResponsibility ! !
!FinancialInvestment methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:12:15' prior: 50953040!
hasRegistered: aFinancialInvestment
	
	self subclassResponsibility ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:16:09' prior: 50952893!
register: aFinancialInvestment 
	
	"(self deepSearch: aPortfolioEntry) ifTrue: [ self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ]."
	
	(aFinancialInvestment isKindOf: ReceptiveAccount) ifTrue:[ accounts add: aFinancialInvestment ].
	
	(aFinancialInvestment isKindOf: Portfolio ) ifTrue:[ 	
		(self = aFinancialInvestment) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
		aFinancialInvestment addParent: self. 
		portfolios add: aFinancialInvestment ].

	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:16:44' prior: 50953051!
register: aFinancialInvestment 
	
	"(self deepSearch: aPortfolioEntry) ifTrue: [ self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ]."
	
	"(aFinancialInvestment isKindOf: ReceptiveAccount) ifTrue:[ accounts add: aFinancialInvestment ].
	
	(aFinancialInvestment isKindOf: Portfolio ) ifTrue:[ 	
		(self = aFinancialInvestment) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
		aFinancialInvestment addParent: self. 
		portfolios add: aFinancialInvestment ]."
	
	aFinancialInvestment registerInPortfolio: self.

	
	! !
!FinancialInvestment methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:17:21'!
registerInPortfolio: aPortfolio

	self subclassResponsibility .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:17:32' overrides: 50953092!
registerInPortfolio: aPortfolio! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'ja 11/7/2020 20:17:39' overrides: 50953092!
registerInPortfolio: aPortfolio! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:18:36' prior: 50953071!
register: aFinancialInvestment 
	

	"(aFinancialInvestment isKindOf: ReceptiveAccount) ifTrue:[ accounts add: aFinancialInvestment ].
	
	(aFinancialInvestment isKindOf: Portfolio ) ifTrue:[ 	
		(self = aFinancialInvestment) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
		aFinancialInvestment addParent: self. 
		portfolios add: aFinancialInvestment ]."
	
	"(self deepSearch: aPortfolioEntry) ifTrue: [ self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ]."
	
	aFinancialInvestment registerInPortfolio: self.

	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:18:42' prior: 50953107!
register: aFinancialInvestment 
	

	"(aFinancialInvestment isKindOf: ReceptiveAccount) ifTrue:[ accounts add: aFinancialInvestment ].
	
	(aFinancialInvestment isKindOf: Portfolio ) ifTrue:[ 	
		(self = aFinancialInvestment) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
		aFinancialInvestment addParent: self. 
		portfolios add: aFinancialInvestment ]."
	
	
	"(self deepSearch: aPortfolioEntry) ifTrue: [ self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ]."
	
	aFinancialInvestment registerInPortfolio: self.

	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:24:53' prior: 50953098 overrides: 50953092!
registerInPortfolio: aPortfolio

	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:25:13' prior: 50952362 overrides: 16896425!
initialize

	accounts _ OrderedCollection new.
	
	portfolios _ OrderedCollection new.
	
	parents _ Dictionary new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:26:16' prior: 50953150 overrides: 50953092!
registerInPortfolio: aPortfolio

	parents add: self -> aPortfolio .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:27:18' prior: 50953163 overrides: 50953092!
registerInPortfolio: aPortfolio

	parents add: aPortfolio -> self .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:27:44' prior: 50953169 overrides: 50953092!
registerInPortfolio: aPortfolio

	parents add: aPortfolio -> self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:28:01' prior: 50953175 overrides: 50953092!
registerInPortfolio: aPortfolio

	parents add: aPortfolio -> self.
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:30:12' prior: 50953181 overrides: 50953092!
registerInPortfolio: aPortfolio
	
	(self = aPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	
	parents add: aPortfolio -> self.
		
	aPortfolio portfolios add: self. ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:30:49' prior: 50953128!
register: aFinancialInvestment 
	

	"(aFinancialInvestment isKindOf: ReceptiveAccount) ifTrue:[ accounts add: aFinancialInvestment ]."
	
	"(self deepSearch: aPortfolioEntry) ifTrue: [ self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ]."
	
	aFinancialInvestment registerInPortfolio: self.

	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:32:26' prior: 50953197!
register: aFinancialInvestment 
	
	"(self deepSearch: aPortfolioEntry) ifTrue: [ self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ]."
	
	aFinancialInvestment registerInPortfolio: self.

	
	! !
!FinancialInvestment methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:33:48'!
register: zzz
	
	self subclassResponsibility ! !

!methodRemoval: FinancialInvestment #register stamp: 'ja 11/7/2020 20:33:55'!
register
	
	self subclassResponsibility !
!FinancialInvestment methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:34:10' prior: 50953220!
register: aFinancialObjectToRegister
	
	self subclassResponsibility ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'ja 11/7/2020 20:35:20' prior: 50953103 overrides: 50953092!
registerInPortfolio: aPortfolio

	aPortfolio registerAccount: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:35:58'!
registerAccount: aReceptiveAccount
	
	accounts add: aReceptiveAccount ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:37:43'!
registerPortfolio: aPortfolio
	
	parents add: self -> aPortfolio .
		
	self portfolios add: aPortfolio . ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:38:06' prior: 50953187 overrides: 50953092!
registerInPortfolio: aPortfolio
	
	(self = aPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	
	parents add: aPortfolio -> self.
		
	aPortfolio registerPortfolio: self. ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:38:11' prior: 50953252 overrides: 50953092!
registerInPortfolio: aPortfolio
	
	(self = aPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
		
	aPortfolio registerPortfolio: self. ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:38:55' prior: 50953245!
registerPortfolio: aPortfolio
	
	parents add: self -> aPortfolio .
		
	portfolios add: aPortfolio . ! !

FinancialInvestment subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'ja 11/7/2020 20:44:33'!
FinancialInvestment subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Portfolio class
	instanceVariableNames: 'parents'!

!classDefinition: 'Portfolio class' category: #'Portfolio-Ejercicio' stamp: 'ja 11/7/2020 20:44:41'!
Portfolio class
	instanceVariableNames: 'parents'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:44:59' prior: 50953155 overrides: 16896425!
initialize

	accounts _ OrderedCollection new.
	
	portfolios _ OrderedCollection new.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:46:06' prior: 50953299 overrides: 16896425!
initialize

	accounts _ OrderedCollection new.
	
	portfolios _ OrderedCollection new.
	 ! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:46:36' overrides: 16883149!
initialize

	parents _ Dictionary new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:47:38' prior: 50953272!
registerPortfolio: aPortfolio
	
	self class parents add: self -> aPortfolio .
		
	portfolios add: aPortfolio . ! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:48:02'!
parents

	^ parents! !

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/7/2020 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/7/2020 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'ja 11/7/2020 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'ja 11/7/2020 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'ja 11/7/2020 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'ja 11/7/2020 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/7/2020 20:48:30'!
ERROR!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/7/2020 20:48:30'!
ERROR!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'ja 11/7/2020 20:48:30'!
ERROR!

!testRun: #PortfolioTest #test10casoPadresDistintos stamp: 'ja 11/7/2020 20:48:30'!
ERROR!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'ja 11/7/2020 20:48:30'!
ERROR!

!testRun: #PortfolioTest #test12NoTePodesAgregarAVosMismo stamp: 'ja 11/7/2020 20:48:30'!
PASSED!

!testRun: #PortfolioTest #test13NoSePuedeAgregarDosVecesElMismoElem stamp: 'ja 11/7/2020 20:48:30'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/7/2020 20:48:30'!
ERROR!

!testRun: #PortfolioTest #test15DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/7/2020 20:48:30'!
ERROR!

!testRun: #PortfolioTest #test16DetectandoCiclosDificiles stamp: 'ja 11/7/2020 20:48:30'!
ERROR!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/7/2020 20:48:46'!
ERROR!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/7/2020 20:48:46'!
ERROR!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:50:44' prior: 50953325!
parents

	parents ifNil:[ parents _ Dictionary new].
	^ parents.! !

!methodRemoval: Portfolio #parents stamp: 'ja 11/7/2020 20:50:57'!
parents
	
	^ parents .!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/7/2020 20:51:05'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/7/2020 20:51:05'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'ja 11/7/2020 20:51:05'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'ja 11/7/2020 20:51:05'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'ja 11/7/2020 20:51:05'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'ja 11/7/2020 20:51:05'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/7/2020 20:51:05'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/7/2020 20:51:05'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'ja 11/7/2020 20:51:05'!
PASSED!

!testRun: #PortfolioTest #test10casoPadresDistintos stamp: 'ja 11/7/2020 20:51:05'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'ja 11/7/2020 20:51:05'!
PASSED!

!testRun: #PortfolioTest #test12NoTePodesAgregarAVosMismo stamp: 'ja 11/7/2020 20:51:05'!
PASSED!

!testRun: #PortfolioTest #test13NoSePuedeAgregarDosVecesElMismoElem stamp: 'ja 11/7/2020 20:51:05'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/7/2020 20:51:05'!
FAILURE!

!testRun: #PortfolioTest #test15DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/7/2020 20:51:05'!
FAILURE!

!testRun: #PortfolioTest #test16DetectandoCiclosDificiles stamp: 'ja 11/7/2020 20:51:05'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:56:15' prior: 50953210 overrides: 50953229!
register: aFinancialInvestment 
	
		(self class deepSearch: aFinancialInvestment) ifTrue: [ self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ].		
	
	
	aFinancialInvestment registerInPortfolio: self.

! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:56:46' prior: 50953455 overrides: 50953229!
register: aFinancialInvestment 
	
	
	aFinancialInvestment registerInPortfolio: self.

! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:57:39' prior: 50953263 overrides: 50953092!
registerInPortfolio: aPortfolio
	
	(self = aPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	
	(portfolios includes: aPortfolio) ifTrue:[self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ].
		
	aPortfolio registerPortfolio: self. ! !

!testRun: #PortfolioTest #test13NoSePuedeAgregarDosVecesElMismoElem stamp: 'ja 11/7/2020 20:57:58'!
FAILURE!

!testRun: #PortfolioTest #test13NoSePuedeAgregarDosVecesElMismoElem stamp: 'ja 11/7/2020 20:57:58'!
FAILURE!

!testRun: #PortfolioTest #test13NoSePuedeAgregarDosVecesElMismoElem stamp: 'ja 11/7/2020 20:58:53'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/7/2020 20:59:31' prior: 50953473 overrides: 50953092!
registerInPortfolio: aPortfolio
	
	(self = aPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	
	(aPortfolio portfolios includes: self) ifTrue:[self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ].
		
	aPortfolio registerPortfolio: self. ! !

!testRun: #PortfolioTest #test13NoSePuedeAgregarDosVecesElMismoElem stamp: 'ja 11/7/2020 20:59:59'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/7/2020 21:00:07'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/7/2020 21:00:07'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'ja 11/7/2020 21:00:07'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'ja 11/7/2020 21:00:07'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'ja 11/7/2020 21:00:07'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'ja 11/7/2020 21:00:07'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/7/2020 21:00:07'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/7/2020 21:00:07'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'ja 11/7/2020 21:00:07'!
PASSED!

!testRun: #PortfolioTest #test10casoPadresDistintos stamp: 'ja 11/7/2020 21:00:07'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'ja 11/7/2020 21:00:07'!
PASSED!

!testRun: #PortfolioTest #test12NoTePodesAgregarAVosMismo stamp: 'ja 11/7/2020 21:00:07'!
PASSED!

!testRun: #PortfolioTest #test13NoSePuedeAgregarDosVecesElMismoElem stamp: 'ja 11/7/2020 21:00:07'!
PASSED!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/7/2020 21:00:07'!
FAILURE!

!testRun: #PortfolioTest #test15DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/7/2020 21:00:07'!
FAILURE!

!testRun: #PortfolioTest #test16DetectandoCiclosDificiles stamp: 'ja 11/7/2020 21:00:07'!
FAILURE!

----SNAPSHOT----(7 November 2020 21:09:08) CuisUniversity-4365.image priorSource: 19879528!

----QUIT----(7 November 2020 22:13:42) CuisUniversity-4365.image priorSource: 19901349!

----STARTUP---- (8 November 2020 10:49:28) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4365.image!


!testRun: #PortfolioTest #test13NoSePuedeAgregarDosVecesElMismoElem stamp: 'ja 11/8/2020 10:54:12'!
PASSED!

Portfolio class
	instanceVariableNames: 'parents childrens'!

!classDefinition: 'Portfolio class' category: #'Portfolio-Ejercicio' stamp: 'ja 11/8/2020 11:26:23'!
Portfolio class
	instanceVariableNames: 'parents childrens'!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 11:26:57'!
childrens

	childrens ifNil:[ childrens _ Dictionary new].
	^ childrens .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 11:28:15' prior: 50953497 overrides: 50953092!
registerInPortfolio: aPortfolio
	
	"aPortfolio es el padre y self es lo que quiero agregar	"
	
	(self = aPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	
	(aPortfolio portfolios includes: self) ifTrue:[self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ].
		
	aPortfolio registerPortfolio: self. ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 11:29:03' prior: 50953594 overrides: 50953092!
registerInPortfolio: aPortfolio
	
	"aPortfolio es el padre y self es lo que quiero agregar	"
	
	(self = aPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	
	(aPortfolio portfolios includes: self) ifTrue:[self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ]."sacar o modificar solo check el primer nivel"
		
	aPortfolio registerPortfolio: self. ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 11:29:22' prior: 50953318!
registerPortfolio: aPortfolio
	"aPortfolio es el padre y self es lo que quiero agregar	"
	
	self class parents add: self -> aPortfolio .
		
	portfolios add: aPortfolio . ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 11:30:13' prior: 50953625!
registerPortfolio: aPortfolio
	"aPortfolio es el padre y self es lo que quiero agregar	"
	
	self class addChild: self of: aPortfolio .
		
	portfolios add: aPortfolio . ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 11:30:30' prior: 50953634!
registerPortfolio: aPortfolio
	
	
	self class addChild: self of: aPortfolio .
		
	portfolios add: aPortfolio . ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 11:31:37' prior: 50953643!
registerPortfolio: aPortfolio
	
	
	self class addChild: self of: aPortfolio .
		
	portfolios add: aPortfolio . ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 11:31:58' prior: 50953650!
registerPortfolio: aPortfolio
	
	
	self class addChild: aPortfolio of: self .
		
	portfolios add: aPortfolio . ! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 11:36:03'!
addChild: aPortfolioChild of: aPortfolioParent

	childrens at: aPortfolioChild ifAbsent: [ childrens add: aPortfolioChild -> aPortfolioParent ].! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 11:37:24' prior: 50953664!
addChild: aPortfolioChild of: aPortfolioParent
	
	childrens at: aPortfolioChild ifAbsent: [ childrens add: aPortfolioParent -> aPortfolioChild ].! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 11:37:34' prior: 50953672!
addChild: aPortfolioChild of: aPortfolioParent
	
	childrens at: aPortfolioParent ifAbsent: [ childrens add: aPortfolioParent -> aPortfolioChild ].! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 11:40:18' prior: 50953680!
addChild: aPortfolioChild of: aPortfolioParent
	
	| parentChildren |
	
	parentChildren _ OrderedCollection new.
	parentChildren _ childrens at: aPortfolioParent ifAbsent: [  parentChildren add: aPortfolioChild ].
	! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 11:42:01' prior: 50953688!
addChild: aPortfolioChild of: aPortfolioParent
	
	| parentChildren |
	
	parentChildren _ OrderedCollection new.
	parentChildren _ childrens at: aPortfolioParent ifAbsent: [  parentChildren add: aPortfolioChild.
										childrens add: aPortfolioParent -> parentChildren ].
	
	
	! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 11:46:44' prior: 50953698!
addChild: aPortfolioChild of: aPortfolioParent
	
	| parentChildren |
	
	parentChildren _ OrderedCollection new.
	parentChildren _ childrens at: aPortfolioParent ifAbsent: [  parentChildren add: aPortfolioChild.
										 ^ childrens add: aPortfolioParent -> parentChildren ].
									
	parentChildren add: aPortfolioChild .
	childrens at: aPortfolioParent put: parentChildren.
	
	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 11:47:20' prior: 50953657!
registerPortfolio: aPortfolio
	
	
	self class addChild: aPortfolio of: self .
		
	portfolios add: aPortfolio . ! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 11:49:08' prior: 50953710!
addChild: aPortfolioChild of: aPortfolioParent
	
	| parentChildren childrenParent |
	
	parentChildren _ OrderedCollection new.
	parentChildren _ childrens at: aPortfolioParent ifAbsent: [  parentChildren add: aPortfolioChild.
										 ^ childrens add: aPortfolioParent -> parentChildren ].
									
	parentChildren add: aPortfolioChild .
	childrens at: aPortfolioParent put: parentChildren.
	
	childrenParent _ OrderedCollection new.
	
	childrenParent _ parents at: aPortfolioParent ifAbsent: [  childrenParent add: aPortfolioChild.
										 ^ parents add: aPortfolioParent -> childrenParent ].
									
	childrenParent add: aPortfolioChild .
	parents at: aPortfolioParent put: childrenParent.
	
	! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 11:50:05' prior: 50953733!
addChild: aPortfolioChild of: aPortfolioParent
	
	| parentChildren childrenParent |
	
	parentChildren _ OrderedCollection new.
	parentChildren _ childrens at: aPortfolioParent ifAbsent: [  parentChildren add: aPortfolioChild.
										 ^ childrens add: aPortfolioParent -> parentChildren ].
									
	parentChildren add: aPortfolioChild .
	childrens at: aPortfolioParent put: parentChildren.
	
	childrenParent _ OrderedCollection new.
	
	childrenParent _ parents at: aPortfolioChild ifAbsent: [  childrenParent add: aPortfolioParent .
										 ^ parents add: aPortfolioChild -> childrenParent ].
									
	childrenParent add: aPortfolioParent .
	parents at: aPortfolioChild put: childrenParent.
	
	! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 11:50:54' prior: 50953759!
addChild: aPortfolioChild of: aPortfolioParent
	
	| parentChildren childParents |
	
	parentChildren _ OrderedCollection new.
	parentChildren _ childrens at: aPortfolioParent ifAbsent: [  parentChildren add: aPortfolioChild.
										 ^ childrens add: aPortfolioParent -> parentChildren ].
									
	parentChildren add: aPortfolioChild .
	childrens at: aPortfolioParent put: parentChildren.
	
	childParents _ OrderedCollection new.
	
	childParents _ parents at: aPortfolioChild ifAbsent: [  childParents add: aPortfolioParent .
										 ^ parents add: aPortfolioChild -> childParents ].
									
	childParents add: aPortfolioParent .
	parents at: aPortfolioChild put: childParents.
	
	! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 11:51:37' prior: 50953785!
addChild: aPortfolioChild of: aPortfolioParent
	
	| parentChildren childParents |
	
	parentChildren _ OrderedCollection new.
	parentChildren _ childrens at: aPortfolioParent ifAbsent: [  parentChildren add: aPortfolioChild.
										 ^ childrens add: aPortfolioParent -> parentChildren ].
									
	parentChildren add: aPortfolioChild .
	childrens at: aPortfolioParent put: parentChildren.
	
	childParents _ OrderedCollection new.
	childParents _ parents at: aPortfolioChild ifAbsent: [  childParents add: aPortfolioParent .
										 ^ parents add: aPortfolioChild -> childParents ].
									
	childParents add: aPortfolioParent .
	parents at: aPortfolioChild put: childParents.
	
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 11:53:11' prior: 50951261!
test14DetectandoCiclosSimpleEntreDosPortfolios

	| portfolioRoot1 portfolioChild1 portfolioChild2 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
				
	portfolioRoot1 register: portfolioChild1.
	portfolioChild1 register: portfolioChild2.
	
	self should: [ portfolioChild2 register: portfolioChild1 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
		
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 11:53:31' prior: 50953835!
test14DetectandoCiclosSimpleEntreDosPortfolios

	| portfolioRoot1 portfolioChild1 portfolioChild2 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
				
	portfolioRoot1 register: portfolioChild1.
	portfolioChild1 register: portfolioChild2.
	
	self should: [ portfolioChild2 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
		
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 11:53:35' prior: 50953853!
test14DetectandoCiclosSimpleEntreDosPortfolios

	| portfolioRoot1 portfolioChild1 portfolioChild2 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
				
	portfolioRoot1 register: portfolioChild1.
	portfolioChild1 register: portfolioChild2.
	
	self should: [ portfolioChild2 register: portfolioRoot1. self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
		
! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 11:54:07'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 11:54:07'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 11:54:17'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 11:54:24'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 11:54:24'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 11:54:53'!
ERROR!

!methodRemoval: Portfolio class #childrens stamp: 'ja 11/8/2020 11:55:43'!
childrens

	childrens ifNil:[ childrens _ Dictionary new].
	^ childrens .!

!methodRemoval: Portfolio class #parents stamp: 'ja 11/8/2020 11:55:47'!
parents

	parents ifNil:[ parents _ Dictionary new].
	^ parents.!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 11:56:12' overrides: 16783533!
new 

	childrens _ Dictionary new.
	
	parents _ Dictionary new.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 11:56:26' prior: 50953920 overrides: 16783533!
new 

	childrens _ Dictionary new.
	
	parents _ Dictionary new.
	
	self basicNew.! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 11:56:49'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 11:56:49'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 11:57:05'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 11:57:10'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 11:57:10'!
ERROR!

!methodRemoval: Portfolio class #initialize stamp: 'ja 11/8/2020 11:58:16'!
initialize

	parents _ Dictionary new.!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 11:59:27'!
children

	childrens ifNil: [childrens _ Dictionary new].
	^ childrens.
	
	! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 11:59:46'!
parents

	parents ifNil: [parents _ Dictionary new].
	^ parents .
	
	! !

!methodRemoval: Portfolio class #new stamp: 'ja 11/8/2020 12:00:39'!
new 

	childrens _ Dictionary new.
	
	parents _ Dictionary new.
	
	self basicNew.!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 12:00:58'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 12:00:58'!
FAILURE!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 12:02:07' prior: 50953810!
addChild: aPortfolioChild of: aPortfolioParent
	
	| parentChildren childParents |
	
	parentChildren _ OrderedCollection new.
	parentChildren _ self children at: aPortfolioParent ifAbsent: [  parentChildren add: aPortfolioChild.
										 ^ self children add: aPortfolioParent -> parentChildren ].
									
	parentChildren add: aPortfolioChild .
	self children at: aPortfolioParent put: parentChildren.
	
	childParents _ OrderedCollection new.
	childParents _ self parents at: aPortfolioChild ifAbsent: [  childParents add: aPortfolioParent .
										 ^ self parents add: aPortfolioChild -> childParents ].
									
	childParents add: aPortfolioParent .
	self parents at: aPortfolioChild put: childParents.
	
	! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 12:02:21'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 12:02:21'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 12:02:57'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 12:02:57'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 12:03:29'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 12:03:29'!
FAILURE!

Portfolio !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 12:07:54' overrides: 16883149!
initialize 
	
	childrens _ Dictionary new.
	parents _ Dictionary new.
	! !

!classDefinition: 'Portfolio class' category: #'Portfolio-Ejercicio' stamp: 'ja 11/8/2020 12:08:09'!
Portfolio class
	instanceVariableNames: 'parents children'!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 12:08:09' prior: 50953953!
children

	children ifNil: [children _ Dictionary new].
	^ children.
	
	! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 12:08:09' prior: 50954025 overrides: 16883149!
initialize 
	
	children _ Dictionary new.
	parents _ Dictionary new.
	! !

!methodRemoval: Portfolio class #parents stamp: 'ja 11/8/2020 12:08:24'!
parents

	parents ifNil: [parents _ Dictionary new].
	^ parents .
	
	!

!methodRemoval: Portfolio class #children stamp: 'ja 11/8/2020 12:08:30'!
children

	children ifNil: [children _ Dictionary new].
	^ children.
	
	!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 12:08:46'!
clear 
	
	children _ Dictionary new.
	parents _ Dictionary new.
	! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 12:09:04' prior: 50954058!
clear 
	
	children _ nil.
	parents _ nil.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 12:10:06' overrides: 16927572!
setUp

	Portfolio initialize ! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 12:10:19' overrides: 16927574!
tearDown

	Portfolio clear! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 12:11:13' prior: 50953977!
addChild: aPortfolioChild of: aPortfolioParent
	
	| parentChildren childParents |
	
	parentChildren _ OrderedCollection new.
	parentChildren _ children at: aPortfolioParent ifAbsent: [  parentChildren add: aPortfolioChild.
										 ^ children add: aPortfolioParent -> parentChildren ].
									
	parentChildren add: aPortfolioChild .
	children at: aPortfolioParent put: parentChildren.
	
	childParents _ OrderedCollection new.
	childParents _ parents at: aPortfolioChild ifAbsent: [  childParents add: aPortfolioParent .
										 ^ parents add: aPortfolioChild -> childParents ].
									
	childParents add: aPortfolioParent .
	parents at: aPortfolioChild put: childParents.
	
	! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 12:11:24'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 12:11:24'!
FAILURE!

Portfolio!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 12:14:27' prior: 50954079!
addChild: aPortfolioChild of: aPortfolioParent
	
	| parentChildren childParents |
	
	parentChildren _ OrderedCollection new.
	parentChildren _ children at: aPortfolioParent ifAbsent: [  parentChildren add: aPortfolioChild.
										  children add: aPortfolioParent -> parentChildren ].
									
	parentChildren add: aPortfolioChild .
	children at: aPortfolioParent put: parentChildren.
	
	childParents _ OrderedCollection new.
	childParents _ parents at: aPortfolioChild ifAbsent: [  childParents add: aPortfolioParent .
										  parents add: aPortfolioChild -> childParents ].
									
	childParents add: aPortfolioParent .
	parents at: aPortfolioChild put: childParents.
	
	! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 12:14:30'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 12:14:39'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 12:15:05'!
ERROR!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 12:17:09'!
updateChildren: aPortfolioChild of: aPortfolioParent
	
	| parentChildren |
	
	parentChildren _ OrderedCollection new.
	parentChildren _ children at: aPortfolioParent ifAbsent: [  parentChildren add: aPortfolioChild.
										  children add: aPortfolioParent -> parentChildren ].
									
	parentChildren add: aPortfolioChild .
	children at: aPortfolioParent put: parentChildren.

	
	! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 12:17:22'!
updateParent: aPortfolioChild of: aPortfolioParent
	
	| parentChildren |
	
	parentChildren _ OrderedCollection new.
	parentChildren _ children at: aPortfolioParent ifAbsent: [  parentChildren add: aPortfolioChild.
										  children add: aPortfolioParent -> parentChildren ].
									
	parentChildren add: aPortfolioChild .
	children at: aPortfolioParent put: parentChildren.

	
	! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 12:17:50' prior: 50954162!
updateParent: aPortfolioChild of: aPortfolioParent
	
	| childParents |
	
	childParents _ OrderedCollection new.
	childParents _ parents at: aPortfolioChild ifAbsent: [  childParents add: aPortfolioParent .
										  parents add: aPortfolioChild -> childParents ].
									
	childParents add: aPortfolioParent .
	parents at: aPortfolioChild put: childParents.

	
	! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 12:17:59' prior: 50954178!
updateParent: aPortfolioChild of: aPortfolioParent
	
	| childParents |
	
	childParents _ OrderedCollection new.
	childParents _ parents at: aPortfolioChild ifAbsent: [  childParents add: aPortfolioParent .
										  ^ parents add: aPortfolioChild -> childParents ].
									
	childParents add: aPortfolioParent .
	parents at: aPortfolioChild put: childParents.

	
	! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 12:18:04' prior: 50954147!
updateChildren: aPortfolioChild of: aPortfolioParent
	
	| parentChildren |
	
	parentChildren _ OrderedCollection new.
	parentChildren _ children at: aPortfolioParent ifAbsent: [  parentChildren add: aPortfolioChild.
										 ^ children add: aPortfolioParent -> parentChildren ].
									
	parentChildren add: aPortfolioChild .
	children at: aPortfolioParent put: parentChildren.

	
	! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 12:18:59' prior: 50954112!
addChild: aPortfolioChild of: aPortfolioParent
	
	self updateChildren: aPortfolioChild of: aPortfolioParent .
	
	self updateParent: aPortfolioChild of: aPortfolioParent .
	! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 12:20:55' prior: 50954208!
updateChildren: aPortfolioChild of: aPortfolioParent
	
	| parentChildren |
	
	parentChildren _ OrderedCollection new.
	parentChildren _ children at: aPortfolioParent ifAbsent: [  parentChildren add: aPortfolioChild.
										  children add: aPortfolioParent -> parentChildren .
										^ self updateParent: aPortfolioChild of: aPortfolioParent ].
									
	parentChildren add: aPortfolioChild .
	children at: aPortfolioParent put: parentChildren.

	
	! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 12:22:41' prior: 50954233!
updateChildren: aPortfolioChild of: aPortfolioParent
	
	| parentChildren |
	
	parentChildren _ OrderedCollection new.
	parentChildren _ children at: aPortfolioParent ifAbsent: [  parentChildren add: aPortfolioChild.
										  children add: aPortfolioParent -> parentChildren ].
									
	parentChildren add: aPortfolioChild .
	children at: aPortfolioParent put: parentChildren.

	
	! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 12:23:06'!
ERROR!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 12:24:28' prior: 50954251!
updateChildren: aPortfolioChild of: aPortfolioParent
	
	| parentChildren |
	
	parentChildren _ OrderedCollection new.
	parentChildren _ children at: aPortfolioParent ifAbsent: [  parentChildren add: aPortfolioChild.
										^  children add: aPortfolioParent -> parentChildren ].
									
	parentChildren add: aPortfolioChild .
	children at: aPortfolioParent put: parentChildren.

	
	! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 12:24:33' prior: 50954270!
updateChildren: aPortfolioChild of: aPortfolioParent
	
	| parentChildren |
	
	parentChildren _ OrderedCollection new.
	parentChildren _ children at: aPortfolioParent ifAbsent: [  parentChildren add: aPortfolioChild.
										^ children add: aPortfolioParent -> parentChildren ].
									
	parentChildren add: aPortfolioChild .
	children at: aPortfolioParent put: parentChildren.

	
	! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 12:24:52'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 12:24:52'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 12:32:22' prior: 50953609 overrides: 50953092!
registerInPortfolio: aPortfolio
	
	"aPortfolio es el padre y self es lo que quiero agregar	"
	
	(self = aPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	
	(aPortfolio hasPortfolio: self) ifTrue:[self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ]."sacar o modificar solo check el primer nivel"
		
	aPortfolio registerPortfolio: self. ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 12:32:46'!
hasPortfolio: aPortfolio! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 12:32:48' prior: 50954325!
hasPortfolio: aPortfolio

	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 12:44:02' prior: 50954329!
hasPortfolio: aPortfolio

	self class getRoot: aPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 12:44:13' prior: 50954333!
hasPortfolio: aPortfolio

	self class getRoot.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 12:44:40' prior: 50954338!
hasPortfolio: aPortfolio

	| roots |
	
	roots _ self class getRoots.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 12:46:38' prior: 50954309 overrides: 50953092!
registerInPortfolio: aPortfolio
	
	"aPortfolio es el padre y self es lo que quiero agregar	"
	
	(self = aPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	
	(aPortfolio class hasPortfolio: self) ifTrue:[self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ]."sacar o modificar solo check el primer nivel"
		
	aPortfolio registerPortfolio: self. ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 12:46:48' prior: 50954343!
hasPortfolio: aPortfolio

	| roots |
	
	roots _ self class getRoots.! !

!methodRemoval: Portfolio #hasPortfolio: stamp: 'ja 11/8/2020 12:46:54'!
hasPortfolio: aPortfolio

	| roots |
	
	roots _ self class getRoots.!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 12:52:41'!
hasPortfolio: aPortfolio

	| roots |
	
	roots _ self getRoots.
	
	roots do:[ :root |  ]

	
	! !

Portfolio class
	instanceVariableNames: ''!

Portfolio class
	instanceVariableNames: ''!

Portfolio class
	instanceVariableNames: 'parents children'!

!classDefinition: 'Portfolio class' category: #'Portfolio-Ejercicio' stamp: 'ja 11/8/2020 13:00:47'!
Portfolio class
	instanceVariableNames: 'parents children'!

!methodRemoval: Portfolio class #initialize stamp: 'ja 11/8/2020 13:01:00'!
initialize 
	
	children _ Dictionary new.
	parents _ Dictionary new.
	!

!methodRemoval: Portfolio class #clear stamp: 'ja 11/8/2020 13:01:04'!
clear 
	
	children _ nil.
	parents _ nil.
	!

!methodRemoval: Portfolio class #hasPortfolio: stamp: 'ja 11/8/2020 13:01:07'!
hasPortfolio: aPortfolio

	| roots |
	
	roots _ self getRoots.
	
	roots do:[ :root |  ]

	
	!

!methodRemoval: Portfolio class #updateChildren:of: stamp: 'ja 11/8/2020 13:01:12'!
updateChildren: aPortfolioChild of: aPortfolioParent
	
	| parentChildren |
	
	parentChildren _ OrderedCollection new.
	parentChildren _ children at: aPortfolioParent ifAbsent: [  parentChildren add: aPortfolioChild.
										^ children add: aPortfolioParent -> parentChildren ].
									
	parentChildren add: aPortfolioChild .
	children at: aPortfolioParent put: parentChildren.

	
	!

!methodRemoval: Portfolio class #updateParent:of: stamp: 'ja 11/8/2020 13:01:15'!
updateParent: aPortfolioChild of: aPortfolioParent
	
	| childParents |
	
	childParents _ OrderedCollection new.
	childParents _ parents at: aPortfolioChild ifAbsent: [  childParents add: aPortfolioParent .
										  ^ parents add: aPortfolioChild -> childParents ].
									
	childParents add: aPortfolioParent .
	parents at: aPortfolioChild put: childParents.

	
	!

!methodRemoval: Portfolio class #addChild:of: stamp: 'ja 11/8/2020 13:01:18'!
addChild: aPortfolioChild of: aPortfolioParent
	
	self updateChildren: aPortfolioChild of: aPortfolioParent .
	
	self updateParent: aPortfolioChild of: aPortfolioParent .
	!

Portfolio class
	instanceVariableNames: ''!

!classDefinition: 'Portfolio class' category: #'Portfolio-Ejercicio' stamp: 'ja 11/8/2020 13:01:24'!
Portfolio class
	instanceVariableNames: ''!

FinancialInvestment subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'ja 11/8/2020 13:01:35'!
FinancialInvestment subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'ja 11/8/2020 13:20:01'!
FinancialInvestment subclass: #Portfolio
	instanceVariableNames: 'accounts childrenPortfolios parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 13:20:01' prior: 50951126!
matchElementsOf: aPortfolioRootToAdd
	
	| portfolioSelf otherPortfolio |
	
	
	portfolioSelf _ childrenPortfolios copy.
	portfolioSelf add: self.
	
	otherPortfolio _ aPortfolioRootToAdd portfolios copy.
	otherPortfolio add: aPortfolioRootToAdd.
	
	portfolioSelf addAllLast: accounts.
	otherPortfolio addAllLast: aPortfolioRootToAdd accounts.
	
	^ (portfolioSelf intersection: otherPortfolio) size > 0 .
	
	
		
	
		 ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 13:20:01' prior: 50947779 overrides: 50953030!
balance
	
	| balanceAccounts balancePortfolio |
	
	balanceAccounts _ accounts sum: [ :anAccount | anAccount balance] ifEmpty: [0] .
	
	balancePortfolio _ childrenPortfolios sum: [:x | x balance ] ifEmpty: [0].
	
	^ balancePortfolio + balanceAccounts .
		
		! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 13:20:01' prior: 50953726!
registerPortfolio: aPortfolio
	
	
	self class addChild: aPortfolio of: self .
		
	childrenPortfolios add: aPortfolio . ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 13:20:01' prior: 50945918!
amountOfPortfolios
	
	^ childrenPortfolios size.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 13:20:01' prior: 50946073!
isEmpty
	
	^ (accounts size = 0) and: [ childrenPortfolios size = 0].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 13:20:01' prior: 50953306 overrides: 16896425!
initialize

	accounts _ OrderedCollection new.
	
	childrenPortfolios _ OrderedCollection new.
	 ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 13:20:01' prior: 50949321!
portfolios

	^ childrenPortfolios! !

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'ja 11/8/2020 13:20:16'!
FinancialInvestment subclass: #Portfolio
	instanceVariableNames: 'accounts childrenPortfolios parentsPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 13:20:16' prior: 50952369!
addParent: aPortfolio 
	
	parentsPortfolios add: aPortfolio .! !

!methodRemoval: PortfolioTest #setUp stamp: 'ja 11/8/2020 14:05:24'!
setUp

	Portfolio initialize !

!methodRemoval: PortfolioTest #tearDown stamp: 'ja 11/8/2020 14:05:28'!
tearDown

	Portfolio clear!

!methodRemoval: Portfolio #matchElementsOf: stamp: 'ja 11/8/2020 14:49:09'!
matchElementsOf: aPortfolioRootToAdd
	
	| portfolioSelf otherPortfolio |
	
	
	portfolioSelf _ childrenPortfolios copy.
	portfolioSelf add: self.
	
	otherPortfolio _ aPortfolioRootToAdd portfolios copy.
	otherPortfolio add: aPortfolioRootToAdd.
	
	portfolioSelf addAllLast: accounts.
	otherPortfolio addAllLast: aPortfolioRootToAdd accounts.
	
	^ (portfolioSelf intersection: otherPortfolio) size > 0 .
	
	
		
	
		 !

!methodRemoval: Portfolio #accountIsInHierarchyUp: stamp: 'ja 11/8/2020 14:50:42'!
accountIsInHierarchyUp: aReceptiveAccount

	
	| portfoliosRoot |
	
	(self parents do:[:y | (y accounts includes: aReceptiveAccount) ifTrue:[^ true]] ) 
		ifFalse: [ portfoliosRoot _ self parents portfolios copy.
			(portfoliosRoot isEmpty) ifTrue: [^ false].
			portfoliosRoot do:[:x | (x accountIsInHierarchyDown: aReceptiveAccount) ifTrue: [^ true ] ]].
	!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 14:51:40' prior: 50954499!
registerPortfolio: aPortfolio
	
	
	self addParent: self.
		
	childrenPortfolios add: aPortfolio . ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 14:51:46' prior: 50954579!
registerPortfolio: aPortfolio

	self addParent: self.
		
	childrenPortfolios add: aPortfolio . ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 14:51:54' prior: 50954586!
registerPortfolio: aPortfolio

	aPortfolio addParent: self.
		
	childrenPortfolios add: aPortfolio . ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 14:53:03'!
hasPortfolio: aPortfolio! !

!methodRemoval: Portfolio #deepSearch: stamp: 'ja 11/8/2020 14:53:11'!
deepSearch: aPortfolioEntry 
	
	(aPortfolioEntry isKindOf: ReceptiveAccount) ifTrue: [	 ^ (self accountIsInHierarchy: aPortfolioEntry) ].
	
	(aPortfolioEntry isKindOf: Portfolio) ifTrue:[^ self portfolioIsInHierarchy: aPortfolioEntry].
	!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 14:53:30' prior: 50952833!
portfolioIsInHierarchy: aPortofolio! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 14:55:45' prior: 50954598!
hasPortfolio: aPortfolio

	| aCollectionOfRoots |

	aCollectionOfRoots _ OrderedCollection new.
	
	parentsPortfolios do: [ :elemParent | elemParent getParentsRootAt: aCollectionOfRoots ].

	aCollectionOfRoots do: [ :parentRoot | (parentRoot isInHierarchy: aPortfolio) ifTrue: [ ^true] ].

	^ false.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 14:57:56'!
getParentsRootAt: aCollection


! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 14:59:16' prior: 50954629!
getParentsRootAt: aCollection

	  self parents do: [ :elemParent | (elemParent parents isEmpty) ifTrue:[ ^ aCollection add: elemParent ]
                                                                                        
                                                                              ifFalse: [ elemParent getParentsRootAt: aCollection ]  ]   

! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 15:00:06' prior: 50954634!
getParentsRootAt: aCollection

	self parents do: [ :elemParent | (elemParent parents isEmpty) 
							ifTrue:[ ^ aCollection add: elemParent ]                                                                                 
							ifFalse: [ elemParent getParentsRootAt: aCollection ]  ]   

! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 15:00:20' prior: 50954517 overrides: 16896425!
initialize

	accounts _ OrderedCollection new.
	
	childrenPortfolios _ OrderedCollection new.
	
	parentsPortfolios _ OrderedCollection new.
	 ! !

!methodRemoval: Portfolio #portfolioIsInHierarchy: stamp: 'ja 11/8/2020 15:00:27'!
portfolioIsInHierarchy: aPortofolio!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 15:01:14'!
isInHierarchy: aPortfolio! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 15:04:46' prior: 50954673!
isInHierarchy: aPortfolio

	
   (childrenPortfolios includes: aPortfolio) ifTrue: [^ true ] 
								ifFalse: [ (childrenPortfolios isEmpty) 
									ifTrue:[ ^ false ] 
									ifFalse:[ childrenPortfolios do: [:portfolioChild | portfolioChild isInHierarchy: aPortfolio ]]].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 15:05:35' prior: 50954349 overrides: 50953092!
registerInPortfolio: aPortfolio
	
	"aPortfolio es el padre y self es lo que quiero agregar	"
	
	(self = aPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	
	(aPortfolio class hasPortfolio: self) ifTrue:[self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ].
		
	aPortfolio registerPortfolio: self. ! !
!Portfolio methodsFor: 'private' stamp: 'ja 11/8/2020 15:06:39'!
parents

	^ parentsPortfolios ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 15:07:13' prior: 50954649!
getParentsRootAt: aCollection

	parentsPortfolios do: [ :elemParent | (elemParent parents isEmpty) 
							ifTrue:[ ^ aCollection add: elemParent ]                                                                                 
							ifFalse: [ elemParent getParentsRootAt: aCollection ]  ]   

! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 15:09:18'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 15:09:18'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 15:09:53'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 15:09:53'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 15:10:02' prior: 50954690 overrides: 50953092!
registerInPortfolio: aPortfolio
	
	"aPortfolio es el padre y self es lo que quiero agregar	"
	
	(self = aPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	
	(aPortfolio hasPortfolio: self) ifTrue:[self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ].
		
	aPortfolio registerPortfolio: self. ! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 15:10:07'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 15:10:07'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 15:14:05'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 15:14:05'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 15:15:02' prior: 50953871!
test14DetectandoCiclosSimpleEntreDosPortfolios

	| portfolioRoot1 portfolioChild1 portfolioChild2 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	
	
	portfolioRoot1 register: portfolioChild1.
	portfolioChild1 register: portfolioChild2.
	
	self should: [ portfolioChild2 register: portfolioRoot1. self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
		
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 15:15:33' prior: 50954765!
test14DetectandoCiclosSimpleEntreDosPortfolios

	| portfolioRoot1 portfolioChild1 portfolioChild2 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1 .
	portfolioRoot1 register: portfolioChild1.
	portfolioChild1 register: portfolioChild2.
	
	self should: [ portfolioChild2 register: portfolioRoot1. self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
		
! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 15:16:57'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 15:18:14' prior: 50954617!
hasPortfolio: aPortfolio

	| aCollectionOfRoots |

	aCollectionOfRoots _ OrderedCollection new.
	
	parentsPortfolios do: [ :elemParent | elemParent getParentsRootAt: aCollectionOfRoots ].

	aCollectionOfRoots do: [ :parentRoot | (parentRoot isInHierarchy: aPortfolio) ifTrue: [ self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription] ].

	^ false.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 15:18:35' prior: 50954736 overrides: 50953092!
registerInPortfolio: aPortfolio
	
	"aPortfolio es el padre y self es lo que quiero agregar	"
	
	(self = aPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	
	"(aPortfolio hasPortfolio: self) ifTrue:[self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ]."
	aPortfolio hasPortfolio: self.
		
	aPortfolio registerPortfolio: self. ! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 15:18:43'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 15:18:43'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 15:18:59' prior: 50954826 overrides: 50953092!
registerInPortfolio: aPortfolio
	
	"aPortfolio es el padre y self es lo que quiero agregar	"
	
	(self = aPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	
	(aPortfolio hasPortfolio: self) ifTrue:[self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ].
		
	aPortfolio registerPortfolio: self. ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 15:19:20' prior: 50954810!
hasPortfolio: aPortfolio

	| aCollectionOfRoots |

	aCollectionOfRoots _ OrderedCollection new.
	
	parentsPortfolios do: [ :elemParent | elemParent getParentsRootAt: aCollectionOfRoots ].

	aCollectionOfRoots do: [ :parentRoot | (parentRoot isInHierarchy: aPortfolio) ifTrue: [ ^ true ] ].

	^ false.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 15:38:50' prior: 50954865!
hasPortfolio: aPortfolio

	| aCollectionOfRoots hasPortfolio |

	aCollectionOfRoots _ OrderedCollection new.
	
	parentsPortfolios do: [ :elemParent | hasPortfolio _ elemParent getParentsRootAt: aCollectionOfRoots ].

	"aCollectionOfRoots do: [ :parentRoot | (parentRoot isInHierarchy: aPortfolio) ifTrue: [ ^ true ] ]."

	^ hasPortfolio .
! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 15:38:56'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 15:38:56'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 15:39:28' prior: 50954878!
hasPortfolio: aPortfolio

	| aCollectionOfRoots hasPortfolio |
	
	hasPortfolio _ false.

	aCollectionOfRoots _ OrderedCollection new.
	
	parentsPortfolios do: [ :elemParent | hasPortfolio _ elemParent getParentsRootAt: aCollectionOfRoots ].

	"aCollectionOfRoots do: [ :parentRoot | (parentRoot isInHierarchy: aPortfolio) ifTrue: [ ^ true ] ]."

	^ hasPortfolio .
! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 15:39:32'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 15:39:32'!
ERROR!

aPortfolio hasPortfolio: self!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 15:40:20' prior: 50954899!
hasPortfolio: aPortfolio

	| aCollectionOfRoots zzz |
	
	zzz _ false.

	aCollectionOfRoots _ OrderedCollection new.
	
	parentsPortfolios do: [ :elemParent | zzz _ elemParent getParentsRootAt: aCollectionOfRoots ].

	"aCollectionOfRoots do: [ :parentRoot | (parentRoot isInHierarchy: aPortfolio) ifTrue: [ ^ true ] ]."

	^ zzz .
! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 15:40:24'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 15:40:24'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 15:41:05' prior: 50954922!
hasPortfolio: aPortfolio

	| aCollectionOfRoots zzz |
	
	zzz _ false.

	aCollectionOfRoots _ OrderedCollection new.
	
	parentsPortfolios do: [ :elemParent | elemParent getParentsRootAt: aCollectionOfRoots ].

	"aCollectionOfRoots do: [ :parentRoot | (parentRoot isInHierarchy: aPortfolio) ifTrue: [ ^ true ] ]."
	
	aCollectionOfRoots do: [ :parentRoot | zzz _ (parentRoot isInHierarchy: aPortfolio) ].

	^ zzz .
! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 15:41:10'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 15:41:10'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 15:44:25' prior: 50954943!
hasPortfolio: aPortfolio

	| aCollectionOfRoots zzz |
	
	zzz _ false.

	aCollectionOfRoots _ OrderedCollection new.
	
	parentsPortfolios do: [ :elemParent | elemParent getParentsRootAt: aCollectionOfRoots ].

	"aCollectionOfRoots do: [ :parentRoot | (parentRoot isInHierarchy: aPortfolio) ifTrue: [ ^ true ] ]."
	
	aCollectionOfRoots do: [ :parentRoot | (parentRoot isInHierarchy: aPortfolio) ifTrue: [ zzz _ true ]].

	^ zzz .
! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 15:44:32'!
FAILURE!

portfolioChild isInHierarchy: aPortfolio !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 15:50:59' prior: 50954967!
hasPortfolio: aPortfolio

	| aCollectionOfRoots zzz |
	
	zzz _ false.

	aCollectionOfRoots _ OrderedCollection new.
	
	parentsPortfolios do: [ :elemParent | elemParent getParentsRootAt: aCollectionOfRoots ].

	"aCollectionOfRoots do: [ :parentRoot | (parentRoot isInHierarchy: aPortfolio) ifTrue: [ ^ true ] ]."
	
	aCollectionOfRoots do: [ :parentRoot | parentRoot isInHierarchy: aPortfolio ].

	^ zzz .
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 15:51:36' prior: 50954989!
hasPortfolio: aPortfolio

	| aCollectionOfRoots zzz |
	
	zzz _  OrderedCollection new.

	aCollectionOfRoots _ OrderedCollection new.
	
	parentsPortfolios do: [ :elemParent | elemParent getParentsRootAt: aCollectionOfRoots ].

	"aCollectionOfRoots do: [ :parentRoot | (parentRoot isInHierarchy: aPortfolio) ifTrue: [ ^ true ] ]."
	
	aCollectionOfRoots do: [ :parentRoot | parentRoot isInHierarchy: aPortfolio ].

	^ zzz .
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 15:51:46' prior: 50955005!
hasPortfolio: aPortfolio

	| aCollectionOfRoots zzz |
	
	zzz _  OrderedCollection new.

	aCollectionOfRoots _ OrderedCollection new.
	
	parentsPortfolios do: [ :elemParent | elemParent getParentsRootAt: aCollectionOfRoots ].

	"aCollectionOfRoots do: [ :parentRoot | (parentRoot isInHierarchy: aPortfolio) ifTrue: [ ^ true ] ]."
	
	aCollectionOfRoots do: [ :parentRoot | parentRoot isInHierarchy: aPortfolio put: zzz ].

	^ zzz .
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 15:51:55' prior: 50955022!
hasPortfolio: aPortfolio

	| aCollectionOfRoots zzz |
	
	zzz _  OrderedCollection new.

	aCollectionOfRoots _ OrderedCollection new.
	
	parentsPortfolios do: [ :elemParent | elemParent getParentsRootAt: aCollectionOfRoots ].

	"aCollectionOfRoots do: [ :parentRoot | (parentRoot isInHierarchy: aPortfolio) ifTrue: [ ^ true ] ]."
	
	aCollectionOfRoots do: [ :parentRoot | parentRoot isInHierarchy: aPortfolio put: zzz ].

	^ zzz isEmpty.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 15:52:07' prior: 50955039!
hasPortfolio: aPortfolio

	| aCollectionOfRoots zzz |
	
	zzz _  OrderedCollection new.

	aCollectionOfRoots _ OrderedCollection new.
	
	parentsPortfolios do: [ :elemParent | elemParent getParentsRootAt: aCollectionOfRoots ].

	"aCollectionOfRoots do: [ :parentRoot | (parentRoot isInHierarchy: aPortfolio) ifTrue: [ ^ true ] ]."
	
	aCollectionOfRoots do: [ :parentRoot | parentRoot isInHierarchy: aPortfolio put: zzz ].

	^ zzz isEmpty not.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 15:52:48'!
isInHierarchy: aPortfolio put: ansewr

	
   (childrenPortfolios includes: aPortfolio) ifTrue: [^ true ] 
								ifFalse: [ (childrenPortfolios isEmpty) 
									ifTrue:[ ^ false ] 
									ifFalse:[ childrenPortfolios do: [:portfolioChild | portfolioChild isInHierarchy: aPortfolio ]]].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 15:53:01' prior: 50955073!
isInHierarchy: aPortfolio put: ansewr

	
   (childrenPortfolios includes: aPortfolio) ifTrue: [^ ansewr add: aPortfolio ] 
								ifFalse: [ (childrenPortfolios isEmpty) 
									ifTrue:[ ^ false ] 
									ifFalse:[ childrenPortfolios do: [:portfolioChild | portfolioChild isInHierarchy: aPortfolio ]]].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 15:53:40' prior: 50955086!
isInHierarchy: aPortfolio put: answer

	
   (childrenPortfolios includes: aPortfolio) ifTrue: [^ answer add: aPortfolio ] 
								ifFalse: [ (childrenPortfolios isEmpty) 
									ifTrue:[ ^ answer ] 
									ifFalse:[ childrenPortfolios do: [:portfolioChild | portfolioChild isInHierarchy: aPortfolio put: answer ]]].! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 15:54:11'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 15:54:11'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 15:55:06' prior: 50955056!
hasPortfolio: aPortfolio

	| aCollectionOfRoots zzz |
	
	zzz _  OrderedCollection new.

	aCollectionOfRoots _ OrderedCollection new.
	
	parentsPortfolios do: [ :elemParent | elemParent getParentsRootAt: aCollectionOfRoots ].

	"aCollectionOfRoots do: [ :parentRoot | (parentRoot isInHierarchy: aPortfolio) ifTrue: [ ^ true ] ]."
	
	aCollectionOfRoots do: [ :parentRoot | parentRoot isInHierarchy: aPortfolio put: zzz ].

	^ zzz isEmpty.
! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 15:55:11'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 15:55:11'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 15:56:17'!
ERROR!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 15:56:30'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 15:56:52' prior: 50955120!
hasPortfolio: aPortfolio

	| aCollectionOfRoots zzz |
	
	zzz _  OrderedCollection new.

	aCollectionOfRoots _ OrderedCollection new.
	
	parentsPortfolios do: [ :elemParent | elemParent getParentsRootAt: aCollectionOfRoots ].

	"aCollectionOfRoots do: [ :parentRoot | (parentRoot isInHierarchy: aPortfolio) ifTrue: [ ^ true ] ]."
	
	aCollectionOfRoots do: [ :parentRoot | parentRoot isInHierarchy: aPortfolio put: zzz ].

	^ zzz isEmpty not.
! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 15:57:28'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 15:57:28'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 16:00:59' prior: 50954677!
isInHierarchy: aPortfolio

	
   (childrenPortfolios includes: aPortfolio) ifTrue: [^ true ] 
								ifFalse: [ (childrenPortfolios isEmpty) 
									ifTrue:[ ^ false ] 
									ifFalse:[ ^ childrenPortfolios do: [:portfolioChild | portfolioChild isInHierarchy: aPortfolio ]]].! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 16:01:04'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 16:01:04'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 16:01:59' prior: 50955175!
isInHierarchy: aPortfolio

	
   (childrenPortfolios includes: aPortfolio) ifTrue: [^ true ] 
								ifFalse: [ (childrenPortfolios isEmpty) 
									ifTrue:[ ^ false ] 
									ifFalse:[ childrenPortfolios do: [:portfolioChild | portfolioChild isInHierarchy: aPortfolio ]]].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 16:02:03' prior: 50955099!
isInHierarchy: aPortfolio put: answer

	
   (childrenPortfolios includes: aPortfolio) ifTrue: [^ answer add: aPortfolio ] 
								ifFalse: [ (childrenPortfolios isEmpty) 
									ifTrue:[ ^ answer ] 
									ifFalse:[^ childrenPortfolios do: [:portfolioChild | portfolioChild isInHierarchy: aPortfolio put: answer ]]].! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 16:02:16'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 16:02:16'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 16:03:07' prior: 50955206!
isInHierarchy: aPortfolio put: answer

	
   (childrenPortfolios includes: aPortfolio) ifTrue: [^ answer add: aPortfolio ] 
								ifFalse: [ (childrenPortfolios isEmpty) 
									ifTrue:[ ^ answer ] 
									ifFalse:[ childrenPortfolios do: [:portfolioChild | portfolioChild isInHierarchy: aPortfolio put: answer ]]].! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 16:06:52'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 16:06:52'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 16:10:15' prior: 50954850 overrides: 50953092!
registerInPortfolio: aPortfolio
	
	"aPortfolio es el padre y self es lo que quiero agregar	"
	
	(self = aPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	
	(self hasPortfolio: aPortfolio) ifTrue:[self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ].
		
	aPortfolio registerPortfolio: self. ! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 16:10:28'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 16:10:28'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 16:10:52' prior: 50955248 overrides: 50953092!
registerInPortfolio: aPortfolio
	
	"aPortfolio es el padre y self es lo que quiero agregar	"
	
	(self = aPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	
	(aPortfolio hasPortfolio: self) ifTrue:[self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ].
		
	aPortfolio registerPortfolio: self. ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 16:14:34' prior: 50955194!
isInHierarchy: aPortfolio

	
   (childrenPortfolios includes: aPortfolio) ifTrue: [^ true ] 
								ifFalse: [ (childrenPortfolios isEmpty) 
									ifTrue:[ ^ false ] 
									ifFalse:[ childrenPortfolios do: [:portfolioChild | portfolioChild isInHierarchy: aPortfolio ]]].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 16:15:01' prior: 50955227!
isInHierarchy: aPortfolio put: answer

	
   ((childrenPortfolios includes: aPortfolio) or: [ self = aPortfolio ] ) ifTrue: [^ answer add: aPortfolio ] 
								ifFalse: [ (childrenPortfolios isEmpty) 
									ifTrue:[ ^ answer ] 
									ifFalse:[ childrenPortfolios do: [:portfolioChild | portfolioChild isInHierarchy: aPortfolio put: answer ]]].! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 16:15:05'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 16:15:41' prior: 50954783!
test14DetectandoCiclosSimpleEntreDosPortfolios

	| portfolioRoot1 portfolioChild1 portfolioChild2 portfolioChild3 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1 .
	portfolioRoot1 register: portfolioChild1.
	portfolioChild1 register: portfolioChild2.
	
	self should: [ portfolioChild2 register: portfolioRoot1. self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
		
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 16:16:15' prior: 50955315!
test14DetectandoCiclosSimpleEntreDosPortfolios

	| portfolioRoot1 portfolioChild1 portfolioChild2 portfolioChild3 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1 .
	portfolioRoot1 register: portfolioChild1.
	portfolioChild1 register: portfolioChild2.
	portfolioChild2 register: portfolioChild3.
	
	self should: [ portfolioChild2 register: portfolioRoot1. self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
		
! !

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 16:16:18'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 16:34:39'!
test15

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild3.
	portfolioRoot3 register: portfolioChild3.

	portfolioChild1 register: portfolioChild2.
	portfolioChild1 register: portfolioChild3.
	
	portfolioChild3 register: portfolioChild4.
	
	self should: [ portfolioChild4 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 16:35:10' prior: 50955368!
test15

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild4.
	portfolioRoot3 register: portfolioChild4.

	portfolioChild1 register: portfolioChild2.
	portfolioChild1 register: portfolioChild3.
	
	portfolioChild3 register: portfolioChild4.
	
	self should: [ portfolioChild4 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
! !

!testRun: #PortfolioTest #test15 stamp: 'ja 11/8/2020 16:35:13'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 16:35:33' prior: 50955405!
test15

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild4.
	portfolioRoot3 register: portfolioChild4.

	portfolioChild1 register: portfolioChild2.
	portfolioChild1 register: portfolioChild3.
	
	portfolioChild3 register: portfolioChild4.
	
	self should: [ portfolioChild4 register: portfolioChild2 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
! !

!testRun: #PortfolioTest #test15 stamp: 'ja 11/8/2020 16:35:35'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 16:38:06'!
test16

	| portfolioRoot1 portfolioRoot2 portfolioChild1 portfolioChild2 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.

	portfolioRoot2 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild2.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 16:40:13' prior: 50955466!
test16

	| portfolioRoot1 portfolioRoot2 portfolioChild1 portfolioChild2 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.

	portfolioRoot2 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild2.
	
	self assert: 0 equals: portfolioRoot1 balance .
	self assert: 0 equals: portfolioRoot2 balance .	! !

!testRun: #PortfolioTest #test16 stamp: 'ja 11/8/2020 16:40:17'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/8/2020 16:41:38'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/8/2020 16:41:38'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'ja 11/8/2020 16:41:38'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'ja 11/8/2020 16:41:38'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'ja 11/8/2020 16:41:38'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'ja 11/8/2020 16:41:38'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/8/2020 16:41:38'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/8/2020 16:41:38'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'ja 11/8/2020 16:41:38'!
PASSED!

!testRun: #PortfolioTest #test10casoPadresDistintos stamp: 'ja 11/8/2020 16:41:38'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'ja 11/8/2020 16:41:38'!
PASSED!

!testRun: #PortfolioTest #test12NoTePodesAgregarAVosMismo stamp: 'ja 11/8/2020 16:41:38'!
PASSED!

!testRun: #PortfolioTest #test13NoSePuedeAgregarDosVecesElMismoElem stamp: 'ja 11/8/2020 16:41:38'!
FAILURE!

!testRun: #PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 16:41:38'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'ja 11/8/2020 16:41:38'!
PASSED!

!testRun: #PortfolioTest #test15DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/8/2020 16:41:38'!
FAILURE!

!testRun: #PortfolioTest #test16 stamp: 'ja 11/8/2020 16:41:38'!
PASSED!

!testRun: #PortfolioTest #test16DetectandoCiclosDificiles stamp: 'ja 11/8/2020 16:41:38'!
FAILURE!

!testRun: #PortfolioTest #test13NoSePuedeAgregarDosVecesElMismoElem stamp: 'ja 11/8/2020 16:42:15'!
FAILURE!

!testRun: #PortfolioTest #test13NoSePuedeAgregarDosVecesElMismoElem stamp: 'ja 11/8/2020 16:42:15'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 16:48:17'!
test10SameChildrenDifferentParents

	| portfolioRoot1 portfolioRoot2 portfolioChild1 portfolioChild2 account1 account2 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
		
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	portfolioChild1 register: account1.
	portfolioChild2  register: account2.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild2.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
		
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 2 equals: portfolioRoot2 amountOfPortfolios.
	
	self assert: 100 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	! !

!methodRemoval: PortfolioTest #test10casoPadresDistintos stamp: 'ja 11/8/2020 16:48:21'!
test10casoPadresDistintos

	| portfolioRoot1 portfolioRoot2 portfolioChild1 portfolioChild2 account1 account2 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
		
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	
	portfolioChild1 register: account1.
	portfolioChild2  register: account2.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild2.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
		
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 2 equals: portfolioRoot2 amountOfPortfolios.
	
	self assert: 100 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 16:49:54'!
test12PortofolioCantAdedSelf

	| portfolioRoot |
	
	portfolioRoot _ Portfolio new.
	
	self should: [ portfolioRoot register: portfolioRoot . self fail]  
		raise: Error
		withMessageText: Portfolio noTePodesAgregarAVosMismoErrorDescription .
		
	self assert: 0 equals: portfolioRoot amountOfAccounts.
			
	self assert: 0 equals: portfolioRoot balance.! !

!methodRemoval: PortfolioTest #test12NoTePodesAgregarAVosMismo stamp: 'ja 11/8/2020 16:50:01'!
test12NoTePodesAgregarAVosMismo

	| portfolioRoot |
	
	portfolioRoot _ Portfolio new.
	
	self should: [ portfolioRoot register: portfolioRoot . self fail]  
		raise: Error
		withMessageText: Portfolio noTePodesAgregarAVosMismoErrorDescription .
		
	self assert: 0 equals: portfolioRoot amountOfAccounts.
			
	self assert: 0 equals: portfolioRoot balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 16:51:00'!
test12PortofolioCantAddItSelf

	| portfolioRoot |
	
	portfolioRoot _ Portfolio new.
	
	self should: [ portfolioRoot register: portfolioRoot . self fail]  
		raise: Error
		withMessageText: Portfolio noTePodesAgregarAVosMismoErrorDescription .
		
	self assert: 0 equals: portfolioRoot amountOfAccounts.
			
	self assert: 0 equals: portfolioRoot balance.! !

!methodRemoval: PortfolioTest #test12PortofolioCantAdedSelf stamp: 'ja 11/8/2020 16:51:00'!
test12PortofolioCantAdedSelf

	| portfolioRoot |
	
	portfolioRoot _ Portfolio new.
	
	self should: [ portfolioRoot register: portfolioRoot . self fail]  
		raise: Error
		withMessageText: Portfolio noTePodesAgregarAVosMismoErrorDescription .
		
	self assert: 0 equals: portfolioRoot amountOfAccounts.
			
	self assert: 0 equals: portfolioRoot balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 16:51:20'!
test12PortofolioCantAddItself

	| portfolioRoot |
	
	portfolioRoot _ Portfolio new.
	
	self should: [ portfolioRoot register: portfolioRoot . self fail]  
		raise: Error
		withMessageText: Portfolio noTePodesAgregarAVosMismoErrorDescription .
		
	self assert: 0 equals: portfolioRoot amountOfAccounts.
			
	self assert: 0 equals: portfolioRoot balance.! !

!methodRemoval: PortfolioTest #test12PortofolioCantAddItSelf stamp: 'ja 11/8/2020 16:51:20'!
test12PortofolioCantAddItSelf

	| portfolioRoot |
	
	portfolioRoot _ Portfolio new.
	
	self should: [ portfolioRoot register: portfolioRoot . self fail]  
		raise: Error
		withMessageText: Portfolio noTePodesAgregarAVosMismoErrorDescription .
		
	self assert: 0 equals: portfolioRoot amountOfAccounts.
			
	self assert: 0 equals: portfolioRoot balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 16:54:03'!
test13PortfolioCantBeAddedTwiceTwoSameParent

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioRoot1 register: portfolioChild1 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !

!methodRemoval: PortfolioTest #test13NoSePuedeAgregarDosVecesElMismoElem stamp: 'ja 11/8/2020 16:54:08'!
test13NoSePuedeAgregarDosVecesElMismoElem

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioRoot1 register: portfolioChild1 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 16:54:38'!
test13PortfolioCantBeAddedTwiceToSameParent

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioRoot1 register: portfolioChild1 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !

!methodRemoval: PortfolioTest #test13PortfolioCantBeAddedTwiceTwoSameParent stamp: 'ja 11/8/2020 16:54:38'!
test13PortfolioCantBeAddedTwiceTwoSameParent

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioRoot1 register: portfolioChild1 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 16:58:28'!
test14CyclesWithParentOnSingleParentNodeAreForbidden

	| portfolioRoot1 portfolioChild1 portfolioChild2 portfolioChild3 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1 .
	portfolioRoot1 register: portfolioChild1.
	portfolioChild1 register: portfolioChild2.
	portfolioChild2 register: portfolioChild3.
	
	self should: [ portfolioChild2 register: portfolioRoot1. self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
		
! !

!methodRemoval: PortfolioTest #test14DetectandoCiclosSimpleEntreDosPortfolios stamp: 'ja 11/8/2020 16:58:34'!
test14DetectandoCiclosSimpleEntreDosPortfolios

	| portfolioRoot1 portfolioChild1 portfolioChild2 portfolioChild3 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1 .
	portfolioRoot1 register: portfolioChild1.
	portfolioChild1 register: portfolioChild2.
	portfolioChild2 register: portfolioChild3.
	
	self should: [ portfolioChild2 register: portfolioRoot1. self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
		
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 16:58:52'!
test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild4.
	portfolioRoot3 register: portfolioChild4.

	portfolioChild1 register: portfolioChild2.
	portfolioChild1 register: portfolioChild3.
	
	portfolioChild3 register: portfolioChild4.
	
	self should: [ portfolioChild4 register: portfolioChild2 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
! !

!methodRemoval: PortfolioTest #test15 stamp: 'ja 11/8/2020 16:59:08'!
test15

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild4.
	portfolioRoot3 register: portfolioChild4.

	portfolioChild1 register: portfolioChild2.
	portfolioChild1 register: portfolioChild3.
	
	portfolioChild3 register: portfolioChild4.
	
	self should: [ portfolioChild4 register: portfolioChild2 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 16:59:23'!
test19DetectandoCiclosSimpleEntrePortfolioYAccount

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioChild1 register: account1 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !

!methodRemoval: PortfolioTest #test15DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/8/2020 16:59:23'!
test15DetectandoCiclosSimpleEntrePortfolioYAccount

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioChild1 register: account1 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 16:59:39' prior: 50955834!
test14CyclesWithParentOnSingleParentNodeAreForbidden

	| portfolioRoot1 portfolioChild1 portfolioChild2 portfolioChild3 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1 .
	portfolioRoot1 register: portfolioChild1.
	portfolioChild1 register: portfolioChild2.
	
	self should: [ portfolioChild2 register: portfolioRoot1. self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
		
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 16:59:48' prior: 50955999!
test14CyclesWithParentOnSingleParentNodeAreForbidden

	| portfolioRoot1 portfolioChild1 portfolioChild2 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1 .
	portfolioRoot1 register: portfolioChild1.
	portfolioChild1 register: portfolioChild2.
	
	self should: [ portfolioChild2 register: portfolioRoot1. self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
		
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:00:27' prior: 50955886!
test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild4.
	portfolioRoot3 register: portfolioChild4.

	portfolioChild1 register: portfolioChild2.
	portfolioChild1 register: portfolioChild3.
	
	portfolioChild3 register: portfolioChild4.
	
	self should: [ portfolioChild4 register: portfolioChild2 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:00:40' prior: 50955482!
test16

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild4.
	portfolioRoot3 register: portfolioChild4.

	portfolioChild1 register: portfolioChild2.
	portfolioChild1 register: portfolioChild3.
	
	portfolioChild3 register: portfolioChild4.
	
	self should: [ portfolioChild4 register: portfolioChild2 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:01:03' prior: 50956047!
test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden

	| portfolioRoot1 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	
	portfolioRoot1 register: portfolioChild1.
	
	portfolioChild1 register: portfolioChild2.
	
	portfolioChild1 register: portfolioChild3.
	
	portfolioChild3 register: portfolioChild4.
	
	self should: [ portfolioChild4 register: portfolioChild2 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:01:25'!
test16CyclesWithParentOnMultipleParentNodeAreForbidden

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild4.
	portfolioRoot3 register: portfolioChild4.

	portfolioChild1 register: portfolioChild2.
	portfolioChild1 register: portfolioChild3.
	
	portfolioChild3 register: portfolioChild4.
	
	self should: [ portfolioChild4 register: portfolioChild2 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .! !

!methodRemoval: PortfolioTest #test16 stamp: 'ja 11/8/2020 17:01:28'!
test16

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild4.
	portfolioRoot3 register: portfolioChild4.

	portfolioChild1 register: portfolioChild2.
	portfolioChild1 register: portfolioChild3.
	
	portfolioChild3 register: portfolioChild4.
	
	self should: [ portfolioChild4 register: portfolioChild2 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:01:44'!
test20DetectandoCiclosDificiles

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3.
	
	self should: [ portfolioChild3 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio cicloNoSePuedeErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		! !

!methodRemoval: PortfolioTest #test16DetectandoCiclosDificiles stamp: 'ja 11/8/2020 17:01:44'!
test16DetectandoCiclosDificiles

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3.
	
	self should: [ portfolioChild3 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio cicloNoSePuedeErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:02:50'!
test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild4.
	portfolioRoot3 register: portfolioChild4.

	portfolioChild1 register: portfolioChild2.
	portfolioChild1 register: portfolioChild3.
	
	portfolioChild3 register: portfolioChild4.
	
	self should: [ portfolioChild4 register: portfolioChild2 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:03:02' prior: 50956130!
test16CyclesWithParentOnMultipleParentNodeAreForbidden

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild4.
	portfolioRoot3 register: portfolioChild4.

	portfolioChild1 register: portfolioChild2.
	portfolioChild1 register: portfolioChild3.
	
	portfolioChild3 register: portfolioChild4.
	
	self should: [ portfolioChild4 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .! !

!testRun: #PortfolioTest #test01PortfolioHasNotAccountWhenCreated stamp: 'ja 11/8/2020 17:03:11'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/8/2020 17:03:11'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'ja 11/8/2020 17:03:11'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'ja 11/8/2020 17:03:11'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'ja 11/8/2020 17:03:11'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'ja 11/8/2020 17:03:11'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/8/2020 17:03:11'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/8/2020 17:03:11'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'ja 11/8/2020 17:03:11'!
PASSED!

!testRun: #PortfolioTest #test10SameChildrenDifferentParents stamp: 'ja 11/8/2020 17:03:11'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'ja 11/8/2020 17:03:11'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'ja 11/8/2020 17:03:11'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'ja 11/8/2020 17:03:11'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'ja 11/8/2020 17:03:11'!
PASSED!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'ja 11/8/2020 17:03:11'!
PASSED!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'ja 11/8/2020 17:03:11'!
PASSED!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'ja 11/8/2020 17:03:11'!
PASSED!

!testRun: #PortfolioTest #test19DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/8/2020 17:03:11'!
FAILURE!

!testRun: #PortfolioTest #test20DetectandoCiclosDificiles stamp: 'ja 11/8/2020 17:03:11'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:04:40'!
test19

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioChild1 register: account1 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !

!methodRemoval: PortfolioTest #test19DetectandoCiclosSimpleEntrePortfolioYAccount stamp: 'ja 11/8/2020 17:04:43'!
test19DetectandoCiclosSimpleEntrePortfolioYAccount

	| portfolioRoot1 portfolioChild1 account1 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	
	self should: [ portfolioChild1 register: account1 . self fail]  
		raise: Error
		withMessageText: Portfolio noSePuedeAgregarDosVecesElMismoElemErrorDescription .
		
	self deny: portfolioRoot1 isEmpty.
	
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
			
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:04:51'!
test20

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3.
	
	self should: [ portfolioChild3 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio cicloNoSePuedeErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		! !

!methodRemoval: PortfolioTest #test20DetectandoCiclosDificiles stamp: 'ja 11/8/2020 17:04:54'!
test20DetectandoCiclosDificiles

	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
			
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	
	portfolioRoot2 register: portfolioChild2.
	
	portfolioRoot3 register: portfolioChild3.
	
	self should: [ portfolioChild3 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio cicloNoSePuedeErrorDescription.
		
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
			
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
		
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		!

Object subclass: #PortfolioState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioState category: #'Portfolio-Ejercicio' stamp: 'ja 11/8/2020 17:05:27'!
Object subclass: #PortfolioState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioState subclass: #PortfolioRoot
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioRoot category: #'Portfolio-Ejercicio' stamp: 'ja 11/8/2020 17:05:38'!
PortfolioState subclass: #PortfolioRoot
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

PortfolioState subclass: #PortfolioNotRoot
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioNotRoot category: #'Portfolio-Ejercicio' stamp: 'ja 11/8/2020 17:06:14'!
PortfolioState subclass: #PortfolioNotRoot
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRenamed: #PortfolioNotRoot as: #NotRootPortfolio stamp: 'ja 11/8/2020 17:07:23'!
Smalltalk renameClassNamed: #PortfolioNotRoot as: #NotRootPortfolio!

!classRenamed: #PortfolioRoot as: #RootPortfolio stamp: 'ja 11/8/2020 17:07:37'!
Smalltalk renameClassNamed: #PortfolioRoot as: #RootPortfolio!

FinancialInvestment subclass: #Portfolio
	instanceVariableNames: 'accounts childrenPortfolios parentsPortfolios state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: #'Portfolio-Ejercicio' stamp: 'ja 11/8/2020 17:09:35'!
FinancialInvestment subclass: #Portfolio
	instanceVariableNames: 'accounts childrenPortfolios parentsPortfolios state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:10:08' prior: 50954662 overrides: 16896425!
initialize

	accounts _ OrderedCollection new.
	
	childrenPortfolios _ OrderedCollection new.
	
	parentsPortfolios _ OrderedCollection new.
	 
	state _ RootPortfolio new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:11:18' prior: 50955270 overrides: 50953092!
registerInPortfolio: aPortfolio
	
	"aPortfolio es el padre y self es lo que quiero agregar	"
	
	(self = aPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	
	(aPortfolio hasPortfolio: self) ifTrue:[self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ].
	state _ NotRootPortfolio new.	
	aPortfolio registerPortfolio: self. ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:11:29' prior: 50956656 overrides: 50953092!
registerInPortfolio: aPortfolio
	
	"aPortfolio es el padre y self es lo que quiero agregar	"
	
	(self = aPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	
	(aPortfolio hasPortfolio: self) ifTrue:[self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ].
		
	aPortfolio registerPortfolio: self. 
	
	state _ NotRootPortfolio new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:11:59' prior: 50956672 overrides: 50953092!
registerInPortfolio: aParentPortfolio
	
	"aPortfolio es el padre y self es lo que quiero agregar	"
	
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	
	(aParentPortfolio hasPortfolio: self) ifTrue:[self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ].
		
	aParentPortfolio registerPortfolio: self. 
	
	state _ NotRootPortfolio new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:12:13' prior: 50956688 overrides: 50953092!
registerInPortfolio: aParentPortfolio
	
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	
	(aParentPortfolio hasPortfolio: self) ifTrue:[self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ].
		
	aParentPortfolio registerPortfolio: self. 
	
	state _ NotRootPortfolio new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:14:30'!
itsHierarchyHas: aPortfolio

	| aCollectionOfRoots zzz |
	
	zzz _  OrderedCollection new.

	aCollectionOfRoots _ OrderedCollection new.
	
	parentsPortfolios do: [ :elemParent | elemParent getParentsRootAt: aCollectionOfRoots ].

	"aCollectionOfRoots do: [ :parentRoot | (parentRoot isInHierarchy: aPortfolio) ifTrue: [ ^ true ] ]."
	
	aCollectionOfRoots do: [ :parentRoot | parentRoot isInHierarchy: aPortfolio put: zzz ].

	^ zzz isEmpty not.
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:14:30' prior: 50956705 overrides: 50953092!
registerInPortfolio: aParentPortfolio
	
	(self = aParentPortfolio ) ifTrue: [ self error: self class noTePodesAgregarAVosMismoErrorDescription ].
	
	(aParentPortfolio itsHierarchyHas: self) ifTrue:[self error: self class noSePuedeAgregarDosVecesElMismoElemErrorDescription ].
		
	aParentPortfolio registerPortfolio: self. 
	
	state _ NotRootPortfolio new.! !

!methodRemoval: Portfolio #hasPortfolio: stamp: 'ja 11/8/2020 17:14:30'!
hasPortfolio: aPortfolio

	| aCollectionOfRoots zzz |
	
	zzz _  OrderedCollection new.

	aCollectionOfRoots _ OrderedCollection new.
	
	parentsPortfolios do: [ :elemParent | elemParent getParentsRootAt: aCollectionOfRoots ].

	"aCollectionOfRoots do: [ :parentRoot | (parentRoot isInHierarchy: aPortfolio) ifTrue: [ ^ true ] ]."
	
	aCollectionOfRoots do: [ :parentRoot | parentRoot isInHierarchy: aPortfolio put: zzz ].

	^ zzz isEmpty not.
!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:17:12' prior: 50956719!
itsHierarchyHas: aPortfolio

	^ state xxx: aPortfolio .
! !
!PortfolioState methodsFor: 'no messages' stamp: 'ja 11/8/2020 17:17:42'!
xxx: aPortfolio! !
!PortfolioState methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:18:01' prior: 50956773!
xxx: aPortfolio

	self subclassResponsibility ! !
!NotRootPortfolio methodsFor: 'no messages' stamp: 'ja 11/8/2020 17:18:09' overrides: 50956777!
xxx: aPortfolio! !
!RootPortfolio methodsFor: 'no messages' stamp: 'ja 11/8/2020 17:18:12' overrides: 50956777!
xxx: aPortfolio! !
!RootPortfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:19:15' prior: 50956786 overrides: 50956777!
xxx: aPortfolio

	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:20:24' prior: 50956768!
itsHierarchyHas: aPortfolio

	^ state lookFor: aPortfolio intoHierarchyOf: self.
! !
!PortfolioState methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:22:19'!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio

	self subclassResponsibility ! !

!methodRemoval: PortfolioState #xxx: stamp: 'ja 11/8/2020 17:22:24'!
xxx: aPortfolio

	self subclassResponsibility !
!NotRootPortfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:22:32' overrides: 50956801!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio! !
!RootPortfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:22:37' overrides: 50956801!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio! !

!methodRemoval: RootPortfolio #xxx: stamp: 'ja 11/8/2020 17:22:39'!
xxx: aPortfolio

	!

!methodRemoval: NotRootPortfolio #xxx: stamp: 'ja 11/8/2020 17:22:42'!
xxx: aPortfolio!
!RootPortfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:23:24' prior: 50956818 overrides: 50956801!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio

	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:31:17' prior: 50955285!
isInHierarchy: aPortfolio

	^ (self = aPortfolio) or:[ childrenPortfolios detect:[ :children | children isInHierarchy: aPortfolio ] ifNone:[^ false] ].
! !
!RootPortfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:31:42' prior: 50956830 overrides: 50956801!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio

	aPotentialParentPortfolio isInHierarchy: aPotentialChildPortfolio .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:32:26' prior: 50956836!
isInHierarchy: aPortfolio

	^ (self = aPortfolio) or: [ childrenPortfolios detect:[ :children | children isInHierarchy: aPortfolio ] ifNone:[^ false] ].
! !
!NotRootPortfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:40:18' prior: 50956812 overrides: 50956801!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio

	! !
!NotRootPortfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:42:02' prior: 50956862 overrides: 50956801!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio

	aPotentialParentPortfolio isInAboveHierarchy: aPotentialChildPortfolio .! !
!NotRootPortfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:42:18' prior: 50956869 overrides: 50956801!
lookFor: aPotentialChildPortfolio intoHierarchyOf: aPotentialParentPortfolio

	^ aPotentialParentPortfolio isInAboveHierarchy: aPotentialChildPortfolio .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:43:57'!
isInAboveHierarchy: aPortfolio

	^ parentsPortfolios detect:[ :portfolio | portfolio isInHierarchy: aPortfolio ] ifNone:[^ self] .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'ja 11/8/2020 17:44:10' prior: 50956886!
isInAboveHierarchy: aPortfolio

	^ parentsPortfolios detect:[ :portfolio | portfolio isInHierarchy: aPortfolio ] ifNone:[^ false ] .! !

----QUIT----(8 November 2020 17:58:19) CuisUniversity-4365.image priorSource: 19901442!

----STARTUP---- (8 November 2020 20:25:40) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4365.image!


!classRemoval: #RootPortfolio stamp: 'ja 11/8/2020 20:28:47'!
PortfolioState subclass: #RootPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #NotRootPortfolio stamp: 'ja 11/8/2020 20:28:48'!
PortfolioState subclass: #NotRootPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioState stamp: 'ja 11/8/2020 20:28:48'!
Object subclass: #PortfolioState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccount stamp: 'ja 11/8/2020 20:28:48'!
FinancialInvestment subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'ja 11/8/2020 20:28:49'!
FinancialInvestment subclass: #Portfolio
	instanceVariableNames: 'accounts childrenPortfolios parentsPortfolios state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #FinancialInvestment stamp: 'ja 11/8/2020 20:28:50'!
Object subclass: #FinancialInvestment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'ja 11/8/2020 20:28:50'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'ja 11/8/2020 20:28:50'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'ja 11/8/2020 20:28:51'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'ja 11/8/2020 20:28:51'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'ja 11/8/2020 20:28:52'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /home/jampuero/Documentos/isw1/linux64/Portfolio-Ejercicio.st----!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'ja 11/8/2020 20:30:56'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'ja 11/8/2020 20:30:56'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'ja 11/8/2020 20:31:03'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/8/2020 20:31:03'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'ja 11/8/2020 20:31:03'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'ja 11/8/2020 20:31:03'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'ja 11/8/2020 20:31:03'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'ja 11/8/2020 20:31:03'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/8/2020 20:31:03'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/8/2020 20:31:03'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'ja 11/8/2020 20:31:03'!
PASSED!

!testRun: #PortfolioTest #test10SameChildrenDifferentParents stamp: 'ja 11/8/2020 20:31:03'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'ja 11/8/2020 20:31:03'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'ja 11/8/2020 20:31:03'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'ja 11/8/2020 20:31:03'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'ja 11/8/2020 20:31:03'!
FAILURE!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'ja 11/8/2020 20:31:03'!
FAILURE!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'ja 11/8/2020 20:31:03'!
FAILURE!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'ja 11/8/2020 20:31:03'!
FAILURE!

!testRun: #PortfolioTest #test19 stamp: 'ja 11/8/2020 20:31:03'!
FAILURE!

!testRun: #PortfolioTest #test20 stamp: 'ja 11/8/2020 20:31:03'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'ja 11/8/2020 20:39:09'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'ja 11/8/2020 20:39:09'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'ja 11/8/2020 20:43:44'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'ja 11/8/2020 20:58:53'!
FAILURE!

!classRemoval: #RootPortfolio stamp: 'ja 11/8/2020 21:10:09'!
PortfolioState subclass: #RootPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #NotRootPortfolio stamp: 'ja 11/8/2020 21:10:10'!
PortfolioState subclass: #NotRootPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioState stamp: 'ja 11/8/2020 21:10:10'!
Object subclass: #PortfolioState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccount stamp: 'ja 11/8/2020 21:10:11'!
FinancialInvestment subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'ja 11/8/2020 21:10:11'!
FinancialInvestment subclass: #Portfolio
	instanceVariableNames: 'accounts childrenPortfolios parentsPortfolios state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #FinancialInvestment stamp: 'ja 11/8/2020 21:10:12'!
Object subclass: #FinancialInvestment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'ja 11/8/2020 21:10:13'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'ja 11/8/2020 21:10:13'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'ja 11/8/2020 21:10:14'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'ja 11/8/2020 21:10:14'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'ja 11/8/2020 21:10:15'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /home/jampuero/Documentos/isw1/linux64/Portfolio-Ejercicio.st----!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'ja 11/8/2020 21:47:11'!
PASSED!

!testRun: #PortfolioTest #test02AccountsCanBeAddedToPortfolio stamp: 'ja 11/8/2020 21:47:11'!
PASSED!

!testRun: #PortfolioTest #test03AccountCanBeAddedToPortfolioWithMultipleDeposit stamp: 'ja 11/8/2020 21:47:11'!
PASSED!

!testRun: #PortfolioTest #test04AccountCanBeAddedToPortfolioWithMultipleWithdraw stamp: 'ja 11/8/2020 21:47:11'!
PASSED!

!testRun: #PortfolioTest #test05AccountCanBeAddedToPortfolioWithMultipleTransactions stamp: 'ja 11/8/2020 21:47:11'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAdedToPortfolio stamp: 'ja 11/8/2020 21:47:11'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/8/2020 21:47:11'!
PASSED!

!testRun: #PortfolioTest #test08ANotEmptyPortfolioCanBeAdedToPortfolio stamp: 'ja 11/8/2020 21:47:11'!
PASSED!

!testRun: #PortfolioTest #test09ManyNotEmptyPortfoliosCaBeAdedToPortfolio stamp: 'ja 11/8/2020 21:47:11'!
PASSED!

!testRun: #PortfolioTest #test10SameChildrenDifferentParents stamp: 'ja 11/8/2020 21:47:11'!
PASSED!

!testRun: #PortfolioTest #test11muchosPadresPuedenTenerMuchosHijos stamp: 'ja 11/8/2020 21:47:11'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'ja 11/8/2020 21:47:11'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'ja 11/8/2020 21:47:11'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'ja 11/8/2020 21:47:11'!
PASSED!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'ja 11/8/2020 21:47:11'!
PASSED!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'ja 11/8/2020 21:47:11'!
PASSED!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'ja 11/8/2020 21:47:11'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'ja 11/8/2020 21:47:11'!
FAILURE!

!testRun: #PortfolioTest #test20 stamp: 'ja 11/8/2020 21:47:11'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'ja 11/8/2020 21:47:11'!
FAILURE!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'ja 11/8/2020 22:16:40'!
PASSED!

Portfolio !

Portfolio allInstVarNames .!

Portfolio allInstances .!

----QUIT----(8 November 2020 23:52:43) CuisUniversity-4365.image priorSource: 20008007!

----STARTUP---- (9 November 2020 16:16:52) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4365.image!


!classRemoval: #RootPortfolio stamp: 'ja 11/9/2020 16:17:15'!
PortfolioState subclass: #RootPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #NotRootPortfolio stamp: 'ja 11/9/2020 16:17:16'!
PortfolioState subclass: #NotRootPortfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioState stamp: 'ja 11/9/2020 16:17:16'!
Object subclass: #PortfolioState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccount stamp: 'ja 11/9/2020 16:17:17'!
FinancialInvestment subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'ja 11/9/2020 16:17:17'!
FinancialInvestment subclass: #Portfolio
	instanceVariableNames: 'accounts childrenPortfolios parentsPortfolios state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #FinancialInvestment stamp: 'ja 11/9/2020 16:17:18'!
Object subclass: #FinancialInvestment
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'ja 11/9/2020 16:17:19'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'ja 11/9/2020 16:17:19'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'ja 11/9/2020 16:17:20'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'ja 11/9/2020 16:17:20'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'ja 11/9/2020 16:17:21'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /home/jampuero/Documentos/isw1/linux64/Portfolio-Ejercicio.st----!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'ja 11/9/2020 16:18:06'!
PASSED!

!testRun: #PortfolioTest #test02EmptyAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:18:06'!
PASSED!

!testRun: #PortfolioTest #test03DepositeOnlyAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:18:06'!
PASSED!

!testRun: #PortfolioTest #test04WithdrawOnlyAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:18:06'!
PASSED!

!testRun: #PortfolioTest #test05MultipleTransactionsAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:18:06'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:18:06'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:18:06'!
PASSED!

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:18:06'!
PASSED!

!testRun: #PortfolioTest #test09MultiplePortfoliosCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:18:06'!
PASSED!

!testRun: #PortfolioTest #test10ChildCouldHaveManyParents stamp: 'ja 11/9/2020 16:18:06'!
PASSED!

!testRun: #PortfolioTest #test11ChildrenCouldHaveManyParents stamp: 'ja 11/9/2020 16:18:06'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'ja 11/9/2020 16:18:06'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'ja 11/9/2020 16:18:06'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'ja 11/9/2020 16:18:06'!
PASSED!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'ja 11/9/2020 16:18:06'!
PASSED!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'ja 11/9/2020 16:18:06'!
PASSED!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'ja 11/9/2020 16:18:06'!
PASSED!

!testRun: #PortfolioTest #test18AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree stamp: 'ja 11/9/2020 16:18:06'!
PASSED!

!testRun: #PortfolioTest #test19MultilevelBalance stamp: 'ja 11/9/2020 16:18:06'!
PASSED!

!testRun: #PortfolioTest #test20MultilevelTransactions stamp: 'ja 11/9/2020 16:18:06'!
PASSED!

!testRun: #PortfolioTest #test21MultilevelHasRegistered stamp: 'ja 11/9/2020 16:18:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ja 11/9/2020 16:18:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ja 11/9/2020 16:18:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ja 11/9/2020 16:18:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ja 11/9/2020 16:18:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ja 11/9/2020 16:18:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ja 11/9/2020 16:18:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ja 11/9/2020 16:18:09'!
PASSED!
!PortfolioTest methodsFor: 'creation' stamp: 'ja 11/9/2020 16:18:30' prior: 50959295!
test01PortfolioHasNotAccountsWhenCreated
	| portfolio |
	portfolio _ Portfolio new.
	self assert: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'accounts-adding' stamp: 'ja 11/9/2020 16:18:52' prior: 50959303!
test02EmptyAccountCanBeAddedToPortfolio
	| portfolio account |
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	portfolio register: account.
	self deny: portfolio isEmpty.
	self assert: 1 equals: portfolio amountOfAccounts.
	self assert: 0 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'accounts-adding' stamp: 'ja 11/9/2020 16:19:14' prior: 50959316!
test03DepositeOnlyAccountCanBeAddedToPortfolio
	| portfolio account |
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	portfolio register: account.
	self deny: portfolio isEmpty.
	self assert: 1 equals: portfolio amountOfAccounts.
	self assert: 300 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'accounts-adding' stamp: 'ja 11/9/2020 16:19:40' prior: 50959332!
test04WithdrawOnlyAccountCanBeAddedToPortfolio
	| portfolio account |
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 1000 on: account.
	Withdraw register: 50 on: account.
	Withdraw register: 50 on: account.
	Withdraw register: 50 on: account.
	portfolio register: account.
	self deny: portfolio isEmpty.
	self assert: 1 equals: portfolio amountOfAccounts.
	self assert: 850 equals: portfolio balance.! !

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'ja 11/9/2020 16:19:43'!
PASSED!

!testRun: #PortfolioTest #test02EmptyAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:19:45'!
PASSED!

!testRun: #PortfolioTest #test03DepositeOnlyAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:19:45'!
PASSED!

!testRun: #PortfolioTest #test04WithdrawOnlyAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:19:45'!
PASSED!

!testRun: #PortfolioTest #test05MultipleTransactionsAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:19:45'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:19:45'!
PASSED!
!PortfolioTest methodsFor: 'accounts-adding' stamp: 'ja 11/9/2020 16:20:11' prior: 50959349!
test05MultipleTransactionsAccountCanBeAddedToPortfolio
	| portfolio account |
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.	
	portfolio register: account.
	self deny: portfolio isEmpty.
	self assert: 1 equals: portfolio amountOfAccounts.
	self assert: 150 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'accounts-adding' stamp: 'ja 11/9/2020 16:20:46' prior: 50959369!
test06MultipleAccountsCanBeAddedToPortfolio
	| portfolio account1 account2 account3 totalBalance |
	portfolio _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	portfolio register: account1.
	portfolio register: account2.
	portfolio register: account3.
	totalBalance _ account1 balance + account2 balance + account3 balance.
	self deny: portfolio isEmpty.
	self assert: 3 equals: portfolio amountOfAccounts.
	self assert: totalBalance equals: portfolio balance.! !

!testRun: #PortfolioTest #test02EmptyAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:20:49'!
PASSED!

!testRun: #PortfolioTest #test03DepositeOnlyAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:20:49'!
PASSED!

!testRun: #PortfolioTest #test04WithdrawOnlyAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:20:49'!
PASSED!

!testRun: #PortfolioTest #test05MultipleTransactionsAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:20:49'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:20:49'!
PASSED!
!PortfolioTest methodsFor: 'portfolios-adding' stamp: 'ja 11/9/2020 16:21:12' prior: 50959397!
test07EmptyPortfolioCanBeAddedToPortfolio
	| portfolio1 portfolio2 |
	portfolio1 _ Portfolio new.
	portfolio2  _ Portfolio new.
	portfolio1 register: portfolio2.
	self deny: portfolio1 isEmpty.
	self assert: 1 equals: portfolio1 amountOfPortfolios.
	self assert: 0 equals: portfolio1 balance .! !
!PortfolioTest methodsFor: 'portfolios-adding' stamp: 'ja 11/9/2020 16:21:54' prior: 50959432!
test09MultiplePortfoliosCanBeAddedToPortfolio
	| portfolioRoot portfolioChild1 portfolioChild2 account1 account2|
	portfolioRoot _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	portfolioChild1 register: account1.
	portfolioChild2  register: account2.
	portfolioRoot register: portfolioChild1.
	portfolioRoot register: portfolioChild2.
	self deny: portfolioRoot isEmpty.
	self assert: 2 equals: portfolioRoot amountOfPortfolios.
	self assert: 100 equals: portfolioRoot balance.
	
	! !

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:21:57'!
PASSED!

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:21:57'!
PASSED!

!testRun: #PortfolioTest #test09MultiplePortfoliosCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:21:57'!
PASSED!
!PortfolioTest methodsFor: 'portfolios-adding policies' stamp: 'ja 11/9/2020 16:22:55' prior: 50959460!
test10ChildCouldHaveManyParents
	| portfolioRoot1 portfolioRoot2 portfolioChild1 portfolioChild2 account1 account2 |
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	account2  _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	Withdraw register: 50 on: account2.
	portfolioChild1 register: account1.
	portfolioChild2  register: account2.
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	portfolioRoot2 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild2.
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 2 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 100 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	! !
!PortfolioTest methodsFor: 'portfolios-adding policies' stamp: 'ja 11/9/2020 16:23:55' prior: 50959497!
test11ChildrenCouldHaveManyParents
	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	account3  _ ReceptiveAccount new.
	Deposit register: 100 on: account3.
	Withdraw register: 50 on: account3.
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	portfolioRoot2 register: portfolioChild2.
	portfolioRoot3 register: portfolioChild3 .
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		! !
!PortfolioTest methodsFor: 'portfolios-adding policies' stamp: 'ja 11/9/2020 16:24:24' prior: 50959548!
test12PortofolioCantAddItself
	| portfolioRoot |
	portfolioRoot _ Portfolio new.
	self should: [ portfolioRoot register: portfolioRoot . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .
	self assert: 0 equals: portfolioRoot amountOfAccounts.
	self assert: 0 equals: portfolioRoot balance.! !
!PortfolioTest methodsFor: 'portfolios-adding policies' stamp: 'ja 11/9/2020 16:24:55' prior: 50959562!
test13PortfolioCantBeAddedTwiceToSameParent
	| portfolioRoot1 portfolioChild1 account1 |
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	self should: [ portfolioRoot1 register: portfolioChild1 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .
	self deny: portfolioRoot1 isEmpty.
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !
!PortfolioTest methodsFor: 'portfolios-adding policies' stamp: 'ja 11/9/2020 16:25:21' prior: 50959590!
test14CyclesWithParentOnSingleParentNodeAreForbidden
	
	| portfolioRoot1 portfolioChild1 portfolioChild2 account1 |
	
	portfolioRoot1 _ Portfolio new.
	
	portfolioChild1 _ Portfolio new.
	
	portfolioChild2 _ Portfolio new.
	
	account1  _ ReceptiveAccount new.
	
	Deposit register: 200 on: account1.
	
	Withdraw register: 50 on: account1.
	
	portfolioRoot1 register: account1 .
	
	portfolioRoot1 register: portfolioChild1.
	
	portfolioChild1 register: portfolioChild2.
	
	self should: [ portfolioChild2 register: portfolioRoot1. self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription. .! !
!PortfolioTest methodsFor: 'portfolios-adding policies' stamp: 'ja 11/9/2020 16:25:51' prior: 50959612!
test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden
	| portfolioRoot1 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	portfolioRoot1 register: portfolioChild1.
	portfolioChild1 register: portfolioChild2.
	portfolioChild1 register: portfolioChild3.
	portfolioChild3 register: portfolioChild4.
	self should: [ portfolioChild4 register: portfolioChild2 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .
! !
!PortfolioTest methodsFor: 'portfolios-adding policies' stamp: 'ja 11/9/2020 16:26:22' prior: 50959636!
test16CyclesWithParentOnMultipleParentNodeAreForbidden
	| portfolioRoot1 portfolioRoot2 portfolioRoot3 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild4.
	portfolioRoot3 register: portfolioChild4.
	portfolioChild1 register: portfolioChild2.
	portfolioChild1 register: portfolioChild3.
	portfolioChild3 register: portfolioChild4.
	self should: [ portfolioChild4 register: portfolioRoot1 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .! !
!PortfolioTest methodsFor: 'portfolios-adding policies' stamp: 'ja 11/9/2020 16:26:35' prior: 50959666!
test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden
	| portfolioRoot1 portfolioRoot2 portfolioRoot3 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild4.
	portfolioRoot3 register: portfolioChild4.

	portfolioChild1 register: portfolioChild2.
	portfolioChild1 register: portfolioChild3.
	
	portfolioChild3 register: portfolioChild4.
	
	self should: [ portfolioChild4 register: portfolioChild2 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .! !

!testRun: #PortfolioTest #test10ChildCouldHaveManyParents stamp: 'ja 11/9/2020 16:26:38'!
PASSED!

!testRun: #PortfolioTest #test11ChildrenCouldHaveManyParents stamp: 'ja 11/9/2020 16:26:38'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'ja 11/9/2020 16:26:38'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'ja 11/9/2020 16:26:38'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'ja 11/9/2020 16:26:38'!
PASSED!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'ja 11/9/2020 16:26:38'!
PASSED!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'ja 11/9/2020 16:26:38'!
PASSED!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'ja 11/9/2020 16:26:38'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'ja 11/9/2020 16:27:08' prior: 50959824!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 
	| account |
	account := ReceptiveAccount new.
	self assert: 0 equals: account balance.
! !

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'ja 11/9/2020 16:27:10'!
PASSED!

!testRun: #PortfolioTest #test02EmptyAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:27:10'!
PASSED!

!testRun: #PortfolioTest #test03DepositeOnlyAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:27:10'!
PASSED!

!testRun: #PortfolioTest #test04WithdrawOnlyAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:27:10'!
PASSED!

!testRun: #PortfolioTest #test05MultipleTransactionsAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:27:10'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:27:10'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:27:10'!
PASSED!

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:27:10'!
PASSED!

!testRun: #PortfolioTest #test09MultiplePortfoliosCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:27:10'!
PASSED!

!testRun: #PortfolioTest #test10ChildCouldHaveManyParents stamp: 'ja 11/9/2020 16:27:10'!
PASSED!

!testRun: #PortfolioTest #test11ChildrenCouldHaveManyParents stamp: 'ja 11/9/2020 16:27:10'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'ja 11/9/2020 16:27:10'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'ja 11/9/2020 16:27:10'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'ja 11/9/2020 16:27:10'!
PASSED!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'ja 11/9/2020 16:27:10'!
PASSED!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'ja 11/9/2020 16:27:10'!
PASSED!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'ja 11/9/2020 16:27:10'!
PASSED!

!testRun: #PortfolioTest #test18AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree stamp: 'ja 11/9/2020 16:27:10'!
PASSED!

!testRun: #PortfolioTest #test19MultilevelBalance stamp: 'ja 11/9/2020 16:27:10'!
PASSED!

!testRun: #PortfolioTest #test20MultilevelTransactions stamp: 'ja 11/9/2020 16:27:10'!
PASSED!

!testRun: #PortfolioTest #test21MultilevelHasRegistered stamp: 'ja 11/9/2020 16:27:10'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'ja 11/9/2020 16:27:24' prior: 50959832!
test02DepositIncreasesBalanceOnTransactionValue 
	| account |
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	self assert: 100 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'ja 11/9/2020 16:27:35' prior: 50959841!
test03WithdrawDecreasesBalanceOnTransactionValue 
	| account |
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	self assert: 50 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'ja 11/9/2020 16:27:44' prior: 50959851!
test04WithdrawValueMustBePositive 
	| account withdrawValue |
	account := ReceptiveAccount new.
	withdrawValue := 50.
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'ja 11/9/2020 16:27:55' prior: 50959861!
test05ReceptiveAccountKnowsRegisteredTransactions 
	| account deposit withdraw |
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'ja 11/9/2020 16:28:04' prior: 50959874!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions
	| deposit withdraw account |
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'ja 11/9/2020 16:28:14' prior: 50959886!
test07AccountKnowsItsTransactions 
	| account1 deposit1 |
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 50 on: account1.
	self assert: 1 equals: account1 transactions size.
	self assert: (account1 transactions includes: deposit1).
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ja 11/9/2020 16:28:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ja 11/9/2020 16:28:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ja 11/9/2020 16:28:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ja 11/9/2020 16:28:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ja 11/9/2020 16:28:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ja 11/9/2020 16:28:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ja 11/9/2020 16:28:17'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'ja 11/9/2020 16:28:19'!
PASSED!

!testRun: #PortfolioTest #test02EmptyAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:28:19'!
PASSED!

!testRun: #PortfolioTest #test03DepositeOnlyAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:28:19'!
PASSED!

!testRun: #PortfolioTest #test04WithdrawOnlyAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:28:19'!
PASSED!

!testRun: #PortfolioTest #test05MultipleTransactionsAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:28:19'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:28:19'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:28:19'!
PASSED!

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:28:19'!
PASSED!

!testRun: #PortfolioTest #test09MultiplePortfoliosCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:28:19'!
PASSED!

!testRun: #PortfolioTest #test10ChildCouldHaveManyParents stamp: 'ja 11/9/2020 16:28:19'!
PASSED!

!testRun: #PortfolioTest #test11ChildrenCouldHaveManyParents stamp: 'ja 11/9/2020 16:28:19'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'ja 11/9/2020 16:28:19'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'ja 11/9/2020 16:28:19'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'ja 11/9/2020 16:28:19'!
PASSED!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'ja 11/9/2020 16:28:19'!
PASSED!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'ja 11/9/2020 16:28:19'!
PASSED!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'ja 11/9/2020 16:28:19'!
PASSED!

!testRun: #PortfolioTest #test18AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree stamp: 'ja 11/9/2020 16:28:19'!
PASSED!

!testRun: #PortfolioTest #test19MultilevelBalance stamp: 'ja 11/9/2020 16:28:19'!
PASSED!

!testRun: #PortfolioTest #test20MultilevelTransactions stamp: 'ja 11/9/2020 16:28:19'!
PASSED!

!testRun: #PortfolioTest #test21MultilevelHasRegistered stamp: 'ja 11/9/2020 16:28:19'!
PASSED!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'ja 11/9/2020 16:28:37' prior: 50960232 overrides: 16896425!
initialize
	transactions := OrderedCollection new.! !
!FinancialInvestment methodsFor: 'register-private' stamp: 'ja 11/9/2020 16:29:08' prior: 50960036!
registerAsChildOf: aPortfolio
	self subclassResponsibility .! !
!FinancialInvestment methodsFor: 'management' stamp: 'ja 11/9/2020 16:29:16' prior: 50960017!
balance
	self subclassResponsibility ! !
!FinancialInvestment methodsFor: 'management' stamp: 'ja 11/9/2020 16:29:24' prior: 50960026!
register: aFinancialInvestment
	self subclassResponsibility ! !
!PortfolioTest methodsFor: 'accounts-adding' stamp: 'ja 11/9/2020 16:32:09' prior: 50960562!
test06MultipleAccountsCanBeAddedToPortfolio
	| portfolio account1 account2 account3 totalBalance |
	portfolio _ Portfolio new.
	account1  _ self accountWithBalanceOf50 .
	account2  _ self accountWithBalanceOf50 .
	account3  _ self accountWithBalanceOf50 .
	portfolio register: account1.
	portfolio register: account2.
	portfolio register: account3.
	totalBalance _ account1 balance + account2 balance + account3 balance.
	self deny: portfolio isEmpty.
	self assert: 3 equals: portfolio amountOfAccounts.
	self assert: totalBalance equals: portfolio balance.! !

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:32:13'!
PASSED!
!PortfolioTest methodsFor: 'portfolios-adding' stamp: 'ja 11/9/2020 16:32:35' prior: 50960620!
test09MultiplePortfoliosCanBeAddedToPortfolio
	| portfolioRoot portfolioChild1 portfolioChild2 account1 account2|
	portfolioRoot _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	account1  _ self accountWithBalanceOf50 .
	account2  _ self accountWithBalanceOf50 .
	portfolioChild1 register: account1.
	portfolioChild2  register: account2.
	portfolioRoot register: portfolioChild1.
	portfolioRoot register: portfolioChild2.
	self deny: portfolioRoot isEmpty.
	self assert: 2 equals: portfolioRoot amountOfPortfolios.
	self assert: 100 equals: portfolioRoot balance.
	
	! !

!testRun: #PortfolioTest #test09MultiplePortfoliosCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:32:37'!
PASSED!
!PortfolioTest methodsFor: 'portfolios-adding policies' stamp: 'ja 11/9/2020 16:32:59' prior: 50960658!
test10ChildCouldHaveManyParents
	| portfolioRoot1 portfolioRoot2 portfolioChild1 portfolioChild2 account1 account2 |
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	account1  _ self accountWithBalanceOf50 .
	account2  _ self accountWithBalanceOf50 .
	portfolioChild1 register: account1.
	portfolioChild2  register: account2.
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	portfolioRoot2 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild2.
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 2 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 100 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	! !

!testRun: #PortfolioTest #test10ChildCouldHaveManyParents stamp: 'ja 11/9/2020 16:33:02'!
PASSED!
!PortfolioTest methodsFor: 'portfolios-adding policies' stamp: 'ja 11/9/2020 16:33:28' prior: 50960694!
test11ChildrenCouldHaveManyParents
	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	account2  _ self accountWithBalanceOf50 .
	account3  _ self accountWithBalanceOf50 .
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	portfolioRoot2 register: portfolioChild2.
	portfolioRoot3 register: portfolioChild3 .
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		! !

!testRun: #PortfolioTest #test11ChildrenCouldHaveManyParents stamp: 'ja 11/9/2020 16:33:31'!
FAILURE!

!testRun: #PortfolioTest #test11ChildrenCouldHaveManyParents stamp: 'ja 11/9/2020 16:33:31'!
FAILURE!
!PortfolioTest methodsFor: 'portfolios-adding policies' stamp: 'ja 11/9/2020 16:33:48' prior: 50961275!
test11ChildrenCouldHaveManyParents
	| portfolioRoot1 portfolioRoot2 portfolioRoot3 
	 portfolioChild1 portfolioChild2  portfolioChild3 
	 account1 account2 account3 |
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	account2  _ ReceptiveAccount new.
	Deposit register: 150 on: account2.
	Withdraw register: 50 on: account2.
	account3  _ self accountWithBalanceOf50 .
	portfolioChild1 register: account1.
	portfolioChild1  register: portfolioChild3. 
	portfolioChild2  register: account2.
	portfolioChild3 register: account3.
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot1 register: portfolioChild2.
	portfolioRoot2 register: portfolioChild2.
	portfolioRoot3 register: portfolioChild3 .
	self deny: portfolioRoot1 isEmpty.
	self deny: portfolioRoot2 isEmpty.
	self deny: portfolioRoot3 isEmpty.
	self assert: 2 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot2 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot3 amountOfPortfolios.
	self assert: 300 equals: portfolioRoot1 balance.
	self assert: 100 equals: portfolioRoot2 balance.	
	self assert: 50 equals: portfolioRoot3 balance.		! !

!testRun: #PortfolioTest #test11ChildrenCouldHaveManyParents stamp: 'ja 11/9/2020 16:33:53'!
PASSED!
!PortfolioTest methodsFor: 'portfolios-adding policies' stamp: 'ja 11/9/2020 16:34:13' prior: 50960864!
test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden
	| portfolioRoot1 portfolioRoot2 portfolioRoot3 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild4.
	portfolioRoot3 register: portfolioChild4.
	portfolioChild1 register: portfolioChild2.
	portfolioChild1 register: portfolioChild3.
	portfolioChild3 register: portfolioChild4.
	self should: [ portfolioChild4 register: portfolioChild2 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .! !
!PortfolioTest methodsFor: 'portfolios-adding policies' stamp: 'ja 11/9/2020 16:34:25' prior: 50961380!
test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden
	| portfolioRoot1 portfolioRoot2 portfolioRoot3 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	portfolioRoot1 _ Portfolio new.
	portfolioRoot2 _ Portfolio new.
	portfolioRoot3 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	portfolioRoot1 register: portfolioChild1.
	portfolioRoot2 register: portfolioChild4.
	portfolioRoot3 register: portfolioChild4.
	portfolioChild1 register: portfolioChild2.
	portfolioChild1 register: portfolioChild3.
	portfolioChild3 register: portfolioChild4.
	self should: [ portfolioChild4 register: portfolioChild2 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .! !

!testRun: #PortfolioTest #test10ChildCouldHaveManyParents stamp: 'ja 11/9/2020 16:34:28'!
PASSED!

!testRun: #PortfolioTest #test11ChildrenCouldHaveManyParents stamp: 'ja 11/9/2020 16:34:28'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'ja 11/9/2020 16:34:28'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'ja 11/9/2020 16:34:28'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'ja 11/9/2020 16:34:28'!
PASSED!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'ja 11/9/2020 16:34:28'!
PASSED!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'ja 11/9/2020 16:34:28'!
PASSED!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'ja 11/9/2020 16:34:28'!
PASSED!
!PortfolioTest methodsFor: 'accounts-adding' stamp: 'ja 11/9/2020 16:36:45' prior: 50960475!
test02EmptyAccountCanBeAddedToPortfolio
	| portfolio account |
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	portfolio register: account.
	self deny: portfolio isEmpty.
	self assert: 1 equals: portfolio amountOfAccounts.
	self assert: 0 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'accounts-adding' stamp: 'ja 11/9/2020 16:38:27'!
xxx: aPortfolio yyy: amountOfAccounts zzz: valueBalance
	
	self deny: aPortfolio isEmpty.
	self assert: amountOfAccounts equals: aPortfolio amountOfAccounts.
	self assert: valueBalance equals: aPortfolio balance.! !
!PortfolioTest methodsFor: 'private' stamp: 'ja 11/9/2020 16:39:51'!
assertWhenAPortfolio: aPortfolio hasAmountOfAccounts: amountOfAccounts andBalance: valueBalance
	
	self deny: aPortfolio isEmpty.
	self assert: amountOfAccounts equals: aPortfolio amountOfAccounts.
	self assert: valueBalance equals: aPortfolio balance.! !

!methodRemoval: PortfolioTest #xxx:yyy:zzz: stamp: 'ja 11/9/2020 16:39:51'!
xxx: aPortfolio yyy: amountOfAccounts zzz: valueBalance
	
	self deny: aPortfolio isEmpty.
	self assert: amountOfAccounts equals: aPortfolio amountOfAccounts.
	self assert: valueBalance equals: aPortfolio balance.!
!PortfolioTest methodsFor: 'accounts-adding' stamp: 'ja 11/9/2020 16:40:29' prior: 50961468!
test02EmptyAccountCanBeAddedToPortfolio
	| portfolio account |
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	portfolio register: account.
	
	self assertWhenAPortfolio: portfolio hasAmountOfAccounts: 1 andBalance: 0.! !

!testRun: #PortfolioTest #test02EmptyAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:40:31'!
PASSED!
!PortfolioTest methodsFor: 'private' stamp: 'ja 11/9/2020 16:41:43'!
assertWhenAPortfolio: aPortfolio hasAmountOfPortfolios: amountOfPortfolios andBalance: valueBalance
	
	self deny: aPortfolio isEmpty.
	self assert: amountOfPortfolios equals: aPortfolio amountOfAccounts.
	self assert: valueBalance equals: aPortfolio balance.! !
!PortfolioTest methodsFor: 'portfolios-adding' stamp: 'ja 11/9/2020 16:43:03' prior: 50960607!
test07EmptyPortfolioCanBeAddedToPortfolio
	| portfolio1 portfolio2 |
	portfolio1 _ Portfolio new.
	portfolio2  _ Portfolio new.
	portfolio1 register: portfolio2.
	
	self assertWhenAPortfolio: portfolio1 hasAmountOfPortfolios: 1 andBalance: 0.! !

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:43:09'!
FAILURE!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:43:09'!
FAILURE!
!PortfolioTest methodsFor: 'portfolios-adding' stamp: 'ja 11/9/2020 16:43:28' prior: 50961535!
test07EmptyPortfolioCanBeAddedToPortfolio
	| portfolio1 portfolio2 |
	portfolio1 _ Portfolio new.
	portfolio2  _ Portfolio new.
	portfolio1 register: portfolio2.
	self deny: portfolio1 isEmpty.
	self assert: 1 equals: portfolio1 amountOfPortfolios.
	self assert: 0 equals: portfolio1 balance .
	
	self assertWhenAPortfolio: portfolio1 hasAmountOfPortfolios: 1 andBalance: 0.! !
!PortfolioTest methodsFor: 'portfolios-adding' stamp: 'ja 11/9/2020 16:45:18' prior: 50961553!
test07EmptyPortfolioCanBeAddedToPortfolio
	| portfolio1 portfolio2 |
	portfolio1 _ Portfolio new.
	portfolio2  _ Portfolio new.
	portfolio1 register: portfolio2.

	
	self assertWhenAPortfolio: portfolio1 hasAmountOfPortfolios: 1 andBalance: 0.! !

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:45:20'!
FAILURE!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:45:20'!
FAILURE!
!PortfolioTest methodsFor: 'private' stamp: 'ja 11/9/2020 16:46:29' prior: 50961523!
assertWhenAPortfolio: aPortfolio hasAmountOfPortfolios: amountOfPortfolios andBalance: valueBalance
	
	self deny: aPortfolio isEmpty.
	self assert: amountOfPortfolios equals: aPortfolio amountOfPortfolios .
	self assert: valueBalance equals: aPortfolio balance.! !

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:46:36'!
PASSED!
!PortfolioTest methodsFor: 'portfolios-adding' stamp: 'ja 11/9/2020 16:46:40' prior: 50961568!
test07EmptyPortfolioCanBeAddedToPortfolio
	| portfolio1 portfolio2 |
	portfolio1 _ Portfolio new.
	portfolio2  _ Portfolio new.
	portfolio1 register: portfolio2.
	
	self assertWhenAPortfolio: portfolio1 hasAmountOfPortfolios: 1 andBalance: 0.! !
!PortfolioTest methodsFor: 'accounts-adding' stamp: 'ja 11/9/2020 16:47:20' prior: 50960487!
test03DepositeOnlyAccountCanBeAddedToPortfolio
	| portfolio account |
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	portfolio register: account.
	
	self assertWhenAPortfolio: portfolio hasAmountOfAccounts: 1 andBalance: 300.! !

!testRun: #PortfolioTest #test03DepositeOnlyAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:47:23'!
PASSED!
!PortfolioTest methodsFor: 'accounts-adding' stamp: 'ja 11/9/2020 16:47:49' prior: 50960503!
test04WithdrawOnlyAccountCanBeAddedToPortfolio
	| portfolio account |
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 1000 on: account.
	Withdraw register: 50 on: account.
	Withdraw register: 50 on: account.
	Withdraw register: 50 on: account.
	portfolio register: account.
	self assertWhenAPortfolio: portfolio hasAmountOfAccounts: 1 andBalance: 850.! !

!testRun: #PortfolioTest #test04WithdrawOnlyAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:47:51'!
PASSED!
!PortfolioTest methodsFor: 'accounts-adding' stamp: 'ja 11/9/2020 16:48:12' prior: 50960542!
test05MultipleTransactionsAccountCanBeAddedToPortfolio
	| portfolio account |
	portfolio _ Portfolio new.
	account  _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.	
	portfolio register: account.
	self assertWhenAPortfolio: portfolio hasAmountOfAccounts: 1  andBalance: 150.! !

!testRun: #PortfolioTest #test05MultipleTransactionsAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:48:15'!
PASSED!
!PortfolioTest methodsFor: 'accounts-adding' stamp: 'ja 11/9/2020 16:48:38' prior: 50961188!
test06MultipleAccountsCanBeAddedToPortfolio
	| portfolio account1 account2 account3 totalBalance |
	portfolio _ Portfolio new.
	account1  _ self accountWithBalanceOf50 .
	account2  _ self accountWithBalanceOf50 .
	account3  _ self accountWithBalanceOf50 .
	portfolio register: account1.
	portfolio register: account2.
	portfolio register: account3.
	totalBalance _ account1 balance + account2 balance + account3 balance.
	
	self assertWhenAPortfolio: portfolio hasAmountOfAccounts: 3 andBalance: totalBalance .! !

!testRun: #PortfolioTest #test02EmptyAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:48:40'!
PASSED!

!testRun: #PortfolioTest #test03DepositeOnlyAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:48:40'!
PASSED!

!testRun: #PortfolioTest #test04WithdrawOnlyAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:48:40'!
PASSED!

!testRun: #PortfolioTest #test05MultipleTransactionsAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:48:40'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:48:40'!
PASSED!
!PortfolioTest methodsFor: 'portfolios-adding' stamp: 'ja 11/9/2020 16:49:11' prior: 50959410!
test08NotEmptyPortfolioCanBeAddedToPortfolio
	| rootPortfolio childPortfolio account1 account2 account3 |
	
	rootPortfolio _ Portfolio new.
	childPortfolio  _ Portfolio new.
	account1  _ self accountWithBalanceOf50 .
	account2  _ self accountWithBalanceOf50 .
	account3  _ self accountWithBalanceOf50 .
	
	childPortfolio register: account1.
	childPortfolio register: account2.
	childPortfolio register: account3.
	rootPortfolio register: childPortfolio.
	self assertWhenAPortfolio: rootPortfolio hasAmountOfPortfolios: 1 andBalance: 150.
	
	! !

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:49:14'!
PASSED!
!PortfolioTest methodsFor: 'portfolios-adding' stamp: 'ja 11/9/2020 16:49:35' prior: 50961213!
test09MultiplePortfoliosCanBeAddedToPortfolio
	| portfolioRoot portfolioChild1 portfolioChild2 account1 account2|
	portfolioRoot _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	account1  _ self accountWithBalanceOf50 .
	account2  _ self accountWithBalanceOf50 .
	portfolioChild1 register: account1.
	portfolioChild2  register: account2.
	portfolioRoot register: portfolioChild1.
	portfolioRoot register: portfolioChild2.
	self assertWhenAPortfolio: portfolioRoot hasAmountOfPortfolios: 2 andBalance: 100.
	
	! !

!testRun: #PortfolioTest #test09MultiplePortfoliosCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:49:39'!
PASSED!

!testRun: #PortfolioTest #test09MultiplePortfoliosCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:49:42'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:49:46'!
PASSED!

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:49:46'!
PASSED!

!testRun: #PortfolioTest #test09MultiplePortfoliosCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:49:46'!
PASSED!

!testRun: #PortfolioTest #test02EmptyAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:49:48'!
PASSED!

!testRun: #PortfolioTest #test03DepositeOnlyAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:49:48'!
PASSED!

!testRun: #PortfolioTest #test04WithdrawOnlyAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:49:48'!
PASSED!

!testRun: #PortfolioTest #test05MultipleTransactionsAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:49:48'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:49:48'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'ja 11/9/2020 16:49:50'!
PASSED!
!PortfolioTest methodsFor: 'portfolios-adding policies' stamp: 'ja 11/9/2020 16:50:41' prior: 50960810!
test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden
	| portfolioRoot1 portfolioChild1 portfolioChild2 portfolioChild3 portfolioChild4 |
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	portfolioChild2 _ Portfolio new.
	portfolioChild3 _ Portfolio new.
	portfolioChild4 _ Portfolio new.
	portfolioRoot1 register: portfolioChild1.
	portfolioChild1 register: portfolioChild2.
	portfolioChild1 register: portfolioChild3.
	portfolioChild3 register: portfolioChild4.
	self should: [ portfolioChild4 register: portfolioChild2 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .
! !
!PortfolioTest methodsFor: 'portfolios-adding policies' stamp: 'ja 11/9/2020 16:51:35' prior: 50960745!
test12PortofolioCantAddItself
	| portfolioRoot |
	portfolioRoot _ Portfolio new.
	self should: [ portfolioRoot register: portfolioRoot . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .
	self assert: 0 equals: portfolioRoot amountOfAccounts.
	self assert: 0 equals: portfolioRoot balance.! !
!PortfolioTest methodsFor: 'portfolios-adding policies' stamp: 'ja 11/9/2020 16:51:44' prior: 50960759!
test13PortfolioCantBeAddedTwiceToSameParent
	| portfolioRoot1 portfolioChild1 account1 |
	portfolioRoot1 _ Portfolio new.
	portfolioChild1 _ Portfolio new.
	account1  _ ReceptiveAccount new.
	Deposit register: 200 on: account1.
	Withdraw register: 50 on: account1.
	portfolioRoot1 register: account1.
	portfolioRoot1 register: portfolioChild1.
	self should: [ portfolioRoot1 register: portfolioChild1 . self fail]  
		raise: Error
		withMessageText: Portfolio cantAddPortfolioErrorDescription .
	self deny: portfolioRoot1 isEmpty.
	self assert: 1 equals: portfolioRoot1 amountOfPortfolios.
	self assert: 1 equals: portfolioRoot1 amountOfAccounts.
	self assert: 150 equals: portfolioRoot1 balance.
	self assert: 0 equals: portfolioChild1 balance.! !

!testRun: #PortfolioTest #test01PortfolioHasNotAccountsWhenCreated stamp: 'ja 11/9/2020 16:53:02'!
PASSED!

!testRun: #PortfolioTest #test02EmptyAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:53:02'!
PASSED!

!testRun: #PortfolioTest #test03DepositeOnlyAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:53:02'!
PASSED!

!testRun: #PortfolioTest #test04WithdrawOnlyAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:53:02'!
PASSED!

!testRun: #PortfolioTest #test05MultipleTransactionsAccountCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:53:02'!
PASSED!

!testRun: #PortfolioTest #test06MultipleAccountsCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:53:02'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:53:02'!
PASSED!

!testRun: #PortfolioTest #test08NotEmptyPortfolioCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:53:02'!
PASSED!

!testRun: #PortfolioTest #test09MultiplePortfoliosCanBeAddedToPortfolio stamp: 'ja 11/9/2020 16:53:02'!
PASSED!

!testRun: #PortfolioTest #test10ChildCouldHaveManyParents stamp: 'ja 11/9/2020 16:53:02'!
PASSED!

!testRun: #PortfolioTest #test11ChildrenCouldHaveManyParents stamp: 'ja 11/9/2020 16:53:02'!
PASSED!

!testRun: #PortfolioTest #test12PortofolioCantAddItself stamp: 'ja 11/9/2020 16:53:02'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantBeAddedTwiceToSameParent stamp: 'ja 11/9/2020 16:53:02'!
PASSED!

!testRun: #PortfolioTest #test14CyclesWithParentOnSingleParentNodeAreForbidden stamp: 'ja 11/9/2020 16:53:02'!
PASSED!

!testRun: #PortfolioTest #test15CyclesWithOtherNodeOnSingleParentNodeAreForbidden stamp: 'ja 11/9/2020 16:53:02'!
PASSED!

!testRun: #PortfolioTest #test16CyclesWithParentOnMultipleParentNodeAreForbidden stamp: 'ja 11/9/2020 16:53:02'!
PASSED!

!testRun: #PortfolioTest #test17CyclesWithOtherNodeOnMultipleParentNodeAreForbidden stamp: 'ja 11/9/2020 16:53:02'!
PASSED!

!testRun: #PortfolioTest #test18AccountAlreadyInPortfolioCantBeAddedToAnotherPortfolioOfSameTree stamp: 'ja 11/9/2020 16:53:02'!
PASSED!

!testRun: #PortfolioTest #test19MultilevelBalance stamp: 'ja 11/9/2020 16:53:02'!
PASSED!

!testRun: #PortfolioTest #test20MultilevelTransactions stamp: 'ja 11/9/2020 16:53:02'!
PASSED!

!testRun: #PortfolioTest #test21MultilevelHasRegistered stamp: 'ja 11/9/2020 16:53:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'ja 11/9/2020 16:53:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'ja 11/9/2020 16:53:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'ja 11/9/2020 16:53:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'ja 11/9/2020 16:53:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'ja 11/9/2020 16:53:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'ja 11/9/2020 16:53:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'ja 11/9/2020 16:53:06'!
PASSED!