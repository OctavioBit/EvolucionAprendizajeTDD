

----STARTUP---- (29 October 2020 17:31:37) as /home/franco/Documents/smallTalk/linux64/CuisUniversity-4383.image!


TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'FD 10/29/2020 17:33:05'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FD 10/29/2020 17:48:01'!
Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliTest methodsFor: 'nil' stamp: 'FD 10/29/2020 17:47:52'!
test01AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:48:23'!
test02AfterPlayer0goesX! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:49:16'!
test03AGameWithThreeXInTheFirstLineHasEnded! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:32'!
test02AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	! !

!methodRemoval: TerniLapilliTest #test01AfterPlayerXgoes0 stamp: 'FD 10/29/2020 17:59:32'!
test01AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:39'!
test03AfterPlayer0goesX! !

!methodRemoval: TerniLapilliTest #test02AfterPlayer0goesX stamp: 'FD 10/29/2020 17:59:39'!
test02AfterPlayer0goesX!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:45'!
test04AGameWithThreeXInTheFirstLineHasEnded! !

!methodRemoval: TerniLapilliTest #test03AGameWithThreeXInTheFirstLineHasEnded stamp: 'FD 10/29/2020 17:59:45'!
test03AGameWithThreeXInTheFirstLineHasEnded!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:00:05'!
test01PlayerXStartsPlaying

	| game |
	
	game := TerniLapilli new.
	
	self assert: game isPlayingX.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:12:07'!
test04AGameWithThreeXInTheFirstLineIsAnXWin! !

!methodRemoval: TerniLapilliTest #test04AGameWithThreeXInTheFirstLineHasEnded stamp: 'FD 10/29/2020 18:12:10'!
test04AGameWithThreeXInTheFirstLineHasEnded!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 18:13:09'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:13:41'!
isPlayingX
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:13:57' prior: 50893279!
isPlayingX
	^true.! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 18:14:06'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 18:14:06'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 18:14:06'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 18:14:06'!
PASSED!

!testRun: #TerniLapilliTest #test04AGameWithThreeXInTheFirstLineIsAnXWin stamp: 'FD 10/29/2020 18:14:06'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 18:14:06'!
ERROR!
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:14:59'!
putXAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:15:50' prior: 50893305!
putXAt: aPoint 
	! !

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 18:15:52'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:16:05'!
isPlaying0
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:16:15' prior: 50893316!
isPlaying0
	^true.! !

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 18:16:21'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 18:16:25'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 18:16:25'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 18:16:25'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 18:16:25'!
PASSED!

!testRun: #TerniLapilliTest #test04AGameWithThreeXInTheFirstLineIsAnXWin stamp: 'FD 10/29/2020 18:16:25'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:17:37' prior: 50893243!
test03AfterPlayer0goesX

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0AtX: 0@1.
	
	self assert: game isPlayingX.! !

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 18:17:56'!
ERROR!
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:18:03'!
put0AtX: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:18:07' prior: 50893353!
put0AtX: aPoint 
	! !

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 18:18:08'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 18:18:08'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 18:18:08'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 18:18:08'!
PASSED!

!testRun: #TerniLapilliTest #test04AGameWithThreeXInTheFirstLineIsAnXWin stamp: 'FD 10/29/2020 18:18:08'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 18:18:13'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 18:18:13'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 18:18:13'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 18:18:13'!
PASSED!

!testRun: #TerniLapilliTest #test04AGameWithThreeXInTheFirstLineIsAnXWin stamp: 'FD 10/29/2020 18:18:13'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:18:54' prior: 50893343!
test03AfterPlayer0goesX

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 0@1.
	
	self assert: game isPlayingX.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:19:09'!
put0At: aPoint 
	! !

!methodRemoval: TerniLapilli #put0AtX: stamp: 'FD 10/29/2020 18:19:09'!
put0AtX: aPoint 
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:19:30'!
test05AGameWithThreeXInTheFirstLineIsAnXWin! !

!methodRemoval: TerniLapilliTest #test04AGameWithThreeXInTheFirstLineIsAnXWin stamp: 'FD 10/29/2020 18:19:30'!
test04AGameWithThreeXInTheFirstLineIsAnXWin!

!methodRemoval: TerniLapilliTest #test05AGameWithThreeXInTheFirstLineIsAnXWin stamp: 'FD 10/29/2020 18:19:35'!
test05AGameWithThreeXInTheFirstLineIsAnXWin!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:22:11'!
test04WhenXIsPlaying0IsNot

	| game |
	
	game := TerniLapilli new.
	
	self deny: game isPlayingX.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:22:44'!
test05When0IsPlayingXIsNot

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self deny: game isPlaying0.! !

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 18:22:47'!
FAILURE!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 18:23:13'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:23:29' prior: 50893421!
test04WhenXIsPlaying0IsNot

	| game |
	
	game := TerniLapilli new.
	
	self deny: game isPlaying0.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:23:37' prior: 50893427!
test05When0IsPlayingXIsNot

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self deny: game isPlayingX.! !

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 18:23:40'!
FAILURE!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:26:01'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentlyPlaying'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:25:58' prior: 50893320!
isPlaying0
	^currentlyPlaying = '0'.! !

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 18:26:10'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 18:26:10'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 18:26:10'!
FAILURE!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 18:26:10'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 18:26:10'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 18:26:10'!
FAILURE!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 18:26:16'!
FAILURE!
!Behavior methodsFor: 'instance creation' stamp: 'FD 10/29/2020 18:27:31' prior: 16783533!
new
	"Answer a new initialized instance of the receiver (which is a class) with no indexable variables. Fail if the class is indexable."

	^ self new initialize
! !

----STARTUP---- (29 October 2020 18:31:54) as /home/franco/Documents/smallTalk/linux64/CuisUniversity-4383.image!


!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:32:32'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:32:32'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:32:32'!
Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliTest methodsFor: 'nil' stamp: 'FD 10/29/2020 17:47:52'!
test01AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:48:23'!
test02AfterPlayer0goesX! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:49:16'!
test03AGameWithThreeXInTheFirstLineHasEnded! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:32'!
test02AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	! !

!methodRemoval: TerniLapilliTest #test01AfterPlayerXgoes0 stamp: 'FD 10/29/2020 18:32:32'!
test01AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:39'!
test03AfterPlayer0goesX! !

!methodRemoval: TerniLapilliTest #test02AfterPlayer0goesX stamp: 'FD 10/29/2020 18:32:32'!
test02AfterPlayer0goesX!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:45'!
test04AGameWithThreeXInTheFirstLineHasEnded! !

!methodRemoval: TerniLapilliTest #test03AGameWithThreeXInTheFirstLineHasEnded stamp: 'FD 10/29/2020 18:32:32'!
test03AGameWithThreeXInTheFirstLineHasEnded!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:00:05'!
test01PlayerXStartsPlaying

	| game |
	
	game := TerniLapilli new.
	
	self assert: game isPlayingX.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:12:07'!
test04AGameWithThreeXInTheFirstLineIsAnXWin! !

!methodRemoval: TerniLapilliTest #test04AGameWithThreeXInTheFirstLineHasEnded stamp: 'FD 10/29/2020 18:32:32'!
test04AGameWithThreeXInTheFirstLineHasEnded!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:13:41'!
isPlayingX
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:13:57' prior: 50893587!
isPlayingX
	^true.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:14:59'!
putXAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:15:50' prior: 50893594!
putXAt: aPoint 
	! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:16:05'!
isPlaying0
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:16:15' prior: 50893602!
isPlaying0
	^true.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:17:37' prior: 50893554!
test03AfterPlayer0goesX

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0AtX: 0@1.
	
	self assert: game isPlayingX.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:18:03'!
put0AtX: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:18:07' prior: 50893617!
put0AtX: aPoint 
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:18:54' prior: 50893610!
test03AfterPlayer0goesX

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 0@1.
	
	self assert: game isPlayingX.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:19:09'!
put0At: aPoint 
	! !

!methodRemoval: TerniLapilli #put0AtX: stamp: 'FD 10/29/2020 18:32:32'!
put0AtX: aPoint 
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:19:30'!
test05AGameWithThreeXInTheFirstLineIsAnXWin! !

!methodRemoval: TerniLapilliTest #test04AGameWithThreeXInTheFirstLineIsAnXWin stamp: 'FD 10/29/2020 18:32:32'!
test04AGameWithThreeXInTheFirstLineIsAnXWin!

!methodRemoval: TerniLapilliTest #test05AGameWithThreeXInTheFirstLineIsAnXWin stamp: 'FD 10/29/2020 18:32:32'!
test05AGameWithThreeXInTheFirstLineIsAnXWin!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:22:11'!
test04WhenXIsPlaying0IsNot

	| game |
	
	game := TerniLapilli new.
	
	self deny: game isPlayingX.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:22:44'!
test05When0IsPlayingXIsNot

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self deny: game isPlaying0.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:23:29' prior: 50893654!
test04WhenXIsPlaying0IsNot

	| game |
	
	game := TerniLapilli new.
	
	self deny: game isPlaying0.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:23:37' prior: 50893660!
test05When0IsPlayingXIsNot

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self deny: game isPlayingX.! !

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:32:32'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentlyPlaying'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:25:58' prior: 50893606!
isPlaying0
	^currentlyPlaying = '0'.! !
!Behavior methodsFor: 'instance creation' stamp: 'FD 10/29/2020 18:27:31' prior: 16783533!
new
	"Answer a new initialized instance of the receiver (which is a class) with no indexable variables. Fail if the class is indexable."

	^ self new initialize
! !

----STARTUP---- (29 October 2020 18:32:53) as /home/franco/Documents/smallTalk/linux64/CuisUniversity-4383.image!


!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:33:41'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:33:41'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:33:41'!
Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliTest methodsFor: 'nil' stamp: 'FD 10/29/2020 17:47:52'!
test01AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:48:23'!
test02AfterPlayer0goesX! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:49:16'!
test03AGameWithThreeXInTheFirstLineHasEnded! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:32'!
test02AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	! !

!methodRemoval: TerniLapilliTest #test01AfterPlayerXgoes0 stamp: 'FD 10/29/2020 18:33:41'!
test01AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:39'!
test03AfterPlayer0goesX! !

!methodRemoval: TerniLapilliTest #test02AfterPlayer0goesX stamp: 'FD 10/29/2020 18:33:41'!
test02AfterPlayer0goesX!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:45'!
test04AGameWithThreeXInTheFirstLineHasEnded! !

!methodRemoval: TerniLapilliTest #test03AGameWithThreeXInTheFirstLineHasEnded stamp: 'FD 10/29/2020 18:33:41'!
test03AGameWithThreeXInTheFirstLineHasEnded!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:00:05'!
test01PlayerXStartsPlaying

	| game |
	
	game := TerniLapilli new.
	
	self assert: game isPlayingX.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:12:07'!
test04AGameWithThreeXInTheFirstLineIsAnXWin! !

!methodRemoval: TerniLapilliTest #test04AGameWithThreeXInTheFirstLineHasEnded stamp: 'FD 10/29/2020 18:33:41'!
test04AGameWithThreeXInTheFirstLineHasEnded!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:13:41'!
isPlayingX
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:13:57' prior: 50893789!
isPlayingX
	^true.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:14:59'!
putXAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:15:50' prior: 50893796!
putXAt: aPoint 
	! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:16:05'!
isPlaying0
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:16:15' prior: 50893804!
isPlaying0
	^true.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:17:37' prior: 50893756!
test03AfterPlayer0goesX

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0AtX: 0@1.
	
	self assert: game isPlayingX.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:18:03'!
put0AtX: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:18:07' prior: 50893819!
put0AtX: aPoint 
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:18:54' prior: 50893812!
test03AfterPlayer0goesX

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 0@1.
	
	self assert: game isPlayingX.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:19:09'!
put0At: aPoint 
	! !

!methodRemoval: TerniLapilli #put0AtX: stamp: 'FD 10/29/2020 18:33:42'!
put0AtX: aPoint 
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:19:30'!
test05AGameWithThreeXInTheFirstLineIsAnXWin! !

!methodRemoval: TerniLapilliTest #test04AGameWithThreeXInTheFirstLineIsAnXWin stamp: 'FD 10/29/2020 18:33:42'!
test04AGameWithThreeXInTheFirstLineIsAnXWin!

!methodRemoval: TerniLapilliTest #test05AGameWithThreeXInTheFirstLineIsAnXWin stamp: 'FD 10/29/2020 18:33:42'!
test05AGameWithThreeXInTheFirstLineIsAnXWin!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:22:11'!
test04WhenXIsPlaying0IsNot

	| game |
	
	game := TerniLapilli new.
	
	self deny: game isPlayingX.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:22:44'!
test05When0IsPlayingXIsNot

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self deny: game isPlaying0.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:23:29' prior: 50893856!
test04WhenXIsPlaying0IsNot

	| game |
	
	game := TerniLapilli new.
	
	self deny: game isPlaying0.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:23:37' prior: 50893862!
test05When0IsPlayingXIsNot

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self deny: game isPlayingX.! !

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:33:42'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentlyPlaying'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:25:58' prior: 50893808!
isPlaying0
	^currentlyPlaying = '0'.! !
!Behavior methodsFor: 'instance creation' stamp: 'FD 10/29/2020 18:27:31' prior: 16783533!
new
	"Answer a new initialized instance of the receiver (which is a class) with no indexable variables. Fail if the class is indexable."

	^ self new initialize
! !

----STARTUP---- (29 October 2020 18:34:03) as /home/franco/Documents/smallTalk/linux64/CuisUniversity-4383.image!


!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:34:05'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:34:05'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:34:05'!
Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliTest methodsFor: 'nil' stamp: 'FD 10/29/2020 17:47:52'!
test01AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:48:23'!
test02AfterPlayer0goesX! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:49:16'!
test03AGameWithThreeXInTheFirstLineHasEnded! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:32'!
test02AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	! !

!methodRemoval: TerniLapilliTest #test01AfterPlayerXgoes0 stamp: 'FD 10/29/2020 18:34:05'!
test01AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:39'!
test03AfterPlayer0goesX! !

!methodRemoval: TerniLapilliTest #test02AfterPlayer0goesX stamp: 'FD 10/29/2020 18:34:05'!
test02AfterPlayer0goesX!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:45'!
test04AGameWithThreeXInTheFirstLineHasEnded! !

!methodRemoval: TerniLapilliTest #test03AGameWithThreeXInTheFirstLineHasEnded stamp: 'FD 10/29/2020 18:34:05'!
test03AGameWithThreeXInTheFirstLineHasEnded!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:00:05'!
test01PlayerXStartsPlaying

	| game |
	
	game := TerniLapilli new.
	
	self assert: game isPlayingX.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:12:07'!
test04AGameWithThreeXInTheFirstLineIsAnXWin! !

!methodRemoval: TerniLapilliTest #test04AGameWithThreeXInTheFirstLineHasEnded stamp: 'FD 10/29/2020 18:34:05'!
test04AGameWithThreeXInTheFirstLineHasEnded!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:13:41'!
isPlayingX
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:13:57' prior: 50893991!
isPlayingX
	^true.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:14:59'!
putXAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:15:50' prior: 50893998!
putXAt: aPoint 
	! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:16:05'!
isPlaying0
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:16:15' prior: 50894006!
isPlaying0
	^true.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:17:37' prior: 50893958!
test03AfterPlayer0goesX

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0AtX: 0@1.
	
	self assert: game isPlayingX.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:18:03'!
put0AtX: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:18:07' prior: 50894021!
put0AtX: aPoint 
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:18:54' prior: 50894014!
test03AfterPlayer0goesX

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 0@1.
	
	self assert: game isPlayingX.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:19:09'!
put0At: aPoint 
	! !

!methodRemoval: TerniLapilli #put0AtX: stamp: 'FD 10/29/2020 18:34:05'!
put0AtX: aPoint 
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:19:30'!
test05AGameWithThreeXInTheFirstLineIsAnXWin! !

!methodRemoval: TerniLapilliTest #test04AGameWithThreeXInTheFirstLineIsAnXWin stamp: 'FD 10/29/2020 18:34:05'!
test04AGameWithThreeXInTheFirstLineIsAnXWin!

!methodRemoval: TerniLapilliTest #test05AGameWithThreeXInTheFirstLineIsAnXWin stamp: 'FD 10/29/2020 18:34:05'!
test05AGameWithThreeXInTheFirstLineIsAnXWin!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:22:11'!
test04WhenXIsPlaying0IsNot

	| game |
	
	game := TerniLapilli new.
	
	self deny: game isPlayingX.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:22:44'!
test05When0IsPlayingXIsNot

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self deny: game isPlaying0.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:23:29' prior: 50894058!
test04WhenXIsPlaying0IsNot

	| game |
	
	game := TerniLapilli new.
	
	self deny: game isPlaying0.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:23:37' prior: 50894064!
test05When0IsPlayingXIsNot

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self deny: game isPlayingX.! !

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:34:05'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentlyPlaying'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:25:58' prior: 50894010!
isPlaying0
	^currentlyPlaying = '0'.! !
!Behavior methodsFor: 'instance creation' stamp: 'FD 10/29/2020 18:27:31' prior: 16783533!
new
	"Answer a new initialized instance of the receiver (which is a class) with no indexable variables. Fail if the class is indexable."

	^ self new initialize
! !

----STARTUP---- (29 October 2020 18:34:10) as /home/franco/Documents/smallTalk/linux64/CuisUniversity-4383.image!


!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:34:47'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:34:47'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:34:47'!
Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliTest methodsFor: 'nil' stamp: 'FD 10/29/2020 17:47:52'!
test01AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:48:23'!
test02AfterPlayer0goesX! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:49:16'!
test03AGameWithThreeXInTheFirstLineHasEnded! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:32'!
test02AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	! !

!methodRemoval: TerniLapilliTest #test01AfterPlayerXgoes0 stamp: 'FD 10/29/2020 18:34:47'!
test01AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:39'!
test03AfterPlayer0goesX! !

!methodRemoval: TerniLapilliTest #test02AfterPlayer0goesX stamp: 'FD 10/29/2020 18:34:47'!
test02AfterPlayer0goesX!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:45'!
test04AGameWithThreeXInTheFirstLineHasEnded! !

!methodRemoval: TerniLapilliTest #test03AGameWithThreeXInTheFirstLineHasEnded stamp: 'FD 10/29/2020 18:34:47'!
test03AGameWithThreeXInTheFirstLineHasEnded!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:00:05'!
test01PlayerXStartsPlaying

	| game |
	
	game := TerniLapilli new.
	
	self assert: game isPlayingX.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:12:07'!
test04AGameWithThreeXInTheFirstLineIsAnXWin! !

!methodRemoval: TerniLapilliTest #test04AGameWithThreeXInTheFirstLineHasEnded stamp: 'FD 10/29/2020 18:34:47'!
test04AGameWithThreeXInTheFirstLineHasEnded!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:13:41'!
isPlayingX
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:13:57' prior: 50894193!
isPlayingX
	^true.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:14:59'!
putXAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:15:50' prior: 50894200!
putXAt: aPoint 
	! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:16:05'!
isPlaying0
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:16:15' prior: 50894208!
isPlaying0
	^true.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:17:37' prior: 50894160!
test03AfterPlayer0goesX

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0AtX: 0@1.
	
	self assert: game isPlayingX.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:18:03'!
put0AtX: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:18:07' prior: 50894223!
put0AtX: aPoint 
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:18:54' prior: 50894216!
test03AfterPlayer0goesX

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 0@1.
	
	self assert: game isPlayingX.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:19:09'!
put0At: aPoint 
	! !

!methodRemoval: TerniLapilli #put0AtX: stamp: 'FD 10/29/2020 18:34:47'!
put0AtX: aPoint 
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:19:30'!
test05AGameWithThreeXInTheFirstLineIsAnXWin! !

!methodRemoval: TerniLapilliTest #test04AGameWithThreeXInTheFirstLineIsAnXWin stamp: 'FD 10/29/2020 18:34:47'!
test04AGameWithThreeXInTheFirstLineIsAnXWin!

!methodRemoval: TerniLapilliTest #test05AGameWithThreeXInTheFirstLineIsAnXWin stamp: 'FD 10/29/2020 18:34:47'!
test05AGameWithThreeXInTheFirstLineIsAnXWin!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:22:11'!
test04WhenXIsPlaying0IsNot

	| game |
	
	game := TerniLapilli new.
	
	self deny: game isPlayingX.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:22:44'!
test05When0IsPlayingXIsNot

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self deny: game isPlaying0.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:23:29' prior: 50894260!
test04WhenXIsPlaying0IsNot

	| game |
	
	game := TerniLapilli new.
	
	self deny: game isPlaying0.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:23:37' prior: 50894266!
test05When0IsPlayingXIsNot

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self deny: game isPlayingX.! !

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:34:47'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentlyPlaying'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:25:58' prior: 50894212!
isPlaying0
	^currentlyPlaying = '0'.! !
!Behavior methodsFor: 'instance creation' stamp: 'FD 10/29/2020 18:27:31' prior: 16783533!
new
	"Answer a new initialized instance of the receiver (which is a class) with no indexable variables. Fail if the class is indexable."

	^ self new initialize
! !

----STARTUP---- (29 October 2020 18:34:56) as /home/franco/Documents/smallTalk/linux64/CuisUniversity-4383.image!


!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:36:48'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:36:48'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:36:48'!
Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliTest methodsFor: 'nil' stamp: 'FD 10/29/2020 17:47:52'!
test01AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:48:23'!
test02AfterPlayer0goesX! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:49:16'!
test03AGameWithThreeXInTheFirstLineHasEnded! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:32'!
test02AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	! !

!methodRemoval: TerniLapilliTest #test01AfterPlayerXgoes0 stamp: 'FD 10/29/2020 18:36:48'!
test01AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:39'!
test03AfterPlayer0goesX! !

!methodRemoval: TerniLapilliTest #test02AfterPlayer0goesX stamp: 'FD 10/29/2020 18:36:48'!
test02AfterPlayer0goesX!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:45'!
test04AGameWithThreeXInTheFirstLineHasEnded! !

!methodRemoval: TerniLapilliTest #test03AGameWithThreeXInTheFirstLineHasEnded stamp: 'FD 10/29/2020 18:36:48'!
test03AGameWithThreeXInTheFirstLineHasEnded!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:00:05'!
test01PlayerXStartsPlaying

	| game |
	
	game := TerniLapilli new.
	
	self assert: game isPlayingX.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:12:07'!
test04AGameWithThreeXInTheFirstLineIsAnXWin! !

!methodRemoval: TerniLapilliTest #test04AGameWithThreeXInTheFirstLineHasEnded stamp: 'FD 10/29/2020 18:36:48'!
test04AGameWithThreeXInTheFirstLineHasEnded!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:13:41'!
isPlayingX
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:13:57' prior: 50894395!
isPlayingX
	^true.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:14:59'!
putXAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:15:50' prior: 50894402!
putXAt: aPoint 
	! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:16:05'!
isPlaying0
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:16:15' prior: 50894410!
isPlaying0
	^true.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:17:37' prior: 50894362!
test03AfterPlayer0goesX

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0AtX: 0@1.
	
	self assert: game isPlayingX.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:18:03'!
put0AtX: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:18:07' prior: 50894425!
put0AtX: aPoint 
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:18:54' prior: 50894418!
test03AfterPlayer0goesX

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 0@1.
	
	self assert: game isPlayingX.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:19:09'!
put0At: aPoint 
	! !

!methodRemoval: TerniLapilli #put0AtX: stamp: 'FD 10/29/2020 18:36:48'!
put0AtX: aPoint 
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:19:30'!
test05AGameWithThreeXInTheFirstLineIsAnXWin! !

!methodRemoval: TerniLapilliTest #test04AGameWithThreeXInTheFirstLineIsAnXWin stamp: 'FD 10/29/2020 18:36:48'!
test04AGameWithThreeXInTheFirstLineIsAnXWin!

!methodRemoval: TerniLapilliTest #test05AGameWithThreeXInTheFirstLineIsAnXWin stamp: 'FD 10/29/2020 18:36:48'!
test05AGameWithThreeXInTheFirstLineIsAnXWin!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:22:11'!
test04WhenXIsPlaying0IsNot

	| game |
	
	game := TerniLapilli new.
	
	self deny: game isPlayingX.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:22:44'!
test05When0IsPlayingXIsNot

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self deny: game isPlaying0.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:23:29' prior: 50894462!
test04WhenXIsPlaying0IsNot

	| game |
	
	game := TerniLapilli new.
	
	self deny: game isPlaying0.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:23:37' prior: 50894468!
test05When0IsPlayingXIsNot

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self deny: game isPlayingX.! !

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:36:49'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentlyPlaying'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:25:58' prior: 50894414!
isPlaying0
	^currentlyPlaying = '0'.! !

!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:36:49'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:36:49'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:36:49'!
Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliTest methodsFor: 'nil' stamp: 'FD 10/29/2020 17:47:52'!
test01AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:48:23'!
test02AfterPlayer0goesX! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:49:16'!
test03AGameWithThreeXInTheFirstLineHasEnded! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:32' prior: 50894348!
test02AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	! !

!methodRemoval: TerniLapilliTest #test01AfterPlayerXgoes0 stamp: 'FD 10/29/2020 18:36:49'!
test01AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:39' prior: 50894434!
test03AfterPlayer0goesX! !

!methodRemoval: TerniLapilliTest #test02AfterPlayer0goesX stamp: 'FD 10/29/2020 18:36:49'!
test02AfterPlayer0goesX!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:45'!
test04AGameWithThreeXInTheFirstLineHasEnded! !

!methodRemoval: TerniLapilliTest #test03AGameWithThreeXInTheFirstLineHasEnded stamp: 'FD 10/29/2020 18:36:49'!
test03AGameWithThreeXInTheFirstLineHasEnded!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:00:05' prior: 50894380!
test01PlayerXStartsPlaying

	| game |
	
	game := TerniLapilli new.
	
	self assert: game isPlayingX.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:12:07'!
test04AGameWithThreeXInTheFirstLineIsAnXWin! !

!methodRemoval: TerniLapilliTest #test04AGameWithThreeXInTheFirstLineHasEnded stamp: 'FD 10/29/2020 18:36:49'!
test04AGameWithThreeXInTheFirstLineHasEnded!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:13:41' prior: 50894399!
isPlayingX
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:13:57' prior: 50894585!
isPlayingX
	^true.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:14:59' prior: 50894407!
putXAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:15:50' prior: 50894593!
putXAt: aPoint 
	! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:16:05' prior: 50894496!
isPlaying0
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:16:15' prior: 50894602!
isPlaying0
	^true.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:17:37' prior: 50894551!
test03AfterPlayer0goesX

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0AtX: 0@1.
	
	self assert: game isPlayingX.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:18:03'!
put0AtX: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:18:07' prior: 50894617!
put0AtX: aPoint 
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:18:54' prior: 50894610!
test03AfterPlayer0goesX

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 0@1.
	
	self assert: game isPlayingX.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:19:09' prior: 50894441!
put0At: aPoint 
	! !

!methodRemoval: TerniLapilli #put0AtX: stamp: 'FD 10/29/2020 18:36:49'!
put0AtX: aPoint 
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:19:30'!
test05AGameWithThreeXInTheFirstLineIsAnXWin! !

!methodRemoval: TerniLapilliTest #test04AGameWithThreeXInTheFirstLineIsAnXWin stamp: 'FD 10/29/2020 18:36:49'!
test04AGameWithThreeXInTheFirstLineIsAnXWin!

!methodRemoval: TerniLapilliTest #test05AGameWithThreeXInTheFirstLineIsAnXWin stamp: 'FD 10/29/2020 18:36:49'!
test05AGameWithThreeXInTheFirstLineIsAnXWin!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:22:11' prior: 50894475!
test04WhenXIsPlaying0IsNot

	| game |
	
	game := TerniLapilli new.
	
	self deny: game isPlayingX.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:22:44' prior: 50894482!
test05When0IsPlayingXIsNot

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self deny: game isPlaying0.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:23:29' prior: 50894656!
test04WhenXIsPlaying0IsNot

	| game |
	
	game := TerniLapilli new.
	
	self deny: game isPlaying0.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:23:37' prior: 50894663!
test05When0IsPlayingXIsNot

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self deny: game isPlayingX.! !

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:36:49'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentlyPlaying'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:25:58' prior: 50894606!
isPlaying0
	^currentlyPlaying = '0'.! !

!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:36:49'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:36:49'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:36:49'!
Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliTest methodsFor: 'nil' stamp: 'FD 10/29/2020 17:47:52'!
test01AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:48:23'!
test02AfterPlayer0goesX! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:49:16'!
test03AGameWithThreeXInTheFirstLineHasEnded! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:32' prior: 50894537!
test02AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	! !

!methodRemoval: TerniLapilliTest #test01AfterPlayerXgoes0 stamp: 'FD 10/29/2020 18:36:49'!
test01AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:39' prior: 50894626!
test03AfterPlayer0goesX! !

!methodRemoval: TerniLapilliTest #test02AfterPlayer0goesX stamp: 'FD 10/29/2020 18:36:49'!
test02AfterPlayer0goesX!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:45'!
test04AGameWithThreeXInTheFirstLineHasEnded! !

!methodRemoval: TerniLapilliTest #test03AGameWithThreeXInTheFirstLineHasEnded stamp: 'FD 10/29/2020 18:36:49'!
test03AGameWithThreeXInTheFirstLineHasEnded!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:00:05' prior: 50894569!
test01PlayerXStartsPlaying

	| game |
	
	game := TerniLapilli new.
	
	self assert: game isPlayingX.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:12:07'!
test04AGameWithThreeXInTheFirstLineIsAnXWin! !

!methodRemoval: TerniLapilliTest #test04AGameWithThreeXInTheFirstLineHasEnded stamp: 'FD 10/29/2020 18:36:49'!
test04AGameWithThreeXInTheFirstLineHasEnded!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:13:41' prior: 50894589!
isPlayingX
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:13:57' prior: 50894780!
isPlayingX
	^true.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:14:59' prior: 50894598!
putXAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:15:50' prior: 50894788!
putXAt: aPoint 
	! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:16:05' prior: 50894691!
isPlaying0
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:16:15' prior: 50894797!
isPlaying0
	^true.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:17:37' prior: 50894746!
test03AfterPlayer0goesX

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0AtX: 0@1.
	
	self assert: game isPlayingX.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:18:03'!
put0AtX: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:18:07' prior: 50894812!
put0AtX: aPoint 
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:18:54' prior: 50894805!
test03AfterPlayer0goesX

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 0@1.
	
	self assert: game isPlayingX.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:19:09' prior: 50894634!
put0At: aPoint 
	! !

!methodRemoval: TerniLapilli #put0AtX: stamp: 'FD 10/29/2020 18:36:49'!
put0AtX: aPoint 
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:19:30'!
test05AGameWithThreeXInTheFirstLineIsAnXWin! !

!methodRemoval: TerniLapilliTest #test04AGameWithThreeXInTheFirstLineIsAnXWin stamp: 'FD 10/29/2020 18:36:49'!
test04AGameWithThreeXInTheFirstLineIsAnXWin!

!methodRemoval: TerniLapilliTest #test05AGameWithThreeXInTheFirstLineIsAnXWin stamp: 'FD 10/29/2020 18:36:49'!
test05AGameWithThreeXInTheFirstLineIsAnXWin!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:22:11' prior: 50894670!
test04WhenXIsPlaying0IsNot

	| game |
	
	game := TerniLapilli new.
	
	self deny: game isPlayingX.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:22:44' prior: 50894677!
test05When0IsPlayingXIsNot

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self deny: game isPlaying0.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:23:29' prior: 50894851!
test04WhenXIsPlaying0IsNot

	| game |
	
	game := TerniLapilli new.
	
	self deny: game isPlaying0.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:23:37' prior: 50894858!
test05When0IsPlayingXIsNot

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self deny: game isPlayingX.! !

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:36:49'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentlyPlaying'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:25:58' prior: 50894801!
isPlaying0
	^currentlyPlaying = '0'.! !

!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:36:49'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:36:49'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:36:49'!
Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliTest methodsFor: 'nil' stamp: 'FD 10/29/2020 17:47:52'!
test01AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:48:23'!
test02AfterPlayer0goesX! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:49:16'!
test03AGameWithThreeXInTheFirstLineHasEnded! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:32' prior: 50894732!
test02AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	! !

!methodRemoval: TerniLapilliTest #test01AfterPlayerXgoes0 stamp: 'FD 10/29/2020 18:36:49'!
test01AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:39' prior: 50894821!
test03AfterPlayer0goesX! !

!methodRemoval: TerniLapilliTest #test02AfterPlayer0goesX stamp: 'FD 10/29/2020 18:36:49'!
test02AfterPlayer0goesX!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:45'!
test04AGameWithThreeXInTheFirstLineHasEnded! !

!methodRemoval: TerniLapilliTest #test03AGameWithThreeXInTheFirstLineHasEnded stamp: 'FD 10/29/2020 18:36:49'!
test03AGameWithThreeXInTheFirstLineHasEnded!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:00:05' prior: 50894764!
test01PlayerXStartsPlaying

	| game |
	
	game := TerniLapilli new.
	
	self assert: game isPlayingX.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:12:07'!
test04AGameWithThreeXInTheFirstLineIsAnXWin! !

!methodRemoval: TerniLapilliTest #test04AGameWithThreeXInTheFirstLineHasEnded stamp: 'FD 10/29/2020 18:36:49'!
test04AGameWithThreeXInTheFirstLineHasEnded!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:13:41' prior: 50894784!
isPlayingX
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:13:57' prior: 50894975!
isPlayingX
	^true.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:14:59' prior: 50894793!
putXAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:15:50' prior: 50894983!
putXAt: aPoint 
	! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:16:05' prior: 50894886!
isPlaying0
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:16:15' prior: 50894992!
isPlaying0
	^true.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:17:37' prior: 50894941!
test03AfterPlayer0goesX

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0AtX: 0@1.
	
	self assert: game isPlayingX.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:18:03'!
put0AtX: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:18:07' prior: 50895007!
put0AtX: aPoint 
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:18:54' prior: 50895000!
test03AfterPlayer0goesX

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 0@1.
	
	self assert: game isPlayingX.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:19:09' prior: 50894829!
put0At: aPoint 
	! !

!methodRemoval: TerniLapilli #put0AtX: stamp: 'FD 10/29/2020 18:36:50'!
put0AtX: aPoint 
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:19:30'!
test05AGameWithThreeXInTheFirstLineIsAnXWin! !

!methodRemoval: TerniLapilliTest #test04AGameWithThreeXInTheFirstLineIsAnXWin stamp: 'FD 10/29/2020 18:36:50'!
test04AGameWithThreeXInTheFirstLineIsAnXWin!

!methodRemoval: TerniLapilliTest #test05AGameWithThreeXInTheFirstLineIsAnXWin stamp: 'FD 10/29/2020 18:36:50'!
test05AGameWithThreeXInTheFirstLineIsAnXWin!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:22:11' prior: 50894865!
test04WhenXIsPlaying0IsNot

	| game |
	
	game := TerniLapilli new.
	
	self deny: game isPlayingX.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:22:44' prior: 50894872!
test05When0IsPlayingXIsNot

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self deny: game isPlaying0.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:23:29' prior: 50895046!
test04WhenXIsPlaying0IsNot

	| game |
	
	game := TerniLapilli new.
	
	self deny: game isPlaying0.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:23:37' prior: 50895053!
test05When0IsPlayingXIsNot

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self deny: game isPlayingX.! !

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:36:50'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentlyPlaying'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:25:58' prior: 50894996!
isPlaying0
	^currentlyPlaying = '0'.! !

!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:36:50'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:36:50'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:36:50'!
Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliTest methodsFor: 'nil' stamp: 'FD 10/29/2020 17:47:52'!
test01AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:48:23'!
test02AfterPlayer0goesX! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:49:16'!
test03AGameWithThreeXInTheFirstLineHasEnded! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:32' prior: 50894927!
test02AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	! !

!methodRemoval: TerniLapilliTest #test01AfterPlayerXgoes0 stamp: 'FD 10/29/2020 18:36:50'!
test01AfterPlayerXgoes0

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isPlaying0.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:39' prior: 50895016!
test03AfterPlayer0goesX! !

!methodRemoval: TerniLapilliTest #test02AfterPlayer0goesX stamp: 'FD 10/29/2020 18:36:50'!
test02AfterPlayer0goesX!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 17:59:45'!
test04AGameWithThreeXInTheFirstLineHasEnded! !

!methodRemoval: TerniLapilliTest #test03AGameWithThreeXInTheFirstLineHasEnded stamp: 'FD 10/29/2020 18:36:50'!
test03AGameWithThreeXInTheFirstLineHasEnded!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:00:05' prior: 50894959!
test01PlayerXStartsPlaying

	| game |
	
	game := TerniLapilli new.
	
	self assert: game isPlayingX.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:12:07'!
test04AGameWithThreeXInTheFirstLineIsAnXWin! !

!methodRemoval: TerniLapilliTest #test04AGameWithThreeXInTheFirstLineHasEnded stamp: 'FD 10/29/2020 18:36:50'!
test04AGameWithThreeXInTheFirstLineHasEnded!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:13:41' prior: 50894979!
isPlayingX
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:13:57' prior: 50895170!
isPlayingX
	^true.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:14:59' prior: 50894988!
putXAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:15:50' prior: 50895178!
putXAt: aPoint 
	! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:16:05' prior: 50895081!
isPlaying0
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:16:15' prior: 50895187!
isPlaying0
	^true.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:17:37' prior: 50895136!
test03AfterPlayer0goesX

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0AtX: 0@1.
	
	self assert: game isPlayingX.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:18:03'!
put0AtX: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:18:07' prior: 50895202!
put0AtX: aPoint 
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:18:54' prior: 50895195!
test03AfterPlayer0goesX

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 0@1.
	
	self assert: game isPlayingX.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:19:09' prior: 50895024!
put0At: aPoint 
	! !

!methodRemoval: TerniLapilli #put0AtX: stamp: 'FD 10/29/2020 18:36:50'!
put0AtX: aPoint 
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:19:30'!
test05AGameWithThreeXInTheFirstLineIsAnXWin! !

!methodRemoval: TerniLapilliTest #test04AGameWithThreeXInTheFirstLineIsAnXWin stamp: 'FD 10/29/2020 18:36:50'!
test04AGameWithThreeXInTheFirstLineIsAnXWin!

!methodRemoval: TerniLapilliTest #test05AGameWithThreeXInTheFirstLineIsAnXWin stamp: 'FD 10/29/2020 18:36:50'!
test05AGameWithThreeXInTheFirstLineIsAnXWin!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:22:11' prior: 50895060!
test04WhenXIsPlaying0IsNot

	| game |
	
	game := TerniLapilli new.
	
	self deny: game isPlayingX.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:22:44' prior: 50895067!
test05When0IsPlayingXIsNot

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self deny: game isPlaying0.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:23:29' prior: 50895241!
test04WhenXIsPlaying0IsNot

	| game |
	
	game := TerniLapilli new.
	
	self deny: game isPlaying0.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:23:37' prior: 50895248!
test05When0IsPlayingXIsNot

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self deny: game isPlayingX.! !

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FD 10/29/2020 18:36:50'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentlyPlaying'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:25:58' prior: 50895191!
isPlaying0
	^currentlyPlaying = '0'.! !

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 18:37:17'!
FAILURE!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 18:37:17'!
FAILURE!

TerniLapilli!
!TerniLapilli class methodsFor: 'nil' stamp: 'FD 10/29/2020 18:38:42' overrides: 16783533!
new

	^self new initialize! !
!TerniLapilli methodsFor: 'nil' stamp: 'FD 10/29/2020 18:40:30' overrides: 16896425!
initialize

	currentlyPlaying := $X! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:40:44' prior: 50895276!
isPlaying0
	^currentlyPlaying = $0.! !
!TerniLapilli class methodsFor: 'initialization' stamp: 'FD 10/29/2020 18:41:48' prior: 50895287 overrides: 16783533!
new

	^self basicNew initialize! !

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 18:41:59'!
FAILURE!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 18:41:59'!
FAILURE!

!methodRemoval: TerniLapilli class #new stamp: 'FD 10/29/2020 18:42:07'!
new

	^self basicNew initialize!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 18:42:11'!
FAILURE!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 18:42:11'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:42:54' prior: 50895183!
putXAt: aPoint 
	
	currentlyPlaying  := $0.! !

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 18:42:56'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 18:43:00'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 18:43:00'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 18:43:00'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 18:43:00'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 18:43:00'!
FAILURE!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 18:43:00'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 18:44:12' prior: 50895174!
isPlayingX
	^currentlyPlaying = $X.! !

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 18:44:17'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 18:44:19'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 18:44:19'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 18:44:19'!
FAILURE!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 18:44:19'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 18:44:19'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 18:44:19'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:44:42' prior: 50895219!
put0At: aPoint 
	
	currentlyPlaying := $X! !

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 18:44:43'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 18:44:45'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 18:44:45'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 18:44:45'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 18:44:45'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 18:44:45'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:46:59'!
test07WhenTheFirstRowIsFilledWithXPlayerXWins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	self deny: game isPlayingX.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:50:12'!
test06PlayerXCannotPutWhen0IsPlaying

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self should: [ game putXAt: 0@1 ] raise: Error withMessageText: TerniLapilli itsNotPlayersTurnErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 18:50:24'!
test99WhenTheFirstRowIsFilledWithXPlayerXWins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	self deny: game isPlayingX.! !

!methodRemoval: TerniLapilliTest #test07WhenTheFirstRowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 18:50:24'!
test07WhenTheFirstRowIsFilledWithXPlayerXWins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	self deny: game isPlayingX.!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 18:50:27'!
ERROR!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 18:50:27'!
ERROR!
!TerniLapilli class methodsFor: 'error handling' stamp: 'FD 10/29/2020 18:50:45'!
itsNotPlayersTurnErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'FD 10/29/2020 18:51:36' prior: 50895436!
itsNotPlayersTurnErrorDescription
	^ 'It is not that players turn'.! !

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 18:51:37'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:53:26' prior: 50895320!
putXAt: aPoint 
	
	currentlyPlaying = $X ifFalse: self signalItsNotThatPlayersTurn.
	currentlyPlaying  := $0.! !

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 18:53:28'!
ERROR!
!TerniLapilli methodsFor: 'error handling' stamp: 'FD 10/29/2020 18:53:46'!
signalItsNotThatPlayersTurn
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'error handling' stamp: 'FD 10/29/2020 18:56:14' prior: 50895461!
signalItsNotThatPlayersTurn
	self error: super itsNotPlayersTurnErrorDescription.! !

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 18:56:26'!
ERROR!
!TerniLapilli methodsFor: 'error handling' stamp: 'FD 10/29/2020 18:57:55' prior: 50895466!
signalItsNotThatPlayersTurn
	self error: self class itsNotPlayersTurnErrorDescription.! !

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 18:57:59'!
ERROR!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 18:57:59'!
ERROR!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 18:58:14'!
ERROR!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 18:58:14'!
ERROR!
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 18:59:42' prior: 50895451!
putXAt: aPoint 
	
	currentlyPlaying = $X ifFalse: [self signalItsNotThatPlayersTurn].
	currentlyPlaying  := $0.! !

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 18:59:56'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 19:00:01'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 19:00:32'!
test07Player0CannotPutWhenXIsPlaying

	| game |
	
	game := TerniLapilli new.
	
	self should: [ game put0At: 0@1 ] raise: Error withMessageText: TerniLapilli itsNotPlayersTurnErrorDescription.! !

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 19:00:35'!
FAILURE!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 19:00:35'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 19:01:12' prior: 50895372!
put0At: aPoint 
	
	currentlyPlaying  = $0 ifFalse: [ self signalItsNotThatPlayersTurn  ].
	currentlyPlaying := $X! !

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 19:01:15'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 19:01:17'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 19:03:40'!
test08aPlayerCantPutATokenOnAnOccupiedPlace

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	
	self should: [ game put0At: 0@0 ] raise: Error withMessageText: TerniLapilli spaceAlreadyOccupied.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 19:03:55'!
not_test99WhenTheFirstRowIsFilledWithXPlayerXWins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	self deny: game isPlayingX.! !

!methodRemoval: TerniLapilliTest #test99WhenTheFirstRowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 19:03:55'!
test99WhenTheFirstRowIsFilledWithXPlayerXWins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	self deny: game isPlayingX.!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 19:03:57'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 19:03:57'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 19:03:57'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 19:03:57'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 19:03:57'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 19:03:57'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 19:03:57'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 19:03:57'!
ERROR!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 19:03:57'!
ERROR!
!TerniLapilli class methodsFor: 'error handling' stamp: 'FD 10/29/2020 19:04:07'!
spaceAlreadyOccupied
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'FD 10/29/2020 19:04:23' prior: 50895593!
spaceAlreadyOccupied
	^ 'space already occupied'! !

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 19:04:24'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 19:05:54' prior: 50895494!
putXAt: aPoint 
	
	currentlyPlaying = $X ifFalse: [self signalItsNotThatPlayersTurn].
	
	self isOccupied: aPoint ifFalse: [self signalSpaceAlreadyOccupied].
	
	currentlyPlaying  := $0.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 19:06:07' prior: 50895606!
putXAt: aPoint 
	
	currentlyPlaying = $X ifFalse: [self signalItsNotThatPlayersTurn].
	
	(self isOccupied: aPoint) ifFalse: [self signalSpaceAlreadyOccupied].
	
	currentlyPlaying  := $0.! !

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 19:06:10'!
ERROR!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 19:06:35'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 19:06:35'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 19:06:35'!
ERROR!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 19:06:35'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 19:06:35'!
ERROR!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 19:06:35'!
ERROR!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 19:06:35'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 19:06:35'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 19:06:37'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 19:06:48'!
isOccupied: aPoint 
	self shouldBeImplemented.! !

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FD 10/29/2020 19:08:16'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentlyPlaying occupiedCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 19:08:11' prior: 50895655!
isOccupied: aPoint 
	
	^ occupiedCells includes: aPoint.! !

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 19:08:18'!
ERROR!
!TerniLapilli methodsFor: 'initialization' stamp: 'FD 10/29/2020 19:08:57' prior: 50895291 overrides: 16896425!
initialize

	currentlyPlaying := $X.
	occupiedCells := OrderedCollection new.! !

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 19:08:58'!
ERROR!
!TerniLapilli methodsFor: 'error handling' stamp: 'FD 10/29/2020 19:09:26'!
signalSpaceAlreadyOccupied
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'error handling' stamp: 'FD 10/29/2020 19:09:49' prior: 50895685!
signalSpaceAlreadyOccupied
	self error: self class spaceAlreadyOccupied .! !

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 19:09:50'!
ERROR!
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 19:10:33' prior: 50895615!
putXAt: aPoint 
	
	currentlyPlaying = $X ifFalse: [self signalItsNotThatPlayersTurn].
	
	(self isOccupied: aPoint) ifTrue: [self signalSpaceAlreadyOccupied].
	
	currentlyPlaying  := $0.! !

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 19:10:36'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 19:10:40'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 19:10:40'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 19:10:40'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 19:10:40'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 19:10:40'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 19:10:40'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 19:10:40'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 19:10:40'!
FAILURE!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 19:10:40'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 19:11:13' prior: 50895698!
putXAt: aPoint 
	
	currentlyPlaying = $X ifFalse: [self signalItsNotThatPlayersTurn].
	
	(self isOccupied: aPoint) ifTrue: [self signalSpaceAlreadyOccupied].
	
	occupiedCells add: aPoint.
	currentlyPlaying  := $0.! !

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 19:11:14'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 19:12:25' prior: 50895523!
put0At: aPoint 
	
	currentlyPlaying  = $0 ifFalse: [ self signalItsNotThatPlayersTurn  ].
	
	(occupiedCells includes: aPoint ) ifTrue: [ self signalSpaceAlreadyOccupied ].
	
	currentlyPlaying := $X! !

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 19:12:38'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 19:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 19:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 19:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 19:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 19:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 19:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 19:12:55'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 19:12:55'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 19:13:22'!
test08Player0CantPutATokenOnAnOccupiedPlace

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	
	self should: [ game put0At: 0@0 ] raise: Error withMessageText: TerniLapilli spaceAlreadyOccupied.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 19:13:41'!
test09PlayerXCantPutATokenOnAnOccupiedPlace

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	
	self should: [ game put0At: 0@0 ] raise: Error withMessageText: TerniLapilli spaceAlreadyOccupied.! !

!methodRemoval: TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 19:13:41'!
test08aPlayerCantPutATokenOnAnOccupiedPlace

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	
	self should: [ game put0At: 0@0 ] raise: Error withMessageText: TerniLapilli spaceAlreadyOccupied.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 19:14:11' prior: 50895801!
test09PlayerXCantPutATokenOnAnOccupiedPlace

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	self should: [ game putXAt: 0@0 ] raise: Error withMessageText: TerniLapilli spaceAlreadyOccupied.! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 19:14:14'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 19:14:14'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 19:14:14'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 19:14:14'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 19:14:14'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 19:14:14'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 19:14:14'!
PASSED!

!testRun: #TerniLapilliTest #test08Player0CantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 19:14:14'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayerXCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 19:14:14'!
PASSED!

!methodRemoval: TerniLapilliTest #test09PlayerXCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 19:17:23'!
test09PlayerXCantPutATokenOnAnOccupiedPlace

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	self should: [ game putXAt: 0@0 ] raise: Error withMessageText: TerniLapilli spaceAlreadyOccupied.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 19:17:41'!
test08aPlayerCantPutATokenOnAnOccupiedPlace

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	
	self should: [ game put0At: 0@0 ] raise: Error withMessageText: TerniLapilli spaceAlreadyOccupied.! !

!methodRemoval: TerniLapilliTest #test08Player0CantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 19:17:41'!
test08Player0CantPutATokenOnAnOccupiedPlace

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	
	self should: [ game put0At: 0@0 ] raise: Error withMessageText: TerniLapilli spaceAlreadyOccupied.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 19:19:40'!
test09WhenTheFirstRowIsFilledWithXPlayerXWins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	self deny: game isPlayingX.! !

!methodRemoval: TerniLapilliTest #not_test99WhenTheFirstRowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 19:19:40'!
not_test99WhenTheFirstRowIsFilledWithXPlayerXWins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	self deny: game isPlayingX.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 19:25:10' prior: 50895891!
test09WhenTheFirstRowIsFilledWithXPlayerXWins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	game putXAt: 0@1.
	game put0At: 1@1.
	
	game putXAt: 0@2.
	
	self assert: game hasPlayerXWon.! !

!testRun: #TerniLapilliTest #test09WhenTheFirstRowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 19:25:14'!
ERROR!

!testRun: #TerniLapilliTest #test09WhenTheFirstRowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 19:25:14'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 19:25:26'!
hasPlayerXWon
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 19:25:32' prior: 50895925!
hasPlayerXWon
	^true.! !

!testRun: #TerniLapilliTest #test09WhenTheFirstRowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 19:25:33'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 19:25:49'!
test10WhenTheFirstRowIsFilledWithXPlayerXWins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	game putXAt: 0@1.
	game put0At: 1@1.
	
	game putXAt: 0@2.
	
	self assert: game hasPlayerXWon.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 19:26:23'!
test09WhenThereAreNoTokensPlayerXHasNotWon

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	game putXAt: 0@1.
	game put0At: 1@1.
	
	game putXAt: 0@2.
	
	self assert: game hasPlayerXWon.! !

!methodRemoval: TerniLapilliTest #test09WhenTheFirstRowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 19:26:23'!
test09WhenTheFirstRowIsFilledWithXPlayerXWins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	game putXAt: 0@1.
	game put0At: 1@1.
	
	game putXAt: 0@2.
	
	self assert: game hasPlayerXWon.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 19:26:35' prior: 50895948!
test09WhenThereAreNoTokensPlayerXHasNotWon

	| game |
	
	game := TerniLapilli new.
	
	self deny: game hasPlayerXWon.! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 19:26:37'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 19:26:37'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 19:26:37'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 19:26:37'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 19:26:37'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 19:26:37'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 19:26:37'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 19:26:37'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 19:26:37'!
FAILURE!

!testRun: #TerniLapilliTest #test10WhenTheFirstRowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 19:26:37'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 19:26:37'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 19:27:39' prior: 50895930!
hasPlayerXWon
	^ occupiedCells size > 0.! !

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 19:27:43'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 19:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 19:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 19:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 19:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 19:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 19:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 19:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 19:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 19:27:54'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenTheFirstRowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 19:27:54'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 19:28:44'!
not_test10WhenTheFirstRowIsFilledWithXPlayerXWins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	game putXAt: 0@1.
	game put0At: 1@1.
	
	game putXAt: 0@2.
	
	self assert: game hasPlayerXWon.! !

!methodRemoval: TerniLapilliTest #test10WhenTheFirstRowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 19:28:44'!
test10WhenTheFirstRowIsFilledWithXPlayerXWins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	game putXAt: 0@1.
	game put0At: 1@1.
	
	game putXAt: 0@2.
	
	self assert: game hasPlayerXWon.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 19:29:20'!
test10XHasLessThanThreeTokensHeHasNotWon

	| game |
	
	game := TerniLapilli new.
	
	self deny: game hasPlayerXWon.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 19:29:45' prior: 50896074!
test10XHasLessThanThreeTokensHeHasNotWon

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	game putXAt: 0@1.
	
	self deny: game hasPlayerXWon.! !

!testRun: #TerniLapilliTest #test10XHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 19:29:51'!
FAILURE!

!testRun: #TerniLapilliTest #test10XHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 19:29:51'!
FAILURE!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FD 10/29/2020 19:31:20'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentlyPlaying occupiedCells cellsOccupiedByX'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 19:31:18' prior: 50895739!
putXAt: aPoint 
	
	currentlyPlaying = $X ifFalse: [self signalItsNotThatPlayersTurn].
	
	(self isOccupied: aPoint) ifTrue: [self signalSpaceAlreadyOccupied].
	
	cellsOccupiedByX add: aPoint.
	currentlyPlaying  := $0.! !
!TerniLapilli methodsFor: 'initialization' stamp: 'FD 10/29/2020 19:32:35' prior: 50895677 overrides: 16896425!
initialize

	currentlyPlaying := $X.
	occupiedCells := OrderedCollection new.
	cellsOccupiedByX := OrderedCollection new.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 19:33:11' prior: 50895668!
isOccupied: aPoint 
	
	^ (occupiedCells includes: aPoint) or: [cellsOccupiedByX includes: aPoint ].! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 19:33:16'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 19:33:16'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 19:33:16'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 19:33:16'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 19:33:16'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 19:33:16'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 19:33:16'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 19:33:16'!
FAILURE!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 19:33:16'!
PASSED!

!testRun: #TerniLapilliTest #test10XHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 19:33:16'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 19:33:16'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 19:34:04' prior: 50895753!
put0At: aPoint 
	
	currentlyPlaying  = $0 ifFalse: [ self signalItsNotThatPlayersTurn  ].
	
	(self isOccupied: aPoint) ifTrue: [ self signalSpaceAlreadyOccupied ].
	
	currentlyPlaying := $X! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 19:34:07'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 19:34:07'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 19:34:07'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 19:34:07'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 19:34:07'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 19:34:07'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 19:34:07'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 19:34:07'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 19:34:07'!
PASSED!

!testRun: #TerniLapilliTest #test10XHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 19:34:07'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 19:36:59'!
test11When0HasLessThanThreeTokensHeHasNotWon

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	game putXAt: 0@1.
	
	self deny: game hasPlayerXWon.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 19:37:08'!
test10WhenXHasLessThanThreeTokensHeHasNotWon

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	game putXAt: 0@1.
	
	self deny: game hasPlayerXWon.! !

!methodRemoval: TerniLapilliTest #test10XHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 19:37:08'!
test10XHasLessThanThreeTokensHeHasNotWon

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	game putXAt: 0@1.
	
	self deny: game hasPlayerXWon.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 19:37:59' prior: 50896208!
test11When0HasLessThanThreeTokensHeHasNotWon

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	game putXAt: 0@1.
	game put0At: 2@0.
	
	self deny: game hasPlayer0Won.! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 19:38:05'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 19:38:05'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 19:38:05'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 19:38:05'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 19:38:05'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 19:38:05'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 19:38:05'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 19:38:05'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 19:38:05'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 19:38:05'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 19:38:05'!
ERROR!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 19:38:05'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 19:38:17'!
hasPlayer0Won
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 19:38:31' prior: 50896284!
hasPlayer0Won
	^false.! !

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 19:38:33'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 19:39:05' prior: 50896012!
hasPlayerXWon
	^ false.! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 19:39:08'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 19:39:08'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 19:39:08'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 19:39:08'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 19:39:08'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 19:39:08'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 19:39:08'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 19:39:08'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 19:39:08'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 19:39:08'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 19:39:08'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 19:39:36'!
test12WhenTheFirstRowIsFilledWithXPlayerXWins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	game putXAt: 0@1.
	game put0At: 1@1.
	
	game putXAt: 0@2.
	
	self assert: game hasPlayerXWon.! !

!methodRemoval: TerniLapilliTest #not_test10WhenTheFirstRowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 19:39:36'!
not_test10WhenTheFirstRowIsFilledWithXPlayerXWins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	game putXAt: 0@1.
	game put0At: 1@1.
	
	game putXAt: 0@2.
	
	self assert: game hasPlayerXWon.!

!testRun: #TerniLapilliTest #test12WhenTheFirstRowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 19:39:44'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 19:40:13' prior: 50896297!
hasPlayerXWon
	^ cellsOccupiedByX hasCompleteRow.! !

!testRun: #TerniLapilliTest #test12WhenTheFirstRowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 19:40:20'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 19:40:53' prior: 50896362!
hasPlayerXWon
	^ self XHasCompleteRow.! !

!testRun: #TerniLapilliTest #test12WhenTheFirstRowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 19:41:02'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 19:41:12'!
XHasCompleteRow
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 19:41:46' prior: 50896378!
XHasCompleteRow
	^cellsOccupiedByX size > 0.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 20:23:40' prior: 50896383!
XHasCompleteRow
	|isFirstRowCompleted isSecondRowCompleted isThirdRowCompleted |

	isFirstRowCompleted := ((cellsOccupiedByX includes: 0@0) and: [
		cellsOccupiedByX includes: 0@1
		] and: [cellsOccupiedByX includes: 0@2]) .
	
	isSecondRowCompleted := ((cellsOccupiedByX includes: 0@0) and: [
		cellsOccupiedByX includes: 0@1
		] and: [cellsOccupiedByX includes: 0@2]) .
	
	isThirdRowCompleted := ((cellsOccupiedByX includes: 0@0) and: [
		cellsOccupiedByX includes: 0@1
		] and: [cellsOccupiedByX includes: 0@2]) .
	
	^ (isFirstRowCompleted or: [isSecondRowCompleted ]) or: [isThirdRowCompleted ]! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 20:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 20:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 20:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 20:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 20:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 20:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 20:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 20:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 20:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 20:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 20:23:45'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenTheFirstRowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 20:23:45'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 20:30:45'!
isRowCompletedByX: aRow

	^((cellsOccupiedByX includes: aRow@0) and: [
		cellsOccupiedByX includes: aRow@1
		] and: [cellsOccupiedByX includes: aRow@2]).! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 20:31:37' prior: 50896388!
XHasCompleteRow
	
	^ ((self isRowCompletedByX: 0) or: [( self isRowCompletedByX: 1)]) or: [( self isRowCompletedByX: 2) ]! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 20:31:40'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 20:31:40'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 20:31:40'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 20:31:40'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 20:31:40'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 20:31:40'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 20:31:40'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 20:31:40'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 20:31:40'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 20:31:40'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 20:31:40'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenTheFirstRowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 20:31:40'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 20:32:22' prior: 50896337!
test12WhenTheFirstRowIsFilledWithXPlayerXWins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	game putXAt: 0@1.
	game put0At: 1@1.
	
	game putXAt: 0@2.
	
	self assert: game hasPlayerXWon.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 20:32:33'!
test12WhenAFirstRowIsFilledWithXPlayerXWins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	game putXAt: 0@1.
	game put0At: 1@1.
	
	game putXAt: 0@2.
	
	self assert: game hasPlayerXWon.! !

!methodRemoval: TerniLapilliTest #test12WhenTheFirstRowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 20:32:33'!
test12WhenTheFirstRowIsFilledWithXPlayerXWins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	game putXAt: 0@1.
	game put0At: 1@1.
	
	game putXAt: 0@2.
	
	self assert: game hasPlayerXWon.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 20:36:42'!
test12WhenAFirstRowIsFilledWith0Player0Wins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	game putXAt: 0@1.
	game put0At: 1@1.
	
	game putXAt: 2@2.
	game put0At: 1@2.
	
	self assert: game hasPlayer0Won.! !

!methodRemoval: TerniLapilliTest #test12WhenAFirstRowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 20:36:45'!
test12WhenAFirstRowIsFilledWithXPlayerXWins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	game putXAt: 0@1.
	game put0At: 1@1.
	
	game putXAt: 0@2.
	
	self assert: game hasPlayerXWon.!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 20:37:19'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 20:37:19'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 20:37:19'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 20:37:19'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 20:37:19'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 20:37:19'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 20:37:19'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 20:37:19'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 20:37:19'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 20:37:19'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 20:37:19'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenAFirstRowIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 20:37:19'!
FAILURE!

!testRun: #TerniLapilliTest #test12WhenAFirstRowIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 20:37:19'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 20:38:44'!
test12WhenARowIsFilledWithXPlayerXWins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	game putXAt: 0@1.
	game put0At: 1@1.
	
	game putXAt: 2@2.
	game put0At: 1@2.
	
	self assert: game hasPlayer0Won.! !

!methodRemoval: TerniLapilliTest #test12WhenAFirstRowIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 20:38:44'!
test12WhenAFirstRowIsFilledWith0Player0Wins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	game putXAt: 0@1.
	game put0At: 1@1.
	
	game putXAt: 2@2.
	game put0At: 1@2.
	
	self assert: game hasPlayer0Won.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 20:39:01' prior: 50896600!
test12WhenARowIsFilledWithXPlayerXWins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	game putXAt: 0@1.
	game put0At: 1@1.
	
	game putXAt: 2@2.

	self assert: game hasPlayerXWon .! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 20:39:04'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 20:39:04'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 20:39:04'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 20:39:04'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 20:39:04'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 20:39:04'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 20:39:04'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 20:39:04'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 20:39:04'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 20:39:04'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 20:39:04'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 20:39:04'!
FAILURE!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 20:39:04'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 20:39:15' prior: 50896622!
test12WhenARowIsFilledWithXPlayerXWins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	game putXAt: 0@1.
	game put0At: 1@1.
	
	game putXAt: 0@2.

	self assert: game hasPlayerXWon .! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 20:39:18'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 20:39:18'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 20:39:18'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 20:39:18'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 20:39:18'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 20:39:18'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 20:39:18'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 20:39:18'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 20:39:18'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 20:39:18'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 20:39:18'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 20:39:18'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 20:39:54'!
test13WhenARowIsFilledWith0Player0Wins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	game putXAt: 0@1.
	game put0At: 1@1.
	
	game putXAt: 2@2.
	game put0At: 1@2.

	self assert: game hasPlayer0Won .! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 20:41:06' prior: 50896289!
hasPlayer0Won
	^self player0HasCompleteRow.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 20:41:18' prior: 50896370!
hasPlayerXWon
	^ self XHasCompleteRow.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 20:41:32' prior: 50896742!
hasPlayerXWon
	^ self XHasCompleteRow.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 20:41:41'!
playerXHasCompleteRow
	
	^ ((self isRowCompletedByX: 0) or: [( self isRowCompletedByX: 1)]) or: [( self isRowCompletedByX: 2) ]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 20:41:41' prior: 50896746!
hasPlayerXWon
	^ self playerXHasCompleteRow.! !

!methodRemoval: TerniLapilli #XHasCompleteRow stamp: 'FD 10/29/2020 20:41:41'!
XHasCompleteRow
	
	^ ((self isRowCompletedByX: 0) or: [( self isRowCompletedByX: 1)]) or: [( self isRowCompletedByX: 2) ]!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 20:41:48'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 20:41:48'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 20:41:48'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 20:41:48'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 20:41:48'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 20:41:48'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 20:41:48'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 20:41:48'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 20:41:48'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 20:41:48'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 20:41:48'!
ERROR!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 20:41:48'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 20:41:48'!
ERROR!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 20:43:24'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 20:43:24'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 20:43:24'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 20:43:24'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 20:43:24'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 20:43:24'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 20:43:24'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 20:43:24'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 20:43:24'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 20:43:24'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 20:43:24'!
ERROR!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 20:43:24'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 20:43:24'!
ERROR!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 20:43:29'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 20:43:38'!
player0HasCompleteRow
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 20:46:36' prior: 50896858!
player0HasCompleteRow
	^ ((self isRowCompletedBy0: 0) or: [( self isRowCompletedBy0: 1)]) or: [( self isRowCompletedBy0: 2) ]! !

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 20:47:00'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 20:47:13'!
isRowCompletedBy0: aSmallInteger 
	self shouldBeImplemented.! !

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FD 10/29/2020 20:48:40'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentlyPlaying occupiedCells cellsOccupiedByX cellsOccupiedBy0'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 20:48:36' prior: 50896873!
isRowCompletedBy0: aRow

	^((cellsOccupiedBy0 includes: aRow@0) and: [
		cellsOccupiedBy0 includes: aRow@1
		] and: [cellsOccupiedBy0 includes: aRow@2]).! !

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 20:48:44'!
ERROR!

Object subclass: #TerniLapilli
	instanceVariableNames: 'currentlyPlaying cellsOccupiedByX cellsOccupiedBy0'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FD 10/29/2020 20:49:08'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentlyPlaying cellsOccupiedByX cellsOccupiedBy0'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'initialization' stamp: 'FD 10/29/2020 20:49:31' prior: 50896116 overrides: 16896425!
initialize

	currentlyPlaying := $X.
	cellsOccupiedBy0 := OrderedCollection new.
	cellsOccupiedByX := OrderedCollection new.! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 20:49:35'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 20:49:35'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 20:49:35'!
ERROR!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 20:49:35'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 20:49:35'!
ERROR!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 20:49:35'!
ERROR!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 20:49:35'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 20:49:35'!
ERROR!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 20:49:35'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 20:49:35'!
ERROR!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 20:49:35'!
ERROR!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 20:49:35'!
ERROR!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 20:49:35'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 20:49:51' prior: 50896123!
isOccupied: aPoint 
	
	^ (cellsOccupiedBy0 includes: aPoint) or: [cellsOccupiedByX includes: aPoint ].! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 20:49:55'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 20:49:55'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 20:49:55'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 20:49:55'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 20:49:55'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 20:49:55'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 20:49:55'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 20:49:55'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 20:49:55'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 20:49:55'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 20:49:55'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 20:49:55'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 20:49:55'!
FAILURE!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 20:49:55'!
FAILURE!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 20:50:01'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 20:50:05'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 20:50:05'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 20:50:05'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 20:50:05'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 20:50:05'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 20:50:05'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 20:50:05'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 20:50:05'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 20:50:05'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 20:50:05'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 20:50:05'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 20:50:05'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 20:50:05'!
FAILURE!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 20:50:05'!
FAILURE!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 20:50:51'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'FD 10/29/2020 20:51:26' prior: 50896166!
put0At: aPoint 
	
	currentlyPlaying  = $0 ifFalse: [ self signalItsNotThatPlayersTurn  ].
	
	(self isOccupied: aPoint) ifTrue: [ self signalSpaceAlreadyOccupied ].
	
	cellsOccupiedBy0 add: aPoint.
	currentlyPlaying := $X! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 20:51:29'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 20:51:29'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 20:51:29'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 20:51:29'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 20:51:29'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 20:51:29'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 20:51:29'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 20:51:29'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 20:51:29'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 20:51:29'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 20:51:29'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 20:51:29'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 20:51:29'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 20:54:54'!
test15WhenAColumnIsFilledWith0Player0Wins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@0.
	
	game putXAt: 0@1.
	game put0At: 1@1.
	
	game putXAt: 2@2.
	game put0At: 1@2.

	self assert: game hasPlayer0Won .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 20:56:15' prior: 50897124!
test15WhenAColumnIsFilledWith0Player0Wins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 0@1.
	
	game putXAt: 1@0.
	game put0At: 1@1.
	
	game putXAt: 2@2.
	game put0At: 2@1.

	self assert: game hasPlayer0Won .! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 20:56:25'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 20:56:25'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 20:56:25'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 20:56:25'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 20:56:25'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 20:56:25'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 20:56:25'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 20:56:25'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 20:56:25'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 20:56:25'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 20:56:25'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 20:56:25'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 20:56:25'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 20:56:25'!
FAILURE!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 20:56:25'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 20:57:00' prior: 50896737!
hasPlayer0Won
	^self player0HasCompleteRow or: [self player0HasCompleteColumn].! !

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 20:57:02'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 20:57:10'!
player0HasCompleteColumn
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 20:58:17' prior: 50897205!
player0HasCompleteColumn
	^((self isColumnCompletedBy0: 0) or: [( self isColumnCompletedBy0: 1)]) or: [( self isColumnCompletedBy0: 2) ]! !

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 20:58:20'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 20:58:28'!
isColumnCompletedBy0: aSmallInteger 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 20:59:06' prior: 50897221!
isColumnCompletedBy0: aColumn

	^((cellsOccupiedBy0 includes: 0@aColumn) and: [
		cellsOccupiedBy0 includes: 1@aColumn
		] and: [cellsOccupiedBy0 includes: 2@aColumn]).! !

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 20:59:07'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 20:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 20:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 20:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 20:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 20:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 20:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 20:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 20:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 20:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 20:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 20:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 20:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 20:59:13'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 20:59:13'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 21:01:45'!
test14WhenAColumnIsFilledWithXPlayerXWins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 0@1.
	
	game putXAt: 0@1.
	game put0At: 1@1.
	
	game putXAt: 0@2.
	game put0At: 2@2.

	self assert: game hasPlayerXWon .! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 21:01:47'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 21:01:47'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 21:01:47'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 21:01:47'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 21:01:47'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 21:01:47'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 21:01:47'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 21:01:47'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 21:01:47'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 21:01:47'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 21:01:47'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:01:47'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:01:47'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:01:47'!
ERROR!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:01:47'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:01:47'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 21:02:06' prior: 50897285!
test14WhenAColumnIsFilledWithXPlayerXWins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 2@1.
	
	game putXAt: 0@1.
	game put0At: 1@1.
	
	game putXAt: 0@2.
	game put0At: 2@2.

	self assert: game hasPlayerXWon .! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 21:02:13'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 21:02:13'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 21:02:13'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 21:02:13'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 21:02:13'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 21:02:13'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 21:02:13'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 21:02:13'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 21:02:13'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 21:02:13'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 21:02:13'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:02:13'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:02:13'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:02:13'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:02:13'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 21:02:52' prior: 50897350!
test14WhenAColumnIsFilledWithXPlayerXWins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 2@1.
	
	game putXAt: 1@0.
	game put0At: 1@1.
	
	game putXAt: 2@0.
	game put0At: 2@2.

	self assert: game hasPlayerXWon .! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 21:02:55'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 21:02:55'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 21:02:55'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 21:02:55'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 21:02:55'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 21:02:55'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 21:02:55'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 21:02:55'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 21:02:55'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 21:02:55'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 21:02:55'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:02:55'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:02:55'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:02:55'!
FAILURE!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:02:55'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:02:55'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 21:04:07' prior: 50896758!
hasPlayerXWon
	^ self playerXHasCompleteRow or: [self playerXHasCompleteColumn].! !

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:06:43'!
ERROR!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:06:43'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 21:06:55'!
playerXHasCompleteColumn
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 21:07:08' prior: 50897487!
playerXHasCompleteColumn
	^((self isColumnCompletedByX: 0) or: [( self isColumnCompletedByX: 1)]) or: [( self isColumnCompletedByX: 2) ]! !

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:07:13'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 21:07:20'!
isColumnCompletedByX: aSmallInteger 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 21:08:13' prior: 50897503!
isColumnCompletedByX:  aColumn

	^((cellsOccupiedByX includes: 0@aColumn) and: [
		cellsOccupiedByX includes: 1@aColumn
		] and: [cellsOccupiedByX includes: 2@aColumn]).! !

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:08:14'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 21:08:16'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 21:08:16'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 21:08:16'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 21:08:16'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 21:08:16'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 21:08:16'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 21:08:16'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 21:08:16'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 21:08:16'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 21:08:16'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 21:08:16'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:08:16'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:08:16'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:08:16'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:08:16'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 21:09:11'!
test16WhenADiagonalIsFilledWithXPlayerXWins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 2@1.
	
	game putXAt: 1@1.
	game put0At: 1@1.
	
	game putXAt: 2@2.

	self assert: game hasPlayerXWon .! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 21:09:36' prior: 50897475!
hasPlayerXWon
	^ (self playerXHasCompleteRow or: [self playerXHasCompleteColumn]) or: [ self playerXHasCompleteDiagonal ].! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 21:09:41'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 21:09:41'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 21:09:41'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 21:09:41'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 21:09:41'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 21:09:41'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 21:09:41'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 21:09:41'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 21:09:41'!
ERROR!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 21:09:41'!
ERROR!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 21:09:41'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:09:41'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:09:41'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:09:41'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:09:41'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:09:41'!
ERROR!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 21:09:43'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 21:09:50'!
playerXHasCompleteDiagonal
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 21:12:27' prior: 50897644!
playerXHasCompleteDiagonal
	^ self isFirstDiagonalCompletedByX or: [self isSecondDiagonalCompletedByX]! !

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 21:12:35'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 21:12:44'!
isFirstDiagonalCompletedByX
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 21:14:30' prior: 50897658!
isFirstDiagonalCompletedByX
	^((cellsOccupiedBy0 includes: 0@0) and: [
		cellsOccupiedBy0 includes: 1@1
		] and: [cellsOccupiedBy0 includes: 2@2]).! !

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 21:14:34'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 21:14:40'!
isSecondDiagonalCompletedByX
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 21:14:50' prior: 50897674!
isSecondDiagonalCompletedByX
	^((cellsOccupiedBy0 includes: 0@2) and: [
		cellsOccupiedBy0 includes: 1@1
		] and: [cellsOccupiedBy0 includes: 2@0]).! !

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 21:14:52'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 21:14:54'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 21:14:54'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 21:14:54'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 21:14:54'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 21:14:54'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 21:14:54'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 21:14:54'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 21:14:54'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 21:14:54'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 21:14:54'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 21:14:54'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:14:54'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:14:54'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:14:54'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:14:54'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:14:54'!
ERROR!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:14:54'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 21:15:11' prior: 50897570!
test16WhenADiagonalIsFilledWithXPlayerXWins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 2@1.
	
	game putXAt: 1@1.
	game put0At: 0@1.
	
	game putXAt: 2@2.

	self assert: game hasPlayerXWon .! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 21:15:13'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 21:15:13'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 21:15:13'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 21:15:13'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 21:15:13'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 21:15:13'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 21:15:13'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 21:15:13'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 21:15:13'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 21:15:13'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 21:15:13'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:15:13'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:15:13'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:15:13'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:15:13'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:15:13'!
FAILURE!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:15:13'!
FAILURE!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 21:15:41'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 21:15:41'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 21:15:41'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 21:15:41'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 21:15:41'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 21:15:41'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 21:15:41'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 21:15:41'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 21:15:41'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 21:15:41'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 21:15:41'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:15:41'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:15:41'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:15:41'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:15:41'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:15:41'!
FAILURE!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:15:41'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 21:16:29' prior: 50897663!
isFirstDiagonalCompletedByX
	^((cellsOccupiedByX includes: 0@0) and: [
		cellsOccupiedByX includes: 1@1
		] and: [cellsOccupiedByX includes: 2@2]).! !

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:16:31'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 21:16:33'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 21:16:33'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 21:16:33'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 21:16:33'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 21:16:33'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 21:16:33'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 21:16:33'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 21:16:33'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 21:16:33'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 21:16:33'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 21:16:33'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:16:33'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:16:33'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:16:33'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:16:33'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:16:33'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 21:16:53' prior: 50897679!
isSecondDiagonalCompletedByX
	^((cellsOccupiedByX includes: 0@2) and: [
		cellsOccupiedByX includes: 1@1
		] and: [cellsOccupiedByX includes: 2@0]).! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 21:17:27'!
player0HasCompleteDiagonal
	^ self isFirstDiagonalCompletedBy0 or: [self isSecondDiagonalCompletedBy0]! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 21:18:41'!
test16WhenADiagonalIsFilledWith0Player0Wins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 2@1.
	game put0At: 0@2.
	
	game putXAt: 0@1.
	game put0At: 1@1.
	
	game put0At: 0@0.
	game put0At: 2@2.

	self assert: game hasPlayer0Won .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 21:18:48'!
test17WhenADiagonalIsFilledWith0Player0Wins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 2@1.
	game put0At: 0@2.
	
	game putXAt: 0@1.
	game put0At: 1@1.
	
	game put0At: 0@0.
	game put0At: 2@2.

	self assert: game hasPlayer0Won .! !

!methodRemoval: TerniLapilliTest #test16WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:18:48'!
test16WhenADiagonalIsFilledWith0Player0Wins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 2@1.
	game put0At: 0@2.
	
	game putXAt: 0@1.
	game put0At: 1@1.
	
	game put0At: 0@0.
	game put0At: 2@2.

	self assert: game hasPlayer0Won .!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 21:19:07'!
isFirstDiagonalCompletedBy0
	^((cellsOccupiedBy0 includes: 0@0) and: [
		cellsOccupiedBy0 includes: 1@1
		] and: [cellsOccupiedBy0 includes: 2@2]).! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 21:19:20'!
isSecondDiagonalCompletedBy0
	^((cellsOccupiedBy0 includes: 0@2) and: [
		cellsOccupiedBy0 includes: 1@1
		] and: [cellsOccupiedBy0 includes: 2@0]).! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 21:19:26'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 21:19:26'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 21:19:26'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 21:19:26'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 21:19:26'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 21:19:26'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 21:19:26'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 21:19:26'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 21:19:26'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 21:19:26'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 21:19:26'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:19:26'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:19:26'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:19:26'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:19:26'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:19:26'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:19:26'!
ERROR!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:19:26'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 21:19:40' prior: 50897962!
test17WhenADiagonalIsFilledWith0Player0Wins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 2@1.
	game put0At: 0@2.
	
	game putXAt: 0@1.
	game put0At: 1@1.
	
	game putXAt: 0@0.
	game put0At: 2@2.

	self assert: game hasPlayer0Won .! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 21:19:43'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 21:19:43'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 21:19:43'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 21:19:43'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 21:19:43'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 21:19:43'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 21:19:43'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 21:19:43'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 21:19:43'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 21:19:43'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 21:19:43'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:19:43'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:19:43'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:19:43'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:19:43'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:19:43'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:19:43'!
FAILURE!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:19:43'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 21:20:38' prior: 50897196!
hasPlayer0Won
	^(self player0HasCompleteRow or: [self player0HasCompleteColumn]) or: [ self playerXHasCompleteDiagonal ].! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 21:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 21:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 21:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 21:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 21:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 21:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 21:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 21:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 21:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 21:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 21:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:20:41'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:20:41'!
FAILURE!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:20:41'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 10/29/2020 21:21:19' prior: 50898131!
hasPlayer0Won
	^(self player0HasCompleteRow or: [self player0HasCompleteColumn]) or: [ self player0HasCompleteDiagonal ].! !

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:21:20'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 21:22:18' prior: 50898059!
test17WhenADiagonalIsFilledWith0Player0Wins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 2@1.
	game put0At: 0@2.
	
	game putXAt: 0@1.
	game put0At: 1@1.
	
	game putXAt: 0@0.
	game put0At: 2@0.

	self assert: game hasPlayer0Won .! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 10/29/2020 21:22:21'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 10/29/2020 21:22:21'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 10/29/2020 21:22:21'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 10/29/2020 21:22:21'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 10/29/2020 21:22:21'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 10/29/2020 21:22:21'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 10/29/2020 21:22:21'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 10/29/2020 21:22:21'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 10/29/2020 21:22:21'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 21:22:21'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 10/29/2020 21:22:21'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:22:21'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:22:21'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:22:21'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:22:21'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 10/29/2020 21:22:21'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 10/29/2020 21:22:21'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 21:27:13'!
test18WhenAPlayerWinsTheGameEnds

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@2.
	
	game putXAt: 0@1.
	game put0At: 2@1.
	
	game putXAt: 0@2.
	

	self assert:( game put0At: 2@0) .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 10/29/2020 21:28:07' prior: 50898278!
test18WhenAPlayerWinsTheGameEnds

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@2.
	
	game putXAt: 0@1.
	game put0At: 2@1.
	
	game putXAt: 0@2.
	
	self should: [game put0At: 2@0 ] raise: Error withMessageText: TerniLapilli gameHasEndedErrorDescription.! !

----QUIT----(29 October 2020 21:28:18) CuisUniversity-4383.image priorSource: 17969194!

----STARTUP---- (1 November 2020 16:04:50) as /home/franco/Documents/smallTalk/linux64/CuisUniversity-4383.image!


!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 16:07:29'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 16:07:29'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 16:07:29'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 16:07:29'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 16:07:29'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 16:07:29'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 16:07:29'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 16:07:29'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 16:07:29'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:07:29'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:07:29'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:07:29'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:07:29'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:07:29'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:07:29'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:07:29'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:07:29'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 16:07:29'!
ERROR!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 16:07:29'!
ERROR!
!TerniLapilli class methodsFor: 'error handling' stamp: 'FD 11/1/2020 16:08:03'!
gameHasEndedErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'FD 11/1/2020 16:08:26' prior: 50898370!
gameHasEndedErrorDescription
	^ 'Game has already ended'! !

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 16:08:27'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'FD 11/1/2020 16:10:50' prior: 50897071!
put0At: aPoint 
	
	self assertGameIsInProgress.
	currentlyPlaying  = $0 ifFalse: [ self signalItsNotThatPlayersTurn  ].
	
	(self isOccupied: aPoint) ifTrue: [ self signalSpaceAlreadyOccupied ].
	
	cellsOccupiedBy0 add: aPoint.
	currentlyPlaying := $X! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 16:10:54'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 16:10:54'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 16:10:54'!
ERROR!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 16:10:54'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 16:10:54'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 16:10:54'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 16:10:54'!
FAILURE!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 16:10:54'!
FAILURE!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 16:10:54'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:10:54'!
ERROR!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:10:54'!
ERROR!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:10:54'!
ERROR!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:10:54'!
ERROR!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:10:54'!
ERROR!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:10:54'!
ERROR!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:10:54'!
ERROR!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:10:54'!
ERROR!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 16:10:54'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 16:10:57'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:11:19'!
assertGameIsInProgress
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:12:58' prior: 50898456!
assertGameIsInProgress
	(self hasPlayer0Won  or: [self hasPlayerXWon]) ifTrue: [self signalGameHasEnded]! !

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 16:13:01'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:13:04'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:13:05'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 16:13:08'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 16:13:08'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 16:13:08'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 16:13:08'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 16:13:08'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 16:13:08'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 16:13:08'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 16:13:08'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 16:13:08'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:13:08'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:13:08'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:13:08'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:13:08'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:13:08'!
ERROR!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:13:08'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:13:08'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:13:08'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 16:13:08'!
FAILURE!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:13:10'!
ERROR!
!TerniLapilli methodsFor: 'error handling' stamp: 'FD 11/1/2020 16:13:25'!
signalGameHasEnded
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'error handling' stamp: 'FD 11/1/2020 16:13:39' prior: 50898541!
signalGameHasEnded
	self error: self class gameHasEndedErrorDescription ! !

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:13:41'!
ERROR!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 16:13:51'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 16:13:51'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 16:13:51'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 16:13:51'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 16:13:51'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 16:13:51'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 16:13:51'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 16:13:51'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 16:13:51'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:13:51'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:13:51'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:13:51'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:13:51'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:13:51'!
ERROR!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:13:51'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:13:51'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:13:51'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 16:13:51'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:13:51'!
ERROR!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 16:14:07'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 16:14:07'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 16:14:07'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 16:14:07'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 16:14:07'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 16:14:07'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 16:14:07'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 16:14:07'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 16:14:07'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:14:07'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:14:07'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:14:07'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:14:07'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:14:07'!
ERROR!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:14:07'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:14:07'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:14:07'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 16:14:07'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:14:07'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 11/1/2020 16:14:39' prior: 50897411!
test14WhenAColumnIsFilledWithXPlayerXWins

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 2@1.
	
	game putXAt: 1@0.
	game put0At: 1@1.
	
	game putXAt: 2@0.

	self assert: game hasPlayerXWon .! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 16:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 16:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 16:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 16:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 16:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 16:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 16:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 16:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 16:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:14:41'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 16:14:41'!
PASSED!
!TerniLapilli methodsFor: 'actions' stamp: 'FD 11/1/2020 16:18:01'!
put: aPlayer At: aPoint 
	
	self assertGameIsInProgress.
	currentlyPlaying  = aPlayer ifFalse: [ self signalItsNotThatPlayersTurn  ].
	
	(self isOccupied: aPoint) ifTrue: [ self signalSpaceAlreadyOccupied ].
	
	cellsOccupiedBy0 add: aPoint.
	currentlyPlaying := #theotherplayer! !
!TerniLapilli methodsFor: 'initialization' stamp: 'FD 11/1/2020 16:19:57' prior: 50896914 overrides: 16896425!
initialize

	currentlyPlaying := $X.
	cellsOccupiedBy0 := OrderedCollection new.
	cellsOccupiedByX := OrderedCollection new.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 11/1/2020 16:21:10'!
assert: aPlayer canPutAt: aPoint 
	
	self assertGameIsInProgress.
	currentlyPlaying  = aPlayer ifFalse: [ self signalItsNotThatPlayersTurn  ].
	
	(self isOccupied: aPoint) ifTrue: [ self signalSpaceAlreadyOccupied ].! !

!methodRemoval: TerniLapilli #put:At: stamp: 'FD 11/1/2020 16:21:12'!
put: aPlayer At: aPoint 
	
	self assertGameIsInProgress.
	currentlyPlaying  = aPlayer ifFalse: [ self signalItsNotThatPlayersTurn  ].
	
	(self isOccupied: aPoint) ifTrue: [ self signalSpaceAlreadyOccupied ].
	
	cellsOccupiedBy0 add: aPoint.
	currentlyPlaying := #theotherplayer!
!TerniLapilli methodsFor: 'actions' stamp: 'FD 11/1/2020 16:21:43' prior: 50898383!
put0At: aPoint 
	
	self assert: currentlyPlaying  canPutAt: aPoint.
	
	cellsOccupiedBy0 add: aPoint.
	currentlyPlaying := $X! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 11/1/2020 16:21:48' prior: 50896105!
putXAt: aPoint 
	
	self assert: currentlyPlaying  canPutAt: aPoint.
	
	cellsOccupiedByX add: aPoint.
	currentlyPlaying  := $0.! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 16:21:54'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 16:21:54'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 16:21:54'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 16:21:54'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 16:21:54'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 16:21:54'!
FAILURE!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 16:21:54'!
FAILURE!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 16:21:54'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 16:21:54'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:21:54'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:21:54'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:21:54'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:21:54'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:21:54'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:21:54'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:21:54'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:21:54'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 16:21:54'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 16:22:08'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 16:22:08'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 16:22:08'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 16:22:08'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 16:22:08'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 16:22:08'!
FAILURE!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 16:22:08'!
FAILURE!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 16:22:08'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 16:22:08'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:22:08'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:22:08'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:22:08'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:22:08'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:22:08'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:22:08'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:22:08'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:22:08'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 16:22:08'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 16:22:13'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'FD 11/1/2020 16:22:50' prior: 50898794!
put0At: aPoint 
	
	self assert: $0  canPutAt: aPoint.
	
	cellsOccupiedBy0 add: aPoint.
	currentlyPlaying := $X! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 11/1/2020 16:22:56' prior: 50898801!
putXAt: aPoint 
	
	self assert: $X  canPutAt: aPoint.
	
	cellsOccupiedByX add: aPoint.
	currentlyPlaying  := $0.! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 16:22:58'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 16:22:58'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 16:22:58'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 16:22:58'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 16:22:58'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 16:22:58'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 16:22:58'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 16:22:58'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 16:22:58'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:22:58'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:22:58'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:22:58'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:22:58'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:22:58'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:22:58'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:22:58'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:22:58'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 16:22:58'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:26:24'!
isColumn: aColumn CompletedIn: aCollection

	^((aCollection includes: 0@aColumn) and: [
		aCollection includes: 1@aColumn
		] and: [aCollection includes: 2@aColumn]).! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:28:32' prior: 50897210!
player0HasCompleteColumn
	^((self isColumn: 0 CompletedIn: cellsOccupiedBy0 ) 
	or: [( self isColumn: 1 CompletedIn: cellsOccupiedBy0)])
	or: [( self isColumn: 2 CompletedIn: cellsOccupiedBy0) ]! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 16:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 16:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 16:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 16:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 16:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 16:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 16:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 16:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 16:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 16:28:36'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:29:34' prior: 50897492!
playerXHasCompleteColumn
	^((self isColumn: 0 CompletedIn: cellsOccupiedByX)
	or: [( self isColumn: 1 CompletedIn: cellsOccupiedByX)])
	or: [( self isColumn: 2 CompletedIn: cellsOccupiedByX) ]! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 16:29:37'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 16:29:37'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 16:29:37'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 16:29:37'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 16:29:37'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 16:29:37'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 16:29:37'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 16:29:37'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 16:29:37'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:29:37'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:29:37'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:29:37'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:29:37'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:29:37'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:29:37'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:29:37'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:29:37'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 16:29:37'!
PASSED!

!methodRemoval: TerniLapilli #isColumnCompletedBy0: stamp: 'FD 11/1/2020 16:29:45'!
isColumnCompletedBy0: aColumn

	^((cellsOccupiedBy0 includes: 0@aColumn) and: [
		cellsOccupiedBy0 includes: 1@aColumn
		] and: [cellsOccupiedBy0 includes: 2@aColumn]).!

!methodRemoval: TerniLapilli #isColumnCompletedByX: stamp: 'FD 11/1/2020 16:29:46'!
isColumnCompletedByX:  aColumn

	^((cellsOccupiedByX includes: 0@aColumn) and: [
		cellsOccupiedByX includes: 1@aColumn
		] and: [cellsOccupiedByX includes: 2@aColumn]).!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:30:21'!
isFirstDiagonalCompletedIn: aCollection
	^((aCollection includes: 0@0) and: [
		aCollection includes: 1@1
		] and: [aCollection includes: 2@2]).! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:30:52' prior: 50897945!
player0HasCompleteDiagonal
	^ (self isFirstDiagonalCompletedIn: cellsOccupiedBy0) or: [self isSecondDiagonalCompletedBy0]! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 16:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 16:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 16:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 16:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 16:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 16:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 16:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 16:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 16:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:30:55'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 16:30:55'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:31:15' prior: 50897649!
playerXHasCompleteDiagonal
	^ ( self isFirstDiagonalCompletedIn: cellsOccupiedByX ) or: [self isSecondDiagonalCompletedByX]! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 16:31:18'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 16:31:18'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 16:31:18'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 16:31:18'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 16:31:18'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 16:31:18'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 16:31:18'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 16:31:18'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 16:31:18'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:31:18'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:31:18'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:31:18'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:31:18'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:31:18'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:31:18'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:31:18'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:31:18'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 16:31:18'!
PASSED!

!methodRemoval: TerniLapilli #isFirstDiagonalCompletedBy0 stamp: 'FD 11/1/2020 16:31:30'!
isFirstDiagonalCompletedBy0
	^((cellsOccupiedBy0 includes: 0@0) and: [
		cellsOccupiedBy0 includes: 1@1
		] and: [cellsOccupiedBy0 includes: 2@2]).!

!methodRemoval: TerniLapilli #isFirstDiagonalCompletedByX stamp: 'FD 11/1/2020 16:31:32'!
isFirstDiagonalCompletedByX
	^((cellsOccupiedByX includes: 0@0) and: [
		cellsOccupiedByX includes: 1@1
		] and: [cellsOccupiedByX includes: 2@2]).!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 16:31:34'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 16:31:34'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 16:31:34'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 16:31:34'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 16:31:34'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 16:31:34'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 16:31:34'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 16:31:34'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 16:31:34'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:31:34'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:31:34'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:31:34'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:31:34'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:31:34'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:31:34'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:31:34'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:31:34'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 16:31:34'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:33:58'!
isRow: aRow CompletedIn: aCollection

	^((aCollection includes: aRow@0) and: [
		aCollection includes: aRow@1
		] and: [aCollection includes: aRow@2]).! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:34:34' prior: 50896863!
player0HasCompleteRow
	^ ((self isRow: 0 CompletedIn: cellsOccupiedBy0 )
	or: [( self isRow: 1 CompletedIn: cellsOccupiedBy0)])
	or: [( self isRow: 2 CompletedIn: cellsOccupiedBy0) ]! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:34:55' prior: 50896750!
playerXHasCompleteRow
	
	^ ((self isRow: 0 CompletedIn: cellsOccupiedBy0)
	or: [( self isRow: 0 CompletedIn: cellsOccupiedBy0)])
	or: [(self isRow: 0 CompletedIn: cellsOccupiedBy0) ]! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:35:16' prior: 50899401!
playerXHasCompleteRow
	
	^ ((self isRow: 0 CompletedIn: cellsOccupiedByX)
	or: [( self isRow: 1 CompletedIn: cellsOccupiedByX)])
	or: [(self isRow: 2 CompletedIn: cellsOccupiedByX) ]! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 16:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 16:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 16:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 16:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 16:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 16:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 16:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 16:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 16:35:19'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:35:19'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:35:19'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:35:19'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:35:19'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:35:19'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:35:19'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:35:19'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:35:19'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 16:35:19'!
PASSED!

!methodRemoval: TerniLapilli #isRowCompletedBy0: stamp: 'FD 11/1/2020 16:35:31'!
isRowCompletedBy0: aRow

	^((cellsOccupiedBy0 includes: aRow@0) and: [
		cellsOccupiedBy0 includes: aRow@1
		] and: [cellsOccupiedBy0 includes: aRow@2]).!

!methodRemoval: TerniLapilli #isRowCompletedByX: stamp: 'FD 11/1/2020 16:35:32'!
isRowCompletedByX: aRow

	^((cellsOccupiedByX includes: aRow@0) and: [
		cellsOccupiedByX includes: aRow@1
		] and: [cellsOccupiedByX includes: aRow@2]).!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:35:55'!
isSecondDiagonalCompletedIn: aCollection
	^((aCollection includes: 0@2) and: [
		aCollection includes: 1@1
		] and: [aCollection includes: 2@0]).! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:36:19' prior: 50899175!
player0HasCompleteDiagonal
	^ (self isFirstDiagonalCompletedIn: cellsOccupiedBy0) or: [self  isSecondDiagonalCompletedIn: cellsOccupiedBy0]! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:36:36' prior: 50899242!
playerXHasCompleteDiagonal
	^ ( self isFirstDiagonalCompletedIn: cellsOccupiedByX )
	or: [self self  isSecondDiagonalCompletedIn: cellsOccupiedByX]! !

!methodRemoval: TerniLapilli #isSecondDiagonalCompletedBy0 stamp: 'FD 11/1/2020 16:36:50'!
isSecondDiagonalCompletedBy0
	^((cellsOccupiedBy0 includes: 0@2) and: [
		cellsOccupiedBy0 includes: 1@1
		] and: [cellsOccupiedBy0 includes: 2@0]).!

!methodRemoval: TerniLapilli #isSecondDiagonalCompletedByX stamp: 'FD 11/1/2020 16:36:51'!
isSecondDiagonalCompletedByX
	^((cellsOccupiedByX includes: 0@2) and: [
		cellsOccupiedByX includes: 1@1
		] and: [cellsOccupiedByX includes: 2@0]).!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 16:36:54'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 16:36:54'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 16:36:54'!
ERROR!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 16:36:54'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 16:36:54'!
ERROR!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 16:36:54'!
ERROR!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 16:36:54'!
FAILURE!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 16:36:54'!
ERROR!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 16:36:54'!
ERROR!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:36:54'!
ERROR!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:36:54'!
ERROR!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:36:54'!
ERROR!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:36:54'!
ERROR!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:36:54'!
ERROR!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:36:54'!
ERROR!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:36:54'!
ERROR!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:36:54'!
ERROR!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 16:36:54'!
ERROR!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 16:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 16:36:59'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 16:36:59'!
ERROR!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 16:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 16:36:59'!
ERROR!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 16:36:59'!
ERROR!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 16:36:59'!
FAILURE!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 16:36:59'!
ERROR!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 16:36:59'!
ERROR!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:36:59'!
ERROR!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:36:59'!
ERROR!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:36:59'!
ERROR!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:36:59'!
ERROR!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:36:59'!
ERROR!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:36:59'!
ERROR!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:36:59'!
ERROR!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:36:59'!
ERROR!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 16:36:59'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 16:37:01'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:37:35' prior: 50899501!
player0HasCompleteDiagonal
	^ (self isFirstDiagonalCompletedIn: cellsOccupiedBy0)
	or: [self  isSecondDiagonalCompletedIn: cellsOccupiedBy0]! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:37:44' prior: 50899509!
playerXHasCompleteDiagonal
	^ ( self isFirstDiagonalCompletedIn: cellsOccupiedByX )
	or: [self isSecondDiagonalCompletedIn: cellsOccupiedByX]! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:37:46'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 16:37:46'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:39:15'!
cellsHaveCompleteColumn: aCollectionOfOccupiedCells
	^((self isColumn: 0 CompletedIn: aCollectionOfOccupiedCells ) 
	or: [( self isColumn: 1 CompletedIn: aCollectionOfOccupiedCells)])
	or: [( self isColumn: 2 CompletedIn: aCollectionOfOccupiedCells) ]! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:39:51' prior: 50898199!
hasPlayer0Won
	^(self player0HasCompleteRow
	or: [self cellsHaveCompleteColumn: cellsOccupiedBy0 ])
	or: [ self player0HasCompleteDiagonal ].! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:40:11' prior: 50897580!
hasPlayerXWon
	^ (self playerXHasCompleteRow
	or: [self cellsHaveCompleteColumn: cellsOccupiedByX ])
	or: [ self playerXHasCompleteDiagonal ].! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 16:40:14'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 16:40:14'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 16:40:14'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 16:40:14'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 16:40:14'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 16:40:14'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 16:40:14'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 16:40:14'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 16:40:14'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:40:14'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:40:14'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:40:14'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:40:14'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:40:14'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:40:14'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:40:14'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:40:14'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 16:40:14'!
PASSED!

!methodRemoval: TerniLapilli #playerXHasCompleteColumn stamp: 'FD 11/1/2020 16:40:18'!
playerXHasCompleteColumn
	^((self isColumn: 0 CompletedIn: cellsOccupiedByX)
	or: [( self isColumn: 1 CompletedIn: cellsOccupiedByX)])
	or: [( self isColumn: 2 CompletedIn: cellsOccupiedByX) ]!

!methodRemoval: TerniLapilli #player0HasCompleteColumn stamp: 'FD 11/1/2020 16:40:22'!
player0HasCompleteColumn
	^((self isColumn: 0 CompletedIn: cellsOccupiedBy0 ) 
	or: [( self isColumn: 1 CompletedIn: cellsOccupiedBy0)])
	or: [( self isColumn: 2 CompletedIn: cellsOccupiedBy0) ]!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:40:47'!
cellsHaveCompleteDiagonal: aCollectionOfOccupiedCells
	^ (self isFirstDiagonalCompletedIn: aCollectionOfOccupiedCells)
	or: [self  isSecondDiagonalCompletedIn: aCollectionOfOccupiedCells]! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:41:21' prior: 50899740!
hasPlayer0Won
	^(self player0HasCompleteRow
	or: [self cellsHaveCompleteColumn: cellsOccupiedBy0 ])
	or: [self cellsHaveCompleteDiagonal: cellsOccupiedBy0 ].! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:41:35' prior: 50899748!
hasPlayerXWon
	^ (self playerXHasCompleteRow
	or: [self cellsHaveCompleteColumn: cellsOccupiedByX ])
	or: [self cellsHaveCompleteDiagonal: cellsOccupiedByX  ].! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:41:37' prior: 50899850!
hasPlayerXWon
	^ (self playerXHasCompleteRow
	or: [self cellsHaveCompleteColumn: cellsOccupiedByX ])
	or: [self cellsHaveCompleteDiagonal: cellsOccupiedByX].! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 16:41:41'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 16:41:41'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 16:41:41'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 16:41:41'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 16:41:41'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 16:41:41'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 16:41:41'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 16:41:41'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 16:41:41'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:41:41'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:41:41'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:41:41'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:41:41'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:41:41'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:41:41'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:41:41'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:41:41'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 16:41:41'!
PASSED!

!methodRemoval: TerniLapilli #playerXHasCompleteDiagonal stamp: 'FD 11/1/2020 16:41:46'!
playerXHasCompleteDiagonal
	^ ( self isFirstDiagonalCompletedIn: cellsOccupiedByX )
	or: [self isSecondDiagonalCompletedIn: cellsOccupiedByX]!

!methodRemoval: TerniLapilli #player0HasCompleteDiagonal stamp: 'FD 11/1/2020 16:41:50'!
player0HasCompleteDiagonal
	^ (self isFirstDiagonalCompletedIn: cellsOccupiedBy0)
	or: [self  isSecondDiagonalCompletedIn: cellsOccupiedBy0]!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:42:35'!
cellsHaveCompleteRowIn: aCollectionOfOccupiedCells
	^ ((self isRow: 0 CompletedIn: aCollectionOfOccupiedCells )
	or: [( self isRow: 1 CompletedIn: aCollectionOfOccupiedCells)])
	or: [( self isRow: 2 CompletedIn: aCollectionOfOccupiedCells) ]! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:42:51'!
cellsHaveCompleteRow: aCollectionOfOccupiedCells
	^ ((self isRow: 0 CompletedIn: aCollectionOfOccupiedCells )
	or: [( self isRow: 1 CompletedIn: aCollectionOfOccupiedCells)])
	or: [( self isRow: 2 CompletedIn: aCollectionOfOccupiedCells) ]! !

!methodRemoval: TerniLapilli #cellsHaveCompleteRowIn: stamp: 'FD 11/1/2020 16:42:51'!
cellsHaveCompleteRowIn: aCollectionOfOccupiedCells
	^ ((self isRow: 0 CompletedIn: aCollectionOfOccupiedCells )
	or: [( self isRow: 1 CompletedIn: aCollectionOfOccupiedCells)])
	or: [( self isRow: 2 CompletedIn: aCollectionOfOccupiedCells) ]!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:43:01' prior: 50899167!
isFirstDiagonalCompletedIn: aCollectionOfOccupiedCells
	^((aCollectionOfOccupiedCells includes: 0@0) and: [
		aCollectionOfOccupiedCells includes: 1@1
		] and: [aCollectionOfOccupiedCells includes: 2@2]).! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:43:25' prior: 50899005!
isColumn: aColumn CompletedIn: aCollectionOfOccupiedCells

	^((aCollectionOfOccupiedCells includes: 0@aColumn) and: [
		aCollectionOfOccupiedCells includes: 1@aColumn
		] and: [aCollectionOfOccupiedCells includes: 2@aColumn]).! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:43:33' prior: 50899493!
isSecondDiagonalCompletedIn: aCollectionOfOccupiedCells
	^((aCollectionOfOccupiedCells includes: 0@2) and: [
		aCollectionOfOccupiedCells includes: 1@1
		] and: [aCollectionOfOccupiedCells includes: 2@0]).! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:44:20' prior: 50899842!
hasPlayer0Won
	^((self cellsHaveCompleteRow: cellsOccupiedBy0)
	or: [self cellsHaveCompleteColumn: cellsOccupiedBy0 ])
	or: [self cellsHaveCompleteDiagonal: cellsOccupiedBy0 ].! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:44:31' prior: 50899858!
hasPlayerXWon
	^ ((self cellsHaveCompleteRow: cellsOccupiedByX)
	or: [self cellsHaveCompleteColumn: cellsOccupiedByX ])
	or: [self cellsHaveCompleteDiagonal: cellsOccupiedByX].! !

!methodRemoval: TerniLapilli #player0HasCompleteRow stamp: 'FD 11/1/2020 16:44:37'!
player0HasCompleteRow
	^ ((self isRow: 0 CompletedIn: cellsOccupiedBy0 )
	or: [( self isRow: 1 CompletedIn: cellsOccupiedBy0)])
	or: [( self isRow: 2 CompletedIn: cellsOccupiedBy0) ]!

!methodRemoval: TerniLapilli #playerXHasCompleteRow stamp: 'FD 11/1/2020 16:44:39'!
playerXHasCompleteRow
	
	^ ((self isRow: 0 CompletedIn: cellsOccupiedByX)
	or: [( self isRow: 1 CompletedIn: cellsOccupiedByX)])
	or: [(self isRow: 2 CompletedIn: cellsOccupiedByX) ]!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 16:44:42'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 16:44:42'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 16:44:42'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 16:44:42'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 16:44:42'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 16:44:42'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 16:44:42'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 16:44:42'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 16:44:42'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:44:42'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:44:42'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:44:42'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:44:42'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:44:42'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:44:42'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:44:42'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:44:42'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 16:44:42'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:48:41' prior: 50900001!
hasPlayer0Won

	^((self cellsHaveCompleteRow: cellsOccupiedBy0)
	or: [self cellsHaveCompleteColumn: cellsOccupiedBy0 ])
	or: [self cellsHaveCompleteDiagonal: cellsOccupiedBy0 ].! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:51:41'!
occupiedCellsMeetWinCondition: aCollectionOfOccupiedCells

	^((self cellsHaveCompleteRow: aCollectionOfOccupiedCells)
	or: [self cellsHaveCompleteColumn: aCollectionOfOccupiedCells ])
	or: [self cellsHaveCompleteDiagonal: aCollectionOfOccupiedCells ].! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:52:25' prior: 50900096!
hasPlayer0Won

	^self occupiedCellsMeetWinCondition: (self getOccupiedCellsBy: $0).! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 16:52:28'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 16:52:28'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 16:52:28'!
ERROR!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 16:52:28'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 16:52:28'!
ERROR!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 16:52:28'!
ERROR!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 16:52:28'!
FAILURE!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 16:52:28'!
ERROR!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 16:52:28'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:52:28'!
ERROR!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:52:28'!
ERROR!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:52:28'!
ERROR!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:52:28'!
ERROR!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:52:28'!
ERROR!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:52:28'!
ERROR!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:52:28'!
ERROR!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:52:28'!
ERROR!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 16:52:28'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 16:52:30'!
ERROR!
!TerniLapilli methodsFor: 'accessing' stamp: 'FD 11/1/2020 16:52:35'!
getOccupiedCellsBy: aCharacter 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'accessing' stamp: 'FD 11/1/2020 16:53:38' prior: 50900183!
getOccupiedCellsBy: aPlayer 
	
	aPlayer = $X ifTrue: [^cellsOccupiedByX ].
	aPlayer = $0 ifTrue: [^cellsOccupiedBy0 ].! !

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 16:53:39'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 16:53:43'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 16:53:43'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 16:53:43'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 16:53:43'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 16:53:43'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 16:53:43'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 16:53:43'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 16:53:43'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 16:53:43'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:53:43'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:53:43'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:53:43'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:53:43'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:53:43'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:53:43'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:53:43'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:53:43'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 16:53:43'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 11/1/2020 16:56:17'!
test19APlayerCantPutATokenOutsideTheBoard

	| game |
	
	game := TerniLapilli new.
	
	self should: [game putXAt: 4@4 ] raise: Error withMessageText: TerniLapilli invalidPositionErrorDescription.! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 16:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 16:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 16:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 16:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 16:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 16:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 16:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 16:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 16:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 16:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 16:56:23'!
ERROR!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 16:56:23'!
ERROR!
!TerniLapilli class methodsFor: 'error handling' stamp: 'FD 11/1/2020 16:56:30'!
invalidPositionErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'FD 11/1/2020 16:56:45' prior: 50900334!
invalidPositionErrorDescription
	^'Invalid position'! !

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 16:56:47'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'FD 11/1/2020 16:57:29' prior: 50898773!
assert: aPlayer canPutAt: aPoint 
	
	self assertGameIsInProgress.
	currentlyPlaying  = aPlayer ifFalse: [ self signalItsNotThatPlayersTurn  ].
	self assertValidPosition.
	
	(self isOccupied: aPoint) ifTrue: [ self signalSpaceAlreadyOccupied ].! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 16:57:32'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 16:57:32'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 16:57:32'!
ERROR!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 16:57:32'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 16:57:32'!
ERROR!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 16:57:32'!
ERROR!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 16:57:32'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 16:57:32'!
ERROR!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 16:57:32'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:57:32'!
ERROR!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 16:57:32'!
ERROR!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:57:32'!
ERROR!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:57:32'!
ERROR!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:57:32'!
ERROR!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:57:32'!
ERROR!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 16:57:32'!
ERROR!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 16:57:32'!
ERROR!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 16:57:32'!
ERROR!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 16:57:32'!
FAILURE!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 16:57:34'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 16:57:41'!
assertValidPosition
	self shouldBeImplemented.! !

!methodRemoval: TerniLapilli #assertValidPosition stamp: 'FD 11/1/2020 16:58:00'!
assertValidPosition
	self shouldBeImplemented.!
!TerniLapilli methodsFor: 'actions' stamp: 'FD 11/1/2020 16:58:15' prior: 50900347!
assert: aPlayer canPutAt: aPoint 
	
	self assertGameIsInProgress.
	currentlyPlaying  = aPlayer ifFalse: [ self signalItsNotThatPlayersTurn  ].
	self assertIsValidPosition: aPoint.
	
	(self isOccupied: aPoint) ifTrue: [ self signalSpaceAlreadyOccupied ].! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 17:01:07'!
assertIsValidPosition: aPoint

	(aPoint between: 0@0 and: 2@2) ifFalse: [ self signalInvalidPosition ]! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:01:12'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:01:12'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:01:12'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:01:12'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:01:12'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:01:12'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:01:12'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:01:12'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:01:12'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:01:12'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:01:12'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:01:12'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:01:12'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:01:12'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:01:12'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:01:12'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:01:12'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:01:12'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:01:12'!
FAILURE!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:01:12'!
FAILURE!
!TerniLapilli methodsFor: 'error handling' stamp: 'FD 11/1/2020 17:01:40'!
signalInvalidPosition
	self error: self class invalidPositionErrorDescription ! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:01:42'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:01:42'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:01:42'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:01:42'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:01:42'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:01:42'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:01:42'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:01:42'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:01:42'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:01:42'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:01:42'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:01:42'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:01:42'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:01:42'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:01:42'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:01:42'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:01:42'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:01:42'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:01:42'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 11/1/2020 17:03:40'!
test20APlayerCantMoveATokenIfTheGameHasEnded

	| game |
	
	game := TerniLapilli new.
	
	self should: [game putXAt: 4@4 ] raise: Error withMessageText: TerniLapilli gameHasEndedErrorDescription .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 11/1/2020 17:04:34' prior: 50900585!
test20APlayerCantMoveATokenIfTheGameHasEnded

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@2.
	
	game putXAt: 0@1.
	game put0At: 2@1.
	
	game putXAt: 0@2.
	
	self should: [game move0from: 1@2 to: 2@0 ] raise: Error withMessageText: TerniLapilli gameHasEndedErrorDescription.! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:04:38'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:04:38'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:04:38'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:04:38'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:04:38'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:04:38'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:04:38'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:04:38'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:04:38'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:04:38'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:04:38'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:04:38'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:04:38'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:04:38'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:04:38'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:04:38'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:04:38'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:04:38'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:04:38'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:04:38'!
FAILURE!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:04:38'!
FAILURE!
!TerniLapilliTest methodsFor: 'assertions' stamp: 'FD 11/1/2020 17:04:42' overrides: 16927375!
assert: aFalse description: aString 
	self shouldBeImplemented.! !

!methodRemoval: TerniLapilliTest #assert:description: stamp: 'FD 11/1/2020 17:05:01'!
assert: aFalse description: aString 
	self shouldBeImplemented.!
!TerniLapilli methodsFor: 'actions' stamp: 'FD 11/1/2020 17:07:09'!
move0from: anOccupiedPoint to: anAdjacentUnoccupiedPoint 
	
	self assert: $0 canMoveFrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint.! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:07:16'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:07:16'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:07:16'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:07:16'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:07:16'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:07:16'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:07:16'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:07:16'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:07:16'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:07:16'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:07:16'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:07:16'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:07:16'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:07:16'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:07:16'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:07:16'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:07:16'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:07:16'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:07:16'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:07:16'!
FAILURE!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:07:16'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 17:08:22'!
assert: aPlayer canMoveFrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint.
	
	self assertGameIsInProgress.! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:08:24'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:08:24'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:08:24'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:08:24'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:08:24'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:08:24'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:08:24'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:08:24'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:08:24'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:08:24'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:08:24'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:08:24'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:08:24'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:08:24'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:08:24'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:08:24'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:08:24'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:08:24'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:08:24'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:08:24'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 11/1/2020 17:11:14'!
test21APlayerCantMoveATokenFromAnEmptyPosition

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@2.
	
	game putXAt: 0@1.
	game put0At: 2@1.
	
	game putXAt: 2@2.
	game put0At: 2@0.
	
	self should: [game move0from: 0@2 to: 1@1 ] raise: Error withMessageText: TerniLapilli positionIsEmptyErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 11/1/2020 17:13:31' prior: 50900595!
test20APlayerCantMoveATokenIfTheGameHasEnded

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@2.
	
	game putXAt: 0@1.
	game put0At: 1@0.
	
	game putXAt: 2@2.
	game put0At: 1@1.
	
	self should: [game moveXfrom: 2@2 to: 2@1 ] raise: Error withMessageText: TerniLapilli gameHasEndedErrorDescription.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 11/1/2020 17:13:48'!
moveXfrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint 
	
	self assert: $X canMoveFrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint.! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:13:51'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:13:51'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:13:51'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:13:51'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:13:52'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:13:52'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:13:52'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:13:52'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:13:52'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:13:52'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:13:52'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:13:52'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:13:52'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:13:52'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:13:52'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:13:52'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:13:52'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:13:52'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:13:52'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:13:52'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:13:52'!
ERROR!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:13:52'!
ERROR!
!TerniLapilli class methodsFor: 'error handling' stamp: 'FD 11/1/2020 17:14:00'!
positionIsEmptyErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'FD 11/1/2020 17:14:14' prior: 50900949!
positionIsEmptyErrorDescription
	^ 'position is empty'! !

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:14:15'!
FAILURE!
!TerniLapilli methodsFor: 'error handling' stamp: 'FD 11/1/2020 17:14:34'!
signalPositionIsEmpty
	self error: self class positionIsEmptyErrorDescription ! !

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:14:45'!
FAILURE!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:14:45'!
FAILURE!
!TerniLapilli methodsFor: 'error handling' stamp: 'FD 11/1/2020 17:16:23'!
signalSpaceIsEmpty
	self error: self class positionIsEmptyErrorDescription ! !

!methodRemoval: TerniLapilli #signalPositionIsEmpty stamp: 'FD 11/1/2020 17:16:23'!
signalPositionIsEmpty
	self error: self class positionIsEmptyErrorDescription !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 17:16:57' prior: 50900766!
assert: aPlayer canMoveFrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint.
	
	self assertGameIsInProgress.
	(self isOccupied: anOccupiedPoint) ifFalse: [ self signalSpaceAlreadyOccupied ].! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:16:59'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:16:59'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:16:59'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:16:59'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:16:59'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:16:59'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:16:59'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:16:59'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:16:59'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:16:59'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:16:59'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:16:59'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:16:59'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:16:59'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:16:59'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:16:59'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:16:59'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:16:59'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:16:59'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:16:59'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:16:59'!
FAILURE!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:16:59'!
FAILURE!
!TerniLapilli class methodsFor: 'error handling' stamp: 'FD 11/1/2020 17:17:25'!
spaceIsEmptyErrorDescription
	^ 'position is empty'! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FD 11/1/2020 17:17:25' prior: 50900975!
signalSpaceIsEmpty
	self error: self class spaceIsEmptyErrorDescription ! !

!methodRemoval: TerniLapilli class #positionIsEmptyErrorDescription stamp: 'FD 11/1/2020 17:17:25'!
positionIsEmptyErrorDescription
	^ 'position is empty'!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 11/1/2020 17:17:36' prior: 50900840!
test21APlayerCantMoveATokenFromAnEmptyPosition

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@2.
	
	game putXAt: 0@1.
	game put0At: 2@1.
	
	game putXAt: 2@2.
	game put0At: 2@0.
	
	self should: [game move0from: 0@2 to: 1@1 ] raise: Error withMessageText: TerniLapilli spaceIsEmptyErrorDescription .! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:17:38'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:17:38'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:17:38'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:17:38'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:17:38'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:17:38'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:17:38'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:17:38'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:17:38'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:17:38'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:17:38'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:17:38'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:17:38'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:17:38'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:17:38'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:17:38'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:17:38'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:17:38'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:17:38'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:17:38'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:17:38'!
FAILURE!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:17:38'!
FAILURE!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:17:59'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:17:59'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:17:59'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:17:59'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:17:59'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:17:59'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:17:59'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:17:59'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:17:59'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:17:59'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:17:59'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:17:59'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:17:59'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:17:59'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:17:59'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:17:59'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:17:59'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:17:59'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:17:59'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:17:59'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:17:59'!
FAILURE!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:17:59'!
FAILURE!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:18:31'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:18:31'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:18:31'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:18:31'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:18:31'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:18:31'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:18:31'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:18:31'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:18:31'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:18:31'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:18:31'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:18:31'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:18:31'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:18:31'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:18:31'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:18:31'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:18:31'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:18:31'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:18:31'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:18:31'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:18:31'!
FAILURE!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:18:31'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 17:19:45' prior: 50900986!
assert: aPlayer canMoveFrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint.
	
	self assertGameIsInProgress.
	(self isOccupied: anOccupiedPoint) ifFalse: [ self signalSpaceIsEmpty ].! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:19:47'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:19:47'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 11/1/2020 17:21:01' prior: 50901086!
test21APlayerCantMoveATokenFromAnEmptyPosition

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@2.
	
	game putXAt: 0@1.
	game put0At: 2@1.
	
	game putXAt: 2@2.
	game put0At: 2@0.
	
	self should: [game moveXfrom: 0@2 to: 1@1 ] raise: Error withMessageText: TerniLapilli spaceIsEmptyErrorDescription .! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:21:04'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:21:04'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:21:04'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:21:04'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:21:04'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:21:04'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:21:04'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:21:04'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:21:04'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:21:04'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:21:04'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:21:04'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:21:04'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:21:04'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:21:04'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:21:04'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:21:04'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:21:04'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:21:04'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:21:04'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:21:04'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 11/1/2020 17:22:09'!
test22APlayerCantMoveATokenToAnOccupiedPosition

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@2.
	
	game putXAt: 0@1.
	game put0At: 2@1.
	
	game putXAt: 2@2.
	game put0At: 2@0.
	
	self should: [game moveXfrom: 2@2 to: 2@1 ] raise: Error withMessageText: TerniLapilli spaceAlreadyOccupied .! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 17:22:41' prior: 50901323!
assert: aPlayer canMoveFrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint.
	
	self assertGameIsInProgress.
	(self isOccupied: anOccupiedPoint) ifFalse: [ self signalSpaceIsEmpty ].
	(self isOccupied: anAdjacentUnoccupiedPoint) ifTrue: [ self signalSpaceAlreadyOccupied ].! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:22:43'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:22:43'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 11/1/2020 17:23:41'!
test22APlayerCantMoveATokenIfItIsNotTheirTurn

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@2.
	
	game putXAt: 0@1.
	game put0At: 2@1.
	
	game putXAt: 2@2.
	game put0At: 2@0.
	
	self should: [game move0from: 2@0 to: 1@0 ] raise: Error withMessageText: TerniLapilli itsNotPlayersTurnErrorDescription .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 11/1/2020 17:23:55'!
test23APlayerCantMoveATokenIfItIsNotTheirTurn

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@2.
	
	game putXAt: 0@1.
	game put0At: 2@1.
	
	game putXAt: 2@2.
	game put0At: 2@0.
	
	self should: [game move0from: 2@0 to: 1@0 ] raise: Error withMessageText: TerniLapilli itsNotPlayersTurnErrorDescription .! !

!methodRemoval: TerniLapilliTest #test22APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 17:23:55'!
test22APlayerCantMoveATokenIfItIsNotTheirTurn

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@2.
	
	game putXAt: 0@1.
	game put0At: 2@1.
	
	game putXAt: 2@2.
	game put0At: 2@0.
	
	self should: [game move0from: 2@0 to: 1@0 ] raise: Error withMessageText: TerniLapilli itsNotPlayersTurnErrorDescription .!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:23:58'!
PASSED!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 17:23:58'!
FAILURE!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 17:23:58'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 17:24:36' prior: 50901500!
assert: aPlayer canMoveFrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint.
	
	self assertGameIsInProgress.
	currentlyPlaying  = aPlayer ifFalse: [ self signalItsNotThatPlayersTurn  ].
	(self isOccupied: anOccupiedPoint) ifFalse: [ self signalSpaceIsEmpty ].
	(self isOccupied: anAdjacentUnoccupiedPoint) ifTrue: [ self signalSpaceAlreadyOccupied ].! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:24:38'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:24:38'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:24:38'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:24:38'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:24:38'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:24:38'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:24:38'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:24:38'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:24:38'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:24:38'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:24:38'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:24:38'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:24:38'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:24:38'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:24:38'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:24:38'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:24:38'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:24:38'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:24:38'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:24:38'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:24:38'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:24:38'!
PASSED!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 17:24:38'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 11/1/2020 17:25:32'!
test23APlayerCantMoveATokenFromAnotherPlayer

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@2.
	
	game putXAt: 0@1.
	game put0At: 2@1.
	
	game putXAt: 2@2.
	game put0At: 2@0.
	
	self should: [game move0from: 2@2 to: 1@1 ] raise: Error withMessageText: TerniLapilli itsNotPlayersTurnErrorDescription .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 11/1/2020 17:25:48'!
test24APlayerCantMoveATokenFromAnotherPlayer

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@2.
	
	game putXAt: 0@1.
	game put0At: 2@1.
	
	game putXAt: 2@2.
	game put0At: 2@0.
	
	self should: [game move0from: 2@2 to: 1@1 ] raise: Error withMessageText: TerniLapilli itsNotPlayersTurnErrorDescription .! !

!methodRemoval: TerniLapilliTest #test23APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 17:25:48'!
test23APlayerCantMoveATokenFromAnotherPlayer

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@2.
	
	game putXAt: 0@1.
	game put0At: 2@1.
	
	game putXAt: 2@2.
	game put0At: 2@0.
	
	self should: [game move0from: 2@2 to: 1@1 ] raise: Error withMessageText: TerniLapilli itsNotPlayersTurnErrorDescription .!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 17:26:55' prior: 50901709!
assert: aPlayer canMoveFrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint.
	
	self assertGameIsInProgress.
	currentlyPlaying  = aPlayer ifFalse: [ self signalItsNotThatPlayersTurn  ].
	
	(self isOccupied: anOccupiedPoint) ifFalse: [ self signalSpaceIsEmpty ].
	self assertToken: anOccupiedPoint belongsTo: aPlayer.

	(self isOccupied: anAdjacentUnoccupiedPoint) ifTrue: [ self signalSpaceAlreadyOccupied ].! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:26:58'!
FAILURE!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 17:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 17:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:26:58'!
FAILURE!
!TerniLapilliTest methodsFor: 'assertions' stamp: 'FD 11/1/2020 17:27:02' overrides: 16927375!
assert: aFalse description: aString 
	self shouldBeImplemented.! !

!methodRemoval: TerniLapilliTest #assert:description: stamp: 'FD 11/1/2020 17:27:09'!
assert: aFalse description: aString 
	self shouldBeImplemented.!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:27:28'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:27:28'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:27:28'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:27:28'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:27:28'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:27:28'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:27:28'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:27:28'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:27:28'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:27:28'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:27:28'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:27:28'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:27:28'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:27:28'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:27:28'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:27:28'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:27:28'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:27:28'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:27:28'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:27:28'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:27:28'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:27:28'!
FAILURE!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 17:27:28'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 17:27:28'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:27:28'!
FAILURE!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:28:01'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 17:29:29'!
assertToken: anOccupiedPoint belongsTo: aPlayer.
	
	((self getOccupiedCellsBy: aPlayer) includes: anOccupiedPoint) ifFalse: [self signal]! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 11/1/2020 17:30:03' prior: 50901815!
test24APlayerCantMoveATokenFromAnotherPlayer

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@2.
	
	game putXAt: 0@1.
	game put0At: 2@1.
	
	game putXAt: 2@2.
	game put0At: 2@0.
	
	self should: [game move0from: 2@2 to: 1@1 ] raise: Error withMessageText: TerniLapilli tokenIsNotOwnedErrorDescription .! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:30:06'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:30:06'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:30:06'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:30:06'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:30:06'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:30:06'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:30:06'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:30:06'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:30:06'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:30:06'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:30:06'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:30:06'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:30:06'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:30:06'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:30:06'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:30:06'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:30:06'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:30:06'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:30:06'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:30:06'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:30:06'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:30:06'!
PASSED!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 17:30:06'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 17:30:06'!
ERROR!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 17:30:06'!
ERROR!
!TerniLapilli class methodsFor: 'error handling' stamp: 'FD 11/1/2020 17:30:13'!
tokenIsNotOwnedErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'FD 11/1/2020 17:30:21' prior: 50902150!
tokenIsNotOwnedErrorDescription
	^ 'token is not owned'! !

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 17:30:22'!
FAILURE!
!TerniLapilli methodsFor: 'error handling' stamp: 'FD 11/1/2020 17:30:37'!
signalTokenIsNotOwned
	self error: self class tokenIsNotOwnedErrorDescription ! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 17:30:57' prior: 50902043!
assertToken: anOccupiedPoint belongsTo: aPlayer.
	
	((self getOccupiedCellsBy: aPlayer) includes: anOccupiedPoint) ifFalse: [self signalTokenIsNotOwned ]! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:31:00'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:31:00'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:31:00'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:31:00'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:31:00'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:31:00'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:31:00'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:31:00'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:31:00'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:31:00'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:31:00'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:31:00'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:31:00'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:31:00'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:31:00'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:31:00'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:31:00'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:31:00'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:31:00'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:31:00'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:31:00'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:31:00'!
PASSED!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 17:31:00'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 17:31:00'!
FAILURE!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 17:31:00'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 11/1/2020 17:31:12' prior: 50902051!
test24APlayerCantMoveATokenFromAnotherPlayer

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@2.
	
	game putXAt: 0@1.
	game put0At: 2@1.
	
	game putXAt: 2@2.
	game put0At: 2@0.
	
	self should: [game moveXfrom: 2@2 to: 1@1 ] raise: Error withMessageText: TerniLapilli tokenIsNotOwnedErrorDescription .! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:31:15'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:31:15'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:31:15'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:31:15'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:31:15'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:31:15'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:31:15'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:31:15'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:31:15'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:31:15'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:31:15'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:31:15'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:31:15'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:31:15'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:31:15'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:31:15'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:31:15'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:31:15'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:31:15'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:31:15'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:31:15'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:31:15'!
PASSED!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 17:31:15'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 17:31:15'!
FAILURE!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 17:31:15'!
FAILURE!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 17:31:26'!
FAILURE!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 17:31:26'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 11/1/2020 17:32:36' prior: 50902263!
test24APlayerCantMoveATokenFromAnotherPlayer

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@2.
	
	game putXAt: 0@1.
	game put0At: 2@1.
	
	game putXAt: 2@2.
	game put0At: 2@0.
	
	self should: [game moveXfrom: 2@0 to: 1@1 ] raise: Error withMessageText: TerniLapilli tokenIsNotOwnedErrorDescription .! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:32:40'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:32:40'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:32:40'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:32:40'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:32:40'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:32:40'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:32:40'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:32:40'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:32:40'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:32:40'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:32:40'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:32:40'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:32:40'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:32:40'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:32:40'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:32:40'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:32:40'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:32:40'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:32:40'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:32:40'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:32:40'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:32:40'!
PASSED!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 17:32:40'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 17:32:40'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 11/1/2020 17:33:28'!
test24APlayerCantMoveBeforeTheSixthTurn

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@2.

	
	self should: [game moveXfrom: 0@0 to: 1@1 ] raise: Error withMessageText: TerniLapilli cannotMoveYetErrorDescription .! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'FD 11/1/2020 17:33:50'!
cannotMoveYetErrorDescription
	^ 'cannot move before the sixth turn'! !
!TerniLapilli methodsFor: 'error handling' stamp: 'FD 11/1/2020 17:34:08'!
signalCannotMoveYet
	self error: self class cannotMoveYetErrorDescription ! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 17:34:51' prior: 50901842!
assert: aPlayer canMoveFrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint.
	
	self assertAllTokensAreOnTheBoard.
	self assertGameIsInProgress.
	currentlyPlaying  = aPlayer ifFalse: [ self signalItsNotThatPlayersTurn  ].
	
	(self isOccupied: anOccupiedPoint) ifFalse: [ self signalSpaceIsEmpty ].
	self assertToken: anOccupiedPoint belongsTo: aPlayer.

	(self isOccupied: anAdjacentUnoccupiedPoint) ifTrue: [ self signalSpaceAlreadyOccupied ].! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 17:35:34'!
assertAllTokensAreOnTheBoard
	(cellsOccupiedByX size = 3 and: [cellsOccupiedBy0 size = 3]) ifFalse: [self signalCannotMoveYet ]! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:35:36'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:35:36'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:35:36'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:35:36'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:35:36'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:35:36'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:35:36'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:35:36'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:35:36'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:35:36'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:35:36'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:35:36'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:35:36'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:35:36'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:35:36'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:35:36'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:35:36'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:35:36'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:35:36'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:35:36'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:35:36'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:35:36'!
PASSED!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 17:35:36'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 17:35:36'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 17:35:36'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 11/1/2020 17:35:50'!
test25APlayerCantMoveBeforeTheSixthTurn

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@2.

	
	self should: [game moveXfrom: 0@0 to: 1@1 ] raise: Error withMessageText: TerniLapilli cannotMoveYetErrorDescription .! !

!methodRemoval: TerniLapilliTest #test24APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 17:35:50'!
test24APlayerCantMoveBeforeTheSixthTurn

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@2.

	
	self should: [game moveXfrom: 0@0 to: 1@1 ] raise: Error withMessageText: TerniLapilli cannotMoveYetErrorDescription .!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 11/1/2020 17:39:45'!
test26APlayerCanMoveAToken

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 0@1.
	
	game putXAt: 0@2.
	game put0At: 1@2.
	
	game putXAt: 2@2.
	game put0At: 2@1.
	
	game moveXfrom: 0@0 to: 1@0.
	game move0from: 1@2 to: 1@1.
	
	self assert: game hasPlayer0Won.! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:39:48'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:39:48'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:39:48'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:39:48'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:39:48'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:39:48'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:39:48'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:39:48'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:39:48'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:39:48'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:39:48'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:39:48'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:39:48'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:39:48'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:39:48'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:39:48'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:39:48'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:39:48'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:39:48'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:39:48'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:39:48'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:39:48'!
PASSED!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 17:39:48'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 17:39:48'!
PASSED!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 17:39:48'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 17:39:48'!
ERROR!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 17:39:48'!
ERROR!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:39:58'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:39:58'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:39:58'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:39:58'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:39:58'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:39:58'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:39:58'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:39:58'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:39:58'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:39:58'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:39:58'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:39:58'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:39:58'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:39:58'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:39:58'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:39:58'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:39:58'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:39:58'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:39:58'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:39:58'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:39:58'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:39:58'!
PASSED!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 17:39:58'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 17:39:58'!
PASSED!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 17:39:58'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 17:39:58'!
ERROR!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 17:39:58'!
ERROR!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 17:40:14'!
ERROR!
!TerniLapilli methodsFor: 'actions' stamp: 'FD 11/1/2020 17:41:14' prior: 50900688!
move0from: anOccupiedPoint to: anAdjacentUnoccupiedPoint 
	
	self assert: $0 canMoveFrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint.
	
	cellsOccupiedBy0 remove: anOccupiedPoint.
	cellsOccupiedBy0 add: anAdjacentUnoccupiedPoint.
	
	currentlyPlaying := $X! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 11/1/2020 17:41:26' prior: 50900867!
moveXfrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint 
	
	self assert: $X canMoveFrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint.
	
	cellsOccupiedByX remove: anOccupiedPoint.
	cellsOccupiedByX add: anAdjacentUnoccupiedPoint.
	
	currentlyPlaying := $X! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:41:28'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:41:28'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:41:28'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:41:28'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:41:28'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:41:28'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:41:28'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:41:28'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:41:28'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:41:28'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:41:28'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:41:28'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:41:28'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:41:28'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:41:28'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:41:28'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:41:28'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:41:28'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:41:28'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:41:28'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:41:28'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:41:28'!
PASSED!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 17:41:28'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 17:41:28'!
PASSED!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 17:41:28'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 17:41:28'!
ERROR!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 17:41:28'!
ERROR!
!TerniLapilli methodsFor: 'actions' stamp: 'FD 11/1/2020 17:41:32' prior: 50902826!
moveXfrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint 
	
	self assert: $X canMoveFrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint.
	
	cellsOccupiedByX remove: anOccupiedPoint.
	cellsOccupiedByX add: anAdjacentUnoccupiedPoint.
	
	currentlyPlaying := $0! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 17:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 17:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 17:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 17:41:33'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 11/1/2020 17:42:25'!
test27APlayerCantMoveOutsideTheBoard

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 1@2.

	
	self should: [game moveXfrom: 0@0 to: 1@1 ] raise: Error withMessageText: TerniLapilli cannotMoveYetErrorDescription .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 11/1/2020 17:43:11' prior: 50903027!
test27APlayerCantMoveOutsideTheBoard

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 0@1.
	
	game putXAt: 0@2.
	game put0At: 1@2.
	
	game putXAt: 2@2.
	game put0At: 2@1.

	
	self should: [game moveXfrom: 0@0 to: -1@-1 ] raise: Error withMessageText: TerniLapilli invalidPositionErrorDescription.! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:43:14'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:43:14'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:43:14'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:43:14'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:43:14'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:43:14'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:43:14'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:43:14'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:43:14'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:43:14'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:43:14'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:43:14'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:43:14'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:43:14'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:43:14'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:43:14'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:43:14'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:43:14'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:43:14'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:43:14'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:43:14'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:43:14'!
PASSED!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 17:43:14'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 17:43:14'!
PASSED!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 17:43:14'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 17:43:14'!
PASSED!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 17:43:14'!
FAILURE!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 17:43:14'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 17:43:44' prior: 50902487!
assert: aPlayer canMoveFrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint.
	
	self assertAllTokensAreOnTheBoard.
	self assertGameIsInProgress.
	currentlyPlaying  = aPlayer ifFalse: [ self signalItsNotThatPlayersTurn  ].
	
	(self isOccupied: anOccupiedPoint) ifFalse: [ self signalSpaceIsEmpty ].
	self assertToken: anOccupiedPoint belongsTo: aPlayer.
	self assertIsValidPosition: anAdjacentUnoccupiedPoint.

	(self isOccupied: anAdjacentUnoccupiedPoint) ifTrue: [ self signalSpaceAlreadyOccupied ].! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:43:46'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:43:46'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:43:46'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:43:46'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:43:46'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:43:46'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:43:46'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:43:46'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:43:46'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:43:46'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:43:46'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:43:46'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:43:46'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:43:46'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:43:46'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:43:46'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:43:46'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:43:46'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:43:46'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:43:46'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:43:46'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:43:46'!
PASSED!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 17:43:46'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 17:43:46'!
PASSED!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 17:43:46'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 17:43:46'!
PASSED!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 17:43:46'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'FD 11/1/2020 17:45:00'!
test28APlayerCantMoveToNonAdjacentPositions

	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game put0At: 0@1.
	
	game putXAt: 0@2.
	game put0At: 1@2.
	
	game putXAt: 2@2.
	game put0At: 2@1.

	
	self should: [game moveXfrom: 0@0 to: 2@0 ] raise: Error withMessageText: TerniLapilli positionNotAdjacentErrorDescription.! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:45:06'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:45:06'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:45:06'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:45:06'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:45:06'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:45:06'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:45:06'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:45:06'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:45:06'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:45:06'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:45:06'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:45:06'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:45:06'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:45:06'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:45:06'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:45:06'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:45:06'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:45:06'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:45:06'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:45:06'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:45:06'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:45:06'!
PASSED!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 17:45:06'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 17:45:06'!
PASSED!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 17:45:06'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 17:45:06'!
PASSED!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 17:45:06'!
PASSED!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 17:45:06'!
ERROR!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 17:45:06'!
ERROR!
!TerniLapilli class methodsFor: 'error handling' stamp: 'FD 11/1/2020 17:45:12'!
positionNotAdjacentErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'FD 11/1/2020 17:45:26' prior: 50903368!
positionNotAdjacentErrorDescription
	^ 'position not adjacent'! !

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 17:45:27'!
FAILURE!
!TerniLapilli methodsFor: 'error handling' stamp: 'FD 11/1/2020 17:45:59'!
signalPositionNotAdjacent
	self error: self class positionNotAdjacentErrorDescription ! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 17:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 17:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 17:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 17:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 17:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 17:46:03'!
FAILURE!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 17:46:03'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 17:46:31' prior: 50903146!
assert: aPlayer canMoveFrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint.
	
	self assertAllTokensAreOnTheBoard.
	self assertGameIsInProgress.
	currentlyPlaying  = aPlayer ifFalse: [ self signalItsNotThatPlayersTurn  ].
	
	(self isOccupied: anOccupiedPoint) ifFalse: [ self signalSpaceIsEmpty ].
	self assertToken: anOccupiedPoint belongsTo: aPlayer.
	self assertIsValidPosition: anAdjacentUnoccupiedPoint.
	self assertIsAdjacentPosition: anAdjacentUnoccupiedPoint.

	(self isOccupied: anAdjacentUnoccupiedPoint) ifTrue: [ self signalSpaceAlreadyOccupied ].! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 17:50:22'!
assertIsAdjacentPosition: aPoint

	((aPoint fourNeighbors includes: aPoint) or: [aPoint = 1@1]) ifFalse: [ self signalPositionNotAdjacent ]! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:50:26'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:50:26'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:50:26'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:50:26'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:50:26'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:50:26'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:50:26'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:50:26'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:50:26'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:50:26'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:50:26'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:50:26'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:50:26'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:50:26'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:50:26'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:50:26'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:50:26'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:50:26'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:50:26'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:50:26'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:50:26'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:50:26'!
FAILURE!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 17:50:26'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 17:50:26'!
PASSED!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 17:50:26'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 17:50:26'!
ERROR!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 17:50:26'!
PASSED!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 17:50:26'!
FAILURE!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:50:43'!
FAILURE!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:50:56'!
FAILURE!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 17:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 17:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 17:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 17:50:56'!
ERROR!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 17:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 17:50:56'!
FAILURE!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:50:58'!
FAILURE!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:51:27'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 17:51:44' prior: 50903507!
assertIsAdjacentPosition: aPoint

	((aPoint fourNeighbors includes: aPoint) or: [aPoint = (1@1)]) ifFalse: [ self signalPositionNotAdjacent ]! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:51:45'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:51:45'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:51:45'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:51:45'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:51:45'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:51:45'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:51:45'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:51:45'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:51:45'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:51:45'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:51:45'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:51:45'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:51:45'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:51:45'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:51:45'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:51:45'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:51:45'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:51:45'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:51:45'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:51:45'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:51:45'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:51:45'!
FAILURE!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 17:51:45'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 17:51:45'!
PASSED!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 17:51:45'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 17:51:45'!
ERROR!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 17:51:45'!
PASSED!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 17:51:45'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:51:50'!
FAILURE!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:52:25'!
FAILURE!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:52:25'!
FAILURE!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:52:56'!
FAILURE!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:52:56'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 17:54:08'!
assertIs: aPoint AdjacentTo: anotherPoint

	((anotherPoint fourNeighbors includes: aPoint) or: [aPoint = (1@1)]) ifFalse: [ self signalPositionNotAdjacent ]! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:54:09'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:54:09'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:54:09'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:54:09'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:54:09'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:54:09'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:54:09'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:54:09'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:54:09'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:54:09'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:54:09'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:54:10'!
FAILURE!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 17:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 17:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 17:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 17:54:10'!
ERROR!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 17:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 17:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:54:12'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:54:12'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:54:12'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:54:12'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:54:12'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:54:12'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:54:12'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:54:12'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:54:12'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:54:12'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:54:12'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:54:12'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:54:12'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:54:12'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:54:12'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:54:12'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:54:12'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:54:12'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:54:12'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:54:12'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:54:12'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:54:12'!
FAILURE!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 17:54:12'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 17:54:12'!
PASSED!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 17:54:12'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 17:54:12'!
ERROR!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 17:54:12'!
PASSED!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 17:54:12'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:54:15'!
FAILURE!

!methodRemoval: TerniLapilli #assertIsAdjacentPosition: stamp: 'FD 11/1/2020 17:54:41'!
assertIsAdjacentPosition: aPoint

	((aPoint fourNeighbors includes: aPoint) or: [aPoint = (1@1)]) ifFalse: [ self signalPositionNotAdjacent ]!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 17:55:12' prior: 50903487!
assert: aPlayer canMoveFrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint.
	
	self assertAllTokensAreOnTheBoard.
	self assertGameIsInProgress.
	currentlyPlaying  = aPlayer ifFalse: [ self signalItsNotThatPlayersTurn  ].
	
	(self isOccupied: anOccupiedPoint) ifFalse: [ self signalSpaceIsEmpty ].
	self assertToken: anOccupiedPoint belongsTo: aPlayer.
	self assertIsValidPosition: anAdjacentUnoccupiedPoint.
	self assertIs: anAdjacentUnoccupiedPoint AdjacentTo: anOccupiedPoint .

	(self isOccupied: anAdjacentUnoccupiedPoint) ifTrue: [ self signalSpaceAlreadyOccupied ].! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 17:55:22'!
assertIs: aPoint adjacentTo: anotherPoint

	((anotherPoint fourNeighbors includes: aPoint) or: [aPoint = (1@1)]) ifFalse: [ self signalPositionNotAdjacent ]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'FD 11/1/2020 17:55:22' prior: 50904046!
assert: aPlayer canMoveFrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint.
	
	self assertAllTokensAreOnTheBoard.
	self assertGameIsInProgress.
	currentlyPlaying  = aPlayer ifFalse: [ self signalItsNotThatPlayersTurn  ].
	
	(self isOccupied: anOccupiedPoint) ifFalse: [ self signalSpaceIsEmpty ].
	self assertToken: anOccupiedPoint belongsTo: aPlayer.
	self assertIsValidPosition: anAdjacentUnoccupiedPoint.
	self assertIs: anAdjacentUnoccupiedPoint adjacentTo: anOccupiedPoint .

	(self isOccupied: anAdjacentUnoccupiedPoint) ifTrue: [ self signalSpaceAlreadyOccupied ].! !

!methodRemoval: TerniLapilli #assertIs:AdjacentTo: stamp: 'FD 11/1/2020 17:55:22'!
assertIs: aPoint AdjacentTo: anotherPoint

	((anotherPoint fourNeighbors includes: aPoint) or: [aPoint = (1@1)]) ifFalse: [ self signalPositionNotAdjacent ]!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 17:55:23'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 17:55:23'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 17:55:23'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 17:55:23'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 17:55:23'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 17:55:23'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 17:55:23'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 17:55:23'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 17:55:23'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:55:23'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 17:55:23'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:55:23'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:55:23'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:55:23'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:55:23'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 17:55:23'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 17:55:23'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 17:55:23'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 17:55:23'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 17:55:23'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 17:55:23'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 17:55:23'!
PASSED!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 17:55:23'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 17:55:23'!
PASSED!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 17:55:23'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 17:55:23'!
PASSED!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 17:55:23'!
PASSED!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 17:55:23'!
PASSED!
!TerniLapilli methodsFor: 'actions' stamp: 'FD 11/1/2020 18:04:50'!
put: aPlayer at: aPoint 
	
	self assert: aPlayer canPutAt: aPoint.
	
	(self getOccupiedCellsBy: aPlayer) add: aPoint.
	currentlyPlaying := self getOtherPlayer.! !
!TerniLapilli methodsFor: 'accessing' stamp: 'FD 11/1/2020 18:05:42'!
getOtherPlayer: aPlayer
	
	aPlayer = $0 ifTrue: $X ifFalse: $0. ! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 11/1/2020 18:05:56' prior: 50904198!
put: aPlayer at: aPoint 
	
	self assert: aPlayer canPutAt: aPoint.
	
	(self getOccupiedCellsBy: aPlayer) add: aPoint.
	currentlyPlaying := self getOtherPlayer: aPlayer.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 11/1/2020 18:06:17' prior: 50898939!
putXAt: aPoint 
	
	self put: $X at: aPoint ! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 11/1/2020 18:06:24' prior: 50898932!
put0At: aPoint 
	
	self put: $0 at: aPoint ! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 18:06:26'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 18:06:26'!
FAILURE!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 18:06:26'!
ERROR!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 18:06:26'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 18:06:26'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 18:06:26'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 18:06:26'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 18:06:26'!
FAILURE!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 18:06:26'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:06:26'!
ERROR!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:06:26'!
ERROR!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:06:26'!
ERROR!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:06:26'!
ERROR!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:06:26'!
ERROR!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:06:26'!
ERROR!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:06:26'!
ERROR!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:06:26'!
ERROR!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 18:06:26'!
ERROR!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 18:06:26'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 18:06:26'!
ERROR!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 18:06:26'!
ERROR!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 18:06:26'!
ERROR!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 18:06:26'!
ERROR!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 18:06:26'!
ERROR!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 18:06:26'!
ERROR!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 18:06:26'!
ERROR!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 18:06:26'!
ERROR!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 18:06:26'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 18:06:31'!
ERROR!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 18:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 18:06:56'!
FAILURE!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 18:06:56'!
ERROR!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 18:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 18:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 18:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 18:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 18:06:56'!
FAILURE!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 18:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:06:56'!
ERROR!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:06:56'!
ERROR!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:06:56'!
ERROR!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:06:56'!
ERROR!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:06:56'!
ERROR!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:06:56'!
ERROR!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:06:56'!
ERROR!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:06:56'!
ERROR!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 18:06:56'!
ERROR!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 18:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 18:06:56'!
ERROR!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 18:06:56'!
ERROR!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 18:06:56'!
ERROR!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 18:06:56'!
ERROR!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 18:06:56'!
ERROR!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 18:06:56'!
ERROR!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 18:06:56'!
ERROR!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 18:06:56'!
ERROR!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 18:06:56'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 18:06:58'!
ERROR!
!TerniLapilli methodsFor: 'accessing' stamp: 'FD 11/1/2020 18:07:31' prior: 50904206!
getOtherPlayer: aPlayer
	
	^aPlayer = $0 ifTrue: $X ifFalse: $0. ! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 18:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 18:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 18:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 18:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 18:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 18:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 18:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 18:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 18:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 18:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 18:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 18:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 18:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 18:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 18:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 18:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 18:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 18:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 18:07:33'!
PASSED!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 18:07:33'!
PASSED!
!TerniLapilli methodsFor: 'accessing' stamp: 'FD 11/1/2020 18:07:59' prior: 50904424!
getOtherPlayer: aPlayer
	
	^aPlayer = $0 ifTrue: [$X] ifFalse: [$0]. ! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 18:08:01'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 18:08:01'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 18:08:01'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 18:08:01'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 18:08:01'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 18:08:01'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 18:08:01'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 18:08:01'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 18:08:01'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:08:01'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:08:01'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:08:01'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:08:01'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:08:01'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:08:01'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:08:01'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:08:01'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 18:08:01'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 18:08:01'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 18:08:01'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 18:08:01'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 18:08:01'!
PASSED!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 18:08:01'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 18:08:01'!
PASSED!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 18:08:01'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 18:08:01'!
PASSED!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 18:08:01'!
PASSED!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 18:08:01'!
PASSED!
!TerniLapilli methodsFor: 'actions' stamp: 'FD 11/1/2020 18:08:32'!
move: aPlayer from: anOccupiedPoint to: anAdjacentUnoccupiedPoint 
	
	self assert: aPlayer canMoveFrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint.
	
	cellsOccupiedBy0 remove: anOccupiedPoint.
	cellsOccupiedBy0 add: anAdjacentUnoccupiedPoint.
	
	currentlyPlaying := self getOtherPlayer: aPlayer ! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 11/1/2020 18:09:06' prior: 50902815!
move0from: anOccupiedPoint to: anAdjacentUnoccupiedPoint 
	
	self move: $0 from: anOccupiedPoint to: anAdjacentUnoccupiedPoint.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 11/1/2020 18:09:17' prior: 50902928!
moveXfrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint 
	
	self move: $X from: anOccupiedPoint to: anAdjacentUnoccupiedPoint.! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 18:09:19'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 18:09:19'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 18:09:19'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 18:09:19'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 18:09:19'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 18:09:19'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 18:09:19'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 18:09:19'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 18:09:19'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:09:19'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:09:19'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:09:19'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:09:19'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:09:19'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:09:19'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:09:19'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:09:19'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 18:09:19'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 18:09:19'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 18:09:19'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 18:09:19'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 18:09:19'!
PASSED!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 18:09:19'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 18:09:19'!
PASSED!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 18:09:19'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 18:09:19'!
ERROR!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 18:09:19'!
PASSED!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 18:09:19'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 18:09:19'!
ERROR!
!TerniLapilli methodsFor: 'actions' stamp: 'FD 11/1/2020 18:09:56' prior: 50904624!
move: aPlayer from: anOccupiedPoint to: anAdjacentUnoccupiedPoint 
	
	self assert: aPlayer canMoveFrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint.
	
	(self getOccupiedCellsBy: aPlayer) remove: anOccupiedPoint.
	(self getOccupiedCellsBy: aPlayer)  add: anAdjacentUnoccupiedPoint.
	
	currentlyPlaying := self getOtherPlayer: aPlayer ! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 18:09:58'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 18:09:58'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 18:09:58'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 18:09:58'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 18:09:58'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 18:09:58'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 18:09:58'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 18:09:58'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 18:09:58'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:09:58'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:09:58'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:09:58'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:09:58'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:09:58'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:09:58'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:09:58'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:09:58'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 18:09:58'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 18:09:58'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 18:09:58'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 18:09:58'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 18:09:58'!
PASSED!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 18:09:58'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 18:09:58'!
PASSED!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 18:09:58'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 18:09:58'!
PASSED!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 18:09:58'!
PASSED!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 18:09:58'!
PASSED!
!TerniLapilli class methodsFor: 'error handling' stamp: 'FD 11/1/2020 18:10:23' prior: 50898375!
gameHasEndedErrorDescription
	^ 'game has already ended'! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'FD 11/1/2020 18:10:34' prior: 50900339!
invalidPositionErrorDescription
	^'invalid position'! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'FD 11/1/2020 18:11:01' prior: 50895442!
itsNotPlayersTurnErrorDescription
	^ 'it is not that players turn'.! !
!TerniLapilli methodsFor: 'assertions' stamp: 'FD 11/1/2020 18:13:09' prior: 50904075!
assert: aPlayer canMoveFrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint.
	
	self assertAllTokensAreOnTheBoard.
	
	self assertGameIsInProgress.
	currentlyPlaying  = aPlayer ifFalse: [ self signalItsNotThatPlayersTurn  ].
	
	(self isOccupied: anOccupiedPoint) ifFalse: [ self signalSpaceIsEmpty ].
	self assertToken: anOccupiedPoint belongsTo: aPlayer.
	self assertIsValidPosition: anAdjacentUnoccupiedPoint.
	self assertIs: anAdjacentUnoccupiedPoint adjacentTo: anOccupiedPoint .

	(self isOccupied: anAdjacentUnoccupiedPoint) ifTrue: [ self signalSpaceAlreadyOccupied ].! !
!TerniLapilli methodsFor: 'assertions' stamp: 'FD 11/1/2020 18:13:29' prior: 50904873!
assert: aPlayer canMoveFrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint.
	
	self assertAllTokensAreOnTheBoard.
	
	self assertGameIsInProgress.
	currentlyPlaying  = aPlayer ifFalse: [ self signalItsNotThatPlayersTurn  ].
	self assertIsValidPosition: anAdjacentUnoccupiedPoint.
	
	(self isOccupied: anOccupiedPoint) ifFalse: [ self signalSpaceIsEmpty ].
	self assertToken: anOccupiedPoint belongsTo: aPlayer.

	self assertIs: anAdjacentUnoccupiedPoint adjacentTo: anOccupiedPoint .

	(self isOccupied: anAdjacentUnoccupiedPoint) ifTrue: [ self signalSpaceAlreadyOccupied ].! !
!TerniLapilli methodsFor: 'assertions' stamp: 'FD 11/1/2020 18:13:37' prior: 50900432!
assert: aPlayer canPutAt: aPoint 
	
	self assertGameIsInProgress.
	currentlyPlaying  = aPlayer ifFalse: [ self signalItsNotThatPlayersTurn  ].
	self assertIsValidPosition: aPoint.
	
	(self isOccupied: aPoint) ifTrue: [ self signalSpaceAlreadyOccupied ].! !
!TerniLapilli methodsFor: 'assertions' stamp: 'FD 11/1/2020 18:13:49' prior: 50904894!
assert: aPlayer canMoveFrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint.
	
	self assertAllTokensAreOnTheBoard.
	
	self assertGameIsInProgress.
	currentlyPlaying  = aPlayer ifFalse: [ self signalItsNotThatPlayersTurn  ].
	self assertIsValidPosition: anAdjacentUnoccupiedPoint.
	(self isOccupied: anAdjacentUnoccupiedPoint) ifTrue: [ self signalSpaceAlreadyOccupied ].
	
	(self isOccupied: anOccupiedPoint) ifFalse: [ self signalSpaceIsEmpty ].
	self assertToken: anOccupiedPoint belongsTo: aPlayer.

	self assertIs: anAdjacentUnoccupiedPoint adjacentTo: anOccupiedPoint .

	! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 18:13:50'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 18:13:50'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 18:13:50'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 18:13:50'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 18:13:50'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 18:13:50'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 18:13:50'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 18:13:50'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 18:13:50'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:13:50'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:13:50'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:13:50'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:13:50'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:13:50'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:13:50'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:13:50'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:13:50'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 18:13:50'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 18:13:50'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 18:13:50'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 18:13:50'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 18:13:50'!
PASSED!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 18:13:50'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 18:13:50'!
PASSED!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 18:13:50'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 18:13:50'!
PASSED!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 18:13:50'!
PASSED!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 18:13:50'!
PASSED!
!TerniLapilli methodsFor: 'assertions' stamp: 'FD 11/1/2020 18:15:31' prior: 50904926!
assert: aPlayer canMoveFrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint.
	
	self assertAllTokensAreOnTheBoard.
	
	self assertGameIsInProgress.
	currentlyPlaying  = aPlayer ifFalse: [ self signalItsNotThatPlayersTurn  ].
	self assertIsValidPosition: anAdjacentUnoccupiedPoint.
	(self isOccupied: anAdjacentUnoccupiedPoint) ifTrue: [ self signalSpaceAlreadyOccupied ].
	
	(self isOccupied: anOccupiedPoint) ifFalse: [ self signalSpaceIsEmpty ].
	self assertToken: anOccupiedPoint belongsTo: aPlayer.

	self assertIs: anAdjacentUnoccupiedPoint adjacentTo: anOccupiedPoint .

	! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 18:15:33'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 18:15:33'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 18:15:33'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 18:15:33'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 18:15:33'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 18:15:33'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 18:15:33'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 18:15:33'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 18:15:33'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:15:33'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:15:33'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:15:33'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:15:33'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:15:33'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:15:33'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:15:33'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:15:33'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 18:15:33'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 18:15:33'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 18:15:33'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 18:15:33'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 18:15:33'!
PASSED!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 18:15:33'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 18:15:33'!
PASSED!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 18:15:33'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 18:15:33'!
PASSED!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 18:15:33'!
PASSED!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 18:15:33'!
PASSED!
!TerniLapilli methodsFor: 'assertions' stamp: 'FD 11/1/2020 18:16:14'!
assertIsPlayersTurn: aPlayer

	currentlyPlaying  = aPlayer ifFalse: [ self signalItsNotThatPlayersTurn  ].


	! !
!TerniLapilli methodsFor: 'assertions' stamp: 'FD 11/1/2020 18:16:27' prior: 50905042!
assert: aPlayer canMoveFrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint.
	
	self assertAllTokensAreOnTheBoard.
	
	self assertGameIsInProgress.
	self assertIsPlayersTurn: aPlayer.
	self assertIsValidPosition: anAdjacentUnoccupiedPoint.
	(self isOccupied: anAdjacentUnoccupiedPoint) ifTrue: [ self signalSpaceAlreadyOccupied ].
	
	(self isOccupied: anOccupiedPoint) ifFalse: [ self signalSpaceIsEmpty ].
	self assertToken: anOccupiedPoint belongsTo: aPlayer.

	self assertIs: anAdjacentUnoccupiedPoint adjacentTo: anOccupiedPoint .

	! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 18:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 18:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 18:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 18:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 18:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 18:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 18:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 18:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 18:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 18:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 18:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 18:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 18:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 18:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 18:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 18:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 18:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 18:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 18:16:29'!
PASSED!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 18:16:29'!
PASSED!
!TerniLapilli methodsFor: 'assertions' stamp: 'FD 11/1/2020 18:16:39' prior: 50904915!
assert: aPlayer canPutAt: aPoint 
	
	self assertGameIsInProgress.
	self assertIsPlayersTurn: aPlayer.
	self assertIsValidPosition: aPoint.
	
	(self isOccupied: aPoint) ifTrue: [ self signalSpaceAlreadyOccupied ].! !
!TerniLapilli methodsFor: 'assertions' stamp: 'FD 11/1/2020 18:17:01'!
assertSpaceIsEmpty: aPoint

	^ (self isOccupied: aPoint) ifTrue: [ self signalSpaceAlreadyOccupied ]! !
!TerniLapilli methodsFor: 'assertions' stamp: 'FD 11/1/2020 18:17:01' prior: 50905280!
assert: aPlayer canPutAt: aPoint 
	
	self assertGameIsInProgress.
	self assertIsPlayersTurn: aPlayer.
	self assertIsValidPosition: aPoint.
	
	self assertSpaceIsEmpty: aPoint.! !
!TerniLapilli methodsFor: 'assertions' stamp: 'FD 11/1/2020 18:18:00' prior: 50905165!
assert: aPlayer canMoveFrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint.
	
	self assertAllTokensAreOnTheBoard.
	
	self assertGameIsInProgress.
	self assertIsPlayersTurn: aPlayer.
	self assertIsValidPosition: anAdjacentUnoccupiedPoint.
	self assertSpaceIsEmpty: anAdjacentUnoccupiedPoint .
	
	(self isOccupied: anOccupiedPoint) ifFalse: [ self signalSpaceIsEmpty ].
	self assertToken: anOccupiedPoint belongsTo: aPlayer.

	self assertIs: anAdjacentUnoccupiedPoint adjacentTo: anOccupiedPoint .

	! !
!TerniLapilli methodsFor: 'assertions' stamp: 'FD 11/1/2020 18:19:06'!
assertSpaceIsOccupied: aPoint

	(self isOccupied: aPoint) ifFalse: [ self signalSpaceIsEmpty ].! !
!TerniLapilli methodsFor: 'assertions' stamp: 'FD 11/1/2020 18:19:23' prior: 50905304!
assert: aPlayer canMoveFrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint.
	
	self assertAllTokensAreOnTheBoard.
	
	self assertGameIsInProgress.
	self assertIsPlayersTurn: aPlayer.
	self assertIsValidPosition: anAdjacentUnoccupiedPoint.
	self assertSpaceIsEmpty: anAdjacentUnoccupiedPoint .
	
	self assertSpaceIsOccupied: anOccupiedPoint.
	self assertToken: anOccupiedPoint belongsTo: aPlayer.

	self assertIs: anAdjacentUnoccupiedPoint adjacentTo: anOccupiedPoint .

	! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 18:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 18:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 18:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 18:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 18:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 18:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 18:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 18:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 18:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 18:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 18:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 18:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 18:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 18:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 18:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 18:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 18:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 18:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 18:19:25'!
PASSED!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 18:19:25'!
PASSED!
!TerniLapilli methodsFor: 'assertions' stamp: 'FD 11/1/2020 18:20:13' prior: 50905328!
assert: aPlayer canMoveFrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint.
	
	self assertAllTokensAreOnTheBoard.
	self assertGameIsInProgress.

	self assertIsPlayersTurn: aPlayer.

	self assertIsValidPosition: anAdjacentUnoccupiedPoint.
	self assertSpaceIsEmpty: anAdjacentUnoccupiedPoint .
	
	self assertSpaceIsOccupied: anOccupiedPoint.
	self assertToken: anOccupiedPoint belongsTo: aPlayer.

	self assertIs: anAdjacentUnoccupiedPoint adjacentTo: anOccupiedPoint .

	! !
!TerniLapilli methodsFor: 'assertions' stamp: 'FD 11/1/2020 18:22:50'!
assertGameAllowsMovement
	
	self assertAllTokensAreOnTheBoard.
	self assertGameIsInProgress.

	! !
!TerniLapilli methodsFor: 'assertions' stamp: 'FD 11/1/2020 18:23:37'!
assertIsValidTargetPosition: anUnoccupiedPoint
	
	self assertIsValidPosition: anUnoccupiedPoint.
	self assertSpaceIsEmpty: anUnoccupiedPoint .

	! !
!TerniLapilli methodsFor: 'assertions' stamp: 'FD 11/1/2020 18:24:25'!
assertIsValidSourcePosition: anOccupiedPoint for: aPlayer
	
	self assertSpaceIsOccupied: anOccupiedPoint.
	self assertToken: anOccupiedPoint belongsTo: aPlayer.

	! !
!TerniLapilli methodsFor: 'assertions' stamp: 'FD 11/1/2020 18:25:12' prior: 50905441!
assert: aPlayer canMoveFrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint.
	
	self assertAllTokensAreOnTheBoard.
	self assertGameIsInProgress.

	self assertIsPlayersTurn: aPlayer.

	self assertIsValidTargetPosition: anAdjacentUnoccupiedPoint.

	self assertIsValidSourcePosition: anOccupiedPoint for: aPlayer.

	self assertIs: anAdjacentUnoccupiedPoint adjacentTo: anOccupiedPoint .

	! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 18:25:14'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 18:25:14'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 18:25:14'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 18:25:14'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 18:25:14'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 18:25:14'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 18:25:14'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 18:25:14'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 18:25:14'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:25:14'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:25:14'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:25:14'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:25:14'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:25:14'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:25:14'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:25:14'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:25:14'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 18:25:14'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 18:25:14'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 18:25:14'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 18:25:14'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 18:25:14'!
PASSED!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 18:25:14'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 18:25:14'!
PASSED!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 18:25:14'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 18:25:14'!
PASSED!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 18:25:14'!
PASSED!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 18:25:14'!
PASSED!
!TerniLapilli methodsFor: 'assertions' stamp: 'FD 11/1/2020 18:25:33' prior: 50905295!
assert: aPlayer canPutAt: aPoint 
	
	self assertGameIsInProgress.

	self assertIsPlayersTurn: aPlayer.
	self assertIsValidPosition: aPoint.
	
	self assertSpaceIsEmpty: aPoint.! !
!TerniLapilli methodsFor: 'assertions' stamp: 'FD 11/1/2020 18:25:56' prior: 50905590!
assert: aPlayer canPutAt: aPoint 
	
	self assertGameIsInProgress.

	self assertIsPlayersTurn: aPlayer.
	self assertIsValidTargetPosition: aPoint.! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 18:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 18:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 18:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 18:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 18:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 18:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 18:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 18:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 18:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 18:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 18:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 18:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 18:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 18:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 18:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 18:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 18:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 18:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 18:25:58'!
PASSED!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 18:25:58'!
PASSED!
!TerniLapilli methodsFor: 'accessing' stamp: 'FD 11/1/2020 18:28:22' prior: 50900188!
getOccupiedCellsBy: aPlayer 
	
	^aPlayer = $X ifTrue: [cellsOccupiedByX ] ifFalse: [cellsOccupiedBy0].! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 18:30:56'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 18:30:56'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 18:30:56'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 18:30:56'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 18:30:56'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 18:30:56'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 18:30:56'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 18:30:56'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 18:30:56'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:30:56'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:30:56'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:30:56'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:30:56'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:30:56'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:30:56'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:30:56'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:30:56'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 18:30:56'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 18:30:56'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 18:30:56'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 18:30:56'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 18:30:56'!
PASSED!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 18:30:56'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 18:30:56'!
PASSED!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 18:30:56'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 18:30:56'!
PASSED!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 18:30:56'!
PASSED!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 18:30:56'!
PASSED!

----SNAPSHOT----(1 November 2020 18:31:04) CuisUniversity-4383.image priorSource: 18132765!

Object subclass: #Players
	instanceVariableNames: 'playerX player0'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #Players category: 'TerniLapilli' stamp: 'FD 11/1/2020 18:34:05'!
Object subclass: #Players
	instanceVariableNames: 'playerX player0'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!Players methodsFor: 'nil' stamp: 'FD 11/1/2020 18:35:04' overrides: 16896425!
initialize

	playerX  := OrderedCollection new.
	player0 := OrderedCollection new.! !
!TerniLapilli methodsFor: 'initialization' stamp: 'FD 11/1/2020 18:35:43' prior: 50898766 overrides: 16896425!
initialize

	currentlyPlaying := $X.
	cellsOccupiedBy0 := OrderedCollection new.
	cellsOccupiedByX := OrderedCollection new.! !

Object subclass: #Player
	instanceVariableNames: 'tokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #Player category: 'TerniLapilli' stamp: 'FD 11/1/2020 18:35:54'!
Object subclass: #Player
	instanceVariableNames: 'tokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classRemoval: #Players stamp: 'FD 11/1/2020 18:35:57'!
Object subclass: #Players
	instanceVariableNames: 'playerX player0'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!Player methodsFor: 'nil' stamp: 'FD 11/1/2020 18:36:14' overrides: 16896425!
initialize

	tokens := OrderedCollection new.! !

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FD 11/1/2020 18:38:47'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentlyPlaying cellsOccupiedByX cellsOccupiedBy0 players'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'initialization' stamp: 'FD 11/1/2020 18:38:45' prior: 50905825 overrides: 16896425!
initialize


	players := OrderedCollection new.
	
	players add: Player named: $X.
	players add: Player named: $0.
	
	currentlyPlaying := $X.! !
!TerniLapilli methodsFor: 'initialization' stamp: 'FD 11/1/2020 18:39:02' prior: 50905863 overrides: 16896425!
initialize


	players := OrderedCollection new.
	
	players add: (Player named: $X).
	players add: (Player named: $0).
	
	currentlyPlaying := $X.! !
!Player class methodsFor: 'nil' stamp: 'FD 11/1/2020 18:41:12'!
named: aName

	^self new initializeWithName: aName! !

!classDefinition: #Player category: 'TerniLapilli' stamp: 'FD 11/1/2020 18:41:31'!
Object subclass: #Player
	instanceVariableNames: 'tokens name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!Player methodsFor: 'as yet unclassified' stamp: 'FD 11/1/2020 18:41:29'!
initializeWithName: aName

	name := aName.
	tokens := OrderedCollection new.! !

!methodRemoval: Player #initialize stamp: 'FD 11/1/2020 18:41:34'!
initialize

	tokens := OrderedCollection new.!
!Player methodsFor: 'as yet unclassified' stamp: 'FD 11/1/2020 18:41:45' overrides: 16882612!
name

	^name.! !
!Player methodsFor: 'as yet unclassified' stamp: 'FD 11/1/2020 18:41:53'!
tokens

	^tokens.! !
!TerniLapilli methodsFor: 'accessing' stamp: 'FD 11/1/2020 18:42:31' prior: 50905702!
getOccupiedCellsBy: aPlayer 
	
	^aPlayer tokens! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'currentlyPlaying players'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'FD 11/1/2020 18:42:53'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentlyPlaying players'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'accessing' stamp: 'FD 11/1/2020 18:44:09' prior: 50904524!
getOtherPlayer: aPlayer
	
	^ players select: [ :player | player ~= aPlayer ] first.! !
!TerniLapilli methodsFor: 'assertions' stamp: 'FD 11/1/2020 18:46:57' prior: 50902504!
assertAllTokensAreOnTheBoard
	(players allSatisfy: [ :aPlayer | aPlayer tokens size = 3]) ifFalse: [self signalCannotMoveYet ]! !
!TerniLapilli methodsFor: 'accessing' stamp: 'FD 11/1/2020 18:48:40'!
playerX
	
	^ players findFirst: [ :player | player name = $X ].! !
!TerniLapilli methodsFor: 'accessing' stamp: 'FD 11/1/2020 18:48:59' prior: 50905923!
getOtherPlayer: aPlayer
	
	^ players findFirst: [ :player | player ~= aPlayer ].! !
!TerniLapilli methodsFor: 'accessing' stamp: 'FD 11/1/2020 18:49:07'!
player0
	
	^ players findFirst: [ :player | player name = $0 ].! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 18:49:26' prior: 50900010!
hasPlayerXWon
	^ ((self cellsHaveCompleteRow: self playerX tokens)
	or: [self cellsHaveCompleteColumn: self playerX tokens ])
	or: [self cellsHaveCompleteDiagonal: self playerX tokens].! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 18:49:37' prior: 50896964!
isOccupied: aPoint 
	
	^ (self player0 tokens includes: aPoint) or: [self playerX tokens includes: aPoint ].! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 18:50:06'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 18:50:06'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 18:50:06'!
ERROR!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 18:50:06'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 18:50:06'!
ERROR!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 18:50:06'!
ERROR!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 18:50:06'!
FAILURE!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 18:50:06'!
ERROR!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 18:50:06'!
ERROR!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:50:06'!
ERROR!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:50:06'!
ERROR!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:50:06'!
ERROR!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:50:06'!
ERROR!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:50:06'!
ERROR!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:50:06'!
ERROR!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:50:06'!
ERROR!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:50:06'!
ERROR!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 18:50:06'!
ERROR!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 18:50:06'!
FAILURE!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 18:50:06'!
ERROR!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 18:50:06'!
ERROR!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 18:50:06'!
ERROR!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 18:50:06'!
ERROR!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 18:50:06'!
ERROR!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 18:50:06'!
ERROR!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 18:50:06'!
ERROR!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 18:50:06'!
ERROR!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 18:50:06'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 18:50:08'!
ERROR!
!TerniLapilli methodsFor: 'actions' stamp: 'FD 11/1/2020 18:50:34' prior: 50904224!
put0At: aPoint 
	
	self put: self player0 at: aPoint ! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 11/1/2020 18:50:43' prior: 50904219!
putXAt: aPoint 
	
	self put: self playerX at: aPoint ! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 11/1/2020 18:50:53' prior: 50904644!
moveXfrom: anOccupiedPoint to: anAdjacentUnoccupiedPoint 
	
	self move: self playerX from: anOccupiedPoint to: anAdjacentUnoccupiedPoint.! !
!TerniLapilli methodsFor: 'actions' stamp: 'FD 11/1/2020 18:50:58' prior: 50904637!
move0from: anOccupiedPoint to: anAdjacentUnoccupiedPoint 
	
	self move: self player0 from: anOccupiedPoint to: anAdjacentUnoccupiedPoint.! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 18:51:06'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 18:51:06'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 18:51:06'!
ERROR!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 18:51:06'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 18:51:06'!
ERROR!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 18:51:06'!
ERROR!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 18:51:06'!
FAILURE!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 18:51:06'!
ERROR!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 18:51:06'!
ERROR!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:51:06'!
ERROR!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:51:07'!
ERROR!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:51:07'!
ERROR!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:51:07'!
ERROR!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:51:07'!
ERROR!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:51:07'!
ERROR!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:51:07'!
ERROR!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:51:07'!
ERROR!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 18:51:07'!
ERROR!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 18:51:07'!
FAILURE!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 18:51:07'!
ERROR!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 18:51:07'!
ERROR!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 18:51:07'!
ERROR!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 18:51:07'!
ERROR!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 18:51:07'!
ERROR!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 18:51:07'!
ERROR!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 18:51:07'!
ERROR!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 18:51:07'!
ERROR!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 18:51:07'!
ERROR!
!TerniLapilli methodsFor: 'initialization' stamp: 'FD 11/1/2020 18:52:11' prior: 50905871 overrides: 16896425!
initialize


	players := OrderedCollection new.
	
	players add: (Player named: $X).
	players add: (Player named: $0).
	
	currentlyPlaying := self playerX.! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 18:52:13'!
FAILURE!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 18:52:13'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 18:52:13'!
ERROR!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 18:52:13'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 18:52:13'!
ERROR!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 18:52:13'!
ERROR!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 18:52:13'!
FAILURE!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 18:52:13'!
ERROR!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 18:52:13'!
ERROR!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:52:13'!
ERROR!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:52:13'!
ERROR!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:52:13'!
ERROR!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:52:13'!
ERROR!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:52:13'!
ERROR!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:52:13'!
ERROR!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:52:13'!
ERROR!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:52:13'!
ERROR!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 18:52:13'!
ERROR!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 18:52:13'!
FAILURE!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 18:52:13'!
ERROR!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 18:52:13'!
ERROR!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 18:52:13'!
ERROR!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 18:52:13'!
ERROR!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 18:52:13'!
ERROR!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 18:52:13'!
ERROR!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 18:52:13'!
ERROR!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 18:52:13'!
ERROR!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 18:52:13'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 18:52:17'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 18:52:38'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 18:53:10' prior: 50900115!
hasPlayer0Won

	^self occupiedCellsMeetWinCondition: (self getOccupiedCellsBy: self player0).! !
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 18:53:55' prior: 50905951!
hasPlayerXWon
	^ self occupiedCellsMeetWinCondition: (self getOccupiedCellsBy: self playerX).! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 18:53:57'!
FAILURE!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 18:53:57'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 18:53:57'!
ERROR!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 18:53:57'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 18:53:57'!
ERROR!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 18:53:57'!
ERROR!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 18:53:57'!
FAILURE!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 18:53:57'!
ERROR!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 18:53:57'!
ERROR!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:53:57'!
ERROR!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:53:57'!
ERROR!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:53:57'!
ERROR!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:53:57'!
ERROR!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:53:57'!
ERROR!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:53:57'!
ERROR!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:53:57'!
ERROR!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:53:57'!
ERROR!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 18:53:57'!
ERROR!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 18:53:57'!
FAILURE!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 18:53:57'!
ERROR!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 18:53:57'!
ERROR!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 18:53:57'!
ERROR!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 18:53:57'!
ERROR!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 18:53:57'!
ERROR!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 18:53:57'!
ERROR!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 18:53:57'!
ERROR!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 18:53:57'!
ERROR!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 18:53:57'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 18:54:00'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 18:54:11'!
ERROR!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 18:54:44'!
FAILURE!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 18:54:44'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 18:54:44'!
ERROR!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 18:54:44'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 18:54:44'!
ERROR!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 18:54:44'!
ERROR!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 18:54:44'!
FAILURE!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 18:54:44'!
ERROR!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 18:54:44'!
ERROR!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:54:44'!
ERROR!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:54:44'!
ERROR!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:54:44'!
ERROR!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:54:44'!
ERROR!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:54:44'!
ERROR!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:54:44'!
ERROR!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:54:44'!
ERROR!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:54:44'!
ERROR!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 18:54:44'!
ERROR!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 18:54:44'!
FAILURE!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 18:54:44'!
ERROR!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 18:54:44'!
ERROR!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 18:54:44'!
ERROR!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 18:54:44'!
ERROR!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 18:54:44'!
ERROR!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 18:54:44'!
ERROR!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 18:54:44'!
ERROR!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 18:54:44'!
ERROR!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 18:54:44'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 18:54:46'!
ERROR!
!TerniLapilli methodsFor: 'accessing' stamp: 'FD 11/1/2020 18:55:47' prior: 50905941!
getOtherPlayer: aPlayer
	
	^ players at: (players findFirst: [ :player | player ~= aPlayer ]).! !
!TerniLapilli methodsFor: 'accessing' stamp: 'FD 11/1/2020 18:56:00' prior: 50905946!
player0
	
	^ players at: [players findFirst: [ :player | player name = $0 ]].! !
!TerniLapilli methodsFor: 'accessing' stamp: 'FD 11/1/2020 18:56:08' prior: 50905936!
playerX
	
	^ players at: [ players findFirst: [ :player | player name = $X ]].! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 18:56:11'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 18:56:11'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 18:56:11'!
ERROR!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 18:56:11'!
ERROR!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 18:56:11'!
ERROR!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 18:56:11'!
ERROR!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 18:56:11'!
ERROR!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 18:56:12'!
ERROR!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 18:56:12'!
ERROR!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:56:12'!
ERROR!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:56:12'!
ERROR!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:56:12'!
ERROR!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:56:12'!
ERROR!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:56:12'!
ERROR!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:56:12'!
ERROR!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:56:12'!
ERROR!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:56:12'!
ERROR!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 18:56:12'!
ERROR!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 18:56:12'!
ERROR!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 18:56:12'!
ERROR!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 18:56:12'!
ERROR!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 18:56:12'!
ERROR!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 18:56:12'!
ERROR!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 18:56:12'!
ERROR!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 18:56:12'!
ERROR!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 18:56:12'!
ERROR!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 18:56:12'!
ERROR!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 18:56:12'!
ERROR!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 18:56:14'!
ERROR!
!TerniLapilli methodsFor: 'accessing' stamp: 'FD 11/1/2020 18:57:05' prior: 50906515!
playerX
	
	^ players select: [ :player | player name = $X ] first.! !
!TerniLapilli methodsFor: 'accessing' stamp: 'FD 11/1/2020 18:57:17' prior: 50906509!
player0
	
	^ players select: [ :player | player name = $0 ] first.! !
!TerniLapilli methodsFor: 'accessing' stamp: 'FD 11/1/2020 18:57:44' prior: 50906503!
getOtherPlayer: aPlayer
	
	^ players select: [ :player | player ~= aPlayer ] first.! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 18:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 18:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 18:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 18:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 18:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 18:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 18:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 18:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 18:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 18:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 18:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 18:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 18:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 18:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 18:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 18:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 18:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 18:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 18:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 18:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 18:57:52'!
ERROR!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 18:58:06'!
ERROR!
!TerniLapilli methodsFor: 'accessing' stamp: 'FD 11/1/2020 18:58:36' prior: 50906628!
getOtherPlayer: aPlayer
	
	^ (players select: [ :player | player ~= aPlayer ]) first.! !
!TerniLapilli methodsFor: 'accessing' stamp: 'FD 11/1/2020 18:58:42' prior: 50906623!
player0
	
	^ (players select: [ :player | player name = $0 ]) first.! !
!TerniLapilli methodsFor: 'accessing' stamp: 'FD 11/1/2020 18:58:47' prior: 50906618!
playerX
	
	^ (players select: [ :player | player name = $X ]) first.! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 18:58:49'!
FAILURE!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 18:58:49'!
FAILURE!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 18:58:49'!
FAILURE!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 18:58:49'!
PASSED!

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 18:58:53'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 18:59:19' prior: 50895346!
isPlayingX
	^currentlyPlaying = self playerX.! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 18:59:21'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'FD 11/1/2020 18:59:34' prior: 50895295!
isPlaying0
	^currentlyPlaying = self player0.! !

!testRun: #TerniLapilliTest #test01PlayerXStartsPlaying stamp: 'FD 11/1/2020 18:59:36'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXgoes0 stamp: 'FD 11/1/2020 18:59:36'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayer0goesX stamp: 'FD 11/1/2020 18:59:36'!
PASSED!

!testRun: #TerniLapilliTest #test04WhenXIsPlaying0IsNot stamp: 'FD 11/1/2020 18:59:36'!
PASSED!

!testRun: #TerniLapilliTest #test05When0IsPlayingXIsNot stamp: 'FD 11/1/2020 18:59:36'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerXCannotPutWhen0IsPlaying stamp: 'FD 11/1/2020 18:59:36'!
PASSED!

!testRun: #TerniLapilliTest #test07Player0CannotPutWhenXIsPlaying stamp: 'FD 11/1/2020 18:59:36'!
PASSED!

!testRun: #TerniLapilliTest #test08aPlayerCantPutATokenOnAnOccupiedPlace stamp: 'FD 11/1/2020 18:59:36'!
PASSED!

!testRun: #TerniLapilliTest #test09WhenThereAreNoTokensPlayerXHasNotWon stamp: 'FD 11/1/2020 18:59:36'!
PASSED!

!testRun: #TerniLapilliTest #test10WhenXHasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:59:36'!
PASSED!

!testRun: #TerniLapilliTest #test11When0HasLessThanThreeTokensHeHasNotWon stamp: 'FD 11/1/2020 18:59:36'!
PASSED!

!testRun: #TerniLapilliTest #test12WhenARowIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:59:36'!
PASSED!

!testRun: #TerniLapilliTest #test13WhenARowIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:59:36'!
PASSED!

!testRun: #TerniLapilliTest #test14WhenAColumnIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:59:36'!
PASSED!

!testRun: #TerniLapilliTest #test15WhenAColumnIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:59:36'!
PASSED!

!testRun: #TerniLapilliTest #test16WhenADiagonalIsFilledWithXPlayerXWins stamp: 'FD 11/1/2020 18:59:36'!
PASSED!

!testRun: #TerniLapilliTest #test17WhenADiagonalIsFilledWith0Player0Wins stamp: 'FD 11/1/2020 18:59:36'!
PASSED!

!testRun: #TerniLapilliTest #test18WhenAPlayerWinsTheGameEnds stamp: 'FD 11/1/2020 18:59:36'!
PASSED!

!testRun: #TerniLapilliTest #test19APlayerCantPutATokenOutsideTheBoard stamp: 'FD 11/1/2020 18:59:36'!
PASSED!

!testRun: #TerniLapilliTest #test20APlayerCantMoveATokenIfTheGameHasEnded stamp: 'FD 11/1/2020 18:59:36'!
PASSED!

!testRun: #TerniLapilliTest #test21APlayerCantMoveATokenFromAnEmptyPosition stamp: 'FD 11/1/2020 18:59:36'!
PASSED!

!testRun: #TerniLapilliTest #test22APlayerCantMoveATokenToAnOccupiedPosition stamp: 'FD 11/1/2020 18:59:36'!
PASSED!

!testRun: #TerniLapilliTest #test23APlayerCantMoveATokenIfItIsNotTheirTurn stamp: 'FD 11/1/2020 18:59:36'!
PASSED!

!testRun: #TerniLapilliTest #test24APlayerCantMoveATokenFromAnotherPlayer stamp: 'FD 11/1/2020 18:59:36'!
PASSED!

!testRun: #TerniLapilliTest #test25APlayerCantMoveBeforeTheSixthTurn stamp: 'FD 11/1/2020 18:59:36'!
PASSED!

!testRun: #TerniLapilliTest #test26APlayerCanMoveAToken stamp: 'FD 11/1/2020 18:59:36'!
PASSED!

!testRun: #TerniLapilliTest #test27APlayerCantMoveOutsideTheBoard stamp: 'FD 11/1/2020 18:59:36'!
PASSED!

!testRun: #TerniLapilliTest #test28APlayerCantMoveToNonAdjacentPositions stamp: 'FD 11/1/2020 18:59:36'!
PASSED!