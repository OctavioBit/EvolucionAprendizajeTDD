

----End fileIn of C:\Users\Tink\Desktop\FCEN\Inge 1\2020-2c\18-Portfolio1\Portfolio-Ejercicio.st----!

!classRemoval: #ReceptiveAccount stamp: 't 11/2/2020 19:54:32'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 't 11/2/2020 19:54:33'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 't 11/2/2020 19:54:33'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 't 11/2/2020 19:54:34'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 't 11/2/2020 19:54:34'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of C:\Users\Tink\Desktop\FCEN\Inge 1\2020-2c\18-Portfolio1\Portfolio-Ejercicio.st----!

----QUIT----(2 November 2020 20:57:24) CuisUniversity-4384.image priorSource: 17221413!

----STARTUP---- (6 November 2020 00:38:19) as C:\Users\Tink\Desktop\FCEN\Inge 1\CUIS\CuisUniversity-4384.image!


!classRemoval: #ReceptiveAccount stamp: 't 11/6/2020 00:38:46'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 't 11/6/2020 00:38:47'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 't 11/6/2020 00:38:47'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 't 11/6/2020 00:38:48'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 't 11/6/2020 00:38:48'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of C:\Users\Tink\Desktop\inge1-talleres\18-Portfolio\Portfolio-Ejercicio.st----!

----End fileIn of C:\Users\Tink\Desktop\inge1-talleres\17-TerniLapilli\TerniLapilli.st----!

----QUIT----(6 November 2020 00:45:23) CuisUniversity-4384.image priorSource: 17237231!

----STARTUP---- (8 November 2020 20:43:00) as C:\Users\Tink\Desktop\FCEN\Inge 1\CUIS\CuisUniversity-4384.image!


----QUIT----(9 November 2020 00:47:01) CuisUniversity-4384.image priorSource: 17281901!

----STARTUP---- (9 November 2020 16:23:49) as C:\Users\Tink\Desktop\FCEN\Inge 1\CUIS\CuisUniversity-4384.image!

!Rot13Test methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 17:21:13' prior: 50868187!
test01
	self assert: '' equals: '' asRot13.
	
	"Despues intenta hacerlo con el metodo ZOMBIES cero, una y varias 'a'ssss!!!! 
	zero, one, many (or more complex), boundary behaviors, interface definition, exercise exceptional behavior, simple scenarios simple solutions"! !

!classRemoval: #Withdraw stamp: 't 11/9/2020 19:21:01'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 't 11/9/2020 19:21:01'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 't 11/9/2020 19:21:02'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccount stamp: 't 11/9/2020 19:21:02'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 't 11/9/2020 19:21:03'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Account stamp: 't 11/9/2020 19:21:04'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 't 11/9/2020 19:21:05'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 't 11/9/2020 19:21:05'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of C:\Users\Tink\Desktop\FCEN\Inge 1\2020-2c\18-Portfolio1\Portfolio-Solucion.st----!

TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 't 11/9/2020 19:23:48'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'nil' stamp: 't 11/9/2020 19:23:55'!
test01
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 19:24:55' prior: 50872516!
test01
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 19:25:49' prior: 50872520!
test01
	|aReceptiveAccount anotherReceptiveAccount|
	
	aReceptiveAccount  := ReceptiveAccount new.
	anotherReceptiveAccount  := ReceptiveAccount new.
! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 't 11/9/2020 19:29:27'!
ProtoObject subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 19:28:59' prior: 50872524!
test01
	|senderReceptiveAccount receiverReceptiveAccount|
	
	senderReceptiveAccount  := ReceptiveAccount new.
	receiverReceptiveAccount  := ReceptiveAccount new.
	
	Transfer register: 500 from: senderReceptiveAccount to: receiverReceptiveAccount.
	
	self assert: senderReceptiveAccount balance equals: -500.
	self assert: receiverReceptiveAccount balance equals: 500.! !

!testRun: #TransferTest #test01 stamp: 't 11/9/2020 19:29:32'!
ERROR!
!Transfer class methodsFor: 'instance creation' stamp: 't 11/9/2020 19:29:49'!
register: aSmallInteger from: aReceptiveAccount to: aReceptiveAccount3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeRegister: aSmallInteger from: aReceptiveAccount to: aReceptiveAccount3 ! !
!Transfer class methodsFor: 'instance creation' stamp: 't 11/9/2020 19:30:34' prior: 50872556!
register: aValue from: aSenderAccount to: aReceiverAccount
	
	 ! !
!Transfer class methodsFor: 'instance creation' stamp: 't 11/9/2020 19:32:55' prior: 50872568!
register: aValue from: senderAccount to: receiverAccount
	Deposit register: 500 on: receiverAccount.
	Withdraw register: 500 on: senderAccount.
	
	 ! !

!testRun: #TransferTest #test01 stamp: 't 11/9/2020 19:32:57'!
PASSED!

!testRun: #TransferTest #test01 stamp: 't 11/9/2020 19:32:58'!
PASSED!

AccountTransaction subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 't 11/9/2020 19:33:26'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 19:34:25'!
test02
	|senderReceptiveAccount receiverReceptiveAccount|
	
	senderReceptiveAccount  := ReceptiveAccount new.
	receiverReceptiveAccount  := ReceptiveAccount new.
	
	Transfer register: 500 from: senderReceptiveAccount to: receiverReceptiveAccount.
	
	self assert: senderReceptiveAccount balance equals: -500.
	self assert: receiverReceptiveAccount balance equals: 500.! !
!Transfer class methodsFor: 'instance creation' stamp: 't 11/9/2020 19:35:07' prior: 50872574!
register: aValue from: senderAccount to: receiverAccount
	Deposit register: aValue on: receiverAccount.
	Withdraw register: aValue on: senderAccount.
	
	 ! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 19:38:40'!
test01TransferModifiesSenderAndReceiverAccountBalanceCorrectly
	|senderReceptiveAccount receiverReceptiveAccount|
	
	senderReceptiveAccount  := ReceptiveAccount new.
	receiverReceptiveAccount  := ReceptiveAccount new.
	
	Transfer register: 500 from: senderReceptiveAccount to: receiverReceptiveAccount.
	
	self assert: senderReceptiveAccount balance equals: -500.
	self assert: receiverReceptiveAccount balance equals: 500.! !

!methodRemoval: TransferTest #test01 stamp: 't 11/9/2020 19:38:43'!
test01
	|senderReceptiveAccount receiverReceptiveAccount|
	
	senderReceptiveAccount  := ReceptiveAccount new.
	receiverReceptiveAccount  := ReceptiveAccount new.
	
	Transfer register: 500 from: senderReceptiveAccount to: receiverReceptiveAccount.
	
	self assert: senderReceptiveAccount balance equals: -500.
	self assert: receiverReceptiveAccount balance equals: 500.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 19:42:58'!
test02TransferPartCanAccessToTheOtherPartInfo
	|senderReceptiveAccount receiverReceptiveAccount aTransfer|
	
	senderReceptiveAccount  := ReceptiveAccount new.
	receiverReceptiveAccount  := ReceptiveAccount new.
	
	aTransfer := Transfer register: 500 from: senderReceptiveAccount to: receiverReceptiveAccount.
	
	
	self assert: senderReceptiveAccount balance equals: -500.
	self assert: receiverReceptiveAccount balance equals: 500.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 19:44:00' prior: 50872651!
test02TransferPartCanAccessToTheOtherPartInfo
	|senderReceptiveAccount receiverReceptiveAccount aTransfer|
	
	senderReceptiveAccount  := ReceptiveAccount new.
	receiverReceptiveAccount  := ReceptiveAccount new.
	aTransfer := Transfer register: 500 from: senderReceptiveAccount to: receiverReceptiveAccount.
	
	self assert: aTransfer sender receiver equals: aTransfer receiver sender.! !

!testRun: #TransferTest #test02TransferPartCanAccessToTheOtherPartInfo stamp: 't 11/9/2020 19:44:04'!
ERROR!
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 19:44:30' prior: 50872668!
test02TransferPartCanAccessToTheOtherPartInfo
	|senderReceptiveAccount receiverReceptiveAccount aTransfer|
	
	senderReceptiveAccount  := ReceptiveAccount new.
	receiverReceptiveAccount  := ReceptiveAccount new.
	aTransfer := Transfer register: 500 from: senderReceptiveAccount to: receiverReceptiveAccount.
	
	self assert: aTransfer sender equals: aTransfer receiver sender.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 19:44:49' prior: 50872687!
test02TransferPartCanAccessToTheOtherPartInfo
	|senderReceptiveAccount receiverReceptiveAccount aTransfer|
	
	senderReceptiveAccount  := ReceptiveAccount new.
	receiverReceptiveAccount  := ReceptiveAccount new.
	aTransfer := Transfer register: 500 from: senderReceptiveAccount to: receiverReceptiveAccount.
	
	self assert: aTransfer sender equals: aTransfer receiver sender.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 19:45:10' prior: 50872702!
test02TransferPartCanAccessToTheOtherPartInfo
	|senderReceptiveAccount receiverReceptiveAccount aTransfer|
	
	senderReceptiveAccount  := ReceptiveAccount new.
	receiverReceptiveAccount  := ReceptiveAccount new.
	aTransfer := Transfer register: 500 from: senderReceptiveAccount to: receiverReceptiveAccount.
	
	self assert: aTransfer sender equals: aTransfer receiver sender.
	self assert: aTransfer receiver equals: aTransfer sender receiver.! !

!methodRemoval: TransferTest #test02 stamp: 't 11/9/2020 19:46:30'!
test02
	|senderReceptiveAccount receiverReceptiveAccount|
	
	senderReceptiveAccount  := ReceptiveAccount new.
	receiverReceptiveAccount  := ReceptiveAccount new.
	
	Transfer register: 500 from: senderReceptiveAccount to: receiverReceptiveAccount.
	
	self assert: senderReceptiveAccount balance equals: -500.
	self assert: receiverReceptiveAccount balance equals: 500.!

AccountTransaction subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 't 11/9/2020 19:47:00'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'nil' stamp: 't 11/9/2020 19:49:04'!
sender
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 19:49:08'!
receiver
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 19:59:18'!
test02TransferReceiverCanAccessToSender
	|senderReceptiveAccount receiverReceptiveAccount aTransfer|
	
	senderReceptiveAccount  := ReceptiveAccount new.
	receiverReceptiveAccount  := ReceptiveAccount new.
	aTransfer := Transfer register: 500 from: senderReceptiveAccount to: receiverReceptiveAccount.
	
	self assert: aTransfer sender equals: aTransfer receiver sender.
	self assert: aTransfer receiver equals: aTransfer sender receiver.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 19:59:26' prior: 50872765!
test02TransferReceiverCanAccessToSender
	|senderReceptiveAccount receiverReceptiveAccount aTransfer|
	
	senderReceptiveAccount  := ReceptiveAccount new.
	receiverReceptiveAccount  := ReceptiveAccount new.
	aTransfer := Transfer register: 500 from: senderReceptiveAccount to: receiverReceptiveAccount.
	
	self assert: aTransfer sender equals: aTransfer receiver sender.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 19:59:49'!
test03TransferSenderCanAccessToReceiver
	|senderReceptiveAccount receiverReceptiveAccount aTransfer|
	
	senderReceptiveAccount  := ReceptiveAccount new.
	receiverReceptiveAccount  := ReceptiveAccount new.
	aTransfer := Transfer register: 500 from: senderReceptiveAccount to: receiverReceptiveAccount.
	
	self assert: aTransfer receiver equals: aTransfer sender receiver.! !

!methodRemoval: TransferTest #test02TransferPartCanAccessToTheOtherPartInfo stamp: 't 11/9/2020 20:00:33'!
test02TransferPartCanAccessToTheOtherPartInfo
	|senderReceptiveAccount receiverReceptiveAccount aTransfer|
	
	senderReceptiveAccount  := ReceptiveAccount new.
	receiverReceptiveAccount  := ReceptiveAccount new.
	aTransfer := Transfer register: 500 from: senderReceptiveAccount to: receiverReceptiveAccount.
	
	self assert: aTransfer sender equals: aTransfer receiver sender.
	self assert: aTransfer receiver equals: aTransfer sender receiver.!

!testRun: #TransferTest #test02TransferReceiverCanAccessToSender stamp: 't 11/9/2020 20:00:40'!
ERROR!

AccountTransaction subclass: #Transfer
	instanceVariableNames: 'sender receiver value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 't 11/9/2020 20:03:33'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: 'sender receiver value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 20:03:50' prior: 50872762!
receiver
	^receiver! !
!Transfer methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 20:03:56' prior: 50872759!
sender
	^sender! !

AccountTransaction subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 't 11/9/2020 20:04:25'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #TransferPart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferPart category: 'Portfolio-Solucion' stamp: 't 11/9/2020 20:05:01'!
AccountTransaction subclass: #TransferPart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferPart subclass: #TransferSend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferSend category: 'Portfolio-Solucion' stamp: 't 11/9/2020 20:05:35'!
TransferPart subclass: #TransferSend
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferPart subclass: #TransferRecieve
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferRecieve category: 'Portfolio-Solucion' stamp: 't 11/9/2020 20:05:39'!
TransferPart subclass: #TransferRecieve
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferPart subclass: #TransferReceive
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferReceive category: 'Portfolio-Solucion' stamp: 't 11/9/2020 20:05:43'!
TransferPart subclass: #TransferReceive
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferRecieve stamp: 't 11/9/2020 20:05:46'!
TransferPart subclass: #TransferRecieve
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #Transfer
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 't 11/9/2020 20:06:10'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #Transfer
	instanceVariableNames: 'sendPart receivePart value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 't 11/9/2020 20:06:39'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: 'sendPart receivePart value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 20:07:42'!
test02TransferReceiverCanAccessToSendPart
	|senderReceptiveAccount receiverReceptiveAccount aTransfer|
	
	senderReceptiveAccount  := ReceptiveAccount new.
	receiverReceptiveAccount  := ReceptiveAccount new.
	aTransfer := Transfer register: 500 from: senderReceptiveAccount to: receiverReceptiveAccount.
	
	self assert: aTransfer sender equals: aTransfer receiver sender.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 20:07:56' prior: 50872947!
test02TransferReceiverCanAccessToSendPart
	|senderReceptiveAccount receiverReceptiveAccount aTransfer|
	
	senderReceptiveAccount  := ReceptiveAccount new.
	receiverReceptiveAccount  := ReceptiveAccount new.
	aTransfer := Transfer register: 500 from: senderReceptiveAccount to: receiverReceptiveAccount.
	
	self assert: aTransfer sendPart equals: aTransfer receivePart sendPart.! !

!methodRemoval: Transfer #receiver stamp: 't 11/9/2020 20:08:06'!
receiver
	^receiver!

!methodRemoval: Transfer #sender stamp: 't 11/9/2020 20:08:08'!
sender
	^sender!

!methodRemoval: TransferTest #test02TransferReceiverCanAccessToSender stamp: 't 11/9/2020 20:08:13'!
test02TransferReceiverCanAccessToSender
	|senderReceptiveAccount receiverReceptiveAccount aTransfer|
	
	senderReceptiveAccount  := ReceptiveAccount new.
	receiverReceptiveAccount  := ReceptiveAccount new.
	aTransfer := Transfer register: 500 from: senderReceptiveAccount to: receiverReceptiveAccount.
	
	self assert: aTransfer sender equals: aTransfer receiver sender.!
!Transfer class methodsFor: 'instance creation' stamp: 't 11/9/2020 20:08:56' prior: 50872613!
register: aValue from: senderAccount to: receiverAccount
	TransferSend register: aValue on: senderAccount.
	TransferReceive register: aValue on: receiverAccount.

	! !
!Transfer class methodsFor: 'instance creation' stamp: 't 11/9/2020 20:10:51' prior: 50872997!
register: aValue from: senderAccount to: receiverAccount
	TransferSend register: aValue on: senderAccount.
	TransferReceive register: aValue on: receiverAccount.! !
!Transfer class methodsFor: 'instance creation' stamp: 't 11/9/2020 20:11:47' prior: 50873006!
register: aValue from: senderAccount to: receiverAccount
	self new initializeWith: aValue.
	TransferSend register: aValue on: senderAccount.
	TransferReceive register: aValue on: receiverAccount.! !
!Transfer class methodsFor: 'instance creation' stamp: 't 11/9/2020 20:13:58'!
for: aValue
	self initializeWith: aValue.! !
!Transfer class methodsFor: 'instance creation' stamp: 't 11/9/2020 20:14:16' prior: 50873024!
for: aValue
	^self initializeFor: aValue.! !
!Transfer class methodsFor: 'instance creation' stamp: 't 11/9/2020 20:14:32' prior: 50873029!
for: aValue
	^self new initializeFor: aValue.! !
!Transfer class methodsFor: 'instance creation' stamp: 't 11/9/2020 20:15:04' prior: 50873015!
register: aValue from: senderAccount to: receiverAccount
	self for: aValue.
	TransferSend register: aValue on: senderAccount.
	TransferReceive register: aValue on: receiverAccount.! !
!Transfer class methodsFor: 'instance creation' stamp: 't 11/9/2020 20:17:01' prior: 50873039!
register: aValue from: senderAccount to: receiverAccount
	
	| transfer |
	transfer := self for: aValue.
	senderAccount register: transfer sendPart.
	receiverAccount register: transfer receivePart.! !
!Transfer class methodsFor: 'instance creation' stamp: 't 11/9/2020 20:17:11' prior: 50873048!
register: aValue from: senderAccount to: receiverAccount
	
	| transfer |
	
	transfer := self for: aValue.
	senderAccount register: transfer sendPart.
	receiverAccount register: transfer receivePart.! !
!Transfer methodsFor: 'no messages' stamp: 't 11/9/2020 20:18:44'!
initializeFor: aValue
	value := aValue.
! !
!Transfer methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 20:19:41' prior: 50873067!
initializeFor: aValue
	value := aValue.
	sendPart := TransferSend for: self.
	receivePart := TransferReceive for: self.! !

AccountTransaction subclass: #TransferPart
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferPart category: 'Portfolio-Solucion' stamp: 't 11/9/2020 20:20:01'!
AccountTransaction subclass: #TransferPart
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferPart class methodsFor: 'nil' stamp: 't 11/9/2020 20:20:49'!
for: aTransfer
	^self new initializeFor: aTransfer.! !
!TransferPart methodsFor: 'no messages' stamp: 't 11/9/2020 20:21:04'!
initializeFor: aTransfer
	transfer := aTransfer.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 20:21:34' overrides: 50872401!
value
	^value.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 20:22:31'!
sendPart
	^sendPart ! !
!Transfer methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 20:22:39'!
receivePart
	^receivePart.! !
!TransferReceive methodsFor: 'no messages' stamp: 't 11/9/2020 20:23:25'!
sendPart
	^ transfer sendPart! !
!TransferSend methodsFor: 'no messages' stamp: 't 11/9/2020 20:23:47'!
receivePart
	^transfer receivePart.! !

!testRun: #TransferTest #test02TransferReceiverCanAccessToSendPart stamp: 't 11/9/2020 20:24:10'!
ERROR!

!testRun: #TransferTest #test02TransferReceiverCanAccessToSendPart stamp: 't 11/9/2020 20:24:19'!
ERROR!
!Transfer class methodsFor: 'instance creation' stamp: 't 11/9/2020 20:24:52' prior: 50873058!
register: aValue from: senderAccount to: receiverAccount
	
	| transfer |
	
	transfer := self for: aValue.
	senderAccount register: transfer sendPart.
	receiverAccount register: transfer receivePart.
	^transfer.! !

!testRun: #TransferTest #test01TransferModifiesSenderAndReceiverAccountBalanceCorrectly stamp: 't 11/9/2020 20:25:00'!
ERROR!

!testRun: #TransferTest #test02TransferReceiverCanAccessToSendPart stamp: 't 11/9/2020 20:25:06'!
PASSED!

!testRun: #TransferTest #test03TransferSenderCanAccessToReceiver stamp: 't 11/9/2020 20:25:07'!
ERROR!

!testRun: #TransferTest #test03TransferSenderCanAccessToReceiver stamp: 't 11/9/2020 20:25:08'!
ERROR!
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 20:25:32' prior: 50872797!
test03TransferSenderCanAccessToReceiver
	|senderReceptiveAccount receiverReceptiveAccount aTransfer|
	
	senderReceptiveAccount  := ReceptiveAccount new.
	receiverReceptiveAccount  := ReceptiveAccount new.
	aTransfer := Transfer register: 500 from: senderReceptiveAccount to: receiverReceptiveAccount.
	
	self assert: aTransfer receivePart equals: aTransfer sendPart receivePart.! !

!testRun: #TransferTest #test03TransferSenderCanAccessToReceiver stamp: 't 11/9/2020 20:25:33'!
PASSED!

!testRun: #TransferTest #test03TransferSenderCanAccessToReceiver stamp: 't 11/9/2020 20:25:35'!
PASSED!

!testRun: #TransferTest #test02TransferReceiverCanAccessToSendPart stamp: 't 11/9/2020 20:25:36'!
PASSED!
!TransferReceive methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 20:26:18' overrides: 50872405!
affectBalance: aBalance

	^aBalance + transfer value.! !
!TransferReceive methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 20:26:44' prior: 50873176 overrides: 50872405!
affectBalance: aBalance

	^aBalance + transfer value.! !
!TransferSend methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 20:26:50' overrides: 50872405!
affectBalance: aBalance

	^aBalance - transfer value.! !

!testRun: #TransferTest #test01TransferModifiesSenderAndReceiverAccountBalanceCorrectly stamp: 't 11/9/2020 20:26:53'!
PASSED!

!testRun: #TransferTest #test02TransferReceiverCanAccessToSendPart stamp: 't 11/9/2020 20:26:53'!
PASSED!

!testRun: #TransferTest #test03TransferSenderCanAccessToReceiver stamp: 't 11/9/2020 20:26:53'!
PASSED!
!TransferReceive methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 20:28:33' prior: 50873182 overrides: 50872405!
affectBalance: aBalance

	^aBalance + self value.! !
!TransferReceive methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 20:28:43' overrides: 50872401!
value
	^transfer value.! !

!methodRemoval: TransferReceive #value stamp: 't 11/9/2020 20:28:56'!
value
	^transfer value.!
!TransferPart methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 20:29:00' overrides: 50872401!
value
	^transfer value.! !
!TransferSend methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 20:29:15' prior: 50873187 overrides: 50872405!
affectBalance: aBalance

	^aBalance - self value.! !

----SNAPSHOT----(9 November 2020 20:29:18) CuisUniversity-4384.image priorSource: 17282104!

!testRun: #TransferTest #test01TransferModifiesSenderAndReceiverAccountBalanceCorrectly stamp: 't 11/9/2020 20:29:22'!
PASSED!

!testRun: #TransferTest #test02TransferReceiverCanAccessToSendPart stamp: 't 11/9/2020 20:29:22'!
PASSED!

!testRun: #TransferTest #test03TransferSenderCanAccessToReceiver stamp: 't 11/9/2020 20:29:22'!
PASSED!

Object subclass: #Transfer
	instanceVariableNames: 'sendPart receivePart value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 't 11/9/2020 20:35:53'!
Object subclass: #Transfer
	instanceVariableNames: 'sendPart receivePart value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransferTest #test01TransferModifiesSenderAndReceiverAccountBalanceCorrectly stamp: 't 11/9/2020 20:36:54'!
PASSED!

!testRun: #TransferTest #test02TransferReceiverCanAccessToSendPart stamp: 't 11/9/2020 20:36:54'!
PASSED!

!testRun: #TransferTest #test03TransferSenderCanAccessToReceiver stamp: 't 11/9/2020 20:36:54'!
PASSED!

!testRun: #TransferTest #test01TransferModifiesSenderAndReceiverAccountBalanceCorrectly stamp: 't 11/9/2020 20:54:29'!
PASSED!

!testRun: #TransferTest #test02TransferReceiverCanAccessToSendPart stamp: 't 11/9/2020 20:54:29'!
PASSED!

!testRun: #TransferTest #test03TransferSenderCanAccessToReceiver stamp: 't 11/9/2020 20:54:29'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 20:55:23'!
test04
	|senderReceptiveAccount receiverReceptiveAccount aTransfer|
	
	senderReceptiveAccount  := ReceptiveAccount new.
	receiverReceptiveAccount  := ReceptiveAccount new.
	aTransfer := Transfer register: 500 from: senderReceptiveAccount to: receiverReceptiveAccount.
	
	self assert: senderReceptiveAccount  ! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 20:55:41' prior: 50873273!
test04
	|senderAccount receiverReceptiveAccount aTransfer|
	
	senderAccount  := ReceptiveAccount new.
	receiverReceptiveAccount  := ReceptiveAccount new.
	aTransfer := Transfer register: 500 from: senderAccount to: receiverReceptiveAccount.
	
	self assert: senderAccount  ! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 20:55:50' prior: 50873286!
test04
	|senderAccount receiverAccount aTransfer|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount  := ReceptiveAccount new.
	aTransfer := Transfer register: 500 from: senderAccount to: receiverAccount.
	
	self assert: senderAccount  ! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 20:56:40' prior: 50873298!
test04
	|senderAccount receiverAccount aTransfer|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount  := ReceptiveAccount new.
	aTransfer := Transfer register: 500 from: senderAccount to: receiverAccount.
	
	self assert: (senderAccount hasRegistered: aTransfer sendPart).
	self assert: (receiverAccount hasRegistered: aTransfer receivePart).! !

!testRun: #TransferTest #test04 stamp: 't 11/9/2020 20:56:43'!
PASSED!

!testRun: #TransferTest #test01TransferModifiesSenderAndReceiverAccountBalanceCorrectly stamp: 't 11/9/2020 20:56:43'!
PASSED!

!testRun: #TransferTest #test02TransferReceiverCanAccessToSendPart stamp: 't 11/9/2020 20:56:43'!
PASSED!

!testRun: #TransferTest #test03TransferSenderCanAccessToReceiver stamp: 't 11/9/2020 20:56:43'!
PASSED!

!testRun: #TransferTest #test04 stamp: 't 11/9/2020 20:56:43'!
PASSED!
!Transfer class methodsFor: 'instance creation' stamp: 't 11/9/2020 20:58:09' prior: 50873126!
register: aValue from: senderAccount to: receiverAccount
	
	| transfer |
	
	transfer := self for: aValue.
	senderAccount register: transfer sendPart.
	receiverAccount register: transfer receivePart.
	^transfer.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 20:59:51'!
test05
	|anAccount |
	
	anAccount  := ReceptiveAccount new.
	self should: [Transfer register: 500 from: anAccount to: anAccount.] raise: Error withMessageText: Transfer selfTransferError.! !

!testRun: #TransferTest #test05 stamp: 't 11/9/2020 21:00:00'!
ERROR!
!Transfer class methodsFor: 'error' stamp: 't 11/9/2020 21:00:09'!
selfTransferError
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'error' stamp: 't 11/9/2020 21:01:02' prior: 50873360!
selfTransferError
	^ 'Can not transfer to self'! !

!testRun: #TransferTest #test05 stamp: 't 11/9/2020 21:01:03'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 't 11/9/2020 21:02:13' prior: 50873339!
register: aValue from: senderAccount to: receiverAccount
	
	| transfer |
	
	senderAccount = receiverAccount  ifTrue: [self error: self selfTransferError].
	
	transfer := self for: aValue.
	senderAccount register: transfer sendPart.
	receiverAccount register: transfer receivePart.
	^transfer.! !

!testRun: #TransferTest #test01TransferModifiesSenderAndReceiverAccountBalanceCorrectly stamp: 't 11/9/2020 21:02:15'!
PASSED!

!testRun: #TransferTest #test02TransferReceiverCanAccessToSendPart stamp: 't 11/9/2020 21:02:15'!
PASSED!

!testRun: #TransferTest #test03TransferSenderCanAccessToReceiver stamp: 't 11/9/2020 21:02:16'!
PASSED!

!testRun: #TransferTest #test04 stamp: 't 11/9/2020 21:02:16'!
PASSED!

!testRun: #TransferTest #test05 stamp: 't 11/9/2020 21:02:16'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:03:47'!
test06
	|senderAccount receiverAccount |
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount  := ReceptiveAccount new.
	self should: [Transfer register: 0 from: senderAccount to: receiverAccount.] raise: Error withMessageText: Transfer ZeroTransferError.! !

!testRun: #TransferTest #test06 stamp: 't 11/9/2020 21:03:53'!
ERROR!
!Transfer class methodsFor: 'error' stamp: 't 11/9/2020 21:04:01'!
ZeroTransferError
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'error' stamp: 't 11/9/2020 21:04:34' prior: 50873412!
ZeroTransferError
	^'Can not transfer a value that is zero'! !

!testRun: #TransferTest #test06 stamp: 't 11/9/2020 21:04:37'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 't 11/9/2020 21:05:10' prior: 50873372!
register: aValue from: senderAccount to: receiverAccount
	
	| transfer |
	
	senderAccount = receiverAccount  ifTrue: [self error: self selfTransferError].
	aValue = 0 ifTrue: [self error: self ZeroTransferError].
	
	transfer := self for: aValue.
	senderAccount register: transfer sendPart.
	receiverAccount register: transfer receivePart.
	^transfer.! !

!testRun: #TransferTest #test01TransferModifiesSenderAndReceiverAccountBalanceCorrectly stamp: 't 11/9/2020 21:05:12'!
PASSED!

!testRun: #TransferTest #test02TransferReceiverCanAccessToSendPart stamp: 't 11/9/2020 21:05:12'!
PASSED!

!testRun: #TransferTest #test03TransferSenderCanAccessToReceiver stamp: 't 11/9/2020 21:05:12'!
PASSED!

!testRun: #TransferTest #test04 stamp: 't 11/9/2020 21:05:12'!
PASSED!

!testRun: #TransferTest #test05 stamp: 't 11/9/2020 21:05:12'!
PASSED!

!testRun: #TransferTest #test06 stamp: 't 11/9/2020 21:05:12'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:05:29' prior: 50873399!
test06
	|senderAccount receiverAccount |
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount  := ReceptiveAccount new.
	self should: [Transfer register: -100 from: senderAccount to: receiverAccount.] raise: Error withMessageText: Transfer NegativeTransferError.! !

!testRun: #TransferTest #test06 stamp: 't 11/9/2020 21:05:32'!
ERROR!
!Transfer class methodsFor: 'error' stamp: 't 11/9/2020 21:05:40'!
NegativeTransferError
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'error' stamp: 't 11/9/2020 21:06:05' prior: 50873470!
NegativeTransferError
	^'Transfer can not be negative'.! !

!testRun: #TransferTest #test06 stamp: 't 11/9/2020 21:06:08'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 't 11/9/2020 21:06:47' prior: 50873425!
register: aValue from: senderAccount to: receiverAccount
	
	| transfer |
	
	senderAccount = receiverAccount  ifTrue: [self error: self selfTransferError].
	aValue = 0 ifTrue: [self error: self ZeroTransferError].
	aValue < 0 ifTrue: [self error: self NegativeTransferError].
	
	transfer := self for: aValue.
	senderAccount register: transfer sendPart.
	receiverAccount register: transfer receivePart.
	^transfer.! !
!Transfer class methodsFor: 'instance creation' stamp: 't 11/9/2020 21:07:14'!
validateTransfer: receiverAccount from: senderAccount to: aValue

	senderAccount = receiverAccount  ifTrue: [self error: self selfTransferError].
	aValue = 0 ifTrue: [self error: self ZeroTransferError].
	aValue < 0 ifTrue: [self error: self NegativeTransferError]! !
!Transfer class methodsFor: 'instance creation' stamp: 't 11/9/2020 21:07:14' prior: 50873483!
register: aValue from: senderAccount to: receiverAccount
	
	| transfer |
	
	self validateTransfer: receiverAccount from: senderAccount to: aValue.
	
	transfer := self for: aValue.
	senderAccount register: transfer sendPart.
	receiverAccount register: transfer receivePart.
	^transfer.! !
!Transfer class methodsFor: 'instance creation' stamp: 't 11/9/2020 21:07:40' prior: 50873511!
register: aValue from: senderAccount to: receiverAccount
	
	| transfer |
	
	self validateTransfer: aValue from: senderAccount to: receiverAccount.
	
	transfer := self for: aValue.
	senderAccount register: transfer sendPart.
	receiverAccount register: transfer receivePart.
	^transfer.! !
!Transfer class methodsFor: 'instance creation' stamp: 't 11/9/2020 21:07:49' prior: 50873499!
validateTransfer: aValue from: senderAccount to: receiverAccount

	senderAccount = receiverAccount  ifTrue: [self error: self selfTransferError].
	aValue = 0 ifTrue: [self error: self ZeroTransferError].
	aValue < 0 ifTrue: [self error: self NegativeTransferError]! !
!Transfer class methodsFor: 'instance creation' stamp: 't 11/9/2020 21:07:55' prior: 50873535!
validateTransfer: aValue from: senderAccount to: receiverAccount

	senderAccount = receiverAccount  ifTrue: [self error: self selfTransferError].
	aValue = 0 ifTrue: [self error: self ZeroTransferError].
	aValue < 0 ifTrue: [self error: self NegativeTransferError].! !

!testRun: #TransferTest #test01TransferModifiesSenderAndReceiverAccountBalanceCorrectly stamp: 't 11/9/2020 21:07:57'!
PASSED!

!testRun: #TransferTest #test02TransferReceiverCanAccessToSendPart stamp: 't 11/9/2020 21:07:57'!
PASSED!

!testRun: #TransferTest #test03TransferSenderCanAccessToReceiver stamp: 't 11/9/2020 21:07:57'!
PASSED!

!testRun: #TransferTest #test04 stamp: 't 11/9/2020 21:07:57'!
PASSED!

!testRun: #TransferTest #test05 stamp: 't 11/9/2020 21:07:57'!
PASSED!

!testRun: #TransferTest #test06 stamp: 't 11/9/2020 21:07:57'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:08:15'!
test07
	|senderAccount receiverAccount |
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount  := ReceptiveAccount new.
	self should: [Transfer register: -100 from: senderAccount to: receiverAccount.] raise: Error withMessageText: Transfer NegativeTransferError.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:03:47' prior: 50873457!
test06
	|senderAccount receiverAccount |
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount  := ReceptiveAccount new.
	self should: [Transfer register: 0 from: senderAccount to: receiverAccount.] raise: Error withMessageText: Transfer ZeroTransferError.! !

!testRun: #TransferTest #test01TransferModifiesSenderAndReceiverAccountBalanceCorrectly stamp: 't 11/9/2020 21:08:29'!
PASSED!

!testRun: #TransferTest #test02TransferReceiverCanAccessToSendPart stamp: 't 11/9/2020 21:08:29'!
PASSED!

!testRun: #TransferTest #test03TransferSenderCanAccessToReceiver stamp: 't 11/9/2020 21:08:29'!
PASSED!

!testRun: #TransferTest #test04 stamp: 't 11/9/2020 21:08:29'!
PASSED!

!testRun: #TransferTest #test05 stamp: 't 11/9/2020 21:08:29'!
PASSED!

!testRun: #TransferTest #test06 stamp: 't 11/9/2020 21:08:29'!
PASSED!

!testRun: #TransferTest #test07 stamp: 't 11/9/2020 21:08:29'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:08:36'!
test08
	|senderAccount receiverAccount |
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount  := ReceptiveAccount new.
	self should: [Transfer register: -100 from: senderAccount to: receiverAccount.] raise: Error withMessageText: Transfer NegativeTransferError.! !

!methodRemoval: TransferTest #test08 stamp: 't 11/9/2020 21:08:43'!
test08
	|senderAccount receiverAccount |
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount  := ReceptiveAccount new.
	self should: [Transfer register: -100 from: senderAccount to: receiverAccount.] raise: Error withMessageText: Transfer NegativeTransferError.!

TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTest category: 'Portfolio-Solucion' stamp: 't 11/9/2020 21:10:27'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTest methodsFor: 'nil' stamp: 't 11/9/2020 21:10:38'!
test01
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:11:22' prior: 50873653!
test01
	|aReceptiveAccount|
	
	! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 't 11/9/2020 21:14:25'!
Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:14:14' prior: 50873657!
test01
	|anAccount anAccountSummary|
	
	anAccount  := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: anAccount.
	
	self assert: anAccountSummary entries size = 1.
	self assert: anAccountSummary entries first = 'balance = 0'.
	
	! !

!testRun: #AccountSummaryTest #test01 stamp: 't 11/9/2020 21:14:36'!
ERROR!
!AccountSummary class methodsFor: 'instance creation' stamp: 't 11/9/2020 21:14:50'!
for: aReceptiveAccount 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aReceptiveAccount ! !
!AccountSummary class methodsFor: 'instance creation' stamp: 't 11/9/2020 21:15:15' prior: 50873682!
for: aReceptiveAccount 
	^self new initializeFor: aReceptiveAccount.! !

!testRun: #AccountSummaryTest #test01 stamp: 't 11/9/2020 21:15:19'!
ERROR!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 't 11/9/2020 21:15:32'!
Object subclass: #AccountSummary
	instanceVariableNames: 'receptiveAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'initialization' stamp: 't 11/9/2020 21:15:32'!
initializeFor: aReceptiveAccount 
	self shouldBeImplemented.
	receptiveAccount := aReceptiveAccount.! !
!AccountSummary methodsFor: 'initialization' stamp: 't 11/9/2020 21:15:39' prior: 50873706!
initializeFor: aReceptiveAccount 
	receptiveAccount := aReceptiveAccount.! !

!testRun: #AccountSummaryTest #test01 stamp: 't 11/9/2020 21:15:41'!
ERROR!
!AccountSummary methodsFor: 'initialization' stamp: 't 11/9/2020 21:15:56' prior: 50873713!
initializeFor: anAccount 
	receptiveAccount := anAccount.! !
!AccountSummary class methodsFor: 'instance creation' stamp: 't 11/9/2020 21:16:05' prior: 50873691!
for: anAccount 
	^self new initializeFor: anAccount.! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 't 11/9/2020 21:16:25'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:16:25' prior: 50873721!
initializeFor: anAccount 
	account := anAccount.! !

!testRun: #AccountSummaryTest #test01 stamp: 't 11/9/2020 21:16:42'!
ERROR!
!AccountSummary methodsFor: 'accessing' stamp: 't 11/9/2020 21:16:54'!
entries
	self shouldBeImplemented.! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/9/2020 21:17:10' prior: 50873747!
entries
	^ Array with: 'balance = 0'.! !

!testRun: #AccountSummaryTest #test01 stamp: 't 11/9/2020 21:17:12'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 't 11/9/2020 21:17:12'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:17:27'!
test02
	|anAccount anAccountSummary|
	
	anAccount  := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: anAccount.
	
	self assert: anAccountSummary entries size = 1.
	self assert: anAccountSummary entries first = 'balance = 0'.
	
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:17:40' prior: 50873760!
test02
	|anAccount anAccountSummary|
	
	anAccount  := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: anAccount.
	
	anAccount 
	
	self assert: anAccountSummary entries size = 1.
	self assert: anAccountSummary entries first = 'balance = 0'.
	
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:18:24' prior: 50873771!
test02
	|anAccount anAccountSummary|
	
	anAccount  := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: anAccount.
	
	Deposit register: 100 on: anAccount.
	
	self assert: anAccountSummary entries size = 1.
	self assert: anAccountSummary entries first = 'balance = 0'.
	
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:18:54' prior: 50873783!
test02
	|anAccount anAccountSummary|
	
	anAccount  := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: anAccount.
	
	Deposit register: 100 on: anAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'deposito por 100'.
	
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:19:01' prior: 50873796!
test02
	|anAccount anAccountSummary|
	
	anAccount  := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: anAccount.
	
	Deposit register: 100 on: anAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'Deposito por 100'.
	
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:19:22' prior: 50873809!
test02
	|anAccount anAccountSummary|
	
	anAccount  := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: anAccount.
	
	Deposit register: 100 on: anAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'Deposito por 100'.
	self assert: anAccountSummary entries last = 'balance = 0'.
	
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:19:28' prior: 50873822!
test02
	|anAccount anAccountSummary|
	
	anAccount  := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: anAccount.
	
	Deposit register: 100 on: anAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'deposito por 100'.
	self assert: anAccountSummary entries last = 'balance = 100'.
	
	! !

!testRun: #AccountSummaryTest #test02 stamp: 't 11/9/2020 21:19:35'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 't 11/9/2020 21:20:05'!
FAILURE!
!AccountSummary methodsFor: 'accessing' stamp: 't 11/9/2020 21:21:27' prior: 50873751!
entries
	account transactions size = 0 ifTrue: [
		^ Array with: 'balance = 0'.
	].	
	^Array with: 'deposito por 100' with: 'balance = 0'.! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/9/2020 21:21:33' prior: 50873856!
entries
	account transactions size = 0 ifTrue: [
		^ Array with: 'balance = 0'.
	].	
	^Array with: 'deposito por 100' with: 'balance = 100'.! !

!testRun: #AccountSummaryTest #test01 stamp: 't 11/9/2020 21:21:38'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 't 11/9/2020 21:21:38'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:23:15' prior: 50873837!
test02
	|anAccount anAccountSummary|
	
	anAccount  := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: anAccount.
	
	Withdraw register: 100 on: anAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'extraccion por 100'.
	self assert: anAccountSummary entries last = 'balance = 100'.
	
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:24:55' prior: 50873877!
test02
	|anAccount anAccountSummary|
	
	anAccount  := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: anAccount.
	
	Withdraw register: 100 on: anAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'extraccion por 100'.
	self assert: anAccountSummary entries last = 'balance = -100'.
	
	! !

!testRun: #AccountSummaryTest #test02 stamp: 't 11/9/2020 21:25:02'!
FAILURE!
!AccountSummary methodsFor: 'accessing' stamp: 't 11/9/2020 21:26:44' prior: 50873864!
entries
	account transactions size = 0 ifTrue: [
		^ Array with: 'balance = 0'.
	].	
	(account transactions first isKindOf: Deposit) ifTrue: [
	^Array with: 'deposito por 100' with: 'balance = 100'.
	].
	^Array with: 'extraccion por 100' with: 'balance = -100'.! !

!testRun: #AccountSummaryTest #test02 stamp: 't 11/9/2020 21:26:46'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 't 11/9/2020 21:26:47'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 't 11/9/2020 21:26:47'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:27:02'!
test03
	|anAccount anAccountSummary|
	
	anAccount  := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: anAccount.
	
	Withdraw register: 100 on: anAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'extraccion por 100'.
	self assert: anAccountSummary entries last = 'balance = -100'.
	
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:19:28' prior: 50873892!
test02
	|anAccount anAccountSummary|
	
	anAccount  := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: anAccount.
	
	Deposit register: 100 on: anAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'deposito por 100'.
	self assert: anAccountSummary entries last = 'balance = 100'.
	
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:29:16'!
test04
	|senderAccount receiverAccount anAccountSummary|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: senderAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'salida por transferencia de 100'.
	self assert: anAccountSummary entries last = 'balance = -100'.
	
	! !

!testRun: #AccountSummaryTest #test04 stamp: 't 11/9/2020 21:29:19'!
FAILURE!
!AccountSummary methodsFor: 'accessing' stamp: 't 11/9/2020 21:30:21' prior: 50873909!
entries
	account transactions size = 0 ifTrue: [
		^ Array with: 'balance = 0'.
	].	
	(account transactions first isKindOf: Deposit) ifTrue: [
	^Array with: 'deposito por 100' with: 'balance = 100'.
	].
	(account transactions first isKindOf: Withdraw) ifTrue: [^Array with: 'extraccion por 100' with: 'balance = -100'].! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/9/2020 21:30:27' prior: 50873977!
entries
	account transactions size = 0 ifTrue: [
		^ Array with: 'balance = 0'.
	].	
	(account transactions first isKindOf: Deposit) ifTrue: [ ^Array with: 'deposito por 100' with: 'balance = 100'.].
	(account transactions first isKindOf: Withdraw) ifTrue: [^Array with: 'extraccion por 100' with: 'balance = -100'].! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/9/2020 21:30:58' prior: 50873990!
entries
	account transactions size = 0 ifTrue: [
		^ Array with: 'balance = 0'.
	].	
	(account transactions first isKindOf: Deposit) ifTrue: [ ^Array with: 'deposito por 100' with: 'balance = 100'.].
	(account transactions first isKindOf: Withdraw) ifTrue: [^Array with: 'extraccion por 100' with: 'balance = -100'].
	(account transactions first isKindOf: TransferSend) ifTrue: [^Array with: 'salida por transferencia de 100' with: 'balance = -100'].
	! !

!testRun: #AccountSummaryTest #test04 stamp: 't 11/9/2020 21:31:01'!
PASSED!

!testRun: #AccountSummaryTest #test01 stamp: 't 11/9/2020 21:31:01'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 't 11/9/2020 21:31:01'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 't 11/9/2020 21:31:01'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 't 11/9/2020 21:31:01'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:31:15' prior: 50873957!
test04
	|senderAccount receiverAccount anAccountSummary|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: receiverAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'salida por transferencia de 100'.
	self assert: anAccountSummary entries last = 'balance = -100'.
	
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:31:21' prior: 50874033!
test04
	|senderAccount receiverAccount anAccountSummary|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: receiverAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'entrada por transferencia de 100'.
	self assert: anAccountSummary entries last = 'balance = 100'.
	
	! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/9/2020 21:31:47' prior: 50874003!
entries
	account transactions size = 0 ifTrue: [
		^ Array with: 'balance = 0'.
	].	
	(account transactions first isKindOf: Deposit) ifTrue: [ ^Array with: 'deposito por 100' with: 'balance = 100'.].
	(account transactions first isKindOf: Withdraw) ifTrue: [^Array with: 'extraccion por 100' with: 'balance = -100'].
	(account transactions first isKindOf: TransferSend) ifTrue: [^Array with: 'salida por transferencia de 100' with: 'balance = -100'].
	(account transactions first isKindOf: TransferReceive ) ifTrue: [^Array with: 'entrada por transferencia de 100' with: 'balance = -100'].
	! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/9/2020 21:31:53' prior: 50874069!
entries
	account transactions size = 0 ifTrue: [
		^ Array with: 'balance = 0'.
	].	
	(account transactions first isKindOf: Deposit) ifTrue: [ ^Array with: 'deposito por 100' with: 'balance = 100'.].
	(account transactions first isKindOf: Withdraw) ifTrue: [^Array with: 'extraccion por 100' with: 'balance = -100'].
	(account transactions first isKindOf: TransferSend) ifTrue: [^Array with: 'salida por transferencia de 100' with: 'balance = -100'].
	(account transactions first isKindOf: TransferReceive ) ifTrue: [^Array with: 'entrada por transferencia de 100' with: 'balance = 100'].
	! !

!testRun: #AccountSummaryTest #test01 stamp: 't 11/9/2020 21:31:56'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 't 11/9/2020 21:31:56'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 't 11/9/2020 21:31:56'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 't 11/9/2020 21:31:56'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:32:03'!
test05
	|senderAccount receiverAccount anAccountSummary|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: receiverAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'entrada por transferencia de 100'.
	self assert: anAccountSummary entries last = 'balance = 100'.
	
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:31:15' prior: 50874051!
test04
	|senderAccount receiverAccount anAccountSummary|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: receiverAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'salida por transferencia de 100'.
	self assert: anAccountSummary entries last = 'balance = -100'.
	
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:32:32'!
test06
	|senderAccount receiverAccount anAccountSummary|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: receiverAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'entrada por transferencia de 100'.
	self assert: anAccountSummary entries last = 'balance = 100'.
	
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:32:56' prior: 50874158!
test06
	|anAccount anAccountSummary|
	
	anAccount  := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: anAccount.
	
	Deposit register: 100 on: anAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'deposito por 100'.
	self assert: anAccountSummary entries last = 'balance = 100'.
	
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:33:34' prior: 50874176!
test06
	|anAccount anAccountSummary|
	
	anAccount  := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: anAccount.
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	self assert: anAccountSummary entries size = 3.
	self assert: anAccountSummary entries first = 'deposito por 100'.
	self assert: anAccountSummary entries second = 'extraccion por 50'.
	self assert: anAccountSummary entries last = 'balance = 100'.
	
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:33:38' prior: 50874191!
test06
	|anAccount anAccountSummary|
	
	anAccount  := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: anAccount.
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	self assert: anAccountSummary entries size = 3.
	self assert: anAccountSummary entries first = 'deposito por 100'.
	self assert: anAccountSummary entries second = 'extraccion por 50'.
	self assert: anAccountSummary entries last = 'balance = 50'.
	
	! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/9/2020 21:37:10' prior: 50874091!
entries
	account transactions size = 0 ifTrue: [
		^ Array with: 'balance = 0'.
	].	
	
	account transactions do: [:aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: ['deposito por ', aTransaction value].
	(aTransaction isKindOf: Withdraw) ifTrue: ['extraccion por ', aTransaction value].
	(aTransaction isKindOf: TransferSend) ifTrue: ['salida por transferencia de ', aTransaction value].
	(aTransaction isKindOf: TransferReceive ) ifTrue: ['entrada por transferencia de ' , aTransaction value]. ].! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/9/2020 21:37:15' prior: 50874227!
entries
	account transactions size = 0 ifTrue: [
		^ Array with: 'balance = 0'.
	].	
	
	account transactions do: [:aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: ['deposito por ', aTransaction value].
		(aTransaction isKindOf: Withdraw) ifTrue: ['extraccion por ', aTransaction value].
		(aTransaction isKindOf: TransferSend) ifTrue: ['salida por transferencia de ', aTransaction value].
		(aTransaction isKindOf: TransferReceive ) ifTrue: ['entrada por transferencia de ' , aTransaction value]. ].! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/9/2020 21:37:25' prior: 50874246!
entries
	| summary |
	account transactions size = 0 ifTrue: [
		^ Array with: 'balance = 0'.
	].	
	
	summary := account transactions do: [:aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: ['deposito por ', aTransaction value].
		(aTransaction isKindOf: Withdraw) ifTrue: ['extraccion por ', aTransaction value].
		(aTransaction isKindOf: TransferSend) ifTrue: ['salida por transferencia de ', aTransaction value].
		(aTransaction isKindOf: TransferReceive ) ifTrue: ['entrada por transferencia de ' , aTransaction value]. ].! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/9/2020 21:38:03' prior: 50874265!
entries
	| summary |	
	
	summary := account transactions do: [:aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: ['deposito por ', aTransaction value].
		(aTransaction isKindOf: Withdraw) ifTrue: ['extraccion por ', aTransaction value].
		(aTransaction isKindOf: TransferSend) ifTrue: ['salida por transferencia de ', aTransaction value].
		(aTransaction isKindOf: TransferReceive ) ifTrue: ['entrada por transferencia de ' , aTransaction value]. ].
	
	summary add: 'balance = ', account balance.! !

!testRun: #AccountSummaryTest #test01 stamp: 't 11/9/2020 21:38:09'!
ERROR!

!testRun: #AccountSummaryTest #test02 stamp: 't 11/9/2020 21:38:10'!
ERROR!

!testRun: #AccountSummaryTest #test03 stamp: 't 11/9/2020 21:38:10'!
ERROR!

!testRun: #AccountSummaryTest #test04 stamp: 't 11/9/2020 21:38:10'!
ERROR!

!testRun: #AccountSummaryTest #test05 stamp: 't 11/9/2020 21:38:10'!
ERROR!

!testRun: #AccountSummaryTest #test06 stamp: 't 11/9/2020 21:38:10'!
ERROR!

!testRun: #AccountSummaryTest #test01 stamp: 't 11/9/2020 21:38:20'!
ERROR!
!AccountSummary methodsFor: 'accessing' stamp: 't 11/9/2020 21:38:39' prior: 50874285!
entries
	| summary |	
	
	summary := account transactions do: [:aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: ['deposito por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue: ['extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: TransferSend) ifTrue: ['salida por transferencia de ', aTransaction value asString].
		(aTransaction isKindOf: TransferReceive ) ifTrue: ['entrada por transferencia de ' , aTransaction value asString]. ].
	
	summary add: 'balance = ', account balance.! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/9/2020 21:38:43' prior: 50874321!
entries
	| summary |	
	
	summary := account transactions do: [:aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: ['deposito por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue: ['extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: TransferSend) ifTrue: ['salida por transferencia de ', aTransaction value asString].
		(aTransaction isKindOf: TransferReceive ) ifTrue: ['entrada por transferencia de ' , aTransaction value asString]. ].
	
	summary add: 'balance = ', account balance asString.! !

!testRun: #AccountSummaryTest #test01 stamp: 't 11/9/2020 21:38:45'!
ERROR!

!testRun: #AccountSummaryTest #test02 stamp: 't 11/9/2020 21:38:45'!
ERROR!

!testRun: #AccountSummaryTest #test03 stamp: 't 11/9/2020 21:38:45'!
ERROR!

!testRun: #AccountSummaryTest #test04 stamp: 't 11/9/2020 21:38:45'!
ERROR!

!testRun: #AccountSummaryTest #test05 stamp: 't 11/9/2020 21:38:45'!
ERROR!

!testRun: #AccountSummaryTest #test06 stamp: 't 11/9/2020 21:38:45'!
ERROR!

!testRun: #AccountSummaryTest #test01 stamp: 't 11/9/2020 21:38:48'!
ERROR!
!AccountSummary methodsFor: 'accessing' stamp: 't 11/9/2020 21:39:15' prior: 50874341!
entries
	| summary |	
	
	summary := account transactions do: [:aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: ['deposito por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue: ['extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: TransferSend) ifTrue: ['salida por transferencia de ', aTransaction value asString].
		(aTransaction isKindOf: TransferReceive ) ifTrue: ['entrada por transferencia de ' , aTransaction value asString]. ].
	
	summary add: 'balance = ', account balance asString.
	^summary.! !

!testRun: #AccountSummaryTest #test01 stamp: 't 11/9/2020 21:39:32'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 't 11/9/2020 21:39:33'!
FAILURE!

!testRun: #AccountSummaryTest #test03 stamp: 't 11/9/2020 21:39:33'!
FAILURE!

!testRun: #AccountSummaryTest #test04 stamp: 't 11/9/2020 21:39:33'!
FAILURE!

!testRun: #AccountSummaryTest #test05 stamp: 't 11/9/2020 21:39:33'!
FAILURE!

!testRun: #AccountSummaryTest #test06 stamp: 't 11/9/2020 21:39:33'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 't 11/9/2020 21:39:38'!
FAILURE!

anAccountSummary!

anAccountSummary entries!

anAccountSummary entries first!

anAccountSummary entries!

----End fileIn of C:\Users\Tink\Desktop\FCEN\Inge 1\CUIS\Packages\TerseGuide.pck.st----!
!AccountSummary methodsFor: 'accessing' stamp: 't 11/9/2020 21:41:48' prior: 50874378!
entries
	| summary |	
	
	summary := account transactions collect: [:aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: ['deposito por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue: ['extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: TransferSend) ifTrue: ['salida por transferencia de ', aTransaction value asString].
		(aTransaction isKindOf: TransferReceive ) ifTrue: ['entrada por transferencia de ' , aTransaction value asString]. ].
	
	summary add: 'balance = ', account balance asString.
	^summary.! !

!testRun: #AccountSummaryTest #test01 stamp: 't 11/9/2020 21:41:49'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 't 11/9/2020 21:41:50'!
FAILURE!

!testRun: #AccountSummaryTest #test03 stamp: 't 11/9/2020 21:41:50'!
FAILURE!

!testRun: #AccountSummaryTest #test04 stamp: 't 11/9/2020 21:41:50'!
FAILURE!

!testRun: #AccountSummaryTest #test05 stamp: 't 11/9/2020 21:41:50'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 't 11/9/2020 21:41:50'!
FAILURE!

!testRun: #AccountSummaryTest #test02 stamp: 't 11/9/2020 21:41:56'!
FAILURE!

anAccountSummary entries!

aTransaction!

aTransaction value!

aTransaction value asString!

'deposito por ', aTransaction value asString!

summary!

summary!
!AccountSummary methodsFor: 'accessing' stamp: 't 11/9/2020 21:45:02' prior: 50877355!
entries
	| summary |	
	
	summary := account transactions collect: [:aTransaction | |xxx|
		
		(aTransaction isKindOf: Deposit) ifTrue: [xxx := 'deposito por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue: ['extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: TransferSend) ifTrue: ['salida por transferencia de ', aTransaction value asString].
		(aTransaction isKindOf: TransferReceive ) ifTrue: ['entrada por transferencia de ' , aTransaction value asString]. xxx].
	
	summary add: 'balance = ', account balance asString.
	^summary.! !

!testRun: #AccountSummaryTest #test01 stamp: 't 11/9/2020 21:45:04'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 't 11/9/2020 21:45:05'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 't 11/9/2020 21:45:05'!
FAILURE!

!testRun: #AccountSummaryTest #test04 stamp: 't 11/9/2020 21:45:05'!
FAILURE!

!testRun: #AccountSummaryTest #test05 stamp: 't 11/9/2020 21:45:05'!
FAILURE!

!testRun: #AccountSummaryTest #test06 stamp: 't 11/9/2020 21:45:05'!
FAILURE!
!AccountSummary methodsFor: 'accessing' stamp: 't 11/9/2020 21:46:28' prior: 50877398!
entries
	| summary |	
	
	summary := account transactions collect: [:aTransaction | 
		|xxx|
		(aTransaction isKindOf: Deposit) ifTrue: [xxx := 'deposito por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue: [xxx := 'extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: TransferSend) ifTrue: [xxx := 'salida por transferencia de ', aTransaction value asString].
		(aTransaction isKindOf: TransferReceive ) ifTrue: [xxx := 'entrada por transferencia de ' , aTransaction value asString].
	xxx].
	
	summary add: 'balance = ', account balance asString.
	^summary.! !

!testRun: #AccountSummaryTest #test01 stamp: 't 11/9/2020 21:46:30'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 't 11/9/2020 21:46:30'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 't 11/9/2020 21:46:30'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 't 11/9/2020 21:46:30'!
FAILURE!

!testRun: #AccountSummaryTest #test05 stamp: 't 11/9/2020 21:46:31'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 't 11/9/2020 21:46:31'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 't 11/9/2020 21:46:31'!
FAILURE!
!AccountSummary methodsFor: 'accessing' stamp: 't 11/9/2020 21:46:50' prior: 50877434!
entries
	| summary |	
	
	summary := account transactions collect: [:aTransaction | 
		|xxx|
		(aTransaction isKindOf: Deposit) ifTrue: [xxx := 'deposito por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue: [xxx := 'extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: TransferSend) ifTrue: [xxx := 'salida por transferencia de ', aTransaction value asString].
		(aTransaction isKindOf: TransferReceive ) ifTrue: [xxx := 'entrada por transferencia de ' , aTransaction value asString].
	xxx].
	summary add: 'balance = ', account balance asString.
	^summary.! !

!testRun: #AccountSummaryTest #test01 stamp: 't 11/9/2020 21:58:44'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 't 11/9/2020 21:58:44'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 't 11/9/2020 21:58:44'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 't 11/9/2020 21:58:44'!
FAILURE!

!testRun: #AccountSummaryTest #test05 stamp: 't 11/9/2020 21:58:44'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 't 11/9/2020 21:58:44'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 't 11/9/2020 21:58:45'!
FAILURE!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:59:33' prior: 50874140!
test04
	|senderAccount receiverAccount anAccountSummary|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: receiverAccount.
	
	Transfer register: 100 from: senderAccount to: senderAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'salida por transferencia de 100'.
	self assert: anAccountSummary entries last = 'balance = -100'.
	
	! !

!testRun: #AccountSummaryTest #test01 stamp: 't 11/9/2020 21:59:40'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 't 11/9/2020 21:59:40'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 't 11/9/2020 21:59:40'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 't 11/9/2020 21:59:40'!
ERROR!

!testRun: #AccountSummaryTest #test05 stamp: 't 11/9/2020 21:59:40'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 't 11/9/2020 21:59:40'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 't 11/9/2020 21:59:40'!
ERROR!

!testRun: #AccountSummaryTest #test01 stamp: 't 11/9/2020 21:59:44'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 't 11/9/2020 21:59:44'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 't 11/9/2020 21:59:44'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 't 11/9/2020 21:59:44'!
ERROR!

!testRun: #AccountSummaryTest #test05 stamp: 't 11/9/2020 21:59:44'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 't 11/9/2020 21:59:44'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 't 11/9/2020 21:59:44'!
ERROR!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 21:59:54' prior: 50877513!
test04
	|senderAccount receiverAccount anAccountSummary|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: receiverAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'salida por transferencia de 100'.
	self assert: anAccountSummary entries last = 'balance = -100'.
	
	! !

!testRun: #AccountSummaryTest #test01 stamp: 't 11/9/2020 21:59:57'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 't 11/9/2020 21:59:57'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 't 11/9/2020 21:59:57'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 't 11/9/2020 21:59:57'!
FAILURE!

!testRun: #AccountSummaryTest #test05 stamp: 't 11/9/2020 21:59:57'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 't 11/9/2020 21:59:57'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 't 11/9/2020 21:59:57'!
FAILURE!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 22:00:17' prior: 50874122!
test05
	|senderAccount receiverAccount anAccountSummary|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: senderAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'entrada por transferencia de 100'.
	self assert: anAccountSummary entries last = 'balance = 100'.
	
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 22:00:39' prior: 50877600!
test05
	|senderAccount receiverAccount anAccountSummary|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: receiverAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'entrada por transferencia de 100'.
	self assert: anAccountSummary entries last = 'balance = 100'.
	
	! !
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 22:00:44' prior: 50877565!
test04
	|senderAccount receiverAccount anAccountSummary|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: senderAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'salida por transferencia de 100'.
	self assert: anAccountSummary entries last = 'balance = -100'.
	
	! !

!testRun: #AccountSummaryTest #test01 stamp: 't 11/9/2020 22:00:49'!
PASSED!

!testRun: #AccountSummaryTest #test02 stamp: 't 11/9/2020 22:00:49'!
PASSED!

!testRun: #AccountSummaryTest #test03 stamp: 't 11/9/2020 22:00:49'!
PASSED!

!testRun: #AccountSummaryTest #test04 stamp: 't 11/9/2020 22:00:49'!
PASSED!

!testRun: #AccountSummaryTest #test05 stamp: 't 11/9/2020 22:00:49'!
PASSED!

!testRun: #AccountSummaryTest #test06 stamp: 't 11/9/2020 22:00:49'!
PASSED!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 22:03:37'!
test01AccountSummaryForAnAccountWithoutTransactionsHasBalance0
	|anAccount anAccountSummary|
	
	anAccount  := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: anAccount.
	
	self assert: anAccountSummary entries size = 1.
	self assert: anAccountSummary entries first = 'balance = 0'.
	
	! !

!methodRemoval: AccountSummaryTest #test01 stamp: 't 11/9/2020 22:03:43'!
test01
	|anAccount anAccountSummary|
	
	anAccount  := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: anAccount.
	
	self assert: anAccountSummary entries size = 1.
	self assert: anAccountSummary entries first = 'balance = 0'.
	
	!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 22:06:09'!
test02AccountSummaryForAnAccountWithADepositPrintsCorrectly
	|anAccount anAccountSummary|
	
	anAccount  := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: anAccount.
	
	Deposit register: 100 on: anAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'deposito por 100'.
	self assert: anAccountSummary entries last = 'balance = 100'.
	
	! !

!methodRemoval: AccountSummaryTest #test02 stamp: 't 11/9/2020 22:06:12'!
test02
	|anAccount anAccountSummary|
	
	anAccount  := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: anAccount.
	
	Deposit register: 100 on: anAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'deposito por 100'.
	self assert: anAccountSummary entries last = 'balance = 100'.
	
	!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 22:06:28'!
test03AccountSummaryForAnAccountWithAWithdrawPrintsCorrectly
	|anAccount anAccountSummary|
	
	anAccount  := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: anAccount.
	
	Withdraw register: 100 on: anAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'extraccion por 100'.
	self assert: anAccountSummary entries last = 'balance = -100'.
	
	! !

!methodRemoval: AccountSummaryTest #test03 stamp: 't 11/9/2020 22:06:30'!
test03
	|anAccount anAccountSummary|
	
	anAccount  := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: anAccount.
	
	Withdraw register: 100 on: anAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'extraccion por 100'.
	self assert: anAccountSummary entries last = 'balance = -100'.
	
	!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 22:08:18'!
test04AccountSummaryForAnAccountThatSentATransferPrintsCorrectly
	|senderAccount receiverAccount anAccountSummary|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: senderAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'salida por transferencia de 100'.
	self assert: anAccountSummary entries last = 'balance = -100'.
	
	! !

!methodRemoval: AccountSummaryTest #test04 stamp: 't 11/9/2020 22:08:20'!
test04
	|senderAccount receiverAccount anAccountSummary|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: senderAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'salida por transferencia de 100'.
	self assert: anAccountSummary entries last = 'balance = -100'.
	
	!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 22:08:48'!
test05AccountSummaryForAnAccountThatReceivedATransferPrintsCorrectly
	|senderAccount receiverAccount anAccountSummary|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: receiverAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'entrada por transferencia de 100'.
	self assert: anAccountSummary entries last = 'balance = 100'.
	
	! !

!methodRemoval: AccountSummaryTest #test05 stamp: 't 11/9/2020 22:08:50'!
test05
	|senderAccount receiverAccount anAccountSummary|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: receiverAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'entrada por transferencia de 100'.
	self assert: anAccountSummary entries last = 'balance = 100'.
	
	!
!AccountSummaryTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 22:09:24'!
test06AccountSummaryForAnAccountWithManyTransactionsPrintsCorrectly
	|anAccount anAccountSummary|
	
	anAccount  := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: anAccount.
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	self assert: anAccountSummary entries size = 3.
	self assert: anAccountSummary entries first = 'deposito por 100'.
	self assert: anAccountSummary entries second = 'extraccion por 50'.
	self assert: anAccountSummary entries last = 'balance = 50'.
	
	! !

!methodRemoval: AccountSummaryTest #test06 stamp: 't 11/9/2020 22:09:25'!
test06
	|anAccount anAccountSummary|
	
	anAccount  := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: anAccount.
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	self assert: anAccountSummary entries size = 3.
	self assert: anAccountSummary entries first = 'deposito por 100'.
	self assert: anAccountSummary entries second = 'extraccion por 50'.
	self assert: anAccountSummary entries last = 'balance = 50'.
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 22:13:29'!
test04TransferIsRegisteredOnSenderAndReceiverAccount
	|senderAccount receiverAccount aTransfer|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount  := ReceptiveAccount new.
	aTransfer := Transfer register: 500 from: senderAccount to: receiverAccount.
	
	self assert: (senderAccount hasRegistered: aTransfer sendPart).
	self assert: (receiverAccount hasRegistered: aTransfer receivePart).! !

!methodRemoval: TransferTest #test04 stamp: 't 11/9/2020 22:13:30'!
test04
	|senderAccount receiverAccount aTransfer|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount  := ReceptiveAccount new.
	aTransfer := Transfer register: 500 from: senderAccount to: receiverAccount.
	
	self assert: (senderAccount hasRegistered: aTransfer sendPart).
	self assert: (receiverAccount hasRegistered: aTransfer receivePart).!
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 22:14:07'!
test03TransferSenderCanAccessToReceivePart
	|senderReceptiveAccount receiverReceptiveAccount aTransfer|
	
	senderReceptiveAccount  := ReceptiveAccount new.
	receiverReceptiveAccount  := ReceptiveAccount new.
	aTransfer := Transfer register: 500 from: senderReceptiveAccount to: receiverReceptiveAccount.
	
	self assert: aTransfer receivePart equals: aTransfer sendPart receivePart.! !

!methodRemoval: TransferTest #test03TransferSenderCanAccessToReceiver stamp: 't 11/9/2020 22:14:07'!
test03TransferSenderCanAccessToReceiver
	|senderReceptiveAccount receiverReceptiveAccount aTransfer|
	
	senderReceptiveAccount  := ReceptiveAccount new.
	receiverReceptiveAccount  := ReceptiveAccount new.
	aTransfer := Transfer register: 500 from: senderReceptiveAccount to: receiverReceptiveAccount.
	
	self assert: aTransfer receivePart equals: aTransfer sendPart receivePart.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 22:16:30'!
test05TransferCanNotHaveAnAccountAsSenderAndReceiverAtTheSameTime
	|anAccount |
	
	anAccount  := ReceptiveAccount new.
	self should: [Transfer register: 500 from: anAccount to: anAccount.] raise: Error withMessageText: Transfer selfTransferError.! !

!methodRemoval: TransferTest #test05 stamp: 't 11/9/2020 22:16:31'!
test05
	|anAccount |
	
	anAccount  := ReceptiveAccount new.
	self should: [Transfer register: 500 from: anAccount to: anAccount.] raise: Error withMessageText: Transfer selfTransferError.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 22:17:22'!
test06TransferCanNotHaveZeroAsValue
	|senderAccount receiverAccount |
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount  := ReceptiveAccount new.
	self should: [Transfer register: 0 from: senderAccount to: receiverAccount.] raise: Error withMessageText: Transfer ZeroTransferError.! !

!methodRemoval: TransferTest #test06 stamp: 't 11/9/2020 22:17:24'!
test06
	|senderAccount receiverAccount |
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount  := ReceptiveAccount new.
	self should: [Transfer register: 0 from: senderAccount to: receiverAccount.] raise: Error withMessageText: Transfer ZeroTransferError.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 22:17:38'!
test07TransferCanNotHaveNegativeValue
	|senderAccount receiverAccount |
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount  := ReceptiveAccount new.
	self should: [Transfer register: -100 from: senderAccount to: receiverAccount.] raise: Error withMessageText: Transfer NegativeTransferError.! !

!methodRemoval: TransferTest #test07 stamp: 't 11/9/2020 22:17:39'!
test07
	|senderAccount receiverAccount |
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount  := ReceptiveAccount new.
	self should: [Transfer register: -100 from: senderAccount to: receiverAccount.] raise: Error withMessageText: Transfer NegativeTransferError.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 22:17:52' prior: 50872621!
test01TransferModifiesSenderAndReceiverAccountBalanceCorrectly
	|senderReceptiveAccount receiverReceptiveAccount|
	
	senderReceptiveAccount  := ReceptiveAccount new.
	receiverReceptiveAccount  := ReceptiveAccount new.
	Transfer register: 500 from: senderReceptiveAccount to: receiverReceptiveAccount.
	
	self assert: senderReceptiveAccount balance equals: -500.
	self assert: receiverReceptiveAccount balance equals: 500.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 22:17:58' prior: 50877919!
test05TransferCanNotHaveAnAccountAsSenderAndReceiverAtTheSameTime
	|anAccount |
	
	anAccount  := ReceptiveAccount new.
	
	self should: [Transfer register: 500 from: anAccount to: anAccount.] raise: Error withMessageText: Transfer selfTransferError.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 22:18:03' prior: 50877938!
test06TransferCanNotHaveZeroAsValue
	|senderAccount receiverAccount |
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount  := ReceptiveAccount new.
	
	self should: [Transfer register: 0 from: senderAccount to: receiverAccount.] raise: Error withMessageText: Transfer ZeroTransferError.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 't 11/9/2020 22:18:05' prior: 50877961!
test07TransferCanNotHaveNegativeValue
	|senderAccount receiverAccount |
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount  := ReceptiveAccount new.
	
	self should: [Transfer register: -100 from: senderAccount to: receiverAccount.] raise: Error withMessageText: Transfer NegativeTransferError.! !

----QUIT----(9 November 2020 22:18:33) CuisUniversity-4384.image priorSource: 17330388!

----STARTUP---- (12 November 2020 19:53:31) as C:\Users\Tink\Desktop\FCEN\Inge 1\CUIS\CuisUniversity-4384.image!

!AccountSummary methodsFor: 'accessing' stamp: 't 11/12/2020 20:07:17' prior: 50877473!
entries
	| summary |	
	
	summary := account transactions collect: [:aTransaction | 
		|xxx|
		(aTransaction isKindOf: Deposit) ifTrue: [xxx := 'deposito por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue: [xxx := 'extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: TransferSend) ifTrue: [xxx := 'salida por transferencia de ', aTransaction value asString].
		(aTransaction isKindOf: TransferReceive ) ifTrue: [xxx := 'entrada por transferencia de ' , aTransaction value asString].
	xxx].
	summary add: 'balance = ', account balance asString.
	^summary.
	
	"lineForAccountSummary" "transferNet"! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/12/2020 21:07:08' prior: 50878045!
entries
	| summary |	
	
	summary := account transactions collect: [:aTransaction | 
		|xxx|
		(aTransaction isKindOf: Deposit) ifTrue: [xxx := 'deposito por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue: [xxx := 'extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: TransferSend) ifTrue: [xxx := 'salida por transferencia de ', aTransaction value asString].
		(aTransaction isKindOf: TransferReceive ) ifTrue: [xxx := 'entrada por transferencia de ' , aTransaction value asString].
	xxx].
	summary add: 'balance = ', account balance asString.
	^summary.
	
	"lineForAccountSummary" "transferNet"
	
	
	" Reports
		AccountSummary
		TransferNet	
	"! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/12/2020 21:07:16' prior: 50878069!
entries
	| summary |	
	
	summary := account transactions collect: [:aTransaction | 
		|xxx|
		(aTransaction isKindOf: Deposit) ifTrue: [xxx := 'deposito por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue: [xxx := 'extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: TransferSend) ifTrue: [xxx := 'salida por transferencia de ', aTransaction value asString].
		(aTransaction isKindOf: TransferReceive ) ifTrue: [xxx := 'entrada por transferencia de ' , aTransaction value asString].
	xxx].
	summary add: 'balance = ', account balance asString.
	^summary.
	
	
	"lineForAccountSummary" "transferNet"
	
	
	" Reports
		AccountSummary
		TransferNet	
	"! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/12/2020 21:11:47' prior: 50878094!
entries
	| summary |	
	
	summary := account transactions collect: [:aTransaction | 
		|xxx|
		(aTransaction isKindOf: Deposit) ifTrue: [xxx := 'deposito por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue: [xxx := 'extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: TransferSend) ifTrue: [xxx := 'salida por transferencia de ', aTransaction value asString].
		(aTransaction isKindOf: TransferReceive ) ifTrue: [xxx := 'entrada por transferencia de ' , aTransaction value asString].
	xxx].
	summary add: 'balance = ', account balance asString.
	^summary.
	
	
	"lineForAccountSummary" "transferNet"
	
	
	" Reports
		AccountSummary
		TransferNet	
	"! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/12/2020 21:12:05' prior: 50878119!
entries
	| summary |	
	
	summary := account transactions collect: [:aTransaction | 
		|anEntry|
		(aTransaction isKindOf: Deposit) ifTrue: [anEntry := 'deposito por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue: [anEntry := 'extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: TransferSend) ifTrue: [anEntry := 'salida por transferencia de ', aTransaction value asString].
		(aTransaction isKindOf: TransferReceive ) ifTrue: [anEntry := 'entrada por transferencia de ' , aTransaction value asString].
	anEntry].
	summary add: 'balance = ', account balance asString.
	^summary.
	
	
	"lineForAccountSummary" "transferNet"
	
	
	" Reports
		AccountSummary
		TransferNet	
	"! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/12/2020 21:12:17' prior: 50878144!
entries
	| summary |	
	
	summary := account transactions collect: [:aTransaction | 
		|anEntry|
		(aTransaction isKindOf: Deposit) ifTrue: [anEntry := 'deposito por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue: [anEntry := 'extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: TransferSend) ifTrue: [anEntry := 'salida por transferencia de ', aTransaction value asString].
		(aTransaction isKindOf: TransferReceive ) ifTrue: [anEntry := 'entrada por transferencia de ' , aTransaction value asString].
	anEntry.].
	summary add: 'balance = ', account balance asString.
	^summary.
	
	
	"lineForAccountSummary" "transferNet"
	
	
	" Reports
		AccountSummary
		TransferNet	
	"! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnAccountWithoutTransactionsHasBalance0 stamp: 't 11/12/2020 21:12:33'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADepositPrintsCorrectly stamp: 't 11/12/2020 21:12:33'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAnAccountWithAWithdrawPrintsCorrectly stamp: 't 11/12/2020 21:12:33'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAnAccountThatSentATransferPrintsCorrectly stamp: 't 11/12/2020 21:12:33'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAnAccountThatReceivedATransferPrintsCorrectly stamp: 't 11/12/2020 21:12:33'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAnAccountWithManyTransactionsPrintsCorrectly stamp: 't 11/12/2020 21:12:33'!
PASSED!

Object subclass: #Reports
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Reports category: 'Portfolio-Solucion' stamp: 't 11/12/2020 21:13:12'!
Object subclass: #Reports
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Reports subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 't 11/12/2020 21:13:56'!
Reports subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Reports methodsFor: 'nil' stamp: 't 11/12/2020 21:15:22'!
xxxDeposit
	! !
!Reports methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:15:29'!
xxxWithdraw
	
	! !
!Reports methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:15:37'!
xxxDeposit: aDeposit
	! !

!methodRemoval: Reports #xxxDeposit stamp: 't 11/12/2020 21:15:39'!
xxxDeposit
	!
!Reports methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:15:46'!
xxxWithdraw: aWithdraw
	
	! !

!methodRemoval: Reports #xxxWithdraw stamp: 't 11/12/2020 21:15:49'!
xxxWithdraw
	
	!
!Reports methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:16:02'!
xxxTransferReceive: aTransferReceive
	
	! !
!Reports methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:16:07'!
xxxTransferSend: aTransferSend
	
	! !
!AccountSummary methodsFor: 'initialization' stamp: 't 11/12/2020 21:17:17' overrides: 50878250!
xxxDeposit: aDeposit! !
!AccountSummary methodsFor: 'initialization' stamp: 't 11/12/2020 21:17:34' prior: 50878271 overrides: 50878250!
xxxDeposit: aDeposit
	^'deposito por ', aDeposit value asString! !
!AccountSummary methodsFor: 'initialization' stamp: 't 11/12/2020 21:17:36' prior: 50878276 overrides: 50878250!
xxxDeposit: aDeposit
	^'deposito por ', aDeposit value asString.! !
!AccountSummary methodsFor: 'initialization' stamp: 't 11/12/2020 21:17:52' overrides: 50878256!
xxxWithdraw: aWithdraw
	^'deposito por ', aWithdraw value asString.! !
!AccountSummary methodsFor: 'initialization' stamp: 't 11/12/2020 21:18:17' prior: 50878288 overrides: 50878256!
xxxWithdraw: aWithdraw
	^'extraccion por ', aWithdraw value asString.! !
!AccountSummary methodsFor: 'initialization' stamp: 't 11/12/2020 21:18:45' overrides: 50878266!
xxxTransferSend: aTransferSend
	^'salida por transferencia de ', aTransferSend value asString.! !
!AccountSummary methodsFor: 'initialization' stamp: 't 11/12/2020 21:18:56' overrides: 50878262!
xxxTransferReceive: aTransferReceive
	^'entrada por transferencia de ', aTransferReceive value asString.! !
!Deposit methodsFor: 'value' stamp: 't 11/12/2020 21:21:11'!
handleReport: aReport
	aReport xxxDeposit: self.! !
!TransferReceive methodsFor: 'accessing' stamp: 't 11/12/2020 21:21:38'!
handleReport: aReport
	aReport xxxTransferReceive: self.! !
!TransferSend methodsFor: 'accessing' stamp: 't 11/12/2020 21:21:49'!
handleReport: aReport
	aReport xxxTransferSend: self.! !
!Withdraw methodsFor: 'value' stamp: 't 11/12/2020 21:21:57'!
handleReport: aReport
	aReport xxxWithdraw: self.! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/12/2020 21:22:44' prior: 50878170!
entries
	| summary |	
	
	summary := account transactions collect: [:aTransaction | 
		|anEntry|
		(aTransaction isKindOf: Deposit) ifTrue: [anEntry := 'deposito por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue: [anEntry := 'extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: TransferSend) ifTrue: [anEntry := 'salida por transferencia de ', aTransaction value asString].
		(aTransaction isKindOf: TransferReceive ) ifTrue: [anEntry := 'entrada por transferencia de ' , aTransaction value asString].
	anEntry.].
	summary add: 'balance = ', account balance asString.
	^summary.
	
	
	"lineForAccountSummary" "transferNet"! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/12/2020 21:23:53' prior: 50878331!
entries
	| summary |	
	
	summary := account transactions collect: [:aTransaction | 
		aTransaction handleReport: self].
	summary add: 'balance = ', account balance asString.
	^summary.
	
	
	"lineForAccountSummary" "transferNet"! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnAccountWithoutTransactionsHasBalance0 stamp: 't 11/12/2020 21:24:04'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADepositPrintsCorrectly stamp: 't 11/12/2020 21:24:04'!
FAILURE!

!testRun: #AccountSummaryTest #test03AccountSummaryForAnAccountWithAWithdrawPrintsCorrectly stamp: 't 11/12/2020 21:24:04'!
FAILURE!

!testRun: #AccountSummaryTest #test04AccountSummaryForAnAccountThatSentATransferPrintsCorrectly stamp: 't 11/12/2020 21:24:04'!
FAILURE!

!testRun: #AccountSummaryTest #test05AccountSummaryForAnAccountThatReceivedATransferPrintsCorrectly stamp: 't 11/12/2020 21:24:04'!
FAILURE!

!testRun: #AccountSummaryTest #test06AccountSummaryForAnAccountWithManyTransactionsPrintsCorrectly stamp: 't 11/12/2020 21:24:04'!
FAILURE!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADepositPrintsCorrectly stamp: 't 11/12/2020 21:24:09'!
FAILURE!
!Deposit methodsFor: 'value' stamp: 't 11/12/2020 21:26:17' prior: 50878313!
handleReport: aReport
	^aReport xxxDeposit: self.! !
!TransferReceive methodsFor: 'accessing' stamp: 't 11/12/2020 21:26:23' prior: 50878317!
handleReport: aReport
	^aReport xxxTransferReceive: self.! !
!TransferSend methodsFor: 'accessing' stamp: 't 11/12/2020 21:26:27' prior: 50878322!
handleReport: aReport
	^aReport xxxTransferSend: self.! !
!Withdraw methodsFor: 'value' stamp: 't 11/12/2020 21:26:33' prior: 50878326!
handleReport: aReport
	^aReport xxxWithdraw: self.! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnAccountWithoutTransactionsHasBalance0 stamp: 't 11/12/2020 21:26:35'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADepositPrintsCorrectly stamp: 't 11/12/2020 21:26:35'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAnAccountWithAWithdrawPrintsCorrectly stamp: 't 11/12/2020 21:26:36'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAnAccountThatSentATransferPrintsCorrectly stamp: 't 11/12/2020 21:26:36'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAnAccountThatReceivedATransferPrintsCorrectly stamp: 't 11/12/2020 21:26:36'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAnAccountWithManyTransactionsPrintsCorrectly stamp: 't 11/12/2020 21:26:36'!
PASSED!
!AccountSummary methodsFor: 'accessing' stamp: 't 11/12/2020 21:27:00' prior: 50878355!
entries
	| summary |	
	
	summary := account transactions collect: [:aTransaction |
		aTransaction handleReport: self].
	summary add: 'balance = ', account balance asString.
	^summary.
	
	
	"lineForAccountSummary" "transferNet"! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/12/2020 21:27:27' prior: 50878440!
entries
	| summary |	
	
	summary := account transactions collect: [:aTransaction |
		aTransaction handleReport: self].
	summary add: 'balance = ', account balance asString.
	^summary.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 't 11/12/2020 21:28:20'!
test07AccountSummaryForAPortfolioPrintsCorrectly
	|anAccount anAccountSummary|
	
	anAccount  := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: anAccount.
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	self assert: anAccountSummary entries size = 3.
	self assert: anAccountSummary entries first = 'deposito por 100'.
	self assert: anAccountSummary entries second = 'extraccion por 50'.
	self assert: anAccountSummary entries last = 'balance = 50'.
	
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 't 11/12/2020 21:28:33' prior: 50878459!
test07AccountSummaryForAPortfolioPrintsCorrectly
	|anAccount anAccountSummary aPortfolio|
	
	anAccount  := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: anAccount.
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	self assert: anAccountSummary entries size = 3.
	self assert: anAccountSummary entries first = 'deposito por 100'.
	self assert: anAccountSummary entries second = 'extraccion por 50'.
	self assert: anAccountSummary entries last = 'balance = 50'.
	
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 't 11/12/2020 21:28:54' prior: 50878478!
test07AccountSummaryForAPortfolioPrintsCorrectly
	|anAccount anAccountSummary aPortfolio|
	
	anAccount  := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	anAccountSummary := AccountSummary for: anAccount.
	
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	self assert: anAccountSummary entries size = 3.
	self assert: anAccountSummary entries first = 'deposito por 100'.
	self assert: anAccountSummary entries second = 'extraccion por 50'.
	self assert: anAccountSummary entries last = 'balance = 50'.
	
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 't 11/12/2020 21:29:06' prior: 50878497!
test07AccountSummaryForAPortfolioPrintsCorrectly
	|anAccount anAccountSummary aPortfolio|
	
	anAccount  := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	aPortfolio add: anAccount.
	anAccountSummary := AccountSummary for: anAccount.
	
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	self assert: anAccountSummary entries size = 3.
	self assert: anAccountSummary entries first = 'deposito por 100'.
	self assert: anAccountSummary entries second = 'extraccion por 50'.
	self assert: anAccountSummary entries last = 'balance = 50'.
	
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 't 11/12/2020 21:29:11' prior: 50878517!
test07AccountSummaryForAPortfolioPrintsCorrectly
	|anAccount anAccountSummary aPortfolio|
	
	anAccount  := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	aPortfolio add: anAccount.
	anAccountSummary := AccountSummary for: aPortfolio .
	
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	self assert: anAccountSummary entries size = 3.
	self assert: anAccountSummary entries first = 'deposito por 100'.
	self assert: anAccountSummary entries second = 'extraccion por 50'.
	self assert: anAccountSummary entries last = 'balance = 50'.
	
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 't 11/12/2020 21:29:16' prior: 50878538!
test07AccountSummaryForAPortfolioPrintsCorrectly
	|anAccount anAccountSummary aPortfolio|
	
	anAccount  := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	aPortfolio add: anAccount.
	anAccountSummary := AccountSummary for: aPortfolio.
	
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	self assert: anAccountSummary entries size = 3.
	self assert: anAccountSummary entries first = 'deposito por 100'.
	self assert: anAccountSummary entries second = 'extraccion por 50'.
	self assert: anAccountSummary entries last = 'balance = 50'.
	
	! !

!testRun: #AccountSummaryTest #test07AccountSummaryForAPortfolioPrintsCorrectly stamp: 't 11/12/2020 21:29:18'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryForAnAccountWithoutTransactionsHasBalance0 stamp: 't 11/12/2020 21:29:18'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADepositPrintsCorrectly stamp: 't 11/12/2020 21:29:18'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAnAccountWithAWithdrawPrintsCorrectly stamp: 't 11/12/2020 21:29:18'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAnAccountThatSentATransferPrintsCorrectly stamp: 't 11/12/2020 21:29:18'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAnAccountThatReceivedATransferPrintsCorrectly stamp: 't 11/12/2020 21:29:18'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAnAccountWithManyTransactionsPrintsCorrectly stamp: 't 11/12/2020 21:29:18'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAPortfolioPrintsCorrectly stamp: 't 11/12/2020 21:29:18'!
PASSED!
!AccountSummaryTest methodsFor: 'tests' stamp: 't 11/12/2020 21:29:37' prior: 50878559!
test07AccountSummaryForAPortfolioPrintsCorrectly
	|anAccount anAccountSummary aPortfolio|
	
	anAccount  := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	aPortfolio add: anAccount.
	anAccountSummary := AccountSummary for: aPortfolio.
	
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	self assert: anAccountSummary entries size = 3.
	self assert: anAccountSummary entries first = 'deposito por 100'.
	self assert: anAccountSummary entries second = 'extraccion por 50'.
	self assert: anAccountSummary entries last = 'balance = 50'.! !

TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 't 11/12/2020 21:30:09'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetTest methodsFor: 'nil' stamp: 't 11/12/2020 21:30:13'!
test01! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:30:26'!
test01TransferNet
	! !

!methodRemoval: TransferNetTest #test01 stamp: 't 11/12/2020 21:30:41'!
test01!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:30:46' prior: 50878648!
test01TransferNet
	|| ! !

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 't 11/12/2020 21:32:36'!
Object subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:32:28' prior: 50878655!
test01TransferNet
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet zzz equals: 0.! !

Reports subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 't 11/12/2020 21:32:53'!
Reports subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Reports subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 't 11/12/2020 21:33:11'!
Reports subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Reports
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Reports category: 'Portfolio-Solucion' stamp: 't 11/12/2020 21:33:14'!
Object subclass: #Reports
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #AccountSummaryTest #test01AccountSummaryForAnAccountWithoutTransactionsHasBalance0 stamp: 't 11/12/2020 21:33:18'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADepositPrintsCorrectly stamp: 't 11/12/2020 21:33:18'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAnAccountWithAWithdrawPrintsCorrectly stamp: 't 11/12/2020 21:33:18'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAnAccountThatSentATransferPrintsCorrectly stamp: 't 11/12/2020 21:33:18'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAnAccountThatReceivedATransferPrintsCorrectly stamp: 't 11/12/2020 21:33:18'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAnAccountWithManyTransactionsPrintsCorrectly stamp: 't 11/12/2020 21:33:18'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAPortfolioPrintsCorrectly stamp: 't 11/12/2020 21:33:18'!
PASSED!

Reports subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 't 11/12/2020 21:33:36'!
Reports subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransferNetTest #test01TransferNet stamp: 't 11/12/2020 21:34:02'!
ERROR!
!TransferNet class methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:34:15'!
for: aReceptiveAccount 
	self shouldBeImplemented.! !
!Reports class methodsFor: 'no messages' stamp: 't 11/12/2020 21:34:48'!
for: anAccount 
	^self new initializeFor: anAccount.! !

!methodRemoval: AccountSummary class #for: stamp: 't 11/12/2020 21:34:54'!
for: anAccount 
	^self new initializeFor: anAccount.!

!methodRemoval: TransferNet class #for: stamp: 't 11/12/2020 21:34:59'!
for: aReceptiveAccount 
	self shouldBeImplemented.!
!Reports methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:35:17'!
initializeFor: anAccount 
	account := anAccount.! !

!methodRemoval: AccountSummary #initializeFor: stamp: 't 11/12/2020 21:35:21'!
initializeFor: anAccount 
	account := anAccount.!

!testRun: #TransferNetTest #test01TransferNet stamp: 't 11/12/2020 21:35:44'!
ERROR!

!testRun: #TransferNetTest #test01TransferNet stamp: 't 11/12/2020 21:35:44'!
ERROR!
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:36:03'!
zzz
	self shouldBeImplemented.! !
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:36:07' prior: 50878785!
zzz
	^0.! !

!testRun: #TransferNetTest #test01TransferNet stamp: 't 11/12/2020 21:36:10'!
PASSED!

!testRun: #TransferNetTest #test01TransferNet stamp: 't 11/12/2020 21:36:14'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:36:19'!
test02
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet zzz equals: 0.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:36:38' prior: 50878798!
test02
	|anAccount anotherAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	anotherAccount  := ReceptiveAccount new.
	aTransferNet := TransferNet for: anAccount.
	
	
	
	self assert: aTransferNet zzz equals: 0.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:37:07' prior: 50878807!
test02
	|senderAccount receiverAccount anAccountSummary|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: senderAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'salida por transferencia de 100'.
	self assert: anAccountSummary entries last = 'balance = -100'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:37:16' prior: 50878818!
test02
	|senderAccount receiverAccount anAccountSummary|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: senderAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'salida por transferencia de 100'.
	self assert: anAccountSummary entries last = 'balance = -100'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:37:23' prior: 50878836!
test02
	|senderAccount receiverAccount aTransferNet|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	aTransferNet := AccountSummary for: senderAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: aTransferNet entries size = 2.
	self assert: aTransferNet entries first = 'salida por transferencia de 100'.
	self assert: aTransferNet entries last = 'balance = -100'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:37:33' prior: 50878854!
test02
	|senderAccount receiverAccount aTransferNet|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	aTransferNet := TransferNet for: senderAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: aTransferNet entries size = 2.
	self assert: aTransferNet entries first = 'salida por transferencia de 100'.
	self assert: aTransferNet entries last = 'balance = -100'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:38:16' prior: 50878871!
test02
	|senderAccount receiverAccount aTransferNet|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	aTransferNet := TransferNet for: senderAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: aTransferNet zzz equals: -100.! !

!testRun: #TransferNetTest #test02 stamp: 't 11/12/2020 21:38:19'!
FAILURE!
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:39:00' overrides: 16881508!
value
	^0.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:39:00' prior: 50878667!
test01TransferNet
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:39:01' prior: 50878888!
test02
	|senderAccount receiverAccount aTransferNet|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	aTransferNet := TransferNet for: senderAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: aTransferNet value equals: -100.! !

!methodRemoval: TransferNet #zzz stamp: 't 11/12/2020 21:39:01'!
zzz
	^0.!
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:39:36' prior: 50878903 overrides: 16881508!
value
	account transactions isEmpty ifTrue: [^0].
	^-100.! !

!testRun: #TransferNetTest #test01TransferNet stamp: 't 11/12/2020 21:39:38'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 't 11/12/2020 21:39:38'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:40:13'!
test03
	|senderAccount receiverAccount anAccountSummary|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: receiverAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'entrada por transferencia de 100'.
	self assert: anAccountSummary entries last = 'balance = 100'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:40:41' prior: 50878942!
test03
	|senderAccount receiverAccount aTransferNet|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	aTransferNet := TransferNet for: receiverAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: aTransferNet value equals: 100.! !

!testRun: #TransferNetTest #test03 stamp: 't 11/12/2020 21:40:52'!
FAILURE!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:42:08' prior: 50878907!
test01TransferNet
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:42:40' prior: 50878976!
test01TransferNet
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.! !

!testRun: #TransferNetTest #test01TransferNet stamp: 't 11/12/2020 21:42:42'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 't 11/12/2020 21:42:42'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 't 11/12/2020 21:42:42'!
FAILURE!

!testRun: #TransferNetTest #test03 stamp: 't 11/12/2020 21:42:42'!
FAILURE!
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:43:45' prior: 50878932 overrides: 16881508!
value
	account transactions isEmpty ifTrue: [^0].
	(account transactions first =  account transactions first) ifTrue: [^-100.].
	! !
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:44:35' prior: 50879004 overrides: 16881508!
value
	account transactions isEmpty ifTrue: [^0].
	(account transactions first isKindOf: TransferSend) ifTrue: [^-100.].
	(account transactions first isKindOf: TransferReceive) ifTrue: [^100.].! !

!testRun: #TransferNetTest #test01TransferNet stamp: 't 11/12/2020 21:44:38'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 't 11/12/2020 21:44:38'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 't 11/12/2020 21:44:38'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:45:06' prior: 50878960!
test03
	|senderAccount receiverAccount aTransferNet|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	aTransferNet := TransferNet for: receiverAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	Transfer register: 50 from: senderAccount to: receiverAccount.
	
	self assert: aTransferNet value equals: 150.! !

!testRun: #TransferNetTest #test01TransferNet stamp: 't 11/12/2020 21:45:10'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 't 11/12/2020 21:45:10'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 't 11/12/2020 21:45:10'!
FAILURE!

!testRun: #TransferNetTest #test03 stamp: 't 11/12/2020 21:45:10'!
FAILURE!
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:45:48' prior: 50879012 overrides: 16881508!
value
	account transactions isEmpty ifTrue: [^0].
	(account transactions first isKindOf: TransferSend) ifTrue: [^-100.].
	(account transactions first isKindOf: TransferReceive) ifTrue: [^100.].
	
	account transactions sum: [:aTransaction | ]! !
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:46:29' prior: 50879054 overrides: 16881508!
value
	"account transactions isEmpty ifTrue: [^0].
	(account transactions first isKindOf: TransferSend) ifTrue: [^-100.].
	(account transactions first isKindOf: TransferReceive) ifTrue: [^100.]."
	
	^account transactions sum: [:aTransaction | 
		aTransaction handleReport: self]
	ifEmpty: [0].! !
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:47:05'!
xxxvalue
	"account transactions isEmpty ifTrue: [^0].
	(account transactions first isKindOf: TransferSend) ifTrue: [^-100.].
	(account transactions first isKindOf: TransferReceive) ifTrue: [^100.]."
	
	^account transactions sum: [:aTransaction | 
		aTransaction handleReport: self]
	ifEmpty: [0].! !

!testRun: #TransferNetTest #test01TransferNet stamp: 't 11/12/2020 21:47:05'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 't 11/12/2020 21:47:05'!
FAILURE!

!testRun: #TransferNetTest #test03 stamp: 't 11/12/2020 21:47:05'!
ERROR!
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:47:39' overrides: 50878262!
xxxTransferReceive: aTransferReceive
	"account transactions isEmpty ifTrue: [^0].
	(account transactions first isKindOf: TransferSend) ifTrue: [^-100.].
	(account transactions first isKindOf: TransferReceive) ifTrue: [^100.]."
	
	^account transactions sum: [:aTransaction | 
		aTransaction handleReport: self]
	ifEmpty: [0].! !
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:47:48' prior: 50879097 overrides: 50878262!
xxxTransferReceive: aTransferReceive
	^account transactions sum: [:aTransaction | 
		aTransaction handleReport: self]
	ifEmpty: [0].! !

!methodRemoval: TransferNet #xxxvalue stamp: 't 11/12/2020 21:48:16'!
xxxvalue
	"account transactions isEmpty ifTrue: [^0].
	(account transactions first isKindOf: TransferSend) ifTrue: [^-100.].
	(account transactions first isKindOf: TransferReceive) ifTrue: [^100.]."
	
	^account transactions sum: [:aTransaction | 
		aTransaction handleReport: self]
	ifEmpty: [0].!
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:48:23' prior: 50879111 overrides: 50878262!
xxxTransferReceive: aTransferReceive
	! !
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:48:37' prior: 50879131 overrides: 50878262!
xxxTransferReceive: aTransferReceive
	^ aTransferReceive value.! !
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:49:24' overrides: 50878266!
xxxTransferSend: aTransferSend
	^ aTransferSend value * -1.! !

!testRun: #TransferNetTest #test01TransferNet stamp: 't 11/12/2020 21:49:26'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 't 11/12/2020 21:49:27'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 't 11/12/2020 21:49:27'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 't 11/12/2020 21:49:49'!
PASSED!

!testRun: #TransferNetTest #test01TransferNet stamp: 't 11/12/2020 21:49:49'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 't 11/12/2020 21:49:49'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 't 11/12/2020 21:49:49'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:49:58'!
test04 
	|senderAccount receiverAccount aTransferNet|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	aTransferNet := TransferNet for: receiverAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	Transfer register: 50 from: senderAccount to: receiverAccount.
	
	self assert: aTransferNet value equals: 150.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:50:40' prior: 50879163!
test04
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.! !

!testRun: #TransferNetTest #test04 stamp: 't 11/12/2020 21:50:42'!
FAILURE!
!Reports methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:51:14' prior: 50878250!
xxxDeposit: aDeposit
	self subclassResponsibility.! !
!Reports methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:51:18' prior: 50878262!
xxxTransferReceive: aTransferReceive
	self subclassResponsibility.
	! !
!Reports methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:51:20' prior: 50878266!
xxxTransferSend: aTransferSend
	self subclassResponsibility.
	! !
!Reports methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:51:23' prior: 50878256!
xxxWithdraw: aWithdraw
	self subclassResponsibility.
	! !

!testRun: #TransferNetTest #test01TransferNet stamp: 't 11/12/2020 21:51:37'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 't 11/12/2020 21:51:37'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 't 11/12/2020 21:51:37'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 't 11/12/2020 21:51:37'!
ERROR!

!testRun: #TransferNetTest #test04 stamp: 't 11/12/2020 21:51:37'!
ERROR!
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:52:29' overrides: 50879190!
xxxDeposit: aDeposit
	^ 0.! !

!testRun: #TransferNetTest #test03 stamp: 't 11/12/2020 21:52:37'!
PASSED!

!testRun: #TransferNetTest #test01TransferNet stamp: 't 11/12/2020 21:52:37'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 't 11/12/2020 21:52:37'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 't 11/12/2020 21:52:37'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 't 11/12/2020 21:52:37'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:52:52' prior: 50879178!
test04
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	Withdraw register: 100 on: anAccount.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:52:55'!
test05
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	Withdraw register: 100 on: anAccount.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:50:40' prior: 50879240!
test04
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.! !

!testRun: #TransferNetTest #test04 stamp: 't 11/12/2020 21:53:11'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 't 11/12/2020 21:53:14'!
ERROR!
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:53:27' overrides: 50879206!
xxxWithdraw: aWithdraw
	^ 0.! !

!testRun: #TransferNetTest #test01TransferNet stamp: 't 11/12/2020 21:53:30'!
PASSED!

!testRun: #TransferNetTest #test02 stamp: 't 11/12/2020 21:53:30'!
PASSED!

!testRun: #TransferNetTest #test03 stamp: 't 11/12/2020 21:53:30'!
PASSED!

!testRun: #TransferNetTest #test04 stamp: 't 11/12/2020 21:53:30'!
PASSED!

!testRun: #TransferNetTest #test05 stamp: 't 11/12/2020 21:53:30'!
PASSED!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:54:02'!
test01TransferNetWithNoOperationsIs0
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:54:06'!
test01TransferNetWithNoOperationsIsZero
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.! !

!methodRemoval: TransferNetTest #test01TransferNetWithNoOperationsIs0 stamp: 't 11/12/2020 21:54:08'!
test01TransferNetWithNoOperationsIs0
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.!

!methodRemoval: TransferNetTest #test01TransferNet stamp: 't 11/12/2020 21:54:09'!
test01TransferNet
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:54:45'!
test02TransferNetForSenderWithTransferSubstracts
	|senderAccount receiverAccount aTransferNet|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	aTransferNet := TransferNet for: senderAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: aTransferNet value equals: -100.! !

!methodRemoval: TransferNetTest #test02 stamp: 't 11/12/2020 21:54:48'!
test02
	|senderAccount receiverAccount aTransferNet|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	aTransferNet := TransferNet for: senderAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: aTransferNet value equals: -100.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:55:11'!
test03TransferNetForReceiverWithTransferAdds
	|senderAccount receiverAccount aTransferNet|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	aTransferNet := TransferNet for: receiverAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	Transfer register: 50 from: senderAccount to: receiverAccount.
	
	self assert: aTransferNet value equals: 150.! !

!methodRemoval: TransferNetTest #test03 stamp: 't 11/12/2020 21:55:13'!
test03
	|senderAccount receiverAccount aTransferNet|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	aTransferNet := TransferNet for: receiverAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	Transfer register: 50 from: senderAccount to: receiverAccount.
	
	self assert: aTransferNet value equals: 150.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:56:55'!
test06
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.! !

!methodRemoval: TransferNetTest #test04 stamp: 't 11/12/2020 21:56:55'!
test04
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:57:30'!
test04TransferNetForManyTransfersCalculatesCorrectly
	|senderAccount receiverAccount aTransferNet|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	aTransferNet := TransferNet for: receiverAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	Transfer register: 50 from: senderAccount to: receiverAccount.
	
	self assert: aTransferNet value equals: 150.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:57:53'!
test05TransferNetWithOnlyWithdrawIsZero
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	Withdraw register: 100 on: anAccount.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.! !

!methodRemoval: TransferNetTest #test05 stamp: 't 11/12/2020 21:57:55'!
test05
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	Withdraw register: 100 on: anAccount.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:58:07'!
test06TransferNetWithOnlyDepositIsZero
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.! !

!methodRemoval: TransferNetTest #test06 stamp: 't 11/12/2020 21:58:09'!
test06
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.!
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 22:03:39' prior: 50879065 overrides: 16881508!
value

	^account transactions sum: [:aTransaction | 
		aTransaction handleReport: self]
	ifEmpty: [0].! !
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 22:03:46' prior: 50879454 overrides: 16881508!
value
	^account transactions sum: [:aTransaction | 
		aTransaction handleReport: self]
	ifEmpty: [0].! !

----STARTUP---- (13 November 2020 03:23:02) as C:\Users\Tink\Desktop\FCEN\Inge 1\CUIS\CuisUniversity-4384.image!

!AccountSummary methodsFor: 'accessing' stamp: 't 11/12/2020 20:07:17' prior: 50877473!
entries
	| summary |	
	
	summary := account transactions collect: [:aTransaction | 
		|xxx|
		(aTransaction isKindOf: Deposit) ifTrue: [xxx := 'deposito por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue: [xxx := 'extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: TransferSend) ifTrue: [xxx := 'salida por transferencia de ', aTransaction value asString].
		(aTransaction isKindOf: TransferReceive ) ifTrue: [xxx := 'entrada por transferencia de ' , aTransaction value asString].
	xxx].
	summary add: 'balance = ', account balance asString.
	^summary.
	
	"lineForAccountSummary" "transferNet"! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/12/2020 21:07:08' prior: 50879471!
entries
	| summary |	
	
	summary := account transactions collect: [:aTransaction | 
		|xxx|
		(aTransaction isKindOf: Deposit) ifTrue: [xxx := 'deposito por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue: [xxx := 'extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: TransferSend) ifTrue: [xxx := 'salida por transferencia de ', aTransaction value asString].
		(aTransaction isKindOf: TransferReceive ) ifTrue: [xxx := 'entrada por transferencia de ' , aTransaction value asString].
	xxx].
	summary add: 'balance = ', account balance asString.
	^summary.
	
	"lineForAccountSummary" "transferNet"
	
	
	" Reports
		AccountSummary
		TransferNet	
	"! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/12/2020 21:07:16' prior: 50879495!
entries
	| summary |	
	
	summary := account transactions collect: [:aTransaction | 
		|xxx|
		(aTransaction isKindOf: Deposit) ifTrue: [xxx := 'deposito por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue: [xxx := 'extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: TransferSend) ifTrue: [xxx := 'salida por transferencia de ', aTransaction value asString].
		(aTransaction isKindOf: TransferReceive ) ifTrue: [xxx := 'entrada por transferencia de ' , aTransaction value asString].
	xxx].
	summary add: 'balance = ', account balance asString.
	^summary.
	
	
	"lineForAccountSummary" "transferNet"
	
	
	" Reports
		AccountSummary
		TransferNet	
	"! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/12/2020 21:11:47' prior: 50879520!
entries
	| summary |	
	
	summary := account transactions collect: [:aTransaction | 
		|xxx|
		(aTransaction isKindOf: Deposit) ifTrue: [xxx := 'deposito por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue: [xxx := 'extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: TransferSend) ifTrue: [xxx := 'salida por transferencia de ', aTransaction value asString].
		(aTransaction isKindOf: TransferReceive ) ifTrue: [xxx := 'entrada por transferencia de ' , aTransaction value asString].
	xxx].
	summary add: 'balance = ', account balance asString.
	^summary.
	
	
	"lineForAccountSummary" "transferNet"
	
	
	" Reports
		AccountSummary
		TransferNet	
	"! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/12/2020 21:12:05' prior: 50879545!
entries
	| summary |	
	
	summary := account transactions collect: [:aTransaction | 
		|anEntry|
		(aTransaction isKindOf: Deposit) ifTrue: [anEntry := 'deposito por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue: [anEntry := 'extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: TransferSend) ifTrue: [anEntry := 'salida por transferencia de ', aTransaction value asString].
		(aTransaction isKindOf: TransferReceive ) ifTrue: [anEntry := 'entrada por transferencia de ' , aTransaction value asString].
	anEntry].
	summary add: 'balance = ', account balance asString.
	^summary.
	
	
	"lineForAccountSummary" "transferNet"
	
	
	" Reports
		AccountSummary
		TransferNet	
	"! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/12/2020 21:12:17' prior: 50879570!
entries
	| summary |	
	
	summary := account transactions collect: [:aTransaction | 
		|anEntry|
		(aTransaction isKindOf: Deposit) ifTrue: [anEntry := 'deposito por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue: [anEntry := 'extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: TransferSend) ifTrue: [anEntry := 'salida por transferencia de ', aTransaction value asString].
		(aTransaction isKindOf: TransferReceive ) ifTrue: [anEntry := 'entrada por transferencia de ' , aTransaction value asString].
	anEntry.].
	summary add: 'balance = ', account balance asString.
	^summary.
	
	
	"lineForAccountSummary" "transferNet"
	
	
	" Reports
		AccountSummary
		TransferNet	
	"! !

!classDefinition: #Reports category: 'Portfolio-Solucion' stamp: 't 11/13/2020 03:23:05'!
Object subclass: #Reports
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Reports category: 'Portfolio-Solucion' stamp: 't 11/13/2020 03:23:05'!
Object subclass: #Reports
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 't 11/13/2020 03:23:05'!
Reports subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 't 11/13/2020 03:23:05'!
Reports subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Reports methodsFor: 'nil' stamp: 't 11/12/2020 21:15:22'!
xxxDeposit
	! !
!Reports methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:15:29'!
xxxWithdraw
	
	! !
!Reports methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:15:37'!
xxxDeposit: aDeposit
	! !

!methodRemoval: Reports #xxxDeposit stamp: 't 11/13/2020 03:23:06'!
xxxDeposit
	!
!Reports methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:15:46'!
xxxWithdraw: aWithdraw
	
	! !

!methodRemoval: Reports #xxxWithdraw stamp: 't 11/13/2020 03:23:06'!
xxxWithdraw
	
	!
!Reports methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:16:02'!
xxxTransferReceive: aTransferReceive
	
	! !
!Reports methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:16:07'!
xxxTransferSend: aTransferSend
	
	! !
!AccountSummary methodsFor: 'initialization' stamp: 't 11/12/2020 21:17:17' overrides: 50879656!
xxxDeposit: aDeposit! !
!AccountSummary methodsFor: 'initialization' stamp: 't 11/12/2020 21:17:34' prior: 50879677 overrides: 50879656!
xxxDeposit: aDeposit
	^'deposito por ', aDeposit value asString! !
!AccountSummary methodsFor: 'initialization' stamp: 't 11/12/2020 21:17:36' prior: 50879682 overrides: 50879656!
xxxDeposit: aDeposit
	^'deposito por ', aDeposit value asString.! !
!AccountSummary methodsFor: 'initialization' stamp: 't 11/12/2020 21:17:52' overrides: 50879662!
xxxWithdraw: aWithdraw
	^'deposito por ', aWithdraw value asString.! !
!AccountSummary methodsFor: 'initialization' stamp: 't 11/12/2020 21:18:17' prior: 50879694 overrides: 50879662!
xxxWithdraw: aWithdraw
	^'extraccion por ', aWithdraw value asString.! !
!AccountSummary methodsFor: 'initialization' stamp: 't 11/12/2020 21:18:45' overrides: 50879672!
xxxTransferSend: aTransferSend
	^'salida por transferencia de ', aTransferSend value asString.! !
!AccountSummary methodsFor: 'initialization' stamp: 't 11/12/2020 21:18:56' overrides: 50879668!
xxxTransferReceive: aTransferReceive
	^'entrada por transferencia de ', aTransferReceive value asString.! !
!Deposit methodsFor: 'value' stamp: 't 11/12/2020 21:21:11'!
handleReport: aReport
	aReport xxxDeposit: self.! !
!TransferReceive methodsFor: 'accessing' stamp: 't 11/12/2020 21:21:38'!
handleReport: aReport
	aReport xxxTransferReceive: self.! !
!TransferSend methodsFor: 'accessing' stamp: 't 11/12/2020 21:21:49'!
handleReport: aReport
	aReport xxxTransferSend: self.! !
!Withdraw methodsFor: 'value' stamp: 't 11/12/2020 21:21:57'!
handleReport: aReport
	aReport xxxWithdraw: self.! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/12/2020 21:22:44' prior: 50879596!
entries
	| summary |	
	
	summary := account transactions collect: [:aTransaction | 
		|anEntry|
		(aTransaction isKindOf: Deposit) ifTrue: [anEntry := 'deposito por ', aTransaction value asString].
		(aTransaction isKindOf: Withdraw) ifTrue: [anEntry := 'extraccion por ', aTransaction value asString].
		(aTransaction isKindOf: TransferSend) ifTrue: [anEntry := 'salida por transferencia de ', aTransaction value asString].
		(aTransaction isKindOf: TransferReceive ) ifTrue: [anEntry := 'entrada por transferencia de ' , aTransaction value asString].
	anEntry.].
	summary add: 'balance = ', account balance asString.
	^summary.
	
	
	"lineForAccountSummary" "transferNet"! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/12/2020 21:23:53' prior: 50879737!
entries
	| summary |	
	
	summary := account transactions collect: [:aTransaction | 
		aTransaction handleReport: self].
	summary add: 'balance = ', account balance asString.
	^summary.
	
	
	"lineForAccountSummary" "transferNet"! !
!Deposit methodsFor: 'value' stamp: 't 11/12/2020 21:26:17' prior: 50879719!
handleReport: aReport
	^aReport xxxDeposit: self.! !
!TransferReceive methodsFor: 'accessing' stamp: 't 11/12/2020 21:26:23' prior: 50879723!
handleReport: aReport
	^aReport xxxTransferReceive: self.! !
!TransferSend methodsFor: 'accessing' stamp: 't 11/12/2020 21:26:27' prior: 50879728!
handleReport: aReport
	^aReport xxxTransferSend: self.! !
!Withdraw methodsFor: 'value' stamp: 't 11/12/2020 21:26:33' prior: 50879732!
handleReport: aReport
	^aReport xxxWithdraw: self.! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/12/2020 21:27:00' prior: 50879761!
entries
	| summary |	
	
	summary := account transactions collect: [:aTransaction |
		aTransaction handleReport: self].
	summary add: 'balance = ', account balance asString.
	^summary.
	
	
	"lineForAccountSummary" "transferNet"! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/12/2020 21:27:27' prior: 50879791!
entries
	| summary |	
	
	summary := account transactions collect: [:aTransaction |
		aTransaction handleReport: self].
	summary add: 'balance = ', account balance asString.
	^summary.! !
!AccountSummaryTest methodsFor: 'tests' stamp: 't 11/12/2020 21:28:20'!
test07AccountSummaryForAPortfolioPrintsCorrectly
	|anAccount anAccountSummary|
	
	anAccount  := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: anAccount.
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	self assert: anAccountSummary entries size = 3.
	self assert: anAccountSummary entries first = 'deposito por 100'.
	self assert: anAccountSummary entries second = 'extraccion por 50'.
	self assert: anAccountSummary entries last = 'balance = 50'.
	
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 't 11/12/2020 21:28:33' prior: 50879810!
test07AccountSummaryForAPortfolioPrintsCorrectly
	|anAccount anAccountSummary aPortfolio|
	
	anAccount  := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: anAccount.
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	self assert: anAccountSummary entries size = 3.
	self assert: anAccountSummary entries first = 'deposito por 100'.
	self assert: anAccountSummary entries second = 'extraccion por 50'.
	self assert: anAccountSummary entries last = 'balance = 50'.
	
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 't 11/12/2020 21:28:54' prior: 50879829!
test07AccountSummaryForAPortfolioPrintsCorrectly
	|anAccount anAccountSummary aPortfolio|
	
	anAccount  := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	anAccountSummary := AccountSummary for: anAccount.
	
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	self assert: anAccountSummary entries size = 3.
	self assert: anAccountSummary entries first = 'deposito por 100'.
	self assert: anAccountSummary entries second = 'extraccion por 50'.
	self assert: anAccountSummary entries last = 'balance = 50'.
	
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 't 11/12/2020 21:29:06' prior: 50879848!
test07AccountSummaryForAPortfolioPrintsCorrectly
	|anAccount anAccountSummary aPortfolio|
	
	anAccount  := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	aPortfolio add: anAccount.
	anAccountSummary := AccountSummary for: anAccount.
	
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	self assert: anAccountSummary entries size = 3.
	self assert: anAccountSummary entries first = 'deposito por 100'.
	self assert: anAccountSummary entries second = 'extraccion por 50'.
	self assert: anAccountSummary entries last = 'balance = 50'.
	
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 't 11/12/2020 21:29:11' prior: 50879868!
test07AccountSummaryForAPortfolioPrintsCorrectly
	|anAccount anAccountSummary aPortfolio|
	
	anAccount  := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	aPortfolio add: anAccount.
	anAccountSummary := AccountSummary for: aPortfolio .
	
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	self assert: anAccountSummary entries size = 3.
	self assert: anAccountSummary entries first = 'deposito por 100'.
	self assert: anAccountSummary entries second = 'extraccion por 50'.
	self assert: anAccountSummary entries last = 'balance = 50'.
	
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 't 11/12/2020 21:29:16' prior: 50879889!
test07AccountSummaryForAPortfolioPrintsCorrectly
	|anAccount anAccountSummary aPortfolio|
	
	anAccount  := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	aPortfolio add: anAccount.
	anAccountSummary := AccountSummary for: aPortfolio.
	
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	self assert: anAccountSummary entries size = 3.
	self assert: anAccountSummary entries first = 'deposito por 100'.
	self assert: anAccountSummary entries second = 'extraccion por 50'.
	self assert: anAccountSummary entries last = 'balance = 50'.
	
	! !
!AccountSummaryTest methodsFor: 'tests' stamp: 't 11/12/2020 21:29:37' prior: 50879910!
test07AccountSummaryForAPortfolioPrintsCorrectly
	|anAccount anAccountSummary aPortfolio|
	
	anAccount  := ReceptiveAccount new.
	aPortfolio := Portfolio new.
	aPortfolio add: anAccount.
	anAccountSummary := AccountSummary for: aPortfolio.
	
	
	Deposit register: 100 on: anAccount.
	Withdraw register: 50 on: anAccount.
	
	self assert: anAccountSummary entries size = 3.
	self assert: anAccountSummary entries first = 'deposito por 100'.
	self assert: anAccountSummary entries second = 'extraccion por 50'.
	self assert: anAccountSummary entries last = 'balance = 50'.! !

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 't 11/13/2020 03:23:07'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetTest category: 'Portfolio-Solucion' stamp: 't 11/13/2020 03:23:07'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetTest methodsFor: 'nil' stamp: 't 11/12/2020 21:30:13'!
test01! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:30:26'!
test01TransferNet
	! !

!methodRemoval: TransferNetTest #test01 stamp: 't 11/13/2020 03:23:08'!
test01!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:30:46' prior: 50879970!
test01TransferNet
	|| ! !

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 't 11/13/2020 03:23:08'!
Object subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:32:28' prior: 50879977!
test01TransferNet
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet zzz equals: 0.! !

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 't 11/13/2020 03:23:08'!
Reports subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 't 11/13/2020 03:23:08'!
Reports subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 't 11/13/2020 03:23:08'!
Reports subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 't 11/13/2020 03:23:08'!
Reports subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Reports category: 'Portfolio-Solucion' stamp: 't 11/13/2020 03:23:08'!
Object subclass: #Reports
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Reports category: 'Portfolio-Solucion' stamp: 't 11/13/2020 03:23:08'!
Object subclass: #Reports
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 't 11/13/2020 03:23:08'!
Reports subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 't 11/13/2020 03:23:08'!
Reports subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet class methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:34:15'!
for: aReceptiveAccount 
	self shouldBeImplemented.! !
!Reports class methodsFor: 'no messages' stamp: 't 11/12/2020 21:34:48'!
for: anAccount 
	^self new initializeFor: anAccount.! !

!methodRemoval: AccountSummary class #for: stamp: 't 11/13/2020 03:23:09'!
for: anAccount 
	^self new initializeFor: anAccount.!

!methodRemoval: TransferNet class #for: stamp: 't 11/13/2020 03:23:09'!
for: aReceptiveAccount 
	self shouldBeImplemented.!
!Reports methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:35:17'!
initializeFor: anAccount 
	account := anAccount.! !

!methodRemoval: AccountSummary #initializeFor: stamp: 't 11/13/2020 03:23:09'!
initializeFor: anAccount 
	account := anAccount.!
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:36:03'!
zzz
	self shouldBeImplemented.! !
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:36:07' prior: 50880081!
zzz
	^0.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:36:19'!
test02
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet zzz equals: 0.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:36:38' prior: 50880088!
test02
	|anAccount anotherAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	anotherAccount  := ReceptiveAccount new.
	aTransferNet := TransferNet for: anAccount.
	
	
	
	self assert: aTransferNet zzz equals: 0.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:37:07' prior: 50880097!
test02
	|senderAccount receiverAccount anAccountSummary|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: senderAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'salida por transferencia de 100'.
	self assert: anAccountSummary entries last = 'balance = -100'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:37:16' prior: 50880108!
test02
	|senderAccount receiverAccount anAccountSummary|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: senderAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'salida por transferencia de 100'.
	self assert: anAccountSummary entries last = 'balance = -100'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:37:23' prior: 50880126!
test02
	|senderAccount receiverAccount aTransferNet|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	aTransferNet := AccountSummary for: senderAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: aTransferNet entries size = 2.
	self assert: aTransferNet entries first = 'salida por transferencia de 100'.
	self assert: aTransferNet entries last = 'balance = -100'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:37:33' prior: 50880144!
test02
	|senderAccount receiverAccount aTransferNet|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	aTransferNet := TransferNet for: senderAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: aTransferNet entries size = 2.
	self assert: aTransferNet entries first = 'salida por transferencia de 100'.
	self assert: aTransferNet entries last = 'balance = -100'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:38:16' prior: 50880161!
test02
	|senderAccount receiverAccount aTransferNet|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	aTransferNet := TransferNet for: senderAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: aTransferNet zzz equals: -100.! !
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:39:00' overrides: 16881508!
value
	^0.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:39:00' prior: 50879989!
test01TransferNet
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:39:01' prior: 50880178!
test02
	|senderAccount receiverAccount aTransferNet|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	aTransferNet := TransferNet for: senderAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: aTransferNet value equals: -100.! !

!methodRemoval: TransferNet #zzz stamp: 't 11/13/2020 03:23:09'!
zzz
	^0.!
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:39:36' prior: 50880191 overrides: 16881508!
value
	account transactions isEmpty ifTrue: [^0].
	^-100.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:40:13'!
test03
	|senderAccount receiverAccount anAccountSummary|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	anAccountSummary := AccountSummary for: receiverAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: anAccountSummary entries size = 2.
	self assert: anAccountSummary entries first = 'entrada por transferencia de 100'.
	self assert: anAccountSummary entries last = 'balance = 100'.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:40:41' prior: 50880225!
test03
	|senderAccount receiverAccount aTransferNet|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	aTransferNet := TransferNet for: receiverAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: aTransferNet value equals: 100.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:42:08' prior: 50880195!
test01TransferNet
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:42:40' prior: 50880256!
test01TransferNet
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.! !
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:43:45' prior: 50880220 overrides: 16881508!
value
	account transactions isEmpty ifTrue: [^0].
	(account transactions first =  account transactions first) ifTrue: [^-100.].
	! !
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:44:35' prior: 50880274 overrides: 16881508!
value
	account transactions isEmpty ifTrue: [^0].
	(account transactions first isKindOf: TransferSend) ifTrue: [^-100.].
	(account transactions first isKindOf: TransferReceive) ifTrue: [^100.].! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:45:06' prior: 50880243!
test03
	|senderAccount receiverAccount aTransferNet|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	aTransferNet := TransferNet for: receiverAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	Transfer register: 50 from: senderAccount to: receiverAccount.
	
	self assert: aTransferNet value equals: 150.! !
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:45:48' prior: 50880282 overrides: 16881508!
value
	account transactions isEmpty ifTrue: [^0].
	(account transactions first isKindOf: TransferSend) ifTrue: [^-100.].
	(account transactions first isKindOf: TransferReceive) ifTrue: [^100.].
	
	account transactions sum: [:aTransaction | ]! !
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:46:29' prior: 50880307 overrides: 16881508!
value
	"account transactions isEmpty ifTrue: [^0].
	(account transactions first isKindOf: TransferSend) ifTrue: [^-100.].
	(account transactions first isKindOf: TransferReceive) ifTrue: [^100.]."
	
	^account transactions sum: [:aTransaction | 
		aTransaction handleReport: self]
	ifEmpty: [0].! !
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:47:05'!
xxxvalue
	"account transactions isEmpty ifTrue: [^0].
	(account transactions first isKindOf: TransferSend) ifTrue: [^-100.].
	(account transactions first isKindOf: TransferReceive) ifTrue: [^100.]."
	
	^account transactions sum: [:aTransaction | 
		aTransaction handleReport: self]
	ifEmpty: [0].! !
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:47:39' overrides: 50879668!
xxxTransferReceive: aTransferReceive
	"account transactions isEmpty ifTrue: [^0].
	(account transactions first isKindOf: TransferSend) ifTrue: [^-100.].
	(account transactions first isKindOf: TransferReceive) ifTrue: [^100.]."
	
	^account transactions sum: [:aTransaction | 
		aTransaction handleReport: self]
	ifEmpty: [0].! !
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:47:48' prior: 50880343 overrides: 50879668!
xxxTransferReceive: aTransferReceive
	^account transactions sum: [:aTransaction | 
		aTransaction handleReport: self]
	ifEmpty: [0].! !

!methodRemoval: TransferNet #xxxvalue stamp: 't 11/13/2020 03:23:10'!
xxxvalue
	"account transactions isEmpty ifTrue: [^0].
	(account transactions first isKindOf: TransferSend) ifTrue: [^-100.].
	(account transactions first isKindOf: TransferReceive) ifTrue: [^100.]."
	
	^account transactions sum: [:aTransaction | 
		aTransaction handleReport: self]
	ifEmpty: [0].!
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:48:23' prior: 50880357 overrides: 50879668!
xxxTransferReceive: aTransferReceive
	! !
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:48:37' prior: 50880377 overrides: 50879668!
xxxTransferReceive: aTransferReceive
	^ aTransferReceive value.! !
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:49:24' overrides: 50879672!
xxxTransferSend: aTransferSend
	^ aTransferSend value * -1.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:49:58'!
test04 
	|senderAccount receiverAccount aTransferNet|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	aTransferNet := TransferNet for: receiverAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	Transfer register: 50 from: senderAccount to: receiverAccount.
	
	self assert: aTransferNet value equals: 150.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:50:40' prior: 50880392!
test04
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.! !
!Reports methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:51:14' prior: 50879656!
xxxDeposit: aDeposit
	self subclassResponsibility.! !
!Reports methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:51:18' prior: 50879668!
xxxTransferReceive: aTransferReceive
	self subclassResponsibility.
	! !
!Reports methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:51:20' prior: 50879672!
xxxTransferSend: aTransferSend
	self subclassResponsibility.
	! !
!Reports methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:51:23' prior: 50879662!
xxxWithdraw: aWithdraw
	self subclassResponsibility.
	! !
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:52:29' overrides: 50880417!
xxxDeposit: aDeposit
	^ 0.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:52:52' prior: 50880407!
test04
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	Withdraw register: 100 on: anAccount.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:52:55'!
test05
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	Withdraw register: 100 on: anAccount.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:50:40' prior: 50880443!
test04
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.! !
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 21:53:27' overrides: 50880433!
xxxWithdraw: aWithdraw
	^ 0.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:54:02'!
test01TransferNetWithNoOperationsIs0
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:54:06'!
test01TransferNetWithNoOperationsIsZero
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.! !

!methodRemoval: TransferNetTest #test01TransferNetWithNoOperationsIs0 stamp: 't 11/13/2020 03:23:12'!
test01TransferNetWithNoOperationsIs0
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.!

!methodRemoval: TransferNetTest #test01TransferNet stamp: 't 11/13/2020 03:23:12'!
test01TransferNet
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:54:45'!
test02TransferNetForSenderWithTransferSubstracts
	|senderAccount receiverAccount aTransferNet|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	aTransferNet := TransferNet for: senderAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: aTransferNet value equals: -100.! !

!methodRemoval: TransferNetTest #test02 stamp: 't 11/13/2020 03:23:12'!
test02
	|senderAccount receiverAccount aTransferNet|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	aTransferNet := TransferNet for: senderAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	
	self assert: aTransferNet value equals: -100.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:55:11'!
test03TransferNetForReceiverWithTransferAdds
	|senderAccount receiverAccount aTransferNet|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	aTransferNet := TransferNet for: receiverAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	Transfer register: 50 from: senderAccount to: receiverAccount.
	
	self assert: aTransferNet value equals: 150.! !

!methodRemoval: TransferNetTest #test03 stamp: 't 11/13/2020 03:23:12'!
test03
	|senderAccount receiverAccount aTransferNet|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	aTransferNet := TransferNet for: receiverAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	Transfer register: 50 from: senderAccount to: receiverAccount.
	
	self assert: aTransferNet value equals: 150.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:56:55'!
test06
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.! !

!methodRemoval: TransferNetTest #test04 stamp: 't 11/13/2020 03:23:12'!
test04
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:57:30'!
test04TransferNetForManyTransfersCalculatesCorrectly
	|senderAccount receiverAccount aTransferNet|
	
	senderAccount  := ReceptiveAccount new.
	receiverAccount := ReceptiveAccount new.
	aTransferNet := TransferNet for: receiverAccount.
	
	Transfer register: 100 from: senderAccount to: receiverAccount.
	Transfer register: 50 from: senderAccount to: receiverAccount.
	
	self assert: aTransferNet value equals: 150.! !
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:57:53'!
test05TransferNetWithOnlyWithdrawIsZero
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	Withdraw register: 100 on: anAccount.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.! !

!methodRemoval: TransferNetTest #test05 stamp: 't 11/13/2020 03:23:12'!
test05
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	Withdraw register: 100 on: anAccount.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.!
!TransferNetTest methodsFor: 'as yet unclassified' stamp: 't 11/12/2020 21:58:07'!
test06TransferNetWithOnlyDepositIsZero
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.! !

!methodRemoval: TransferNetTest #test06 stamp: 't 11/13/2020 03:23:12'!
test06
	|anAccount aTransferNet|
	
	anAccount  := ReceptiveAccount new.
	Deposit register: 100 on: anAccount.
	aTransferNet := TransferNet for: anAccount.
	
	self assert: aTransferNet value equals: 0.!
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 22:03:39' prior: 50880318 overrides: 16881508!
value

	^account transactions sum: [:aTransaction | 
		aTransaction handleReport: self]
	ifEmpty: [0].! !
!TransferNet methodsFor: 'operations' stamp: 't 11/12/2020 22:03:46' prior: 50880641 overrides: 16881508!
value
	^account transactions sum: [:aTransaction | 
		aTransaction handleReport: self]
	ifEmpty: [0].! !

!testRun: #AccountSummaryTest #test01AccountSummaryForAnAccountWithoutTransactionsHasBalance0 stamp: 't 11/13/2020 03:26:24'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADepositPrintsCorrectly stamp: 't 11/13/2020 03:26:24'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAnAccountWithAWithdrawPrintsCorrectly stamp: 't 11/13/2020 03:26:24'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAnAccountThatSentATransferPrintsCorrectly stamp: 't 11/13/2020 03:26:24'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAnAccountThatReceivedATransferPrintsCorrectly stamp: 't 11/13/2020 03:26:24'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAnAccountWithManyTransactionsPrintsCorrectly stamp: 't 11/13/2020 03:26:24'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAPortfolioPrintsCorrectly stamp: 't 11/13/2020 03:26:24'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAnAccountWithManyTransactionsPrintsCorrectly stamp: 't 11/13/2020 03:26:27'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryForAnAccountWithoutTransactionsHasBalance0 stamp: 't 11/13/2020 03:26:27'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADepositPrintsCorrectly stamp: 't 11/13/2020 03:26:28'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAnAccountWithAWithdrawPrintsCorrectly stamp: 't 11/13/2020 03:26:28'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAnAccountThatSentATransferPrintsCorrectly stamp: 't 11/13/2020 03:26:28'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAnAccountThatReceivedATransferPrintsCorrectly stamp: 't 11/13/2020 03:26:28'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAnAccountWithManyTransactionsPrintsCorrectly stamp: 't 11/13/2020 03:26:28'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAPortfolioPrintsCorrectly stamp: 't 11/13/2020 03:26:28'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetWithOnlyDepositIsZero stamp: 't 11/13/2020 03:26:33'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithNoOperationsIsZero stamp: 't 11/13/2020 03:26:33'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForSenderWithTransferSubstracts stamp: 't 11/13/2020 03:26:34'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForReceiverWithTransferAdds stamp: 't 11/13/2020 03:26:34'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForManyTransfersCalculatesCorrectly stamp: 't 11/13/2020 03:26:34'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetWithOnlyWithdrawIsZero stamp: 't 11/13/2020 03:26:34'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetWithOnlyDepositIsZero stamp: 't 11/13/2020 03:26:34'!
PASSED!

----SNAPSHOT----(13 November 2020 03:28:07) CuisUniversity-4384.image priorSource: 17484401!

!testRun: #TransferNetTest #test01TransferNetWithNoOperationsIsZero stamp: 't 11/13/2020 03:29:40'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForSenderWithTransferSubstracts stamp: 't 11/13/2020 03:29:41'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForReceiverWithTransferAdds stamp: 't 11/13/2020 03:29:42'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForManyTransfersCalculatesCorrectly stamp: 't 11/13/2020 03:29:42'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetWithOnlyWithdrawIsZero stamp: 't 11/13/2020 03:29:42'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetWithOnlyDepositIsZero stamp: 't 11/13/2020 03:29:42'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADepositPrintsCorrectly stamp: 't 11/13/2020 03:29:55'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryForAnAccountWithoutTransactionsHasBalance0 stamp: 't 11/13/2020 03:29:55'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADepositPrintsCorrectly stamp: 't 11/13/2020 03:29:55'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAnAccountWithAWithdrawPrintsCorrectly stamp: 't 11/13/2020 03:29:55'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAnAccountThatSentATransferPrintsCorrectly stamp: 't 11/13/2020 03:29:55'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAnAccountThatReceivedATransferPrintsCorrectly stamp: 't 11/13/2020 03:29:55'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAnAccountWithManyTransactionsPrintsCorrectly stamp: 't 11/13/2020 03:29:55'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAPortfolioPrintsCorrectly stamp: 't 11/13/2020 03:29:55'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 't 11/13/2020 03:29:55'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 't 11/13/2020 03:29:55'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 't 11/13/2020 03:29:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 't 11/13/2020 03:29:56'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 't 11/13/2020 03:29:56'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 't 11/13/2020 03:29:56'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 't 11/13/2020 03:29:56'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 't 11/13/2020 03:29:56'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 't 11/13/2020 03:29:56'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 't 11/13/2020 03:29:56'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 't 11/13/2020 03:29:56'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 't 11/13/2020 03:29:56'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 't 11/13/2020 03:29:56'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 't 11/13/2020 03:29:56'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 't 11/13/2020 03:29:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 't 11/13/2020 03:29:56'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADepositPrintsCorrectly stamp: 't 11/13/2020 03:29:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 't 11/13/2020 03:29:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 't 11/13/2020 03:29:56'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryForAnAccountWithoutTransactionsHasBalance0 stamp: 't 11/13/2020 03:29:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 't 11/13/2020 03:29:56'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADepositPrintsCorrectly stamp: 't 11/13/2020 03:29:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 't 11/13/2020 03:29:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 't 11/13/2020 03:29:56'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAnAccountWithAWithdrawPrintsCorrectly stamp: 't 11/13/2020 03:29:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 't 11/13/2020 03:29:56'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAnAccountThatSentATransferPrintsCorrectly stamp: 't 11/13/2020 03:29:57'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithNoOperationsIsZero stamp: 't 11/13/2020 03:29:57'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAnAccountThatReceivedATransferPrintsCorrectly stamp: 't 11/13/2020 03:29:57'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForSenderWithTransferSubstracts stamp: 't 11/13/2020 03:29:57'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAnAccountWithManyTransactionsPrintsCorrectly stamp: 't 11/13/2020 03:29:57'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForReceiverWithTransferAdds stamp: 't 11/13/2020 03:29:57'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAPortfolioPrintsCorrectly stamp: 't 11/13/2020 03:29:57'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForManyTransfersCalculatesCorrectly stamp: 't 11/13/2020 03:29:57'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 't 11/13/2020 03:29:57'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetWithOnlyWithdrawIsZero stamp: 't 11/13/2020 03:29:57'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 't 11/13/2020 03:29:57'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetWithOnlyDepositIsZero stamp: 't 11/13/2020 03:29:57'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 't 11/13/2020 03:29:57'!
PASSED!

!testRun: #TransferTest #test01TransferModifiesSenderAndReceiverAccountBalanceCorrectly stamp: 't 11/13/2020 03:29:57'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 't 11/13/2020 03:29:57'!
PASSED!

!testRun: #TransferTest #test02TransferReceiverCanAccessToSendPart stamp: 't 11/13/2020 03:29:57'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 't 11/13/2020 03:29:57'!
PASSED!

!testRun: #TransferTest #test03TransferSenderCanAccessToReceivePart stamp: 't 11/13/2020 03:29:57'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 't 11/13/2020 03:29:57'!
PASSED!

!testRun: #TransferTest #test04TransferIsRegisteredOnSenderAndReceiverAccount stamp: 't 11/13/2020 03:29:58'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 't 11/13/2020 03:29:58'!
PASSED!

!testRun: #TransferTest #test05TransferCanNotHaveAnAccountAsSenderAndReceiverAtTheSameTime stamp: 't 11/13/2020 03:29:58'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 't 11/13/2020 03:29:58'!
PASSED!

!testRun: #TransferTest #test06TransferCanNotHaveZeroAsValue stamp: 't 11/13/2020 03:29:58'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 't 11/13/2020 03:29:58'!
PASSED!

!testRun: #TransferTest #test07TransferCanNotHaveNegativeValue stamp: 't 11/13/2020 03:29:58'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 't 11/13/2020 03:29:58'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 't 11/13/2020 03:29:58'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 't 11/13/2020 03:29:58'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 't 11/13/2020 03:29:58'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 't 11/13/2020 03:29:58'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 't 11/13/2020 03:29:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 't 11/13/2020 03:29:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 't 11/13/2020 03:29:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 't 11/13/2020 03:29:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 't 11/13/2020 03:29:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 't 11/13/2020 03:29:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 't 11/13/2020 03:29:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 't 11/13/2020 03:29:58'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithNoOperationsIsZero stamp: 't 11/13/2020 03:29:58'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForSenderWithTransferSubstracts stamp: 't 11/13/2020 03:29:59'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForReceiverWithTransferAdds stamp: 't 11/13/2020 03:29:59'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForManyTransfersCalculatesCorrectly stamp: 't 11/13/2020 03:29:59'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetWithOnlyWithdrawIsZero stamp: 't 11/13/2020 03:29:59'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetWithOnlyDepositIsZero stamp: 't 11/13/2020 03:29:59'!
PASSED!

!testRun: #TransferTest #test01TransferModifiesSenderAndReceiverAccountBalanceCorrectly stamp: 't 11/13/2020 03:29:59'!
PASSED!

!testRun: #TransferTest #test02TransferReceiverCanAccessToSendPart stamp: 't 11/13/2020 03:29:59'!
PASSED!

!testRun: #TransferTest #test03TransferSenderCanAccessToReceivePart stamp: 't 11/13/2020 03:29:59'!
PASSED!

!testRun: #TransferTest #test04TransferIsRegisteredOnSenderAndReceiverAccount stamp: 't 11/13/2020 03:29:59'!
PASSED!

!testRun: #TransferTest #test05TransferCanNotHaveAnAccountAsSenderAndReceiverAtTheSameTime stamp: 't 11/13/2020 03:29:59'!
PASSED!

!testRun: #TransferTest #test06TransferCanNotHaveZeroAsValue stamp: 't 11/13/2020 03:29:59'!
PASSED!

!testRun: #TransferTest #test07TransferCanNotHaveNegativeValue stamp: 't 11/13/2020 03:29:59'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADepositPrintsCorrectly stamp: 't 11/13/2020 03:30:02'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryForAnAccountWithoutTransactionsHasBalance0 stamp: 't 11/13/2020 03:30:02'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADepositPrintsCorrectly stamp: 't 11/13/2020 03:30:02'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAnAccountWithAWithdrawPrintsCorrectly stamp: 't 11/13/2020 03:30:02'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAnAccountThatSentATransferPrintsCorrectly stamp: 't 11/13/2020 03:30:02'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAnAccountThatReceivedATransferPrintsCorrectly stamp: 't 11/13/2020 03:30:02'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAnAccountWithManyTransactionsPrintsCorrectly stamp: 't 11/13/2020 03:30:02'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAPortfolioPrintsCorrectly stamp: 't 11/13/2020 03:30:03'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 't 11/13/2020 03:30:03'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 't 11/13/2020 03:30:03'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 't 11/13/2020 03:30:03'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 't 11/13/2020 03:30:03'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 't 11/13/2020 03:30:03'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 't 11/13/2020 03:30:03'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 't 11/13/2020 03:30:03'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 't 11/13/2020 03:30:03'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 't 11/13/2020 03:30:03'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 't 11/13/2020 03:30:03'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 't 11/13/2020 03:30:03'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 't 11/13/2020 03:30:03'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 't 11/13/2020 03:30:03'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 't 11/13/2020 03:30:03'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 't 11/13/2020 03:30:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 't 11/13/2020 03:30:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 't 11/13/2020 03:30:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 't 11/13/2020 03:30:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 't 11/13/2020 03:30:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 't 11/13/2020 03:30:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 't 11/13/2020 03:30:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 't 11/13/2020 03:30:04'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithNoOperationsIsZero stamp: 't 11/13/2020 03:30:04'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForSenderWithTransferSubstracts stamp: 't 11/13/2020 03:30:04'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForReceiverWithTransferAdds stamp: 't 11/13/2020 03:30:04'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForManyTransfersCalculatesCorrectly stamp: 't 11/13/2020 03:30:04'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetWithOnlyWithdrawIsZero stamp: 't 11/13/2020 03:30:04'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetWithOnlyDepositIsZero stamp: 't 11/13/2020 03:30:04'!
PASSED!

!testRun: #TransferTest #test01TransferModifiesSenderAndReceiverAccountBalanceCorrectly stamp: 't 11/13/2020 03:30:04'!
PASSED!

!testRun: #TransferTest #test02TransferReceiverCanAccessToSendPart stamp: 't 11/13/2020 03:30:04'!
PASSED!

!testRun: #TransferTest #test03TransferSenderCanAccessToReceivePart stamp: 't 11/13/2020 03:30:04'!
PASSED!

!testRun: #TransferTest #test04TransferIsRegisteredOnSenderAndReceiverAccount stamp: 't 11/13/2020 03:30:04'!
PASSED!

!testRun: #TransferTest #test05TransferCanNotHaveAnAccountAsSenderAndReceiverAtTheSameTime stamp: 't 11/13/2020 03:30:04'!
PASSED!

!testRun: #TransferTest #test06TransferCanNotHaveZeroAsValue stamp: 't 11/13/2020 03:30:04'!
PASSED!

!testRun: #TransferTest #test07TransferCanNotHaveNegativeValue stamp: 't 11/13/2020 03:30:04'!
PASSED!

----QUIT----(13 November 2020 03:31:14) CuisUniversity-4384.image priorSource: 17570910!

----STARTUP---- (13 November 2020 03:31:21) as C:\Users\Tink\Desktop\FCEN\Inge 1\CUIS\CuisUniversity-4384.image!


----QUIT----(13 November 2020 03:31:28) CuisUniversity-4384.image priorSource: 17587350!

----STARTUP---- (13 November 2020 03:32:12) as C:\Users\Tink\Desktop\FCEN\Inge 1\CUIS\CuisUniversity-4384.image!


----QUIT----(13 November 2020 03:33:52) CuisUniversity-4384.image priorSource: 17587555!

----STARTUP---- (13 November 2020 04:39:25) as C:\Users\Tink\Desktop\FCEN\Inge 1\CUIS\CuisUniversity-4384.image!


----QUIT----(13 November 2020 04:41:22) CuisUniversity-4384.image priorSource: 17587760!

----STARTUP---- (13 November 2020 04:41:31) as C:\Users\Tink\Desktop\FCEN\Inge 1\CUIS\CuisUniversity-4384.image!


----QUIT----(13 November 2020 04:42:31) CuisUniversity-4384.image priorSource: 17587965!

----STARTUP---- (15 November 2020 19:04:21) as C:\Users\Tink\Desktop\FCEN\Inge 1\CUIS\CuisUniversity-4384.image!


!testRun: #TransferNetTest #test03TransferNetForReceiverWithTransferAdds stamp: 't 11/15/2020 19:05:37'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryForAnAccountWithoutTransactionsHasBalance0 stamp: 't 11/15/2020 19:05:37'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADepositPrintsCorrectly stamp: 't 11/15/2020 19:05:37'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAnAccountWithAWithdrawPrintsCorrectly stamp: 't 11/15/2020 19:05:38'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAnAccountThatSentATransferPrintsCorrectly stamp: 't 11/15/2020 19:05:38'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAnAccountThatReceivedATransferPrintsCorrectly stamp: 't 11/15/2020 19:05:38'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAnAccountWithManyTransactionsPrintsCorrectly stamp: 't 11/15/2020 19:05:38'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAPortfolioPrintsCorrectly stamp: 't 11/15/2020 19:05:38'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 't 11/15/2020 19:05:38'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 't 11/15/2020 19:05:38'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 't 11/15/2020 19:05:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 't 11/15/2020 19:05:38'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 't 11/15/2020 19:05:38'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 't 11/15/2020 19:05:38'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 't 11/15/2020 19:05:38'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 't 11/15/2020 19:05:38'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 't 11/15/2020 19:05:38'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 't 11/15/2020 19:05:38'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 't 11/15/2020 19:05:38'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 't 11/15/2020 19:05:38'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 't 11/15/2020 19:05:38'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 't 11/15/2020 19:05:38'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 't 11/15/2020 19:05:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 't 11/15/2020 19:05:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 't 11/15/2020 19:05:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 't 11/15/2020 19:05:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 't 11/15/2020 19:05:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 't 11/15/2020 19:05:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 't 11/15/2020 19:05:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 't 11/15/2020 19:05:39'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithNoOperationsIsZero stamp: 't 11/15/2020 19:05:39'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForSenderWithTransferSubstracts stamp: 't 11/15/2020 19:05:39'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForReceiverWithTransferAdds stamp: 't 11/15/2020 19:05:39'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForManyTransfersCalculatesCorrectly stamp: 't 11/15/2020 19:05:39'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetWithOnlyWithdrawIsZero stamp: 't 11/15/2020 19:05:39'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetWithOnlyDepositIsZero stamp: 't 11/15/2020 19:05:39'!
PASSED!

!testRun: #TransferTest #test01TransferModifiesSenderAndReceiverAccountBalanceCorrectly stamp: 't 11/15/2020 19:05:39'!
PASSED!

!testRun: #TransferTest #test02TransferReceiverCanAccessToSendPart stamp: 't 11/15/2020 19:05:39'!
PASSED!

!testRun: #TransferTest #test03TransferSenderCanAccessToReceivePart stamp: 't 11/15/2020 19:05:39'!
PASSED!

!testRun: #TransferTest #test04TransferIsRegisteredOnSenderAndReceiverAccount stamp: 't 11/15/2020 19:05:39'!
PASSED!

!testRun: #TransferTest #test05TransferCanNotHaveAnAccountAsSenderAndReceiverAtTheSameTime stamp: 't 11/15/2020 19:05:39'!
PASSED!

!testRun: #TransferTest #test06TransferCanNotHaveZeroAsValue stamp: 't 11/15/2020 19:05:39'!
PASSED!

!testRun: #TransferTest #test07TransferCanNotHaveNegativeValue stamp: 't 11/15/2020 19:05:39'!
PASSED!
!AccountSummary methodsFor: 'operations' stamp: 't 11/15/2020 19:06:40'!
reportForDeposit: aDeposit
	^'deposito por ', aDeposit value asString.! !
!Reports methodsFor: 'operations' stamp: 't 11/15/2020 19:06:40'!
reportForDeposit: aDeposit
	self subclassResponsibility.! !
!TransferNet methodsFor: 'operations' stamp: 't 11/15/2020 19:06:40' overrides: 50881455!
reportForDeposit: aDeposit
	^ 0.! !
!Deposit methodsFor: 'as yet unclassified' stamp: 't 11/15/2020 19:06:40' prior: 50879771!
handleReport: aReport
	^aReport reportForDeposit: self.! !

!methodRemoval: AccountSummary #xxxDeposit: stamp: 't 11/15/2020 19:06:40'!
xxxDeposit: aDeposit
	^'deposito por ', aDeposit value asString.!

!methodRemoval: Reports #xxxDeposit: stamp: 't 11/15/2020 19:06:40'!
xxxDeposit: aDeposit
	self subclassResponsibility.!

!methodRemoval: TransferNet #xxxDeposit: stamp: 't 11/15/2020 19:06:40'!
xxxDeposit: aDeposit
	^ 0.!
!TransferNet methodsFor: 'operations' stamp: 't 11/15/2020 19:06:51'!
reportForTransferReceive: aTransferReceive
	^ aTransferReceive value.! !
!Reports methodsFor: 'operations' stamp: 't 11/15/2020 19:06:51'!
reportForTransferReceive: aTransferReceive
	self subclassResponsibility.
	! !
!AccountSummary methodsFor: 'operations' stamp: 't 11/15/2020 19:06:51' overrides: 50881485!
reportForTransferReceive: aTransferReceive
	^'entrada por transferencia de ', aTransferReceive value asString.! !
!TransferReceive methodsFor: 'as yet unclassified' stamp: 't 11/15/2020 19:06:51' prior: 50879776!
handleReport: aReport
	^aReport reportForTransferReceive: self.! !

!methodRemoval: TransferNet #xxxTransferReceive: stamp: 't 11/15/2020 19:06:51'!
xxxTransferReceive: aTransferReceive
	^ aTransferReceive value.!

!methodRemoval: Reports #xxxTransferReceive: stamp: 't 11/15/2020 19:06:51'!
xxxTransferReceive: aTransferReceive
	self subclassResponsibility.
	!

!methodRemoval: AccountSummary #xxxTransferReceive: stamp: 't 11/15/2020 19:06:51'!
xxxTransferReceive: aTransferReceive
	^'entrada por transferencia de ', aTransferReceive value asString.!
!Reports methodsFor: 'operations' stamp: 't 11/15/2020 19:06:58'!
reportForTransferSend: aTransferSend
	self subclassResponsibility.
	! !
!AccountSummary methodsFor: 'operations' stamp: 't 11/15/2020 19:06:58' overrides: 50881518!
reportForTransferSend: aTransferSend
	^'salida por transferencia de ', aTransferSend value asString.! !
!TransferNet methodsFor: 'operations' stamp: 't 11/15/2020 19:06:58' overrides: 50881518!
reportForTransferSend: aTransferSend
	^ aTransferSend value * -1.! !
!TransferSend methodsFor: 'as yet unclassified' stamp: 't 11/15/2020 19:06:58' prior: 50879781!
handleReport: aReport
	^aReport reportForTransferSend: self.! !

!methodRemoval: Reports #xxxTransferSend: stamp: 't 11/15/2020 19:06:58'!
xxxTransferSend: aTransferSend
	self subclassResponsibility.
	!

!methodRemoval: AccountSummary #xxxTransferSend: stamp: 't 11/15/2020 19:06:58'!
xxxTransferSend: aTransferSend
	^'salida por transferencia de ', aTransferSend value asString.!

!methodRemoval: TransferNet #xxxTransferSend: stamp: 't 11/15/2020 19:06:58'!
xxxTransferSend: aTransferSend
	^ aTransferSend value * -1.!
!Reports methodsFor: 'operations' stamp: 't 11/15/2020 19:07:06'!
reportForWithdraw: aWithdraw
	self subclassResponsibility.
	! !
!AccountSummary methodsFor: 'operations' stamp: 't 11/15/2020 19:07:06' overrides: 50881556!
reportForWithdraw: aWithdraw
	^'extraccion por ', aWithdraw value asString.! !
!TransferNet methodsFor: 'operations' stamp: 't 11/15/2020 19:07:06' overrides: 50881556!
reportForWithdraw: aWithdraw
	^ 0.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 't 11/15/2020 19:07:06' prior: 50879786!
handleReport: aReport
	^aReport reportForWithdraw: self.! !

!methodRemoval: Reports #xxxWithdraw: stamp: 't 11/15/2020 19:07:06'!
xxxWithdraw: aWithdraw
	self subclassResponsibility.
	!

!methodRemoval: AccountSummary #xxxWithdraw: stamp: 't 11/15/2020 19:07:06'!
xxxWithdraw: aWithdraw
	^'extraccion por ', aWithdraw value asString.!

!methodRemoval: TransferNet #xxxWithdraw: stamp: 't 11/15/2020 19:07:06'!
xxxWithdraw: aWithdraw
	^ 0.!

!testRun: #TransferNetTest #test02TransferNetForSenderWithTransferSubstracts stamp: 't 11/15/2020 19:07:11'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryForAnAccountWithoutTransactionsHasBalance0 stamp: 't 11/15/2020 19:07:11'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADepositPrintsCorrectly stamp: 't 11/15/2020 19:07:11'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAnAccountWithAWithdrawPrintsCorrectly stamp: 't 11/15/2020 19:07:11'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAnAccountThatSentATransferPrintsCorrectly stamp: 't 11/15/2020 19:07:11'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAnAccountThatReceivedATransferPrintsCorrectly stamp: 't 11/15/2020 19:07:11'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAnAccountWithManyTransactionsPrintsCorrectly stamp: 't 11/15/2020 19:07:11'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAPortfolioPrintsCorrectly stamp: 't 11/15/2020 19:07:11'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 't 11/15/2020 19:07:11'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 't 11/15/2020 19:07:11'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 't 11/15/2020 19:07:11'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 't 11/15/2020 19:07:11'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 't 11/15/2020 19:07:11'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 't 11/15/2020 19:07:11'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 't 11/15/2020 19:07:12'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 't 11/15/2020 19:07:12'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 't 11/15/2020 19:07:12'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 't 11/15/2020 19:07:12'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 't 11/15/2020 19:07:12'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 't 11/15/2020 19:07:12'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 't 11/15/2020 19:07:12'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 't 11/15/2020 19:07:12'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 't 11/15/2020 19:07:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 't 11/15/2020 19:07:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 't 11/15/2020 19:07:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 't 11/15/2020 19:07:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 't 11/15/2020 19:07:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 't 11/15/2020 19:07:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 't 11/15/2020 19:07:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 't 11/15/2020 19:07:12'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithNoOperationsIsZero stamp: 't 11/15/2020 19:07:12'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForSenderWithTransferSubstracts stamp: 't 11/15/2020 19:07:12'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForReceiverWithTransferAdds stamp: 't 11/15/2020 19:07:12'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForManyTransfersCalculatesCorrectly stamp: 't 11/15/2020 19:07:12'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetWithOnlyWithdrawIsZero stamp: 't 11/15/2020 19:07:12'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetWithOnlyDepositIsZero stamp: 't 11/15/2020 19:07:12'!
PASSED!

!testRun: #TransferTest #test01TransferModifiesSenderAndReceiverAccountBalanceCorrectly stamp: 't 11/15/2020 19:07:13'!
PASSED!

!testRun: #TransferTest #test02TransferReceiverCanAccessToSendPart stamp: 't 11/15/2020 19:07:13'!
PASSED!

!testRun: #TransferTest #test03TransferSenderCanAccessToReceivePart stamp: 't 11/15/2020 19:07:13'!
PASSED!

!testRun: #TransferTest #test04TransferIsRegisteredOnSenderAndReceiverAccount stamp: 't 11/15/2020 19:07:13'!
PASSED!

!testRun: #TransferTest #test05TransferCanNotHaveAnAccountAsSenderAndReceiverAtTheSameTime stamp: 't 11/15/2020 19:07:13'!
PASSED!

!testRun: #TransferTest #test06TransferCanNotHaveZeroAsValue stamp: 't 11/15/2020 19:07:13'!
PASSED!

!testRun: #TransferTest #test07TransferCanNotHaveNegativeValue stamp: 't 11/15/2020 19:07:13'!
PASSED!
!TransferNet methodsFor: 'operations' stamp: 't 11/15/2020 19:09:21' prior: 50880648 overrides: 16881508!
value
	^account makeReportFor: self.
	"^account transactions sum: [:aTransaction | 
		aTransaction handleReport: self]
	ifEmpty: [0]."! !
!Portfolio methodsFor: 'accounts management' stamp: 't 11/15/2020 19:10:22'!
makeReportFor: aReport

	^self transactions do: [:aTransaction | 
		aTransaction handleReport: self]. 
	! !
!Portfolio methodsFor: 'accounts management' stamp: 't 11/15/2020 19:11:36' prior: 50881759!
makeReportFor: aReport
	accounts do: [:anAccount | anAccount makeReportFor: aReport].
	! !
!ReceptiveAccount methodsFor: 'testing' stamp: 't 11/15/2020 19:12:23'!
makeReportFor: aReport
	transactions do: [:aTransaction | 
		aTransaction handleReport: self].! !
!TransferNet methodsFor: 'operations' stamp: 't 11/15/2020 19:12:56' prior: 50881752 overrides: 16881508!
value
	^account makeReportFor: self.! !

Reports subclass: #TransferNet
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 't 11/15/2020 19:13:07'!
Reports subclass: #TransferNet
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'operations' stamp: 't 11/15/2020 19:13:21' prior: 50881779 overrides: 16881508!
value
	value := 0.
	^account makeReportFor: self.! !
!TransferNet methodsFor: 'operations' stamp: 't 11/15/2020 19:13:30' prior: 50881796 overrides: 16881508!
value
	value := 0.
	account makeReportFor: self.
	^value.! !
!TransferNet methodsFor: 'operations' stamp: 't 11/15/2020 19:13:43' prior: 50881460 overrides: 50881455!
reportForDeposit: aDeposit
	^ 0.! !
!TransferNet methodsFor: 'operations' stamp: 't 11/15/2020 19:13:45' prior: 50881807 overrides: 50881455!
reportForDeposit: aDeposit
! !
!TransferNet methodsFor: 'operations' stamp: 't 11/15/2020 19:14:04' prior: 50881480 overrides: 50881485!
reportForTransferReceive: aTransferReceive
	value:= value + aTransferReceive value.! !
!TransferNet methodsFor: 'operations' stamp: 't 11/15/2020 19:14:41' prior: 50881531 overrides: 50881518!
reportForTransferSend: aTransferSend
	value:= value - aTransferSend value.! !
!TransferNet methodsFor: 'operations' stamp: 't 11/15/2020 19:14:43' prior: 50881824 overrides: 50881518!
reportForTransferSend: aTransferSend
	value := value - aTransferSend value.! !
!TransferNet methodsFor: 'operations' stamp: 't 11/15/2020 19:14:46' prior: 50881567 overrides: 50881556!
reportForWithdraw: aWithdraw! !

!testRun: #TransferNetTest #test01TransferNetWithNoOperationsIsZero stamp: 't 11/15/2020 19:14:55'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForSenderWithTransferSubstracts stamp: 't 11/15/2020 19:14:55'!
ERROR!

!testRun: #TransferNetTest #test03TransferNetForReceiverWithTransferAdds stamp: 't 11/15/2020 19:14:55'!
ERROR!

!testRun: #TransferNetTest #test04TransferNetForManyTransfersCalculatesCorrectly stamp: 't 11/15/2020 19:14:55'!
ERROR!

!testRun: #TransferNetTest #test05TransferNetWithOnlyWithdrawIsZero stamp: 't 11/15/2020 19:14:55'!
ERROR!

!testRun: #TransferNetTest #test06TransferNetWithOnlyDepositIsZero stamp: 't 11/15/2020 19:14:55'!
ERROR!

!testRun: #TransferNetTest #test02TransferNetForSenderWithTransferSubstracts stamp: 't 11/15/2020 19:15:02'!
ERROR!

self!
!ReceptiveAccount methodsFor: 'testing' stamp: 't 11/15/2020 19:16:07' prior: 50881772!
makeReportFor: aReport
	transactions do: [:aTransaction | 
		aTransaction handleReport: aReport].! !

!testRun: #TransferNetTest #test01TransferNetWithNoOperationsIsZero stamp: 't 11/15/2020 19:16:50'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForSenderWithTransferSubstracts stamp: 't 11/15/2020 19:16:50'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForReceiverWithTransferAdds stamp: 't 11/15/2020 19:16:50'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForManyTransfersCalculatesCorrectly stamp: 't 11/15/2020 19:16:50'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetWithOnlyWithdrawIsZero stamp: 't 11/15/2020 19:16:50'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetWithOnlyDepositIsZero stamp: 't 11/15/2020 19:16:50'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 't 11/15/2020 19:17:13' prior: 50879801!
entries
	 	
	
	summary := account transactions collect: [:aTransaction |
		aTransaction handleReport: self].
	summary add: 'balance = ', account balance asString.
	^summary.! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 't 11/15/2020 19:17:13'!
Reports subclass: #AccountSummary
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'accessing' stamp: 't 11/15/2020 19:17:17' prior: 50881893!
entries	
	summary := account transactions collect: [:aTransaction |
		aTransaction handleReport: self].
	summary add: 'balance = ', account balance asString.
	^summary.! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/15/2020 19:17:30' prior: 50881909!
entries	
	summary := OrderedCollection new.
	summary := account transactions collect: [:aTransaction |
		aTransaction handleReport: self].
	summary add: 'balance = ', account balance asString.
	^summary.! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/15/2020 19:18:04' prior: 50881918!
entries	
	summary := OrderedCollection new.
	account makeReportFor: self.
	
	
	"collect: [:aTransaction |
		aTransaction handleReport: self].
	summary add: 'balance = ', account balance asString.
	^summary."! !
!AccountSummary methodsFor: 'accessing' stamp: 't 11/15/2020 19:18:24' prior: 50881928!
entries	
	summary := OrderedCollection new.
	account makeReportFor: self.
	summary add: 'balance = ', account balance asString.
	^summary.! !
!AccountSummary methodsFor: 'operations' stamp: 't 11/15/2020 19:18:55' prior: 50881450 overrides: 50881455!
reportForDeposit: aDeposit

	summary add: 'deposito por ', aDeposit value asString.! !
!AccountSummary methodsFor: 'operations' stamp: 't 11/15/2020 19:18:57' prior: 50881946 overrides: 50881455!
reportForDeposit: aDeposit
	summary add: 'deposito por ', aDeposit value asString.! !
!AccountSummary methodsFor: 'operations' stamp: 't 11/15/2020 19:19:03' prior: 50881491 overrides: 50881485!
reportForTransferReceive: aTransferReceive
	summary add: 'entrada por transferencia de ', aTransferReceive value asString.! !
!AccountSummary methodsFor: 'operations' stamp: 't 11/15/2020 19:19:08' prior: 50881524 overrides: 50881518!
reportForTransferSend: aTransferSend
	summary add: 'salida por transferencia de ', aTransferSend value asString.! !
!AccountSummary methodsFor: 'operations' stamp: 't 11/15/2020 19:19:14' prior: 50881561 overrides: 50881556!
reportForWithdraw: aWithdraw
	summary add: 'extraccion por ', aWithdraw value asString.! !

!testRun: #TransferNetTest #test04TransferNetForManyTransfersCalculatesCorrectly stamp: 't 11/15/2020 19:19:27'!
PASSED!

!testRun: #AccountSummaryTest #test01AccountSummaryForAnAccountWithoutTransactionsHasBalance0 stamp: 't 11/15/2020 19:19:27'!
PASSED!

!testRun: #AccountSummaryTest #test02AccountSummaryForAnAccountWithADepositPrintsCorrectly stamp: 't 11/15/2020 19:19:27'!
PASSED!

!testRun: #AccountSummaryTest #test03AccountSummaryForAnAccountWithAWithdrawPrintsCorrectly stamp: 't 11/15/2020 19:19:27'!
PASSED!

!testRun: #AccountSummaryTest #test04AccountSummaryForAnAccountThatSentATransferPrintsCorrectly stamp: 't 11/15/2020 19:19:28'!
PASSED!

!testRun: #AccountSummaryTest #test05AccountSummaryForAnAccountThatReceivedATransferPrintsCorrectly stamp: 't 11/15/2020 19:19:28'!
PASSED!

!testRun: #AccountSummaryTest #test06AccountSummaryForAnAccountWithManyTransactionsPrintsCorrectly stamp: 't 11/15/2020 19:19:28'!
PASSED!

!testRun: #AccountSummaryTest #test07AccountSummaryForAPortfolioPrintsCorrectly stamp: 't 11/15/2020 19:19:28'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 't 11/15/2020 19:19:28'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 't 11/15/2020 19:19:28'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 't 11/15/2020 19:19:28'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 't 11/15/2020 19:19:28'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 't 11/15/2020 19:19:28'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 't 11/15/2020 19:19:28'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 't 11/15/2020 19:19:28'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 't 11/15/2020 19:19:28'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 't 11/15/2020 19:19:28'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 't 11/15/2020 19:19:28'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 't 11/15/2020 19:19:28'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 't 11/15/2020 19:19:28'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 't 11/15/2020 19:19:28'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 't 11/15/2020 19:19:28'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 't 11/15/2020 19:19:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 't 11/15/2020 19:19:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 't 11/15/2020 19:19:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 't 11/15/2020 19:19:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 't 11/15/2020 19:19:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 't 11/15/2020 19:19:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 't 11/15/2020 19:19:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 't 11/15/2020 19:19:29'!
PASSED!

!testRun: #TransferNetTest #test01TransferNetWithNoOperationsIsZero stamp: 't 11/15/2020 19:19:29'!
PASSED!

!testRun: #TransferNetTest #test02TransferNetForSenderWithTransferSubstracts stamp: 't 11/15/2020 19:19:29'!
PASSED!

!testRun: #TransferNetTest #test03TransferNetForReceiverWithTransferAdds stamp: 't 11/15/2020 19:19:29'!
PASSED!

!testRun: #TransferNetTest #test04TransferNetForManyTransfersCalculatesCorrectly stamp: 't 11/15/2020 19:19:29'!
PASSED!

!testRun: #TransferNetTest #test05TransferNetWithOnlyWithdrawIsZero stamp: 't 11/15/2020 19:19:29'!
PASSED!

!testRun: #TransferNetTest #test06TransferNetWithOnlyDepositIsZero stamp: 't 11/15/2020 19:19:29'!
PASSED!

!testRun: #TransferTest #test01TransferModifiesSenderAndReceiverAccountBalanceCorrectly stamp: 't 11/15/2020 19:19:29'!
PASSED!

!testRun: #TransferTest #test02TransferReceiverCanAccessToSendPart stamp: 't 11/15/2020 19:19:29'!
PASSED!

!testRun: #TransferTest #test03TransferSenderCanAccessToReceivePart stamp: 't 11/15/2020 19:19:29'!
PASSED!

!testRun: #TransferTest #test04TransferIsRegisteredOnSenderAndReceiverAccount stamp: 't 11/15/2020 19:19:29'!
PASSED!

!testRun: #TransferTest #test05TransferCanNotHaveAnAccountAsSenderAndReceiverAtTheSameTime stamp: 't 11/15/2020 19:19:29'!
PASSED!

!testRun: #TransferTest #test06TransferCanNotHaveZeroAsValue stamp: 't 11/15/2020 19:19:29'!
PASSED!

!testRun: #TransferTest #test07TransferCanNotHaveNegativeValue stamp: 't 11/15/2020 19:19:29'!
PASSED!

----SNAPSHOT----(15 November 2020 19:20:11) CuisUniversity-4384.image priorSource: 17588170!

----QUIT----(15 November 2020 19:20:29) CuisUniversity-4384.image priorSource: 17615798!