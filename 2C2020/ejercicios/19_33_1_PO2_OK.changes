----STARTUP---- (9 November 2020 13:34:18) as C:\Users\FACU PC\Documents\Clases Virtuales\Cosas IS 1\Cuis University\CuisUniversity-4365.image!


----End fileIn of C:\Users\FACU PC\Downloads\Portfolio-Ejercicio.st----!

!classRemoval: #ReceptiveAccount stamp: 'FG 11/9/2020 19:12:36'!
TransactionRegister subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'FG 11/9/2020 19:12:36'!
TransactionRegister subclass: #Portfolio
	instanceVariableNames: 'transactionsRegisters'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #TransactionRegister stamp: 'FG 11/9/2020 19:12:36'!
Object subclass: #TransactionRegister
	instanceVariableNames: 'parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'FG 11/9/2020 19:12:37'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'FG 11/9/2020 19:12:37'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'FG 11/9/2020 19:12:37'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'FG 11/9/2020 19:12:38'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortafolioTest stamp: 'FG 11/9/2020 19:12:38'!
TestCase subclass: #PortafolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of C:\Users\FACU PC\Downloads\Portfolio-Ejercicio.st----!

!classRemoval: #ReceptiveAccount stamp: 'FG 11/9/2020 19:18:23'!
TransactionRegister subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'FG 11/9/2020 19:18:23'!
TransactionRegister subclass: #Portfolio
	instanceVariableNames: 'transactionsRegisters'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #TransactionRegister stamp: 'FG 11/9/2020 19:18:23'!
Object subclass: #TransactionRegister
	instanceVariableNames: 'parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'FG 11/9/2020 19:18:24'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'FG 11/9/2020 19:18:24'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'FG 11/9/2020 19:18:24'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'FG 11/9/2020 19:18:24'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortafolioTest stamp: 'FG 11/9/2020 19:18:25'!
TestCase subclass: #PortafolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of C:\Users\FACU PC\Desktop\Portfolio-Solucion.st----!

AccountTransaction subclass: #Transference
	instanceVariableNames: 'deposit withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: #'Portfolio-Solucion' stamp: 'FG 11/9/2020 19:22:50'!
AccountTransaction subclass: #Transference
	instanceVariableNames: 'deposit withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TestCase subclass: #TransferenceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceTest category: #'Portfolio-Solucion' stamp: 'FG 11/9/2020 19:23:09'!
TestCase subclass: #TransferenceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferenceTest methodsFor: 'nil' stamp: 'FG 11/9/2020 19:26:07'!
test01

	| receptiveAccountReceiver receptiveAccountSender |
	
	receptiveAccountReceiver := ReceptiveAccount new.
	receptiveAccountSender := ReceptiveAccount new.
	! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 19:32:06' prior: 50918029!
test01

	| receptiveAccountReceiver receptiveAccountSender |
	
	receptiveAccountReceiver := ReceptiveAccount new.
	receptiveAccountSender := ReceptiveAccount new.
	
	Transference from: receptiveAccountSender to: receptiveAccountReceiver of: 100.
	
	self assert: receptiveAccountSender balance equals: -100.
	self assert: receptiveAccountReceiver balance equals: 100.! !

!testRun: #TransferenceTest #test01 stamp: 'FG 11/9/2020 19:32:25'!
ERROR!

!testRun: #TransferenceTest #test01 stamp: 'FG 11/9/2020 19:32:25'!
ERROR!
!Transference class methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 19:32:37'!
from: aReceptiveAccount to: aReceptiveAccount2 of: aSmallInteger 
	self shouldBeImplemented.! !
!Transference class methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 19:35:34' prior: 50918057!
from: aReceptiveAccount to: aReceptiveAccount2 of: aSmallInteger 
	! !
!Transference class methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 19:37:06' prior: 50918064!
from: aReceptiveAccountSender to: aReceptiveAccountReceiver of: anAmount 
	^ self basicNew initializeWith: aReceptiveAccountSender  xxxx: aReceptiveAccountReceiver  xxx: anAmount.! !
!Transference methodsFor: 'no messages' stamp: 'FG 11/9/2020 19:38:34'!
initializeWith: aReceptiveAccountSender xxxx: aReceptiveAccountReceiver xxx: anAmount 

	deposit := aReceptiveAccountSender ! !
!Transference class methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 19:44:19'!
register: anAmount from: aReceptiveAccountSender to: aReceptiveAccountReceiver 
	^ self basicNew initializeWith: aReceptiveAccountSender  xxxx: aReceptiveAccountReceiver  xxx: anAmount.! !

!methodRemoval: Transference class #from:to:of: stamp: 'FG 11/9/2020 19:44:22'!
from: aReceptiveAccountSender to: aReceptiveAccountReceiver of: anAmount 
	^ self basicNew initializeWith: aReceptiveAccountSender  xxxx: aReceptiveAccountReceiver  xxx: anAmount.!
!Transference methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 19:46:22'!
for: anAmount

 	deposit := Deposit new for: anAmount.
	withdraw := Withdraw  new for: anAmount! !

!methodRemoval: Transference #initializeWith:xxxx:xxx: stamp: 'FG 11/9/2020 19:46:27'!
initializeWith: aReceptiveAccountSender xxxx: aReceptiveAccountReceiver xxx: anAmount 

	deposit := aReceptiveAccountSender !
!Transference class methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 19:46:59' prior: 50918085!
register: anAmount from: aReceptiveAccountSender to: aReceptiveAccountReceiver 
	^ self basicNew initializeWith: aReceptiveAccountSender  xxxx: aReceptiveAccountReceiver  xxx: anAmount.! !
!Transference methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 19:49:28' prior: 50918102!
for: anAmount

 	deposit := Deposit for: anAmount.
	withdraw := Withdraw  for: anAmount! !
!Transference class methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 19:52:33' prior: 50918115!
register: anAmount from: aReceptiveAccountSender to: aReceptiveAccountReceiver 
	
	|transaction|
	
	transaction := self new for: anAmount.
	self register: transaction on: aReceptiveAccountSender.
	self register: transaction on: aReceptiveAccountReceiver.
	
	^ transaction! !

!methodRemoval: Transference #for: stamp: 'FG 11/9/2020 19:52:57'!
for: anAmount

 	deposit := Deposit for: anAmount.
	withdraw := Withdraw  for: anAmount!
!Transference class methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 19:53:19'!
for: anAmount

	^ self new initializeFor: anAmount.! !
!Transference methodsFor: 'no messages' stamp: 'FG 11/9/2020 19:53:57'!
initializeFor: anAmount

	deposit := Deposit for: anAmount.
	withdraw := Withdraw for: anAmount.! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 19:54:23' prior: 50918038!
test01

	| receptiveAccountReceiver receptiveAccountSender |
	
	receptiveAccountReceiver := ReceptiveAccount new.
	receptiveAccountSender := ReceptiveAccount new.
	
	Transference register: 100 from: receptiveAccountSender to: receptiveAccountReceiver.
	
	self assert: receptiveAccountSender balance equals: -100.
	self assert: receptiveAccountReceiver balance equals: 100.! !
!Transference class methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 19:55:06' prior: 50918131!
register: anAmount from: aReceptiveAccountSender to: aReceptiveAccountReceiver 
	
	|transaction|
	
	transaction := self for: anAmount.
	self register: transaction on: aReceptiveAccountSender.
	self register: transaction on: aReceptiveAccountReceiver.
	
	^ transaction! !

AccountTransaction subclass: #Transference
	instanceVariableNames: 'deposit withdraw' 
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: #'Portfolio-Solucion' stamp: 'FG 11/9/2020 20:05:54'!
AccountTransaction subclass: #Transference
	instanceVariableNames: 'deposit withdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transference subclass: #TransferenceDeposit
	instanceVariableNames: 'deposit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transference subclass: #TransferenceDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceDeposit category: #'Portfolio-Solucion' stamp: 'FG 11/9/2020 20:06:22'!
Transference subclass: #TransferenceDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transference subclass: #TransferenceWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceWithdraw category: #'Portfolio-Solucion' stamp: 'FG 11/9/2020 20:06:32'!
Transference subclass: #TransferenceWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #Transference
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: #'Portfolio-Solucion' stamp: 'FG 11/9/2020 20:06:40'!
AccountTransaction subclass: #Transference
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference class methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 20:09:09' prior: 50918174!
register: anAmount from: aReceptiveAccountSender to: aReceptiveAccountReceiver 
	
	|transactionSender transactionReceiver|
	
	transactionSender := TransferenceWithdraw for: anAmount.
	transactionReceiver := TransferenceDeposit for: anAmount.
	self register: transactionSender on: aReceptiveAccountSender.
	self register: transactionReceiver on: aReceptiveAccountReceiver.! !

!methodRemoval: Transference class #for: stamp: 'FG 11/9/2020 20:11:18'!
for: anAmount

	^ self new initializeFor: anAmount.!
!TransferenceDeposit class methodsFor: 'no messages' stamp: 'FG 11/9/2020 20:12:14'!
for: anAmount
	^ self new initalizeFor: anAmount.! !
!TransferenceWithdraw class methodsFor: 'no messages' stamp: 'FG 11/9/2020 20:12:28'!
for: anAmount
	^ self new initalizeFor: anAmount.! !

AccountTransaction subclass: #Transference
	instanceVariableNames: 'operation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: #'Portfolio-Solucion' stamp: 'FG 11/9/2020 20:15:48'!
AccountTransaction subclass: #Transference
	instanceVariableNames: 'operation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference class methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 20:16:05' prior: 50918243!
register: anAmount from: aReceptiveAccountSender to: aReceptiveAccountReceiver 
	
	|transactionSender transactionReceiver|
	
	transactionSender := Transference for: anAmount.
	transactionReceiver := Transference for: anAmount.
	self register: transactionSender on: aReceptiveAccountSender.
	self register: transactionReceiver on: aReceptiveAccountReceiver.! !

!classRemoval: #TransferenceDeposit stamp: 'FG 11/9/2020 20:16:09'!
Transference subclass: #TransferenceDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferenceWithdraw stamp: 'FG 11/9/2020 20:16:12'!
Transference subclass: #TransferenceWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference class methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 20:17:25' prior: 50918285!
register: anAmount from: aReceptiveAccountSender to: aReceptiveAccountReceiver 
	
	|transactionSender transactionReceiver|
	
	transactionSender := Transference depositFor: anAmount.
	transactionReceiver := Transference withdrawFor: anAmount.
	self register: transactionSender on: aReceptiveAccountSender.
	self register: transactionReceiver on: aReceptiveAccountReceiver.! !
!Transference class methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 20:17:43' prior: 50918314!
register: anAmount from: aReceptiveAccountSender to: aReceptiveAccountReceiver 
	
	|transactionSender transactionReceiver|
	
	transactionSender := self depositFor: anAmount.
	transactionReceiver := self withdrawFor: anAmount.
	self register: transactionSender on: aReceptiveAccountSender.
	self register: transactionReceiver on: aReceptiveAccountReceiver.! !
!Transference class methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 20:18:22'!
depositFor: anAmount

	^ self new initalizeDepositFor: anAmount.! !
!Transference class methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 20:18:40'!
withdrawFor: anAmount

	^ self new initalizeWithdrawFor: anAmount.! !
!Transference methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 20:19:08'!
initalizeWithdrawFor: anAmount

	operation :=Withdraw for: anAmount.! !
!Transference methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 20:19:21'!
initalizeDepositFor: anAmount

	operation := Deposit for: anAmount.! !
!Transference class methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 20:20:29' prior: 50918329!
register: anAmount from: aReceptiveAccountSender to: aReceptiveAccountReceiver 
	
	|transactionSender transactionReceiver|
	
	
	transactionSender := self withdrawFor: anAmount.
	transactionReceiver := self depositFor: anAmount.
	self register: transactionSender on: aReceptiveAccountSender.
	self register: transactionReceiver on: aReceptiveAccountReceiver.! !

!methodRemoval: Transference #initializeFor: stamp: 'FG 11/9/2020 20:21:35'!
initializeFor: anAmount

	deposit := Deposit for: anAmount.
	withdraw := Withdraw for: anAmount.!

!testRun: #TransferenceTest #test01 stamp: 'FG 11/9/2020 20:21:54'!
ERROR!

!testRun: #TransferenceTest #test01 stamp: 'FG 11/9/2020 20:22:31'!
ERROR!
!Transference class methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 20:23:40' prior: 50918364!
register: anAmount from: aReceptiveAccountSender to: aReceptiveAccountReceiver 
	
	|transactionSender transactionReceiver|
	
	transactionSender := self withdrawFor: anAmount.
	transactionReceiver := self depositFor: anAmount.
	aReceptiveAccountSender register: transactionSender.
	aReceptiveAccountReceiver register: transactionReceiver.! !

Transference!

!testRun: #TransferenceTest #test01 stamp: 'FG 11/9/2020 20:25:48'!
ERROR!
!Transference methodsFor: 'nil' stamp: 'FG 11/9/2020 20:26:59' overrides: 50917905!
affectBalance: aBalance

	^ operation affectBalance: aBalance.! !

!testRun: #TransferenceTest #test01 stamp: 'FG 11/9/2020 20:27:05'!
PASSED!

Object subclass: #Transference
	instanceVariableNames: 'operation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: #'Portfolio-Solucion' stamp: 'FG 11/9/2020 20:54:55'!
Object subclass: #Transference
	instanceVariableNames: 'operation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Transference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: #'Portfolio-Solucion' stamp: 'FG 11/9/2020 20:55:02'!
Object subclass: #Transference
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!methodRemoval: Transference class #register:from:to: stamp: 'FG 11/9/2020 20:55:07'!
register: anAmount from: aReceptiveAccountSender to: aReceptiveAccountReceiver 
	
	|transactionSender transactionReceiver|
	
	transactionSender := self withdrawFor: anAmount.
	transactionReceiver := self depositFor: anAmount.
	aReceptiveAccountSender register: transactionSender.
	aReceptiveAccountReceiver register: transactionReceiver.!

!methodRemoval: Transference class #depositFor: stamp: 'FG 11/9/2020 20:55:08'!
depositFor: anAmount

	^ self new initalizeDepositFor: anAmount.!

!methodRemoval: Transference class #withdrawFor: stamp: 'FG 11/9/2020 20:55:09'!
withdrawFor: anAmount

	^ self new initalizeWithdrawFor: anAmount.!

!methodRemoval: Transference #affectBalance: stamp: 'FG 11/9/2020 20:55:12'!
affectBalance: aBalance

	^ operation affectBalance: aBalance.!

!methodRemoval: Transference #initalizeWithdrawFor: stamp: 'FG 11/9/2020 20:55:13'!
initalizeWithdrawFor: anAmount

	operation :=Withdraw for: anAmount.!

!methodRemoval: Transference #initalizeDepositFor: stamp: 'FG 11/9/2020 20:55:15'!
initalizeDepositFor: anAmount

	operation := Deposit for: anAmount.!

AccountTransaction subclass: #TransferenceComponents
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceComponents category: #'Portfolio-Solucion' stamp: 'FG 11/9/2020 20:55:45'!
AccountTransaction subclass: #TransferenceComponents
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferenceComponents subclass: #TransferenceDeposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferenceComponents subclass: #TransferenceDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceDeposit category: #'Portfolio-Solucion' stamp: 'FG 11/9/2020 20:56:02'!
TransferenceComponents subclass: #TransferenceDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferenceComponents subclass: #TransferenceWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceWithdraw category: #'Portfolio-Solucion' stamp: 'FG 11/9/2020 20:56:14'!
TransferenceComponents subclass: #TransferenceWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Transference
	instanceVariableNames: 'value transferenceDeposit transferenceWithdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transference category: #'Portfolio-Solucion' stamp: 'FG 11/9/2020 20:57:58'!
Object subclass: #Transference
	instanceVariableNames: 'value transferenceDeposit transferenceWithdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transference class methodsFor: 'nil' stamp: 'FG 11/9/2020 21:01:34'!
register: anAmount from: aReceptiveAccountSender to: aReceptiveAccountReceiver

	^ self new initializeWith: anAmount! !
!Transference methodsFor: 'no messages' stamp: 'FG 11/9/2020 21:04:45'!
initializeWith: anAmount from: aReceptiveAccountSender to: aReceptiveAccountReceiver

	transferenceWithdraw := 	TransferenceWithdraw register: anAmount to: aReceptiveAccountSender.
	transferenceDeposit := TransferenceDeposit register: anAmount to: aReceptiveAccountReceiver.
	value := anAmount.
	

	! !
!Transference class methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 21:05:19' prior: 50918534!
register: anAmount from: aReceptiveAccountSender to: aReceptiveAccountReceiver

	^ self new initializeWith: anAmount from: aReceptiveAccountSender to: aReceptiveAccountReceiver.! !
!Transference methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 21:06:19' prior: 50918540!
initializeWith: anAmount from: aReceptiveAccountSender to: aReceptiveAccountReceiver

	transferenceWithdraw := 	TransferenceWithdraw register: anAmount on: aReceptiveAccountSender.
	transferenceDeposit := TransferenceDeposit register: anAmount on: aReceptiveAccountReceiver.
	value := anAmount.
	

	! !
!TransferenceDeposit class methodsFor: 'no messages' stamp: 'FG 11/9/2020 21:07:08'!
for: aValue

	^ self new initializeWith: aValue.! !
!TransferenceComponents methodsFor: 'nil' stamp: 'FG 11/9/2020 21:07:30'!
initializeFor: aValue

	value := aValue ! !
!TransferenceWithdraw class methodsFor: 'no messages' stamp: 'FG 11/9/2020 21:07:48'!
for: aValue

	^ self new initializeWith: aValue.! !
!Transference methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 21:08:34' prior: 50918562!
initializeWith: anAmount from: aReceptiveAccountSender to: aReceptiveAccountReceiver

	transferenceWithdraw := 	TransferenceWithdraw register: self on: aReceptiveAccountSender.
	transferenceDeposit := TransferenceDeposit register: self on: aReceptiveAccountReceiver.
	value := anAmount.
	

	! !

AccountTransaction subclass: #TransferenceComponents
	instanceVariableNames: 'transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceComponents category: #'Portfolio-Solucion' stamp: 'FG 11/9/2020 21:09:09'!
AccountTransaction subclass: #TransferenceComponents
	instanceVariableNames: 'transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferenceDeposit class methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 21:09:38' prior: 50918575!
for: aTransference

	^ self new initializeWith: aTransference.! !
!TransferenceWithdraw class methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 21:09:50' prior: 50918584!
for: aTransference

	^ self new initializeWith: aTransference.! !
!TransferenceComponents methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 21:10:25' prior: 50918579!
initializeFor: aTransference

	transference := aTransference.! !
!TransferenceDeposit methodsFor: 'no messages' stamp: 'FG 11/9/2020 21:11:25' overrides: 50917905!
affectBalance: aBalance

	^aBalance + transference value.! !
!TransferenceWithdraw methodsFor: 'no messages' stamp: 'FG 11/9/2020 21:11:40' overrides: 50917905!
affectBalance: aBalance

	^aBalance - transference value. ! !
!Transference methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 21:12:06' overrides: 16881508!
value
	^ value.! !

!testRun: #TransferenceTest #test01 stamp: 'FG 11/9/2020 21:12:59'!
ERROR!

!testRun: #TransferenceTest #test01 stamp: 'FG 11/9/2020 21:12:59'!
ERROR!

!testRun: #TransferenceTest #test01 stamp: 'FG 11/9/2020 21:13:02'!
ERROR!

!testRun: #TransferenceTest #test01 stamp: 'FG 11/9/2020 21:13:03'!
ERROR!

!testRun: #TransferenceTest #test01 stamp: 'FG 11/9/2020 21:13:21'!
ERROR!

!testRun: #TransferenceTest #test01 stamp: 'FG 11/9/2020 21:13:21'!
ERROR!
!TransferenceComponents methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 21:14:05'!
initializeWith: aTransference

	transference := aTransference.! !

!methodRemoval: TransferenceComponents #initializeWith: stamp: 'FG 11/9/2020 21:14:10'!
initializeWith: aTransference

	transference := aTransference.!
!TransferenceWithdraw class methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 21:14:19' prior: 50918622!
for: aTransference

	^ self new initializeFor: aTransference.! !
!TransferenceDeposit class methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 21:14:25' prior: 50918616!
for: aTransference

	^ self new initializeFor: aTransference.! !

!testRun: #TransferenceTest #test01 stamp: 'FG 11/9/2020 21:14:31'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 21:22:30'!
test02

	| receptiveAccountReceiver receptiveAccountSender transference|
	
	receptiveAccountReceiver := ReceptiveAccount new.
	receptiveAccountSender := ReceptiveAccount new.
	
	transference := 	Transference register: 100 from: receptiveAccountSender to: receptiveAccountReceiver.
	
	self assert: receptiveAccountReceiver transactions includes: transference transferenceDeposit.
	self assert: receptiveAccountSender transactions includes: transference transferenceWithdraw.
	
	self assert: transference equals: transference transferenceDeposit transference.
	self assert: transference equals: transference transferenceWithdraw transference.
	! !
!Transference methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 21:22:59'!
transferenceDeposit
	^ transferenceDeposit.! !
!Transference methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 21:23:11'!
transferenceWithdraw
	^ transferenceWithdraw.! !
!TransferenceComponents methodsFor: 'nil' stamp: 'FG 11/9/2020 21:23:34'!
trasference
 	^ transference.! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 21:24:53' prior: 50918689!
test02

	| receptiveAccountReceiver receptiveAccountSender transference |
	
	receptiveAccountReceiver := ReceptiveAccount new.
	receptiveAccountSender := ReceptiveAccount new.
	
	transference := 	Transference register: 100 from: receptiveAccountSender to: receptiveAccountReceiver.
	
	self assert: receptiveAccountReceiver transactions includes: transference transferenceDeposit.
	self assert: receptiveAccountSender transactions includes: transference transferenceWithdraw.
	
	self assert: transference equals: transference transferenceDeposit transference.
	self assert: transference equals: transference transferenceWithdraw transference.
	! !

!testRun: #TransferenceTest #test02 stamp: 'FG 11/9/2020 21:25:35'!
ERROR!

!testRun: #TransferenceTest #test02 stamp: 'FG 11/9/2020 21:25:35'!
ERROR!
!TransferenceComponents methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 21:25:51'!
transference
 	^ transference.! !

!methodRemoval: TransferenceComponents #trasference stamp: 'FG 11/9/2020 21:25:54'!
trasference
 	^ transference.!

!testRun: #TransferenceTest #test02 stamp: 'FG 11/9/2020 21:25:59'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 21:27:42'!
should: aBlockThatShouldFail raisingAnErrorAndAsserting: aVerificationBlock

    [aBlockThatShouldFail value. self fail.]
    on: Error
    do: aVerificationBlock.! !
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 21:30:06'!
test03

	| receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	
	
	self should: [Transference register: 1  from: receptiveAccount to: receptiveAccount ] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: Transference cantTransferToTheSameAccount]
	! !

!testRun: #TransferenceTest #test03 stamp: 'FG 11/9/2020 21:30:14'!
FAILURE!

!testRun: #TransferenceTest #test03 stamp: 'FG 11/9/2020 21:30:14'!
FAILURE!
!Transference class methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 21:31:08'!
cantTransferToTheSameAccount
	^ ' Error - You can not transfer to the same account you are transfering from' ! !
!Transference class methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 21:32:50' prior: 50918553!
register: anAmount from: aReceptiveAccountSender to: aReceptiveAccountReceiver
	
	(aReceptiveAccountSender  == aReceptiveAccountReceiver ) ifTrue: [self error: self cantTransferToTheSameAccount ].
	^ self new initializeWith: anAmount from: aReceptiveAccountSender to: aReceptiveAccountReceiver.! !

!testRun: #TransferenceTest #test03 stamp: 'FG 11/9/2020 21:32:57'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 21:34:15'!
test04

	| receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := ReceptiveAccount new.
	receptiveAccountReceiver := ReceptiveAccount new.
	
	self should: [Transference register: -100  from: receptiveAccountSender to: receptiveAccountReceiver ] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: Transference cantTransferNegativeAmount]
	! !
!Transference class methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 21:34:37'!
cantTransferNegativeAmount
	^ ' Error - You can not transfer a negative amount' ! !
!Transference class methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 21:35:38' prior: 50918795!
register: anAmount from: aReceptiveAccountSender to: aReceptiveAccountReceiver
	
	(aReceptiveAccountSender  == aReceptiveAccountReceiver ) ifTrue: [self error: self cantTransferToTheSameAccount ].
	(anAmount >= 0) ifTrue: [self error: self cantTransferNegativeAmount ].
	
	^ self new initializeWith: anAmount from: aReceptiveAccountSender to: aReceptiveAccountReceiver.! !

!testRun: #TransferenceTest #test04 stamp: 'FG 11/9/2020 21:35:44'!
FAILURE!

!testRun: #TransferenceTest #test04 stamp: 'FG 11/9/2020 21:35:44'!
FAILURE!
!Transference class methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 21:36:08' prior: 50918832!
register: anAmount from: aReceptiveAccountSender to: aReceptiveAccountReceiver
	
	(aReceptiveAccountSender  == aReceptiveAccountReceiver ) ifTrue: [self error: self cantTransferToTheSameAccount ].
	(anAmount  < 0) ifTrue: [self error: self cantTransferNegativeAmount ].
	
	^ self new initializeWith: anAmount from: aReceptiveAccountSender to: aReceptiveAccountReceiver.! !

!testRun: #TransferenceTest #test04 stamp: 'FG 11/9/2020 21:36:14'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 21:37:27' prior: 50918810!
test04

	| receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := ReceptiveAccount new.
	receptiveAccountReceiver := ReceptiveAccount new.
	
	self should: [Transference register: -100  from: receptiveAccountSender to: receptiveAccountReceiver ] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: Transference cantTransferNonPositiveAmount].
	
	self should: [Transference register: 0  from: receptiveAccountSender to: receptiveAccountReceiver ] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: Transference cantTransferNonPositiveAmount]
	! !
!Transference class methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 21:37:50'!
cantTransferNonPositiveAmount
	^ ' Error - You can not transfer a non-positive amount' ! !

!methodRemoval: Transference class #cantTransferNegativeAmount stamp: 'FG 11/9/2020 21:37:56'!
cantTransferNegativeAmount
	^ ' Error - You can not transfer a negative amount' !
!Transference class methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 21:38:09' prior: 50918852!
register: anAmount from: aReceptiveAccountSender to: aReceptiveAccountReceiver
	
	(aReceptiveAccountSender  == aReceptiveAccountReceiver ) ifTrue: [self error: self cantTransferToTheSameAccount ].
	(anAmount  <= 0) ifTrue: [self error: self cantTransferNegativeAmount ].
	
	^ self new initializeWith: anAmount from: aReceptiveAccountSender to: aReceptiveAccountReceiver.! !

!testRun: #TransferenceTest #test04 stamp: 'FG 11/9/2020 21:38:16'!
FAILURE!

!testRun: #TransferenceTest #test04 stamp: 'FG 11/9/2020 21:38:16'!
FAILURE!
!Transference class methodsFor: 'as yet unclassified' stamp: 'FG 11/9/2020 21:38:49' prior: 50918905!
register: anAmount from: aReceptiveAccountSender to: aReceptiveAccountReceiver
	
	(aReceptiveAccountSender  == aReceptiveAccountReceiver ) ifTrue: [self error: self cantTransferToTheSameAccount ].
	(anAmount  <= 0) ifTrue: [self error: self cantTransferNonPositiveAmount ].
	
	^ self new initializeWith: anAmount from: aReceptiveAccountSender to: aReceptiveAccountReceiver.! !

!testRun: #TransferenceTest #test04 stamp: 'FG 11/9/2020 21:38:53'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'FG 11/9/2020 21:38:55'!
PASSED!

!testRun: #TransferenceTest #test01 stamp: 'FG 11/9/2020 21:38:57'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'FG 11/9/2020 21:38:57'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'FG 11/9/2020 21:38:57'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'FG 11/9/2020 21:38:57'!
PASSED!

----QUIT----(9 November 2020 22:45:24) CuisUniversity-4365.image priorSource: 18694952!

----STARTUP---- (12 November 2020 15:26:05) as C:\Users\FACU PC\Documents\Clases Virtuales\Cosas IS 1\Cuis University\CuisUniversity-4365.image!


Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: #'Portfolio-Solucion' stamp: 'FG 11/12/2020 15:28:23'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportTest category: #'Portfolio-Solucion' stamp: 'FG 11/12/2020 15:28:32'!
TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportTest methodsFor: 'nil' stamp: 'FG 11/12/2020 15:32:17'!
test01

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	report := 'Balance  = 0'.
	
	self assert: (Report of: receptiveAccount) accountSummary equals: report. 
	
	 ! !

!testRun: #ReportTest #test01 stamp: 'FG 11/12/2020 15:32:25'!
ERROR!

!testRun: #ReportTest #test01 stamp: 'FG 11/12/2020 15:32:25'!
ERROR!
!Report class methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 15:32:36'!
of: aReceptiveAccount 
	self shouldBeImplemented.! !
!Report class methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 15:33:22' prior: 50918998!
of: aReceptiveAccount 
	! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 15:37:23' prior: 50918984!
test01

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	report := 'Balance  = 0'.
	
	self assert: (Report of: receptiveAccount) accountSummary equals: report. 
	
	 ! !

!testRun: #ReportTest #test01 stamp: 'FG 11/12/2020 15:37:25'!
ERROR!

Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: #'Portfolio-Solucion' stamp: 'FG 11/12/2020 15:37:54'!
Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Report class methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 15:38:16' prior: 50919003!
of: aReceptiveAccount 
	
	! !
!Report class methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 15:39:28' prior: 50919030!
of: anAccount
 	^ self new initializeWith: anAccount.
	
	! !
!Report methodsFor: 'nil' stamp: 'FG 11/12/2020 15:39:46'!
initializeWith: anAccount
	account := anAccount.! !

!testRun: #ReportTest #test01 stamp: 'FG 11/12/2020 15:39:54'!
ERROR!

!testRun: #ReportTest #test01 stamp: 'FG 11/12/2020 15:39:54'!
ERROR!
!Report methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 15:40:04'!
accountSummary
	self shouldBeImplemented.! !
!Report methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 15:40:16' prior: 50919047!
accountSummary
	^ 'Balance = 0'! !

!testRun: #ReportTest #test01 stamp: 'FG 11/12/2020 15:40:20'!
FAILURE!

!testRun: #ReportTest #test01 stamp: 'FG 11/12/2020 15:40:20'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 15:40:38' prior: 50919007!
test01

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	report := 'Balance = 0'.
	
	self assert: (Report of: receptiveAccount) accountSummary equals: report. 
	
	 ! !

!testRun: #ReportTest #test01 stamp: 'FG 11/12/2020 15:40:40'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 15:42:49'!
test02

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	Deposit register: 100 on: receptiveAccount.
	
	report := OrderedCollection new.
	report add: 'Dep�sito por 100.'.
	report add: 'Balance = 100'.
	
	self assert: (Report of: receptiveAccount) accountSummary equals: report. 
	
	 ! !

!testRun: #ReportTest #test02 stamp: 'FG 11/12/2020 15:42:57'!
FAILURE!
!Report methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 15:47:17' prior: 50919052!
accountSummary
	
	|newAccountSummary|
	
	newAccountSummary := OrderedCollection new.
	
	account transactions do:[:aTransaction |
			(aTransaction isKindOf: Deposit) ifTrue:[newAccountSummary add: 'Dep�sito por ' , aTransaction value asString].
		].! !
!Report methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 15:48:32' prior: 50919087!
accountSummary
	
	|newAccountSummary|
	
	newAccountSummary := OrderedCollection new.
	
	account transactions do:[:aTransaction |
			(aTransaction isKindOf: Deposit) ifTrue:[newAccountSummary add: 'Dep�sito por ' , aTransaction value asString].
		].
	
	newAccountSummary add: 'Balance = ' , account balance asString.
	
	^ newAccountSummary.! !

!testRun: #ReportTest #test01 stamp: 'FG 11/12/2020 15:48:43'!
FAILURE!

!testRun: #ReportTest #test01 stamp: 'FG 11/12/2020 15:48:43'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 15:49:12' prior: 50919061!
test01

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	report := OrderedCollection new.
	report add: 'Balance = 0'.
	
	self assert: (Report of: receptiveAccount) accountSummary equals: report. 
	
	 ! !

!testRun: #ReportTest #test01 stamp: 'FG 11/12/2020 15:49:14'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'FG 11/12/2020 15:49:16'!
FAILURE!

!testRun: #ReportTest #test02 stamp: 'FG 11/12/2020 15:49:16'!
FAILURE!

!testRun: #ReportTest #test02 stamp: 'FG 11/12/2020 15:49:51'!
FAILURE!

!testRun: #ReportTest #test02 stamp: 'FG 11/12/2020 15:49:51'!
FAILURE!
!Report methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 15:50:31' prior: 50919098!
accountSummary
	
	|newAccountSummary|
	
	newAccountSummary := OrderedCollection new.
	
	account transactions do:[:aTransaction |
			(aTransaction isKindOf: Deposit) ifTrue:[newAccountSummary add: 'Dep�sito por ' , aTransaction value asString].
		].
	
	newAccountSummary add: 'Balance = ' , account balance asString.
	
	^ newAccountSummary.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 15:50:41' prior: 50919072!
test02

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	Deposit register: 100 on: receptiveAccount.
	
	report := OrderedCollection new.
	report add: 'Dep�sito por 100'.
	report add: 'Balance = 100'.
	
	self assert: (Report of: receptiveAccount) accountSummary equals: report. 
	
	 ! !

!testRun: #ReportTest #test02 stamp: 'FG 11/12/2020 15:50:43'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 15:51:12'!
test03

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	Withdraw register: 100 on: receptiveAccount.
	
	report := OrderedCollection new.
	report add: 'Extracci�n por 100'.
	report add: 'Balance = -100'.
	
	self assert: (Report of: receptiveAccount) accountSummary equals: report. 
	
	 ! !

!testRun: #ReportTest #test03 stamp: 'FG 11/12/2020 15:51:14'!
FAILURE!
!Report methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 15:51:47' prior: 50919139!
accountSummary
	
	|newAccountSummary|
	
	newAccountSummary := OrderedCollection new.
	
	account transactions do:[:aTransaction |
			(aTransaction isKindOf: Deposit) ifTrue:[newAccountSummary add: 'Dep�sito por ' , aTransaction value asString].
			(aTransaction isKindOf: Withdraw) ifTrue:[newAccountSummary add: 'Extracci�n por ' , aTransaction value asString].
			
		].
	
	newAccountSummary add: 'Balance = ' , account balance asString.
	
	^ newAccountSummary.! !
!Report methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 15:51:51' prior: 50919183!
accountSummary
	
	|newAccountSummary|
	
	newAccountSummary := OrderedCollection new.
	
	account transactions do:[:aTransaction |
			(aTransaction isKindOf: Deposit) ifTrue:[newAccountSummary add: 'Dep�sito por ' , aTransaction value asString].
			(aTransaction isKindOf: Withdraw) ifTrue:[newAccountSummary add: 'Extracci�n por ' , aTransaction value asString].
		].
	
	newAccountSummary add: 'Balance = ' , account balance asString.
	
	^ newAccountSummary.! !

!testRun: #ReportTest #test03 stamp: 'FG 11/12/2020 15:51:59'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 15:55:32'!
test04

	| reportSender reportReceiver receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := ReceptiveAccount new.
	receptiveAccountReceiver := ReceptiveAccount new.
	Transference register: 100 from: receptiveAccountSender  to: receptiveAccountReceiver.
	
	reportSender := OrderedCollection new.
	reportSender add: 'Salida por transferencia de 100'.
	reportSender add: 'Balance = -100'.
	
	reportReceiver := OrderedCollection new.
	reportReceiver add: 'Entrada por transferencia de 100'.
	reportReceiver add: 'Balance = 100'.
	
		
	self assert: (Report of: receptiveAccountSender) accountSummary equals: reportSender.
	self assert: (Report of: receptiveAccountReceiver) accountSummary equals: reportReceiver.
	 
	
	 ! !

!testRun: #ReportTest #test04 stamp: 'FG 11/12/2020 15:55:38'!
FAILURE!

!testRun: #ReportTest #test04 stamp: 'FG 11/12/2020 15:55:39'!
FAILURE!
!Report methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 15:56:56' prior: 50919201!
accountSummary
	
	|newAccountSummary|
	
	newAccountSummary := OrderedCollection new.
	
	account transactions do:[:aTransaction |
			(aTransaction isKindOf: Deposit) ifTrue:[newAccountSummary add: 'Dep�sito por ' , aTransaction value asString].
			(aTransaction isKindOf: Withdraw) ifTrue:[newAccountSummary add: 'Extracci�n por ' , aTransaction value asString].
			(aTransaction isKindOf: TransferenceWithdraw) ifTrue:[newAccountSummary add: 'Salida por transferencia de ' , aTransaction transference value asString].
		].
	
	newAccountSummary add: 'Balance = ' , account balance asString.
	
	^ newAccountSummary.! !

!testRun: #ReportTest #test04 stamp: 'FG 11/12/2020 15:56:59'!
FAILURE!

!testRun: #ReportTest #test04 stamp: 'FG 11/12/2020 15:56:59'!
FAILURE!
!Report methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 15:57:23' prior: 50919252!
accountSummary
	
	|newAccountSummary|
	
	newAccountSummary := OrderedCollection new.
	
	account transactions do:[:aTransaction |
			(aTransaction isKindOf: Deposit) ifTrue:[newAccountSummary add: 'Dep�sito por ' , aTransaction value asString].
			(aTransaction isKindOf: Withdraw) ifTrue:[newAccountSummary add: 'Extracci�n por ' , aTransaction value asString].
			(aTransaction isKindOf: TransferenceWithdraw) ifTrue:[newAccountSummary add: 'Salida por transferencia de ' , aTransaction transference value asString].
			(aTransaction isKindOf: TransferenceDeposit) ifTrue:[newAccountSummary add: 'Deposito por transferencia de ' , aTransaction transference value asString].
		].
	
	newAccountSummary add: 'Balance = ' , account balance asString.
	
	^ newAccountSummary.! !
!Report methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 15:57:31' prior: 50919279!
accountSummary
	
	|newAccountSummary|
	
	newAccountSummary := OrderedCollection new.
	
	account transactions do:[:aTransaction |
			(aTransaction isKindOf: Deposit) ifTrue:[newAccountSummary add: 'Dep�sito por ' , aTransaction value asString].
			(aTransaction isKindOf: Withdraw) ifTrue:[newAccountSummary add: 'Extracci�n por ' , aTransaction value asString].
			(aTransaction isKindOf: TransferenceWithdraw) ifTrue:[newAccountSummary add: 'Salida por transferencia de ' , aTransaction transference value asString].
			(aTransaction isKindOf: TransferenceDeposit) ifTrue:[newAccountSummary add: 'Entrada por transferencia de ' , aTransaction transference value asString].
		].
	
	newAccountSummary add: 'Balance = ' , account balance asString.
	
	^ newAccountSummary.! !

!testRun: #ReportTest #test04 stamp: 'FG 11/12/2020 15:57:36'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'FG 11/12/2020 15:57:38'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'FG 11/12/2020 15:57:38'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'FG 11/12/2020 15:57:38'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'FG 11/12/2020 15:57:38'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 15:59:08'!
test05

	| reportSender reportReceiver receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := ReceptiveAccount new.
	receptiveAccountReceiver := ReceptiveAccount new.
	Transference register: 100 from: receptiveAccountSender  to: receptiveAccountReceiver.
	
	Deposit register: 100 on: receptiveAccountSender.
	
	reportSender := OrderedCollection new.
	reportSender add: 'Salida por transferencia de 100'.
	reportSender add: 'Dep�sito por 100'.
	reportSender add: 'Balance = 0'.
	
	reportReceiver := OrderedCollection new.
	reportReceiver add: 'Entrada por transferencia de 100'.
	reportReceiver add: 'Balance = 100'.
	
		
	self assert: (Report of: receptiveAccountSender) accountSummary equals: reportSender.
	self assert: (Report of: receptiveAccountReceiver) accountSummary equals: reportReceiver.
	 
	
	 ! !

!testRun: #ReportTest #test05 stamp: 'FG 11/12/2020 15:59:10'!
PASSED!

!methodRemoval: ReportTest #test05 stamp: 'FG 11/12/2020 15:59:12'!
test05

	| reportSender reportReceiver receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := ReceptiveAccount new.
	receptiveAccountReceiver := ReceptiveAccount new.
	Transference register: 100 from: receptiveAccountSender  to: receptiveAccountReceiver.
	
	Deposit register: 100 on: receptiveAccountSender.
	
	reportSender := OrderedCollection new.
	reportSender add: 'Salida por transferencia de 100'.
	reportSender add: 'Dep�sito por 100'.
	reportSender add: 'Balance = 0'.
	
	reportReceiver := OrderedCollection new.
	reportReceiver add: 'Entrada por transferencia de 100'.
	reportReceiver add: 'Balance = 100'.
	
		
	self assert: (Report of: receptiveAccountSender) accountSummary equals: reportSender.
	self assert: (Report of: receptiveAccountReceiver) accountSummary equals: reportReceiver.
	 
	
	 !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 16:02:04'!
test05

	| reportSender reportReceiver receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := Portfolio new.
	receptiveAccountReceiver := ReceptiveAccount new.
	
	receptiveAccountSender register: receptiveAccountReceiver.
	Deposit register: 100 on: receptiveAccountReceiver.
	
	reportSender :=  OrderedCollection new.
	reportSender add: 'Dep�sito de 100'.
	reportSender add: 'Balance = 100'.
		
	self assert: (Report of: receptiveAccountSender) accountSummary equals: reportSender.
	 
	
	 ! !

!testRun: #ReportTest #test05 stamp: 'FG 11/12/2020 16:02:11'!
ERROR!

!testRun: #ReportTest #test05 stamp: 'FG 11/12/2020 16:02:11'!
ERROR!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 16:02:41' prior: 50919404!
test05

	| reportSender receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := Portfolio new.
	receptiveAccountReceiver := ReceptiveAccount new.
	
	receptiveAccountSender add: receptiveAccountReceiver.
	Deposit register: 100 on: receptiveAccountReceiver.
	
	reportSender :=  OrderedCollection new.
	reportSender add: 'Dep�sito de 100'.
	reportSender add: 'Balance = 100'.
		
	self assert: (Report of: receptiveAccountSender) accountSummary equals: reportSender.
	 
	
	 ! !

!testRun: #ReportTest #test05 stamp: 'FG 11/12/2020 16:02:45'!
FAILURE!

!testRun: #ReportTest #test05 stamp: 'FG 11/12/2020 16:02:45'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 16:03:08' prior: 50919428!
test05

	| reportSender receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := Portfolio new.
	receptiveAccountReceiver := ReceptiveAccount new.
	
	receptiveAccountSender add: receptiveAccountReceiver.
	Deposit register: 100 on: receptiveAccountReceiver.
	
	reportSender :=  OrderedCollection new.
	reportSender add: 'Dep�sito por 100'.
	reportSender add: 'Balance = 100'.
		
	self assert: (Report of: receptiveAccountSender) accountSummary equals: reportSender.
	 
	
	 ! !

!testRun: #ReportTest #test05 stamp: 'FG 11/12/2020 16:03:10'!
PASSED!

!methodRemoval: ReportTest #test05 stamp: 'FG 11/12/2020 16:03:12'!
test05

	| reportSender receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := Portfolio new.
	receptiveAccountReceiver := ReceptiveAccount new.
	
	receptiveAccountSender add: receptiveAccountReceiver.
	Deposit register: 100 on: receptiveAccountReceiver.
	
	reportSender :=  OrderedCollection new.
	reportSender add: 'Dep�sito por 100'.
	reportSender add: 'Balance = 100'.
		
	self assert: (Report of: receptiveAccountSender) accountSummary equals: reportSender.
	 
	
	 !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 16:05:24'!
test05

	| receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	
	self assert: (Report of: receptiveAccount) transferenceNetValueReport equals: 0. 
	
	 ! !

!testRun: #ReportTest #test05 stamp: 'FG 11/12/2020 16:05:27'!
ERROR!

!testRun: #ReportTest #test05 stamp: 'FG 11/12/2020 16:05:27'!
ERROR!
!Report methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 16:05:35'!
transferenceNetValueReport
	self shouldBeImplemented.! !
!Report methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 16:05:39' prior: 50919503!
transferenceNetValueReport
	^ 0! !

!testRun: #ReportTest #test05 stamp: 'FG 11/12/2020 16:05:43'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 16:07:28'!
test06

	| receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := ReceptiveAccount new.
	receptiveAccountReceiver := ReceptiveAccount new.
	
	Transference register: 100 from: receptiveAccountSender  to: receptiveAccountReceiver.
	
	self assert: (Report of: receptiveAccountSender) transferenceNetValueReport equals: -100.
	self assert: (Report of: receptiveAccountReceiver) transferenceNetValueReport equals: 100.
	 
	
	 ! !

!testRun: #ReportTest #test06 stamp: 'FG 11/12/2020 16:07:33'!
FAILURE!

!testRun: #ReportTest #test06 stamp: 'FG 11/12/2020 16:07:33'!
FAILURE!
!Report methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 16:11:12' prior: 50919508!
transferenceNetValueReport
	
	| transferenceNetValue | 
	
	transferenceNetValue = 0.
	
	account  transactions do:[:aTransaction | 
			(aTransaction isKindOf: TransferenceDeposit ) ifTrue: [transferenceNetValue].
		
		].
	
	^ transferenceNetValue.! !
!Report methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 16:11:40' prior: 50919536!
transferenceNetValueReport
	
	| transferenceNetValue | 
	
	transferenceNetValue := 0.
	
	account  transactions do:[:aTransaction | 
			(aTransaction isKindOf: TransferenceDeposit ) ifTrue: [transferenceNetValue].
		
		].
	
	^ transferenceNetValue.! !
!Report methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 16:13:05' prior: 50919547!
transferenceNetValueReport
	
	| transferenceNetValue | 
	
	transferenceNetValue := 0.
	
	account  transactions do:[:aTransaction | 
			transferenceNetValue := aTransaction affectBalance: transferenceNetValue.
		].
	
	^ transferenceNetValue.! !

!testRun: #ReportTest #test06 stamp: 'FG 11/12/2020 16:13:10'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 16:13:33' prior: 50919514!
test06

	| receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := ReceptiveAccount new.
	receptiveAccountReceiver := ReceptiveAccount new.
	
	Deposit new
	
	self assert: (Report of: receptiveAccountSender) transferenceNetValueReport equals: -100.
	self assert: (Report of: receptiveAccountReceiver) transferenceNetValueReport equals: 100.
	 
	
	 ! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 16:13:46' prior: 50919571!
test06

	| receptiveAccountWithDeposit receptiveAccountReceiver |
	
	receptiveAccountWithDeposit := ReceptiveAccount new.
	receptiveAccountReceiver := ReceptiveAccount new.
	
	Deposit new
	
	self assert: (Report of: receptiveAccountWithDeposit) transferenceNetValueReport equals: -100.
	self assert: (Report of: receptiveAccountReceiver) transferenceNetValueReport equals: 100.
	 
	
	 ! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 16:14:05' prior: 50919586!
test06

	| receptiveAccountWithDeposit receptiveAccountWithWithdraw |
	
	receptiveAccountWithDeposit := ReceptiveAccount new.
	receptiveAccountWithWithdraw := ReceptiveAccount new.
	
	Deposit new
	
	self assert: (Report of: receptiveAccountWithDeposit) transferenceNetValueReport equals: -100.
	self assert: (Report of: receptiveAccountWithWithdraw) transferenceNetValueReport equals: 100.
	 
	
	 ! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 16:14:42' prior: 50919602!
test06

	| receptiveAccountWithDeposit receptiveAccountWithWithdraw |
	
	receptiveAccountWithDeposit := ReceptiveAccount new.
	receptiveAccountWithWithdraw := ReceptiveAccount new.
	
	Deposit register: 100 on: receptiveAccountWithDeposit.
	Withdraw register: 50 on: receptiveAccountWithWithdraw.
	
	self assert: (Report of: receptiveAccountWithDeposit) transferenceNetValueReport equals: -100.
	self assert: (Report of: receptiveAccountWithWithdraw) transferenceNetValueReport equals: 100.
	 
	
	 ! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 16:14:53' prior: 50919618!
test06

	| receptiveAccountWithDeposit receptiveAccountWithWithdraw |
	
	receptiveAccountWithDeposit := ReceptiveAccount new.
	receptiveAccountWithWithdraw := ReceptiveAccount new.
	
	Deposit register: 100 on: receptiveAccountWithDeposit.
	Withdraw register: 50 on: receptiveAccountWithWithdraw.
	
	self assert: (Report of: receptiveAccountWithDeposit) transferenceNetValueReport equals: 0.
	self assert: (Report of: receptiveAccountWithWithdraw) transferenceNetValueReport equals: 0.
	 
	
	 ! !

!testRun: #ReportTest #test06 stamp: 'FG 11/12/2020 16:14:55'!
FAILURE!

!testRun: #ReportTest #test06 stamp: 'FG 11/12/2020 16:14:55'!
FAILURE!
!Report methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 16:16:17' prior: 50919558!
transferenceNetValueReport
	
	| transferenceNetValue | 
	
	transferenceNetValue := 0.
	
	account  transactions do:[:aTransaction | 
			((aTransaction isKindOf: TransferenceDeposit) or: [aTransaction isKindOf: TransferenceWithdraw]) 
				ifTrue:[transferenceNetValue := aTransaction affectBalance: transferenceNetValue.].
		].
	
	^ transferenceNetValue.! !

!testRun: #ReportTest #test06 stamp: 'FG 11/12/2020 16:16:26'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 16:17:51' prior: 50919490!
test05

	| receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := ReceptiveAccount new.
	receptiveAccountReceiver := ReceptiveAccount new.
	
	Transference register: 100 from: receptiveAccountSender  to: receptiveAccountReceiver.
	
	self assert: (Report of: receptiveAccountReceiver) transferenceNetValueReport equals: 100.
	self assert: (Report of: receptiveAccountSender) transferenceNetValueReport equals: -100.
	 
	
	 ! !

!testRun: #ReportTest #test01 stamp: 'FG 11/12/2020 16:17:58'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'FG 11/12/2020 16:17:58'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'FG 11/12/2020 16:17:58'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'FG 11/12/2020 16:17:58'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'FG 11/12/2020 16:17:58'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'FG 11/12/2020 16:17:58'!
PASSED!
!Report methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 16:23:24' prior: 50919660!
transferenceNetValueReport
	
	"| transferenceNetValue | 
	
	transferenceNetValue := 0.
	
	account  transactions do:[:aTransaction | 
			((aTransaction isKindOf: TransferenceDeposit) or: [aTransaction isKindOf: TransferenceWithdraw]) 
				ifTrue:[transferenceNetValue := aTransaction affectBalance: transferenceNetValue.].
		].
	"
	^ account transactions sum:[:aTransaction | 
			((aTransaction isKindOf: TransferenceDeposit) or: [aTransaction isKindOf: TransferenceWithdraw]) 
				ifTrue:[aTransaction affectBalance: 0.].	
		].
	"
	^ transferenceNetValue. "! !

!testRun: #ReportTest #test01 stamp: 'FG 11/12/2020 16:23:27'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'FG 11/12/2020 16:23:27'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'FG 11/12/2020 16:23:27'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'FG 11/12/2020 16:23:27'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'FG 11/12/2020 16:23:27'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'FG 11/12/2020 16:23:27'!
FAILURE!

!testRun: #ReportTest #test06 stamp: 'FG 11/12/2020 16:23:27'!
FAILURE!

!testRun: #ReportTest #test01 stamp: 'FG 11/12/2020 16:23:38'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'FG 11/12/2020 16:23:38'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'FG 11/12/2020 16:23:38'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'FG 11/12/2020 16:23:38'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'FG 11/12/2020 16:23:38'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'FG 11/12/2020 16:23:38'!
FAILURE!

!testRun: #ReportTest #test06 stamp: 'FG 11/12/2020 16:23:38'!
FAILURE!
!Report methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 16:24:54' prior: 50919708!
transferenceNetValueReport
	
	"| transferenceNetValue | 
	
	transferenceNetValue := 0.
	
	account  transactions do:[:aTransaction | 
			((aTransaction isKindOf: TransferenceDeposit) or: [aTransaction isKindOf: TransferenceWithdraw]) 
				ifTrue:[transferenceNetValue := aTransaction affectBalance: transferenceNetValue.].
		].
	"
	^ account transactions sum:[:aTransaction | 
			((aTransaction isKindOf: TransferenceDeposit) or: [aTransaction isKindOf: TransferenceWithdraw]) 
				ifTrue:[aTransaction affectBalance: 0.].	
		] ifEmpty:[0].
	"
	^ transferenceNetValue. "! !

!testRun: #ReportTest #test01 stamp: 'FG 11/12/2020 16:24:58'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'FG 11/12/2020 16:24:58'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'FG 11/12/2020 16:24:58'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'FG 11/12/2020 16:24:58'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'FG 11/12/2020 16:24:58'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'FG 11/12/2020 16:24:58'!
FAILURE!

!testRun: #ReportTest #test06 stamp: 'FG 11/12/2020 16:24:58'!
FAILURE!
!Report methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 16:25:32' prior: 50919760!
transferenceNetValueReport
	
	"| transferenceNetValue | 
	
	transferenceNetValue := 0.
	
	account  transactions do:[:aTransaction | 
			((aTransaction isKindOf: TransferenceDeposit) or: [aTransaction isKindOf: TransferenceWithdraw]) 
				ifTrue:[transferenceNetValue := aTransaction affectBalance: transferenceNetValue.].
		].
	"
	^ account transactions sum:[:aTransaction | 
			((aTransaction isKindOf: TransferenceDeposit) or: [aTransaction isKindOf: TransferenceWithdraw]) 
				ifTrue:[aTransaction affectBalance: 0.].	
		] ifEmpty:[ ^ 0].
	"
	^ transferenceNetValue. "! !

!testRun: #ReportTest #test06 stamp: 'FG 11/12/2020 16:25:37'!
FAILURE!

!testRun: #ReportTest #test06 stamp: 'FG 11/12/2020 16:25:37'!
FAILURE!

!testRun: #ReportTest #test06 stamp: 'FG 11/12/2020 16:25:42'!
FAILURE!

!testRun: #ReportTest #test06 stamp: 'FG 11/12/2020 16:25:42'!
FAILURE!
!Report methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 16:26:01' prior: 50919797!
transferenceNetValueReport
	
	| transferenceNetValue | 
	
	transferenceNetValue := 0.
	
	account  transactions do:[:aTransaction | 
			((aTransaction isKindOf: TransferenceDeposit) or: [aTransaction isKindOf: TransferenceWithdraw]) 
				ifTrue:[transferenceNetValue := aTransaction affectBalance: transferenceNetValue.].
		].
	
	^ transferenceNetValue.! !

!testRun: #ReportTest #test01 stamp: 'FG 11/12/2020 16:26:04'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'FG 11/12/2020 16:26:04'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'FG 11/12/2020 16:26:04'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'FG 11/12/2020 16:26:04'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'FG 11/12/2020 16:26:04'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'FG 11/12/2020 16:26:04'!
PASSED!

----QUIT----(12 November 2020 16:26:09) CuisUniversity-4365.image priorSource: 18793702!

----STARTUP---- (12 November 2020 20:13:12) as C:\Users\FACU PC\Documents\Clases Virtuales\Cosas IS 1\Cuis University\CuisUniversity-4365.image!


----QUIT----(12 November 2020 20:13:44) CuisUniversity-4365.image priorSource: 18822515!

----STARTUP---- (12 November 2020 20:13:59) as C:\Users\FACU PC\Documents\Clases Virtuales\Cosas IS 1\Cuis University\CuisUniversity-4365.image!


Object subclass: #AccountOperations
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountOperations category: #'Portfolio-Solucion' stamp: 'FG 11/12/2020 21:13:52'!
Object subclass: #AccountOperations
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountOperations subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: #'Portfolio-Solucion' stamp: 'FG 11/12/2020 21:14:04'!
AccountOperations subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountOperations subclass: #TransferenceNetValue
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceNetValue category: #'Portfolio-Solucion' stamp: 'FG 11/12/2020 21:14:29'!
AccountOperations subclass: #TransferenceNetValue
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #AccountOperations as: #AccountReports stamp: 'FG 11/12/2020 21:14:42'!
Smalltalk renameClassNamed: #AccountOperations as: #AccountReports!

!classDefinition: #AccountSummary category: #'Portfolio-Solucion' stamp: 'FG 11/12/2020 21:15:57'!
AccountReports subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'no messages' stamp: 'FG 11/12/2020 21:15:55'!
accountSummary
	
	|newAccountSummary|
	
	newAccountSummary := OrderedCollection new.
	
	account transactions do:[:aTransaction |
			(aTransaction isKindOf: Deposit) ifTrue:[newAccountSummary add: 'Dep�sito por ' , aTransaction value asString].
			(aTransaction isKindOf: Withdraw) ifTrue:[newAccountSummary add: 'Extracci�n por ' , aTransaction value asString].
			(aTransaction isKindOf: TransferenceWithdraw) ifTrue:[newAccountSummary add: 'Salida por transferencia de ' , aTransaction transference value asString].
			(aTransaction isKindOf: TransferenceDeposit) ifTrue:[newAccountSummary add: 'Entrada por transferencia de ' , aTransaction transference value asString].
		].
	
	newAccountSummary add: 'Balance = ' , account balance asString.
	
	^ newAccountSummary.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:18:09'!
summaryDeposit: aDeposit

	^ 'Dep�sito por ' , aDeposit value asString.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:18:31'!
summaryWithdraw: aWithdraw

	^ 'Dep�sito por ' , aWithdraw value asString.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:18:40' prior: 50919952!
summaryWithdraw: aWithdraw

	^ 'Extracci�n por ' , aWithdraw value asString.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:19:45'!
summaryTransferenceWithdraw: aTransferenceWithdraw

	^ 'Salida por transferencia de ' , aTransferenceWithdraw transference value asString.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:20:12'!
summaryTransferenceDeposit: aTransferenceDeposit

	^ 'Entrada por transferencia de ' , aTransferenceDeposit transference value asString.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:23:56' prior: 50919920!
accountSummary
	
	|newAccountSummary|
	
	newAccountSummary := OrderedCollection new.
	
	account transactions do:[:aTransaction | newAccountSummary add: (aTransaction makeOperation: self)].
	
	newAccountSummary add: 'Balance = ' , account balance asString.
	
	^ newAccountSummary.! !
!AccountTransaction methodsFor: 'nil' stamp: 'FG 11/12/2020 21:24:36'!
makeOperation: aOperation

	self subclassResponsibility.! !
!Deposit methodsFor: 'nil' stamp: 'FG 11/12/2020 21:25:21' overrides: 50919992!
makeOperation: aOperation

	^ aOperation operateWithDeposit! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:25:42'!
operateDeposit: aDeposit

	^ 'Dep�sito por ' , aDeposit value asString.! !

!methodRemoval: AccountSummary #summaryDeposit: stamp: 'FG 11/12/2020 21:25:42'!
summaryDeposit: aDeposit

	^ 'Dep�sito por ' , aDeposit value asString.!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:26:00'!
operateWithDeposit: aDeposit

	^ 'Dep�sito por ' , aDeposit value asString.! !

!methodRemoval: AccountSummary #operateDeposit: stamp: 'FG 11/12/2020 21:26:00'!
operateDeposit: aDeposit

	^ 'Dep�sito por ' , aDeposit value asString.!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:26:11'!
operateWithTransferenceDeposit: aTransferenceDeposit

	^ 'Entrada por transferencia de ' , aTransferenceDeposit transference value asString.! !

!methodRemoval: AccountSummary #summaryTransferenceDeposit: stamp: 'FG 11/12/2020 21:26:11'!
summaryTransferenceDeposit: aTransferenceDeposit

	^ 'Entrada por transferencia de ' , aTransferenceDeposit transference value asString.!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:26:24'!
operateWithTransferenceWithdraw: aTransferenceWithdraw

	^ 'Salida por transferencia de ' , aTransferenceWithdraw transference value asString.! !

!methodRemoval: AccountSummary #summaryTransferenceWithdraw: stamp: 'FG 11/12/2020 21:26:24'!
summaryTransferenceWithdraw: aTransferenceWithdraw

	^ 'Salida por transferencia de ' , aTransferenceWithdraw transference value asString.!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:26:33'!
operateWithWithdraw: aWithdraw

	^ 'Extracci�n por ' , aWithdraw value asString.! !

!methodRemoval: AccountSummary #summaryWithdraw: stamp: 'FG 11/12/2020 21:26:33'!
summaryWithdraw: aWithdraw

	^ 'Extracci�n por ' , aWithdraw value asString.!
!AccountReports methodsFor: 'nil' stamp: 'FG 11/12/2020 21:26:54'!
operateWithDeposit
	self subclassResponsibility.! !
!AccountReports methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:27:00'!
operateWithWithdraw
	self subclassResponsibility.! !
!AccountReports methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:27:06'!
operateWithTransferenceDeposit
	self subclassResponsibility.! !
!AccountReports methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:27:13'!
operateWithTransferenceWithdraw
	self subclassResponsibility.! !
!TransferenceDeposit methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:27:46' overrides: 50919992!
makeOperation: aOperation

	^ aOperation operateWithTransferenceDeposit. ! !
!TransferenceWithdraw methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:28:19' overrides: 50919992!
makeOperation: aOperation

	^ aOperation operateWithTransferenceWithdraw. ! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:28:45' prior: 50919997 overrides: 50919992!
makeOperation: aOperation

	^ aOperation operateWithDeposit: self.! !
!TransferenceDeposit methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:28:57' prior: 50920083 overrides: 50919992!
makeOperation: aOperation

	^ aOperation operateWithTransferenceDeposit: self. ! !
!TransferenceWithdraw methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:29:03' prior: 50920089 overrides: 50919992!
makeOperation: aOperation

	^ aOperation operateWithTransferenceWithdraw: self. ! !
!Withdraw methodsFor: 'nil' stamp: 'FG 11/12/2020 21:29:47' overrides: 50919992!
makeOperation: anOperation

	^ anOperation operateWithWithdraw: self.! !
!AccountReports methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:29:58'!
operateWithDeposit: aDeposit
	self subclassResponsibility.! !

!methodRemoval: AccountReports #operateWithDeposit stamp: 'FG 11/12/2020 21:30:00'!
operateWithDeposit
	self subclassResponsibility.!
!AccountReports methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:30:30'!
operateWithTransferenceDeposit: aTransferenceDeposit
	self subclassResponsibility.! !

!methodRemoval: AccountReports #operateWithTransferenceDeposit stamp: 'FG 11/12/2020 21:30:32'!
operateWithTransferenceDeposit
	self subclassResponsibility.!
!AccountReports methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:30:40'!
operateWithTransferenceWithdraw: aTransfereneWithdraw
	self subclassResponsibility.! !

!methodRemoval: AccountReports #operateWithTransferenceWithdraw stamp: 'FG 11/12/2020 21:30:42'!
operateWithTransferenceWithdraw
	self subclassResponsibility.!
!AccountReports methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:30:48'!
operateWithWithdraw: aWithdraw
	self subclassResponsibility.! !

!methodRemoval: AccountReports #operateWithWithdraw stamp: 'FG 11/12/2020 21:30:50'!
operateWithWithdraw
	self subclassResponsibility.!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:32:00' prior: 50919117!
test01

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	report := OrderedCollection new.
	report add: 'Balance = 0'.
	
	self assert: (AccountSummary of: receptiveAccount) accountSummary equals: report. 
	
	 ! !
!AccountSummary class methodsFor: 'nil' stamp: 'FG 11/12/2020 21:32:13'!
of: anAccount
 	^ self new initializeWith: anAccount.
	
	! !
!AccountSummary methodsFor: 'nil' stamp: 'FG 11/12/2020 21:32:30'!
initializeWith: anAccount
	account := anAccount.! !

!testRun: #ReportTest #test01 stamp: 'FG 11/12/2020 21:32:42'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:32:52' prior: 50919153!
test02

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	Deposit register: 100 on: receptiveAccount.
	
	report := OrderedCollection new.
	report add: 'Dep�sito por 100'.
	report add: 'Balance = 100'.
	
	self assert: (AccountSummary of: receptiveAccount) accountSummary equals: report. 
	
	 ! !

!testRun: #ReportTest #test02 stamp: 'FG 11/12/2020 21:32:55'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:33:03' prior: 50919168!
test03

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	Withdraw register: 100 on: receptiveAccount.
	
	report := OrderedCollection new.
	report add: 'Extracci�n por 100'.
	report add: 'Balance = -100'.
	
	self assert: (AccountSummary of: receptiveAccount) accountSummary equals: report. 
	
	 ! !

!testRun: #ReportTest #test03 stamp: 'FG 11/12/2020 21:33:05'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:33:26' prior: 50919221!
test04

	| reportSender reportReceiver receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := ReceptiveAccount new.
	receptiveAccountReceiver := ReceptiveAccount new.
	Transference register: 100 from: receptiveAccountSender  to: receptiveAccountReceiver.
	
	reportSender := OrderedCollection new.
	reportSender add: 'Salida por transferencia de 100'.
	reportSender add: 'Balance = -100'.
	
	reportReceiver := OrderedCollection new.
	reportReceiver add: 'Entrada por transferencia de 100'.
	reportReceiver add: 'Balance = 100'.
	
		
	self assert: (AccountSummary of: receptiveAccountSender) accountSummary equals: reportSender.
	self assert: (AccountSummary of: receptiveAccountReceiver) accountSummary equals: reportReceiver.
	 
	
	 ! !

!testRun: #ReportTest #test04 stamp: 'FG 11/12/2020 21:33:27'!
PASSED!

!classDefinition: #TransferenceNetValue category: #'Portfolio-Solucion' stamp: 'FG 11/12/2020 21:33:53'!
AccountReports subclass: #TransferenceNetValue
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferenceNetValue methodsFor: 'nil' stamp: 'FG 11/12/2020 21:33:52'!
transferenceNetValueReport
	
	| transferenceNetValue | 
	
	transferenceNetValue := 0.
	
	account  transactions do:[:aTransaction | 
			((aTransaction isKindOf: TransferenceDeposit) or: [aTransaction isKindOf: TransferenceWithdraw]) 
				ifTrue:[transferenceNetValue := aTransaction affectBalance: transferenceNetValue.].
		].
	
	^ transferenceNetValue.! !
!TransferenceNetValue methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:34:19' prior: 50920251!
transferenceNetValueReport
	
	| transferenceNetValue | 
	
	transferenceNetValue := 0.
	
	account  transactions do:[:aTransaction | 
			((aTransaction isKindOf: TransferenceDeposit) or: [aTransaction isKindOf: TransferenceWithdraw]) 
				ifTrue:[transferenceNetValue := aTransaction affectBalance: transferenceNetValue.].
	].
	
	^ transferenceNetValue.! !
!TransferenceNetValue methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:34:30'!
initializeWith: anAccount
	account := anAccount.! !
!TransferenceNetValue class methodsFor: 'no messages' stamp: 'FG 11/12/2020 21:34:39'!
of: anAccount
 	^ self new initializeWith: anAccount.
	
	! !
!TransferenceNetValue methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:36:01' prior: 50920266!
transferenceNetValueReport
	
	| transferenceNetValue | 
	
	transferenceNetValue := 0.
	
	account  transactions do:[:aTransaction | transferenceNetValue := aTransaction makeOperation: self ].
			"((aTransaction isKindOf: TransferenceDeposit) or: [aTransaction isKindOf: TransferenceWithdraw]) 
				ifTrue:[transferenceNetValue := aTransaction affectBalance: transferenceNetValue.].
	]."
	
	^ transferenceNetValue.! !
!TransferenceNetValue methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:36:19' overrides: 50920120!
operateWithDeposit: aDeposit
! !
!TransferenceNetValue methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:36:34' overrides: 50920151!
operateWithWithdraw: aWithdraw
! !
!TransferenceNetValue methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:37:11' overrides: 50920140!
operateWithTransferenceWithdraw: aTransferenceWithdraw

	^ aTransferenceWithdraw affectBalance: 0.! !
!TransferenceNetValue methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:37:32' overrides: 50920129!
operateWithTransferenceDeposit: aTransferenceDeposit

	^ aTransferenceDeposit affectBalance: 0.! !
!TransferenceNetValue methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:38:14' prior: 50920291!
transferenceNetValueReport
	
	| transferenceNetValue | 
	
	transferenceNetValue := 0.
	
	account transactions do:[:aTransaction | transferenceNetValue := transferenceNetValue + aTransaction makeOperation: self ].
			"((aTransaction isKindOf: TransferenceDeposit) or: [aTransaction isKindOf: TransferenceWithdraw]) 
				ifTrue:[transferenceNetValue := aTransaction affectBalance: transferenceNetValue.].
	]."
	
	^ transferenceNetValue.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:39:02' prior: 50919677!
test05

	| receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := ReceptiveAccount new.
	receptiveAccountReceiver := ReceptiveAccount new.
	
	Transference register: 100 from: receptiveAccountSender  to: receptiveAccountReceiver.
	
	self assert: (TransferenceNetValue of: receptiveAccountReceiver) transferenceNetValueReport equals: 100.
	self assert: (TransferenceNetValue of: receptiveAccountSender) transferenceNetValueReport equals: -100.
	 
	
	 ! !

!testRun: #ReportTest #test05 stamp: 'FG 11/12/2020 21:39:05'!
ERROR!

!testRun: #ReportTest #test05 stamp: 'FG 11/12/2020 21:39:05'!
ERROR!

!testRun: #ReportTest #test05 stamp: 'FG 11/12/2020 21:39:38'!
ERROR!

!testRun: #ReportTest #test05 stamp: 'FG 11/12/2020 21:40:00'!
ERROR!
!TransferenceNetValue methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:40:34' prior: 50920332!
transferenceNetValueReport
	
	| transferenceNetValue | 
	
	transferenceNetValue := 0.
	
	account transactions do:[:aTransaction | transferenceNetValue := transferenceNetValue + (aTransaction makeOperation: self) ].
			"((aTransaction isKindOf: TransferenceDeposit) or: [aTransaction isKindOf: TransferenceWithdraw]) 
				ifTrue:[transferenceNetValue := aTransaction affectBalance: transferenceNetValue.].
	]."
	
	^ transferenceNetValue.! !

!testRun: #ReportTest #test05 stamp: 'FG 11/12/2020 21:40:41'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'FG 11/12/2020 21:40:43'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:41:03' prior: 50919637!
test06

	| receptiveAccountWithDeposit receptiveAccountWithWithdraw |
	
	receptiveAccountWithDeposit := ReceptiveAccount new.
	receptiveAccountWithWithdraw := ReceptiveAccount new.
	
	Deposit register: 100 on: receptiveAccountWithDeposit.
	Withdraw register: 50 on: receptiveAccountWithWithdraw.
	
	self assert: (TransferenceNetValue of: receptiveAccountWithDeposit) transferenceNetValueReport equals: 0.
	self assert: (TransferenceNetValue of: receptiveAccountWithWithdraw) transferenceNetValueReport equals: 0.
	 
	
	 ! !

!testRun: #ReportTest #test06 stamp: 'FG 11/12/2020 21:41:07'!
ERROR!

!testRun: #ReportTest #test06 stamp: 'FG 11/12/2020 21:41:07'!
ERROR!
!TransferenceNetValue methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:41:47' prior: 50920308 overrides: 50920120!
operateWithDeposit: aDeposit
	^ 0
! !
!TransferenceNetValue methodsFor: 'as yet unclassified' stamp: 'FG 11/12/2020 21:41:55' prior: 50920313 overrides: 50920151!
operateWithWithdraw: aWithdraw
 	^ 0.
! !

!testRun: #ReportTest #test06 stamp: 'FG 11/12/2020 21:42:06'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'FG 11/12/2020 21:42:08'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'FG 11/12/2020 21:42:08'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'FG 11/12/2020 21:42:08'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'FG 11/12/2020 21:42:08'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'FG 11/12/2020 21:42:08'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'FG 11/12/2020 21:42:08'!
PASSED!

!classRemoval: #Report stamp: 'FG 11/12/2020 21:42:13'!
Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #ReportTest as: #AccountReportsTest stamp: 'FG 11/12/2020 21:43:00'!
Smalltalk renameClassNamed: #ReportTest as: #AccountReportsTest!

----QUIT----(12 November 2020 22:04:43) CuisUniversity-4365.image priorSource: 18822752!

----STARTUP---- (14 November 2020 10:36:50) as C:\Users\FACU PC\Documents\Clases Virtuales\Cosas IS 1\Cuis University\CuisUniversity-4365.image!


Object subclass: #AccountReports
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountReports subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: #'Portfolio-Solucion' stamp: 'FG 11/14/2020 11:53:41'!
AccountReports subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountReports subclass: #TransferenceNetValue
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceNetValue category: #'Portfolio-Solucion' stamp: 'FG 11/14/2020 11:53:46'!
AccountReports subclass: #TransferenceNetValue
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #AccountReports
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountReports category: #'Portfolio-Solucion' stamp: 'FG 11/14/2020 11:53:51'!
Object subclass: #AccountReports
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountReports methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 11:54:07'!
initializeWith: anAccount
	account := anAccount.! !

!methodRemoval: AccountSummary #initializeWith: stamp: 'FG 11/14/2020 11:54:11'!
initializeWith: anAccount
	account := anAccount.!

!methodRemoval: TransferenceNetValue #initializeWith: stamp: 'FG 11/14/2020 11:54:14'!
initializeWith: anAccount
	account := anAccount.!
!AccountReports class methodsFor: 'nil' stamp: 'FG 11/14/2020 11:54:33'!
of: anAccount
 	^ self new initializeWith: anAccount.
	
	! !

!methodRemoval: AccountSummary class #of: stamp: 'FG 11/14/2020 11:54:37'!
of: anAccount
 	^ self new initializeWith: anAccount.
	
	!

!methodRemoval: TransferenceNetValue class #of: stamp: 'FG 11/14/2020 11:54:39'!
of: anAccount
 	^ self new initializeWith: anAccount.
	
	!

!testRun: #AccountReportsTest #test01 stamp: 'FG 11/14/2020 11:54:46'!
PASSED!

!testRun: #AccountReportsTest #test02 stamp: 'FG 11/14/2020 11:54:46'!
PASSED!

!testRun: #AccountReportsTest #test03 stamp: 'FG 11/14/2020 11:54:46'!
PASSED!

!testRun: #AccountReportsTest #test04 stamp: 'FG 11/14/2020 11:54:46'!
PASSED!

!testRun: #AccountReportsTest #test05 stamp: 'FG 11/14/2020 11:54:46'!
PASSED!

!testRun: #AccountReportsTest #test06 stamp: 'FG 11/14/2020 11:54:46'!
PASSED!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:02:48'!
reportDeposit: aDeposit

	^ 'Dep�sito por ' , aDeposit value asString.! !
!AccountReports methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:02:48'!
reportDeposit: aDeposit
	self subclassResponsibility.! !
!TransferenceNetValue methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:02:48' overrides: 50920557!
reportDeposit: aDeposit
	^ 0
! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:02:48' prior: 50920095 overrides: 50919992!
makeOperation: aOperation

	^ aOperation reportDeposit: self.! !

!methodRemoval: AccountSummary #operateWithDeposit: stamp: 'FG 11/14/2020 12:02:48'!
operateWithDeposit: aDeposit

	^ 'Dep�sito por ' , aDeposit value asString.!

!methodRemoval: AccountReports #operateWithDeposit: stamp: 'FG 11/14/2020 12:02:48'!
operateWithDeposit: aDeposit
	self subclassResponsibility.!

!methodRemoval: TransferenceNetValue #operateWithDeposit: stamp: 'FG 11/14/2020 12:02:48'!
operateWithDeposit: aDeposit
	^ 0
!
!AccountReports methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:03:15'!
reportWithdraw: aWithdraw
	self subclassResponsibility.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:03:15' overrides: 50920587!
reportWithdraw: aWithdraw

	^ 'Extracci�n por ' , aWithdraw value asString.! !
!TransferenceNetValue methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:03:15' overrides: 50920587!
reportWithdraw: aWithdraw
 	^ 0.
! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:03:15' prior: 50920115 overrides: 50919992!
makeOperation: anOperation

	^ anOperation reportWithdraw: self.! !

!methodRemoval: AccountReports #operateWithWithdraw: stamp: 'FG 11/14/2020 12:03:15'!
operateWithWithdraw: aWithdraw
	self subclassResponsibility.!

!methodRemoval: AccountSummary #operateWithWithdraw: stamp: 'FG 11/14/2020 12:03:15'!
operateWithWithdraw: aWithdraw

	^ 'Extracci�n por ' , aWithdraw value asString.!

!methodRemoval: TransferenceNetValue #operateWithWithdraw: stamp: 'FG 11/14/2020 12:03:15'!
operateWithWithdraw: aWithdraw
 	^ 0.
!
!TransferenceNetValue methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:03:32'!
reportTransferenceWithdraw: aTransferenceWithdraw

	^ aTransferenceWithdraw affectBalance: 0.! !
!AccountReports methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:03:32'!
reportTransferenceWithdraw: aTransfereneWithdraw
	self subclassResponsibility.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:03:32' overrides: 50920629!
reportTransferenceWithdraw: aTransferenceWithdraw

	^ 'Salida por transferencia de ' , aTransferenceWithdraw transference value asString.! !
!TransferenceWithdraw methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:03:32' prior: 50920109 overrides: 50919992!
makeOperation: aOperation

	^ aOperation reportTransferenceWithdraw: self. ! !

!methodRemoval: TransferenceNetValue #operateWithTransferenceWithdraw: stamp: 'FG 11/14/2020 12:03:32'!
operateWithTransferenceWithdraw: aTransferenceWithdraw

	^ aTransferenceWithdraw affectBalance: 0.!

!methodRemoval: AccountReports #operateWithTransferenceWithdraw: stamp: 'FG 11/14/2020 12:03:32'!
operateWithTransferenceWithdraw: aTransfereneWithdraw
	self subclassResponsibility.!

!methodRemoval: AccountSummary #operateWithTransferenceWithdraw: stamp: 'FG 11/14/2020 12:03:32'!
operateWithTransferenceWithdraw: aTransferenceWithdraw

	^ 'Salida por transferencia de ' , aTransferenceWithdraw transference value asString.!
!AccountReports methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:03:50'!
reportTransferenceDeposit: aTransferenceDeposit
	self subclassResponsibility.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:03:50' overrides: 50920669!
reportTransferenceDeposit: aTransferenceDeposit

	^ 'Entrada por transferencia de ' , aTransferenceDeposit transference value asString.! !
!TransferenceNetValue methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:03:50' overrides: 50920669!
reportTransferenceDeposit: aTransferenceDeposit

	^ aTransferenceDeposit affectBalance: 0.! !
!TransferenceDeposit methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:03:50' prior: 50920102 overrides: 50919992!
makeOperation: aOperation

	^ aOperation reportTransferenceDeposit: self. ! !

!methodRemoval: AccountReports #operateWithTransferenceDeposit: stamp: 'FG 11/14/2020 12:03:50'!
operateWithTransferenceDeposit: aTransferenceDeposit
	self subclassResponsibility.!

!methodRemoval: AccountSummary #operateWithTransferenceDeposit: stamp: 'FG 11/14/2020 12:03:50'!
operateWithTransferenceDeposit: aTransferenceDeposit

	^ 'Entrada por transferencia de ' , aTransferenceDeposit transference value asString.!

!methodRemoval: TransferenceNetValue #operateWithTransferenceDeposit: stamp: 'FG 11/14/2020 12:03:50'!
operateWithTransferenceDeposit: aTransferenceDeposit

	^ aTransferenceDeposit affectBalance: 0.!
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:08:06'!
makeReport: aOperation

	self subclassResponsibility.! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:08:06' overrides: 50920715!
makeReport: aOperation

	^ aOperation reportDeposit: self.! !
!TransferenceWithdraw methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:08:06' overrides: 50920715!
makeReport: aOperation

	^ aOperation reportTransferenceWithdraw: self. ! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:08:07' overrides: 50920715!
makeReport: anOperation

	^ anOperation reportWithdraw: self.! !
!TransferenceDeposit methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:08:07' overrides: 50920715!
makeReport: aOperation

	^ aOperation reportTransferenceDeposit: self. ! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:08:07' prior: 50919980!
accountSummary
	
	|newAccountSummary|
	
	newAccountSummary := OrderedCollection new.
	
	account transactions do:[:aTransaction | newAccountSummary add: (aTransaction makeReport: self)].
	
	newAccountSummary add: 'Balance = ' , account balance asString.
	
	^ newAccountSummary.! !
!TransferenceNetValue methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:08:07' prior: 50920377!
transferenceNetValueReport
	
	| transferenceNetValue | 
	
	transferenceNetValue := 0.
	
	account transactions do:[:aTransaction | transferenceNetValue := transferenceNetValue + (aTransaction makeReport: self) ].
			"((aTransaction isKindOf: TransferenceDeposit) or: [aTransaction isKindOf: TransferenceWithdraw]) 
				ifTrue:[transferenceNetValue := aTransaction affectBalance: transferenceNetValue.].
	]."
	
	^ transferenceNetValue.! !

!methodRemoval: AccountTransaction #makeOperation: stamp: 'FG 11/14/2020 12:08:07'!
makeOperation: aOperation

	self subclassResponsibility.!

!methodRemoval: Deposit #makeOperation: stamp: 'FG 11/14/2020 12:08:07'!
makeOperation: aOperation

	^ aOperation reportDeposit: self.!

!methodRemoval: TransferenceWithdraw #makeOperation: stamp: 'FG 11/14/2020 12:08:07'!
makeOperation: aOperation

	^ aOperation reportTransferenceWithdraw: self. !

!methodRemoval: Withdraw #makeOperation: stamp: 'FG 11/14/2020 12:08:07'!
makeOperation: anOperation

	^ anOperation reportWithdraw: self.!

!methodRemoval: TransferenceDeposit #makeOperation: stamp: 'FG 11/14/2020 12:08:07'!
makeOperation: aOperation

	^ aOperation reportTransferenceDeposit: self. !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:08:34' prior: 50920715!
makeReport: aReport

	self subclassResponsibility.! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:08:50' prior: 50920720 overrides: 50920798!
makeReport: aReport

	^ aReport reportDeposit: self.! !
!TransferenceDeposit methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:09:07' prior: 50920738 overrides: 50920798!
makeReport: aReport

	^ aReport reportTransferenceDeposit: self. ! !
!TransferenceWithdraw methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:09:16' prior: 50920726 overrides: 50920798!
makeReport: aReport

	^ aReport reportTransferenceWithdraw: self. ! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:09:25' prior: 50920732 overrides: 50920798!
makeReport: aReport

	^ aReport reportWithdraw: self.! !
!TransferenceWithdraw methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:12:23' overrides: 50917901!
value
	^ transference value.! !

!methodRemoval: TransferenceWithdraw #value stamp: 'FG 11/14/2020 12:12:35'!
value
	^ transference value.!
!TransferenceComponents methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:12:51' overrides: 50917901!
value 
	^ transference value! !
!TransferenceComponents methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:12:54' prior: 50920837 overrides: 50917901!
value 
	^ transference value.! !
!TransferenceComponents methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:13:25'!
affectBalance 
	self subclassResponsibility.! !
!TransferenceComponents methodsFor: 'nil' stamp: 'FG 11/14/2020 12:13:53' overrides: 50920798!
makeReport: aReport
	self subclassResponsibility.! !
!TransferenceDeposit methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:14:13' prior: 50918634 overrides: 50917905!
affectBalance: aBalance

	^aBalance + self value.! !
!TransferenceWithdraw methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:14:29' prior: 50918640 overrides: 50917905!
affectBalance: aBalance

	^aBalance - self value. ! !

TestCase subclass: #PortfolioExerciseTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioExerciseTests category: #'Portfolio-Solucion' stamp: 'FG 11/14/2020 12:21:01'!
TestCase subclass: #PortfolioExerciseTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

PortfolioExerciseTests subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTest category: #'Portfolio-Solucion' stamp: 'FG 11/14/2020 12:21:11'!
PortfolioExerciseTests subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

PortfolioExerciseTests subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccountTest category: #'Portfolio-Solucion' stamp: 'FG 11/14/2020 12:21:18'!
PortfolioExerciseTests subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

PortfolioExerciseTests subclass: #TransferenceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenceTest category: #'Portfolio-Solucion' stamp: 'FG 11/14/2020 12:21:30'!
PortfolioExerciseTests subclass: #TransferenceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

PortfolioExerciseTests subclass: #AccountReportsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountReportsTest category: #'Portfolio-Solucion' stamp: 'FG 11/14/2020 12:22:01'!
PortfolioExerciseTests subclass: #AccountReportsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #AccountReportsTest #test01 stamp: 'FG 11/14/2020 12:22:14'!
PASSED!

!testRun: #AccountReportsTest #test02 stamp: 'FG 11/14/2020 12:22:14'!
PASSED!

!testRun: #AccountReportsTest #test03 stamp: 'FG 11/14/2020 12:22:14'!
PASSED!

!testRun: #AccountReportsTest #test04 stamp: 'FG 11/14/2020 12:22:14'!
PASSED!

!testRun: #AccountReportsTest #test05 stamp: 'FG 11/14/2020 12:22:14'!
PASSED!

!testRun: #AccountReportsTest #test06 stamp: 'FG 11/14/2020 12:22:14'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'FG 11/14/2020 12:22:16'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'FG 11/14/2020 12:22:16'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'FG 11/14/2020 12:22:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'FG 11/14/2020 12:22:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'FG 11/14/2020 12:22:16'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'FG 11/14/2020 12:22:16'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'FG 11/14/2020 12:22:16'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'FG 11/14/2020 12:22:16'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'FG 11/14/2020 12:22:16'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'FG 11/14/2020 12:22:16'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'FG 11/14/2020 12:22:16'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'FG 11/14/2020 12:22:16'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'FG 11/14/2020 12:22:16'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'FG 11/14/2020 12:22:16'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'FG 11/14/2020 12:22:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'FG 11/14/2020 12:22:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'FG 11/14/2020 12:22:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'FG 11/14/2020 12:22:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'FG 11/14/2020 12:22:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'FG 11/14/2020 12:22:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'FG 11/14/2020 12:22:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'FG 11/14/2020 12:22:18'!
PASSED!

!testRun: #TransferenceTest #test01 stamp: 'FG 11/14/2020 12:22:20'!
PASSED!

!testRun: #TransferenceTest #test02 stamp: 'FG 11/14/2020 12:22:20'!
PASSED!

!testRun: #TransferenceTest #test03 stamp: 'FG 11/14/2020 12:22:20'!
PASSED!

!testRun: #TransferenceTest #test04 stamp: 'FG 11/14/2020 12:22:20'!
PASSED!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:42:04'!
test01CreateATransferenceBetweenTwoAccountsShouldAffectTheirBalances

	| receptiveAccountReceiver receptiveAccountSender |
	
	receptiveAccountReceiver := ReceptiveAccount new.
	receptiveAccountSender := ReceptiveAccount new.
	
	Transference register: 100 from: receptiveAccountSender to: receptiveAccountReceiver.
	
	self assert: receptiveAccountSender balance equals: -100.
	self assert: receptiveAccountReceiver balance equals: 100.! !

!methodRemoval: TransferenceTest #test01 stamp: 'FG 11/14/2020 12:42:09'!
test01

	| receptiveAccountReceiver receptiveAccountSender |
	
	receptiveAccountReceiver := ReceptiveAccount new.
	receptiveAccountSender := ReceptiveAccount new.
	
	Transference register: 100 from: receptiveAccountSender to: receptiveAccountReceiver.
	
	self assert: receptiveAccountSender balance equals: -100.
	self assert: receptiveAccountReceiver balance equals: 100.!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:46:54'!
test02CanGoFromTransferenceToTransferenceLegsAndViceVersa

	| receptiveAccountReceiver receptiveAccountSender transference |
	
	receptiveAccountReceiver := ReceptiveAccount new.
	receptiveAccountSender := ReceptiveAccount new.
	
	transference := 	Transference register: 100 from: receptiveAccountSender to: receptiveAccountReceiver.
	
	self assert: receptiveAccountReceiver transactions includes: transference transferenceDeposit.
	self assert: receptiveAccountSender transactions includes: transference transferenceWithdraw.
	
	self assert: transference equals: transference transferenceDeposit transference.
	self assert: transference equals: transference transferenceWithdraw transference.
	! !

!methodRemoval: TransferenceTest #test02 stamp: 'FG 11/14/2020 12:46:57'!
test02

	| receptiveAccountReceiver receptiveAccountSender transference |
	
	receptiveAccountReceiver := ReceptiveAccount new.
	receptiveAccountSender := ReceptiveAccount new.
	
	transference := 	Transference register: 100 from: receptiveAccountSender to: receptiveAccountReceiver.
	
	self assert: receptiveAccountReceiver transactions includes: transference transferenceDeposit.
	self assert: receptiveAccountSender transactions includes: transference transferenceWithdraw.
	
	self assert: transference equals: transference transferenceDeposit transference.
	self assert: transference equals: transference transferenceWithdraw transference.
	!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:47:57'!
test03CantTransferToTheSameAccount

	| receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	
	
	self should: [Transference register: 1  from: receptiveAccount to: receptiveAccount ] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: Transference cantTransferToTheSameAccount]
	! !

!methodRemoval: TransferenceTest #test03 stamp: 'FG 11/14/2020 12:48:01'!
test03

	| receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	
	
	self should: [Transference register: 1  from: receptiveAccount to: receptiveAccount ] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: Transference cantTransferToTheSameAccount]
	!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:48:18'!
test01TransferingBetweenTwoAccountsShouldAffectTheirBalances

	| receptiveAccountReceiver receptiveAccountSender |
	
	receptiveAccountReceiver := ReceptiveAccount new.
	receptiveAccountSender := ReceptiveAccount new.
	
	Transference register: 100 from: receptiveAccountSender to: receptiveAccountReceiver.
	
	self assert: receptiveAccountSender balance equals: -100.
	self assert: receptiveAccountReceiver balance equals: 100.! !

!methodRemoval: TransferenceTest #test01CreateATransferenceBetweenTwoAccountsShouldAffectTheirBalances stamp: 'FG 11/14/2020 12:48:23'!
test01CreateATransferenceBetweenTwoAccountsShouldAffectTheirBalances

	| receptiveAccountReceiver receptiveAccountSender |
	
	receptiveAccountReceiver := ReceptiveAccount new.
	receptiveAccountSender := ReceptiveAccount new.
	
	Transference register: 100 from: receptiveAccountSender to: receptiveAccountReceiver.
	
	self assert: receptiveAccountSender balance equals: -100.
	self assert: receptiveAccountReceiver balance equals: 100.!
!TransferenceTest methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:48:37'!
test04CantTransferANonPositiveAmount

	| receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := ReceptiveAccount new.
	receptiveAccountReceiver := ReceptiveAccount new.
	
	self should: [Transference register: -100  from: receptiveAccountSender to: receptiveAccountReceiver ] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: Transference cantTransferNonPositiveAmount].
	
	self should: [Transference register: 0  from: receptiveAccountSender to: receptiveAccountReceiver ] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: Transference cantTransferNonPositiveAmount]
	! !

!methodRemoval: TransferenceTest #test04 stamp: 'FG 11/14/2020 12:48:39'!
test04

	| receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := ReceptiveAccount new.
	receptiveAccountReceiver := ReceptiveAccount new.
	
	self should: [Transference register: -100  from: receptiveAccountSender to: receptiveAccountReceiver ] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: Transference cantTransferNonPositiveAmount].
	
	self should: [Transference register: 0  from: receptiveAccountSender to: receptiveAccountReceiver ] 
		raisingAnErrorAndAsserting: [:anError | self assert: anError messageText equals: Transference cantTransferNonPositiveAmount]
	!
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:53:19'!
test01AnAccountSummaryOfANewAccountShouldOnlyBeHisBalance

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	report := OrderedCollection new.
	report add: 'Balance = 0'.
	
	self assert: (AccountSummary of: receptiveAccount) accountSummary equals: report. 
	
	 ! !

!methodRemoval: AccountReportsTest #test01 stamp: 'FG 11/14/2020 12:53:21'!
test01

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	report := OrderedCollection new.
	report add: 'Balance = 0'.
	
	self assert: (AccountSummary of: receptiveAccount) accountSummary equals: report. 
	
	 !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:54:02'!
test02AnAccountSummaryShouldDisplayDeposits

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	Deposit register: 100 on: receptiveAccount.
	
	report := OrderedCollection new.
	report add: 'Dep�sito por 100'.
	report add: 'Balance = 100'.
	
	self assert: (AccountSummary of: receptiveAccount) accountSummary equals: report. 
	
	 ! !

!methodRemoval: AccountReportsTest #test02AnAccountSummaryShouldDisplayDeposits stamp: 'FG 11/14/2020 12:54:04'!
test02AnAccountSummaryShouldDisplayDeposits

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	Deposit register: 100 on: receptiveAccount.
	
	report := OrderedCollection new.
	report add: 'Dep�sito por 100'.
	report add: 'Balance = 100'.
	
	self assert: (AccountSummary of: receptiveAccount) accountSummary equals: report. 
	
	 !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:54:21'!
test02AnAccountSummaryShouldDisplayDeposits

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	Deposit register: 100 on: receptiveAccount.
	
	report := OrderedCollection new.
	report add: 'Dep�sito por 100'.
	report add: 'Balance = 100'.
	
	self assert: (AccountSummary of: receptiveAccount) accountSummary equals: report. 
	
	 ! !

!methodRemoval: AccountReportsTest #test02 stamp: 'FG 11/14/2020 12:54:25'!
test02

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	Deposit register: 100 on: receptiveAccount.
	
	report := OrderedCollection new.
	report add: 'Dep�sito por 100'.
	report add: 'Balance = 100'.
	
	self assert: (AccountSummary of: receptiveAccount) accountSummary equals: report. 
	
	 !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:54:43'!
test03AnAccountSummaryShouldDisplayWithdraws

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	Withdraw register: 100 on: receptiveAccount.
	
	report := OrderedCollection new.
	report add: 'Extracci�n por 100'.
	report add: 'Balance = -100'.
	
	self assert: (AccountSummary of: receptiveAccount) accountSummary equals: report. 
	
	 ! !

!methodRemoval: AccountReportsTest #test03 stamp: 'FG 11/14/2020 12:54:46'!
test03

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	Withdraw register: 100 on: receptiveAccount.
	
	report := OrderedCollection new.
	report add: 'Extracci�n por 100'.
	report add: 'Balance = -100'.
	
	self assert: (AccountSummary of: receptiveAccount) accountSummary equals: report. 
	
	 !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 12:55:20'!
test04ATransferenceShouldBeDisplayedInBothParticipantsAccountSummaries

	| reportSender reportReceiver receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := ReceptiveAccount new.
	receptiveAccountReceiver := ReceptiveAccount new.
	Transference register: 100 from: receptiveAccountSender  to: receptiveAccountReceiver.
	
	reportSender := OrderedCollection new.
	reportSender add: 'Salida por transferencia de 100'.
	reportSender add: 'Balance = -100'.
	
	reportReceiver := OrderedCollection new.
	reportReceiver add: 'Entrada por transferencia de 100'.
	reportReceiver add: 'Balance = 100'.
	
		
	self assert: (AccountSummary of: receptiveAccountSender) accountSummary equals: reportSender.
	self assert: (AccountSummary of: receptiveAccountReceiver) accountSummary equals: reportReceiver.
	 
	
	 ! !

!methodRemoval: AccountReportsTest #test04 stamp: 'FG 11/14/2020 12:55:24'!
test04

	| reportSender reportReceiver receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := ReceptiveAccount new.
	receptiveAccountReceiver := ReceptiveAccount new.
	Transference register: 100 from: receptiveAccountSender  to: receptiveAccountReceiver.
	
	reportSender := OrderedCollection new.
	reportSender add: 'Salida por transferencia de 100'.
	reportSender add: 'Balance = -100'.
	
	reportReceiver := OrderedCollection new.
	reportReceiver add: 'Entrada por transferencia de 100'.
	reportReceiver add: 'Balance = 100'.
	
		
	self assert: (AccountSummary of: receptiveAccountSender) accountSummary equals: reportSender.
	self assert: (AccountSummary of: receptiveAccountReceiver) accountSummary equals: reportReceiver.
	 
	
	 !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 14:44:49'!
test05ATransfereneShouldAffectTransferenceNetValueReportForBothAccounts

	| receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := ReceptiveAccount new.
	receptiveAccountReceiver := ReceptiveAccount new.
	
	Transference register: 100 from: receptiveAccountSender  to: receptiveAccountReceiver.
	
	self assert: (TransferenceNetValue of: receptiveAccountReceiver) transferenceNetValueReport equals: 100.
	self assert: (TransferenceNetValue of: receptiveAccountSender) transferenceNetValueReport equals: -100.
	 
	
	 ! !

!methodRemoval: AccountReportsTest #test05 stamp: 'FG 11/14/2020 14:44:51'!
test05

	| receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := ReceptiveAccount new.
	receptiveAccountReceiver := ReceptiveAccount new.
	
	Transference register: 100 from: receptiveAccountSender  to: receptiveAccountReceiver.
	
	self assert: (TransferenceNetValue of: receptiveAccountReceiver) transferenceNetValueReport equals: 100.
	self assert: (TransferenceNetValue of: receptiveAccountSender) transferenceNetValueReport equals: -100.
	 
	
	 !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 14:44:57'!
test05ATransferenceShouldAffectTransferenceNetValueReportForBothAccounts

	| receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := ReceptiveAccount new.
	receptiveAccountReceiver := ReceptiveAccount new.
	
	Transference register: 100 from: receptiveAccountSender  to: receptiveAccountReceiver.
	
	self assert: (TransferenceNetValue of: receptiveAccountReceiver) transferenceNetValueReport equals: 100.
	self assert: (TransferenceNetValue of: receptiveAccountSender) transferenceNetValueReport equals: -100.
	 
	
	 ! !

!methodRemoval: AccountReportsTest #test05ATransfereneShouldAffectTransferenceNetValueReportForBothAccounts stamp: 'FG 11/14/2020 14:45:01'!
test05ATransfereneShouldAffectTransferenceNetValueReportForBothAccounts

	| receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := ReceptiveAccount new.
	receptiveAccountReceiver := ReceptiveAccount new.
	
	Transference register: 100 from: receptiveAccountSender  to: receptiveAccountReceiver.
	
	self assert: (TransferenceNetValue of: receptiveAccountReceiver) transferenceNetValueReport equals: 100.
	self assert: (TransferenceNetValue of: receptiveAccountSender) transferenceNetValueReport equals: -100.
	 
	
	 !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 14:45:47'!
test06ANonTransferenceTransactionShouldNotAffectTransferenceNetValueReport

	| receptiveAccountWithDeposit receptiveAccountWithWithdraw |
	
	receptiveAccountWithDeposit := ReceptiveAccount new.
	receptiveAccountWithWithdraw := ReceptiveAccount new.
	
	Deposit register: 100 on: receptiveAccountWithDeposit.
	Withdraw register: 50 on: receptiveAccountWithWithdraw.
	
	self assert: (TransferenceNetValue of: receptiveAccountWithDeposit) transferenceNetValueReport equals: 0.
	self assert: (TransferenceNetValue of: receptiveAccountWithWithdraw) transferenceNetValueReport equals: 0.
	 
	
	 ! !

!methodRemoval: AccountReportsTest #test06 stamp: 'FG 11/14/2020 14:45:50'!
test06

	| receptiveAccountWithDeposit receptiveAccountWithWithdraw |
	
	receptiveAccountWithDeposit := ReceptiveAccount new.
	receptiveAccountWithWithdraw := ReceptiveAccount new.
	
	Deposit register: 100 on: receptiveAccountWithDeposit.
	Withdraw register: 50 on: receptiveAccountWithWithdraw.
	
	self assert: (TransferenceNetValue of: receptiveAccountWithDeposit) transferenceNetValueReport equals: 0.
	self assert: (TransferenceNetValue of: receptiveAccountWithWithdraw) transferenceNetValueReport equals: 0.
	 
	
	 !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'FG 11/14/2020 15:17:33'!
accountSummary

	^ (AccountSummary of: transactions) accountSummary.! !
!ReceptiveAccount methodsFor: 'no clasificado' stamp: 'FG 11/14/2020 15:18:18' prior: 50921503!
accountSummary

	^ (AccountSummary of: transactions) accountSummary.! !
!AccountReports methodsFor: 'initialization' stamp: 'FG 11/14/2020 15:18:57' prior: 50920510!
initializeWith: aTransactionCollection
	account := aTransactionCollection.! !
!AccountReports class methodsFor: 'initialization' stamp: 'FG 11/14/2020 15:19:15' prior: 50920523!
of: aTransactionCollection
 	^ self new initializeWith: aTransactionCollection.
	
	! !

Object subclass: #AccountReports
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountReports category: #'Portfolio-Solucion' stamp: 'FG 11/14/2020 15:19:29'!
Object subclass: #AccountReports
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountReports methodsFor: 'initialization' stamp: 'FG 11/14/2020 15:19:35' prior: 50921515!
initializeWith: aTransactionCollection
	transactions := aTransactionCollection.! !
!AccountSummary methodsFor: 'account summary' stamp: 'FG 11/14/2020 15:20:38' prior: 50920744!
accountSummary
	
	|newAccountSummary|
	
	newAccountSummary := OrderedCollection new.
	
	transactions do:[:aTransaction | newAccountSummary add: (aTransaction makeReport: self)].
	
	newAccountSummary add: 'Balance = ' , self balance asString.
	
	^ newAccountSummary.! !
!AccountReports methodsFor: 'nil' stamp: 'FG 11/14/2020 15:21:04'!
balance

	^transactions 
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 15:21:44' prior: 50921225!
test01AnAccountSummaryOfANewAccountShouldOnlyBeHisBalance

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	report := OrderedCollection new.
	report add: 'Balance = 0'.
	
	self assert: receptiveAccount accountSummary equals: report. 
	
	 ! !

!testRun: #AccountReportsTest #test01AnAccountSummaryOfANewAccountShouldOnlyBeHisBalance stamp: 'FG 11/14/2020 15:21:46'!
PASSED!
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 15:21:56' prior: 50921276!
test02AnAccountSummaryShouldDisplayDeposits

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	Deposit register: 100 on: receptiveAccount.
	
	report := OrderedCollection new.
	report add: 'Dep�sito por 100'.
	report add: 'Balance = 100'.
	
	self assert: receptiveAccount accountSummary equals: report. 
	
	 ! !

!testRun: #AccountReportsTest #test02AnAccountSummaryShouldDisplayDeposits stamp: 'FG 11/14/2020 15:21:59'!
PASSED!
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 15:22:06' prior: 50921303!
test03AnAccountSummaryShouldDisplayWithdraws

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	Withdraw register: 100 on: receptiveAccount.
	
	report := OrderedCollection new.
	report add: 'Extracci�n por 100'.
	report add: 'Balance = -100'.
	
	self assert: receptiveAccount accountSummary equals: report. 
	
	 ! !

!testRun: #AccountReportsTest #test03AnAccountSummaryShouldDisplayWithdraws stamp: 'FG 11/14/2020 15:22:08'!
PASSED!
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 15:22:19' prior: 50921330!
test04ATransferenceShouldBeDisplayedInBothParticipantsAccountSummaries

	| reportSender reportReceiver receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := ReceptiveAccount new.
	receptiveAccountReceiver := ReceptiveAccount new.
	Transference register: 100 from: receptiveAccountSender  to: receptiveAccountReceiver.
	
	reportSender := OrderedCollection new.
	reportSender add: 'Salida por transferencia de 100'.
	reportSender add: 'Balance = -100'.
	
	reportReceiver := OrderedCollection new.
	reportReceiver add: 'Entrada por transferencia de 100'.
	reportReceiver add: 'Balance = 100'.
	
		
	self assert: receptiveAccountSender accountSummary equals: reportSender.
	self assert: (AccountSummary of: receptiveAccountReceiver) accountSummary equals: reportReceiver.
	 
	
	 ! !

!testRun: #AccountReportsTest #test04ATransferenceShouldBeDisplayedInBothParticipantsAccountSummaries stamp: 'FG 11/14/2020 15:22:21'!
ERROR!

!testRun: #AccountReportsTest #test04ATransferenceShouldBeDisplayedInBothParticipantsAccountSummaries stamp: 'FG 11/14/2020 15:22:21'!
ERROR!
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 15:22:31' prior: 50921617!
test04ATransferenceShouldBeDisplayedInBothParticipantsAccountSummaries

	| reportSender reportReceiver receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := ReceptiveAccount new.
	receptiveAccountReceiver := ReceptiveAccount new.
	Transference register: 100 from: receptiveAccountSender  to: receptiveAccountReceiver.
	
	reportSender := OrderedCollection new.
	reportSender add: 'Salida por transferencia de 100'.
	reportSender add: 'Balance = -100'.
	
	reportReceiver := OrderedCollection new.
	reportReceiver add: 'Entrada por transferencia de 100'.
	reportReceiver add: 'Balance = 100'.
	
		
	self assert: receptiveAccountSender accountSummary equals: reportSender.
	self assert: receptiveAccountReceiver accountSummary equals: reportReceiver.
	 
	
	 ! !

!testRun: #AccountReportsTest #test04ATransferenceShouldBeDisplayedInBothParticipantsAccountSummaries stamp: 'FG 11/14/2020 15:22:33'!
PASSED!
!TransferenceNetValue methodsFor: 'transference net value report' stamp: 'FG 11/14/2020 15:24:07' prior: 50920757!
transferenceNetValueReport
	
	| transferenceNetValue | 
	
	transferenceNetValue := 0.
	
	transactions do:[:aTransaction | transferenceNetValue := transferenceNetValue + (aTransaction makeReport: self) ].
	
	^ transferenceNetValue.! !

!methodRemoval: ReceptiveAccount #accountSummary stamp: 'FG 11/14/2020 15:25:32'!
accountSummary

	^ (AccountSummary of: transactions) accountSummary.!
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 15:33:23' prior: 50921565!
test01AnAccountSummaryOfANewAccountShouldOnlyBeHisBalance

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	report := OrderedCollection new.
	report add: 'Balance = 0'.
	
	self assert: (AccountSummary of: receptiveAccount transactions) accountSummary equals: report. 
	
	 ! !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 15:33:45' prior: 50921581!
test02AnAccountSummaryShouldDisplayDeposits

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	Deposit register: 100 on: receptiveAccount.
	
	report := OrderedCollection new.
	report add: 'Dep�sito por 100'.
	report add: 'Balance = 100'.
	
	self assert: (AccountSummary of: receptiveAccount transactions) accountSummary equals: report. 
	
	 ! !

!testRun: #AccountReportsTest #test01AnAccountSummaryOfANewAccountShouldOnlyBeHisBalance stamp: 'FG 11/14/2020 15:33:47'!
PASSED!

!testRun: #AccountReportsTest #test02AnAccountSummaryShouldDisplayDeposits stamp: 'FG 11/14/2020 15:33:48'!
PASSED!
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 15:34:10' prior: 50921599!
test03AnAccountSummaryShouldDisplayWithdraws

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	Withdraw register: 100 on: receptiveAccount.
	
	report := OrderedCollection new.
	report add: 'Extracci�n por 100'.
	report add: 'Balance = -100'.
	
	self assert: (AccountSummary of: receptiveAccount transactions) accountSummary equals: report. 
	
	 ! !

!testRun: #AccountReportsTest #test03AnAccountSummaryShouldDisplayWithdraws stamp: 'FG 11/14/2020 15:34:12'!
PASSED!
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 15:34:46' prior: 50921655!
test04ATransferenceShouldBeDisplayedInBothParticipantsAccountSummaries

	| reportSender reportReceiver receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := ReceptiveAccount new.
	receptiveAccountReceiver := ReceptiveAccount new.
	Transference register: 100 from: receptiveAccountSender  to: receptiveAccountReceiver.
	
	reportSender := OrderedCollection new.
	reportSender add: 'Salida por transferencia de 100'.
	reportSender add: 'Balance = -100'.
	
	reportReceiver := OrderedCollection new.
	reportReceiver add: 'Entrada por transferencia de 100'.
	reportReceiver add: 'Balance = 100'.
	
		
	self assert: (AccountSummary of: receptiveAccountSender transactions) accountSummary equals: reportSender.
	self assert: (AccountSummary of: receptiveAccountReceiver transactions) accountSummary equals: reportReceiver.
	 
	
	 ! !

!testRun: #AccountReportsTest #test04ATransferenceShouldBeDisplayedInBothParticipantsAccountSummaries stamp: 'FG 11/14/2020 15:34:49'!
PASSED!
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 15:35:05' prior: 50921422!
test05ATransferenceShouldAffectTransferenceNetValueReportForBothAccounts

	| receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := ReceptiveAccount new.
	receptiveAccountReceiver := ReceptiveAccount new.
	
	Transference register: 100 from: receptiveAccountSender  to: receptiveAccountReceiver.
	
	self assert: (TransferenceNetValue of: receptiveAccountReceiver transactions) transferenceNetValueReport equals: 100.
	self assert: (TransferenceNetValue of: receptiveAccountSender transactions) transferenceNetValueReport equals: -100.
	 
	
	 ! !

!testRun: #AccountReportsTest #test05ATransferenceShouldAffectTransferenceNetValueReportForBothAccounts stamp: 'FG 11/14/2020 15:35:07'!
PASSED!
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 15:35:18' prior: 50921463!
test06ANonTransferenceTransactionShouldNotAffectTransferenceNetValueReport

	| receptiveAccountWithDeposit receptiveAccountWithWithdraw |
	
	receptiveAccountWithDeposit := ReceptiveAccount new.
	receptiveAccountWithWithdraw := ReceptiveAccount new.
	
	Deposit register: 100 on: receptiveAccountWithDeposit.
	Withdraw register: 50 on: receptiveAccountWithWithdraw.
	
	self assert: (TransferenceNetValue of: receptiveAccountWithDeposit transactions) transferenceNetValueReport equals: 0.
	self assert: (TransferenceNetValue of: receptiveAccountWithWithdraw transactions) transferenceNetValueReport equals: 0.
	 
	
	 ! !

!testRun: #AccountReportsTest #test06ANonTransferenceTransactionShouldNotAffectTransferenceNetValueReport stamp: 'FG 11/14/2020 15:35:20'!
PASSED!
!Portfolio methodsFor: 'initialization' stamp: 'FG 11/14/2020 15:37:57' prior: 50917728 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !

Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: #'Portfolio-Solucion' stamp: 'FG 11/14/2020 15:38:07'!
Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'initialization' stamp: 'FG 11/14/2020 15:38:25' prior: 50921848 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.
	name := 'Portafolio sin nombre'.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'FG 11/14/2020 15:38:54' prior: 50917843 overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.
	name := 'Cuanta corriente sin nombre'! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 15:40:43'!
named: aName with: anAccount

	^self new 
		add: anAccount;
		setName: aName;
		yourself! !
!ReceptiveAccount class methodsFor: 'nil' stamp: 'FG 11/14/2020 15:45:50'!
named: aName

	^ self basicNew initializeWith: aName.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'FG 11/14/2020 15:46:07'!
initializeWith: aName

	super initialize.
	transactions := OrderedCollection new.
	name := aName.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'FG 11/14/2020 15:46:52' prior: 50921892!
initializeWith: aName

	transactions := OrderedCollection new.
	name := aName.! !

!methodRemoval: Portfolio class #named:with: stamp: 'FG 11/14/2020 15:48:07'!
named: aName with: anAccount

	^self new 
		add: anAccount;
		setName: aName;
		yourself!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 15:53:11'!
named: aName with: anAccount

	^ (self new initializeWithName: aName) add: anAccount.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 15:53:40' prior: 50921910!
named: aName with: anAccount

	^ (self basicNew initializeWithName: aName) add: anAccount.! !
!Portfolio methodsFor: 'initialization' stamp: 'FG 11/14/2020 15:54:05'!
initializeWithName: aName
	name := aName.! !
!Portfolio methodsFor: 'initialization' stamp: 'FG 11/14/2020 15:54:50' prior: 50921922!
initializeWithName: aName

	accounts := OrderedCollection new.
	parents := OrderedCollection new.
	name := aName.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 15:55:19'!
named: aName with: anAccount with: anotherAccount

	^ ((self basicNew initializeWithName: aName) add: anAccount) add: anotherAccount.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'FG 11/14/2020 15:55:29'!
named: aName 

	^ self basicNew initializeWithName: aName! !

PortfolioExerciseTests subclass: #TreeStructureReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TreeStructureReport category: #'Portfolio-Solucion' stamp: 'FG 11/14/2020 15:56:32'!
PortfolioExerciseTests subclass: #TreeStructureReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountReports methodsFor: 'initialization' stamp: 'FG 11/14/2020 16:08:52' prior: 50921540!
initializeWith: aTransactionCollection
	transactions := aTransactionCollection.! !

----QUIT----(14 November 2020 18:56:31) CuisUniversity-4365.image priorSource: 18841914!

----STARTUP---- (15 November 2020 14:26:30) as C:\Users\FACU PC\Documents\Clases Virtuales\Cosas IS 1\Cuis University\CuisUniversity-4365.image!


Object subclass: #AccountReports
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountReports category: #'Portfolio-Solucion' stamp: 'FG 11/15/2020 14:32:46'!
Object subclass: #AccountReports
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountReports methodsFor: 'balance' stamp: 'FG 11/15/2020 14:37:12' prior: 50921557!
balance

	^account
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !

!methodRemoval: AccountReports #balance stamp: 'FG 11/15/2020 14:39:12'!
balance

	^account
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]!
!AccountReports methodsFor: 'initialization' stamp: 'FG 11/15/2020 14:39:44' prior: 50921960!
initializeWith: anAccount
	account := anAccount.! !
!AccountReports class methodsFor: 'initialization' stamp: 'FG 11/15/2020 14:39:57' prior: 50921521!
of: anAccount
 	^ self new initializeWith: anAccount.
	
	! !
!AccountSummary methodsFor: 'account summary' stamp: 'FG 11/15/2020 14:40:24' prior: 50921546!
accountSummary
	
	|newAccountSummary|
	
	newAccountSummary := OrderedCollection new.
	
	account transactions do:[:aTransaction | newAccountSummary add: (aTransaction makeReport: self)].
	
	newAccountSummary add: 'Balance = ' , account balance asString.
	
	^ newAccountSummary.! !
!TransferenceNetValue methodsFor: 'transference net value report' stamp: 'FG 11/15/2020 14:40:40' prior: 50921688!
transferenceNetValueReport
	
	| transferenceNetValue | 
	
	transferenceNetValue := 0.
	
	account transactions do:[:aTransaction | transferenceNetValue := transferenceNetValue + (aTransaction makeReport: self) ].
	
	^ transferenceNetValue.! !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 14:41:04' prior: 50921704!
test01AnAccountSummaryOfANewAccountShouldOnlyBeHisBalance

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	report := OrderedCollection new.
	report add: 'Balance = 0'.
	
	self assert: (AccountSummary of: receptiveAccount) accountSummary equals: report. 
	
	 ! !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 14:41:11' prior: 50921717!
test02AnAccountSummaryShouldDisplayDeposits

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	Deposit register: 100 on: receptiveAccount.
	
	report := OrderedCollection new.
	report add: 'Dep�sito por 100'.
	report add: 'Balance = 100'.
	
	self assert: (AccountSummary of: receptiveAccount) accountSummary equals: report. 
	
	 ! !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 14:41:17' prior: 50921740!
test03AnAccountSummaryShouldDisplayWithdraws

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	Withdraw register: 100 on: receptiveAccount.
	
	report := OrderedCollection new.
	report add: 'Extracci�n por 100'.
	report add: 'Balance = -100'.
	
	self assert: (AccountSummary of: receptiveAccount) accountSummary equals: report. 
	
	 ! !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 14:41:27' prior: 50921759!
test04ATransferenceShouldBeDisplayedInBothParticipantsAccountSummaries

	| reportSender reportReceiver receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := ReceptiveAccount new.
	receptiveAccountReceiver := ReceptiveAccount new.
	Transference register: 100 from: receptiveAccountSender  to: receptiveAccountReceiver.
	
	reportSender := OrderedCollection new.
	reportSender add: 'Salida por transferencia de 100'.
	reportSender add: 'Balance = -100'.
	
	reportReceiver := OrderedCollection new.
	reportReceiver add: 'Entrada por transferencia de 100'.
	reportReceiver add: 'Balance = 100'.
	
		
	self assert: (AccountSummary of: receptiveAccountSender) accountSummary equals: reportSender.
	self assert: (AccountSummary of: receptiveAccountReceiver) accountSummary equals: reportReceiver.
	 
	
	 ! !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 14:41:36' prior: 50921794!
test05ATransferenceShouldAffectTransferenceNetValueReportForBothAccounts

	| receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := ReceptiveAccount new.
	receptiveAccountReceiver := ReceptiveAccount new.
	
	Transference register: 100 from: receptiveAccountSender  to: receptiveAccountReceiver.
	
	self assert: (TransferenceNetValue of: receptiveAccountReceiver) transferenceNetValueReport equals: 100.
	self assert: (TransferenceNetValue of: receptiveAccountSender) transferenceNetValueReport equals: -100.
	 
	
	 ! !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 14:41:46' prior: 50921820!
test06ANonTransferenceTransactionShouldNotAffectTransferenceNetValueReport

	| receptiveAccountWithDeposit receptiveAccountWithWithdraw |
	
	receptiveAccountWithDeposit := ReceptiveAccount new.
	receptiveAccountWithWithdraw := ReceptiveAccount new.
	
	Deposit register: 100 on: receptiveAccountWithDeposit.
	Withdraw register: 50 on: receptiveAccountWithWithdraw.
	
	self assert: (TransferenceNetValue of: receptiveAccountWithDeposit ) transferenceNetValueReport equals: 0.
	self assert: (TransferenceNetValue of: receptiveAccountWithWithdraw) transferenceNetValueReport equals: 0.
	 
	
	 ! !

!testRun: #AccountReportsTest #test01AnAccountSummaryOfANewAccountShouldOnlyBeHisBalance stamp: 'FG 11/15/2020 14:41:49'!
PASSED!

!testRun: #AccountReportsTest #test02AnAccountSummaryShouldDisplayDeposits stamp: 'FG 11/15/2020 14:41:49'!
PASSED!

!testRun: #AccountReportsTest #test03AnAccountSummaryShouldDisplayWithdraws stamp: 'FG 11/15/2020 14:41:49'!
PASSED!

!testRun: #AccountReportsTest #test04ATransferenceShouldBeDisplayedInBothParticipantsAccountSummaries stamp: 'FG 11/15/2020 14:41:49'!
PASSED!

!testRun: #AccountReportsTest #test05ATransferenceShouldAffectTransferenceNetValueReportForBothAccounts stamp: 'FG 11/15/2020 14:41:49'!
PASSED!

!testRun: #AccountReportsTest #test06ANonTransferenceTransactionShouldNotAffectTransferenceNetValueReport stamp: 'FG 11/15/2020 14:41:49'!
PASSED!
!TreeStructureReport methodsFor: 'no messages' stamp: 'FG 11/15/2020 14:46:47'!
test01

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta de Prueba'.
	
	self assert: treeStructureReport equals: (TreeStructureReport of: receptiveAccount)! !

!classRenamed: #TreeStructureReport as: #TreeStructureReportTest stamp: 'FG 11/15/2020 14:46:53'!
Smalltalk renameClassNamed: #TreeStructureReport as: #TreeStructureReportTest!
!TreeStructureReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 14:46:53' prior: 50922172!
test01

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta de Prueba'.
	
	self assert: treeStructureReport equals: (TreeStructureReportTest of: receptiveAccount)! !

AccountReports subclass: #TreeStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TreeStructure category: #'Portfolio-Solucion' stamp: 'FG 11/15/2020 14:47:22'!
AccountReports subclass: #TreeStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TreeStructureReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 14:47:49' prior: 50922191!
test01

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta de Prueba'.
	
	self assert: treeStructureReport equals: (TreeStructure of: receptiveAccount) treeStructure.! !
!TreeStructure methodsFor: 'nil' stamp: 'FG 11/15/2020 14:48:58'!
treeStructure
	| newTreeStructure |
	
	newTreeStructure := OrderedCollection new.
	newTreeStructure add: 'Cuenta de Prueba'.
	
	^ newTreeStructure.! !

!testRun: #TreeStructureReportTest #test01 stamp: 'FG 11/15/2020 14:49:13'!
PASSED!
!TreeStructureReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 14:49:50' prior: 50922217!
test01

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta sin nombre'.
	
	self assert: treeStructureReport equals: (TreeStructure of: receptiveAccount) treeStructure.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'FG 11/15/2020 14:50:11' prior: 50921874 overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.
	name := 'Cuenta corriente sin nombre'! !
!TreeStructureReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 14:50:25' prior: 50922240!
test01

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta corriente sin nombre'.
	
	self assert: treeStructureReport equals: (TreeStructure of: receptiveAccount) treeStructure.! !
!TreeStructureReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 14:50:31'!
test02

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta corriente sin nombre'.
	
	self assert: treeStructureReport equals: (TreeStructure of: receptiveAccount) treeStructure.! !
!TreeStructureReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 14:50:56' prior: 50922260!
test01

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta de Prueba'.
	
	self assert: treeStructureReport equals: (TreeStructure of: receptiveAccount) treeStructure.! !

!testRun: #TreeStructureReportTest #test02 stamp: 'FG 11/15/2020 14:51:20'!
FAILURE!

!testRun: #TreeStructureReportTest #test02 stamp: 'FG 11/15/2020 14:51:20'!
FAILURE!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 14:51:49' prior: 50922229!
treeStructure
	| newTreeStructure |
	
	newTreeStructure := OrderedCollection new.
	newTreeStructure add: account name.
	
	^ newTreeStructure.! !
!Account methodsFor: 'transactions' stamp: 'FG 11/15/2020 14:52:14' overrides: 16882612!
name
	^ name.! !

!testRun: #TreeStructureReportTest #test02 stamp: 'FG 11/15/2020 14:52:22'!
FAILURE!

!testRun: #TreeStructureReportTest #test02 stamp: 'FG 11/15/2020 14:52:22'!
FAILURE!
!TreeStructureReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 14:53:54' prior: 50922273!
test02

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount new.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta corriente sin nombre'.
	
	self assert: treeStructureReport equals: (TreeStructure of: receptiveAccount) treeStructure.! !

!testRun: #TreeStructureReportTest #test02 stamp: 'FG 11/15/2020 14:54:01'!
PASSED!

!testRun: #TreeStructureReportTest #test01 stamp: 'FG 11/15/2020 14:54:02'!
PASSED!
!TreeStructureReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 14:57:49'!
test03

	| receptiveAccount portfolio treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolio := Portfolio named: 'Portfolio de Prueba' with: receptiveAccount.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio prueba'.
	treeStructureReport add: String tab , 'Cuenta de Prueba'.
	
	self assert: treeStructureReport equals: (TreeStructure of: receptiveAccount) treeStructure.! !
!TreeStructureReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 14:58:00' prior: 50922341!
test03

	| receptiveAccount portfolio treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolio := Portfolio named: 'Portfolio de Prueba' with: receptiveAccount.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio prueba'.
	treeStructureReport add: String tab , 'Cuenta de Prueba'.
	
	self assert: treeStructureReport equals: (TreeStructure of: portfolio) treeStructure.! !
!TreeStructureReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 14:58:10' prior: 50922359!
test03

	| receptiveAccount portfolio treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolio := Portfolio named: 'Portfolio de Prueba' with: receptiveAccount.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio de prueba'.
	treeStructureReport add: String tab , 'Cuenta de Prueba'.
	
	self assert: treeStructureReport equals: (TreeStructure of: portfolio) treeStructure.! !
!TreeStructureReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 14:58:16' prior: 50922377!
test03

	| receptiveAccount portfolio treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolio := Portfolio named: 'Portfolio de Prueba' with: receptiveAccount.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio de Prueba'.
	treeStructureReport add: String tab , 'Cuenta de Prueba'.
	
	self assert: treeStructureReport equals: (TreeStructure of: portfolio) treeStructure.! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:01:27' prior: 50922305!
treeStructure
	| newTreeStructure |
	
	newTreeStructure := OrderedCollection new.
	
	^ newTreeStructure.! !
!Account methodsFor: 'transactions' stamp: 'FG 11/15/2020 15:02:04'!
accounts 
	self subclassResponsibility.! !
!Portfolio methodsFor: 'accounts management' stamp: 'FG 11/15/2020 15:02:16' overrides: 50922419!
accounts
	^ accounts.! !
!Portfolio methodsFor: 'accounts management' stamp: 'FG 11/15/2020 15:02:20' prior: 50922424 overrides: 50922419!
accounts
	^ accounts copy.! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'FG 11/15/2020 15:02:36'!
account
	^ OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:02:39' overrides: 50922419!
accounts
	^ OrderedCollection new.! !

!methodRemoval: ReceptiveAccount #account stamp: 'FG 11/15/2020 15:02:41'!
account
	^ OrderedCollection new.!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:04:17' prior: 50922413!
treeStructure
	| newTreeStructure |
	
	newTreeStructure := OrderedCollection new.
	
	newTreeStructure add: account name.
	
	account accounts do: [:anAccount | newTreeStructure add: String tab , anAccount name].
	
	^ newTreeStructure.! !

!testRun: #TreeStructureReportTest #test03 stamp: 'FG 11/15/2020 15:04:31'!
PASSED!

!testRun: #TreeStructureReportTest #test02 stamp: 'FG 11/15/2020 15:04:33'!
PASSED!

!testRun: #TreeStructureReportTest #test01 stamp: 'FG 11/15/2020 15:04:34'!
PASSED!
!TreeStructureReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:06:56'!
test04

	| receptiveAccount portfolioParent portfolioChild treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolioChild := Portfolio named: 'Portfolio hijo' with: receptiveAccount.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio padre'.
	treeStructureReport add: String tab , 'Portfolio hijo'.
	treeStructureReport add: String tab , String tab , 'Cuenta de prueba'.
	
	self assert: treeStructureReport equals: (TreeStructure of: portfolioParent) treeStructure.! !

!testRun: #TreeStructureReportTest #test04 stamp: 'FG 11/15/2020 15:07:24'!
FAILURE!

!testRun: #TreeStructureReportTest #test04 stamp: 'FG 11/15/2020 15:07:24'!
FAILURE!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:14:20' prior: 50922446!
treeStructure
	| newTreeStructure |
	
	newTreeStructure := OrderedCollection new.
	
	newTreeStructure add: account name.
	
	account accounts do: [:anAccount | 
		newTreeStructure add: String tab , anAccount name.
		anAccount accounts do: [:anotherAccount | newTreeStructure add: String tab, String tab , anotherAccount name ].
	].
	
	^ newTreeStructure.! !

!testRun: #TreeStructureReportTest #test04 stamp: 'FG 11/15/2020 15:14:37'!
FAILURE!

!testRun: #TreeStructureReportTest #test04 stamp: 'FG 11/15/2020 15:14:37'!
FAILURE!

!testRun: #TreeStructureReportTest #test04 stamp: 'FG 11/15/2020 15:14:43'!
FAILURE!

!testRun: #TreeStructureReportTest #test04 stamp: 'FG 11/15/2020 15:14:43'!
FAILURE!

!testRun: #TreeStructureReportTest #test03 stamp: 'FG 11/15/2020 15:14:49'!
PASSED!

!testRun: #TreeStructureReportTest #test02 stamp: 'FG 11/15/2020 15:14:51'!
PASSED!

!testRun: #TreeStructureReportTest #test01 stamp: 'FG 11/15/2020 15:14:52'!
PASSED!
!TreeStructureReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:15:06' prior: 50922465!
test04

	| receptiveAccount portfolioParent portfolioChild treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolioChild := Portfolio named: 'Portfolio hijo' with: receptiveAccount.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio padre'.
	treeStructureReport add: String tab , 'Portfolio hijo'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Prueba'.
	
	self assert: treeStructureReport equals: (TreeStructure of: portfolioParent) treeStructure.! !

!testRun: #TreeStructureReportTest #test04 stamp: 'FG 11/15/2020 15:15:08'!
PASSED!
!TreeStructureReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:17:21' prior: 50922527!
test04

	| receptiveAccount1 receptiveAccount2 portfolioParent portfolioChild1 portfolioChild2 treeStructureReport |
	
	receptiveAccount1 := ReceptiveAccount named: 'Cuenta de Prueba1'.
	receptiveAccount2 := ReceptiveAccount named: 'Cuenta de Prueba2'.
	portfolioChild1 := Portfolio named: 'Portfolio hijo1' with: receptiveAccount1.
	portfolioChild2 := Portfolio named: 'Portfolio hijo1' with: receptiveAccount2.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild1 with: portfolioChild2.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio padre'.
	treeStructureReport add: String tab , 'Portfolio hijo1'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Prueba1'.
	treeStructureReport add: String tab , 'Portfolio hijo2'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Prueba2'.
	
	self assert: treeStructureReport equals: (TreeStructure of: portfolioParent) treeStructure.! !

!testRun: #TreeStructureReportTest #test04 stamp: 'FG 11/15/2020 15:17:33'!
FAILURE!

!testRun: #TreeStructureReportTest #test04 stamp: 'FG 11/15/2020 15:17:33'!
FAILURE!
!TreeStructureReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:18:15' prior: 50922553!
test04

	| receptiveAccount1 receptiveAccount2 portfolioParent portfolioChild1 portfolioChild2 treeStructureReport |
	
	receptiveAccount1 := ReceptiveAccount named: 'Cuenta de Prueba1'.
	receptiveAccount2 := ReceptiveAccount named: 'Cuenta de Prueba2'.
	portfolioChild1 := Portfolio named: 'Portfolio hijo1' with: receptiveAccount1.
	portfolioChild2 := Portfolio named: 'Portfolio hijo2' with: receptiveAccount2.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild1 with: portfolioChild2.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio padre'.
	treeStructureReport add: String tab , 'Portfolio hijo1'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Prueba1'.
	treeStructureReport add: String tab , 'Portfolio hijo2'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Prueba2'.
	
	self assert: treeStructureReport equals: (TreeStructure of: portfolioParent) treeStructure.! !

!testRun: #TreeStructureReportTest #test04 stamp: 'FG 11/15/2020 15:18:18'!
PASSED!
!TreeStructureReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:18:23'!
test05

	| receptiveAccount1 receptiveAccount2 portfolioParent portfolioChild1 portfolioChild2 treeStructureReport |
	
	receptiveAccount1 := ReceptiveAccount named: 'Cuenta de Prueba1'.
	receptiveAccount2 := ReceptiveAccount named: 'Cuenta de Prueba2'.
	portfolioChild1 := Portfolio named: 'Portfolio hijo1' with: receptiveAccount1.
	portfolioChild2 := Portfolio named: 'Portfolio hijo2' with: receptiveAccount2.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild1 with: portfolioChild2.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio padre'.
	treeStructureReport add: String tab , 'Portfolio hijo1'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Prueba1'.
	treeStructureReport add: String tab , 'Portfolio hijo2'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Prueba2'.
	
	self assert: treeStructureReport equals: (TreeStructure of: portfolioParent) treeStructure.! !
!TreeStructureReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:19:22' prior: 50922592!
test04

	| receptiveAccount portfolioParent portfolioChild treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolioChild := Portfolio named: 'Portfolio hijo' with: receptiveAccount.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio padre'.
	treeStructureReport add: String tab , 'Portfolio hijo'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Prueba'.

	self assert: treeStructureReport equals: (TreeStructure of: portfolioParent) treeStructure.! !

!testRun: #TreeStructureReportTest #test04 stamp: 'FG 11/15/2020 15:19:23'!
PASSED!

!testRun: #TreeStructureReportTest #test01 stamp: 'FG 11/15/2020 15:19:25'!
PASSED!

!testRun: #TreeStructureReportTest #test02 stamp: 'FG 11/15/2020 15:19:25'!
PASSED!

!testRun: #TreeStructureReportTest #test03 stamp: 'FG 11/15/2020 15:19:25'!
PASSED!

!testRun: #TreeStructureReportTest #test04 stamp: 'FG 11/15/2020 15:19:25'!
PASSED!

!testRun: #TreeStructureReportTest #test05 stamp: 'FG 11/15/2020 15:19:25'!
PASSED!
!TreeStructureReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:20:59' prior: 50922662!
test04

	| receptiveAccount portfolioGrandParent portfolioParent portfolioChild treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolioChild := Portfolio named: 'Portfolio hijo' with: receptiveAccount.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild.
	portfolioGrandParent := Portfolio named: 'Portfolio abuelo' with: portfolioParent.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio abuelo'.
	treeStructureReport add: String tab , 'Portfolio padre'.
	treeStructureReport add: String tab , String tab , 'Portfolio hijo'.
	treeStructureReport add: String tab , String tab , String tab ,  'Cuenta de Prueba'.

	self assert: treeStructureReport equals: (TreeStructure of: portfolioParent) treeStructure.! !
!TreeStructureReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:21:07' prior: 50922701!
test04

	| receptiveAccount portfolioGrandParent portfolioParent portfolioChild treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolioChild := Portfolio named: 'Portfolio hijo' with: receptiveAccount.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild.
	portfolioGrandParent := Portfolio named: 'Portfolio abuelo' with: portfolioParent.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio abuelo'.
	treeStructureReport add: String tab , 'Portfolio padre'.
	treeStructureReport add: String tab , String tab , 'Portfolio hijo'.
	treeStructureReport add: String tab , String tab , String tab ,  'Cuenta de Prueba'.

	self assert: treeStructureReport equals: (TreeStructure of: portfolioGrandParent) treeStructure.! !
!TreeStructureReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:21:24'!
test06

	| receptiveAccount portfolioGrandParent portfolioParent portfolioChild treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolioChild := Portfolio named: 'Portfolio hijo' with: receptiveAccount.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild.
	portfolioGrandParent := Portfolio named: 'Portfolio abuelo' with: portfolioParent.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio abuelo'.
	treeStructureReport add: String tab , 'Portfolio padre'.
	treeStructureReport add: String tab , String tab , 'Portfolio hijo'.
	treeStructureReport add: String tab , String tab , String tab ,  'Cuenta de Prueba'.

	self assert: treeStructureReport equals: (TreeStructure of: portfolioGrandParent) treeStructure.! !
!TreeStructureReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:20:59' prior: 50922730!
test04

	| receptiveAccount portfolioGrandParent portfolioParent portfolioChild treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolioChild := Portfolio named: 'Portfolio hijo' with: receptiveAccount.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild.
	portfolioGrandParent := Portfolio named: 'Portfolio abuelo' with: portfolioParent.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio abuelo'.
	treeStructureReport add: String tab , 'Portfolio padre'.
	treeStructureReport add: String tab , String tab , 'Portfolio hijo'.
	treeStructureReport add: String tab , String tab , String tab ,  'Cuenta de Prueba'.

	self assert: treeStructureReport equals: (TreeStructure of: portfolioParent) treeStructure.! !
!TreeStructureReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:21:07' prior: 50922788!
test04

	| receptiveAccount portfolioGrandParent portfolioParent portfolioChild treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolioChild := Portfolio named: 'Portfolio hijo' with: receptiveAccount.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild.
	portfolioGrandParent := Portfolio named: 'Portfolio abuelo' with: portfolioParent.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio abuelo'.
	treeStructureReport add: String tab , 'Portfolio padre'.
	treeStructureReport add: String tab , String tab , 'Portfolio hijo'.
	treeStructureReport add: String tab , String tab , String tab ,  'Cuenta de Prueba'.

	self assert: treeStructureReport equals: (TreeStructure of: portfolioGrandParent) treeStructure.! !
!TreeStructureReportTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:19:22' prior: 50922817!
test04

	| receptiveAccount portfolioParent portfolioChild treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolioChild := Portfolio named: 'Portfolio hijo' with: receptiveAccount.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio padre'.
	treeStructureReport add: String tab , 'Portfolio hijo'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Prueba'.

	self assert: treeStructureReport equals: (TreeStructure of: portfolioParent) treeStructure.! !

!testRun: #TreeStructureReportTest #test06 stamp: 'FG 11/15/2020 15:22:24'!
FAILURE!

!testRun: #TreeStructureReportTest #test06 stamp: 'FG 11/15/2020 15:22:24'!
FAILURE!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:29:22'!
innerTreeStructure: aHeight of: anAccount with: treeStructure

	treeStructure add: (self formTextForTree: (anAccount name) and: aHeight).

	anAccount accounts do:[:anotherAccount | self innerTreeStructure: aHeight + 1 of: anotherAccount with: treeStructure].! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:32:30'!
 formTextForTree: aName and: aHeight

	| textForTree myHeight|
	
	textForTree := aName.
	myHeight := aHeight.
	
	[aHeight > 0] whileTrue:[
			textForTree := String tab , textForTree.
			myHeight := myHeight - 1.
		].
	
	^ textForTree.
	
! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:33:22' prior: 50922493!
treeStructure
	| newTreeStructure |
	
	newTreeStructure := OrderedCollection new.
	
	newTreeStructure add: account name.
	
	account accounts do:[:anotherAccount | self innerTreeStructure: 1 of: anotherAccount with: newTreeStructure].
	
	^ newTreeStructure.! !

----STARTUP---- (15 November 2020 15:34:09) as C:\Users\FACU PC\Documents\Clases Virtuales\Cosas IS 1\Cuis University\CuisUniversity-4365.image!


!classDefinition: #AccountReports category: #'Portfolio-Solucion' stamp: 'FG 11/15/2020 15:34:12'!
Object subclass: #AccountReports
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountReports category: #'Portfolio-Solucion' stamp: 'FG 11/15/2020 15:34:12'!
Object subclass: #AccountReports
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountReports methodsFor: 'balance' stamp: 'FG 11/15/2020 14:37:12' prior: 50921557!
balance

	^account
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !

!methodRemoval: AccountReports #balance stamp: 'FG 11/15/2020 15:34:12'!
balance

	^account
		inject: 0
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]!
!AccountReports methodsFor: 'initialization' stamp: 'FG 11/15/2020 14:39:44' prior: 50921960!
initializeWith: anAccount
	account := anAccount.! !
!AccountReports class methodsFor: 'initialization' stamp: 'FG 11/15/2020 14:39:57' prior: 50921521!
of: anAccount
 	^ self new initializeWith: anAccount.
	
	! !
!AccountSummary methodsFor: 'account summary' stamp: 'FG 11/15/2020 14:40:24' prior: 50921546!
accountSummary
	
	|newAccountSummary|
	
	newAccountSummary := OrderedCollection new.
	
	account transactions do:[:aTransaction | newAccountSummary add: (aTransaction makeReport: self)].
	
	newAccountSummary add: 'Balance = ' , account balance asString.
	
	^ newAccountSummary.! !
!TransferenceNetValue methodsFor: 'transference net value report' stamp: 'FG 11/15/2020 14:40:40' prior: 50921688!
transferenceNetValueReport
	
	| transferenceNetValue | 
	
	transferenceNetValue := 0.
	
	account transactions do:[:aTransaction | transferenceNetValue := transferenceNetValue + (aTransaction makeReport: self) ].
	
	^ transferenceNetValue.! !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 14:41:04' prior: 50921704!
test01AnAccountSummaryOfANewAccountShouldOnlyBeHisBalance

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	report := OrderedCollection new.
	report add: 'Balance = 0'.
	
	self assert: (AccountSummary of: receptiveAccount) accountSummary equals: report. 
	
	 ! !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 14:41:11' prior: 50921717!
test02AnAccountSummaryShouldDisplayDeposits

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	Deposit register: 100 on: receptiveAccount.
	
	report := OrderedCollection new.
	report add: 'Dep�sito por 100'.
	report add: 'Balance = 100'.
	
	self assert: (AccountSummary of: receptiveAccount) accountSummary equals: report. 
	
	 ! !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 14:41:17' prior: 50921740!
test03AnAccountSummaryShouldDisplayWithdraws

	| report receptiveAccount |
	
	receptiveAccount := ReceptiveAccount new.
	Withdraw register: 100 on: receptiveAccount.
	
	report := OrderedCollection new.
	report add: 'Extracci�n por 100'.
	report add: 'Balance = -100'.
	
	self assert: (AccountSummary of: receptiveAccount) accountSummary equals: report. 
	
	 ! !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 14:41:27' prior: 50921759!
test04ATransferenceShouldBeDisplayedInBothParticipantsAccountSummaries

	| reportSender reportReceiver receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := ReceptiveAccount new.
	receptiveAccountReceiver := ReceptiveAccount new.
	Transference register: 100 from: receptiveAccountSender  to: receptiveAccountReceiver.
	
	reportSender := OrderedCollection new.
	reportSender add: 'Salida por transferencia de 100'.
	reportSender add: 'Balance = -100'.
	
	reportReceiver := OrderedCollection new.
	reportReceiver add: 'Entrada por transferencia de 100'.
	reportReceiver add: 'Balance = 100'.
	
		
	self assert: (AccountSummary of: receptiveAccountSender) accountSummary equals: reportSender.
	self assert: (AccountSummary of: receptiveAccountReceiver) accountSummary equals: reportReceiver.
	 
	
	 ! !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 14:41:36' prior: 50921794!
test05ATransferenceShouldAffectTransferenceNetValueReportForBothAccounts

	| receptiveAccountSender receptiveAccountReceiver |
	
	receptiveAccountSender := ReceptiveAccount new.
	receptiveAccountReceiver := ReceptiveAccount new.
	
	Transference register: 100 from: receptiveAccountSender  to: receptiveAccountReceiver.
	
	self assert: (TransferenceNetValue of: receptiveAccountReceiver) transferenceNetValueReport equals: 100.
	self assert: (TransferenceNetValue of: receptiveAccountSender) transferenceNetValueReport equals: -100.
	 
	
	 ! !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 14:41:46' prior: 50921820!
test06ANonTransferenceTransactionShouldNotAffectTransferenceNetValueReport

	| receptiveAccountWithDeposit receptiveAccountWithWithdraw |
	
	receptiveAccountWithDeposit := ReceptiveAccount new.
	receptiveAccountWithWithdraw := ReceptiveAccount new.
	
	Deposit register: 100 on: receptiveAccountWithDeposit.
	Withdraw register: 50 on: receptiveAccountWithWithdraw.
	
	self assert: (TransferenceNetValue of: receptiveAccountWithDeposit ) transferenceNetValueReport equals: 0.
	self assert: (TransferenceNetValue of: receptiveAccountWithWithdraw) transferenceNetValueReport equals: 0.
	 
	
	 ! !
!TreeStructureReport methodsFor: 'no messages' stamp: 'FG 11/15/2020 14:46:47'!
test01

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta de Prueba'.
	
	self assert: treeStructureReport equals: (TreeStructureReport of: receptiveAccount)! !

!classDefinition: #TreeStructure category: #'Portfolio-Solucion' stamp: 'FG 11/15/2020 15:34:13'!
AccountReports subclass: #TreeStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TreeStructure category: #'Portfolio-Solucion' stamp: 'FG 11/15/2020 15:34:13'!
AccountReports subclass: #TreeStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TreeStructure methodsFor: 'nil' stamp: 'FG 11/15/2020 14:48:58'!
treeStructure
	| newTreeStructure |
	
	newTreeStructure := OrderedCollection new.
	newTreeStructure add: 'Cuenta de Prueba'.
	
	^ newTreeStructure.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'FG 11/15/2020 14:50:11' prior: 50921874 overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.
	name := 'Cuenta corriente sin nombre'! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 14:51:49' prior: 50923116!
treeStructure
	| newTreeStructure |
	
	newTreeStructure := OrderedCollection new.
	newTreeStructure add: account name.
	
	^ newTreeStructure.! !
!Account methodsFor: 'transactions' stamp: 'FG 11/15/2020 14:52:14' overrides: 16882612!
name
	^ name.! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:01:27' prior: 50923132!
treeStructure
	| newTreeStructure |
	
	newTreeStructure := OrderedCollection new.
	
	^ newTreeStructure.! !
!Account methodsFor: 'transactions' stamp: 'FG 11/15/2020 15:02:04'!
accounts 
	self subclassResponsibility.! !
!Portfolio methodsFor: 'accounts management' stamp: 'FG 11/15/2020 15:02:16' overrides: 50923150!
accounts
	^ accounts.! !
!Portfolio methodsFor: 'accounts management' stamp: 'FG 11/15/2020 15:02:20' prior: 50923155 overrides: 50923150!
accounts
	^ accounts copy.! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'FG 11/15/2020 15:02:36'!
account
	^ OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:02:39' overrides: 50923150!
accounts
	^ OrderedCollection new.! !

!methodRemoval: ReceptiveAccount #account stamp: 'FG 11/15/2020 15:34:13'!
account
	^ OrderedCollection new.!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:04:17' prior: 50923144!
treeStructure
	| newTreeStructure |
	
	newTreeStructure := OrderedCollection new.
	
	newTreeStructure add: account name.
	
	account accounts do: [:anAccount | newTreeStructure add: String tab , anAccount name].
	
	^ newTreeStructure.! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:14:20' prior: 50923177!
treeStructure
	| newTreeStructure |
	
	newTreeStructure := OrderedCollection new.
	
	newTreeStructure add: account name.
	
	account accounts do: [:anAccount | 
		newTreeStructure add: String tab , anAccount name.
		anAccount accounts do: [:anotherAccount | newTreeStructure add: String tab, String tab , anotherAccount name ].
	].
	
	^ newTreeStructure.! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:29:22'!
innerTreeStructure: aHeight of: anAccount with: treeStructure

	treeStructure add: (self formTextForTree: (anAccount name) and: aHeight).

	anAccount accounts do:[:anotherAccount | self innerTreeStructure: aHeight + 1 of: anotherAccount with: treeStructure].! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:32:30'!
formTextForTree: aName and: aHeight

	| textForTree myHeight|
	
	textForTree := aName.
	myHeight := aHeight.
	
	[aHeight > 0] whileTrue:[
			textForTree := String tab , textForTree.
			myHeight := myHeight - 1.
		].
	
	^ textForTree.
	
! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:33:22' prior: 50923188!
treeStructure
	| newTreeStructure |
	
	newTreeStructure := OrderedCollection new.
	
	newTreeStructure add: account name.
	
	account accounts do:[:anotherAccount | self innerTreeStructure: 1 of: anotherAccount with: newTreeStructure].
	
	^ newTreeStructure.! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:38:16' prior: 50923213!
formTextForTree: aName and: aHeight

	| textForTree myHeight|
	
	textForTree := aName.
	myHeight := aHeight.
	
	[myHeight > 0] whileTrue:[
			textForTree := String tab , textForTree.
			myHeight := myHeight - 1.
		].
	
	^ textForTree.
	
! !
!TreeStructureReport methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:42:20'!
test06

	| receptiveAccount portfolioGrandParent portfolioParent portfolioChild treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolioChild := Portfolio named: 'Portfolio hijo' with: receptiveAccount.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild.
	portfolioGrandParent := Portfolio named: 'Portfolio abuelo' with: portfolioParent.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio abuelo'.
	treeStructureReport add: String tab , 'Portfolio padre'.
	treeStructureReport add: String tab , String tab , 'Portfolio hijo'.
	treeStructureReport add: String tab , String tab , String tab , 'Cuenta de Prueba'.
	
	self assert: treeStructureReport equals: (TreeStructureReport of: portfolioGrandParent).! !

!testRun: #TreeStructureReport #test06 stamp: 'FG 11/15/2020 15:43:28'!
ERROR!

!testRun: #TreeStructureReport #test06 stamp: 'FG 11/15/2020 15:43:28'!
ERROR!
!TreeStructureReport methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:44:10' prior: 50923247!
test06

	| receptiveAccount portfolioGrandParent portfolioParent portfolioChild treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolioChild := Portfolio named: 'Portfolio hijo' with: receptiveAccount.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild.
	portfolioGrandParent := Portfolio named: 'Portfolio abuelo' with: portfolioParent.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio abuelo'.
	treeStructureReport add: String tab , 'Portfolio padre'.
	treeStructureReport add: String tab , String tab , 'Portfolio hijo'.
	treeStructureReport add: String tab , String tab , String tab , 'Cuenta de Prueba'.
	
	self assert: treeStructureReport equals: (TreeStructureReport of: portfolioGrandParent) treeStructure.! !

!testRun: #TreeStructureReport #test06 stamp: 'FG 11/15/2020 15:44:13'!
ERROR!

!testRun: #TreeStructureReport #test06 stamp: 'FG 11/15/2020 15:44:13'!
ERROR!
!TreeStructureReport methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:45:08' prior: 50923281!
test06

	| receptiveAccount portfolioGrandParent portfolioParent portfolioChild treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolioChild := Portfolio named: 'Portfolio hijo' with: receptiveAccount.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild.
	portfolioGrandParent := Portfolio named: 'Portfolio abuelo' with: portfolioParent.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio abuelo'.
	treeStructureReport add: String tab , 'Portfolio padre'.
	treeStructureReport add: String tab , String tab , 'Portfolio hijo'.
	treeStructureReport add: String tab , String tab , String tab , 'Cuenta de Prueba'.
	
	self assert: treeStructureReport equals: (TreeStructure of: portfolioGrandParent) treeStructure.! !

!testRun: #TreeStructureReport #test06 stamp: 'FG 11/15/2020 15:45:09'!
PASSED!

!testRun: #TreeStructureReport #test06 stamp: 'FG 11/15/2020 15:45:13'!
PASSED!
!TreeStructureReport methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:45:44' prior: 50923315!
test06

	| receptiveAccount portfolioGrandParent portfolioParent portfolioChild treeStructureReport asdasdasd|
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolioChild := Portfolio named: 'Portfolio hijo' with: receptiveAccount.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild.
	portfolioGrandParent := Portfolio named: 'Portfolio abuelo' with: portfolioParent.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio abuelo'.
	treeStructureReport add: String tab , 'Portfolio padre'.
	treeStructureReport add: String tab , String tab , 'Portfolio hijo'.
	treeStructureReport add: String tab , String tab , String tab , 'Cuenta de Prueba'.
	
	asdasdasd := (TreeStructure of: portfolioGrandParent) treeStructure.
	
	self assert: treeStructureReport equals: (TreeStructure of: portfolioGrandParent) treeStructure.! !
!TreeStructureReport methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:46:17' prior: 50923349!
test06

	| receptiveAccount portfolioGrandParent portfolioParent portfolioChild treeStructureReport asdasdasd|
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolioChild := Portfolio named: 'Portfolio hijo' with: receptiveAccount.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild.
	portfolioGrandParent := Portfolio named: 'Portfolio abuelo' with: portfolioParent.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio abuelo'.
	treeStructureReport add: String tab , 'Portfolio padre'.
	treeStructureReport add: String tab , String tab , 'Portfolio hijo'.
	treeStructureReport add: String tab , String tab , String tab , 'Cuenta de Prueba'.
	
	self assert: treeStructureReport equals: (TreeStructure of: portfolioGrandParent) treeStructure.! !
!TreeStructureReport methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:46:24' prior: 50923381!
test06

	| receptiveAccount portfolioGrandParent portfolioParent portfolioChild treeStructureReport asdasdasd|
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolioChild := Portfolio named: 'Portfolio hijo' with: receptiveAccount.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild.
	portfolioGrandParent := Portfolio named: 'Portfolio abuelo' with: portfolioParent.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio abuelo'.
	treeStructureReport add: String tab , 'Portfolio padre'.
	treeStructureReport add: String tab , String tab , 'Portfolio hijo'.
	treeStructureReport add: String tab , String tab , String tab , 'Cuenta de Prueba'.
	
	
	self assert: treeStructureReport equals: (TreeStructure of: portfolioGrandParent) treeStructure.! !
!TreeStructureReport methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:46:29' prior: 50923411!
test06

	| receptiveAccount portfolioGrandParent portfolioParent portfolioChild treeStructureReport asdasdasd|
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolioChild := Portfolio named: 'Portfolio hijo' with: receptiveAccount.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild.
	portfolioGrandParent := Portfolio named: 'Portfolio abuelo' with: portfolioParent.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio abuelo'.
	treeStructureReport add: String tab , 'Portfolio padre'.
	treeStructureReport add: String tab , String tab , 'Portfolio hijo'.
	treeStructureReport add: String tab , String tab , String tab , 'Cuenta de Prueba'.
	
	self assert: treeStructureReport equals: (TreeStructure of: portfolioGrandParent) treeStructure.! !
!TreeStructureReport methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:46:34' prior: 50923441!
test06

	| receptiveAccount portfolioGrandParent portfolioParent portfolioChild treeStructureReport|
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolioChild := Portfolio named: 'Portfolio hijo' with: receptiveAccount.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild.
	portfolioGrandParent := Portfolio named: 'Portfolio abuelo' with: portfolioParent.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio abuelo'.
	treeStructureReport add: String tab , 'Portfolio padre'.
	treeStructureReport add: String tab , String tab , 'Portfolio hijo'.
	treeStructureReport add: String tab , String tab , String tab , 'Cuenta de Prueba'.
	
	self assert: treeStructureReport equals: (TreeStructure of: portfolioGrandParent) treeStructure.! !
!TreeStructureReport methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:46:47' prior: 50923471!
test06

	| receptiveAccount portfolioGrandParent portfolioParent portfolioChild treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolioChild := Portfolio named: 'Portfolio hijo' with: receptiveAccount.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild.
	portfolioGrandParent := Portfolio named: 'Portfolio abuelo' with: portfolioParent.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio abuelo'.
	treeStructureReport add: String tab , 'Portfolio padre'.
	treeStructureReport add: String tab , String tab , 'Portfolio hijo'.
	treeStructureReport add: String tab , String tab , String tab , 'Cuenta de Prueba'.
	
	self assert: treeStructureReport equals: (TreeStructure of: portfolioGrandParent) treeStructure.! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:48:40' prior: 50923224!
treeStructure
	
	| newTreeStructure |
	
	newTreeStructure := OrderedCollection new.
	
	newTreeStructure add: account name.
	
	account accounts do:[:anotherAccount | self innerTreeStructure: 1 of: anotherAccount with: newTreeStructure].
	
	^ newTreeStructure.! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:51:44' prior: 50923236!
formTextForTree: aName and: aHeight

	| textForTree index|
	
	textForTree := aName.
	index := 0.
	
	[index < aHeight] whileTrue:[
			textForTree := String tab , textForTree.
			index := index + 1.
		].
	
	^ textForTree.
	
! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:53:09' prior: 50923541!
formTextForTree: aName and: aHeight

	| textForTree index|
	
	textForTree := aName.
	
	aHeight timesRepeat: [textForTree := String tab , textForTree].
	
	^ textForTree.
	
! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:53:18' prior: 50923552!
formTextForTree: aName and: aHeight

	| textForTree|
	
	textForTree := aName.
	
	aHeight timesRepeat: [textForTree := String tab , textForTree].
	
	^ textForTree.
	
! !

!testRun: #TreeStructureReport #test06 stamp: 'FG 11/15/2020 15:53:22'!
PASSED!
!TreeStructureReport methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:53:54'!
test02

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta de Prueba'.
	
	self assert: treeStructureReport equals: (TreeStructureReport of: receptiveAccount)! !
!TreeStructureReport methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:53:56'!
test03

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta de Prueba'.
	
	self assert: treeStructureReport equals: (TreeStructureReport of: receptiveAccount)! !
!TreeStructureReport methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:53:57'!
test04

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta de Prueba'.
	
	self assert: treeStructureReport equals: (TreeStructureReport of: receptiveAccount)! !
!TreeStructureReport methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:53:58'!
test05

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta de Prueba'.
	
	self assert: treeStructureReport equals: (TreeStructureReport of: receptiveAccount)! !
!TreeStructureReport methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:56:46' prior: 50923611!
test05

	| receptiveAccount1 receptiveAccount2 portfolioParent portfolioChild1 portfolioChild2 treeStructureReport |
	
	receptiveAccount1 := ReceptiveAccount named: 'Cuenta de Prueba1'.
	receptiveAccount2 := ReceptiveAccount named: 'Cuenta de Prueba2'.
	portfolioChild1 := Portfolio named: 'Portfolio hijo1' with: receptiveAccount1.
	portfolioChild2 := Portfolio named: 'Portfolio hijo2' with: receptiveAccount2.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild1 with: portfolioChild2.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio padre'.
	treeStructureReport add: String tab , 'Portfolio hijo1'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Prueba1'.
	treeStructureReport add: String tab , 'Portfolio hijo2'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Prueba2'.
		
	self assert: treeStructureReport equals: (TreeStructure of: portfolioParent) treeStructure.! !

!testRun: #TreeStructureReport #test05 stamp: 'FG 11/15/2020 15:56:48'!
PASSED!

!testRun: #TreeStructureReport #test06 stamp: 'FG 11/15/2020 15:56:50'!
PASSED!
!TreeStructureReport methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:58:15' prior: 50923598!
test04

	| receptiveAccount portfolioParent portfolioChild treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolioChild := Portfolio named: 'Portfolio hijo' with: receptiveAccount.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio padre'.
	treeStructureReport add: String tab , 'Portfolio hijo'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Prueba'.
		
	self assert: treeStructureReport equals: (TreeStructure of: portfolioParent) treeStructure.! !

!testRun: #TreeStructureReport #test04 stamp: 'FG 11/15/2020 15:58:16'!
PASSED!
!TreeStructureReport methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:59:12' prior: 50923585!
test03

	| receptiveAccount portfolio treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolio := Portfolio named: 'Portfolio de Prueba' with: receptiveAccount.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio de Prueba'.
	treeStructureReport add: String tab , 'Cuenta de Prueba'.
		
	self assert: treeStructureReport equals: (TreeStructure of: portfolio) treeStructure.! !

!testRun: #TreeStructureReport #test03 stamp: 'FG 11/15/2020 15:59:14'!
PASSED!
!TreeStructureReport methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:59:32' prior: 50923572!
test02

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount new.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta corriente sin nombre'.
	
	self assert: treeStructureReport equals: (TreeStructureReport of: receptiveAccount)! !
!TreeStructureReport methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:59:39' prior: 50923709!
test02

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount new.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta corriente sin nombre'.
	
	self assert: treeStructureReport equals: (TreeStructureReport of: receptiveAccount) treeStructure.! !

!testRun: #TreeStructureReport #test02 stamp: 'FG 11/15/2020 15:59:45'!
ERROR!

!testRun: #TreeStructureReport #test02 stamp: 'FG 11/15/2020 15:59:45'!
ERROR!
!TreeStructureReport methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 15:59:53' prior: 50923722!
test02

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount new.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta corriente sin nombre'.
	
	self assert: treeStructureReport equals: (TreeStructure of: receptiveAccount) treeStructure.! !

!testRun: #TreeStructureReport #test02 stamp: 'FG 11/15/2020 15:59:55'!
PASSED!
!TreeStructureReport methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 16:00:08' prior: 50923089!
test01

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta de Prueba'.
	
	self assert: treeStructureReport equals: (TreeStructure of: receptiveAccount) treeStructure.! !

!testRun: #TreeStructureReport #test01 stamp: 'FG 11/15/2020 16:00:10'!
PASSED!

!testRun: #TreeStructureReport #test01 stamp: 'FG 11/15/2020 16:00:11'!
PASSED!

!testRun: #TreeStructureReport #test02 stamp: 'FG 11/15/2020 16:00:12'!
PASSED!

!testRun: #TreeStructureReport #test03 stamp: 'FG 11/15/2020 16:00:12'!
PASSED!

!testRun: #TreeStructureReport #test04 stamp: 'FG 11/15/2020 16:00:12'!
PASSED!

!testRun: #TreeStructureReport #test05 stamp: 'FG 11/15/2020 16:00:12'!
PASSED!

!testRun: #TreeStructureReport #test06 stamp: 'FG 11/15/2020 16:00:12'!
PASSED!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 16:04:16' prior: 50923529!
treeStructure
	
	| newTreeStructure |
	
	newTreeStructure := OrderedCollection new.
	newTreeStructure add: account name.
	
	account accounts do:[:innerAccount | self innerTreeStructureOf: innerAccount inHeight: 1 for: newTreeStructure ].
	
	^ newTreeStructure.! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 16:05:44'!
innerTreeStructureOf: anAccount inHeight: aHeight for: treeStructure

	treeStructure add: (self formTextForTree: (anAccount name) and: aHeight).

	anAccount accounts do:[:innerAccount | self innerTreeStructure: aHeight + 1 of: innerAccount with: treeStructure].! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 16:06:23' prior: 50923798!
innerTreeStructureOf: anAccount inHeight: aHeight for: treeStructure

	treeStructure add: (self formTextForTree: (anAccount name) and: aHeight).

	anAccount accounts do:[:innerAccount | self innerTreeStructureOf: innerAccount inHeight: aHeight +1 for: treeStructure].! !

!methodRemoval: TreeStructure #innerTreeStructure:of:with: stamp: 'FG 11/15/2020 16:06:28'!
innerTreeStructure: aHeight of: anAccount with: treeStructure

	treeStructure add: (self formTextForTree: (anAccount name) and: aHeight).

	anAccount accounts do:[:anotherAccount | self innerTreeStructure: aHeight + 1 of: anotherAccount with: treeStructure].!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 16:08:38'!
nameForTree: aName in: aHeight

	| textForTree|
	
	textForTree := aName.
	
	aHeight timesRepeat: [textForTree := String tab , textForTree].
	
	^ textForTree.
	
! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 16:08:39' prior: 50923810!
innerTreeStructureOf: anAccount inHeight: aHeight for: treeStructure

	treeStructure add: (self nameForTree: (anAccount name) in: aHeight).

	anAccount accounts do:[:innerAccount | self innerTreeStructureOf: innerAccount inHeight: aHeight +1 for: treeStructure].! !

!methodRemoval: TreeStructure #formTextForTree:and: stamp: 'FG 11/15/2020 16:08:39'!
formTextForTree: aName and: aHeight

	| textForTree|
	
	textForTree := aName.
	
	aHeight timesRepeat: [textForTree := String tab , textForTree].
	
	^ textForTree.
	
!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 16:09:21' prior: 50923833!
nameForTree: aName in: aHeight

	| textForTree |
	
	textForTree := aName.
	
	aHeight timesRepeat: [textForTree := String tab , textForTree].
	
	^ textForTree.
	
! !

!testRun: #TreeStructureReport #test01 stamp: 'FG 11/15/2020 16:10:31'!
PASSED!

!testRun: #TreeStructureReport #test02 stamp: 'FG 11/15/2020 16:10:31'!
PASSED!

!testRun: #TreeStructureReport #test03 stamp: 'FG 11/15/2020 16:10:31'!
PASSED!

!testRun: #TreeStructureReport #test04 stamp: 'FG 11/15/2020 16:10:31'!
PASSED!

!testRun: #TreeStructureReport #test05 stamp: 'FG 11/15/2020 16:10:31'!
PASSED!

!testRun: #TreeStructureReport #test06 stamp: 'FG 11/15/2020 16:10:31'!
PASSED!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 16:15:35'!
treeStructureWithAccountSummary
	
	| newTreeStructure |
	
	newTreeStructure := OrderedCollection new.
	newTreeStructure add: account name.
	
	account accounts do:[:innerAccount | self innerTreeStructureOf: innerAccount inHeight: 1 for: newTreeStructure ].
	
	^ newTreeStructure.! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 16:18:08' prior: 50923885!
treeStructureWithAccountSummary
	
	| newTreeStructure |
	
	newTreeStructure := OrderedCollection new.
	newTreeStructure add: account name.
	
	(account isKindOf: ReceptiveAccount) ifTrue:[].
	(account isKindOf: Portfolio) ifTrue:[		
		account accounts do:[:innerAccount | self innerTreeStructureWithAccountSummaryOf: innerAccount inHeight: 1 for: newTreeStructure ].
	].
	
	^ newTreeStructure.! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 16:20:24' prior: 50923897!
treeStructureWithAccountSummary
	
	| newTreeStructure |
	
	newTreeStructure := OrderedCollection new.
	newTreeStructure add: account name.
	
	(account isKindOf: ReceptiveAccount) ifTrue:[self accountSummaryOf: account for: newTreeStructure inHeight: 1].
	(account isKindOf: Portfolio) ifTrue:[		
		account accounts do:[:innerAccount | self innerTreeStructureWithAccountSummaryOf: innerAccount inHeight: 1 for: newTreeStructure ].
	].
	
	^ newTreeStructure.! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 16:23:58'!
accountSummaryOf: anAccount for: newTreeStructure inHeight: aHeight

	| accountSummary |
	
	accountSummary := (AccountSummary of: anAccount) accountSummary.
	
	accountSummary do:[:aLine | newTreeStructure add: (self nameForTree: aLine in: aHeight)].		! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 16:24:36'!
 innerTreeStructureWithAccountSummaryOf: innerAccount inHeight: aHeight for: newTreeStructure! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 16:27:01' prior: 50923941!
innerTreeStructureWithAccountSummaryOf: anAccount inHeight: aHeight for: treeStructure
	
	treeStructure add: (self nameForTree: (anAccount name) in: aHeight).
	
	(anAccount isKindOf: ReceptiveAccount) ifTrue:[
			self accountSummaryOf: anAccount for: treeStructure  inHeight: aHeight +1 
		].
	(anAccount isKindOf: Portfolio) ifTrue:[ 
			anAccount accounts do:[:innerAccount | self innerTreeStructureWithAccountSummaryOf: innerAccount inHeight: aHeight +1 for: treeStructure].
		].! !
!TreeStructureReport methodsFor: 'tree structure with account summary test' stamp: 'FG 11/15/2020 16:29:26'!
test07

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta de Prueba'.
	treeStructureReport add: String tab , 'Balance = 0'.
	
	self assert: treeStructureReport equals: (TreeStructure of: receptiveAccount) treeStructureWithAccountSummary.! !

!testRun: #TreeStructureReport #test07 stamp: 'FG 11/15/2020 16:29:40'!
PASSED!
!TreeStructureReport methodsFor: 'tree structure with account summary test' stamp: 'FG 11/15/2020 16:31:07' prior: 50923967!
test07

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	Deposit register: 100 on: receptiveAccount.
	Withdraw register: 50 on: receptiveAccount.
	
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta de Prueba'.
	treeStructureReport add: String tab , 'Dep�sito por 100'.
	treeStructureReport add: String tab , 'Extracci�n por 50'.
	treeStructureReport add: String tab , 'Balance = 50'.
	
	self assert: treeStructureReport equals: (TreeStructure of: receptiveAccount) treeStructureWithAccountSummary.! !
!TreeStructureReport methodsFor: 'tree structure with account summary test' stamp: 'FG 11/15/2020 16:31:11'!
test08

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	Deposit register: 100 on: receptiveAccount.
	Withdraw register: 50 on: receptiveAccount.
	
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta de Prueba'.
	treeStructureReport add: String tab , 'Dep�sito por 100'.
	treeStructureReport add: String tab , 'Extracci�n por 50'.
	treeStructureReport add: String tab , 'Balance = 50'.
	
	self assert: treeStructureReport equals: (TreeStructure of: receptiveAccount) treeStructureWithAccountSummary.! !

!testRun: #TreeStructureReport #test08 stamp: 'FG 11/15/2020 16:31:16'!
PASSED!
!TreeStructureReport methodsFor: 'tree structure with account summary test' stamp: 'FG 11/15/2020 16:31:31' prior: 50923986!
test07

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta de Prueba'.
	treeStructureReport add: String tab , 'Balance = 0'.
	
	self assert: treeStructureReport equals: (TreeStructure of: receptiveAccount) treeStructureWithAccountSummary.! !
!TreeStructureReport methodsFor: 'tree structure with account summary test' stamp: 'FG 11/15/2020 16:31:33' prior: 50924034!
test07

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta de Prueba'.
	treeStructureReport add: String tab , 'Balance = 0'.
	
	self assert: treeStructureReport equals: (TreeStructure of: receptiveAccount) treeStructureWithAccountSummary.! !

!testRun: #TreeStructureReport #test07 stamp: 'FG 11/15/2020 16:31:35'!
PASSED!

!testRun: #TreeStructureReport #test08 stamp: 'FG 11/15/2020 16:31:41'!
PASSED!
!TreeStructureReport methodsFor: 'tree structure with account summary test' stamp: 'FG 11/15/2020 16:33:19'!
test09

	| receptiveAccount portofolio treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portofolio := Portfolio named: 'Portfolio de Prueba' with: receptiveAccount.
	Deposit register: 100 on: receptiveAccount.
	
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio de Prueba'.
	treeStructureReport add: String tab , 'Cuenta de Prueba'.
	treeStructureReport add: String tab , String tab , 'Dep�sito por 100'.
	treeStructureReport add: String tab , String tab , 'Balance = 100'.
	
	self assert: treeStructureReport equals: (TreeStructure of: receptiveAccount) treeStructureWithAccountSummary.! !
!TreeStructureReport methodsFor: 'tree structure with account summary test' stamp: 'FG 11/15/2020 16:33:37' prior: 50924071!
test09

	| receptiveAccount portfolio treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolio := Portfolio named: 'Portfolio de Prueba' with: receptiveAccount.
	Deposit register: 100 on: receptiveAccount.
	
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio de Prueba'.
	treeStructureReport add: String tab , 'Cuenta de Prueba'.
	treeStructureReport add: String tab , String tab , 'Dep�sito por 100'.
	treeStructureReport add: String tab , String tab , 'Balance = 100'.
	
	self assert: treeStructureReport equals: (TreeStructure of: portfolio) treeStructureWithAccountSummary.! !
!TreeStructureReport methodsFor: 'tree structure with account summary test' stamp: 'FG 11/15/2020 16:33:41' prior: 50924096!
test09

	| receptiveAccount portfolio treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolio := Portfolio named: 'Portfolio de Prueba' with: receptiveAccount.
	Deposit register: 100 on: receptiveAccount.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio de Prueba'.
	treeStructureReport add: String tab , 'Cuenta de Prueba'.
	treeStructureReport add: String tab , String tab , 'Dep�sito por 100'.
	treeStructureReport add: String tab , String tab , 'Balance = 100'.
	
	self assert: treeStructureReport equals: (TreeStructure of: portfolio) treeStructureWithAccountSummary.! !

!testRun: #TreeStructureReport #test09 stamp: 'FG 11/15/2020 16:33:52'!
PASSED!
!TreeStructureReport methodsFor: 'tree structure with account summary test' stamp: 'FG 11/15/2020 16:35:51'!
test10

	| receptiveAccount1 receptiveAccount2 portfolio treeStructureReport |
	
	receptiveAccount1 := ReceptiveAccount named: 'Cuenta de Prueba1'.
	receptiveAccount2 := ReceptiveAccount named: 'Cuenta de Prueba2'.
	portfolio := Portfolio named: 'Portfolio de Prueba' with: receptiveAccount1 with: receptiveAccount2 .
	Deposit register: 100 on: receptiveAccount1.
	Deposit register: 150 on: receptiveAccount2.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio de Prueba'.
	treeStructureReport add: String tab , 'Cuenta de Prueba1'.
	treeStructureReport add: String tab , String tab , 'Dep�sito por 100'.
	treeStructureReport add: String tab , String tab , 'Balance = 100'.
	treeStructureReport add: String tab , 'Cuenta de Prueba2'.
	treeStructureReport add: String tab , String tab , 'Dep�sito por 150'.
	treeStructureReport add: String tab , String tab , 'Balance = 150'.
	
	self assert: treeStructureReport equals: (TreeStructure of: portfolio) treeStructureWithAccountSummary.! !

!testRun: #TreeStructureReport #test10 stamp: 'FG 11/15/2020 16:35:54'!
PASSED!
!TreeStructureReport methodsFor: 'tree structure with account summary test' stamp: 'FG 11/15/2020 16:51:37'!
test11

	| familyPortfolio johnsAccount angiesAccount childrenPorfolio myAccount treeStructureReport auxiliaryAccount |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := 	ReceptiveAccount  named: 'Cuenta de Angeles'.
	childrenPorfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPorfolio.
	auxiliaryAccount := ReceptiveAccount named: 'Cuenta auxiliar'.
	
	
	Deposit register: 100 on: myAccount.
	Withdraw register: 25 on: myAccount.
	
	Deposit register: 150 on: johnsAccount.
	Withdraw register: 50 on: johnsAccount.
	
	Transference register: 100 from: angiesAccount to: auxiliaryAccount.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio de la familia'.
	treeStructureReport add: String tab , 'Cuenta mia'.
	treeStructureReport add: String tab , String tab , 'Dep�sito por 100'.
	treeStructureReport add: String tab , String tab , 'Extracci�n por 25'.
	treeStructureReport add: String tab , String tab , 'Balance = 100'.
	treeStructureReport add: String tab , 'Portfolio de hijos'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Juan'.
	treeStructureReport add: String tab , String tab , String tab , 'Dep�sito por 150'.
	treeStructureReport add: String tab , String tab , String tab , 'Extracci�n por 50'.
	treeStructureReport add: String tab , String tab , String tab , 'Balance = 100'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Angeles'.
	treeStructureReport add: String tab , String tab , String tab , 'Salida por transferencia de 100'.
	treeStructureReport add: String tab , String tab , String tab , 'Balance = -100'.
	treeStructureReport add: String tab , String tab , 'Balance = 0'.
	treeStructureReport add: String tab , 'Balance = 100'.
	
	self assert: treeStructureReport equals: (TreeStructure of: familyPortfolio ) treeStructureWithAccountSummary.! !

!testRun: #TreeStructureReport #test11 stamp: 'FG 11/15/2020 16:51:45'!
FAILURE!

!testRun: #TreeStructureReport #test11 stamp: 'FG 11/15/2020 16:51:45'!
FAILURE!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 16:53:22' prior: 50923913!
treeStructureWithAccountSummary
	
	| newTreeStructure |
	
	newTreeStructure := OrderedCollection new.
	newTreeStructure add: account name.
	
	(account isKindOf: ReceptiveAccount) ifTrue:[self accountSummaryOf: account for: newTreeStructure inHeight: 1].
	(account isKindOf: Portfolio) ifTrue:[		
		account accounts do:[:innerAccount | self innerTreeStructureWithAccountSummaryOf: innerAccount inHeight: 1 for: newTreeStructure ].
		newTreeStructure add: String tab, 'Balance = ' , account balance asString. 
	].
	
	^ newTreeStructure.! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 16:55:09' prior: 50923948!
innerTreeStructureWithAccountSummaryOf: anAccount inHeight: aHeight for: treeStructure
	
	treeStructure add: (self nameForTree: (anAccount name) in: aHeight).
	
	(anAccount isKindOf: ReceptiveAccount) ifTrue:[
			self accountSummaryOf: anAccount for: treeStructure  inHeight: aHeight +1 
		].
	(anAccount isKindOf: Portfolio) ifTrue:[ 
			anAccount accounts do:[:innerAccount | self innerTreeStructureWithAccountSummaryOf: innerAccount inHeight: aHeight +1 for: treeStructure].
			treeStructure add: (self nameForTree: 'Balance = ' , anAccount balance asString in: aHeight + 1).
		].! !

!testRun: #TreeStructureReport #test07 stamp: 'FG 11/15/2020 16:55:20'!
PASSED!

!testRun: #TreeStructureReport #test08 stamp: 'FG 11/15/2020 16:55:27'!
PASSED!

!testRun: #TreeStructureReport #test09 stamp: 'FG 11/15/2020 16:55:30'!
FAILURE!

!testRun: #TreeStructureReport #test09 stamp: 'FG 11/15/2020 16:55:30'!
FAILURE!
!TreeStructureReport methodsFor: 'tree structure with account summary test' stamp: 'FG 11/15/2020 16:55:48' prior: 50924121!
test09

	| receptiveAccount portfolio treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolio := Portfolio named: 'Portfolio de Prueba' with: receptiveAccount.
	Deposit register: 100 on: receptiveAccount.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio de Prueba'.
	treeStructureReport add: String tab , 'Cuenta de Prueba'.
	treeStructureReport add: String tab , String tab , 'Dep�sito por 100'.
	treeStructureReport add: String tab , String tab , 'Balance = 100'.
	treeStructureReport add: String tab , 'Balance = 100'.
	
	self assert: treeStructureReport equals: (TreeStructure of: portfolio) treeStructureWithAccountSummary.! !

!testRun: #TreeStructureReport #test09 stamp: 'FG 11/15/2020 16:55:51'!
PASSED!
!TreeStructureReport methodsFor: 'tree structure with account summary test' stamp: 'FG 11/15/2020 16:56:13' prior: 50924148!
test10

	| receptiveAccount1 receptiveAccount2 portfolio treeStructureReport |
	
	receptiveAccount1 := ReceptiveAccount named: 'Cuenta de Prueba1'.
	receptiveAccount2 := ReceptiveAccount named: 'Cuenta de Prueba2'.
	portfolio := Portfolio named: 'Portfolio de Prueba' with: receptiveAccount1 with: receptiveAccount2 .
	Deposit register: 100 on: receptiveAccount1.
	Deposit register: 150 on: receptiveAccount2.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio de Prueba'.
	treeStructureReport add: String tab , 'Cuenta de Prueba1'.
	treeStructureReport add: String tab , String tab , 'Dep�sito por 100'.
	treeStructureReport add: String tab , String tab , 'Balance = 100'.
	treeStructureReport add: String tab , 'Cuenta de Prueba2'.
	treeStructureReport add: String tab , String tab , 'Dep�sito por 150'.
	treeStructureReport add: String tab , String tab , 'Balance = 150'.
	treeStructureReport add: String tab , 'Balance = 250'.
	
	self assert: treeStructureReport equals: (TreeStructure of: portfolio) treeStructureWithAccountSummary.! !

!testRun: #TreeStructureReport #test10 stamp: 'FG 11/15/2020 16:56:15'!
PASSED!

!testRun: #TreeStructureReport #test11 stamp: 'FG 11/15/2020 16:56:18'!
FAILURE!

!testRun: #TreeStructureReport #test11 stamp: 'FG 11/15/2020 16:56:18'!
FAILURE!
!TreeStructureReport methodsFor: 'tree structure with account summary test' stamp: 'FG 11/15/2020 16:56:52' prior: 50924186!
test11

	| familyPortfolio johnsAccount angiesAccount childrenPorfolio myAccount treeStructureReport auxiliaryAccount asdasdadas |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := 	ReceptiveAccount  named: 'Cuenta de Angeles'.
	childrenPorfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPorfolio.
	auxiliaryAccount := ReceptiveAccount named: 'Cuenta auxiliar'.
	
	
	Deposit register: 100 on: myAccount.
	Withdraw register: 25 on: myAccount.
	
	Deposit register: 150 on: johnsAccount.
	Withdraw register: 50 on: johnsAccount.
	
	Transference register: 100 from: angiesAccount to: auxiliaryAccount.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio de la familia'.
	treeStructureReport add: String tab , 'Cuenta mia'.
	treeStructureReport add: String tab , String tab , 'Dep�sito por 100'.
	treeStructureReport add: String tab , String tab , 'Extracci�n por 25'.
	treeStructureReport add: String tab , String tab , 'Balance = 100'.
	treeStructureReport add: String tab , 'Portfolio de hijos'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Juan'.
	treeStructureReport add: String tab , String tab , String tab , 'Dep�sito por 150'.
	treeStructureReport add: String tab , String tab , String tab , 'Extracci�n por 50'.
	treeStructureReport add: String tab , String tab , String tab , 'Balance = 100'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Angeles'.
	treeStructureReport add: String tab , String tab , String tab , 'Salida por transferencia de 100'.
	treeStructureReport add: String tab , String tab , String tab , 'Balance = -100'.
	treeStructureReport add: String tab , String tab , 'Balance = 0'.
	treeStructureReport add: String tab , 'Balance = 100'.
	
	(TreeStructure of: familyPortfolio ) treeStructureWithAccountSummary.
	
	self assert: treeStructureReport equals: (TreeStructure of: familyPortfolio ) treeStructureWithAccountSummary.! !
!TreeStructureReport methodsFor: 'tree structure with account summary test' stamp: 'FG 11/15/2020 16:57:02' prior: 50924387!
test11

	| familyPortfolio johnsAccount angiesAccount childrenPorfolio myAccount treeStructureReport auxiliaryAccount asdasdadas |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := 	ReceptiveAccount  named: 'Cuenta de Angeles'.
	childrenPorfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPorfolio.
	auxiliaryAccount := ReceptiveAccount named: 'Cuenta auxiliar'.
	
	
	Deposit register: 100 on: myAccount.
	Withdraw register: 25 on: myAccount.
	
	Deposit register: 150 on: johnsAccount.
	Withdraw register: 50 on: johnsAccount.
	
	Transference register: 100 from: angiesAccount to: auxiliaryAccount.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio de la familia'.
	treeStructureReport add: String tab , 'Cuenta mia'.
	treeStructureReport add: String tab , String tab , 'Dep�sito por 100'.
	treeStructureReport add: String tab , String tab , 'Extracci�n por 25'.
	treeStructureReport add: String tab , String tab , 'Balance = 100'.
	treeStructureReport add: String tab , 'Portfolio de hijos'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Juan'.
	treeStructureReport add: String tab , String tab , String tab , 'Dep�sito por 150'.
	treeStructureReport add: String tab , String tab , String tab , 'Extracci�n por 50'.
	treeStructureReport add: String tab , String tab , String tab , 'Balance = 100'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Angeles'.
	treeStructureReport add: String tab , String tab , String tab , 'Salida por transferencia de 100'.
	treeStructureReport add: String tab , String tab , String tab , 'Balance = -100'.
	treeStructureReport add: String tab , String tab , 'Balance = 0'.
	treeStructureReport add: String tab , 'Balance = 100'.
	
	asdasdadas := (TreeStructure of: familyPortfolio ) treeStructureWithAccountSummary.
	
	self assert: treeStructureReport equals: (TreeStructure of: familyPortfolio ) treeStructureWithAccountSummary.! !
!TreeStructureReport methodsFor: 'tree structure with account summary test' stamp: 'FG 11/15/2020 16:59:08' prior: 50924458!
test11

	| familyPortfolio johnsAccount angiesAccount childrenPorfolio myAccount treeStructureReport auxiliaryAccount asdasdadas |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := 	ReceptiveAccount  named: 'Cuenta de Angeles'.
	childrenPorfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPorfolio.
	auxiliaryAccount := ReceptiveAccount named: 'Cuenta auxiliar'.
	
	
	Deposit register: 100 on: myAccount.
	Withdraw register: 25 on: myAccount.
	
	Deposit register: 150 on: johnsAccount.
	Withdraw register: 50 on: johnsAccount.
	
	Transference register: 100 from: angiesAccount to: auxiliaryAccount.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio de la familia'.
	treeStructureReport add: String tab , 'Cuenta mia'.
	treeStructureReport add: String tab , String tab , 'Dep�sito por 100'.
	treeStructureReport add: String tab , String tab , 'Extracci�n por 25'.
	treeStructureReport add: String tab , String tab , 'Balance = 75'.
	treeStructureReport add: String tab , 'Portfolio de hijos'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Juan'.
	treeStructureReport add: String tab , String tab , String tab , 'Dep�sito por 150'.
	treeStructureReport add: String tab , String tab , String tab , 'Extracci�n por 50'.
	treeStructureReport add: String tab , String tab , String tab , 'Balance = 100'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Angeles'.
	treeStructureReport add: String tab , String tab , String tab , 'Salida por transferencia de 100'.
	treeStructureReport add: String tab , String tab , String tab , 'Balance = -100'.
	treeStructureReport add: String tab , String tab , 'Balance = 0'.
	treeStructureReport add: String tab , 'Balance = 75'.
	
	asdasdadas := (TreeStructure of: familyPortfolio ) treeStructureWithAccountSummary.
	
	self assert: treeStructureReport equals: (TreeStructure of: familyPortfolio ) treeStructureWithAccountSummary.! !
!TreeStructureReport methodsFor: 'tree structure with account summary test' stamp: 'FG 11/15/2020 16:59:15' prior: 50924529!
test11

	| familyPortfolio johnsAccount angiesAccount childrenPorfolio myAccount treeStructureReport auxiliaryAccount |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := 	ReceptiveAccount  named: 'Cuenta de Angeles'.
	childrenPorfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPorfolio.
	auxiliaryAccount := ReceptiveAccount named: 'Cuenta auxiliar'.
	
	
	Deposit register: 100 on: myAccount.
	Withdraw register: 25 on: myAccount.
	
	Deposit register: 150 on: johnsAccount.
	Withdraw register: 50 on: johnsAccount.
	
	Transference register: 100 from: angiesAccount to: auxiliaryAccount.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio de la familia'.
	treeStructureReport add: String tab , 'Cuenta mia'.
	treeStructureReport add: String tab , String tab , 'Dep�sito por 100'.
	treeStructureReport add: String tab , String tab , 'Extracci�n por 25'.
	treeStructureReport add: String tab , String tab , 'Balance = 75'.
	treeStructureReport add: String tab , 'Portfolio de hijos'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Juan'.
	treeStructureReport add: String tab , String tab , String tab , 'Dep�sito por 150'.
	treeStructureReport add: String tab , String tab , String tab , 'Extracci�n por 50'.
	treeStructureReport add: String tab , String tab , String tab , 'Balance = 100'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Angeles'.
	treeStructureReport add: String tab , String tab , String tab , 'Salida por transferencia de 100'.
	treeStructureReport add: String tab , String tab , String tab , 'Balance = -100'.
	treeStructureReport add: String tab , String tab , 'Balance = 0'.
	treeStructureReport add: String tab , 'Balance = 75'.
	
	self assert: treeStructureReport equals: (TreeStructure of: familyPortfolio ) treeStructureWithAccountSummary.! !

!testRun: #TreeStructureReport #test11 stamp: 'FG 11/15/2020 16:59:30'!
PASSED!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 17:04:33' prior: 50924279!
innerTreeStructureWithAccountSummaryOf: anAccount inHeight: aHeight for: treeStructure
	
	treeStructure add: (self nameForTree: (anAccount name) in: aHeight).
	
	(anAccount isKindOf: ReceptiveAccount) ifTrue:[
			self accountSummaryOf: anAccount for: treeStructure  inHeight: aHeight +1 
		].
	
	(anAccount isKindOf: Portfolio) ifTrue:[ 
			anAccount accounts do:[:innerAccount | self innerTreeStructureWithAccountSummaryOf: innerAccount inHeight: aHeight +1 for: treeStructure].
			treeStructure add: (self nameForTree: 'Balance = ' , anAccount balance asString in: aHeight + 1).
		].! !

AccountReports subclass: #TreeStructureWithAccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TreeStructureWithAccountSummary category: #'Portfolio-Solucion' stamp: 'FG 11/15/2020 18:40:08'!
AccountReports subclass: #TreeStructureWithAccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TreeStructureWithAccountSummary methodsFor: 'no messages' stamp: 'FG 11/15/2020 18:40:36'!
treeStructureWithAccountSummary
	
	| newTreeStructure |
	
	newTreeStructure := OrderedCollection new.
	newTreeStructure add: account name.
	
	(account isKindOf: ReceptiveAccount) ifTrue:[self accountSummaryOf: account for: newTreeStructure inHeight: 1].
	(account isKindOf: Portfolio) ifTrue:[		
		account accounts do:[:innerAccount | self innerTreeStructureWithAccountSummaryOf: innerAccount inHeight: 1 for: newTreeStructure ].
		newTreeStructure add: String tab, 'Balance = ' , account balance asString. 
	].
	
	^ newTreeStructure.! !
!TreeStructureWithAccountSummary methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 18:41:02'!
nameForTree: aName in: aHeight

	| textForTree |
	
	textForTree := aName.
	
	aHeight timesRepeat: [textForTree := String tab , textForTree].
	
	^ textForTree.
	
! !
!TreeStructureWithAccountSummary methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 18:41:48'!
innerTreeStructureWithAccountSummaryOf: anAccount inHeight: aHeight for: treeStructure
	
	treeStructure add: (self nameForTree: (anAccount name) in: aHeight).
	
	(anAccount isKindOf: ReceptiveAccount) ifTrue:[
			self accountSummaryOf: anAccount for: treeStructure  inHeight: aHeight +1 
		].
	
	(anAccount isKindOf: Portfolio) ifTrue:[ 
			anAccount accounts do:[:innerAccount | self innerTreeStructureWithAccountSummaryOf: innerAccount inHeight: aHeight +1 for: treeStructure].
			treeStructure add: (self nameForTree: 'Balance = ' , anAccount balance asString in: aHeight + 1).
		].! !

!methodRemoval: TreeStructure #treeStructureWithAccountSummary stamp: 'FG 11/15/2020 18:43:10'!
treeStructureWithAccountSummary
	
	| newTreeStructure |
	
	newTreeStructure := OrderedCollection new.
	newTreeStructure add: account name.
	
	(account isKindOf: ReceptiveAccount) ifTrue:[self accountSummaryOf: account for: newTreeStructure inHeight: 1].
	(account isKindOf: Portfolio) ifTrue:[		
		account accounts do:[:innerAccount | self innerTreeStructureWithAccountSummaryOf: innerAccount inHeight: 1 for: newTreeStructure ].
		newTreeStructure add: String tab, 'Balance = ' , account balance asString. 
	].
	
	^ newTreeStructure.!

!methodRemoval: TreeStructure #innerTreeStructureWithAccountSummaryOf:inHeight:for: stamp: 'FG 11/15/2020 18:43:31'!
innerTreeStructureWithAccountSummaryOf: anAccount inHeight: aHeight for: treeStructure
	
	treeStructure add: (self nameForTree: (anAccount name) in: aHeight).
	
	(anAccount isKindOf: ReceptiveAccount) ifTrue:[
			self accountSummaryOf: anAccount for: treeStructure  inHeight: aHeight +1 
		].
	
	(anAccount isKindOf: Portfolio) ifTrue:[ 
			anAccount accounts do:[:innerAccount | self innerTreeStructureWithAccountSummaryOf: innerAccount inHeight: aHeight +1 for: treeStructure].
			treeStructure add: (self nameForTree: 'Balance = ' , anAccount balance asString in: aHeight + 1).
		].!
!TreeStructureWithAccountSummary methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 18:44:39'!
treeStructure
	
	| newTreeStructure |
	
	newTreeStructure := OrderedCollection new.
	newTreeStructure add: account name.
	
	(account isKindOf: ReceptiveAccount) ifTrue:[self accountSummaryOf: account for: newTreeStructure inHeight: 1].
	(account isKindOf: Portfolio) ifTrue:[		
		account accounts do:[:innerAccount | self innerTreeStructureWithAccountSummaryOf: innerAccount inHeight: 1 for: newTreeStructure ].
		newTreeStructure add: String tab, 'Balance = ' , account balance asString. 
	].
	
	^ newTreeStructure.! !

!testRun: #TreeStructureReport #test01 stamp: 'FG 11/15/2020 18:44:51'!
PASSED!

!testRun: #TreeStructureReport #test02 stamp: 'FG 11/15/2020 18:44:51'!
PASSED!

!testRun: #TreeStructureReport #test03 stamp: 'FG 11/15/2020 18:44:51'!
PASSED!

!testRun: #TreeStructureReport #test04 stamp: 'FG 11/15/2020 18:44:51'!
PASSED!

!testRun: #TreeStructureReport #test05 stamp: 'FG 11/15/2020 18:44:51'!
PASSED!

!testRun: #TreeStructureReport #test06 stamp: 'FG 11/15/2020 18:44:51'!
PASSED!
!TreeStructureReport methodsFor: 'tree structure with account summary test' stamp: 'FG 11/15/2020 18:45:30' prior: 50924050!
test07

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta de Prueba'.
	treeStructureReport add: String tab , 'Balance = 0'.
	
	self assert: treeStructureReport equals: (TreeStructureWithAccountSummary of: receptiveAccount) treeStructure.! !

!testRun: #TreeStructureReport #test07 stamp: 'FG 11/15/2020 18:45:33'!
ERROR!

!testRun: #TreeStructureReport #test07 stamp: 'FG 11/15/2020 18:45:33'!
ERROR!

!testRun: #TreeStructureReport #test07 stamp: 'FG 11/15/2020 18:45:43'!
ERROR!

!testRun: #TreeStructureReport #test07 stamp: 'FG 11/15/2020 18:45:43'!
ERROR!
!TreeStructureWithAccountSummary methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 18:46:17'!
accountSummaryOf: anAccount for: newTreeStructure inHeight: aHeight

	| accountSummary |
	
	accountSummary := (AccountSummary of: anAccount) accountSummary.
	
	accountSummary do:[:aLine | newTreeStructure add: (self nameForTree: aLine in: aHeight)].		! !

!methodRemoval: TreeStructure #accountSummaryOf:for:inHeight: stamp: 'FG 11/15/2020 18:46:22'!
accountSummaryOf: anAccount for: newTreeStructure inHeight: aHeight

	| accountSummary |
	
	accountSummary := (AccountSummary of: anAccount) accountSummary.
	
	accountSummary do:[:aLine | newTreeStructure add: (self nameForTree: aLine in: aHeight)].		!

!testRun: #TreeStructureReport #test07 stamp: 'FG 11/15/2020 18:46:28'!
PASSED!
!TreeStructureReport methodsFor: 'tree structure with account summary test' stamp: 'FG 11/15/2020 18:46:42' prior: 50924008!
test08

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	Deposit register: 100 on: receptiveAccount.
	Withdraw register: 50 on: receptiveAccount.
	
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta de Prueba'.
	treeStructureReport add: String tab , 'Dep�sito por 100'.
	treeStructureReport add: String tab , 'Extracci�n por 50'.
	treeStructureReport add: String tab , 'Balance = 50'.
	
	self assert: treeStructureReport equals: (TreeStructureWithAccountSummary of: receptiveAccount) treeStructure.! !

!testRun: #TreeStructureReport #test08 stamp: 'FG 11/15/2020 18:46:44'!
PASSED!
!TreeStructureReport methodsFor: 'tree structure with account summary test' stamp: 'FG 11/15/2020 18:47:00' prior: 50924312!
test09

	| receptiveAccount portfolio treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolio := Portfolio named: 'Portfolio de Prueba' with: receptiveAccount.
	Deposit register: 100 on: receptiveAccount.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio de Prueba'.
	treeStructureReport add: String tab , 'Cuenta de Prueba'.
	treeStructureReport add: String tab , String tab , 'Dep�sito por 100'.
	treeStructureReport add: String tab , String tab , 'Balance = 100'.
	treeStructureReport add: String tab , 'Balance = 100'.
	
	self assert: treeStructureReport equals: (TreeStructureWithAccountSummary of: portfolio) treeStructure.! !
!TreeStructureReport methodsFor: 'tree structure with account summary test' stamp: 'FG 11/15/2020 18:47:18' prior: 50924341!
test10

	| receptiveAccount1 receptiveAccount2 portfolio treeStructureReport |
	
	receptiveAccount1 := ReceptiveAccount named: 'Cuenta de Prueba1'.
	receptiveAccount2 := ReceptiveAccount named: 'Cuenta de Prueba2'.
	portfolio := Portfolio named: 'Portfolio de Prueba' with: receptiveAccount1 with: receptiveAccount2 .
	Deposit register: 100 on: receptiveAccount1.
	Deposit register: 150 on: receptiveAccount2.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio de Prueba'.
	treeStructureReport add: String tab , 'Cuenta de Prueba1'.
	treeStructureReport add: String tab , String tab , 'Dep�sito por 100'.
	treeStructureReport add: String tab , String tab , 'Balance = 100'.
	treeStructureReport add: String tab , 'Cuenta de Prueba2'.
	treeStructureReport add: String tab , String tab , 'Dep�sito por 150'.
	treeStructureReport add: String tab , String tab , 'Balance = 150'.
	treeStructureReport add: String tab , 'Balance = 250'.
	
	self assert: treeStructureReport equals: (TreeStructureWithAccountSummary of: portfolio) treeStructure.! !
!TreeStructureReport methodsFor: 'tree structure with account summary test' stamp: 'FG 11/15/2020 18:47:35' prior: 50924600!
test11

	| familyPortfolio johnsAccount angiesAccount childrenPorfolio myAccount treeStructureReport auxiliaryAccount |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := 	ReceptiveAccount  named: 'Cuenta de Angeles'.
	childrenPorfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPorfolio.
	auxiliaryAccount := ReceptiveAccount named: 'Cuenta auxiliar'.
	
	
	Deposit register: 100 on: myAccount.
	Withdraw register: 25 on: myAccount.
	
	Deposit register: 150 on: johnsAccount.
	Withdraw register: 50 on: johnsAccount.
	
	Transference register: 100 from: angiesAccount to: auxiliaryAccount.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio de la familia'.
	treeStructureReport add: String tab , 'Cuenta mia'.
	treeStructureReport add: String tab , String tab , 'Dep�sito por 100'.
	treeStructureReport add: String tab , String tab , 'Extracci�n por 25'.
	treeStructureReport add: String tab , String tab , 'Balance = 75'.
	treeStructureReport add: String tab , 'Portfolio de hijos'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Juan'.
	treeStructureReport add: String tab , String tab , String tab , 'Dep�sito por 150'.
	treeStructureReport add: String tab , String tab , String tab , 'Extracci�n por 50'.
	treeStructureReport add: String tab , String tab , String tab , 'Balance = 100'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Angeles'.
	treeStructureReport add: String tab , String tab , String tab , 'Salida por transferencia de 100'.
	treeStructureReport add: String tab , String tab , String tab , 'Balance = -100'.
	treeStructureReport add: String tab , String tab , 'Balance = 0'.
	treeStructureReport add: String tab , 'Balance = 75'.
	
	self assert: treeStructureReport equals: (TreeStructureWithAccountSummary of: familyPortfolio ) treeStructure.! !

!testRun: #TreeStructureReport #test07 stamp: 'FG 11/15/2020 18:47:39'!
PASSED!

!testRun: #TreeStructureReport #test08 stamp: 'FG 11/15/2020 18:47:39'!
PASSED!

!testRun: #TreeStructureReport #test09 stamp: 'FG 11/15/2020 18:47:39'!
PASSED!

!testRun: #TreeStructureReport #test10 stamp: 'FG 11/15/2020 18:47:39'!
PASSED!

!testRun: #TreeStructureReport #test11 stamp: 'FG 11/15/2020 18:47:39'!
PASSED!

!classRemoval: #Transference stamp: 'FG 11/15/2020 19:02:16'!
Object subclass: #Transference
	instanceVariableNames: 'value transferenceDeposit transferenceWithdraw'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Withdraw stamp: 'FG 11/15/2020 19:02:16'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferenceWithdraw stamp: 'FG 11/15/2020 19:02:16'!
TransferenceComponents subclass: #TransferenceWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferenceDeposit stamp: 'FG 11/15/2020 19:02:16'!
TransferenceComponents subclass: #TransferenceDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferenceComponents stamp: 'FG 11/15/2020 19:02:17'!
AccountTransaction subclass: #TransferenceComponents
	instanceVariableNames: 'transference'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'FG 11/15/2020 19:02:17'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'FG 11/15/2020 19:02:17'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TreeStructureWithAccountSummary stamp: 'FG 11/15/2020 19:02:17'!
AccountReports subclass: #TreeStructureWithAccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TreeStructure stamp: 'FG 11/15/2020 19:02:18'!
AccountReports subclass: #TreeStructure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferenceNetValue stamp: 'FG 11/15/2020 19:02:18'!
AccountReports subclass: #TransferenceNetValue
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountSummary stamp: 'FG 11/15/2020 19:02:18'!
AccountReports subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountReports stamp: 'FG 11/15/2020 19:02:19'!
Object subclass: #AccountReports
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'FG 11/15/2020 19:02:19'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'FG 11/15/2020 19:02:19'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'FG 11/15/2020 19:02:19'!
Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TreeStructureReport stamp: 'FG 11/15/2020 19:02:20'!
PortfolioExerciseTests subclass: #TreeStructureReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferenceTest stamp: 'FG 11/15/2020 19:02:20'!
PortfolioExerciseTests subclass: #TransferenceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'FG 11/15/2020 19:02:20'!
PortfolioExerciseTests subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'FG 11/15/2020 19:02:21'!
PortfolioExerciseTests subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountReportsTest stamp: 'FG 11/15/2020 19:02:21'!
PortfolioExerciseTests subclass: #AccountReportsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioExerciseTests stamp: 'FG 11/15/2020 19:02:21'!
TestCase subclass: #PortfolioExerciseTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----End fileIn of C:\Users\FACU PC\Documents\Clases Virtuales\Cosas IS 1\Cuis University\Portfolio-Solucion.st----!
!AccountReports methodsFor: 'report protocols' stamp: 'FG 11/15/2020 19:30:38'!
reportPortfolio: aPortfolio
	self subclassResponsibility.! !
!AccountReports methodsFor: 'report protocols' stamp: 'FG 11/15/2020 19:30:50'!
reportReceptiveAccount: aPortfolio
	self subclassResponsibility.! !
!AccountReports methodsFor: 'report protocols' stamp: 'FG 11/15/2020 19:31:03' prior: 50926990!
reportReceptiveAccount: aReceptiveAccount
	self subclassResponsibility.! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 20:22:58' prior: 50926593!
innerTreeStructureOf: anAccount inHeight: aHeight for: treeStructure

	|innerTreeStructure|
	
	innerTreeStructure := OrderedCollection new.
	
	innerTreeStructure add: (self nameForTree: (anAccount name) in: aHeight).

	anAccount accounts do:[:innerAccount | 
		innerTreeStructure := innerTreeStructure addAll: (self innerTreeStructureOf: innerAccount inHeight: aHeight +1 for: treeStructure) asArray yourself].
	
	^ innerTreeStructure! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 20:24:17' prior: 50927002!
innerTreeStructureOf: anAccount inHeight: aHeight for: treeStructure

	|innerTreeStructure|
	
	innerTreeStructure := OrderedCollection new.
	
	innerTreeStructure add: (self nameForTree: (anAccount name) in: aHeight).

	anAccount accounts do:[:innerAccount | 
		innerTreeStructure := innerTreeStructure addAll: (self innerTreeStructureOf: innerAccount inHeight: aHeight +1 for: treeStructure) asArray yourself 
		].
	
	^ innerTreeStructure! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 20:27:49' prior: 50926633!
treeStructure
	
	| newTreeStructure |
	
	newTreeStructure := (self innerTreeStructureOf: account inHeight: 0).

	^ newTreeStructure.! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 20:28:58'!
innerTreeStructureOf: anAccount inHeight: aHeight
	|innerTreeStructure|
	
	innerTreeStructure := OrderedCollection new.
	
	innerTreeStructure add: (self nameForTree: (anAccount name) in: aHeight).

	anAccount accounts do:[:innerAccount | 
		innerTreeStructure := innerTreeStructure addAll: (self innerTreeStructureOf: innerAccount inHeight: aHeight +1) asArray yourself 
		].
	
	^ innerTreeStructure! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 20:31:35' prior: 50927043!
innerTreeStructureOf: anAccount inHeight: aHeight
	
	|innerTreeStructure|
	
	innerTreeStructure := OrderedCollection new.
	
	innerTreeStructure add: (self nameForTree: (anAccount name) in: aHeight).

	anAccount accounts do:[:innerAccount | 
		innerTreeStructure := innerTreeStructure addAll: (self innerTreeStructureOf: innerAccount inHeight: aHeight +1) asArray yourself 
		].
	
	^ innerTreeStructure! !

!testRun: #TreeStructureReport #test01 stamp: 'FG 11/15/2020 20:32:04'!
PASSED!

!testRun: #TreeStructureReport #test02 stamp: 'FG 11/15/2020 20:32:05'!
PASSED!

!testRun: #TreeStructureReport #test03 stamp: 'FG 11/15/2020 20:32:07'!
FAILURE!

!testRun: #TreeStructureReport #test03 stamp: 'FG 11/15/2020 20:32:07'!
FAILURE!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 20:33:51' prior: 50927059!
innerTreeStructureOf: anAccount inHeight: aHeight
	
	|innerTreeStructure|
	
	innerTreeStructure := OrderedCollection new.
	
	innerTreeStructure add: (self nameForTree: (anAccount name) in: aHeight).

	anAccount accounts do:[:innerAccount | 
		innerTreeStructure := innerTreeStructure addAll: (self innerTreeStructureOf: innerAccount inHeight: aHeight +1) asArray; yourself 
		].
	
	^ innerTreeStructure! !

!testRun: #TreeStructureReport #test01 stamp: 'FG 11/15/2020 20:33:57'!
PASSED!

!testRun: #TreeStructureReport #test02 stamp: 'FG 11/15/2020 20:33:58'!
PASSED!

!testRun: #TreeStructureReport #test03 stamp: 'FG 11/15/2020 20:33:59'!
PASSED!

!testRun: #TreeStructureReport #test04 stamp: 'FG 11/15/2020 20:34:01'!
PASSED!

!testRun: #TreeStructureReport #test05 stamp: 'FG 11/15/2020 20:34:02'!
PASSED!

!testRun: #TreeStructureReport #test06 stamp: 'FG 11/15/2020 20:34:04'!
PASSED!

!methodRemoval: TreeStructure #innerTreeStructureOf:inHeight:for: stamp: 'FG 11/15/2020 20:38:39'!
innerTreeStructureOf: anAccount inHeight: aHeight for: treeStructure

	|innerTreeStructure|
	
	innerTreeStructure := OrderedCollection new.
	
	innerTreeStructure add: (self nameForTree: (anAccount name) in: aHeight).

	anAccount accounts do:[:innerAccount | 
		innerTreeStructure := innerTreeStructure addAll: (self innerTreeStructureOf: innerAccount inHeight: aHeight +1 for: treeStructure) asArray yourself 
		].
	
	^ innerTreeStructure!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 20:39:01' prior: 50926644!
treeStructureWithAccountSummary
	
	| newTreeStructure |
	
	newTreeStructure := OrderedCollection new.
	newTreeStructure add: account name.
	
	(account isKindOf: ReceptiveAccount) ifTrue:[ self accountSummaryOf: account for: newTreeStructure inHeight: 1 ].
	(account isKindOf: Portfolio) ifTrue:[		
		account accounts do:[:innerAccount | self innerTreeStructureWithAccountSummaryOf: innerAccount inHeight: 1 for: newTreeStructure ].
		newTreeStructure add: String tab, 'Balance = ' , account balance asString. 
	].
	
	^ newTreeStructure.! !
!TreeStructure methodsFor: 'tree structure with account summary' stamp: 'FG 11/15/2020 20:44:18'!
accountSummaryOf: anAccount inHeight: aHeight

	| accountSummary modifiedAccountSummary|
	
	modifiedAccountSummary := OrderedCollection new.
	
	accountSummary := (AccountSummary of: anAccount) accountSummary.
	
	accountSummary do:[:accountSummaryLine | modifiedAccountSummary add: (self nameForTree: accountSummaryLine in: aHeight)].		
	
	^ modifiedAccountSummary! !
!TreeStructure methodsFor: 'tree structure with account summary' stamp: 'FG 11/15/2020 20:54:31'!
innerTreeStructureWithAccountSummaryOf: anAccount inHeight: aHeight
	
	|innerTreeStructure|
	
	innerTreeStructure := OrderedCollection new.
	
	innerTreeStructure add: (self nameForTree: (anAccount name) in: aHeight).
	
	(anAccount isKindOf: ReceptiveAccount) ifTrue:[
			innerTreeStructure := innerTreeStructure addAll: (self accountSummaryOf: anAccount inHeight: aHeight +1);yourself 
	].
	
	(anAccount isKindOf: Portfolio) ifTrue:[ 
			anAccount accounts do:[:innerAccount | 
				innerTreeStructure := innerTreeStructure addAll: (self innerTreeStructureWithAccountSummaryOf: innerAccount inHeight: aHeight +1); yourself ].
			innerTreeStructure add: (self nameForTree: 'Balance = ' , anAccount balance asString in: aHeight + 1).
		].
	
	^ innerTreeStructure! !
!TreeStructure methodsFor: 'tree structure with account summary' stamp: 'FG 11/15/2020 20:55:53' prior: 50927133!
treeStructureWithAccountSummary
	
	| newTreeStructure |
	
	newTreeStructure := self innerTreeStructureWithAccountSummaryOf: account inHeight: 0 .
	
	^ newTreeStructure.! !

!testRun: #TreeStructureReport #test07 stamp: 'FG 11/15/2020 20:56:11'!
PASSED!

!testRun: #TreeStructureReport #test08 stamp: 'FG 11/15/2020 20:56:12'!
PASSED!

!testRun: #TreeStructureReport #test09 stamp: 'FG 11/15/2020 20:56:14'!
PASSED!

!testRun: #TreeStructureReport #test10 stamp: 'FG 11/15/2020 20:56:15'!
PASSED!

!testRun: #TreeStructureReport #test11 stamp: 'FG 11/15/2020 20:56:17'!
PASSED!

!methodRemoval: TreeStructure #accountSummaryOf:for:inHeight: stamp: 'FG 11/15/2020 20:58:59'!
accountSummaryOf: anAccount for: newTreeStructure inHeight: aHeight

	| accountSummary |
	
	accountSummary := (AccountSummary of: anAccount) accountSummary.
	
	accountSummary do:[:aLine | newTreeStructure add: (self nameForTree: aLine in: aHeight)].		!

!methodRemoval: TreeStructure #innerTreeStructureWithAccountSummaryOf:inHeight:for: stamp: 'FG 11/15/2020 20:59:04'!
innerTreeStructureWithAccountSummaryOf: anAccount inHeight: aHeight for: treeStructure
	
	treeStructure add: (self nameForTree: (anAccount name) in: aHeight).
	
	(anAccount isKindOf: ReceptiveAccount) ifTrue:[
			self accountSummaryOf: anAccount for: treeStructure  inHeight: aHeight +1 
		].
	
	(anAccount isKindOf: Portfolio) ifTrue:[ 
			anAccount accounts do:[:innerAccount | self innerTreeStructureWithAccountSummaryOf: innerAccount inHeight: aHeight +1 for: treeStructure].
			treeStructure add: (self nameForTree: 'Balance = ' , anAccount balance asString in: aHeight + 1).
		].!
!AccountReports methodsFor: 'report protocols' stamp: 'FG 11/15/2020 21:06:18'!
reportPortfolio: aPortfolio inHeight: aHeight
	self subclassResponsibility.! !

!methodRemoval: AccountReports #reportPortfolio: stamp: 'FG 11/15/2020 21:06:21'!
reportPortfolio: aPortfolio
	self subclassResponsibility.!
!AccountReports methodsFor: 'report protocols' stamp: 'FG 11/15/2020 21:06:37'!
reportReceptiveAccount: aReceptiveAccount inHeight: aHeight
	self subclassResponsibility.! !

!methodRemoval: AccountReports #reportReceptiveAccount: stamp: 'FG 11/15/2020 21:06:40'!
reportReceptiveAccount: aReceptiveAccount
	self subclassResponsibility.!
!Account methodsFor: 'nil' stamp: 'FG 11/15/2020 21:07:46'!
makeReport: aReport withHeight: aHeight
	self subclassResponsibility.! !
!Portfolio methodsFor: 'nil' stamp: 'FG 11/15/2020 21:09:17' overrides: 50927270!
makeReport: aReport withHeight: aHeight

	^ aReport reportPortfolio: self withHeight: aHeight.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 21:09:42' prior: 50927275 overrides: 50927270!
makeReport: aReport withHeight: aHeight

	^ aReport reportPortfolio: self inHeight: aHeight.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 21:11:15' overrides: 50927270!
makeReport: aReport withHeight: aHeight
	^ aReport reportReceptiveAccount: self inHeight: aHeight. ! !
!TreeStructure methodsFor: 'tree structure with account summary' stamp: 'FG 11/15/2020 21:14:31' overrides: 50927250!
reportPortfolio: aPortfolio inHeight: aHeight
	
	|innerTreeStructure|
	
	innerTreeStructure := OrderedCollection new.
	
	aPortfolio accounts do:[:innerAccount | 
		innerTreeStructure := innerTreeStructure addAll: (self innerTreeStructureWithAccountSummaryOf: innerAccount inHeight: aHeight +1); yourself ].
	innerTreeStructure add: (self nameForTree: 'Balance = ' , aPortfolio balance asString in: aHeight + 1).
	
	^ innerTreeStructure! !
!TreeStructure methodsFor: 'tree structure with account summary' stamp: 'FG 11/15/2020 21:17:23' overrides: 50927260!
reportReceptiveAccount: anAccount inHeight: aHeight
	
	|innerTreeStructure|
	
	innerTreeStructure := self accountSummaryOf: anAccount inHeight: aHeight +1.
	
	^ innerTreeStructure! !
!TreeStructure methodsFor: 'tree structure with account summary' stamp: 'FG 11/15/2020 21:24:33' prior: 50927168!
innerTreeStructureWithAccountSummaryOf: anAccount inHeight: aHeight
	
	|innerTreeStructure|
	
	innerTreeStructure := OrderedCollection new.
	
	innerTreeStructure add: (self nameForTree: (anAccount name) in: aHeight).
	
	innerTreeStructure := innerTreeStructure addAll: ( anAccount makeReport: self withHeight: aHeight );yourself.
	
	^ innerTreeStructure! !

!testRun: #TreeStructureReport #test07 stamp: 'FG 11/15/2020 21:24:56'!
PASSED!

!testRun: #TreeStructureReport #test08 stamp: 'FG 11/15/2020 21:24:58'!
PASSED!

!testRun: #TreeStructureReport #test09 stamp: 'FG 11/15/2020 21:24:59'!
PASSED!

!testRun: #TreeStructureReport #test10 stamp: 'FG 11/15/2020 21:25:01'!
PASSED!

!testRun: #TreeStructureReport #test11 stamp: 'FG 11/15/2020 21:25:02'!
PASSED!
!TreeStructure methodsFor: 'tree structure with account summary' stamp: 'FG 11/15/2020 21:31:00' prior: 50927314 overrides: 50927260!
reportReceptiveAccount: anAccount inHeight: aHeight
	
	|innerTreeStructure accountSummary|
	
	innerTreeStructure := OrderedCollection new.
	
	accountSummary := (AccountSummary of: anAccount) accountSummary.
	
	accountSummary do:[:accountSummaryLine | innerTreeStructure add: (self nameForTree: accountSummaryLine in: aHeight)].		
	
	^ innerTreeStructure! !

!testRun: #TreeStructureReport #test07 stamp: 'FG 11/15/2020 21:31:05'!
FAILURE!

!testRun: #TreeStructureReport #test08 stamp: 'FG 11/15/2020 21:31:05'!
FAILURE!

!testRun: #TreeStructureReport #test09 stamp: 'FG 11/15/2020 21:31:05'!
FAILURE!

!testRun: #TreeStructureReport #test10 stamp: 'FG 11/15/2020 21:31:05'!
FAILURE!

!testRun: #TreeStructureReport #test11 stamp: 'FG 11/15/2020 21:31:06'!
FAILURE!

!testRun: #TreeStructureReport #test01 stamp: 'FG 11/15/2020 21:32:27'!
PASSED!

!testRun: #TreeStructureReport #test02 stamp: 'FG 11/15/2020 21:32:27'!
PASSED!

!testRun: #TreeStructureReport #test03 stamp: 'FG 11/15/2020 21:32:27'!
PASSED!

!testRun: #TreeStructureReport #test04 stamp: 'FG 11/15/2020 21:32:27'!
PASSED!

!testRun: #TreeStructureReport #test05 stamp: 'FG 11/15/2020 21:32:27'!
PASSED!

!testRun: #TreeStructureReport #test06 stamp: 'FG 11/15/2020 21:32:27'!
PASSED!

!testRun: #TreeStructureReport #test07 stamp: 'FG 11/15/2020 21:32:35'!
FAILURE!

!testRun: #TreeStructureReport #test07 stamp: 'FG 11/15/2020 21:32:35'!
FAILURE!
!TreeStructure methodsFor: 'tree structure with account summary' stamp: 'FG 11/15/2020 21:33:31' prior: 50927352 overrides: 50927260!
reportReceptiveAccount: anAccount inHeight: aHeight
	
	|innerTreeStructure accountSummary|
	
	innerTreeStructure := OrderedCollection new.
	
	accountSummary := (AccountSummary of: anAccount) accountSummary.
	
	accountSummary do:[:accountSummaryLine | innerTreeStructure add: (self nameForTree: accountSummaryLine in: aHeight + 1)].		
	
	^ innerTreeStructure! !

!testRun: #TreeStructureReport #test07 stamp: 'FG 11/15/2020 21:33:36'!
PASSED!

!testRun: #TreeStructureReport #test08 stamp: 'FG 11/15/2020 21:33:38'!
PASSED!

!testRun: #TreeStructureReport #test09 stamp: 'FG 11/15/2020 21:33:40'!
PASSED!

!testRun: #TreeStructureReport #test10 stamp: 'FG 11/15/2020 21:33:41'!
PASSED!

!testRun: #TreeStructureReport #test11 stamp: 'FG 11/15/2020 21:33:42'!
PASSED!

!methodRemoval: TreeStructure #accountSummaryOf:inHeight: stamp: 'FG 11/15/2020 21:36:35'!
accountSummaryOf: anAccount inHeight: aHeight

	| accountSummary modifiedAccountSummary|
	
	modifiedAccountSummary := OrderedCollection new.
	
	accountSummary := (AccountSummary of: anAccount) accountSummary.
	
	accountSummary do:[:accountSummaryLine | modifiedAccountSummary add: (self nameForTree: accountSummaryLine in: aHeight)].		
	
	^ modifiedAccountSummary!

!testRun: #TreeStructureReport #test07 stamp: 'FG 11/15/2020 22:36:13'!
PASSED!

!testRun: #TreeStructureReport #test08 stamp: 'FG 11/15/2020 22:36:13'!
PASSED!

!testRun: #TreeStructureReport #test09 stamp: 'FG 11/15/2020 22:36:13'!
PASSED!

!testRun: #TreeStructureReport #test10 stamp: 'FG 11/15/2020 22:36:13'!
PASSED!

!testRun: #TreeStructureReport #test11 stamp: 'FG 11/15/2020 22:36:13'!
PASSED!

!testRun: #TreeStructureReport #test01 stamp: 'FG 11/15/2020 22:36:14'!
PASSED!

!testRun: #TreeStructureReport #test02 stamp: 'FG 11/15/2020 22:36:14'!
PASSED!

!testRun: #TreeStructureReport #test03 stamp: 'FG 11/15/2020 22:36:14'!
PASSED!

!testRun: #TreeStructureReport #test04 stamp: 'FG 11/15/2020 22:36:14'!
PASSED!

!testRun: #TreeStructureReport #test05 stamp: 'FG 11/15/2020 22:36:14'!
PASSED!

!testRun: #TreeStructureReport #test06 stamp: 'FG 11/15/2020 22:36:15'!
PASSED!
!TreeStructure methodsFor: 'default tree structure' stamp: 'FG 11/15/2020 22:37:37' prior: 50927036!
treeStructure
	
	^ self innerTreeStructureOf: account inHeight: 0.
! !
!TreeStructure methodsFor: 'default tree structure' stamp: 'FG 11/15/2020 22:39:09' prior: 50927085!
innerTreeStructureOf: anAccount inHeight: aHeight
	
	|innerTreeStructure|
	
	innerTreeStructure := OrderedCollection new.
	
	innerTreeStructure add: (self nameForTree: (anAccount name) in: aHeight).

	anAccount accounts do:[:innerAccount | 
		innerTreeStructure := innerTreeStructure addAll: (self innerTreeStructureOf: innerAccount inHeight: aHeight +1) asArray; yourself 
	].
	
	^ innerTreeStructure! !

!testRun: #TreeStructureReport #test01 stamp: 'FG 11/15/2020 22:39:14'!
PASSED!

!testRun: #TreeStructureReport #test02 stamp: 'FG 11/15/2020 22:39:14'!
PASSED!

!testRun: #TreeStructureReport #test03 stamp: 'FG 11/15/2020 22:39:14'!
PASSED!

!testRun: #TreeStructureReport #test04 stamp: 'FG 11/15/2020 22:39:14'!
PASSED!

!testRun: #TreeStructureReport #test05 stamp: 'FG 11/15/2020 22:39:14'!
PASSED!

!testRun: #TreeStructureReport #test06 stamp: 'FG 11/15/2020 22:39:14'!
PASSED!
!TreeStructure methodsFor: 'tree structure with account summary' stamp: 'FG 11/15/2020 22:40:26' prior: 50927196!
treeStructureWithAccountSummary

	^ self innerTreeStructureWithAccountSummaryOf: account inHeight: 0.
	
	! !
!TreeStructure methodsFor: 'tree structure with account summary' stamp: 'FG 11/15/2020 22:41:02' prior: 50927296 overrides: 50927250!
reportPortfolio: aPortfolio inHeight: aHeight
	
	|innerTreeStructure|
	
	innerTreeStructure := OrderedCollection new.
	
	aPortfolio accounts do:[:innerAccount | 
		innerTreeStructure := innerTreeStructure addAll: (self innerTreeStructureWithAccountSummaryOf: innerAccount inHeight: aHeight +1); yourself ].
		innerTreeStructure add: (self nameForTree: 'Balance = ' , aPortfolio balance asString in: aHeight + 1).
	
	^ innerTreeStructure! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 22:48:10'!
appliedTabulationsIn: aName basedOn: aHeight

	| textForTree |
	
	textForTree := aName.
	
	aHeight timesRepeat: [textForTree := String tab , textForTree].
	
	^ textForTree.
	
! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 22:48:10' prior: 50927324!
innerTreeStructureWithAccountSummaryOf: anAccount inHeight: aHeight
	
	|innerTreeStructure|
	
	innerTreeStructure := OrderedCollection new.
	
	innerTreeStructure add: (self appliedTabulationsIn: (anAccount name) basedOn: aHeight).
	
	innerTreeStructure := innerTreeStructure addAll: ( anAccount makeReport: self withHeight: aHeight );yourself.
	
	^ innerTreeStructure! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 22:48:10' prior: 50927401 overrides: 50927260!
reportReceptiveAccount: anAccount inHeight: aHeight
	
	|innerTreeStructure accountSummary|
	
	innerTreeStructure := OrderedCollection new.
	
	accountSummary := (AccountSummary of: anAccount) accountSummary.
	
	accountSummary do:[:accountSummaryLine | innerTreeStructure add: (self appliedTabulationsIn: accountSummaryLine basedOn: aHeight + 1)].		
	
	^ innerTreeStructure! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 22:48:10' prior: 50927517 overrides: 50927250!
reportPortfolio: aPortfolio inHeight: aHeight
	
	|innerTreeStructure|
	
	innerTreeStructure := OrderedCollection new.
	
	aPortfolio accounts do:[:innerAccount | 
		innerTreeStructure := innerTreeStructure addAll: (self innerTreeStructureWithAccountSummaryOf: innerAccount inHeight: aHeight +1); yourself ].
		innerTreeStructure add: (self appliedTabulationsIn: 'Balance = ' , aPortfolio balance asString basedOn: aHeight + 1).
	
	^ innerTreeStructure! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 22:48:10' prior: 50927477!
innerTreeStructureOf: anAccount inHeight: aHeight
	
	|innerTreeStructure|
	
	innerTreeStructure := OrderedCollection new.
	
	innerTreeStructure add: (self appliedTabulationsIn: (anAccount name) basedOn: aHeight).

	anAccount accounts do:[:innerAccount | 
		innerTreeStructure := innerTreeStructure addAll: (self innerTreeStructureOf: innerAccount inHeight: aHeight +1) asArray; yourself 
	].
	
	^ innerTreeStructure! !

!methodRemoval: TreeStructure #nameForTree:in: stamp: 'FG 11/15/2020 22:48:10'!
nameForTree: aName in: aHeight

	| textForTree |
	
	textForTree := aName.
	
	aHeight timesRepeat: [textForTree := String tab , textForTree].
	
	^ textForTree.
	
!
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 22:48:43' prior: 50927534!
appliedTabulationsIn: aName basedOn: numberOfTabulations

	| textForTree |
	
	textForTree := aName.
	
	numberOfTabulations timesRepeat: [textForTree := String tab , textForTree].
	
	^ textForTree.
	
! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 22:49:09'!
applyingTabulationsIn: aName basedOn: numberOfTabulations

	| textForTree |
	
	textForTree := aName.
	
	numberOfTabulations timesRepeat: [textForTree := String tab , textForTree].
	
	^ textForTree.
	
! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 22:49:10' prior: 50927559 overrides: 50927260!
reportReceptiveAccount: anAccount inHeight: aHeight
	
	|innerTreeStructure accountSummary|
	
	innerTreeStructure := OrderedCollection new.
	
	accountSummary := (AccountSummary of: anAccount) accountSummary.
	
	accountSummary do:[:accountSummaryLine | innerTreeStructure add: (self applyingTabulationsIn: accountSummaryLine basedOn: aHeight + 1)].		
	
	^ innerTreeStructure! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 22:49:10' prior: 50927593!
innerTreeStructureOf: anAccount inHeight: aHeight
	
	|innerTreeStructure|
	
	innerTreeStructure := OrderedCollection new.
	
	innerTreeStructure add: (self applyingTabulationsIn: (anAccount name) basedOn: aHeight).

	anAccount accounts do:[:innerAccount | 
		innerTreeStructure := innerTreeStructure addAll: (self innerTreeStructureOf: innerAccount inHeight: aHeight +1) asArray; yourself 
	].
	
	^ innerTreeStructure! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 22:49:10' prior: 50927543!
innerTreeStructureWithAccountSummaryOf: anAccount inHeight: aHeight
	
	|innerTreeStructure|
	
	innerTreeStructure := OrderedCollection new.
	
	innerTreeStructure add: (self applyingTabulationsIn: (anAccount name) basedOn: aHeight).
	
	innerTreeStructure := innerTreeStructure addAll: ( anAccount makeReport: self withHeight: aHeight );yourself.
	
	^ innerTreeStructure! !
!TreeStructure methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 22:49:10' prior: 50927575 overrides: 50927250!
reportPortfolio: aPortfolio inHeight: aHeight
	
	|innerTreeStructure|
	
	innerTreeStructure := OrderedCollection new.
	
	aPortfolio accounts do:[:innerAccount | 
		innerTreeStructure := innerTreeStructure addAll: (self innerTreeStructureWithAccountSummaryOf: innerAccount inHeight: aHeight +1); yourself ].
		innerTreeStructure add: (self applyingTabulationsIn: 'Balance = ' , aPortfolio balance asString basedOn: aHeight + 1).
	
	^ innerTreeStructure! !

!methodRemoval: TreeStructure #appliedTabulationsIn:basedOn: stamp: 'FG 11/15/2020 22:49:10'!
appliedTabulationsIn: aName basedOn: numberOfTabulations

	| textForTree |
	
	textForTree := aName.
	
	numberOfTabulations timesRepeat: [textForTree := String tab , textForTree].
	
	^ textForTree.
	
!
!AccountReportsTest methodsFor: 'nil' stamp: 'FG 11/15/2020 22:53:18'!
test01

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta de Prueba'.
	
	self assert: treeStructureReport equals: (TreeStructure of: receptiveAccount) treeStructure.! !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 22:53:36'!
test02

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount new.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta corriente sin nombre'.
	
	self assert: treeStructureReport equals: (TreeStructure of: receptiveAccount) treeStructure.! !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 22:53:46'!
test03

	| receptiveAccount portfolio treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolio := Portfolio named: 'Portfolio de Prueba' with: receptiveAccount.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio de Prueba'.
	treeStructureReport add: String tab , 'Cuenta de Prueba'.
		
	self assert: treeStructureReport equals: (TreeStructure of: portfolio) treeStructure.! !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 22:53:58'!
test04

	| receptiveAccount portfolioParent portfolioChild treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolioChild := Portfolio named: 'Portfolio hijo' with: receptiveAccount.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio padre'.
	treeStructureReport add: String tab , 'Portfolio hijo'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Prueba'.
		
	self assert: treeStructureReport equals: (TreeStructure of: portfolioParent) treeStructure.! !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 22:54:10'!
test05

	| receptiveAccount1 receptiveAccount2 portfolioParent portfolioChild1 portfolioChild2 treeStructureReport |
	
	receptiveAccount1 := ReceptiveAccount named: 'Cuenta de Prueba1'.
	receptiveAccount2 := ReceptiveAccount named: 'Cuenta de Prueba2'.
	portfolioChild1 := Portfolio named: 'Portfolio hijo1' with: receptiveAccount1.
	portfolioChild2 := Portfolio named: 'Portfolio hijo2' with: receptiveAccount2.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild1 with: portfolioChild2.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio padre'.
	treeStructureReport add: String tab , 'Portfolio hijo1'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Prueba1'.
	treeStructureReport add: String tab , 'Portfolio hijo2'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Prueba2'.
		
	self assert: treeStructureReport equals: (TreeStructure of: portfolioParent) treeStructure.! !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 22:54:22'!
test06

	| receptiveAccount portfolioGrandParent portfolioParent portfolioChild treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolioChild := Portfolio named: 'Portfolio hijo' with: receptiveAccount.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild.
	portfolioGrandParent := Portfolio named: 'Portfolio abuelo' with: portfolioParent.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio abuelo'.
	treeStructureReport add: String tab , 'Portfolio padre'.
	treeStructureReport add: String tab , String tab , 'Portfolio hijo'.
	treeStructureReport add: String tab , String tab , String tab , 'Cuenta de Prueba'.
	
	self assert: treeStructureReport equals: (TreeStructure of: portfolioGrandParent) treeStructure.! !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 22:54:30'!
test07

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta de Prueba'.
	treeStructureReport add: String tab , 'Balance = 0'.
	
	self assert: treeStructureReport equals: (TreeStructure of: receptiveAccount) treeStructureWithAccountSummary.! !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 22:54:41'!
test08

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	Deposit register: 100 on: receptiveAccount.
	Withdraw register: 50 on: receptiveAccount.
	
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta de Prueba'.
	treeStructureReport add: String tab , 'Dep�sito por 100'.
	treeStructureReport add: String tab , 'Extracci�n por 50'.
	treeStructureReport add: String tab , 'Balance = 50'.
	
	self assert: treeStructureReport equals: (TreeStructure of: receptiveAccount) treeStructureWithAccountSummary.! !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 22:54:54'!
test09

	| receptiveAccount portfolio treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolio := Portfolio named: 'Portfolio de Prueba' with: receptiveAccount.
	Deposit register: 100 on: receptiveAccount.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio de Prueba'.
	treeStructureReport add: String tab , 'Cuenta de Prueba'.
	treeStructureReport add: String tab , String tab , 'Dep�sito por 100'.
	treeStructureReport add: String tab , String tab , 'Balance = 100'.
	treeStructureReport add: String tab , 'Balance = 100'.
	
	self assert: treeStructureReport equals: (TreeStructure of: portfolio) treeStructureWithAccountSummary.! !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 22:55:09'!
test10

	| receptiveAccount1 receptiveAccount2 portfolio treeStructureReport |
	
	receptiveAccount1 := ReceptiveAccount named: 'Cuenta de Prueba1'.
	receptiveAccount2 := ReceptiveAccount named: 'Cuenta de Prueba2'.
	portfolio := Portfolio named: 'Portfolio de Prueba' with: receptiveAccount1 with: receptiveAccount2 .
	Deposit register: 100 on: receptiveAccount1.
	Deposit register: 150 on: receptiveAccount2.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio de Prueba'.
	treeStructureReport add: String tab , 'Cuenta de Prueba1'.
	treeStructureReport add: String tab , String tab , 'Dep�sito por 100'.
	treeStructureReport add: String tab , String tab , 'Balance = 100'.
	treeStructureReport add: String tab , 'Cuenta de Prueba2'.
	treeStructureReport add: String tab , String tab , 'Dep�sito por 150'.
	treeStructureReport add: String tab , String tab , 'Balance = 150'.
	treeStructureReport add: String tab , 'Balance = 250'.
	
	self assert: treeStructureReport equals: (TreeStructure of: portfolio) treeStructureWithAccountSummary.! !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 22:55:34'!
test11

	| familyPortfolio johnsAccount angiesAccount childrenPorfolio myAccount treeStructureReport auxiliaryAccount |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := 	ReceptiveAccount  named: 'Cuenta de Angeles'.
	childrenPorfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPorfolio.
	auxiliaryAccount := ReceptiveAccount named: 'Cuenta auxiliar'.
	
	
	Deposit register: 100 on: myAccount.
	Withdraw register: 25 on: myAccount.
	
	Deposit register: 150 on: johnsAccount.
	Withdraw register: 50 on: johnsAccount.
	
	Transference register: 100 from: angiesAccount to: auxiliaryAccount.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio de la familia'.
	treeStructureReport add: String tab , 'Cuenta mia'.
	treeStructureReport add: String tab , String tab , 'Dep�sito por 100'.
	treeStructureReport add: String tab , String tab , 'Extracci�n por 25'.
	treeStructureReport add: String tab , String tab , 'Balance = 75'.
	treeStructureReport add: String tab , 'Portfolio de hijos'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Juan'.
	treeStructureReport add: String tab , String tab , String tab , 'Dep�sito por 150'.
	treeStructureReport add: String tab , String tab , String tab , 'Extracci�n por 50'.
	treeStructureReport add: String tab , String tab , String tab , 'Balance = 100'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Angeles'.
	treeStructureReport add: String tab , String tab , String tab , 'Salida por transferencia de 100'.
	treeStructureReport add: String tab , String tab , String tab , 'Balance = -100'.
	treeStructureReport add: String tab , String tab , 'Balance = 0'.
	treeStructureReport add: String tab , 'Balance = 75'.
	
	self assert: treeStructureReport equals: (TreeStructure of: familyPortfolio ) treeStructureWithAccountSummary.! !

!classRemoval: #TreeStructureReport stamp: 'FG 11/15/2020 22:55:38'!
PortfolioExerciseTests subclass: #TreeStructureReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #AccountReportsTest #test01 stamp: 'FG 11/15/2020 22:55:41'!
PASSED!

!testRun: #AccountReportsTest #test02 stamp: 'FG 11/15/2020 22:55:41'!
PASSED!

!testRun: #AccountReportsTest #test03 stamp: 'FG 11/15/2020 22:55:41'!
PASSED!

!testRun: #AccountReportsTest #test04 stamp: 'FG 11/15/2020 22:55:41'!
PASSED!

!testRun: #AccountReportsTest #test05 stamp: 'FG 11/15/2020 22:55:41'!
PASSED!

!testRun: #AccountReportsTest #test06 stamp: 'FG 11/15/2020 22:55:41'!
PASSED!

!testRun: #AccountReportsTest #test07 stamp: 'FG 11/15/2020 22:55:41'!
PASSED!

!testRun: #AccountReportsTest #test08 stamp: 'FG 11/15/2020 22:55:41'!
PASSED!

!testRun: #AccountReportsTest #test09 stamp: 'FG 11/15/2020 22:55:41'!
PASSED!

!testRun: #AccountReportsTest #test10 stamp: 'FG 11/15/2020 22:55:41'!
PASSED!

!testRun: #AccountReportsTest #test11 stamp: 'FG 11/15/2020 22:55:41'!
PASSED!
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 22:58:19'!
test07TreeStructureOfAnAccountDisplaysOnlyTheAccountName

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta de Prueba'.
	
	self assert: treeStructureReport equals: (TreeStructure of: receptiveAccount) treeStructure.! !

!methodRemoval: AccountReportsTest #test01 stamp: 'FG 11/15/2020 22:58:23'!
test01

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta de Prueba'.
	
	self assert: treeStructureReport equals: (TreeStructure of: receptiveAccount) treeStructure.!
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 22:58:57'!
test08TreeStructureOfAnAccountWithoutNameDisplaysOnlyTheAccountDefaultName

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount new.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta corriente sin nombre'.
	
	self assert: treeStructureReport equals: (TreeStructure of: receptiveAccount) treeStructure.! !

!methodRemoval: AccountReportsTest #test02 stamp: 'FG 11/15/2020 22:59:01'!
test02

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount new.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta corriente sin nombre'.
	
	self assert: treeStructureReport equals: (TreeStructure of: receptiveAccount) treeStructure.!
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 23:00:05'!
test09TreeStructureOfAPortfolioWithAReceptiveAccountIsCorrectlyDisplay

	| receptiveAccount portfolio treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolio := Portfolio named: 'Portfolio de Prueba' with: receptiveAccount.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio de Prueba'.
	treeStructureReport add: String tab , 'Cuenta de Prueba'.
		
	self assert: treeStructureReport equals: (TreeStructure of: portfolio) treeStructure.! !

!methodRemoval: AccountReportsTest #test03 stamp: 'FG 11/15/2020 23:00:11'!
test03

	| receptiveAccount portfolio treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolio := Portfolio named: 'Portfolio de Prueba' with: receptiveAccount.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio de Prueba'.
	treeStructureReport add: String tab , 'Cuenta de Prueba'.
		
	self assert: treeStructureReport equals: (TreeStructure of: portfolio) treeStructure.!
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 23:01:37'!
test04TreeStructureWithAChainOfPortfoliosIsProperlyDisplay

	| receptiveAccount portfolioParent portfolioChild treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolioChild := Portfolio named: 'Portfolio hijo' with: receptiveAccount.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio padre'.
	treeStructureReport add: String tab , 'Portfolio hijo'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Prueba'.
		
	self assert: treeStructureReport equals: (TreeStructure of: portfolioParent) treeStructure.! !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 23:01:43'!
test10TreeStructureWithAChainOfPortfoliosIsProperlyDisplay

	| receptiveAccount portfolioParent portfolioChild treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolioChild := Portfolio named: 'Portfolio hijo' with: receptiveAccount.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio padre'.
	treeStructureReport add: String tab , 'Portfolio hijo'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Prueba'.
		
	self assert: treeStructureReport equals: (TreeStructure of: portfolioParent) treeStructure.! !

!methodRemoval: AccountReportsTest #test04TreeStructureWithAChainOfPortfoliosIsProperlyDisplay stamp: 'FG 11/15/2020 23:01:45'!
test04TreeStructureWithAChainOfPortfoliosIsProperlyDisplay

	| receptiveAccount portfolioParent portfolioChild treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolioChild := Portfolio named: 'Portfolio hijo' with: receptiveAccount.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio padre'.
	treeStructureReport add: String tab , 'Portfolio hijo'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Prueba'.
		
	self assert: treeStructureReport equals: (TreeStructure of: portfolioParent) treeStructure.!

!methodRemoval: AccountReportsTest #test04 stamp: 'FG 11/15/2020 23:01:47'!
test04

	| receptiveAccount portfolioParent portfolioChild treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolioChild := Portfolio named: 'Portfolio hijo' with: receptiveAccount.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio padre'.
	treeStructureReport add: String tab , 'Portfolio hijo'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Prueba'.
		
	self assert: treeStructureReport equals: (TreeStructure of: portfolioParent) treeStructure.!
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 23:02:35'!
test11TreeStructureWithAPortfolioWithMultiplePortfoliosInsideDisplaysCorrectly

	| receptiveAccount1 receptiveAccount2 portfolioParent portfolioChild1 portfolioChild2 treeStructureReport |
	
	receptiveAccount1 := ReceptiveAccount named: 'Cuenta de Prueba1'.
	receptiveAccount2 := ReceptiveAccount named: 'Cuenta de Prueba2'.
	portfolioChild1 := Portfolio named: 'Portfolio hijo1' with: receptiveAccount1.
	portfolioChild2 := Portfolio named: 'Portfolio hijo2' with: receptiveAccount2.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild1 with: portfolioChild2.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio padre'.
	treeStructureReport add: String tab , 'Portfolio hijo1'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Prueba1'.
	treeStructureReport add: String tab , 'Portfolio hijo2'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Prueba2'.
		
	self assert: treeStructureReport equals: (TreeStructure of: portfolioParent) treeStructure.! !

!methodRemoval: AccountReportsTest #test05 stamp: 'FG 11/15/2020 23:02:38'!
test05

	| receptiveAccount1 receptiveAccount2 portfolioParent portfolioChild1 portfolioChild2 treeStructureReport |
	
	receptiveAccount1 := ReceptiveAccount named: 'Cuenta de Prueba1'.
	receptiveAccount2 := ReceptiveAccount named: 'Cuenta de Prueba2'.
	portfolioChild1 := Portfolio named: 'Portfolio hijo1' with: receptiveAccount1.
	portfolioChild2 := Portfolio named: 'Portfolio hijo2' with: receptiveAccount2.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild1 with: portfolioChild2.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio padre'.
	treeStructureReport add: String tab , 'Portfolio hijo1'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Prueba1'.
	treeStructureReport add: String tab , 'Portfolio hijo2'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Prueba2'.
		
	self assert: treeStructureReport equals: (TreeStructure of: portfolioParent) treeStructure.!
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 23:03:32'!
test12TreeStructureWithAChainOfPortfoliosIsProperlyDisplay

	| receptiveAccount portfolioGrandParent portfolioParent portfolioChild treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolioChild := Portfolio named: 'Portfolio hijo' with: receptiveAccount.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild.
	portfolioGrandParent := Portfolio named: 'Portfolio abuelo' with: portfolioParent.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio abuelo'.
	treeStructureReport add: String tab , 'Portfolio padre'.
	treeStructureReport add: String tab , String tab , 'Portfolio hijo'.
	treeStructureReport add: String tab , String tab , String tab , 'Cuenta de Prueba'.
	
	self assert: treeStructureReport equals: (TreeStructure of: portfolioGrandParent) treeStructure.! !
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 23:04:34'!
test10TreeStructureWithAPortfolioWithAnotherPortfolioInsideIsProperlyDisplay

	| receptiveAccount portfolioParent portfolioChild treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolioChild := Portfolio named: 'Portfolio hijo' with: receptiveAccount.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio padre'.
	treeStructureReport add: String tab , 'Portfolio hijo'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Prueba'.
		
	self assert: treeStructureReport equals: (TreeStructure of: portfolioParent) treeStructure.! !

!methodRemoval: AccountReportsTest #test10TreeStructureWithAChainOfPortfoliosIsProperlyDisplay stamp: 'FG 11/15/2020 23:04:38'!
test10TreeStructureWithAChainOfPortfoliosIsProperlyDisplay

	| receptiveAccount portfolioParent portfolioChild treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolioChild := Portfolio named: 'Portfolio hijo' with: receptiveAccount.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio padre'.
	treeStructureReport add: String tab , 'Portfolio hijo'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Prueba'.
		
	self assert: treeStructureReport equals: (TreeStructure of: portfolioParent) treeStructure.!
!AccountReportsTest methodsFor: 'as yet unclassified' stamp: 'FG 11/15/2020 23:04:58'!
test11TreeStructureWithAPortfolioWithMultiplePortfoliosInsideIsProperlyDisplay

	| receptiveAccount1 receptiveAccount2 portfolioParent portfolioChild1 portfolioChild2 treeStructureReport |
	
	receptiveAccount1 := ReceptiveAccount named: 'Cuenta de Prueba1'.
	receptiveAccount2 := ReceptiveAccount named: 'Cuenta de Prueba2'.
	portfolioChild1 := Portfolio named: 'Portfolio hijo1' with: receptiveAccount1.
	portfolioChild2 := Portfolio named: 'Portfolio hijo2' with: receptiveAccount2.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild1 with: portfolioChild2.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio padre'.
	treeStructureReport add: String tab , 'Portfolio hijo1'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Prueba1'.
	treeStructureReport add: String tab , 'Portfolio hijo2'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Prueba2'.
		
	self assert: treeStructureReport equals: (TreeStructure of: portfolioParent) treeStructure.! !

!methodRemoval: AccountReportsTest #test11TreeStructureWithAPortfolioWithMultiplePortfoliosInsideDisplaysCorrectly stamp: 'FG 11/15/2020 23:05:01'!
test11TreeStructureWithAPortfolioWithMultiplePortfoliosInsideDisplaysCorrectly

	| receptiveAccount1 receptiveAccount2 portfolioParent portfolioChild1 portfolioChild2 treeStructureReport |
	
	receptiveAccount1 := ReceptiveAccount named: 'Cuenta de Prueba1'.
	receptiveAccount2 := ReceptiveAccount named: 'Cuenta de Prueba2'.
	portfolioChild1 := Portfolio named: 'Portfolio hijo1' with: receptiveAccount1.
	portfolioChild2 := Portfolio named: 'Portfolio hijo2' with: receptiveAccount2.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild1 with: portfolioChild2.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio padre'.
	treeStructureReport add: String tab , 'Portfolio hijo1'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Prueba1'.
	treeStructureReport add: String tab , 'Portfolio hijo2'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Prueba2'.
		
	self assert: treeStructureReport equals: (TreeStructure of: portfolioParent) treeStructure.!

!methodRemoval: AccountReportsTest #test06 stamp: 'FG 11/15/2020 23:05:12'!
test06

	| receptiveAccount portfolioGrandParent portfolioParent portfolioChild treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolioChild := Portfolio named: 'Portfolio hijo' with: receptiveAccount.
	portfolioParent := Portfolio named: 'Portfolio padre' with: portfolioChild.
	portfolioGrandParent := Portfolio named: 'Portfolio abuelo' with: portfolioParent.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio abuelo'.
	treeStructureReport add: String tab , 'Portfolio padre'.
	treeStructureReport add: String tab , String tab , 'Portfolio hijo'.
	treeStructureReport add: String tab , String tab , String tab , 'Cuenta de Prueba'.
	
	self assert: treeStructureReport equals: (TreeStructure of: portfolioGrandParent) treeStructure.!
!AccountReportsTest methodsFor: 'tree structure with account summary' stamp: 'FG 11/15/2020 23:06:16'!
test13StructureTreeWithAccountSummaryWithAReceptiveAccountOnlyDisplayTheAccountNameAndBalance

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta de Prueba'.
	treeStructureReport add: String tab , 'Balance = 0'.
	
	self assert: treeStructureReport equals: (TreeStructure of: receptiveAccount) treeStructureWithAccountSummary.! !

!methodRemoval: AccountReportsTest #test07 stamp: 'FG 11/15/2020 23:06:20'!
test07

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta de Prueba'.
	treeStructureReport add: String tab , 'Balance = 0'.
	
	self assert: treeStructureReport equals: (TreeStructure of: receptiveAccount) treeStructureWithAccountSummary.!
!AccountReportsTest methodsFor: 'tree structure with account summary' stamp: 'FG 11/15/2020 23:07:45'!
test14StructureTreeWithAccountSummaryWithAReceptiveAccountWithTransactionsProperlyDisplaysAccountNameAndAccountSummary

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	Deposit register: 100 on: receptiveAccount.
	Withdraw register: 50 on: receptiveAccount.
	
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta de Prueba'.
	treeStructureReport add: String tab , 'Dep�sito por 100'.
	treeStructureReport add: String tab , 'Extracci�n por 50'.
	treeStructureReport add: String tab , 'Balance = 50'.
	
	self assert: treeStructureReport equals: (TreeStructure of: receptiveAccount) treeStructureWithAccountSummary.! !

!methodRemoval: AccountReportsTest #test08 stamp: 'FG 11/15/2020 23:07:48'!
test08

	| receptiveAccount treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	Deposit register: 100 on: receptiveAccount.
	Withdraw register: 50 on: receptiveAccount.
	
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Cuenta de Prueba'.
	treeStructureReport add: String tab , 'Dep�sito por 100'.
	treeStructureReport add: String tab , 'Extracci�n por 50'.
	treeStructureReport add: String tab , 'Balance = 50'.
	
	self assert: treeStructureReport equals: (TreeStructure of: receptiveAccount) treeStructureWithAccountSummary.!
!AccountReportsTest methodsFor: 'tree structure with account summary' stamp: 'FG 11/15/2020 23:09:20'!
test15StructureTreeWithAccountSummaryWithAPortfolioProperlyDisplaysPortfolioNameAndItsReceptiveAccounts

	| receptiveAccount portfolio treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolio := Portfolio named: 'Portfolio de Prueba' with: receptiveAccount.
	Deposit register: 100 on: receptiveAccount.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio de Prueba'.
	treeStructureReport add: String tab , 'Cuenta de Prueba'.
	treeStructureReport add: String tab , String tab , 'Dep�sito por 100'.
	treeStructureReport add: String tab , String tab , 'Balance = 100'.
	treeStructureReport add: String tab , 'Balance = 100'.
	
	self assert: treeStructureReport equals: (TreeStructure of: portfolio) treeStructureWithAccountSummary.! !

!methodRemoval: AccountReportsTest #test09 stamp: 'FG 11/15/2020 23:09:22'!
test09

	| receptiveAccount portfolio treeStructureReport |
	
	receptiveAccount := ReceptiveAccount named: 'Cuenta de Prueba'.
	portfolio := Portfolio named: 'Portfolio de Prueba' with: receptiveAccount.
	Deposit register: 100 on: receptiveAccount.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio de Prueba'.
	treeStructureReport add: String tab , 'Cuenta de Prueba'.
	treeStructureReport add: String tab , String tab , 'Dep�sito por 100'.
	treeStructureReport add: String tab , String tab , 'Balance = 100'.
	treeStructureReport add: String tab , 'Balance = 100'.
	
	self assert: treeStructureReport equals: (TreeStructure of: portfolio) treeStructureWithAccountSummary.!
!AccountReportsTest methodsFor: 'tree structure with account summary' stamp: 'FG 11/15/2020 23:10:10'!
test16StructureTreeWithAccountSummaryDisplaysCorrectlyMultiplePortfolios

	| receptiveAccount1 receptiveAccount2 portfolio treeStructureReport |
	
	receptiveAccount1 := ReceptiveAccount named: 'Cuenta de Prueba1'.
	receptiveAccount2 := ReceptiveAccount named: 'Cuenta de Prueba2'.
	portfolio := Portfolio named: 'Portfolio de Prueba' with: receptiveAccount1 with: receptiveAccount2 .
	Deposit register: 100 on: receptiveAccount1.
	Deposit register: 150 on: receptiveAccount2.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio de Prueba'.
	treeStructureReport add: String tab , 'Cuenta de Prueba1'.
	treeStructureReport add: String tab , String tab , 'Dep�sito por 100'.
	treeStructureReport add: String tab , String tab , 'Balance = 100'.
	treeStructureReport add: String tab , 'Cuenta de Prueba2'.
	treeStructureReport add: String tab , String tab , 'Dep�sito por 150'.
	treeStructureReport add: String tab , String tab , 'Balance = 150'.
	treeStructureReport add: String tab , 'Balance = 250'.
	
	self assert: treeStructureReport equals: (TreeStructure of: portfolio) treeStructureWithAccountSummary.! !

!methodRemoval: AccountReportsTest #test10 stamp: 'FG 11/15/2020 23:10:12'!
test10

	| receptiveAccount1 receptiveAccount2 portfolio treeStructureReport |
	
	receptiveAccount1 := ReceptiveAccount named: 'Cuenta de Prueba1'.
	receptiveAccount2 := ReceptiveAccount named: 'Cuenta de Prueba2'.
	portfolio := Portfolio named: 'Portfolio de Prueba' with: receptiveAccount1 with: receptiveAccount2 .
	Deposit register: 100 on: receptiveAccount1.
	Deposit register: 150 on: receptiveAccount2.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio de Prueba'.
	treeStructureReport add: String tab , 'Cuenta de Prueba1'.
	treeStructureReport add: String tab , String tab , 'Dep�sito por 100'.
	treeStructureReport add: String tab , String tab , 'Balance = 100'.
	treeStructureReport add: String tab , 'Cuenta de Prueba2'.
	treeStructureReport add: String tab , String tab , 'Dep�sito por 150'.
	treeStructureReport add: String tab , String tab , 'Balance = 150'.
	treeStructureReport add: String tab , 'Balance = 250'.
	
	self assert: treeStructureReport equals: (TreeStructure of: portfolio) treeStructureWithAccountSummary.!
!AccountReportsTest methodsFor: 'tree structure with account summary' stamp: 'FG 11/15/2020 23:11:06'!
test17StructureTreeWithAccountSummaryResolvesExercisesExample

	| familyPortfolio johnsAccount angiesAccount childrenPorfolio myAccount treeStructureReport auxiliaryAccount |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := 	ReceptiveAccount  named: 'Cuenta de Angeles'.
	childrenPorfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPorfolio.
	auxiliaryAccount := ReceptiveAccount named: 'Cuenta auxiliar'.
	
	
	Deposit register: 100 on: myAccount.
	Withdraw register: 25 on: myAccount.
	
	Deposit register: 150 on: johnsAccount.
	Withdraw register: 50 on: johnsAccount.
	
	Transference register: 100 from: angiesAccount to: auxiliaryAccount.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio de la familia'.
	treeStructureReport add: String tab , 'Cuenta mia'.
	treeStructureReport add: String tab , String tab , 'Dep�sito por 100'.
	treeStructureReport add: String tab , String tab , 'Extracci�n por 25'.
	treeStructureReport add: String tab , String tab , 'Balance = 75'.
	treeStructureReport add: String tab , 'Portfolio de hijos'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Juan'.
	treeStructureReport add: String tab , String tab , String tab , 'Dep�sito por 150'.
	treeStructureReport add: String tab , String tab , String tab , 'Extracci�n por 50'.
	treeStructureReport add: String tab , String tab , String tab , 'Balance = 100'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Angeles'.
	treeStructureReport add: String tab , String tab , String tab , 'Salida por transferencia de 100'.
	treeStructureReport add: String tab , String tab , String tab , 'Balance = -100'.
	treeStructureReport add: String tab , String tab , 'Balance = 0'.
	treeStructureReport add: String tab , 'Balance = 75'.
	
	self assert: treeStructureReport equals: (TreeStructure of: familyPortfolio ) treeStructureWithAccountSummary.! !

!methodRemoval: AccountReportsTest #test11 stamp: 'FG 11/15/2020 23:11:12'!
test11

	| familyPortfolio johnsAccount angiesAccount childrenPorfolio myAccount treeStructureReport auxiliaryAccount |
	
	johnsAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angiesAccount := 	ReceptiveAccount  named: 'Cuenta de Angeles'.
	childrenPorfolio := Portfolio named: 'Portfolio de hijos' with: johnsAccount with: angiesAccount.
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPortfolio := Portfolio named: 'Portfolio de la familia' with: myAccount with: childrenPorfolio.
	auxiliaryAccount := ReceptiveAccount named: 'Cuenta auxiliar'.
	
	
	Deposit register: 100 on: myAccount.
	Withdraw register: 25 on: myAccount.
	
	Deposit register: 150 on: johnsAccount.
	Withdraw register: 50 on: johnsAccount.
	
	Transference register: 100 from: angiesAccount to: auxiliaryAccount.
	
	treeStructureReport := OrderedCollection new.
	treeStructureReport add: 'Portfolio de la familia'.
	treeStructureReport add: String tab , 'Cuenta mia'.
	treeStructureReport add: String tab , String tab , 'Dep�sito por 100'.
	treeStructureReport add: String tab , String tab , 'Extracci�n por 25'.
	treeStructureReport add: String tab , String tab , 'Balance = 75'.
	treeStructureReport add: String tab , 'Portfolio de hijos'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Juan'.
	treeStructureReport add: String tab , String tab , String tab , 'Dep�sito por 150'.
	treeStructureReport add: String tab , String tab , String tab , 'Extracci�n por 50'.
	treeStructureReport add: String tab , String tab , String tab , 'Balance = 100'.
	treeStructureReport add: String tab , String tab , 'Cuenta de Angeles'.
	treeStructureReport add: String tab , String tab , String tab , 'Salida por transferencia de 100'.
	treeStructureReport add: String tab , String tab , String tab , 'Balance = -100'.
	treeStructureReport add: String tab , String tab , 'Balance = 0'.
	treeStructureReport add: String tab , 'Balance = 75'.
	
	self assert: treeStructureReport equals: (TreeStructure of: familyPortfolio ) treeStructureWithAccountSummary.!