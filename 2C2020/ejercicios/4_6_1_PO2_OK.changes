

----End fileIn of /home/grosinov/linux64/Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 19:13:22'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 19:13:22'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 19:13:26'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/2/2020 19:13:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 19:13:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/2/2020 19:13:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/2/2020 19:13:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/2/2020 19:13:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/2/2020 19:13:36'!
PASSED!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'GR 11/2/2020 19:25:38' prior: 50925021!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
	
	^ transaction! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'GR 11/2/2020 19:26:38' prior: 50925123!
balance

	^transactions sum: [ :aTransaction | aTransaction addToBalanceDependingOnTransaction ] ifEmpty: [ 0 ]! !
!AccountTransaction methodsFor: 'value' stamp: 'GR 11/2/2020 19:27:07'!
addToBalanceDependingOnTransaction

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'GR 11/2/2020 19:27:31' overrides: 50925183!
addToBalanceDependingOnTransaction

	^ value! !
!Withdraw methodsFor: 'value' stamp: 'GR 11/2/2020 19:27:52' overrides: 50925183!
addToBalanceDependingOnTransaction

	^ value negated! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 19:28:11'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 19:28:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/2/2020 19:28:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 19:28:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 19:28:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/2/2020 19:28:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/2/2020 19:28:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/2/2020 19:28:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/2/2020 19:28:20'!
PASSED!

TestCase subclass: #ProtfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ProtfolioTest category: 'Portfolio-Ejercicio' stamp: 'GR 11/2/2020 19:29:04'!
TestCase subclass: #ProtfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'GR 11/2/2020 19:31:08'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ProtfolioTest methodsFor: 'nil' stamp: 'GR 11/2/2020 19:30:51'!
test01CanCreateAnEmptyPortfolio

	self assert: Portfolio new isEmpty.! !

Object subclass: #Portfolio
	instanceVariableNames: 'grouping'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'GR 11/2/2020 19:32:06'!
Object subclass: #Portfolio
	instanceVariableNames: 'grouping'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'GR 11/2/2020 19:32:18'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 19:32:34' prior: 50925250!
test01CanCreateAnEmptyPortfolio

	! !

!classRemoval: #Portfolio stamp: 'GR 11/2/2020 19:32:39'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'GR 11/2/2020 19:36:08'!
Object subclass: #Portfolio
	instanceVariableNames: 'contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 19:32:54' prior: 50925279!
test01CanCreateAnEmptyPortfolio

	self assert: Portfolio new isEmpty.! !

!testRun: #ProtfolioTest #test01CanCreateAnEmptyPortfolio stamp: 'GR 11/2/2020 19:36:12'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 19:36:23'!
isEmpty
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 19:36:32' prior: 50925305!
isEmpty
	
	contents isEmpty.! !

!testRun: #ProtfolioTest #test01CanCreateAnEmptyPortfolio stamp: 'GR 11/2/2020 19:36:33'!
ERROR!
!Portfolio methodsFor: 'nil' stamp: 'GR 11/2/2020 19:37:36' overrides: 16896425!
initialize

	contents := Set new.! !

!testRun: #ProtfolioTest #test01CanCreateAnEmptyPortfolio stamp: 'GR 11/2/2020 19:37:46'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 19:38:01' prior: 50925309!
isEmpty
	
	^ contents isEmpty.! !

!testRun: #ProtfolioTest #test01CanCreateAnEmptyPortfolio stamp: 'GR 11/2/2020 19:38:02'!
PASSED!

!testRun: #ProtfolioTest #test01CanCreateAnEmptyPortfolio stamp: 'GR 11/2/2020 19:38:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/2/2020 19:38:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 19:38:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 19:38:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/2/2020 19:38:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/2/2020 19:38:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/2/2020 19:38:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/2/2020 19:38:02'!
PASSED!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 19:39:03'!
test02CanAddAnAccountToPortfolio

	! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 19:39:56' prior: 50925297!
test01CanCreateAnEmptyPortfolio

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.! !
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 19:40:50' prior: 50925323!
isEmpty
	
	^ true! !

!testRun: #ProtfolioTest #test01CanCreateAnEmptyPortfolio stamp: 'GR 11/2/2020 19:40:53'!
ERROR!

!testRun: #ProtfolioTest #test01CanCreateAnEmptyPortfolio stamp: 'GR 11/2/2020 19:40:53'!
ERROR!

!testRun: #ProtfolioTest #test01CanCreateAnEmptyPortfolio stamp: 'GR 11/2/2020 19:41:00'!
ERROR!

!testRun: #ProtfolioTest #test01CanCreateAnEmptyPortfolio stamp: 'GR 11/2/2020 19:41:00'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 19:41:10'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 19:41:14' prior: 50925388!
balance
	
	^0! !

!testRun: #ProtfolioTest #test01CanCreateAnEmptyPortfolio stamp: 'GR 11/2/2020 19:41:16'!
PASSED!

!testRun: #ProtfolioTest #test01CanCreateAnEmptyPortfolio stamp: 'GR 11/2/2020 19:41:18'!
PASSED!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 19:43:08' prior: 50925360!
test02CanAddAnAccountToPortfolio

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: ReceptiveAccount .
	
	self assert: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 19:43:26' prior: 50925402!
test02CanAddAnAccountToPortfolio

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: ReceptiveAccount new.
	
	self assert: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 19:43:36' prior: 50925412!
test02CanAddAnAccountToPortfolio

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: ReceptiveAccount new.
	
	self deny: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.! !

!testRun: #ProtfolioTest #test02CanAddAnAccountToPortfolio stamp: 'GR 11/2/2020 19:43:39'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/2/2020 19:44:06'!
add: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/2/2020 19:44:34' prior: 50925434!
add: aReceptiveAccount 
	
	contents add: aReceptiveAccount.! !

!testRun: #ProtfolioTest #test02CanAddAnAccountToPortfolio stamp: 'GR 11/2/2020 19:44:36'!
FAILURE!

!testRun: #ProtfolioTest #test02CanAddAnAccountToPortfolio stamp: 'GR 11/2/2020 19:45:01'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 19:45:31' prior: 50925373!
isEmpty
	
	^ contents isEmpty! !

!testRun: #ProtfolioTest #test02CanAddAnAccountToPortfolio stamp: 'GR 11/2/2020 19:45:37'!
PASSED!

!testRun: #ProtfolioTest #test01CanCreateAnEmptyPortfolio stamp: 'GR 11/2/2020 19:45:37'!
PASSED!

!testRun: #ProtfolioTest #test02CanAddAnAccountToPortfolio stamp: 'GR 11/2/2020 19:45:37'!
PASSED!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 19:46:16'!
test03

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: ReceptiveAccount new.
	
	self deny: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 19:47:11'!
test02CanAddAnAccountWithBalanceToPortfolio

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: ReceptiveAccount new.
	
	self deny: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.! !

!methodRemoval: ProtfolioTest #test02CanAddAnAccountToPortfolio stamp: 'GR 11/2/2020 19:47:11'!
test02CanAddAnAccountToPortfolio

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: ReceptiveAccount new.
	
	self deny: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 19:47:58' prior: 50925471!
test02CanAddAnAccountWithBalanceToPortfolio

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio add: account.
	
	self deny: portfolio isEmpty.
	self assert: 100 equals: portfolio balance.! !

!testRun: #ProtfolioTest #test02CanAddAnAccountWithBalanceToPortfolio stamp: 'GR 11/2/2020 19:48:01'!
FAILURE!

!testRun: #ProtfolioTest #test02CanAddAnAccountWithBalanceToPortfolio stamp: 'GR 11/2/2020 19:48:01'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 19:51:39' prior: 50925392!
balance
	
	| totalBalance |
	
	totalBalance := 0. 
	
	contents do: [:anAccount | totalBalance := totalBalance + anAccount balance]. 
	
	^totalBalance.! !

!testRun: #ProtfolioTest #test02CanAddAnAccountWithBalanceToPortfolio stamp: 'GR 11/2/2020 19:51:57'!
PASSED!

!testRun: #ProtfolioTest #test02CanAddAnAccountWithBalanceToPortfolio stamp: 'GR 11/2/2020 19:51:59'!
PASSED!

!testRun: #ProtfolioTest #test01CanCreateAnEmptyPortfolio stamp: 'GR 11/2/2020 19:51:59'!
PASSED!

!testRun: #ProtfolioTest #test02CanAddAnAccountWithBalanceToPortfolio stamp: 'GR 11/2/2020 19:51:59'!
PASSED!

!testRun: #ProtfolioTest #test03 stamp: 'GR 11/2/2020 19:51:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/2/2020 19:51:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 19:51:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 19:51:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/2/2020 19:51:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/2/2020 19:51:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/2/2020 19:51:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/2/2020 19:51:59'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'GR 11/2/2020 20:16:58' prior: 50925177!
balance
	
	| balance |
	
	balance := 0.
	
	transactions do: [ :aTransaction | balance := aTransaction addToBalance: balance].
	
	^balance! !
!Withdraw methodsFor: 'private' stamp: 'GR 11/2/2020 20:17:17'!
addToBalance: aBalance

	^ aBalance - value.! !

!methodRemoval: Withdraw #addToBalanceDependingOnTransaction stamp: 'GR 11/2/2020 20:17:22'!
addToBalanceDependingOnTransaction

	^ value negated!
!Deposit methodsFor: 'private' stamp: 'GR 11/2/2020 20:17:36'!
addToBalance: aBalance

	^ aBalance + value.! !

!methodRemoval: Deposit #addToBalanceDependingOnTransaction stamp: 'GR 11/2/2020 20:17:40'!
addToBalanceDependingOnTransaction

	^ value!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 20:17:46'!
PASSED!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:34:58'!
test03BalanceWithAnAccountAndAPortfolio

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: ReceptiveAccount new.
	
	self deny: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.! !

!methodRemoval: ProtfolioTest #test03 stamp: 'GR 11/2/2020 20:35:04'!
test03

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: ReceptiveAccount new.
	
	self deny: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:35:19'!
test02BalanceWithAnAccount

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio add: account.
	
	self deny: portfolio isEmpty.
	self assert: 100 equals: portfolio balance.! !

!methodRemoval: ProtfolioTest #test02CanAddAnAccountWithBalanceToPortfolio stamp: 'GR 11/2/2020 20:35:19'!
test02CanAddAnAccountWithBalanceToPortfolio

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio add: account.
	
	self deny: portfolio isEmpty.
	self assert: 100 equals: portfolio balance.!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:35:40'!
test01PortfolioStartsWithBalanceCero

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.! !

!methodRemoval: ProtfolioTest #test01CanCreateAnEmptyPortfolio stamp: 'GR 11/2/2020 20:35:40'!
test01CanCreateAnEmptyPortfolio

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:35:52' prior: 50925588!
test03BalanceWithAnAccountAndAPortfolio

	| portfolio subPortfolio |
	
	portfolio := Portfolio new.
	portfolio add: ReceptiveAccount new.
	
	self deny: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:37:22' prior: 50925645!
test03BalanceWithAnAccountAndAPortfolio

	| portfolio account subPortfolio account2 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	Deposit register: 50 on: account2.
	
	portfolio add: account.
	subPortfolio add: account2.
	
	self deny: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:37:45' prior: 50925655!
test03BalanceWithAnAccountAndAPortfolio

	| portfolio account subPortfolio account2 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	Deposit register: 50 on: account2.
	
	portfolio add: account.
	subPortfolio add: account2.
	portfolio add: subPortfolio.
	
	self deny: portfolio isEmpty.
	self assert: 150 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:37:53' prior: 50925672!
test03BalanceWithAnAccountAndAPortfolio

	| portfolio account subPortfolio account2 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	Deposit register: 50 on: account2.
	
	portfolio add: account.
	subPortfolio add: account2.
	portfolio add: subPortfolio.
	
	self assert: 150 equals: portfolio balance.! !

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 20:38:02'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 20:38:02'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 20:38:02'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 20:38:02'!
PASSED!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:38:54' prior: 50925690!
test03BalanceWithAnAccountAndAPortfolio

	| portfolio account subPortfolio account2 account3 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	Deposit register: 50 on: account2.
	Deposit register: 30 on: account3.
	
	portfolio add: account.
	subPortfolio add: account2.
	subPortfolio add: account3.
	portfolio add: subPortfolio.
	
	self assert: 150 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:38:57' prior: 50925720!
test03BalanceWithAnAccountAndAPortfolio

	| portfolio account subPortfolio account2 account3 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	Deposit register: 50 on: account2.
	Deposit register: 30 on: account3.
	
	portfolio add: account.
	subPortfolio add: account2.
	subPortfolio add: account3.
	portfolio add: subPortfolio.
	
	self assert: 180 equals: portfolio balance.! !

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 20:38:59'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 20:38:59'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 20:38:59'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 20:38:59'!
PASSED!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:43:46'!
test04TransactionsWithEmptyPortfolioReturnsNoTransactions

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:44:23' prior: 50925773!
test04TransactionsWithEmptyPortfolioReturnsNoTransactions

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: OrderedCollection new equals: portfolio transactions.! !

!testRun: #ProtfolioTest #test04TransactionsWithEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 20:44:27'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 20:44:56'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 20:45:14' prior: 50925794!
transactions
	
	^ OrderedCollection new.! !

!testRun: #ProtfolioTest #test04TransactionsWithEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 20:45:15'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 20:45:15'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 20:45:15'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 20:45:15'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsWithEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 20:45:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/2/2020 20:45:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 20:45:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 20:45:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/2/2020 20:45:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/2/2020 20:45:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/2/2020 20:45:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/2/2020 20:45:15'!
PASSED!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:45:49'!
test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: OrderedCollection new equals: portfolio transactions.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:46:00'!
test04TransactionsOfEmptyPortfolioReturnsNoTransactions

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: OrderedCollection new equals: portfolio transactions.! !

!methodRemoval: ProtfolioTest #test04TransactionsWithEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 20:46:00'!
test04TransactionsWithEmptyPortfolioReturnsNoTransactions

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: OrderedCollection new equals: portfolio transactions.!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:46:20' prior: 50925846!
test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio add: account.
	
	self assert: OrderedCollection new equals: portfolio transactions.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/2/2020 20:48:01' prior: 50925873!
test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio add: account.
	
	self assert: (OrderedCollection with: deposit) equals: portfolio transactions.! !

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 20:48:16'!
FAILURE!
!Portfolio methodsFor: 'initialization' stamp: 'GR 11/2/2020 20:48:52' prior: 50925316 overrides: 16896425!
initialize

	contents := OrderedCollection new.! !

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 20:49:07'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 20:49:09'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 20:49:10'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 20:49:11'!
PASSED!
!Portfolio methodsFor: 'initialization' stamp: 'GR 11/2/2020 20:49:46' prior: 50925905 overrides: 16896425!
initialize

	contents := Set new.! !

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 20:53:33'!
FAILURE!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 20:53:33'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 20:55:25' prior: 50925798!
transactions
	
	| account |
	
	account := contents detect: [:anAccount | true].
	
	^ account transactions.! !

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 20:55:27'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 20:55:33'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 20:55:33'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 20:55:33'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 20:55:33'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 20:55:33'!
ERROR!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 20:55:33'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 20:55:33'!
ERROR!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 20:56:06'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 20:56:06'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 20:56:06'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 20:56:06'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 20:56:06'!
ERROR!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 20:56:06'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 20:56:06'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 20:56:25' prior: 50925937!
transactions
	
	| account |
	
	account := contents detect: [:anAccount | true].
	
	^ account transactions.! !
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 20:56:43' prior: 50926000!
transactions
	
	| account |

	account := contents detect: [:anAccount | true].
	
	^ account transactions.! !
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 20:56:56' prior: 50926007!
transactions
	
	| account |

	account := contents detect: [:anAccount | true] ifNone: [^OrderedCollection new].
	
	^ account transactions.! !

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 20:56:57'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 20:56:59'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 20:56:59'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 20:56:59'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 20:56:59'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 20:56:59'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 20:56:59'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 20:57:24'!
test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio add: account.
	
	self assert: (OrderedCollection with: deposit) equals: portfolio transactions.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 20:58:46' prior: 50926046!
test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction

	| portfolio account subPortfolio account2 deposit1 deposit2 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account.
	deposit2 := Deposit register: 50 on: account2.
	
	portfolio add: account.
	subPortfolio add: account2.
	portfolio add: subPortfolio.
	
	self assert: (OrderedCollection with: deposit1 with: deposit2) equals: portfolio transactions.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 20:59:00' prior: 50925740!
test03BalanceWithAnAccountAndAPortfolio

	| portfolio account subPortfolio account2 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	Deposit register: 50 on: account2.
	
	portfolio add: account.
	subPortfolio add: account2.
	portfolio add: subPortfolio.
	
	self assert: 180 equals: portfolio balance.! !

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 20:59:33'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 21:02:30' prior: 50926013!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	
	contents do: [:anElement | transactions add: anElement transactions].
	
	^ transactions.! !
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 21:05:03' prior: 50926102!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	
	contents do: [:anElement | transactions addAll: anElement transactions].
	
	^ transactions.! !

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:05:04'!
FAILURE!

portfolio transactions!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:12:38' prior: 50926060!
test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction

	| portfolio account subPortfolio account2 deposit1 deposit2 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account.
	deposit2 := Deposit register: 50 on: account2.
	
	portfolio add: account.
	subPortfolio add: account2.
	portfolio add: subPortfolio.
	
	self assert: (OrderedCollection with: deposit2 with: deposit1) equals: portfolio transactions.! !

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:18:00'!
FAILURE!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:18:00'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:18:01'!
FAILURE!

(OrderedCollection with: deposit2 with: deposit1)!

portfolio transactions!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:22:27' prior: 50926124!
test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction

	| portfolio account subPortfolio account2 deposit1 deposit2 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account.
	deposit2 := Deposit register: 50 on: account2.
	
	portfolio add: account.
	subPortfolio add: account2.
	portfolio add: subPortfolio.
	
	self assert: (OrderedCollection with: deposit1 with: deposit2) equals: portfolio transactions.! !

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:22:29'!
FAILURE!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:22:29'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:22:30'!
FAILURE!

(OrderedCollection with: deposit1 with: deposit2)!

portfolio transactions!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:23:51' prior: 50926161!
test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction

	| portfolio account subPortfolio account2 deposit1 deposit2 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account.
	deposit2 := Deposit register: 50 on: account2.
	
	portfolio add: account.
	subPortfolio add: account2.
	portfolio add: subPortfolio.
	
	self assert: (( portfolio transactions includes: deposit1 ) and: (portfolio transactions includes: deposit2)).! !

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:23:59'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 21:23:59'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 21:23:59'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 21:23:59'!
FAILURE!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 21:23:59'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 21:23:59'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:23:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/2/2020 21:23:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 21:23:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 21:23:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/2/2020 21:23:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/2/2020 21:23:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/2/2020 21:23:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/2/2020 21:23:59'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 21:23:59'!
FAILURE!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:24:22' prior: 50926081!
test03BalanceWithAnAccountAndAPortfolio

	| portfolio account subPortfolio account2 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	Deposit register: 50 on: account2.
	
	portfolio add: account.
	subPortfolio add: account2.
	portfolio add: subPortfolio.
	
	self assert: 150 equals: portfolio balance.! !

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 21:24:24'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 21:24:24'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 21:24:24'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 21:24:24'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 21:24:24'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 21:24:24'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:24:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/2/2020 21:24:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 21:24:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 21:24:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/2/2020 21:24:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/2/2020 21:24:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/2/2020 21:24:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/2/2020 21:24:24'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:29:31'!
test07hasRegisteredOfEmptyPortfolioReturnsNoTransactions

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: OrderedCollection new equals: portfolio transactions.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:30:20' prior: 50926344!
test07hasRegisteredOfEmptyPortfolioReturnsNoTransactions

	| portfolio |
	
	portfolio := Portfolio new.
	
	self deny: true.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:31:22' prior: 50926353!
test07hasRegisteredOfEmptyPortfolioReturnsNoTransactions

	| portfolio deposit |
	
	portfolio := Portfolio new.
	
	deposit := Deposit for: 100.
	
	self deny: (portfolio hasRegistered: deposit).! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:35:25'!
test07EmptyPortfolioHasNotARegisteredTransaction

	| portfolio deposit |
	
	portfolio := Portfolio new.
	
	deposit := Deposit for: 100.
	
	self deny: (portfolio hasRegistered: deposit).! !

!methodRemoval: ProtfolioTest #test07hasRegisteredOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 21:35:25'!
test07hasRegisteredOfEmptyPortfolioReturnsNoTransactions

	| portfolio deposit |
	
	portfolio := Portfolio new.
	
	deposit := Deposit for: 100.
	
	self deny: (portfolio hasRegistered: deposit).!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/2/2020 21:35:36'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'GR 11/2/2020 21:36:11'!
hasRegistered: aDeposit 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'testing' stamp: 'GR 11/2/2020 21:36:17' prior: 50926391!
hasRegistered: aDeposit 
	
	^false! !

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/2/2020 21:36:19'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 21:36:19'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 21:36:19'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 21:36:19'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 21:36:19'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 21:36:19'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:36:19'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/2/2020 21:36:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/2/2020 21:36:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 21:36:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 21:36:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/2/2020 21:36:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/2/2020 21:36:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/2/2020 21:36:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/2/2020 21:36:19'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:37:36'!
test08PortfolioWithAccountHasRegisteredTransactions

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit).! !

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasRegisteredTransactions stamp: 'GR 11/2/2020 21:37:38'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'GR 11/2/2020 21:41:37' prior: 50926396!
hasRegistered: aTransaction
	
	| account |
	
	account := contents detect: [:anAccount | true].
	
	^account hasRegistered: aTransaction.! !

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasRegisteredTransactions stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/2/2020 21:41:38'!
ERROR!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasRegisteredTransactions stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/2/2020 21:41:38'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/2/2020 21:41:38'!
ERROR!
!Portfolio methodsFor: 'testing' stamp: 'GR 11/2/2020 21:42:14' prior: 50926471!
hasRegistered: aTransaction
	
	| account |
	
	account := contents detect: [:anAccount | true] ifNone: [^false].
	
	^account hasRegistered: aTransaction.! !

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/2/2020 21:42:15'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasRegisteredTransactions stamp: 'GR 11/2/2020 21:42:18'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 21:42:18'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 21:42:18'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 21:42:18'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 21:42:18'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 21:42:18'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:42:18'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/2/2020 21:42:18'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasRegisteredTransactions stamp: 'GR 11/2/2020 21:42:18'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:43:04'!
test09PortfolioWithAccountAndAPortfolioHasARegisteredTransaction

	| portfolio account subPortfolio account2 deposit1 deposit2 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account.
	deposit2 := Deposit register: 50 on: account2.
	
	portfolio add: account.
	subPortfolio add: account2.
	portfolio add: subPortfolio.
	
	self assert: (( portfolio transactions includes: deposit1 ) and: (portfolio transactions includes: deposit2)).! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:43:13'!
test08PortfolioWithAccountHasARegisteredTransaction

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit).! !

!methodRemoval: ProtfolioTest #test08PortfolioWithAccountHasRegisteredTransactions stamp: 'GR 11/2/2020 21:43:13'!
test08PortfolioWithAccountHasRegisteredTransactions

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit).!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:43:35' prior: 50926587!
test09PortfolioWithAccountAndAPortfolioHasARegisteredTransaction

	| portfolio account subPortfolio account2 deposit1 deposit2 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account.
	deposit2 := Deposit register: 50 on: account2.
	
	portfolio add: account.
	subPortfolio add: account2.
	portfolio add: subPortfolio.
	
	self assert: (portfolio hasRegistered: deposit2).! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:44:08' prior: 50926631!
test09PortfolioWithAccountAndAPortfolioHasARegisteredTransaction

	| portfolio account subPortfolio account2 deposit |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	deposit := Deposit register: 50 on: account2.
	
	portfolio add: account.
	subPortfolio add: account2.
	portfolio add: subPortfolio.
	
	self assert: (portfolio hasRegistered: deposit).! !

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransaction stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransaction stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransaction stamp: 'GR 11/2/2020 21:44:14'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/2/2020 21:44:14'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransaction stamp: 'GR 11/2/2020 21:44:14'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'GR 11/2/2020 21:46:50' prior: 50926542!
hasRegistered: aTransaction
	
	| hasRegistered |
	
	hasRegistered := false.
	
	contents do: [:anElement |  hasRegistered or: (anElement  hasRegistered: aTransaction) ].
	
	^ hasRegistered.! !

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransaction stamp: 'GR 11/2/2020 21:46:51'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'GR 11/2/2020 21:48:05' prior: 50926736!
hasRegistered: aTransaction
	
	| hasRegistered |
	
	hasRegistered := false.
	
	contents do: [:anElement |  hasRegistered := hasRegistered or: (anElement  hasRegistered: aTransaction) ].
	
	^ hasRegistered.! !

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransaction stamp: 'GR 11/2/2020 21:48:06'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransaction stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransaction stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransaction stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/2/2020 21:48:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/2/2020 21:48:08'!
PASSED!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 21:52:32' prior: 50925509!
balance
	
	| totalBalance |
	
	totalBalance := 0. 
	
	contents do: [:anElement | totalBalance := totalBalance + anElement balance]. 
	
	^totalBalance.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:53:53'!
test07EmptyPortfolioHasNotARegisteredTransactionInAnyAccount

	| portfolio deposit |
	
	portfolio := Portfolio new.
	
	deposit := Deposit for: 100.
	
	self deny: (portfolio hasRegistered: deposit).! !

!methodRemoval: ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/2/2020 21:53:53'!
test07EmptyPortfolioHasNotARegisteredTransaction

	| portfolio deposit |
	
	portfolio := Portfolio new.
	
	deposit := Deposit for: 100.
	
	self deny: (portfolio hasRegistered: deposit).!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:54:06'!
test07EmptyPortfolioHasNotARegisteredTransaction

	| portfolio deposit |
	
	portfolio := Portfolio new.
	
	deposit := Deposit for: 100.
	
	self deny: (portfolio hasRegistered: deposit).! !

!methodRemoval: ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransactionInAnyAccount stamp: 'GR 11/2/2020 21:54:06'!
test07EmptyPortfolioHasNotARegisteredTransactionInAnyAccount

	| portfolio deposit |
	
	portfolio := Portfolio new.
	
	deposit := Deposit for: 100.
	
	self deny: (portfolio hasRegistered: deposit).!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:54:23'!
test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit).! !

!methodRemoval: ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransaction stamp: 'GR 11/2/2020 21:54:23'!
test08PortfolioWithAccountHasARegisteredTransaction

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: deposit).!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/2/2020 21:54:34'!
test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount

	| portfolio account subPortfolio account2 deposit |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	deposit := Deposit register: 50 on: account2.
	
	portfolio add: account.
	subPortfolio add: account2.
	portfolio add: subPortfolio.
	
	self assert: (portfolio hasRegistered: deposit).! !

!methodRemoval: ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransaction stamp: 'GR 11/2/2020 21:54:34'!
test09PortfolioWithAccountAndAPortfolioHasARegisteredTransaction

	| portfolio account subPortfolio account2 deposit |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	deposit := Deposit register: 50 on: account2.
	
	portfolio add: account.
	subPortfolio add: account2.
	portfolio add: subPortfolio.
	
	self assert: (portfolio hasRegistered: deposit).!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/2/2020 21:55:15' prior: 50925439!
add: anElement
	
	contents add: anElement.! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/2/2020 21:55:50' prior: 50926932!
add: aBankingEntity
	
	contents add: aBankingEntity.! !
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 21:55:55' prior: 50926827!
balance
	
	| totalBalance |
	
	totalBalance := 0. 
	
	contents do: [:aBankingEntity | totalBalance := totalBalance + aBankingEntity balance]. 
	
	^totalBalance.! !
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/2/2020 21:56:01' prior: 50926110!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	
	contents do: [:aBankingEntity | transactions addAll: aBankingEntity transactions].
	
	^ transactions.! !
!Portfolio methodsFor: 'testing' stamp: 'GR 11/2/2020 21:56:10' prior: 50926749!
hasRegistered: aTransaction
	
	| hasRegistered |
	
	hasRegistered := false.
	
	contents do: [:aBankingEntity |  hasRegistered := hasRegistered or: (aBankingEntity  hasRegistered: aTransaction) ].
	
	^ hasRegistered.! !
!Portfolio methodsFor: 'testing' stamp: 'GR 11/2/2020 21:56:54' prior: 50926958!
hasRegistered: aTransaction
	
	^ contents do: [:aBankingEntity |
		| hasRegistered |
		hasRegistered := false.
		hasRegistered := hasRegistered or: (aBankingEntity  hasRegistered: aTransaction) ].! !

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 21:56:58'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/2/2020 21:56:58'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/2/2020 21:56:58'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/2/2020 21:56:58'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/2/2020 21:56:58'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/2/2020 21:56:58'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/2/2020 21:56:58'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/2/2020 21:56:58'!
ERROR!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/2/2020 21:56:58'!
ERROR!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/2/2020 21:56:58'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/2/2020 21:56:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 21:56:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/2/2020 21:56:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/2/2020 21:56:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/2/2020 21:56:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/2/2020 21:56:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/2/2020 21:56:58'!
PASSED!
!Portfolio methodsFor: 'testing' stamp: 'GR 11/2/2020 21:56:10' prior: 50926968!
hasRegistered: aTransaction
	
	| hasRegistered |
	
	hasRegistered := false.
	
	contents do: [:aBankingEntity |  hasRegistered := hasRegistered or: (aBankingEntity  hasRegistered: aTransaction) ].
	
	^ hasRegistered.! !

----QUIT----(2 November 2020 22:39:49) CuisUniversity-4383.image priorSource: 18984119!

----STARTUP---- (4 November 2020 14:56:42) as /home/grosinov/linux64/CuisUniversity-4383.image!

!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:10:11'!
test10CanNotAddAPortfolioToItself

	| portfolio |
	
	portfolio := Portfolio new.
	
	self
		should: [ portfolio add: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/4/2020 15:10:18'!
FAILURE!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/4/2020 15:10:34'!
FAILURE!
!Portfolio class methodsFor: 'no messages' stamp: 'GR 11/4/2020 15:13:09'!
cycleHierarchyError

	^ 'You are adding a portfolio that already exists in the hierarchy'! !
!Portfolio class methodsFor: 'error handling' stamp: 'GR 11/4/2020 15:15:00' prior: 50927074!
cycleHierarchyError

	^ 'You are adding an account or portfolio that already exists in the hierarchy'! !

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/4/2020 15:15:10'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 15:15:50' prior: 50926936!
add: aBankingEntity
	
	(self = aBankingEntity) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	contents add: aBankingEntity.! !

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/4/2020 15:15:53'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/4/2020 15:15:53'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/4/2020 15:15:53'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 15:15:53'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/4/2020 15:15:53'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/4/2020 15:15:53'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/4/2020 15:15:53'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/4/2020 15:15:53'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 15:15:53'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 15:15:53'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/4/2020 15:15:53'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:19:17'!
test10CanNotAddAPortfolioThatAlreadyExistsInThePortfolio

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio add: portfolio2.
	
	self
		should: [ portfolio add: portfolio2 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:19:27'!
test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio add: portfolio2.
	
	self
		should: [ portfolio add: portfolio2 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!methodRemoval: ProtfolioTest #test10CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/4/2020 15:19:27'!
test10CanNotAddAPortfolioThatAlreadyExistsInThePortfolio

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio add: portfolio2.
	
	self
		should: [ portfolio add: portfolio2 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/4/2020 15:19:36'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 15:21:19' prior: 50927089!
add: aBankingEntity
	
	(self = aBankingEntity) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	(contents includes: aBankingEntity ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	contents add: aBankingEntity.! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 15:21:57' prior: 50927182!
add: aBankingEntity
	
	(self == aBankingEntity) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	(contents includes: aBankingEntity ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	contents add: aBankingEntity.! !

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/4/2020 15:22:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/4/2020 15:22:01'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:23:00'!
test12

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio add: portfolio2.
	
	self
		should: [ portfolio add: portfolio2 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:28:13' prior: 50927274!
test12

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio add: portfolio2.
	
	self
		should: [ portfolio2 add: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!testRun: #ProtfolioTest #test12 stamp: 'GR 11/4/2020 15:29:26'!
FAILURE!

Object subclass: #Portfolio
	instanceVariableNames: 'contents parentPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'GR 11/4/2020 15:30:05'!
Object subclass: #Portfolio
	instanceVariableNames: 'contents parentPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #ProtfolioTest #test12 stamp: 'GR 11/4/2020 15:30:33'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 15:33:10' prior: 50927192!
add: aBankingEntity
	
	(self == aBankingEntity) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	(contents includes: aBankingEntity ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	( parentPortfolio == aBankingEntity ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	contents add: aBankingEntity.! !

!testRun: #ProtfolioTest #test12 stamp: 'GR 11/4/2020 15:33:11'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 15:33:48' prior: 50927316!
add: aBankingEntity
	
	(self == aBankingEntity) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	(contents includes: aBankingEntity ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	( parentPortfolio == aBankingEntity ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	contents add: aBankingEntity.
	
	aBankingEntity childOf: self! !

!testRun: #ProtfolioTest #test12 stamp: 'GR 11/4/2020 15:33:53'!
FAILURE!

!testRun: #ProtfolioTest #test12 stamp: 'GR 11/4/2020 15:35:08'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'GR 11/4/2020 15:35:22'!
childOf: aPortfolio 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/4/2020 15:35:33' prior: 50927350!
childOf: aPortfolio 
	
	parentPortfolio := aPortfolio .! !

!testRun: #ProtfolioTest #test12 stamp: 'GR 11/4/2020 15:35:36'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/4/2020 15:35:36'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/4/2020 15:35:36'!
ERROR!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 15:35:36'!
ERROR!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/4/2020 15:35:36'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/4/2020 15:35:36'!
ERROR!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/4/2020 15:35:36'!
ERROR!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/4/2020 15:35:36'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 15:35:36'!
ERROR!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 15:35:36'!
ERROR!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/4/2020 15:35:36'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/4/2020 15:35:36'!
PASSED!

!testRun: #ProtfolioTest #test12 stamp: 'GR 11/4/2020 15:35:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/4/2020 15:35:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/4/2020 15:35:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/4/2020 15:35:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/4/2020 15:35:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/4/2020 15:35:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/4/2020 15:35:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/4/2020 15:35:36'!
PASSED!

!testRun: #ProtfolioTest #test12 stamp: 'GR 11/4/2020 15:35:38'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/4/2020 15:35:38'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/4/2020 15:35:38'!
ERROR!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 15:35:38'!
ERROR!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/4/2020 15:35:38'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/4/2020 15:35:38'!
ERROR!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/4/2020 15:35:38'!
ERROR!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/4/2020 15:35:38'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 15:35:38'!
ERROR!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 15:35:38'!
ERROR!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/4/2020 15:35:38'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/4/2020 15:35:38'!
PASSED!

!testRun: #ProtfolioTest #test12 stamp: 'GR 11/4/2020 15:35:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/4/2020 15:35:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/4/2020 15:35:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/4/2020 15:35:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/4/2020 15:35:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/4/2020 15:35:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/4/2020 15:35:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/4/2020 15:35:38'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/4/2020 15:35:42'!
ERROR!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:36:43' prior: 50925605!
test02BalanceWithAnAccount

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio addAccount: account.
	
	self deny: portfolio isEmpty.
	self assert: 100 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:37:05' prior: 50926276!
test03BalanceWithAnAccountAndAPortfolio

	| portfolio account subPortfolio account2 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	Deposit register: 50 on: account2.
	
	portfolio addAccount: account.
	subPortfolio addAccount: account2.
	portfolio addPortfolio: subPortfolio.
	
	self assert: 150 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:37:14' prior: 50925886!
test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	portfolio addAccount: account.
	
	self assert: (OrderedCollection with: deposit) equals: portfolio transactions.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:37:21' prior: 50926198!
test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction

	| portfolio account subPortfolio account2 deposit1 deposit2 |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 100 on: account.
	deposit2 := Deposit register: 50 on: account2.
	
	portfolio addAccount: account.
	subPortfolio addAccount: account2.
	portfolio addPortfolio: subPortfolio.
	
	self assert: (( portfolio transactions includes: deposit1 ) and: (portfolio transactions includes: deposit2)).! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:37:31' prior: 50926871!
test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	
	portfolio addAccount: account.
	
	self assert: (portfolio hasRegistered: deposit).! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:37:38' prior: 50926895!
test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount

	| portfolio account subPortfolio account2 deposit |
	
	portfolio := Portfolio new.
	subPortfolio := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	deposit := Deposit register: 50 on: account2.
	
	portfolio addAccount: account.
	subPortfolio addAccount: account2.
	portfolio addPortfolio: subPortfolio.
	
	self assert: (portfolio hasRegistered: deposit).! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:37:49' prior: 50927057!
test10CanNotAddAPortfolioToItself

	| portfolio |
	
	portfolio := Portfolio new.
	
	self
		should: [ portfolio addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:37:56' prior: 50927150!
test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio add: portfolio2.
	
	self
		should: [ portfolio addPortfolio: portfolio2 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:38:03' prior: 50927614!
test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	
	self
		should: [ portfolio addPortfolio: portfolio2 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:38:10' prior: 50927286!
test12

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	
	self
		should: [ portfolio2 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/4/2020 15:38:38'!
ERROR!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/4/2020 15:38:38'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 11/4/2020 15:39:01'!
addAccount: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 11/4/2020 15:39:51' prior: 50927660!
addAccount: aReceptiveAccount 
	
	contents add: aReceptiveAccount ! !

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/4/2020 15:39:52'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 15:40:16'!
ERROR!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 15:40:16'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 15:40:23'!
addPortfolio: aPortfolio 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 15:40:51' prior: 50927679!
addPortfolio: aPortfolio 

	(self == aPortfolio) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	(contents includes: aPortfolio ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	( parentPortfolio == aPortfolio ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 15:41:08' prior: 50927684!
addPortfolio: aPortfolio 

	(self == aPortfolio) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	( parentPortfolio == aPortfolio ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	(contents includes: aPortfolio ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 15:41:12'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/4/2020 15:41:15'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/4/2020 15:41:15'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/4/2020 15:41:15'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 15:41:15'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/4/2020 15:41:15'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/4/2020 15:41:15'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/4/2020 15:41:15'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/4/2020 15:41:15'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 15:41:15'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 15:41:15'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/4/2020 15:41:15'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/4/2020 15:41:15'!
PASSED!

!testRun: #ProtfolioTest #test12 stamp: 'GR 11/4/2020 15:41:15'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:42:32'!
test12CanNotAddToPortfolioItsParentPortfolio

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	
	self
		should: [ portfolio2 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!methodRemoval: ProtfolioTest #test12 stamp: 'GR 11/4/2020 15:42:32'!
test12

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	
	self
		should: [ portfolio2 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]!

!methodRemoval: Portfolio #add: stamp: 'GR 11/4/2020 15:44:00'!
add: aBankingEntity
	
	(self == aBankingEntity) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	(contents includes: aBankingEntity ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	( parentPortfolio == aBankingEntity ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	contents add: aBankingEntity.
	
	aBankingEntity childOf: self!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:45:48'!
test13CanNotAddAPortfolioThatAlreadyExistsInThePortfolioHierarchy

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	
	self
		should: [ portfolio2 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 15:46:35' prior: 50927802!
test13CanNotAddAPortfolioThatAlreadyExistsInThePortfolioHierarchy

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio3 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!testRun: #ProtfolioTest #test13CanNotAddAPortfolioThatAlreadyExistsInThePortfolioHierarchy stamp: 'GR 11/4/2020 15:46:40'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 15:54:38' prior: 50927698!
addPortfolio: aPortfolio 

	self seeIfAlreadyExistsInHierarchy: aPortfolio.
	
	(self == aPortfolio) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	( parentPortfolio == aPortfolio ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	(contents includes: aPortfolio ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !

!testRun: #ProtfolioTest #test13CanNotAddAPortfolioThatAlreadyExistsInThePortfolioHierarchy stamp: 'GR 11/4/2020 15:54:46'!
FAILURE!

!testRun: #ProtfolioTest #test13CanNotAddAPortfolioThatAlreadyExistsInThePortfolioHierarchy stamp: 'GR 11/4/2020 15:54:50'!
ERROR!

!testRun: #ProtfolioTest #test13CanNotAddAPortfolioThatAlreadyExistsInThePortfolioHierarchy stamp: 'GR 11/4/2020 15:54:55'!
ERROR!

!testRun: #ProtfolioTest #test13CanNotAddAPortfolioThatAlreadyExistsInThePortfolioHierarchy stamp: 'GR 11/4/2020 15:55:03'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'GR 11/4/2020 15:55:16'!
seeIfAlreadyExistsInHierarchy: aPortfolio 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/4/2020 15:56:10' prior: 50927870!
seeIfAlreadyExistsInHierarchy: aPortfolio 
	
	parentPortfolio ifNil: [ self seeIfAlreadyExistsInHierarchy: aPortfolio].! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/4/2020 15:56:31'!
askRootIfAlreadyExistsInHierarchy: aPortfolio 
	
	parentPortfolio ifNil: [ self seeIfAlreadyExistsInHierarchy: aPortfolio].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 11/4/2020 15:56:31' prior: 50927875!
seeIfAlreadyExistsInHierarchy: aPortfolio 
	
	parentPortfolio ifNil: [ self askRootIfAlreadyExistsInHierarchy: aPortfolio].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 11/4/2020 15:56:31' prior: 50927838!
addPortfolio: aPortfolio 

	self askRootIfAlreadyExistsInHierarchy: aPortfolio.
	
	(self == aPortfolio) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	( parentPortfolio == aPortfolio ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	(contents includes: aPortfolio ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 11/4/2020 15:56:31' prior: 50927881!
askRootIfAlreadyExistsInHierarchy: aPortfolio 
	
	parentPortfolio ifNil: [ self askRootIfAlreadyExistsInHierarchy: aPortfolio].! !

!methodRemoval: Portfolio #seeIfAlreadyExistsInHierarchy: stamp: 'GR 11/4/2020 15:56:31'!
seeIfAlreadyExistsInHierarchy: aPortfolio 
	
	parentPortfolio ifNil: [ self askRootIfAlreadyExistsInHierarchy: aPortfolio].!
!Portfolio methodsFor: 'private' stamp: 'GR 11/4/2020 15:58:28' prior: 50927911!
askRootIfAlreadyExistsInHierarchy: aPortfolio 
	
	parentPortfolio ifNotNil: [ parentPortfolio askRootIfAlreadyExistsInHierarchy: aPortfolio].! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/4/2020 16:09:07' prior: 50927925!
askRootIfAlreadyExistsInHierarchy: aPortfolio 
	
	parentPortfolio ifNotNil: [ parentPortfolio askRootIfAlreadyExistsInHierarchy: aPortfolio]
				ifNil: [
		contents do: [ :aBankingEntity | aBankingEntity seeIfAlreadyExistsInHierarchy ]
	].! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 16:28:12' prior: 50927817!
test13CanNotAddAPortfolioThatAlreadyExistsInThePortfolioHierarchy

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio2.
	
	self
		should: [ portfolio addPortfolio: portfolio3 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 16:29:36'!
test13

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio2.
	
	self
		should: [ portfolio addPortfolio: portfolio3 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!methodRemoval: ProtfolioTest #test13CanNotAddAPortfolioThatAlreadyExistsInThePortfolioHierarchy stamp: 'GR 11/4/2020 16:29:36'!
test13CanNotAddAPortfolioThatAlreadyExistsInThePortfolioHierarchy

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio2.
	
	self
		should: [ portfolio addPortfolio: portfolio3 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]!
!Portfolio methodsFor: 'testing' stamp: 'GR 11/4/2020 16:34:04' prior: 50927042!
hasRegistered: aTransaction
	
	| hasRegistered |
	
	hasRegistered := false.
	
	contents do: [:aBankingEntity |  hasRegistered := hasRegistered or: (aBankingEntity  hasRegistered: aTransaction) ].
	
	^ hasRegistered.! !
!Portfolio methodsFor: 'testing' stamp: 'GR 11/4/2020 16:38:26'!
startWith: aValue andWithEveryElementDo: aBlock
	
	| return |
	
	return := aValue.
	
	contents do: [ :aBankingEntity | aBlock value: aBankingEntity value: return].
	
	^ return.! !

!methodRemoval: Portfolio #startWith:andWithEveryElementDo: stamp: 'GR 11/4/2020 16:39:56'!
startWith: aValue andWithEveryElementDo: aBlock
	
	| return |
	
	return := aValue.
	
	contents do: [ :aBankingEntity | aBlock value: aBankingEntity value: return].
	
	^ return.!
!Portfolio methodsFor: 'testing' stamp: 'GR 11/4/2020 16:40:03' prior: 50927994!
hasRegistered: aTransaction
	
	| hasRegistered |
	
	hasRegistered := false.
	
	contents do: [ :aBankingEntity |  hasRegistered := hasRegistered or: (aBankingEntity  hasRegistered: aTransaction) ].
	
	^ hasRegistered.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 16:42:08'!
test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt

	| portfolio account |
	
	portfolio := Portfolio new.
	account  := ReceptiveAccount new.
	portfolio addAccount: account.
	
	self
		should: [ portfolio addPortfolio: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!testRun: #ProtfolioTest #test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/4/2020 16:42:13'!
FAILURE!

!testRun: #ProtfolioTest #test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/4/2020 16:42:13'!
FAILURE!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 16:42:29' prior: 50928030!
test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt

	| portfolio account |
	
	portfolio := Portfolio new.
	account  := ReceptiveAccount new.
	portfolio addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!testRun: #ProtfolioTest #test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/4/2020 16:42:31'!
FAILURE!

!testRun: #ProtfolioTest #test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/4/2020 16:42:31'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 16:43:19' prior: 50927665!
addAccount: aReceptiveAccount 
	
	(contents includes: aReceptiveAccount) ifTrue: [ self error: Portfolio cycleHierarchyError ]. 
	
	contents add: aReceptiveAccount ! !

!testRun: #ProtfolioTest #test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/4/2020 16:43:21'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/4/2020 16:43:22'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/4/2020 16:43:22'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/4/2020 16:43:22'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 16:43:22'!
ERROR!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/4/2020 16:43:22'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/4/2020 16:43:22'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/4/2020 16:43:22'!
ERROR!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/4/2020 16:43:22'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 16:43:22'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 16:43:22'!
ERROR!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/4/2020 16:43:22'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/4/2020 16:43:22'!
FAILURE!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioItsParentPortfolio stamp: 'GR 11/4/2020 16:43:22'!
FAILURE!

!testRun: #ProtfolioTest #test13 stamp: 'GR 11/4/2020 16:43:22'!
FAILURE!

!testRun: #ProtfolioTest #test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/4/2020 16:43:22'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 16:43:30'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 16:46:23' prior: 50928074!
addAccount: aReceptiveAccount 
	
	(contents allSatisfy: [ :aBankingEntity | aBankingEntity ~~ aReceptiveAccount ]) ifFalse: [ self error: Portfolio cycleHierarchyError ]. 
	
	contents add: aReceptiveAccount ! !

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 16:46:25'!
ERROR!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/4/2020 16:46:36'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 16:46:38'!
ERROR!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 16:46:38'!
ERROR!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 16:46:57' prior: 50927895!
addPortfolio: aPortfolio 

	(self == aPortfolio) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	( parentPortfolio == aPortfolio ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	(contents includes: aPortfolio ) ifTrue: [ self error: Portfolio cycleHierarchyError ].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !

!methodRemoval: ProtfolioTest #test13 stamp: 'GR 11/4/2020 16:47:08'!
test13

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio2.
	
	self
		should: [ portfolio addPortfolio: portfolio3 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioItsParentPortfolio stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/4/2020 16:47:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/4/2020 16:47:10'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 16:52:38'!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt

	| portfolio portfolio2 account |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account  := ReceptiveAccount new.
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 16:53:08' prior: 50928274!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt

	| portfolio portfolio2 account |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account  := ReceptiveAccount new.
	
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 16:55:09'!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio

	| portfolio portfolio2 account |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account  := ReceptiveAccount new.
	
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!methodRemoval: ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/4/2020 16:55:12'!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt

	| portfolio portfolio2 account |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account  := ReceptiveAccount new.
	
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 16:56:57'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 16:58:56' prior: 50928145!
addAccount: aReceptiveAccount 
	
	(contents allSatisfy: [ :aBankingEntity | aBankingEntity ~~ aReceptiveAccount ]) ifFalse: [ self error: Portfolio cycleHierarchyError ]. 
	
	parentPortfolio seeIfAlreadyInHierarchy.
	
	contents add: aReceptiveAccount ! !

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 16:59:04'!
FAILURE!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:00:08'!
ERROR!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:00:08'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'GR 11/4/2020 17:00:21'!
seeIfAlreadyInHierarchy
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 17:01:05' prior: 50928345!
addAccount: aReceptiveAccount 
	
	parentPortfolio seeIfAlreadyInHierarchy.
	
	contents add: aReceptiveAccount ! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 17:01:33' prior: 50928373!
addAccount: aReceptiveAccount 
	
	(contents allSatisfy: [ :aBankingEntity | aBankingEntity ~~ aReceptiveAccount ]) ifFalse: [ self error: Portfolio cycleHierarchyError ]. 
	
	parentPortfolio seeIfAlreadyInHierarchy.
	
	contents add: aReceptiveAccount ! !

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:01:36'!
ERROR!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:01:36'!
ERROR!

!methodRemoval: Portfolio #seeIfAlreadyInHierarchy stamp: 'GR 11/4/2020 17:01:55'!
seeIfAlreadyInHierarchy
	self shouldBeImplemented.!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 17:02:02' prior: 50928380!
addAccount: aReceptiveAccount 
	
	(contents allSatisfy: [ :aBankingEntity | aBankingEntity ~~ aReceptiveAccount ]) ifFalse: [ self error: Portfolio cycleHierarchyError ].
	
	contents add: aReceptiveAccount ! !

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:02:09'!
FAILURE!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:02:09'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/4/2020 17:02:40' prior: 50928404!
addAccount: aReceptiveAccount 
	
	self seeIfAlreadyInHierarchy: aReceptiveAccount.
	
	contents add: aReceptiveAccount ! !

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:02:42'!
FAILURE!
!Portfolio methodsFor: 'private' stamp: 'GR 11/4/2020 17:03:01'!
seeIfAlreadyInHierarchy: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/4/2020 17:03:41' prior: 50928433!
seeIfAlreadyInHierarchy: aReceptiveAccount 
	
	parentPortfolio ifNotNil: [ parentPortfolio seeIfAlreadyInHierarchy: aReceptiveAccount ].
	
	(contents allSatisfy: [ :aBankingEntity | aBankingEntity ~~ aReceptiveAccount ]) ifFalse: [ self error: Portfolio cycleHierarchyError ].! !

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:04:07'!
FAILURE!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:04:07'!
FAILURE!
!Portfolio methodsFor: 'private' stamp: 'GR 11/4/2020 17:07:47' prior: 50928438!
seeIfAlreadyInHierarchy: aReceptiveAccount 
	
	contents do: [ :aBankingEntity | aBankingEntity seeIfAlreadyInHierarchy ].
	
	(contents allSatisfy: [ :aBankingEntity | aBankingEntity ~~ aReceptiveAccount ]) ifFalse: [ self error: Portfolio cycleHierarchyError ].! !

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:07:50'!
FAILURE!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:08:20'!
FAILURE!

!methodRemoval: Portfolio #askRootIfAlreadyExistsInHierarchy: stamp: 'GR 11/4/2020 17:08:38'!
askRootIfAlreadyExistsInHierarchy: aPortfolio 
	
	parentPortfolio ifNotNil: [ parentPortfolio askRootIfAlreadyExistsInHierarchy: aPortfolio]
				ifNil: [
		contents do: [ :aBankingEntity | aBankingEntity seeIfAlreadyExistsInHierarchy ]
	].!
!Portfolio methodsFor: 'private' stamp: 'GR 11/4/2020 17:08:58' prior: 50928458!
seeIfAlreadyInHierarchy: aReceptiveAccount 
	
	contents do: [ :aBankingEntity | aBankingEntity seeIfAlreadyInHierarchy: aReceptiveAccount ].
	
	(contents allSatisfy: [ :aBankingEntity | aBankingEntity ~~ aReceptiveAccount ]) ifFalse: [ self error: Portfolio cycleHierarchyError ].! !

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:09:04'!
FAILURE!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:09:04'!
FAILURE!
!ReceptiveAccount methodsFor: 'private' stamp: 'GR 11/4/2020 17:09:20'!
seeIfAlreadyInHierarchy: aReceptiveAccount 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'private' stamp: 'GR 11/4/2020 17:10:07' prior: 50928508!
seeIfAlreadyInHierarchy: aReceptiveAccount 
	
	^ self == aReceptiveAccount ! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/4/2020 17:11:59' prior: 50928488!
seeIfAlreadyInHierarchy: aReceptiveAccount 
	
	(contents allSatisfy: [ :aBankingEntity | aBankingEntity seeIfAlreadyInHierarchy: aReceptiveAccount ]) ifFalse: [ self error: Portfolio cycleHierarchyError ].! !

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:12:03'!
FAILURE!
!ReceptiveAccount methodsFor: 'private' stamp: 'GR 11/4/2020 17:13:12' prior: 50928514!
seeIfAlreadyInHierarchy: aReceptiveAccount 
	
	^ self ~~ aReceptiveAccount ! !

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:13:33'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioItsParentPortfolio stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/4/2020 17:13:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/4/2020 17:13:35'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/4/2020 17:18:48'!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsDownInTheHierarchy

	| portfolio portfolio2 account |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account  := ReceptiveAccount new.
	
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!methodRemoval: ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio stamp: 'GR 11/4/2020 17:18:48'!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInParentPortfolio

	| portfolio portfolio2 account |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account  := ReceptiveAccount new.
	
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]!

----QUIT----(4 November 2020 17:34:57) CuisUniversity-4383.image priorSource: 19052826!

----STARTUP---- (5 November 2020 17:56:02) as /home/grosinov/linux64/CuisUniversity-4383.image!


	self == super!

1 class class!

1 class class class!

1 class class class class!

1 class class class class class!

1 class class class class class class!

1 class class class class class class class!

1 class class class class class class class class !

1 class class class class class class class class class !

1 class class class class class class class class class class!

1 class superclass !

1 class superclass superclass superclass superclass superclass superclass superclass superclass superclass !

1 class superclass superclass superclass superclass superclass superclass superclass superclass !

1 class superclass superclass superclass superclass !

1 class superclass superclass superclass superclass superclass !

1 class superclass superclass superclass superclass superclass !

1 class superclass superclass superclass superclass superclass superclass !

1 class class superclass superclass superclass superclass superclass superclass !

1 class class superclass superclass superclass superclass superclass superclass superclass !

1 class class superclass superclass superclass superclass superclass superclass superclass superclass !

1 class class superclass superclass superclass superclass superclass superclass superclass superclass superclass !

1 class class superclass superclass superclass superclass superclass superclass superclass superclass superclass !

1 class class superclass superclass superclass superclass superclass superclass superclass superclass superclass superclass !

1 class class superclass superclass superclass superclass superclass superclass superclass superclass superclass superclass !

1 class class superclass superclass superclass superclass superclass superclass superclass superclass superclass superclass superclass !

1 class superclass class!

1 class class!

1 class class class!

1 class class !

1 class class class !

1 class class class class!

1 class !

1 class class!

1 class superclass!

1 class class superclass!

1 class class class superclass!

1 class class class !

1 class class !

1 class class superclass!

1 class class superclass superclass !

1 class class superclass superclass superclass !

1 class class superclass superclass superclass superclass !

1 class class superclass superclass superclass superclass superclass !

1 class class superclass superclass superclass superclass superclass !

1 class class superclass superclass superclass superclass superclass superclass !

OrderedCollection instVarNames !

OrderedCollection class!

OrderedCollection superclass!

OrderedCollection superclass class!

OrderedCollection superclass superclass!

OrderedCollection superclass superclass superclass!

OrderedCollection superclass superclass superclass superclass !

OrderedCollection superclass superclass superclass superclass class!

OrderedCollection superclass superclass superclass superclass class class!

OrderedCollection superclass superclass superclass superclass class superclass!

OrderedCollection superclass superclass superclass superclass class superclass class!

OrderedCollection superclass superclass superclass superclass class superclass class class!

OrderedCollection superclass superclass superclass superclass class superclass class class class!

OrderedCollection superclass superclass superclass superclass class superclass class class class class!

1 !

1 class!

1 self!

1 !

1 class!

1 class class!

1 class class class !

1 class class class class!

1 class class class class class!

1 class class!

1 class class super!

1 class class superclass !

1 class class superclass class!

1 class class superclass superclass!

1 class class superclass superclass superclass!

1 class class superclass superclass superclass superclass!

1 class class superclass superclass superclass superclass superclass!

1 class class superclass superclass superclass superclass superclass !

1 class class superclass superclass superclass superclass superclass superclass!

1 class class superclass superclass superclass superclass superclass superclass !

1 class class superclass superclass superclass superclass superclass superclass superclass!

1 class class superclass superclass superclass superclass superclass superclass superclass superclass!

1 class class superclass superclass superclass superclass superclass superclass superclass superclass superclass!

1 class class superclass superclass superclass superclass superclass superclass superclass superclass superclass superclass!

1 class class superclass superclass superclass superclass superclass superclass superclass superclass superclass superclass superclass!

1 class class superclass superclass superclass superclass superclass superclass superclass superclass superclass superclass class !

GameOfLife compile: 'm10 ^10'!
!GameOfLife methodsFor: 'as yet unclassified' stamp: 'GR 11/5/2020 21:18:01'!
m10 ^10! !

!methodRemoval: GameOfLife #m10 stamp: 'GR 11/5/2020 21:18:25'!
m10 ^10!

----QUIT----(5 November 2020 21:38:35) CuisUniversity-4383.image priorSource: 19104318!

----STARTUP---- (7 November 2020 14:52:30) as /home/grosinov/linux64/CuisUniversity-4383.image!


!testRun: #ProtfolioTest #test12CanNotAddToPortfolioItsParentPortfolio stamp: 'GR 11/7/2020 14:53:43'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 14:57:40'!
test13

	"CanNotAddToPortfolioAnAlreadyGrandchildPortfolio"

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	
	self
		should: [ portfolio addPortfolio: portfolio2 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 14:58:10' prior: 50928832!
test13

	"CanNotAddToPortfolioAnAlreadyGrandchildPortfolio"

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio addPortfolio: portfolio2 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 14:58:22' prior: 50928846!
test13

	"CanNotAddToPortfolioAnAlreadyGrandchildPortfolio"

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio addPortfolio: portfolio3 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!testRun: #ProtfolioTest #test13 stamp: 'GR 11/7/2020 14:58:23'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 15:01:42' prior: 50928167!
addPortfolio: aPortfolio 

	(self == aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	( parentPortfolio == aPortfolio ) ifTrue: [ self error: self class cycleHierarchyError ].
	
	(contents includes: aPortfolio ) ifTrue: [ self error: self class cycleHierarchyError ].
	
	contents do: [:aBankingEntity | (aBankingEntity seeIfAlreadyInHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ] ].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 15:01:57' prior: 50928882!
addPortfolio: aPortfolio 

	(self == aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	( parentPortfolio == aPortfolio ) ifTrue: [ self error: self class cycleHierarchyError ].
	
	contents do: [:aBankingEntity | (aBankingEntity seeIfAlreadyInHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ] ].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 15:02:58' prior: 50928519!
seeIfAlreadyInHierarchy: bankingEntity
	
	(contents allSatisfy: [ :aBankingEntity | aBankingEntity seeIfAlreadyInHierarchy: bankingEntity ]) ifFalse: [ self error: Portfolio cycleHierarchyError ].! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 15:05:40' prior: 50928916!
seeIfAlreadyInHierarchy: bankingEntity
	
	(contents allSatisfy: [ :aBankingEntity | aBankingEntity seeIfAlreadyInHierarchy: bankingEntity ]) ifFalse: [ self error: Portfolio cycleHierarchyError ].
	
	^ self == bankingEntity! !

!testRun: #ProtfolioTest #test13 stamp: 'GR 11/7/2020 15:06:19'!
FAILURE!
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 15:09:33' prior: 50928925!
seeIfAlreadyInHierarchy: bankingEntity
	
	contents 
		detect: [ :aBankingEntity | aBankingEntity seeIfAlreadyInHierarchy: bankingEntity ] 
		ifFound: [ ^true ] 
		ifNone: [ ^ self == bankingEntity ].
	
	! !

!testRun: #ProtfolioTest #test13 stamp: 'GR 11/7/2020 15:09:47'!
FAILURE!

!testRun: #ProtfolioTest #test13 stamp: 'GR 11/7/2020 15:09:47'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 15:11:16' prior: 50928900!
addPortfolio: aPortfolio 

	(self == aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	( parentPortfolio == aPortfolio ) ifTrue: [ self error: self class cycleHierarchyError ].
	
	self seeIfAlreadyInHierarchy: aPortfolio.
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 15:13:20' prior: 50928937!
seeIfAlreadyInHierarchy: bankingEntity
	
	contents 
		detect: [ :aBankingEntity | aBankingEntity seeIfAlreadyInHierarchy: bankingEntity ] 
		ifFound: [ ^true ] 
		ifNone: [ ^ self == bankingEntity ].! !

!testRun: #ProtfolioTest #test13 stamp: 'GR 11/7/2020 15:13:23'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 15:13:59' prior: 50928951!
addPortfolio: aPortfolio 

	(self == aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	( parentPortfolio == aPortfolio ) ifTrue: [ self error: self class cycleHierarchyError ].
	
	(self seeIfAlreadyInHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 15:14:09' prior: 50928975!
addPortfolio: aPortfolio 

	( parentPortfolio == aPortfolio ) ifTrue: [ self error: self class cycleHierarchyError ].
	
	(self seeIfAlreadyInHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 15:15:34' prior: 50928963!
seeIfAlreadyInHierarchy: bankingEntity
	
	contents 
		detect: [ :aBankingEntity | aBankingEntity seeIfAlreadyInHierarchy: bankingEntity ] 
		ifFound: [ :aBankingEntity | ^true ] 
		ifNone: [ ^ self == bankingEntity ].! !

!testRun: #ProtfolioTest #test13 stamp: 'GR 11/7/2020 15:15:53'!
PASSED!

!testRun: #ProtfolioTest #test13 stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/7/2020 15:15:55'!
ERROR!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/7/2020 15:15:55'!
ERROR!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 15:15:55'!
ERROR!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioItsParentPortfolio stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ProtfolioTest #test13 stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/7/2020 15:15:55'!
FAILURE!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsDownInTheHierarchy stamp: 'GR 11/7/2020 15:15:55'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/7/2020 15:15:55'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/7/2020 15:16:02'!
ERROR!
!ReceptiveAccount methodsFor: 'private' stamp: 'GR 11/7/2020 15:16:58' prior: 50928533!
seeIfAlreadyInHierarchy: aReceptiveAccount 
	
	^ self == aReceptiveAccount ! !

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/7/2020 15:16:59'!
PASSED!

!testRun: #ProtfolioTest #test13 stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioItsParentPortfolio stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test13 stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/7/2020 15:17:03'!
FAILURE!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsDownInTheHierarchy stamp: 'GR 11/7/2020 15:17:03'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/7/2020 15:17:03'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/7/2020 15:17:14'!
FAILURE!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 15:17:47' prior: 50928863!
test13

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio addPortfolio: portfolio3 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 15:17:56'!
test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio addPortfolio: portfolio3 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!methodRemoval: ProtfolioTest #test13 stamp: 'GR 11/7/2020 15:17:56'!
test13

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio addPortfolio: portfolio3 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 15:28:01'!
test14

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio addPortfolio: portfolio3 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 15:32:20'!
test12CanNotAddToPortfolioAnyOfItsParents

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	
	self
		should: [ portfolio2 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!methodRemoval: ProtfolioTest #test12CanNotAddToPortfolioItsParentPortfolio stamp: 'GR 11/7/2020 15:32:20'!
test12CanNotAddToPortfolioItsParentPortfolio

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	
	self
		should: [ portfolio2 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 15:33:30' prior: 50929259!
test12CanNotAddToPortfolioAnyOfItsParents

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio3.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio3 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ].
	
	self
		should: [ portfolio3 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 15:33:38' prior: 50929287!
test12CanNotAddToPortfolioAnyOfItsParents

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio3.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio3 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ].
	
	self
		should: [ portfolio3 addPortfolio: portfolio2 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/7/2020 15:33:56'!
FAILURE!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/7/2020 15:33:56'!
FAILURE!

Object subclass: #Portfolio
	instanceVariableNames: 'contents containees'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'GR 11/7/2020 15:34:24'!
Object subclass: #Portfolio
	instanceVariableNames: 'contents containees'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/7/2020 15:45:18'!
FAILURE!

Object subclass: #Portfolio
	instanceVariableNames: 'contents parentsPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'GR 11/7/2020 15:48:17'!
Object subclass: #Portfolio
	instanceVariableNames: 'contents parentsPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 15:50:02' prior: 50928989!
addPortfolio: aPortfolio 

	parentsPortfolio detect: [ :portfolio | portfolio == aPortfolio ] ifFound: [:portfolio | self error: self class cycleHierarchyError ] ifNone: [].
	
	(self seeIfAlreadyInHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/7/2020 15:50:05'!
FAILURE!
!Portfolio methodsFor: 'initialization' stamp: 'GR 11/7/2020 15:50:44' prior: 50925924 overrides: 16896425!
initialize

	contents := Set new.
	parentsPortfolio  := Set new.! !

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/7/2020 15:50:48'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 15:51:53' prior: 50929367!
addPortfolio: aPortfolio 

	parentsPortfolio detect: [ :portfolio | portfolio == aPortfolio ] ifFound: [:portfolio | self error: self class cycleHierarchyError ] ifNone: [].
	
	(self seeIfAlreadyInHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 15:52:06' prior: 50927355!
childOf: aPortfolio 
	
	parentsPortfolio add: aPortfolio .! !

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/7/2020 15:52:07'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test14 stamp: 'GR 11/7/2020 15:52:09'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/7/2020 15:52:09'!
FAILURE!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsDownInTheHierarchy stamp: 'GR 11/7/2020 15:52:09'!
FAILURE!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/7/2020 15:52:11'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 15:53:16' prior: 50929244!
test14

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio3 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!testRun: #ProtfolioTest #test14 stamp: 'GR 11/7/2020 15:59:58'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 16:00:55' prior: 50929394!
addPortfolio: aPortfolio 
	
	(self seeIfAlreadyInHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:01:23' prior: 50929001!
seeIfAlreadyInHierarchy: bankingEntity
	
	parentsPortfolio 
		detect: [ :portfolio | portfolio == bankingEntity ] 
		ifFound: [:portfolio | self error: self class cycleHierarchyError ] 
		ifNone: [].
	
	contents 
		detect: [ :aBankingEntity | aBankingEntity seeIfAlreadyInHierarchy: bankingEntity ] 
		ifFound: [ :aBankingEntity | ^true ] 
		ifNone: [ ^ self == bankingEntity ].! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:01:57' prior: 50929509!
seeIfAlreadyInHierarchy: bankingEntity
	
	parentsPortfolio 
		detect: [ :portfolio | portfolio seeIfAlreadyInHierarchy: bankingEntity ] 
		ifFound: [:portfolio | ^true ] 
		ifNone: [].
	
	contents 
		detect: [ :aBankingEntity | aBankingEntity seeIfAlreadyInHierarchy: bankingEntity ] 
		ifFound: [ :aBankingEntity | ^true ] 
		ifNone: [ ^ self == bankingEntity ].! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:02:37' prior: 50929524!
seeIfAlreadyInHierarchy: bankingEntity
	
	contents 
		detect: [ :aBankingEntity | aBankingEntity seeIfAlreadyInHierarchy: bankingEntity ] 
		ifFound: [ :aBankingEntity | ^true ] 
		ifNone: [ ^ self == bankingEntity ].! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 16:06:49' prior: 50929500!
addPortfolio: aPortfolio 
	
	(self seeIfAlreadyInHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	parentsPortfolio 
		detect: [ :portfolio | portfolio seeIfAlreadyInHierarchy: aPortfolio ] 
		ifFound: [:portfolio | ^true ] 
		ifNone: [].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 16:07:05' prior: 50929548!
addPortfolio: aPortfolio 
	
	(self seeIfAlreadyInHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	parentsPortfolio 
		detect: [ :portfolio | portfolio seeIfAlreadyInHierarchy: aPortfolio ] 
		ifFound: [:portfolio | true ] 
		ifNone: [].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 16:07:19'!
seeIfItsUpInTheHierarchy: aPortfolio

	^ parentsPortfolio 
		detect: [ :portfolio | portfolio seeIfAlreadyInHierarchy: aPortfolio ] 
		ifFound: [:portfolio | true ] 
		ifNone: []! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 16:07:19' prior: 50929561!
addPortfolio: aPortfolio 
	
	(self seeIfAlreadyInHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	self seeIfItsUpInTheHierarchy: aPortfolio.
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 16:07:43' prior: 50929574!
seeIfItsUpInTheHierarchy: aPortfolio

	^ parentsPortfolio 
		detect: [ :portfolio | portfolio seeIfItsUpInTheHierarchy: aPortfolio ] 
		ifFound: [:portfolio | true ] 
		ifNone: []! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 16:07:57' prior: 50929593!
seeIfItsUpInTheHierarchy: aPortfolio

	^ parentsPortfolio 
		detect: [ :portfolio | portfolio seeIfItsUpInTheHierarchy: aPortfolio ] 
		ifFound: [:portfolio | true ] 
		ifNone: [ false ]! !

!testRun: #ProtfolioTest #test14 stamp: 'GR 11/7/2020 16:08:05'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 16:08:31' prior: 50929583!
addPortfolio: aPortfolio 
	
	(self seeIfAlreadyInHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	(self seeIfItsUpInTheHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	contents add: aPortfolio.
	
	aPortfolio childOf: self! !

!testRun: #ProtfolioTest #test14 stamp: 'GR 11/7/2020 16:08:32'!
FAILURE!

!testRun: #ProtfolioTest #test14 stamp: 'GR 11/7/2020 16:08:36'!
FAILURE!

!testRun: #ProtfolioTest #test14 stamp: 'GR 11/7/2020 16:08:36'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 16:09:23' prior: 50929602!
seeIfItsUpInTheHierarchy: aPortfolio

	^ parentsPortfolio 
		detect: [ :portfolio | portfolio seeIfItsUpInTheHierarchy: aPortfolio ] 
		ifFound: [:portfolio | true ] 
		ifNone: [ self == aPortfolio ]! !

!testRun: #ProtfolioTest #test14 stamp: 'GR 11/7/2020 16:09:26'!
PASSED!

!testRun: #ProtfolioTest #test14 stamp: 'GR 11/7/2020 16:09:28'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 16:09:52'!
test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio3 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!methodRemoval: ProtfolioTest #test14 stamp: 'GR 11/7/2020 16:09:52'!
test14

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio3 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 16:10:17'!
test15CanNotAddToPortfolioAPortfolioInAnotherBranch

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio3 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 16:10:29' prior: 50929677!
test15CanNotAddToPortfolioAPortfolioInAnotherBranch

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio addPortfolio: portfolio3.
	
	self
		should: [ portfolio3 addPortfolio: portfolio ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 16:10:37' prior: 50929694!
test15CanNotAddToPortfolioAPortfolioInAnotherBranch

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio addPortfolio: portfolio3.
	
	self
		should: [ portfolio2 addPortfolio: portfolio3 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

Object subclass: #Portfolio
	instanceVariableNames: 'contents rootPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'GR 11/7/2020 16:11:00'!
Object subclass: #Portfolio
	instanceVariableNames: 'contents rootPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'GR 11/7/2020 16:11:24'!
Object subclass: #Portfolio
	instanceVariableNames: 'bankingEntities rootPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 16:11:24' prior: 50928020!
hasRegistered: aTransaction
	
	| hasRegistered |
	
	hasRegistered := false.
	
	bankingEntities do: [ :aBankingEntity |  hasRegistered := hasRegistered or: (aBankingEntity  hasRegistered: aTransaction) ].
	
	^ hasRegistered.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 16:11:24' prior: 50926949!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	
	bankingEntities do: [:aBankingEntity | transactions addAll: aBankingEntity transactions].
	
	^ transactions.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 16:11:24' prior: 50929385 overrides: 16896425!
initialize

	bankingEntities := Set new.
	parentsPortfolio  := Set new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 16:11:24' prior: 50926941!
balance
	
	| totalBalance |
	
	totalBalance := 0. 
	
	bankingEntities do: [:aBankingEntity | totalBalance := totalBalance + aBankingEntity balance]. 
	
	^totalBalance.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 16:11:24' prior: 50928422!
addAccount: aReceptiveAccount 
	
	self seeIfAlreadyInHierarchy: aReceptiveAccount.
	
	bankingEntities add: aReceptiveAccount ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 16:11:24' prior: 50929538!
seeIfAlreadyInHierarchy: bankingEntity
	
	bankingEntities 
		detect: [ :aBankingEntity | aBankingEntity seeIfAlreadyInHierarchy: bankingEntity ] 
		ifFound: [ :aBankingEntity | ^true ] 
		ifNone: [ ^ self == bankingEntity ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 16:11:24' prior: 50925450!
isEmpty
	
	^ bankingEntities isEmpty! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 16:11:24' prior: 50929613!
addPortfolio: aPortfolio 
	
	(self seeIfAlreadyInHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	(self seeIfItsUpInTheHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	bankingEntities add: aPortfolio.
	
	aPortfolio childOf: self! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:15:49' prior: 50929791!
seeIfAlreadyInHierarchy: bankingEntity
	
	| isInTheHierarchy |
	
	isInTheHierarchy := false.
	
	rootPortfolios do: [ :aRootPortfolio | isInTheHierarchy := isInTheHierarchy or: (aRootPortfolio lookFor: bankingEntity)].
	
	^isInTheHierarchy 
	
	"bankingEntities 
		detect: [ :aBankingEntity | aBankingEntity seeIfAlreadyInHierarchy: bankingEntity ] 
		ifFound: [ :aBankingEntity | ^true ] 
		ifNone: [ ^ self == bankingEntity ]."! !

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/7/2020 16:16:06'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'GR 11/7/2020 16:16:21' prior: 50929769 overrides: 16896425!
initialize

	bankingEntities := Set new.
	rootPortfolios  := Set new.! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 16:17:26' prior: 50929807!
addPortfolio: aPortfolio 
	
	(self seeIfAlreadyInHierarchy: aPortfolio) ifTrue: [ self error: self class cycleHierarchyError ].
	
	bankingEntities add: aPortfolio.
	
	aPortfolio addRootsOfParent: self! !

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/7/2020 16:17:31'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:17:37'!
addRootsOfParent: aPortfolio 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:17:57' prior: 50929858!
addRootsOfParent: aPortfolio 
	
	rootPortfolios := aPortfolio rootPortfolios.! !

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/7/2020 16:18:00'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/7/2020 16:18:04'!
rootPortfolios
	self shouldBeImplemented.
	^rootPortfolios! !
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/7/2020 16:18:07' prior: 50929872!
rootPortfolios
	
	^rootPortfolios! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:19:46' prior: 50929863!
addRootsOfParent: aPortfolio 
	
	rootPortfolios addAll: aPortfolio rootPortfolios.! !

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/7/2020 16:20:06'!
FAILURE!
!Portfolio methodsFor: 'initialization' stamp: 'GR 11/7/2020 16:21:33' prior: 50929840 overrides: 16896425!
initialize

	bankingEntities := Set new.
	rootPortfolios  := Set with: self.! !

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/7/2020 16:21:55'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:22:14'!
lookFor: aPortfolio 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:25:48' prior: 50929900!
lookFor: aPortfolio 
	
	bankingEntities 
		detect: [ :aBankingEntity | aBankingEntity lookFor: aPortfolio ]
		ifFound: [ ^true ]
		ifNone: [ ^self == aPortfolio ]! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:28:33' prior: 50929881!
addRootsOfParent: aPortfolio 
	
	rootPortfolios addAll: aPortfolio rootPortfolios.
	rootPortfolios remove: self ifAbsent: [].! !

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/7/2020 16:29:24'!
FAILURE!
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:30:06' prior: 50929905!
lookFor: aPortfolio 
	
	bankingEntities 
		detect: [ :aBankingEntity | aBankingEntity lookFor: aPortfolio ]
		ifFound: [ :aBankingEntity | ^true ]
		ifNone: [ ^ self == aPortfolio ]! !

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/7/2020 16:30:09'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/7/2020 16:30:10'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 16:33:06'!
test16

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio.
	
	self
		should: [ portfolio2 addPortfolio: portfolio3 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!testRun: #ProtfolioTest #test16 stamp: 'GR 11/7/2020 16:33:07'!
FAILURE!
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:40:29' prior: 50929913!
addRootsOfParent: aPortfolio 
	
	rootPortfolios addAll: aPortfolio rootPortfolios.
	bankingEntities do: [ :aBankingEntity | aBankingEntity addRootsOfParent: aPortfolio ].
	rootPortfolios remove: self ifAbsent: [].! !

!testRun: #ProtfolioTest #test16 stamp: 'GR 11/7/2020 16:40:58'!
PASSED!

!testRun: #ProtfolioTest #test16 stamp: 'GR 11/7/2020 16:41:00'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 16:42:54'!
test16CanNotAddToPortfolioAPortfolioThatContainsIt

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio.
	
	self
		should: [ portfolio2 addPortfolio: portfolio3 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!methodRemoval: ProtfolioTest #test16 stamp: 'GR 11/7/2020 16:42:54'!
test16

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio.
	
	self
		should: [ portfolio2 addPortfolio: portfolio3 ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 16:43:07'!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt

	| portfolio account |
	
	portfolio := Portfolio new.
	account  := ReceptiveAccount new.
	portfolio addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!methodRemoval: ProtfolioTest #test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/7/2020 16:43:07'!
test16CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt

	| portfolio account |
	
	portfolio := Portfolio new.
	account  := ReceptiveAccount new.
	portfolio addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]!

!methodRemoval: Portfolio #seeIfItsUpInTheHierarchy: stamp: 'GR 11/7/2020 16:46:30'!
seeIfItsUpInTheHierarchy: aPortfolio

	^ parentsPortfolio 
		detect: [ :portfolio | portfolio seeIfItsUpInTheHierarchy: aPortfolio ] 
		ifFound: [:portfolio | true ] 
		ifNone: [ self == aPortfolio ]!
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:46:41' prior: 50929957!
addRootsOfParent: aPortfolio 
	
	rootPortfolios addAll: aPortfolio rootPortfolios.
	"bankingEntities do: [ :aBankingEntity | aBankingEntity addRootsOfParent: aPortfolio ]."
	rootPortfolios remove: self ifAbsent: [].! !

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/7/2020 16:46:48'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsDownInTheHierarchy stamp: 'GR 11/7/2020 16:46:58'!
FAILURE!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsDownInTheHierarchy stamp: 'GR 11/7/2020 16:46:58'!
FAILURE!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/7/2020 16:47:01'!
FAILURE!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/7/2020 16:47:01'!
FAILURE!
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:47:13' prior: 50930039!
addRootsOfParent: aPortfolio 
	
	rootPortfolios addAll: aPortfolio rootPortfolios.
	bankingEntities do: [ :aBankingEntity | aBankingEntity addRootsOfParent: aPortfolio ].
	rootPortfolios remove: self ifAbsent: [].! !

!methodRemoval: Portfolio #childOf: stamp: 'GR 11/7/2020 16:48:09'!
childOf: aPortfolio 
	
	parentsPortfolio add: aPortfolio .!
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:48:21' prior: 50929819!
seeIfAlreadyInHierarchy: bankingEntity
	
	| isInTheHierarchy |
	
	isInTheHierarchy := false.
	
	rootPortfolios do: [ :aRootPortfolio | isInTheHierarchy := isInTheHierarchy or: (aRootPortfolio lookFor: bankingEntity)].
	
	^isInTheHierarchy! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 16:49:05'!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy

	| portfolio portfolio2 account |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account  := ReceptiveAccount new.
	
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!methodRemoval: ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsDownInTheHierarchy stamp: 'GR 11/7/2020 16:49:05'!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsDownInTheHierarchy

	| portfolio portfolio2 account |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account  := ReceptiveAccount new.
	
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 16:49:16'!
test18CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt

	| portfolio account |
	
	portfolio := Portfolio new.
	account  := ReceptiveAccount new.
	portfolio addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]! !

!methodRemoval: ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/7/2020 16:49:16'!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt

	| portfolio account |
	
	portfolio := Portfolio new.
	account  := ReceptiveAccount new.
	portfolio addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 16:50:23'!
FAILURE!
!Portfolio methodsFor: 'private' stamp: 'GR 11/7/2020 16:51:51' prior: 50929924!
lookFor: bankingEntity 
	
	bankingEntities 
		detect: [ :aBankingEntity | aBankingEntity lookFor: bankingEntity ]
		ifFound: [ :aBankingEntity | ^true ]
		ifNone: [ ^ self == bankingEntity ]! !

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 16:52:36'!
FAILURE!
!ReceptiveAccount methodsFor: 'private' stamp: 'GR 11/7/2020 16:52:50'!
lookFor: aReceptiveAccount 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'private' stamp: 'GR 11/7/2020 16:53:26' prior: 50930174!
lookFor: aBankingEntity 
	
	^ self == aBankingEntity! !

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 16:53:39'!
FAILURE!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 16:53:44'!
FAILURE!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 16:53:44'!
FAILURE!
!Portfolio methodsFor: 'adding' stamp: 'GR 11/7/2020 16:54:31' prior: 50929784!
addAccount: aReceptiveAccount 
	
	(self seeIfAlreadyInHierarchy: aReceptiveAccount) ifTrue: [self error: Portfolio cycleHierarchyError ].
	
	bankingEntities add: aReceptiveAccount ! !

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 16:54:32'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 16:54:34'!
PASSED!

!methodRemoval: ProtfolioTest #test18CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt stamp: 'GR 11/7/2020 16:54:39'!
test18CanNotAddAnAccountToPortfolioThatAlreadyExistsInIt

	| portfolio account |
	
	portfolio := Portfolio new.
	account  := ReceptiveAccount new.
	portfolio addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withExceptionDo: [:anError | 
			self assert: Portfolio cycleHierarchyError = anError messageText ]!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/7/2020 16:54:41'!
ERROR!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/7/2020 16:54:41'!
ERROR!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 16:54:41'!
ERROR!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/7/2020 16:54:41'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/7/2020 16:54:46'!
ERROR!
!ReceptiveAccount methodsFor: 'private' stamp: 'GR 11/7/2020 16:55:16'!
addRootsOfParent: aPortfolio 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'private' stamp: 'GR 11/7/2020 16:55:19' prior: 50930326!
addRootsOfParent: aPortfolio 
	
	! !

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/7/2020 16:57:36'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/7/2020 16:57:38'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 16:57:39'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/7/2020 16:57:42'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/7/2020 16:57:44'!
PASSED!

----QUIT----(7 November 2020 17:02:56) CuisUniversity-4383.image priorSource: 19109492!

----STARTUP---- (7 November 2020 17:03:21) as /home/grosinov/linux64/CuisUniversity-4383.image!

!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:04:38' prior: 50927603!
test10CanNotAddAPortfolioToItself

	| portfolio |
	
	portfolio := Portfolio new.
	
	self
		should: [ portfolio addPortfolio: portfolio ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:04:47' prior: 50927628!
test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio

	| portfolio portfolio2 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	
	self
		should: [ portfolio addPortfolio: portfolio2 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:04:59' prior: 50929309!
test12CanNotAddToPortfolioAnyOfItsParents

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio3.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio3 addPortfolio: portfolio ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.
	
	self
		should: [ portfolio3 addPortfolio: portfolio2 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:05:03' prior: 50929213!
test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio addPortfolio: portfolio3 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:05:06' prior: 50929646!
test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio3 addPortfolio: portfolio ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:05:12' prior: 50929711!
test15CanNotAddToPortfolioAPortfolioInAnotherBranch

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio addPortfolio: portfolio3.
	
	self
		should: [ portfolio2 addPortfolio: portfolio3 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:05:17' prior: 50929971!
test16CanNotAddToPortfolioAPortfolioThatContainsIt

	| portfolio portfolio2 portfolio3 |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio.
	
	self
		should: [ portfolio2 addPortfolio: portfolio3 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:05:21' prior: 50930093!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy

	| portfolio portfolio2 account |
	
	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account  := ReceptiveAccount new.
	
	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/7/2020 17:05:37'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 17:05:37'!
PASSED!
!ProtfolioTest methodsFor: 'nil' stamp: 'GR 11/7/2020 17:05:56' overrides: 16927572!
setUp

	! !

TestCase subclass: #ProtfolioTest
	instanceVariableNames: 'portfolio portfolio2 portfolio3 account account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TestCase subclass: #ProtfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ProtfolioTest category: 'Portfolio-Ejercicio' stamp: 'GR 11/7/2020 17:06:21'!
TestCase subclass: #ProtfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:06:37' prior: 50925628!
test01PortfolioStartsWithBalanceCero

	| portfolio |
	self assert: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.! !

TestCase subclass: #ProtfolioTest
	instanceVariableNames: 'portfolio portfolio2 portfolio3 account account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TestCase subclass: #ProtfolioTest
	instanceVariableNames: 'portfolio1 portfolio4 portfolio5 account6 account7'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ProtfolioTest category: 'Portfolio-Ejercicio' stamp: 'GR 11/7/2020 17:07:07'!
TestCase subclass: #ProtfolioTest
	instanceVariableNames: 'portfolio1 portfolio4 portfolio5 account6 account7'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:07:23' prior: 50930750!
test01PortfolioStartsWithBalanceCero

	self assert: portfolio1 isEmpty.
	self assert: 0 equals: portfolio1 balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:08:07' prior: 50930729 overrides: 16927572!
setUp

	portfolio1 := Portfolio new.
	portfolio4 := Portfolio new.
	portfolio5 := Portfolio new.
	account6  := ReceptiveAccount new.
	account7  := ReceptiveAccount new.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:08:33' prior: 50927508!
test02BalanceWithAnAccount

	Deposit register: 100 on: account6.
	portfolio1 addAccount: account6.
	
	self deny: portfolio1 isEmpty.
	self assert: 100 equals: portfolio1 balance.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:10:16' prior: 50927519!
test03BalanceWithAnAccountAndAPortfolio

	
	
	portfolio1 := Portfolio new.
	portfolio4 := Portfolio new.
	account6 := ReceptiveAccount new.
	account7 := ReceptiveAccount new.
	
	Deposit register: 100 on: account6.
	Deposit register: 50 on: account7.
	
	portfolio1 addAccount: account6.
	portfolio4 addAccount: account7.
	portfolio1 addPortfolio: portfolio4.
	
	self assert: 150 equals: portfolio1 balance.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:10:27' prior: 50930804!
test03BalanceWithAnAccountAndAPortfolio

	portfolio1 := Portfolio new.
	portfolio4 := Portfolio new.
	account6 := ReceptiveAccount new.
	account7 := ReceptiveAccount new.
	
	Deposit register: 100 on: account6.
	Deposit register: 50 on: account7.
	
	portfolio1 addAccount: account6.
	portfolio4 addAccount: account7.
	portfolio1 addPortfolio: portfolio4.
	
	self assert: 150 equals: portfolio1 balance.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:10:37' prior: 50925855!
test04TransactionsOfEmptyPortfolioReturnsNoTransactions

	self assert: OrderedCollection new equals: portfolio1 transactions.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:11:26' prior: 50927536!
test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount

	| deposit |
	
	deposit := Deposit register: 100 on: account6.
	portfolio1 addAccount: account6.
	
	self assert: (OrderedCollection with: deposit) equals: portfolio1 transactions.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:12:54' prior: 50927550!
test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction

	| deposit1 deposit2 |
	
	deposit1 := Deposit register: 100 on: account6.
	deposit2 := Deposit register: 50 on: account7.
	
	portfolio1 addAccount: account6.
	portfolio4 addAccount: account7.
	portfolio1 addPortfolio: portfolio4 .
	
	self assert: (( portfolio1 transactions includes: deposit1 ) and: (portfolio1 transactions includes: deposit2)).! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:13:22' prior: 50926852!
test07EmptyPortfolioHasNotARegisteredTransaction

	| deposit |
	
	deposit := Deposit for: 100.
	
	self deny: (portfolio1 hasRegistered: deposit).! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:13:41' prior: 50927572!
test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount

	| deposit |
	
	deposit := Deposit register: 100 on: account6.
	
	portfolio1 addAccount: account6.
	
	self assert: (portfolio1 hasRegistered: deposit).! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:14:42' prior: 50927584!
test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount

	| deposit |
	
	Deposit register: 100 on: account6.
	deposit := Deposit register: 50 on: account7.
	
	portfolio1 addAccount: account6.
	portfolio4 addAccount: account7.
	portfolio1 addPortfolio: portfolio4 .
	
	self assert: (portfolio1 hasRegistered: deposit).! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:14:59' prior: 50930543!
test10CanNotAddAPortfolioToItself

	self
		should: [ portfolio1 addPortfolio: portfolio1 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:15:37' prior: 50930553!
test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio

	
	portfolio1 addPortfolio: portfolio4.
	
	self
		should: [ portfolio1 addPortfolio: portfolio4 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:16:35' prior: 50930566!
test12CanNotAddToPortfolioAnyOfItsParents

	portfolio1 addPortfolio: portfolio5.
	portfolio4 addPortfolio: portfolio5.
	
	self
		should: [ portfolio5 addPortfolio: portfolio1 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.
	
	self
		should: [ portfolio5 addPortfolio: portfolio4 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:17:04' prior: 50930585!
test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio

	portfolio1 addPortfolio: portfolio4.
	portfolio4 addPortfolio: portfolio5.
	
	self
		should: [ portfolio1 addPortfolio: portfolio5 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:18:07' prior: 50930600!
test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio

	portfolio1 addPortfolio: portfolio4.
	portfolio4 addPortfolio: portfolio5.
	
	self
		should: [ portfolio5 addPortfolio: portfolio1 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:18:24' prior: 50930615!
test15CanNotAddToPortfolioAPortfolioInAnotherBranch

	portfolio1 addPortfolio: portfolio4.
	portfolio1 addPortfolio: portfolio5.
	
	self
		should: [ portfolio4 addPortfolio: portfolio5 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:18:57' prior: 50930630!
test16CanNotAddToPortfolioAPortfolioThatContainsIt

	portfolio1 addPortfolio: portfolio4.
	portfolio5 addPortfolio: portfolio1.
	
	self
		should: [ portfolio4 addPortfolio: portfolio5 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:19:17' prior: 50930645!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy

	portfolio1 addPortfolio: portfolio4.
	portfolio4 addAccount: account6.
	
	self
		should: [ portfolio1 addAccount: account6 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !

!classDefinition: #ProtfolioTest category: 'Portfolio-Ejercicio' stamp: 'GR 11/7/2020 17:19:27'!
TestCase subclass: #ProtfolioTest
	instanceVariableNames: 'portfolio portfolio4 portfolio5 account6 account7'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930980!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy

	portfolio addPortfolio: portfolio4.
	portfolio4 addAccount: account6.
	
	self
		should: [ portfolio addAccount: account6 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930903!
test10CanNotAddAPortfolioToItself

	self
		should: [ portfolio addPortfolio: portfolio ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930958!
test15CanNotAddToPortfolioAPortfolioInAnotherBranch

	portfolio addPortfolio: portfolio4.
	portfolio addPortfolio: portfolio5.
	
	self
		should: [ portfolio4 addPortfolio: portfolio5 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930879!
test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount

	| deposit |
	
	deposit := Deposit register: 100 on: account6.
	
	portfolio addAccount: account6.
	
	self assert: (portfolio hasRegistered: deposit).! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930836!
test04TransactionsOfEmptyPortfolioReturnsNoTransactions

	self assert: OrderedCollection new equals: portfolio transactions.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930778!
test01PortfolioStartsWithBalanceCero

	self assert: portfolio isEmpty.
	self assert: 0 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930947!
test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio

	portfolio addPortfolio: portfolio4.
	portfolio4 addPortfolio: portfolio5.
	
	self
		should: [ portfolio5 addPortfolio: portfolio ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930921!
test12CanNotAddToPortfolioAnyOfItsParents

	portfolio addPortfolio: portfolio5.
	portfolio4 addPortfolio: portfolio5.
	
	self
		should: [ portfolio5 addPortfolio: portfolio ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.
	
	self
		should: [ portfolio5 addPortfolio: portfolio4 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930786 overrides: 16927572!
setUp

	portfolio := Portfolio new.
	portfolio4 := Portfolio new.
	portfolio5 := Portfolio new.
	account6  := ReceptiveAccount new.
	account7  := ReceptiveAccount new.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930820!
test03BalanceWithAnAccountAndAPortfolio

	portfolio := Portfolio new.
	portfolio4 := Portfolio new.
	account6 := ReceptiveAccount new.
	account7 := ReceptiveAccount new.
	
	Deposit register: 100 on: account6.
	Deposit register: 50 on: account7.
	
	portfolio addAccount: account6.
	portfolio4 addAccount: account7.
	portfolio addPortfolio: portfolio4.
	
	self assert: 150 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930936!
test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio

	portfolio addPortfolio: portfolio4.
	portfolio4 addPortfolio: portfolio5.
	
	self
		should: [ portfolio addPortfolio: portfolio5 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930889!
test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount

	| deposit |
	
	Deposit register: 100 on: account6.
	deposit := Deposit register: 50 on: account7.
	
	portfolio addAccount: account6.
	portfolio4 addAccount: account7.
	portfolio addPortfolio: portfolio4 .
	
	self assert: (portfolio hasRegistered: deposit).! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930911!
test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio

	
	portfolio addPortfolio: portfolio4.
	
	self
		should: [ portfolio addPortfolio: portfolio4 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930854!
test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction

	| deposit1 deposit2 |
	
	deposit1 := Deposit register: 100 on: account6.
	deposit2 := Deposit register: 50 on: account7.
	
	portfolio addAccount: account6.
	portfolio4 addAccount: account7.
	portfolio addPortfolio: portfolio4 .
	
	self assert: (( portfolio transactions includes: deposit1 ) and: (portfolio transactions includes: deposit2)).! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930795!
test02BalanceWithAnAccount

	Deposit register: 100 on: account6.
	portfolio addAccount: account6.
	
	self deny: portfolio isEmpty.
	self assert: 100 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930969!
test16CanNotAddToPortfolioAPortfolioThatContainsIt

	portfolio addPortfolio: portfolio4.
	portfolio5 addPortfolio: portfolio.
	
	self
		should: [ portfolio4 addPortfolio: portfolio5 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930843!
test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount

	| deposit |
	
	deposit := Deposit register: 100 on: account6.
	portfolio addAccount: account6.
	
	self assert: (OrderedCollection with: deposit) equals: portfolio transactions.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:27' prior: 50930871!
test07EmptyPortfolioHasNotARegisteredTransaction

	| deposit |
	
	deposit := Deposit for: 100.
	
	self deny: (portfolio hasRegistered: deposit).! !

!classDefinition: #ProtfolioTest category: 'Portfolio-Ejercicio' stamp: 'GR 11/7/2020 17:19:31'!
TestCase subclass: #ProtfolioTest
	instanceVariableNames: 'portfolio portfolio2 portfolio5 account6 account7'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:31' prior: 50931146!
test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction

	| deposit1 deposit2 |
	
	deposit1 := Deposit register: 100 on: account6.
	deposit2 := Deposit register: 50 on: account7.
	
	portfolio addAccount: account6.
	portfolio2 addAccount: account7.
	portfolio addPortfolio: portfolio2 .
	
	self assert: (( portfolio transactions includes: deposit1 ) and: (portfolio transactions includes: deposit2)).! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:31' prior: 50931085 overrides: 16927572!
setUp

	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio5 := Portfolio new.
	account6  := ReceptiveAccount new.
	account7  := ReceptiveAccount new.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:31' prior: 50931136!
test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio

	
	portfolio addPortfolio: portfolio2.
	
	self
		should: [ portfolio addPortfolio: portfolio2 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:31' prior: 50931057!
test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio

	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio5.
	
	self
		should: [ portfolio5 addPortfolio: portfolio ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:31' prior: 50931021!
test15CanNotAddToPortfolioAPortfolioInAnotherBranch

	portfolio addPortfolio: portfolio2.
	portfolio addPortfolio: portfolio5.
	
	self
		should: [ portfolio2 addPortfolio: portfolio5 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:31' prior: 50931001!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy

	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account6.
	
	self
		should: [ portfolio addAccount: account6 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:31' prior: 50931122!
test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount

	| deposit |
	
	Deposit register: 100 on: account6.
	deposit := Deposit register: 50 on: account7.
	
	portfolio addAccount: account6.
	portfolio2 addAccount: account7.
	portfolio addPortfolio: portfolio2 .
	
	self assert: (portfolio hasRegistered: deposit).! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:31' prior: 50931172!
test16CanNotAddToPortfolioAPortfolioThatContainsIt

	portfolio addPortfolio: portfolio2.
	portfolio5 addPortfolio: portfolio.
	
	self
		should: [ portfolio2 addPortfolio: portfolio5 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:31' prior: 50931094!
test03BalanceWithAnAccountAndAPortfolio

	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account6 := ReceptiveAccount new.
	account7 := ReceptiveAccount new.
	
	Deposit register: 100 on: account6.
	Deposit register: 50 on: account7.
	
	portfolio addAccount: account6.
	portfolio2 addAccount: account7.
	portfolio addPortfolio: portfolio2.
	
	self assert: 150 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:31' prior: 50931110!
test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio

	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio5.
	
	self
		should: [ portfolio addPortfolio: portfolio5 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:31' prior: 50931069!
test12CanNotAddToPortfolioAnyOfItsParents

	portfolio addPortfolio: portfolio5.
	portfolio2 addPortfolio: portfolio5.
	
	self
		should: [ portfolio5 addPortfolio: portfolio ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.
	
	self
		should: [ portfolio5 addPortfolio: portfolio2 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !

!classDefinition: #ProtfolioTest category: 'Portfolio-Ejercicio' stamp: 'GR 11/7/2020 17:19:34'!
TestCase subclass: #ProtfolioTest
	instanceVariableNames: 'portfolio portfolio2 portfolio3 account6 account7'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:34' prior: 50931260!
test15CanNotAddToPortfolioAPortfolioInAnotherBranch

	portfolio addPortfolio: portfolio2.
	portfolio addPortfolio: portfolio3.
	
	self
		should: [ portfolio2 addPortfolio: portfolio3 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:34' prior: 50931229 overrides: 16927572!
setUp

	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account6  := ReceptiveAccount new.
	account7  := ReceptiveAccount new.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:35' prior: 50931324!
test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio

	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio addPortfolio: portfolio3 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:35' prior: 50931248!
test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio

	portfolio addPortfolio: portfolio2.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio3 addPortfolio: portfolio ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:35' prior: 50931297!
test16CanNotAddToPortfolioAPortfolioThatContainsIt

	portfolio addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio.
	
	self
		should: [ portfolio2 addPortfolio: portfolio3 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:35' prior: 50931336!
test12CanNotAddToPortfolioAnyOfItsParents

	portfolio addPortfolio: portfolio3.
	portfolio2 addPortfolio: portfolio3.
	
	self
		should: [ portfolio3 addPortfolio: portfolio ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.
	
	self
		should: [ portfolio3 addPortfolio: portfolio2 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !

!classDefinition: #ProtfolioTest category: 'Portfolio-Ejercicio' stamp: 'GR 11/7/2020 17:19:46'!
TestCase subclass: #ProtfolioTest
	instanceVariableNames: 'portfolio portfolio2 portfolio3 account account7'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:46' prior: 50931032!
test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount

	| deposit |
	
	deposit := Deposit register: 100 on: account.
	
	portfolio addAccount: account.
	
	self assert: (portfolio hasRegistered: deposit).! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:46' prior: 50931212!
test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction

	| deposit1 deposit2 |
	
	deposit1 := Deposit register: 100 on: account.
	deposit2 := Deposit register: 50 on: account7.
	
	portfolio addAccount: account.
	portfolio2 addAccount: account7.
	portfolio addPortfolio: portfolio2 .
	
	self assert: (( portfolio transactions includes: deposit1 ) and: (portfolio transactions includes: deposit2)).! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:46' prior: 50931163!
test02BalanceWithAnAccount

	Deposit register: 100 on: account.
	portfolio addAccount: account.
	
	self deny: portfolio isEmpty.
	self assert: 100 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:46' prior: 50931308!
test03BalanceWithAnAccountAndAPortfolio

	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	account7 := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	Deposit register: 50 on: account7.
	
	portfolio addAccount: account.
	portfolio2 addAccount: account7.
	portfolio addPortfolio: portfolio2.
	
	self assert: 150 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:46' prior: 50931183!
test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount

	| deposit |
	
	deposit := Deposit register: 100 on: account.
	portfolio addAccount: account.
	
	self assert: (OrderedCollection with: deposit) equals: portfolio transactions.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:46' prior: 50931372 overrides: 16927572!
setUp

	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account  := ReceptiveAccount new.
	account7  := ReceptiveAccount new.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:46' prior: 50931283!
test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount

	| deposit |
	
	Deposit register: 100 on: account.
	deposit := Deposit register: 50 on: account7.
	
	portfolio addAccount: account.
	portfolio2 addAccount: account7.
	portfolio addPortfolio: portfolio2 .
	
	self assert: (portfolio hasRegistered: deposit).! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:46' prior: 50931271!
test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy

	portfolio addPortfolio: portfolio2.
	portfolio2 addAccount: account.
	
	self
		should: [ portfolio addAccount: account ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !

!classDefinition: #ProtfolioTest category: 'Portfolio-Ejercicio' stamp: 'GR 11/7/2020 17:19:51'!
TestCase subclass: #ProtfolioTest
	instanceVariableNames: 'portfolio portfolio2 portfolio3 account account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:51' prior: 50931476!
test03BalanceWithAnAccountAndAPortfolio

	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	Deposit register: 50 on: account2.
	
	portfolio addAccount: account.
	portfolio2 addAccount: account2.
	portfolio addPortfolio: portfolio2.
	
	self assert: 150 equals: portfolio balance.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:51' prior: 50931513!
test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount

	| deposit |
	
	Deposit register: 100 on: account.
	deposit := Deposit register: 50 on: account2.
	
	portfolio addAccount: account.
	portfolio2 addAccount: account2.
	portfolio addPortfolio: portfolio2 .
	
	self assert: (portfolio hasRegistered: deposit).! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:51' prior: 50931504 overrides: 16927572!
setUp

	portfolio := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	account  := ReceptiveAccount new.
	account2  := ReceptiveAccount new.! !
!ProtfolioTest methodsFor: 'as yet unclassified' stamp: 'GR 11/7/2020 17:19:51' prior: 50931450!
test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction

	| deposit1 deposit2 |
	
	deposit1 := Deposit register: 100 on: account.
	deposit2 := Deposit register: 50 on: account2.
	
	portfolio addAccount: account.
	portfolio2 addAccount: account2.
	portfolio addPortfolio: portfolio2 .
	
	self assert: (( portfolio transactions includes: deposit1 ) and: (portfolio transactions includes: deposit2)).! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/7/2020 17:20:04' prior: 50931548!
test03BalanceWithAnAccountAndAPortfolio

	Deposit register: 100 on: account.
	Deposit register: 50 on: account2.
	
	portfolio addAccount: account.
	portfolio2 addAccount: account2.
	portfolio addPortfolio: portfolio2.
	
	self assert: 150 equals: portfolio balance.! !

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/7/2020 17:20:27'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/7/2020 17:20:30'!
PASSED!

----QUIT----(7 November 2020 17:22:00) CuisUniversity-4383.image priorSource: 19164353!

----STARTUP---- (7 November 2020 17:22:22) as /home/grosinov/linux64/CuisUniversity-4383.image!


----QUIT----(7 November 2020 17:22:43) CuisUniversity-4383.image priorSource: 19202003!

----STARTUP---- (8 November 2020 18:30:56) as /home/grosinov/linux64/CuisUniversity-4383.image!


Object subclass: #BankingEntity
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #BankingEntity category: 'Portfolio-Ejercicio' stamp: 'GR 11/8/2020 18:32:53'!
Object subclass: #BankingEntity
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

BankingEntity subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'GR 11/8/2020 18:33:03'!
BankingEntity subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

BankingEntity subclass: #Portfolio
	instanceVariableNames: 'bankingEntities rootPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'GR 11/8/2020 18:33:10'!
BankingEntity subclass: #Portfolio
	instanceVariableNames: 'bankingEntities rootPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!BankingEntity methodsFor: 'no messages' stamp: 'GR 11/8/2020 18:33:50'!
seeIfAlreadyInHierarchy

	self subclassResponsibility.! !
!BankingEntity methodsFor: 'as yet unclassified' stamp: 'GR 11/8/2020 18:34:05'!
seeIfAlreadyInHierarchy: bankingEntity

	self subclassResponsibility.! !

!methodRemoval: BankingEntity #seeIfAlreadyInHierarchy stamp: 'GR 11/8/2020 18:34:08'!
seeIfAlreadyInHierarchy

	self subclassResponsibility.!
!BankingEntity methodsFor: 'as yet unclassified' stamp: 'GR 11/8/2020 18:34:17'!
lookFor: bankingEntity ! !
!BankingEntity methodsFor: 'as yet unclassified' stamp: 'GR 11/8/2020 18:34:28'!
addRootsOfParent: aPortfolio ! !
!BankingEntity methodsFor: 'as yet unclassified' stamp: 'GR 11/8/2020 18:34:34' prior: 50931779!
lookFor: bankingEntity 

	self subclassResponsibility.! !
!BankingEntity methodsFor: 'as yet unclassified' stamp: 'GR 11/8/2020 18:34:41' prior: 50931783!
addRootsOfParent: aPortfolio

	self subclassResponsibility.! !
!BankingEntity methodsFor: 'as yet unclassified' stamp: 'GR 11/8/2020 18:36:47'!
balance

	self subclassResponsibility.! !
!BankingEntity methodsFor: 'as yet unclassified' stamp: 'GR 11/8/2020 18:37:03'!
hasRegistered: aTransaction

	self subclassResponsibility! !
!BankingEntity methodsFor: 'as yet unclassified' stamp: 'GR 11/8/2020 18:37:06' prior: 50931802!
hasRegistered: aTransaction

	self subclassResponsibility.! !
!BankingEntity methodsFor: 'as yet unclassified' stamp: 'GR 11/8/2020 18:37:35'!
transactions

	self subclassResponsibility.! !

----QUIT----(8 November 2020 18:40:00) CuisUniversity-4383.image priorSource: 19202190!

----STARTUP---- (9 November 2020 16:48:51) as /home/grosinov/linux64/CuisUniversity-4383.image!

!Portfolio methodsFor: 'adding' stamp: 'GR 11/9/2020 16:50:36'!
addBankingEntity: aReceptiveAccount

	(self seeIfAlreadyInHierarchy: aReceptiveAccount) ifTrue: [self error: Portfolio cycleHierarchyError ].
	
	bankingEntities add: aReceptiveAccount! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/9/2020 16:50:36' prior: 50930196!
addAccount: aReceptiveAccount 
	
	self addBankingEntity: aReceptiveAccount ! !
!Portfolio methodsFor: 'adding' stamp: 'GR 11/9/2020 16:50:56' prior: 50929845!
addPortfolio: aPortfolio 
	
	self addBankingEntity: aPortfolio.
	
	aPortfolio addRootsOfParent: self! !

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 16:51:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 16:51:00'!
PASSED!
!Portfolio methodsFor: 'adding -- private' stamp: 'GR 11/9/2020 16:51:54' prior: 50931822!
addBankingEntity: aBankingEntity

	(self seeIfAlreadyInHierarchy: aBankingEntity) ifTrue: [self error: Portfolio cycleHierarchyError ].
	
	bankingEntities add: aBankingEntity! !
!Portfolio methodsFor: 'adding -- private' stamp: 'GR 11/9/2020 16:52:01' prior: 50931938!
addBankingEntity: aBankingEntity

	(self seeIfAlreadyInHierarchy: aBankingEntity) ifTrue: [self error: self class cycleHierarchyError ].
	
	bankingEntities add: aBankingEntity! !

----QUIT----(9 November 2020 16:52:26) CuisUniversity-4383.image priorSource: 19205294!

----STARTUP---- (9 November 2020 16:53:36) as /home/grosinov/linux64/CuisUniversity-4383.image!

!AccountTransaction methodsFor: 'private' stamp: 'GR 11/9/2020 17:39:31'!
addToBalance: aValue

	self subclassResponsibility ! !

!methodRemoval: AccountTransaction #addToBalanceDependingOnTransaction stamp: 'GR 11/9/2020 17:39:37'!
addToBalanceDependingOnTransaction

	self subclassResponsibility !
!AccountTransaction methodsFor: 'private' stamp: 'GR 11/9/2020 17:39:47' prior: 50931961!
addToBalance: aBalance

	self subclassResponsibility ! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'GR 11/9/2020 17:54:50' prior: 50925559 overrides: 50931798!
balance
	
	transactions inject: 0 into: [ :aBalance :aTransaction | aTransaction addToBalance: aBalance].
	
	"| balance |
	
	balance := 0.
	
	transactions do: [ :aTransaction | balance := aTransaction addToBalance: balance].
	
	^balance"! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/9/2020 17:54:58'!
ERROR!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 17:54:58'!
ERROR!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 17:54:58'!
FAILURE!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 17:54:58'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 17:54:58'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 17:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 17:56:14'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 17:56:14'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'GR 11/9/2020 17:56:27' prior: 50931977 overrides: 50931798!
balance
	
	^ transactions inject: 0 into: [ :aBalance :aTransaction | aTransaction addToBalance: aBalance].
	
	"| balance |
	
	balance := 0.
	
	transactions do: [ :aTransaction | balance := aTransaction addToBalance: balance].
	
	^balance"! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 17:56:27'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 17:56:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 17:56:30'!
PASSED!
!Portfolio methodsFor: 'balance' stamp: 'GR 11/9/2020 17:57:36' prior: 50929775 overrides: 50931798!
balance
	
	bankingEntities inject: 0 into: [:totalBalance :aBankingEntity | totalBalance + aBankingEntity balance]
	
	"| totalBalance |
	
	totalBalance := 0. 
	
	bankingEntities do: [:aBankingEntity | totalBalance := totalBalance + aBankingEntity balance]. 
	
	^totalBalance."! !

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 17:57:41'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'GR 11/9/2020 17:58:56' prior: 50932200 overrides: 50931798!
balance
	
	^ bankingEntities inject: 0 into: [:totalBalance :aBankingEntity | totalBalance + aBankingEntity balance]
	
	"| totalBalance |
	
	totalBalance := 0. 
	
	bankingEntities do: [:aBankingEntity | totalBalance := totalBalance + aBankingEntity balance]. 
	
	^totalBalance."! !

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 17:58:57'!
FAILURE!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 17:59:00'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 17:59:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 17:59:01'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'GR 11/9/2020 17:59:48' prior: 50929759 overrides: 50931812!
transactions

	bankingEntities inject: OrderedCollection new into: [:transactions :aBankingEntity | transactions addAll: aBankingEntity transactions]
	
	"| transactions |
	
	transactions := OrderedCollection new.
	
	bankingEntities do: [:aBankingEntity | transactions addAll: aBankingEntity transactions].
	
	^ transactions."! !
!Portfolio methodsFor: 'transactions' stamp: 'GR 11/9/2020 17:59:53' prior: 50932326 overrides: 50931812!
transactions

	^ bankingEntities inject: OrderedCollection new into: [:transactions :aBankingEntity | transactions addAll: aBankingEntity transactions]
	
	"| transactions |
	
	transactions := OrderedCollection new.
	
	bankingEntities do: [:aBankingEntity | transactions addAll: aBankingEntity transactions].
	
	^ transactions."! !

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 17:59:56'!
FAILURE!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 17:59:56'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 17:59:56'!
FAILURE!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 18:00:05'!
ERROR!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 18:01:35'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'GR 11/7/2020 16:11:24' prior: 50932340 overrides: 50931812!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	
	bankingEntities do: [:aBankingEntity | transactions addAll: aBankingEntity transactions].
	
	^ transactions.! !

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 18:03:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 18:03:03'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'GR 11/9/2020 18:05:30' prior: 50932463 overrides: 50931812!
transactions

	^ bankingEntities inject: OrderedCollection new into: [:transactions :aBankingEntity | transactions addAll: aBankingEntity transactions]
	
	"| transactions |
	
	transactions := OrderedCollection new.
	
	bankingEntities do: [:aBankingEntity | transactions addAll: aBankingEntity transactions].
	
	^ transactions."! !

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 18:05:33'!
FAILURE!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 18:05:33'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 18:05:33'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'GR 11/9/2020 18:07:16' prior: 50932567 overrides: 50931812!
transactions

	"^ bankingEntities inject: OrderedCollection new into: [:transactions :aBankingEntity | transactions addAll: aBankingEntity transactions]"
	
	| transactions |
	
	transactions := OrderedCollection new.
	
	bankingEntities do: [:aBankingEntity | transactions addAll: aBankingEntity transactions].
	
	^ transactions.! !
!Portfolio methodsFor: 'testing' stamp: 'GR 11/9/2020 18:07:58' prior: 50929749 overrides: 50931807!
hasRegistered: aTransaction
	
	^ bankingEntities inject: false into: [ :hasRegistered :aBankingEntity |  hasRegistered or: (aBankingEntity  hasRegistered: aTransaction) ]
	
	"| hasRegistered |
	
	hasRegistered := false.
	
	bankingEntities do: [ :aBankingEntity |  hasRegistered := hasRegistered or: (aBankingEntity  hasRegistered: aTransaction) ].
	
	^ hasRegistered."! !

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 18:08:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 18:08:03'!
PASSED!
!Portfolio methodsFor: 'balance' stamp: 'GR 11/9/2020 18:08:19' prior: 50932216 overrides: 50931798!
balance
	
	^ bankingEntities inject: 0 into: [:totalBalance :aBankingEntity | totalBalance + aBankingEntity balance]! !
!Portfolio methodsFor: 'testing' stamp: 'GR 11/9/2020 18:08:30' prior: 50932695 overrides: 50931807!
hasRegistered: aTransaction
	
	^ bankingEntities inject: false into: [ :hasRegistered :aBankingEntity |  hasRegistered or: (aBankingEntity  hasRegistered: aTransaction) ]! !
!Portfolio methodsFor: 'private' stamp: 'GR 11/9/2020 18:09:07' prior: 50930083 overrides: 50931769!
seeIfAlreadyInHierarchy: bankingEntity
	
	^ rootPortfolios inject: false into: [ :isInTheHierarchy :aRootPortfolio | isInTheHierarchy or: (aRootPortfolio lookFor: bankingEntity)]
	
	"| isInTheHierarchy |
	
	isInTheHierarchy := false.
	
	rootPortfolios do: [ :aRootPortfolio | isInTheHierarchy := isInTheHierarchy or: (aRootPortfolio lookFor: bankingEntity)].
	
	^isInTheHierarchy"! !

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 18:09:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 18:09:14'!
PASSED!
!Portfolio methodsFor: 'private' stamp: 'GR 11/9/2020 18:09:25' prior: 50932820 overrides: 50931769!
seeIfAlreadyInHierarchy: bankingEntity
	
	^ rootPortfolios inject: false into: [ :isInTheHierarchy :aRootPortfolio | isInTheHierarchy or: (aRootPortfolio lookFor: bankingEntity)]! !
!Portfolio methodsFor: 'transactions' stamp: 'GR 11/9/2020 18:15:20' prior: 50932681 overrides: 50931812!
transactions

	^ bankingEntities inject: OrderedCollection new addingAll: [:aBankingEntity | aBankingEntity transactions].! !

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 18:15:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 18:15:24'!
PASSED!
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/9/2020 18:23:37'!
test17

	portfolio addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio.
	
	self
		should: [ portfolio2 addPortfolio: portfolio3 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !
!ProtfolioTest methodsFor: 'testing' stamp: 'GR 11/9/2020 18:23:48'!
test18

	portfolio addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio.
	
	self
		should: [ portfolio2 addPortfolio: portfolio3 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.! !

!methodRemoval: ProtfolioTest #test17 stamp: 'GR 11/9/2020 18:23:48'!
test17

	portfolio addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio.
	
	self
		should: [ portfolio2 addPortfolio: portfolio3 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.!

!methodRemoval: ProtfolioTest #test18 stamp: 'GR 11/9/2020 18:26:52'!
test18

	portfolio addPortfolio: portfolio2.
	portfolio3 addPortfolio: portfolio.
	
	self
		should: [ portfolio2 addPortfolio: portfolio3 ]
		raise: Error
		withMessageText: Portfolio cycleHierarchyError.!

----QUIT----(9 November 2020 18:31:05) CuisUniversity-4383.image priorSource: 19209746!

----STARTUP---- (9 November 2020 18:32:01) as /home/grosinov/linux64/CuisUniversity-4383.image!

!ReceptiveAccount methodsFor: 'balance' stamp: 'GR 11/9/2020 18:32:15' prior: 50932090 overrides: 50931798!
balance
	
	^ transactions inject: 0 into: [ :aBalance :aTransaction | aTransaction addToBalance: aBalance].! !

!methodRemoval: ReceptiveAccount #seeIfAlreadyInHierarchy: stamp: 'GR 11/9/2020 18:32:52'!
seeIfAlreadyInHierarchy: aReceptiveAccount 
	
	^ self == aReceptiveAccount !

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test01PortfolioStartsWithBalanceCero stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test02BalanceWithAnAccount stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test03BalanceWithAnAccountAndAPortfolio stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test04TransactionsOfEmptyPortfolioReturnsNoTransactions stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test05TransactionsOfPortfolioWithAnAccountReturnsTransactionsOfThatAccount stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test06TransactionsOfPortfolioWithAnAccountAndAPortfolioReturnsEveryTransaction stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test07EmptyPortfolioHasNotARegisteredTransaction stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test08PortfolioWithAccountHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test09PortfolioWithAccountAndAPortfolioHasARegisteredTransactionInAnyAccount stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test10CanNotAddAPortfolioToItself stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test11CanNotAddAPortfolioThatAlreadyExistsInThePortfolio stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test12CanNotAddToPortfolioAnyOfItsParents stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test13CanNotAddToPortfolioAnAlreadyGrandchildPortfolio stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test14CanNotAddToPortfolioAnAlreadyGrandparentPortfolio stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test15CanNotAddToPortfolioAPortfolioInAnotherBranch stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test16CanNotAddToPortfolioAPortfolioThatContainsIt stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ProtfolioTest #test17CanNotAddAnAccountToPortfolioThatAlreadyExistsInTheHierarchy stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 18:33:04'!
PASSED!

----QUIT----(9 November 2020 18:34:00) CuisUniversity-4383.image priorSource: 19245593!

----STARTUP---- (9 November 2020 19:16:25) as /home/grosinov/linux64/CuisUniversity-4383.image!


!classRemoval: #ReceptiveAccount stamp: 'GR 11/9/2020 19:18:11'!
BankingEntity subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'GR 11/9/2020 19:18:11'!
BankingEntity subclass: #Portfolio
	instanceVariableNames: 'bankingEntities rootPortfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #BankingEntity stamp: 'GR 11/9/2020 19:18:12'!
Object subclass: #BankingEntity
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'GR 11/9/2020 19:18:12'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'GR 11/9/2020 19:18:12'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'GR 11/9/2020 19:18:13'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'GR 11/9/2020 19:18:13'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ProtfolioTest stamp: 'GR 11/9/2020 19:18:13'!
TestCase subclass: #ProtfolioTest
	instanceVariableNames: 'portfolio portfolio2 portfolio3 account account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /home/grosinov/linux64/Portfolio-Solucion.st----!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 19:25:21'!
test08

	| account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 on: account.
		
	self assert: 1 equals: account transactions size .
	self assert: (account transactions includes: deposit).
! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'GR 11/9/2020 19:27:25'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 19:27:07' prior: 50933968!
test08

	| account anotherAccount transfer |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	transfer := Transfer transfer: 100 from: account to: anotherAccount.
		
	self assert: 1 equals: account transactions size .
	self assert: (account transactions includes: transfer).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 19:27:33' prior: 50933986!
test08

	| account anotherAccount transfer |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	transfer := Transfer transfer: 0 from: account to: anotherAccount.
		
	self assert: 1 equals: account transactions size .
	self assert: (account transactions includes: transfer).
! !

!testRun: #ReceptiveAccountTest #test08 stamp: 'GR 11/9/2020 19:27:37'!
ERROR!

!testRun: #ReceptiveAccountTest #test08 stamp: 'GR 11/9/2020 19:28:46'!
ERROR!

!testRun: #ReceptiveAccountTest #test08 stamp: 'GR 11/9/2020 19:30:21'!
ERROR!

!testRun: #ReceptiveAccountTest #test08 stamp: 'GR 11/9/2020 19:30:21'!
ERROR!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'GR 11/9/2020 19:30:28'!
transfer: aSmallInteger from: aReceptiveAccount to: aReceptiveAccount3 
	self shouldBeImplemented.! !

!methodRemoval: Transfer class #transfer:from:to: stamp: 'GR 11/9/2020 19:30:44'!
transfer: aSmallInteger from: aReceptiveAccount to: aReceptiveAccount3 
	self shouldBeImplemented.!

!testRun: #ReceptiveAccountTest #test08 stamp: 'GR 11/9/2020 19:30:51'!
ERROR!

!testRun: #ReceptiveAccountTest #test08 stamp: 'GR 11/9/2020 19:30:51'!
ERROR!
!Transfer class methodsFor: 'instance creation' stamp: 'GR 11/9/2020 19:30:55'!
transfer: aSmallInteger from: aReceptiveAccount to: aReceptiveAccount3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeTransfer: aSmallInteger from: aReceptiveAccount to: aReceptiveAccount3 ! !
!Transfer class methodsFor: 'instance creation' stamp: 'GR 11/9/2020 19:31:58' prior: 50934039!
transfer: aValue from: account to: anotherAccount 
	
	| transaction |
	
	transaction := self for: aValue to: anotherAccount.
	account register: transaction.
		
	^ transaction! !

AccountTransaction subclass: #Transfer
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'GR 11/9/2020 19:32:31'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #ReceptiveAccountTest #test08 stamp: 'GR 11/9/2020 19:32:52'!
ERROR!

!testRun: #ReceptiveAccountTest #test08 stamp: 'GR 11/9/2020 19:32:52'!
ERROR!

AccountTransaction subclass: #Transfer
	instanceVariableNames: 'value receiver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'GR 11/9/2020 19:34:08'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: 'value receiver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #ReceptiveAccountTest #test08 stamp: 'GR 11/9/2020 19:34:16'!
ERROR!
!Transfer class methodsFor: 'instance creation' stamp: 'GR 11/9/2020 19:34:20'!
for: aSmallInteger to: aReceptiveAccount 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aSmallInteger to: aReceptiveAccount ! !
!Transfer class methodsFor: 'instance creation' stamp: 'GR 11/9/2020 19:34:43' prior: 50934092!
for: aValue to: anAccount 
	
	^self new initializeFor: aValue to: anAccount ! !

!testRun: #ReceptiveAccountTest #test08 stamp: 'GR 11/9/2020 19:34:47'!
ERROR!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'GR 11/9/2020 19:35:23'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: 'value receiver account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'initialization' stamp: 'GR 11/9/2020 19:35:23'!
initializeFor: aValue to: anAccount 
	self shouldBeImplemented.
	value := aValue.
	account := anAccount.! !
!Transfer methodsFor: 'initialization' stamp: 'GR 11/9/2020 19:35:35' prior: 50934118!
initializeFor: aValue to: anAccount 
	
	value := aValue.
	account := anAccount.! !

!testRun: #ReceptiveAccountTest #test08 stamp: 'GR 11/9/2020 19:35:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test08 stamp: 'GR 11/9/2020 19:36:04'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 19:36:52'!
test09

	| account anotherAccount transfer |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	transfer := Transfer transfer: 100 from: account to: anotherAccount.
		
	self assert: 1 equals: account transactions size .
	self assert: (account transactions includes: transfer).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 19:37:29' prior: 50934135!
test09

	| account anotherAccount transfer |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	transfer := Transfer transfer: 100 from: account to: anotherAccount.
		
	self assert: 0 equals: account balance .
	self assert: 100 equals: anotherAccount balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 19:37:38' prior: 50934149!
test09

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	Transfer transfer: 100 from: account to: anotherAccount.
		
	self assert: 0 equals: account balance .
	self assert: 100 equals: anotherAccount balance.
! !

!testRun: #ReceptiveAccountTest #test09 stamp: 'GR 11/9/2020 19:37:46'!
ERROR!

!testRun: #ReceptiveAccountTest #test09 stamp: 'GR 11/9/2020 19:38:21'!
ERROR!

!testRun: #ReceptiveAccountTest #test09 stamp: 'GR 11/9/2020 19:38:32'!
FAILURE!

!testRun: #ReceptiveAccountTest #test09 stamp: 'GR 11/9/2020 19:38:36'!
ERROR!
!Transfer methodsFor: 'private' stamp: 'GR 11/9/2020 19:39:18' overrides: 50933869!
affectBalance: aSmallInteger 
	self shouldBeImplemented.! !
!Transfer methodsFor: 'private' stamp: 'GR 11/9/2020 19:39:39' prior: 50934186 overrides: 50933869!
affectBalance: aBalance

	^ aBalance + value.
	
	! !

!testRun: #ReceptiveAccountTest #test09 stamp: 'GR 11/9/2020 19:40:10'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 19:43:51' prior: 50933999!
test08

	| account anotherAccount transfer |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	transfer := Transfer transfer: 0 from: account to: anotherAccount.
		
	self assert: 1 equals: account transactions size .
	self assert: (account transactions includes: transfer exit).
	self assert: 1 equals: anotherAccount transactions size .
	self assert: (anotherAccount transactions includes: transfer entry).
! !

!testRun: #ReceptiveAccountTest #test08 stamp: 'GR 11/9/2020 19:43:54'!
ERROR!

!classDefinition: #EntryTransfer category: 'Portfolio-Solucion' stamp: 'GR 11/9/2020 19:49:15'!
Transfer subclass: #EntryTransfer
	instanceVariableNames: 'transmitter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #Transfer
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'GR 11/9/2020 19:50:25'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ExitTransfer category: 'Portfolio-Solucion' stamp: 'GR 11/9/2020 19:50:39'!
Transfer subclass: #ExitTransfer
	instanceVariableNames: 'receiver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer class methodsFor: 'instance creation' stamp: 'GR 11/9/2020 19:50:28' prior: 50934051!
transfer: aValue from: account to: anotherAccount 
	
	| transactionEntry transactionExit |
	
	transactionEntry := EntryTransfer for: aValue from: account.
	transactionExit := ExitTransfer for: aValue to: anotherAccount.
	
	account register: transactionExit.
	anotherAccount register: transactionEntry.
	
	^ OrderedCollection with: transactionExit with: transactionEntry.! !

!testRun: #ReceptiveAccountTest #test08 stamp: 'GR 11/9/2020 19:50:45'!
ERROR!
!EntryTransfer class methodsFor: 'instance creation' stamp: 'GR 11/9/2020 19:51:03'!
for: aSmallInteger from: aReceptiveAccount 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aSmallInteger from: aReceptiveAccount ! !
!EntryTransfer class methodsFor: 'instance creation' stamp: 'GR 11/9/2020 19:51:18' prior: 50934263!
for: aValue from: anAccount 
	
	^self new initializeFor: aValue from: anAccount ! !

!testRun: #ReceptiveAccountTest #test08 stamp: 'GR 11/9/2020 19:51:19'!
ERROR!

!classDefinition: #EntryTransfer category: 'Portfolio-Solucion' stamp: 'GR 11/9/2020 19:51:34'!
Transfer subclass: #EntryTransfer
	instanceVariableNames: 'transmitter account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!EntryTransfer methodsFor: 'initialization' stamp: 'GR 11/9/2020 19:51:34'!
initializeFor: aValue from: anAccount 
	self shouldBeImplemented.
	value := aValue.
	account := anAccount.! !
!EntryTransfer methodsFor: 'initialization' stamp: 'GR 11/9/2020 19:51:40' prior: 50934289!
initializeFor: aValue from: anAccount 
	
	value := aValue.
	account := anAccount.! !

!methodRemoval: Transfer class #for:to: stamp: 'GR 11/9/2020 19:52:01'!
for: aValue to: anAccount 
	
	^self new initializeFor: aValue to: anAccount !

!methodRemoval: Transfer #initializeFor:to: stamp: 'GR 11/9/2020 19:52:06'!
initializeFor: aValue to: anAccount 
	
	value := aValue.
	account := anAccount.!

!testRun: #ReceptiveAccountTest #test08 stamp: 'GR 11/9/2020 19:52:20'!
ERROR!
!ExitTransfer class methodsFor: 'instance creation' stamp: 'GR 11/9/2020 19:52:27'!
for: aSmallInteger to: aReceptiveAccount 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aSmallInteger to: aReceptiveAccount ! !
!ExitTransfer class methodsFor: 'instance creation' stamp: 'GR 11/9/2020 19:52:47' prior: 50934314!
for: aValue to: anAccount 
	
	^self new initializeFor: aValue to: anAccount ! !

!testRun: #ReceptiveAccountTest #test08 stamp: 'GR 11/9/2020 19:52:48'!
ERROR!

!classDefinition: #ExitTransfer category: 'Portfolio-Solucion' stamp: 'GR 11/9/2020 19:52:56'!
Transfer subclass: #ExitTransfer
	instanceVariableNames: 'receiver account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ExitTransfer methodsFor: 'initialization' stamp: 'GR 11/9/2020 19:52:56'!
initializeFor: aValue to: anAccount 
	self shouldBeImplemented.
	value := aValue.
	account := anAccount.! !
!ExitTransfer methodsFor: 'initialization' stamp: 'GR 11/9/2020 19:53:12' prior: 50934340!
initializeFor: aValue to: anAccount 
	
	value := aValue.
	receiver := anAccount.! !

!testRun: #ReceptiveAccountTest #test08 stamp: 'GR 11/9/2020 19:53:13'!
ERROR!
!EntryTransfer methodsFor: 'initialization' stamp: 'GR 11/9/2020 19:53:23' prior: 50934296!
initializeFor: aValue from: anAccount 
	
	value := aValue.
	transmitter := anAccount.! !

Transfer subclass: #EntryTransfer
	instanceVariableNames: 'transmitter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #EntryTransfer category: 'Portfolio-Solucion' stamp: 'GR 11/9/2020 19:53:30'!
Transfer subclass: #EntryTransfer
	instanceVariableNames: 'transmitter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transfer subclass: #ExitTransfer
	instanceVariableNames: 'receiver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ExitTransfer category: 'Portfolio-Solucion' stamp: 'GR 11/9/2020 19:53:34'!
Transfer subclass: #ExitTransfer
	instanceVariableNames: 'receiver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #ReceptiveAccountTest #test08 stamp: 'GR 11/9/2020 19:53:45'!
ERROR!

!testRun: #ReceptiveAccountTest #test08 stamp: 'GR 11/9/2020 19:53:45'!
ERROR!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 19:56:28' prior: 50934199!
test08

	| account anotherAccount transfer |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	transfer := Transfer transfer: 0 from: account to: anotherAccount.
		
	self assert: 1 equals: account transactions size .
	self assert: (account transactions includes: (transfer at: 1)).
	self assert: 1 equals: anotherAccount transactions size .
	self assert: (anotherAccount transactions includes: (transfer at: 2)).
! !

!testRun: #ReceptiveAccountTest #test08 stamp: 'GR 11/9/2020 19:56:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'GR 11/9/2020 19:57:08'!
FAILURE!

!testRun: #ReceptiveAccountTest #test09 stamp: 'GR 11/9/2020 19:57:14'!
FAILURE!

!methodRemoval: Transfer #affectBalance: stamp: 'GR 11/9/2020 19:57:55'!
affectBalance: aBalance

	^ aBalance + value.
	
	!

!testRun: #ReceptiveAccountTest #test09 stamp: 'GR 11/9/2020 19:58:00'!
ERROR!

!testRun: #ReceptiveAccountTest #test09 stamp: 'GR 11/9/2020 19:58:00'!
ERROR!

!testRun: #ReceptiveAccountTest #test09 stamp: 'GR 11/9/2020 19:58:18'!
ERROR!
!ExitTransfer methodsFor: 'balance modifier' stamp: 'GR 11/9/2020 19:58:54' overrides: 50933869!
affectBalance: aSmallInteger 
	self shouldBeImplemented.! !
!ExitTransfer methodsFor: 'balance modifier' stamp: 'GR 11/9/2020 19:59:17' prior: 50934428 overrides: 50933869!
affectBalance: aBalance 
	
	^ aBalance - value.! !

!testRun: #ReceptiveAccountTest #test09 stamp: 'GR 11/9/2020 19:59:20'!
ERROR!
!EntryTransfer methodsFor: 'balance modifier' stamp: 'GR 11/9/2020 20:00:05' overrides: 50933869!
affectBalance: aSmallInteger 
	self shouldBeImplemented.! !
!EntryTransfer methodsFor: 'balance modifier' stamp: 'GR 11/9/2020 20:00:15' prior: 50934442 overrides: 50933869!
affectBalance: aBalance 
	
	^ aBalance + value.! !

!testRun: #ReceptiveAccountTest #test09 stamp: 'GR 11/9/2020 20:00:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test09 stamp: 'GR 11/9/2020 20:00:18'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 20:01:12'!
test10

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer transfer: 100 from: account to: anotherAccount.
		
	self assert: -100 equals: account balance .
	self assert: 100 equals: anotherAccount balance.
! !

!testRun: #ReceptiveAccountTest #test10 stamp: 'GR 11/9/2020 20:01:13'!
PASSED!

!methodRemoval: ReceptiveAccountTest #test10 stamp: 'GR 11/9/2020 20:01:18'!
test10

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	Transfer transfer: 100 from: account to: anotherAccount.
		
	self assert: -100 equals: account balance .
	self assert: 100 equals: anotherAccount balance.
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 20:02:53'!
test08TranferRegistersInBothAccounts

	| account anotherAccount transfer |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	transfer := Transfer transfer: 0 from: account to: anotherAccount.
		
	self assert: 1 equals: account transactions size .
	self assert: (account transactions includes: (transfer at: 1)).
	self assert: 1 equals: anotherAccount transactions size .
	self assert: (anotherAccount transactions includes: (transfer at: 2)).
! !

!methodRemoval: ReceptiveAccountTest #test08 stamp: 'GR 11/9/2020 20:02:53'!
test08

	| account anotherAccount transfer |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	transfer := Transfer transfer: 0 from: account to: anotherAccount.
		
	self assert: 1 equals: account transactions size .
	self assert: (account transactions includes: (transfer at: 1)).
	self assert: 1 equals: anotherAccount transactions size .
	self assert: (anotherAccount transactions includes: (transfer at: 2)).
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 20:03:05'!
test09TransfersModifiesBalance

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	Transfer transfer: 100 from: account to: anotherAccount.
		
	self assert: 0 equals: account balance .
	self assert: 100 equals: anotherAccount balance.
! !

!methodRemoval: ReceptiveAccountTest #test09 stamp: 'GR 11/9/2020 20:03:05'!
test09

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	Transfer transfer: 100 from: account to: anotherAccount.
		
	self assert: 0 equals: account balance .
	self assert: 100 equals: anotherAccount balance.
!
!Transfer methodsFor: 'nil' stamp: 'GR 11/9/2020 20:03:55' overrides: 50933869!
affectBalance: aBalance

	self subclassResponsibility.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 20:07:32' prior: 50934482!
test08TranferRegistersInBothAccounts

	| account anotherAccount transfer |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	transfer := Transfer transfer: 0 from: account to: anotherAccount.
		
	self assert: 1 equals: account transactions size .
	self assert: (account hasRegistered: (transfer at: 1)).
	self assert: 1 equals: anotherAccount transactions size .
	self assert: (anotherAccount transactions includes: (transfer at: 2)).
! !

AccountTransaction subclass: #Transfer
	instanceVariableNames: 'value contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'GR 11/9/2020 20:07:50'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: 'value contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer class methodsFor: 'instance creation' stamp: 'GR 11/9/2020 20:09:00' prior: 50934246!
transfer: aValue from: account to: anotherAccount 
	
	| transactionEntry transactionExit |
	
	transactionEntry := EntryTransfer for: aValue from: account.
	transactionExit := ExitTransfer for: aValue to: anotherAccount.
	
	account register: transactionExit.
	anotherAccount register: transactionEntry.
	
	^ OrderedCollection with: transactionExit with: transactionEntry.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 20:09:20' prior: 50934546!
test08TranferRegistersInBothAccounts

	| account anotherAccount transfer |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	transfer := Transfer transfer: 0 from: account to: anotherAccount.
		
	self assert: 1 equals: account transactions size .
	self assert: (account hasRegistered: (transfer at: 1)).
	self assert: 1 equals: anotherAccount transactions size .
	self assert: (anotherAccount hasRegistered: (transfer at: 2)).
! !

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 20:09:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 20:09:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 20:09:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 20:09:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 20:09:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 20:09:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 20:09:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 20:09:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 20:09:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 20:09:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 20:09:23'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 20:15:00'!
test10

	| account register |
	
	account := ReceptiveAccount new.
	
	register := 'Balance = 0'.
		
	self assert: register equals: account report.
! !

!testRun: #ReceptiveAccountTest #test10 stamp: 'GR 11/9/2020 20:15:02'!
ERROR!

!testRun: #ReceptiveAccountTest #test10 stamp: 'GR 11/9/2020 20:15:02'!
ERROR!
!ReceptiveAccount methodsFor: 'accessing' stamp: 'GR 11/9/2020 20:15:16'!
report
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'accessing' stamp: 'GR 11/9/2020 20:15:35' prior: 50934661!
report
	
	^ 'Balance = 0'! !

!testRun: #ReceptiveAccountTest #test10 stamp: 'GR 11/9/2020 20:15:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'GR 11/9/2020 20:15:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 20:15:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 20:15:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 20:15:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 20:15:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 20:15:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 20:15:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 20:15:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 20:15:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 20:15:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'GR 11/9/2020 20:15:38'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 20:16:14'!
test11

	| account register |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	register := 'Deposito de 100.
	Balance = 0.'.
		
	self assert: register equals: account report.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 20:16:19' prior: 50934649!
test10

	| account register |
	
	account := ReceptiveAccount new.
	
	register := 'Balance = 0.'.
		
	self assert: register equals: account report.
! !

!testRun: #ReceptiveAccountTest #test10 stamp: 'GR 11/9/2020 20:16:20'!
FAILURE!
!ReceptiveAccount methodsFor: 'accessing' stamp: 'GR 11/9/2020 20:16:27' prior: 50934665!
report
	
	^ 'Balance = 0.'! !

!testRun: #ReceptiveAccountTest #test10 stamp: 'GR 11/9/2020 20:16:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 20:16:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 20:16:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 20:16:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 20:16:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 20:16:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 20:16:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 20:16:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 20:16:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 20:16:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'GR 11/9/2020 20:16:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 20:16:28'!
FAILURE!

!testRun: #ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 20:16:28'!
FAILURE!
!ReceptiveAccount methodsFor: 'accessing' stamp: 'GR 11/9/2020 20:23:52' prior: 50934730!
report
	
	| records |
	
	records := transactions inject: OrderedCollection new into: [ :stringTransactions :aTransaction | aTransaction giveReport ].
	
	^ records inject: '' into: [ :report :aRegistry | report appendToString: aRegistry,'\n' ]! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 20:23:55'!
ERROR!
!Deposit methodsFor: 'report' stamp: 'GR 11/9/2020 20:24:05'!
giveReport
	self shouldBeImplemented.! !
!Deposit methodsFor: 'report' stamp: 'GR 11/9/2020 20:24:21' prior: 50934790!
giveReport
	
	^ 'Deposito de ',value! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 20:24:22'!
ERROR!
!ReceptiveAccount methodsFor: 'accessing' stamp: 'GR 11/9/2020 20:25:07' prior: 50934777!
report
	
	| records |
	
	records := transactions inject: OrderedCollection new into: [ :stringTransactions :aTransaction | aTransaction giveReport ].
	
	^ records inject: '' into: [ :report :aRegistry | report,aRegistry ]! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 20:25:10'!
ERROR!
!Deposit methodsFor: 'report' stamp: 'GR 11/9/2020 20:25:21' prior: 50934794!
giveReport
	
	^ 'Deposito de ',value asString ! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 20:25:22'!
ERROR!
!Deposit methodsFor: 'report' stamp: 'GR 11/9/2020 20:26:31' prior: 50934813!
giveReport
	
	^ ('Deposito de ',value asString),'. \n' ! !
!ReceptiveAccount methodsFor: 'accessing' stamp: 'GR 11/9/2020 20:27:59' prior: 50934801!
report
	
	| records |
	
	records := transactions inject: OrderedCollection new into: [ :stringTransactions :aTransaction | aTransaction giveReport ].
	
	records inject: '' into: [ :report :aRegistry | report,aRegistry ].
	
	^records,('balance =', self balance asString)! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 20:28:03'!
ERROR!

!testRun: #ReceptiveAccountTest #test10 stamp: 'GR 11/9/2020 20:29:38'!
FAILURE!

('balance =', self balance asString)!
!ReceptiveAccount methodsFor: 'accessing' stamp: 'GR 11/9/2020 20:38:05' prior: 50934825!
report
	
	| records report |
	
	records := transactions inject: OrderedCollection new into: [ :stringTransactions :aTransaction | aTransaction giveReport ].
	
	report := records inject: '' into: [ :finalReport :aRegistry | finalReport,aRegistry ].
	
	^report,('balance =', self balance asString)! !

!testRun: #ReceptiveAccountTest #test10 stamp: 'GR 11/9/2020 20:38:07'!
FAILURE!
!ReceptiveAccount methodsFor: 'accessing' stamp: 'GR 11/9/2020 20:38:16' prior: 50934843!
report
	
	| records report |
	
	records := transactions inject: OrderedCollection new into: [ :stringTransactions :aTransaction | aTransaction giveReport ].
	
	report := records inject: '' into: [ :finalReport :aRegistry | finalReport,aRegistry ].
	
	^report,('Balance =', self balance asString)! !

!testRun: #ReceptiveAccountTest #test10 stamp: 'GR 11/9/2020 20:38:17'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 20:38:25' prior: 50934719!
test10

	| account register |
	
	account := ReceptiveAccount new.
	
	register := 'Balance = 0'.
		
	self assert: register equals: account report.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 20:38:29' prior: 50934709!
test11

	| account register |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	register := 'Deposito de 100.
	Balance = 0'.
		
	self assert: register equals: account report.
! !

!testRun: #ReceptiveAccountTest #test10 stamp: 'GR 11/9/2020 20:38:31'!
FAILURE!
!ReceptiveAccount methodsFor: 'accessing' stamp: 'GR 11/9/2020 20:39:02' prior: 50934858!
report
	
	| records report |
	
	records := transactions inject: OrderedCollection new into: [ :stringTransactions :aTransaction | aTransaction giveReport ].
	
	report := records inject: '' into: [ :finalReport :aRegistry | finalReport,aRegistry ].
	
	^report,('Balance = ', self balance asString)! !

!testRun: #ReceptiveAccountTest #test10 stamp: 'GR 11/9/2020 20:39:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 20:39:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 20:39:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 20:39:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 20:39:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 20:39:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 20:39:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 20:39:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 20:39:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 20:39:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'GR 11/9/2020 20:39:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 20:39:03'!
ERROR!

!testRun: #ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 20:39:03'!
ERROR!
!ReceptiveAccount methodsFor: 'accessing' stamp: 'GR 11/9/2020 20:40:52' prior: 50934893!
report
	
	| records report |
	
	records := transactions inject: OrderedCollection new addingAll:  [ :stringTransactions :aTransaction | aTransaction giveReport ].
	
	report := records inject: '' into: [ :finalReport :aRegistry | finalReport,aRegistry ].
	
	^report,('Balance = ', self balance asString)! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 20:41:07'!
ERROR!
!ReceptiveAccount methodsFor: 'accessing' stamp: 'GR 11/9/2020 20:42:13' prior: 50934949!
report
	
	| records report |
	
	records := transactions inject: OrderedCollection new addingAll:  [ :stringTransactions :aTransaction | { aTransaction giveReport } ].
	
	report := records inject: '' into: [ :finalReport :aRegistry | finalReport,aRegistry ].
	
	^report,('Balance = ', self balance asString)! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 20:42:17'!
ERROR!

!testRun: #ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 20:42:24'!
ERROR!
!ReceptiveAccount methodsFor: 'accessing' stamp: 'GR 11/9/2020 20:43:08' prior: 50934964!
report
	
	| records report |
	
	records := transactions inject: OrderedCollection new into:  [ :aRecords :aTransaction | aRecords add: aTransaction giveReport ].
	
	report := records inject: '' into: [ :finalReport :aRegistry | finalReport,aRegistry ].
	
	^report,('Balance = ', self balance asString)! !
!ReceptiveAccount methodsFor: 'accessing' stamp: 'GR 11/9/2020 20:43:58' prior: 50934982!
report
	
	| records report |
	
	records := transactions inject: OrderedCollection new into:  [ :recordsCollection :aTransaction | recordsCollection add: aTransaction giveReport ].
	
	report := records inject: '' into: [ :finalReport :aRegistry | finalReport,aRegistry ].
	
	^report,('Balance = ', self balance asString)! !

!testRun: #ReceptiveAccountTest #test10 stamp: 'GR 11/9/2020 20:48:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 20:48:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 20:48:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 20:48:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 20:48:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 20:48:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 20:48:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 20:48:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 20:48:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 20:48:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'GR 11/9/2020 20:48:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 20:48:18'!
ERROR!

!testRun: #ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 20:48:18'!
ERROR!
!ReceptiveAccount methodsFor: 'accessing' stamp: 'GR 11/9/2020 20:50:59' prior: 50934995!
report
	
	| records report |
	
	records := transactions collect: [ :aTransaction | aTransaction giveReport ].
	
	report := records inject: '' into: [ :finalReport :aRegistry | finalReport,aRegistry ].
	
	^report,('Balance = ', self balance asString)! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 20:51:01'!
FAILURE!

account report!

account report!

account report!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 20:53:02' prior: 50934881!
test11

	| account register |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	register := 'Deposito de 100.\n
	Balance = 0'.
		
	self assert: register equals: account report.
! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 20:53:04'!
FAILURE!
!Deposit methodsFor: 'report' stamp: 'GR 11/9/2020 20:53:23' prior: 50934820!
giveReport
	
	^ ('Deposito de ',value asString),'.\n' ! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 20:53:24'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 20:53:33' prior: 50935066!
test11

	| account register |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	register := 'Deposito de 100.\n
	Balance = 100'.
		
	self assert: register equals: account report.
! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 20:53:34'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 20:54:16' prior: 50935086!
test11

	| account register |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	register := 'Deposito de 100.\n
	Balance = 100'.
		
	self assert: (register = account report).
! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 20:54:17'!
FAILURE!

account report!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 20:54:43' prior: 50935098!
test11

	| account register |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	register := 'Deposito de 100.\nBalance = 100'.
		
	self assert: (register = account report).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 20:54:55' prior: 50935111!
test11

	| account register |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	register := 'Deposito de 100.\nBalance = 100'.
		
	self assert: register equals: account report.
! !

!testRun: #ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 20:54:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 20:54:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 20:54:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 20:54:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 20:54:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 20:54:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 20:54:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 20:54:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 20:54:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 20:54:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'GR 11/9/2020 20:54:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 20:54:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 20:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 20:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 20:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 20:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 20:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 20:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 20:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 20:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 20:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 20:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'GR 11/9/2020 20:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 20:54:58'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 20:56:36' prior: 50935121!
test11

	| account register |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	register := 'Deposito de 100.\nBalance = 100'.
		
	self assert: register equals: account report.
! !

AccountTransaction subclass: #Transfer
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'GR 11/9/2020 21:04:40'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Transfer
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'GR 11/9/2020 21:12:31'!
Object subclass: #Transfer
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #Transfer
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'GR 11/9/2020 21:12:46'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #TransferFeet
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferFeet category: 'Portfolio-Solucion' stamp: 'GR 11/9/2020 21:13:44'!
AccountTransaction subclass: #TransferFeet
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferFeet subclass: #EntryTransfer
	instanceVariableNames: 'transmitter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #EntryTransfer category: 'Portfolio-Solucion' stamp: 'GR 11/9/2020 21:13:58'!
TransferFeet subclass: #EntryTransfer
	instanceVariableNames: 'transmitter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferFeet subclass: #ExitTransfer
	instanceVariableNames: 'receiver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ExitTransfer category: 'Portfolio-Solucion' stamp: 'GR 11/9/2020 21:14:01'!
TransferFeet subclass: #ExitTransfer
	instanceVariableNames: 'receiver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Transfer
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'GR 11/9/2020 21:14:06'!
Object subclass: #Transfer
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer class methodsFor: 'instance creation' stamp: 'GR 11/9/2020 21:14:47' prior: 50934577!
transfer: aValue from: account to: anotherAccount 
	
	| transactionEntry transactionExit |
	
	transactionEntry := EntryTransfer for: aValue from: account.
	transactionExit := ExitTransfer for: aValue to: anotherAccount.
	
	account register: transactionExit.
	anotherAccount register: transactionEntry.
	! !
!Transfer class methodsFor: 'instance creation' stamp: 'GR 11/9/2020 21:14:52' prior: 50935307!
transfer: aValue from: account to: anotherAccount 
	
	| transactionEntry transactionExit |
	
	transactionEntry := EntryTransfer for: aValue from: account.
	transactionExit := ExitTransfer for: aValue to: anotherAccount.
	
	account register: transactionExit.
	anotherAccount register: transactionEntry.
	
	^ OrderedCollection with: transactionExit with: transactionEntry.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 21:15:34' prior: 50934592!
test08TranferRegistersInBothAccounts

	| account anotherAccount transfer |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	transfer := Transfer transfer: 0 from: account to: anotherAccount.
		
	self assert: 1 equals: account transactions size .
	self assert: (account hasRegistered: transfer entryTransfer).
	self assert: 1 equals: anotherAccount transactions size .
	self assert: (anotherAccount hasRegistered: transfer exitTransfer).
! !

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 21:15:40'!
ERROR!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'GR 11/9/2020 21:18:02'!
Transfer class
	instanceVariableNames: 'transferEntry'!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'GR 11/9/2020 21:18:03'!
Transfer class
	instanceVariableNames: 'transferEntry transferExit'!
!Transfer class methodsFor: 'instance creation' stamp: 'GR 11/9/2020 21:18:00' prior: 50935320!
transfer: aValue from: account to: anotherAccount 
	
	transferEntry := EntryTransfer for: aValue from: account.
	transferExit := ExitTransfer for: aValue to: anotherAccount.
	
	account register: transferExit.
	anotherAccount register: transferEntry.! !

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 21:18:19'!
ERROR!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'GR 11/9/2020 21:18:31'!
entryTransfer
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'instance creation' stamp: 'GR 11/9/2020 21:19:11' prior: 50935367!
transfer: aValue from: account to: anotherAccount 
	
	^self new initializeTransfer: aValue from: account to: anotherAccount ! !

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 21:19:14'!
ERROR!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'GR 11/9/2020 21:19:22'!
Object subclass: #Transfer
	instanceVariableNames: 'value account_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'GR 11/9/2020 21:19:22'!
Object subclass: #Transfer
	instanceVariableNames: 'value account_CHANGE_ME anotherAccount_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'initialization' stamp: 'GR 11/9/2020 21:19:22'!
initializeTransfer: aValue from: account to: anotherAccount 
	self shouldBeImplemented.
	value := aValue.
	account_CHANGE_ME := account.
	anotherAccount_CHANGE_ME := anotherAccount.! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'GR 11/9/2020 21:19:44'!
Object subclass: #Transfer
	instanceVariableNames: 'value account_CHANGE_ME anotherAccount_CHANGE_ME transferEntry'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'GR 11/9/2020 21:19:45'!
Object subclass: #Transfer
	instanceVariableNames: 'value account_CHANGE_ME anotherAccount_CHANGE_ME transferEntry transferExit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'initialization' stamp: 'GR 11/9/2020 21:19:42' prior: 50935412!
initializeTransfer: aValue from: account to: anotherAccount 
	
	transferEntry := EntryTransfer for: aValue from: account.
	transferExit := ExitTransfer for: aValue to: anotherAccount.
	
	account register: transferExit.
	anotherAccount register: transferEntry.
	value := aValue ! !

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 21:19:47'!
ERROR!
!Transfer methodsFor: 'accessing' stamp: 'GR 11/9/2020 21:19:53'!
entryTransfer
	self shouldBeImplemented.! !
!Transfer methodsFor: 'accessing' stamp: 'GR 11/9/2020 21:20:14' prior: 50935454!
entryTransfer
	
	^transferEntry ! !

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 21:20:17'!
FAILURE!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 21:20:40'!
FAILURE!
!Transfer methodsFor: 'initialization' stamp: 'GR 11/9/2020 21:22:27' prior: 50935439!
initializeTransfer: aValue from: account to: anotherAccount 
	
	transferEntry := EntryTransfer for: aValue from: account.
	transferExit := ExitTransfer for: aValue to: anotherAccount.
	
	account register: transferExit.
	anotherAccount register: transferEntry.
	
	value := aValue ! !
!Transfer methodsFor: 'initialization' stamp: 'GR 11/9/2020 21:24:08' prior: 50935469!
initializeTransfer: aValue from: account to: anotherAccount 
	
	transferEntry := EntryTransfer for: self from: account.
	transferExit := ExitTransfer for: self to: anotherAccount.
	
	account register: transferExit.
	anotherAccount register: transferEntry.
	
	value := aValue ! !

TransferFeet subclass: #EntryTransfer
	instanceVariableNames: 'transmitter transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #EntryTransfer category: 'Portfolio-Solucion' stamp: 'GR 11/9/2020 21:24:26'!
TransferFeet subclass: #EntryTransfer
	instanceVariableNames: 'transmitter transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferFeet subclass: #EntryTransfer
	instanceVariableNames: 'transmitter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #EntryTransfer category: 'Portfolio-Solucion' stamp: 'GR 11/9/2020 21:24:30'!
TransferFeet subclass: #EntryTransfer
	instanceVariableNames: 'transmitter'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #TransferFeet
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferFeet category: 'Portfolio-Solucion' stamp: 'GR 11/9/2020 21:24:34'!
AccountTransaction subclass: #TransferFeet
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!EntryTransfer class methodsFor: 'instance creation' stamp: 'GR 11/9/2020 21:24:48' prior: 50934273!
for: aTransfer from: anAccount 
	
	^self new initializeFor: aTransfer from: anAccount ! !
!EntryTransfer methodsFor: 'initialization' stamp: 'GR 11/9/2020 21:24:56' prior: 50934355!
initializeFor: aTransfer from: anAccount 
	
	transfer := aTransfer.
	transmitter := anAccount.! !
!ExitTransfer class methodsFor: 'instance creation' stamp: 'GR 11/9/2020 21:25:01' prior: 50934324!
for: aTransfer to: anAccount 
	
	^self new initializeFor: aTransfer to: anAccount ! !
!ExitTransfer methodsFor: 'initialization' stamp: 'GR 11/9/2020 21:25:13' prior: 50934347!
initializeFor: aTransfer to: anAccount 
	
	transfer := aTransfer.
	receiver := anAccount.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 21:26:59' prior: 50935335!
test08TranferRegistersInBothAccounts

	| account anotherAccount transfer |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	transfer := Transfer transfer: 0 from: account to: anotherAccount.
		
	self assert: 1 equals: account transactions size .
	self assert: (account hasRegistered: transfer exitTransfer).
	self assert: 1 equals: anotherAccount transactions size .
	self assert: (anotherAccount hasRegistered: transfer entryTransfer).
! !

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 21:27:04'!
ERROR!
!Transfer methodsFor: 'accessing' stamp: 'GR 11/9/2020 21:27:08'!
exitTransfer
	self shouldBeImplemented.! !
!Transfer methodsFor: 'accessing' stamp: 'GR 11/9/2020 21:27:18' prior: 50935578!
exitTransfer
	
	^transferExit.! !

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 21:27:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 21:27:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 21:27:39'!
ERROR!
!ExitTransfer methodsFor: 'balance' stamp: 'GR 11/9/2020 21:28:06' prior: 50934434 overrides: 50933869!
affectBalance: aBalance 
	
	^ aBalance - transfer value.! !

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 21:28:08'!
ERROR!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 21:28:14'!
ERROR!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 21:28:57'!
ERROR!
!Transfer methodsFor: 'accessing' stamp: 'GR 11/9/2020 21:29:25' overrides: 16881508!
value

	^value! !

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 21:29:30'!
ERROR!
!EntryTransfer methodsFor: 'balance' stamp: 'GR 11/9/2020 21:29:40' prior: 50934448 overrides: 50933869!
affectBalance: aBalance 
	
	^ aBalance + transfer value.! !

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 21:29:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 21:29:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 21:29:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 21:29:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 21:29:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 21:29:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 21:29:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 21:29:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 21:29:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 21:29:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test10 stamp: 'GR 11/9/2020 21:29:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 21:29:42'!
PASSED!

Object subclass: #Transfer
	instanceVariableNames: 'value transferEntry transferExit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'GR 11/9/2020 21:30:08'!
Object subclass: #Transfer
	instanceVariableNames: 'value transferEntry transferExit'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 21:32:43' prior: 50934873!
test10

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	self 
		should: [ Transfer transfer: 100 from: account to: account. ] 
		raise: Error 
		withMessageText: Transfer sameAccountError.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 21:33:11'!
test10CanNotTransferToSameAccount

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	self 
		should: [ Transfer transfer: 100 from: account to: account. ] 
		raise: Error 
		withMessageText: Transfer sameAccountError.! !

!methodRemoval: ReceptiveAccountTest #test10 stamp: 'GR 11/9/2020 21:33:11'!
test10

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	self 
		should: [ Transfer transfer: 100 from: account to: account. ] 
		raise: Error 
		withMessageText: Transfer sameAccountError.!

!testRun: #ReceptiveAccountTest #test10CanNotTransferToSameAccount stamp: 'GR 11/9/2020 21:33:14'!
ERROR!
!Transfer class methodsFor: 'error handling' stamp: 'GR 11/9/2020 21:33:29'!
sameAccountError
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'error handling' stamp: 'GR 11/9/2020 21:33:47' prior: 50935714!
sameAccountError
	
	^ 'You can not transfer to your oun account!!'! !

!testRun: #ReceptiveAccountTest #test10CanNotTransferToSameAccount stamp: 'GR 11/9/2020 21:33:53'!
FAILURE!
!Transfer methodsFor: 'initialization' stamp: 'GR 11/9/2020 21:34:56' prior: 50935481!
initializeTransfer: aValue from: account to: anotherAccount 
	
	(account == anotherAccount ) ifTrue: [ self error: self sameAccountError ].
	
	transferEntry := EntryTransfer for: self from: account.
	transferExit := ExitTransfer for: self to: anotherAccount.
	
	account register: transferExit.
	anotherAccount register: transferEntry.
	
	value := aValue ! !

!testRun: #ReceptiveAccountTest #test10CanNotTransferToSameAccount stamp: 'GR 11/9/2020 21:34:58'!
FAILURE!
!Transfer methodsFor: 'initialization' stamp: 'GR 11/9/2020 21:35:19' prior: 50935728!
initializeTransfer: aValue from: account to: anotherAccount 
	
	(account == anotherAccount ) ifTrue: [ self error: Transfer sameAccountError ].
	
	transferEntry := EntryTransfer for: self from: account.
	transferExit := ExitTransfer for: self to: anotherAccount.
	
	account register: transferExit.
	anotherAccount register: transferEntry.
	
	value := aValue ! !

!testRun: #ReceptiveAccountTest #test10CanNotTransferToSameAccount stamp: 'GR 11/9/2020 21:35:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 21:35:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 21:35:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 21:35:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 21:35:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 21:35:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 21:35:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 21:35:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 21:35:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 21:35:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNotTransferToSameAccount stamp: 'GR 11/9/2020 21:35:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 21:35:20'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 21:35:58'!
test11CanNotTransferANegativeAmount

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	self 
		should: [ Transfer transfer: -100 from: account to: account. ] 
		raise: Error 
		withMessageText: Transfer negativeTransferError.! !

!testRun: #ReceptiveAccountTest #test11CanNotTransferANegativeAmount stamp: 'GR 11/9/2020 21:36:04'!
ERROR!
!Transfer class methodsFor: 'error handling' stamp: 'GR 11/9/2020 21:36:10'!
negativeTransferError
	self shouldBeImplemented.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 21:36:42' prior: 50935802!
test11CanNotTransferANegativeAmount

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	self 
		should: [ Transfer transfer: -100 from: account to: account. ] 
		raise: Error 
		withMessageText: Transfer amountTransferError.! !

!testRun: #ReceptiveAccountTest #test11CanNotTransferANegativeAmount stamp: 'GR 11/9/2020 21:36:44'!
ERROR!
!Transfer class methodsFor: 'error handling' stamp: 'GR 11/9/2020 21:36:57'!
amountTransferError
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'error handling' stamp: 'GR 11/9/2020 21:37:21' prior: 50935837!
amountTransferError
	
	^ 'You are trying to transfer an invalid amount'! !

!testRun: #ReceptiveAccountTest #test11CanNotTransferANegativeAmount stamp: 'GR 11/9/2020 21:37:23'!
FAILURE!
!Transfer methodsFor: 'initialization' stamp: 'GR 11/9/2020 21:38:19' prior: 50935746!
initializeTransfer: aValue from: account to: anotherAccount 
	
	(account == anotherAccount ) ifTrue: [ self error: Transfer sameAccountError ].
	
	(aValue < 0) ifTrue: [self error: Transfer amountTransferError ].
	
	transferEntry := EntryTransfer for: self from: account.
	transferExit := ExitTransfer for: self to: anotherAccount.
	
	account register: transferExit.
	anotherAccount register: transferEntry.
	
	value := aValue ! !

!testRun: #ReceptiveAccountTest #test11CanNotTransferANegativeAmount stamp: 'GR 11/9/2020 21:38:20'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 21:39:00' prior: 50935822!
test11CanNotTransferANegativeAmount

	| account account2 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	self 
		should: [ Transfer transfer: -100 from: account to: account. ] 
		raise: Error 
		withMessageText: Transfer amountTransferError.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 21:39:04' prior: 50935871!
test11CanNotTransferANegativeAmount

	| account account2 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	self 
		should: [ Transfer transfer: -100 from: account to: account2. ] 
		raise: Error 
		withMessageText: Transfer amountTransferError.! !

!testRun: #ReceptiveAccountTest #test11CanNotTransferANegativeAmount stamp: 'GR 11/9/2020 21:39:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 21:39:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 21:39:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 21:39:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 21:39:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 21:39:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 21:39:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 21:39:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 21:39:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 21:39:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNotTransferToSameAccount stamp: 'GR 11/9/2020 21:39:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 21:39:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test11CanNotTransferANegativeAmount stamp: 'GR 11/9/2020 21:39:06'!
PASSED!

!methodRemoval: Transfer class #negativeTransferError stamp: 'GR 11/9/2020 21:39:25'!
negativeTransferError
	self shouldBeImplemented.!
!Transfer class methodsFor: 'error handling' stamp: 'GR 11/9/2020 21:39:36'!
invalidAmountTransferError
	
	^ 'You are trying to transfer an invalid amount'! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'GR 11/9/2020 21:39:36' prior: 50935884!
test11CanNotTransferANegativeAmount

	| account account2 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	self 
		should: [ Transfer transfer: -100 from: account to: account2. ] 
		raise: Error 
		withMessageText: Transfer invalidAmountTransferError.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'GR 11/9/2020 21:39:36' prior: 50935851!
initializeTransfer: aValue from: account to: anotherAccount 
	
	(account == anotherAccount ) ifTrue: [ self error: Transfer sameAccountError ].
	
	(aValue < 0) ifTrue: [self error: Transfer invalidAmountTransferError ].
	
	transferEntry := EntryTransfer for: self from: account.
	transferExit := ExitTransfer for: self to: anotherAccount.
	
	account register: transferExit.
	anotherAccount register: transferEntry.
	
	value := aValue ! !

!methodRemoval: Transfer class #amountTransferError stamp: 'GR 11/9/2020 21:39:36'!
amountTransferError
	
	^ 'You are trying to transfer an invalid amount'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 21:40:05'!
test11CanNotTransferNoMoney

	| account account2 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	self 
		should: [ Transfer transfer: -100 from: account to: account2. ] 
		raise: Error 
		withMessageText: Transfer invalidAmountTransferError.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 21:40:09' prior: 50935987!
test11CanNotTransferNoMoney

	| account account2 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	self 
		should: [ Transfer transfer: 0 from: account to: account2. ] 
		raise: Error 
		withMessageText: Transfer invalidAmountTransferError.! !

!testRun: #ReceptiveAccountTest #test11CanNotTransferNoMoney stamp: 'GR 11/9/2020 21:40:10'!
FAILURE!
!Transfer methodsFor: 'initialization' stamp: 'GR 11/9/2020 21:40:20' prior: 50935966!
initializeTransfer: aValue from: account to: anotherAccount 
	
	(account == anotherAccount ) ifTrue: [ self error: Transfer sameAccountError ].
	
	(aValue <= 0) ifTrue: [self error: Transfer invalidAmountTransferError ].
	
	transferEntry := EntryTransfer for: self from: account.
	transferExit := ExitTransfer for: self to: anotherAccount.
	
	account register: transferExit.
	anotherAccount register: transferEntry.
	
	value := aValue ! !

!testRun: #ReceptiveAccountTest #test11CanNotTransferNoMoney stamp: 'GR 11/9/2020 21:40:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 21:40:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 21:40:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 21:40:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 21:40:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 21:40:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 21:40:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 21:40:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 21:40:21'!
ERROR!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 21:40:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNotTransferToSameAccount stamp: 'GR 11/9/2020 21:40:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 21:40:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test11CanNotTransferANegativeAmount stamp: 'GR 11/9/2020 21:40:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test11CanNotTransferNoMoney stamp: 'GR 11/9/2020 21:40:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 21:40:21'!
ERROR!

!testRun: #ReceptiveAccountTest #test11CanNotTransferNoMoney stamp: 'GR 11/9/2020 21:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 21:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 21:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 21:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 21:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 21:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 21:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 21:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 21:40:26'!
ERROR!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 21:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNotTransferToSameAccount stamp: 'GR 11/9/2020 21:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 21:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test11CanNotTransferANegativeAmount stamp: 'GR 11/9/2020 21:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test11CanNotTransferNoMoney stamp: 'GR 11/9/2020 21:40:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 21:40:26'!
ERROR!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 21:40:43' prior: 50935557!
test08TranferRegistersInBothAccounts

	| account anotherAccount transfer |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	
	transfer := Transfer transfer: 100 from: account to: anotherAccount.
		
	self assert: 1 equals: account transactions size .
	self assert: (account hasRegistered: transfer exitTransfer).
	self assert: 1 equals: anotherAccount transactions size .
	self assert: (anotherAccount hasRegistered: transfer entryTransfer).
! !

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 21:40:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 21:40:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 21:40:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 21:40:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 21:40:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 21:40:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 21:40:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 21:40:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 21:40:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 21:40:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNotTransferToSameAccount stamp: 'GR 11/9/2020 21:40:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 21:40:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test11CanNotTransferANegativeAmount stamp: 'GR 11/9/2020 21:40:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test11CanNotTransferNoMoney stamp: 'GR 11/9/2020 21:40:47'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 21:40:56'!
test12CanNotTransferNoMoney

	| account account2 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	self 
		should: [ Transfer transfer: 0 from: account to: account2. ] 
		raise: Error 
		withMessageText: Transfer invalidAmountTransferError.! !

!methodRemoval: ReceptiveAccountTest #test11CanNotTransferNoMoney stamp: 'GR 11/9/2020 21:40:56'!
test11CanNotTransferNoMoney

	| account account2 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	self 
		should: [ Transfer transfer: 0 from: account to: account2. ] 
		raise: Error 
		withMessageText: Transfer invalidAmountTransferError.!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 21:41:05'!
test13

	| account register |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	register := 'Deposito de 100.\nBalance = 100'.
		
	self assert: register equals: account report.
! !

!methodRemoval: ReceptiveAccountTest #test11 stamp: 'GR 11/9/2020 21:41:05'!
test11

	| account register |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	register := 'Deposito de 100.\nBalance = 100'.
		
	self assert: register equals: account report.
!

!methodRemoval: Transfer #affectBalance: stamp: 'GR 11/9/2020 21:41:24'!
affectBalance: aBalance

	self subclassResponsibility.!
!TransferFeet methodsFor: 'no messages' stamp: 'GR 11/9/2020 21:41:44' overrides: 50933869!
affectBalance: aBalance

	self subclassResponsibility.! !
!TransferFeet methodsFor: 'nil' stamp: 'GR 11/9/2020 21:42:07'!
initializeFor: aTransfer from: anAccount 

	self subclassResponsibility.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 21:42:54' prior: 50936229!
test13

	| account register |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	register := OrderedCollection with: 'Balance = 0'.
		
	self assert: register equals: account report.
! !

!testRun: #ReceptiveAccountTest #test13 stamp: 'GR 11/9/2020 21:43:00'!
FAILURE!
!ReceptiveAccount methodsFor: 'accessing' stamp: 'GR 11/9/2020 21:43:18' prior: 50935051!
report
	
	| records |
	
	records := transactions collect: [ :aTransaction | aTransaction giveReport ].
	
	^records! !

!testRun: #ReceptiveAccountTest #test13 stamp: 'GR 11/9/2020 21:43:32'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 21:43:50'!
test14

	| account register |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	register := OrderedCollection with: 'Balance = 0'.
		
	self assert: register equals: account report.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 21:43:55' prior: 50936262!
test13

	| account register |
	
	account := ReceptiveAccount new.
	
	register := OrderedCollection with: 'Balance = 0'.
		
	self assert: register equals: account report.
! !

!testRun: #ReceptiveAccountTest #test13 stamp: 'GR 11/9/2020 21:43:56'!
FAILURE!

!testRun: #ReceptiveAccountTest #test13 stamp: 'GR 11/9/2020 21:43:56'!
FAILURE!

transactions!
!ReceptiveAccount methodsFor: 'accessing' stamp: 'GR 11/9/2020 21:45:02' prior: 50936274!
report
	
	| records |
	
	records := transactions collect: [ :aTransaction | aTransaction giveReport ].
	
	records add: 'Balance = ',self balance.
	
	^records! !

!testRun: #ReceptiveAccountTest #test13 stamp: 'GR 11/9/2020 21:45:03'!
ERROR!
!ReceptiveAccount methodsFor: 'accessing' stamp: 'GR 11/9/2020 21:45:18' prior: 50936307!
report
	
	| records |
	
	records := transactions collect: [ :aTransaction | aTransaction giveReport ].
	
	records add: 'Balance = ',self balance asString.
	
	^records! !

!testRun: #ReceptiveAccountTest #test13 stamp: 'GR 11/9/2020 21:45:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'GR 11/9/2020 21:45:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'GR 11/9/2020 21:45:24'!
FAILURE!

!testRun: #ReceptiveAccountTest #test14 stamp: 'GR 11/9/2020 21:45:24'!
FAILURE!

!testRun: #ReceptiveAccountTest #test14 stamp: 'GR 11/9/2020 21:45:30'!
FAILURE!

!testRun: #ReceptiveAccountTest #test14 stamp: 'GR 11/9/2020 21:45:30'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 21:45:57' prior: 50936283!
test14

	| account register |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	register := OrderedCollection with: 'Deposito de 100.' with: 'Balance = 0'.
		
	self assert: register equals: account report.
! !

!testRun: #ReceptiveAccountTest #test14 stamp: 'GR 11/9/2020 21:46:03'!
FAILURE!
!Deposit methodsFor: 'report' stamp: 'GR 11/9/2020 21:46:39' prior: 50935078!
giveReport
	
	^ ('Deposito de ',value asString),'.' ! !

!testRun: #ReceptiveAccountTest #test14 stamp: 'GR 11/9/2020 21:46:42'!
FAILURE!

account report!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 21:47:57' prior: 50936342!
test14

	| account register |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	register := OrderedCollection with: 'Deposito de 100.' with: 'Balance = 100'.
		
	self assert: register equals: account report.
! !

!testRun: #ReceptiveAccountTest #test14 stamp: 'GR 11/9/2020 21:47:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 21:47:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 21:47:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 21:47:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 21:47:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 21:47:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 21:47:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 21:47:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 21:47:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 21:47:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNotTransferToSameAccount stamp: 'GR 11/9/2020 21:47:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test11CanNotTransferANegativeAmount stamp: 'GR 11/9/2020 21:47:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test12CanNotTransferNoMoney stamp: 'GR 11/9/2020 21:47:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'GR 11/9/2020 21:47:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'GR 11/9/2020 21:47:59'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 21:49:42'!
test15

	| account register |
	
	account := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	
	register := OrderedCollection with: 'Extraccion de 50' with: 'Balance = -50'.
		
	self assert: register equals: account report.
! !

!testRun: #ReceptiveAccountTest #test15 stamp: 'GR 11/9/2020 21:49:44'!
ERROR!
!Withdraw methodsFor: 'report' stamp: 'GR 11/9/2020 21:49:59'!
giveReport
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'report' stamp: 'GR 11/9/2020 21:50:37' prior: 50936436!
giveReport
	
	^ ('Extraccion de ',self value asString),'.'.! !

!testRun: #ReceptiveAccountTest #test15 stamp: 'GR 11/9/2020 21:50:38'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 21:50:45' prior: 50936424!
test15

	| account register |
	
	account := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	
	register := OrderedCollection with: 'Extraccion de 50.' with: 'Balance = -50'.
		
	self assert: register equals: account report.
! !

!testRun: #ReceptiveAccountTest #test15 stamp: 'GR 11/9/2020 21:50:47'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 21:51:01' prior: 50936448!
test15

	| account register |
	
	account := ReceptiveAccount new.
	Withdraw register: 50 on: account.
	
	register := OrderedCollection with: 'Extraccion de 50.' with: 'Balance = -50'.
		
	self assert: register equals: account report.
! !

!testRun: #ReceptiveAccountTest #test15 stamp: 'GR 11/9/2020 21:51:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 21:51:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 21:51:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 21:51:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 21:51:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 21:51:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 21:51:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 21:51:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 21:51:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 21:51:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNotTransferToSameAccount stamp: 'GR 11/9/2020 21:51:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test11CanNotTransferANegativeAmount stamp: 'GR 11/9/2020 21:51:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test12CanNotTransferNoMoney stamp: 'GR 11/9/2020 21:51:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'GR 11/9/2020 21:51:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'GR 11/9/2020 21:51:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'GR 11/9/2020 21:51:02'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 21:51:07' prior: 50936461!
test15

	| account register |
	
	account := ReceptiveAccount new.
	Withdraw register: 50 on: account.
	
	register := OrderedCollection with: 'Extraccion de 50' with: 'Balance = -50'.
		
	self assert: register equals: account report.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 21:51:10' prior: 50936363!
test14

	| account register |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	register := OrderedCollection with: 'Deposito de 100' with: 'Balance = 100'.
		
	self assert: register equals: account report.
! !

!testRun: #ReceptiveAccountTest #test13 stamp: 'GR 11/9/2020 21:51:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 21:51:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 21:51:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 21:51:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 21:51:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 21:51:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 21:51:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 21:51:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 21:51:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 21:51:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNotTransferToSameAccount stamp: 'GR 11/9/2020 21:51:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test11CanNotTransferANegativeAmount stamp: 'GR 11/9/2020 21:51:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test12CanNotTransferNoMoney stamp: 'GR 11/9/2020 21:51:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'GR 11/9/2020 21:51:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'GR 11/9/2020 21:51:17'!
FAILURE!

!testRun: #ReceptiveAccountTest #test15 stamp: 'GR 11/9/2020 21:51:17'!
FAILURE!

!testRun: #ReceptiveAccountTest #test14 stamp: 'GR 11/9/2020 21:51:21'!
FAILURE!
!Deposit methodsFor: 'report' stamp: 'GR 11/9/2020 21:51:36' prior: 50936355!
giveReport
	
	^ ('Deposito de ',value asString)! !

!testRun: #ReceptiveAccountTest #test14 stamp: 'GR 11/9/2020 21:51:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'GR 11/9/2020 21:51:39'!
FAILURE!
!Withdraw methodsFor: 'report' stamp: 'GR 11/9/2020 21:51:51' prior: 50936440!
giveReport
	
	^ ('Extraccion de ',self value asString).! !

!testRun: #ReceptiveAccountTest #test15 stamp: 'GR 11/9/2020 21:51:51'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 21:53:31' prior: 50936525!
test15

	| account anotherAccount register |
	
	account := ReceptiveAccount new.
	Transfer transfer: 100 from: account to: anotherAccount.
	
	register := OrderedCollection with: 'Salida por transferencia de 100' with: 'Balance = -100'.
		
	self assert: register equals: account report.
! !

!testRun: #ReceptiveAccountTest #test15 stamp: 'GR 11/9/2020 21:53:34'!
ERROR!

!testRun: #ReceptiveAccountTest #test15 stamp: 'GR 11/9/2020 21:53:38'!
ERROR!

!testRun: #ReceptiveAccountTest #test15 stamp: 'GR 11/9/2020 21:54:02'!
ERROR!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 21:54:16' prior: 50936620!
test15

	| account anotherAccount register |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer transfer: 100 from: account to: anotherAccount.
	
	register := OrderedCollection with: 'Salida por transferencia de 100' with: 'Balance = -100'.
		
	self assert: register equals: account report.
! !

!testRun: #ReceptiveAccountTest #test15 stamp: 'GR 11/9/2020 21:54:18'!
ERROR!
!ExitTransfer methodsFor: 'report' stamp: 'GR 11/9/2020 21:54:29'!
giveReport
	self shouldBeImplemented.! !
!ExitTransfer methodsFor: 'report' stamp: 'GR 11/9/2020 21:54:57' prior: 50936655!
giveReport
	
	^ 'Salida por transferencia de ',transfer value asString! !

!testRun: #ReceptiveAccountTest #test15 stamp: 'GR 11/9/2020 21:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 21:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 21:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 21:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 21:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 21:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 21:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 21:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 21:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 21:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNotTransferToSameAccount stamp: 'GR 11/9/2020 21:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test11CanNotTransferANegativeAmount stamp: 'GR 11/9/2020 21:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test12CanNotTransferNoMoney stamp: 'GR 11/9/2020 21:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'GR 11/9/2020 21:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'GR 11/9/2020 21:54:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'GR 11/9/2020 21:54:58'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 21:56:05' prior: 50936640!
test15

	| account anotherAccount entryRegister exitRegister |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer transfer: 100 from: account to: anotherAccount.
	
	entryRegister := OrderedCollection with: 'Salida por transferencia de 100' with: 'Balance = -100'.
	exitRegister := OrderedCollection with: 'Entrada por transferencia de 100' with: 'Balance = 100'.
		
	self assert: entryRegister equals: account report.
	self assert: exitRegister equals: anotherAccount report.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 21:56:39' prior: 50936718!
test15

	| account anotherAccount entryRegister exitRegister |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer transfer: 100 from: account to: anotherAccount.
	
	entryRegister := OrderedCollection with: 'Entrada por transferencia de 100' with: 'Balance = 100'.
	exitRegister := OrderedCollection with: 'Salida por transferencia de 100' with: 'Balance = -100'.
		
	self assert: entryRegister equals: account report.
	self assert: exitRegister equals: anotherAccount report.
! !

!testRun: #ReceptiveAccountTest #test15 stamp: 'GR 11/9/2020 21:57:18'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 21:58:03' prior: 50936737!
test15

	| account anotherAccount entryRegister exitRegister |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer transfer: 100 from: account to: anotherAccount.
	
	entryRegister := OrderedCollection with: 'Entrada por transferencia de 100' with: 'Balance = 100'.
	exitRegister := OrderedCollection with: 'Salida por transferencia de 100' with: 'Balance = -100'.
		
	self assert: exitRegister equals: account report.
	self assert: entryRegister equals: anotherAccount report.
! !

!testRun: #ReceptiveAccountTest #test15 stamp: 'GR 11/9/2020 21:58:06'!
ERROR!
!EntryTransfer methodsFor: 'report' stamp: 'GR 11/9/2020 21:58:16'!
giveReport
	self shouldBeImplemented.! !
!EntryTransfer methodsFor: 'report' stamp: 'GR 11/9/2020 21:58:38' prior: 50936780!
giveReport
	
	^ 'Entrada por transferencia de ', transfer value asString.! !

!testRun: #ReceptiveAccountTest #test15 stamp: 'GR 11/9/2020 21:58:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 21:58:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 21:58:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 21:58:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 21:58:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 21:58:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 21:58:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 21:58:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 21:58:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 21:58:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNotTransferToSameAccount stamp: 'GR 11/9/2020 21:58:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test11CanNotTransferANegativeAmount stamp: 'GR 11/9/2020 21:58:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test12CanNotTransferNoMoney stamp: 'GR 11/9/2020 21:58:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test13 stamp: 'GR 11/9/2020 21:58:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test14 stamp: 'GR 11/9/2020 21:58:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test15 stamp: 'GR 11/9/2020 21:58:39'!
PASSED!
!TransferFeet methodsFor: 'nil' stamp: 'GR 11/9/2020 21:59:50'!
giveReport

	self subclassResponsibility.! !
!AccountTransaction methodsFor: 'nil' stamp: 'GR 11/9/2020 22:02:29'!
giveReport

	self subclassResponsibility.! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 22:03:04'!
test13ReportWith0Balance

	| account register |
	
	account := ReceptiveAccount new.
	
	register := OrderedCollection with: 'Balance = 0'.
		
	self assert: register equals: account report.
! !

!methodRemoval: ReceptiveAccountTest #test13 stamp: 'GR 11/9/2020 22:03:04'!
test13

	| account register |
	
	account := ReceptiveAccount new.
	
	register := OrderedCollection with: 'Balance = 0'.
		
	self assert: register equals: account report.
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 22:03:14'!
test14ReportWithADeposit

	| account register |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	register := OrderedCollection with: 'Deposito de 100' with: 'Balance = 100'.
		
	self assert: register equals: account report.
! !

!methodRemoval: ReceptiveAccountTest #test14 stamp: 'GR 11/9/2020 22:03:14'!
test14

	| account register |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	register := OrderedCollection with: 'Deposito de 100' with: 'Balance = 100'.
		
	self assert: register equals: account report.
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 22:03:49'!
test15ReportWithAWithdraw

	| account register |
	
	account := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	
	register := OrderedCollection with: 'Extraccion de 100' with: 'Balance = -100'.
		
	self assert: register equals: account report.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 22:04:00'!
test16ReportWithATransfer

	| account anotherAccount entryRegister exitRegister |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer transfer: 100 from: account to: anotherAccount.
	
	entryRegister := OrderedCollection with: 'Entrada por transferencia de 100' with: 'Balance = 100'.
	exitRegister := OrderedCollection with: 'Salida por transferencia de 100' with: 'Balance = -100'.
		
	self assert: exitRegister equals: account report.
	self assert: entryRegister equals: anotherAccount report.
! !

!methodRemoval: ReceptiveAccountTest #test15 stamp: 'GR 11/9/2020 22:04:00'!
test15

	| account anotherAccount entryRegister exitRegister |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer transfer: 100 from: account to: anotherAccount.
	
	entryRegister := OrderedCollection with: 'Entrada por transferencia de 100' with: 'Balance = 100'.
	exitRegister := OrderedCollection with: 'Salida por transferencia de 100' with: 'Balance = -100'.
		
	self assert: exitRegister equals: account report.
	self assert: entryRegister equals: anotherAccount report.
!

!testRun: #ReceptiveAccountTest #test15ReportWithAWithdraw stamp: 'GR 11/9/2020 22:04:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 22:04:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 22:04:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 22:04:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 22:04:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 22:04:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 22:04:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 22:04:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 22:04:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 22:04:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNotTransferToSameAccount stamp: 'GR 11/9/2020 22:04:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test11CanNotTransferANegativeAmount stamp: 'GR 11/9/2020 22:04:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test12CanNotTransferNoMoney stamp: 'GR 11/9/2020 22:04:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test13ReportWith0Balance stamp: 'GR 11/9/2020 22:04:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test14ReportWithADeposit stamp: 'GR 11/9/2020 22:04:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test15ReportWithAWithdraw stamp: 'GR 11/9/2020 22:04:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test16ReportWithATransfer stamp: 'GR 11/9/2020 22:04:03'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 22:08:23'!
test17

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Transfer transfer: 100 from: account to: anotherAccount.
		
	self assert: -100 equals: account transferNet.
	self assert: 100 equals: anotherAccount transferNet.
! !
!ReceptiveAccount methodsFor: 'accessing' stamp: 'GR 11/9/2020 22:08:43'!
accountSummary
	
	| records |
	
	records := transactions collect: [ :aTransaction | aTransaction giveReport ].
	
	records add: 'Balance = ',self balance asString.
	
	^records! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'GR 11/9/2020 22:08:43' prior: 50936887!
test15ReportWithAWithdraw

	| account register |
	
	account := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	
	register := OrderedCollection with: 'Extraccion de 100' with: 'Balance = -100'.
		
	self assert: register equals: account accountSummary.
! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'GR 11/9/2020 22:08:43' prior: 50936850!
test13ReportWith0Balance

	| account register |
	
	account := ReceptiveAccount new.
	
	register := OrderedCollection with: 'Balance = 0'.
		
	self assert: register equals: account accountSummary.
! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'GR 11/9/2020 22:08:43' prior: 50936898!
test16ReportWithATransfer

	| account anotherAccount entryRegister exitRegister |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer transfer: 100 from: account to: anotherAccount.
	
	entryRegister := OrderedCollection with: 'Entrada por transferencia de 100' with: 'Balance = 100'.
	exitRegister := OrderedCollection with: 'Salida por transferencia de 100' with: 'Balance = -100'.
		
	self assert: exitRegister equals: account accountSummary.
	self assert: entryRegister equals: anotherAccount accountSummary.
! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'GR 11/9/2020 22:08:43' prior: 50936867!
test14ReportWithADeposit

	| account register |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	register := OrderedCollection with: 'Deposito de 100' with: 'Balance = 100'.
		
	self assert: register equals: account accountSummary.
! !

!methodRemoval: ReceptiveAccount #report stamp: 'GR 11/9/2020 22:08:43'!
report
	
	| records |
	
	records := transactions collect: [ :aTransaction | aTransaction giveReport ].
	
	records add: 'Balance = ',self balance asString.
	
	^records!

!testRun: #ReceptiveAccountTest #test17 stamp: 'GR 11/9/2020 22:08:59'!
ERROR!
!ReceptiveAccount methodsFor: 'accessing' stamp: 'GR 11/9/2020 22:09:06'!
transferNet
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'accessing' stamp: 'GR 11/9/2020 22:10:48' prior: 50937081!
transferNet
	
	^ transactions inject: 0 into: [ :transferNet :aTransaction | transferNet + aTransaction transferNet ].! !

!testRun: #ReceptiveAccountTest #test17 stamp: 'GR 11/9/2020 22:10:50'!
ERROR!
!ReceptiveAccount methodsFor: 'accessing' stamp: 'GR 11/9/2020 22:11:29' prior: 50937086!
transferNet
	
	^ transactions inject: 0 into: [ :transferNet :aTransaction | aTransaction transferNet: transferNet].! !

!testRun: #ReceptiveAccountTest #test17 stamp: 'GR 11/9/2020 22:11:39'!
ERROR!
!Deposit methodsFor: 'transferNet' stamp: 'GR 11/9/2020 22:12:08'!
transferNet: aSmallInteger 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'transferNet' stamp: 'GR 11/9/2020 22:12:17' prior: 50937105!
transferNet: aTransferNet 
	
	^aTransferNet! !

!testRun: #ReceptiveAccountTest #test17 stamp: 'GR 11/9/2020 22:12:18'!
ERROR!
!ExitTransfer methodsFor: 'transferNet' stamp: 'GR 11/9/2020 22:12:29'!
transferNet: aSmallInteger 
	self shouldBeImplemented.! !
!ExitTransfer methodsFor: 'transferNet' stamp: 'GR 11/9/2020 22:12:51' prior: 50937117!
transferNet: aTransferNet
	
	^ aTransferNet - transfer value ! !

!testRun: #ReceptiveAccountTest #test17 stamp: 'GR 11/9/2020 22:12:52'!
ERROR!
!EntryTransfer methodsFor: 'transferNet' stamp: 'GR 11/9/2020 22:13:00'!
transferNet: aSmallInteger 
	self shouldBeImplemented.! !
!EntryTransfer methodsFor: 'transferNet' stamp: 'GR 11/9/2020 22:13:15' prior: 50937129!
transferNet: aTransferNet

	^ aTransferNet + transfer value! !

!testRun: #ReceptiveAccountTest #test17 stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNotTransferToSameAccount stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test11CanNotTransferANegativeAmount stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test12CanNotTransferNoMoney stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test13ReportWith0Balance stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test14ReportWithADeposit stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test15ReportWithAWithdraw stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test16ReportWithATransfer stamp: 'GR 11/9/2020 22:13:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'GR 11/9/2020 22:13:16'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 22:13:57' prior: 50936995!
test17

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
		
	self assert: 0 equals: account transferNet.
	self assert: 0 equals: anotherAccount transferNet.
! !

!testRun: #ReceptiveAccountTest #test17 stamp: 'GR 11/9/2020 22:13:58'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 22:15:09' prior: 50937257!
test17

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer transfer: 100 from: account to: anotherAccount.
		
	self assert: -100 equals: account transferNet.
	self assert: 100 equals: anotherAccount transferNet.
! !

!testRun: #ReceptiveAccountTest #test17 stamp: 'GR 11/9/2020 22:15:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 22:15:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 22:15:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 22:15:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 22:15:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 22:15:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 22:15:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 22:15:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 22:15:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 22:15:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNotTransferToSameAccount stamp: 'GR 11/9/2020 22:15:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test11CanNotTransferANegativeAmount stamp: 'GR 11/9/2020 22:15:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test12CanNotTransferNoMoney stamp: 'GR 11/9/2020 22:15:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test13ReportWith0Balance stamp: 'GR 11/9/2020 22:15:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test14ReportWithADeposit stamp: 'GR 11/9/2020 22:15:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test15ReportWithAWithdraw stamp: 'GR 11/9/2020 22:15:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test16ReportWithATransfer stamp: 'GR 11/9/2020 22:15:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'GR 11/9/2020 22:15:10'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 22:15:19'!
test18

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer transfer: 100 from: account to: anotherAccount.
		
	self assert: -100 equals: account transferNet.
	self assert: 100 equals: anotherAccount transferNet.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 22:15:31' prior: 50937270!
test17

	| account |
	
	account := ReceptiveAccount new.
		
	self assert: 0 equals: account transferNet.
! !

!testRun: #ReceptiveAccountTest #test17 stamp: 'GR 11/9/2020 22:15:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 22:15:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 22:15:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 22:15:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 22:15:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 22:15:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 22:15:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 22:15:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 22:15:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 22:15:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNotTransferToSameAccount stamp: 'GR 11/9/2020 22:15:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test11CanNotTransferANegativeAmount stamp: 'GR 11/9/2020 22:15:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test12CanNotTransferNoMoney stamp: 'GR 11/9/2020 22:15:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test13ReportWith0Balance stamp: 'GR 11/9/2020 22:15:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test14ReportWithADeposit stamp: 'GR 11/9/2020 22:15:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test15ReportWithAWithdraw stamp: 'GR 11/9/2020 22:15:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test16ReportWithATransfer stamp: 'GR 11/9/2020 22:15:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'GR 11/9/2020 22:15:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'GR 11/9/2020 22:15:34'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 22:15:56'!
test19

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Transfer transfer: 100 from: account to: anotherAccount.
		
	self assert: -100 equals: account transferNet.
	self assert: 100 equals: anotherAccount transferNet.
! !

!testRun: #ReceptiveAccountTest #test19 stamp: 'GR 11/9/2020 22:15:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 22:15:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 22:15:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 22:15:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 22:15:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 22:15:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 22:15:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 22:15:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 22:15:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 22:15:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNotTransferToSameAccount stamp: 'GR 11/9/2020 22:15:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test11CanNotTransferANegativeAmount stamp: 'GR 11/9/2020 22:15:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test12CanNotTransferNoMoney stamp: 'GR 11/9/2020 22:15:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test13ReportWith0Balance stamp: 'GR 11/9/2020 22:15:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test14ReportWithADeposit stamp: 'GR 11/9/2020 22:15:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test15ReportWithAWithdraw stamp: 'GR 11/9/2020 22:15:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test16ReportWithATransfer stamp: 'GR 11/9/2020 22:15:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'GR 11/9/2020 22:15:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'GR 11/9/2020 22:15:57'!
PASSED!

!testRun: #ReceptiveAccountTest #test19 stamp: 'GR 11/9/2020 22:15:57'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 22:16:12'!
test20

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	Transfer transfer: 100 from: account to: anotherAccount.
		
	self assert: -100 equals: account transferNet.
	self assert: 100 equals: anotherAccount transferNet.
! !

!testRun: #ReceptiveAccountTest #test20 stamp: 'GR 11/9/2020 22:16:13'!
ERROR!
!Withdraw methodsFor: 'transferNet' stamp: 'GR 11/9/2020 22:16:21'!
transferNet: aSmallInteger 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'transferNet' stamp: 'GR 11/9/2020 22:16:44' prior: 50937516!
transferNet: aTransferNet 
	
	^ aTransferNet! !

!testRun: #ReceptiveAccountTest #test20 stamp: 'GR 11/9/2020 22:16:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 22:16:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 22:16:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 22:16:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 22:16:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 22:16:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 22:16:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 22:16:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 22:16:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 22:16:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNotTransferToSameAccount stamp: 'GR 11/9/2020 22:16:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test11CanNotTransferANegativeAmount stamp: 'GR 11/9/2020 22:16:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test12CanNotTransferNoMoney stamp: 'GR 11/9/2020 22:16:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test13ReportWith0Balance stamp: 'GR 11/9/2020 22:16:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test14ReportWithADeposit stamp: 'GR 11/9/2020 22:16:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test15ReportWithAWithdraw stamp: 'GR 11/9/2020 22:16:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test16ReportWithATransfer stamp: 'GR 11/9/2020 22:16:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test17 stamp: 'GR 11/9/2020 22:16:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test18 stamp: 'GR 11/9/2020 22:16:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test19 stamp: 'GR 11/9/2020 22:16:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test20 stamp: 'GR 11/9/2020 22:16:45'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 22:17:31'!
test17TransferNetOfNnewAccountIsCero

	| account |
	
	account := ReceptiveAccount new.
		
	self assert: 0 equals: account transferNet.
! !

!methodRemoval: ReceptiveAccountTest #test17 stamp: 'GR 11/9/2020 22:17:31'!
test17

	| account |
	
	account := ReceptiveAccount new.
		
	self assert: 0 equals: account transferNet.
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 22:18:00'!
test18ATransferModifiesTransferNet

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer transfer: 100 from: account to: anotherAccount.
		
	self assert: -100 equals: account transferNet.
	self assert: 100 equals: anotherAccount transferNet.
! !

!methodRemoval: ReceptiveAccountTest #test18 stamp: 'GR 11/9/2020 22:18:01'!
test18

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer transfer: 100 from: account to: anotherAccount.
		
	self assert: -100 equals: account transferNet.
	self assert: 100 equals: anotherAccount transferNet.
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 22:18:26'!
test19DepositDoesNotModifiesTransferNet

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Transfer transfer: 100 from: account to: anotherAccount.
		
	self assert: -100 equals: account transferNet.
	self assert: 100 equals: anotherAccount transferNet.
! !

!methodRemoval: ReceptiveAccountTest #test19 stamp: 'GR 11/9/2020 22:18:26'!
test19

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Transfer transfer: 100 from: account to: anotherAccount.
		
	self assert: -100 equals: account transferNet.
	self assert: 100 equals: anotherAccount transferNet.
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 22:18:48'!
test20WithdrawDoesNotModifyTransferNet

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	Transfer transfer: 100 from: account to: anotherAccount.
		
	self assert: -100 equals: account transferNet.
	self assert: 100 equals: anotherAccount transferNet.
! !

!methodRemoval: ReceptiveAccountTest #test20 stamp: 'GR 11/9/2020 22:18:48'!
test20

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	Transfer transfer: 100 from: account to: anotherAccount.
		
	self assert: -100 equals: account transferNet.
	self assert: 100 equals: anotherAccount transferNet.
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 22:18:57'!
test19DepositDoesNotModifyTransferNet

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Transfer transfer: 100 from: account to: anotherAccount.
		
	self assert: -100 equals: account transferNet.
	self assert: 100 equals: anotherAccount transferNet.
! !

!methodRemoval: ReceptiveAccountTest #test19DepositDoesNotModifiesTransferNet stamp: 'GR 11/9/2020 22:18:57'!
test19DepositDoesNotModifiesTransferNet

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Transfer transfer: 100 from: account to: anotherAccount.
		
	self assert: -100 equals: account transferNet.
	self assert: 100 equals: anotherAccount transferNet.
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 22:19:02' prior: 50937682!
test19DepositDoesNotModifyTransferNet

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Deposit register: 100 on: account.
		
	self assert: -100 equals: account transferNet.
	self assert: 100 equals: anotherAccount transferNet.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 22:19:07' prior: 50937710!
test19DepositDoesNotModifyTransferNet

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Deposit register: 100 on: account.
		
	self assert: 0 equals: account transferNet.
	self assert: 0 equals: anotherAccount transferNet.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'GR 11/9/2020 22:19:12' prior: 50937656!
test20WithdrawDoesNotModifyTransferNet

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Withdraw register: 100 on: account.
		
	self assert: 0 equals: account transferNet.
	self assert: 0 equals: anotherAccount transferNet.
! !

!testRun: #ReceptiveAccountTest #test20WithdrawDoesNotModifyTransferNet stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNotTransferToSameAccount stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test11CanNotTransferANegativeAmount stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test12CanNotTransferNoMoney stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test13ReportWith0Balance stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test14ReportWithADeposit stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test15ReportWithAWithdraw stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test16ReportWithATransfer stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test17TransferNetOfNnewAccountIsCero stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test18ATransferModifiesTransferNet stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test19DepositDoesNotModifyTransferNet stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test20WithdrawDoesNotModifyTransferNet stamp: 'GR 11/9/2020 22:19:13'!
PASSED!

----QUIT----(9 November 2020 22:21:30) CuisUniversity-4383.image priorSource: 19249239!

----STARTUP---- (12 November 2020 17:34:17) as /home/grosinov/linux64/CuisUniversity-4383.image!


[ 10 ]!

[ :athing | 10 ]!

[ :athing | ^10 ]!

----QUIT----(12 November 2020 18:34:12) CuisUniversity-4383.image priorSource: 19399197!

----STARTUP---- (12 November 2020 18:36:39) as /home/grosinov/linux64/CuisUniversity-4384.image!


[ 1/0 ]!

1/0!

[ 1/divisor + 5]
	on: ZeroDivide 
	do: [ :aZeroDivide | 
		divisor := 1.
		aZeroDivide retry. ]!

| divisor |!

| divisor |
divisor := 0!

[ 1/divisor + 5]
	on: ZeroDivide 
	do: [ :aZeroDivide | 
		divisor := 1.
		aZeroDivide retry. ]!

[ 1/0]
	on: ZeroDivide 
	do: [ :aZeroDivide | 10 ]!

[ 1/0]
	on: ZeroDivide 
	do: [ :aZeroDivide | aZeroDivide resume: 10]!

[ 1/0 + 5 ]
	on: ZeroDivide 
	do: [ :aZeroDivide | aZeroDivide resume: 10]!

| divisor |
 divisor := 0.
[ 1/divisor + 5 ]
	on: ZeroDivide 
	do: [ :aZeroDivide | 
		divisor := 1.
		aZeroDivide retry ].!

| divisor |
 divisor := 0.
[ 1/divisor + 5 ]
	on: ZeroDivide 
	do: [ :aZeroDivide | 
		divisor := 1.
		aZeroDivide retry ].!

[ 10 ] value !

[ 10 ] !

[ |hola| hola :=0. hola ] value !

[ |hola| hola :=0 ] value !

[ |hola|  ] value !

[ ] value !

[ |hola| hola :=10 ] value !

[ |a b| a:=5. b:=10 ] value !

[ |a b| b:=10. a:=5.  ] value  !

Error - MessageNotUnderstood !

Error - MessageNotUnderstood!

[10 puto]
	on: Error - MessageNotUnderstood
	do: [:anError | 10]!

[10 puto]
	on: Error
	do: [:anError | 10]!

MessageNotUnderstood - ZeroDivide !

[10 hola]
	on: MessageNotUnderstood - ZeroDivide
	do: [ :exc | 10] !

[10/0]
	on: MessageNotUnderstood - ZeroDivide
	do: [ :exc | 10] !

[10/0]
	on: MessageNotUnderstood
	do: [ :exc | 10] !

[10/0]
	on: ZeroDivide
	do: [ :exc | 10] !

[10/0]
	on: Error - ZeroDivide
	do: [ :exc | 10] !

[10/0]
	on: Error
	do: [ :exc | 10] 
	!

----End fileIn of /home/grosinov/linux64/Portfolio-Solucion.st----!

!testRun: #ReceptiveAccountTest #test20WithdrawDoesNotModifyTransferNet stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNotTransferToSameAccount stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test11CanNotTransferANegativeAmount stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test12CanNotTransferNoMoney stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test13ReportWith0Balance stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test14ReportWithADeposit stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test15ReportWithAWithdraw stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test16ReportWithATransfer stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test17TransferNetOfNnewAccountIsCero stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test18ATransferModifiesTransferNet stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test19DepositDoesNotModifyTransferNet stamp: 'GR 11/12/2020 19:54:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test20WithdrawDoesNotModifyTransferNet stamp: 'GR 11/12/2020 19:54:34'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'GR 11/12/2020 20:05:05'!
test16

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !
!ReceptiveAccount methodsFor: 'accessing' stamp: 'GR 11/12/2020 20:09:14' prior: 50868576!
accountSummary
	
	| records |
	
	records := transactions collect: [ :aTransaction | aTransaction giveReport ].
	
	records add: 'Balance = ', self balance asString.
	
	^records! !

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNotTransferToSameAccount stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test11CanNotTransferANegativeAmount stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test12CanNotTransferNoMoney stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test13ReportWith0Balance stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test14ReportWithADeposit stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test15ReportWithAWithdraw stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test16ReportWithATransfer stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test17TransferNetOfNnewAccountIsCero stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test18ATransferModifiesTransferNet stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test19DepositDoesNotModifyTransferNet stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test20WithdrawDoesNotModifyTransferNet stamp: 'GR 11/12/2020 20:09:17'!
PASSED!

account accountSummary!

Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'GR 11/12/2020 21:12:10'!
Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTest methodsFor: 'tests' stamp: 'GR 11/12/2020 21:15:50' prior: 50869055!
test16

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !
!PortfolioTest methodsFor: 'tests' stamp: 'GR 11/12/2020 21:19:05' prior: 50869230!
test16

	| portfolio account |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self assert: (OrderedCollection with: 'Balance = 0') equals: portfolio summary! !
!PortfolioTest methodsFor: 'tests' stamp: 'GR 11/12/2020 21:21:02' prior: 50869250!
test16

	| portfolio account summary |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	summary := OrderedCollection with: (OrderedCollection with: 'Balance = 0') with: 'Balance total = 0'.
	
	self assert: summary equals: portfolio summary! !

!testRun: #PortfolioTest #test16 stamp: 'GR 11/12/2020 21:21:13'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/12/2020 21:21:21'!
summary
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/12/2020 21:22:14' prior: 50869272!
summary
	
	^ OrderedCollection with: (OrderedCollection with: 'Balance = 0') with: 'Balance total = 0'! !

!testRun: #PortfolioTest #test16 stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNotTransferToSameAccount stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test11CanNotTransferANegativeAmount stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test12CanNotTransferNoMoney stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test13ReportWith0Balance stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test14ReportWithADeposit stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test15ReportWithAWithdraw stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test16ReportWithATransfer stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test17TransferNetOfNnewAccountIsCero stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test18ATransferModifiesTransferNet stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test19DepositDoesNotModifyTransferNet stamp: 'GR 11/12/2020 21:22:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test20WithdrawDoesNotModifyTransferNet stamp: 'GR 11/12/2020 21:22:15'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'GR 11/12/2020 21:25:00'!
test17

	| portfolio account summary accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	accountSummary := OrderedCollection with: 'Deposito de 100'  with: 'Balance = 100'.
	summary := OrderedCollection with: accountSummary with: 'Balance total = 100'.
	
	self assert: summary equals: portfolio summary! !
!ReceptiveAccount methodsFor: 'accessing' stamp: 'GR 11/12/2020 21:25:47'!
summary
	
	| records |
	
	records := transactions collect: [ :aTransaction | aTransaction giveReport ].
	
	records add: 'Balance = ', self balance asString.
	
	^records! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'GR 11/12/2020 21:25:47' prior: 50868246!
test13ReportWith0Balance

	| account register |
	
	account := ReceptiveAccount new.
	
	register := OrderedCollection with: 'Balance = 0'.
		
	self assert: register equals: account summary.
! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'GR 11/12/2020 21:25:47' prior: 50868277!
test16ReportWithATransfer

	| account anotherAccount entryRegister exitRegister |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer transfer: 100 from: account to: anotherAccount.
	
	entryRegister := OrderedCollection with: 'Entrada por transferencia de 100' with: 'Balance = 100'.
	exitRegister := OrderedCollection with: 'Salida por transferencia de 100' with: 'Balance = -100'.
		
	self assert: exitRegister equals: account summary.
	self assert: entryRegister equals: anotherAccount summary.
! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'GR 11/12/2020 21:25:47' prior: 50868255!
test14ReportWithADeposit

	| account register |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	register := OrderedCollection with: 'Deposito de 100' with: 'Balance = 100'.
		
	self assert: register equals: account summary.
! !
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'GR 11/12/2020 21:25:47' prior: 50868266!
test15ReportWithAWithdraw

	| account register |
	
	account := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	
	register := OrderedCollection with: 'Extraccion de 100' with: 'Balance = -100'.
		
	self assert: register equals: account summary.
! !

!methodRemoval: ReceptiveAccount #accountSummary stamp: 'GR 11/12/2020 21:25:47'!
accountSummary
	
	| records |
	
	records := transactions collect: [ :aTransaction | aTransaction giveReport ].
	
	records add: 'Balance = ', self balance asString.
	
	^records!

!testRun: #PortfolioTest #test17 stamp: 'GR 11/12/2020 21:25:59'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/12/2020 21:29:02' prior: 50869276!
summary
	
	| report |
	
	report := accounts collect: [ :anAccount | anAccount summary ].
	
	report add: 'Balance total = ', self balance asString, '.'.
	
	^report! !

!testRun: #PortfolioTest #test17 stamp: 'GR 11/12/2020 21:29:03'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'GR 11/12/2020 21:29:13' prior: 50869414!
test17

	| portfolio account summary accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	accountSummary := OrderedCollection with: 'Deposito de 100.'  with: 'Balance = 100.'.
	summary := OrderedCollection with: accountSummary with: 'Balance total = 100.'.
	
	self assert: summary equals: portfolio summary! !

!testRun: #PortfolioTest #test17 stamp: 'GR 11/12/2020 21:29:15'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'GR 11/12/2020 21:30:01' prior: 50869514!
test17

	| portfolio account summary accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	accountSummary := OrderedCollection with: 'Deposito de 100'  with: 'Balance = 100'.
	summary := OrderedCollection with: accountSummary with: 'Balance total = 100'.
	
	self assert: summary equals: portfolio summary! !

!testRun: #PortfolioTest #test17 stamp: 'GR 11/12/2020 21:30:02'!
FAILURE!

portfolio summary!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/12/2020 21:31:51' prior: 50869503!
summary
	
	| report |
	
	report := accounts collect: [ :anAccount | anAccount summary ].
	
	report add: 'Balance total = ', self balance asString.
	
	^report! !

!testRun: #PortfolioTest #test17 stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNotTransferToSameAccount stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test11CanNotTransferANegativeAmount stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test12CanNotTransferNoMoney stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test13ReportWith0Balance stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test14ReportWithADeposit stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test15ReportWithAWithdraw stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test16ReportWithATransfer stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test17TransferNetOfNnewAccountIsCero stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test18ATransferModifiesTransferNet stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test19DepositDoesNotModifyTransferNet stamp: 'GR 11/12/2020 21:31:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test20WithdrawDoesNotModifyTransferNet stamp: 'GR 11/12/2020 21:31:53'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'GR 11/12/2020 21:33:26'!
test18

	| portfolio account |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self assert: 0 equals: portfolio transferNet! !

!testRun: #PortfolioTest #test18 stamp: 'GR 11/12/2020 21:33:33'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/12/2020 21:33:39'!
transferNet
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/12/2020 21:33:49' prior: 50869702!
transferNet
	
	^ 0! !

!testRun: #PortfolioTest #test18 stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNotTransferToSameAccount stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test11CanNotTransferANegativeAmount stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test12CanNotTransferNoMoney stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test13ReportWith0Balance stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test14ReportWithADeposit stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test15ReportWithAWithdraw stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test16ReportWithATransfer stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test17TransferNetOfNnewAccountIsCero stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test18ATransferModifiesTransferNet stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test19DepositDoesNotModifyTransferNet stamp: 'GR 11/12/2020 21:33:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test20WithdrawDoesNotModifyTransferNet stamp: 'GR 11/12/2020 21:33:50'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'GR 11/12/2020 21:36:36'!
test19

	| portfolio account account2 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Transfer transfer: 100 from: account to: account2.
	portfolio := Portfolio with: account.
	
	self assert: -100 equals: portfolio transferNet! !

!testRun: #PortfolioTest #test19 stamp: 'GR 11/12/2020 21:36:39'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/12/2020 21:38:33' prior: 50869706!
transferNet
	
	^ (accounts at: 1) transferNet! !

!testRun: #PortfolioTest #test19 stamp: 'GR 11/12/2020 21:38:39'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'GR 11/12/2020 21:40:19'!
test20

	| portfolio account account2 account3 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	Transfer transfer: 100 from: account to: account3.
	Transfer transfer: 100 from: account2 to: account3.
	
	self assert: -100 equals: portfolio transferNet! !
!PortfolioTest methodsFor: 'tests' stamp: 'GR 11/12/2020 21:40:26' prior: 50869846!
test19

	| portfolio account account2 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	Transfer transfer: 100 from: account to: account2.
	
	self assert: -100 equals: portfolio transferNet! !

!testRun: #PortfolioTest #test19 stamp: 'GR 11/12/2020 21:40:28'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'GR 11/12/2020 21:40:28'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'GR 11/12/2020 21:40:28'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'GR 11/12/2020 21:40:28'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'GR 11/12/2020 21:40:28'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'GR 11/12/2020 21:40:28'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'GR 11/12/2020 21:40:28'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'GR 11/12/2020 21:40:28'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'GR 11/12/2020 21:40:28'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'GR 11/12/2020 21:40:28'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'GR 11/12/2020 21:40:28'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'GR 11/12/2020 21:40:28'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'GR 11/12/2020 21:40:28'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'GR 11/12/2020 21:40:28'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'GR 11/12/2020 21:40:28'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'GR 11/12/2020 21:40:28'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'GR 11/12/2020 21:40:28'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'GR 11/12/2020 21:40:28'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'GR 11/12/2020 21:40:28'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'GR 11/12/2020 21:40:28'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'GR 11/12/2020 21:40:28'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'GR 11/12/2020 21:40:38' prior: 50869865!
test20

	| portfolio account account2 account3 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	Transfer transfer: 100 from: account to: account3.
	Transfer transfer: 100 from: account2 to: account3.
	
	self assert: -200 equals: portfolio transferNet! !

!testRun: #PortfolioTest #test20 stamp: 'GR 11/12/2020 21:40:38'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'GR 11/12/2020 21:40:50' prior: 50869962!
test20

	| portfolio account account2 account3 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	portfolio := Portfolio with: account2.
	Transfer transfer: 100 from: account to: account3.
	Transfer transfer: 100 from: account2 to: account3.
	
	self assert: -200 equals: portfolio transferNet! !

!testRun: #PortfolioTest #test20 stamp: 'GR 11/12/2020 21:40:51'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/12/2020 21:41:30' prior: 50869859!
transferNet
	
	^ accounts sum: [ :anAccount | anAccount transferNet] ifEmpty: [0]! !

!testRun: #PortfolioTest #test20 stamp: 'GR 11/12/2020 21:41:31'!
FAILURE!

portfolio transferNet!
!PortfolioTest methodsFor: 'tests' stamp: 'GR 11/12/2020 21:42:45' prior: 50869979!
test20

	| portfolio account account2 account3 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	portfolio := Portfolio with: account2.
	Transfer transfer: 100 from: account to: account3.
	Transfer transfer: 50 from: account2 to: account3.
	
	self assert: -150 equals: portfolio transferNet! !

portfolio transferNet!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/12/2020 21:43:47' prior: 50869997!
transferNet
	
	| sum |
	
	sum := accounts sum: [ :anAccount | anAccount transferNet] ifEmpty: [0].
	
	^sum! !

!testRun: #PortfolioTest #test20 stamp: 'GR 11/12/2020 21:43:54'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/12/2020 21:44:52' prior: 50870022!
transferNet
	
	^ accounts inject: 0 into: [ :transferNet :anAccount | transferNet + anAccount transferNet].! !

!testRun: #PortfolioTest #test20 stamp: 'GR 11/12/2020 21:44:55'!
FAILURE!
!PortfolioTest methodsFor: 'tests' stamp: 'GR 11/12/2020 21:46:01' prior: 50870006!
test20

	| portfolio account account2 account3 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	portfolio add: account2.
	Transfer transfer: 100 from: account to: account3.
	Transfer transfer: 50 from: account2 to: account3.
	
	self assert: -150 equals: portfolio transferNet! !
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/12/2020 21:46:32' prior: 50870031!
transferNet
	
	^ accounts sum: [ :anAccount | anAccount transferNet] ifEmpty: [0].! !

!testRun: #PortfolioTest #test20 stamp: 'GR 11/12/2020 21:46:33'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'GR 11/12/2020 21:46:36'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'GR 11/12/2020 21:46:36'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'GR 11/12/2020 21:46:36'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'GR 11/12/2020 21:46:36'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'GR 11/12/2020 21:46:36'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'GR 11/12/2020 21:46:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'GR 11/12/2020 21:46:36'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'GR 11/12/2020 21:46:36'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'GR 11/12/2020 21:46:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'GR 11/12/2020 21:46:36'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'GR 11/12/2020 21:46:36'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'GR 11/12/2020 21:46:36'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'GR 11/12/2020 21:46:36'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'GR 11/12/2020 21:46:36'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'GR 11/12/2020 21:46:36'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'GR 11/12/2020 21:46:36'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'GR 11/12/2020 21:46:36'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'GR 11/12/2020 21:46:36'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'GR 11/12/2020 21:46:36'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'GR 11/12/2020 21:46:36'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'GR 11/12/2020 21:46:36'!
PASSED!

Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'GR 11/12/2020 21:47:06'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #AccountSummary as: #Summary stamp: 'GR 11/12/2020 21:47:14'!
Smalltalk renameClassNamed: #AccountSummary as: #Summary!

Report subclass: #Summary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Summary category: 'Portfolio-Solucion' stamp: 'GR 11/12/2020 21:47:20'!
Report subclass: #Summary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'GR 11/12/2020 21:47:27'!
Report subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Summary methodsFor: 'no messages' stamp: 'GR 11/12/2020 21:49:34'!
portfolioReport: aPortfolio

	! !
!Summary methodsFor: 'as yet unclassified' stamp: 'GR 11/12/2020 21:49:39'!
accountReport: aPortfolio

	! !
!TransferNet methodsFor: 'no messages' stamp: 'GR 11/12/2020 21:49:58'!
portfolioTransferNet: aPortfolio! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'GR 11/12/2020 21:50:08'!
accountTransferNet: anAccount! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'GR 11/12/2020 21:50:18' prior: 50870180!
portfolioTransferNet: anAccount! !
!Report methodsFor: 'no messages' stamp: 'GR 11/12/2020 21:50:35'!
accountReport: aPortfolio! !
!Report methodsFor: 'as yet unclassified' stamp: 'GR 11/12/2020 21:50:39' prior: 50870193!
accountReport: aPortfolio

	self subclassResponsibility.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'GR 11/12/2020 21:50:59' overrides: 50870197!
accountReport: anAccount! !

!methodRemoval: TransferNet #accountTransferNet: stamp: 'GR 11/12/2020 21:50:59'!
accountTransferNet: anAccount!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'GR 11/12/2020 21:51:06'!
portfolioReport: anAccount! !

!methodRemoval: TransferNet #portfolioTransferNet: stamp: 'GR 11/12/2020 21:51:06'!
portfolioTransferNet: anAccount!
!Report methodsFor: 'as yet unclassified' stamp: 'GR 11/12/2020 21:51:19'!
portfolioReport: aPortfolio

	self subclassResponsibility.! !
!Account methodsFor: 'nil' stamp: 'GR 11/12/2020 21:52:26'!
summary

	self subclassResponsibility.! !
!Account methodsFor: 'as yet unclassified' stamp: 'GR 11/12/2020 21:52:35'!
transferNet

	self subclassResponsibility.! !
!Summary methodsFor: 'nil' stamp: 'GR 11/12/2020 22:08:24' overrides: 16896425!
initialize

	! !

Report subclass: #Summary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Summary category: 'Portfolio-Solucion' stamp: 'GR 11/12/2020 22:10:29'!
Report subclass: #Summary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'report' stamp: 'GR 11/12/2020 22:12:23'!
giveReport: aReport

	aReport with: self.! !
!ReceptiveAccount methodsFor: 'report' stamp: 'GR 11/12/2020 22:12:40'!
giveReport: aReport

	aReport with: self.! !
!Account methodsFor: 'report' stamp: 'GR 11/12/2020 22:12:55'!
giveReport

	self subclassResponsibility.! !
!ReceptiveAccount methodsFor: 'report' stamp: 'GR 11/12/2020 22:17:22' prior: 50870246!
giveReport: aReport

	(aReport with: self) accountReport: self.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'GR 11/12/2020 22:18:02'!
accountReport! !
!Report methodsFor: 'as yet unclassified' stamp: 'GR 11/12/2020 22:18:02'!
accountReport

	self subclassResponsibility.! !
!Summary methodsFor: 'as yet unclassified' stamp: 'GR 11/12/2020 22:18:02' overrides: 50870263!
accountReport

	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'GR 11/12/2020 22:18:02' prior: 50870255!
giveReport: aReport

	(aReport with: self) accountReport.! !

!methodRemoval: TransferNet #accountReport: stamp: 'GR 11/12/2020 22:18:02'!
accountReport: anAccount!

!methodRemoval: Report #accountReport: stamp: 'GR 11/12/2020 22:18:02'!
accountReport: aPortfolio

	self subclassResponsibility.!

!methodRemoval: Summary #accountReport: stamp: 'GR 11/12/2020 22:18:02'!
accountReport: aPortfolio

	!
!Summary methodsFor: 'as yet unclassified' stamp: 'GR 11/12/2020 22:18:24'!
portfolioReport

	! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'GR 11/12/2020 22:18:24'!
portfolioReport! !
!Report methodsFor: 'as yet unclassified' stamp: 'GR 11/12/2020 22:18:24'!
portfolioReport

	self subclassResponsibility.! !

!methodRemoval: Summary #portfolioReport: stamp: 'GR 11/12/2020 22:18:24'!
portfolioReport: aPortfolio

	!

!methodRemoval: TransferNet #portfolioReport: stamp: 'GR 11/12/2020 22:18:24'!
portfolioReport: anAccount!

!methodRemoval: Report #portfolioReport: stamp: 'GR 11/12/2020 22:18:24'!
portfolioReport: aPortfolio

	self subclassResponsibility.!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'GR 11/12/2020 22:19:20' prior: 50870260 overrides: 50870263!
accountReport

	! !

Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'GR 11/12/2020 22:19:27'!
Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Summary methodsFor: 'as yet unclassified' stamp: 'GR 11/12/2020 22:20:09' prior: 50870268 overrides: 50870263!
accountReport

	! !
!Summary methodsFor: 'as yet unclassified' stamp: 'GR 11/12/2020 22:20:41' prior: 50870327 overrides: 50870263!
accountReport

	| records |
	
	records := account transactions collect: [ :aTransaction | aTransaction giveReport ].
	
	records add: 'Balance = ', self balance asString.
	
	^records! !
!Summary methodsFor: 'as yet unclassified' stamp: 'GR 11/12/2020 22:23:45' prior: 50870287 overrides: 50870294!
portfolioReport

	| report |
	
	report := account accounts collect: [ :anAccount | anAccount summary ].
	
	report add: 'Balance total = ', self balance asString.
	
	^report! !

!classRemoval: #Summary stamp: 'GR 11/12/2020 22:51:22'!
Report subclass: #Summary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferNet stamp: 'GR 11/12/2020 22:51:26'!
Report subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Report stamp: 'GR 11/12/2020 22:51:31'!
Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!methodRemoval: ReceptiveAccount #giveReport: stamp: 'GR 11/12/2020 22:51:36'!
giveReport: aReport

	(aReport with: self) accountReport.!

!methodRemoval: Portfolio #giveReport: stamp: 'GR 11/12/2020 22:51:41'!
giveReport: aReport

	aReport with: self.!

!methodRemoval: Account #giveReport stamp: 'GR 11/12/2020 22:51:49'!
giveReport

	self subclassResponsibility.!

----QUIT----(12 November 2020 22:51:54) CuisUniversity-4384.image priorSource: 17155564!

----STARTUP---- (14 November 2020 12:48:03) as /home/grosinov/linux64/CuisUniversity-4384.image!


TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportTest category: 'Portfolio-Solucion' stamp: 'GR 11/14/2020 15:00:10'!
TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #ReportTest as: #ReportsTest stamp: 'GR 11/14/2020 15:00:20'!
Smalltalk renameClassNamed: #ReportTest as: #ReportsTest!
!ReportsTest methodsFor: 'no messages' stamp: 'GR 11/14/2020 15:01:11'!
test13ReportWith0Balance

	| account register |
	
	account := ReceptiveAccount new.
	
	register := OrderedCollection with: 'Balance = 0'.
		
	self assert: register equals: account summary.
! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'GR 11/14/2020 15:01:29'!
test14ReportWithADeposit

	| account register |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	register := OrderedCollection with: 'Deposito de 100' with: 'Balance = 100'.
		
	self assert: register equals: account summary.
! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'GR 11/14/2020 15:01:41'!
test15ReportWithAWithdraw

	| account register |
	
	account := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	
	register := OrderedCollection with: 'Extraccion de 100' with: 'Balance = -100'.
		
	self assert: register equals: account summary.
! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'GR 11/14/2020 15:01:51'!
test16ReportWithATransfer

	| account anotherAccount entryRegister exitRegister |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer transfer: 100 from: account to: anotherAccount.
	
	entryRegister := OrderedCollection with: 'Entrada por transferencia de 100' with: 'Balance = 100'.
	exitRegister := OrderedCollection with: 'Salida por transferencia de 100' with: 'Balance = -100'.
		
	self assert: exitRegister equals: account summary.
	self assert: entryRegister equals: anotherAccount summary.
! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'GR 11/14/2020 15:02:00'!
test17TransferNetOfNnewAccountIsCero

	| account |
	
	account := ReceptiveAccount new.
		
	self assert: 0 equals: account transferNet.! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'GR 11/14/2020 15:02:12'!
test18ATransferModifiesTransferNet

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer transfer: 100 from: account to: anotherAccount.
		
	self assert: -100 equals: account transferNet.
	self assert: 100 equals: anotherAccount transferNet.
! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'GR 11/14/2020 15:02:22'!
test19DepositDoesNotModifyTransferNet

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Deposit register: 100 on: account.
		
	self assert: 0 equals: account transferNet.
	self assert: 0 equals: anotherAccount transferNet.! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'GR 11/14/2020 15:02:33'!
test20WithdrawDoesNotModifyTransferNet

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Withdraw register: 100 on: account.
		
	self assert: 0 equals: account transferNet.
	self assert: 0 equals: anotherAccount transferNet.
! !

!methodRemoval: ReceptiveAccountTest #test13ReportWith0Balance stamp: 'GR 11/14/2020 15:02:43'!
test13ReportWith0Balance

	| account register |
	
	account := ReceptiveAccount new.
	
	register := OrderedCollection with: 'Balance = 0'.
		
	self assert: register equals: account summary.
!

!methodRemoval: ReceptiveAccountTest #test14ReportWithADeposit stamp: 'GR 11/14/2020 15:02:45'!
test14ReportWithADeposit

	| account register |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	register := OrderedCollection with: 'Deposito de 100' with: 'Balance = 100'.
		
	self assert: register equals: account summary.
!

!methodRemoval: ReceptiveAccountTest #test15ReportWithAWithdraw stamp: 'GR 11/14/2020 15:02:46'!
test15ReportWithAWithdraw

	| account register |
	
	account := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	
	register := OrderedCollection with: 'Extraccion de 100' with: 'Balance = -100'.
		
	self assert: register equals: account summary.
!

!methodRemoval: ReceptiveAccountTest #test16ReportWithATransfer stamp: 'GR 11/14/2020 15:02:47'!
test16ReportWithATransfer

	| account anotherAccount entryRegister exitRegister |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer transfer: 100 from: account to: anotherAccount.
	
	entryRegister := OrderedCollection with: 'Entrada por transferencia de 100' with: 'Balance = 100'.
	exitRegister := OrderedCollection with: 'Salida por transferencia de 100' with: 'Balance = -100'.
		
	self assert: exitRegister equals: account summary.
	self assert: entryRegister equals: anotherAccount summary.
!

!methodRemoval: ReceptiveAccountTest #test17TransferNetOfNnewAccountIsCero stamp: 'GR 11/14/2020 15:02:48'!
test17TransferNetOfNnewAccountIsCero

	| account |
	
	account := ReceptiveAccount new.
		
	self assert: 0 equals: account transferNet.
!

!methodRemoval: ReceptiveAccountTest #test18ATransferModifiesTransferNet stamp: 'GR 11/14/2020 15:02:48'!
test18ATransferModifiesTransferNet

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer transfer: 100 from: account to: anotherAccount.
		
	self assert: -100 equals: account transferNet.
	self assert: 100 equals: anotherAccount transferNet.
!

!methodRemoval: ReceptiveAccountTest #test19DepositDoesNotModifyTransferNet stamp: 'GR 11/14/2020 15:02:49'!
test19DepositDoesNotModifyTransferNet

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Deposit register: 100 on: account.
		
	self assert: 0 equals: account transferNet.
	self assert: 0 equals: anotherAccount transferNet.
!

!methodRemoval: ReceptiveAccountTest #test20WithdrawDoesNotModifyTransferNet stamp: 'GR 11/14/2020 15:02:50'!
test20WithdrawDoesNotModifyTransferNet

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Withdraw register: 100 on: account.
		
	self assert: 0 equals: account transferNet.
	self assert: 0 equals: anotherAccount transferNet.
!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'GR 11/14/2020 15:03:02'!
test01ReportWith0Balance

	| account register |
	
	account := ReceptiveAccount new.
	
	register := OrderedCollection with: 'Balance = 0'.
		
	self assert: register equals: account summary.
! !

!methodRemoval: ReportsTest #test13ReportWith0Balance stamp: 'GR 11/14/2020 15:03:02'!
test13ReportWith0Balance

	| account register |
	
	account := ReceptiveAccount new.
	
	register := OrderedCollection with: 'Balance = 0'.
		
	self assert: register equals: account summary.
!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'GR 11/14/2020 15:03:09'!
test02ReportWithADeposit

	| account register |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	register := OrderedCollection with: 'Deposito de 100' with: 'Balance = 100'.
		
	self assert: register equals: account summary.
! !

!methodRemoval: ReportsTest #test14ReportWithADeposit stamp: 'GR 11/14/2020 15:03:09'!
test14ReportWithADeposit

	| account register |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	register := OrderedCollection with: 'Deposito de 100' with: 'Balance = 100'.
		
	self assert: register equals: account summary.
!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'GR 11/14/2020 15:03:15'!
test03ReportWithAWithdraw

	| account register |
	
	account := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	
	register := OrderedCollection with: 'Extraccion de 100' with: 'Balance = -100'.
		
	self assert: register equals: account summary.
! !

!methodRemoval: ReportsTest #test15ReportWithAWithdraw stamp: 'GR 11/14/2020 15:03:15'!
test15ReportWithAWithdraw

	| account register |
	
	account := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	
	register := OrderedCollection with: 'Extraccion de 100' with: 'Balance = -100'.
		
	self assert: register equals: account summary.
!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'GR 11/14/2020 15:03:22'!
test04ReportWithATransfer

	| account anotherAccount entryRegister exitRegister |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer transfer: 100 from: account to: anotherAccount.
	
	entryRegister := OrderedCollection with: 'Entrada por transferencia de 100' with: 'Balance = 100'.
	exitRegister := OrderedCollection with: 'Salida por transferencia de 100' with: 'Balance = -100'.
		
	self assert: exitRegister equals: account summary.
	self assert: entryRegister equals: anotherAccount summary.
! !

!methodRemoval: ReportsTest #test16ReportWithATransfer stamp: 'GR 11/14/2020 15:03:22'!
test16ReportWithATransfer

	| account anotherAccount entryRegister exitRegister |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer transfer: 100 from: account to: anotherAccount.
	
	entryRegister := OrderedCollection with: 'Entrada por transferencia de 100' with: 'Balance = 100'.
	exitRegister := OrderedCollection with: 'Salida por transferencia de 100' with: 'Balance = -100'.
		
	self assert: exitRegister equals: account summary.
	self assert: entryRegister equals: anotherAccount summary.
!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'GR 11/14/2020 15:03:29'!
test05TransferNetOfNnewAccountIsCero

	| account |
	
	account := ReceptiveAccount new.
		
	self assert: 0 equals: account transferNet.! !

!methodRemoval: ReportsTest #test17TransferNetOfNnewAccountIsCero stamp: 'GR 11/14/2020 15:03:29'!
test17TransferNetOfNnewAccountIsCero

	| account |
	
	account := ReceptiveAccount new.
		
	self assert: 0 equals: account transferNet.!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'GR 11/14/2020 15:03:41'!
test06ATransferModifiesTransferNet

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer transfer: 100 from: account to: anotherAccount.
		
	self assert: -100 equals: account transferNet.
	self assert: 100 equals: anotherAccount transferNet.
! !

!methodRemoval: ReportsTest #test18ATransferModifiesTransferNet stamp: 'GR 11/14/2020 15:03:41'!
test18ATransferModifiesTransferNet

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer transfer: 100 from: account to: anotherAccount.
		
	self assert: -100 equals: account transferNet.
	self assert: 100 equals: anotherAccount transferNet.
!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'GR 11/14/2020 15:03:53'!
test07DepositDoesNotModifyTransferNet

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Deposit register: 100 on: account.
		
	self assert: 0 equals: account transferNet.
	self assert: 0 equals: anotherAccount transferNet.! !

!methodRemoval: ReportsTest #test19DepositDoesNotModifyTransferNet stamp: 'GR 11/14/2020 15:03:53'!
test19DepositDoesNotModifyTransferNet

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Deposit register: 100 on: account.
		
	self assert: 0 equals: account transferNet.
	self assert: 0 equals: anotherAccount transferNet.!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'GR 11/14/2020 15:03:58'!
test08WithdrawDoesNotModifyTransferNet

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Withdraw register: 100 on: account.
		
	self assert: 0 equals: account transferNet.
	self assert: 0 equals: anotherAccount transferNet.
! !

!methodRemoval: ReportsTest #test20WithdrawDoesNotModifyTransferNet stamp: 'GR 11/14/2020 15:03:58'!
test20WithdrawDoesNotModifyTransferNet

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Withdraw register: 100 on: account.
		
	self assert: 0 equals: account transferNet.
	self assert: 0 equals: anotherAccount transferNet.
!

!testRun: #ReportsTest #test08WithdrawDoesNotModifyTransferNet stamp: 'GR 11/14/2020 15:04:00'!
PASSED!

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 15:04:00'!
PASSED!

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 15:04:00'!
PASSED!

!testRun: #ReportsTest #test03ReportWithAWithdraw stamp: 'GR 11/14/2020 15:04:00'!
PASSED!

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 15:04:00'!
PASSED!

!testRun: #ReportsTest #test05TransferNetOfNnewAccountIsCero stamp: 'GR 11/14/2020 15:04:00'!
PASSED!

!testRun: #ReportsTest #test06ATransferModifiesTransferNet stamp: 'GR 11/14/2020 15:04:00'!
PASSED!

!testRun: #ReportsTest #test07DepositDoesNotModifyTransferNet stamp: 'GR 11/14/2020 15:04:00'!
PASSED!

!testRun: #ReportsTest #test08WithdrawDoesNotModifyTransferNet stamp: 'GR 11/14/2020 15:04:00'!
PASSED!
!ReceptiveAccount methodsFor: 'report' stamp: 'GR 11/14/2020 15:11:37' prior: 50869429 overrides: 50870220!
summary
	
	| report |
	
	report := transactions collect: [ :aTransaction | aTransaction giveReport ].
	
	report add: 'Balance = ', self balance asString.
	
	^report! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'GR 11/14/2020 15:29:54'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'GR 11/14/2020 15:29:45' prior: 50870593!
test01ReportWith0Balance

	| account register |
	
	account := ReceptiveAccount new.
	
	register := OrderedCollection with: 'Balance = 0'.
		
	self assert: register equals: (AccountSummary for: account) summary .
! !

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 15:31:56'!
ERROR!
!AccountSummary class methodsFor: 'instance creation' stamp: 'GR 11/14/2020 15:32:32'!
for: aReceptiveAccount 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aReceptiveAccount ! !
!AccountSummary class methodsFor: 'instance creation' stamp: 'GR 11/14/2020 15:32:50' prior: 50870839!
for: anAccount 
	
	^self new initializeFor: anAccount ! !

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 15:32:52'!
ERROR!
!AccountSummary methodsFor: 'initialization' stamp: 'GR 11/14/2020 15:33:02'!
initializeFor: anAccount 
	self shouldBeImplemented.
	account := anAccount.! !

Object subclass: #AccountSummary
	instanceVariableNames: 'account summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'GR 11/14/2020 15:34:10'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'initialization' stamp: 'GR 11/14/2020 15:34:43' prior: 50870856!
initializeFor: anAccount 
	
	account := anAccount.
	summary  := OrderedCollection with: 'Balance = ', account balance asString! !

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 15:34:56'!
ERROR!
!AccountSummary methodsFor: 'accessing' stamp: 'GR 11/14/2020 15:35:17'!
summary
	self shouldBeImplemented.
	^summary! !
!AccountSummary methodsFor: 'accessing' stamp: 'GR 11/14/2020 15:35:22' prior: 50870885!
summary
	
	^summary! !

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 15:35:24'!
PASSED!

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 15:35:24'!
PASSED!

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 15:35:24'!
PASSED!

!testRun: #ReportsTest #test03ReportWithAWithdraw stamp: 'GR 11/14/2020 15:35:24'!
PASSED!

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 15:35:24'!
PASSED!

!testRun: #ReportsTest #test05TransferNetOfNnewAccountIsCero stamp: 'GR 11/14/2020 15:35:24'!
PASSED!

!testRun: #ReportsTest #test06ATransferModifiesTransferNet stamp: 'GR 11/14/2020 15:35:24'!
PASSED!

!testRun: #ReportsTest #test07DepositDoesNotModifyTransferNet stamp: 'GR 11/14/2020 15:35:24'!
PASSED!

!testRun: #ReportsTest #test08WithdrawDoesNotModifyTransferNet stamp: 'GR 11/14/2020 15:35:24'!
PASSED!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'GR 11/14/2020 15:35:46' prior: 50870611!
test02ReportWithADeposit

	| account register |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	register := OrderedCollection with: 'Deposito de 100' with: 'Balance = 100'.
		
	self assert: register equals: (AccountSummary for: account) summary.
! !

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 15:35:51'!
FAILURE!

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 15:35:51'!
FAILURE!
!AccountSummary methodsFor: 'initialization' stamp: 'GR 11/14/2020 15:37:53' prior: 50870875!
initializeFor: anAccount 
	
	account := anAccount.
	summary  := self accountReport! !

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 15:37:55'!
ERROR!
!AccountSummary methodsFor: 'operations' stamp: 'GR 11/14/2020 15:38:06'!
accountReport
	self shouldBeImplemented.! !
!AccountSummary methodsFor: 'operations' stamp: 'GR 11/14/2020 15:38:29' prior: 50870947!
accountReport
	
	| report |
	
	report := account transactions collect: [ :aTransaction | aTransaction giveReport ].
	
	report add: 'Balance = ', self balance asString.
	
	^report! !

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 15:38:32'!
ERROR!
!AccountSummary methodsFor: 'operations' stamp: 'GR 11/14/2020 15:38:44' prior: 50870952!
accountReport
	
	| report |
	
	report := account transactions collect: [ :aTransaction | aTransaction giveReport ].
	
	report add: 'Balance = ', account balance asString.
	
	^report! !

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 15:38:44'!
PASSED!

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 15:38:48'!
PASSED!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'GR 11/14/2020 15:38:58' prior: 50870633!
test03ReportWithAWithdraw

	| account register |
	
	account := ReceptiveAccount new.
	Withdraw register: 100 on: account.
	
	register := OrderedCollection with: 'Extraccion de 100' with: 'Balance = -100'.
		
	self assert: register equals: (AccountSummary for: account) summary.
! !

!testRun: #ReportsTest #test03ReportWithAWithdraw stamp: 'GR 11/14/2020 15:38:59'!
PASSED!

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 15:38:59'!
PASSED!

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 15:38:59'!
PASSED!

!testRun: #ReportsTest #test03ReportWithAWithdraw stamp: 'GR 11/14/2020 15:38:59'!
PASSED!

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 15:38:59'!
PASSED!

!testRun: #ReportsTest #test05TransferNetOfNnewAccountIsCero stamp: 'GR 11/14/2020 15:38:59'!
PASSED!

!testRun: #ReportsTest #test06ATransferModifiesTransferNet stamp: 'GR 11/14/2020 15:38:59'!
PASSED!

!testRun: #ReportsTest #test07DepositDoesNotModifyTransferNet stamp: 'GR 11/14/2020 15:38:59'!
PASSED!

!testRun: #ReportsTest #test08WithdrawDoesNotModifyTransferNet stamp: 'GR 11/14/2020 15:38:59'!
PASSED!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'GR 11/14/2020 15:39:09' prior: 50870655!
test04ReportWithATransfer

	| account anotherAccount entryRegister exitRegister |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer transfer: 100 from: account to: anotherAccount.
	
	entryRegister := OrderedCollection with: 'Entrada por transferencia de 100' with: 'Balance = 100'.
	exitRegister := OrderedCollection with: 'Salida por transferencia de 100' with: 'Balance = -100'.
		
	self assert: exitRegister equals: (AccountSummary for: account) summary.
	self assert: entryRegister equals: (AccountSummary for: anotherAccount ) summary.
! !

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 15:39:09'!
PASSED!

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 15:39:09'!
PASSED!

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 15:39:09'!
PASSED!

!testRun: #ReportsTest #test03ReportWithAWithdraw stamp: 'GR 11/14/2020 15:39:09'!
PASSED!

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 15:39:10'!
PASSED!

!testRun: #ReportsTest #test05TransferNetOfNnewAccountIsCero stamp: 'GR 11/14/2020 15:39:10'!
PASSED!

!testRun: #ReportsTest #test06ATransferModifiesTransferNet stamp: 'GR 11/14/2020 15:39:10'!
PASSED!

!testRun: #ReportsTest #test07DepositDoesNotModifyTransferNet stamp: 'GR 11/14/2020 15:39:10'!
PASSED!

!testRun: #ReportsTest #test08WithdrawDoesNotModifyTransferNet stamp: 'GR 11/14/2020 15:39:10'!
PASSED!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'GR 11/14/2020 15:40:23'!
ProtoObject subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'GR 11/14/2020 15:39:54' prior: 50870694!
test05TransferNetOfNnewAccountIsCero

	| account |
	
	account := ReceptiveAccount new.
		
	self assert: 0 equals: (TransferNet for: account) value.! !

Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'GR 11/14/2020 15:40:36'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'GR 11/14/2020 15:40:39'!
Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #AccountSummary
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'GR 11/14/2020 15:40:49'!
Report subclass: #AccountSummary
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'GR 11/14/2020 15:40:54'!
Report subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!methodRemoval: AccountSummary class #for: stamp: 'GR 11/14/2020 15:41:11'!
for: anAccount 
	
	^self new initializeFor: anAccount !
!Report class methodsFor: 'no messages' stamp: 'GR 11/14/2020 15:41:16'!
for: anAccount 
	
	^self new initializeFor: anAccount ! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'GR 11/14/2020 15:42:12' prior: 50870709!
test06ATransferModifiesTransferNet

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Transfer transfer: 100 from: account to: anotherAccount.
		
	self assert: -100 equals: (TransferNet for: account) value.
	self assert: 100 equals: (TransferNet for: anotherAccount ) value.
! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'GR 11/14/2020 15:42:22' prior: 50870734!
test07DepositDoesNotModifyTransferNet

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Deposit register: 100 on: account.
		
	self assert: 0 equals: (TransferNet for: account) value.
	self assert: 0 equals: (TransferNet for: anotherAccount ) value.! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'GR 11/14/2020 15:42:28' prior: 50870758!
test08WithdrawDoesNotModifyTransferNet

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Withdraw register: 100 on: account.
		
	self assert: 0 equals: (TransferNet for: account) value.
	self assert: 0 equals: (TransferNet for: account) value.
! !
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'GR 11/14/2020 15:42:32' prior: 50871165!
test08WithdrawDoesNotModifyTransferNet

	| account anotherAccount |
	
	account := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.
	Withdraw register: 100 on: account.
		
	self assert: 0 equals: (TransferNet for: account) value.
	self assert: 0 equals: (TransferNet for: anotherAccount ) value.
! !

!testRun: #ReportsTest #test05TransferNetOfNnewAccountIsCero stamp: 'GR 11/14/2020 15:42:35'!
ERROR!

!testRun: #ReportsTest #test05TransferNetOfNnewAccountIsCero stamp: 'GR 11/14/2020 15:42:35'!
ERROR!
!TransferNet methodsFor: 'initialization' stamp: 'GR 11/14/2020 15:42:49'!
initializeFor: anAccount 
	self shouldBeImplemented.
	account := anAccount.! !

Report subclass: #TransferNet
	instanceVariableNames: ' value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'GR 11/14/2020 15:43:06'!
Report subclass: #TransferNet
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'initialization' stamp: 'GR 11/14/2020 15:43:18' prior: 50871197!
initializeFor: anAccount 
	
	account := anAccount.
	value := 0.! !

!testRun: #ReportsTest #test05TransferNetOfNnewAccountIsCero stamp: 'GR 11/14/2020 15:43:19'!
FAILURE!
!TransferNet methodsFor: 'initialization' stamp: 'GR 11/14/2020 15:44:18' prior: 50871215!
initializeFor: anAccount 
	
	account := anAccount.
	value := self accountTransferNet.! !

!testRun: #ReportsTest #test05TransferNetOfNnewAccountIsCero stamp: 'GR 11/14/2020 15:44:21'!
ERROR!
!TransferNet methodsFor: 'operations' stamp: 'GR 11/14/2020 15:44:27'!
accountTransferNet
	self shouldBeImplemented.! !
!TransferNet methodsFor: 'operations' stamp: 'GR 11/14/2020 15:44:50' prior: 50871233!
accountTransferNet
	
	^ account transactions inject: 0 into: [ :transferNet :aTransaction | aTransaction transferNet: transferNet].! !

!testRun: #ReportsTest #test05TransferNetOfNnewAccountIsCero stamp: 'GR 11/14/2020 15:44:51'!
FAILURE!
!TransferNet methodsFor: 'nil' stamp: 'GR 11/14/2020 15:45:41' overrides: 16881508!
value

	^ value ! !

!testRun: #ReportsTest #test05TransferNetOfNnewAccountIsCero stamp: 'GR 11/14/2020 15:45:50'!
PASSED!

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 15:45:50'!
PASSED!

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 15:45:50'!
PASSED!

!testRun: #ReportsTest #test03ReportWithAWithdraw stamp: 'GR 11/14/2020 15:45:50'!
PASSED!

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 15:45:50'!
PASSED!

!testRun: #ReportsTest #test05TransferNetOfNnewAccountIsCero stamp: 'GR 11/14/2020 15:45:50'!
PASSED!

!testRun: #ReportsTest #test06ATransferModifiesTransferNet stamp: 'GR 11/14/2020 15:45:50'!
PASSED!

!testRun: #ReportsTest #test07DepositDoesNotModifyTransferNet stamp: 'GR 11/14/2020 15:45:50'!
PASSED!

!testRun: #ReportsTest #test08WithdrawDoesNotModifyTransferNet stamp: 'GR 11/14/2020 15:45:50'!
PASSED!
!ReportsTest methodsFor: 'as yet unclassified' stamp: 'GR 11/14/2020 15:46:25'!
test05TransferNetOfNewAccountIsCero

	| account |
	
	account := ReceptiveAccount new.
		
	self assert: 0 equals: (TransferNet for: account) value.! !

!methodRemoval: ReportsTest #test05TransferNetOfNnewAccountIsCero stamp: 'GR 11/14/2020 15:46:25'!
test05TransferNetOfNnewAccountIsCero

	| account |
	
	account := ReceptiveAccount new.
		
	self assert: 0 equals: (TransferNet for: account) value.!
!EntryTransfer methodsFor: 'report' stamp: 'GR 11/14/2020 15:53:59'!
giveReport: aReport
	
	^ 'Entrada por transferencia de ', transfer value asString.! !
!ExitTransfer methodsFor: 'report' stamp: 'GR 11/14/2020 15:53:59'!
giveReport: aReport
	
	^ 'Salida por transferencia de ',transfer value asString! !
!Withdraw methodsFor: 'report' stamp: 'GR 11/14/2020 15:53:59'!
giveReport: aReport
	
	^ ('Extraccion de ',self value asString).! !
!Deposit methodsFor: 'report' stamp: 'GR 11/14/2020 15:53:59'!
giveReport: aReport
	
	^ ('Deposito de ',value asString)! !
!TransferFeet methodsFor: 'report' stamp: 'GR 11/14/2020 15:53:59'!
giveReport: aReport

	self subclassResponsibility.! !
!AccountTransaction methodsFor: 'report' stamp: 'GR 11/14/2020 15:53:59'!
giveReport: aReport

	self subclassResponsibility.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'GR 11/14/2020 15:53:59' prior: 50870964!
accountReport
	
	| report |
	
	report := account transactions collect: [ :aTransaction | aTransaction giveReport: self ].
	
	report add: 'Balance = ', account balance asString.
	
	^report! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'GR 11/14/2020 15:53:59' prior: 50870810 overrides: 50870220!
summary
	
	| report |
	
	report := transactions collect: [ :aTransaction | aTransaction giveReport: self ].
	
	report add: 'Balance = ', self balance asString.
	
	^report! !

!methodRemoval: EntryTransfer #giveReport stamp: 'GR 11/14/2020 15:53:59'!
giveReport
	
	^ 'Entrada por transferencia de ', transfer value asString.!

!methodRemoval: ExitTransfer #giveReport stamp: 'GR 11/14/2020 15:53:59'!
giveReport
	
	^ 'Salida por transferencia de ',transfer value asString!

!methodRemoval: Withdraw #giveReport stamp: 'GR 11/14/2020 15:53:59'!
giveReport
	
	^ ('Extraccion de ',self value asString).!

!methodRemoval: Deposit #giveReport stamp: 'GR 11/14/2020 15:53:59'!
giveReport
	
	^ ('Deposito de ',value asString)!

!methodRemoval: TransferFeet #giveReport stamp: 'GR 11/14/2020 15:53:59'!
giveReport

	self subclassResponsibility.!

!methodRemoval: AccountTransaction #giveReport stamp: 'GR 11/14/2020 15:53:59'!
giveReport

	self subclassResponsibility.!
!Deposit methodsFor: 'report' stamp: 'GR 11/14/2020 15:55:48' prior: 50871310 overrides: 50871318!
giveReport: aReport
	
	^ aReport depositReport: self! !
!AccountSummary methodsFor: 'nil' stamp: 'GR 11/14/2020 15:56:06'!
depositReport: aDeposit

	^ ('Deposito de ',aDeposit value asString)! !

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 15:56:33'!
PASSED!
!EntryTransfer methodsFor: 'report' stamp: 'GR 11/14/2020 15:56:54' prior: 50871295 overrides: 50871314!
giveReport: aReport
	
	^ aReport entryTransferReport: self.! !
!AccountSummary methodsFor: 'operations -- private' stamp: 'GR 11/14/2020 15:57:41'!
entryTransferReport: anEntryTransfer

	^ 'Entrada por transferencia de ', anEntryTransfer value asString.! !
!AccountSummary methodsFor: 'operations -- private' stamp: 'GR 11/14/2020 15:58:19'!
exitTransferReport: anExitTransfer

	^ 'Salida por transferencia de ', anExitTransfer value asString.! !
!AccountSummary methodsFor: 'operations -- private' stamp: 'GR 11/14/2020 15:58:49'!
withdrawReport: aWithdraw

	^ ('Extraccion de ',aWithdraw value asString)! !
!ExitTransfer methodsFor: 'report' stamp: 'GR 11/14/2020 15:59:11' prior: 50871300 overrides: 50871314!
giveReport: aReport
	
	^ aReport exitTransferReport: self.! !
!Withdraw methodsFor: 'report' stamp: 'GR 11/14/2020 15:59:24' prior: 50871305 overrides: 50871318!
giveReport: aReport
	
	^ aReport withdrawReport: self.! !

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 15:59:30'!
PASSED!

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 15:59:30'!
PASSED!

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 15:59:30'!
PASSED!

!testRun: #ReportsTest #test03ReportWithAWithdraw stamp: 'GR 11/14/2020 15:59:30'!
PASSED!

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 15:59:30'!
ERROR!

!testRun: #ReportsTest #test05TransferNetOfNewAccountIsCero stamp: 'GR 11/14/2020 15:59:30'!
PASSED!

!testRun: #ReportsTest #test06ATransferModifiesTransferNet stamp: 'GR 11/14/2020 15:59:30'!
PASSED!

!testRun: #ReportsTest #test07DepositDoesNotModifyTransferNet stamp: 'GR 11/14/2020 15:59:30'!
PASSED!

!testRun: #ReportsTest #test08WithdrawDoesNotModifyTransferNet stamp: 'GR 11/14/2020 15:59:30'!
PASSED!

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 15:59:30'!
ERROR!

!testRun: #ReportsTest #test03ReportWithAWithdraw stamp: 'GR 11/14/2020 16:00:07'!
PASSED!

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 16:00:07'!
PASSED!

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 16:00:07'!
PASSED!

!testRun: #ReportsTest #test03ReportWithAWithdraw stamp: 'GR 11/14/2020 16:00:07'!
PASSED!

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 16:00:07'!
ERROR!

!testRun: #ReportsTest #test05TransferNetOfNewAccountIsCero stamp: 'GR 11/14/2020 16:00:07'!
PASSED!

!testRun: #ReportsTest #test06ATransferModifiesTransferNet stamp: 'GR 11/14/2020 16:00:07'!
PASSED!

!testRun: #ReportsTest #test07DepositDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:00:07'!
PASSED!

!testRun: #ReportsTest #test08WithdrawDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:00:07'!
PASSED!

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 16:00:07'!
ERROR!
!ExitTransfer methodsFor: 'accessing' stamp: 'GR 11/14/2020 16:00:14' overrides: 50868604!
value
	self shouldBeImplemented.! !
!ExitTransfer methodsFor: 'accessing' stamp: 'GR 11/14/2020 16:00:19' prior: 50871475 overrides: 50868604!
value
	
	^ transfer value! !

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 16:00:21'!
ERROR!
!EntryTransfer methodsFor: 'accessing' stamp: 'GR 11/14/2020 16:00:26' overrides: 50868604!
value
	self shouldBeImplemented.! !
!EntryTransfer methodsFor: 'accessing' stamp: 'GR 11/14/2020 16:00:30' prior: 50871487 overrides: 50868604!
value
	
	^ transfer value! !

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 16:00:31'!
PASSED!

!testRun: #ReportsTest #test03ReportWithAWithdraw stamp: 'GR 11/14/2020 16:00:33'!
PASSED!

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 16:00:33'!
PASSED!

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 16:00:33'!
PASSED!

!testRun: #ReportsTest #test03ReportWithAWithdraw stamp: 'GR 11/14/2020 16:00:33'!
PASSED!

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 16:00:33'!
PASSED!

!testRun: #ReportsTest #test05TransferNetOfNewAccountIsCero stamp: 'GR 11/14/2020 16:00:33'!
PASSED!

!testRun: #ReportsTest #test06ATransferModifiesTransferNet stamp: 'GR 11/14/2020 16:00:33'!
PASSED!

!testRun: #ReportsTest #test07DepositDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:00:33'!
PASSED!

!testRun: #ReportsTest #test08WithdrawDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:00:33'!
PASSED!

!methodRemoval: EntryTransfer #value stamp: 'GR 11/14/2020 16:02:13'!
value
	
	^ transfer value!

!methodRemoval: ExitTransfer #value stamp: 'GR 11/14/2020 16:02:18'!
value
	
	^ transfer value!
!TransferFeet methodsFor: 'nil' stamp: 'GR 11/14/2020 16:02:24' overrides: 50868604!
value
	
	^ transfer value! !

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 16:02:35'!
PASSED!

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 16:02:35'!
PASSED!

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 16:02:35'!
PASSED!

!testRun: #ReportsTest #test03ReportWithAWithdraw stamp: 'GR 11/14/2020 16:02:35'!
PASSED!

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 16:02:35'!
PASSED!

!testRun: #ReportsTest #test05TransferNetOfNewAccountIsCero stamp: 'GR 11/14/2020 16:02:35'!
PASSED!

!testRun: #ReportsTest #test06ATransferModifiesTransferNet stamp: 'GR 11/14/2020 16:02:35'!
PASSED!

!testRun: #ReportsTest #test07DepositDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:02:35'!
PASSED!

!testRun: #ReportsTest #test08WithdrawDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:02:35'!
PASSED!
!ReportsTest methodsFor: 'tests' stamp: 'GR 11/14/2020 16:03:19'!
test16

	| portfolio account summary |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	summary := OrderedCollection with: (OrderedCollection with: 'Balance = 0') with: 'Balance total = 0'.
	
	self assert: summary equals: portfolio summary! !
!ReportsTest methodsFor: 'tests' stamp: 'GR 11/14/2020 16:03:30'!
test17

	| portfolio account summary accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	accountSummary := OrderedCollection with: 'Deposito de 100'  with: 'Balance = 100'.
	summary := OrderedCollection with: accountSummary with: 'Balance total = 100'.
	
	self assert: summary equals: portfolio summary! !
!ReportsTest methodsFor: 'tests' stamp: 'GR 11/14/2020 16:03:45'!
test18

	| portfolio account |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self assert: 0 equals: portfolio transferNet! !
!ReportsTest methodsFor: 'tests' stamp: 'GR 11/14/2020 16:03:55'!
test19

	| portfolio account account2 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	Transfer transfer: 100 from: account to: account2.
	
	self assert: -100 equals: portfolio transferNet! !
!ReportsTest methodsFor: 'tests' stamp: 'GR 11/14/2020 16:04:05'!
test20

	| portfolio account account2 account3 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	portfolio add: account2.
	Transfer transfer: 100 from: account to: account3.
	Transfer transfer: 50 from: account2 to: account3.
	
	self assert: -150 equals: portfolio transferNet! !

!methodRemoval: PortfolioTest #test16 stamp: 'GR 11/14/2020 16:04:13'!
test16

	| portfolio account summary |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	summary := OrderedCollection with: (OrderedCollection with: 'Balance = 0') with: 'Balance total = 0'.
	
	self assert: summary equals: portfolio summary!

!methodRemoval: PortfolioTest #test17 stamp: 'GR 11/14/2020 16:04:14'!
test17

	| portfolio account summary accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	accountSummary := OrderedCollection with: 'Deposito de 100'  with: 'Balance = 100'.
	summary := OrderedCollection with: accountSummary with: 'Balance total = 100'.
	
	self assert: summary equals: portfolio summary!

!methodRemoval: PortfolioTest #test18 stamp: 'GR 11/14/2020 16:04:14'!
test18

	| portfolio account |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self assert: 0 equals: portfolio transferNet!

!methodRemoval: PortfolioTest #test19 stamp: 'GR 11/14/2020 16:04:15'!
test19

	| portfolio account account2 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	Transfer transfer: 100 from: account to: account2.
	
	self assert: -100 equals: portfolio transferNet!

!methodRemoval: PortfolioTest #test20 stamp: 'GR 11/14/2020 16:04:17'!
test20

	| portfolio account account2 account3 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	portfolio add: account2.
	Transfer transfer: 100 from: account to: account3.
	Transfer transfer: 50 from: account2 to: account3.
	
	self assert: -150 equals: portfolio transferNet!
!ReportsTest methodsFor: 'tests' stamp: 'GR 11/14/2020 16:04:44' prior: 50871563!
test16

	| portfolio account summary |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	summary := OrderedCollection with: (OrderedCollection with: 'Balance = 0') with: 'Balance total = 0'.
	
	self assert: summary equals: (AccountSummary for: portfolio) summary! !

!testRun: #ReportsTest #test16 stamp: 'GR 11/14/2020 16:04:45'!
FAILURE!

!testRun: #ReportsTest #test16 stamp: 'GR 11/14/2020 16:04:45'!
FAILURE!
!AccountSummary methodsFor: 'initialization' stamp: 'GR 11/14/2020 16:05:43' prior: 50870939!
initializeFor: anAccount 
	
	account := anAccount.
	summary  := account reportMake: self! !

!testRun: #ReportsTest #test16 stamp: 'GR 11/14/2020 16:05:46'!
ERROR!
!Portfolio methodsFor: 'operations' stamp: 'GR 11/14/2020 16:06:01'!
reportMake: anAccountSummary 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'operations' stamp: 'GR 11/14/2020 16:07:21' prior: 50871703!
reportMake: aReport

	^ aReport portfolioReport: self
	
	! !

!testRun: #ReportsTest #test16 stamp: 'GR 11/14/2020 16:07:22'!
ERROR!
!AccountSummary methodsFor: 'operations' stamp: 'GR 11/14/2020 16:07:38'!
portfolioReport: aPortfolio 
	self shouldBeImplemented.! !
!AccountSummary methodsFor: 'operations' stamp: 'GR 11/14/2020 16:08:44' prior: 50871715!
portfolioReport: aPortfolio 
	
	| report |
	
	report := account accounts collect: [ :anAccount | anAccount summary ].
	
	report add: 'Balance total = ', self balance asString.
	
	^report! !
!AccountSummary methodsFor: 'operations' stamp: 'GR 11/14/2020 16:09:25' prior: 50871720!
portfolioReport: aPortfolio 
	
	| report |
	
	report := account accounts collect: [ :anAccount | anAccount makeReport: self ].
	
	report add: 'Balance total = ', self balance asString.
	
	^report! !

!testRun: #ReportsTest #test16 stamp: 'GR 11/14/2020 16:09:27'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/14/2020 16:09:32'!
accounts
	self shouldBeImplemented.
	^accounts! !
!Portfolio methodsFor: 'accessing' stamp: 'GR 11/14/2020 16:09:33' prior: 50871740!
accounts
	
	^accounts! !

!testRun: #ReportsTest #test16 stamp: 'GR 11/14/2020 16:09:35'!
ERROR!
!ReceptiveAccount methodsFor: 'operations' stamp: 'GR 11/14/2020 16:09:44'!
makeReport: anAccountSummary 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'operations' stamp: 'GR 11/14/2020 16:10:20' prior: 50871751!
makeReport: aReport

	^ aReport accountReport: self
	
	! !

!testRun: #ReportsTest #test16 stamp: 'GR 11/14/2020 16:10:22'!
ERROR!
!AccountSummary methodsFor: 'operations' stamp: 'GR 11/14/2020 16:10:42'!
accountReport: aReceptiveAccount
	
	| report |
	
	report := account transactions collect: [ :aTransaction | aTransaction giveReport: self ].
	
	report add: 'Balance = ', account balance asString.
	
	^report! !

!methodRemoval: AccountSummary #accountReport stamp: 'GR 11/14/2020 16:10:46'!
accountReport
	
	| report |
	
	report := account transactions collect: [ :aTransaction | aTransaction giveReport: self ].
	
	report add: 'Balance = ', account balance asString.
	
	^report!

!testRun: #ReportsTest #test16 stamp: 'GR 11/14/2020 16:10:52'!
ERROR!
!AccountSummary methodsFor: 'operations' stamp: 'GR 11/14/2020 16:11:05' prior: 50871729!
portfolioReport: aPortfolio 
	
	| report |
	
	report := account accounts collect: [ :anAccount | anAccount makeReport: self ].
	
	report add: 'Balance total = ', account balance asString.
	
	^report! !

!testRun: #ReportsTest #test16 stamp: 'GR 11/14/2020 16:11:31'!
PASSED!

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 16:11:31'!
ERROR!

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 16:11:31'!
ERROR!

!testRun: #ReportsTest #test03ReportWithAWithdraw stamp: 'GR 11/14/2020 16:11:31'!
ERROR!

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 16:11:31'!
ERROR!

!testRun: #ReportsTest #test05TransferNetOfNewAccountIsCero stamp: 'GR 11/14/2020 16:11:31'!
PASSED!

!testRun: #ReportsTest #test06ATransferModifiesTransferNet stamp: 'GR 11/14/2020 16:11:31'!
PASSED!

!testRun: #ReportsTest #test07DepositDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:11:31'!
PASSED!

!testRun: #ReportsTest #test08WithdrawDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:11:31'!
PASSED!

!testRun: #ReportsTest #test16 stamp: 'GR 11/14/2020 16:11:31'!
PASSED!

!testRun: #ReportsTest #test17 stamp: 'GR 11/14/2020 16:11:31'!
ERROR!

!testRun: #ReportsTest #test18 stamp: 'GR 11/14/2020 16:11:31'!
PASSED!

!testRun: #ReportsTest #test19 stamp: 'GR 11/14/2020 16:11:31'!
PASSED!

!testRun: #ReportsTest #test20 stamp: 'GR 11/14/2020 16:11:31'!
PASSED!

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 16:11:38'!
ERROR!
!AccountSummary methodsFor: 'initialization' stamp: 'GR 11/14/2020 16:12:13' prior: 50871695!
initializeFor: anAccount 
	
	account := anAccount.
	summary  := account makeReport: self! !

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 16:12:15'!
PASSED!

!testRun: #ReportsTest #test03ReportWithAWithdraw stamp: 'GR 11/14/2020 16:12:19'!
PASSED!

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 16:12:19'!
PASSED!

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 16:12:19'!
PASSED!

!testRun: #ReportsTest #test03ReportWithAWithdraw stamp: 'GR 11/14/2020 16:12:19'!
PASSED!

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 16:12:19'!
PASSED!

!testRun: #ReportsTest #test05TransferNetOfNewAccountIsCero stamp: 'GR 11/14/2020 16:12:19'!
PASSED!

!testRun: #ReportsTest #test06ATransferModifiesTransferNet stamp: 'GR 11/14/2020 16:12:19'!
PASSED!

!testRun: #ReportsTest #test07DepositDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:12:19'!
PASSED!

!testRun: #ReportsTest #test08WithdrawDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:12:19'!
PASSED!

!testRun: #ReportsTest #test16 stamp: 'GR 11/14/2020 16:12:19'!
ERROR!

!testRun: #ReportsTest #test17 stamp: 'GR 11/14/2020 16:12:19'!
ERROR!

!testRun: #ReportsTest #test18 stamp: 'GR 11/14/2020 16:12:19'!
PASSED!

!testRun: #ReportsTest #test19 stamp: 'GR 11/14/2020 16:12:19'!
PASSED!

!testRun: #ReportsTest #test20 stamp: 'GR 11/14/2020 16:12:19'!
PASSED!

!testRun: #ReportsTest #test16 stamp: 'GR 11/14/2020 16:12:25'!
ERROR!
!Portfolio methodsFor: 'operations' stamp: 'GR 11/14/2020 16:12:44'!
makeReport: aReport

	^ aReport portfolioReport: self
	
	! !

!methodRemoval: Portfolio #reportMake: stamp: 'GR 11/14/2020 16:12:44'!
reportMake: aReport

	^ aReport portfolioReport: self
	
	!

!testRun: #ReportsTest #test07DepositDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:12:49'!
PASSED!

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 16:12:49'!
PASSED!

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 16:12:49'!
PASSED!

!testRun: #ReportsTest #test03ReportWithAWithdraw stamp: 'GR 11/14/2020 16:12:49'!
PASSED!

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 16:12:49'!
PASSED!

!testRun: #ReportsTest #test05TransferNetOfNewAccountIsCero stamp: 'GR 11/14/2020 16:12:49'!
PASSED!

!testRun: #ReportsTest #test06ATransferModifiesTransferNet stamp: 'GR 11/14/2020 16:12:49'!
PASSED!

!testRun: #ReportsTest #test07DepositDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:12:49'!
PASSED!

!testRun: #ReportsTest #test08WithdrawDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:12:49'!
PASSED!

!testRun: #ReportsTest #test16 stamp: 'GR 11/14/2020 16:12:49'!
PASSED!

!testRun: #ReportsTest #test17 stamp: 'GR 11/14/2020 16:12:49'!
ERROR!

!testRun: #ReportsTest #test18 stamp: 'GR 11/14/2020 16:12:49'!
PASSED!

!testRun: #ReportsTest #test19 stamp: 'GR 11/14/2020 16:12:49'!
PASSED!

!testRun: #ReportsTest #test20 stamp: 'GR 11/14/2020 16:12:49'!
PASSED!

!testRun: #ReportsTest #test17 stamp: 'GR 11/14/2020 16:12:49'!
ERROR!
!ReportsTest methodsFor: 'tests' stamp: 'GR 11/14/2020 16:14:41' prior: 50871574!
test17

	| portfolio account summary accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	accountSummary := OrderedCollection with: 'Deposito de 100'  with: 'Balance = 100'.
	summary := OrderedCollection with: accountSummary with: 'Balance total = 100'.
	
	self assert: summary equals: (AccountSummary for: portfolio) summary! !

!testRun: #ReportsTest #test16 stamp: 'GR 11/14/2020 16:14:47'!
PASSED!

!testRun: #ReportsTest #test17 stamp: 'GR 11/14/2020 16:14:48'!
PASSED!

!methodRemoval: Portfolio #summary stamp: 'GR 11/14/2020 16:15:01'!
summary
	
	| report |
	
	report := accounts collect: [ :anAccount | anAccount summary ].
	
	report add: 'Balance total = ', self balance asString.
	
	^report!

!methodRemoval: ReceptiveAccount #summary stamp: 'GR 11/14/2020 16:15:07'!
summary
	
	| report |
	
	report := transactions collect: [ :aTransaction | aTransaction giveReport: self ].
	
	report add: 'Balance = ', self balance asString.
	
	^report!
!Account methodsFor: 'report' stamp: 'GR 11/14/2020 16:15:20'!
makeReport: aReport

	self subclassResponsibility.! !

!methodRemoval: Account #summary stamp: 'GR 11/14/2020 16:15:26'!
summary

	self subclassResponsibility.!
!ReportsTest methodsFor: 'tests' stamp: 'GR 11/14/2020 16:15:49' prior: 50871596!
test19

	| portfolio account account2 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	Transfer transfer: 100 from: account to: account2.
	
	self assert: -100 equals: (TransferNet for: portfolio) value! !
!ReportsTest methodsFor: 'tests' stamp: 'GR 11/14/2020 16:15:55' prior: 50871607!
test20

	| portfolio account account2 account3 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	portfolio add: account2.
	Transfer transfer: 100 from: account to: account3.
	Transfer transfer: 50 from: account2 to: account3.
	
	self assert: -150 equals: (TransferNet for: portfolio) value! !

!testRun: #ReportsTest #test19 stamp: 'GR 11/14/2020 16:15:57'!
PASSED!

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 16:15:57'!
PASSED!

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 16:15:57'!
PASSED!

!testRun: #ReportsTest #test03ReportWithAWithdraw stamp: 'GR 11/14/2020 16:15:57'!
PASSED!

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 16:15:57'!
PASSED!

!testRun: #ReportsTest #test05TransferNetOfNewAccountIsCero stamp: 'GR 11/14/2020 16:15:57'!
PASSED!

!testRun: #ReportsTest #test06ATransferModifiesTransferNet stamp: 'GR 11/14/2020 16:15:57'!
PASSED!

!testRun: #ReportsTest #test07DepositDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:15:57'!
PASSED!

!testRun: #ReportsTest #test08WithdrawDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:15:57'!
PASSED!

!testRun: #ReportsTest #test16 stamp: 'GR 11/14/2020 16:15:57'!
PASSED!

!testRun: #ReportsTest #test17 stamp: 'GR 11/14/2020 16:15:57'!
PASSED!

!testRun: #ReportsTest #test18 stamp: 'GR 11/14/2020 16:15:57'!
PASSED!

!testRun: #ReportsTest #test19 stamp: 'GR 11/14/2020 16:15:57'!
PASSED!

!testRun: #ReportsTest #test20 stamp: 'GR 11/14/2020 16:15:57'!
PASSED!

!testRun: #ReportsTest #test19 stamp: 'GR 11/14/2020 16:16:10'!
PASSED!

!testRun: #ReportsTest #test20 stamp: 'GR 11/14/2020 16:16:12'!
PASSED!

account transactions!

account!

!testRun: #ReportsTest #test19 stamp: 'GR 11/14/2020 16:17:38'!
PASSED!
!ReportsTest methodsFor: 'tests' stamp: 'GR 11/14/2020 16:18:26'!
test09PortfolioWithNewAccountReportsSummary

	| portfolio account summary |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	summary := OrderedCollection with: (OrderedCollection with: 'Balance = 0') with: 'Balance total = 0'.
	
	self assert: summary equals: (AccountSummary for: portfolio) summary! !

!methodRemoval: ReportsTest #test16 stamp: 'GR 11/14/2020 16:18:26'!
test16

	| portfolio account summary |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	summary := OrderedCollection with: (OrderedCollection with: 'Balance = 0') with: 'Balance total = 0'.
	
	self assert: summary equals: (AccountSummary for: portfolio) summary!
!ReportsTest methodsFor: 'tests' stamp: 'GR 11/14/2020 16:19:57'!
test17PortfolioWithDepositedAccountReportsSummart

	| portfolio account summary accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	accountSummary := OrderedCollection with: 'Deposito de 100'  with: 'Balance = 100'.
	summary := OrderedCollection with: accountSummary with: 'Balance total = 100'.
	
	self assert: summary equals: (AccountSummary for: portfolio) summary! !

!methodRemoval: ReportsTest #test17 stamp: 'GR 11/14/2020 16:19:57'!
test17

	| portfolio account summary accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	accountSummary := OrderedCollection with: 'Deposito de 100'  with: 'Balance = 100'.
	summary := OrderedCollection with: accountSummary with: 'Balance total = 100'.
	
	self assert: summary equals: (AccountSummary for: portfolio) summary!
!ReportsTest methodsFor: 'tests' stamp: 'GR 11/14/2020 16:20:03'!
test17PortfolioWithDepositedAccountReportsSummary

	| portfolio account summary accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	accountSummary := OrderedCollection with: 'Deposito de 100'  with: 'Balance = 100'.
	summary := OrderedCollection with: accountSummary with: 'Balance total = 100'.
	
	self assert: summary equals: (AccountSummary for: portfolio) summary! !

!methodRemoval: ReportsTest #test17PortfolioWithDepositedAccountReportsSummart stamp: 'GR 11/14/2020 16:20:03'!
test17PortfolioWithDepositedAccountReportsSummart

	| portfolio account summary accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	accountSummary := OrderedCollection with: 'Deposito de 100'  with: 'Balance = 100'.
	summary := OrderedCollection with: accountSummary with: 'Balance total = 100'.
	
	self assert: summary equals: (AccountSummary for: portfolio) summary!
!ReportsTest methodsFor: 'tests' stamp: 'GR 11/14/2020 16:20:28'!
test17PortfolioWithTransactionMadeAccountReportsSummary

	| portfolio account summary accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	accountSummary := OrderedCollection with: 'Deposito de 100'  with: 'Balance = 100'.
	summary := OrderedCollection with: accountSummary with: 'Balance total = 100'.
	
	self assert: summary equals: (AccountSummary for: portfolio) summary! !

!methodRemoval: ReportsTest #test17PortfolioWithDepositedAccountReportsSummary stamp: 'GR 11/14/2020 16:20:28'!
test17PortfolioWithDepositedAccountReportsSummary

	| portfolio account summary accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	accountSummary := OrderedCollection with: 'Deposito de 100'  with: 'Balance = 100'.
	summary := OrderedCollection with: accountSummary with: 'Balance total = 100'.
	
	self assert: summary equals: (AccountSummary for: portfolio) summary!
!ReportsTest methodsFor: 'tests' stamp: 'GR 11/14/2020 16:21:06'!
test18PortfolioWithNewAccountTransferNetEqualsCero

	| portfolio account |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self assert: 0 equals: portfolio transferNet! !

!methodRemoval: ReportsTest #test18 stamp: 'GR 11/14/2020 16:21:06'!
test18

	| portfolio account |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self assert: 0 equals: portfolio transferNet!
!ReportsTest methodsFor: 'tests' stamp: 'GR 11/14/2020 16:21:33'!
test19PortfolioWithATransferGivesTransferNet

	| portfolio account account2 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	Transfer transfer: 100 from: account to: account2.
	
	self assert: -100 equals: (TransferNet for: portfolio) value! !

!methodRemoval: ReportsTest #test19 stamp: 'GR 11/14/2020 16:21:33'!
test19

	| portfolio account account2 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	Transfer transfer: 100 from: account to: account2.
	
	self assert: -100 equals: (TransferNet for: portfolio) value!
!ReportsTest methodsFor: 'tests' stamp: 'GR 11/14/2020 16:22:45'!
test19PortfolioWithAccountTransferGivesItsTransferNet

	| portfolio account account2 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	Transfer transfer: 100 from: account to: account2.
	
	self assert: -100 equals: (TransferNet for: portfolio) value! !

!methodRemoval: ReportsTest #test19PortfolioWithATransferGivesTransferNet stamp: 'GR 11/14/2020 16:22:45'!
test19PortfolioWithATransferGivesTransferNet

	| portfolio account account2 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	Transfer transfer: 100 from: account to: account2.
	
	self assert: -100 equals: (TransferNet for: portfolio) value!
!ReportsTest methodsFor: 'tests' stamp: 'GR 11/14/2020 16:23:19'!
test20PortfolioGivesSubAccountsTotalTransferNet

	| portfolio account account2 account3 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	portfolio add: account2.
	Transfer transfer: 100 from: account to: account3.
	Transfer transfer: 50 from: account2 to: account3.
	
	self assert: -150 equals: (TransferNet for: portfolio) value! !

!methodRemoval: ReportsTest #test20 stamp: 'GR 11/14/2020 16:23:19'!
test20

	| portfolio account account2 account3 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	portfolio add: account2.
	Transfer transfer: 100 from: account to: account3.
	Transfer transfer: 50 from: account2 to: account3.
	
	self assert: -150 equals: (TransferNet for: portfolio) value!

!testRun: #ReportsTest #test20PortfolioGivesSubAccountsTotalTransferNet stamp: 'GR 11/14/2020 16:23:24'!
PASSED!

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 16:23:24'!
PASSED!

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 16:23:24'!
PASSED!

!testRun: #ReportsTest #test03ReportWithAWithdraw stamp: 'GR 11/14/2020 16:23:24'!
PASSED!

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 16:23:24'!
PASSED!

!testRun: #ReportsTest #test05TransferNetOfNewAccountIsCero stamp: 'GR 11/14/2020 16:23:24'!
PASSED!

!testRun: #ReportsTest #test06ATransferModifiesTransferNet stamp: 'GR 11/14/2020 16:23:24'!
PASSED!

!testRun: #ReportsTest #test07DepositDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:23:24'!
PASSED!

!testRun: #ReportsTest #test08WithdrawDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:23:24'!
PASSED!

!testRun: #ReportsTest #test09PortfolioWithNewAccountReportsSummary stamp: 'GR 11/14/2020 16:23:24'!
PASSED!

!testRun: #ReportsTest #test17PortfolioWithTransactionMadeAccountReportsSummary stamp: 'GR 11/14/2020 16:23:24'!
PASSED!

!testRun: #ReportsTest #test18PortfolioWithNewAccountTransferNetEqualsCero stamp: 'GR 11/14/2020 16:23:24'!
PASSED!

!testRun: #ReportsTest #test19PortfolioWithAccountTransferGivesItsTransferNet stamp: 'GR 11/14/2020 16:23:24'!
PASSED!

!testRun: #ReportsTest #test20PortfolioGivesSubAccountsTotalTransferNet stamp: 'GR 11/14/2020 16:23:24'!
PASSED!
!ReportsTest methodsFor: 'tests' stamp: 'GR 11/14/2020 16:23:38'!
test10PortfolioWithTransactionMadeAccountReportsSummary

	| portfolio account summary accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	accountSummary := OrderedCollection with: 'Deposito de 100'  with: 'Balance = 100'.
	summary := OrderedCollection with: accountSummary with: 'Balance total = 100'.
	
	self assert: summary equals: (AccountSummary for: portfolio) summary! !

!methodRemoval: ReportsTest #test17PortfolioWithTransactionMadeAccountReportsSummary stamp: 'GR 11/14/2020 16:23:38'!
test17PortfolioWithTransactionMadeAccountReportsSummary

	| portfolio account summary accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	accountSummary := OrderedCollection with: 'Deposito de 100'  with: 'Balance = 100'.
	summary := OrderedCollection with: accountSummary with: 'Balance total = 100'.
	
	self assert: summary equals: (AccountSummary for: portfolio) summary!
!ReportsTest methodsFor: 'tests' stamp: 'GR 11/14/2020 16:23:45'!
test11PortfolioWithNewAccountTransferNetEqualsCero

	| portfolio account |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self assert: 0 equals: portfolio transferNet! !

!methodRemoval: ReportsTest #test18PortfolioWithNewAccountTransferNetEqualsCero stamp: 'GR 11/14/2020 16:23:45'!
test18PortfolioWithNewAccountTransferNetEqualsCero

	| portfolio account |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self assert: 0 equals: portfolio transferNet!
!ReportsTest methodsFor: 'tests' stamp: 'GR 11/14/2020 16:23:51'!
test12PortfolioWithAccountTransferGivesItsTransferNet

	| portfolio account account2 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	Transfer transfer: 100 from: account to: account2.
	
	self assert: -100 equals: (TransferNet for: portfolio) value! !

!methodRemoval: ReportsTest #test19PortfolioWithAccountTransferGivesItsTransferNet stamp: 'GR 11/14/2020 16:23:51'!
test19PortfolioWithAccountTransferGivesItsTransferNet

	| portfolio account account2 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	Transfer transfer: 100 from: account to: account2.
	
	self assert: -100 equals: (TransferNet for: portfolio) value!
!ReportsTest methodsFor: 'tests' stamp: 'GR 11/14/2020 16:23:56'!
test13PortfolioGivesSubAccountsTotalTransferNet

	| portfolio account account2 account3 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	portfolio add: account2.
	Transfer transfer: 100 from: account to: account3.
	Transfer transfer: 50 from: account2 to: account3.
	
	self assert: -150 equals: (TransferNet for: portfolio) value! !

!methodRemoval: ReportsTest #test20PortfolioGivesSubAccountsTotalTransferNet stamp: 'GR 11/14/2020 16:23:56'!
test20PortfolioGivesSubAccountsTotalTransferNet

	| portfolio account account2 account3 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	portfolio add: account2.
	Transfer transfer: 100 from: account to: account3.
	Transfer transfer: 50 from: account2 to: account3.
	
	self assert: -150 equals: (TransferNet for: portfolio) value!

!methodRemoval: AccountSummary #portfolioReport: stamp: 'GR 11/14/2020 16:25:01'!
portfolioReport: aPortfolio 
	
	| report |
	
	report := account accounts collect: [ :anAccount | anAccount makeReport: self ].
	
	report add: 'Balance total = ', account balance asString.
	
	^report!
!Portfolio methodsFor: 'operations' stamp: 'GR 11/14/2020 16:25:13' prior: 50871883 overrides: 50871968!
makeReport: aReport

	^ aReport accountReport: self
	
	! !
!ReportsTest methodsFor: 'tests' stamp: 'GR 11/14/2020 16:25:35' prior: 50872311!
test10PortfolioWithTransactionMadeAccountReportsSummary

	| portfolio account summary accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	accountSummary := OrderedCollection with: 'Deposito de 100'  with: 'Balance = 100'.
	summary := OrderedCollection with: accountSummary with: 'Balance = 100'.
	
	self assert: summary equals: (AccountSummary for: portfolio) summary! !
!ReportsTest methodsFor: 'tests' stamp: 'GR 11/14/2020 16:27:07' prior: 50872439!
test10PortfolioWithTransactionMadeAccountReportsSummary

	| portfolio account summary accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	accountSummary := OrderedCollection with: 'Deposito de 100'  with: 'Balance = 100'.
	summary := OrderedCollection with: accountSummary with: 'Balance total = 100'.
	
	self assert: summary equals: (AccountSummary for: portfolio) summary! !

!methodRemoval: Portfolio #transferNet stamp: 'GR 11/14/2020 16:27:17'!
transferNet
	
	^ accounts sum: [ :anAccount | anAccount transferNet] ifEmpty: [0].!
!AccountSummary methodsFor: 'operations' stamp: 'GR 11/14/2020 16:30:48' prior: 50871763!
accountReport: aReceptiveAccount
	
	| report |
	
	report := aReceptiveAccount transactions collect: [ :aTransaction | aTransaction giveReport: self ].
	
	report add: 'Balance = ', account balance asString.
	
	^report! !
!AccountSummary methodsFor: 'operations' stamp: 'GR 11/14/2020 16:30:52' prior: 50872478!
accountReport: aReceptiveAccount
	
	| report |
	
	report := aReceptiveAccount transactions collect: [ :aTransaction | aTransaction giveReport: self ].
	
	report add: 'Balance = ', aReceptiveAccount balance asString.
	
	^report! !
!TransferNet methodsFor: 'operations' stamp: 'GR 11/14/2020 16:31:22'!
accountTransferNet: anAccount
	
	^ account transactions inject: 0 into: [ :transferNet :aTransaction | aTransaction transferNet: transferNet].! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'GR 11/14/2020 16:31:22' prior: 50871224!
initializeFor: anAccount 
	
	account := anAccount.
	value := self accountTransferNet: self.! !

!methodRemoval: TransferNet #accountTransferNet stamp: 'GR 11/14/2020 16:31:22'!
accountTransferNet
	
	^ account transactions inject: 0 into: [ :transferNet :aTransaction | aTransaction transferNet: transferNet].!
!TransferNet methodsFor: 'operations' stamp: 'GR 11/14/2020 16:31:35' prior: 50872498!
accountTransferNet: anAccount
	
	^ anAccount transactions inject: 0 into: [ :transferNet :aTransaction | aTransaction transferNet: transferNet].! !
!AccountSummary methodsFor: 'initialization' stamp: 'GR 11/14/2020 16:31:59' prior: 50871834!
initializeFor: anAccount 
	
	summary  := anAccount makeReport: self! !
!TransferNet methodsFor: 'initialization' stamp: 'GR 11/14/2020 16:32:48' prior: 50872506!
initializeFor: anAccount 
	
	value := anAccount makeReport: self.! !
!TransferNet methodsFor: 'operations' stamp: 'GR 11/14/2020 16:33:01'!
accountReport: anAccount
	
	^ anAccount transactions inject: 0 into: [ :transferNet :aTransaction | aTransaction transferNet: transferNet].! !

!methodRemoval: TransferNet #accountTransferNet: stamp: 'GR 11/14/2020 16:33:01'!
accountTransferNet: anAccount
	
	^ anAccount transactions inject: 0 into: [ :transferNet :aTransaction | aTransaction transferNet: transferNet].!

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 16:33:14'!
PASSED!

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 16:33:14'!
PASSED!

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 16:33:14'!
PASSED!

!testRun: #ReportsTest #test03ReportWithAWithdraw stamp: 'GR 11/14/2020 16:33:14'!
PASSED!

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 16:33:14'!
PASSED!

!testRun: #ReportsTest #test05TransferNetOfNewAccountIsCero stamp: 'GR 11/14/2020 16:33:14'!
PASSED!

!testRun: #ReportsTest #test06ATransferModifiesTransferNet stamp: 'GR 11/14/2020 16:33:14'!
PASSED!

!testRun: #ReportsTest #test07DepositDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:33:14'!
PASSED!

!testRun: #ReportsTest #test08WithdrawDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:33:14'!
PASSED!

!testRun: #ReportsTest #test09PortfolioWithNewAccountReportsSummary stamp: 'GR 11/14/2020 16:33:14'!
FAILURE!

!testRun: #ReportsTest #test10PortfolioWithTransactionMadeAccountReportsSummary stamp: 'GR 11/14/2020 16:33:14'!
FAILURE!

!testRun: #ReportsTest #test11PortfolioWithNewAccountTransferNetEqualsCero stamp: 'GR 11/14/2020 16:33:14'!
ERROR!

!testRun: #ReportsTest #test12PortfolioWithAccountTransferGivesItsTransferNet stamp: 'GR 11/14/2020 16:33:14'!
PASSED!

!testRun: #ReportsTest #test13PortfolioGivesSubAccountsTotalTransferNet stamp: 'GR 11/14/2020 16:33:14'!
PASSED!

!testRun: #ReportsTest #test11PortfolioWithNewAccountTransferNetEqualsCero stamp: 'GR 11/14/2020 16:33:18'!
ERROR!
!ReportsTest methodsFor: 'tests' stamp: 'GR 11/14/2020 16:34:03' prior: 50872346!
test11PortfolioWithNewAccountTransferNetEqualsCero

	| portfolio account |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self assert: 0 equals: (TransferNet for: portfolio ) value! !

!testRun: #ReportsTest #test12PortfolioWithAccountTransferGivesItsTransferNet stamp: 'GR 11/14/2020 16:34:09'!
PASSED!

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 16:34:09'!
PASSED!

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 16:34:09'!
PASSED!

!testRun: #ReportsTest #test03ReportWithAWithdraw stamp: 'GR 11/14/2020 16:34:09'!
PASSED!

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 16:34:09'!
PASSED!

!testRun: #ReportsTest #test05TransferNetOfNewAccountIsCero stamp: 'GR 11/14/2020 16:34:09'!
PASSED!

!testRun: #ReportsTest #test06ATransferModifiesTransferNet stamp: 'GR 11/14/2020 16:34:09'!
PASSED!

!testRun: #ReportsTest #test07DepositDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:34:09'!
PASSED!

!testRun: #ReportsTest #test08WithdrawDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:34:09'!
PASSED!

!testRun: #ReportsTest #test09PortfolioWithNewAccountReportsSummary stamp: 'GR 11/14/2020 16:34:09'!
FAILURE!

!testRun: #ReportsTest #test10PortfolioWithTransactionMadeAccountReportsSummary stamp: 'GR 11/14/2020 16:34:09'!
FAILURE!

!testRun: #ReportsTest #test11PortfolioWithNewAccountTransferNetEqualsCero stamp: 'GR 11/14/2020 16:34:09'!
PASSED!

!testRun: #ReportsTest #test12PortfolioWithAccountTransferGivesItsTransferNet stamp: 'GR 11/14/2020 16:34:09'!
PASSED!

!testRun: #ReportsTest #test13PortfolioGivesSubAccountsTotalTransferNet stamp: 'GR 11/14/2020 16:34:09'!
PASSED!

!testRun: #ReportsTest #test09PortfolioWithNewAccountReportsSummary stamp: 'GR 11/14/2020 16:34:13'!
FAILURE!

!testRun: #ReportsTest #test11PortfolioWithNewAccountTransferNetEqualsCero stamp: 'GR 11/14/2020 16:34:48'!
PASSED!

!testRun: #ReportsTest #test11PortfolioWithNewAccountTransferNetEqualsCero stamp: 'GR 11/14/2020 16:35:08'!
PASSED!
!AccountSummary methodsFor: 'operations' stamp: 'GR 11/14/2020 16:37:07'!
portfolioReport: aPortfolio

	| report |
	
	report := account accounts collect: [ :anAccount | anAccount makeReport: self ].
	
	report add: 'Balance total = ', account balance asString.
	
	^report! !
!AccountSummary methodsFor: 'operations' stamp: 'GR 11/14/2020 16:37:16' prior: 50872669!
portfolioReport: aPortfolio

	| report |
	
	report := aPortfolio accounts collect: [ :anAccount | anAccount makeReport: self ].
	
	report add: 'Balance total = ', aPortfolio balance asString.
	
	^report! !
!Portfolio methodsFor: 'report' stamp: 'GR 11/14/2020 16:42:16' prior: 50872434 overrides: 50871968!
makeReport: aReport

	^ aReport portfolioReport: self
	
	! !

!testRun: #ReportsTest #test06ATransferModifiesTransferNet stamp: 'GR 11/14/2020 16:42:20'!
PASSED!

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 16:42:20'!
PASSED!

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 16:42:20'!
PASSED!

!testRun: #ReportsTest #test03ReportWithAWithdraw stamp: 'GR 11/14/2020 16:42:20'!
PASSED!

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 16:42:20'!
PASSED!

!testRun: #ReportsTest #test05TransferNetOfNewAccountIsCero stamp: 'GR 11/14/2020 16:42:20'!
PASSED!

!testRun: #ReportsTest #test06ATransferModifiesTransferNet stamp: 'GR 11/14/2020 16:42:20'!
PASSED!

!testRun: #ReportsTest #test07DepositDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:42:20'!
PASSED!

!testRun: #ReportsTest #test08WithdrawDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:42:20'!
PASSED!

!testRun: #ReportsTest #test09PortfolioWithNewAccountReportsSummary stamp: 'GR 11/14/2020 16:42:20'!
PASSED!

!testRun: #ReportsTest #test10PortfolioWithTransactionMadeAccountReportsSummary stamp: 'GR 11/14/2020 16:42:20'!
PASSED!

!testRun: #ReportsTest #test11PortfolioWithNewAccountTransferNetEqualsCero stamp: 'GR 11/14/2020 16:42:20'!
ERROR!

!testRun: #ReportsTest #test12PortfolioWithAccountTransferGivesItsTransferNet stamp: 'GR 11/14/2020 16:42:20'!
ERROR!

!testRun: #ReportsTest #test13PortfolioGivesSubAccountsTotalTransferNet stamp: 'GR 11/14/2020 16:42:20'!
ERROR!

!testRun: #ReportsTest #test11PortfolioWithNewAccountTransferNetEqualsCero stamp: 'GR 11/14/2020 16:42:23'!
ERROR!
!TransferNet methodsFor: 'operations' stamp: 'GR 11/14/2020 16:42:58'!
portfolioReport: aPortfolio 
	self shouldBeImplemented.! !
!TransferNet methodsFor: 'operations' stamp: 'GR 11/14/2020 16:43:18' prior: 50872743!
portfolioReport: aPortfolio 
	
	self report: aPortfolio! !

!testRun: #ReportsTest #test11PortfolioWithNewAccountTransferNetEqualsCero stamp: 'GR 11/14/2020 16:43:20'!
ERROR!
!TransferNet methodsFor: 'operations -- private' stamp: 'GR 11/14/2020 16:43:43'!
report: aPortfolio 
	self shouldBeImplemented.! !
!TransferNet methodsFor: 'operations' stamp: 'GR 11/14/2020 16:44:18' prior: 50872538!
accountReport: aReceptiveAccount
	
	^ self report: aReceptiveAccount! !
!TransferNet methodsFor: 'operations -- private' stamp: 'GR 11/14/2020 16:44:32' prior: 50872757!
report: anAccount

	^ anAccount transactions inject: 0 into: [ :transferNet :aTransaction | aTransaction transferNet: transferNet].! !

!testRun: #ReportsTest #test11PortfolioWithNewAccountTransferNetEqualsCero stamp: 'GR 11/14/2020 16:44:32'!
FAILURE!
!TransferNet methodsFor: 'operations' stamp: 'GR 11/14/2020 16:45:05' prior: 50872748!
portfolioReport: aPortfolio 
	
	^ self report: aPortfolio! !

!testRun: #ReportsTest #test11PortfolioWithNewAccountTransferNetEqualsCero stamp: 'GR 11/14/2020 16:45:17'!
PASSED!

!testRun: #ReportsTest #test06ATransferModifiesTransferNet stamp: 'GR 11/14/2020 16:45:21'!
PASSED!

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 16:45:21'!
PASSED!

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 16:45:21'!
PASSED!

!testRun: #ReportsTest #test03ReportWithAWithdraw stamp: 'GR 11/14/2020 16:45:21'!
PASSED!

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 16:45:21'!
PASSED!

!testRun: #ReportsTest #test05TransferNetOfNewAccountIsCero stamp: 'GR 11/14/2020 16:45:21'!
PASSED!

!testRun: #ReportsTest #test06ATransferModifiesTransferNet stamp: 'GR 11/14/2020 16:45:21'!
PASSED!

!testRun: #ReportsTest #test07DepositDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:45:21'!
PASSED!

!testRun: #ReportsTest #test08WithdrawDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:45:21'!
PASSED!

!testRun: #ReportsTest #test09PortfolioWithNewAccountReportsSummary stamp: 'GR 11/14/2020 16:45:21'!
PASSED!

!testRun: #ReportsTest #test10PortfolioWithTransactionMadeAccountReportsSummary stamp: 'GR 11/14/2020 16:45:21'!
PASSED!

!testRun: #ReportsTest #test11PortfolioWithNewAccountTransferNetEqualsCero stamp: 'GR 11/14/2020 16:45:21'!
PASSED!

!testRun: #ReportsTest #test12PortfolioWithAccountTransferGivesItsTransferNet stamp: 'GR 11/14/2020 16:45:21'!
PASSED!

!testRun: #ReportsTest #test13PortfolioGivesSubAccountsTotalTransferNet stamp: 'GR 11/14/2020 16:45:21'!
PASSED!

!testRun: #ReportsTest #test06ATransferModifiesTransferNet stamp: 'GR 11/14/2020 16:45:49'!
PASSED!

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 16:45:49'!
PASSED!

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 16:45:49'!
PASSED!

!testRun: #ReportsTest #test03ReportWithAWithdraw stamp: 'GR 11/14/2020 16:45:49'!
PASSED!

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 16:45:49'!
PASSED!

!testRun: #ReportsTest #test05TransferNetOfNewAccountIsCero stamp: 'GR 11/14/2020 16:45:49'!
PASSED!

!testRun: #ReportsTest #test06ATransferModifiesTransferNet stamp: 'GR 11/14/2020 16:45:49'!
PASSED!

!testRun: #ReportsTest #test07DepositDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:45:49'!
PASSED!

!testRun: #ReportsTest #test08WithdrawDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:45:49'!
PASSED!

!testRun: #ReportsTest #test09PortfolioWithNewAccountReportsSummary stamp: 'GR 11/14/2020 16:45:49'!
PASSED!

!testRun: #ReportsTest #test10PortfolioWithTransactionMadeAccountReportsSummary stamp: 'GR 11/14/2020 16:45:49'!
PASSED!

!testRun: #ReportsTest #test11PortfolioWithNewAccountTransferNetEqualsCero stamp: 'GR 11/14/2020 16:45:49'!
PASSED!

!testRun: #ReportsTest #test12PortfolioWithAccountTransferGivesItsTransferNet stamp: 'GR 11/14/2020 16:45:49'!
PASSED!

!testRun: #ReportsTest #test13PortfolioGivesSubAccountsTotalTransferNet stamp: 'GR 11/14/2020 16:45:49'!
PASSED!
!AccountSummary methodsFor: 'operations' stamp: 'GR 11/14/2020 16:47:59' prior: 50872679!
portfolioReport: aPortfolio

	| report |
	
	report := aPortfolio accounts collect: [ :anAccount | anAccount makeReport: self ].
	
	report add: 'Balance = ', aPortfolio balance asString.
	
	^report! !
!ReportsTest methodsFor: 'tests' stamp: 'GR 11/14/2020 16:48:07' prior: 50872456!
test10PortfolioWithTransactionMadeAccountReportsSummary

	| portfolio account summary accountSummary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	accountSummary := OrderedCollection with: 'Deposito de 100'  with: 'Balance = 100'.
	summary := OrderedCollection with: accountSummary with: 'Balance = 100'.
	
	self assert: summary equals: (AccountSummary for: portfolio) summary! !
!ReportsTest methodsFor: 'tests' stamp: 'GR 11/14/2020 16:48:12' prior: 50872048!
test09PortfolioWithNewAccountReportsSummary

	| portfolio account summary |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	summary := OrderedCollection with: (OrderedCollection with: 'Balance = 0') with: 'Balance = 0'.
	
	self assert: summary equals: (AccountSummary for: portfolio) summary! !

!testRun: #ReportsTest #test10PortfolioWithTransactionMadeAccountReportsSummary stamp: 'GR 11/14/2020 16:48:41'!
PASSED!

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 16:48:41'!
PASSED!

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 16:48:41'!
PASSED!

!testRun: #ReportsTest #test03ReportWithAWithdraw stamp: 'GR 11/14/2020 16:48:41'!
PASSED!

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 16:48:41'!
PASSED!

!testRun: #ReportsTest #test05TransferNetOfNewAccountIsCero stamp: 'GR 11/14/2020 16:48:41'!
PASSED!

!testRun: #ReportsTest #test06ATransferModifiesTransferNet stamp: 'GR 11/14/2020 16:48:41'!
PASSED!

!testRun: #ReportsTest #test07DepositDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:48:41'!
PASSED!

!testRun: #ReportsTest #test08WithdrawDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:48:41'!
PASSED!

!testRun: #ReportsTest #test09PortfolioWithNewAccountReportsSummary stamp: 'GR 11/14/2020 16:48:41'!
PASSED!

!testRun: #ReportsTest #test10PortfolioWithTransactionMadeAccountReportsSummary stamp: 'GR 11/14/2020 16:48:41'!
PASSED!

!testRun: #ReportsTest #test11PortfolioWithNewAccountTransferNetEqualsCero stamp: 'GR 11/14/2020 16:48:41'!
PASSED!

!testRun: #ReportsTest #test12PortfolioWithAccountTransferGivesItsTransferNet stamp: 'GR 11/14/2020 16:48:41'!
PASSED!

!testRun: #ReportsTest #test13PortfolioGivesSubAccountsTotalTransferNet stamp: 'GR 11/14/2020 16:48:41'!
PASSED!
!ReportsTest methodsFor: 'tests' stamp: 'GR 11/14/2020 16:50:25' prior: 50872391!
test13PortfolioGivesSubAccountsTotalTransferNet

	| portfolio account account2 account3 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	portfolio add: account2.
	Transfer transfer: 100 from: account to: account3.
	Transfer transfer: 50 from: account3 to: account2.
	
	self assert: -50 equals: (TransferNet for: portfolio) value! !

!testRun: #ReportsTest #test13PortfolioGivesSubAccountsTotalTransferNet stamp: 'GR 11/14/2020 16:50:27'!
PASSED!

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 16:50:27'!
PASSED!

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 16:50:27'!
PASSED!

!testRun: #ReportsTest #test03ReportWithAWithdraw stamp: 'GR 11/14/2020 16:50:27'!
PASSED!

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 16:50:27'!
PASSED!

!testRun: #ReportsTest #test05TransferNetOfNewAccountIsCero stamp: 'GR 11/14/2020 16:50:27'!
PASSED!

!testRun: #ReportsTest #test06ATransferModifiesTransferNet stamp: 'GR 11/14/2020 16:50:27'!
PASSED!

!testRun: #ReportsTest #test07DepositDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:50:27'!
PASSED!

!testRun: #ReportsTest #test08WithdrawDoesNotModifyTransferNet stamp: 'GR 11/14/2020 16:50:27'!
PASSED!

!testRun: #ReportsTest #test09PortfolioWithNewAccountReportsSummary stamp: 'GR 11/14/2020 16:50:27'!
PASSED!

!testRun: #ReportsTest #test10PortfolioWithTransactionMadeAccountReportsSummary stamp: 'GR 11/14/2020 16:50:27'!
PASSED!

!testRun: #ReportsTest #test11PortfolioWithNewAccountTransferNetEqualsCero stamp: 'GR 11/14/2020 16:50:27'!
PASSED!

!testRun: #ReportsTest #test12PortfolioWithAccountTransferGivesItsTransferNet stamp: 'GR 11/14/2020 16:50:27'!
PASSED!

!testRun: #ReportsTest #test13PortfolioGivesSubAccountsTotalTransferNet stamp: 'GR 11/14/2020 16:50:27'!
PASSED!
!AccountSummary methodsFor: 'operations' stamp: 'GR 11/14/2020 17:14:46' prior: 50872488!
accountReport: aReceptiveAccount
	
	"| report |
	
	report := aReceptiveAccount transactions collect: [ :aTransaction | aTransaction giveReport: self ].
	
	report add: 'Balance = ', aReceptiveAccount balance asString.
	
	^report"
	
	^ self report: aReceptiveAccount transactions collecting: [ :aTransaction | aTransaction giveReport: self ].! !
!AccountSummary methodsFor: 'operations -- private' stamp: 'GR 11/14/2020 17:15:06'!
report: anOrderedCollection collecting: aBlock
! !
!AccountSummary methodsFor: 'operations' stamp: 'GR 11/14/2020 17:15:20' prior: 50873028!
accountReport: aReceptiveAccount
	
	^ self report: aReceptiveAccount transactions collecting: [ :aTransaction | aTransaction giveReport: self ].! !
!AccountSummary methodsFor: 'operations -- private' stamp: 'GR 11/14/2020 17:16:34'!
report: anAccount with: anOrderedCollection collecting: aBlock


	| report |
	
	report := anOrderedCollection collect: aBlock.
	
	report add: 'Balance = ', anAccount balance asString.
	
	^report! !
!AccountSummary methodsFor: 'operations' stamp: 'GR 11/14/2020 17:17:06' prior: 50872879!
portfolioReport: aPortfolio

	^ self report: aPortfolio with: aPortfolio accounts collecting: [ :anAccount | anAccount makeReport: self ]! !
!AccountSummary methodsFor: 'operations' stamp: 'GR 11/14/2020 17:17:17' prior: 50873047!
accountReport: aReceptiveAccount
	
	^ self report: aReceptiveAccount with: aReceptiveAccount transactions collecting: [ :aTransaction | aTransaction giveReport: self ].! !
!AccountSummary methodsFor: 'operations -- private' stamp: 'GR 11/14/2020 17:17:29' prior: 50873055!
report: anAccount with: anOrderedCollection collecting: aBlock

	| report |
	
	report := anOrderedCollection collect: aBlock.
	
	report add: 'Balance = ', anAccount balance asString.
	
	^report! !

!methodRemoval: AccountSummary #report:collecting: stamp: 'GR 11/14/2020 17:17:32'!
report: anOrderedCollection collecting: aBlock
!

!testRun: #ReportsTest #test05TransferNetOfNewAccountIsCero stamp: 'GR 11/14/2020 17:17:36'!
PASSED!

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 17:17:36'!
PASSED!

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 17:17:36'!
PASSED!

!testRun: #ReportsTest #test03ReportWithAWithdraw stamp: 'GR 11/14/2020 17:17:36'!
PASSED!

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 17:17:36'!
PASSED!

!testRun: #ReportsTest #test05TransferNetOfNewAccountIsCero stamp: 'GR 11/14/2020 17:17:36'!
PASSED!

!testRun: #ReportsTest #test06ATransferModifiesTransferNet stamp: 'GR 11/14/2020 17:17:36'!
PASSED!

!testRun: #ReportsTest #test07DepositDoesNotModifyTransferNet stamp: 'GR 11/14/2020 17:17:36'!
PASSED!

!testRun: #ReportsTest #test08WithdrawDoesNotModifyTransferNet stamp: 'GR 11/14/2020 17:17:36'!
PASSED!

!testRun: #ReportsTest #test09PortfolioWithNewAccountReportsSummary stamp: 'GR 11/14/2020 17:17:36'!
PASSED!

!testRun: #ReportsTest #test10PortfolioWithTransactionMadeAccountReportsSummary stamp: 'GR 11/14/2020 17:17:36'!
PASSED!

!testRun: #ReportsTest #test11PortfolioWithNewAccountTransferNetEqualsCero stamp: 'GR 11/14/2020 17:17:36'!
PASSED!

!testRun: #ReportsTest #test12PortfolioWithAccountTransferGivesItsTransferNet stamp: 'GR 11/14/2020 17:17:36'!
PASSED!

!testRun: #ReportsTest #test13PortfolioGivesSubAccountsTotalTransferNet stamp: 'GR 11/14/2020 17:17:36'!
PASSED!
!ReportsTest methodsFor: 'tests' stamp: 'GR 11/14/2020 17:33:06'!
test14

	| portfolio account account2 account3 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	portfolio add: account2.
	Transfer transfer: 100 from: account to: account3.
	Transfer transfer: 50 from: account3 to: account2.
	
	self assert: -50 equals: (TransferNet for: portfolio) value! !
!ReportsTest methodsFor: 'tests' stamp: 'GR 11/14/2020 17:33:29' prior: 50872965!
test13PortfolioGivesSubAccountsTotalTransferNet

	| portfolio account account2 account3 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio := Portfolio with: account with: account2.
	Transfer transfer: 100 from: account to: account3.
	Transfer transfer: 50 from: account3 to: account2.
	
	self assert: -50 equals: (TransferNet for: portfolio) value! !

!methodRemoval: ReportsTest #test14 stamp: 'GR 11/14/2020 17:40:51'!
test14

	| portfolio account account2 account3 |
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	portfolio add: account2.
	Transfer transfer: 100 from: account to: account3.
	Transfer transfer: 50 from: account3 to: account2.
	
	self assert: -50 equals: (TransferNet for: portfolio) value!

!testRun: #ReportsTest #test10PortfolioWithTransactionMadeAccountReportsSummary stamp: 'GR 11/14/2020 17:40:53'!
PASSED!

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 17:40:53'!
PASSED!

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 17:40:53'!
PASSED!

!testRun: #ReportsTest #test03ReportWithAWithdraw stamp: 'GR 11/14/2020 17:40:53'!
PASSED!

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 17:40:53'!
PASSED!

!testRun: #ReportsTest #test05TransferNetOfNewAccountIsCero stamp: 'GR 11/14/2020 17:40:53'!
PASSED!

!testRun: #ReportsTest #test06ATransferModifiesTransferNet stamp: 'GR 11/14/2020 17:40:53'!
PASSED!

!testRun: #ReportsTest #test07DepositDoesNotModifyTransferNet stamp: 'GR 11/14/2020 17:40:53'!
PASSED!

!testRun: #ReportsTest #test08WithdrawDoesNotModifyTransferNet stamp: 'GR 11/14/2020 17:40:53'!
PASSED!

!testRun: #ReportsTest #test09PortfolioWithNewAccountReportsSummary stamp: 'GR 11/14/2020 17:40:53'!
PASSED!

!testRun: #ReportsTest #test10PortfolioWithTransactionMadeAccountReportsSummary stamp: 'GR 11/14/2020 17:40:53'!
PASSED!

!testRun: #ReportsTest #test11PortfolioWithNewAccountTransferNetEqualsCero stamp: 'GR 11/14/2020 17:40:53'!
PASSED!

!testRun: #ReportsTest #test12PortfolioWithAccountTransferGivesItsTransferNet stamp: 'GR 11/14/2020 17:40:53'!
PASSED!

!testRun: #ReportsTest #test13PortfolioGivesSubAccountsTotalTransferNet stamp: 'GR 11/14/2020 17:40:53'!
PASSED!

!testRun: #ReportsTest #test10PortfolioWithTransactionMadeAccountReportsSummary stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TranferRegistersInBothAccounts stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransfersModifiesBalance stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test10CanNotTransferToSameAccount stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test11CanNotTransferANegativeAmount stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test12CanNotTransferNoMoney stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #ReportsTest #test01ReportWith0Balance stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #ReportsTest #test02ReportWithADeposit stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #ReportsTest #test03ReportWithAWithdraw stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #ReportsTest #test04ReportWithATransfer stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #ReportsTest #test05TransferNetOfNewAccountIsCero stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #ReportsTest #test06ATransferModifiesTransferNet stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #ReportsTest #test07DepositDoesNotModifyTransferNet stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #ReportsTest #test08WithdrawDoesNotModifyTransferNet stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #ReportsTest #test09PortfolioWithNewAccountReportsSummary stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #ReportsTest #test10PortfolioWithTransactionMadeAccountReportsSummary stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #ReportsTest #test11PortfolioWithNewAccountTransferNetEqualsCero stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #ReportsTest #test12PortfolioWithAccountTransferGivesItsTransferNet stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

!testRun: #ReportsTest #test13PortfolioGivesSubAccountsTotalTransferNet stamp: 'GR 11/14/2020 17:40:55'!
PASSED!

----QUIT----(14 November 2020 17:41:17) CuisUniversity-4384.image priorSource: 17239334!