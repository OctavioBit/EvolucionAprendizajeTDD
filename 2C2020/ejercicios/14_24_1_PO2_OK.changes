


----End fileIn of /Users/vpomsztein/Documents/Facu/ISW1/Parcial1/Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'VP 11/2/2020 19:18:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'VP 11/2/2020 19:18:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'VP 11/2/2020 19:18:22'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'VP 11/2/2020 19:18:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'VP 11/2/2020 19:18:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'VP 11/2/2020 19:18:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'VP 11/2/2020 19:18:22'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'VP 11/2/2020 19:18:22'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'VP 11/2/2020 19:19:15'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'VP 11/2/2020 19:22:32' prior: 50880584!
balance

	^(transactions select: [ :aTransaction | aTransaction class = Deposit ]; 
				sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ])
	- (transactions select: [ :aTransaction | aTransaction class = Withdraw ]; 
				sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]).! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'VP 11/2/2020 19:22:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'VP 11/2/2020 19:22:35'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'VP 11/2/2020 19:22:35'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'VP 11/2/2020 19:22:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'VP 11/2/2020 19:22:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'VP 11/2/2020 19:22:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'VP 11/2/2020 19:22:35'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'VP 11/2/2020 19:22:39'!
FAILURE!

(transactions select: [ :aTransaction | aTransaction class = Deposit ]; 
				sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ])!

(transactions select: [ :aTransaction | aTransaction class = Withdraw ]; 
				sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]).!

aTransaction class!

aTransaction class = Deposit!

aTransaction!

transactions select: [ :aTransaction | aTransaction class = Deposit ]!

(transactions select: [ :aTransaction | aTransaction class = Deposit ]; 
				sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ])!

(transactions select: [ :aTransaction | aTransaction class = Withdraw ]; 
				sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ])!

((transactions select: [ :aTransaction | aTransaction class = Withdraw ]) 
				sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ])!

((transactions select: [ :aTransaction | aTransaction class = Deposit ])
				sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ])
	- ((transactions select: [ :aTransaction | aTransaction class = Withdraw ]) 
				sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]).!
!ReceptiveAccount methodsFor: 'balance' stamp: 'VP 11/2/2020 19:26:15' prior: 50880632!
balance

	^((transactions select: [ :aTransaction | aTransaction class = Deposit ])
				sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ])
	- ((transactions select: [ :aTransaction | aTransaction class = Withdraw ]) 
				sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]).! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'VP 11/2/2020 19:26:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'VP 11/2/2020 19:26:17'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'VP 11/2/2020 19:32:59'!
sumTransactionsOfType: aTransactionType

	^(transactions select: [ :aTransaction | aTransaction class = aTransactionType ])
				sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'VP 11/2/2020 19:33:36' prior: 50880710!
balance

	^(self sumTransactionsOfType: Deposit) + self sumTransactionsOfType: Withdraw.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'VP 11/2/2020 19:33:44'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'VP 11/2/2020 19:33:44'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'VP 11/2/2020 19:33:44'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'VP 11/2/2020 19:33:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'VP 11/2/2020 19:33:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'VP 11/2/2020 19:33:44'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'VP 11/2/2020 19:33:44'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'VP 11/2/2020 19:33:56' prior: 50880739!
balance

	^(self sumTransactionsOfType: Deposit) - self sumTransactionsOfType: Withdraw.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'VP 11/2/2020 19:33:58'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'VP 11/2/2020 19:33:58'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'VP 11/2/2020 19:33:58'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'VP 11/2/2020 19:33:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'VP 11/2/2020 19:33:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'VP 11/2/2020 19:33:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'VP 11/2/2020 19:33:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'VP 11/2/2020 19:34:00'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'VP 11/2/2020 19:34:14' prior: 50880771!
balance

	^(self sumTransactionsOfType: Deposit) - (self sumTransactionsOfType: Withdraw).! !

	^(self sumTransactionsOfType: Deposit) - (self sumTransactionsOfType: Withdraw).!
!ReceptiveAccount methodsFor: 'balance -- private' stamp: 'VP 11/2/2020 19:34:28' prior: 50880730!
sumTransactionsOfType: aTransactionType

	^(transactions select: [ :aTransaction | aTransaction class = aTransactionType ])
				sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].! !
!ReceptiveAccount methodsFor: 'balance -- private' stamp: 'VP 11/2/2020 19:34:46' prior: 50880816!
sumTransactionsOfType: aTransactionType

	^(transactions select: [ :aTransaction | aTransaction class = aTransactionType ])
				 sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].! !
!ReceptiveAccount methodsFor: 'balance -- private' stamp: 'VP 11/2/2020 19:34:51' prior: 50880826!
sumTransactionsOfType: aTransactionType

	^(transactions select: [ :aTransaction | aTransaction class = aTransactionType ])
				sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].! !
!Deposit methodsFor: 'value' stamp: 'VP 11/2/2020 19:43:41'!
valueForBalance

	^ value! !

!methodRemoval: Deposit #valueForBalance stamp: 'VP 11/2/2020 19:44:00'!
valueForBalance

	^ value!

Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'VP 11/2/2020 19:45:15'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Account category: 'Portfolio-Ejercicio' stamp: 'VP 11/2/2020 19:45:32'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Account subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'VP 11/2/2020 19:45:37'!
Account subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'VP 11/2/2020 19:45:44'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRenamed: #Account as: #Accountable stamp: 'VP 11/2/2020 19:46:08'!
Smalltalk renameClassNamed: #Account as: #Accountable!
!Accountable methodsFor: 'nil' stamp: 'VP 11/2/2020 19:46:27'!
balance

	self subclassResponsibility.! !
!Accountable methodsFor: 'balance' stamp: 'VP 11/2/2020 19:47:01'!
hasRegistered: aTransaction

	self subclassResponsibility.
! !
!Accountable methodsFor: 'testing' stamp: 'VP 11/2/2020 19:47:40'!
register: aTransaction

	self subclassResponsibility.
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'VP 11/2/2020 19:48:10' prior: 50880580!
transactions

	^ transactions copy! !
!Accountable methodsFor: 'transactions' stamp: 'VP 11/2/2020 19:48:29'!
transactions

	self subclassResponsibility.
! !

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'VP 11/2/2020 19:50:18'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'VP 11/2/2020 19:51:34'!
test01EmptyPortfolioBalanceIsZero

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: 0 equals: portfolio balance.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/2/2020 19:51:35'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'VP 11/2/2020 19:51:41' overrides: 50880902!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'balance' stamp: 'VP 11/2/2020 19:51:49' prior: 50880946 overrides: 50880902!
balance
	
	^0.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/2/2020 19:51:50'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/2/2020 19:51:50'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VP 11/2/2020 19:53:52'!
test02SingleAccountPortfolioBalanceIsAccountBalance

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: 
	
	self assert: 0 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VP 11/2/2020 19:54:31' prior: 50880961!
test02SingleAccountPortfolioBalanceIsAccountBalance

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio add: account.
	
	self assert: 100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VP 11/2/2020 19:54:48' prior: 50880971!
test02SingleAccountPortfolioBalanceIsAccountBalance

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio add: account.
	
	self assert: account balance equals: portfolio balance.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/2/2020 19:54:50'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/2/2020 19:54:50'!
ERROR!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/2/2020 19:54:50'!
ERROR!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/2/2020 19:54:57'!
ERROR!
!Portfolio methodsFor: 'xxx' stamp: 'VP 11/2/2020 19:55:31'!
add: aReceptiveAccount 
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'VP 11/2/2020 19:58:23' prior: 50880807 overrides: 50880902!
balance
	^transactions inject: 0 into: [ :acc :aTransaction | aTransaction valueForBalance ].


	"^(self sumTransactionsOfType: Deposit) - (self sumTransactionsOfType: Withdraw)."! !
!Deposit methodsFor: 'value' stamp: 'VP 11/2/2020 19:58:45'!
valueForBalance

	^ value! !
!Withdraw methodsFor: 'value' stamp: 'VP 11/2/2020 19:58:52'!
valueForBalance

	^ value! !
!Withdraw methodsFor: 'value' stamp: 'VP 11/2/2020 19:58:54' prior: 50881024!
valueForBalance

	^ -1 * value! !
!Withdraw methodsFor: 'value' stamp: 'VP 11/2/2020 19:59:11' prior: 50881028!
valueForBalance

	^ -1 * value.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'VP 11/2/2020 20:10:26' prior: 50881013 overrides: 50880902!
balance

	^transactions inject: 0 into: [ :currentBalance :aTransaction | aTransaction operateInBalance: currentBalance ].
	"| xxx |
	
	xxx := 0.
	
	transactions do: [ :aTransaction | aTransaction operateInBalance: xxx ].
	
	^xxx.

	"


	"^(self sumTransactionsOfType: Deposit) - (self sumTransactionsOfType: Withdraw)."! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'VP 11/2/2020 20:10:44' prior: 50881037 overrides: 50880902!
balance

	^transactions inject: 0 into: [ :currentBalance :aTransaction | aTransaction operateOnBalance: currentBalance ].! !
!Deposit methodsFor: 'value' stamp: 'VP 11/2/2020 20:11:02'!
operateOnBalance: balance

	^balance - value.! !
!Deposit methodsFor: 'operation' stamp: 'VP 11/2/2020 20:11:23' prior: 50881057!
operateOnBalance: balance

	^balance + value.! !
!Withdraw methodsFor: 'value' stamp: 'VP 11/2/2020 20:11:30'!
operateOnBalance: balance

	^balance - value.! !

!methodRemoval: Withdraw #valueForBalance stamp: 'VP 11/2/2020 20:11:48'!
valueForBalance

	^ -1 * value.!

!methodRemoval: Deposit #valueForBalance stamp: 'VP 11/2/2020 20:11:50'!
valueForBalance

	^ value!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'VP 11/2/2020 20:11:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'VP 11/2/2020 20:11:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'VP 11/2/2020 20:11:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'VP 11/2/2020 20:11:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'VP 11/2/2020 20:11:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'VP 11/2/2020 20:11:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'VP 11/2/2020 20:11:55'!
PASSED!
!AccountTransaction methodsFor: 'value' stamp: 'VP 11/2/2020 20:12:22'!
operateOnBalance: balance

	^self subclassResponsibility.! !

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/2/2020 20:16:06'!
ERROR!

Accountable subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'VP 11/2/2020 20:16:49'!
Accountable subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'VP 11/2/2020 20:17:11'!
Accountable subclass: #Portfolio
	instanceVariableNames: 'accounts account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'xxx' stamp: 'VP 11/2/2020 20:17:09' prior: 50881007!
add: aReceptiveAccount 
	
	account := aReceptiveAccount.! !

Accountable subclass: #Portfolio
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'VP 11/2/2020 20:17:15'!
Accountable subclass: #Portfolio
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'balance' stamp: 'VP 11/2/2020 20:17:42' prior: 50880951 overrides: 50880902!
balance
	
	^account = nil ifTrue: [^0] ifFalse: [^account balance].! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/2/2020 20:17:45'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/2/2020 20:17:45'!
PASSED!
!Portfolio methodsFor: 'balance' stamp: 'VP 11/2/2020 20:30:07' prior: 50881150 overrides: 50880902!
balance
	
	^account = nil ifTrue: [0] ifFalse: [account balance].! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/2/2020 20:30:08'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/2/2020 20:30:08'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VP 11/2/2020 20:31:24'!
test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio add: account.
	
	self assert: account balance equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VP 11/2/2020 20:32:37' prior: 50881175!
test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed

	| portfolio1 portfolio2 account1 account2 |
	
	portfolio1 := Portfolio new.
	account1 := ReceptiveAccount new.
	Deposit register: 100 on: account1.
	
	portfolio2 := Portfolio new.
	account2 := ReceptiveAccount new.
	Deposit register: 50 on: account2.
	
	portfolio2 add: account2.
	portfolio1 add: account1.
	portfolio1 add: portfolio2.
	
	self assert: account1 balance + account2 balance equals: portfolio1 balance.! !

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/2/2020 20:32:41'!
FAILURE!
!Portfolio methodsFor: 'xxx' stamp: 'VP 11/2/2020 20:33:58' prior: 50881132!
add: aReceptiveAccount 
	
	account := aReceptiveAccount.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'VP 11/2/2020 20:34:00'!
Accountable subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'VP 11/2/2020 20:34:00' prior: 50881163 overrides: 50880902!
balance
	
	^accounts = nil ifTrue: [0] ifFalse: [accounts balance].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'VP 11/2/2020 20:34:00' prior: 50881211!
add: aReceptiveAccount 
	
	accounts := aReceptiveAccount.! !
!Portfolio methodsFor: 'xxx' stamp: 'VP 11/2/2020 20:34:20' overrides: 16896425!
initialize

	accounts := OrderedCollection new.! !
!Portfolio methodsFor: 'xxx' stamp: 'VP 11/2/2020 20:34:32' prior: 50881230!
add: anAccount 
	
	accounts := anAccount..! !
!Portfolio methodsFor: 'xxx' stamp: 'VP 11/2/2020 20:34:37' prior: 50881239!
add: anAccount 
	
	accounts add: anAccount..! !
!Portfolio methodsFor: 'xxx' stamp: 'VP 11/2/2020 20:34:39' prior: 50881243!
add: anAccount 
	
	accounts add: anAccount.! !
!Portfolio methodsFor: 'balance' stamp: 'VP 11/2/2020 20:35:51' prior: 50881224 overrides: 50880902!
balance
	
	^accounts inject: 0 into: [ :currentBalance :anAccount | currentBalance + anAccount balance ].! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/2/2020 20:36:20'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/2/2020 20:36:20'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/2/2020 20:36:20'!
PASSED!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'VP 11/2/2020 20:36:48'!
Accountable subclass: #Portfolio
	instanceVariableNames: 'accountables'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'VP 11/2/2020 20:36:48' prior: 50881247!
add: anAccount 
	
	accountables add: anAccount.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'VP 11/2/2020 20:36:48' prior: 50881235 overrides: 16896425!
initialize

	accountables := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'VP 11/2/2020 20:36:48' prior: 50881252 overrides: 50880902!
balance
	
	^accountables inject: 0 into: [ :currentBalance :anAccount | currentBalance + anAccount balance ].! !
!Portfolio methodsFor: 'xxx' stamp: 'VP 11/2/2020 20:37:02' prior: 50881278!
add: anAccountable 
	
	accountables add: anAccountable.! !

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'VP 11/2/2020 20:40:18'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'accountWith100'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'VP 11/2/2020 20:40:19'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'accountWith100 accountWith50'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'VP 11/2/2020 20:40:20'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'accountWith100 accountWith50 portfolioWith50WorthAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'test -- balance' stamp: 'VP 11/2/2020 20:40:16' overrides: 16927572!
setUp
	
	accountWith100 := ReceptiveAccount new.
	Deposit register: 100 on: accountWith100.
	
	accountWith50 := ReceptiveAccount new.
	Deposit register: 50 on: accountWith50.
	
	portfolioWith50WorthAccount := Portfolio new.
	portfolioWith50WorthAccount add: accountWith50.! !
!PortfolioTest methodsFor: 'test -- balance' stamp: 'VP 11/2/2020 20:40:40' prior: 50880982!
test02SingleAccountPortfolioBalanceIsAccountBalance

	| portfolio |
	
	portfolio := Portfolio new.
	
	portfolio add: accountWith100.
	
	self assert: accountWith100 balance equals: portfolio balance.! !
!PortfolioTest methodsFor: 'test -- balance' stamp: 'VP 11/2/2020 20:41:16' prior: 50881188!
test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed

	| portfolio |
	
	portfolio := Portfolio new.
	
	portfolio add: accountWith100.
	portfolio add: portfolioWith50WorthAccount.
	
	self assert: accountWith100 balance + accountWith50 balance equals: portfolio balance.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/2/2020 20:41:22'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/2/2020 20:41:22'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/2/2020 20:41:22'!
PASSED!

!methodRemoval: Accountable #register: stamp: 'VP 11/2/2020 20:42:29'!
register: aTransaction

	self subclassResponsibility.
!

----SNAPSHOT----(2 November 2020 20:42:34) CuisUniversity-4384.image priorSource: 17558832!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/2/2020 20:42:38'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/2/2020 20:42:38'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/2/2020 20:42:38'!
PASSED!
!PortfolioTest methodsFor: 'test -- balance' stamp: 'VP 11/2/2020 20:45:17'!
test04PortfolioDoesNotHaveASpecificTransactionRegistered

	| portfolio |
	
	portfolio := Portfolio new.
	
	portfolio add: accountWith100.
	portfolio add: portfolioWith50WorthAccount.
	
	self assert: accountWith100 balance + accountWith50 balance equals: portfolio balance.! !
!PortfolioTest methodsFor: 'test -- balance' stamp: 'VP 11/2/2020 20:48:06' prior: 50881391!
test04PortfolioDoesNotHaveASpecificTransactionRegistered

	| portfolio transaction |
	
	portfolio := Portfolio new.
	
	portfolio add: accountWith100.
	portfolio add: portfolioWith50WorthAccount.
	
	transaction := Deposit for: 2000.
	
	self deny: (portfolio hasRegistered: transaction).! !

!testRun: #PortfolioTest #test04PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/2/2020 20:48:07'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'VP 11/2/2020 20:48:25' overrides: 50880906!
hasRegistered: aDeposit 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'transactions' stamp: 'VP 11/2/2020 20:48:39' prior: 50881419 overrides: 50880906!
hasRegistered: aDeposit 
	
	^false.! !

!testRun: #PortfolioTest #test04PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/2/2020 20:48:43'!
PASSED!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'VP 11/2/2020 20:50:36'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'accountWith100 accountWith50 portfolioWith50WorthAccount depositOf100'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'VP 11/2/2020 20:50:37'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'accountWith100 accountWith50 portfolioWith50WorthAccount depositOf100 depositOf50'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'test -- hasRegistered' stamp: 'VP 11/2/2020 20:50:34'!
test05PortfolioHasASpecificTransactionRegistered

	| portfolio |
	
	portfolio := Portfolio new.
	
	portfolio add: accountWith100.
	portfolio add: portfolioWith50WorthAccount.
	
	self assert: (portfolio hasRegistered: depositOf100).
	self assert: (portfolio hasRegistered: depositOf50).! !
!PortfolioTest methodsFor: 'setUp/tearDown' stamp: 'VP 11/2/2020 20:50:55' prior: 50881327 overrides: 16927572!
setUp
	
	accountWith100 := ReceptiveAccount new.
	depositOf100 := Deposit register: 100 on: accountWith100.
	
	accountWith50 := ReceptiveAccount new.
	depositOf50 := Deposit register: 50 on: accountWith50.
	
	portfolioWith50WorthAccount := Portfolio new.
	portfolioWith50WorthAccount add: accountWith50.! !

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/2/2020 20:50:59'!
FAILURE!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/2/2020 20:51:06'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'VP 11/2/2020 20:58:32' prior: 50881425 overrides: 50880906!
hasRegistered: aTransaction 
	
	^accountables anySatisfy: [ :accountable | accountable hasRegistered: aTransaction ].! !

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/2/2020 20:58:34'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/2/2020 20:58:34'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/2/2020 20:58:34'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/2/2020 20:58:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/2/2020 20:58:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/2/2020 20:58:34'!
PASSED!
!PortfolioTest methodsFor: 'test -- hasRegistered' stamp: 'VP 11/2/2020 21:01:24'!
test06EmptyPortfolioHasZeroTransactions

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio transactions isEmpty.! !

!testRun: #PortfolioTest #test06EmptyPortfolioHasZeroTransactions stamp: 'VP 11/2/2020 21:01:25'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'VP 11/2/2020 21:01:35' overrides: 50880920!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'transactions' stamp: 'VP 11/2/2020 21:01:45' prior: 50881527 overrides: 50880920!
transactions
	
	^OrderedCollection new.! !

!testRun: #PortfolioTest #test06EmptyPortfolioHasZeroTransactions stamp: 'VP 11/2/2020 21:01:46'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/2/2020 21:01:46'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/2/2020 21:01:46'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/2/2020 21:01:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/2/2020 21:01:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/2/2020 21:01:46'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasZeroTransactions stamp: 'VP 11/2/2020 21:01:46'!
PASSED!
!PortfolioTest methodsFor: 'test -- hasRegistered' stamp: 'VP 11/2/2020 21:03:32' prior: 50881403!
test04PortfolioDoesNotHaveASpecificTransactionRegistered

	| portfolio transaction |
	
	portfolio := Portfolio new.
	
	transaction := Deposit for: 2000.
	
	self deny: (portfolio hasRegistered: transaction).! !
!PortfolioTest methodsFor: 'test -- hasRegistered' stamp: 'VP 11/2/2020 21:03:47' prior: 50881563!
test04PortfolioDoesNotHaveASpecificTransactionRegistered

	| portfolio transaction |
	
	portfolio := Portfolio new.
	
	portfolio add: accountWith100.
	portfolio add: portfolioWith50WorthAccount.
	
	transaction := Deposit for: 2000.
	
	self deny: (portfolio hasRegistered: transaction).! !
!PortfolioTest methodsFor: 'test -- hasRegistered' stamp: 'VP 11/2/2020 21:03:56'!
test05PortfolioDoesNotHaveASpecificTransactionRegistered

	| portfolio transaction |
	
	portfolio := Portfolio new.
	
	portfolio add: accountWith100.
	portfolio add: portfolioWith50WorthAccount.
	
	transaction := Deposit for: 2000.
	
	self deny: (portfolio hasRegistered: transaction).! !

!methodRemoval: PortfolioTest #test04PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/2/2020 21:03:56'!
test04PortfolioDoesNotHaveASpecificTransactionRegistered

	| portfolio transaction |
	
	portfolio := Portfolio new.
	
	portfolio add: accountWith100.
	portfolio add: portfolioWith50WorthAccount.
	
	transaction := Deposit for: 2000.
	
	self deny: (portfolio hasRegistered: transaction).!
!PortfolioTest methodsFor: 'test -- hasRegistered' stamp: 'VP 11/2/2020 21:04:04'!
test06PortfolioDoesNotHaveASpecificTransactionRegistered

	| portfolio transaction |
	
	portfolio := Portfolio new.
	
	portfolio add: accountWith100.
	portfolio add: portfolioWith50WorthAccount.
	
	transaction := Deposit for: 2000.
	
	self deny: (portfolio hasRegistered: transaction).! !

!methodRemoval: PortfolioTest #test05PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/2/2020 21:04:04'!
test05PortfolioDoesNotHaveASpecificTransactionRegistered

	| portfolio transaction |
	
	portfolio := Portfolio new.
	
	portfolio add: accountWith100.
	portfolio add: portfolioWith50WorthAccount.
	
	transaction := Deposit for: 2000.
	
	self deny: (portfolio hasRegistered: transaction).!
!PortfolioTest methodsFor: 'test -- hasRegistered' stamp: 'VP 11/2/2020 21:04:22'!
test04EmptyPortfolioDoesNotHaveAnyTransaction

	| portfolio transaction |
	
	portfolio := Portfolio new.
	
	transaction := Deposit for: 2000.
	
	self deny: (portfolio hasRegistered: transaction).! !

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/2/2020 21:04:24'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/2/2020 21:04:24'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/2/2020 21:04:24'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/2/2020 21:04:26'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/2/2020 21:04:26'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/2/2020 21:04:26'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/2/2020 21:04:26'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/2/2020 21:04:26'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasZeroTransactions stamp: 'VP 11/2/2020 21:04:26'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/2/2020 21:04:26'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/2/2020 21:04:27'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/2/2020 21:04:27'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/2/2020 21:04:27'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/2/2020 21:04:27'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/2/2020 21:04:27'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasZeroTransactions stamp: 'VP 11/2/2020 21:04:27'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/2/2020 21:04:27'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/2/2020 21:04:29'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/2/2020 21:04:29'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/2/2020 21:04:29'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/2/2020 21:04:29'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/2/2020 21:04:29'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasZeroTransactions stamp: 'VP 11/2/2020 21:04:29'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/2/2020 21:04:29'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/2/2020 21:04:30'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/2/2020 21:04:30'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/2/2020 21:04:30'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/2/2020 21:04:30'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/2/2020 21:04:30'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasZeroTransactions stamp: 'VP 11/2/2020 21:04:30'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/2/2020 21:04:30'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/2/2020 21:04:32'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/2/2020 21:04:32'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/2/2020 21:04:32'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/2/2020 21:04:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/2/2020 21:04:32'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasZeroTransactions stamp: 'VP 11/2/2020 21:04:32'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/2/2020 21:04:32'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/2/2020 21:04:32'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/2/2020 21:04:32'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/2/2020 21:04:32'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/2/2020 21:04:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/2/2020 21:04:32'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasZeroTransactions stamp: 'VP 11/2/2020 21:04:32'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/2/2020 21:04:32'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/2/2020 21:04:33'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/2/2020 21:04:33'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/2/2020 21:04:33'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/2/2020 21:04:33'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/2/2020 21:04:33'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasZeroTransactions stamp: 'VP 11/2/2020 21:04:33'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/2/2020 21:04:33'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/2/2020 21:04:33'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/2/2020 21:04:33'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/2/2020 21:04:33'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/2/2020 21:04:33'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/2/2020 21:04:33'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasZeroTransactions stamp: 'VP 11/2/2020 21:04:33'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/2/2020 21:04:33'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/2/2020 21:04:53'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/2/2020 21:04:53'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/2/2020 21:04:53'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/2/2020 21:04:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/2/2020 21:04:53'!
PASSED!

!testRun: #PortfolioTest #test06EmptyPortfolioHasZeroTransactions stamp: 'VP 11/2/2020 21:04:53'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/2/2020 21:04:53'!
PASSED!
!PortfolioTest methodsFor: 'test -- transactions' stamp: 'VP 11/2/2020 21:05:06'!
test07EmptyPortfolioHasZeroTransactions

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio transactions isEmpty.! !

!methodRemoval: PortfolioTest #test06EmptyPortfolioHasZeroTransactions stamp: 'VP 11/2/2020 21:05:06'!
test06EmptyPortfolioHasZeroTransactions

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio transactions isEmpty.!
!PortfolioTest methodsFor: 'test -- transactions' stamp: 'VP 11/2/2020 21:06:36'!
test08PortfolioHasAllSubAccountablesTransactions

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: portfolio transactions isEmpty.! !
!PortfolioTest methodsFor: 'test -- transactions' stamp: 'VP 11/2/2020 21:07:29' prior: 50881903!
test08PortfolioHasAllSubAccountablesTransactions

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: accountWith100.
	portfolio add: portfolioWith50WorthAccount.
	
	self assert: portfolio transactions includes: depositOf100.
	self assert: portfolio transactions includes: depositOf50.! !

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/2/2020 21:07:56'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'VP 11/2/2020 21:08:55' prior: 50881532 overrides: 50880920!
transactions
	
	^accountables collect: [ :anAccountable | anAccountable transactions ].! !

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/2/2020 21:09:02'!
FAILURE!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/2/2020 21:09:49'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'VP 11/2/2020 21:12:42' prior: 50881928 overrides: 50880920!
transactions
	
	^accountables inject:OrderedCollection new into: [ :allTransactions :anAccountable | allTransactions addAll: anAccountable transactions ].! !

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/2/2020 21:12:43'!
FAILURE!

portfolio transactions!

portfolio transactions!

allTransactions!

anAccountable transactions!

self at: 1!

self transactions at: 0!

self transactions at: 1!

accountables inject:OrderedCollection new into: [ :allTransactions :anAccountable | allTransactions addAll: anAccountable transactions ]!

self at: 0!

self at: 1!

OrderedCollection new!

|coll|
coll := OrderedCollection new.
coll add: 'h'.

self addAll: coll!

|coll coll2|
coll := OrderedCollection new.
coll add: 'h'.

coll2 := OrderedCollection new.
coll2 add: 'o'.


self addAll: coll.
self addAll: coll2.!

|coll coll2|
coll := OrderedCollection new.
coll add: 'h'.

coll2 := OrderedCollection new.
coll2 add: 'o'.


self addAll: coll.
self addAll: coll2.!

|coll coll2|
coll := OrderedCollection new.
coll add: 'h'.

coll2 := OrderedCollection new.
coll2 add: 'o'.

self addAll: coll2.
self addAll: coll.!

|coll coll2|
coll := OrderedCollection new.
coll add: 'h'.

coll2 := OrderedCollection new.
coll2 add: 'o'.

self addAllFirst: coll2.
self addAllFirst: coll.!

|coll coll2|
coll := OrderedCollection new.
coll add: 'h'.

coll2 := OrderedCollection new.
coll2 add: 'o'.

(self addAll: coll2) addAll: coll.!

|coll coll2|
coll := OrderedCollection new.
coll add: 'h'.

coll2 := OrderedCollection new.
coll2 add: 'o'.

((self addAll: coll2) addAll: coll).!

|coll coll2|
coll := OrderedCollection new.
coll add: 'h'.

coll2 := OrderedCollection new.
coll2 add: 'o'.

self addAll: coll2!

|coll coll2|
coll := OrderedCollection new.
coll add: 'h'.

coll2 := OrderedCollection new.
coll2 add: 'o'.

self addAll: coll2!

|coll coll2|
coll := OrderedCollection new.
coll add: 'h'.

coll2 := OrderedCollection new.
coll2 add: 'o'.

self addAll: coll!
!Portfolio methodsFor: 'transactions' stamp: 'VP 11/2/2020 21:23:31' prior: 50881942 overrides: 50880920!
transactions
	
	^accountables inject:OrderedCollection new into: [ :allTransactions :anAccountable | allTransactions addAll: anAccountable transactions. allTransactions ].! !

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/2/2020 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/2/2020 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/2/2020 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/2/2020 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/2/2020 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/2/2020 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/2/2020 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/2/2020 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/2/2020 21:23:33'!
PASSED!

----QUIT----(2 November 2020 22:04:59) CuisUniversity-4384.image priorSource: 17591227!

----STARTUP---- (7 November 2020 10:43:54) as /Users/vpomsztein/Documents/Facu/ISW1/PracticaParcial/CuisUniversity-4384.image!

!PortfolioTest methodsFor: 'test -- transactions' stamp: 'VP 11/7/2020 10:48:46'!
test09PortfolioBlocksAddingDuplicatedDirectAccount

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: accountWith100.
	portfolio add: portfolioWith50WorthAccount.
	
	self assert: portfolio transactions includes: depositOf100.
	self assert: portfolio transactions includes: depositOf50.! !
!PortfolioTest methodsFor: 'test -- transactions' stamp: 'VP 11/7/2020 10:50:05' prior: 50882056!
test09PortfolioBlocksAddingDuplicatedDirectAccount

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: accountWith100.
	
	self should: [ portfolio add: accountWith100 ]
		raise: Error
		messageText: Portfolio duplicatedAccountErrorMessage.
	
	self assert: portfolio transactions includes: depositOf100.
	self assert: portfolio transactions includes: depositOf50.! !
!PortfolioTest methodsFor: 'test -- transactions' stamp: 'VP 11/7/2020 10:53:51' prior: 50882069!
test09PortfolioBlocksAddingDuplicatedDirectAccount

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: accountWith100.
	
	self should: [ portfolio add: accountWith100 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self assert: 100 equals: portfolio balance.
		].! !
!PortfolioTest methodsFor: 'test -- transactions' stamp: 'VP 11/7/2020 10:54:14' prior: 50882084!
test09PortfolioBlocksAddingDuplicatedDirectAccount

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: accountWith100.
	
	self should: [ portfolio add: accountWith100 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self assert: accountWith100 balance equals: portfolio balance.
		].! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 10:54:36'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 10:54:36'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 10:54:36'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 10:54:36'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 10:54:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 10:54:36'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 10:54:36'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 10:54:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 10:54:36'!
FAILURE!

!testRun: #PortfolioTest #test09PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 10:54:36'!
FAILURE!
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 10:55:47' prior: 50881296!
add: anAccountable 
	
	(accountables includes: anAccountable) ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.! !

!testRun: #PortfolioTest #test09PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 10:55:50'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 10:56:31'!
ERROR!
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 10:56:46' prior: 50882151!
add: anAccountable 
	
	(accountables includes: anAccountable) ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 10:56:49'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 10:56:49'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 10:56:49'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 10:56:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 10:56:49'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 10:56:49'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 10:56:49'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 10:56:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 10:56:49'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 10:56:49'!
ERROR!
!Portfolio class methodsFor: 'error messages' stamp: 'VP 11/7/2020 10:57:00'!
duplicatedAccountErrorMessage
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'error messages' stamp: 'VP 11/7/2020 10:57:51' prior: 50882212!
duplicatedAccountErrorMessage
	^'Can not add the requested account, as it is already in the portfolio'! !
!Portfolio class methodsFor: 'error messages' stamp: 'VP 11/7/2020 10:57:57' prior: 50882217!
duplicatedAccountErrorMessage
	^'Can not add the requested accountable, as it is already in the portfolio'! !

!testRun: #PortfolioTest #test09PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 10:58:00'!
FAILURE!

self messageText!

self message !
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 10:59:13' prior: 50882099!
test09PortfolioBlocksAddingDuplicatedDirectAccount

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: accountWith100.
	
	self should: [ portfolio add: accountWith100 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self assert: accountWith100 balance equals: portfolio balance.
		].! !

Portfolio duplicatedAccountErrorMessage!
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 10:59:24' prior: 50882236!
test09PortfolioBlocksAddingDuplicatedDirectAccount

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: accountWith100.
	
	self should: [ portfolio add: accountWith100 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self assert: accountWith100 balance equals: portfolio balance.
		].! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 10:59:28'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 10:59:28'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 10:59:28'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 10:59:28'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 10:59:28'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 10:59:28'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 10:59:28'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 10:59:28'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 10:59:28'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 10:59:31'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 10:59:31'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 10:59:31'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 10:59:31'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 10:59:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 10:59:31'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 10:59:31'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 10:59:31'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 10:59:31'!
PASSED!
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 11:00:21'!
test10PortfolioCanNotAddItself

	| portfolio |
	
	portfolio := Portfolio new.
	
	self should: [ portfolio add: portfolio ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self assert: accountWith100 balance equals: portfolio balance.
		].! !
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 11:02:07' prior: 50882334!
test10PortfolioCanNotAddItself

	| portfolio |
	
	portfolio := Portfolio new.
	
	self should: [ portfolio add: portfolio ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self assert: 0 equals: portfolio balance.
		].! !

!testRun: #PortfolioTest #test10PortfolioCanNotAddItself stamp: 'VP 11/7/2020 11:02:09'!
FAILURE!
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 11:02:49' prior: 50882167!
add: anAccountable 
	
	((anAccountable = self) or: (accountables includes: anAccountable)) ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.! !

!testRun: #PortfolioTest #test10PortfolioCanNotAddItself stamp: 'VP 11/7/2020 11:02:51'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 11:02:51'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 11:02:51'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 11:02:51'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 11:02:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 11:02:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 11:02:51'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 11:02:51'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 11:02:51'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 11:02:51'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotAddItself stamp: 'VP 11/7/2020 11:02:51'!
PASSED!
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 11:03:44'!
test09PortfolioCanNotAddItself

	| portfolio |
	
	portfolio := Portfolio new.
	
	self should: [ portfolio add: portfolio ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self assert: 0 equals: portfolio balance.
		].! !

!methodRemoval: PortfolioTest #test10PortfolioCanNotAddItself stamp: 'VP 11/7/2020 11:03:44'!
test10PortfolioCanNotAddItself

	| portfolio |
	
	portfolio := Portfolio new.
	
	self should: [ portfolio add: portfolio ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self assert: 0 equals: portfolio balance.
		].!
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 11:03:50'!
test10PortfolioBlocksAddingDuplicatedDirectAccount

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: accountWith100.
	
	self should: [ portfolio add: accountWith100 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self assert: accountWith100 balance equals: portfolio balance.
		].! !

!methodRemoval: PortfolioTest #test09PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 11:03:50'!
test09PortfolioBlocksAddingDuplicatedDirectAccount

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: accountWith100.
	
	self should: [ portfolio add: accountWith100 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self assert: accountWith100 balance equals: portfolio balance.
		].!
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 11:04:49' prior: 50882437!
test10PortfolioBlocksAddingDuplicatedDirectAccount

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: portfolioWith50WorthAccount.
	
	self should: [ portfolio add: accountWith50 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self assert: portfolioWith50WorthAccount balance equals: portfolio balance.
		].! !
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 11:05:00'!
test11PortfolioBlocksAddingDuplicatedDirectAccount

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: portfolioWith50WorthAccount.
	
	self should: [ portfolio add: accountWith50 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self assert: portfolioWith50WorthAccount balance equals: portfolio balance.
		].! !
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 11:04:49' prior: 50882468!
test10PortfolioBlocksAddingDuplicatedDirectAccount

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: portfolioWith50WorthAccount.
	
	self should: [ portfolio add: accountWith50 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self assert: portfolioWith50WorthAccount balance equals: portfolio balance.
		].! !
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 11:03:50' prior: 50882500!
test10PortfolioBlocksAddingDuplicatedDirectAccount

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: accountWith100.
	
	self should: [ portfolio add: accountWith100 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self assert: accountWith100 balance equals: portfolio balance.
		].! !
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 11:05:54'!
test11PortfolioBlocksAddingDuplicatedIndirectAccount

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: portfolioWith50WorthAccount.
	
	self should: [ portfolio add: accountWith50 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self assert: portfolioWith50WorthAccount balance equals: portfolio balance.
		].! !

!methodRemoval: PortfolioTest #test11PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 11:05:54'!
test11PortfolioBlocksAddingDuplicatedDirectAccount

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: portfolioWith50WorthAccount.
	
	self should: [ portfolio add: accountWith50 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self assert: portfolioWith50WorthAccount balance equals: portfolio balance.
		].!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 11:06:12'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 11:06:12'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 11:06:12'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 11:06:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 11:06:12'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 11:06:12'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 11:06:12'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 11:06:12'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 11:06:12'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 11:06:12'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 11:06:12'!
FAILURE!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 11:06:12'!
FAILURE!
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 11:07:17'!
includes: anAccountable

	^ accountables includes: anAccountable! !
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 11:07:17' prior: 50882364!
add: anAccountable 
	
	((anAccountable = self) or: (self includes: anAccountable)) ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.! !
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 11:10:02' prior: 50882607!
includes: anAccountable

	^(accountables includes: anAccountable) 
		or: [ accountables anySatisfy: [ :childAccountable | childAccountable includes: anAccountable] ].! !
!ReceptiveAccount methodsFor: 'balance -- private' stamp: 'VP 11/7/2020 11:11:11'!
includes: anAccountable

	^false.! !
!Accountable methodsFor: 'testing' stamp: 'VP 11/7/2020 11:11:47'!
includes: anAccountable

	self subclassResponsibility.
! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 11:12:01'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 11:12:01'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 11:12:01'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 11:12:01'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 11:12:01'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 11:12:01'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 11:12:01'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 11:12:01'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 11:12:01'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 11:12:01'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 11:12:01'!
PASSED!
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 11:24:56'!
test12PortfolioBlocksAddingAccountableDirectlyReferencingIt

	" Caso1: Te agregan a alguien que te apunta a vos / tiene repetida una cuenta que ya ten�s
	  Caso2: A alguien a quien ya apunt�s le agregan una referencia a vos / una cuenta que ya ten�s "

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio2 add: portfolio1.
	
	self should: [ portfolio1 add: portfolio2 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self assert: (portfolio1 includes: portfolio2).
			self deny: (portfolio2 includes: portfolio1).
		].! !

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 11:24:58'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'VP 11/7/2020 11:26:06' prior: 50882621 overrides: 50882633!
includes: anAccountable

	^(accountables includes: anAccountable) 
		or: [ accountables anySatisfy: [ :childAccountable | 
			childAccountable = self or: [childAccountable includes: anAccountable]] 
		].! !

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 11:26:08'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'VP 11/7/2020 11:27:27' prior: 50882706 overrides: 50882633!
includes: anAccountable

	^(accountables includes: anAccountable) 
		or: [ accountables anySatisfy: [ :childAccountable | 
			childAccountable includes: anAccountable]
		] or: [ 
			anAccountable includes: self.
		].! !

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 11:27:37'!
FAILURE!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 11:27:57'!
FAILURE!
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 11:28:45' prior: 50882612!
add: anAccountable 
	
	((anAccountable = self) or: [self includes: anAccountable]) ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 11:28:47'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 11:28:47'!
PASSED!
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 11:30:11' prior: 50882678!
test12PortfolioBlocksAddingAccountableDirectlyReferencingIt

	" Caso1: Te agregan a alguien que te apunta a vos / tiene repetida una cuenta que ya ten�s
	  Caso2: A alguien a quien ya apunt�s le agregan una referencia a vos / una cuenta que ya ten�s "

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio2 add: portfolio1.
	
	self should: [ self halt. portfolio1 add: portfolio2 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self assert: (portfolio1 includes: portfolio2).
			self deny: (portfolio2 includes: portfolio1).
		].! !
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 11:30:20' prior: 50882754!
test12PortfolioBlocksAddingAccountableDirectlyReferencingIt

	" Caso1: Te agregan a alguien que te apunta a vos / tiene repetida una cuenta que ya ten�s
	  Caso2: A alguien a quien ya apunt�s le agregan una referencia a vos / una cuenta que ya ten�s "

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio2 add: portfolio1.
	
	self should: [ portfolio1 add: portfolio2 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self assert: (portfolio1 includes: portfolio2).
			self deny: (portfolio2 includes: portfolio1).
		].! !
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 11:30:28' prior: 50882738!
add: anAccountable 
	self halt.
	((anAccountable = self) or: [self includes: anAccountable]) ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.! !

anAccountable = self!

----SNAPSHOT----(7 November 2020 11:35:11) CuisUniversity-4384.image priorSource: 17612754!
!Portfolio methodsFor: 'testing' stamp: 'VP 11/7/2020 11:36:42'!
includes: anAccountable xxxxx: yyyyy

	^self = yyyyy
		or: [(accountables includes: anAccountable)]
		or: [ accountables anySatisfy: [ :childAccountable | 
			childAccountable includes: anAccountable]
		] or: [ 
			anAccountable includes: self xxxxx: yyyyy.
		].! !
!Portfolio methodsFor: 'testing' stamp: 'VP 11/7/2020 11:37:13' prior: 50882720 overrides: 50882633!
includes: anAccountable

	^self includes: anAccountable xxxxx: nil.! !
!Portfolio methodsFor: 'testing' stamp: 'VP 11/7/2020 11:38:10' prior: 50882814!
includes: anAccountable xxxxx: yyyyy

	^[(accountables includes: anAccountable)]
		or: [ accountables anySatisfy: [ :childAccountable | 
			childAccountable = yyyyy or: [childAccountable includes: anAccountable]]
		] or: [ 
			anAccountable includes: self xxxxx: yyyyy.
		].! !
!Portfolio methodsFor: 'testing' stamp: 'VP 11/7/2020 11:38:13' prior: 50882826 overrides: 50882633!
includes: anAccountable

	^self includes: anAccountable xxxxx: self.! !
!Portfolio methodsFor: 'testing' stamp: 'VP 11/7/2020 11:38:43' prior: 50882831!
includes: anAccountable xxxxx: yyyyy

	^(accountables includes: anAccountable)
		or: [ accountables anySatisfy: [ :childAccountable | 
			childAccountable = yyyyy or: [childAccountable includes: anAccountable]]
		] or: [ 
			anAccountable includes: self xxxxx: yyyyy.
		].! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'VP 11/7/2020 11:39:40'!
includes: anAccountable xxxxx: yyyyy

	^false.! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'VP 11/7/2020 11:40:04' prior: 50882629 overrides: 50882633!
includes: anAccountable

	^self includes: anAccountable xxxxx: self.! !
!Accountable methodsFor: 'testing' stamp: 'VP 11/7/2020 11:40:19'!
includes: anAccountable xxxxx: yyyyy

	self subclassResponsibility.! !
!Portfolio methodsFor: 'testing -- private' stamp: 'VP 11/7/2020 11:41:43' prior: 50882848 overrides: 50882869!
includes: anAccountable xxxxx: yyyyy

	^(accountables includes: anAccountable)
		or: [ accountables anySatisfy: [ :childAccountable | 
			childAccountable = yyyyy or: [childAccountable includes: anAccountable xxxxx: yyyyy]]
		] or: [ 
			anAccountable includes: self xxxxx: yyyyy.
		].! !
!Portfolio methodsFor: 'testing -- private' stamp: 'VP 11/7/2020 11:43:18' prior: 50882875 overrides: 50882869!
includes: anAccountable xxxxx: yyyyy

	^(accountables includes: anAccountable)
		or: [ accountables anySatisfy: [ :childAccountable | 
			childAccountable = yyyyy or: [childAccountable includes: anAccountable]]
		] or: [ 
			anAccountable includes: self xxxxx: yyyyy.
		].! !
!Portfolio methodsFor: 'testing -- private' stamp: 'VP 11/7/2020 11:46:35' prior: 50882888 overrides: 50882869!
includes: anAccountable xxxxx: yyyyy

	^(accountables includes: anAccountable)
		or: [ accountables anySatisfy: [ :childAccountable | 
			childAccountable = yyyyy or: [childAccountable includes: anAccountable]]
		] or: [ 
			anAccountable = yyyyy or: [anAccountable includes: self xxxxx: yyyyy].
		].! !

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 11:46:37'!
ERROR!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 11:46:54'!
ERROR!
!Portfolio methodsFor: 'testing -- private' stamp: 'VP 11/7/2020 11:47:33' prior: 50882843 overrides: 50882633!
includes: anAccountable

	^(accountables includes: anAccountable)
		or: [ accountables anySatisfy: [ :childAccountable | 
			childAccountable includes: anAccountable]
		].! !

!methodRemoval: Portfolio #includes:xxxxx: stamp: 'VP 11/7/2020 11:47:37'!
includes: anAccountable xxxxx: yyyyy

	^(accountables includes: anAccountable)
		or: [ accountables anySatisfy: [ :childAccountable | 
			childAccountable = yyyyy or: [childAccountable includes: anAccountable]]
		] or: [ 
			anAccountable = yyyyy or: [anAccountable includes: self xxxxx: yyyyy].
		].!

!methodRemoval: ReceptiveAccount #includes:xxxxx: stamp: 'VP 11/7/2020 11:47:54'!
includes: anAccountable xxxxx: yyyyy

	^false.!
!ReceptiveAccount methodsFor: 'testing' stamp: 'VP 11/7/2020 11:47:58' prior: 50882864 overrides: 50882633!
includes: anAccountable

	^false.! !

!methodRemoval: Accountable #includes:xxxxx: stamp: 'VP 11/7/2020 11:48:07'!
includes: anAccountable xxxxx: yyyyy

	self subclassResponsibility.!
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 11:48:22' prior: 50882802!
add: anAccountable

	((anAccountable = self) or: [self includes: anAccountable]) ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 11:48:24'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 11:48:24'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 11:48:24'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 11:48:24'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 11:48:24'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 11:48:24'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 11:48:24'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 11:48:24'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 11:48:24'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 11:48:24'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 11:48:24'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 11:48:24'!
FAILURE!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 11:48:24'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'VP 11/7/2020 11:51:14' prior: 50882922 overrides: 50882633!
includes: anAccountable

	^(accountables includes: anAccountable)
		or: [ accountables anySatisfy: [ :childAccountable | 
			childAccountable includes: anAccountable]
		].! !
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 11:54:00' prior: 50882956!
add: anAccountable

	((anAccountable = self) 
		or: [self includes: anAccountable]
		or: [anAccountable includes: self]) 
	ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.! !
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 11:54:06' prior: 50883022!
add: anAccountable

	((anAccountable = self) 
		or: [self includes: anAccountable]
		or: [anAccountable includes: self])
	ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 11:54:08'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 11:54:08'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 11:54:08'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 11:54:08'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 11:54:08'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 11:54:08'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 11:54:08'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 11:54:08'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 11:54:08'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 11:54:08'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 11:54:08'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 11:54:08'!
FAILURE!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 11:54:08'!
FAILURE!
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 11:54:28' prior: 50882778!
test12PortfolioBlocksAddingAccountableDirectlyReferencingIt

	" Caso1: Te agregan a alguien que te apunta a vos / tiene repetida una cuenta que ya ten�s
	  Caso2: A alguien a quien ya apunt�s le agregan una referencia a vos / una cuenta que ya ten�s "

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio2 add: portfolio1.
	
	self should: [ portfolio1 add: portfolio2 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self deny: (portfolio1 includes: portfolio2).
			self assert: (portfolio2 includes: portfolio1).
		].! !

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 11:54:29'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 11:54:31'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 11:54:31'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 11:54:31'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 11:54:31'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 11:54:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 11:54:31'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 11:54:31'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 11:54:31'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 11:54:31'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 11:54:31'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 11:54:31'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 11:54:31'!
PASSED!

----SNAPSHOT----(7 November 2020 11:55:05) CuisUniversity-4384.image priorSource: 17637146!

----QUIT----(7 November 2020 11:55:25) CuisUniversity-4384.image priorSource: 17648335!

----STARTUP---- (7 November 2020 15:51:49) as /Users/vpomsztein/Documents/Facu/ISW1/PracticaParcial/CuisUniversity-4384.image!

!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 15:53:57'!
test13PortfolioBlocksAddingAccountableDirectlyReferencingIt

	" Caso1: Te agregan a alguien que te apunta a vos / tiene repetida una cuenta que ya ten�s
	  Caso2: A alguien a quien ya apunt�s le agregan una referencia a vos / una cuenta que ya ten�s "

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio1 add: accountWith100.
	portfolio2 := Portfolio new.
	portfolio2 add: accountWith100.
	
	self should: [ portfolio1 add: portfolio2 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self deny: (portfolio1 includes: portfolio2).
		].! !

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 15:54:01'!
FAILURE!
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 15:59:31' prior: 50883032!
add: anAccountable

	((anAccountable = self) 
		or: [self includes: anAccountable]
		or: [anAccountable includes: self]
		or: [(self sharedAccountablesWith: anAccountable) isNotEmpty])
	ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.! !
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 15:59:41' prior: 50883198!
add: anAccountable

	((anAccountable = self) 
		or: [self includes: anAccountable]
		or: [anAccountable includes: self]
		or: [(self sharedAccountablesWith: anAccountable) isEmpty not])
	ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.! !

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 15:59:43'!
FAILURE!

OrderedCollection new intersection: OrderedCollection new!
!Portfolio methodsFor: 'testing' stamp: 'VP 11/7/2020 16:01:54'!
sharedAccountablesWith: anAccountable

	^self allAccountables intersection: anAccountable allAccountables.! !
!Portfolio methodsFor: 'xxxxx' stamp: 'VP 11/7/2020 16:02:48'!
allAccountables

	! !

!methodRemoval: ReceptiveAccount #sumTransactionsOfType: stamp: 'VP 11/7/2020 16:03:49'!
sumTransactionsOfType: aTransactionType

	^(transactions select: [ :aTransaction | aTransaction class = aTransactionType ])
				sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].!
!Portfolio methodsFor: 'xxxxx' stamp: 'VP 11/7/2020 16:05:22' prior: 50883233!
allAccountables

	^accountables inject: OrderedCollection new into: [ :accumulatedAccountables :anAccountable | 
		accumulatedAccountables addAll: accountables.
		accumulatedAccountables.
	 ]! !
!Portfolio methodsFor: 'xxxxx' stamp: 'VP 11/7/2020 16:06:41' prior: 50883245!
allAccountables

	^accountables inject: OrderedCollection new into: [ :accumulatedAccountables :anAccountable |
		accumulatedAccountables add: anAccountable.
		accumulatedAccountables addAll: anAccountable allAccountables.
		accumulatedAccountables.
	 ]! !
!Portfolio methodsFor: 'xxxxx' stamp: 'VP 11/7/2020 16:06:42' prior: 50883254!
allAccountables

	^accountables inject: OrderedCollection new into: [ :accumulatedAccountables :anAccountable |
		accumulatedAccountables add: anAccountable.
		accumulatedAccountables addAll: anAccountable allAccountables.
		accumulatedAccountables.
	 ].! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'VP 11/7/2020 16:07:19'!
allAccountables

	^OrderedCollection with: self.! !
!Accountable methodsFor: 'testing' stamp: 'VP 11/7/2020 16:07:47'!
allAccountables

	self subclassResponsibility.! !
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 16:09:00'!
hasSharedAccountablesWith: anAccountable

	^ (self sharedAccountablesWith: anAccountable) isEmpty not! !
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 16:09:00' prior: 50883210!
add: anAccountable

	((anAccountable = self) 
		or: [self includes: anAccountable]
		or: [anAccountable includes: self]
		or: [self hasSharedAccountablesWith: anAccountable])
	ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.! !
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 16:09:06' prior: 50883284!
hasSharedAccountablesWith: anAccountable

	^(self sharedAccountablesWith: anAccountable) isEmpty not! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 16:09:13'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 16:09:13'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 16:09:13'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 16:09:13'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 16:09:13'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 16:09:13'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 16:09:13'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 16:09:13'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 16:09:13'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 16:09:13'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 16:09:13'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 16:09:13'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 16:09:13'!
PASSED!
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 16:09:45'!
test13PortfolioBlocksAddingAccountableWithSharedAccount

	" Caso1: Te agregan a alguien que te apunta a vos / tiene repetida una cuenta que ya ten�s
	  Caso2: A alguien a quien ya apunt�s le agregan una referencia a vos / una cuenta que ya ten�s "

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio1 add: accountWith100.
	portfolio2 := Portfolio new.
	portfolio2 add: accountWith100.
	
	self should: [ portfolio1 add: portfolio2 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self deny: (portfolio1 includes: portfolio2).
		].! !

!methodRemoval: PortfolioTest #test13PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 16:09:48'!
test13PortfolioBlocksAddingAccountableDirectlyReferencingIt

	" Caso1: Te agregan a alguien que te apunta a vos / tiene repetida una cuenta que ya ten�s
	  Caso2: A alguien a quien ya apunt�s le agregan una referencia a vos / una cuenta que ya ten�s "

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio1 add: accountWith100.
	portfolio2 := Portfolio new.
	portfolio2 add: accountWith100.
	
	self should: [ portfolio1 add: portfolio2 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self deny: (portfolio1 includes: portfolio2).
		].!
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 16:09:57' prior: 50883090!
test12PortfolioBlocksAddingAccountableDirectlyReferencingIt

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio2 add: portfolio1.
	
	self should: [ portfolio1 add: portfolio2 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self deny: (portfolio1 includes: portfolio2).
			self assert: (portfolio2 includes: portfolio1).
		].! !
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 16:10:33'!
test14PortfolioBlocksAddingAccountableWithSharedAccount

	" Caso1: Te agregan a alguien que te apunta a vos / tiene repetida una cuenta que ya ten�s
	  Caso2: A alguien a quien ya apunt�s le agregan una referencia a vos / una cuenta que ya ten�s "

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio1 add: portfolioWith50WorthAccount.
	portfolio2 := Portfolio new.
	portfolio2 add: portfolioWith50WorthAccount.
	
	self should: [ portfolio1 add: portfolio2 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self deny: (portfolio1 includes: portfolio2).
		].! !

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 16:10:34'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 16:10:34'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 16:10:34'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 16:10:34'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 16:10:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 16:10:34'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 16:10:34'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 16:10:34'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 16:10:34'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 16:10:34'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 16:10:34'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 16:10:34'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 16:10:34'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 16:10:34'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 16:10:34'!
PASSED!
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 16:10:41' prior: 50883420!
test14PortfolioBlocksAddingAccountableWithSharedAccount

	" Caso1: Te agregan a alguien que te apunta a vos / tiene repetida una cuenta que ya ten�s
	  Caso2: A alguien a quien ya apunt�s le agregan una referencia a vos / una cuenta que ya ten�s "

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio1 add: accountWith100.
	portfolio2 := Portfolio new.
	portfolio2 add: accountWith100.
	
	self should: [ portfolio1 add: portfolio2 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self deny: (portfolio1 includes: portfolio2).
		].! !
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 16:12:10' prior: 50883500!
test14PortfolioBlocksAddingAccountableWithSharedAccount

	" Caso1: Te agregan a alguien que te apunta a vos / tiene repetida una cuenta que ya ten�s
	  Caso2: A alguien a quien ya apunt�s le agregan una referencia a vos / una cuenta que ya ten�s "

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio1 add: portfolio2.
	
	self should: [ portfolio2 add: portfolio1. ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self deny: (portfolio2 includes: portfolio1).
			self assert: (portfolio1 includes: portfolio2).
		].! !
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 16:13:02'!
test14PortfolioBlocksAddingAccountableDirectlyReferencingParent

	" Caso1: Te agregan a alguien que te apunta a vos / tiene repetida una cuenta que ya ten�s
	  Caso2: A alguien a quien ya apunt�s le agregan una referencia a vos / una cuenta que ya ten�s "

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio1 add: portfolio2.
	
	self should: [ portfolio2 add: portfolio1. ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self deny: (portfolio2 includes: portfolio1).
			self assert: (portfolio1 includes: portfolio2).
		].! !

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableDirectlyReferencingParent stamp: 'VP 11/7/2020 16:13:10'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 16:13:10'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 16:13:10'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 16:13:10'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 16:13:10'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 16:13:10'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 16:13:10'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 16:13:10'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 16:13:10'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 16:13:10'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 16:13:10'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 16:13:10'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 16:13:10'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 16:13:10'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableDirectlyReferencingParent stamp: 'VP 11/7/2020 16:13:10'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 16:13:10'!
PASSED!
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 16:14:08' prior: 50883290!
add: anAccountable

	self halt.
	((anAccountable = self) 
		or: [self includes: anAccountable]
		or: [anAccountable includes: self]
		or: [self hasSharedAccountablesWith: anAccountable])
	ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.! !

!methodRemoval: PortfolioTest #test14PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 16:14:26'!
test14PortfolioBlocksAddingAccountableWithSharedAccount

	" Caso1: Te agregan a alguien que te apunta a vos / tiene repetida una cuenta que ya ten�s
	  Caso2: A alguien a quien ya apunt�s le agregan una referencia a vos / una cuenta que ya ten�s "

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio1 add: portfolio2.
	
	self should: [ portfolio2 add: portfolio1. ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self deny: (portfolio2 includes: portfolio1).
			self assert: (portfolio1 includes: portfolio2).
		].!
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 16:16:39' prior: 50883546!
test14PortfolioBlocksAddingAccountableDirectlyReferencingParent

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio1 add: portfolio2.
	
	self should: [ portfolio2 add: portfolio1. ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self deny: (portfolio2 includes: portfolio1).
			self assert: (portfolio1 includes: portfolio2).
		].! !
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 16:16:53' prior: 50883667!
test14PortfolioBlocksAddingAccountableDirectlyReferencingParent

	" Caso1: Te agregan a alguien que te apunta a vos / tiene repetida una cuenta que ya ten�s
	  Caso2: A alguien a quien ya apunt�s le agregan una referencia a vos / una cuenta que ya ten�s "

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio1 add: portfolio2.
	
	self should: [ portfolio2 add: portfolio1. ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self deny: (portfolio2 includes: portfolio1).
			self assert: (portfolio1 includes: portfolio2).
		].! !
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 16:17:41' prior: 50883685!
test14PortfolioBlocksAddingAccountableDirectlyReferencingParent

	" Caso1: Te agregan a alguien que te apunta a vos / tiene repetida una cuenta que ya ten�s
	  Caso2: A alguien a quien ya apunt�s le agregan una referencia a vos / una cuenta que ya ten�s "

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
	
	self should: [ portfolio3 add: portfolio1. ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self deny: (portfolio2 includes: portfolio1).
			self assert: (portfolio1 includes: portfolio2).
		].! !

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableDirectlyReferencingParent stamp: 'VP 11/7/2020 16:17:47'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableDirectlyReferencingParent stamp: 'VP 11/7/2020 16:17:55'!
PASSED!
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 16:20:11'!
test14PortfolioBlocksAddingAccountableAlreadyInParent

	" Caso1: Te agregan a alguien que te apunta a vos / tiene repetida una cuenta que ya ten�s
	  Caso2: A alguien a quien ya apunt�s le agregan una referencia a vos / una cuenta que ya ten�s "

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	portfolio1 add: accountWith100.
	
	self should: [ portfolio2 add: accountWith100. ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self deny: (portfolio2 includes: portfolio1).
			self assert: (portfolio1 includes: portfolio2).
		].! !

!methodRemoval: PortfolioTest #test14PortfolioBlocksAddingAccountableDirectlyReferencingParent stamp: 'VP 11/7/2020 16:20:14'!
test14PortfolioBlocksAddingAccountableDirectlyReferencingParent

	" Caso1: Te agregan a alguien que te apunta a vos / tiene repetida una cuenta que ya ten�s
	  Caso2: A alguien a quien ya apunt�s le agregan una referencia a vos / una cuenta que ya ten�s "

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.
	portfolio1 add: portfolio2.
	portfolio2 add: portfolio3.
	
	self should: [ portfolio3 add: portfolio1. ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self deny: (portfolio2 includes: portfolio1).
			self assert: (portfolio1 includes: portfolio2).
		].!
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 16:21:10' prior: 50883743!
test14PortfolioBlocksAddingAccountableAlreadyInParent

	" Caso1: Te agregan a alguien que te apunta a vos / tiene repetida una cuenta que ya ten�s
	  Caso2: A alguien a quien ya apunt�s le agregan una referencia a vos / una cuenta que ya ten�s "

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	portfolio1 add: accountWith100.
	
	self should: [ portfolio2 add: accountWith100. ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self deny: (portfolio2 includes: accountWith100).
			self assert: (portfolio1 includes: portfolio2).
			self assert: (portfolio1 includes: accountWith100).
		].! !
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 16:21:22' prior: 50883630!
add: anAccountable

	((anAccountable = self) 
		or: [self includes: anAccountable]
		or: [anAccountable includes: self]
		or: [self hasSharedAccountablesWith: anAccountable])
	ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.! !

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 16:21:27'!
FAILURE!
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 16:25:04' prior: 50883822!
add: anAccountable

	((anAccountable = self) 
		or: [self includes: anAccountable]
		or: [anAccountable includes: self]
		or: [self hasSharedAccountablesWith: anAccountable]
		or: [self rootAccountables noneSatisfy: [ :aRootAccountable | aRootAccountable includes: anAccountable ]])
	ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'VP 11/7/2020 16:26:18'!
Accountable subclass: #Portfolio
	instanceVariableNames: 'accountables parentAccountables'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'xxxxx' stamp: 'VP 11/7/2020 16:26:14'!
rootAccountables

	^parentAccountables inject: OrderedCollection new into: [ :accumulatedAccountables :aParentAccountable |
		accumulatedAccountables addAll: aParentAccountable rootAccountables.
		accumulatedAccountables.
	 ].! !
!Portfolio methodsFor: 'initialization' stamp: 'VP 11/7/2020 16:27:03' prior: 50881284 overrides: 16896425!
initialize

	accountables := OrderedCollection new.
	parentAccountables := OrderedCollection new.! !
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 16:27:24' prior: 50883838!
add: anAccountable

	((anAccountable = self) 
		or: [self includes: anAccountable]
		or: [anAccountable includes: self]
		or: [self hasSharedAccountablesWith: anAccountable]
		or: [self rootAccountables noneSatisfy: [ :aRootAccountable | aRootAccountable includes: anAccountable ]])
	ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.
	anAccountable addedTo: self.! !
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 16:29:46'!
addedTo: anAccountable

	parentAccountables add: anAccountable.! !

Accountable subclass: #Portfolio
	instanceVariableNames: 'accountables'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'VP 11/7/2020 16:31:04'!
Accountable subclass: #Portfolio
	instanceVariableNames: 'accountables'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'initialization' stamp: 'VP 11/7/2020 16:31:11' prior: 50883872 overrides: 16896425!
initialize

	accountables := OrderedCollection new.! !

!classDefinition: #Accountable category: 'Portfolio-Ejercicio' stamp: 'VP 11/7/2020 16:31:17'!
Object subclass: #Accountable
	instanceVariableNames: 'parentAccountables'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Accountable methodsFor: 'xxxx' stamp: 'VP 11/7/2020 16:31:15'!
rootAccountables

	^parentAccountables inject: OrderedCollection new into: [ :accumulatedAccountables :aParentAccountable |
		accumulatedAccountables addAll: aParentAccountable rootAccountables.
		accumulatedAccountables.
	 ].! !
!Accountable methodsFor: 'xxxx' stamp: 'VP 11/7/2020 16:31:38' overrides: 16896425!
initialize

	parentAccountables := OrderedCollection new.! !

!methodRemoval: Portfolio #rootAccountables stamp: 'VP 11/7/2020 16:31:51'!
rootAccountables

	^parentAccountables inject: OrderedCollection new into: [ :accumulatedAccountables :aParentAccountable |
		accumulatedAccountables addAll: aParentAccountable rootAccountables.
		accumulatedAccountables.
	 ].!

!methodRemoval: Portfolio #addedTo: stamp: 'VP 11/7/2020 16:31:59'!
addedTo: anAccountable

	parentAccountables add: anAccountable.!
!Accountable methodsFor: 'xxxx' stamp: 'VP 11/7/2020 16:32:05'!
addedTo: anAccountable

	parentAccountables add: anAccountable.! !
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 16:33:23'!
noRootAccountableIncludes: anAccountable

	^ self rootAccountables noneSatisfy: [ :aRootAccountable | aRootAccountable includes: anAccountable ]! !
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 16:33:23' prior: 50883878!
add: anAccountable

	((anAccountable = self) 
		or: [self includes: anAccountable]
		or: [anAccountable includes: self]
		or: [self hasSharedAccountablesWith: anAccountable]
		or: [self noRootAccountableIncludes: anAccountable])
	ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.
	anAccountable addedTo: self.! !
!Portfolio methodsFor: 'initialization' stamp: 'VP 11/7/2020 16:34:02' prior: 50883912 overrides: 50883934!
initialize

	super initialize.
	accountables := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'VP 11/7/2020 16:34:08' prior: 50880570 overrides: 50883934!
initialize

	super initialize.
	transactions := OrderedCollection new.! !

self rootAccountables!

self rootAccountables noneSatisfy: [ :aRootAccountable | aRootAccountable includes: anAccountable ]!
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 16:35:45' prior: 50883957!
noRootAccountableIncludes: anAccountable

	^ self rootAccountables anySatisfy: [ :aRootAccountable | aRootAccountable includes: anAccountable ]! !
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 16:35:57'!
anyRootAccountableIncludes: anAccountable

	^ self rootAccountables anySatisfy: [ :aRootAccountable | aRootAccountable includes: anAccountable ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'VP 11/7/2020 16:35:57' prior: 50883965!
add: anAccountable

	((anAccountable = self) 
		or: [self includes: anAccountable]
		or: [anAccountable includes: self]
		or: [self hasSharedAccountablesWith: anAccountable]
		or: [self anyRootAccountableIncludes: anAccountable])
	ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.
	anAccountable addedTo: self.! !

!methodRemoval: Portfolio #noRootAccountableIncludes: stamp: 'VP 11/7/2020 16:35:57'!
noRootAccountableIncludes: anAccountable

	^ self rootAccountables anySatisfy: [ :aRootAccountable | aRootAccountable includes: anAccountable ]!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 16:36:06'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 16:36:06'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 16:36:06'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 16:36:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 16:36:06'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 16:36:06'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 16:36:06'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 16:36:06'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 16:36:06'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 16:36:06'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 16:36:06'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 16:36:06'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 16:36:06'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 16:36:06'!
FAILURE!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 16:36:06'!
FAILURE!

self rootAccountables!

self!

self rootAccountables!

parentAccountables!
!Accountable methodsFor: 'xxxx' stamp: 'VP 11/7/2020 16:38:33' prior: 50883924!
rootAccountables

	| rootAccountables |
	rootAccountables := parentAccountables inject: OrderedCollection new into: [ :accumulatedAccountables :aParentAccountable |
		accumulatedAccountables addAll: aParentAccountable rootAccountables.
		accumulatedAccountables.
	 ].
	rootAccountables isEmpty ifTrue: [ rootAccountables add: self ].
	^rootAccountables.! !
!Accountable methodsFor: 'xxxx' stamp: 'VP 11/7/2020 16:38:40' prior: 50884089!
rootAccountables

	| rootAccountables |
	rootAccountables := parentAccountables inject: OrderedCollection new into: [ :accumulatedAccountables :aParentAccountable |
		accumulatedAccountables addAll: aParentAccountable rootAccountables.
		accumulatedAccountables.
	 ].

	rootAccountables isEmpty ifTrue: [ rootAccountables add: self ].
	
	^rootAccountables.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 16:39:07'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 16:39:07'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 16:39:07'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 16:39:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 16:39:07'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 16:39:07'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 16:39:07'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 16:39:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 16:39:07'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 16:39:07'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 16:39:07'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 16:39:07'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 16:39:07'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 16:39:07'!
PASSED!
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 16:40:45' prior: 50884010!
add: anAccountable

	((anAccountable = self) 
		or: [self includes: anAccountable]
		"or: [anAccountable includes: self]"
		or: [self hasSharedAccountablesWith: anAccountable]
		or: [self anyRootAccountableIncludes: anAccountable])
	ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.
	anAccountable addedTo: self.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 16:40:48'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 16:40:48'!
FAILURE!
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 16:41:00' prior: 50884169!
add: anAccountable

	((anAccountable = self) 
		or: [self includes: anAccountable]
		or: [anAccountable includes: self]
		or: [self hasSharedAccountablesWith: anAccountable]
		or: [self anyRootAccountableIncludes: anAccountable])
	ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.
	anAccountable addedTo: self.! !
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 16:42:49'!
test15PortfolioBlocksAddingAccountableAlreadyInParent

	" Caso1: Te agregan a alguien que te apunta a vos / tiene repetida una cuenta que ya ten�s
	  Caso2: A alguien a quien ya apunt�s le agregan una referencia a vos / una cuenta que ya ten�s "

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.	
	
	portfolio1 add: portfolio2.
	portfolio1 add: accountWith100.
	portfolio2 add: portfolio3.
	
	self should: [ portfolio3 add: accountWith100. ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self deny: (portfolio2 includes: accountWith100).
			self assert: (portfolio1 includes: portfolio2).
			self assert: (portfolio1 includes: accountWith100).
		].! !

!testRun: #PortfolioTest #test15PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 16:42:52'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 16:42:52'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 16:42:52'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 16:42:52'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 16:42:52'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 16:42:52'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 16:42:52'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 16:42:52'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 16:42:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 16:42:52'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 16:42:52'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 16:42:52'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 16:42:52'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 16:42:52'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 16:42:52'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 16:42:52'!
PASSED!
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 16:43:06' prior: 50884253!
test15PortfolioBlocksAddingAccountableAlreadyInParent

	" Caso1: Te agregan a alguien que te apunta a vos / tiene repetida una cuenta que ya ten�s
	  Caso2: A alguien a quien ya apunt�s le agregan una referencia a vos / una cuenta que ya ten�s "

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.	
	
	portfolio1 add: portfolio2.
	portfolio1 add: accountWith100.
	portfolio3 add: accountWith100.
	
	self should: [ portfolio2 add: portfolio3. ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self deny: (portfolio2 includes: accountWith100).
			self assert: (portfolio1 includes: portfolio2).
			self assert: (portfolio1 includes: accountWith100).
		].! !

!testRun: #PortfolioTest #test15PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 16:43:07'!
FAILURE!
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 16:44:19'!
test15PortfolioBlocksAddingAccountableWithIndirectlySharedAccountables

	" Caso1: Te agregan a alguien que te apunta a vos / tiene repetida una cuenta que ya ten�s
	  Caso2: A alguien a quien ya apunt�s le agregan una referencia a vos / una cuenta que ya ten�s "

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.	
	
	portfolio1 add: portfolio2.
	portfolio1 add: accountWith100.
	portfolio3 add: accountWith100.
	
	self should: [ portfolio2 add: portfolio3. ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self deny: (portfolio2 includes: accountWith100).
			self assert: (portfolio1 includes: portfolio2).
			self assert: (portfolio1 includes: accountWith100).
		].! !

!methodRemoval: PortfolioTest #test15PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 16:44:21'!
test15PortfolioBlocksAddingAccountableAlreadyInParent

	" Caso1: Te agregan a alguien que te apunta a vos / tiene repetida una cuenta que ya ten�s
	  Caso2: A alguien a quien ya apunt�s le agregan una referencia a vos / una cuenta que ya ten�s "

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.	
	
	portfolio1 add: portfolio2.
	portfolio1 add: accountWith100.
	portfolio3 add: accountWith100.
	
	self should: [ portfolio2 add: portfolio3. ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self deny: (portfolio2 includes: accountWith100).
			self assert: (portfolio1 includes: portfolio2).
			self assert: (portfolio1 includes: accountWith100).
		].!
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 16:44:25' prior: 50883795!
test14PortfolioBlocksAddingAccountableAlreadyInParent

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	portfolio1 add: accountWith100.
	
	self should: [ portfolio2 add: accountWith100. ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self deny: (portfolio2 includes: accountWith100).
			self assert: (portfolio1 includes: portfolio2).
			self assert: (portfolio1 includes: accountWith100).
		].! !
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 16:44:28' prior: 50883356!
test13PortfolioBlocksAddingAccountableWithSharedAccount

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio1 add: accountWith100.
	portfolio2 := Portfolio new.
	portfolio2 add: accountWith100.
	
	self should: [ portfolio1 add: portfolio2 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountErrorMessage equals: anError messageText.
			self deny: (portfolio1 includes: portfolio2).
		].! !
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 16:45:12' prior: 50884239!
add: anAccountable

	((anAccountable = self) 
		or: [self includes: anAccountable]
		or: [anAccountable includes: self]
		or: [self anyRootHasSharedAccountablesWith: anAccountable]
		or: [self anyRootAccountableIncludes: anAccountable])
	ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.
	anAccountable addedTo: self.! !
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 16:46:02'!
anyRootHasSharedAccountablesWith: anAccountable

	^self rootAccountables anySatisfy: [ :aRootAccountable | 
		(aRootAccountable sharedAccountablesWith: anAccountable) isEmpty not
	].! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 16:46:26'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 16:46:26'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 16:46:26'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 16:46:26'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 16:46:26'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 16:46:26'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 16:46:26'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 16:46:26'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 16:46:26'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 16:46:26'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 16:46:26'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 16:46:26'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 16:46:26'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 16:46:26'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioBlocksAddingAccountableWithIndirectlySharedAccountables stamp: 'VP 11/7/2020 16:46:26'!
PASSED!
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 16:47:17' prior: 50884470!
add: anAccountable

	((anAccountable = self)
		or: [anAccountable includes: self]
		or: [self anyRootHasSharedAccountablesWith: anAccountable]
		or: [self anyRootAccountableIncludes: anAccountable])
	ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.
	anAccountable addedTo: self.! !
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 16:47:25' prior: 50884549!
add: anAccountable

	((anAccountable = self) 
		"or: [self includes: anAccountable]"
		or: [anAccountable includes: self]
		or: [self anyRootHasSharedAccountablesWith: anAccountable]
		or: [self anyRootAccountableIncludes: anAccountable])
	ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.
	anAccountable addedTo: self.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 16:47:27'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 16:47:27'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 16:47:27'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 16:47:27'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 16:47:27'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 16:47:27'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 16:47:27'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 16:47:27'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 16:47:27'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 16:47:27'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 16:47:27'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 16:47:27'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 16:47:27'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 16:47:27'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioBlocksAddingAccountableWithIndirectlySharedAccountables stamp: 'VP 11/7/2020 16:47:27'!
PASSED!
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 16:48:20' prior: 50884562!
add: anAccountable

	((anAccountable = self) 
		"or: [self includes: anAccountable]"
		"or: [anAccountable includes: self]"
		or: [self anyRootHasSharedAccountablesWith: anAccountable]
		or: [self anyRootAccountableIncludes: anAccountable])
	ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.
	anAccountable addedTo: self.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 16:48:22'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 16:48:22'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 16:48:22'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 16:48:22'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 16:48:22'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 16:48:22'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 16:48:22'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 16:48:22'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 16:48:22'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 16:48:22'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 16:48:22'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 16:48:22'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 16:48:22'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 16:48:22'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioBlocksAddingAccountableWithIndirectlySharedAccountables stamp: 'VP 11/7/2020 16:48:22'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 16:50:51'!
PASSED!

self anyRootHasSharedAccountablesWith: anAccountable!

self anyRootAccountableIncludes: anAccountable!

anAccountable = self!

self anyRootHasSharedAccountablesWith: anAccountable!

self anyRootHasSharedAccountablesWith: anAccountable!

self anyRootHasSharedAccountablesWith: anAccountable!

self rootAccountables!

aRootAccountable sharedAccountablesWith: anAccountable!

self allAccountables!

anAccountable allAccountables!
!Portfolio methodsFor: 'xxxxx' stamp: 'VP 11/7/2020 16:56:53' prior: 50883265 overrides: 50883280!
allAccountables

	^accountables inject: (OrderedCollection with: self) into: [ :accumulatedAccountables :anAccountable |
		accumulatedAccountables add: anAccountable.
		accumulatedAccountables addAll: anAccountable allAccountables.
		accumulatedAccountables.
	 ].! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 16:56:57'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 16:56:57'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 16:56:57'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 16:56:57'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 16:56:57'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 16:56:57'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 16:56:57'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 16:56:57'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 16:56:57'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 16:56:57'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 16:56:57'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 16:56:57'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 16:56:57'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 16:56:57'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioBlocksAddingAccountableWithIndirectlySharedAccountables stamp: 'VP 11/7/2020 16:56:57'!
PASSED!
!Portfolio methodsFor: 'xxxxx' stamp: 'VP 11/7/2020 16:57:29' prior: 50884721 overrides: 50883280!
allAccountables

	^accountables inject: (OrderedCollection with: self) into: [ :accumulatedAccountables :anAccountable |
		accumulatedAccountables addAll: anAccountable allAccountables.
		accumulatedAccountables.
	 ].! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 16:57:33'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 16:57:33'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 16:57:33'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 16:57:33'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 16:57:33'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 16:57:33'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 16:57:33'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 16:57:33'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 16:57:33'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 16:57:33'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 16:57:33'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 16:57:33'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 16:57:33'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 16:57:33'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioBlocksAddingAccountableWithIndirectlySharedAccountables stamp: 'VP 11/7/2020 16:57:33'!
PASSED!
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 16:59:15' prior: 50884002!
anyRootAccountableIncludes: anAccountable

self halt.
	^ self rootAccountables anySatisfy: [ :aRootAccountable | aRootAccountable includes: anAccountable ]! !
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 16:59:38' prior: 50884855!
anyRootAccountableIncludes: anAccountable

	^ self rootAccountables anySatisfy: [ :aRootAccountable | aRootAccountable includes: anAccountable ]! !
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 16:59:46' prior: 50884633!
add: anAccountable

	((anAccountable = self)
		or: [self anyRootHasSharedAccountablesWith: anAccountable]
		or: [self anyRootAccountableIncludes: anAccountable])
	ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.
	anAccountable addedTo: self.! !
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 17:00:01' prior: 50884871!
add: anAccountable

	((true)
		or: [self anyRootHasSharedAccountablesWith: anAccountable]
		or: [self anyRootAccountableIncludes: anAccountable])
	ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.
	anAccountable addedTo: self.! !
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 17:00:22' prior: 50884883!
add: anAccountable

	((false)
		or: [self anyRootHasSharedAccountablesWith: anAccountable]
		or: [self anyRootAccountableIncludes: anAccountable])
	ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.
	anAccountable addedTo: self.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 17:00:25'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 17:00:25'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 17:00:25'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 17:00:25'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:00:25'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:00:25'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 17:00:25'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 17:00:25'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 17:00:25'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 17:00:25'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 17:00:25'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 17:00:25'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 17:00:25'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 17:00:25'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioBlocksAddingAccountableWithIndirectlySharedAccountables stamp: 'VP 11/7/2020 17:00:25'!
PASSED!
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 17:00:40' prior: 50884895!
add: anAccountable

	((anAccountable = self)
		or: [self anyRootHasSharedAccountablesWith: anAccountable]
		or: [self anyRootAccountableIncludes: anAccountable])
	ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.
	anAccountable addedTo: self.! !
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 17:02:40' prior: 50884963!
add: anAccountable

	((anAccountable = self)
		or: [self anyRootHasSharedAccountablesWith: anAccountable])
		"or: [self anyRootAccountableIncludes: anAccountable])"
	ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.
	anAccountable addedTo: self.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 17:02:42'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 17:02:42'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 17:02:42'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 17:02:42'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:02:42'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:02:42'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 17:02:42'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 17:02:42'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 17:02:42'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 17:02:42'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 17:02:42'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 17:02:42'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 17:02:42'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 17:02:42'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioBlocksAddingAccountableWithIndirectlySharedAccountables stamp: 'VP 11/7/2020 17:02:42'!
PASSED!
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 17:11:21' prior: 50884975!
add: anAccountable

	((false)
		or: [self anyRootHasSharedAccountablesWith: anAccountable])
		"or: [self anyRootAccountableIncludes: anAccountable])"
	ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.
	anAccountable addedTo: self.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 17:11:22'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 17:11:22'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 17:11:22'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 17:11:22'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:11:22'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:11:22'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 17:11:22'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 17:11:22'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 17:11:22'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 17:11:22'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 17:11:22'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 17:11:22'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 17:11:22'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 17:11:22'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioBlocksAddingAccountableWithIndirectlySharedAccountables stamp: 'VP 11/7/2020 17:11:23'!
PASSED!
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 17:11:43' prior: 50885043!
add: anAccountable

	(self anyRootHasSharedAccountablesWith: anAccountable) ifTrue: [ self error: self class duplicatedAccountErrorMessage ].
	accountables add: anAccountable.
	anAccountable addedTo: self.! !
!Portfolio class methodsFor: 'error messages' stamp: 'VP 11/7/2020 17:11:59'!
duplicatedAccountableErrorMessage
	^'Can not add the requested accountable, as it is already in the portfolio'! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VP 11/7/2020 17:11:59' prior: 50884373!
test15PortfolioBlocksAddingAccountableWithIndirectlySharedAccountables

	" Caso1: Te agregan a alguien que te apunta a vos / tiene repetida una cuenta que ya ten�s
	  Caso2: A alguien a quien ya apunt�s le agregan una referencia a vos / una cuenta que ya ten�s "

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.	
	
	portfolio1 add: portfolio2.
	portfolio1 add: accountWith100.
	portfolio3 add: accountWith100.
	
	self should: [ portfolio2 add: portfolio3. ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountableErrorMessage equals: anError messageText.
			self deny: (portfolio2 includes: accountWith100).
			self assert: (portfolio1 includes: portfolio2).
			self assert: (portfolio1 includes: accountWith100).
		].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'VP 11/7/2020 17:11:59' prior: 50885111!
add: anAccountable

	(self anyRootHasSharedAccountablesWith: anAccountable) ifTrue: [ self error: self class duplicatedAccountableErrorMessage ].
	accountables add: anAccountable.
	anAccountable addedTo: self.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VP 11/7/2020 17:11:59' prior: 50882531!
test11PortfolioBlocksAddingDuplicatedIndirectAccount

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: portfolioWith50WorthAccount.
	
	self should: [ portfolio add: accountWith50 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountableErrorMessage equals: anError messageText.
			self assert: portfolioWith50WorthAccount balance equals: portfolio balance.
		].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VP 11/7/2020 17:11:59' prior: 50884453!
test13PortfolioBlocksAddingAccountableWithSharedAccount

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio1 add: accountWith100.
	portfolio2 := Portfolio new.
	portfolio2 add: accountWith100.
	
	self should: [ portfolio1 add: portfolio2 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountableErrorMessage equals: anError messageText.
			self deny: (portfolio1 includes: portfolio2).
		].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VP 11/7/2020 17:11:59' prior: 50883403!
test12PortfolioBlocksAddingAccountableDirectlyReferencingIt

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio2 add: portfolio1.
	
	self should: [ portfolio1 add: portfolio2 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountableErrorMessage equals: anError messageText.
			self deny: (portfolio1 includes: portfolio2).
			self assert: (portfolio2 includes: portfolio1).
		].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VP 11/7/2020 17:11:59' prior: 50884432!
test14PortfolioBlocksAddingAccountableAlreadyInParent

	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	portfolio1 add: accountWith100.
	
	self should: [ portfolio2 add: accountWith100. ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountableErrorMessage equals: anError messageText.
			self deny: (portfolio2 includes: accountWith100).
			self assert: (portfolio1 includes: portfolio2).
			self assert: (portfolio1 includes: accountWith100).
		].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VP 11/7/2020 17:11:59' prior: 50882412!
test09PortfolioCanNotAddItself

	| portfolio |
	
	portfolio := Portfolio new.
	
	self should: [ portfolio add: portfolio ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountableErrorMessage equals: anError messageText.
			self assert: 0 equals: portfolio balance.
		].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'VP 11/7/2020 17:11:59' prior: 50882516!
test10PortfolioBlocksAddingDuplicatedDirectAccount

	| portfolio |
	
	portfolio := Portfolio new.
	portfolio add: accountWith100.
	
	self should: [ portfolio add: accountWith100 ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountableErrorMessage equals: anError messageText.
			self assert: accountWith100 balance equals: portfolio balance.
		].! !

!methodRemoval: Portfolio class #duplicatedAccountErrorMessage stamp: 'VP 11/7/2020 17:11:59'!
duplicatedAccountErrorMessage
	^'Can not add the requested accountable, as it is already in the portfolio'!
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 17:13:18'!
verifyNoSharedAccountablesInHierarchyWith: anAccountable

	^ (self anyRootHasSharedAccountablesWith: anAccountable) ifTrue: [ self error: self class duplicatedAccountableErrorMessage ]! !
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 17:13:18' prior: 50885157!
add: anAccountable

	self verifyNoSharedAccountablesInHierarchyWith: anAccountable.
	accountables add: anAccountable.
	anAccountable addedTo: self.! !

----SNAPSHOT----(7 November 2020 17:13:34) CuisUniversity-4384.image priorSource: 17648428!

!methodRemoval: Portfolio #anyRootAccountableIncludes: stamp: 'VP 11/7/2020 17:14:04'!
anyRootAccountableIncludes: anAccountable

	^ self rootAccountables anySatisfy: [ :aRootAccountable | aRootAccountable includes: anAccountable ]!
!Portfolio methodsFor: 'operation' stamp: 'VP 11/7/2020 16:59:38'!
anyRootAccountableIncludes: anAccountable

	^ self rootAccountables anySatisfy: [ :aRootAccountable | aRootAccountable includes: anAccountable ]! !

!methodRemoval: Portfolio #anyRootAccountableIncludes: stamp: 'VP 11/7/2020 17:15:21'!
anyRootAccountableIncludes: anAccountable

	^ self rootAccountables anySatisfy: [ :aRootAccountable | aRootAccountable includes: anAccountable ]!

!methodRemoval: Portfolio #hasSharedAccountablesWith: stamp: 'VP 11/7/2020 17:15:30'!
hasSharedAccountablesWith: anAccountable

	^(self sharedAccountablesWith: anAccountable) isEmpty not!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 17:19:29'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 17:19:29'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 17:19:29'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 17:19:29'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:19:29'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:19:29'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 17:19:29'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 17:19:29'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 17:19:29'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 17:19:29'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 17:19:29'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 17:19:29'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 17:19:29'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 17:19:29'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioBlocksAddingAccountableWithIndirectlySharedAccountables stamp: 'VP 11/7/2020 17:19:29'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'VP 11/7/2020 17:20:34' prior: 50882008 overrides: 50880920!
transactions
	
	^accountables inject:OrderedCollection new into: [ :allTransactions :anAccountable | 
		allTransactions addAll: anAccountable transactions. 
		allTransactions 
	].! !
!Portfolio methodsFor: 'testing -- private' stamp: 'VP 11/7/2020 17:25:11'!
collectAccountablesByResultsOfClosure: aTransformation in: aCollection

	^accountables inject: aCollection into: [ :accumulatedAccountables :anAccountable |
		accumulatedAccountables addAll: (aTransformation value: anAccountable allAccountables).
		accumulatedAccountables.
	 ].! !
!Portfolio methodsFor: 'testing -- private' stamp: 'VP 11/7/2020 17:25:46' prior: 50884789 overrides: 50883280!
allAccountables

	^self collectAccountablesByResultsOfClosure: [:anAccountable | anAccountable allAccountables] 
		in: (OrderedCollection with: self).! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 17:25:49'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 17:25:49'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 17:25:49'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 17:25:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:25:49'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:25:49'!
ERROR!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 17:25:49'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 17:25:49'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 17:25:49'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 17:25:49'!
FAILURE!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 17:25:49'!
ERROR!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 17:25:49'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 17:25:49'!
FAILURE!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 17:25:49'!
ERROR!

!testRun: #PortfolioTest #test15PortfolioBlocksAddingAccountableWithIndirectlySharedAccountables stamp: 'VP 11/7/2020 17:25:49'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 17:25:53'!
ERROR!
!Portfolio methodsFor: 'testing -- private' stamp: 'VP 11/7/2020 17:26:30' prior: 50885389!
collectAccountablesByResultsOfClosure: aTransformation in: aCollection

	^accountables inject: aCollection into: [ :accumulatedAccountables :anAccountable |
		accumulatedAccountables addAll: (aTransformation value: anAccountable).
		accumulatedAccountables.
	 ].! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 17:26:33'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 17:26:33'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 17:26:33'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 17:26:33'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:26:33'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:26:33'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 17:26:33'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 17:26:33'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 17:26:33'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 17:26:33'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 17:26:33'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 17:26:33'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 17:26:33'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 17:26:33'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioBlocksAddingAccountableWithIndirectlySharedAccountables stamp: 'VP 11/7/2020 17:26:33'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 17:26:36'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 17:26:36'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 17:26:36'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 17:26:36'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:26:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:26:36'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 17:26:36'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 17:26:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 17:26:36'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 17:26:36'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 17:26:36'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 17:26:36'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 17:26:36'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 17:26:36'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioBlocksAddingAccountableWithIndirectlySharedAccountables stamp: 'VP 11/7/2020 17:26:36'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'VP 11/7/2020 17:27:26' prior: 50885380 overrides: 50880920!
transactions
	
	^self collectAccountablesByResultsOfClosure: [:anAccountable | 
		anAccountable transactions 
	] in: OrderedCollection new.! !
!Portfolio methodsFor: 'testing -- private' stamp: 'VP 11/7/2020 17:27:38' prior: 50885402 overrides: 50883280!
allAccountables

	^self collectAccountablesByResultsOfClosure: [:anAccountable |
		anAccountable allAccountables
	] in: (OrderedCollection with: self).! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 17:27:40'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 17:27:40'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 17:27:40'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 17:27:40'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:27:40'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:27:40'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 17:27:40'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 17:27:40'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 17:27:40'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 17:27:40'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 17:27:40'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 17:27:40'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 17:27:40'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 17:27:40'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioBlocksAddingAccountableWithIndirectlySharedAccountables stamp: 'VP 11/7/2020 17:27:40'!
PASSED!
!Portfolio methodsFor: 'testing -- private' stamp: 'VP 11/7/2020 17:28:12' prior: 50885471!
collectAccountablesByResultsOfClosure: aClosure in: aCollection

	^accountables inject: aCollection into: [ :accumulatedAccountables :anAccountable |
		accumulatedAccountables addAll: (aClosure value: anAccountable).
		accumulatedAccountables.
	 ].! !
!Portfolio methodsFor: 'testing -- private' stamp: 'VP 11/7/2020 17:28:55'!
collectAccountablesByMessage: aClosure in: aCollection

	^accountables inject: aCollection into: [ :accumulatedAccountables :anAccountable |
		accumulatedAccountables addAll: (aClosure value: anAccountable).
		accumulatedAccountables.
	 ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'VP 11/7/2020 17:28:55' prior: 50885595 overrides: 50880920!
transactions
	
	^self collectAccountablesByMessage: [:anAccountable | 
		anAccountable transactions 
	] in: OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'VP 11/7/2020 17:28:55' prior: 50885603 overrides: 50883280!
allAccountables

	^self collectAccountablesByMessage: [:anAccountable |
		anAccountable allAccountables
	] in: (OrderedCollection with: self).! !

!methodRemoval: Portfolio #collectAccountablesByResultsOfClosure:in: stamp: 'VP 11/7/2020 17:28:55'!
collectAccountablesByResultsOfClosure: aClosure in: aCollection

	^accountables inject: aCollection into: [ :accumulatedAccountables :anAccountable |
		accumulatedAccountables addAll: (aClosure value: anAccountable).
		accumulatedAccountables.
	 ].!
!Portfolio methodsFor: 'testing -- private' stamp: 'VP 11/7/2020 17:29:10' prior: 50885678!
collectAccountablesByMessage: aMessage in: aCollection

	^accountables inject: aCollection into: [ :accumulatedAccountables :anAccountable |
		accumulatedAccountables addAll: (aMessage value: anAccountable).
		accumulatedAccountables.
	 ].! !
!Portfolio methodsFor: 'testing -- private' stamp: 'VP 11/7/2020 17:29:21' prior: 50885717!
collectAccountablesByMessage: aMessage in: aCollection

	^accountables inject: aCollection into: [ :accumulatedAccountables :anAccountable |
		accumulatedAccountables addAll: (anAccountable perform: aMessage).
		accumulatedAccountables.
	 ].! !
!Portfolio methodsFor: 'testing -- private' stamp: 'VP 11/7/2020 17:29:24' prior: 50885728!
collectAccountablesByMessage: aMessage in: aCollection

	^accountables inject: aCollection into: [ :accumulatedAccountables :anAccountable |
		accumulatedAccountables addAll: (anAccountable perform: aMessage).
		accumulatedAccountables.
	 ].! !
!Portfolio methodsFor: 'testing -- private' stamp: 'VP 11/7/2020 17:29:36' prior: 50885698 overrides: 50883280!
allAccountables

	^self collectAccountablesByMessage: #allAccountables in: (OrderedCollection with: self).! !
!Portfolio methodsFor: 'transactions' stamp: 'VP 11/7/2020 17:29:55' prior: 50885690 overrides: 50880920!
transactions
	
	^self collectAccountablesByMessage: #transactions in: OrderedCollection new.! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 17:29:57'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 17:29:57'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 17:29:57'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 17:29:57'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:29:57'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:29:57'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 17:29:57'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 17:29:57'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 17:29:57'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 17:29:57'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 17:29:57'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 17:29:57'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 17:29:57'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 17:29:57'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioBlocksAddingAccountableWithIndirectlySharedAccountables stamp: 'VP 11/7/2020 17:29:57'!
PASSED!
!Portfolio methodsFor: 'testing -- private' stamp: 'VP 11/7/2020 17:31:01'!
collectAccountablesPerformingSelector: aMessage in: aCollection

	^accountables inject: aCollection into: [ :accumulatedAccountables :anAccountable |
		accumulatedAccountables addAll: (anAccountable perform: aMessage).
		accumulatedAccountables.
	 ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'VP 11/7/2020 17:31:01' prior: 50885758 overrides: 50880920!
transactions
	
	^self collectAccountablesPerformingSelector: #transactions in: OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'VP 11/7/2020 17:31:01' prior: 50885751 overrides: 50883280!
allAccountables

	^self collectAccountablesPerformingSelector: #allAccountables in: (OrderedCollection with: self).! !

!methodRemoval: Portfolio #collectAccountablesByMessage:in: stamp: 'VP 11/7/2020 17:31:01'!
collectAccountablesByMessage: aMessage in: aCollection

	^accountables inject: aCollection into: [ :accumulatedAccountables :anAccountable |
		accumulatedAccountables addAll: (anAccountable perform: aMessage).
		accumulatedAccountables.
	 ].!
!Portfolio methodsFor: 'testing -- private' stamp: 'VP 11/7/2020 17:31:05' prior: 50885820!
collectAccountablesPerformingSelector: aSelector in: aCollection

	^accountables inject: aCollection into: [ :accumulatedAccountables :anAccountable |
		accumulatedAccountables addAll: (anAccountable perform: aSelector).
		accumulatedAccountables.
	 ].! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 17:31:13'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 17:31:13'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 17:31:13'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 17:31:13'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:31:13'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:31:13'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 17:31:13'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 17:31:13'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 17:31:13'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 17:31:13'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 17:31:13'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 17:31:13'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 17:31:13'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 17:31:13'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioBlocksAddingAccountableWithIndirectlySharedAccountables stamp: 'VP 11/7/2020 17:31:13'!
PASSED!
!Portfolio methodsFor: 'operation -- private' stamp: 'VP 11/7/2020 17:31:45' prior: 50885275!
verifyNoSharedAccountablesInHierarchyWith: anAccountable

	(self anyRootHasSharedAccountablesWith: anAccountable) ifTrue: [ self error: self class duplicatedAccountableErrorMessage ]! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 17:31:47'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 17:31:47'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 17:31:47'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 17:31:47'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:31:47'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:31:47'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 17:31:47'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 17:31:47'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 17:31:47'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 17:31:47'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 17:31:47'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 17:31:47'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 17:31:47'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 17:31:47'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioBlocksAddingAccountableWithIndirectlySharedAccountables stamp: 'VP 11/7/2020 17:31:47'!
PASSED!
!Accountable methodsFor: 'testing -- private' stamp: 'VP 11/7/2020 17:33:58' prior: 50884103!
rootAccountables

	parentAccountables isEmpty ifTrue: [ ^OrderedCollection with: self ].
	
	^parentAccountables inject: OrderedCollection new into: [ :accumulatedAccountables :aParentAccountable |
		accumulatedAccountables addAll: aParentAccountable rootAccountables.
		accumulatedAccountables.
	 ].! !
!Accountable methodsFor: 'testing -- private' stamp: 'VP 11/7/2020 17:34:05' prior: 50885989!
rootAccountables

	parentAccountables isEmpty ifTrue: [ ^OrderedCollection with: self ].
	
	^parentAccountables inject: OrderedCollection new into: [ :accumulatedAccountables :aParentAccountable |
		accumulatedAccountables addAll: aParentAccountable rootAccountables.
		accumulatedAccountables.
	].! !
!Accountable methodsFor: 'testing -- private' stamp: 'VP 11/7/2020 17:34:19' prior: 50886002!
rootAccountables

	parentAccountables isEmpty ifTrue: [ ^OrderedCollection with: self ].
	^parentAccountables inject: OrderedCollection new into: [ :accumulatedAccountables :aParentAccountable |
		accumulatedAccountables addAll: aParentAccountable rootAccountables.
		accumulatedAccountables.
	].! !
!Accountable methodsFor: 'testing -- private' stamp: 'VP 11/7/2020 17:37:15' prior: 50886015!
rootAccountables

	parentAccountables isEmpty ifTrue: [ ^OrderedCollection with: self ].
	
	^parentAccountables inject:  OrderedCollection new addingAll: [ :aParentAccountable |
		aParentAccountable rootAccountables.
	].
	"^parentAccountables inject: OrderedCollection new into: [ :accumulatedAccountables :aParentAccountable |
		accumulatedAccountables addAll: aParentAccountable rootAccountables.
		accumulatedAccountables.
	]."! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 17:37:17'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 17:37:17'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 17:37:17'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 17:37:17'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:37:17'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:37:17'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 17:37:17'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 17:37:17'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 17:37:17'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 17:37:17'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 17:37:17'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 17:37:17'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 17:37:17'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 17:37:17'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioBlocksAddingAccountableWithIndirectlySharedAccountables stamp: 'VP 11/7/2020 17:37:17'!
PASSED!
!Accountable methodsFor: 'testing -- private' stamp: 'VP 11/7/2020 17:37:29' prior: 50886028!
rootAccountables

	parentAccountables isEmpty ifTrue: [ ^OrderedCollection with: self ].
	
	^parentAccountables inject: OrderedCollection new addingAll: [ :aParentAccountable |
		aParentAccountable rootAccountables.
	].
	"^parentAccountables inject: OrderedCollection new into: [ :accumulatedAccountables :aParentAccountable |
		accumulatedAccountables addAll: aParentAccountable rootAccountables.
		accumulatedAccountables.
	]."! !
!Accountable methodsFor: 'testing -- private' stamp: 'VP 11/7/2020 17:37:39' prior: 50886101!
rootAccountables

	parentAccountables isEmpty ifTrue: [ ^OrderedCollection with: self ].
	^parentAccountables inject: OrderedCollection new addingAll: [ :aParentAccountable |
		aParentAccountable rootAccountables.
	].
	"^parentAccountables inject: OrderedCollection new into: [ :accumulatedAccountables :aParentAccountable |
		accumulatedAccountables addAll: aParentAccountable rootAccountables.
		accumulatedAccountables.
	]."! !
!Portfolio methodsFor: 'testing -- private' stamp: 'VP 11/7/2020 17:38:28' prior: 50885839 overrides: 50883280!
allAccountables

	^accountables inject: (OrderedCollection with: self) into: [ :anAccountable |
		anAccountable allAccountables
	 ].

	"^self collectAccountablesPerformingSelector: #allAccountables in: (OrderedCollection with: self)."! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 17:38:31'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 17:38:31'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 17:38:31'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 17:38:31'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:38:31'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:38:31'!
ERROR!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 17:38:31'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 17:38:31'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 17:38:31'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 17:38:31'!
FAILURE!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 17:38:31'!
ERROR!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 17:38:31'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 17:38:31'!
FAILURE!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 17:38:31'!
ERROR!

!testRun: #PortfolioTest #test15PortfolioBlocksAddingAccountableWithIndirectlySharedAccountables stamp: 'VP 11/7/2020 17:38:31'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 17:38:33'!
ERROR!
!Portfolio methodsFor: 'testing -- private' stamp: 'VP 11/7/2020 17:38:48' prior: 50886135 overrides: 50883280!
allAccountables

	^accountables inject: (OrderedCollection with: self) addingAll: [ :anAccountable |
		anAccountable allAccountables
	 ].

	"^self collectAccountablesPerformingSelector: #allAccountables in: (OrderedCollection with: self)."! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 17:38:50'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 17:38:50'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 17:38:50'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 17:38:50'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:38:50'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:38:50'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 17:38:50'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 17:38:50'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 17:38:50'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 17:38:50'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 17:38:50'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 17:38:50'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 17:38:50'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 17:38:50'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioBlocksAddingAccountableWithIndirectlySharedAccountables stamp: 'VP 11/7/2020 17:38:50'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'VP 11/7/2020 17:39:30' prior: 50885832 overrides: 50880920!
transactions
	
	^accountables inject: OrderedCollection new addingAll: [ :anAccountable |
		anAccountable transactions
	].
	"^self collectAccountablesPerformingSelector: #transactions in: OrderedCollection new."! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 17:39:32'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 17:39:32'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 17:39:32'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 17:39:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:39:32'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:39:32'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 17:39:32'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 17:39:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 17:39:32'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 17:39:32'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 17:39:32'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 17:39:32'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 17:39:32'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 17:39:32'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioBlocksAddingAccountableWithIndirectlySharedAccountables stamp: 'VP 11/7/2020 17:39:32'!
PASSED!

!methodRemoval: Portfolio #collectAccountablesPerformingSelector:in: stamp: 'VP 11/7/2020 17:39:40'!
collectAccountablesPerformingSelector: aSelector in: aCollection

	^accountables inject: aCollection into: [ :accumulatedAccountables :anAccountable |
		accumulatedAccountables addAll: (anAccountable perform: aSelector).
		accumulatedAccountables.
	 ].!
!Portfolio methodsFor: 'testing -- private' stamp: 'VP 11/7/2020 17:39:45' prior: 50886207 overrides: 50883280!
allAccountables

	^accountables inject: (OrderedCollection with: self) addingAll: [ :anAccountable |
		anAccountable allAccountables
	 ].! !
!Portfolio methodsFor: 'testing -- private' stamp: 'VP 11/7/2020 17:39:49' prior: 50886352 overrides: 50883280!
allAccountables

	^accountables inject: (OrderedCollection with: self) addingAll: [ :anAccountable |
		anAccountable allAccountables
	].! !
!Portfolio methodsFor: 'transactions' stamp: 'VP 11/7/2020 17:39:55' prior: 50886274 overrides: 50880920!
transactions
	
	^accountables inject: OrderedCollection new addingAll: [ :anAccountable |
		anAccountable transactions
	].! !
!Accountable methodsFor: 'testing -- private' stamp: 'VP 11/7/2020 17:40:05' prior: 50886118!
rootAccountables

	parentAccountables isEmpty ifTrue: [ ^OrderedCollection with: self ].
	^parentAccountables inject: OrderedCollection new addingAll: [ :aParentAccountable |
		aParentAccountable rootAccountables.
	].! !
!Accountable methodsFor: 'testing -- private' stamp: 'VP 11/7/2020 17:41:39' prior: 50886375!
rootAccountables

	"No nos pareci� un if que valiera la pena evitar; no es una situaci�n en la que buscar agregar nuevos comportamientos
	 a futuro vaya a obligarnos a mantener este c�digo (salvo casos muy particulares, pero a priori no tendr�a sentido crear
	 una nueva abstracci�n."
	parentAccountables isEmpty ifTrue: [ ^OrderedCollection with: self ].
	^parentAccountables inject: OrderedCollection new addingAll: [ :aParentAccountable |
		aParentAccountable rootAccountables.
	].! !
!PortfolioTest methodsFor: 'test -- add' stamp: 'VP 11/7/2020 17:42:35' prior: 50885127!
test15PortfolioBlocksAddingAccountableWithIndirectlySharedAccountables

	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	portfolio3 := Portfolio new.	
	
	portfolio1 add: portfolio2.
	portfolio1 add: accountWith100.
	portfolio3 add: accountWith100.
	
	self should: [ portfolio2 add: portfolio3. ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Portfolio duplicatedAccountableErrorMessage equals: anError messageText.
			self deny: (portfolio2 includes: accountWith100).
			self assert: (portfolio1 includes: portfolio2).
			self assert: (portfolio1 includes: accountWith100).
		].! !

!testRun: #PortfolioTest #test01EmptyPortfolioBalanceIsZero stamp: 'VP 11/7/2020 17:43:07'!
PASSED!

!testRun: #PortfolioTest #test02SingleAccountPortfolioBalanceIsAccountBalance stamp: 'VP 11/7/2020 17:43:07'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioOfMultipleAccountsAndPortfoliosBalanceIsAllAccountsBalancesSummed stamp: 'VP 11/7/2020 17:43:07'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioDoesNotHaveAnyTransaction stamp: 'VP 11/7/2020 17:43:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:43:07'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioDoesNotHaveASpecificTransactionRegistered stamp: 'VP 11/7/2020 17:43:07'!
PASSED!

!testRun: #PortfolioTest #test07EmptyPortfolioHasZeroTransactions stamp: 'VP 11/7/2020 17:43:07'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioHasAllSubAccountablesTransactions stamp: 'VP 11/7/2020 17:43:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanNotAddItself stamp: 'VP 11/7/2020 17:43:07'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioBlocksAddingDuplicatedDirectAccount stamp: 'VP 11/7/2020 17:43:07'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioBlocksAddingDuplicatedIndirectAccount stamp: 'VP 11/7/2020 17:43:07'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioBlocksAddingAccountableDirectlyReferencingIt stamp: 'VP 11/7/2020 17:43:07'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioBlocksAddingAccountableWithSharedAccount stamp: 'VP 11/7/2020 17:43:07'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioBlocksAddingAccountableAlreadyInParent stamp: 'VP 11/7/2020 17:43:07'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioBlocksAddingAccountableWithIndirectlySharedAccountables stamp: 'VP 11/7/2020 17:43:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'VP 11/7/2020 17:43:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'VP 11/7/2020 17:43:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'VP 11/7/2020 17:43:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'VP 11/7/2020 17:43:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'VP 11/7/2020 17:43:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'VP 11/7/2020 17:43:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'VP 11/7/2020 17:43:09'!
PASSED!

----SNAPSHOT----(7 November 2020 17:43:12) CuisUniversity-4384.image priorSource: 17716502!

----SNAPSHOT----(7 November 2020 17:43:48) CuisUniversity-4384.image priorSource: 17755472!

----QUIT----(7 November 2020 17:45:23) CuisUniversity-4384.image priorSource: 17755565!

----STARTUP---- (9 November 2020 09:03:00) as /Users/vpomsztein/Documents/Facu/ISW1/PracticaParcial/CuisUniversity-4384.image!


----QUIT----(9 November 2020 09:03:12) CuisUniversity-4384.image priorSource: 17755658!

----STARTUP---- (9 November 2020 12:30:57) as /Users/vpomsztein/Documents/Facu/ISW1/PracticaParcial/CuisUniversity-4384.image!


----QUIT----(9 November 2020 12:31:20) CuisUniversity-4384.image priorSource: 17755876!

----STARTUP---- (9 November 2020 19:13:31) as /Users/vpomsztein/Documents/Facu/ISW1/PracticaParcial/CuisUniversity-4384.image!


----End fileIn of /Users/vpomsztein/Documents/Facu/ISW1/PracticaParcial/Portfolio-Solucion.st----!

!classRemoval: #Withdraw stamp: 'VP 11/9/2020 19:15:44'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'VP 11/9/2020 19:15:44'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'VP 11/9/2020 19:15:45'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'VP 11/9/2020 19:15:46'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'VP 11/9/2020 19:15:47'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'VP 11/9/2020 19:15:48'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'VP 11/9/2020 19:15:49'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'VP 11/9/2020 19:15:50'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Accountable stamp: 'VP 11/9/2020 19:15:54'!
Object subclass: #Accountable
	instanceVariableNames: 'parentAccountables'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /Users/vpomsztein/Documents/Facu/ISW1/PracticaParcial/Portfolio-Solucion.st----!
!ReceptiveAccountTest methodsFor: 'tests -- transfer' stamp: 'VP 11/9/2020 19:23:03'!
test08TransferBetweenAccountsAllowsTransactionNavigation

	| account |! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'VP 11/9/2020 19:28:18'!
Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests -- transfer' stamp: 'VP 11/9/2020 19:28:11' prior: 50888039!
test08TransferBetweenAccountsAllowsTransactionNavigation

	| srcAccount dstAccount transfer |
	
	srcAccount := ReceptiveAccount new.
	dstAccount := ReceptiveAccount new.
	
	transfer := Transfer register: 100 from: srcAccount to: dstAccount.
		
	self assert: 100 equals: transfer value.
	self assert: (srcAccount transactions includes: transfer withdrawTransaction).
	self assert: (dstAccount transactions includes: transfer depositTransaction).! !
!ReceptiveAccountTest methodsFor: 'tests -- transfer' stamp: 'VP 11/9/2020 19:30:29' prior: 50888052!
test08TransferBetweenAccountsAllowsTransactionNavigation

	| srcAccount dstAccount transfer |
	
	srcAccount := ReceptiveAccount new.
	dstAccount := ReceptiveAccount new.
	
	transfer := Transfer register: 100 from: srcAccount to: dstAccount.
		
	self assert: 100 equals: transfer value.
	self assert: (srcAccount transactions includes: transfer withdrawTransaction).
	self assert: (dstAccount transactions includes: transfer depositTransaction).
	
	"Tiene sentido dividir este test en 3?
	 Tiene sentido crear dos transacciones nuevas (TransferDeposit y TransferWithdraw, por ejemplo)?
	 	Si no las creamos, c�mo hacemos? Porque necesitamos que la info del value est� solo en 1 lugar (Transfer)."! !
!ReceptiveAccountTest methodsFor: 'tests -- transfer' stamp: 'VP 11/9/2020 19:41:04' prior: 50888070!
test08TransferBetweenAccountsAllowsTransactionNavigation

	| srcAccount dstAccount transfer |
	
	srcAccount := ReceptiveAccount new.
	dstAccount := ReceptiveAccount new.
	
	transfer := Transfer register: 100 from: srcAccount to: dstAccount.
		
	self assert: 100 equals: transfer value.
	self assert: (srcAccount transactions includes: transfer withdrawTransaction).
	self assert: (dstAccount transactions includes: transfer depositTransaction).
	self assert: -100 equals: srcAccount balance.
	self assert: 100 equals: dstAccount balance.
	
	"Tiene sentido dividir este test en 3?
	 Tiene sentido crear dos transacciones nuevas (TransferDeposit y TransferWithdraw, por ejemplo)?
	 	Si no las creamos, c�mo hacemos? Porque necesitamos que la info del value est� solo en 1 lugar (Transfer)."! !

!testRun: #ReceptiveAccountTest #test08TransferBetweenAccountsAllowsTransactionNavigation stamp: 'VP 11/9/2020 19:41:15'!
ERROR!
!Transfer class methodsFor: 'instance creation' stamp: 'VP 11/9/2020 19:41:27'!
register: aSmallInteger from: aReceptiveAccount to: aReceptiveAccount3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeRegister: aSmallInteger from: aReceptiveAccount to: aReceptiveAccount3 ! !
!Transfer class methodsFor: 'instance creation' stamp: 'VP 11/9/2020 19:41:58' prior: 50888128!
register: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount 
	
	"^self new initializeRegister: aSmallInteger from: aReceptiveAccount to: aReceptiveAccount3 "! !
!ReceptiveAccountTest methodsFor: 'tests -- transfer' stamp: 'VP 11/9/2020 19:43:49' prior: 50888096!
test08TransferBetweenAccountsAllowsTransactionNavigation

	| srcAccount dstAccount transfer |
	
	srcAccount := ReceptiveAccount new.
	dstAccount := ReceptiveAccount new.
	
	transfer := Transfer register: 100 from: srcAccount to: dstAccount.
		
	self assert: 100 equals: transfer amount.
	self assert: (srcAccount transactions includes: transfer withdrawTransaction).
	self assert: (dstAccount transactions includes: transfer depositTransaction).
	self assert: -100 equals: srcAccount balance.
	self assert: 100 equals: dstAccount balance.
	
	"Tiene sentido dividir este test en 3?
	 Tiene sentido crear dos transacciones nuevas (TransferDeposit y TransferWithdraw, por ejemplo)?
	 	Si no las creamos, c�mo hacemos? Porque necesitamos que la info del value est� solo en 1 lugar (Transfer)."! !

AccountTransaction subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'VP 11/9/2020 19:44:18'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transfer subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'VP 11/9/2020 19:45:36'!
Transfer subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Transfer subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'VP 11/9/2020 19:45:39'!
Transfer subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'VP 11/9/2020 19:47:01'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'VP 11/9/2020 19:47:33'!
AccountTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'VP 11/9/2020 19:47:36'!
AccountTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #TransferComponents
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferComponents category: 'Portfolio-Solucion' stamp: 'VP 11/9/2020 19:48:49'!
AccountTransaction subclass: #TransferComponents
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferComponents subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'VP 11/9/2020 19:48:56'!
TransferComponents subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferComponents subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'VP 11/9/2020 19:49:00'!
TransferComponents subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'VP 11/9/2020 19:49:29'!
Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccountTest methodsFor: 'tests -- transfer' stamp: 'VP 11/9/2020 19:51:33' prior: 50888149!
test08TransferBetweenAccountsAllowsTransactionNavigation

	| srcAccount dstAccount transfer |
	
	srcAccount := ReceptiveAccount new.
	dstAccount := ReceptiveAccount new.
	
	transfer := Transfer register: 100 from: srcAccount to: dstAccount.
		
	self assert: 100 equals: transfer amount.
	self assert: -100 equals: srcAccount balance.
	self assert: 100 equals: dstAccount balance.
	
	"Tiene sentido dividir este test en 3?
	 Tiene sentido crear dos transacciones nuevas (TransferDeposit y TransferWithdraw, por ejemplo)?
	 	Si no las creamos, c�mo hacemos? Porque necesitamos que la info del value est� solo en 1 lugar (Transfer)."! !
!ReceptiveAccountTest methodsFor: 'tests -- transfer' stamp: 'VP 11/9/2020 19:51:45'!
test08TransferBetweenAccountsEffectivelyAffectsBalance

	| srcAccount dstAccount transfer |
	
	srcAccount := ReceptiveAccount new.
	dstAccount := ReceptiveAccount new.
	
	transfer := Transfer register: 100 from: srcAccount to: dstAccount.
		
	self assert: 100 equals: transfer amount.
	self assert: -100 equals: srcAccount balance.
	self assert: 100 equals: dstAccount balance.
	
	"Tiene sentido dividir este test en 3?
	 Tiene sentido crear dos transacciones nuevas (TransferDeposit y TransferWithdraw, por ejemplo)?
	 	Si no las creamos, c�mo hacemos? Porque necesitamos que la info del value est� solo en 1 lugar (Transfer)."! !

!methodRemoval: ReceptiveAccountTest #test08TransferBetweenAccountsAllowsTransactionNavigation stamp: 'VP 11/9/2020 19:51:45'!
test08TransferBetweenAccountsAllowsTransactionNavigation

	| srcAccount dstAccount transfer |
	
	srcAccount := ReceptiveAccount new.
	dstAccount := ReceptiveAccount new.
	
	transfer := Transfer register: 100 from: srcAccount to: dstAccount.
		
	self assert: 100 equals: transfer amount.
	self assert: -100 equals: srcAccount balance.
	self assert: 100 equals: dstAccount balance.
	
	"Tiene sentido dividir este test en 3?
	 Tiene sentido crear dos transacciones nuevas (TransferDeposit y TransferWithdraw, por ejemplo)?
	 	Si no las creamos, c�mo hacemos? Porque necesitamos que la info del value est� solo en 1 lugar (Transfer)."!

!testRun: #ReceptiveAccountTest #test08TransferBetweenAccountsEffectivelyAffectsBalance stamp: 'VP 11/9/2020 19:51:49'!
ERROR!
!Transfer class methodsFor: 'instance creation' stamp: 'VP 11/9/2020 19:52:40' prior: 50888140!
register: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount 
	
	^self new initializeWithAmount: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount.! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'VP 11/9/2020 19:56:22'!
Object subclass: #Transfer
	instanceVariableNames: 'amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'no messages' stamp: 'VP 11/9/2020 19:56:19'!
initializeWithAmount: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount

	amount := anAmount.
	aSourceReceptiveAccount register: (TransferWithdraw from: self).
	aDestinationReceptiveAccount register: (TransferDeposit from: self).! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'VP 11/9/2020 19:58:02' prior: 50888390!
initializeWithAmount: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount

	amount := anAmount.
	aSourceReceptiveAccount register: (TransferWithdraw for: self).
	aDestinationReceptiveAccount register: (TransferDeposit for: self).! !
!TransferComponents class methodsFor: 'no messages' stamp: 'VP 11/9/2020 19:58:55' overrides: 50887953!
register: aValue on: account

	^self error: 'Should be using '! !
!TransferComponents class methodsFor: 'as yet unclassified' stamp: 'VP 11/9/2020 19:59:26' prior: 50888413 overrides: 50887953!
register: aValue on: account

	^self error: 'Should be using for: to create this TransferComponent'! !
!TransferComponents class methodsFor: 'as yet unclassified' stamp: 'VP 11/9/2020 19:59:27' prior: 50888420 overrides: 50887953!
register: aValue on: account

	^self error: 'Should be using for: to create this TransferComponent'.! !

!methodRemoval: TransferComponents class #register:on: stamp: 'VP 11/9/2020 20:01:06'!
register: aValue on: account

	^self error: 'Should be using for: to create this TransferComponent'.!
!TransferComponents class methodsFor: 'instance creation' stamp: 'VP 11/9/2020 20:01:27'!
for: aValue

	^ self new initializeFor: aValue! !
!TransferComponents methodsFor: 'no messages' stamp: 'VP 11/9/2020 20:01:48'!
initializeFor: aTransfer

	^self subclassResponsibility.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'VP 11/9/2020 20:03:04' prior: 50888401!
initializeWithAmount: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount

	amount := anAmount.
	TransferWithdraw register: self on: aSourceReceptiveAccount.
	TransferDeposit register: self on: aDestinationReceptiveAccount.
	aSourceReceptiveAccount register: (TransferWithdraw for: self).
	aDestinationReceptiveAccount register: (TransferDeposit for: self).! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'VP 11/9/2020 20:03:07' prior: 50888449!
initializeWithAmount: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount

	amount := anAmount.
	TransferWithdraw register: self on: aSourceReceptiveAccount.
	TransferDeposit register: self on: aDestinationReceptiveAccount.! !
!TransferComponents class methodsFor: 'instance creation' stamp: 'VP 11/9/2020 20:05:18' prior: 50888440!
for: aValue

	^self new initializeFor: aValue! !

AccountTransaction subclass: #TransferComponents
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferComponents category: 'Portfolio-Solucion' stamp: 'VP 11/9/2020 20:06:34'!
AccountTransaction subclass: #TransferComponents
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferComponents methodsFor: 'initialization' stamp: 'VP 11/9/2020 20:06:49' prior: 50888444!
initializeFor: aTransfer

	^transfer := aTransfer.! !
!TransferDeposit methodsFor: 'no messages' stamp: 'VP 11/9/2020 20:07:06' overrides: 50887939!
affectBalance: aBalance

	^aBalance + transfer amount. ! !
!TransferWithdraw methodsFor: 'no messages' stamp: 'VP 11/9/2020 20:07:21' overrides: 50887939!
affectBalance: aBalance

	^aBalance - transfer amount. ! !
!TransferComponents methodsFor: 'initialization' stamp: 'VP 11/9/2020 20:07:54' overrides: 50887935!
value

	^transfer amount.! !
!TransferWithdraw methodsFor: 'balance' stamp: 'VP 11/9/2020 20:08:07' prior: 50888504 overrides: 50887939!
affectBalance: aBalance

	^aBalance - self value. ! !
!TransferDeposit methodsFor: 'balance' stamp: 'VP 11/9/2020 20:08:15' prior: 50888499 overrides: 50887939!
affectBalance: aBalance

	^aBalance + self value. ! !
!TransferComponents methodsFor: 'value' stamp: 'VP 11/9/2020 20:08:41' prior: 50888509 overrides: 50887935!
value

	^transfer value.! !
!ReceptiveAccountTest methodsFor: 'tests -- transfer' stamp: 'VP 11/9/2020 20:08:46' prior: 50888323!
test08TransferBetweenAccountsEffectivelyAffectsBalance

	| srcAccount dstAccount transfer |
	
	srcAccount := ReceptiveAccount new.
	dstAccount := ReceptiveAccount new.
	
	transfer := Transfer register: 100 from: srcAccount to: dstAccount.
		
	self assert: 100 equals: transfer value.
	self assert: -100 equals: srcAccount balance.
	self assert: 100 equals: dstAccount balance.
	
	"Tiene sentido dividir este test en 3?
	 Tiene sentido crear dos transacciones nuevas (TransferDeposit y TransferWithdraw, por ejemplo)?
	 	Si no las creamos, c�mo hacemos? Porque necesitamos que la info del value est� solo en 1 lugar (Transfer)."! !

Object subclass: #Transfer
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'VP 11/9/2020 20:08:51'!
Object subclass: #Transfer
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'initialization' stamp: 'VP 11/9/2020 20:08:54' prior: 50888464!
initializeWithAmount: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount

	value := anAmount.
	TransferWithdraw register: self on: aSourceReceptiveAccount.
	TransferDeposit register: self on: aDestinationReceptiveAccount.! !
!Transfer methodsFor: 'initialization' stamp: 'VP 11/9/2020 20:09:00' overrides: 16881508!
value

	^value.! !
!Transfer methodsFor: 'initialization' stamp: 'VP 11/9/2020 20:09:08' prior: 50888576 overrides: 16881508!
value

	^value copy.! !
!Transfer methodsFor: 'initialization' stamp: 'VP 11/9/2020 20:09:13' prior: 50888580 overrides: 16881508!
value

	^value.! !

!testRun: #ReceptiveAccountTest #test08TransferBetweenAccountsEffectivelyAffectsBalance stamp: 'VP 11/9/2020 20:09:21'!
ERROR!
!Transfer methodsFor: 'initialization' stamp: 'VP 11/9/2020 20:10:23'!
initializeWithValue: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount

	value := anAmount.
	TransferWithdraw register: self on: aSourceReceptiveAccount.
	TransferDeposit register: self on: aDestinationReceptiveAccount.! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'VP 11/9/2020 20:10:23' prior: 50888374!
register: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount 
	
	^self new initializeWithValue: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount.! !

!methodRemoval: Transfer #initializeWithAmount:from:to: stamp: 'VP 11/9/2020 20:10:23'!
initializeWithAmount: anAmount from: aSourceReceptiveAccount to: aDestinationReceptiveAccount

	value := anAmount.
	TransferWithdraw register: self on: aSourceReceptiveAccount.
	TransferDeposit register: self on: aDestinationReceptiveAccount.!
!Transfer methodsFor: 'initialization' stamp: 'VP 11/9/2020 20:10:29' prior: 50888592!
initializeWithValue: aValue from: aSourceReceptiveAccount to: aDestinationReceptiveAccount

	value := aValue.
	TransferWithdraw register: self on: aSourceReceptiveAccount.
	TransferDeposit register: self on: aDestinationReceptiveAccount.! !
!Transfer class methodsFor: 'instance creation' stamp: 'VP 11/9/2020 20:10:36' prior: 50888603!
register: aValue from: aSourceReceptiveAccount to: aDestinationReceptiveAccount 
	
	^self new initializeWithValue: aValue from: aSourceReceptiveAccount to: aDestinationReceptiveAccount.! !
!TransferComponents methodsFor: 'initialization' stamp: 'VP 11/9/2020 20:11:20' prior: 50888494!
initializeFor: aTransfer

	transfer := aTransfer.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'VP 11/9/2020 20:11:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'VP 11/9/2020 20:11:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'VP 11/9/2020 20:11:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'VP 11/9/2020 20:11:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'VP 11/9/2020 20:11:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'VP 11/9/2020 20:11:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'VP 11/9/2020 20:11:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferBetweenAccountsEffectivelyAffectsBalance stamp: 'VP 11/9/2020 20:11:24'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests -- transfer' stamp: 'VP 11/9/2020 20:11:33' prior: 50888531!
test08TransferBetweenAccountsEffectivelyAffectsBalance

	| srcAccount dstAccount transfer |
	
	srcAccount := ReceptiveAccount new.
	dstAccount := ReceptiveAccount new.
	
	transfer := Transfer register: 100 from: srcAccount to: dstAccount.
		
	self assert: 100 equals: transfer value.
	self assert: -100 equals: srcAccount balance.
	self assert: 100 equals: dstAccount balance.! !
!ReceptiveAccountTest methodsFor: 'tests -- transfer' stamp: 'VP 11/9/2020 20:12:08'!
test09TransferBetweenAccountsAreRegisteredInAccountTransactions

	| srcAccount dstAccount transfer |
	
	srcAccount := ReceptiveAccount new.
	dstAccount := ReceptiveAccount new.
	
	transfer := Transfer register: 100 from: srcAccount to: dstAccount.
		
	self assert: 100 equals: transfer value.
	self assert: -100 equals: srcAccount balance.
	self assert: 100 equals: dstAccount balance.! !
!ReceptiveAccountTest methodsFor: 'tests -- transfer' stamp: 'VP 11/9/2020 20:12:53' prior: 50888694!
test09TransferBetweenAccountsAreRegisteredInAccountTransactions

	| srcAccount dstAccount transfer |
	
	srcAccount := ReceptiveAccount new.
	dstAccount := ReceptiveAccount new.
	
	transfer := Transfer register: 100 from: srcAccount to: dstAccount.
		
	self assert: (srcAccount transactions includes: transfer withdrawTransaction).
	self assert: (dstAccount transactions includes: transfer depositTransaction).! !

!testRun: #ReceptiveAccountTest #test09TransferBetweenAccountsAreRegisteredInAccountTransactions stamp: 'VP 11/9/2020 20:13:09'!
ERROR!
!Transfer methodsFor: 'transactions' stamp: 'VP 11/9/2020 20:13:25'!
withdrawTransaction
	self shouldBeImplemented.! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'VP 11/9/2020 20:13:37'!
Object subclass: #Transfer
	instanceVariableNames: 'value withdrawTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'transactions' stamp: 'VP 11/9/2020 20:13:35' prior: 50888730!
withdrawTransaction
	
	^withdrawTransaction.! !

!testRun: #ReceptiveAccountTest #test09TransferBetweenAccountsAreRegisteredInAccountTransactions stamp: 'VP 11/9/2020 20:13:45'!
FAILURE!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'VP 11/9/2020 20:14:13'!
Object subclass: #Transfer
	instanceVariableNames: 'value withdrawTransaction depositTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'initialization' stamp: 'VP 11/9/2020 20:14:12' prior: 50888623!
initializeWithValue: aValue from: aSourceReceptiveAccount to: aDestinationReceptiveAccount

	value := aValue.
	withdrawTransaction := TransferWithdraw register: self on: aSourceReceptiveAccount.
	depositTransaction := TransferDeposit register: self on: aDestinationReceptiveAccount.! !
!Transfer methodsFor: 'transactions' stamp: 'VP 11/9/2020 20:14:25'!
depositTransaction
	
	^depositTransaction.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'VP 11/9/2020 20:14:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'VP 11/9/2020 20:14:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'VP 11/9/2020 20:14:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'VP 11/9/2020 20:14:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'VP 11/9/2020 20:14:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'VP 11/9/2020 20:14:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'VP 11/9/2020 20:14:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferBetweenAccountsEffectivelyAffectsBalance stamp: 'VP 11/9/2020 20:14:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransferBetweenAccountsAreRegisteredInAccountTransactions stamp: 'VP 11/9/2020 20:14:28'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests -- transfer' stamp: 'VP 11/9/2020 20:16:38'!
test09TransactionRegisteredOnAccountsForTransferHasLinkToTransfer

	| srcAccount dstAccount transfer |
	
	srcAccount := ReceptiveAccount new.
	dstAccount := ReceptiveAccount new.
	
	transfer := Transfer register: 100 from: srcAccount to: dstAccount.
		
	self assert: transfer equals: transfer withdrawTransaction associatedTransfer.
	self assert: transfer equals: transfer depositTransaction associatedTransfer.! !
!ReceptiveAccountTest methodsFor: 'tests -- transfer' stamp: 'VP 11/9/2020 20:16:44'!
test10TransactionRegisteredOnAccountsForTransferHasLinkToTransfer

	| srcAccount dstAccount transfer |
	
	srcAccount := ReceptiveAccount new.
	dstAccount := ReceptiveAccount new.
	
	transfer := Transfer register: 100 from: srcAccount to: dstAccount.
		
	self assert: transfer equals: transfer withdrawTransaction associatedTransfer.
	self assert: transfer equals: transfer depositTransaction associatedTransfer.! !

!methodRemoval: ReceptiveAccountTest #test09TransactionRegisteredOnAccountsForTransferHasLinkToTransfer stamp: 'VP 11/9/2020 20:16:44'!
test09TransactionRegisteredOnAccountsForTransferHasLinkToTransfer

	| srcAccount dstAccount transfer |
	
	srcAccount := ReceptiveAccount new.
	dstAccount := ReceptiveAccount new.
	
	transfer := Transfer register: 100 from: srcAccount to: dstAccount.
		
	self assert: transfer equals: transfer withdrawTransaction associatedTransfer.
	self assert: transfer equals: transfer depositTransaction associatedTransfer.!
!TransferComponents methodsFor: 'value' stamp: 'VP 11/9/2020 20:17:05'!
associatedTransfer

	^transfer.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'VP 11/9/2020 20:17:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'VP 11/9/2020 20:17:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'VP 11/9/2020 20:17:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'VP 11/9/2020 20:17:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'VP 11/9/2020 20:17:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'VP 11/9/2020 20:17:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'VP 11/9/2020 20:17:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferBetweenAccountsEffectivelyAffectsBalance stamp: 'VP 11/9/2020 20:17:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransferBetweenAccountsAreRegisteredInAccountTransactions stamp: 'VP 11/9/2020 20:17:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test10TransactionRegisteredOnAccountsForTransferHasLinkToTransfer stamp: 'VP 11/9/2020 20:17:28'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests -- transfer' stamp: 'VP 11/9/2020 20:19:35'!
test10NegativeTransfersAreProhibited

	| srcAccount dstAccount |
	
	srcAccount := ReceptiveAccount new.
	dstAccount := ReceptiveAccount new.
	
	
	self should: [ Transfer register: -100 from: srcAccount to: dstAccount ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Transfer negativeTransferErrorMessage equals: anError messageText.
			self assert: 0 equals: srcAccount balance.
			self assert: 0 equals: dstAccount balance.
		].! !

!testRun: #ReceptiveAccountTest #test08TransferBetweenAccountsEffectivelyAffectsBalance stamp: 'VP 11/9/2020 20:19:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransferBetweenAccountsAreRegisteredInAccountTransactions stamp: 'VP 11/9/2020 20:19:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test10NegativeTransfersAreProhibited stamp: 'VP 11/9/2020 20:19:38'!
FAILURE!

!testRun: #ReceptiveAccountTest #test10TransactionRegisteredOnAccountsForTransferHasLinkToTransfer stamp: 'VP 11/9/2020 20:19:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test10NegativeTransfersAreProhibited stamp: 'VP 11/9/2020 20:19:38'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests -- transfer' stamp: 'VP 11/9/2020 20:19:58'!
test11NegativeTransfersAreProhibited

	| srcAccount dstAccount |
	
	srcAccount := ReceptiveAccount new.
	dstAccount := ReceptiveAccount new.
	
	
	self should: [ Transfer register: -100 from: srcAccount to: dstAccount ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Transfer negativeTransferErrorMessage equals: anError messageText.
			self assert: 0 equals: srcAccount balance.
			self assert: 0 equals: dstAccount balance.
		].! !

!methodRemoval: ReceptiveAccountTest #test10NegativeTransfersAreProhibited stamp: 'VP 11/9/2020 20:19:58'!
test10NegativeTransfersAreProhibited

	| srcAccount dstAccount |
	
	srcAccount := ReceptiveAccount new.
	dstAccount := ReceptiveAccount new.
	
	
	self should: [ Transfer register: -100 from: srcAccount to: dstAccount ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Transfer negativeTransferErrorMessage equals: anError messageText.
			self assert: 0 equals: srcAccount balance.
			self assert: 0 equals: dstAccount balance.
		].!
!Transfer class methodsFor: 'instance creation' stamp: 'VP 11/9/2020 20:20:33'!
negativeTransferErrorMessage

	^'Negative transfers are prohibited'.! !
!Transfer class methodsFor: 'instance creation' stamp: 'VP 11/9/2020 20:21:38' prior: 50888634!
register: aValue from: aSourceReceptiveAccount to: aDestinationReceptiveAccount 
	
	aValue < 0 ifTrue: [ ^self error: self negativeTransferErrorMessage ].
	
	^self new initializeWithValue: aValue from: aSourceReceptiveAccount to: aDestinationReceptiveAccount.! !

!testRun: #ReceptiveAccountTest #test11NegativeTransfersAreProhibited stamp: 'VP 11/9/2020 20:21:47'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests -- transfer' stamp: 'VP 11/9/2020 20:22:05'!
test12EmptyTransfersAreProhibited

	| srcAccount dstAccount |
	
	srcAccount := ReceptiveAccount new.
	dstAccount := ReceptiveAccount new.
	
	
	self should: [ Transfer register: 0 from: srcAccount to: dstAccount ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Transfer emptyTransferErrorMessage equals: anError messageText.
			self assert: 0 equals: srcAccount balance.
			self assert: 0 equals: dstAccount balance.
		].! !
!Transfer class methodsFor: 'error messages' stamp: 'VP 11/9/2020 20:22:26'!
emptyTransferErrorMessage

	^'Empty (zero value) transfers are prohibited'.! !
!Transfer class methodsFor: 'instance creation' stamp: 'VP 11/9/2020 20:22:37' prior: 50888980!
register: aValue from: aSourceReceptiveAccount to: aDestinationReceptiveAccount 
	
	aValue < 0 ifTrue: [ ^self error: self negativeTransferErrorMessage ].
	aValue = 0 ifTrue: [ ^self error: self emptyTransferErrorMessage ].
	
	^self new initializeWithValue: aValue from: aSourceReceptiveAccount to: aDestinationReceptiveAccount.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'VP 11/9/2020 20:22:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'VP 11/9/2020 20:22:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'VP 11/9/2020 20:22:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'VP 11/9/2020 20:22:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'VP 11/9/2020 20:22:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'VP 11/9/2020 20:22:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'VP 11/9/2020 20:22:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferBetweenAccountsEffectivelyAffectsBalance stamp: 'VP 11/9/2020 20:22:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransferBetweenAccountsAreRegisteredInAccountTransactions stamp: 'VP 11/9/2020 20:22:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test10TransactionRegisteredOnAccountsForTransferHasLinkToTransfer stamp: 'VP 11/9/2020 20:22:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test11NegativeTransfersAreProhibited stamp: 'VP 11/9/2020 20:22:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test12EmptyTransfersAreProhibited stamp: 'VP 11/9/2020 20:22:51'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests -- transfer' stamp: 'VP 11/9/2020 20:23:42'!
test13SelfTransfersAreProhibited

	| srcAccount dstAccount |
	
	srcAccount := ReceptiveAccount new.
	dstAccount := srcAccount.
	
	
	self should: [ Transfer register: 0 from: srcAccount to: dstAccount ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Transfer selfTransferErrorMessage equals: anError messageText.
			self assert: 0 equals: srcAccount balance.
			self assert: 0 equals: dstAccount balance.
		].! !
!Transfer class methodsFor: 'error messages' stamp: 'VP 11/9/2020 20:23:51'!
selfTransferErrorMessage

	^'Self transfers are prohibited'.! !
!Transfer class methodsFor: 'instance creation' stamp: 'VP 11/9/2020 20:24:19' prior: 50889018!
register: aValue from: aSourceReceptiveAccount to: aDestinationReceptiveAccount 
	
	aValue < 0 ifTrue: [ ^self error: self negativeTransferErrorMessage ].
	aValue = 0 ifTrue: [ ^self error: self emptyTransferErrorMessage ].
	aSourceReceptiveAccount = aDestinationReceptiveAccount ifTrue: [ ^self error: self selfTransferErrorMessage ].
	
	^self new initializeWithValue: aValue from: aSourceReceptiveAccount to: aDestinationReceptiveAccount.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'VP 11/9/2020 20:24:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'VP 11/9/2020 20:24:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'VP 11/9/2020 20:24:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'VP 11/9/2020 20:24:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'VP 11/9/2020 20:24:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'VP 11/9/2020 20:24:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'VP 11/9/2020 20:24:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferBetweenAccountsEffectivelyAffectsBalance stamp: 'VP 11/9/2020 20:24:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransferBetweenAccountsAreRegisteredInAccountTransactions stamp: 'VP 11/9/2020 20:24:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test10TransactionRegisteredOnAccountsForTransferHasLinkToTransfer stamp: 'VP 11/9/2020 20:24:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test11NegativeTransfersAreProhibited stamp: 'VP 11/9/2020 20:24:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test12EmptyTransfersAreProhibited stamp: 'VP 11/9/2020 20:24:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SelfTransfersAreProhibited stamp: 'VP 11/9/2020 20:24:23'!
FAILURE!

!testRun: #ReceptiveAccountTest #test13SelfTransfersAreProhibited stamp: 'VP 11/9/2020 20:24:23'!
FAILURE!
!ReceptiveAccountTest methodsFor: 'tests -- transfer' stamp: 'VP 11/9/2020 20:24:44' prior: 50889077!
test13SelfTransfersAreProhibited

	| srcAccount dstAccount |
	
	srcAccount := ReceptiveAccount new.
	dstAccount := srcAccount.
	
	
	self should: [ Transfer register: 100 from: srcAccount to: dstAccount ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Transfer selfTransferErrorMessage equals: anError messageText.
			self assert: 0 equals: srcAccount balance.
			self assert: 0 equals: dstAccount balance.
		].! !

!testRun: #ReceptiveAccountTest #test13SelfTransfersAreProhibited stamp: 'VP 11/9/2020 20:24:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'VP 11/9/2020 20:24:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'VP 11/9/2020 20:24:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'VP 11/9/2020 20:24:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'VP 11/9/2020 20:24:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'VP 11/9/2020 20:24:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'VP 11/9/2020 20:24:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'VP 11/9/2020 20:24:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferBetweenAccountsEffectivelyAffectsBalance stamp: 'VP 11/9/2020 20:24:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransferBetweenAccountsAreRegisteredInAccountTransactions stamp: 'VP 11/9/2020 20:24:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test10TransactionRegisteredOnAccountsForTransferHasLinkToTransfer stamp: 'VP 11/9/2020 20:24:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test11NegativeTransfersAreProhibited stamp: 'VP 11/9/2020 20:24:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test12EmptyTransfersAreProhibited stamp: 'VP 11/9/2020 20:24:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SelfTransfersAreProhibited stamp: 'VP 11/9/2020 20:24:46'!
PASSED!
!Transfer class methodsFor: 'instance creation' stamp: 'VP 11/9/2020 20:25:02' prior: 50889098!
register: aValue from: aSourceReceptiveAccount to: aDestinationReceptiveAccount 
	
	aValue < 0 ifTrue: [ ^self error: self negativeTransferErrorMessage ].
	aValue = 0 ifTrue: [ ^self error: self emptyTransferErrorMessage ].
	aSourceReceptiveAccount = aDestinationReceptiveAccount ifTrue: [ self error: self selfTransferErrorMessage ].
	
	^self new initializeWithValue: aValue from: aSourceReceptiveAccount to: aDestinationReceptiveAccount.! !
!Transfer class methodsFor: 'instance creation' stamp: 'VP 11/9/2020 20:25:04' prior: 50889237!
register: aValue from: aSourceReceptiveAccount to: aDestinationReceptiveAccount 
	
	aValue < 0 ifTrue: [ ^self error: self negativeTransferErrorMessage ].
	aValue = 0 ifTrue: [ self error: self emptyTransferErrorMessage ].
	aSourceReceptiveAccount = aDestinationReceptiveAccount ifTrue: [ self error: self selfTransferErrorMessage ].
	
	^self new initializeWithValue: aValue from: aSourceReceptiveAccount to: aDestinationReceptiveAccount.! !
!Transfer class methodsFor: 'instance creation' stamp: 'VP 11/9/2020 20:25:04' prior: 50889254!
register: aValue from: aSourceReceptiveAccount to: aDestinationReceptiveAccount 
	
	aValue < 0 ifTrue: [ self error: self negativeTransferErrorMessage ].
	aValue = 0 ifTrue: [ self error: self emptyTransferErrorMessage ].
	aSourceReceptiveAccount = aDestinationReceptiveAccount ifTrue: [ self error: self selfTransferErrorMessage ].
	
	^self new initializeWithValue: aValue from: aSourceReceptiveAccount to: aDestinationReceptiveAccount.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'VP 11/9/2020 20:25:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'VP 11/9/2020 20:25:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'VP 11/9/2020 20:25:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'VP 11/9/2020 20:25:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'VP 11/9/2020 20:25:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'VP 11/9/2020 20:25:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'VP 11/9/2020 20:25:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferBetweenAccountsEffectivelyAffectsBalance stamp: 'VP 11/9/2020 20:25:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransferBetweenAccountsAreRegisteredInAccountTransactions stamp: 'VP 11/9/2020 20:25:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test10TransactionRegisteredOnAccountsForTransferHasLinkToTransfer stamp: 'VP 11/9/2020 20:25:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test11NegativeTransfersAreProhibited stamp: 'VP 11/9/2020 20:25:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test12EmptyTransfersAreProhibited stamp: 'VP 11/9/2020 20:25:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SelfTransfersAreProhibited stamp: 'VP 11/9/2020 20:25:09'!
PASSED!
!Transfer class methodsFor: 'instance creation' stamp: 'VP 11/9/2020 20:25:41'!
verifyValidTransferFor: aDestinationReceptiveAccount from: aSourceReceptiveAccount to: aValue

	aValue < 0 ifTrue: [ self error: self negativeTransferErrorMessage ].
	aValue = 0 ifTrue: [ self error: self emptyTransferErrorMessage ].
	aSourceReceptiveAccount = aDestinationReceptiveAccount ifTrue: [ self error: self selfTransferErrorMessage ]! !
!Transfer class methodsFor: 'instance creation' stamp: 'VP 11/9/2020 20:25:41' prior: 50889271!
register: aValue from: aSourceReceptiveAccount to: aDestinationReceptiveAccount 
	
	self verifyValidTransferFor: aDestinationReceptiveAccount from: aSourceReceptiveAccount to: aValue.
	
	^self new initializeWithValue: aValue from: aSourceReceptiveAccount to: aDestinationReceptiveAccount.! !
!Transfer class methodsFor: 'instance creation -- private' stamp: 'VP 11/9/2020 20:26:38' prior: 50889337!
verifyValidTransferFor: aValue from: aSourceReceptiveAccount to: aDestinationReceptiveAccount

	aValue < 0 ifTrue: [ self error: self negativeTransferErrorMessage ].
	aValue = 0 ifTrue: [ self error: self emptyTransferErrorMessage ].
	aSourceReceptiveAccount = aDestinationReceptiveAccount ifTrue: [ self error: self selfTransferErrorMessage ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'VP 11/9/2020 20:26:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'VP 11/9/2020 20:26:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'VP 11/9/2020 20:26:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'VP 11/9/2020 20:26:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'VP 11/9/2020 20:26:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'VP 11/9/2020 20:26:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'VP 11/9/2020 20:26:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferBetweenAccountsEffectivelyAffectsBalance stamp: 'VP 11/9/2020 20:26:41'!
ERROR!

!testRun: #ReceptiveAccountTest #test09TransferBetweenAccountsAreRegisteredInAccountTransactions stamp: 'VP 11/9/2020 20:26:41'!
ERROR!

!testRun: #ReceptiveAccountTest #test10TransactionRegisteredOnAccountsForTransferHasLinkToTransfer stamp: 'VP 11/9/2020 20:26:41'!
ERROR!

!testRun: #ReceptiveAccountTest #test11NegativeTransfersAreProhibited stamp: 'VP 11/9/2020 20:26:41'!
FAILURE!

!testRun: #ReceptiveAccountTest #test12EmptyTransfersAreProhibited stamp: 'VP 11/9/2020 20:26:41'!
FAILURE!

!testRun: #ReceptiveAccountTest #test13SelfTransfersAreProhibited stamp: 'VP 11/9/2020 20:26:41'!
FAILURE!

!testRun: #ReceptiveAccountTest #test13SelfTransfersAreProhibited stamp: 'VP 11/9/2020 20:26:45'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'VP 11/9/2020 20:27:04' prior: 50889351!
register: aValue from: aSourceReceptiveAccount to: aDestinationReceptiveAccount 
	
	self verifyValidTransferFor: aValue from: aSourceReceptiveAccount to: aDestinationReceptiveAccount.
	
	^self new initializeWithValue: aValue from: aSourceReceptiveAccount to: aDestinationReceptiveAccount.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'VP 11/9/2020 20:27:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'VP 11/9/2020 20:27:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'VP 11/9/2020 20:27:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'VP 11/9/2020 20:27:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'VP 11/9/2020 20:27:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'VP 11/9/2020 20:27:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'VP 11/9/2020 20:27:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test08TransferBetweenAccountsEffectivelyAffectsBalance stamp: 'VP 11/9/2020 20:27:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test09TransferBetweenAccountsAreRegisteredInAccountTransactions stamp: 'VP 11/9/2020 20:27:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test10TransactionRegisteredOnAccountsForTransferHasLinkToTransfer stamp: 'VP 11/9/2020 20:27:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test11NegativeTransfersAreProhibited stamp: 'VP 11/9/2020 20:27:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test12EmptyTransfersAreProhibited stamp: 'VP 11/9/2020 20:27:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test13SelfTransfersAreProhibited stamp: 'VP 11/9/2020 20:27:06'!
PASSED!

----SNAPSHOT----(9 November 2020 20:27:27) CuisUniversity-4384.image priorSource: 17756094!

----SNAPSHOT----(9 November 2020 20:28:44) CuisUniversity-4384.image priorSource: 17850921!

TestCase subclass: #AccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTest category: 'Portfolio-Solucion' stamp: 'VP 11/9/2020 20:29:16'!
TestCase subclass: #AccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----SNAPSHOT----(9 November 2020 20:29:31) CuisUniversity-4384.image priorSource: 17851014!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'VP 11/9/2020 20:58:27'!
Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 20:58:16'!
test01EmptyAccountSummary

	| account summary |
	
	account := ReceptiveAccount new.
	
	summary := AccountSummary for: account.
	
	self assert: 1 equals: summary size.
	self assert: 'Balance = 0' equals: (summary at: 0).! !

!testRun: #AccountTest #test01EmptyAccountSummary stamp: 'VP 11/9/2020 20:58:33'!
ERROR!
!AccountSummary class methodsFor: 'report' stamp: 'VP 11/9/2020 20:58:45'!
for: aReceptiveAccount 
	self shouldBeImplemented.! !
!AccountSummary class methodsFor: 'report' stamp: 'VP 11/9/2020 20:59:10'!
reportFor: aReceptiveAccount 
	self shouldBeImplemented.! !
!AccountTest methodsFor: 'as yet unclassified' stamp: 'VP 11/9/2020 20:59:10' prior: 50889520!
test01EmptyAccountSummary

	| account summary |
	
	account := ReceptiveAccount new.
	
	summary := AccountSummary reportFor: account.
	
	self assert: 1 equals: summary size.
	self assert: 'Balance = 0' equals: (summary at: 0).! !

!methodRemoval: AccountSummary class #for: stamp: 'VP 11/9/2020 20:59:10'!
for: aReceptiveAccount 
	self shouldBeImplemented.!
!AccountSummary class methodsFor: 'report' stamp: 'VP 11/9/2020 20:59:48' prior: 50889538!
reportFor: aReceptiveAccount 
	
	^OrderedCollection with: 'Balance = 0'.! !

!testRun: #AccountTest #test01EmptyAccountSummary stamp: 'VP 11/9/2020 21:00:07'!
ERROR!
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 21:00:12' prior: 50889543!
test01EmptyAccountSummary

	| account summary |
	
	account := ReceptiveAccount new.
	
	summary := AccountSummary reportFor: account.
	
	self assert: 1 equals: summary size.
	self assert: 'Balance = 0' equals: (summary at: 1).! !

!testRun: #AccountTest #test01EmptyAccountSummary stamp: 'VP 11/9/2020 21:00:13'!
PASSED!

!testRun: #AccountTest #test01EmptyAccountSummary stamp: 'VP 11/9/2020 21:00:13'!
PASSED!
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 21:01:47'!
test02AccountWithTransactionsSummary

	| account summary |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	summary := AccountSummary reportFor: account.
	
	self assert: 1 equals: summary size.
	self assert: 'Balance = 0' equals: (summary at: 1).! !
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 21:04:55' prior: 50889582!
test02AccountWithTransactionsSummary

	| account1 account2 summary |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	Transfer register: 20 from: account1 to: account2.
	Transfer register: 30 from: account2 to: account1.
	
	summary := AccountSummary reportFor: account1.
	
	self assert: 4 + 1 equals: summary size.
	self assert: 'Dep�sito por 100' equals: (summary at: 1).
	self assert: 'Extracci�n por 50' equals: (summary at: 2).
	self assert: 'Salida por transferencia de 20' equals: (summary at: 3).
	self assert: 'Entrada por transferencia de 30' equals: (summary at: 4).
	self assert: 'Balance = 60' equals: (summary at: 5).! !

!testRun: #AccountTest #test02AccountWithTransactionsSummary stamp: 'VP 11/9/2020 21:04:57'!
FAILURE!
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 21:05:11'!
test03AccountWithTransactionsSummary

	| account1 account2 summary |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	Transfer register: 20 from: account1 to: account2.
	Transfer register: 30 from: account2 to: account1.
	
	summary := AccountSummary reportFor: account1.
	
	self assert: 4 + 1 equals: summary size.
	self assert: 'Dep�sito por 100' equals: (summary at: 1).
	self assert: 'Extracci�n por 50' equals: (summary at: 2).
	self assert: 'Salida por transferencia de 20' equals: (summary at: 3).
	self assert: 'Entrada por transferencia de 30' equals: (summary at: 4).
	self assert: 'Balance = 60' equals: (summary at: 5).! !

!methodRemoval: AccountTest #test03AccountWithTransactionsSummary stamp: 'VP 11/9/2020 21:05:49'!
test03AccountWithTransactionsSummary

	| account1 account2 summary |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	Withdraw register: 50 on: account1.
	Transfer register: 20 from: account1 to: account2.
	Transfer register: 30 from: account2 to: account1.
	
	summary := AccountSummary reportFor: account1.
	
	self assert: 4 + 1 equals: summary size.
	self assert: 'Dep�sito por 100' equals: (summary at: 1).
	self assert: 'Extracci�n por 50' equals: (summary at: 2).
	self assert: 'Salida por transferencia de 20' equals: (summary at: 3).
	self assert: 'Entrada por transferencia de 30' equals: (summary at: 4).
	self assert: 'Balance = 60' equals: (summary at: 5).!

!testRun: #AccountTest #test02AccountWithTransactionsSummary stamp: 'VP 11/9/2020 21:06:20'!
FAILURE!
!AccountSummary class methodsFor: 'report' stamp: 'VP 11/9/2020 21:10:30' prior: 50889557!
reportFor: aReceptiveAccount 
	
	^aReceptiveAccount transactions inject: (OrderedCollection with: 'Balance = ', aReceptiveAccount balance) into: [ :report :aTransaction |
		report addFirst: aTransaction description
	].! !
!AccountTransaction methodsFor: 'value' stamp: 'VP 11/9/2020 21:10:43'!
description 

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'VP 11/9/2020 21:11:09' overrides: 50889688!
description

	^'Dep�sito por ', self value.! !

	'Dep�sito por ', 100!

	'Dep�sito por ', 100 asString!
!Deposit methodsFor: 'value' stamp: 'VP 11/9/2020 21:11:33' prior: 50889692 overrides: 50889688!
description

	^'Dep�sito por ', self value asString.! !
!TransferDeposit methodsFor: 'balance' stamp: 'VP 11/9/2020 21:11:53' overrides: 50889688!
description

	^'Entrada por transferencia de ', self value asString.! !
!TransferWithdraw methodsFor: 'balance' stamp: 'VP 11/9/2020 21:12:00' overrides: 50889688!
description

	^'Salida por transferencia de ', self value asString.! !
!Withdraw methodsFor: 'value' stamp: 'VP 11/9/2020 21:12:29' overrides: 50889688!
description

	^'Extracci�n por ', self value asString.! !

!testRun: #AccountTest #test01EmptyAccountSummary stamp: 'VP 11/9/2020 21:12:53'!
ERROR!

!testRun: #AccountTest #test02AccountWithTransactionsSummary stamp: 'VP 11/9/2020 21:12:53'!
ERROR!

!testRun: #AccountTest #test01EmptyAccountSummary stamp: 'VP 11/9/2020 21:12:55'!
ERROR!
!AccountSummary class methodsFor: 'report' stamp: 'VP 11/9/2020 21:13:10' prior: 50889678!
reportFor: aReceptiveAccount 
	
	^aReceptiveAccount transactions inject: (OrderedCollection with: 'Balance = ', aReceptiveAccount balance asString) into: [ :report :aTransaction |
		report addFirst: aTransaction description
	].! !

!testRun: #AccountTest #test01EmptyAccountSummary stamp: 'VP 11/9/2020 21:13:13'!
PASSED!

!testRun: #AccountTest #test02AccountWithTransactionsSummary stamp: 'VP 11/9/2020 21:13:14'!
ERROR!
!AccountSummary class methodsFor: 'report' stamp: 'VP 11/9/2020 21:13:51' prior: 50889729!
reportFor: aReceptiveAccount 
	
	^aReceptiveAccount transactions inject: (OrderedCollection with: 'Balance = ', aReceptiveAccount balance asString) into: [ :report :aTransaction |
		report addFirst: aTransaction description.
		report.
	].! !

!testRun: #AccountTest #test02AccountWithTransactionsSummary stamp: 'VP 11/9/2020 21:13:53'!
FAILURE!
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 21:14:22' prior: 50889594!
test02AccountWithTransactionsSummary

	| account1 account2 summary |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 30 from: account2 to: account1.
	Transfer register: 20 from: account1 to: account2.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account1.
	
	summary := AccountSummary reportFor: account1.
	
	self assert: 4 + 1 equals: summary size.
	self assert: 'Dep�sito por 100' equals: (summary at: 1).
	self assert: 'Extracci�n por 50' equals: (summary at: 2).
	self assert: 'Salida por transferencia de 20' equals: (summary at: 3).
	self assert: 'Entrada por transferencia de 30' equals: (summary at: 4).
	self assert: 'Balance = 60' equals: (summary at: 5).! !

!testRun: #AccountTest #test02AccountWithTransactionsSummary stamp: 'VP 11/9/2020 21:14:24'!
PASSED!

!testRun: #AccountTest #test01EmptyAccountSummary stamp: 'VP 11/9/2020 21:14:24'!
PASSED!

!testRun: #AccountTest #test02AccountWithTransactionsSummary stamp: 'VP 11/9/2020 21:14:24'!
PASSED!
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 21:15:21'!
test03AccountWithTransactionsSummary

	| account1 account2 summary |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 30 from: account2 to: account1.
	Transfer register: 20 from: account1 to: account2.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account1.
	
	summary := AccountSummary reportFor: account1.
	
	self assert: 4 + 1 equals: summary size.
	self assert: 'Dep�sito por 100' equals: (summary at: 1).
	self assert: 'Extracci�n por 50' equals: (summary at: 2).
	self assert: 'Salida por transferencia de 20' equals: (summary at: 3).
	self assert: 'Entrada por transferencia de 30' equals: (summary at: 4).
	self assert: 'Balance = 60' equals: (summary at: 5).! !
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 21:15:51'!
test02AccountWithSingleTransactionSummary

	| account1 summary |
	
	account1 := ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	
	summary := AccountSummary reportFor: account1.
	
	self assert: 1 + 1 equals: summary size.
	self assert: 'Dep�sito por 100' equals: (summary at: 1).
	self assert: 'Balance = 100' equals: (summary at: 2).! !

!testRun: #AccountTest #test02AccountWithSingleTransactionSummary stamp: 'VP 11/9/2020 21:15:52'!
PASSED!

!testRun: #AccountTest #test01EmptyAccountSummary stamp: 'VP 11/9/2020 21:15:52'!
PASSED!

!testRun: #AccountTest #test02AccountWithSingleTransactionSummary stamp: 'VP 11/9/2020 21:15:52'!
PASSED!

!testRun: #AccountTest #test02AccountWithTransactionsSummary stamp: 'VP 11/9/2020 21:15:52'!
PASSED!

!testRun: #AccountTest #test03AccountWithTransactionsSummary stamp: 'VP 11/9/2020 21:15:52'!
PASSED!

!methodRemoval: AccountTest #test02AccountWithTransactionsSummary stamp: 'VP 11/9/2020 21:15:56'!
test02AccountWithTransactionsSummary

	| account1 account2 summary |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 30 from: account2 to: account1.
	Transfer register: 20 from: account1 to: account2.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account1.
	
	summary := AccountSummary reportFor: account1.
	
	self assert: 4 + 1 equals: summary size.
	self assert: 'Dep�sito por 100' equals: (summary at: 1).
	self assert: 'Extracci�n por 50' equals: (summary at: 2).
	self assert: 'Salida por transferencia de 20' equals: (summary at: 3).
	self assert: 'Entrada por transferencia de 30' equals: (summary at: 4).
	self assert: 'Balance = 60' equals: (summary at: 5).!

!testRun: #AccountTest #test02AccountWithSingleTransactionSummary stamp: 'VP 11/9/2020 21:16:00'!
PASSED!

!testRun: #AccountTest #test01EmptyAccountSummary stamp: 'VP 11/9/2020 21:16:00'!
PASSED!

!testRun: #AccountTest #test02AccountWithSingleTransactionSummary stamp: 'VP 11/9/2020 21:16:00'!
PASSED!

!testRun: #AccountTest #test03AccountWithTransactionsSummary stamp: 'VP 11/9/2020 21:16:00'!
PASSED!

Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'VP 11/9/2020 21:16:34'!
Object subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 21:17:37'!
test03PortfolioWithTransactionsSummary

	| portfolio account1 account2 summary |
	
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 30 from: account2 to: account1.
	Transfer register: 20 from: account1 to: account2.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account1.
	
	portfolio add: account1.
	
	summary := AccountSummary reportFor: portfolio.
	
	self assert: 4 + 1 equals: summary size.
	self assert: 'Dep�sito por 100' equals: (summary at: 1).
	self assert: 'Extracci�n por 50' equals: (summary at: 2).
	self assert: 'Salida por transferencia de 20' equals: (summary at: 3).
	self assert: 'Entrada por transferencia de 30' equals: (summary at: 4).
	self assert: 'Balance = 60' equals: (summary at: 5).! !

!testRun: #AccountTest #test03PortfolioWithTransactionsSummary stamp: 'VP 11/9/2020 21:17:38'!
PASSED!

!testRun: #AccountTest #test01EmptyAccountSummary stamp: 'VP 11/9/2020 21:17:38'!
PASSED!

!testRun: #AccountTest #test02AccountWithSingleTransactionSummary stamp: 'VP 11/9/2020 21:17:38'!
PASSED!

!testRun: #AccountTest #test03AccountWithTransactionsSummary stamp: 'VP 11/9/2020 21:17:38'!
PASSED!

!testRun: #AccountTest #test03PortfolioWithTransactionsSummary stamp: 'VP 11/9/2020 21:17:38'!
PASSED!
!AccountSummary class methodsFor: 'report' stamp: 'VP 11/9/2020 21:17:56' prior: 50889746!
reportFor: anAccount 
	
	^anAccount transactions inject: (OrderedCollection with: 'Balance = ', anAccount balance asString) into: [ :report :aTransaction |
		report addFirst: aTransaction description.
		report.
	].! !
!AccountSummary class methodsFor: 'report' stamp: 'VP 11/9/2020 21:18:17' prior: 50889945!
reportFor: anAccount 
	
	^anAccount transactions inject: (OrderedCollection with: 'Balance = ', anAccount balance asString) addingAll: [ :report :aTransaction |
		report addFirst: aTransaction description.
		report.
	].! !
!AccountSummary class methodsFor: 'report' stamp: 'VP 11/9/2020 21:18:44' prior: 50889955!
reportFor: anAccount 
	
	^anAccount transactions inject: (OrderedCollection with: 'Balance = ', anAccount balance asString) into: [ :report :aTransaction |
		report addFirst: aTransaction description.
		report.
	].! !
!AccountSummary class methodsFor: 'report' stamp: 'VP 11/9/2020 21:20:01'!
balanceReportMessageFor: anAccount

	^ 'Balance = ', anAccount balance asString! !
!AccountSummary class methodsFor: 'report' stamp: 'VP 11/9/2020 21:20:01' prior: 50889965!
reportFor: anAccount 
	
	^anAccount transactions inject: (OrderedCollection with: (self balanceReportMessageFor: anAccount)) into: [ :report :aTransaction |
		report addFirst: aTransaction description.
		report.
	].! !
!AccountSummary class methodsFor: 'report' stamp: 'VP 11/9/2020 21:20:44'!
basicAccountReportFor: anAccount

	^ OrderedCollection with: (self balanceReportMessageFor: anAccount)! !
!AccountSummary class methodsFor: 'report' stamp: 'VP 11/9/2020 21:20:44' prior: 50889981!
reportFor: anAccount 
	
	^anAccount transactions inject: (self basicAccountReportFor: anAccount) into: [ :report :aTransaction |
		report addFirst: aTransaction description.
		report.
	].! !

Object subclass: #AccountReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountReport category: 'Portfolio-Solucion' stamp: 'VP 11/9/2020 21:21:46'!
Object subclass: #AccountReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountReport subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'VP 11/9/2020 21:21:49'!
AccountReport subclass: #AccountSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountReport class methodsFor: 'no messages' stamp: 'VP 11/9/2020 21:22:05'!
reportFor: anAccount 
	
	^self subclassResponsibility.! !
!AccountReport class methodsFor: 'report' stamp: 'VP 11/9/2020 21:22:25' prior: 50890031!
reportFor: anAccount 
	
	self subclassResponsibility.! !
!AccountSummary class methodsFor: 'report' stamp: 'VP 11/9/2020 21:31:13' prior: 50889998 overrides: 50890036!
reportFor: anAccount 
	
	^AccountSummary new initializeFor: anAccount.! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'VP 11/9/2020 21:31:54'!
AccountReport subclass: #AccountSummary
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'no messages' stamp: 'VP 11/9/2020 21:31:53'!
initializeFor: anAccount

	summary := anAccount transactions inject: (self basicAccountReportFor: anAccount) into: [ :report :aTransaction |
		report addFirst: aTransaction description.
		report.
	].! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'VP 11/9/2020 21:32:17'!
asCollection

	^summary copy.! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'VP 11/9/2020 21:33:02'!
AccountReport subclass: #AccountSummary
	instanceVariableNames: 'summaryCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'VP 11/9/2020 21:33:02' prior: 50890064!
asCollection

	^summaryCollection copy.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'VP 11/9/2020 21:33:02' prior: 50890055!
initializeFor: anAccount

	summaryCollection := anAccount transactions inject: (self basicAccountReportFor: anAccount) into: [ :report :aTransaction |
		report addFirst: aTransaction description.
		report.
	].! !
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 21:33:31' prior: 50889566!
test01EmptyAccountSummary

	| account summaryCollection |
	
	account := ReceptiveAccount new.
	
	summaryCollection := (AccountSummary reportFor: account) asCollection.
	
	self assert: 1 equals: summaryCollection size.
	self assert: 'Balance = 0' equals: (summaryCollection at: 1).! !
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 21:33:37' prior: 50889821!
test02AccountWithSingleTransactionSummary

	| account1 summaryCollection |
	
	account1 := ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	
	summaryCollection := AccountSummary reportFor: account1.
	
	self assert: 1 + 1 equals: summaryCollection size.
	self assert: 'Dep�sito por 100' equals: (summaryCollection at: 1).
	self assert: 'Balance = 100' equals: (summaryCollection at: 2).! !
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 21:33:42' prior: 50890104!
test02AccountWithSingleTransactionSummary

	| account1 summaryCollection |
	
	account1 := ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	
	summaryCollection := (AccountSummary reportFor: account1) asCollection.
	
	self assert: 1 + 1 equals: summaryCollection size.
	self assert: 'Dep�sito por 100' equals: (summaryCollection at: 1).
	self assert: 'Balance = 100' equals: (summaryCollection at: 2).! !
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 21:33:53' prior: 50889795!
test03AccountWithTransactionsSummary

	| account1 account2 summaryCollection |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 30 from: account2 to: account1.
	Transfer register: 20 from: account1 to: account2.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account1.
	
	summaryCollection := (AccountSummary reportFor: account1) asCollection.
	
	self assert: 4 + 1 equals: summaryCollection size.
	self assert: 'Dep�sito por 100' equals: (summaryCollection at: 1).
	self assert: 'Extracci�n por 50' equals: (summaryCollection at: 2).
	self assert: 'Salida por transferencia de 20' equals: (summaryCollection at: 3).
	self assert: 'Entrada por transferencia de 30' equals: (summaryCollection at: 4).
	self assert: 'Balance = 60' equals: (summaryCollection at: 5).! !

!methodRemoval: AccountTest #test03AccountWithTransactionsSummary stamp: 'VP 11/9/2020 21:33:58'!
test03AccountWithTransactionsSummary

	| account1 account2 summaryCollection |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 30 from: account2 to: account1.
	Transfer register: 20 from: account1 to: account2.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account1.
	
	summaryCollection := (AccountSummary reportFor: account1) asCollection.
	
	self assert: 4 + 1 equals: summaryCollection size.
	self assert: 'Dep�sito por 100' equals: (summaryCollection at: 1).
	self assert: 'Extracci�n por 50' equals: (summaryCollection at: 2).
	self assert: 'Salida por transferencia de 20' equals: (summaryCollection at: 3).
	self assert: 'Entrada por transferencia de 30' equals: (summaryCollection at: 4).
	self assert: 'Balance = 60' equals: (summaryCollection at: 5).!
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 21:34:13' prior: 50889901!
test03PortfolioWithTransactionsSummary

	| portfolio account1 account2 summaryCollection |
	
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 30 from: account2 to: account1.
	Transfer register: 20 from: account1 to: account2.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account1.
	
	portfolio add: account1.
	
	summaryCollection := (AccountSummary reportFor: portfolio) asCollection.
	
	self assert: 4 + 1 equals: summaryCollection size.
	self assert: 'Dep�sito por 100' equals: (summaryCollection at: 1).
	self assert: 'Extracci�n por 50' equals: (summaryCollection at: 2).
	self assert: 'Salida por transferencia de 20' equals: (summaryCollection at: 3).
	self assert: 'Entrada por transferencia de 30' equals: (summaryCollection at: 4).
	self assert: 'Balance = 60' equals: (summaryCollection at: 5).! !

!testRun: #AccountTest #test03PortfolioWithTransactionsSummary stamp: 'VP 11/9/2020 21:34:16'!
ERROR!

!testRun: #AccountTest #test03PortfolioWithTransactionsSummary stamp: 'VP 11/9/2020 21:34:25'!
ERROR!
!AccountSummary methodsFor: 'initialization' stamp: 'VP 11/9/2020 21:34:41' prior: 50890082!
initializeFor: anAccount

	summaryCollection := anAccount transactions inject: (self class basicAccountReportFor: anAccount) into: [ :report :aTransaction |
		report addFirst: aTransaction description.
		report.
	].! !
!AccountSummary methodsFor: 'initialization' stamp: 'VP 11/9/2020 21:34:49' prior: 50890233!
initializeFor: anAccount

	summaryCollection := anAccount transactions inject: (self basicAccountReportFor: anAccount) into: [ :report :aTransaction |
		report addFirst: aTransaction description.
		report.
	].! !
!AccountSummary class methodsFor: 'report -- private' stamp: 'VP 11/9/2020 21:35:01' prior: 50889991!
basicAccountReportFor: anAccount

	^ OrderedCollection with: (self balanceReportMessageFor: anAccount)! !
!AccountSummary methodsFor: 'initialization' stamp: 'VP 11/9/2020 21:35:17'!
basicAccountReportFor: anAccount

	^OrderedCollection with: (self balanceReportMessageFor: anAccount)! !

!methodRemoval: AccountSummary class #basicAccountReportFor: stamp: 'VP 11/9/2020 21:35:36'!
basicAccountReportFor: anAccount

	^ OrderedCollection with: (self balanceReportMessageFor: anAccount)!
!AccountSummary methodsFor: 'initialization -- private' stamp: 'VP 11/9/2020 21:35:48' prior: 50890259!
basicAccountReportFor: anAccount

	^OrderedCollection with: (self class balanceReportMessageFor: anAccount)! !

!testRun: #AccountTest #test01EmptyAccountSummary stamp: 'VP 11/9/2020 21:35:50'!
PASSED!

!testRun: #AccountTest #test02AccountWithSingleTransactionSummary stamp: 'VP 11/9/2020 21:35:50'!
PASSED!

!testRun: #AccountTest #test03PortfolioWithTransactionsSummary stamp: 'VP 11/9/2020 21:35:50'!
PASSED!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'VP 11/9/2020 21:37:50'!
AccountReport subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 21:37:42'!
test04EmptyAcountTransferNetIsZero

	| account transferNet |
	
	account := ReceptiveAccount new.
	
	transferNet := TransferNet reportFor: account.
	
	self assert: 0 equals: transferNet.! !
!AccountSummary class methodsFor: 'report' stamp: 'VP 11/9/2020 21:38:02'!
for: anAccount 
	
	^AccountSummary new initializeFor: anAccount.! !
!AccountReport class methodsFor: 'report' stamp: 'VP 11/9/2020 21:38:02'!
for: anAccount 
	
	self subclassResponsibility.! !
!AccountTest methodsFor: 'as yet unclassified' stamp: 'VP 11/9/2020 21:38:02' prior: 50890120!
test02AccountWithSingleTransactionSummary

	| account1 summaryCollection |
	
	account1 := ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	
	summaryCollection := (AccountSummary for: account1) asCollection.
	
	self assert: 1 + 1 equals: summaryCollection size.
	self assert: 'Dep�sito por 100' equals: (summaryCollection at: 1).
	self assert: 'Balance = 100' equals: (summaryCollection at: 2).! !
!AccountTest methodsFor: 'as yet unclassified' stamp: 'VP 11/9/2020 21:38:02' prior: 50890092!
test01EmptyAccountSummary

	| account summaryCollection |
	
	account := ReceptiveAccount new.
	
	summaryCollection := (AccountSummary for: account) asCollection.
	
	self assert: 1 equals: summaryCollection size.
	self assert: 'Balance = 0' equals: (summaryCollection at: 1).! !
!AccountTest methodsFor: 'as yet unclassified' stamp: 'VP 11/9/2020 21:38:02' prior: 50890195!
test03PortfolioWithTransactionsSummary

	| portfolio account1 account2 summaryCollection |
	
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 30 from: account2 to: account1.
	Transfer register: 20 from: account1 to: account2.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account1.
	
	portfolio add: account1.
	
	summaryCollection := (AccountSummary for: portfolio) asCollection.
	
	self assert: 4 + 1 equals: summaryCollection size.
	self assert: 'Dep�sito por 100' equals: (summaryCollection at: 1).
	self assert: 'Extracci�n por 50' equals: (summaryCollection at: 2).
	self assert: 'Salida por transferencia de 20' equals: (summaryCollection at: 3).
	self assert: 'Entrada por transferencia de 30' equals: (summaryCollection at: 4).
	self assert: 'Balance = 60' equals: (summaryCollection at: 5).! !
!AccountTest methodsFor: 'as yet unclassified' stamp: 'VP 11/9/2020 21:38:02' prior: 50890295!
test04EmptyAcountTransferNetIsZero

	| account transferNet |
	
	account := ReceptiveAccount new.
	
	transferNet := TransferNet for: account.
	
	self assert: 0 equals: transferNet.! !

!methodRemoval: AccountSummary class #reportFor: stamp: 'VP 11/9/2020 21:38:02'!
reportFor: anAccount 
	
	^AccountSummary new initializeFor: anAccount.!

!methodRemoval: AccountReport class #reportFor: stamp: 'VP 11/9/2020 21:38:02'!
reportFor: anAccount 
	
	self subclassResponsibility.!

!methodRemoval: AccountSummary class #for: stamp: 'VP 11/9/2020 21:39:27'!
for: anAccount 
	
	^AccountSummary new initializeFor: anAccount.!
!AccountReport class methodsFor: 'instance creation' stamp: 'VP 11/9/2020 21:39:35' prior: 50890309!
for: anAccount 
	
	^self new initializeFor: anAccount.! !

!testRun: #AccountTest #test01EmptyAccountSummary stamp: 'VP 11/9/2020 21:39:44'!
PASSED!

!testRun: #AccountTest #test02AccountWithSingleTransactionSummary stamp: 'VP 11/9/2020 21:39:44'!
PASSED!

!testRun: #AccountTest #test03PortfolioWithTransactionsSummary stamp: 'VP 11/9/2020 21:39:44'!
PASSED!

!testRun: #AccountTest #test04EmptyAcountTransferNetIsZero stamp: 'VP 11/9/2020 21:39:44'!
ERROR!

!testRun: #AccountTest #test04EmptyAcountTransferNetIsZero stamp: 'VP 11/9/2020 21:39:44'!
ERROR!
!TransferNet methodsFor: 'no messages' stamp: 'VP 11/9/2020 21:40:03'!
initializeFor: anAccount

	! !
!TransferNet methodsFor: 'initialization' stamp: 'VP 11/9/2020 21:41:04' overrides: 16881508!
value
	
	^0.

	! !

!testRun: #AccountTest #test01EmptyAccountSummary stamp: 'VP 11/9/2020 21:41:12'!
PASSED!

!testRun: #AccountTest #test02AccountWithSingleTransactionSummary stamp: 'VP 11/9/2020 21:41:12'!
PASSED!

!testRun: #AccountTest #test03PortfolioWithTransactionsSummary stamp: 'VP 11/9/2020 21:41:12'!
PASSED!

!testRun: #AccountTest #test04EmptyAcountTransferNetIsZero stamp: 'VP 11/9/2020 21:41:12'!
FAILURE!

!testRun: #AccountTest #test04EmptyAcountTransferNetIsZero stamp: 'VP 11/9/2020 21:41:12'!
FAILURE!
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 21:41:21' prior: 50890373!
test04EmptyAcountTransferNetIsZero

	| account transferNet |
	
	account := ReceptiveAccount new.
	
	transferNet := (TransferNet for: account) value.
	
	self assert: 0 equals: transferNet.! !

!testRun: #AccountTest #test01EmptyAccountSummary stamp: 'VP 11/9/2020 21:41:23'!
PASSED!

!testRun: #AccountTest #test02AccountWithSingleTransactionSummary stamp: 'VP 11/9/2020 21:41:23'!
PASSED!

!testRun: #AccountTest #test03PortfolioWithTransactionsSummary stamp: 'VP 11/9/2020 21:41:23'!
PASSED!

!testRun: #AccountTest #test04EmptyAcountTransferNetIsZero stamp: 'VP 11/9/2020 21:41:23'!
PASSED!
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 21:41:42' prior: 50890314!
test02AccountWithSingleTransactionSummary

	| account summaryCollection |
	
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	summaryCollection := (AccountSummary for: account) asCollection.
	
	self assert: 1 + 1 equals: summaryCollection size.
	self assert: 'Dep�sito por 100' equals: (summaryCollection at: 1).
	self assert: 'Balance = 100' equals: (summaryCollection at: 2).! !
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 21:42:49'!
test05SingleTransferAccountTransferNet

	| account1 account2 transferNet |
	
	account1 := ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	
	transferNet := (TransferNet for: account1) value.
	
	self assert: 0 equals: transferNet.! !
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 21:43:58' prior: 50890478!
test05SingleTransferAccountTransferNet

	| account1 account2 transferNet1 transferNet2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 30 from: account2 to: account1.
	
	transferNet1 := (TransferNet for: account1) value.
	transferNet2 := (TransferNet for: account2) value.
	
	self assert: 30 equals: transferNet1.
	self assert: -30 equals: transferNet2.! !

!testRun: #AccountTest #test05SingleTransferAccountTransferNet stamp: 'VP 11/9/2020 21:44:00'!
FAILURE!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'VP 11/9/2020 21:44:52'!
AccountReport subclass: #TransferNet
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'initialization' stamp: 'VP 11/9/2020 21:44:49' prior: 50890416!
initializeFor: anAccount

	value := anAccount transactions size = 1 ifTrue: [ 30 ] ifFalse: [ 0 ].! !

!testRun: #AccountTest #test01EmptyAccountSummary stamp: 'VP 11/9/2020 21:44:54'!
PASSED!

!testRun: #AccountTest #test02AccountWithSingleTransactionSummary stamp: 'VP 11/9/2020 21:44:54'!
PASSED!

!testRun: #AccountTest #test03PortfolioWithTransactionsSummary stamp: 'VP 11/9/2020 21:44:54'!
PASSED!

!testRun: #AccountTest #test04EmptyAcountTransferNetIsZero stamp: 'VP 11/9/2020 21:44:54'!
PASSED!

!testRun: #AccountTest #test05SingleTransferAccountTransferNet stamp: 'VP 11/9/2020 21:44:54'!
FAILURE!

!testRun: #AccountTest #test05SingleTransferAccountTransferNet stamp: 'VP 11/9/2020 21:44:54'!
FAILURE!
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 21:59:37'!
test02AccountWithSingleDepositSummary

	| account summaryCollection |
	
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	summaryCollection := (AccountSummary for: account) asCollection.
	
	self assert: 1 + 1 equals: summaryCollection size.
	self assert: 'Dep�sito por 100' equals: (summaryCollection at: 1).
	self assert: 'Balance = 100' equals: (summaryCollection at: 2).! !
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 21:59:41' prior: 50890541!
test02AccountWithSingleDepositSummary

	| account summaryCollection |
	
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	summaryCollection := (AccountSummary for: account) asCollection.
	
	self assert: 1 + 1 equals: summaryCollection size.
	self assert: 'Dep�sito por 100' equals: (summaryCollection at: 1).
	self assert: 'Balance = 100' equals: (summaryCollection at: 2).! !

!methodRemoval: AccountTest #test02AccountWithSingleTransactionSummary stamp: 'VP 11/9/2020 21:59:44'!
test02AccountWithSingleTransactionSummary

	| account summaryCollection |
	
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	summaryCollection := (AccountSummary for: account) asCollection.
	
	self assert: 1 + 1 equals: summaryCollection size.
	self assert: 'Dep�sito por 100' equals: (summaryCollection at: 1).
	self assert: 'Balance = 100' equals: (summaryCollection at: 2).!
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 22:00:03'!
test03AccountWithSingleWithdrawSummary

	| account summaryCollection |
	
	account := ReceptiveAccount new.
	
	Withdraw register: 100 on: account.
	
	summaryCollection := (AccountSummary for: account) asCollection.
	
	self assert: 1 + 1 equals: summaryCollection size.
	self assert: 'Extracci�n por 100' equals: (summaryCollection at: 1).
	self assert: 'Balance = 100' equals: (summaryCollection at: 2).! !
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 22:00:14'!
test06PortfolioWithTransactionsSummary

	| portfolio account1 account2 summaryCollection |
	
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 30 from: account2 to: account1.
	Transfer register: 20 from: account1 to: account2.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account1.
	
	portfolio add: account1.
	
	summaryCollection := (AccountSummary for: portfolio) asCollection.
	
	self assert: 4 + 1 equals: summaryCollection size.
	self assert: 'Dep�sito por 100' equals: (summaryCollection at: 1).
	self assert: 'Extracci�n por 50' equals: (summaryCollection at: 2).
	self assert: 'Salida por transferencia de 20' equals: (summaryCollection at: 3).
	self assert: 'Entrada por transferencia de 30' equals: (summaryCollection at: 4).
	self assert: 'Balance = 60' equals: (summaryCollection at: 5).! !

!methodRemoval: AccountTest #test03PortfolioWithTransactionsSummary stamp: 'VP 11/9/2020 22:00:14'!
test03PortfolioWithTransactionsSummary

	| portfolio account1 account2 summaryCollection |
	
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 30 from: account2 to: account1.
	Transfer register: 20 from: account1 to: account2.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account1.
	
	portfolio add: account1.
	
	summaryCollection := (AccountSummary for: portfolio) asCollection.
	
	self assert: 4 + 1 equals: summaryCollection size.
	self assert: 'Dep�sito por 100' equals: (summaryCollection at: 1).
	self assert: 'Extracci�n por 50' equals: (summaryCollection at: 2).
	self assert: 'Salida por transferencia de 20' equals: (summaryCollection at: 3).
	self assert: 'Entrada por transferencia de 30' equals: (summaryCollection at: 4).
	self assert: 'Balance = 60' equals: (summaryCollection at: 5).!
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 22:00:17'!
test07EmptyAcountTransferNetIsZero

	| account transferNet |
	
	account := ReceptiveAccount new.
	
	transferNet := (TransferNet for: account) value.
	
	self assert: 0 equals: transferNet.! !

!methodRemoval: AccountTest #test04EmptyAcountTransferNetIsZero stamp: 'VP 11/9/2020 22:00:18'!
test04EmptyAcountTransferNetIsZero

	| account transferNet |
	
	account := ReceptiveAccount new.
	
	transferNet := (TransferNet for: account) value.
	
	self assert: 0 equals: transferNet.!
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 22:00:25'!
test08SingleTransferAccountTransferNet

	| account1 account2 transferNet1 transferNet2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 30 from: account2 to: account1.
	
	transferNet1 := (TransferNet for: account1) value.
	transferNet2 := (TransferNet for: account2) value.
	
	self assert: 30 equals: transferNet1.
	self assert: -30 equals: transferNet2.! !

!methodRemoval: AccountTest #test05SingleTransferAccountTransferNet stamp: 'VP 11/9/2020 22:00:25'!
test05SingleTransferAccountTransferNet

	| account1 account2 transferNet1 transferNet2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 30 from: account2 to: account1.
	
	transferNet1 := (TransferNet for: account1) value.
	transferNet2 := (TransferNet for: account2) value.
	
	self assert: 30 equals: transferNet1.
	self assert: -30 equals: transferNet2.!
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 22:01:52'!
test04AccountWithSingleInboundTransferSummary

	| account1 account2 summaryCollection |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 100 from: account2 to: account1.
	
	summaryCollection := (AccountSummary for: account1) asCollection.
	
	self assert: 1 + 1 equals: summaryCollection size.
	self assert: 'Entrada por transferencia de 100' equals: (summaryCollection at: 1).
	self assert: 'Balance = 100' equals: (summaryCollection at: 2).! !
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 22:02:06'!
test05AccountWithSingleOutboundTransferSummary

	| account1 account2 summaryCollection |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 100 from: account1 to: account2.
	
	summaryCollection := (AccountSummary for: account1) asCollection.
	
	self assert: 1 + 1 equals: summaryCollection size.
	self assert: 'Salida por transferencia de 100' equals: (summaryCollection at: 1).
	self assert: 'Balance = 100' equals: (summaryCollection at: 2).! !
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 22:02:10' prior: 50890735!
test05AccountWithSingleOutboundTransferSummary

	| account1 account2 summaryCollection |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 100 from: account2 to: account1.
	
	summaryCollection := (AccountSummary for: account2) asCollection.
	
	self assert: 1 + 1 equals: summaryCollection size.
	self assert: 'Salida por transferencia de 100' equals: (summaryCollection at: 1).
	self assert: 'Balance = 100' equals: (summaryCollection at: 2).! !

!testRun: #AccountTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/9/2020 22:02:12'!
FAILURE!
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 22:02:40' prior: 50890754!
test05AccountWithSingleOutboundTransferSummary

	| account1 account2 summaryCollection |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 100 from: account2 to: account1.
	
	summaryCollection := (AccountSummary for: account2) asCollection.
	
	self assert: 1 + 1 equals: summaryCollection size.
	self assert: 'Salida por transferencia de -100' equals: (summaryCollection at: 1).
	self assert: 'Balance = -100' equals: (summaryCollection at: 2).! !

!testRun: #AccountTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/9/2020 22:02:41'!
FAILURE!
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 22:02:46' prior: 50890776!
test05AccountWithSingleOutboundTransferSummary

	| account1 account2 summaryCollection |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 100 from: account2 to: account1.
	
	summaryCollection := (AccountSummary for: account2) asCollection.
	
	self assert: 1 + 1 equals: summaryCollection size.
	self assert: 'Salida por transferencia de 100' equals: (summaryCollection at: 1).
	self assert: 'Balance = 100' equals: (summaryCollection at: 2).! !

!testRun: #AccountTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/9/2020 22:02:46'!
FAILURE!
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 22:02:53' prior: 50890799!
test05AccountWithSingleOutboundTransferSummary

	| account1 account2 summaryCollection |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 100 from: account2 to: account1.
	
	summaryCollection := (AccountSummary for: account2) asCollection.
	
	self assert: 1 + 1 equals: summaryCollection size.
	self assert: 'Salida por transferencia de 100' equals: (summaryCollection at: 1).
	self assert: 'Balance = -100' equals: (summaryCollection at: 2).! !

!testRun: #AccountTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/9/2020 22:02:53'!
PASSED!

!testRun: #AccountTest #test01EmptyAccountSummary stamp: 'VP 11/9/2020 22:02:53'!
PASSED!

!testRun: #AccountTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/9/2020 22:02:53'!
PASSED!

!testRun: #AccountTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/9/2020 22:02:53'!
FAILURE!

!testRun: #AccountTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/9/2020 22:02:53'!
PASSED!

!testRun: #AccountTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/9/2020 22:02:53'!
PASSED!

!testRun: #AccountTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/9/2020 22:02:53'!
PASSED!

!testRun: #AccountTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/9/2020 22:02:53'!
PASSED!

!testRun: #AccountTest #test08SingleTransferAccountTransferNet stamp: 'VP 11/9/2020 22:02:53'!
FAILURE!

!testRun: #AccountTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/9/2020 22:02:56'!
FAILURE!
!AccountTest methodsFor: 'tests -- account summary' stamp: 'VP 11/9/2020 22:03:03' prior: 50890589!
test03AccountWithSingleWithdrawSummary

	| account summaryCollection |
	
	account := ReceptiveAccount new.
	
	Withdraw register: 100 on: account.
	
	summaryCollection := (AccountSummary for: account) asCollection.
	
	self assert: 1 + 1 equals: summaryCollection size.
	self assert: 'Extracci�n por 100' equals: (summaryCollection at: 1).
	self assert: 'Balance = -100' equals: (summaryCollection at: 2).! !

!testRun: #AccountTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/9/2020 22:03:04'!
PASSED!

!testRun: #AccountTest #test01EmptyAccountSummary stamp: 'VP 11/9/2020 22:03:04'!
PASSED!

!testRun: #AccountTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/9/2020 22:03:04'!
PASSED!

!testRun: #AccountTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/9/2020 22:03:04'!
PASSED!

!testRun: #AccountTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/9/2020 22:03:04'!
PASSED!

!testRun: #AccountTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/9/2020 22:03:04'!
PASSED!

!testRun: #AccountTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/9/2020 22:03:04'!
PASSED!

!testRun: #AccountTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/9/2020 22:03:04'!
PASSED!

!testRun: #AccountTest #test08SingleTransferAccountTransferNet stamp: 'VP 11/9/2020 22:03:04'!
FAILURE!

!testRun: #AccountTest #test08SingleTransferAccountTransferNet stamp: 'VP 11/9/2020 22:03:04'!
FAILURE!

----QUIT----(9 November 2020 22:12:29) CuisUniversity-4384.image priorSource: 17851479!

----STARTUP---- (12 November 2020 21:08:16) as /Users/vpomsztein/Documents/Facu/ISW1/PracticaParcial/CuisUniversity-4384.image!

!AccountTest methodsFor: 'tests -- transfer net' stamp: 'VP 11/12/2020 21:13:52' prior: 50890685!
test08SingleTransferAccountTransferNet

	| account1 account2 transferNet |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 30 from: account2 to: account1.
	
	transferNet := (TransferNet for: account1) value.
	
	self assert: 30 equals: transferNet.! !
!AccountTest methodsFor: 'tests -- transfer net' stamp: 'VP 11/12/2020 21:14:01'!
test08SingleTransferAccountWithPositiveTransferNet

	| account1 account2 transferNet |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 30 from: account2 to: account1.
	
	transferNet := (TransferNet for: account1) value.
	
	self assert: 30 equals: transferNet.! !

!methodRemoval: AccountTest #test08SingleTransferAccountTransferNet stamp: 'VP 11/12/2020 21:14:01'!
test08SingleTransferAccountTransferNet

	| account1 account2 transferNet |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 30 from: account2 to: account1.
	
	transferNet := (TransferNet for: account1) value.
	
	self assert: 30 equals: transferNet.!
!AccountTest methodsFor: 'tests -- transfer net' stamp: 'VP 11/12/2020 21:14:14'!
test09SingleTransferAccountWithNegativeTransferNet

	| account1 account2 transferNet |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 30 from: account1 to: account2.
	
	transferNet := (TransferNet for: account1) value.
	
	self assert: -30 equals: transferNet.! !

!testRun: #AccountTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/12/2020 21:14:16'!
FAILURE!

!testRun: #AccountTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/12/2020 21:14:27'!
FAILURE!

anAccount transactions!

anAccount transactions size = 1 ifTrue: [ 30 ] ifFalse: [ 0 ].!

(TransferNet for: account1) value!

TransferNet!
!TransferNet methodsFor: 'accessing' stamp: 'VP 11/12/2020 21:15:36' prior: 50890420 overrides: 16881508!
value
	
	^value.

	! !

!testRun: #AccountTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/12/2020 21:15:43'!
PASSED!

!testRun: #AccountTest #test01EmptyAccountSummary stamp: 'VP 11/12/2020 21:15:43'!
PASSED!

!testRun: #AccountTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/12/2020 21:15:43'!
PASSED!

!testRun: #AccountTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/12/2020 21:15:43'!
PASSED!

!testRun: #AccountTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/12/2020 21:15:43'!
PASSED!

!testRun: #AccountTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/12/2020 21:15:43'!
PASSED!

!testRun: #AccountTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/12/2020 21:15:43'!
PASSED!

!testRun: #AccountTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/12/2020 21:15:43'!
PASSED!

!testRun: #AccountTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/12/2020 21:15:43'!
PASSED!

!testRun: #AccountTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/12/2020 21:15:43'!
FAILURE!

!testRun: #AccountTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/12/2020 21:15:43'!
FAILURE!
!TransferNet methodsFor: 'initialization' stamp: 'VP 11/12/2020 21:17:09' prior: 50890516!
initializeFor: anAccount

	value := anAccount transactions size = 1 ifTrue: [ 
		((anAccount transactions at: 1) isKindOf: TransferDeposit) ifTrue: [ 30 ] ifFalse: [ -30 ]
	] ifFalse: [ 0 ].! !

!testRun: #AccountTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/12/2020 21:17:16'!
PASSED!

!testRun: #AccountTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/12/2020 21:17:18'!
PASSED!

!testRun: #AccountTest #test01EmptyAccountSummary stamp: 'VP 11/12/2020 21:17:18'!
PASSED!

!testRun: #AccountTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/12/2020 21:17:18'!
PASSED!

!testRun: #AccountTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/12/2020 21:17:18'!
PASSED!

!testRun: #AccountTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/12/2020 21:17:18'!
PASSED!

!testRun: #AccountTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/12/2020 21:17:18'!
PASSED!

!testRun: #AccountTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/12/2020 21:17:18'!
PASSED!

!testRun: #AccountTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/12/2020 21:17:18'!
PASSED!

!testRun: #AccountTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/12/2020 21:17:18'!
PASSED!

!testRun: #AccountTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/12/2020 21:17:18'!
PASSED!
!AccountTest methodsFor: 'tests -- transfer net' stamp: 'VP 11/12/2020 21:18:14'!
test09MultipleTransfersAccountTransferNet

	| account1 account2 transferNet |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 30 from: account1 to: account2.
	Transfer register: 20 from: account2 to: account1.
	Transfer register: 5 from: account2 to: account1.
	
	transferNet := (TransferNet for: account1) value.
	
	self assert: 5 equals: transferNet.! !

!testRun: #AccountTest #test09MultipleTransfersAccountTransferNet stamp: 'VP 11/12/2020 21:18:15'!
FAILURE!
!AccountTest methodsFor: 'tests -- transfer net' stamp: 'VP 11/12/2020 21:18:46' prior: 50891080!
test09MultipleTransfersAccountTransferNet

	| account1 account2 transferNet |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 30 from: account2 to: account1.
	Transfer register: 20 from: account1 to: account2.
	Transfer register: 5 from: account1 to: account2.
	
	transferNet := (TransferNet for: account1) value.
	
	self assert: 5 equals: transferNet.! !
!AccountTest methodsFor: 'tests -- transfer net' stamp: 'VP 11/12/2020 21:18:52'!
test10MultipleTransfersAccountTransferNet

	| account1 account2 transferNet |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 30 from: account2 to: account1.
	Transfer register: 20 from: account1 to: account2.
	Transfer register: 5 from: account1 to: account2.
	
	transferNet := (TransferNet for: account1) value.
	
	self assert: 5 equals: transferNet.! !

!methodRemoval: AccountTest #test09MultipleTransfersAccountTransferNet stamp: 'VP 11/12/2020 21:18:52'!
test09MultipleTransfersAccountTransferNet

	| account1 account2 transferNet |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 30 from: account2 to: account1.
	Transfer register: 20 from: account1 to: account2.
	Transfer register: 5 from: account1 to: account2.
	
	transferNet := (TransferNet for: account1) value.
	
	self assert: 5 equals: transferNet.!
!TransferNet methodsFor: 'initialization' stamp: 'VP 11/12/2020 21:19:45' prior: 50891033!
initializeFor: anAccount

	value := anAccount transactions sum: [ :aTransaction | aTransaction transferValue ].! !
!AccountTransaction methodsFor: 'description' stamp: 'VP 11/12/2020 21:19:54'!
transferValue 

	self subclassResponsibility ! !
!Deposit methodsFor: 'description' stamp: 'VP 11/12/2020 21:20:02' overrides: 50891155!
transferValue

	^0.! !
!TransferComponents methodsFor: 'value' stamp: 'VP 11/12/2020 21:20:28' overrides: 50891155!
transferValue

	^transfer value.! !

!methodRemoval: TransferComponents #transferValue stamp: 'VP 11/12/2020 21:20:49'!
transferValue

	^transfer value.!
!TransferDeposit methodsFor: 'description' stamp: 'VP 11/12/2020 21:20:53' overrides: 50891155!
transferValue

	^transfer value.! !
!TransferWithdraw methodsFor: 'description' stamp: 'VP 11/12/2020 21:21:10' overrides: 50891155!
transferValue

	^-1 * transfer value.! !
!Withdraw methodsFor: 'description' stamp: 'VP 11/12/2020 21:21:18' overrides: 50891155!
transferValue

	^0.! !

!testRun: #AccountTest #test01EmptyAccountSummary stamp: 'VP 11/12/2020 21:21:20'!
PASSED!

!testRun: #AccountTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/12/2020 21:21:20'!
PASSED!

!testRun: #AccountTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/12/2020 21:21:20'!
PASSED!

!testRun: #AccountTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/12/2020 21:21:20'!
PASSED!

!testRun: #AccountTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/12/2020 21:21:20'!
PASSED!

!testRun: #AccountTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/12/2020 21:21:20'!
PASSED!

!testRun: #AccountTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/12/2020 21:21:20'!
ERROR!

!testRun: #AccountTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/12/2020 21:21:20'!
PASSED!

!testRun: #AccountTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/12/2020 21:21:20'!
PASSED!

!testRun: #AccountTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/12/2020 21:21:20'!
PASSED!

!testRun: #AccountTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/12/2020 21:21:20'!
ERROR!
!TransferNet methodsFor: 'initialization' stamp: 'VP 11/12/2020 21:21:34' prior: 50891148!
initializeFor: anAccount

	value := anAccount transactions sum: [ :aTransaction | aTransaction transferValue ] ifEmpty: [ 0 ].! !

!testRun: #AccountTest #test01EmptyAccountSummary stamp: 'VP 11/12/2020 21:21:36'!
PASSED!

!testRun: #AccountTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/12/2020 21:21:37'!
PASSED!

!testRun: #AccountTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/12/2020 21:21:37'!
PASSED!

!testRun: #AccountTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/12/2020 21:21:37'!
PASSED!

!testRun: #AccountTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/12/2020 21:21:37'!
PASSED!

!testRun: #AccountTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/12/2020 21:21:37'!
PASSED!

!testRun: #AccountTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/12/2020 21:21:37'!
PASSED!

!testRun: #AccountTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/12/2020 21:21:37'!
PASSED!

!testRun: #AccountTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/12/2020 21:21:37'!
PASSED!

!testRun: #AccountTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/12/2020 21:21:37'!
PASSED!

!methodRemoval: AccountTransaction #description stamp: 'VP 11/12/2020 21:23:29'!
description 

	self subclassResponsibility !

!methodRemoval: AccountTransaction #transferValue stamp: 'VP 11/12/2020 21:23:31'!
transferValue 

	self subclassResponsibility !
!AccountTransaction methodsFor: 'balance' stamp: 'VP 11/12/2020 21:24:20'!
affectReport: aReport

	self subclassResponsibility ! !
!AccountTransaction methodsFor: 'balance' stamp: 'VP 11/12/2020 21:24:49' prior: 50887939!
affectBalance: aBalance

	self subclassResponsibility! !
!Deposit methodsFor: 'balance' stamp: 'VP 11/12/2020 21:25:26' overrides: 50891272!
affectReport: aReport

	aReport affectForDeposit: self.! !
!TransferDeposit methodsFor: 'description' stamp: 'VP 11/12/2020 21:26:01' overrides: 50891272!
affectReport: aReport

	aReport affectForTransferDeposit: self.! !
!TransferWithdraw methodsFor: 'description' stamp: 'VP 11/12/2020 21:26:16' overrides: 50891272!
affectReport: aReport

	aReport affectForTransferWithdraw: self.! !
!Withdraw methodsFor: 'description' stamp: 'VP 11/12/2020 21:26:31' overrides: 50891272!
affectReport: aReport

	aReport affectForWithdraw: self.! !
!AccountReport methodsFor: 'no messages' stamp: 'VP 11/12/2020 21:27:02'!
affectForDeposit: aDeposit

	self subclassResponsibility.! !
!AccountReport methodsFor: 'as yet unclassified' stamp: 'VP 11/12/2020 21:27:11'!
affectForWithdraw: aWithdraw

	self subclassResponsibility.! !
!AccountReport methodsFor: 'as yet unclassified' stamp: 'VP 11/12/2020 21:27:15'!
affectForTransferWithdraw: aTransferWithdraw

	self subclassResponsibility.! !
!AccountReport methodsFor: 'as yet unclassified' stamp: 'VP 11/12/2020 21:27:22'!
affectForTransferDeposit: aTransferDeposit

	self subclassResponsibility.! !
!AccountSummary methodsFor: 'initialization' stamp: 'VP 11/12/2020 21:28:26' overrides: 50891303!
affectForDeposit: aDeposit

	! !
!AccountSummary methodsFor: 'report building -- private' stamp: 'VP 11/12/2020 21:29:19' prior: 50891325 overrides: 50891303!
affectForDeposit: aDeposit

	'Dep�sito por ', aDeposit value asString.! !
!AccountSummary methodsFor: 'initialization' stamp: 'VP 11/12/2020 21:30:26' prior: 50890243!
initializeFor: anAccount

	summaryCollection := self basicAccountReportFor: anAccount.
	anAccount transactions do: [ :aTransaction |
		aTransaction affectReport: self.
	].! !
!AccountSummary methodsFor: 'report building -- private' stamp: 'VP 11/12/2020 21:31:28'!
addTransactionDescription: aTransactionDescription

	summaryCollection addFirst: aTransactionDescription.! !
!AccountSummary methodsFor: 'report building -- private' stamp: 'VP 11/12/2020 21:31:42' prior: 50891330 overrides: 50891303!
affectForDeposit: aDeposit

	self addTransactionDescription: 'Dep�sito por ', aDeposit value asString.! !
!AccountSummary methodsFor: 'report building -- private' stamp: 'VP 11/12/2020 21:32:05' overrides: 50891308!
affectForWithdraw: aWithdraw

	self addTransactionDescription: 'Extracci�n por ', aWithdraw value asString.! !
!AccountSummary methodsFor: 'report building -- private' stamp: 'VP 11/12/2020 21:32:20' overrides: 50891313!
affectForTransferWithdraw: aWithdraw

	self addTransactionDescription: 'Extracci�n por ', aWithdraw value asString.! !

!methodRemoval: TransferWithdraw #description stamp: 'VP 11/12/2020 21:32:29'!
description

	^'Salida por transferencia de ', self value asString.!

!methodRemoval: Deposit #description stamp: 'VP 11/12/2020 21:32:34'!
description

	^'Dep�sito por ', self value asString.!
!AccountSummary methodsFor: 'report building -- private' stamp: 'VP 11/12/2020 21:32:48' prior: 50891367 overrides: 50891313!
affectForTransferWithdraw: aWithdraw

	self addTransactionDescription: 'Salida por transferencia de ', self value asString! !
!AccountSummary methodsFor: 'report building -- private' stamp: 'VP 11/12/2020 21:33:07' overrides: 50891319!
affectForTransferDeposit: aTransferDeposit

	self addTransactionDescription: 'Entrada por transferencia de ', aTransferDeposit value asString! !
!AccountSummary methodsFor: 'report building -- private' stamp: 'VP 11/12/2020 21:33:12' prior: 50891384 overrides: 50891313!
affectForTransferWithdraw: aTransferWithdraw

	self addTransactionDescription: 'Salida por transferencia de ', self value asString! !
!AccountSummary methodsFor: 'report building -- private' stamp: 'VP 11/12/2020 21:33:19' prior: 50891401 overrides: 50891313!
affectForTransferWithdraw: aTransferWithdraw

	self addTransactionDescription: 'Salida por transferencia de ', aTransferWithdraw value asString! !

!methodRemoval: Withdraw #description stamp: 'VP 11/12/2020 21:33:39'!
description

	^'Extracci�n por ', self value asString.!

!methodRemoval: TransferDeposit #description stamp: 'VP 11/12/2020 21:33:44'!
description

	^'Entrada por transferencia de ', self value asString.!

!testRun: #AccountTest #test01EmptyAccountSummary stamp: 'VP 11/12/2020 21:34:54'!
PASSED!

!testRun: #AccountTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/12/2020 21:34:54'!
PASSED!

!testRun: #AccountTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/12/2020 21:34:54'!
PASSED!

!testRun: #AccountTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/12/2020 21:34:54'!
PASSED!

!testRun: #AccountTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/12/2020 21:34:54'!
PASSED!

!testRun: #AccountTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/12/2020 21:34:54'!
PASSED!

!testRun: #AccountTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/12/2020 21:34:54'!
PASSED!

!testRun: #AccountTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/12/2020 21:34:54'!
PASSED!

!testRun: #AccountTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/12/2020 21:34:54'!
PASSED!

!testRun: #AccountTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/12/2020 21:34:54'!
PASSED!

!testRun: #AccountTest #test01EmptyAccountSummary stamp: 'VP 11/12/2020 21:35:11'!
PASSED!

!testRun: #AccountTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/12/2020 21:35:11'!
PASSED!

!testRun: #AccountTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/12/2020 21:35:11'!
PASSED!

!testRun: #AccountTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/12/2020 21:35:11'!
PASSED!

!testRun: #AccountTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/12/2020 21:35:11'!
PASSED!

!testRun: #AccountTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/12/2020 21:35:11'!
PASSED!

!testRun: #AccountTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/12/2020 21:35:11'!
PASSED!

!testRun: #AccountTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/12/2020 21:35:11'!
PASSED!

!testRun: #AccountTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/12/2020 21:35:11'!
PASSED!

!testRun: #AccountTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/12/2020 21:35:11'!
PASSED!
!TransferNet methodsFor: 'accessing' stamp: 'VP 11/12/2020 21:35:54' overrides: 50891303!
affectForDeposit: aDeposit

	self addTransactionDescription: 'Dep�sito por ', aDeposit value asString.! !
!TransferNet methodsFor: 'accessing' stamp: 'VP 11/12/2020 21:35:57' prior: 50890991 overrides: 16881508!
value
	
	^value.! !
!TransferNet methodsFor: 'report building -- private' stamp: 'VP 11/12/2020 21:36:12' prior: 50891494 overrides: 50891303!
affectForDeposit: aDeposit

	! !
!TransferNet methodsFor: 'report building -- private' stamp: 'VP 11/12/2020 21:36:14' prior: 50891506 overrides: 50891303!
affectForDeposit: aDeposit! !
!TransferNet methodsFor: 'report building -- private' stamp: 'VP 11/12/2020 21:36:21' overrides: 50891308!
affectForWithdraw: aWithdraw! !
!TransferNet methodsFor: 'report building -- private' stamp: 'VP 11/12/2020 21:36:30' overrides: 50891319!
affectForTransferDeposit: aDeposit

	! !
!TransferNet methodsFor: 'report building -- private' stamp: 'VP 11/12/2020 21:36:35' prior: 50891521 overrides: 50891319!
affectForTransferDeposit: aTransferDeposit

	! !
!TransferNet methodsFor: 'initialization' stamp: 'VP 11/12/2020 21:37:07' prior: 50891223!
initializeFor: anAccount

	value := 0.
	anAccount transactions do: [ :aTransaction | aTransaction affectReport: self ].! !

	1 add: 2!

	1!
!TransferNet methodsFor: 'report building -- private' stamp: 'VP 11/12/2020 21:38:05' prior: 50891527 overrides: 50891319!
affectForTransferDeposit: aTransferDeposit

	value := value + aTransferDeposit value.! !
!TransferNet methodsFor: 'report building -- private' stamp: 'VP 11/12/2020 21:38:19' overrides: 50891313!
affectForTransferWithdraw: aTransferWithdraw

	value := value - aTransferWithdraw value.! !

!methodRemoval: Deposit #transferValue stamp: 'VP 11/12/2020 21:38:32'!
transferValue

	^0.!

!methodRemoval: TransferDeposit #transferValue stamp: 'VP 11/12/2020 21:38:41'!
transferValue

	^transfer value.!

!methodRemoval: TransferWithdraw #transferValue stamp: 'VP 11/12/2020 21:38:46'!
transferValue

	^-1 * transfer value.!

!methodRemoval: Withdraw #transferValue stamp: 'VP 11/12/2020 21:38:49'!
transferValue

	^0.!

!testRun: #AccountTest #test01EmptyAccountSummary stamp: 'VP 11/12/2020 21:38:59'!
PASSED!

!testRun: #AccountTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/12/2020 21:38:59'!
PASSED!

!testRun: #AccountTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/12/2020 21:38:59'!
PASSED!

!testRun: #AccountTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/12/2020 21:38:59'!
PASSED!

!testRun: #AccountTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/12/2020 21:38:59'!
PASSED!

!testRun: #AccountTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/12/2020 21:38:59'!
PASSED!

!testRun: #AccountTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/12/2020 21:38:59'!
PASSED!

!testRun: #AccountTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/12/2020 21:38:59'!
PASSED!

!testRun: #AccountTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/12/2020 21:38:59'!
PASSED!

!testRun: #AccountTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/12/2020 21:38:59'!
PASSED!
!AccountReport methodsFor: 'report building -- private' stamp: 'VP 11/12/2020 21:42:27'!
buildReportForAccount: anAccount

	anAccount transactions do: [ :aTransaction |
		aTransaction affectReport: self.
	].! !
!AccountSummary methodsFor: 'initialization' stamp: 'VP 11/12/2020 21:42:45' prior: 50891336!
initializeFor: anAccount

	summaryCollection := self basicAccountReportFor: anAccount.
	self buildReportForAccount: anAccount.! !
!AccountReport methodsFor: 'report building -- private' stamp: 'VP 11/12/2020 21:42:52'!
buildReportFor: anAccount

	anAccount transactions do: [ :aTransaction |
		aTransaction affectReport: self.
	].! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'VP 11/12/2020 21:42:52' prior: 50891608!
initializeFor: anAccount

	summaryCollection := self basicAccountReportFor: anAccount.
	self buildReportFor: anAccount.! !

!methodRemoval: AccountReport #buildReportForAccount: stamp: 'VP 11/12/2020 21:42:52'!
buildReportForAccount: anAccount

	anAccount transactions do: [ :aTransaction |
		aTransaction affectReport: self.
	].!
!TransferNet methodsFor: 'initialization' stamp: 'VP 11/12/2020 21:43:08' prior: 50891532!
initializeFor: anAccount

	value := 0.
	self buildReportFor: anAccount.! !

!testRun: #AccountTest #test01EmptyAccountSummary stamp: 'VP 11/12/2020 21:43:09'!
PASSED!

!testRun: #AccountTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/12/2020 21:43:09'!
PASSED!

!testRun: #AccountTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/12/2020 21:43:09'!
PASSED!

!testRun: #AccountTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/12/2020 21:43:09'!
PASSED!

!testRun: #AccountTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/12/2020 21:43:09'!
PASSED!

!testRun: #AccountTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/12/2020 21:43:09'!
PASSED!

!testRun: #AccountTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/12/2020 21:43:09'!
PASSED!

!testRun: #AccountTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/12/2020 21:43:09'!
PASSED!

!testRun: #AccountTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/12/2020 21:43:09'!
PASSED!

!testRun: #AccountTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/12/2020 21:43:09'!
PASSED!

----SNAPSHOT----(12 November 2020 21:44:35) CuisUniversity-4384.image priorSource: 17896645!

----SNAPSHOT----(12 November 2020 21:47:12) CuisUniversity-4384.image priorSource: 17920764!

----QUIT----(12 November 2020 21:51:23) CuisUniversity-4384.image priorSource: 17920858!

----STARTUP---- (14 November 2020 10:36:19) as /Users/vpomsztein/Documents/Facu/ISW1/PracticaParcial/CuisUniversity-4384.image!


!classRenamed: #AccountTest as: #AccountReportTest stamp: 'VP 11/14/2020 10:38:59'!
Smalltalk renameClassNamed: #AccountTest as: #AccountReportTest!

!classDefinition: #AccountTree category: 'Portfolio-Solucion' stamp: 'VP 11/14/2020 10:45:25'!
AccountReport subclass: #AccountTree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountReportTest methodsFor: 'tests -- account tree' stamp: 'VP 11/14/2020 10:45:16'!
test11EmptyPortfolioTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio'.
	
	tree := (AccountTree for: rootPortfolio) tree.
	
	self assert: 1 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).! !

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/14/2020 10:46:25'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/14/2020 10:46:25'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/14/2020 10:46:25'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/14/2020 10:46:25'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/14/2020 10:46:25'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/14/2020 10:46:25'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/14/2020 10:46:25'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/14/2020 10:46:25'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/14/2020 10:46:25'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/14/2020 10:46:25'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/14/2020 10:46:25'!
ERROR!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/14/2020 10:46:25'!
ERROR!
!Account class methodsFor: 'instance creation' stamp: 'VP 11/14/2020 10:46:42'!
named: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString ! !
!Account class methodsFor: 'instance creation' stamp: 'VP 11/14/2020 10:47:16' prior: 50891752!
named: aName 
	^self new initializeNamed: aName! !

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/14/2020 10:47:17'!
ERROR!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'VP 11/14/2020 10:47:35'!
Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account methodsFor: 'initialization' stamp: 'VP 11/14/2020 10:47:35'!
initializeNamed: aName 
	self shouldBeImplemented.
	name := aName.! !
!Account methodsFor: 'initialization' stamp: 'VP 11/14/2020 10:47:42' prior: 50891774!
initializeNamed: aName 
	name := aName.! !

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/14/2020 10:47:43'!
ERROR!

!classDefinition: #AccountTree category: 'Portfolio-Solucion' stamp: 'VP 11/14/2020 10:48:33'!
AccountReport subclass: #AccountTree
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTree methodsFor: 'initialization' stamp: 'VP 11/14/2020 10:48:33'!
initializeFor: anAccount 
	self shouldBeImplemented.
	account := anAccount.! !
!AccountTree methodsFor: 'initialization' stamp: 'VP 11/14/2020 10:48:41' prior: 50891794!
initializeFor: anAccount
 
	account := anAccount.! !

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/14/2020 10:48:43'!
ERROR!
!AccountTree methodsFor: 'as yet unclassified' stamp: 'VP 11/14/2020 10:49:00'!
tree
	self shouldBeImplemented.! !
!AccountTree methodsFor: 'accessing' stamp: 'VP 11/14/2020 10:49:32' prior: 50891808!
tree
	
	^'Root Portfolio'.! !

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/14/2020 10:49:33'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/14/2020 10:49:33'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/14/2020 10:49:33'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/14/2020 10:49:33'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/14/2020 10:49:33'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/14/2020 10:49:33'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/14/2020 10:49:33'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/14/2020 10:49:33'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/14/2020 10:49:33'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/14/2020 10:49:33'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/14/2020 10:49:33'!
FAILURE!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/14/2020 10:49:33'!
FAILURE!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/14/2020 10:49:38'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/14/2020 10:49:38'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/14/2020 10:49:38'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/14/2020 10:49:38'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/14/2020 10:49:38'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/14/2020 10:49:38'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/14/2020 10:49:38'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/14/2020 10:49:38'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/14/2020 10:49:38'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/14/2020 10:49:38'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/14/2020 10:49:38'!
FAILURE!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/14/2020 10:49:38'!
FAILURE!
!AccountTree methodsFor: 'accessing' stamp: 'VP 11/14/2020 10:49:55' prior: 50891812!
tree
	
	^#('Root Portfolio').! !

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/14/2020 10:49:57'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/14/2020 10:49:57'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/14/2020 10:49:57'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/14/2020 10:49:57'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/14/2020 10:49:57'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/14/2020 10:49:57'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/14/2020 10:49:57'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/14/2020 10:49:57'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/14/2020 10:49:57'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/14/2020 10:49:57'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/14/2020 10:49:57'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account tree' stamp: 'VP 11/14/2020 10:51:13'!
test12SingleDepthLevelPortfolioTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio'.
	
	tree := (AccountTree for: rootPortfolio) tree.
	
	self assert: 1 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).! !
!AccountReportTest methodsFor: 'tests -- account tree' stamp: 'VP 11/14/2020 10:52:05' overrides: 16927572!
setUp

	! !

!classDefinition: #AccountReportTest category: 'Portfolio-Solucion' stamp: 'VP 11/14/2020 10:54:08'!
TestCase subclass: #AccountReportTest
	instanceVariableNames: 'accountEmily'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountReportTest category: 'Portfolio-Solucion' stamp: 'VP 11/14/2020 10:54:09'!
TestCase subclass: #AccountReportTest
	instanceVariableNames: 'accountEmily accountJorge'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountReportTest category: 'Portfolio-Solucion' stamp: 'VP 11/14/2020 10:54:10'!
TestCase subclass: #AccountReportTest
	instanceVariableNames: 'accountEmily accountJorge accountCharlie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountReportTest category: 'Portfolio-Solucion' stamp: 'VP 11/14/2020 10:54:11'!
TestCase subclass: #AccountReportTest
	instanceVariableNames: 'accountEmily accountJorge accountCharlie portfolioPadreDeCharlie'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountReportTest methodsFor: 'setUp/tearDown' stamp: 'VP 11/14/2020 10:54:05' prior: 50891954 overrides: 16927572!
setUp

	accountEmily := ReceptiveAccount named: 'Cuenta de Emily'.
	accountJorge := ReceptiveAccount named: 'Cuenta de Jorge'.
	accountCharlie := ReceptiveAccount named: 'Cuenta de Charlie'.
	
	portfolioPadreDeCharlie := Portfolio named: 'Portfolio del Padre de Charlie' with: accountCharlie.! !
!Account class methodsFor: 'as yet unclassified' stamp: 'VP 11/14/2020 10:54:30'!
named: aString with: aReceptiveAccount 
	self shouldBeImplemented.! !
!Account class methodsFor: 'as yet unclassified' stamp: 'VP 11/14/2020 10:55:18' prior: 50892006!
named: aName with: aReceptiveAccount 
	
	self named: aName! !
!Account class methodsFor: 'as yet unclassified' stamp: 'VP 11/14/2020 10:55:41' prior: 50892012!
named: aName with: aReceptiveAccount 
	
	^self named: aName;
		add: aReceptiveAccount;
		yourself.! !
!Account class methodsFor: 'instance creation' stamp: 'VP 11/14/2020 10:57:08' prior: 50892017!
named: aName with: aReceptiveAccount 
	
	self halt
	^self named: aName;
		add: aReceptiveAccount;
		yourself.! !
!Account class methodsFor: 'instance creation' stamp: 'VP 11/14/2020 10:57:10' prior: 50892024!
named: aName with: aReceptiveAccount 
	
	self halt.
	^self named: aName;
		add: aReceptiveAccount;
		yourself.! !

self named: aName!
!Account class methodsFor: 'instance creation' stamp: 'VP 11/14/2020 10:58:23' prior: 50892031!
named: aName with: aReceptiveAccount 
	
	^(self named: aName) add: aReceptiveAccount! !

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/14/2020 10:58:25'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/14/2020 10:58:25'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/14/2020 10:58:25'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/14/2020 10:58:25'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/14/2020 10:58:25'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/14/2020 10:58:25'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/14/2020 10:58:25'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/14/2020 10:58:25'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/14/2020 10:58:25'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/14/2020 10:58:25'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/14/2020 10:58:25'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/14/2020 10:58:25'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account tree' stamp: 'VP 11/14/2020 10:59:18' prior: 50891942!
test12SingleDepthLevelPortfolioTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily with: accountJorge.
	
	tree := (AccountTree for: rootPortfolio) tree.
	
	self assert: 1 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).! !
!AccountReportTest methodsFor: 'tests -- account tree' stamp: 'VP 11/14/2020 11:01:01' prior: 50892087!
test12SingleDepthLevelPortfolioTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily with: accountJorge.
	
	tree := (AccountTree for: rootPortfolio) tree.
	
	self assert: 3 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	self assert: (self indent: accountEmily name byLevel: 1) equals: (tree at: 2).
	self assert: (self indent: accountJorge name byLevel: 1) equals: (tree at: 3).! !

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/14/2020 11:01:03'!
ERROR!
!Account class methodsFor: 'as yet unclassified' stamp: 'VP 11/14/2020 11:01:14'!
named: aString with: aReceptiveAccount with: aReceptiveAccount3 
	self shouldBeImplemented.! !
!Account class methodsFor: 'as yet unclassified' stamp: 'VP 11/14/2020 11:01:57' prior: 50892121!
named: aName with: anAccount with: anotherAccount
	
	^((self named: aName) add: anAccount) add: anotherAccount.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'VP 11/14/2020 11:02:32' overrides: 50892039!
named: aName with: aReceptiveAccount 
	
	^(self named: aName) add: aReceptiveAccount.! !

!methodRemoval: Account class #named:with: stamp: 'VP 11/14/2020 11:02:37'!
named: aName with: aReceptiveAccount 
	
	^(self named: aName) add: aReceptiveAccount!

!methodRemoval: Account class #named:with:with: stamp: 'VP 11/14/2020 11:02:43'!
named: aName with: anAccount with: anotherAccount
	
	^((self named: aName) add: anAccount) add: anotherAccount.!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'VP 11/14/2020 11:02:52'!
named: aName with: anAccount with: anotherAccount
	
	^((self named: aName) add: anAccount) add: anotherAccount.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'VP 11/14/2020 11:02:58' prior: 50892135!
named: aName with: anAccount 
	
	^(self named: aName) add: anAccount.! !

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/14/2020 11:03:50'!
FAILURE!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/14/2020 11:03:50'!
FAILURE!

account accountsSize!
!AccountTree methodsFor: 'accessing' stamp: 'VP 11/14/2020 11:05:56' prior: 50891899!
tree
	
	^account accountsSize = 0 ifTrue: [ #('Root Portfolio') ] ifFalse: [ #('Root Portfolio', '    Account Emily', '    Account Jorge') ].
	! !

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/14/2020 11:05:57'!
FAILURE!
!AccountTree methodsFor: 'accessing' stamp: 'VP 11/14/2020 11:06:32' prior: 50892172!
tree
	
	^account accountsSize = 0 ifTrue: [ #('Root Portfolio') ] ifFalse: [ #('Root Portfolio' '    Account Emily' '    Account Jorge') ].
	! !

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/14/2020 11:06:43'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/14/2020 11:06:43'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/14/2020 11:06:43'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/14/2020 11:06:43'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/14/2020 11:06:43'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/14/2020 11:06:43'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/14/2020 11:06:43'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/14/2020 11:06:43'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/14/2020 11:06:43'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/14/2020 11:06:43'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/14/2020 11:06:43'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/14/2020 11:06:43'!
ERROR!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/14/2020 11:06:43'!
ERROR!
!AccountReportTest methodsFor: 'as yet unclassified' stamp: 'VP 11/14/2020 11:06:55'!
indent: aString byLevel: aSmallInteger 
	self shouldBeImplemented.! !

!methodRemoval: AccountReportTest #indent:byLevel: stamp: 'VP 11/14/2020 11:07:02'!
indent: aString byLevel: aSmallInteger 
	self shouldBeImplemented.!
!AccountReportTest methodsFor: 'tests -- account tree' stamp: 'VP 11/14/2020 11:07:27' prior: 50892100!
test12SingleDepthLevelPortfolioTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily with: accountJorge.
	
	tree := (AccountTree for: rootPortfolio) tree.
	
	self assert: 3 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	self assert: (AccountTree indent: accountEmily name byLevel: 1) equals: (tree at: 2).
	self assert: (AccountTree indent: accountJorge name byLevel: 1) equals: (tree at: 3).! !

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/14/2020 11:07:29'!
ERROR!
!AccountTree class methodsFor: 'report building -- private' stamp: 'VP 11/14/2020 11:07:42'!
indent: aString byLevel: aSmallInteger 
	self shouldBeImplemented.! !

1 to: 1!

self do: [ 'hola' ]!

self do: [ :algo | 'hola' ]!

self inject: '' into: [ :algo :otraCosa | algo , 'holaaa' ]!
!AccountTree class methodsFor: 'report building -- private' stamp: 'VP 11/14/2020 11:10:34' prior: 50892268!
indent: aString byLevel: anIndentLevel 
	
	^(1 to: anIndentLevel) inject: aString into: [ :indentedString :indentLevel | '    ', indentedString ].! !

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/14/2020 11:10:38'!
FAILURE!
!Account methodsFor: 'transactions' stamp: 'VP 11/14/2020 11:11:07' overrides: 16882612!
name

	^name.! !

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/14/2020 11:11:17'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/14/2020 11:11:17'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/14/2020 11:11:17'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/14/2020 11:11:17'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/14/2020 11:11:17'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/14/2020 11:11:17'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/14/2020 11:11:17'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/14/2020 11:11:17'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/14/2020 11:11:17'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/14/2020 11:11:17'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/14/2020 11:11:17'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/14/2020 11:11:17'!
FAILURE!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/14/2020 11:11:17'!
FAILURE!
!AccountTree methodsFor: 'accessing' stamp: 'VP 11/14/2020 11:11:56' prior: 50892183!
tree
	
	^account accountsSize = 0 ifTrue: [ #('Root Portfolio') ] ifFalse: [ #('Root Portfolio' '    Cuenta de Emily' '    Cuenta de Jorge') ].
	! !

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/14/2020 11:11:58'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/14/2020 11:12:02'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/14/2020 11:12:02'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/14/2020 11:12:02'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/14/2020 11:12:02'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/14/2020 11:12:02'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/14/2020 11:12:02'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/14/2020 11:12:02'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/14/2020 11:12:02'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/14/2020 11:12:02'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/14/2020 11:12:02'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/14/2020 11:12:02'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/14/2020 11:12:02'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account tree' stamp: 'VP 11/14/2020 11:13:38'!
test13MultipleDepthLevelPortfolioTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily with: accountJorge.
	rootPortfolio add: portfolioPadreDeCharlie.
	
	tree := (AccountTree for: rootPortfolio) tree.
	
	self assert: 5 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	self assert: (AccountTree indent: accountEmily name byLevel: 1) equals: (tree at: 2).
	self assert: (AccountTree indent: accountJorge name byLevel: 1) equals: (tree at: 3).
	self assert: (AccountTree indent: portfolioPadreDeCharlie name byLevel: 1) equals: (tree at: 3).
	self assert: (AccountTree indent: accountCharlie name byLevel: 2) equals: (tree at: 3).! !

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/14/2020 11:13:40'!
FAILURE!

!classDefinition: #AccountTree category: 'Portfolio-Solucion' stamp: 'VP 11/14/2020 11:14:05'!
AccountReport subclass: #AccountTree
	instanceVariableNames: 'tree'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTree methodsFor: 'as yet unclassified' stamp: 'VP 11/14/2020 11:14:05' prior: 50892338!
tree
	
	^tree accountsSize = 0 ifTrue: [ #('Root Portfolio') ] ifFalse: [ #('Root Portfolio' '    Cuenta de Emily' '    Cuenta de Jorge') ].
	! !
!AccountTree methodsFor: 'as yet unclassified' stamp: 'VP 11/14/2020 11:14:05' prior: 50891800!
initializeFor: anAccount
 
	tree := anAccount.! !
!AccountTree methodsFor: 'initialization' stamp: 'VP 11/14/2020 11:15:32' prior: 50892436!
initializeFor: aPortfolio
 
	tree := OrderedCollection with: aPortfolio name.
	aPortfolio affectReport: self.! !
!AccountReport methodsFor: 'report building -- private' stamp: 'VP 11/14/2020 11:16:21'!
buildTransactionReportFor: anAccount

	anAccount transactions do: [ :aTransaction |
		aTransaction affectReport: self.
	].! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'VP 11/14/2020 11:16:21' prior: 50891636!
initializeFor: anAccount

	value := 0.
	self buildTransactionReportFor: anAccount.! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'VP 11/14/2020 11:16:21' prior: 50891622!
initializeFor: anAccount

	summaryCollection := self basicAccountReportFor: anAccount.
	self buildTransactionReportFor: anAccount.! !

!methodRemoval: AccountReport #buildReportFor: stamp: 'VP 11/14/2020 11:16:21'!
buildReportFor: anAccount

	anAccount transactions do: [ :aTransaction |
		aTransaction affectReport: self.
	].!
!Account methodsFor: 'transactions' stamp: 'VP 11/14/2020 11:16:47'!
affectReport: aReport

	self subclassResponsibility ! !
!Portfolio methodsFor: 'composition' stamp: 'VP 11/14/2020 11:17:48' overrides: 50892474!
affectReport: aReport

	aReport affectForPortfolio: self.! !
!ReceptiveAccount methodsFor: 'composition' stamp: 'VP 11/14/2020 11:18:06' overrides: 50892474!
affectReport: aReport

	aReport affectForReceptiveAccount: self.! !
!AccountTree methodsFor: 'accessing' stamp: 'VP 11/14/2020 11:18:52'!
affectReportForPortfolio: aPortfolio

	tree ! !

AccountReport subclass: #AccountTree
	instanceVariableNames: 'tree indentLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTree category: 'Portfolio-Solucion' stamp: 'VP 11/14/2020 11:19:00'!
AccountReport subclass: #AccountTree
	instanceVariableNames: 'tree indentLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTree methodsFor: 'initialization' stamp: 'VP 11/14/2020 11:19:14' prior: 50892441!
initializeFor: aPortfolio
 
	tree := OrderedCollection with: aPortfolio name.
	indentLevel := 1.
	aPortfolio affectReport: self.! !
!AccountTree methodsFor: 'initialization' stamp: 'VP 11/14/2020 11:19:14' prior: 50892507!
initializeFor: aPortfolio
 
	tree := OrderedCollection with: aPortfolio name.
	indentLevel := 1.
	
	aPortfolio affectReport: self.! !
!AccountTree methodsFor: 'report building -- private' stamp: 'VP 11/14/2020 11:20:22' prior: 50892489!
affectReportForPortfolio: aPortfolio

	tree add: (AccountTree indent: aPortfolio name byLevel: indentLevel).
	aPortfolio affectReport: self.! !
!AccountTree methodsFor: 'report building -- private' stamp: 'VP 11/14/2020 11:20:31' prior: 50892522!
affectReportForPortfolio: aPortfolio

	tree add: (AccountTree indent: aPortfolio name byLevel: indentLevel).
	indentLevel := indentLevel + 1.
	aPortfolio affectReport: self.! !
!Portfolio methodsFor: 'report' stamp: 'VP 11/14/2020 11:24:27' prior: 50892479 overrides: 50892474!
affectReport: aReport

	aReport affectForPortfolio: self.
	accounts do: [ : anAccount | aReport affectFor: anAccount ].! !
!Portfolio methodsFor: 'report' stamp: 'VP 11/14/2020 11:27:05' prior: 50892539 overrides: 50892474!
affectReport: aReport

	aReport affectForPortfolio: self withAccounts: accounts.! !
!AccountTree methodsFor: 'report building -- private' stamp: 'VP 11/14/2020 11:27:45'!
affectForPortfolio: aPortfolio

	tree add: (AccountTree indent: aPortfolio name byLevel: indentLevel).
	indentLevel := indentLevel + 1.
	aPortfolio affectReport: self.! !

!methodRemoval: AccountTree #affectReportForPortfolio: stamp: 'VP 11/14/2020 11:27:45'!
affectReportForPortfolio: aPortfolio

	tree add: (AccountTree indent: aPortfolio name byLevel: indentLevel).
	indentLevel := indentLevel + 1.
	aPortfolio affectReport: self.!
!AccountTree methodsFor: 'report building -- private' stamp: 'VP 11/14/2020 11:27:52'!
affectForPortfolio: aPortfolio withAccounts: accounts

	tree add: (AccountTree indent: aPortfolio name byLevel: indentLevel).
	indentLevel := indentLevel + 1.
	aPortfolio affectReport: self.! !
!AccountTree methodsFor: 'report building -- private' stamp: 'VP 11/14/2020 11:29:00' prior: 50892569!
affectForPortfolio: aPortfolio withAccounts: accounts

	accounts do: [ :anAccount | tree add: (AccountTree indent: anAccount name byLevel: indentLevel) ].
	tree add: (AccountTree indent: aPortfolio name byLevel: indentLevel).
	indentLevel := indentLevel + 1.
	aPortfolio affectReport: self.! !

!methodRemoval: AccountTree #affectForPortfolio: stamp: 'VP 11/14/2020 11:29:19'!
affectForPortfolio: aPortfolio

	tree add: (AccountTree indent: aPortfolio name byLevel: indentLevel).
	indentLevel := indentLevel + 1.
	aPortfolio affectReport: self.!
!AccountTree methodsFor: 'report building -- private' stamp: 'VP 11/14/2020 11:29:51' prior: 50892579!
affectForPortfolio: aPortfolio withAccounts: accounts

	accounts do: [ :anAccount | tree add: (AccountTree indent: anAccount name byLevel: indentLevel) ].
	indentLevel := indentLevel + 1.
	accounts do: [ :anAccount | anAccount affectReport: self ].! !
!AccountTree methodsFor: 'report building -- private' stamp: 'VP 11/14/2020 11:30:28' prior: 50892600!
affectForPortfolio: aPortfolio withAccounts: accounts

	accounts do: [ :anAccount | tree add: (AccountTree indent: anAccount name byLevel: indentLevel) ].
	indentLevel := indentLevel + 1.
	accounts do: [ :anAccount | anAccount affectReport: self ].
	indentLevel := indentLevel - 1.! !
!AccountTree methodsFor: 'report building -- private' stamp: 'VP 11/14/2020 11:36:07' prior: 50892612!
affectForPortfolio: aPortfolio withAccounts: accounts

	accounts do: [ :anAccount |
		indentLevel := indentLevel + 1.
		anAccount affectReport: self.
		indentLevel := indentLevel - 1.
	].! !
!AccountTree methodsFor: 'report building -- private' stamp: 'VP 11/14/2020 11:36:30'!
affectForReceptiveAccount: aReceptiveAccount

	(AccountTree indent: aReceptiveAccount name byLevel: indentLevel).! !
!AccountTree methodsFor: 'report building -- private' stamp: 'VP 11/14/2020 11:36:35' prior: 50892634!
affectForReceptiveAccount: aReceptiveAccount

	tree add: (AccountTree indent: aReceptiveAccount name byLevel: indentLevel).! !
!AccountTree methodsFor: 'initialization' stamp: 'VP 11/14/2020 11:38:12' prior: 50892514!
initializeFor: aPortfolio
 
	tree := OrderedCollection with: aPortfolio name.
	indentLevel := 0.
	
	aPortfolio affectReport: self.! !
!AccountTree methodsFor: 'report building -- private' stamp: 'VP 11/14/2020 11:38:38' prior: 50892625!
affectForPortfolio: aPortfolio withAccounts: accounts

	
	accounts do: [ :anAccount |
		indentLevel := indentLevel + 1.
		anAccount affectReport: self.
		indentLevel := indentLevel - 1.
	].! !
!AccountTree methodsFor: 'initialization' stamp: 'VP 11/14/2020 11:38:47' prior: 50892648!
initializeFor: aPortfolio
 
	tree := OrderedCollection new.
	indentLevel := 0.
	
	aPortfolio affectReport: self.! !
!AccountTree methodsFor: 'report building -- private' stamp: 'VP 11/14/2020 11:38:57' prior: 50892656!
affectForPortfolio: aPortfolio withAccounts: accounts

	tree add: aPortfolio name.
	accounts do: [ :anAccount |
		indentLevel := indentLevel + 1.
		anAccount affectReport: self.
		indentLevel := indentLevel - 1.
	].! !
!AccountTree methodsFor: 'report building -- private' stamp: 'VP 11/14/2020 11:39:31' prior: 50892672!
affectForPortfolio: aPortfolio withAccounts: accounts

	tree add: (AccountTree indent: aPortfolio name byLevel: indentLevel).
	accounts do: [ :anAccount |
		indentLevel := indentLevel + 1.
		anAccount affectReport: self.
		indentLevel := indentLevel - 1.
	].! !

(AccountTree indent: 'Dan' byLevel: 0)!
!AccountTree methodsFor: 'report building -- private' stamp: 'VP 11/14/2020 11:39:56' prior: 50892683!
affectForPortfolio: aPortfolio withAccounts: accounts

	tree add: (AccountTree indent: aPortfolio name byLevel: indentLevel).
	accounts do: [ :anAccount |
		indentLevel := indentLevel + 1.
		anAccount affectReport: self.
		indentLevel := indentLevel - 1.
	].! !

----SNAPSHOT----(14 November 2020 11:40:48) CuisUniversity-4384.image priorSource: 17920952!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/14/2020 11:41:07'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/14/2020 11:41:07'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/14/2020 11:41:07'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/14/2020 11:41:07'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/14/2020 11:41:07'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/14/2020 11:41:07'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/14/2020 11:41:07'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/14/2020 11:41:07'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/14/2020 11:41:07'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/14/2020 11:41:07'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/14/2020 11:41:07'!
ERROR!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/14/2020 11:41:07'!
ERROR!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/14/2020 11:41:07'!
ERROR!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/14/2020 11:41:10'!
ERROR!
!AccountTree methodsFor: 'accessing' stamp: 'VP 11/14/2020 11:41:20' prior: 50892428!
tree
	
	^tree.
	! !

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/14/2020 11:41:21'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/14/2020 11:41:22'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/14/2020 11:41:23'!
FAILURE!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/14/2020 11:41:50'!
FAILURE!
!AccountReportTest methodsFor: 'tests -- account tree' stamp: 'VP 11/14/2020 11:42:01' prior: 50892391!
test13MultipleDepthLevelPortfolioTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily with: accountJorge.
	rootPortfolio add: portfolioPadreDeCharlie.
	
	tree := (AccountTree for: rootPortfolio) tree.
	
	self assert: 5 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	self assert: (AccountTree indent: accountEmily name byLevel: 1) equals: (tree at: 2).
	self assert: (AccountTree indent: accountJorge name byLevel: 1) equals: (tree at: 3).
	self assert: (AccountTree indent: portfolioPadreDeCharlie name byLevel: 1) equals: (tree at: 4).
	self assert: (AccountTree indent: accountCharlie name byLevel: 2) equals: (tree at: 5).! !

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/14/2020 11:42:02'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/14/2020 11:42:02'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/14/2020 11:42:02'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/14/2020 11:42:02'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/14/2020 11:42:02'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/14/2020 11:42:02'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/14/2020 11:42:02'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/14/2020 11:42:02'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/14/2020 11:42:02'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/14/2020 11:42:02'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/14/2020 11:42:02'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/14/2020 11:42:02'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/14/2020 11:42:02'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/14/2020 11:42:02'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/14/2020 11:42:06'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/14/2020 11:42:06'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/14/2020 11:42:06'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/14/2020 11:42:06'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/14/2020 11:42:06'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/14/2020 11:42:06'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/14/2020 11:42:06'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/14/2020 11:42:06'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/14/2020 11:42:06'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/14/2020 11:42:06'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/14/2020 11:42:06'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/14/2020 11:42:06'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/14/2020 11:42:06'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account tree' stamp: 'VP 11/14/2020 11:42:43' prior: 50892776!
test13MultipleDepthLevelPortfolioTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily.
	rootPortfolio add: portfolioPadreDeCharlie.
	rootPortfolio add: accountJorge.
	
	tree := (AccountTree for: rootPortfolio) tree.
	
	self assert: 5 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	self assert: (AccountTree indent: accountEmily name byLevel: 1) equals: (tree at: 2).
	self assert: (AccountTree indent: accountJorge name byLevel: 1) equals: (tree at: 3).
	self assert: (AccountTree indent: portfolioPadreDeCharlie name byLevel: 1) equals: (tree at: 4).
	self assert: (AccountTree indent: accountCharlie name byLevel: 2) equals: (tree at: 5).! !
!AccountReportTest methodsFor: 'tests -- account tree' stamp: 'VP 11/14/2020 11:42:58' prior: 50892896!
test13MultipleDepthLevelPortfolioTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily.
	rootPortfolio add: portfolioPadreDeCharlie.
	rootPortfolio add: accountJorge.
	
	tree := (AccountTree for: rootPortfolio) tree.
	
	self assert: 5 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	self assert: (AccountTree indent: accountEmily name byLevel: 1) equals: (tree at: 2).
	self assert: (AccountTree indent: portfolioPadreDeCharlie name byLevel: 1) equals: (tree at: 3).
	self assert: (AccountTree indent: accountCharlie name byLevel: 2) equals: (tree at: 4).
	self assert: (AccountTree indent: accountJorge name byLevel: 1) equals: (tree at: 5).! !

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/14/2020 11:42:59'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/14/2020 11:42:59'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/14/2020 11:42:59'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/14/2020 11:42:59'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/14/2020 11:42:59'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/14/2020 11:42:59'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/14/2020 11:42:59'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/14/2020 11:42:59'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/14/2020 11:42:59'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/14/2020 11:42:59'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/14/2020 11:42:59'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/14/2020 11:42:59'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/14/2020 11:42:59'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/14/2020 11:42:59'!
PASSED!

----SNAPSHOT----(14 November 2020 11:43:20) CuisUniversity-4384.image priorSource: 17953797!

----QUIT----(14 November 2020 11:43:55) CuisUniversity-4384.image priorSource: 17963046!

----STARTUP---- (15 November 2020 11:14:12) as /Users/vpomsztein/Documents/Facu/ISW1/PracticaParcial/CuisUniversity-4384.image!

!Account methodsFor: 'transactions' stamp: 'VP 11/15/2020 11:20:27'!
transactionAmount

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'VP 11/15/2020 11:20:56'!
transactionNumbered: aTransactionNumber

	self subclassResponsibility ! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'VP 11/15/2020 11:21:32' overrides: 50893010!
transactionNumbered: aTransactionNumber

	^transactions at: aTransactionNumber.! !
!Portfolio methodsFor: 'transactions' stamp: 'VP 11/15/2020 11:21:43' overrides: 50893010!
transactionNumbered: aTransactionNumber

	^self transactions at: aTransactionNumber.! !
!Portfolio methodsFor: 'transactions' stamp: 'VP 11/15/2020 11:21:56' overrides: 50893006!
transactionAmount

	^self transactions size.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'VP 11/15/2020 11:22:07' overrides: 50893006!
transactionAmount

	^transactions size. ! !
!AccountReport methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 11:23:10' prior: 50892448!
buildTransactionReportFor: anAccount

	(1 to: anAccount transactionAmount) do: [ :aTransactionNumber |
		(anAccount transactionNumbered: aTransactionNumber) affectReport: self.
	].! !

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 11:23:12'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 11:23:12'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 11:23:12'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 11:23:12'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 11:23:12'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 11:23:12'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 11:23:12'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 11:23:12'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 11:23:12'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 11:23:12'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 11:23:12'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:23:12'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:23:12'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account tree' stamp: 'VP 11/15/2020 11:25:47'!
test14UnnamedPortfolioInTreeHasDefaultName

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio with: accountEmily.
	
	tree := (AccountTree for: rootPortfolio) tree.
	
	self assert: 1 equals: tree size.
	self assert: 'Un Portfolio' equals: (tree at: 1).! !

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 11:25:48'!
FAILURE!
!AccountReportTest methodsFor: 'tests -- account tree' stamp: 'VP 11/15/2020 11:26:01' prior: 50893092!
test14UnnamedPortfolioInTreeHasDefaultName

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio new.
	
	tree := (AccountTree for: rootPortfolio) tree.
	
	self assert: 1 equals: tree size.
	self assert: 'Un Portfolio' equals: (tree at: 1).! !

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 11:26:03'!
FAILURE!
!Portfolio methodsFor: 'initialization' stamp: 'VP 11/15/2020 11:28:17' prior: 50887762 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.
	name := 'Un Portfolio'.! !

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 11:28:20'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 11:28:20'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 11:28:20'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 11:28:20'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 11:28:20'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 11:28:20'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 11:28:20'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 11:28:20'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 11:28:20'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 11:28:20'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 11:28:20'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:28:20'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:28:20'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 11:28:20'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account tree' stamp: 'VP 11/15/2020 11:29:28'!
test15UnnamedAccountInTreeHasDefaultName

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: ReceptiveAccount new.
	
	tree := (AccountTree for: rootPortfolio) tree.
	
	self assert: 2 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	self assert: 'Una Cuenta Corriente' equals: (tree at: 2).! !

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 11:29:30'!
ERROR!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'VP 11/15/2020 11:30:10' prior: 50887877 overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.
	name := 'Una Cuenta Receptiva'! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'VP 11/15/2020 11:30:12' prior: 50893197 overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.
	name := 'Una Cuenta Receptiva'.! !

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 11:30:13'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 11:30:13'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 11:30:13'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 11:30:13'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 11:30:13'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 11:30:13'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 11:30:13'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 11:30:14'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 11:30:14'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 11:30:14'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 11:30:14'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:30:14'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:30:14'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 11:30:14'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 11:30:14'!
FAILURE!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 11:30:14'!
FAILURE!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'VP 11/15/2020 11:30:25' prior: 50893204 overrides: 16896425!
initialize

	super initialize.
	transactions := OrderedCollection new.
	name := 'Una Cuenta Corriente'.! !

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 11:30:26'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 11:30:26'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 11:30:26'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 11:30:26'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 11:30:26'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 11:30:26'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 11:30:26'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 11:30:26'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 11:30:26'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 11:30:26'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 11:30:26'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:30:26'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:30:26'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 11:30:26'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 11:30:26'!
FAILURE!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 11:30:26'!
FAILURE!
!AccountReportTest methodsFor: 'tests -- account tree' stamp: 'VP 11/15/2020 11:30:43' prior: 50893178!
test15UnnamedAccountInTreeHasDefaultName

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: ReceptiveAccount new.
	
	tree := (AccountTree for: rootPortfolio) tree.
	
	self assert: 2 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	self assert: '    Una Cuenta Corriente' equals: (tree at: 2).! !

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 11:30:44'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 11:30:44'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 11:30:44'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 11:30:44'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 11:30:44'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 11:30:44'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 11:30:44'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 11:30:44'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 11:30:44'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 11:30:44'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 11:30:44'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 11:30:44'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:30:44'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:30:44'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 11:30:44'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 11:30:44'!
PASSED!

----SNAPSHOT----(15 November 2020 11:30:55) CuisUniversity-4384.image priorSource: 17963140!
!Portfolio methodsFor: 'initialization' stamp: 'VP 11/15/2020 11:32:15' prior: 50893122 overrides: 16896425!
initialize
	self halt.
	accounts := OrderedCollection new.
	parents := OrderedCollection new.
	name := 'Un Portfolio'.! !
!Portfolio methodsFor: 'initialization' stamp: 'VP 11/15/2020 11:32:53' prior: 50893404 overrides: 16896425!
initialize
	
	accounts := OrderedCollection new.
	parents := OrderedCollection new.
	name := 'Un Portfolio'.! !
!Portfolio methodsFor: 'initialization' stamp: 'VP 11/15/2020 11:32:55' prior: 50893412 overrides: 16896425!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.
	name := 'Un Portfolio'.! !

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 11:32:58'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 11:32:58'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 11:32:58'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 11:32:58'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 11:32:58'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 11:32:58'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 11:32:58'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 11:32:58'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 11:32:58'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 11:32:58'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 11:32:58'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:32:58'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:32:58'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 11:32:58'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 11:32:58'!
PASSED!

----SNAPSHOT----(15 November 2020 11:33:22) CuisUniversity-4384.image priorSource: 17975967!
!AccountReportTest methodsFor: 'tests -- account tree' stamp: 'VP 11/15/2020 11:36:55'!
test16EmptyPortfolioTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio'.
	
	tree := (AccountTree for: rootPortfolio) tree.
	
	self assert: 2 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	self assert: '    Balance = 0' equals: (tree at: 2).! !
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 11:37:26' prior: 50893481!
test16EmptyPortfolioTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio'.
	
	tree := (AccountTree for: rootPortfolio) tree.
	
	self assert: 2 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	self assert: (AccountTree indent: 'Balance = 0' byLevel: 1) equals: (tree at: 2).! !

!testRun: #AccountReportTest #test16EmptyPortfolioTree stamp: 'VP 11/15/2020 11:37:28'!
FAILURE!

!classDefinition: #AccountSummaryTree category: 'Portfolio-Solucion' stamp: 'VP 11/15/2020 11:37:57'!
AccountReport subclass: #AccountSummaryTree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 11:37:49' prior: 50893494!
test16EmptyPortfolioTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio'.
	
	tree := (AccountSummaryTree for: rootPortfolio) summaryTree.
	
	self assert: 2 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	self assert: (AccountTree indent: 'Balance = 0' byLevel: 1) equals: (tree at: 2).! !
!AccountReport class methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 11:38:28'!
indent: aString byLevel: anIndentLevel 
	
	^(1 to: anIndentLevel) inject: aString into: [ :indentedString :indentLevel | '    ', indentedString ].! !

!methodRemoval: AccountTree class #indent:byLevel: stamp: 'VP 11/15/2020 11:38:28'!
indent: aString byLevel: anIndentLevel 
	
	^(1 to: anIndentLevel) inject: aString into: [ :indentedString :indentLevel | '    ', indentedString ].!
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 11:38:57' prior: 50893519!
test16EmptyPortfolioTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio'.
	
	tree := (AccountSummaryTree for: rootPortfolio) summaryTree.
	
	self assert: 2 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	self assert: (AccountSummaryTree indent: 'Balance = 0' byLevel: 1) equals: (tree at: 2).! !
!AccountSummary class methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 11:40:00' overrides: 50893533!
indent: aString byLevel: anIndentLevel 
	
	^(1 to: anIndentLevel) inject: aString into: [ :indentedString :indentLevel | '    ', indentedString ].! !
!TransferNet class methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 11:40:00' overrides: 50893533!
indent: aString byLevel: anIndentLevel 
	
	^(1 to: anIndentLevel) inject: aString into: [ :indentedString :indentLevel | '    ', indentedString ].! !
!AccountTree class methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 11:40:00' overrides: 50893533!
indent: aString byLevel: anIndentLevel 
	
	^(1 to: anIndentLevel) inject: aString into: [ :indentedString :indentLevel | '    ', indentedString ].! !
!AccountSummaryTree class methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 11:40:00' overrides: 50893533!
indent: aString byLevel: anIndentLevel 
	
	^(1 to: anIndentLevel) inject: aString into: [ :indentedString :indentLevel | '    ', indentedString ].! !

!methodRemoval: AccountReport class #indent:byLevel: stamp: 'VP 11/15/2020 11:40:00'!
indent: aString byLevel: anIndentLevel 
	
	^(1 to: anIndentLevel) inject: aString into: [ :indentedString :indentLevel | '    ', indentedString ].!

!methodRemoval: AccountSummary class #indent:byLevel: stamp: 'VP 11/15/2020 11:40:12'!
indent: aString byLevel: anIndentLevel 
	
	^(1 to: anIndentLevel) inject: aString into: [ :indentedString :indentLevel | '    ', indentedString ].!

!methodRemoval: AccountSummaryTree class #indent:byLevel: stamp: 'VP 11/15/2020 11:40:19'!
indent: aString byLevel: anIndentLevel 
	
	^(1 to: anIndentLevel) inject: aString into: [ :indentedString :indentLevel | '    ', indentedString ].!

!methodRemoval: TransferNet class #indent:byLevel: stamp: 'VP 11/15/2020 11:40:22'!
indent: aString byLevel: anIndentLevel 
	
	^(1 to: anIndentLevel) inject: aString into: [ :indentedString :indentLevel | '    ', indentedString ].!

AccountTree subclass: #AccountSummaryTree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTree category: 'Portfolio-Solucion' stamp: 'VP 11/15/2020 11:40:39'!
AccountTree subclass: #AccountSummaryTree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 11:41:03' prior: 50893549!
test16EmptyPortfolioTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio'.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assert: 2 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	self assert: (AccountSummaryTree indent: 'Balance = 0' byLevel: 1) equals: (tree at: 2).! !
!AccountTree methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 11:43:50'!
affectForPortfolio: aPortfolio

	tree add: (AccountTree indent: aPortfolio name byLevel: indentLevel).
	(1 to: aPortfolio accountAmount) do: [ :anAccountNumber |
		indentLevel := indentLevel + 1.
		(aPortfolio accountNumbered: anAccountNumber) affectReport: self.
		indentLevel := indentLevel - 1.
	].! !
!Portfolio methodsFor: 'accounts management' stamp: 'VP 11/15/2020 11:44:19'!
accountNumbered: anAccountNumber
	
	^accounts at: anAccountNumber.! !

!methodRemoval: AccountTree #affectForPortfolio:withAccounts: stamp: 'VP 11/15/2020 11:44:27'!
affectForPortfolio: aPortfolio withAccounts: accounts

	tree add: (AccountTree indent: aPortfolio name byLevel: indentLevel).
	accounts do: [ :anAccount |
		indentLevel := indentLevel + 1.
		anAccount affectReport: self.
		indentLevel := indentLevel - 1.
	].!
!AccountTree methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 11:44:33' prior: 50893656!
affectForPortfolio: aPortfolio

	tree add: (AccountTree indent: aPortfolio name byLevel: indentLevel).
	(1 to: aPortfolio accountsSize) do: [ :anAccountNumber |
		indentLevel := indentLevel + 1.
		(aPortfolio accountNumbered: anAccountNumber) affectReport: self.
		indentLevel := indentLevel - 1.
	].! !
!Portfolio methodsFor: 'report' stamp: 'VP 11/15/2020 11:44:46' prior: 50892546 overrides: 50892474!
affectReport: aReport

	aReport affectForPortfolio: self! !

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 11:44:52'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 11:44:52'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 11:44:52'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 11:44:52'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 11:44:52'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 11:44:52'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 11:44:52'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 11:44:52'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 11:44:52'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 11:44:52'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 11:44:52'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:44:52'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:44:52'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 11:44:52'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 11:44:52'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioTree stamp: 'VP 11/15/2020 11:44:52'!
FAILURE!

!testRun: #AccountReportTest #test16EmptyPortfolioTree stamp: 'VP 11/15/2020 11:44:52'!
FAILURE!

AccountReport subclass: #AccountSummaryTree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTree category: 'Portfolio-Solucion' stamp: 'VP 11/15/2020 11:45:08'!
AccountReport subclass: #AccountSummaryTree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTree methodsFor: 'no messages' stamp: 'VP 11/15/2020 11:46:44'!
tree

	^{'Root Profile'. AccountTree indent: 'Balance = 0' byLevel: 1 }.! !

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 11:46:46'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 11:46:46'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 11:46:46'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 11:46:46'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 11:46:46'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 11:46:46'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 11:46:46'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 11:46:46'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 11:46:46'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 11:46:46'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 11:46:46'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:46:46'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:46:46'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 11:46:46'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 11:46:46'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioTree stamp: 'VP 11/15/2020 11:46:46'!
ERROR!

!testRun: #AccountReportTest #test16EmptyPortfolioTree stamp: 'VP 11/15/2020 11:46:46'!
ERROR!
!AccountSummaryTree methodsFor: 'nil' stamp: 'VP 11/15/2020 11:47:19'!
initializeFor: aPortfolio
 
	! !

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 11:47:25'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 11:47:25'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 11:47:25'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 11:47:25'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 11:47:25'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 11:47:25'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 11:47:25'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 11:47:25'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 11:47:25'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 11:47:25'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 11:47:25'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:47:25'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:47:25'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 11:47:25'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 11:47:25'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioTree stamp: 'VP 11/15/2020 11:47:25'!
FAILURE!

!testRun: #AccountReportTest #test16EmptyPortfolioTree stamp: 'VP 11/15/2020 11:47:25'!
FAILURE!
!AccountSummaryTree methodsFor: 'accessing' stamp: 'VP 11/15/2020 11:47:39' prior: 50893774!
tree

	^{'Root Portfolio'. AccountTree indent: 'Balance = 0' byLevel: 1 }.! !

!testRun: #AccountReportTest #test16EmptyPortfolioTree stamp: 'VP 11/15/2020 11:47:40'!
ERROR!
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 11:47:51' prior: 50893642!
test16EmptyPortfolioTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio'.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assert: 2 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	self assert: (AccountTree indent: 'Balance = 0' byLevel: 1) equals: (tree at: 2).! !

!testRun: #AccountReportTest #test16EmptyPortfolioTree stamp: 'VP 11/15/2020 11:47:52'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 11:47:55'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 11:47:55'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 11:47:55'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 11:47:55'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 11:47:55'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 11:47:55'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 11:47:55'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 11:47:55'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 11:47:55'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 11:47:55'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 11:47:55'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:47:55'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:47:55'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 11:47:55'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 11:47:55'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioTree stamp: 'VP 11/15/2020 11:47:55'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 11:51:16'!
test17SingleDepthLevelPortfolioTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily with: accountJorge.
	
	tree := (AccountTree for: rootPortfolio) tree.
	
	self assert: 3 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	self assert: (AccountTree indent: accountEmily name byLevel: 1) equals: (tree at: 2).
	self assert: (AccountTree indent: 'Dep�sito por 100' byLevel: 2) equals: (tree at: 3).
	self assert: (AccountTree indent: 'Balance = 100' byLevel: 2) equals: (tree at: 4).
	self assert: (AccountTree indent: accountJorge name byLevel: 1) equals: (tree at: 5).
	self assert: (AccountTree indent: 'Extracci�n por 30' byLevel: 2) equals: (tree at: 6).
	self assert: (AccountTree indent: 'Balance = -30' byLevel: 2) equals: (tree at: 7).
	self assert: (AccountTree indent: 'Balance = 70' byLevel: 1) equals: (tree at: 8).! !
!AccountReportTest methodsFor: 'setUp/tearDown' stamp: 'VP 11/15/2020 11:52:39' prior: 50891994 overrides: 16927572!
setUp

	accountEmily := ReceptiveAccount named: 'Cuenta de Emily'.
	Deposit register: 100 on: accountEmily.
	accountJorge := ReceptiveAccount named: 'Cuenta de Jorge'.
	Withdraw register: 30 on: accountJorge.
	accountCharlie := ReceptiveAccount named: 'Cuenta de Charlie'.
	
	portfolioPadreDeCharlie := Portfolio named: 'Portfolio del Padre de Charlie' with: accountCharlie.! !

| accountJorge |
	accountJorge := ReceptiveAccount named: 'Cuenta de Jorge'.
	Withdraw register: 30 on: accountJorge.!

|accountJorge |
	accountJorge := ReceptiveAccount named: 'Cuenta de Jorge'.
	Withdraw register: 30 on: accountJorge.
	accountJorge!

self balance!
!AccountReportTest methodsFor: 'setUp/tearDown' stamp: 'VP 11/15/2020 11:54:36' prior: 50894014 overrides: 16927572!
setUp

	accountEmily := ReceptiveAccount named: 'Cuenta de Emily'.
	Deposit register: 100 on: accountEmily.
	accountJorge := ReceptiveAccount named: 'Cuenta de Jorge'.
	Withdraw register: 30 on: accountJorge.
	accountCharlie := ReceptiveAccount named: 'Cuenta de Charlie'.
	
	portfolioPadreDeCharlie := Portfolio named: 'Portfolio del Padre de Charlie' with: accountCharlie.! !

!classDefinition: #AccountSummaryTree category: 'Portfolio-Solucion' stamp: 'VP 11/15/2020 11:55:32'!
AccountReport subclass: #AccountSummaryTree
	instanceVariableNames: 'tree'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTree methodsFor: 'initialization' stamp: 'VP 11/15/2020 11:55:30' prior: 50893837!
initializeFor: aPortfolio
 
	tree := OrderedCollection new.! !
!AccountSummaryTree methodsFor: 'accessing' stamp: 'VP 11/15/2020 11:58:07' prior: 50893900!
tree

	^tree accountsSize = 0 ifTrue: [ {'Root Portfolio'. AccountTree indent: 'Balance = 0' byLevel: 1 } ]
					    ifFalse: [ {'Root Portfolio'. 
							    AccountTree indent: 'Cuenta de Emily' byLevel: 1.
							        AccountTree indent: 'Dep�sito por 100' byLevel: 2.
							        AccountTree indent: 'Balance = 100' byLevel: 2.
							    AccountTree indent: 'Cuenta de Jorge' byLevel: 1.
							        AccountTree indent: 'Extracci�n por 30' byLevel: 2.
							        AccountTree indent: 'Balance = -30' byLevel: 2.
							    AccountTree indent: 'Balance = 0' byLevel: 1.} ].! !
!AccountSummaryTree methodsFor: 'accessing' stamp: 'VP 11/15/2020 11:58:11' prior: 50894066!
tree

	^tree accountsSize = 0 ifTrue: [ {'Root Portfolio'. AccountTree indent: 'Balance = 0' byLevel: 1 } ]
					    ifFalse: [ {'Root Portfolio'. 
							    AccountTree indent: 'Cuenta de Emily' byLevel: 1.
							        AccountTree indent: 'Dep�sito por 100' byLevel: 2.
							        AccountTree indent: 'Balance = 100' byLevel: 2.
							    AccountTree indent: 'Cuenta de Jorge' byLevel: 1.
							        AccountTree indent: 'Extracci�n por 30' byLevel: 2.
							        AccountTree indent: 'Balance = -30' byLevel: 2.
							    AccountTree indent: 'Balance = 70' byLevel: 1.} ].! !

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 11:58:18'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 11:58:18'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 11:58:18'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 11:58:18'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 11:58:18'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 11:58:18'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 11:58:18'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 11:58:18'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 11:58:18'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 11:58:18'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 11:58:18'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:58:18'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:58:18'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 11:58:18'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 11:58:18'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioTree stamp: 'VP 11/15/2020 11:58:18'!
ERROR!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:58:18'!
FAILURE!

!testRun: #AccountReportTest #test16EmptyPortfolioTree stamp: 'VP 11/15/2020 11:58:20'!
ERROR!
!AccountSummaryTree methodsFor: 'initialization' stamp: 'VP 11/15/2020 11:58:59' prior: 50894061!
initializeFor: aPortfolio
 
	tree := aPortfolio.! !

!classDefinition: #AccountSummaryTree category: 'Portfolio-Solucion' stamp: 'VP 11/15/2020 11:59:04'!
AccountReport subclass: #AccountSummaryTree
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummaryTree methodsFor: 'as yet unclassified' stamp: 'VP 11/15/2020 11:59:04' prior: 50894088!
tree

	^portfolio accountsSize = 0 ifTrue: [ {'Root Portfolio'. AccountTree indent: 'Balance = 0' byLevel: 1 } ]
					    ifFalse: [ {'Root Portfolio'. 
							    AccountTree indent: 'Cuenta de Emily' byLevel: 1.
							        AccountTree indent: 'Dep�sito por 100' byLevel: 2.
							        AccountTree indent: 'Balance = 100' byLevel: 2.
							    AccountTree indent: 'Cuenta de Jorge' byLevel: 1.
							        AccountTree indent: 'Extracci�n por 30' byLevel: 2.
							        AccountTree indent: 'Balance = -30' byLevel: 2.
							    AccountTree indent: 'Balance = 70' byLevel: 1.} ].! !
!AccountSummaryTree methodsFor: 'as yet unclassified' stamp: 'VP 11/15/2020 11:59:04' prior: 50894172!
initializeFor: aPortfolio
 
	portfolio := aPortfolio.! !

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 11:59:07'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 11:59:07'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 11:59:07'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 11:59:07'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 11:59:07'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 11:59:07'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 11:59:07'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 11:59:07'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 11:59:07'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 11:59:07'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 11:59:07'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:59:07'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:59:07'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 11:59:07'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 11:59:07'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioTree stamp: 'VP 11/15/2020 11:59:07'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:59:07'!
FAILURE!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:59:07'!
FAILURE!
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 11:59:24' prior: 50893982!
test17SingleDepthLevelPortfolioTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily with: accountJorge.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assert: 3 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	self assert: (AccountTree indent: accountEmily name byLevel: 1) equals: (tree at: 2).
	self assert: (AccountTree indent: 'Dep�sito por 100' byLevel: 2) equals: (tree at: 3).
	self assert: (AccountTree indent: 'Balance = 100' byLevel: 2) equals: (tree at: 4).
	self assert: (AccountTree indent: accountJorge name byLevel: 1) equals: (tree at: 5).
	self assert: (AccountTree indent: 'Extracci�n por 30' byLevel: 2) equals: (tree at: 6).
	self assert: (AccountTree indent: 'Balance = -30' byLevel: 2) equals: (tree at: 7).
	self assert: (AccountTree indent: 'Balance = 70' byLevel: 1) equals: (tree at: 8).! !

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:59:25'!
FAILURE!
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 11:59:33' prior: 50894276!
test17SingleDepthLevelPortfolioTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily with: accountJorge.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assert: 8 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	self assert: (AccountTree indent: accountEmily name byLevel: 1) equals: (tree at: 2).
	self assert: (AccountTree indent: 'Dep�sito por 100' byLevel: 2) equals: (tree at: 3).
	self assert: (AccountTree indent: 'Balance = 100' byLevel: 2) equals: (tree at: 4).
	self assert: (AccountTree indent: accountJorge name byLevel: 1) equals: (tree at: 5).
	self assert: (AccountTree indent: 'Extracci�n por 30' byLevel: 2) equals: (tree at: 6).
	self assert: (AccountTree indent: 'Balance = -30' byLevel: 2) equals: (tree at: 7).
	self assert: (AccountTree indent: 'Balance = 70' byLevel: 1) equals: (tree at: 8).! !

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:59:34'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 11:59:36'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 11:59:36'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 11:59:36'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 11:59:36'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 11:59:36'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 11:59:36'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 11:59:36'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 11:59:36'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 11:59:36'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 11:59:36'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 11:59:36'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:59:36'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:59:36'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 11:59:36'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 11:59:36'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioTree stamp: 'VP 11/15/2020 11:59:36'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 11:59:36'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 12:00:13' prior: 50894312!
test17SingleDepthLevelPortfolioTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily.
	rootPortfolio add: portfolioPadreDeCharlie.
	rootPortfolio add: accountJorge.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assert: 8 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	self assert: (AccountTree indent: accountEmily name byLevel: 1) equals: (tree at: 2).
	self assert: (AccountTree indent: 'Dep�sito por 100' byLevel: 2) equals: (tree at: 3).
	self assert: (AccountTree indent: 'Balance = 100' byLevel: 2) equals: (tree at: 4).
	self assert: (AccountTree indent: accountJorge name byLevel: 1) equals: (tree at: 5).
	self assert: (AccountTree indent: 'Extracci�n por 30' byLevel: 2) equals: (tree at: 6).
	self assert: (AccountTree indent: 'Balance = -30' byLevel: 2) equals: (tree at: 7).
	self assert: (AccountTree indent: 'Balance = 70' byLevel: 1) equals: (tree at: 8).! !
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 12:00:59'!
test18MultipleDepthLevelPortfolioSummaryTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily.
	rootPortfolio add: portfolioPadreDeCharlie.
	rootPortfolio add: accountJorge.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assert: 8 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	self assert: (AccountTree indent: accountEmily name byLevel: 1) equals: (tree at: 2).
	self assert: (AccountTree indent: 'Dep�sito por 100' byLevel: 2) equals: (tree at: 3).
	self assert: (AccountTree indent: 'Balance = 100' byLevel: 2) equals: (tree at: 4).
	self assert: (AccountTree indent: accountJorge name byLevel: 1) equals: (tree at: 5).
	self assert: (AccountTree indent: 'Extracci�n por 30' byLevel: 2) equals: (tree at: 6).
	self assert: (AccountTree indent: 'Balance = -30' byLevel: 2) equals: (tree at: 7).
	self assert: (AccountTree indent: 'Balance = 70' byLevel: 1) equals: (tree at: 8).! !
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 12:00:13' prior: 50894407!
test17SingleDepthLevelPortfolioTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily.
	rootPortfolio add: portfolioPadreDeCharlie.
	rootPortfolio add: accountJorge.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assert: 8 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	self assert: (AccountTree indent: accountEmily name byLevel: 1) equals: (tree at: 2).
	self assert: (AccountTree indent: 'Dep�sito por 100' byLevel: 2) equals: (tree at: 3).
	self assert: (AccountTree indent: 'Balance = 100' byLevel: 2) equals: (tree at: 4).
	self assert: (AccountTree indent: accountJorge name byLevel: 1) equals: (tree at: 5).
	self assert: (AccountTree indent: 'Extracci�n por 30' byLevel: 2) equals: (tree at: 6).
	self assert: (AccountTree indent: 'Balance = -30' byLevel: 2) equals: (tree at: 7).
	self assert: (AccountTree indent: 'Balance = 70' byLevel: 1) equals: (tree at: 8).! !
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 11:59:33' prior: 50894476!
test17SingleDepthLevelPortfolioTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily with: accountJorge.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assert: 8 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	self assert: (AccountTree indent: accountEmily name byLevel: 1) equals: (tree at: 2).
	self assert: (AccountTree indent: 'Dep�sito por 100' byLevel: 2) equals: (tree at: 3).
	self assert: (AccountTree indent: 'Balance = 100' byLevel: 2) equals: (tree at: 4).
	self assert: (AccountTree indent: accountJorge name byLevel: 1) equals: (tree at: 5).
	self assert: (AccountTree indent: 'Extracci�n por 30' byLevel: 2) equals: (tree at: 6).
	self assert: (AccountTree indent: 'Balance = -30' byLevel: 2) equals: (tree at: 7).
	self assert: (AccountTree indent: 'Balance = 70' byLevel: 1) equals: (tree at: 8).! !

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:01:23'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:01:24'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:01:26'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:01:26'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:01:26'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:01:26'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:01:26'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:01:26'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:01:26'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:01:26'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:01:26'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:01:26'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:01:26'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:01:26'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:01:26'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:01:26'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:01:26'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:01:26'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioTree stamp: 'VP 11/15/2020 12:01:26'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:01:26'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:01:26'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:01:28'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:01:28'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:01:28'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:01:28'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:01:28'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:01:28'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:01:28'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:01:28'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:01:28'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:01:28'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:01:28'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:01:28'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:01:28'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:01:28'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:01:28'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:01:28'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioTree stamp: 'VP 11/15/2020 12:01:28'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:01:28'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:01:28'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:01:31'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:01:31'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:01:31'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:01:31'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:01:31'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:01:31'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:01:31'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:01:31'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:01:31'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:01:31'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:01:31'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:01:31'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:01:31'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:01:31'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:01:31'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioTree stamp: 'VP 11/15/2020 12:01:31'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:01:31'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:01:31'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioTree stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioTree stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:01:32'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:01:32'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 12:01:52'!
test16EmptyPortfolioSummaryTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio'.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assert: 2 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	self assert: (AccountTree indent: 'Balance = 0' byLevel: 1) equals: (tree at: 2).! !

!methodRemoval: AccountReportTest #test16EmptyPortfolioTree stamp: 'VP 11/15/2020 12:01:52'!
test16EmptyPortfolioTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio'.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assert: 2 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	self assert: (AccountTree indent: 'Balance = 0' byLevel: 1) equals: (tree at: 2).!
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 12:01:58'!
test17SingleDepthLevelPortfolioSummaryTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily with: accountJorge.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assert: 8 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	self assert: (AccountTree indent: accountEmily name byLevel: 1) equals: (tree at: 2).
	self assert: (AccountTree indent: 'Dep�sito por 100' byLevel: 2) equals: (tree at: 3).
	self assert: (AccountTree indent: 'Balance = 100' byLevel: 2) equals: (tree at: 4).
	self assert: (AccountTree indent: accountJorge name byLevel: 1) equals: (tree at: 5).
	self assert: (AccountTree indent: 'Extracci�n por 30' byLevel: 2) equals: (tree at: 6).
	self assert: (AccountTree indent: 'Balance = -30' byLevel: 2) equals: (tree at: 7).
	self assert: (AccountTree indent: 'Balance = 70' byLevel: 1) equals: (tree at: 8).! !

!methodRemoval: AccountReportTest #test17SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:01:58'!
test17SingleDepthLevelPortfolioTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily with: accountJorge.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assert: 8 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	self assert: (AccountTree indent: accountEmily name byLevel: 1) equals: (tree at: 2).
	self assert: (AccountTree indent: 'Dep�sito por 100' byLevel: 2) equals: (tree at: 3).
	self assert: (AccountTree indent: 'Balance = 100' byLevel: 2) equals: (tree at: 4).
	self assert: (AccountTree indent: accountJorge name byLevel: 1) equals: (tree at: 5).
	self assert: (AccountTree indent: 'Extracci�n por 30' byLevel: 2) equals: (tree at: 6).
	self assert: (AccountTree indent: 'Balance = -30' byLevel: 2) equals: (tree at: 7).
	self assert: (AccountTree indent: 'Balance = 70' byLevel: 1) equals: (tree at: 8).!
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 12:02:47' prior: 50894441!
test18MultipleDepthLevelPortfolioSummaryTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily.
	rootPortfolio add: portfolioPadreDeCharlie.
	rootPortfolio add: accountJorge.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assert: 8 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	self assert: (AccountTree indent: accountEmily name byLevel: 1) equals: (tree at: 2).
	self assert: (AccountTree indent: 'Dep�sito por 100' byLevel: 2) equals: (tree at: 3).
	self assert: (AccountTree indent: 'Balance = 100' byLevel: 2) equals: (tree at: 4).
	
	self assert: (AccountTree indent: 'Portfolio de' byLevel: 2) equals: (tree at: 3).
	self assert: (AccountTree indent: 'Balance = 100' byLevel: 2) equals: (tree at: 4).
	
	
	self assert: (AccountTree indent: accountJorge name byLevel: 1) equals: (tree at: 5).
	self assert: (AccountTree indent: 'Extracci�n por 30' byLevel: 2) equals: (tree at: 6).
	self assert: (AccountTree indent: 'Balance = -30' byLevel: 2) equals: (tree at: 7).
	self assert: (AccountTree indent: 'Balance = 70' byLevel: 1) equals: (tree at: 8).! !
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 12:03:08' prior: 50894960!
test18MultipleDepthLevelPortfolioSummaryTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily.
	rootPortfolio add: portfolioPadreDeCharlie.
	rootPortfolio add: accountJorge.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assert: 8 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	self assert: (AccountTree indent: accountEmily name byLevel: 1) equals: (tree at: 2).
	self assert: (AccountTree indent: 'Dep�sito por 100' byLevel: 2) equals: (tree at: 3).
	self assert: (AccountTree indent: 'Balance = 100' byLevel: 2) equals: (tree at: 4).
	
	self assert: (AccountTree indent: portfolioPadreDeCharlie name byLevel: 2) equals: (tree at: 3).
	self assert: (AccountTree indent: 'Balance = 100' byLevel: 2) equals: (tree at: 4).
	
	
	self assert: (AccountTree indent: accountJorge name byLevel: 1) equals: (tree at: 5).
	self assert: (AccountTree indent: 'Extracci�n por 30' byLevel: 2) equals: (tree at: 6).
	self assert: (AccountTree indent: 'Balance = -30' byLevel: 2) equals: (tree at: 7).
	self assert: (AccountTree indent: 'Balance = 70' byLevel: 1) equals: (tree at: 8).! !
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 12:03:39' prior: 50895000!
test18MultipleDepthLevelPortfolioSummaryTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily.
	rootPortfolio add: portfolioPadreDeCharlie.
	rootPortfolio add: accountJorge.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assert: 8 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	self assert: (AccountTree indent: accountEmily name byLevel: 1) equals: (tree at: 2).
	self assert: (AccountTree indent: 'Dep�sito por 100' byLevel: 2) equals: (tree at: 3).
	self assert: (AccountTree indent: 'Balance = 100' byLevel: 2) equals: (tree at: 4).
	
	self assert: (AccountTree indent: portfolioPadreDeCharlie name byLevel: 2) equals: (tree at: 3).
	self assert: (AccountTree indent: accountCharlie name byLevel: 3) equals: (tree at: 2).
	self assert: (AccountTree indent: 'Dep�sito por 100' byLevel: 4) equals: (tree at: 3).
	self assert: (AccountTree indent: 'Balance = 100' byLevel: 4) equals: (tree at: 4).
	self assert: (AccountTree indent: 'Balance = 100' byLevel: 2) equals: (tree at: 4).
	
	
	self assert: (AccountTree indent: accountJorge name byLevel: 1) equals: (tree at: 5).
	self assert: (AccountTree indent: 'Extracci�n por 30' byLevel: 2) equals: (tree at: 6).
	self assert: (AccountTree indent: 'Balance = -30' byLevel: 2) equals: (tree at: 7).
	self assert: (AccountTree indent: 'Balance = 70' byLevel: 1) equals: (tree at: 8).! !
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 12:05:26' prior: 50895040!
test18MultipleDepthLevelPortfolioSummaryTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily.
	rootPortfolio add: portfolioPadreDeCharlie.
	rootPortfolio add: accountJorge.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assert: 8 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	
	self assert: (AccountTree indent: accountEmily name byLevel: 1) equals: (tree at: 2).
	self assert: (AccountTree indent: 'Dep�sito por 100' byLevel: 2) equals: (tree at: 3).
	self assert: (AccountTree indent: 'Balance = 100' byLevel: 2) equals: (tree at: 4).
	
	self assert: (AccountTree indent: portfolioPadreDeCharlie name byLevel: 2) equals: (tree at: 5).
	self assert: (AccountTree indent: accountCharlie name byLevel: 3) equals: (tree at: 6).
	self assert: (AccountTree indent: 'Dep�sito por 60' byLevel: 4) equals: (tree at: 7).
	self assert: (AccountTree indent: 'Balance = 60' byLevel: 4) equals: (tree at: 8).
	self assert: (AccountTree indent: 'Balance = 60' byLevel: 3) equals: (tree at: 9).
	
	self assert: (AccountTree indent: accountJorge name byLevel: 1) equals: (tree at: 10).
	self assert: (AccountTree indent: 'Extracci�n por 30' byLevel: 2) equals: (tree at: 11).
	self assert: (AccountTree indent: 'Balance = -30' byLevel: 2) equals: (tree at: 12).
	self assert: (AccountTree indent: 'Balance = 130' byLevel: 1) equals: (tree at: 13).! !
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 12:05:34' prior: 50895089!
test18MultipleDepthLevelPortfolioSummaryTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily.
	rootPortfolio add: portfolioPadreDeCharlie.
	rootPortfolio add: accountJorge.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assert: 13 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	
	self assert: (AccountTree indent: accountEmily name byLevel: 1) equals: (tree at: 2).
	self assert: (AccountTree indent: 'Dep�sito por 100' byLevel: 2) equals: (tree at: 3).
	self assert: (AccountTree indent: 'Balance = 100' byLevel: 2) equals: (tree at: 4).
	
	self assert: (AccountTree indent: portfolioPadreDeCharlie name byLevel: 2) equals: (tree at: 5).
	self assert: (AccountTree indent: accountCharlie name byLevel: 3) equals: (tree at: 6).
	self assert: (AccountTree indent: 'Dep�sito por 60' byLevel: 4) equals: (tree at: 7).
	self assert: (AccountTree indent: 'Balance = 60' byLevel: 4) equals: (tree at: 8).
	self assert: (AccountTree indent: 'Balance = 60' byLevel: 3) equals: (tree at: 9).
	
	self assert: (AccountTree indent: accountJorge name byLevel: 1) equals: (tree at: 10).
	self assert: (AccountTree indent: 'Extracci�n por 30' byLevel: 2) equals: (tree at: 11).
	self assert: (AccountTree indent: 'Balance = -30' byLevel: 2) equals: (tree at: 12).
	self assert: (AccountTree indent: 'Balance = 130' byLevel: 1) equals: (tree at: 13).! !
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 12:05:58' prior: 50895138!
test18MultipleDepthLevelPortfolioSummaryTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily.
	rootPortfolio add: portfolioPadreDeCharlie.
	rootPortfolio add: accountJorge.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assert: 13 equals: tree size.
	self assert: 'Root Portfolio' equals: (tree at: 1).
	
	self assert: (AccountTree indent: accountEmily name byLevel: 1) equals: (tree at: 2).
	self assert: (AccountTree indent: 'Dep�sito por 100' byLevel: 2) equals: (tree at: 3).
	self assert: (AccountTree indent: 'Balance = 100' byLevel: 2) equals: (tree at: 4).
	
	self assert: (AccountTree indent: portfolioPadreDeCharlie name byLevel: 1) equals: (tree at: 5).
	self assert: (AccountTree indent: accountCharlie name byLevel: 2) equals: (tree at: 6).
	self assert: (AccountTree indent: 'Dep�sito por 60' byLevel: 3) equals: (tree at: 7).
	self assert: (AccountTree indent: 'Balance = 60' byLevel: 3) equals: (tree at: 8).
	self assert: (AccountTree indent: 'Balance = 60' byLevel: 2) equals: (tree at: 9).
	
	self assert: (AccountTree indent: accountJorge name byLevel: 1) equals: (tree at: 10).
	self assert: (AccountTree indent: 'Extracci�n por 30' byLevel: 2) equals: (tree at: 11).
	self assert: (AccountTree indent: 'Balance = -30' byLevel: 2) equals: (tree at: 12).
	self assert: (AccountTree indent: 'Balance = 130' byLevel: 1) equals: (tree at: 13).! !

AccountTree subclass: #AccountSummaryTree
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTree category: 'Portfolio-Solucion' stamp: 'VP 11/15/2020 12:07:35'!
AccountTree subclass: #AccountSummaryTree
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!methodRemoval: AccountSummaryTree #initializeFor: stamp: 'VP 11/15/2020 12:07:43'!
initializeFor: aPortfolio
 
	portfolio := aPortfolio.!

AccountTree subclass: #AccountSummaryTree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummaryTree category: 'Portfolio-Solucion' stamp: 'VP 11/15/2020 12:07:46'!
AccountTree subclass: #AccountSummaryTree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!methodRemoval: AccountSummaryTree #tree stamp: 'VP 11/15/2020 12:08:01'!
tree

	^portfolio accountsSize = 0 ifTrue: [ {'Root Portfolio'. AccountTree indent: 'Balance = 0' byLevel: 1 } ]
					    ifFalse: [ {'Root Portfolio'. 
							    AccountTree indent: 'Cuenta de Emily' byLevel: 1.
							        AccountTree indent: 'Dep�sito por 100' byLevel: 2.
							        AccountTree indent: 'Balance = 100' byLevel: 2.
							    AccountTree indent: 'Cuenta de Jorge' byLevel: 1.
							        AccountTree indent: 'Extracci�n por 30' byLevel: 2.
							        AccountTree indent: 'Balance = -30' byLevel: 2.
							    AccountTree indent: 'Balance = 70' byLevel: 1.} ].!
!AccountSummaryTree methodsFor: 'no messages' stamp: 'VP 11/15/2020 12:09:01' overrides: 50893685!
affectForPortfolio: aPortfolio

	tree add: (AccountTree indent: aPortfolio name byLevel: indentLevel).
	(1 to: aPortfolio accountsSize) do: [ :anAccountNumber |
		indentLevel := indentLevel + 1.
		(aPortfolio accountNumbered: anAccountNumber) affectReport: self.
		tree add: (AccountTree indent: aPortfolio name byLevel: indentLevel).
		indentLevel := indentLevel - 1.
	].! !
!AccountSummaryTree methodsFor: 'as yet unclassified' stamp: 'VP 11/15/2020 12:10:39' prior: 50895286 overrides: 50893685!
affectForPortfolio: aPortfolio

	tree add: (AccountTree indent: aPortfolio name byLevel: indentLevel).
	(1 to: aPortfolio accountsSize) do: [ :anAccountNumber |
		| balance |
		indentLevel := indentLevel + 1.
		(aPortfolio accountNumbered: anAccountNumber) affectReport: self.
		
		balance := AccountSummary balanceReportMessageFor: aPortfolio.
		tree add: (AccountTree indent: balance byLevel: indentLevel).
		
		indentLevel := indentLevel - 1.
	].! !
!AccountSummaryTree methodsFor: 'as yet unclassified' stamp: 'VP 11/15/2020 12:11:10' prior: 50895302 overrides: 50893685!
affectForPortfolio: aPortfolio

	| balance |
	tree add: (AccountTree indent: aPortfolio name byLevel: indentLevel).
	(1 to: aPortfolio accountsSize) do: [ :anAccountNumber |
		indentLevel := indentLevel + 1.
		(aPortfolio accountNumbered: anAccountNumber) affectReport: self.
		indentLevel := indentLevel - 1.
	].

	balance := AccountSummary balanceReportMessageFor: aPortfolio.
	tree add: (AccountTree indent: balance byLevel: indentLevel + 1).! !
!AccountSummaryTree methodsFor: 'as yet unclassified' stamp: 'VP 11/15/2020 12:13:34' overrides: 50892641!
affectForReceptiveAccount: aReceptiveAccount

	| summary |	
	tree add: (AccountTree indent: aReceptiveAccount name byLevel: indentLevel).
	
	summary := (AccountSummary for: aReceptiveAccount) asCollection.
	
	summary do: [ :aSummaryLine | 
		tree add: (AccountTree indent: aSummaryLine byLevel: indentLevel + 1).
	].! !

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:13:50'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:13:50'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:13:50'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:13:50'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:13:50'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:13:50'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:13:50'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:13:50'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:13:50'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:13:50'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:13:50'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:13:50'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:13:50'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:13:50'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:13:50'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:13:50'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:13:50'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:13:50'!
FAILURE!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:13:50'!
FAILURE!
!AccountReportTest methodsFor: 'setUp/tearDown' stamp: 'VP 11/15/2020 12:14:50' prior: 50894038 overrides: 16927572!
setUp

	accountEmily := ReceptiveAccount named: 'Cuenta de Emily'.
	Deposit register: 100 on: accountEmily.
	accountJorge := ReceptiveAccount named: 'Cuenta de Jorge'.
	Withdraw register: 30 on: accountJorge.
	accountCharlie := ReceptiveAccount named: 'Cuenta de Charlie'.
	Deposit register: 60 on: accountEmily.
	
	portfolioPadreDeCharlie := Portfolio named: 'Portfolio del Padre de Charlie' with: accountCharlie.! !

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:14:52'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:14:52'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:14:52'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:14:52'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:14:52'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:14:52'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:14:52'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:14:52'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:14:52'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:14:52'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:14:52'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:14:52'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:14:52'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:14:52'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:14:52'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:14:52'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:14:52'!
FAILURE!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:14:52'!
FAILURE!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:14:56'!
FAILURE!
!AccountReportTest methodsFor: 'setUp/tearDown' stamp: 'VP 11/15/2020 12:15:10' prior: 50895419 overrides: 16927572!
setUp

	accountEmily := ReceptiveAccount named: 'Cuenta de Emily'.
	Deposit register: 100 on: accountEmily.
	accountJorge := ReceptiveAccount named: 'Cuenta de Jorge'.
	Withdraw register: 30 on: accountJorge.
	accountCharlie := ReceptiveAccount named: 'Cuenta de Charlie'.
	Deposit register: 60 on: accountCharlie.
	
	portfolioPadreDeCharlie := Portfolio named: 'Portfolio del Padre de Charlie' with: accountCharlie.! !

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:15:11'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:15:11'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:15:11'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:15:11'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:15:11'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:15:11'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:15:11'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:15:11'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:15:11'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:15:11'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:15:11'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:15:11'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:15:11'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:15:11'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:15:11'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:15:11'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:15:11'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:15:11'!
PASSED!
!AccountSummaryTree methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:15:34' prior: 50895320 overrides: 50893685!
affectForPortfolio: aPortfolio

	| balance |
	super affectForPortfolio: aPortfolio.

	balance := AccountSummary balanceReportMessageFor: aPortfolio.
	tree add: (AccountTree indent: balance byLevel: indentLevel + 1).! !
!AccountSummaryTree methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:16:01' prior: 50895338 overrides: 50892641!
affectForReceptiveAccount: aReceptiveAccount

	| summary |	
	super affectForReceptiveAccount: aReceptiveAccount.
	
	summary := (AccountSummary for: aReceptiveAccount) asCollection.
	
	summary do: [ :aSummaryLine | 
		tree add: (AccountTree indent: aSummaryLine byLevel: indentLevel + 1).
	].! !

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:16:03'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:16:03'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:16:03'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:16:03'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:16:03'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:16:03'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:16:03'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:16:03'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:16:03'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:16:03'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:16:03'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:16:03'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:16:03'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:16:03'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:16:03'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:16:03'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:16:03'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:16:03'!
PASSED!
!AccountSummaryTree methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:16:24'!
balanceForPortfolio: aPortfolio

	^ AccountSummary balanceReportMessageFor: aPortfolio! !
!AccountSummaryTree methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:16:24' prior: 50895584 overrides: 50893685!
affectForPortfolio: aPortfolio

	| balance |
	super affectForPortfolio: aPortfolio.

	balance := self balanceForPortfolio: aPortfolio.
	tree add: (AccountTree indent: balance byLevel: indentLevel + 1).! !
!AccountSummaryTree methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:17:06' prior: 50895678 overrides: 50893685!
affectForPortfolio: aPortfolio

	super affectForPortfolio: aPortfolio.
	tree add: (AccountTree indent: (self balanceForPortfolio: aPortfolio) byLevel: indentLevel + 1).! !
!AccountSummaryTree methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:17:26'!
summaryFor: aReceptiveAccount

	^ (AccountSummary for: aReceptiveAccount) asCollection! !
!AccountSummaryTree methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:17:26' prior: 50895595 overrides: 50892641!
affectForReceptiveAccount: aReceptiveAccount

	| summary |	
	super affectForReceptiveAccount: aReceptiveAccount.
	
	summary := self summaryFor: aReceptiveAccount.
	
	summary do: [ :aSummaryLine | 
		tree add: (AccountTree indent: aSummaryLine byLevel: indentLevel + 1).
	].! !
!AccountSummaryTree methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:17:35'!
balanceFor: aPortfolio

	^ AccountSummary balanceReportMessageFor: aPortfolio! !
!AccountSummaryTree methodsFor: 'as yet unclassified' stamp: 'VP 11/15/2020 12:17:35' prior: 50895689 overrides: 50893685!
affectForPortfolio: aPortfolio

	super affectForPortfolio: aPortfolio.
	tree add: (AccountTree indent: (self balanceFor: aPortfolio) byLevel: indentLevel + 1).! !

!methodRemoval: AccountSummaryTree #balanceForPortfolio: stamp: 'VP 11/15/2020 12:17:35'!
balanceForPortfolio: aPortfolio

	^ AccountSummary balanceReportMessageFor: aPortfolio!
!AccountSummaryTree methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:17:43' prior: 50895698!
summaryFor: aReceptiveAccount

	^ (AccountSummary for: aReceptiveAccount) asCollection.! !
!AccountSummaryTree methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:17:57' prior: 50895705 overrides: 50892641!
affectForReceptiveAccount: aReceptiveAccount
	super affectForReceptiveAccount: aReceptiveAccount.
	
	(self summaryFor: aReceptiveAccount) do: [ :aSummaryLine | 
		tree add: (AccountTree indent: aSummaryLine byLevel: indentLevel + 1).
	].! !
!AccountSummaryTree methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:18:39'!
addIndentedSummaryFor: aReceptiveAccount

	^ (self summaryFor: aReceptiveAccount) do: [ :aSummaryLine | 
		tree add: (AccountTree indent: aSummaryLine byLevel: indentLevel + 1).
	]! !
!AccountSummaryTree methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:18:39' prior: 50895746 overrides: 50892641!
affectForReceptiveAccount: aReceptiveAccount
	super affectForReceptiveAccount: aReceptiveAccount.
	
	self addIndentedSummaryFor: aReceptiveAccount.! !
!AccountSummaryTree methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:18:44' prior: 50895767 overrides: 50892641!
affectForReceptiveAccount: aReceptiveAccount
	
	super affectForReceptiveAccount: aReceptiveAccount.
	self addIndentedSummaryFor: aReceptiveAccount.! !
!AccountSummaryTree methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:18:55' prior: 50895717!
balanceFor: aPortfolio

	^AccountSummary balanceReportMessageFor: aPortfolio! !

----SNAPSHOT----(15 November 2020 12:19:57) CuisUniversity-4384.image priorSource: 17978459!

----SNAPSHOT----(15 November 2020 12:20:14) CuisUniversity-4384.image priorSource: 18052463!
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 12:24:26' prior: 50895187!
test18MultipleDepthLevelPortfolioSummaryTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily.
	rootPortfolio add: portfolioPadreDeCharlie.
	rootPortfolio add: accountJorge.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assertTree: {
		'Root Portfolio'.
			AccountTree indent: accountEmily name byLevel: 1.
				AccountTree indent: 'Dep�sito por 100' byLevel: 2.
				AccountTree indent: 'Balance = 100' byLevel: 2.
			AccountTree indent: portfolioPadreDeCharlie name byLevel: 1.
				AccountTree indent: accountCharlie name byLevel: 2.
					AccountTree indent: 'Dep�sito por 60' byLevel: 3.
					AccountTree indent: 'Balance = 60' byLevel: 3.
				AccountTree indent: 'Balance = 60' byLevel: 2.
			AccountTree indent: accountJorge name byLevel: 1.
				AccountTree indent: 'Extracci�n por 30' byLevel: 2.
				AccountTree indent: 'Balance = -30' byLevel: 2.
			AccountTree indent: 'Balance = 130' byLevel: 1.
	} equals: tree.
	
	self assert: 13 equals: tree size.
	"self assert: 'Root Portfolio' equals: (tree at: 1).
	
	self assert: (AccountTree indent: accountEmily name byLevel: 1) equals: (tree at: 2).
	self assert: (AccountTree indent: 'Dep�sito por 100' byLevel: 2) equals: (tree at: 3).
	self assert: (AccountTree indent: 'Balance = 100' byLevel: 2) equals: (tree at: 4).
	
	self assert: (AccountTree indent: portfolioPadreDeCharlie name byLevel: 1) equals: (tree at: 5).
	self assert: (AccountTree indent: accountCharlie name byLevel: 2) equals: (tree at: 6).
	self assert: (AccountTree indent: 'Dep�sito por 60' byLevel: 3) equals: (tree at: 7).
	self assert: (AccountTree indent: 'Balance = 60' byLevel: 3) equals: (tree at: 8).
	self assert: (AccountTree indent: 'Balance = 60' byLevel: 2) equals: (tree at: 9).
	
	self assert: (AccountTree indent: accountJorge name byLevel: 1) equals: (tree at: 10).
	self assert: (AccountTree indent: 'Extracci�n por 30' byLevel: 2) equals: (tree at: 11).
	self assert: (AccountTree indent: 'Balance = -30' byLevel: 2) equals: (tree at: 12).
	self assert: (AccountTree indent: 'Balance = 130' byLevel: 1) equals: (tree at: 13)."! !
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 12:26:47'!
assertTree: aCollectionTree equals: aTree

	self assert: aCollectionTree size equals: aTree size.
	(1 to: aCollectionTree size) do: [ :aTreeIndex |
		self assert: (aCollectionTree at: aTreeIndex) equals: (aTree at: aTreeIndex).
	].! !

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:26:49'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:26:49'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:26:49'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:26:49'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:26:49'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:26:49'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:26:49'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:26:49'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:26:49'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:26:49'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:26:49'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:26:49'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:26:49'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:26:49'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:26:49'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:26:49'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:26:49'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:26:49'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 12:26:59' prior: 50895797!
test18MultipleDepthLevelPortfolioSummaryTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily.
	rootPortfolio add: portfolioPadreDeCharlie.
	rootPortfolio add: accountJorge.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assertTree: {
		'Root Portfolio'.
			AccountTree indent: accountEmily name byLevel: 1.
				AccountTree indent: 'Dep�sito por 100' byLevel: 2.
				AccountTree indent: 'Balance = 100' byLevel: 2.
			AccountTree indent: portfolioPadreDeCharlie name byLevel: 1.
				AccountTree indent: accountCharlie name byLevel: 2.
					AccountTree indent: 'Dep�sito por 60' byLevel: 3.
					AccountTree indent: 'Balance = 60' byLevel: 3.
				AccountTree indent: 'Balance = 60' byLevel: 2.
			AccountTree indent: accountJorge name byLevel: 1.
				AccountTree indent: 'Extracci�n por 30' byLevel: 2.
				AccountTree indent: 'Balance = -30' byLevel: 2.
			AccountTree indent: 'Balance = 130' byLevel: 1.
	} equals: tree.! !
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 12:29:35' prior: 50894896!
test17SingleDepthLevelPortfolioSummaryTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily with: accountJorge.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assertTree: {
		'Root Portfolio'.
			AccountTree indent: accountEmily name byLevel: 1.
				AccountTree indent: 'Dep�sito por 100' byLevel: 2.
				AccountTree indent: 'Balance = 100' byLevel: 2.
			AccountTree indent: accountJorge name byLevel: 1.
				AccountTree indent: 'Extracci�n por 30' byLevel: 2.
				AccountTree indent: 'Balance = -30' byLevel: 2.
			AccountTree indent: 'Balance = 70' byLevel: 1.
	} equals: tree.! !

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:29:37'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:29:37'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:29:37'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:29:37'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:29:37'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:29:37'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:29:37'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:29:37'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:29:37'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:29:37'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:29:37'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:29:37'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:29:37'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:29:37'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:29:37'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:29:37'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:29:37'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:29:37'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:29:37'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 12:30:09' prior: 50894868!
test16EmptyPortfolioSummaryTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio'.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assertTree: {
		'Root Portfolio'.
			AccountTree indent: 'Balance = 0' byLevel: 1.
	} equals: tree.! !

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:30:10'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:30:10'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:30:10'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:30:10'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:30:10'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:30:10'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:30:10'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:30:10'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:30:10'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:30:10'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:30:10'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:30:10'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:30:10'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:30:10'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:30:10'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:30:10'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:30:10'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:30:10'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:30:10'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account tree' stamp: 'VP 11/15/2020 12:31:08' prior: 50893330!
test15UnnamedAccountInTreeHasDefaultName

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: ReceptiveAccount new.
	
	tree := (AccountTree for: rootPortfolio) tree.
	
	self assertTree: {
		'Root Portfolio'.
			AccountTree indent: 'Una Cuenta Corriente' byLevel: 1.
	} equals: tree.! !

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:31:09'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:31:09'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:31:09'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:31:09'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:31:09'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:31:09'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:31:09'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:31:09'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:31:09'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:31:09'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:31:09'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:31:09'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:31:09'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:31:09'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:31:09'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:31:09'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:31:09'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:31:09'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:31:09'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account tree' stamp: 'VP 11/15/2020 12:31:28' prior: 50893107!
test14UnnamedPortfolioInTreeHasDefaultName

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio new.
	
	tree := (AccountTree for: rootPortfolio) tree.
	
	self assertTree: {
		'Un Portfolio'.
	} equals: tree.! !

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:31:28'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:31:28'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:31:28'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:31:28'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:31:29'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:31:29'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:31:29'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:31:29'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:31:29'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:31:29'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:31:29'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:31:29'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:31:29'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:31:29'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:31:29'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:31:29'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:31:29'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:31:29'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:31:29'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account tree' stamp: 'VP 11/15/2020 12:32:43' prior: 50892922!
test13MultipleDepthLevelPortfolioTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily.
	rootPortfolio add: portfolioPadreDeCharlie.
	rootPortfolio add: accountJorge.
	
	tree := (AccountTree for: rootPortfolio) tree.
	
	self assertTree: {
		'Root Portfolio'.
			AccountTree indent: accountEmily name byLevel: 1.
			AccountTree indent: portfolioPadreDeCharlie name byLevel: 1.
				AccountTree indent: accountCharlie name byLevel: 2.
			AccountTree indent: accountJorge name byLevel: 1.
	} equals: tree.! !

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:32:44'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:32:44'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:32:44'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:32:44'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:32:44'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:32:44'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:32:44'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:32:44'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:32:44'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:32:44'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:32:44'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:32:44'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:32:44'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:32:44'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:32:44'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:32:44'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:32:44'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:32:44'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:32:44'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account tree' stamp: 'VP 11/15/2020 12:33:05' prior: 50892247!
test12SingleDepthLevelPortfolioTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily with: accountJorge.
	
	tree := (AccountTree for: rootPortfolio) tree.
	
	self assertTree: {
		'Root Portfolio'.
			AccountTree indent: accountEmily name byLevel: 1.
			AccountTree indent: accountJorge name byLevel: 1.
	} equals: tree.! !

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:33:06'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:33:06'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:33:06'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:33:06'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:33:06'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:33:06'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:33:06'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:33:06'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:33:06'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:33:06'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:33:06'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:33:06'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:33:06'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:33:06'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:33:06'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:33:06'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:33:06'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:33:06'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:33:06'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account tree' stamp: 'VP 11/15/2020 12:33:15' prior: 50891700!
test11EmptyPortfolioTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio'.
	
	tree := (AccountTree for: rootPortfolio) tree.
	
	self assertTree: {
		'Root Portfolio'.
	} equals: tree.! !

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:33:16'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:33:16'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:33:16'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:33:16'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:33:16'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:33:16'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:33:16'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:33:16'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:33:16'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:33:16'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:33:16'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:33:16'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:33:16'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:33:16'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:33:16'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:33:16'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:33:16'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:33:16'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:33:16'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account summary' stamp: 'VP 11/15/2020 12:34:26' prior: 50890605!
test06PortfolioWithTransactionsSummary

	| portfolio account1 account2 summaryCollection |
	
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 30 from: account2 to: account1.
	Transfer register: 20 from: account1 to: account2.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account1.
	
	portfolio add: account1.
	
	summaryCollection := (AccountSummary for: portfolio) asCollection.
	
	self assertTree: {
		'Dep�sito por 100'.
		'Extracci�n por 50'.
		'Salida por transferencia de 20'.
		'Entrada por transferencia de 30'.
		'Balance = 60'.
	} equals: summaryCollection.! !

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:34:27'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:34:27'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:34:27'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:34:27'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:34:27'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:34:27'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:34:27'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:34:27'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:34:27'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:34:27'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:34:27'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:34:27'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:34:27'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:34:27'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:34:27'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:34:27'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:34:27'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:34:27'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:34:27'!
PASSED!
!AccountReportTest methodsFor: 'assertions' stamp: 'VP 11/15/2020 12:34:37'!
assertCollection: aCollectionTree equals: aTree

	self assert: aCollectionTree size equals: aTree size.
	(1 to: aCollectionTree size) do: [ :aTreeIndex |
		self assert: (aCollectionTree at: aTreeIndex) equals: (aTree at: aTreeIndex).
	].! !
!AccountReportTest methodsFor: 'as yet unclassified' stamp: 'VP 11/15/2020 12:34:37' prior: 50896303!
test13MultipleDepthLevelPortfolioTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily.
	rootPortfolio add: portfolioPadreDeCharlie.
	rootPortfolio add: accountJorge.
	
	tree := (AccountTree for: rootPortfolio) tree.
	
	self assertCollection: {
		'Root Portfolio'.
			AccountTree indent: accountEmily name byLevel: 1.
			AccountTree indent: portfolioPadreDeCharlie name byLevel: 1.
				AccountTree indent: accountCharlie name byLevel: 2.
			AccountTree indent: accountJorge name byLevel: 1.
	} equals: tree.! !
!AccountReportTest methodsFor: 'as yet unclassified' stamp: 'VP 11/15/2020 12:34:37' prior: 50895976!
test17SingleDepthLevelPortfolioSummaryTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily with: accountJorge.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assertCollection: {
		'Root Portfolio'.
			AccountTree indent: accountEmily name byLevel: 1.
				AccountTree indent: 'Dep�sito por 100' byLevel: 2.
				AccountTree indent: 'Balance = 100' byLevel: 2.
			AccountTree indent: accountJorge name byLevel: 1.
				AccountTree indent: 'Extracci�n por 30' byLevel: 2.
				AccountTree indent: 'Balance = -30' byLevel: 2.
			AccountTree indent: 'Balance = 70' byLevel: 1.
	} equals: tree.! !
!AccountReportTest methodsFor: 'as yet unclassified' stamp: 'VP 11/15/2020 12:34:37' prior: 50895941!
test18MultipleDepthLevelPortfolioSummaryTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily.
	rootPortfolio add: portfolioPadreDeCharlie.
	rootPortfolio add: accountJorge.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assertCollection: {
		'Root Portfolio'.
			AccountTree indent: accountEmily name byLevel: 1.
				AccountTree indent: 'Dep�sito por 100' byLevel: 2.
				AccountTree indent: 'Balance = 100' byLevel: 2.
			AccountTree indent: portfolioPadreDeCharlie name byLevel: 1.
				AccountTree indent: accountCharlie name byLevel: 2.
					AccountTree indent: 'Dep�sito por 60' byLevel: 3.
					AccountTree indent: 'Balance = 60' byLevel: 3.
				AccountTree indent: 'Balance = 60' byLevel: 2.
			AccountTree indent: accountJorge name byLevel: 1.
				AccountTree indent: 'Extracci�n por 30' byLevel: 2.
				AccountTree indent: 'Balance = -30' byLevel: 2.
			AccountTree indent: 'Balance = 130' byLevel: 1.
	} equals: tree.! !
!AccountReportTest methodsFor: 'as yet unclassified' stamp: 'VP 11/15/2020 12:34:37' prior: 50896226!
test14UnnamedPortfolioInTreeHasDefaultName

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio new.
	
	tree := (AccountTree for: rootPortfolio) tree.
	
	self assertCollection: {
		'Un Portfolio'.
	} equals: tree.! !
!AccountReportTest methodsFor: 'as yet unclassified' stamp: 'VP 11/15/2020 12:34:37' prior: 50896146!
test15UnnamedAccountInTreeHasDefaultName

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: ReceptiveAccount new.
	
	tree := (AccountTree for: rootPortfolio) tree.
	
	self assertCollection: {
		'Root Portfolio'.
			AccountTree indent: 'Una Cuenta Corriente' byLevel: 1.
	} equals: tree.! !
!AccountReportTest methodsFor: 'as yet unclassified' stamp: 'VP 11/15/2020 12:34:37' prior: 50896549!
test06PortfolioWithTransactionsSummary

	| portfolio account1 account2 summaryCollection |
	
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 30 from: account2 to: account1.
	Transfer register: 20 from: account1 to: account2.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account1.
	
	portfolio add: account1.
	
	summaryCollection := (AccountSummary for: portfolio) asCollection.
	
	self assertCollection: {
		'Dep�sito por 100'.
		'Extracci�n por 50'.
		'Salida por transferencia de 20'.
		'Entrada por transferencia de 30'.
		'Balance = 60'.
	} equals: summaryCollection.! !
!AccountReportTest methodsFor: 'as yet unclassified' stamp: 'VP 11/15/2020 12:34:37' prior: 50896390!
test12SingleDepthLevelPortfolioTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily with: accountJorge.
	
	tree := (AccountTree for: rootPortfolio) tree.
	
	self assertCollection: {
		'Root Portfolio'.
			AccountTree indent: accountEmily name byLevel: 1.
			AccountTree indent: accountJorge name byLevel: 1.
	} equals: tree.! !
!AccountReportTest methodsFor: 'as yet unclassified' stamp: 'VP 11/15/2020 12:34:37' prior: 50896067!
test16EmptyPortfolioSummaryTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio'.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assertCollection: {
		'Root Portfolio'.
			AccountTree indent: 'Balance = 0' byLevel: 1.
	} equals: tree.! !
!AccountReportTest methodsFor: 'as yet unclassified' stamp: 'VP 11/15/2020 12:34:37' prior: 50896472!
test11EmptyPortfolioTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio'.
	
	tree := (AccountTree for: rootPortfolio) tree.
	
	self assertCollection: {
		'Root Portfolio'.
	} equals: tree.! !

!methodRemoval: AccountReportTest #assertTree:equals: stamp: 'VP 11/15/2020 12:34:37'!
assertTree: aCollectionTree equals: aTree

	self assert: aCollectionTree size equals: aTree size.
	(1 to: aCollectionTree size) do: [ :aTreeIndex |
		self assert: (aCollectionTree at: aTreeIndex) equals: (aTree at: aTreeIndex).
	].!
!AccountReportTest methodsFor: 'assertions' stamp: 'VP 11/15/2020 12:34:46' prior: 50896639!
assertCollection: aCollection equals: aTree

	self assert: aCollection size equals: aTree size.
	(1 to: aCollection size) do: [ :aTreeIndex |
		self assert: (aCollection at: aTreeIndex) equals: (aTree at: aTreeIndex).
	].! !
!AccountReportTest methodsFor: 'assertions' stamp: 'VP 11/15/2020 12:34:59' prior: 50896828!
assertCollection: anExpectedCollection equals: aTree

	self assert: anExpectedCollection size equals: aTree size.
	(1 to: anExpectedCollection size) do: [ :aTreeIndex |
		self assert: (anExpectedCollection at: aTreeIndex) equals: (aTree at: aTreeIndex).
	].! !
!AccountReportTest methodsFor: 'assertions' stamp: 'VP 11/15/2020 12:35:02' prior: 50896838!
assertCollection: anExpectedCollection equals: aCollection

	self assert: anExpectedCollection size equals: aCollection size.
	(1 to: anExpectedCollection size) do: [ :aTreeIndex |
		self assert: (anExpectedCollection at: aTreeIndex) equals: (aCollection at: aTreeIndex).
	].! !
!AccountReportTest methodsFor: 'assertions' stamp: 'VP 11/15/2020 12:35:10' prior: 50896850!
assertCollection: anExpectedCollection equals: aCollection

	self assert: anExpectedCollection size equals: aCollection size.
	(1 to: anExpectedCollection size) do: [ :aCollectionIndex |
		self assert: (anExpectedCollection at: aCollectionIndex) equals: (aCollection at: aCollectionIndex).
	].! !
!AccountReportTest methodsFor: 'tests -- account summary' stamp: 'VP 11/15/2020 12:35:47' prior: 50890821!
test05AccountWithSingleOutboundTransferSummary

	| account1 account2 summaryCollection |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 100 from: account2 to: account1.
	
	summaryCollection := (AccountSummary for: account2) asCollection.
	
	self assertCollection: {
		'Salida por transferencia de 100'.
		'Balance = -100'.
	} equals: summaryCollection.! !

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:35:48'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:35:48'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:35:48'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:35:48'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:35:48'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:35:48'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:35:48'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:35:48'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:35:48'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:35:48'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:35:48'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:35:48'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:35:48'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:35:48'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:35:48'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:35:48'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:35:48'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:35:48'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:35:48'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account summary' stamp: 'VP 11/15/2020 12:36:06' prior: 50890717!
test04AccountWithSingleInboundTransferSummary

	| account1 account2 summaryCollection |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 100 from: account2 to: account1.
	
	summaryCollection := (AccountSummary for: account1) asCollection.
	
	self assertCollection: {
		'Entrada por transferencia de 100'.
		'Balance = 100'.
	} equals: summaryCollection.! !

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:36:06'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:36:06'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:36:06'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:36:06'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:36:06'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:36:06'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:36:06'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:36:06'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:36:06'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:36:06'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:36:06'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:36:06'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:36:06'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:36:06'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:36:06'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:36:06'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:36:06'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:36:06'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:36:06'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:36:08'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:36:09'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:36:09'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:36:09'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:36:09'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:36:09'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:36:09'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:36:09'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:36:09'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:36:09'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:36:09'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:36:09'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:36:09'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:36:09'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:36:09'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:36:09'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:36:09'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:36:09'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:36:09'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account summary' stamp: 'VP 11/15/2020 12:36:14' prior: 50896958!
test04AccountWithSingleInboundTransferSummary

	| account1 account2 summaryCollection |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 100 from: account2 to: account1.
	
	summaryCollection := (AccountSummary for: account1) asCollection.
	
	self assertCollection: {
		'Entrada por transferencia de 100'.
		'Balance = 100'.
	} equals: summaryCollection.! !
!AccountReportTest methodsFor: 'tests -- account summary' stamp: 'VP 11/15/2020 12:36:29' prior: 50890873!
test03AccountWithSingleWithdrawSummary

	| account summaryCollection |
	
	account := ReceptiveAccount new.
	
	Withdraw register: 100 on: account.
	
	summaryCollection := (AccountSummary for: account) asCollection.
	
	self assertCollection: {
		'Extracci�n por 100'.
		'Balance = -100'.
	} equals: summaryCollection.! !

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:36:32'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:36:32'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:36:32'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:36:32'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:36:32'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:36:32'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:36:32'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:36:32'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:36:32'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:36:32'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:36:32'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:36:32'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:36:32'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:36:32'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:36:32'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:36:32'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:36:32'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:36:32'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:36:32'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account summary' stamp: 'VP 11/15/2020 12:36:46' prior: 50890557!
test02AccountWithSingleDepositSummary

	| account summaryCollection |
	
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	summaryCollection := (AccountSummary for: account) asCollection.
	
	self assertCollection: {
		'Dep�sito por 100'.
		'Balance = 100'.
	} equals: summaryCollection.! !

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:36:47'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:36:47'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:36:47'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:36:47'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:36:47'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:36:47'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:36:47'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:36:47'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:36:47'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:36:47'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:36:47'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:36:47'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:36:47'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:36:47'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:36:47'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:36:47'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:36:47'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:36:47'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:36:47'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account summary' stamp: 'VP 11/15/2020 12:37:00' prior: 50890330!
test01EmptyAccountSummary

	| account summaryCollection |
	
	account := ReceptiveAccount new.
	
	summaryCollection := (AccountSummary for: account) asCollection.
	
	self assertCollection: {
		'Balance = 0'.
	} equals: summaryCollection.! !

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:37:00'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:37:00'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:37:00'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:37:00'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:37:00'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:37:00'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:37:00'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:37:00'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:37:00'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:37:00'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:37:00'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:37:00'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:37:00'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:37:00'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:37:00'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:37:00'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:37:00'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:37:00'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:37:00'!
PASSED!
!AccountSummary methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:38:09'!
summaryMessageForDeposit: aDeposit

	^ 'Dep�sito por ', aDeposit value asString! !
!AccountSummary methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:38:09' prior: 50891353 overrides: 50891303!
affectForDeposit: aDeposit

	self addTransactionDescription: (self summaryMessageForDeposit: aDeposit).! !
!AccountSummary methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:38:32'!
summaryMessageForTransferDeposit: aTransferDeposit

	^ 'Entrada por transferencia de ', aTransferDeposit value asString! !
!AccountSummary methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:38:32' prior: 50891392 overrides: 50891319!
affectForTransferDeposit: aTransferDeposit

	self addTransactionDescription: (self summaryMessageForTransferDeposit: aTransferDeposit)! !
!AccountSummary methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:38:45'!
summaryMessageForTransferWithdraw: aTransferWithdraw

	^ 'Salida por transferencia de ', aTransferWithdraw value asString! !
!AccountSummary methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:38:45' prior: 50891410 overrides: 50891313!
affectForTransferWithdraw: aTransferWithdraw

	self addTransactionDescription: (self summaryMessageForTransferWithdraw: aTransferWithdraw)! !
!AccountSummary methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:38:56'!
summaryMessageForWithdraw: aWithdraw

	^ 'Extracci�n por ', aWithdraw value asString! !
!AccountSummary methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:38:56' prior: 50891360 overrides: 50891308!
affectForWithdraw: aWithdraw

	self addTransactionDescription: (self summaryMessageForWithdraw: aWithdraw).! !
!AccountSummary class methodsFor: 'summary -- private' stamp: 'VP 11/15/2020 12:39:33'!
summaryMessageForDeposit: aDeposit

	^ 'Dep�sito por ', aDeposit value asString! !

!methodRemoval: AccountSummary #summaryMessageForDeposit: stamp: 'VP 11/15/2020 12:39:33'!
summaryMessageForDeposit: aDeposit

	^ 'Dep�sito por ', aDeposit value asString!
!AccountSummary methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:39:42' prior: 50897368 overrides: 50891303!
affectForDeposit: aDeposit

	self addTransactionDescription: (self class summaryMessageForDeposit: aDeposit).! !
!AccountSummary methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:39:45' prior: 50897383 overrides: 50891319!
affectForTransferDeposit: aTransferDeposit

	self addTransactionDescription: (self class summaryMessageForTransferDeposit: aTransferDeposit)! !
!AccountSummary methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:39:48' prior: 50897399 overrides: 50891313!
affectForTransferWithdraw: aTransferWithdraw

	self addTransactionDescription: (self class summaryMessageForTransferWithdraw: aTransferWithdraw)! !
!AccountSummary methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:39:51' prior: 50897414 overrides: 50891308!
affectForWithdraw: aWithdraw

	self addTransactionDescription: (self class summaryMessageForWithdraw: aWithdraw).! !
!AccountSummary class methodsFor: 'summary -- private' stamp: 'VP 11/15/2020 12:40:02'!
summaryMessageForTransferDeposit: aTransferDeposit

	^ 'Entrada por transferencia de ', aTransferDeposit value asString! !

!methodRemoval: AccountSummary #summaryMessageForTransferDeposit: stamp: 'VP 11/15/2020 12:40:02'!
summaryMessageForTransferDeposit: aTransferDeposit

	^ 'Entrada por transferencia de ', aTransferDeposit value asString!
!AccountSummary class methodsFor: 'summary -- private' stamp: 'VP 11/15/2020 12:40:07'!
summaryMessageForTransferWithdraw: aTransferWithdraw

	^ 'Salida por transferencia de ', aTransferWithdraw value asString! !

!methodRemoval: AccountSummary #summaryMessageForTransferWithdraw: stamp: 'VP 11/15/2020 12:40:07'!
summaryMessageForTransferWithdraw: aTransferWithdraw

	^ 'Salida por transferencia de ', aTransferWithdraw value asString!
!AccountSummary class methodsFor: 'summary -- private' stamp: 'VP 11/15/2020 12:40:12'!
summaryMessageForWithdraw: aWithdraw

	^ 'Extracci�n por ', aWithdraw value asString! !

!methodRemoval: AccountSummary #summaryMessageForWithdraw: stamp: 'VP 11/15/2020 12:40:12'!
summaryMessageForWithdraw: aWithdraw

	^ 'Extracci�n por ', aWithdraw value asString!
!AccountSummary class methodsFor: 'report messages -- private' stamp: 'VP 11/15/2020 12:40:49' prior: 50897421!
summaryMessageForDeposit: aDeposit

	^ 'Dep�sito por ', aDeposit value asString! !
!AccountSummary class methodsFor: 'report messages -- private' stamp: 'VP 11/15/2020 12:40:59'!
summaryMessageForDepositValue: aDepositValue

	^ 'Dep�sito por ', aDepositValue asString! !

!methodRemoval: AccountSummary class #summaryMessageForDeposit: stamp: 'VP 11/15/2020 12:41:02'!
summaryMessageForDeposit: aDeposit

	^ 'Dep�sito por ', aDeposit value asString!
!AccountSummary class methodsFor: 'report messages -- private' stamp: 'VP 11/15/2020 12:41:13'!
summaryMessageForTransferDepositValue: aTransferDeposit

	^ 'Entrada por transferencia de ', aTransferDeposit value asString! !
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'VP 11/15/2020 12:41:13' prior: 50897441 overrides: 50891319!
affectForTransferDeposit: aTransferDeposit

	self addTransactionDescription: (self class summaryMessageForTransferDepositValue: aTransferDeposit)! !

!methodRemoval: AccountSummary class #summaryMessageForTransferDeposit: stamp: 'VP 11/15/2020 12:41:13'!
summaryMessageForTransferDeposit: aTransferDeposit

	^ 'Entrada por transferencia de ', aTransferDeposit value asString!
!AccountSummary class methodsFor: 'report messages -- private' stamp: 'VP 11/15/2020 12:41:21' prior: 50897524!
summaryMessageForTransferDepositValue: aTransferDepositValue

	^ 'Entrada por transferencia de ', aTransferDepositValue value asString! !
!AccountSummary class methodsFor: 'report messages -- private' stamp: 'VP 11/15/2020 12:41:23' prior: 50897548!
summaryMessageForTransferDepositValue: aTransferDepositValue

	^ 'Entrada por transferencia de ', aTransferDepositValue asString! !
!AccountSummary class methodsFor: 'report messages -- private' stamp: 'VP 11/15/2020 12:41:30'!
summaryMessageForTransferWithdrawValue: aTransferWithdrawValue

	^ 'Salida por transferencia de ', aTransferWithdrawValue asString! !

!methodRemoval: AccountSummary class #summaryMessageForTransferWithdraw: stamp: 'VP 11/15/2020 12:41:32'!
summaryMessageForTransferWithdraw: aTransferWithdraw

	^ 'Salida por transferencia de ', aTransferWithdraw value asString!
!AccountSummary class methodsFor: 'report messages -- private' stamp: 'VP 11/15/2020 12:41:38'!
summaryMessageForWithdrawValue: aWithdrawValue

	^ 'Extracci�n por ', aWithdrawValue asString! !

!methodRemoval: AccountSummary class #summaryMessageForWithdraw: stamp: 'VP 11/15/2020 12:41:40'!
summaryMessageForWithdraw: aWithdraw

	^ 'Extracci�n por ', aWithdraw value asString!
!AccountSummary methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:41:49' prior: 50897433 overrides: 50891303!
affectForDeposit: aDeposit

	self addTransactionDescription: (self class summaryMessageForDepositValue: aDeposit value).! !
!AccountSummary methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:41:54' prior: 50897532 overrides: 50891319!
affectForTransferDeposit: aTransferDeposit

	self addTransactionDescription: (self class summaryMessageForTransferDepositValue: aTransferDeposit value)! !
!AccountSummary methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:41:59' prior: 50897450 overrides: 50891313!
affectForTransferWithdraw: aTransferWithdraw

	self addTransactionDescription: (self class summaryMessageForTransferWithdrawValue: aTransferWithdraw value)! !
!AccountSummary methodsFor: 'report building -- private' stamp: 'VP 11/15/2020 12:42:05' prior: 50897459 overrides: 50891308!
affectForWithdraw: aWithdraw

	self addTransactionDescription: (self class summaryMessageForWithdrawValue: aWithdraw value).! !

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:42:09'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:42:09'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:42:09'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:42:09'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:42:09'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:42:09'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:42:09'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:42:09'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:42:09'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:42:09'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:42:09'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:42:09'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:42:09'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:42:09'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:42:09'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:42:09'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:42:09'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:42:09'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account summary' stamp: 'VP 11/15/2020 12:42:28' prior: 50897284!
test01EmptyAccountSummary

	| account summaryCollection |
	
	account := ReceptiveAccount new.
	
	summaryCollection := (AccountSummary for: account) asCollection.
	
	self assertCollection: {
		AccountSummary balanceReportMessageFor: 0.
	} equals: summaryCollection.! !
!AccountSummary class methodsFor: 'report messages -- private' stamp: 'VP 11/15/2020 12:42:49' prior: 50889975!
balanceReportMessageFor: aBalance

	^ 'Balance = ', aBalance asString! !
!AccountSummary methodsFor: 'initialization -- private' stamp: 'VP 11/15/2020 12:43:07' prior: 50890272!
basicAccountReportFor: anAccount

	^OrderedCollection with: (self class balanceReportMessageFor: anAccount balance)! !

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:43:10'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:43:10'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:43:10'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:43:10'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:43:10'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:43:10'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:43:10'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:43:10'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:43:10'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:43:10'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:43:10'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:43:10'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:43:10'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:43:10'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:43:10'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:43:10'!
FAILURE!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:43:10'!
FAILURE!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:43:10'!
FAILURE!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:43:12'!
FAILURE!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:44:28'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:44:28'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:44:28'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:44:28'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:44:28'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:44:28'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:44:28'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:44:28'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:44:28'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:44:28'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:44:28'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:44:28'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:44:28'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:44:28'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:44:28'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:44:28'!
FAILURE!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:44:28'!
FAILURE!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:44:28'!
FAILURE!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:44:30'!
FAILURE!
!AccountSummaryTree methodsFor: 'summary -- private' stamp: 'VP 11/15/2020 12:45:03' prior: 50895785!
balanceFor: aPortfolio

	^AccountSummary balanceReportMessageFor: aPortfolio balance.! !

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:45:06'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:45:06'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:45:06'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:45:06'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:45:06'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:45:06'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:45:06'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:45:06'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:45:06'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:45:06'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:45:06'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:45:06'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:45:06'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:45:06'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:45:06'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:45:06'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:45:06'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:45:06'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account summary' stamp: 'VP 11/15/2020 12:45:20' prior: 50897204!
test02AccountWithSingleDepositSummary

	| account summaryCollection |
	
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	summaryCollection := (AccountSummary for: account) asCollection.
	
	self assertCollection: {
		'Dep�sito por 100'.
		AccountSummary balanceReportMessageFor: 100.
	} equals: summaryCollection.! !

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:45:21'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:45:21'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:45:21'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:45:21'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:45:21'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:45:21'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:45:21'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:45:21'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:45:21'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:45:21'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:45:21'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:45:21'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:45:21'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:45:21'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:45:21'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:45:21'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:45:21'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:45:21'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:45:21'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account summary' stamp: 'VP 11/15/2020 12:45:29' prior: 50897124!
test03AccountWithSingleWithdrawSummary

	| account summaryCollection |
	
	account := ReceptiveAccount new.
	
	Withdraw register: 100 on: account.
	
	summaryCollection := (AccountSummary for: account) asCollection.
	
	self assertCollection: {
		'Extracci�n por 100'.
		AccountSummary balanceReportMessageFor: -100.
	} equals: summaryCollection.! !

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:45:29'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:45:29'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:45:29'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:45:29'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:45:29'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:45:29'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:45:29'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:45:29'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:45:29'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:45:29'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:45:29'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:45:29'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:45:29'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:45:29'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:45:29'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:45:29'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:45:29'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:45:29'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:45:29'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account summary' stamp: 'VP 11/15/2020 12:45:36' prior: 50897108!
test04AccountWithSingleInboundTransferSummary

	| account1 account2 summaryCollection |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 100 from: account2 to: account1.
	
	summaryCollection := (AccountSummary for: account1) asCollection.
	
	self assertCollection: {
		'Entrada por transferencia de 100'.
		AccountSummary balanceReportMessageFor: -100.
	} equals: summaryCollection.! !

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:45:37'!
FAILURE!
!AccountReportTest methodsFor: 'tests -- account summary' stamp: 'VP 11/15/2020 12:45:45' prior: 50898079!
test04AccountWithSingleInboundTransferSummary

	| account1 account2 summaryCollection |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 100 from: account2 to: account1.
	
	summaryCollection := (AccountSummary for: account1) asCollection.
	
	self assertCollection: {
		'Entrada por transferencia de 100'.
		AccountSummary balanceReportMessageFor: 100.
	} equals: summaryCollection.! !

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:45:47'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:45:47'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:45:47'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:45:47'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:45:47'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:45:47'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:45:47'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:45:47'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:45:47'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:45:47'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:45:47'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:45:47'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:45:47'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:45:47'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:45:47'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:45:47'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:45:47'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:45:47'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:45:47'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account summary' stamp: 'VP 11/15/2020 12:46:06' prior: 50896875!
test05AccountWithSingleOutboundTransferSummary

	| account1 account2 summaryCollection |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 100 from: account2 to: account1.
	
	summaryCollection := (AccountSummary for: account2) asCollection.
	
	self assertCollection: {
		'Salida por transferencia de 100'.
		AccountSummary balanceReportMessageFor: -100.
	} equals: summaryCollection.! !

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:46:08'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:46:08'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:46:08'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:46:08'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:46:08'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:46:08'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:46:08'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:46:08'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:46:08'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:46:08'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:46:08'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:46:08'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:46:08'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:46:08'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:46:08'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:46:08'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:46:08'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:46:09'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:46:09'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account summary' stamp: 'VP 11/15/2020 12:46:20' prior: 50896755!
test06PortfolioWithTransactionsSummary

	| portfolio account1 account2 summaryCollection |
	
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 30 from: account2 to: account1.
	Transfer register: 20 from: account1 to: account2.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account1.
	
	portfolio add: account1.
	
	summaryCollection := (AccountSummary for: portfolio) asCollection.
	
	self assertCollection: {
		'Dep�sito por 100'.
		'Extracci�n por 50'.
		'Salida por transferencia de 20'.
		'Entrada por transferencia de 30'.
		AccountSummary balanceReportMessageFor: 60.
	} equals: summaryCollection.! !

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:46:21'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:46:21'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:46:21'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:46:21'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:46:21'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:46:21'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:46:21'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:46:21'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:46:21'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:46:21'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:46:21'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:46:21'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:46:21'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:46:21'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:46:21'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:46:21'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:46:21'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:46:21'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:46:21'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 12:46:46' prior: 50896795!
test16EmptyPortfolioSummaryTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio'.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assertCollection: {
		'Root Portfolio'.
			AccountTree indent: (AccountSummary balanceReportMessageFor: 0) byLevel: 1.
	} equals: tree.! !

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:46:47'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:46:47'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:46:47'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:46:47'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:46:47'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:46:47'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:46:47'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:46:47'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:46:47'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:46:47'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:46:47'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:46:47'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:46:47'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:46:47'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:46:47'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:46:47'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:46:47'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:46:47'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:46:47'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 12:47:07' prior: 50896671!
test17SingleDepthLevelPortfolioSummaryTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily with: accountJorge.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assertCollection: {
		'Root Portfolio'.
			AccountTree indent: accountEmily name byLevel: 1.
				AccountTree indent: 'Dep�sito por 100' byLevel: 2.
				AccountTree indent: (AccountSummary balanceReportMessageFor: 100) byLevel: 2.
			AccountTree indent: accountJorge name byLevel: 1.
				AccountTree indent: 'Extracci�n por 30' byLevel: 2.
				AccountTree indent: (AccountSummary balanceReportMessageFor: -30) byLevel: 2.
			AccountTree indent: (AccountSummary balanceReportMessageFor: 70) byLevel: 1.
	} equals: tree.! !

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:47:08'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:47:08'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:47:08'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:47:08'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:47:08'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:47:08'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:47:08'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:47:08'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:47:08'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:47:08'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:47:08'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:47:08'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:47:08'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:47:08'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:47:08'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:47:08'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:47:08'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:47:08'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:47:08'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 12:47:38' prior: 50896695!
test18MultipleDepthLevelPortfolioSummaryTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily.
	rootPortfolio add: portfolioPadreDeCharlie.
	rootPortfolio add: accountJorge.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assertCollection: {
		'Root Portfolio'.
			AccountTree indent: accountEmily name byLevel: 1.
				AccountTree indent: 'Dep�sito por 100' byLevel: 2.
				AccountTree indent: (AccountSummary balanceReportMessageFor: 100) byLevel: 2.
			AccountTree indent: portfolioPadreDeCharlie name byLevel: 1.
				AccountTree indent: accountCharlie name byLevel: 2.
					AccountTree indent: 'Dep�sito por 60' byLevel: 3.
					AccountTree indent: (AccountSummary balanceReportMessageFor: 60) byLevel: 3.
				AccountTree indent: (AccountSummary balanceReportMessageFor: 60) byLevel: 2.
			AccountTree indent: accountJorge name byLevel: 1.
				AccountTree indent: 'Extracci�n por 30' byLevel: 2.
				AccountTree indent: (AccountSummary balanceReportMessageFor: -30) byLevel: 2.
			AccountTree indent: (AccountSummary balanceReportMessageFor: 130) byLevel: 1.
	} equals: tree.! !

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:47:39'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:47:39'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:47:39'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:47:39'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:47:39'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:47:39'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:47:39'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:47:39'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:47:39'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:47:39'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:47:39'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:47:39'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:47:39'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:47:39'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:47:39'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:47:39'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:47:39'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:47:39'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:47:39'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account summary' stamp: 'VP 11/15/2020 12:48:24' prior: 50897917!
test02AccountWithSingleDepositSummary

	| account summaryCollection |
	
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	summaryCollection := (AccountSummary for: account) asCollection.
	
	self assertCollection: {
		AccountSummary summaryMessageForDepositValue: 0.
		AccountSummary balanceReportMessageFor: 100.
	} equals: summaryCollection.! !

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:48:24'!
FAILURE!
!AccountReportTest methodsFor: 'tests -- account summary' stamp: 'VP 11/15/2020 12:48:34' prior: 50898640!
test02AccountWithSingleDepositSummary

	| account summaryCollection |
	
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
	
	summaryCollection := (AccountSummary for: account) asCollection.
	
	self assertCollection: {
		AccountSummary summaryMessageForDepositValue: 100.
		AccountSummary balanceReportMessageFor: 100.
	} equals: summaryCollection.! !

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:48:34'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:48:34'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:48:34'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:48:34'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:48:34'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:48:34'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:48:34'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:48:34'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:48:34'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:48:34'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:48:34'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:48:34'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:48:34'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:48:34'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:48:34'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:48:34'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:48:34'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:48:34'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:48:34'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account summary' stamp: 'VP 11/15/2020 12:48:58' prior: 50897998!
test03AccountWithSingleWithdrawSummary

	| account summaryCollection |
	
	account := ReceptiveAccount new.
	
	Withdraw register: 100 on: account.
	
	summaryCollection := (AccountSummary for: account) asCollection.
	
	self assertCollection: {
		AccountSummary summaryMessageForWithdrawValue: 100.
		AccountSummary balanceReportMessageFor: -100.
	} equals: summaryCollection.! !

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:49:00'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:49:00'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:49:00'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:49:00'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:49:00'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:49:00'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:49:00'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:49:00'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:49:00'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:49:00'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:49:00'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:49:00'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:49:00'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:49:00'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:49:00'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:49:00'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:49:00'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:49:00'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:49:00'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account summary' stamp: 'VP 11/15/2020 12:49:52' prior: 50898100!
test04AccountWithSingleInboundTransferSummary

	| account1 account2 summaryCollection |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 100 from: account2 to: account1.
	
	summaryCollection := (AccountSummary for: account1) asCollection.
	
	self assertCollection: {
		AccountSummary summaryMessageForTransferDepositValue: 100.
		AccountSummary balanceReportMessageFor: 100.
	} equals: summaryCollection.! !
!AccountReportTest methodsFor: 'tests -- account summary' stamp: 'VP 11/15/2020 12:50:03' prior: 50898268!
test06PortfolioWithTransactionsSummary

	| portfolio account1 account2 summaryCollection |
	
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 30 from: account2 to: account1.
	Transfer register: 20 from: account1 to: account2.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account1.
	
	portfolio add: account1.
	
	summaryCollection := (AccountSummary for: portfolio) asCollection.
	
	self assertCollection: {
		'Dep�sito por 100'.
		'Extracci�n por 50'.
		'Salida por transferencia de 20'.
		AccountSummary summaryMessageForTransferDepositValue: 30.
		AccountSummary balanceReportMessageFor: 60.
	} equals: summaryCollection.! !

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:50:16'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:50:18'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:50:18'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:50:18'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:50:18'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:50:18'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:50:18'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:50:18'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:50:18'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:50:18'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:50:18'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:50:18'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:50:18'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:50:18'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:50:18'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:50:18'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:50:18'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:50:18'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:50:18'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:50:18'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account summary' stamp: 'VP 11/15/2020 12:50:30' prior: 50898184!
test05AccountWithSingleOutboundTransferSummary

	| account1 account2 summaryCollection |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 100 from: account2 to: account1.
	
	summaryCollection := (AccountSummary for: account2) asCollection.
	
	self assertCollection: {
		AccountSummary summaryMessageForTransferWithdrawValue: 100.
		AccountSummary balanceReportMessageFor: -100.
	} equals: summaryCollection.! !

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:50:31'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:50:31'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:50:31'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:50:31'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:50:31'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:50:31'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:50:31'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:50:31'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:50:31'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:50:31'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:50:31'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:50:31'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:50:31'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:50:31'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:50:31'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:50:31'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:50:31'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:50:31'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:50:31'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account summary' stamp: 'VP 11/15/2020 12:50:43' prior: 50898841!
test06PortfolioWithTransactionsSummary

	| portfolio account1 account2 summaryCollection |
	
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 30 from: account2 to: account1.
	Transfer register: 20 from: account1 to: account2.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account1.
	
	portfolio add: account1.
	
	summaryCollection := (AccountSummary for: portfolio) asCollection.
	
	self assertCollection: {
		'Dep�sito por 100'.
		'Extracci�n por 50'.
		AccountSummary summaryMessageForTransferDepositValue: 20.
		AccountSummary summaryMessageForTransferDepositValue: 30.
		AccountSummary balanceReportMessageFor: 60.
	} equals: summaryCollection.! !

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:50:44'!
FAILURE!
!AccountReportTest methodsFor: 'tests -- account summary' stamp: 'VP 11/15/2020 12:50:51' prior: 50899023!
test06PortfolioWithTransactionsSummary

	| portfolio account1 account2 summaryCollection |
	
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 30 from: account2 to: account1.
	Transfer register: 20 from: account1 to: account2.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account1.
	
	portfolio add: account1.
	
	summaryCollection := (AccountSummary for: portfolio) asCollection.
	
	self assertCollection: {
		'Dep�sito por 100'.
		'Extracci�n por 50'.
		AccountSummary summaryMessageForTransferWithdrawValue: 20.
		AccountSummary summaryMessageForTransferDepositValue: 30.
		AccountSummary balanceReportMessageFor: 60.
	} equals: summaryCollection.! !

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:50:51'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:50:51'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:50:51'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:50:51'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:50:51'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:50:51'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:50:51'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:50:51'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:50:51'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:50:51'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:50:51'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:50:51'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:50:51'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:50:51'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:50:51'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:50:51'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:50:51'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:50:52'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:50:52'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account summary' stamp: 'VP 11/15/2020 12:51:20' prior: 50899054!
test06PortfolioWithTransactionsSummary

	| portfolio account1 account2 summaryCollection |
	
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 30 from: account2 to: account1.
	Transfer register: 20 from: account1 to: account2.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account1.
	
	portfolio add: account1.
	
	summaryCollection := (AccountSummary for: portfolio) asCollection.
	
	self assertCollection: {
		AccountSummary summaryMessageForDepositValue: 100.
		'Extracci�n por 50'.
		AccountSummary summaryMessageForTransferWithdrawValue: 20.
		AccountSummary summaryMessageForTransferDepositValue: 30.
		AccountSummary balanceReportMessageFor: 60.
	} equals: summaryCollection.! !
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 12:51:37' prior: 50898440!
test17SingleDepthLevelPortfolioSummaryTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily with: accountJorge.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assertCollection: {
		'Root Portfolio'.
			AccountTree indent: accountEmily name byLevel: 1.
				AccountTree indent: (AccountSummary summaryMessageForDepositValue: 100) byLevel: 2.
				AccountTree indent: (AccountSummary balanceReportMessageFor: 100) byLevel: 2.
			AccountTree indent: accountJorge name byLevel: 1.
				AccountTree indent: 'Extracci�n por 30' byLevel: 2.
				AccountTree indent: (AccountSummary balanceReportMessageFor: -30) byLevel: 2.
			AccountTree indent: (AccountSummary balanceReportMessageFor: 70) byLevel: 1.
	} equals: tree.! !
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 12:51:50' prior: 50898534!
test18MultipleDepthLevelPortfolioSummaryTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily.
	rootPortfolio add: portfolioPadreDeCharlie.
	rootPortfolio add: accountJorge.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assertCollection: {
		'Root Portfolio'.
			AccountTree indent: accountEmily name byLevel: 1.
				AccountTree indent: (AccountSummary summaryMessageForDepositValue: 100) byLevel: 2.
				AccountTree indent: (AccountSummary balanceReportMessageFor: 100) byLevel: 2.
			AccountTree indent: portfolioPadreDeCharlie name byLevel: 1.
				AccountTree indent: accountCharlie name byLevel: 2.
					AccountTree indent: (AccountSummary summaryMessageForDepositValue: 60) byLevel: 3.
					AccountTree indent: (AccountSummary balanceReportMessageFor: 60) byLevel: 3.
				AccountTree indent: (AccountSummary balanceReportMessageFor: 60) byLevel: 2.
			AccountTree indent: accountJorge name byLevel: 1.
				AccountTree indent: 'Extracci�n por 30' byLevel: 2.
				AccountTree indent: (AccountSummary balanceReportMessageFor: -30) byLevel: 2.
			AccountTree indent: (AccountSummary balanceReportMessageFor: 130) byLevel: 1.
	} equals: tree.! !

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:51:52'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:51:52'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:51:52'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:51:52'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:51:52'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:51:52'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:51:52'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:51:52'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:51:52'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:51:52'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:51:52'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:51:52'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:51:52'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:51:52'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:51:52'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:51:52'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:51:52'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:51:52'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:51:52'!
PASSED!
!AccountReportTest methodsFor: 'tests -- account summary' stamp: 'VP 11/15/2020 12:52:41' prior: 50899147!
test06PortfolioWithTransactionsSummary

	| portfolio account1 account2 summaryCollection |
	
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Transfer register: 30 from: account2 to: account1.
	Transfer register: 20 from: account1 to: account2.
	Withdraw register: 50 on: account1.
	Deposit register: 100 on: account1.
	
	portfolio add: account1.
	
	summaryCollection := (AccountSummary for: portfolio) asCollection.
	
	self assertCollection: {
		AccountSummary summaryMessageForDepositValue: 100.
		AccountSummary summaryMessageForWithdrawValue: 50.
		AccountSummary summaryMessageForTransferWithdrawValue: 20.
		AccountSummary summaryMessageForTransferDepositValue: 30.
		AccountSummary balanceReportMessageFor: 60.
	} equals: summaryCollection.! !
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 12:52:54' prior: 50899175!
test17SingleDepthLevelPortfolioSummaryTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily with: accountJorge.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assertCollection: {
		'Root Portfolio'.
			AccountTree indent: accountEmily name byLevel: 1.
				AccountTree indent: (AccountSummary summaryMessageForDepositValue: 100) byLevel: 2.
				AccountTree indent: (AccountSummary balanceReportMessageFor: 100) byLevel: 2.
			AccountTree indent: accountJorge name byLevel: 1.
				AccountTree indent: (AccountSummary summaryMessageForWithdrawValue: 30) byLevel: 2.
				AccountTree indent: (AccountSummary balanceReportMessageFor: -30) byLevel: 2.
			AccountTree indent: (AccountSummary balanceReportMessageFor: 70) byLevel: 1.
	} equals: tree.! !
!AccountReportTest methodsFor: 'tests -- account summary tree' stamp: 'VP 11/15/2020 12:53:03' prior: 50899203!
test18MultipleDepthLevelPortfolioSummaryTree

	| rootPortfolio tree |
	
	rootPortfolio := Portfolio named: 'Root Portfolio' with: accountEmily.
	rootPortfolio add: portfolioPadreDeCharlie.
	rootPortfolio add: accountJorge.
	
	tree := (AccountSummaryTree for: rootPortfolio) tree.
	
	self assertCollection: {
		'Root Portfolio'.
			AccountTree indent: accountEmily name byLevel: 1.
				AccountTree indent: (AccountSummary summaryMessageForDepositValue: 100) byLevel: 2.
				AccountTree indent: (AccountSummary balanceReportMessageFor: 100) byLevel: 2.
			AccountTree indent: portfolioPadreDeCharlie name byLevel: 1.
				AccountTree indent: accountCharlie name byLevel: 2.
					AccountTree indent: (AccountSummary summaryMessageForDepositValue: 60) byLevel: 3.
					AccountTree indent: (AccountSummary balanceReportMessageFor: 60) byLevel: 3.
				AccountTree indent: (AccountSummary balanceReportMessageFor: 60) byLevel: 2.
			AccountTree indent: accountJorge name byLevel: 1.
				AccountTree indent: (AccountSummary summaryMessageForWithdrawValue: 30) byLevel: 2.
				AccountTree indent: (AccountSummary balanceReportMessageFor: -30) byLevel: 2.
			AccountTree indent: (AccountSummary balanceReportMessageFor: 130) byLevel: 1.
	} equals: tree.! !

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:53:07'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:53:07'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:53:07'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:53:07'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:53:07'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:53:07'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:53:07'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:53:07'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:53:07'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:53:07'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:53:07'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:53:07'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:53:07'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:53:07'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:53:07'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:53:07'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:53:07'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:53:07'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:53:07'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:53:31'!
PASSED!

!testRun: #AccountReportTest #test01EmptyAccountSummary stamp: 'VP 11/15/2020 12:53:33'!
PASSED!

!testRun: #AccountReportTest #test02AccountWithSingleDepositSummary stamp: 'VP 11/15/2020 12:53:33'!
PASSED!

!testRun: #AccountReportTest #test03AccountWithSingleWithdrawSummary stamp: 'VP 11/15/2020 12:53:33'!
PASSED!

!testRun: #AccountReportTest #test04AccountWithSingleInboundTransferSummary stamp: 'VP 11/15/2020 12:53:33'!
PASSED!

!testRun: #AccountReportTest #test05AccountWithSingleOutboundTransferSummary stamp: 'VP 11/15/2020 12:53:33'!
PASSED!

!testRun: #AccountReportTest #test06PortfolioWithTransactionsSummary stamp: 'VP 11/15/2020 12:53:33'!
PASSED!

!testRun: #AccountReportTest #test07EmptyAcountTransferNetIsZero stamp: 'VP 11/15/2020 12:53:33'!
PASSED!

!testRun: #AccountReportTest #test08SingleTransferAccountWithPositiveTransferNet stamp: 'VP 11/15/2020 12:53:33'!
PASSED!

!testRun: #AccountReportTest #test09SingleTransferAccountWithNegativeTransferNet stamp: 'VP 11/15/2020 12:53:33'!
PASSED!

!testRun: #AccountReportTest #test10MultipleTransfersAccountTransferNet stamp: 'VP 11/15/2020 12:53:33'!
PASSED!

!testRun: #AccountReportTest #test11EmptyPortfolioTree stamp: 'VP 11/15/2020 12:53:33'!
PASSED!

!testRun: #AccountReportTest #test12SingleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:53:33'!
PASSED!

!testRun: #AccountReportTest #test13MultipleDepthLevelPortfolioTree stamp: 'VP 11/15/2020 12:53:33'!
PASSED!

!testRun: #AccountReportTest #test14UnnamedPortfolioInTreeHasDefaultName stamp: 'VP 11/15/2020 12:53:33'!
PASSED!

!testRun: #AccountReportTest #test15UnnamedAccountInTreeHasDefaultName stamp: 'VP 11/15/2020 12:53:33'!
PASSED!

!testRun: #AccountReportTest #test16EmptyPortfolioSummaryTree stamp: 'VP 11/15/2020 12:53:33'!
PASSED!

!testRun: #AccountReportTest #test17SingleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:53:33'!
PASSED!

!testRun: #AccountReportTest #test18MultipleDepthLevelPortfolioSummaryTree stamp: 'VP 11/15/2020 12:53:33'!
PASSED!

----SNAPSHOT----(15 November 2020 12:53:37) CuisUniversity-4384.image priorSource: 18052557!

----QUIT----(15 November 2020 12:53:56) CuisUniversity-4384.image priorSource: 18172571!