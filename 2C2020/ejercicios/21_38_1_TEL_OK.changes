

----STARTUP---- (29 October 2020 16:33:59) as /home/kali/exactas/ing1/cuis/CuisUniversity-4384.image!


Object subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'CJ 10/29/2020 16:35:51'!
Object subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'CJ 10/29/2020 16:35:58'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'CJ 10/29/2020 16:38:47'!
Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliTest methodsFor: 'nil' stamp: 'CJ 10/29/2020 16:38:35'!
test01
	
	| game |
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isOPlaying.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 16:38:59' prior: 50912125!
test01
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isOPlaying.! !

!testRun: #TerniLapilliTest #test01 stamp: 'CJ 10/29/2020 16:39:12'!
ERROR!

!testRun: #TerniLapilliTest #test01 stamp: 'CJ 10/29/2020 16:39:12'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 16:39:27'!
putXAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 16:39:31' prior: 50912143!
putXAt: aPoint! !

!testRun: #TerniLapilliTest #test01 stamp: 'CJ 10/29/2020 16:39:33'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/29/2020 16:39:48'!
isOPlaying
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/29/2020 16:39:53' prior: 50912154!
isOPlaying
	
	^true! !

!testRun: #TerniLapilliTest #test01 stamp: 'CJ 10/29/2020 16:39:54'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'CJ 10/29/2020 16:39:56'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 16:41:01'!
test02
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self deny: game isOPlaying.! !

!testRun: #TerniLapilliTest #test02 stamp: 'CJ 10/29/2020 16:41:08'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 16:41:19'!
putOAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 16:41:23' prior: 50912176!
putOAt: aPoint ! !

!testRun: #TerniLapilliTest #test02 stamp: 'CJ 10/29/2020 16:41:24'!
FAILURE!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'CJ 10/29/2020 16:42:18'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/29/2020 16:42:14' prior: 50912158!
isOPlaying
	
	^ currentPlayer = #O! !

!testRun: #TerniLapilliTest #test02 stamp: 'CJ 10/29/2020 16:42:32'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'CJ 10/29/2020 16:42:32'!
FAILURE!

!testRun: #TerniLapilliTest #test02 stamp: 'CJ 10/29/2020 16:42:32'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'CJ 10/29/2020 16:42:32'!
FAILURE!
!TerniLapilli methodsFor: 'nil' stamp: 'CJ 10/29/2020 16:43:07' overrides: 16896425!
initialize

	currentPlayer := #X! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 16:43:26' prior: 50912148!
putXAt: aPoint

	currentPlayer := #O! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 16:43:29' prior: 50912214!
putXAt: aPoint

	currentPlayer := #O.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 16:43:34' prior: 50912209 overrides: 16896425!
initialize

	currentPlayer := #X.! !

!testRun: #TerniLapilliTest #test01 stamp: 'CJ 10/29/2020 16:43:37'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'CJ 10/29/2020 16:43:40'!
PASSED!

!testRun: #TerniLapilliTest #test02 stamp: 'CJ 10/29/2020 16:43:40'!
FAILURE!

!testRun: #TerniLapilliTest #test02 stamp: 'CJ 10/29/2020 16:43:40'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 16:44:36' prior: 50912181!
putOAt: aPoint

	currentPlayer := #X.! !

!testRun: #TerniLapilliTest #test01 stamp: 'CJ 10/29/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test02 stamp: 'CJ 10/29/2020 16:44:38'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 16:45:14'!
test03
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putXAt: 0@1.
	
	self deny: game isOPlaying.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 16:47:03' prior: 50912247!
test03
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self
		should: [ game putXAt: 0@1. ]
		raise: Error.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 16:48:19' prior: 50912254!
test03
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self
		should: [ game putXAt: 0@1. self fail. ]
		raise: Error.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 16:49:16' prior: 50912262!
test03
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self
		should: [ game putXAt: 0@1. self fail. ]
		raise: Error
		description: ''! !

----End fileIn of /home/kali/exactas/ing1/ejercicios-isw1/16-MarsRover/MarsRover.st----!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 16:54:07' prior: 50912270!
test03
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self
		should: [ game putXAt: 0@1. self fail. ]
		raise: Error
		withMessageText: (TerniLapilli invalidTurnErrorDescription).! !

!testRun: #TerniLapilliTest #test03 stamp: 'CJ 10/29/2020 16:54:10'!
ERROR!
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/29/2020 16:54:44'!
invalidTurnErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/29/2020 16:55:25' prior: 50912910!
invalidTurnErrorDescription
	
	^ 'Invalid player for current turn'.! !

!testRun: #TerniLapilliTest #test03 stamp: 'CJ 10/29/2020 16:55:30'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 16:56:38' prior: 50912219!
putXAt: aPoint

	currentPlayer = #X
		ifFalse: [ self error: self class invalidTurnErrorDescription ].
		
	currentPlayer := #O.! !

!testRun: #TerniLapilliTest #test03 stamp: 'CJ 10/29/2020 16:56:42'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 16:57:00' prior: 50912898!
test03
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self
		should: [ game putXAt: 0@1. ]
		raise: Error
		withMessageText: (TerniLapilli invalidTurnErrorDescription).! !

!testRun: #TerniLapilliTest #test03 stamp: 'CJ 10/29/2020 16:57:02'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'CJ 10/29/2020 16:57:02'!
PASSED!

!testRun: #TerniLapilliTest #test02 stamp: 'CJ 10/29/2020 16:57:02'!
PASSED!

!testRun: #TerniLapilliTest #test03 stamp: 'CJ 10/29/2020 16:57:02'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 16:57:26'!
test01OPlaysAfterX
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isOPlaying.! !

!methodRemoval: TerniLapilliTest #test01 stamp: 'CJ 10/29/2020 16:57:26'!
test01
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isOPlaying.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 16:57:53'!
test02ODoesntPlayAfterO
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self deny: game isOPlaying.! !

!methodRemoval: TerniLapilliTest #test02 stamp: 'CJ 10/29/2020 16:57:53'!
test02
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self deny: game isOPlaying.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 16:58:24'!
test04PlayerCannotPlayWhenItsNotTheirTurn
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self
		should: [ game putXAt: 0@1. ]
		raise: Error
		withMessageText: (TerniLapilli invalidTurnErrorDescription).! !

!methodRemoval: TerniLapilliTest #test03 stamp: 'CJ 10/29/2020 16:58:24'!
test03
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self
		should: [ game putXAt: 0@1. ]
		raise: Error
		withMessageText: (TerniLapilli invalidTurnErrorDescription).!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 16:58:39'!
test03
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self deny: game isOPlaying.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 16:59:22' prior: 50912996!
test03
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self assert: game isXPlaying.! !

!testRun: #TerniLapilliTest #test03 stamp: 'CJ 10/29/2020 16:59:25'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/29/2020 16:59:40'!
isXPlaying
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/29/2020 16:59:50' prior: 50913012!
isXPlaying
	
	^ currentPlayer = #X.! !

!testRun: #TerniLapilliTest #test03 stamp: 'CJ 10/29/2020 16:59:52'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 16:59:52'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 16:59:52'!
PASSED!

!testRun: #TerniLapilliTest #test03 stamp: 'CJ 10/29/2020 16:59:52'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 16:59:52'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:00:18'!
test03XPlaysAfterO
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self assert: game isXPlaying.! !

!methodRemoval: TerniLapilliTest #test03 stamp: 'CJ 10/29/2020 17:00:23'!
test03
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self assert: game isXPlaying.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:06:45'!
test04XCannotPlayWhenItsNotTheirTurn
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self
		should: [ game putXAt: 0@1. ]
		raise: Error
		withMessageText: (TerniLapilli invalidTurnErrorDescription).! !

!methodRemoval: TerniLapilliTest #test04PlayerCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:06:45'!
test04PlayerCannotPlayWhenItsNotTheirTurn
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self
		should: [ game putXAt: 0@1. ]
		raise: Error
		withMessageText: (TerniLapilli invalidTurnErrorDescription).!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:07:19'!
test05OCannotPlayWhenItsNotTheirTurn
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self
		should: [ game putOAt: 0@2. ]
		raise: Error
		withMessageText: (TerniLapilli invalidTurnErrorDescription).! !

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:07:20'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:08:00' prior: 50912238!
putOAt: aPoint

	currentPlayer = #O
		ifFalse: [ self error: self class invalidTurnErrorDescription ].
	currentPlayer := #X.! !

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:08:04'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 17:08:04'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 17:08:04'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 17:08:04'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:08:04'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:08:04'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:08:32'!
test06
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self
		should: [ game putOAt: 0@2. ]
		raise: Error
		withMessageText: (TerniLapilli invalidTurnErrorDescription).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:09:06' prior: 50913109!
test06
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self
		should: [ game putOAt: 0@1. ]
		raise: Error
		withMessageText: (TerniLapilli invalidTurnErrorDescription).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:09:47' prior: 50913119!
test06
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self
		should: [ game putOAt: 0@1. ]
		raise: Error
		withMessageText: (TerniLapilli fullCellErrorDescription).! !

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/29/2020 17:09:50'!
ERROR!
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/29/2020 17:09:59'!
fullCellErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/29/2020 17:10:16' prior: 50913141!
fullCellErrorDescription

	^ 'Must place on an empty cell'.
	! !

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/29/2020 17:10:17'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:10:26' prior: 50913129!
test06
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self
		should: [ game putXAt: 0@1. ]
		raise: Error
		withMessageText: (TerniLapilli fullCellErrorDescription).! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/29/2020 17:11:17'!
cellMustBeEmptyErrorDescription
	
	^ 'Invalid player for current turn'.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:11:17' prior: 50912923!
putXAt: aPoint

	currentPlayer = #X
		ifFalse: [ self error: self class cellMustBeEmptyErrorDescription ].
		
	currentPlayer := #O.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:11:17' prior: 50913069!
test05OCannotPlayWhenItsNotTheirTurn
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self
		should: [ game putOAt: 0@2. ]
		raise: Error
		withMessageText: (TerniLapilli cellMustBeEmptyErrorDescription).! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:11:17' prior: 50913083!
putOAt: aPoint

	currentPlayer = #O
		ifFalse: [ self error: self class cellMustBeEmptyErrorDescription ].
	currentPlayer := #X.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:11:17' prior: 50913049!
test04XCannotPlayWhenItsNotTheirTurn
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self
		should: [ game putXAt: 0@1. ]
		raise: Error
		withMessageText: (TerniLapilli cellMustBeEmptyErrorDescription).! !

!methodRemoval: TerniLapilli class #invalidTurnErrorDescription stamp: 'CJ 10/29/2020 17:11:17'!
invalidTurnErrorDescription
	
	^ 'Invalid player for current turn'.!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 17:11:19'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 17:11:19'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 17:11:19'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:11:19'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:11:19'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/29/2020 17:11:19'!
FAILURE!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/29/2020 17:11:19'!
FAILURE!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'CJ 10/29/2020 17:21:01'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer fullCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:20:57' prior: 50913169!
putXAt: aPoint

	currentPlayer = #X
		ifFalse: [ self error: self class cellMustBeEmptyErrorDescription ].
	
	fullCells add: aPoint.		
	currentPlayer := #O.! !

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/29/2020 17:21:18'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 17:21:21'!
ERROR!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 17:21:21'!
ERROR!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 17:21:21'!
ERROR!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:21:21'!
ERROR!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:21:21'!
ERROR!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/29/2020 17:21:21'!
ERROR!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 17:21:24'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:22:12' prior: 50912224 overrides: 16896425!
initialize

	currentPlayer := #X.
	fullCells := OrderedCollection new.! !

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 17:22:14'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 17:22:29'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 17:22:30'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:22:31'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:22:31'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/29/2020 17:22:32'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:24:05' prior: 50913240!
putXAt: aPoint

	currentPlayer = #X
		ifFalse: [ self error: self class cellMustBeEmptyErrorDescription ].
	(fullCells includes: aPoint)
		ifTrue: [ self error: self class fullCellErrorDescription ].
	
	fullCells add: aPoint.		
	currentPlayer := #O.! !

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/29/2020 17:24:42'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 17:24:46'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 17:24:46'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 17:24:46'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:24:46'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:24:46'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/29/2020 17:24:46'!
FAILURE!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/29/2020 17:24:46'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:25:57' prior: 50913188!
putOAt: aPoint

	currentPlayer = #O
		ifFalse: [ self error: self class cellMustBeEmptyErrorDescription ].
	(fullCells includes: aPoint)
		ifTrue: [ self error: self class fullCellErrorDescription ].
		
	currentPlayer := #X.! !

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 17:25:59'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 17:25:59'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 17:25:59'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:25:59'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:25:59'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/29/2020 17:25:59'!
FAILURE!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/29/2020 17:25:59'!
FAILURE!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 17:26:23'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 17:26:23'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 17:26:23'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:26:23'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:26:23'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/29/2020 17:26:23'!
FAILURE!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/29/2020 17:26:23'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:28:09' prior: 50913330!
putOAt: aPoint

	currentPlayer = #O
		ifFalse: [ self error: self class cellMustBeEmptyErrorDescription ].
	(fullCells includes: aPoint)
		ifTrue: [ self error: self class fullCellErrorDescription ].
		
	currentPlayer := #X.
	fullCells add: aPoint.! !

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/29/2020 17:28:10'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 17:28:12'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 17:28:12'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 17:28:12'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:28:12'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:28:12'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/29/2020 17:28:12'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:29:56'!
test06CannotPlayOnFullCell
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self
		should: [ game putXAt: 0@1. ]
		raise: Error
		withMessageText: (TerniLapilli fullCellErrorDescription).! !

!methodRemoval: TerniLapilliTest #test06 stamp: 'CJ 10/29/2020 17:29:56'!
test06
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self
		should: [ game putXAt: 0@1. ]
		raise: Error
		withMessageText: (TerniLapilli fullCellErrorDescription).!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:30:59'!
test00
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isOPlaying.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:31:08' prior: 50913431!
test00
	
	| game |
	
	game := TerniLapilli new.
	
	self assert: game isXPlaying.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:31:47' prior: 50913438!
test00
	
	| game |
	
	game := TerniLapilli new.
	
	self assert: game isXPlaying.
	self assert: (game hasStarted not).! !

!testRun: #TerniLapilliTest #test00 stamp: 'CJ 10/29/2020 17:31:50'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/29/2020 17:32:06'!
hasStarted
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/29/2020 17:32:10' prior: 50913453!
hasStarted
	
	^ false! !

!testRun: #TerniLapilliTest #test00 stamp: 'CJ 10/29/2020 17:32:13'!
PASSED!

!testRun: #TerniLapilliTest #test00 stamp: 'CJ 10/29/2020 17:32:13'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 17:32:13'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 17:32:13'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 17:32:13'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:32:13'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:32:13'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 17:32:13'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:32:27' prior: 50912952!
test01OPlaysAfterX
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isOPlaying.
	self assert: game hasStarted.! !

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 17:32:28'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:32:43' prior: 50913444!
test00
	
	| game |
	
	game := TerniLapilli new.
	
	self assert: game isXPlaying.
	self deny: game hasStarted.! !

!testRun: #TerniLapilliTest #test00 stamp: 'CJ 10/29/2020 17:32:44'!
PASSED!

!testRun: #TerniLapilliTest #test00 stamp: 'CJ 10/29/2020 17:32:44'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 17:32:44'!
FAILURE!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 17:32:44'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 17:32:44'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:32:44'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:32:44'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 17:32:44'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 17:32:44'!
FAILURE!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'CJ 10/29/2020 17:33:22'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer fullCells started'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:33:16' prior: 50913296!
putXAt: aPoint

	started := true.

	currentPlayer = #X
		ifFalse: [ self error: self class cellMustBeEmptyErrorDescription ].
	(fullCells includes: aPoint)
		ifTrue: [ self error: self class fullCellErrorDescription ].
	
	fullCells add: aPoint.		
	currentPlayer := #O.! !
!TerniLapilli methodsFor: 'initialization' stamp: 'CJ 10/29/2020 17:33:47' prior: 50913272 overrides: 16896425!
initialize

	currentPlayer := #X.
	fullCells := OrderedCollection new.
	started := false.! !

!testRun: #TerniLapilliTest #test00 stamp: 'CJ 10/29/2020 17:33:49'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 17:33:49'!
FAILURE!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 17:33:49'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 17:33:49'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:33:49'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:33:49'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 17:33:49'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 17:33:49'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/29/2020 17:34:08' prior: 50913457!
hasStarted
	
	^ started.! !

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 17:34:12'!
PASSED!

!testRun: #TerniLapilliTest #test00 stamp: 'CJ 10/29/2020 17:34:13'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 17:34:13'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 17:34:13'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 17:34:13'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:34:13'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:34:13'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 17:34:13'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:34:28'!
test00GameStartsProperly
	
	| game |
	
	game := TerniLapilli new.
	
	self assert: game isXPlaying.
	self deny: game hasStarted.! !

!methodRemoval: TerniLapilliTest #test00 stamp: 'CJ 10/29/2020 17:34:28'!
test00
	
	| game |
	
	game := TerniLapilli new.
	
	self assert: game isXPlaying.
	self deny: game hasStarted.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:34:44'!
test07
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self
		should: [ game putXAt: 0@1. ]
		raise: Error
		withMessageText: (TerniLapilli fullCellErrorDescription).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:35:06' prior: 50913620!
test07
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self
		should: [ game putXAt: 0@3. ]
		raise: Error
		withMessageText: (TerniLapilli invalidCellErrorDescription).! !

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/29/2020 17:35:10'!
ERROR!
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/29/2020 17:35:21'!
invalidCellErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/29/2020 17:35:28' prior: 50913642!
invalidCellErrorDescription
	
	^ 'Invalid cell'! !

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/29/2020 17:35:29'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:36:58' prior: 50913537!
putXAt: aPoint

	started := true.

	currentPlayer = #X
		ifFalse: [ self error: self class cellMustBeEmptyErrorDescription ].
	(fullCells includes: aPoint)
		ifTrue: [ self error: self class fullCellErrorDescription ].
	aPoint = 0@3
		ifTrue: [ self error: self class invalidCellErrorDescription ].
	
	fullCells add: aPoint.		
	currentPlayer := #O.! !

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/29/2020 17:37:02'!
PASSED!

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 17:37:02'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 17:37:02'!
ERROR!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 17:37:02'!
ERROR!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 17:37:02'!
ERROR!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:37:02'!
ERROR!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:37:02'!
ERROR!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 17:37:02'!
ERROR!

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/29/2020 17:37:02'!
ERROR!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 17:37:07'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:37:28' prior: 50913655!
putXAt: aPoint

	started := true.

	currentPlayer = #X
		ifFalse: [ self error: self class cellMustBeEmptyErrorDescription ].
	(fullCells includes: aPoint)
		ifTrue: [ self error: self class fullCellErrorDescription ].
	(aPoint = 0@3)
		ifTrue: [ self error: self class invalidCellErrorDescription ].
	
	fullCells add: aPoint.		
	currentPlayer := #O.! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 17:37:30'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 17:37:30'!
ERROR!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 17:37:30'!
ERROR!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 17:37:30'!
ERROR!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:37:30'!
ERROR!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:37:30'!
ERROR!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 17:37:30'!
ERROR!

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/29/2020 17:37:30'!
ERROR!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 17:37:32'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:37:43' prior: 50913698!
putXAt: aPoint

	started := true.

	currentPlayer = #X
		ifFalse: [ self error: self class cellMustBeEmptyErrorDescription ].
	(fullCells includes: aPoint)
		ifTrue: [ self error: self class fullCellErrorDescription ].
	(aPoint = (0@3))
		ifTrue: [ self error: self class invalidCellErrorDescription ].
	
	fullCells add: aPoint.		
	currentPlayer := #O.! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 17:37:47'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 17:37:47'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 17:37:47'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 17:37:47'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:37:47'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:37:47'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 17:37:47'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/29/2020 17:37:47'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:37:57'!
test08
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self
		should: [ game putXAt: 0@3. ]
		raise: Error
		withMessageText: (TerniLapilli invalidCellErrorDescription).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:38:07' prior: 50913777!
test08
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self
		should: [ game putXAt: 0@-1. ]
		raise: Error
		withMessageText: (TerniLapilli invalidCellErrorDescription).! !

!testRun: #TerniLapilliTest #test08 stamp: 'CJ 10/29/2020 17:38:11'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:38:44' prior: 50913739!
putXAt: aPoint

	started := true.

	currentPlayer = #X
		ifFalse: [ self error: self class cellMustBeEmptyErrorDescription ].
	(fullCells includes: aPoint)
		ifTrue: [ self error: self class fullCellErrorDescription ].
	(aPoint = (0@3) or: [ aPoint = (0@-1) ])
		ifTrue: [ self error: self class invalidCellErrorDescription ].
	
	fullCells add: aPoint.		
	currentPlayer := #O.! !

!testRun: #TerniLapilliTest #test08 stamp: 'CJ 10/29/2020 17:38:50'!
PASSED!

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 17:38:50'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 17:38:50'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 17:38:50'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 17:38:50'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:38:50'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:38:50'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 17:38:50'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/29/2020 17:38:50'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'CJ 10/29/2020 17:38:50'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:38:58'!
test09
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self
		should: [ game putXAt: 0@-1. ]
		raise: Error
		withMessageText: (TerniLapilli invalidCellErrorDescription).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:39:05' prior: 50913844!
test09
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self
		should: [ game putXAt: -1@0. ]
		raise: Error
		withMessageText: (TerniLapilli invalidCellErrorDescription).! !

!testRun: #TerniLapilliTest #test09 stamp: 'CJ 10/29/2020 17:39:09'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:40:11' prior: 50913800!
putXAt: aPoint

	started := true.

	currentPlayer = #X
		ifFalse: [ self error: self class cellMustBeEmptyErrorDescription ].
	(fullCells includes: aPoint)
		ifTrue: [ self error: self class fullCellErrorDescription ].
	(aPoint = (0@3) or: [ aPoint = (0@-1) ] or: [ aPoint = (-1@0) ])
		ifTrue: [ self error: self class invalidCellErrorDescription ].
	
	fullCells add: aPoint.		
	currentPlayer := #O.! !

!testRun: #TerniLapilliTest #test09 stamp: 'CJ 10/29/2020 17:40:14'!
PASSED!

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 17:40:14'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 17:40:14'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 17:40:14'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 17:40:14'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:40:14'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:40:14'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 17:40:14'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/29/2020 17:40:14'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'CJ 10/29/2020 17:40:14'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'CJ 10/29/2020 17:40:14'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:40:37'!
test10
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self
		should: [ game putXAt: 3@0. ]
		raise: Error
		withMessageText: (TerniLapilli invalidCellErrorDescription).! !

!testRun: #TerniLapilliTest #test10 stamp: 'CJ 10/29/2020 17:40:40'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:41:08' prior: 50913867!
putXAt: aPoint

	started := true.

	currentPlayer = #X
		ifFalse: [ self error: self class cellMustBeEmptyErrorDescription ].
	(fullCells includes: aPoint)
		ifTrue: [ self error: self class fullCellErrorDescription ].
	(aPoint = (0@3) or: [ aPoint = (0@-1) ] or: [ aPoint = (-1@0) ] or: [ aPoint = (3@0) ])
		ifTrue: [ self error: self class invalidCellErrorDescription ].
	
	fullCells add: aPoint.		
	currentPlayer := #O.! !

!testRun: #TerniLapilliTest #test10 stamp: 'CJ 10/29/2020 17:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 17:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 17:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 17:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 17:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 17:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/29/2020 17:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'CJ 10/29/2020 17:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'CJ 10/29/2020 17:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'CJ 10/29/2020 17:41:16'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:42:34' prior: 50913927!
putXAt: aPoint

	started := true.

	currentPlayer = #X
		ifFalse: [ self error: self class cellMustBeEmptyErrorDescription ].
	(fullCells includes: aPoint)
		ifTrue: [ self error: self class fullCellErrorDescription ].
	(aPoint x < 0 or: [aPoint x > 2] or: [aPoint y < 0] or: [aPoint y > 2])
		ifTrue: [ self error: self class invalidCellErrorDescription ].
	
	fullCells add: aPoint.		
	currentPlayer := #O.! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 17:42:35'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 17:42:35'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 17:42:35'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 17:42:35'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:42:35'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:42:35'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 17:42:35'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/29/2020 17:42:35'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'CJ 10/29/2020 17:42:35'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'CJ 10/29/2020 17:42:35'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'CJ 10/29/2020 17:42:35'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:43:05' prior: 50913381!
putOAt: cellToPlayOn

	currentPlayer = #O
		ifFalse: [ self error: self class cellMustBeEmptyErrorDescription ].
	(fullCells includes: cellToPlayOn)
		ifTrue: [ self error: self class fullCellErrorDescription ].
		
	currentPlayer := #X.
	fullCells add: cellToPlayOn.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:43:14' prior: 50913977!
putXAt: cellToPlayOn

	started := true.

	currentPlayer = #X
		ifFalse: [ self error: self class cellMustBeEmptyErrorDescription ].
	(fullCells includes: cellToPlayOn)
		ifTrue: [ self error: self class fullCellErrorDescription ].
	(cellToPlayOn x < 0 or: [cellToPlayOn x > 2] or: [cellToPlayOn y < 0] or: [cellToPlayOn y > 2])
		ifTrue: [ self error: self class invalidCellErrorDescription ].
	
	fullCells add: cellToPlayOn.		
	currentPlayer := #O.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:43:26' prior: 50914025!
putOAt: cellToPlayOn

	currentPlayer = #O
		ifFalse: [ self error: self class cellMustBeEmptyErrorDescription ].
	(fullCells includes: cellToPlayOn)
		ifTrue: [ self error: self class fullCellErrorDescription ].
	(cellToPlayOn x < 0 or: [cellToPlayOn x > 2] or: [cellToPlayOn y < 0] or: [cellToPlayOn y > 2])
		ifTrue: [ self error: self class invalidCellErrorDescription ].
		
	currentPlayer := #X.
	fullCells add: cellToPlayOn.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:43:54' prior: 50914055!
putOAt: cellToPlayOn

	currentPlayer = #O
		ifFalse: [ self error: self class cellMustBeEmptyErrorDescription ].
	(fullCells includes: cellToPlayOn)
		ifTrue: [ self error: self class fullCellErrorDescription ].
	(cellToPlayOn x < 0 or: [cellToPlayOn x > 2] or: [cellToPlayOn y < 0] or: [cellToPlayOn y > 2])
		ifTrue: [ self error: self class invalidCellErrorDescription ].
		
	fullCells add: cellToPlayOn.
	currentPlayer := #X.! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 17:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 17:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 17:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 17:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 17:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/29/2020 17:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'CJ 10/29/2020 17:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'CJ 10/29/2020 17:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'CJ 10/29/2020 17:43:55'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:44:29'!
test07RowCannotExceed2
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self
		should: [ game putXAt: 0@3. ]
		raise: Error
		withMessageText: (TerniLapilli invalidCellErrorDescription).! !

!methodRemoval: TerniLapilliTest #test07 stamp: 'CJ 10/29/2020 17:44:29'!
test07
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self
		should: [ game putXAt: 0@3. ]
		raise: Error
		withMessageText: (TerniLapilli invalidCellErrorDescription).!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:44:47'!
test08RowCannotBeLessThan0
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self
		should: [ game putXAt: 0@-1. ]
		raise: Error
		withMessageText: (TerniLapilli invalidCellErrorDescription).! !

!methodRemoval: TerniLapilliTest #test08 stamp: 'CJ 10/29/2020 17:44:47'!
test08
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self
		should: [ game putXAt: 0@-1. ]
		raise: Error
		withMessageText: (TerniLapilli invalidCellErrorDescription).!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:45:01'!
test09ColumnCannotBeLessThan0
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self
		should: [ game putXAt: -1@0. ]
		raise: Error
		withMessageText: (TerniLapilli invalidCellErrorDescription).! !

!methodRemoval: TerniLapilliTest #test09 stamp: 'CJ 10/29/2020 17:45:01'!
test09
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self
		should: [ game putXAt: -1@0. ]
		raise: Error
		withMessageText: (TerniLapilli invalidCellErrorDescription).!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:45:10'!
test10ColumnCannotExceed2
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self
		should: [ game putXAt: 3@0. ]
		raise: Error
		withMessageText: (TerniLapilli invalidCellErrorDescription).! !

!methodRemoval: TerniLapilliTest #test10 stamp: 'CJ 10/29/2020 17:45:10'!
test10
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self
		should: [ game putXAt: 3@0. ]
		raise: Error
		withMessageText: (TerniLapilli invalidCellErrorDescription).!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:49:12' prior: 50913607!
test00GameStartsProperly
	
	| game |
	
	game := TerniLapilli new.
	
	self assert: game isXPlaying.
	self deny: game hasStarted.
	self deny: game isOver.
	self deny: game hasPlayerXWon.
	self deny: game hasPlayerOWon.! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 17:49:16'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/29/2020 17:49:27'!
isOver
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/29/2020 17:49:31' prior: 50914209!
isOver
	
	^ false! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 17:49:34'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/29/2020 17:49:45'!
hasPlayerXWon
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/29/2020 17:49:51' prior: 50914219!
hasPlayerXWon
	
	^ false! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 17:50:06'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/29/2020 17:50:14'!
hasPlayerOWon
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/29/2020 17:50:18' prior: 50914230!
hasPlayerOWon
	
	^ false! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 17:50:20'!
PASSED!

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 17:50:20'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 17:50:20'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 17:50:20'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 17:50:20'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:50:20'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:50:20'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 17:50:20'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 17:50:20'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 17:50:20'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 17:50:20'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 17:50:20'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 17:52:41'!
test11
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	
	self assert: game isOPlaying.! !

!testRun: #TerniLapilliTest #test11 stamp: 'CJ 10/29/2020 17:52:42'!
PASSED!

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 17:52:42'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 17:52:42'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 17:52:42'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 17:52:42'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:52:42'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 17:52:42'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 17:52:42'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 17:52:42'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 17:52:42'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 17:52:42'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 17:52:42'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'CJ 10/29/2020 17:52:42'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:02:19' prior: 50914276!
test11
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	self assert: game isOPlaying.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:03:39' prior: 50914323!
test11
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	game putXAt: 2@0.
	
	self assert: game isOPlaying.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:04:00' prior: 50914333!
test11
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	self
		should: [ game putXAt: 2@0. ]
		raise: Error
		withMessageText: (TerniLapilli invalidCellErrorDescription).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:05:02' prior: 50914343!
test11
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	self
		should: [ game putXAt: 2@0. ]
		raise: Error
		withMessageText: (TerniLapilli allPiecesPlacedErrorDescription).! !

!testRun: #TerniLapilliTest #test11 stamp: 'CJ 10/29/2020 18:05:10'!
ERROR!
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/29/2020 18:05:25'!
allPiecesPlacedErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/29/2020 18:05:48' prior: 50914370!
allPiecesPlacedErrorDescription
	
	^ 'Cannot place any more pieces.'! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/29/2020 18:05:51' prior: 50914375!
allPiecesPlacedErrorDescription
	
	^ 'Cannot place any more pieces'! !

!testRun: #TerniLapilliTest #test11 stamp: 'CJ 10/29/2020 18:05:54'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:07:02' prior: 50914197!
test00GameStartsProperly
	
	| game |
	
	game := TerniLapilli new.
	
	self assert: game isXPlaying.
	self deny: game isOPlaying.
	self deny: game hasStarted.
	self deny: game isOver.
	self deny: game hasPlayerXWon.
	self deny: game hasPlayerOWon.! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 18:07:04'!
PASSED!

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 18:07:04'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 18:07:04'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 18:07:04'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 18:07:04'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:07:04'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:07:04'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 18:07:04'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 18:07:04'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:07:04'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:07:04'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 18:07:04'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'CJ 10/29/2020 18:07:04'!
FAILURE!

!testRun: #TerniLapilliTest #test11 stamp: 'CJ 10/29/2020 18:07:04'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:07:28' prior: 50913485!
test01OPlaysAfterX
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self assert: game isOPlaying.
	self deny: game isXPlaying.
	self assert: game hasStarted.! !

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 18:07:30'!
PASSED!

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 18:07:30'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 18:07:30'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 18:07:30'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 18:07:30'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:07:30'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:07:30'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 18:07:30'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 18:07:30'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:07:30'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:07:30'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 18:07:30'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'CJ 10/29/2020 18:07:30'!
FAILURE!

!testRun: #TerniLapilliTest #test11 stamp: 'CJ 10/29/2020 18:07:30'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:08:35' prior: 50913196!
test04XCannotPlayWhenItsNotTheirTurn
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self
		should: [ game putXAt: 0@1. ]
		raise: Error
		withMessageText: (TerniLapilli notPlayerTurnErrorDescription).! !

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:08:38'!
ERROR!
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/29/2020 18:08:53'!
notPlayerTurnErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/29/2020 18:09:21' prior: 50914506!
notPlayerTurnErrorDescription
	
	^ 'It is not this player''s turn'! !

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:09:23'!
FAILURE!
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/29/2020 18:10:19' prior: 50913146!
fullCellErrorDescription

	^ 'Invalid player for current turn'.
	! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/29/2020 18:10:27' prior: 50913163!
cellMustBeEmptyErrorDescription
	
	^ 'Must place on an empty cell'.! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/29/2020 18:10:46' prior: 50914511!
notPlayerTurnErrorDescription
	
	^ 'Invalid player for current turn'.! !

!methodRemoval: TerniLapilli class #fullCellErrorDescription stamp: 'CJ 10/29/2020 18:10:55'!
fullCellErrorDescription

	^ 'Invalid player for current turn'.
	!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:11:17' prior: 50914072!
putOAt: cellToPlayOn

	currentPlayer = #O
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	(fullCells includes: cellToPlayOn)
		ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
	(cellToPlayOn x < 0 or: [cellToPlayOn x > 2] or: [cellToPlayOn y < 0] or: [cellToPlayOn y > 2])
		ifTrue: [ self error: self class invalidCellErrorDescription ].
		
	fullCells add: cellToPlayOn.
	currentPlayer := #X.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:11:37' prior: 50914037!
putXAt: cellToPlayOn

	started := true.

	currentPlayer = #X
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	(fullCells includes: cellToPlayOn)
		ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
	(cellToPlayOn x < 0 or: [cellToPlayOn x > 2] or: [cellToPlayOn y < 0] or: [cellToPlayOn y > 2])
		ifTrue: [ self error: self class invalidCellErrorDescription ].
	
	fullCells add: cellToPlayOn.		
	currentPlayer := #O.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:12:25' prior: 50913412!
test06CannotPlayOnFullCell
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self
		should: [ game putXAt: 0@1. ]
		raise: Error
		withMessageText: (TerniLapilli cellMustBeEmptyErrorDescription).! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:12:28'!
FAILURE!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 18:12:28'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'CJ 10/29/2020 18:12:28'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:12:39' prior: 50913177!
test05OCannotPlayWhenItsNotTheirTurn
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self
		should: [ game putOAt: 0@2. ]
		raise: Error
		withMessageText: (TerniLapilli notPlayerTurnErrorDescription).! !

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:12:41'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:13:01' prior: 50914543!
putOAt: cellToPlayOn

	self isOPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	(fullCells includes: cellToPlayOn)
		ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
	(cellToPlayOn x < 0 or: [cellToPlayOn x > 2] or: [cellToPlayOn y < 0] or: [cellToPlayOn y > 2])
		ifTrue: [ self error: self class invalidCellErrorDescription ].
		
	fullCells add: cellToPlayOn.
	currentPlayer := #X.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:13:22' prior: 50914560!
putXAt: cellToPlayOn

	started := true.

	self isXPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	(fullCells includes: cellToPlayOn)
		ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
	(cellToPlayOn x < 0 or: [cellToPlayOn x > 2] or: [cellToPlayOn y < 0] or: [cellToPlayOn y > 2])
		ifTrue: [ self error: self class invalidCellErrorDescription ].
	
	fullCells add: cellToPlayOn.		
	currentPlayer := #O.! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 18:13:23'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 18:13:23'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 18:13:23'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 18:13:23'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:13:23'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:13:23'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 18:13:23'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 18:13:23'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:13:23'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:13:23'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 18:13:23'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'CJ 10/29/2020 18:13:23'!
FAILURE!

!testRun: #TerniLapilliTest #test11 stamp: 'CJ 10/29/2020 18:13:23'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:16:06' prior: 50914639!
putOAt: cellToPlayOn

	self isOPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	(fullCells includes: cellToPlayOn)
		ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
	(cellToPlayOn x < 0 or: [cellToPlayOn x > 2] or: [cellToPlayOn y < 0] or: [cellToPlayOn y > 2])
		ifTrue: [ self error: self class invalidCellErrorDescription ].
	(fullCells size >= 6)
		ifTrue: [ self error: self class allPiecesPlacedErrorDescription ].
		
	fullCells add: cellToPlayOn.
	currentPlayer := #X.! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 18:16:08'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 18:16:08'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 18:16:08'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 18:16:08'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:16:08'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:16:08'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 18:16:08'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 18:16:08'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:16:08'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:16:08'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 18:16:08'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'CJ 10/29/2020 18:16:08'!
FAILURE!

!testRun: #TerniLapilliTest #test11 stamp: 'CJ 10/29/2020 18:16:08'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:16:29' prior: 50914656!
putXAt: cellToPlayOn

	started := true.

	self isXPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	(fullCells includes: cellToPlayOn)
		ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
	(cellToPlayOn x < 0 or: [cellToPlayOn x > 2] or: [cellToPlayOn y < 0] or: [cellToPlayOn y > 2])
		ifTrue: [ self error: self class invalidCellErrorDescription ].
	(fullCells size >= 6)
		ifTrue: [ self error: self class allPiecesPlacedErrorDescription ].
	
	fullCells add: cellToPlayOn.		
	currentPlayer := #O.! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 18:16:38'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 18:16:38'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 18:16:38'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 18:16:38'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:16:38'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:16:38'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 18:16:38'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 18:16:38'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:16:38'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:16:38'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 18:16:38'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'CJ 10/29/2020 18:16:38'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:18:05'!
test12
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	game moveRight: 1@1.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:19:18' prior: 50914827!
test12
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	game moveXRight: 1@1.
	
	self assert: (game hasXAt: 1@1).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:21:27' prior: 50914837!
test12
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	game moveXRight: 1@1.
	
	self assert: (game hasXAt: 2@1).
	self deny: (game hasXAt: 1@1).! !

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/29/2020 18:21:29'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:21:38'!
moveXRight: aPoint 
	self shouldBeImplemented.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:22:22' prior: 50914848!
test12
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	game moveXRight: 1@1.
	
	self assert: game isOPlaying.! !

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/29/2020 18:22:28'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:23:01' prior: 50914862!
moveXRight: aPoint 
	
	currentPlayer := #O.! !

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/29/2020 18:23:03'!
PASSED!

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 18:23:03'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 18:23:03'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 18:23:03'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 18:23:03'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:23:03'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:23:03'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 18:23:03'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 18:23:03'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:23:03'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:23:03'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 18:23:03'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'CJ 10/29/2020 18:23:03'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/29/2020 18:23:03'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:23:46'!
test13
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	game moveXRight: 1@1.
	game moveORight: 1@0.
	
	self assert: game isOPlaying.! !

!testRun: #TerniLapilliTest #test13 stamp: 'CJ 10/29/2020 18:23:51'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:24:08'!
moveORight: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:24:17' prior: 50914939!
moveORight: aPoint 
	
	currentPlayer := #X.! !

!testRun: #TerniLapilliTest #test13 stamp: 'CJ 10/29/2020 18:24:19'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:24:25' prior: 50914926!
test13
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	game moveXRight: 1@1.
	game moveORight: 1@0.
	
	self assert: game isXPlaying.! !

!testRun: #TerniLapilliTest #test13 stamp: 'CJ 10/29/2020 18:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 18:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 18:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 18:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 18:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 18:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 18:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 18:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'CJ 10/29/2020 18:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/29/2020 18:24:26'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'CJ 10/29/2020 18:24:26'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:25:47'!
test14
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	game moveXRight: 1@1.
	game moveORight: 1@0.
	
	self
		should: [ game moveORight: 1@2. ]
		raise: Error
		withMessageText: (TerniLapilli notPlayerTurnErrorDescription).! !

!testRun: #TerniLapilliTest #test14 stamp: 'CJ 10/29/2020 18:27:12'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:27:49' prior: 50914944!
moveORight: aPoint 
	
	self isXPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
		
	currentPlayer := #X.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:27:55' prior: 50915023!
moveORight: aPoint 
	
	self isOPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
		
	currentPlayer := #X.! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 18:28:01'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 18:28:01'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 18:28:01'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 18:28:01'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:28:01'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:28:01'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 18:28:01'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 18:28:01'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:28:01'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:28:01'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 18:28:01'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'CJ 10/29/2020 18:28:01'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/29/2020 18:28:01'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'CJ 10/29/2020 18:28:01'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'CJ 10/29/2020 18:28:01'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:28:36' prior: 50914880!
moveXRight: aPoint 

	self isXPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	
	currentPlayer := #O.! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 18:28:38'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 18:28:38'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 18:28:38'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 18:28:38'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:28:38'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:28:38'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 18:28:38'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 18:28:38'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:28:38'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:28:38'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 18:28:38'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'CJ 10/29/2020 18:28:38'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/29/2020 18:28:38'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'CJ 10/29/2020 18:28:38'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'CJ 10/29/2020 18:28:38'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:29:08'!
test11CannotPlacePiecesWhenAllHaveBeenPlaced
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	self
		should: [ game putXAt: 2@0. ]
		raise: Error
		withMessageText: (TerniLapilli allPiecesPlacedErrorDescription).! !

!methodRemoval: TerniLapilliTest #test11 stamp: 'CJ 10/29/2020 18:29:08'!
test11
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	self
		should: [ game putXAt: 2@0. ]
		raise: Error
		withMessageText: (TerniLapilli allPiecesPlacedErrorDescription).!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:29:36'!
test12MovingXChangesTurnToO
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	game moveXRight: 1@1.
	
	self assert: game isOPlaying.! !

!methodRemoval: TerniLapilliTest #test12 stamp: 'CJ 10/29/2020 18:29:36'!
test12
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	game moveXRight: 1@1.
	
	self assert: game isOPlaying.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:29:52'!
test13MovingOChangesTurnToX
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	game moveXRight: 1@1.
	game moveORight: 1@0.
	
	self assert: game isXPlaying.! !

!methodRemoval: TerniLapilliTest #test13 stamp: 'CJ 10/29/2020 18:29:52'!
test13
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	game moveXRight: 1@1.
	game moveORight: 1@0.
	
	self assert: game isXPlaying.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:30:15'!
test14CannotMoveWhenItsNotTheirTurn
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	game moveXRight: 1@1.
	game moveORight: 1@0.
	
	self
		should: [ game moveORight: 1@2. ]
		raise: Error
		withMessageText: (TerniLapilli notPlayerTurnErrorDescription).! !

!methodRemoval: TerniLapilliTest #test14 stamp: 'CJ 10/29/2020 18:30:15'!
test14
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	game moveXRight: 1@1.
	game moveORight: 1@0.
	
	self
		should: [ game moveORight: 1@2. ]
		raise: Error
		withMessageText: (TerniLapilli notPlayerTurnErrorDescription).!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:30:26'!
test04XCannotPutWhenItsNotTheirTurn
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self
		should: [ game putXAt: 0@1. ]
		raise: Error
		withMessageText: (TerniLapilli notPlayerTurnErrorDescription).! !

!methodRemoval: TerniLapilliTest #test04XCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:30:26'!
test04XCannotPlayWhenItsNotTheirTurn
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	
	self
		should: [ game putXAt: 0@1. ]
		raise: Error
		withMessageText: (TerniLapilli notPlayerTurnErrorDescription).!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:30:33'!
test05OCannotPutWhenItsNotTheirTurn
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self
		should: [ game putOAt: 0@2. ]
		raise: Error
		withMessageText: (TerniLapilli notPlayerTurnErrorDescription).! !

!methodRemoval: TerniLapilliTest #test05OCannotPlayWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:30:33'!
test05OCannotPlayWhenItsNotTheirTurn
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self
		should: [ game putOAt: 0@2. ]
		raise: Error
		withMessageText: (TerniLapilli notPlayerTurnErrorDescription).!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:32:19' prior: 50915158!
test12MovingXChangesTurnToO
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	game moveXFrom: 1@1 to: 2@1.
	
	self assert: game isOPlaying.! !

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 18:32:26'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:32:36'!
moveXFrom: aPoint to: aPoint2 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:33:19' prior: 50915284!
moveXFrom: startCell to: endCell

	self isXPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	
	currentPlayer := #O.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:33:43' prior: 50915289!
moveXFrom: startCell to: endCell

	| cellToPlayOn |
	self isXPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	(cellToPlayOn x < 0 or: [cellToPlayOn x > 2] or: [cellToPlayOn y < 0] or: [cellToPlayOn y > 2])
		ifTrue: [ self error: self class invalidCellErrorDescription ].
	
	currentPlayer := #O.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:34:14' prior: 50915297!
moveXFrom: startCell to: cellToPlayOn

	self isXPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	(cellToPlayOn x < 0 or: [cellToPlayOn x > 2] or: [cellToPlayOn y < 0] or: [cellToPlayOn y > 2])
		ifTrue: [ self error: self class invalidCellErrorDescription ].
	
	currentPlayer := #O.! !

cellToPlayOn!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:34:22' prior: 50915311!
moveXFrom: startCell to: endCell

	self isXPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	(endCell x < 0 or: [endCell x > 2] or: [endCell y < 0] or: [endCell y > 2])
		ifTrue: [ self error: self class invalidCellErrorDescription ].
	
	currentPlayer := #O.! !

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 18:34:30'!
PASSED!

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 18:34:30'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 18:34:30'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 18:34:30'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 18:34:30'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:34:30'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:34:30'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 18:34:30'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 18:34:30'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:34:30'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:34:30'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 18:34:30'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotPlacePiecesWhenAllHaveBeenPlaced stamp: 'CJ 10/29/2020 18:34:30'!
PASSED!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 18:34:30'!
PASSED!

!testRun: #TerniLapilliTest #test13MovingOChangesTurnToX stamp: 'CJ 10/29/2020 18:34:30'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:34:30'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:35:19' prior: 50915178!
test13MovingOChangesTurnToX
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	game moveXFrom: 1@1 to: 2@1.
	game moveOFrom: 1@0 to: 2@0.
	
	self assert: game isXPlaying.! !

!testRun: #TerniLapilliTest #test13MovingOChangesTurnToX stamp: 'CJ 10/29/2020 18:35:21'!
ERROR!
!TerniLapilli methodsFor: 'accessing' stamp: 'CJ 10/29/2020 18:35:37'!
moveOFrom: aPoint to: aPoint2 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'accessing' stamp: 'CJ 10/29/2020 18:37:02' prior: 50915402!
moveOFrom: startCell to: endCell
	
	self isXPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	(endCell x < 0 or: [endCell x > 2] or: [endCell y < 0] or: [endCell y > 2])
		ifTrue: [ self error: self class invalidCellErrorDescription ].
	
	currentPlayer := #O.! !
!TerniLapilli methodsFor: 'accessing' stamp: 'CJ 10/29/2020 18:37:32' prior: 50915407!
moveOFrom: startCell to: endCell
	
	self isOPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	(endCell x < 0 or: [endCell x > 2] or: [endCell y < 0] or: [endCell y > 2])
		ifTrue: [ self error: self class invalidCellErrorDescription ].
	
	currentPlayer := #X.! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 18:37:34'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 18:37:34'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 18:37:34'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 18:37:34'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:37:34'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:37:34'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 18:37:34'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 18:37:34'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:37:34'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:37:34'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 18:37:34'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotPlacePiecesWhenAllHaveBeenPlaced stamp: 'CJ 10/29/2020 18:37:34'!
PASSED!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 18:37:34'!
PASSED!

!testRun: #TerniLapilliTest #test13MovingOChangesTurnToX stamp: 'CJ 10/29/2020 18:37:34'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:37:34'!
PASSED!

!testRun: #TerniLapilliTest #test13MovingOChangesTurnToX stamp: 'CJ 10/29/2020 18:37:38'!
PASSED!

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 18:37:38'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 18:37:38'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 18:37:38'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 18:37:38'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:37:38'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:37:38'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 18:37:38'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 18:37:38'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:37:38'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:37:38'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 18:37:38'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotPlacePiecesWhenAllHaveBeenPlaced stamp: 'CJ 10/29/2020 18:37:38'!
PASSED!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 18:37:38'!
PASSED!

!testRun: #TerniLapilliTest #test13MovingOChangesTurnToX stamp: 'CJ 10/29/2020 18:37:38'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:37:38'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:38:05' prior: 50914771!
putXAt: cellToPlayOn

	started := true.

	self isXPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	(fullCells includes: cellToPlayOn)
		ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
	(cellToPlayOn between: 0@0 and: 2@2)
		ifFalse: [ self error: self class invalidCellErrorDescription ].
	(fullCells size >= 6)
		ifTrue: [ self error: self class allPiecesPlacedErrorDescription ].
	
	fullCells add: cellToPlayOn.		
	currentPlayer := #O.! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 18:38:06'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 18:38:06'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 18:38:06'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 18:38:06'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:38:06'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:38:06'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 18:38:06'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 18:38:06'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:38:06'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:38:06'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 18:38:06'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotPlacePiecesWhenAllHaveBeenPlaced stamp: 'CJ 10/29/2020 18:38:06'!
PASSED!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 18:38:06'!
PASSED!

!testRun: #TerniLapilliTest #test13MovingOChangesTurnToX stamp: 'CJ 10/29/2020 18:38:06'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:38:06'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:38:25' prior: 50914712!
putOAt: cellToPlayOn

	self isOPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	(fullCells includes: cellToPlayOn)
		ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
	(cellToPlayOn between: 0@0 and: 2@2)
		ifFalse: [ self error: self class invalidCellErrorDescription ].
	(fullCells size >= 6)
		ifTrue: [ self error: self class allPiecesPlacedErrorDescription ].
		
	fullCells add: cellToPlayOn.
	currentPlayer := #X.! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 18:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 18:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 18:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 18:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 18:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 18:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 18:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotPlacePiecesWhenAllHaveBeenPlaced stamp: 'CJ 10/29/2020 18:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 18:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test13MovingOChangesTurnToX stamp: 'CJ 10/29/2020 18:38:27'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:38:27'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:38:42' prior: 50915325!
moveXFrom: startCell to: endCell

	self isXPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	(endCell between: 0@0 and: 2@2)
		ifFalse: [ self error: self class invalidCellErrorDescription ].
	
	currentPlayer := #O.! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 18:38:43'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 18:38:43'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 18:38:43'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 18:38:43'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:38:43'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:38:43'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 18:38:43'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 18:38:43'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:38:43'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:38:43'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 18:38:43'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotPlacePiecesWhenAllHaveBeenPlaced stamp: 'CJ 10/29/2020 18:38:43'!
PASSED!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 18:38:43'!
PASSED!

!testRun: #TerniLapilliTest #test13MovingOChangesTurnToX stamp: 'CJ 10/29/2020 18:38:43'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:38:43'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:39:02' prior: 50915419!
moveOFrom: startCell to: endCell
	
	self isOPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	(endCell between: 0@0 and: 2@2)
		ifFalse: [ self error: self class invalidCellErrorDescription ].
	
	currentPlayer := #X.! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 18:39:03'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 18:39:03'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 18:39:03'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 18:39:03'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:39:03'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:39:03'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 18:39:03'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 18:39:03'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:39:03'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:39:03'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 18:39:03'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotPlacePiecesWhenAllHaveBeenPlaced stamp: 'CJ 10/29/2020 18:39:03'!
PASSED!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 18:39:03'!
PASSED!

!testRun: #TerniLapilliTest #test13MovingOChangesTurnToX stamp: 'CJ 10/29/2020 18:39:03'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:39:03'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:40:17'!
test15
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	game moveXRight: 1@1.
	game moveORight: 1@0.
	
	self
		should: [ game moveORight: 1@2. ]
		raise: Error
		withMessageText: (TerniLapilli notPlayerTurnErrorDescription).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:40:36' prior: 50915200!
test14CannotMoveWhenItsNotTheirTurn
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	game moveXFrom: 1@1 to: 2@1.
	game moveOFrom: 1@0 to: 2@0.
	
	self
		should: [ game moveORight: 1@2. ]
		raise: Error
		withMessageText: (TerniLapilli notPlayerTurnErrorDescription).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:41:19' prior: 50915789!
test14CannotMoveWhenItsNotTheirTurn
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	game moveXFrom: 1@1 to: 2@1.
	game moveOFrom: 1@0 to: 2@0.
	
	self
		should: [ game moveOFrom: 1@2 to: 2@2. ]
		raise: Error
		withMessageText: (TerniLapilli notPlayerTurnErrorDescription).! !

!testRun: #TerniLapilliTest #test14CannotMoveWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:41:20'!
PASSED!

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 18:41:20'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 18:41:20'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 18:41:20'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 18:41:20'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:41:20'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:41:20'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 18:41:20'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 18:41:20'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:41:20'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:41:20'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 18:41:20'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotPlacePiecesWhenAllHaveBeenPlaced stamp: 'CJ 10/29/2020 18:41:20'!
PASSED!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 18:41:20'!
PASSED!

!testRun: #TerniLapilliTest #test13MovingOChangesTurnToX stamp: 'CJ 10/29/2020 18:41:20'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:41:20'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'CJ 10/29/2020 18:41:20'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:42:27' prior: 50915775!
test15
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	game moveOFrom: 1@0 to: 2@0.
	
	self
		should: [ game moveOFrom: 1@0 to: 2@0. ]
		raise: Error
		withMessageText: (TerniLapilli notPlayerTurnErrorDescription).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:42:31' prior: 50915873!
test15
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	self
		should: [ game moveOFrom: 1@0 to: 2@0. ]
		raise: Error
		withMessageText: (TerniLapilli notPlayerTurnErrorDescription).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:42:57' prior: 50915887!
test15
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	self
		should: [ game moveXFrom: 2@0 to: 2@1. ]
		raise: Error
		withMessageText: (TerniLapilli notPlayerTurnErrorDescription).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:44:08' prior: 50915900!
test15
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	self
		should: [ game moveXFrom: 2@0 to: 2@1. ]
		raise: Error
		withMessageText: (TerniLapilli cannotMoveFromEmptyCellErrorDescription).! !

!testRun: #TerniLapilliTest #test15 stamp: 'CJ 10/29/2020 18:44:12'!
ERROR!
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/29/2020 18:44:32'!
cannotMoveFromEmptyCellErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/29/2020 18:44:58' prior: 50915928!
cannotMoveFromEmptyCellErrorDescription
	
	^ 'Cannot move a piece from an empty cell'! !

!testRun: #TerniLapilliTest #test15 stamp: 'CJ 10/29/2020 18:45:01'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 18:46:06' prior: 50915659!
moveXFrom: startCell to: endCell

	self isXPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	(endCell between: 0@0 and: 2@2)
		ifFalse: [ self error: self class invalidCellErrorDescription ].
	(fullCells includes: startCell)
		ifFalse: [ self error: self class cannotMoveFromEmptyCellErrorDescription ].
	
	currentPlayer := #O.! !

!testRun: #TerniLapilliTest #test15 stamp: 'CJ 10/29/2020 18:46:12'!
PASSED!

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 18:46:12'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 18:46:12'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 18:46:12'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 18:46:12'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:46:12'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:46:12'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 18:46:12'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 18:46:12'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:46:12'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 18:46:12'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 18:46:12'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotPlacePiecesWhenAllHaveBeenPlaced stamp: 'CJ 10/29/2020 18:46:12'!
PASSED!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 18:46:12'!
PASSED!

!testRun: #TerniLapilliTest #test13MovingOChangesTurnToX stamp: 'CJ 10/29/2020 18:46:12'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 18:46:12'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'CJ 10/29/2020 18:46:12'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:12:53'!
test06CannotPutPieceOnFullCell
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self
		should: [ game putXAt: 0@1. ]
		raise: Error
		withMessageText: (TerniLapilli cellMustBeEmptyErrorDescription).! !

!methodRemoval: TerniLapilliTest #test06CannotPlayOnFullCell stamp: 'CJ 10/29/2020 19:12:53'!
test06CannotPlayOnFullCell
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	
	self
		should: [ game putXAt: 0@1. ]
		raise: Error
		withMessageText: (TerniLapilli cellMustBeEmptyErrorDescription).!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:13:28'!
test16
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	self
		should: [ game moveXFrom: 2@0 to: 2@1. ]
		raise: Error
		withMessageText: (TerniLapilli cannotMoveFromEmptyCellErrorDescription).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:14:04' prior: 50916030!
test16
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	self
		should: [ game moveXFrom: 1@0 to: 2@0. ]
		raise: Error
		withMessageText: (TerniLapilli cannotMoveFromEmptyCellErrorDescription).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:14:21' prior: 50916043!
test16
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	self
		should: [ game moveXFrom: 1@0 to: 2@0. ]
		raise: Error
		withMessageText: (TerniLapilli cannotMoveOtherPlayerPieceErrorDescription).! !

!testRun: #TerniLapilliTest #test16 stamp: 'CJ 10/29/2020 19:14:29'!
ERROR!
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/29/2020 19:14:44'!
cannotMoveOtherPlayerPieceErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/29/2020 19:15:07' prior: 50916071!
cannotMoveOtherPlayerPieceErrorDescription
	
	^ 'Cannot move a piece that isn''t yours'! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/29/2020 19:15:17' prior: 50916077!
cannotMoveOtherPlayerPieceErrorDescription
	
	^ 'Cannot move a piece that belongs to the other player'! !

!testRun: #TerniLapilliTest #test16 stamp: 'CJ 10/29/2020 19:15:19'!
FAILURE!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'CJ 10/29/2020 19:15:49'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer fullCells started playerXCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:15:46' prior: 50915943!
moveXFrom: startCell to: endCell

	self isXPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	(endCell between: 0@0 and: 2@2)
		ifFalse: [ self error: self class invalidCellErrorDescription ].
	(playerXCells includes: startCell)
		ifFalse: [ self error: self class cannotMoveFromEmptyCellErrorDescription ].
	
	currentPlayer := #O.! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 19:15:54'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 19:15:54'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 19:15:54'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 19:15:54'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:15:54'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:15:54'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutPieceOnFullCell stamp: 'CJ 10/29/2020 19:15:54'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 19:15:54'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:15:54'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:15:54'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 19:15:54'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotPlacePiecesWhenAllHaveBeenPlaced stamp: 'CJ 10/29/2020 19:15:54'!
PASSED!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 19:15:54'!
ERROR!

!testRun: #TerniLapilliTest #test13MovingOChangesTurnToX stamp: 'CJ 10/29/2020 19:15:54'!
ERROR!

!testRun: #TerniLapilliTest #test14CannotMoveWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:15:54'!
ERROR!

!testRun: #TerniLapilliTest #test15 stamp: 'CJ 10/29/2020 19:15:54'!
FAILURE!

!testRun: #TerniLapilliTest #test16 stamp: 'CJ 10/29/2020 19:15:54'!
FAILURE!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 19:16:01'!
ERROR!

!methodRemoval: TerniLapilli #moveORight: stamp: 'CJ 10/29/2020 19:17:21'!
moveORight: aPoint 
	
	self isOPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
		
	currentPlayer := #X.!

!methodRemoval: TerniLapilli #moveXRight: stamp: 'CJ 10/29/2020 19:17:22'!
moveXRight: aPoint 

	self isXPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	
	currentPlayer := #O.!
!TerniLapilli methodsFor: 'initialization' stamp: 'CJ 10/29/2020 19:18:19' prior: 50913549 overrides: 16896425!
initialize

	currentPlayer := #X.
	playerXCells := Set new.
	started := false.! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer started playerXCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer started playerXCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'CJ 10/29/2020 19:19:02'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer started playerXCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:20:00' prior: 50915528!
putXAt: cellToPlayOn

	started := true.

	self isXPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	(playerXCells includes: cellToPlayOn)
		ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
	(cellToPlayOn between: 0@0 and: 2@2)
		ifFalse: [ self error: self class invalidCellErrorDescription ].
	(playerXCells size >= 3)
		ifTrue: [ self error: self class allPiecesPlacedErrorDescription ].
	
	playerXCells add: cellToPlayOn.		
	currentPlayer := #O.! !

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'CJ 10/29/2020 19:20:37'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer started playerXCells playerOCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:20:56' prior: 50915594!
putOAt: cellToPlayOn

	self isOPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	(playerOCells includes: cellToPlayOn)
		ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
	(cellToPlayOn between: 0@0 and: 2@2)
		ifFalse: [ self error: self class invalidCellErrorDescription ].
	(playerOCells size >= 3)
		ifTrue: [ self error: self class allPiecesPlacedErrorDescription ].
		
	playerOCells add: cellToPlayOn.
	currentPlayer := #X.! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 19:21:06'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 19:21:06'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 19:21:06'!
ERROR!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 19:21:06'!
ERROR!

!testRun: #TerniLapilliTest #test04XCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:21:06'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:21:06'!
ERROR!

!testRun: #TerniLapilliTest #test06CannotPutPieceOnFullCell stamp: 'CJ 10/29/2020 19:21:06'!
ERROR!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 19:21:06'!
ERROR!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:21:06'!
ERROR!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:21:06'!
ERROR!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 19:21:06'!
ERROR!

!testRun: #TerniLapilliTest #test11CannotPlacePiecesWhenAllHaveBeenPlaced stamp: 'CJ 10/29/2020 19:21:06'!
ERROR!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 19:21:06'!
ERROR!

!testRun: #TerniLapilliTest #test13MovingOChangesTurnToX stamp: 'CJ 10/29/2020 19:21:06'!
ERROR!

!testRun: #TerniLapilliTest #test14CannotMoveWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:21:06'!
ERROR!

!testRun: #TerniLapilliTest #test15 stamp: 'CJ 10/29/2020 19:21:06'!
ERROR!

!testRun: #TerniLapilliTest #test16 stamp: 'CJ 10/29/2020 19:21:06'!
ERROR!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 19:21:11'!
ERROR!
!TerniLapilli methodsFor: 'initialization' stamp: 'CJ 10/29/2020 19:21:30' prior: 50916184 overrides: 16896425!
initialize

	currentPlayer := #X.
	playerXCells := Set new.	
	playerOCells := Set new.
	started := false.! !

!classDefinition: 'TerniLapilli class' category: 'TerniLapilli' stamp: 'CJ 10/29/2020 19:21:34'!
TerniLapilli class
	instanceVariableNames: 'playerOCells'!

	playerOCells := Set new.!
!TerniLapilli methodsFor: 'initialization' stamp: 'CJ 10/29/2020 19:21:37' prior: 50916309 overrides: 16896425!
initialize

	currentPlayer := #X.
	playerXCells := Set new.	
	playerOCells := Set new.
	started := false.! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 19:21:39'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 19:21:39'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 19:21:39'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 19:21:39'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:21:39'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:21:39'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutPieceOnFullCell stamp: 'CJ 10/29/2020 19:21:39'!
FAILURE!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 19:21:39'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:21:39'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:21:39'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 19:21:39'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotPlacePiecesWhenAllHaveBeenPlaced stamp: 'CJ 10/29/2020 19:21:39'!
PASSED!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 19:21:39'!
PASSED!

!testRun: #TerniLapilliTest #test13MovingOChangesTurnToX stamp: 'CJ 10/29/2020 19:21:39'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:21:39'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'CJ 10/29/2020 19:21:39'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'CJ 10/29/2020 19:21:39'!
FAILURE!

!testRun: #TerniLapilliTest #test06CannotPutPieceOnFullCell stamp: 'CJ 10/29/2020 19:21:42'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:22:31' prior: 50916208!
putXAt: cellToPlayOn

	started := true.

	self isXPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	((playerXCells includes: cellToPlayOn) or: [playerOCells includes: cellToPlayOn])
		ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
	(cellToPlayOn between: 0@0 and: 2@2)
		ifFalse: [ self error: self class invalidCellErrorDescription ].
	(playerXCells size >= 3)
		ifTrue: [ self error: self class allPiecesPlacedErrorDescription ].
	
	playerXCells add: cellToPlayOn.		
	currentPlayer := #O.! !

!testRun: #TerniLapilliTest #test06CannotPutPieceOnFullCell stamp: 'CJ 10/29/2020 19:22:39'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'CJ 10/29/2020 19:22:40'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:23:49' prior: 50916101!
moveXFrom: startCell to: endCell

	self isXPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	(endCell between: 0@0 and: 2@2)
		ifFalse: [ self error: self class invalidCellErrorDescription ].
	(playerOCells includes: startCell)
		ifTrue: [ self error: self class cannotMoveOtherPlayerPieceErrorDescription ].
	(playerXCells includes: startCell)
		ifFalse: [ self error: self class cannotMoveFromEmptyCellErrorDescription ].
	
	currentPlayer := #O.! !

!testRun: #TerniLapilliTest #test16 stamp: 'CJ 10/29/2020 19:23:55'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:24:28' prior: 50915717!
moveOFrom: startCell to: endCell
	
	self isOPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	(endCell between: 0@0 and: 2@2)
		ifFalse: [ self error: self class invalidCellErrorDescription ].
	(playerXCells includes: startCell)
		ifTrue: [ self error: self class cannotMoveOtherPlayerPieceErrorDescription ].
	(playerOCells includes: startCell)
		ifFalse: [ self error: self class cannotMoveFromEmptyCellErrorDescription ].
	
	currentPlayer := #X.! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 19:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 19:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 19:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 19:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutPieceOnFullCell stamp: 'CJ 10/29/2020 19:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 19:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 19:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotPlacePiecesWhenAllHaveBeenPlaced stamp: 'CJ 10/29/2020 19:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 19:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test13MovingOChangesTurnToX stamp: 'CJ 10/29/2020 19:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'CJ 10/29/2020 19:24:29'!
PASSED!

!testRun: #TerniLapilliTest #test16 stamp: 'CJ 10/29/2020 19:24:29'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:24:51'!
test15CannotMoveFromEmptyCell
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	self
		should: [ game moveXFrom: 2@0 to: 2@1. ]
		raise: Error
		withMessageText: (TerniLapilli cannotMoveFromEmptyCellErrorDescription).! !

!methodRemoval: TerniLapilliTest #test15 stamp: 'CJ 10/29/2020 19:24:51'!
test15
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	self
		should: [ game moveXFrom: 2@0 to: 2@1. ]
		raise: Error
		withMessageText: (TerniLapilli cannotMoveFromEmptyCellErrorDescription).!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:25:01'!
test16CannotMoveRivalPiece
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	self
		should: [ game moveXFrom: 1@0 to: 2@0. ]
		raise: Error
		withMessageText: (TerniLapilli cannotMoveOtherPlayerPieceErrorDescription).! !

!methodRemoval: TerniLapilliTest #test16 stamp: 'CJ 10/29/2020 19:25:01'!
test16
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	self
		should: [ game moveXFrom: 1@0 to: 2@0. ]
		raise: Error
		withMessageText: (TerniLapilli cannotMoveOtherPlayerPieceErrorDescription).!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:25:51' prior: 50916526!
test16CannotMoveRivalPiece
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	self
		should: [ game moveXFrom: 1@1 to: 1@0. ]
		raise: Error
		withMessageText: (TerniLapilli cannotMoveToFullCellErrorDescription).! !

!testRun: #TerniLapilliTest #test16CannotMoveRivalPiece stamp: 'CJ 10/29/2020 19:25:53'!
ERROR!
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/29/2020 19:26:01'!
cannotMoveToFullCellErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/29/2020 19:26:10' prior: 50916568!
cannotMoveToFullCellErrorDescription
	
	^ 'Cannot move piece to a full cell'! !

!testRun: #TerniLapilliTest #test16CannotMoveRivalPiece stamp: 'CJ 10/29/2020 19:26:11'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:26:50' prior: 50916236!
putOAt: cellToPlayOn

	self isOPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	((playerXCells includes: cellToPlayOn) or: [playerOCells includes: cellToPlayOn])
		ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
	(cellToPlayOn between: 0@0 and: 2@2)
		ifFalse: [ self error: self class invalidCellErrorDescription ].
	(playerOCells size >= 3)
		ifTrue: [ self error: self class allPiecesPlacedErrorDescription ].
		
	playerOCells add: cellToPlayOn.
	currentPlayer := #X.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:27:19' prior: 50916410!
moveXFrom: startCell to: endCell

	self isXPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	(endCell between: 0@0 and: 2@2)
		ifFalse: [ self error: self class invalidCellErrorDescription ].
	((playerXCells includes: endCell) or: [playerOCells includes: endCell])
		ifTrue: [ self error: self class cannotMoveOtherPlayerPieceErrorDescription ].
	(playerXCells includes: startCell)
		ifFalse: [ self error: self class cannotMoveFromEmptyCellErrorDescription ].
	
	currentPlayer := #O.! !

!testRun: #TerniLapilliTest #test16CannotMoveRivalPiece stamp: 'CJ 10/29/2020 19:27:25'!
PASSED!

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 19:27:25'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 19:27:25'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 19:27:25'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 19:27:25'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:27:25'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:27:25'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutPieceOnFullCell stamp: 'CJ 10/29/2020 19:27:25'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 19:27:25'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:27:25'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:27:25'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 19:27:25'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotPlacePiecesWhenAllHaveBeenPlaced stamp: 'CJ 10/29/2020 19:27:25'!
PASSED!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 19:27:25'!
PASSED!

!testRun: #TerniLapilliTest #test13MovingOChangesTurnToX stamp: 'CJ 10/29/2020 19:27:25'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:27:25'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveFromEmptyCell stamp: 'CJ 10/29/2020 19:27:25'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveRivalPiece stamp: 'CJ 10/29/2020 19:27:25'!
FAILURE!

!testRun: #TerniLapilliTest #test16CannotMoveRivalPiece stamp: 'CJ 10/29/2020 19:27:25'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:28:21' prior: 50916603!
moveXFrom: startCell to: endCell

	self isXPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	(endCell between: 0@0 and: 2@2)
		ifFalse: [ self error: self class invalidCellErrorDescription ].
	((playerXCells includes: endCell) or: [playerOCells includes: endCell])
		ifTrue: [ self error: self class cannotMoveOtherPlayerPieceErrorDescription ].
	(playerXCells includes: startCell)
		ifFalse: [ self error: self class cannotMoveFromEmptyCellErrorDescription ].
	((playerXCells includes: endCell) or: [playerOCells includes: endCell])
		ifTrue: [].
	
	currentPlayer := #O.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:28:41' prior: 50916682!
moveXFrom: startCell to: endCell

	self isXPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	(endCell between: 0@0 and: 2@2)
		ifFalse: [ self error: self class invalidCellErrorDescription ].
	(playerOCells includes: startCell)
		ifTrue: [ self error: self class cannotMoveOtherPlayerPieceErrorDescription ].
	(playerXCells includes: startCell)
		ifFalse: [ self error: self class cannotMoveFromEmptyCellErrorDescription ].
	((playerXCells includes: endCell) or: [playerOCells includes: endCell])
		ifTrue: [].
	
	currentPlayer := #O.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:28:58' prior: 50916704!
moveXFrom: startCell to: endCell

	self isXPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	(endCell between: 0@0 and: 2@2)
		ifFalse: [ self error: self class invalidCellErrorDescription ].
	(playerOCells includes: startCell)
		ifTrue: [ self error: self class cannotMoveOtherPlayerPieceErrorDescription ].
	(playerXCells includes: startCell)
		ifFalse: [ self error: self class cannotMoveFromEmptyCellErrorDescription ].
	((playerXCells includes: endCell) or: [playerOCells includes: endCell])
		ifTrue: [ self error: self class cannotMoveToFullCellErrorDescription ].
	
	currentPlayer := #O.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:29:09' prior: 50916431!
moveOFrom: startCell to: endCell
	
	self isOPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	(endCell between: 0@0 and: 2@2)
		ifFalse: [ self error: self class invalidCellErrorDescription ].
	(playerXCells includes: startCell)
		ifTrue: [ self error: self class cannotMoveOtherPlayerPieceErrorDescription ].
	(playerOCells includes: startCell)
		ifFalse: [ self error: self class cannotMoveFromEmptyCellErrorDescription ].
	((playerXCells includes: endCell) or: [playerOCells includes: endCell])
		ifTrue: [ self error: self class cannotMoveToFullCellErrorDescription ].
	
	currentPlayer := #X.! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 19:29:11'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 19:29:11'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 19:29:11'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 19:29:11'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:29:11'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:29:11'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutPieceOnFullCell stamp: 'CJ 10/29/2020 19:29:11'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 19:29:11'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:29:11'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:29:11'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 19:29:11'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotPlacePiecesWhenAllHaveBeenPlaced stamp: 'CJ 10/29/2020 19:29:11'!
PASSED!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 19:29:11'!
PASSED!

!testRun: #TerniLapilliTest #test13MovingOChangesTurnToX stamp: 'CJ 10/29/2020 19:29:11'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:29:11'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveFromEmptyCell stamp: 'CJ 10/29/2020 19:29:11'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveRivalPiece stamp: 'CJ 10/29/2020 19:29:11'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:29:39'!
test17
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	self
		should: [ game moveXFrom: 1@1 to: 1@0. ]
		raise: Error
		withMessageText: (TerniLapilli cannotMoveToFullCellErrorDescription).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:25:01' prior: 50916552!
test16CannotMoveRivalPiece
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	self
		should: [ game moveXFrom: 1@0 to: 2@0. ]
		raise: Error
		withMessageText: (TerniLapilli cannotMoveOtherPlayerPieceErrorDescription).! !

!testRun: #TerniLapilliTest #test16CannotMoveRivalPiece stamp: 'CJ 10/29/2020 19:30:18'!
PASSED!

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 19:30:18'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 19:30:18'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 19:30:18'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 19:30:18'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:30:18'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:30:18'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutPieceOnFullCell stamp: 'CJ 10/29/2020 19:30:18'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 19:30:18'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:30:18'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:30:18'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 19:30:18'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotPlacePiecesWhenAllHaveBeenPlaced stamp: 'CJ 10/29/2020 19:30:18'!
PASSED!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 19:30:18'!
PASSED!

!testRun: #TerniLapilliTest #test13MovingOChangesTurnToX stamp: 'CJ 10/29/2020 19:30:18'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:30:18'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveFromEmptyCell stamp: 'CJ 10/29/2020 19:30:18'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveRivalPiece stamp: 'CJ 10/29/2020 19:30:18'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'CJ 10/29/2020 19:30:18'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:30:50' prior: 50916824!
test17
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	
	self
		should: [ game moveOFrom: 1@1 to: 1@0. ]
		raise: Error
		withMessageText: (TerniLapilli cannotMoveToFullCellErrorDescription).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:31:38'!
test18
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	
	self
		should: [ game moveOFrom: 1@0 to: 2@0. ]
		raise: Error
		withMessageText: (TerniLapilli cannotMoveBeforeAllPiecesHaveBeenPlacedErrorDescription).! !

!testRun: #TerniLapilliTest #test18 stamp: 'CJ 10/29/2020 19:31:43'!
ERROR!
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/29/2020 19:31:51'!
cannotMoveBeforeAllPiecesHaveBeenPlacedErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/29/2020 19:32:07' prior: 50916937!
cannotMoveBeforeAllPiecesHaveBeenPlacedErrorDescription
	
	^ 'Cannot move a piece before each player has placed all their pieces'! !

!testRun: #TerniLapilliTest #test18 stamp: 'CJ 10/29/2020 19:32:09'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:34:13' prior: 50916748!
moveOFrom: startCell to: endCell
	
	self isOPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	(endCell between: 0@0 and: 2@2)
		ifFalse: [ self error: self class invalidCellErrorDescription ].
	(playerXCells includes: startCell)
		ifTrue: [ self error: self class cannotMoveOtherPlayerPieceErrorDescription ].
	(playerOCells includes: startCell)
		ifFalse: [ self error: self class cannotMoveFromEmptyCellErrorDescription ].
	((playerXCells includes: endCell) or: [playerOCells includes: endCell])
		ifTrue: [ self error: self class cannotMoveToFullCellErrorDescription ].
	(playerOCells size < 3)
		ifTrue: [ self error: self class cannotMoveBeforeAllPiecesHaveBeenPlacedErrorDescription ].
	
	currentPlayer := #X.! !

!testRun: #TerniLapilliTest #test18 stamp: 'CJ 10/29/2020 19:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 19:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 19:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 19:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 19:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutPieceOnFullCell stamp: 'CJ 10/29/2020 19:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 19:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 19:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotPlacePiecesWhenAllHaveBeenPlaced stamp: 'CJ 10/29/2020 19:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 19:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test13MovingOChangesTurnToX stamp: 'CJ 10/29/2020 19:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveFromEmptyCell stamp: 'CJ 10/29/2020 19:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveRivalPiece stamp: 'CJ 10/29/2020 19:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'CJ 10/29/2020 19:34:21'!
FAILURE!

!testRun: #TerniLapilliTest #test18 stamp: 'CJ 10/29/2020 19:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'CJ 10/29/2020 19:34:21'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:29:39' prior: 50916910!
test17
	
	| game |
	
	game := TerniLapilli new.
	
	game putXAt: 0@0.
	game putOAt: 0@1.
	game putXAt: 0@2.
	game putOAt: 1@0.
	game putXAt: 1@1.
	game putOAt: 1@2.
	
	self
		should: [ game moveXFrom: 1@1 to: 1@0. ]
		raise: Error
		withMessageText: (TerniLapilli cannotMoveToFullCellErrorDescription).! !

!testRun: #TerniLapilliTest #test18 stamp: 'CJ 10/29/2020 19:36:01'!
PASSED!

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutPieceOnFullCell stamp: 'CJ 10/29/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotPlacePiecesWhenAllHaveBeenPlaced stamp: 'CJ 10/29/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test13MovingOChangesTurnToX stamp: 'CJ 10/29/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveFromEmptyCell stamp: 'CJ 10/29/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveRivalPiece stamp: 'CJ 10/29/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'CJ 10/29/2020 19:36:04'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'CJ 10/29/2020 19:36:04'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:37:12' prior: 50916384!
putXAt: cellToPlayOn

	started := true.

	self isOPlaying
		ifTrue: [ self error: self class notPlayerTurnErrorDescription ].
	((playerXCells includes: cellToPlayOn) or: [playerOCells includes: cellToPlayOn])
		ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
	(cellToPlayOn between: 0@0 and: 2@2)
		ifFalse: [ self error: self class invalidCellErrorDescription ].
	(playerXCells size >= 3)
		ifTrue: [ self error: self class allPiecesPlacedErrorDescription ].
	
	playerXCells add: cellToPlayOn.		
	currentPlayer := #O.! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 19:37:13'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 19:37:13'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 19:37:13'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 19:37:13'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:37:13'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:37:13'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutPieceOnFullCell stamp: 'CJ 10/29/2020 19:37:13'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 19:37:13'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:37:13'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:37:13'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 19:37:13'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotPlacePiecesWhenAllHaveBeenPlaced stamp: 'CJ 10/29/2020 19:37:13'!
PASSED!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 19:37:13'!
PASSED!

!testRun: #TerniLapilliTest #test13MovingOChangesTurnToX stamp: 'CJ 10/29/2020 19:37:13'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:37:13'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveFromEmptyCell stamp: 'CJ 10/29/2020 19:37:13'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveRivalPiece stamp: 'CJ 10/29/2020 19:37:13'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'CJ 10/29/2020 19:37:13'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'CJ 10/29/2020 19:37:13'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:37:54' prior: 50917116!
putXAt: cellToPlayOn

	started := true.

	self isOPlaying
		ifTrue: [ self error: self class notPlayerTurnErrorDescription ].
	self isXPlaying
		ifTrue: [
			((playerXCells includes: cellToPlayOn) or: [playerOCells includes: cellToPlayOn])
				ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
			(cellToPlayOn between: 0@0 and: 2@2)
				ifFalse: [ self error: self class invalidCellErrorDescription ].
			(playerXCells size >= 3)
				ifTrue: [ self error: self class allPiecesPlacedErrorDescription ].
			
			playerXCells add: cellToPlayOn.		
			currentPlayer := #O.
			].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:39:29' prior: 50916583!
putOAt: cellToPlayOn

	self isXPlaying
		ifTrue: [ self error: self class notPlayerTurnErrorDescription ].
	self isOPlaying
		ifTrue: [
			((playerXCells includes: cellToPlayOn) or: [playerOCells includes: cellToPlayOn])
				ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
			(cellToPlayOn between: 0@0 and: 2@2)
				ifFalse: [ self error: self class invalidCellErrorDescription ].
			(playerOCells size >= 3)
				ifTrue: [ self error: self class allPiecesPlacedErrorDescription ].
				
			playerOCells add: cellToPlayOn.
			currentPlayer := #X.
			].
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:39:32' prior: 50917216!
putOAt: cellToPlayOn

	self isXPlaying
		ifTrue: [ self error: self class notPlayerTurnErrorDescription ].
	self isOPlaying
		ifTrue: [
			((playerXCells includes: cellToPlayOn) or: [playerOCells includes: cellToPlayOn])
				ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
			(cellToPlayOn between: 0@0 and: 2@2)
				ifFalse: [ self error: self class invalidCellErrorDescription ].
			(playerOCells size >= 3)
				ifTrue: [ self error: self class allPiecesPlacedErrorDescription ].
				
			playerOCells add: cellToPlayOn.
			currentPlayer := #X.
			].! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 19:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 19:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 19:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 19:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutPieceOnFullCell stamp: 'CJ 10/29/2020 19:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 19:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 19:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotPlacePiecesWhenAllHaveBeenPlaced stamp: 'CJ 10/29/2020 19:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 19:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test13MovingOChangesTurnToX stamp: 'CJ 10/29/2020 19:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveFromEmptyCell stamp: 'CJ 10/29/2020 19:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveRivalPiece stamp: 'CJ 10/29/2020 19:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'CJ 10/29/2020 19:39:33'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'CJ 10/29/2020 19:39:33'!
PASSED!

Object subclass: #TerniLapilliPlayer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliPlayer category: 'TerniLapilli' stamp: 'CJ 10/29/2020 19:40:14'!
Object subclass: #TerniLapilliPlayer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TerniLapilliPlayer subclass: #TerniLapilliPlayerX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliPlayerX category: 'TerniLapilli' stamp: 'CJ 10/29/2020 19:40:26'!
TerniLapilliPlayer subclass: #TerniLapilliPlayerX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TerniLapilliPlayer subclass: #TerniLapilliPlayerO
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliPlayerO category: 'TerniLapilli' stamp: 'CJ 10/29/2020 19:40:31'!
TerniLapilliPlayer subclass: #TerniLapilliPlayerO
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliPlayer methodsFor: 'no messages' stamp: 'CJ 10/29/2020 19:40:58'!
lalo: laloCell
	
	self subclassResponsibility ! !

!classDefinition: #TerniLapilliPlayerO category: 'TerniLapilli' stamp: 'CJ 10/29/2020 19:42:18'!
TerniLapilliPlayer subclass: #TerniLapilliPlayerO
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliPlayerO methodsFor: 'no messages' stamp: 'CJ 10/29/2020 19:42:16' overrides: 50917353!
lalo: laloCell

	game playTurnO: laloCell.! !
!TerniLapilli methodsFor: 'initialization' stamp: 'CJ 10/29/2020 19:43:09' prior: 50916322 overrides: 16896425!
initialize

	currentPlayer := TerniLapilliPlayerX playing: self.
	playerXCells := Set new.	
	playerOCells := Set new.
	started := false.! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 19:43:12'!
ERROR!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 19:43:12'!
ERROR!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 19:43:12'!
ERROR!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 19:43:12'!
ERROR!

!testRun: #TerniLapilliTest #test04XCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:43:12'!
ERROR!

!testRun: #TerniLapilliTest #test05OCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:43:12'!
ERROR!

!testRun: #TerniLapilliTest #test06CannotPutPieceOnFullCell stamp: 'CJ 10/29/2020 19:43:12'!
ERROR!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 19:43:12'!
ERROR!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:43:12'!
ERROR!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:43:12'!
ERROR!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 19:43:12'!
ERROR!

!testRun: #TerniLapilliTest #test11CannotPlacePiecesWhenAllHaveBeenPlaced stamp: 'CJ 10/29/2020 19:43:12'!
ERROR!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 19:43:12'!
ERROR!

!testRun: #TerniLapilliTest #test13MovingOChangesTurnToX stamp: 'CJ 10/29/2020 19:43:12'!
ERROR!

!testRun: #TerniLapilliTest #test14CannotMoveWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:43:12'!
ERROR!

!testRun: #TerniLapilliTest #test15CannotMoveFromEmptyCell stamp: 'CJ 10/29/2020 19:43:12'!
ERROR!

!testRun: #TerniLapilliTest #test16CannotMoveRivalPiece stamp: 'CJ 10/29/2020 19:43:12'!
ERROR!

!testRun: #TerniLapilliTest #test17 stamp: 'CJ 10/29/2020 19:43:12'!
ERROR!

!testRun: #TerniLapilliTest #test18 stamp: 'CJ 10/29/2020 19:43:12'!
ERROR!

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 19:43:14'!
ERROR!
!TerniLapilliPlayer class methodsFor: 'instance creation' stamp: 'CJ 10/29/2020 19:43:23'!
playing: aTerniLapilli 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializePlaying: aTerniLapilli ! !
!TerniLapilliPlayer class methodsFor: 'instance creation' stamp: 'CJ 10/29/2020 19:43:37' prior: 50917439!
playing: aTerniLapilli

	^self new initializePlaying: aTerniLapilli ! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 19:43:40'!
ERROR!

!classDefinition: #TerniLapilliPlayer category: 'TerniLapilli' stamp: 'CJ 10/29/2020 19:43:51'!
Object subclass: #TerniLapilliPlayer
	instanceVariableNames: 'terniLapilli'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliPlayer methodsFor: 'initialization' stamp: 'CJ 10/29/2020 19:43:51'!
initializePlaying: aTerniLapilli 
	self shouldBeImplemented.
	terniLapilli := aTerniLapilli.! !
!TerniLapilliPlayer methodsFor: 'initialization' stamp: 'CJ 10/29/2020 19:44:48' prior: 50917464!
initializePlaying: aTerniLapilli 

	terniLapilli := aTerniLapilli.! !

TerniLapilliPlayer subclass: #TerniLapilliPlayerO
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliPlayerO category: 'TerniLapilli' stamp: 'CJ 10/29/2020 19:45:15'!
TerniLapilliPlayer subclass: #TerniLapilliPlayerO
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

Object subclass: #TerniLapilliPlayer
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliPlayer category: 'TerniLapilli' stamp: 'CJ 10/29/2020 19:45:18'!
Object subclass: #TerniLapilliPlayer
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliPlayer methodsFor: 'initialization' stamp: 'CJ 10/29/2020 19:45:24' prior: 50917471!
initializePlaying: aTerniLapilli 

	game := aTerniLapilli.! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 19:45:30'!
FAILURE!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 19:45:30'!
FAILURE!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 19:45:30'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 19:45:30'!
FAILURE!

!testRun: #TerniLapilliTest #test04XCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:45:30'!
FAILURE!

!testRun: #TerniLapilliTest #test05OCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:45:30'!
FAILURE!

!testRun: #TerniLapilliTest #test06CannotPutPieceOnFullCell stamp: 'CJ 10/29/2020 19:45:30'!
FAILURE!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 19:45:30'!
FAILURE!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:45:30'!
FAILURE!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:45:30'!
FAILURE!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 19:45:30'!
FAILURE!

!testRun: #TerniLapilliTest #test11CannotPlacePiecesWhenAllHaveBeenPlaced stamp: 'CJ 10/29/2020 19:45:30'!
FAILURE!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 19:45:30'!
ERROR!

!testRun: #TerniLapilliTest #test13MovingOChangesTurnToX stamp: 'CJ 10/29/2020 19:45:30'!
ERROR!

!testRun: #TerniLapilliTest #test14CannotMoveWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:45:30'!
ERROR!

!testRun: #TerniLapilliTest #test15CannotMoveFromEmptyCell stamp: 'CJ 10/29/2020 19:45:30'!
FAILURE!

!testRun: #TerniLapilliTest #test16CannotMoveRivalPiece stamp: 'CJ 10/29/2020 19:45:30'!
FAILURE!

!testRun: #TerniLapilliTest #test17 stamp: 'CJ 10/29/2020 19:45:30'!
FAILURE!

!testRun: #TerniLapilliTest #test18 stamp: 'CJ 10/29/2020 19:45:30'!
FAILURE!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 19:45:32'!
ERROR!
!TerniLapilliPlayerX methodsFor: 'nil' stamp: 'CJ 10/29/2020 19:46:23' overrides: 50917353!
lalo: laloCell

	game playTurnX: laloCell.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:47:05'!
playTurnO: cellToPlayOn

	((playerXCells includes: cellToPlayOn) or: [playerOCells includes: cellToPlayOn])
		ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
	(cellToPlayOn between: 0@0 and: 2@2)
		ifFalse: [ self error: self class invalidCellErrorDescription ].
	(playerOCells size >= 3)
		ifTrue: [ self error: self class allPiecesPlacedErrorDescription ].
		
	playerOCells add: cellToPlayOn.
	currentPlayer := #X.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:47:35'!
playTurnX: cellToPlayOn

	((playerXCells includes: cellToPlayOn) or: [playerOCells includes: cellToPlayOn])
		ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
	(cellToPlayOn between: 0@0 and: 2@2)
		ifFalse: [ self error: self class invalidCellErrorDescription ].
	(playerXCells size >= 3)
		ifTrue: [ self error: self class allPiecesPlacedErrorDescription ].
	
	playerXCells add: cellToPlayOn.		
	currentPlayer := #O.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:49:42' prior: 50917238!
putOAt: cellToPlayOn

	currentPlayer playTurnO: cellToPlayOn.

"	self isXPlaying
		ifTrue: [ self error: self class notPlayerTurnErrorDescription ].
	self isOPlaying
		ifTrue: [
			((playerXCells includes: cellToPlayOn) or: [playerOCells includes: cellToPlayOn])
				ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
			(cellToPlayOn between: 0@0 and: 2@2)
				ifFalse: [ self error: self class invalidCellErrorDescription ].
			(playerOCells size >= 3)
				ifTrue: [ self error: self class allPiecesPlacedErrorDescription ].
				
			playerOCells add: cellToPlayOn.
			currentPlayer := #X.
			]."! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:51:31' prior: 50917606!
putOAt: cellToPlayOn

	self isXPlaying
		ifTrue: [ self error: self class notPlayerTurnErrorDescription ].
	self isOPlaying
		ifTrue: [
			((playerXCells includes: cellToPlayOn) or: [playerOCells includes: cellToPlayOn])
				ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
			(cellToPlayOn between: 0@0 and: 2@2)
				ifFalse: [ self error: self class invalidCellErrorDescription ].
			(playerOCells size >= 3)
				ifTrue: [ self error: self class allPiecesPlacedErrorDescription ].
				
			playerOCells add: cellToPlayOn.
			currentPlayer := #X.
			].! !
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/29/2020 19:51:45' prior: 50913016!
isXPlaying
	
	^ currentPlayer isX.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:52:15' prior: 50917629!
putOAt: cellToPlayOn

	self isXPlaying
		ifTrue: [ self error: self class notPlayerTurnErrorDescription ].
	self isOPlaying
		ifTrue: [
			((playerXCells includes: cellToPlayOn) or: [playerOCells includes: cellToPlayOn])
				ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
			(cellToPlayOn between: 0@0 and: 2@2)
				ifFalse: [ self error: self class invalidCellErrorDescription ].
			(playerOCells size >= 3)
				ifTrue: [ self error: self class allPiecesPlacedErrorDescription ].
				
			playerOCells add: cellToPlayOn.
			currentPlayer := TerniLapilliPlayerX playing: self.
			].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:52:27' prior: 50917194!
putXAt: cellToPlayOn

	started := true.

	self isOPlaying
		ifTrue: [ self error: self class notPlayerTurnErrorDescription ].
	self isXPlaying
		ifTrue: [
			((playerXCells includes: cellToPlayOn) or: [playerOCells includes: cellToPlayOn])
				ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
			(cellToPlayOn between: 0@0 and: 2@2)
				ifFalse: [ self error: self class invalidCellErrorDescription ].
			(playerXCells size >= 3)
				ifTrue: [ self error: self class allPiecesPlacedErrorDescription ].
			
			playerXCells add: cellToPlayOn.		
			currentPlayer := TerniLapilliPlayerO playing: self.
			].! !
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/29/2020 19:52:43' prior: 50912195!
isOPlaying
	
	^ currentPlayer isO.! !
!TerniLapilliPlayer methodsFor: 'nil' stamp: 'CJ 10/29/2020 19:52:59'!
isO
	
	^ false! !
!TerniLapilliPlayer methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:53:03'!
isX
	
	^ false! !
!TerniLapilliPlayerO methodsFor: 'nil' stamp: 'CJ 10/29/2020 19:53:13' overrides: 50917704!
isO

	^ true! !
!TerniLapilliPlayerX methodsFor: 'nil' stamp: 'CJ 10/29/2020 19:53:20' overrides: 50917708!
isX

	^ true! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 19:53:23'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 19:53:23'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 19:53:23'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 19:53:23'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:53:23'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:53:23'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutPieceOnFullCell stamp: 'CJ 10/29/2020 19:53:23'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 19:53:23'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:53:23'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:53:23'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 19:53:23'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotPlacePiecesWhenAllHaveBeenPlaced stamp: 'CJ 10/29/2020 19:53:23'!
PASSED!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 19:53:23'!
ERROR!

!testRun: #TerniLapilliTest #test13MovingOChangesTurnToX stamp: 'CJ 10/29/2020 19:53:23'!
ERROR!

!testRun: #TerniLapilliTest #test14CannotMoveWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:53:23'!
ERROR!

!testRun: #TerniLapilliTest #test15CannotMoveFromEmptyCell stamp: 'CJ 10/29/2020 19:53:23'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveRivalPiece stamp: 'CJ 10/29/2020 19:53:23'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'CJ 10/29/2020 19:53:23'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'CJ 10/29/2020 19:53:23'!
PASSED!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 19:53:25'!
ERROR!

!methodRemoval: TerniLapilli #playTurnX: stamp: 'CJ 10/29/2020 19:53:55'!
playTurnX: cellToPlayOn

	((playerXCells includes: cellToPlayOn) or: [playerOCells includes: cellToPlayOn])
		ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
	(cellToPlayOn between: 0@0 and: 2@2)
		ifFalse: [ self error: self class invalidCellErrorDescription ].
	(playerXCells size >= 3)
		ifTrue: [ self error: self class allPiecesPlacedErrorDescription ].
	
	playerXCells add: cellToPlayOn.		
	currentPlayer := #O.!

!methodRemoval: TerniLapilli #playTurnO: stamp: 'CJ 10/29/2020 19:53:56'!
playTurnO: cellToPlayOn

	((playerXCells includes: cellToPlayOn) or: [playerOCells includes: cellToPlayOn])
		ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
	(cellToPlayOn between: 0@0 and: 2@2)
		ifFalse: [ self error: self class invalidCellErrorDescription ].
	(playerOCells size >= 3)
		ifTrue: [ self error: self class allPiecesPlacedErrorDescription ].
		
	playerOCells add: cellToPlayOn.
	currentPlayer := #X.!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:54:15' prior: 50916725!
moveXFrom: startCell to: endCell

	self isXPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	(endCell between: 0@0 and: 2@2)
		ifFalse: [ self error: self class invalidCellErrorDescription ].
	(playerOCells includes: startCell)
		ifTrue: [ self error: self class cannotMoveOtherPlayerPieceErrorDescription ].
	(playerXCells includes: startCell)
		ifFalse: [ self error: self class cannotMoveFromEmptyCellErrorDescription ].
	((playerXCells includes: endCell) or: [playerOCells includes: endCell])
		ifTrue: [ self error: self class cannotMoveToFullCellErrorDescription ].
	
	currentPlayer := TerniLapilliPlayerO playing: self.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:54:30' prior: 50916953!
moveOFrom: startCell to: endCell
	
	self isOPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	(endCell between: 0@0 and: 2@2)
		ifFalse: [ self error: self class invalidCellErrorDescription ].
	(playerXCells includes: startCell)
		ifTrue: [ self error: self class cannotMoveOtherPlayerPieceErrorDescription ].
	(playerOCells includes: startCell)
		ifFalse: [ self error: self class cannotMoveFromEmptyCellErrorDescription ].
	((playerXCells includes: endCell) or: [playerOCells includes: endCell])
		ifTrue: [ self error: self class cannotMoveToFullCellErrorDescription ].
	(playerOCells size < 3)
		ifTrue: [ self error: self class cannotMoveBeforeAllPiecesHaveBeenPlacedErrorDescription ].
	
	currentPlayer := TerniLapilliPlayerX playing: self.! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 19:54:31'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 19:54:31'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 19:54:31'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 19:54:31'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:54:31'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:54:31'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutPieceOnFullCell stamp: 'CJ 10/29/2020 19:54:31'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 19:54:31'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:54:31'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:54:31'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 19:54:31'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotPlacePiecesWhenAllHaveBeenPlaced stamp: 'CJ 10/29/2020 19:54:31'!
PASSED!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 19:54:31'!
PASSED!

!testRun: #TerniLapilliTest #test13MovingOChangesTurnToX stamp: 'CJ 10/29/2020 19:54:31'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:54:31'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveFromEmptyCell stamp: 'CJ 10/29/2020 19:54:31'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveRivalPiece stamp: 'CJ 10/29/2020 19:54:31'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'CJ 10/29/2020 19:54:31'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'CJ 10/29/2020 19:54:31'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:55:00' prior: 50917655!
putOAt: cellToPlayOn

	self isXPlaying
		ifTrue: [ self error: self class notPlayerTurnErrorDescription ].
	self isOPlaying
		ifTrue: [
			((playerXCells includes: cellToPlayOn) or: [playerOCells includes: cellToPlayOn])
				ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
			(cellToPlayOn between: 0@0 and: 2@2)
				ifFalse: [ self error: self class invalidCellErrorDescription ].
			(playerOCells size >= 3)
				ifTrue: [ self error: self class allPiecesPlacedErrorDescription ].
				
			playerOCells add: cellToPlayOn.
			currentPlayer := TerniLapilliPlayerX playing: self.
			].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:55:29'!
validateCellCoordinates: cellToPlayOn

	(cellToPlayOn between: 0@0 and: 2@2)
		ifFalse: [ self error: self class invalidCellErrorDescription ].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:55:46' prior: 50917677!
putXAt: cellToPlayOn

	started := true.

	self isOPlaying
		ifTrue: [ self error: self class notPlayerTurnErrorDescription ].
	self isXPlaying
		ifTrue: [
			((playerXCells includes: cellToPlayOn) or: [playerOCells includes: cellToPlayOn])
				ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
			self validateCellCoordinates: cellToPlayOn.
			(playerXCells size >= 3)
				ifTrue: [ self error: self class allPiecesPlacedErrorDescription ].
			
			playerXCells add: cellToPlayOn.		
			currentPlayer := TerniLapilliPlayerO playing: self.
			].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:55:55' prior: 50917923!
putOAt: cellToPlayOn

	self isXPlaying
		ifTrue: [ self error: self class notPlayerTurnErrorDescription ].
	self isOPlaying
		ifTrue: [
			((playerXCells includes: cellToPlayOn) or: [playerOCells includes: cellToPlayOn])
				ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
			self validateCellCoordinates: cellToPlayOn.
			(playerOCells size >= 3)
				ifTrue: [ self error: self class allPiecesPlacedErrorDescription ].
				
			playerOCells add: cellToPlayOn.
			currentPlayer := TerniLapilliPlayerX playing: self.
			].! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutPieceOnFullCell stamp: 'CJ 10/29/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotPlacePiecesWhenAllHaveBeenPlaced stamp: 'CJ 10/29/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test13MovingOChangesTurnToX stamp: 'CJ 10/29/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveFromEmptyCell stamp: 'CJ 10/29/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveRivalPiece stamp: 'CJ 10/29/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'CJ 10/29/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'CJ 10/29/2020 19:55:57'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:56:11' prior: 50917837!
moveOFrom: startCell to: endCell
	
	self isOPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	self validateCellCoordinates: endCell .
	(playerXCells includes: startCell)
		ifTrue: [ self error: self class cannotMoveOtherPlayerPieceErrorDescription ].
	(playerOCells includes: startCell)
		ifFalse: [ self error: self class cannotMoveFromEmptyCellErrorDescription ].
	((playerXCells includes: endCell) or: [playerOCells includes: endCell])
		ifTrue: [ self error: self class cannotMoveToFullCellErrorDescription ].
	(playerOCells size < 3)
		ifTrue: [ self error: self class cannotMoveBeforeAllPiecesHaveBeenPlacedErrorDescription ].
	
	currentPlayer := TerniLapilliPlayerX playing: self.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:56:12' prior: 50918052!
moveOFrom: startCell to: endCell
	
	self isOPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	self validateCellCoordinates: endCell.
	(playerXCells includes: startCell)
		ifTrue: [ self error: self class cannotMoveOtherPlayerPieceErrorDescription ].
	(playerOCells includes: startCell)
		ifFalse: [ self error: self class cannotMoveFromEmptyCellErrorDescription ].
	((playerXCells includes: endCell) or: [playerOCells includes: endCell])
		ifTrue: [ self error: self class cannotMoveToFullCellErrorDescription ].
	(playerOCells size < 3)
		ifTrue: [ self error: self class cannotMoveBeforeAllPiecesHaveBeenPlacedErrorDescription ].
	
	currentPlayer := TerniLapilliPlayerX playing: self.! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 19:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 19:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 19:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 19:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutPieceOnFullCell stamp: 'CJ 10/29/2020 19:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 19:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 19:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotPlacePiecesWhenAllHaveBeenPlaced stamp: 'CJ 10/29/2020 19:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 19:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test13MovingOChangesTurnToX stamp: 'CJ 10/29/2020 19:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveFromEmptyCell stamp: 'CJ 10/29/2020 19:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveRivalPiece stamp: 'CJ 10/29/2020 19:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'CJ 10/29/2020 19:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'CJ 10/29/2020 19:56:13'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:56:25' prior: 50917813!
moveXFrom: startCell to: endCell

	self isXPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	self validateCellCoordinates: endCell.
	(playerOCells includes: startCell)
		ifTrue: [ self error: self class cannotMoveOtherPlayerPieceErrorDescription ].
	(playerXCells includes: startCell)
		ifFalse: [ self error: self class cannotMoveFromEmptyCellErrorDescription ].
	((playerXCells includes: endCell) or: [playerOCells includes: endCell])
		ifTrue: [ self error: self class cannotMoveToFullCellErrorDescription ].
	
	currentPlayer := TerniLapilliPlayerO playing: self.! !

!testRun: #TerniLapilliTest #test00GameStartsProperly stamp: 'CJ 10/29/2020 19:56:26'!
PASSED!

!testRun: #TerniLapilliTest #test01OPlaysAfterX stamp: 'CJ 10/29/2020 19:56:26'!
PASSED!

!testRun: #TerniLapilliTest #test02ODoesntPlayAfterO stamp: 'CJ 10/29/2020 19:56:26'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/29/2020 19:56:26'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:56:26'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPutWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:56:26'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutPieceOnFullCell stamp: 'CJ 10/29/2020 19:56:26'!
PASSED!

!testRun: #TerniLapilliTest #test07RowCannotExceed2 stamp: 'CJ 10/29/2020 19:56:26'!
PASSED!

!testRun: #TerniLapilliTest #test08RowCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:56:26'!
PASSED!

!testRun: #TerniLapilliTest #test09ColumnCannotBeLessThan0 stamp: 'CJ 10/29/2020 19:56:26'!
PASSED!

!testRun: #TerniLapilliTest #test10ColumnCannotExceed2 stamp: 'CJ 10/29/2020 19:56:26'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotPlacePiecesWhenAllHaveBeenPlaced stamp: 'CJ 10/29/2020 19:56:26'!
PASSED!

!testRun: #TerniLapilliTest #test12MovingXChangesTurnToO stamp: 'CJ 10/29/2020 19:56:26'!
PASSED!

!testRun: #TerniLapilliTest #test13MovingOChangesTurnToX stamp: 'CJ 10/29/2020 19:56:26'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveWhenItsNotTheirTurn stamp: 'CJ 10/29/2020 19:56:26'!
PASSED!

!testRun: #TerniLapilliTest #test15CannotMoveFromEmptyCell stamp: 'CJ 10/29/2020 19:56:26'!
PASSED!

!testRun: #TerniLapilliTest #test16CannotMoveRivalPiece stamp: 'CJ 10/29/2020 19:56:26'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'CJ 10/29/2020 19:56:26'!
PASSED!

!testRun: #TerniLapilliTest #test18 stamp: 'CJ 10/29/2020 19:56:26'!
PASSED!
!TerniLapilli methodsFor: 'nil' stamp: 'CJ 10/29/2020 19:58:13'!
cellIsEmpty: cellToCheck

	^ ((playerXCells includes: cellToCheck) or: [playerOCells includes: cellToCheck]) not.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:59:07' prior: 50918078!
moveOFrom: startCell to: endCell
	
	self isOPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	self validateCellCoordinates: endCell.
	(playerXCells includes: startCell)
		ifTrue: [ self error: self class cannotMoveOtherPlayerPieceErrorDescription ].
	(self cellIsEmpty: startCell)
		ifFalse: [ self error: self class cannotMoveFromEmptyCellErrorDescription ].
	((playerXCells includes: endCell) or: [playerOCells includes: endCell])
		ifTrue: [ self error: self class cannotMoveToFullCellErrorDescription ].
	(playerOCells size < 3)
		ifTrue: [ self error: self class cannotMoveBeforeAllPiecesHaveBeenPlacedErrorDescription ].
	
	currentPlayer := TerniLapilliPlayerX playing: self.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 19:59:47'!
cellIsFull: cellToCheck

	^ (playerXCells includes: cellToCheck) or: [playerOCells includes: cellToCheck].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 20:00:06' prior: 50918241!
cellIsEmpty: cellToCheck

	^ (self cellIsFull: cellToCheck) not.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 20:01:05' prior: 50918248!
moveOFrom: startCell to: endCell
	
	self isOPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
	self validateCellCoordinates: endCell.
	(playerXCells includes: startCell)
		ifTrue: [ self error: self class cannotMoveOtherPlayerPieceErrorDescription ].
	(self cellIsFull: startCell)
		ifFalse: [ self error: self class cannotMoveFromEmptyCellErrorDescription ].
	(self cellIsFull: endCell)
		ifTrue: [ self error: self class cannotMoveToFullCellErrorDescription ].
	(playerOCells size < 3)
		ifTrue: [ self error: self class cannotMoveBeforeAllPiecesHaveBeenPlacedErrorDescription ].
	
	currentPlayer := TerniLapilliPlayerX playing: self.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 20:01:40' prior: 50918286!
moveOFrom: startCell to: endCell
	
	self isOPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
		
	self validateCellCoordinates: endCell.
	
	(playerXCells includes: startCell)
		ifTrue: [ self error: self class cannotMoveOtherPlayerPieceErrorDescription ].
		
	(self cellIsFull: startCell)
		ifFalse: [ self error: self class cannotMoveFromEmptyCellErrorDescription ].
		
	(self cellIsFull: endCell)
		ifTrue: [ self error: self class cannotMoveToFullCellErrorDescription ].
		
	(playerOCells size < 3)
		ifTrue: [ self error: self class cannotMoveBeforeAllPiecesHaveBeenPlacedErrorDescription ].
	
	currentPlayer := TerniLapilliPlayerX playing: self.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 20:03:46' prior: 50918162!
moveXFrom: startCell to: endCell

	self isXPlaying
		ifFalse: [ self error: self class notPlayerTurnErrorDescription ].
		
	self validateCellCoordinates: endCell.
	
	(playerOCells includes: startCell)
		ifTrue: [ self error: self class cannotMoveOtherPlayerPieceErrorDescription ].
	
	(playerXCells includes: startCell)
		ifFalse: [ self error: self class cannotMoveFromEmptyCellErrorDescription ].
	
	(self cellIsFull: endCell)
		ifTrue: [ self error: self class cannotMoveToFullCellErrorDescription ].
	
	currentPlayer := TerniLapilliPlayerO playing: self.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 20:04:34'!
put: pieceToPlace at: cellToPlayOn

	started := true.

	self isOPlaying
		ifTrue: [ self error: self class notPlayerTurnErrorDescription ].
	self isXPlaying
		ifTrue: [
			((playerXCells includes: cellToPlayOn) or: [playerOCells includes: cellToPlayOn])
				ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
			self validateCellCoordinates: cellToPlayOn.
			(playerXCells size >= 3)
				ifTrue: [ self error: self class allPiecesPlacedErrorDescription ].
			
			playerXCells add: cellToPlayOn.		
			currentPlayer := TerniLapilliPlayerO playing: self.
			].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 20:06:31' prior: 50918356!
put: pieceToPlace at: cellToPlayOn

	started := true.

	self isOPlaying
		ifTrue: [ self error: self class notPlayerTurnErrorDescription ].
	self isXPlaying
		ifTrue: [
			((playerXCells includes: cellToPlayOn) or: [playerOCells includes: cellToPlayOn])
				ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
			self validateCellCoordinates: cellToPlayOn.
			(playerXCells size >= 3)
				ifTrue: [ self error: self class allPiecesPlacedErrorDescription ].
			
			playerXCells add: cellToPlayOn.		
			currentPlayer := TerniLapilliPlayerO playing: self.
			].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/29/2020 20:08:32' prior: 50918378!
put: pieceToPlace at: cellToPlayOn

	started := true.

	self isOPlaying
		ifTrue: [ self error: self class notPlayerTurnErrorDescription ].
	self isXPlaying
		ifTrue: [
			((playerXCells includes: cellToPlayOn) or: [playerOCells includes: cellToPlayOn])
				ifTrue: [ self error: self class cellMustBeEmptyErrorDescription ].
			self validateCellCoordinates: cellToPlayOn.
			(playerXCells size >= 3)
				ifTrue: [ self error: self class allPiecesPlacedErrorDescription ].
			
			playerXCells add: cellToPlayOn.		
			currentPlayer := TerniLapilliPlayerO playing: self.
			].! !

!classRemoval: #TerniLapilliPlayerX stamp: 'CJ 10/30/2020 18:04:19'!
TerniLapilliPlayer subclass: #TerniLapilliPlayerX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classRemoval: #TerniLapilliPlayerO stamp: 'CJ 10/30/2020 18:04:19'!
TerniLapilliPlayer subclass: #TerniLapilliPlayerO
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classRemoval: #TerniLapilliPlayer stamp: 'CJ 10/30/2020 18:04:20'!
Object subclass: #TerniLapilliPlayer
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classRemoval: #TerniLapilli stamp: 'CJ 10/30/2020 18:04:20'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer started playerXCells playerOCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classRemoval: #TerniLapilliTest stamp: 'CJ 10/30/2020 18:04:20'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliTest category: 'TerniLapilli' stamp: 'CJ 10/30/2020 18:04:53'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'CJ 10/30/2020 18:05:46'!
Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliTest methodsFor: 'nil' stamp: 'CJ 10/30/2020 18:05:41'!
test01

	| game |
	game := TerniLapilli new.
	
	self assert: game isXPlaying.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 18:05:54' prior: 50918473!
test01

	| game |
	
	game := TerniLapilli new.
	
	self assert: game isXPlaying.! !

!testRun: #TerniLapilliTest #test01 stamp: 'CJ 10/30/2020 18:05:55'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/30/2020 18:06:07'!
isXPlaying
	self shouldBeImplemented.! !

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'CJ 10/30/2020 18:06:26'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/30/2020 18:06:23' prior: 50918487!
isXPlaying
	
	^ currentPlayer = #X.! !

!testRun: #TerniLapilliTest #test01 stamp: 'CJ 10/30/2020 18:06:29'!
FAILURE!
!TerniLapilli methodsFor: 'nil' stamp: 'CJ 10/30/2020 18:06:49' overrides: 16896425!
initialize

	currentPlayer = #X.! !

!testRun: #TerniLapilliTest #test01 stamp: 'CJ 10/30/2020 18:06:51'!
FAILURE!

!testRun: #TerniLapilliTest #test01 stamp: 'CJ 10/30/2020 18:06:51'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 18:07:30' prior: 50918506 overrides: 16896425!
initialize

	currentPlayer := #X.! !

!testRun: #TerniLapilliTest #test01 stamp: 'CJ 10/30/2020 18:07:31'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 18:08:07' prior: 50918479!
test01

	| game |
	
	game := TerniLapilli new.
	
	self assert: game isXPlaying.
	self deny: game hasStarted.
	self deny: game isOver.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 18:08:18' prior: 50918523!
test01

	| game |
	
	game := TerniLapilli new.
	
	self assert: game isXPlaying.
	self deny: game isOPlaying.
	self deny: game hasStarted.
	self deny: game isOver.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 18:08:29' prior: 50918516 overrides: 16896425!
initialize! !
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/30/2020 18:08:36' prior: 50918499!
isXPlaying
	
	^ true! !

Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'CJ 10/30/2020 18:08:50'!
Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 18:10:33' prior: 50918531!
test01

	| game |
	
	game := TerniLapilli new.
	
	self assert: game isXPlaying.
	self deny: game isOPlaying.
	self deny: game hasStarted.
	self deny: game isOver.
	self deny: game hasPlayerXWon.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 18:10:41' prior: 50918559!
test01

	| game |
	
	game := TerniLapilli new.
	
	self assert: game isXPlaying.
	self deny: game isOPlaying.
	self deny: game hasStarted.
	self deny: game isOver.
	self deny: game hasPlayerXWon.
	self deny: game hasPlayerOWon.! !

!testRun: #TerniLapilliTest #test01 stamp: 'CJ 10/30/2020 18:10:42'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/30/2020 18:10:52'!
isOPlaying
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/30/2020 18:10:57' prior: 50918581!
isOPlaying
	
	^ false! !

!testRun: #TerniLapilliTest #test01 stamp: 'CJ 10/30/2020 18:10:59'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/30/2020 18:11:07'!
hasStarted
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/30/2020 18:11:10' prior: 50918591!
hasStarted
	
	^ false! !

!testRun: #TerniLapilliTest #test01 stamp: 'CJ 10/30/2020 18:11:12'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/30/2020 18:11:20'!
isOver
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/30/2020 18:11:25' prior: 50918601!
isOver
	
	^ false! !

!testRun: #TerniLapilliTest #test01 stamp: 'CJ 10/30/2020 18:11:27'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/30/2020 18:11:34'!
hasPlayerXWon
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/30/2020 18:11:38' prior: 50918611!
hasPlayerXWon
	
	^ false! !

!testRun: #TerniLapilliTest #test01 stamp: 'CJ 10/30/2020 18:11:39'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/30/2020 18:11:55'!
hasPlayerOWon
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/30/2020 18:12:00' prior: 50918622!
hasPlayerOWon
	
	^ false! !

!testRun: #TerniLapilliTest #test01 stamp: 'CJ 10/30/2020 18:12:06'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'CJ 10/30/2020 18:12:06'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 18:12:54' prior: 50918569!
test01

	| game |
	
	game := TerniLapilli new.
	
	self assert: game isXPlaying.
	self deny: game isOPlaying.
	self deny: game hasStarted.
	self deny: game isOver.
	self deny: game hasPlayerXWon.
	self deny: game hasPlayerOWon.! !

!testRun: #TerniLapilliTest #test01 stamp: 'CJ 10/30/2020 18:12:59'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'CJ 10/30/2020 18:12:59'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 18:14:07'!
test02

	| game |
	
	game := TerniLapilli new.
	
	game putPiece: #X at: 0@0.
	
	self assert: game isOPlaying.
	self deny: game isXPlaying.! !

!testRun: #TerniLapilliTest #test02 stamp: 'CJ 10/30/2020 18:14:32'!
ERROR!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 18:14:45'!
putPiece: aSymbol at: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 18:15:04' prior: 50918660!
putPiece: pieceToPut at: cellToPlayOn! !

!testRun: #TerniLapilliTest #test02 stamp: 'CJ 10/30/2020 18:15:06'!
FAILURE!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'CJ 10/30/2020 18:15:40'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 18:15:37' prior: 50918540 overrides: 16896425!
initialize

	currentPlayer := #X.! !
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/30/2020 18:15:55' prior: 50918544!
isXPlaying
	
	^ currentPlayer = #X.! !

!testRun: #TerniLapilliTest #test01 stamp: 'CJ 10/30/2020 18:15:58'!
PASSED!

!testRun: #TerniLapilliTest #test02 stamp: 'CJ 10/30/2020 18:15:58'!
FAILURE!

!testRun: #TerniLapilliTest #test02 stamp: 'CJ 10/30/2020 18:15:58'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/30/2020 18:16:11' prior: 50918585!
isOPlaying
	
	^ currentPlayer = #O.! !

!testRun: #TerniLapilliTest #test01 stamp: 'CJ 10/30/2020 18:16:13'!
PASSED!

!testRun: #TerniLapilliTest #test02 stamp: 'CJ 10/30/2020 18:16:13'!
FAILURE!

!testRun: #TerniLapilliTest #test02 stamp: 'CJ 10/30/2020 18:16:13'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 18:16:29' prior: 50918665!
putPiece: pieceToPut at: cellToPlayOn

	currentPlayer := #O.! !

!testRun: #TerniLapilliTest #test02 stamp: 'CJ 10/30/2020 18:16:32'!
FAILURE!

!testRun: #TerniLapilliTest #test02 stamp: 'CJ 10/30/2020 18:17:02'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'CJ 10/30/2020 18:17:04'!
PASSED!

!testRun: #TerniLapilliTest #test02 stamp: 'CJ 10/30/2020 18:17:04'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 18:17:22'!
test03

	| game |
	
	game := TerniLapilli new.
	
	game putPiece: #X at: 0@0.
	game putPiece: #O at: 0@1.
	
	self assert: game isOPlaying.
	self deny: game isXPlaying.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 18:17:42' prior: 50918723!
test03

	| game |
	
	game := TerniLapilli new.
	
	game putPiece: #X at: 0@0.
	game putPiece: #O at: 0@1.
	
	self assert: game isXPlaying.
	self deny: game isOPlaying.! !

!testRun: #TerniLapilliTest #test03 stamp: 'CJ 10/30/2020 18:17:42'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 18:18:47' prior: 50918708!
putPiece: pieceToPut at: cellToPlayOn

	pieceToPut = #X ifTrue: [currentPlayer := #O.].
	pieceToPut = #O ifTrue: [currentPlayer := #X.].! !

!testRun: #TerniLapilliTest #test03 stamp: 'CJ 10/30/2020 18:18:50'!
FAILURE!

!testRun: #TerniLapilliTest #test03 stamp: 'CJ 10/30/2020 18:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test01 stamp: 'CJ 10/30/2020 18:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test02 stamp: 'CJ 10/30/2020 18:19:06'!
PASSED!

!testRun: #TerniLapilliTest #test03 stamp: 'CJ 10/30/2020 18:19:06'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 18:19:21'!
test01GameStartsCorrectly

	| game |
	
	game := TerniLapilli new.
	
	self assert: game isXPlaying.
	self deny: game isOPlaying.
	self deny: game hasStarted.
	self deny: game isOver.
	self deny: game hasPlayerXWon.
	self deny: game hasPlayerOWon.! !

!methodRemoval: TerniLapilliTest #test01 stamp: 'CJ 10/30/2020 18:19:21'!
test01

	| game |
	
	game := TerniLapilli new.
	
	self assert: game isXPlaying.
	self deny: game isOPlaying.
	self deny: game hasStarted.
	self deny: game isOver.
	self deny: game hasPlayerXWon.
	self deny: game hasPlayerOWon.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 18:19:35'!
test02OPlaysAfterX

	| game |
	
	game := TerniLapilli new.
	
	game putPiece: #X at: 0@0.
	
	self assert: game isOPlaying.
	self deny: game isXPlaying.! !

!methodRemoval: TerniLapilliTest #test02 stamp: 'CJ 10/30/2020 18:19:35'!
test02

	| game |
	
	game := TerniLapilli new.
	
	game putPiece: #X at: 0@0.
	
	self assert: game isOPlaying.
	self deny: game isXPlaying.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 18:19:45'!
test03XPlaysAfterO

	| game |
	
	game := TerniLapilli new.
	
	game putPiece: #X at: 0@0.
	game putPiece: #O at: 0@1.
	
	self assert: game isXPlaying.
	self deny: game isOPlaying.! !

!methodRemoval: TerniLapilliTest #test03 stamp: 'CJ 10/30/2020 18:19:45'!
test03

	| game |
	
	game := TerniLapilli new.
	
	game putPiece: #X at: 0@0.
	game putPiece: #O at: 0@1.
	
	self assert: game isXPlaying.
	self deny: game isOPlaying.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 18:19:55'!
test04

	| game |
	
	game := TerniLapilli new.
	
	game putPiece: #X at: 0@0.
	game putPiece: #O at: 0@1.
	
	self assert: game isXPlaying.
	self deny: game isOPlaying.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 18:21:15' prior: 50918814!
test04

	| game |
	
	game := TerniLapilli new.
	
	game putPiece: #X at: 0@0.
	
	self
		should: [game putPiece: #X at: 0@1.]
		raise: Error 
		description: TerniLapilli wrongPlayerTurnErrorDescription.! !

!testRun: #TerniLapilliTest #test04 stamp: 'CJ 10/30/2020 18:21:17'!
ERROR!
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/30/2020 18:21:25'!
wrongPlayerTurnErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/30/2020 18:21:39' prior: 50918835!
wrongPlayerTurnErrorDescription
	
	^ 'It''s not that player''s turn'! !

!testRun: #TerniLapilliTest #test04 stamp: 'CJ 10/30/2020 18:21:41'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 18:24:25' prior: 50918743!
putPiece: pieceToPut at: cellToPlayOn

	currentPlayer = #X ifTrue: [
		pieceToPut = #X
			ifTrue: [currentPlayer := #O.]
			ifFalse: [self error wrongPlayerTurnErrorDescription.]
		].
	
	pieceToPut = #O ifTrue: [currentPlayer := #X.].! !
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 18:25:01' prior: 50918848!
putPiece: pieceToPut at: cellToPlayOn

	currentPlayer = #X ifTrue: [
		pieceToPut = #X
			ifTrue: [currentPlayer := #O.]
			ifFalse: [self error wrongPlayerTurnErrorDescription.]
		].
	
	currentPlayer = #O ifTrue: [
		pieceToPut = #O
			ifTrue: [currentPlayer := #X.]
			ifFalse: [self error wrongPlayerTurnErrorDescription.]
		].! !

!testRun: #TerniLapilliTest #test04 stamp: 'CJ 10/30/2020 18:25:13'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 18:25:13'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 18:25:13'!
ERROR!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 18:25:13'!
ERROR!

!testRun: #TerniLapilliTest #test04 stamp: 'CJ 10/30/2020 18:25:13'!
ERROR!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 18:25:20'!
ERROR!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 18:25:40' prior: 50918859!
putPiece: pieceToPut at: cellToPlayOn

	currentPlayer = #X ifTrue: [
		pieceToPut = #X
			ifTrue: [currentPlayer := #O.]
			ifFalse: [self error: self wrongPlayerTurnErrorDescription.]
		].
	
	currentPlayer = #O ifTrue: [
		pieceToPut = #O
			ifTrue: [currentPlayer := #X.]
			ifFalse: [self error: self wrongPlayerTurnErrorDescription.]
		].! !

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 18:25:42'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 18:25:56'!
wrongPlayerTurnErrorDescription
	self shouldBeImplemented.! !

!methodRemoval: TerniLapilli #wrongPlayerTurnErrorDescription stamp: 'CJ 10/30/2020 18:26:08'!
wrongPlayerTurnErrorDescription
	self shouldBeImplemented.!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 18:26:23' prior: 50918889!
putPiece: pieceToPut at: cellToPlayOn

	currentPlayer = #X ifTrue: [
		pieceToPut = #X
			ifTrue: [currentPlayer := #O.]
			ifFalse: [self error: self class wrongPlayerTurnErrorDescription.]
		].
	
	currentPlayer = #O ifTrue: [
		pieceToPut = #O
			ifTrue: [currentPlayer := #X.]
			ifFalse: [self error: self class wrongPlayerTurnErrorDescription.]
		].! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 18:41:11'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 18:41:11'!
ERROR!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 18:41:11'!
ERROR!

!testRun: #TerniLapilliTest #test04 stamp: 'CJ 10/30/2020 18:41:11'!
ERROR!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 18:41:13'!
ERROR!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 18:41:55'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 18:41:55'!
ERROR!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 18:41:55'!
ERROR!

!testRun: #TerniLapilliTest #test04 stamp: 'CJ 10/30/2020 18:41:55'!
ERROR!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 18:41:58'!
ERROR!

!methodRemoval: TerniLapilli #putPiece:at: stamp: 'CJ 10/30/2020 18:45:37'!
putPiece: pieceToPut at: cellToPlayOn

	currentPlayer = #X ifTrue: [
		pieceToPut = #X
			ifTrue: [currentPlayer := #O.]
			ifFalse: [self error: self class wrongPlayerTurnErrorDescription.]
		].
	
	currentPlayer = #O ifTrue: [
		pieceToPut = #O
			ifTrue: [currentPlayer := #X.]
			ifFalse: [self error: self class wrongPlayerTurnErrorDescription.]
		].!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 18:46:13' prior: 50918783!
test02OPlaysAfterX

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	
	self assert: game isOPlaying.
	self deny: game isXPlaying.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 18:46:25' prior: 50918798!
test03XPlaysAfterO

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 0@1.
	
	self assert: game isXPlaying.
	self deny: game isOPlaying.! !

!methodRemoval: TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 18:46:46'!
test03XPlaysAfterO

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 0@1.
	
	self assert: game isXPlaying.
	self deny: game isOPlaying.!

!methodRemoval: TerniLapilliTest #test04 stamp: 'CJ 10/30/2020 18:46:47'!
test04

	| game |
	
	game := TerniLapilli new.
	
	game putPiece: #X at: 0@0.
	
	self
		should: [game putPiece: #X at: 0@1.]
		raise: Error 
		description: TerniLapilli wrongPlayerTurnErrorDescription.!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 18:46:50'!
ERROR!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 18:46:50'!
ERROR!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 18:46:58'!
putPieceAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 18:47:02' prior: 50919010!
putPieceAt: aPoint ! !

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 18:47:03'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 18:48:48' prior: 50919015!
putPieceAt: cellToPlayIn

	currentPlayer = #X
		ifTrue: [currentPlayer := #O]
		ifFalse: [
			currentPlayer = #O
				ifTrue: [currentPlayer := #X].
			].! !

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 18:48:54'!
FAILURE!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 18:49:11'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 18:49:11'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 18:49:11'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 18:49:15'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 18:49:15'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 18:49:54' prior: 50918972!
test02OPlaysAfterX

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	
	self assert: game isXPlaying.
	self deny: game isOPlaying.! !

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 18:49:58'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 18:49:58'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 18:49:58'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:07:58'!
test03

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	
	self assert: game isXPlaying.
	self deny: game isOPlaying.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:08:18' prior: 50919065!
test03

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.	
	game putPieceAt: 2@0.
	
	self assert: game isOPlaying.
	self deny: game isXPlaying.! !

!testRun: #TerniLapilliTest #test03 stamp: 'CJ 10/30/2020 19:08:19'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 19:08:19'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:08:19'!
PASSED!

!testRun: #TerniLapilliTest #test03 stamp: 'CJ 10/30/2020 19:08:19'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:09:14'!
test03XPlaysAfterO

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	
	self assert: game isXPlaying.
	self deny: game isOPlaying.! !

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 19:09:15'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 19:09:15'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:09:15'!
PASSED!

!testRun: #TerniLapilliTest #test03 stamp: 'CJ 10/30/2020 19:09:15'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 19:09:15'!
PASSED!

!methodRemoval: TerniLapilliTest #test03 stamp: 'CJ 10/30/2020 19:09:23'!
test03

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.	
	game putPieceAt: 2@0.
	
	self assert: game isOPlaying.
	self deny: game isXPlaying.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:09:44' prior: 50919048!
test02OPlaysAfterX

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	
	self assert: game isOPlaying.
	self deny: game isXPlaying.! !

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:09:45'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 19:09:45'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:09:45'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 19:09:45'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:11:09' prior: 50919094!
test03XPlaysAfterO

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	
	self
		should: [game putPieceAt: 0@0]
		raise: Error
		description: TerniLapilli cannotPutOnFullCellErrorDescription.! !

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 19:11:12'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:11:25'!
test04

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	
	self
		should: [game putPieceAt: 0@0]
		raise: Error
		description: TerniLapilli cannotPutOnFullCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:09:14' prior: 50919145!
test03XPlaysAfterO

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	
	self assert: game isXPlaying.
	self deny: game isOPlaying.! !

!testRun: #TerniLapilliTest #test04 stamp: 'CJ 10/30/2020 19:11:41'!
ERROR!
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/30/2020 19:11:50'!
cannotPutOnFullCellErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/30/2020 19:12:00' prior: 50919178!
cannotPutOnFullCellErrorDescription
	
	^ 'Cannot place a piece on a full cell'! !

!testRun: #TerniLapilliTest #test04 stamp: 'CJ 10/30/2020 19:12:02'!
FAILURE!

Object subclass: #TerniLapilliPlayer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliPlayer category: 'TerniLapilli' stamp: 'CJ 10/30/2020 19:14:56'!
Object subclass: #TerniLapilliPlayer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

Object subclass: #TerniLapilliPlayer
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliPlayer category: 'TerniLapilli' stamp: 'CJ 10/30/2020 19:15:06'!
Object subclass: #TerniLapilliPlayer
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TerniLapilliPlayer subclass: #TerniLapilliPlayerX
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TerniLapilliPlayer subclass: #TerniLapilliPlayerX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliPlayerX category: 'TerniLapilli' stamp: 'CJ 10/30/2020 19:15:25'!
TerniLapilliPlayer subclass: #TerniLapilliPlayerX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TerniLapilliPlayer subclass: #TerniLapilliPlayerO
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliPlayerO category: 'TerniLapilli' stamp: 'CJ 10/30/2020 19:15:30'!
TerniLapilliPlayer subclass: #TerniLapilliPlayerO
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:16:03' prior: 50918680 overrides: 16896425!
initialize

	currentPlayer := TerniLapilliPlayerX playing: self.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 19:16:08'!
ERROR!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:16:08'!
ERROR!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 19:16:08'!
ERROR!

!testRun: #TerniLapilliTest #test04 stamp: 'CJ 10/30/2020 19:16:08'!
ERROR!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 19:16:10'!
ERROR!
!TerniLapilliPlayer class methodsFor: 'instance creation' stamp: 'CJ 10/30/2020 19:16:18'!
playing: aTerniLapilli 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializePlaying: aTerniLapilli ! !
!TerniLapilliPlayer class methodsFor: 'instance creation' stamp: 'CJ 10/30/2020 19:16:29' prior: 50919265!
playing: aTerniLapilli

	^self new initializePlaying: aTerniLapilli ! !
!TerniLapilliPlayer class methodsFor: 'instance creation' stamp: 'CJ 10/30/2020 19:16:33' prior: 50919274!
playing: aTerniLapilli

	^ self new initializePlaying: aTerniLapilli ! !
!TerniLapilliPlayer class methodsFor: 'instance creation' stamp: 'CJ 10/30/2020 19:16:35' prior: 50919280!
playing: aTerniLapilli

	^ self new initializePlaying: aTerniLapilli.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 19:16:37'!
ERROR!
!TerniLapilliPlayer methodsFor: 'no messages' stamp: 'CJ 10/30/2020 19:17:09'!
initializePlaying: aTerniLapilli

	game := aTerniLapilli.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 19:17:13'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/30/2020 19:17:28' prior: 50918684!
isXPlaying
	
	^ currentPlayer isX.! !
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/30/2020 19:17:42' prior: 50918696!
isOPlaying
	
	^ currentPlayer isO.! !
!TerniLapilliPlayer methodsFor: 'nil' stamp: 'CJ 10/30/2020 19:18:00'!
isX

	^ false! !
!TerniLapilliPlayer methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:18:05'!
isO

	^ false! !
!TerniLapilliPlayerO methodsFor: 'nil' stamp: 'CJ 10/30/2020 19:18:17' overrides: 50919314!
isO

	^ true! !
!TerniLapilliPlayerX methodsFor: 'nil' stamp: 'CJ 10/30/2020 19:18:27' overrides: 50919310!
isX

	^ true! !
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 19:19:53'!
advanceTurnX: cellToPlayIn

	currentPlayer := TerniLapilliPlayerO playing: self.! !
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 19:20:23'!
advanceTurnO: cellToPlayIn

	currentPlayer := TerniLapilliPlayerX playing: self.! !
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 19:20:41' prior: 50919022!
putPieceAt: cellToPlayIn

	currentPlayer lalo: cellToPlayIn.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 19:20:45'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:20:45'!
ERROR!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 19:20:45'!
ERROR!

!testRun: #TerniLapilliTest #test04 stamp: 'CJ 10/30/2020 19:20:45'!
ERROR!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:20:47'!
ERROR!
!TerniLapilliPlayer methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:20:59'!
lalo: aPoint 
	self shouldBeImplemented.! !
!TerniLapilliPlayer methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:21:09' prior: 50919355!
lalo: aPoint 
	
	self subclassResponsibility! !
!TerniLapilliPlayer methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:21:13' prior: 50919360!
lalo: laloCell 
	
	self subclassResponsibility! !

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:21:15'!
ERROR!
!TerniLapilliPlayerX methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:21:25' overrides: 50919365!
lalo: aPoint 
	self shouldBeImplemented.! !
!TerniLapilliPlayerX methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:21:50' prior: 50919373 overrides: 50919365!
lalo: laloCell 
	
	game advanceTurnX: laloCell.! !

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:21:51'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 19:21:54'!
ERROR!
!TerniLapilliPlayerO methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:21:58' overrides: 50919365!
lalo: aPoint 
	self shouldBeImplemented.! !
!TerniLapilliPlayerO methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:22:12' prior: 50919390 overrides: 50919365!
lalo: laloCell 
	
	game advanceTurnO: laloCell.! !

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 19:22:14'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'CJ 10/30/2020 19:22:17'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 19:22:40'!
playTurnO: cellToPlayIn

	currentPlayer := TerniLapilliPlayerX playing: self.! !
!TerniLapilliPlayerO methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:22:40' prior: 50919396 overrides: 50919365!
lalo: laloCell 
	
	game playTurnO: laloCell.! !

!methodRemoval: TerniLapilli #advanceTurnO: stamp: 'CJ 10/30/2020 19:22:40'!
advanceTurnO: cellToPlayIn

	currentPlayer := TerniLapilliPlayerX playing: self.!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 19:22:54'!
playTurnX: cellToPlayIn

	currentPlayer := TerniLapilliPlayerO playing: self.! !
!TerniLapilliPlayerX methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:22:54' prior: 50919379 overrides: 50919365!
lalo: laloCell 
	
	game playTurnX: laloCell.! !

!methodRemoval: TerniLapilli #advanceTurnX: stamp: 'CJ 10/30/2020 19:22:54'!
advanceTurnX: cellToPlayIn

	currentPlayer := TerniLapilliPlayerO playing: self.!
!TerniLapilliPlayerO methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:23:29'!
putPiece: laloCell 
	
	game playTurnO: laloCell.! !
!TerniLapilliPlayerX methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:23:29'!
putPiece: laloCell 
	
	game playTurnX: laloCell.! !
!TerniLapilliPlayer methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:23:29'!
putPiece: laloCell 
	
	self subclassResponsibility! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:23:29' prior: 50919336!
putPieceAt: cellToPlayIn

	currentPlayer putPiece: cellToPlayIn.! !

!methodRemoval: TerniLapilliPlayerO #lalo: stamp: 'CJ 10/30/2020 19:23:29'!
lalo: laloCell 
	
	game playTurnO: laloCell.!

!methodRemoval: TerniLapilliPlayerX #lalo: stamp: 'CJ 10/30/2020 19:23:29'!
lalo: laloCell 
	
	game playTurnX: laloCell.!

!methodRemoval: TerniLapilliPlayer #lalo: stamp: 'CJ 10/30/2020 19:23:29'!
lalo: laloCell 
	
	self subclassResponsibility!
!TerniLapilliPlayer methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:23:36' prior: 50919449!
putPiece: cellToPlayIn 
	
	self subclassResponsibility! !
!TerniLapilliPlayerO methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:23:45' prior: 50919439 overrides: 50919471!
putPiece: cellToPlayIn 
	
	game playTurnO: cellToPlayIn.! !
!TerniLapilliPlayerX methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:24:04' prior: 50919444 overrides: 50919471!
putPiece: cellToPlayIn 
	
	game playTurnX: cellToPlayIn.! !

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'CJ 10/30/2020 19:25:21'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer fullCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 19:25:19' prior: 50919454!
putPieceAt: cellToPlayIn

	(fullCells includes: cellToPlayIn) ifTrue: [].

	currentPlayer putPiece: cellToPlayIn.! !
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 19:25:34' prior: 50919496!
putPieceAt: cellToPlayIn

	(fullCells includes: cellToPlayIn) ifTrue: [self error: self class cannotPutOnFullCellErrorDescription].

	currentPlayer putPiece: cellToPlayIn.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 19:25:36'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:25:36'!
ERROR!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 19:25:36'!
ERROR!

!testRun: #TerniLapilliTest #test04 stamp: 'CJ 10/30/2020 19:25:36'!
ERROR!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 19:25:59' prior: 50919503!
putPieceAt: cellToPlayIn

	(self cellIsFull: cellToPlayIn) ifTrue: [self error: self class cannotPutOnFullCellErrorDescription].

	currentPlayer putPiece: cellToPlayIn.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 19:26:03'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:26:03'!
ERROR!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 19:26:03'!
ERROR!

!testRun: #TerniLapilliTest #test04 stamp: 'CJ 10/30/2020 19:26:03'!
ERROR!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 19:26:07'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:26:07'!
ERROR!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 19:26:07'!
ERROR!

!testRun: #TerniLapilliTest #test04 stamp: 'CJ 10/30/2020 19:26:07'!
ERROR!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:26:08'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/30/2020 19:26:15'!
cellIsFull: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/30/2020 19:26:48' prior: 50919556!
cellIsFull: cellToPlayIn 
	
	^ fullCells includes: cellToPlayIn.! !

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:26:50'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:27:08' prior: 50919246 overrides: 16896425!
initialize

	fullCells := Set new.
	currentPlayer := TerniLapilliPlayerX playing: self.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 19:27:12'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:27:12'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 19:27:12'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'CJ 10/30/2020 19:27:12'!
FAILURE!

!testRun: #TerniLapilliTest #test04 stamp: 'CJ 10/30/2020 19:27:12'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 19:27:47' prior: 50919523!
putPieceAt: cellToPlayIn

	(self cellIsFull: cellToPlayIn) ifTrue: [self error: self class cannotPutOnFullCellErrorDescription].

	currentPlayer putPiece: cellToPlayIn.
	fullCells add: cellToPlayIn.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 19:28:05'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:28:05'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 19:28:05'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'CJ 10/30/2020 19:28:05'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:29:24'!
test05

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	
	self
		should: [game putPieceAt: 0@0]
		raise: Error
		description: TerniLapilli cannotPutOnFullCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:30:04' prior: 50919611!
test05

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	
	self
		should: [game putPieceAt: 0@0]
		raise: Error
		description: TerniLapilli cannotPutOnFullCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:30:09' prior: 50919621!
test05

	| game |
	
	game := TerniLapilli new.
	
	self
		should: [game putPieceAt: 0@0]
		raise: Error
		description: TerniLapilli cannotPutOnFullCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:30:21' prior: 50919631!
test05

	| game |
	
	game := TerniLapilli new.
	
	self
		should: [game putPieceAt: 3@0]
		raise: Error
		description: TerniLapilli cannotPutOnFullCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:30:33' prior: 50919640!
test05

	| game |
	
	game := TerniLapilli new.
	
	self
		should: [game putPieceAt: 3@0]
		raise: Error
		description: TerniLapilli invalidCellCoordinatesErrorDescription.! !

!testRun: #TerniLapilliTest #test05 stamp: 'CJ 10/30/2020 19:30:40'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:31:07' prior: 50919649!
test05

	| game |
	
	game := TerniLapilli new.
	
	self
		should: [game putPieceAt: 3@0]
		raise: Error
		description: TerniLapilli invalidCellCoordinatesErrorDescription.! !

!testRun: #TerniLapilliTest #test05 stamp: 'CJ 10/30/2020 19:31:08'!
ERROR!
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/30/2020 19:31:18'!
invalidCellCoordinatesErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/30/2020 19:31:36' prior: 50919671!
invalidCellCoordinatesErrorDescription
	
	^ 'Invalid cell coordinates; must be between 0@0 and 2@2'! !

!testRun: #TerniLapilliTest #test05 stamp: 'CJ 10/30/2020 19:31:37'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 19:32:01' prior: 50919590!
putPieceAt: cellToPlayIn

	self validateCell: cellToPlayIn.
	(self cellIsFull: cellToPlayIn) ifTrue: [self error: self class cannotPutOnFullCellErrorDescription].

	currentPlayer putPiece: cellToPlayIn.
	fullCells add: cellToPlayIn.! !

!testRun: #TerniLapilliTest #test05 stamp: 'CJ 10/30/2020 19:32:08'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 19:32:08'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:32:08'!
ERROR!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 19:32:08'!
ERROR!

!testRun: #TerniLapilliTest #test04 stamp: 'CJ 10/30/2020 19:32:08'!
ERROR!

!testRun: #TerniLapilliTest #test05 stamp: 'CJ 10/30/2020 19:32:08'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:32:10'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:32:21'!
validateCell: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:33:52' prior: 50919715!
validateCell: cellToValidate 
	
	(cellToValidate between: 0@0 and: 2@2)
		ifFalse: [self error: self class invalidCellCoordinatesErrorDescription].! !

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:33:55'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 19:33:56'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'CJ 10/30/2020 19:33:57'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 19:33:59'!
PASSED!

!testRun: #TerniLapilliTest #test05 stamp: 'CJ 10/30/2020 19:33:59'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:33:59'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 19:33:59'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'CJ 10/30/2020 19:33:59'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:34:12'!
test04CannotPutPieceOnFullCell

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	
	self
		should: [game putPieceAt: 0@0]
		raise: Error
		description: TerniLapilli cannotPutOnFullCellErrorDescription.! !

!methodRemoval: TerniLapilliTest #test04 stamp: 'CJ 10/30/2020 19:34:12'!
test04

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	
	self
		should: [game putPieceAt: 0@0]
		raise: Error
		description: TerniLapilli cannotPutOnFullCellErrorDescription.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:34:39'!
test05CannotPlayOnInvalidCellCoordinates

	| game |
	
	game := TerniLapilli new.
	
	self
		should: [game putPieceAt: 3@0]
		raise: Error
		description: TerniLapilli invalidCellCoordinatesErrorDescription.! !

!methodRemoval: TerniLapilliTest #test05 stamp: 'CJ 10/30/2020 19:34:39'!
test05

	| game |
	
	game := TerniLapilli new.
	
	self
		should: [game putPieceAt: 3@0]
		raise: Error
		description: TerniLapilli invalidCellCoordinatesErrorDescription.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:34:49'!
test06

	| game |
	
	game := TerniLapilli new.
	
	self
		should: [game putPieceAt: 3@0]
		raise: Error
		description: TerniLapilli invalidCellCoordinatesErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:35:02' prior: 50919784!
test06

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	
	self
		should: [game putPieceAt: 3@0]
		raise: Error
		description: TerniLapilli invalidCellCoordinatesErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:35:50' prior: 50919793!
test06

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	
	self
		should: [game movePieceFrom: 0@0 to: 1@0]
		raise: Error
		description: TerniLapilli cannotMoveBeforePlacingAllPiecesErrorDescription.! !

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/30/2020 19:35:54'!
ERROR!
!TerniLapilli class methodsFor: 'evaluating' stamp: 'CJ 10/30/2020 19:36:02'!
cannotMoveBeforePlacingAllPiecesErrorDescription
	self shouldBeImplemented.! !

!methodRemoval: TerniLapilli class #wrongPlayerTurnErrorDescription stamp: 'CJ 10/30/2020 19:36:17'!
wrongPlayerTurnErrorDescription
	
	^ 'It''s not that player''s turn'!
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/30/2020 19:36:57' prior: 50919815!
cannotMoveBeforePlacingAllPiecesErrorDescription
	
	^ 'Cannot move before each player has placed three pieces'! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 19:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 19:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/30/2020 19:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPlayOnInvalidCellCoordinates stamp: 'CJ 10/30/2020 19:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/30/2020 19:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 19:37:01'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:37:01'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 19:37:01'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/30/2020 19:37:01'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPlayOnInvalidCellCoordinates stamp: 'CJ 10/30/2020 19:37:01'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/30/2020 19:37:01'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/30/2020 19:37:57'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 19:37:57'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:37:57'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 19:37:57'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/30/2020 19:37:57'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPlayOnInvalidCellCoordinates stamp: 'CJ 10/30/2020 19:37:57'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/30/2020 19:37:57'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/30/2020 19:38:15'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 19:38:15'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:38:15'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 19:38:15'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/30/2020 19:38:15'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPlayOnInvalidCellCoordinates stamp: 'CJ 10/30/2020 19:38:15'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/30/2020 19:38:15'!
PASSED!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 19:38:43'!
movePieceFrom: aPoint to: aPoint2 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 19:39:06' prior: 50919908!
movePieceFrom: startCell to: endCell 
	
	self error: self class cannotMoveBeforePlacingAllPiecesErrorDescription.! !

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/30/2020 19:39:08'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 19:39:10'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:39:10'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 19:39:10'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/30/2020 19:39:10'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPlayOnInvalidCellCoordinates stamp: 'CJ 10/30/2020 19:39:10'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/30/2020 19:39:10'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:42:48'!
test07

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	
	self
		should: [game movePieceFrom: 0@0 to: 1@0]
		raise: Error
		description: TerniLapilli cannotMoveBeforePlacingAllPiecesErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:42:57' prior: 50919940!
test07

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	
	self
		should: [game movePieceFrom: 0@0 to: 1@0]
		raise: Error
		description: TerniLapilli cannotMoveBeforePlacingAllPiecesErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:43:11' prior: 50919952!
test07

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 0@0 to: 1@0]
		raise: Error
		description: TerniLapilli cannotMoveBeforePlacingAllPiecesErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:44:02' prior: 50919965!
test07

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 2@1 to: 2@2]
		raise: Error
		description: TerniLapilli cannotMoveBeforePlacingAllPiecesErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:44:13' prior: 50919979!
test07

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 2@1 to: 2@2]
		raise: Error
		description: TerniLapilli cannotMoveOtherPlayerPieceErrorDescription.! !

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/30/2020 19:44:15'!
ERROR!
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/30/2020 19:44:25'!
cannotMoveOtherPlayerPieceErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/30/2020 19:44:37' prior: 50920009!
cannotMoveOtherPlayerPieceErrorDescription
	
	^ 'Cannot move a piece belonging to the other player'! !

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/30/2020 19:44:39'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 19:44:39'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:44:39'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 19:44:39'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/30/2020 19:44:39'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPlayOnInvalidCellCoordinates stamp: 'CJ 10/30/2020 19:44:39'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/30/2020 19:44:39'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/30/2020 19:44:39'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/30/2020 19:44:44'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 19:44:44'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:44:44'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 19:44:44'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/30/2020 19:44:44'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPlayOnInvalidCellCoordinates stamp: 'CJ 10/30/2020 19:44:44'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/30/2020 19:44:44'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/30/2020 19:44:44'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/30/2020 19:44:50'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 19:44:50'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:44:50'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 19:44:50'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/30/2020 19:44:50'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPlayOnInvalidCellCoordinates stamp: 'CJ 10/30/2020 19:44:50'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/30/2020 19:44:50'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/30/2020 19:44:50'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 19:45:18'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:45:18'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 19:45:18'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/30/2020 19:45:18'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPlayOnInvalidCellCoordinates stamp: 'CJ 10/30/2020 19:45:18'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/30/2020 19:45:18'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/30/2020 19:45:18'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:47:52' prior: 50919749!
test04CannotPutPieceOnFullCell

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	
	self
		should: [game putPieceAt: 0@0]
		raise: Error
		withMessageText: TerniLapilli cannotPutOnFullCellErrorDescription.! !

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/30/2020 19:47:53'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 19:47:53'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:47:53'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 19:47:53'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/30/2020 19:47:53'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPlayOnInvalidCellCoordinates stamp: 'CJ 10/30/2020 19:47:53'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/30/2020 19:47:53'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/30/2020 19:47:53'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:48:04' prior: 50919993!
test07

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 2@1 to: 2@2]
		raise: Error
		withMessageText: TerniLapilli cannotMoveOtherPlayerPieceErrorDescription.! !

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/30/2020 19:48:06'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:48:24' prior: 50919803!
test06

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	
	self
		should: [game movePieceFrom: 0@0 to: 1@0]
		raise: Error
		withMessageText: TerniLapilli cannotMoveBeforePlacingAllPiecesErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:48:27' prior: 50919767!
test05CannotPlayOnInvalidCellCoordinates

	| game |
	
	game := TerniLapilli new.
	
	self
		should: [game putPieceAt: 3@0]
		raise: Error
		withMessageText: TerniLapilli invalidCellCoordinatesErrorDescription.! !

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/30/2020 19:48:36'!
FAILURE!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'CJ 10/30/2020 19:49:37'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer fullCells playerOCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 19:49:33' prior: 50919406!
playTurnO: cellToPlayIn

	playerOCells add: cellToPlayIn.
	currentPlayer := TerniLapilliPlayerX playing: self.! !

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'CJ 10/30/2020 19:50:19'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer fullCells playerOCells playerXCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 19:50:13' prior: 50919422!
playTurnX: cellToPlayIn

	playerXCells add: cellToPlayIn.
	currentPlayer := TerniLapilliPlayerO playing: self.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:50:49' prior: 50919570 overrides: 16896425!
initialize

	fullCells := Set new.
	playerXCells := Set new.
	playerOCells := Set new.
	currentPlayer := TerniLapilliPlayerX playing: self.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 19:50:50'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:50:50'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 19:50:50'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/30/2020 19:50:50'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPlayOnInvalidCellCoordinates stamp: 'CJ 10/30/2020 19:50:50'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/30/2020 19:50:50'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/30/2020 19:50:50'!
FAILURE!

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/30/2020 19:50:50'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 19:52:31' prior: 50919913!
movePieceFrom: startCell to: endCell
	
	fullCells size < 6
		ifTrue: [
			self error: self class cannotMoveBeforePlacingAllPiecesErrorDescription.
			]
		ifFalse: [].
	
	! !

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/30/2020 19:52:33'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 19:52:36'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:52:36'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 19:52:36'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/30/2020 19:52:36'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPlayOnInvalidCellCoordinates stamp: 'CJ 10/30/2020 19:52:36'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/30/2020 19:52:36'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/30/2020 19:52:36'!
FAILURE!

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/30/2020 19:52:36'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 19:53:20' prior: 50920245!
movePieceFrom: startCell to: endCell
	
	fullCells size < 6
		ifTrue: [
			self error: self class cannotMoveBeforePlacingAllPiecesErrorDescription.
			]
		ifFalse: [
			currentPlayer movePieceFrom: startCell to: endCell.
			].
	
	! !

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/30/2020 19:53:29'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 19:53:31'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 19:53:31'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 19:53:31'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/30/2020 19:53:31'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPlayOnInvalidCellCoordinates stamp: 'CJ 10/30/2020 19:53:31'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/30/2020 19:53:31'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/30/2020 19:53:31'!
FAILURE!

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/30/2020 19:53:31'!
FAILURE!

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/30/2020 19:54:09'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 19:54:33' prior: 50920279!
movePieceFrom: startCell to: endCell
	
	fullCells size < 6
		ifTrue: [
			self error: self class cannotMoveBeforePlacingAllPiecesErrorDescription.
			]
		ifFalse: [
			currentPlayer movePieceFrom: startCell to: endCell.
			].! !
!TerniLapilliPlayer methodsFor: 'nil' stamp: 'CJ 10/30/2020 19:54:47'!
movePieceFrom: startCell to: endCell
	
	self subclassResponsibility ! !
!TerniLapilliPlayer methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 19:54:48' prior: 50920327!
movePieceFrom: startCell to: endCell
	
	self subclassResponsibility! !
!TerniLapilliPlayerO methodsFor: 'nil' stamp: 'CJ 10/30/2020 19:55:11' overrides: 50920333!
movePieceFrom: startCell to: endCell
	
	game moveOPieceFrom: startCell to: endCell.! !
!TerniLapilliPlayerX methodsFor: 'nil' stamp: 'CJ 10/30/2020 19:55:26' overrides: 50920333!
movePieceFrom: startCell to: endCell
	
	game moveXPieceFrom: startCell to: endCell.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 21:17:20'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 21:17:20'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 21:17:20'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/30/2020 21:17:20'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPlayOnInvalidCellCoordinates stamp: 'CJ 10/30/2020 21:17:20'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/30/2020 21:17:20'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/30/2020 21:17:20'!
FAILURE!

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/30/2020 21:17:20'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 21:17:40'!
moveXPieceFrom: aPoint to: aPoint2 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 21:18:43' prior: 50920373!
moveXPieceFrom: startCell to: endCell 
	
	(playerOCells includes: startCell)
		ifTrue: [self error: self class cannotMoveOtherPlayerPieceErrorDescription].! !

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/30/2020 21:18:45'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 21:18:48'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 21:18:48'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 21:18:48'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/30/2020 21:18:48'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPlayOnInvalidCellCoordinates stamp: 'CJ 10/30/2020 21:18:48'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/30/2020 21:18:48'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/30/2020 21:18:48'!
PASSED!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 21:19:09'!
moveOPieceFrom: startCell to: endCell 
	
	(playerOCells includes: startCell)
		ifTrue: [self error: self class cannotMoveOtherPlayerPieceErrorDescription].! !
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 21:19:13' prior: 50920408!
moveOPieceFrom: startCell to: endCell 
	
	(playerXCells includes: startCell)
		ifTrue: [self error: self class cannotMoveOtherPlayerPieceErrorDescription].! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 21:19:17'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 21:19:17'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 21:19:17'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/30/2020 21:19:17'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPlayOnInvalidCellCoordinates stamp: 'CJ 10/30/2020 21:19:17'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/30/2020 21:19:17'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/30/2020 21:19:17'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 21:19:34'!
test08

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 2@1 to: 2@2]
		raise: Error
		withMessageText: TerniLapilli cannotMoveOtherPlayerPieceErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 21:20:24' prior: 50920444!
test08

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 0@2 to: 1@2]
		raise: Error
		withMessageText: TerniLapilli cannotMoveFromEmptyCellErrorDescription.! !

!testRun: #TerniLapilliTest #test08 stamp: 'CJ 10/30/2020 21:20:32'!
ERROR!
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/30/2020 21:20:42'!
cannotMoveFromEmptyCellErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/30/2020 21:20:57' prior: 50920474!
cannotMoveFromEmptyCellErrorDescription
	
	^ 'Cannot move a piece from an empty cell'! !

!testRun: #TerniLapilliTest #test08 stamp: 'CJ 10/30/2020 21:20:58'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 21:22:19' prior: 50920378!
moveXPieceFrom: startCell to: endCell 
	
	(playerOCells includes: startCell)
		ifTrue: [self error: self class cannotMoveOtherPlayerPieceErrorDescription].
	(playerXCells includes: startCell)
		ifFalse: [self error: self class cannotMoveFromEmptyCellErrorDescription ].! !

!testRun: #TerniLapilliTest #test08 stamp: 'CJ 10/30/2020 21:22:26'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 21:22:26'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 21:22:26'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 21:22:26'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/30/2020 21:22:26'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPlayOnInvalidCellCoordinates stamp: 'CJ 10/30/2020 21:22:26'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/30/2020 21:22:26'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/30/2020 21:22:26'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'CJ 10/30/2020 21:22:26'!
PASSED!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 21:23:09' prior: 50920416!
moveOPieceFrom: startCell to: endCell 
	
	(playerXCells includes: startCell)
		ifTrue: [self error: self class cannotMoveOtherPlayerPieceErrorDescription].
	(playerOCells includes: startCell)
		ifFalse: [self error: self class cannotMoveFromEmptyCellErrorDescription ].! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 21:23:10'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 21:23:10'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 21:23:10'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/30/2020 21:23:10'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPlayOnInvalidCellCoordinates stamp: 'CJ 10/30/2020 21:23:10'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/30/2020 21:23:10'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/30/2020 21:23:10'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'CJ 10/30/2020 21:23:10'!
PASSED!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 21:24:06'!
putPieceO: cellToPlayIn

	playerOCells add: cellToPlayIn.
	currentPlayer := TerniLapilliPlayerX playing: self.! !
!TerniLapilliPlayerO methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 21:24:06' prior: 50919477 overrides: 50919471!
putPiece: cellToPlayIn 
	
	game putPieceO: cellToPlayIn.! !

!methodRemoval: TerniLapilli #playTurnO: stamp: 'CJ 10/30/2020 21:24:06'!
playTurnO: cellToPlayIn

	playerOCells add: cellToPlayIn.
	currentPlayer := TerniLapilliPlayerX playing: self.!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/30/2020 21:24:20'!
putPieceX: cellToPlayIn

	playerXCells add: cellToPlayIn.
	currentPlayer := TerniLapilliPlayerO playing: self.! !
!TerniLapilliPlayerX methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 21:24:20' prior: 50919483 overrides: 50919471!
putPiece: cellToPlayIn 
	
	game putPieceX: cellToPlayIn.! !

!methodRemoval: TerniLapilli #playTurnX: stamp: 'CJ 10/30/2020 21:24:20'!
playTurnX: cellToPlayIn

	playerXCells add: cellToPlayIn.
	currentPlayer := TerniLapilliPlayerO playing: self.!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/30/2020 21:24:22'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/30/2020 21:24:22'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/30/2020 21:24:22'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/30/2020 21:24:22'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPlayOnInvalidCellCoordinates stamp: 'CJ 10/30/2020 21:24:22'!
PASSED!

!testRun: #TerniLapilliTest #test06 stamp: 'CJ 10/30/2020 21:24:22'!
PASSED!

!testRun: #TerniLapilliTest #test07 stamp: 'CJ 10/30/2020 21:24:22'!
PASSED!

!testRun: #TerniLapilliTest #test08 stamp: 'CJ 10/30/2020 21:24:22'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 21:25:37'!
test06CannotMoveBerforePlacingAllPieces

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	
	self
		should: [game movePieceFrom: 0@0 to: 1@0]
		raise: Error
		withMessageText: TerniLapilli cannotMoveBeforePlacingAllPiecesErrorDescription.! !

!methodRemoval: TerniLapilliTest #test06 stamp: 'CJ 10/30/2020 21:25:37'!
test06

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	
	self
		should: [game movePieceFrom: 0@0 to: 1@0]
		raise: Error
		withMessageText: TerniLapilli cannotMoveBeforePlacingAllPiecesErrorDescription.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 21:25:49'!
test07CannotMoveOtherPlayerPiece

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 2@1 to: 2@2]
		raise: Error
		withMessageText: TerniLapilli cannotMoveOtherPlayerPieceErrorDescription.! !

!methodRemoval: TerniLapilliTest #test07 stamp: 'CJ 10/30/2020 21:25:49'!
test07

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 2@1 to: 2@2]
		raise: Error
		withMessageText: TerniLapilli cannotMoveOtherPlayerPieceErrorDescription.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 21:25:57'!
test06CannotMoveBeforePlacingAllPieces

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	
	self
		should: [game movePieceFrom: 0@0 to: 1@0]
		raise: Error
		withMessageText: TerniLapilli cannotMoveBeforePlacingAllPiecesErrorDescription.! !

!methodRemoval: TerniLapilliTest #test06CannotMoveBerforePlacingAllPieces stamp: 'CJ 10/30/2020 21:25:57'!
test06CannotMoveBerforePlacingAllPieces

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	
	self
		should: [game movePieceFrom: 0@0 to: 1@0]
		raise: Error
		withMessageText: TerniLapilli cannotMoveBeforePlacingAllPiecesErrorDescription.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/30/2020 21:26:07'!
test08CannotMoveFromEmptyCell

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 0@2 to: 1@2]
		raise: Error
		withMessageText: TerniLapilli cannotMoveFromEmptyCellErrorDescription.! !

!methodRemoval: TerniLapilliTest #test08 stamp: 'CJ 10/30/2020 21:26:07'!
test08

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 0@2 to: 1@2]
		raise: Error
		withMessageText: TerniLapilli cannotMoveFromEmptyCellErrorDescription.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 12:07:59' prior: 50920688!
test08CannotMoveFromEmptyCell

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 1@1 to: 2@1]
		raise: Error
		withMessageText: TerniLapilli cannotMoveFromEmptyCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 12:08:08' prior: 50920715!
test08CannotMoveFromEmptyCell

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 2@2 to: 1@2]
		raise: Error
		withMessageText: TerniLapilli cannotMoveFromEmptyCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 12:08:10' prior: 50920730!
test08CannotMoveFromEmptyCell

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 0@2 to: 1@2]
		raise: Error
		withMessageText: TerniLapilli cannotMoveFromEmptyCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 12:08:14'!
test09

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 0@2 to: 1@2]
		raise: Error
		withMessageText: TerniLapilli cannotMoveFromEmptyCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 12:08:34' prior: 50920759!
test09

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 1@1 to: 2@1]
		raise: Error
		withMessageText: TerniLapilli cannotMoveFromEmptyCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 12:08:47' prior: 50920773!
test09

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 1@1 to: 2@1]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToFullCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 12:08:55' prior: 50920787!
test09

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 1@1 to: 2@1]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToFullCellErrorDescription.! !

!testRun: #TerniLapilliTest #test09 stamp: 'CJ 10/31/2020 12:08:57'!
ERROR!
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/31/2020 12:09:06'!
cannotMoveToFullCellErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/31/2020 12:09:27' prior: 50920817!
cannotMoveToFullCellErrorDescription
	
	^ 'Cannot move a piece to a cell that''s already full'! !

!testRun: #TerniLapilliTest #test09 stamp: 'CJ 10/31/2020 12:09:29'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/31/2020 12:10:32' prior: 50920317!
movePieceFrom: startCell to: endCell
	
	fullCells size < 6
		ifTrue: [
			self error: self class cannotMoveBeforePlacingAllPiecesErrorDescription.
			]
		ifFalse: [
			self validateCell: endCell.
			currentPlayer movePieceFrom: startCell to: endCell.
			].! !
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/31/2020 12:11:29' prior: 50920832!
movePieceFrom: startCell to: endCell
	
	fullCells size < 6
		ifTrue: [
			self error: self class cannotMoveBeforePlacingAllPiecesErrorDescription.
			]
		ifFalse: [
			(self cellIsFull: endCell)
				ifTrue: [
					self error: self class cannotMoveToFullCellErrorDescription.
					].
			currentPlayer movePieceFrom: startCell to: endCell.
			].! !

!testRun: #TerniLapilliTest #test09 stamp: 'CJ 10/31/2020 12:11:44'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 12:11:44'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 12:11:44'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 12:11:44'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 12:11:44'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPlayOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 12:11:44'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 12:11:44'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 12:11:44'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 12:11:44'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'CJ 10/31/2020 12:11:44'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 12:12:19'!
test10

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 2@0 to: 3@0]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToFullCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 12:12:30' prior: 50920887!
test10

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 2@0 to: 3@0]
		raise: Error
		withMessageText: TerniLapilli invalidCellCoordinatesErrorDescription.! !

!testRun: #TerniLapilliTest #test10 stamp: 'CJ 10/31/2020 12:12:31'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/31/2020 12:13:00' prior: 50920843!
movePieceFrom: startCell to: endCell
	
	self validateCell: endCell.
	
	fullCells size < 6
		ifTrue: [
			self error: self class cannotMoveBeforePlacingAllPiecesErrorDescription.
			]
		ifFalse: [
			(self cellIsFull: endCell)
				ifTrue: [
					self error: self class cannotMoveToFullCellErrorDescription.
					].
			currentPlayer movePieceFrom: startCell to: endCell.
			].! !

!testRun: #TerniLapilliTest #test10 stamp: 'CJ 10/31/2020 12:13:09'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 12:13:09'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 12:13:09'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 12:13:09'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 12:13:09'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPlayOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 12:13:09'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 12:13:09'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 12:13:09'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 12:13:09'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'CJ 10/31/2020 12:13:09'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'CJ 10/31/2020 12:13:09'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 12:13:46' prior: 50920901!
test10

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 2@0 to: 3@0]
		raise: Error
		withMessageText: TerniLapilli invalidCellCoordinatesErrorDescription.
	
	self
		should: [game movePieceFrom: 3@0 to: 2@0]
		raise: Error
		withMessageText: TerniLapilli invalidCellCoordinatesErrorDescription.! !

!testRun: #TerniLapilliTest #test10 stamp: 'CJ 10/31/2020 12:13:48'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/31/2020 12:14:10' prior: 50920917!
movePieceFrom: startCell to: endCell
	
	self validateCell: startCell.
	self validateCell: endCell.
	
	fullCells size < 6
		ifTrue: [
			self error: self class cannotMoveBeforePlacingAllPiecesErrorDescription.
			]
		ifFalse: [
			(self cellIsFull: endCell)
				ifTrue: [
					self error: self class cannotMoveToFullCellErrorDescription.
					].
			currentPlayer movePieceFrom: startCell to: endCell.
			].! !

!testRun: #TerniLapilliTest #test10 stamp: 'CJ 10/31/2020 12:14:13'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 12:14:13'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 12:14:13'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 12:14:13'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 12:14:13'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPlayOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 12:14:13'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 12:14:13'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 12:14:13'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 12:14:13'!
PASSED!

!testRun: #TerniLapilliTest #test09 stamp: 'CJ 10/31/2020 12:14:13'!
PASSED!

!testRun: #TerniLapilliTest #test10 stamp: 'CJ 10/31/2020 12:14:13'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 12:14:27'!
test11

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 2@0 to: 3@0]
		raise: Error
		withMessageText: TerniLapilli invalidCellCoordinatesErrorDescription.
	
	self
		should: [game movePieceFrom: 3@0 to: 2@0]
		raise: Error
		withMessageText: TerniLapilli invalidCellCoordinatesErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 12:14:50'!
test09CannotMoveToFullCell

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 1@1 to: 2@1]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToFullCellErrorDescription.! !

!methodRemoval: TerniLapilliTest #test09 stamp: 'CJ 10/31/2020 12:14:50'!
test09

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 1@1 to: 2@1]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToFullCellErrorDescription.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 12:15:26'!
test05CannotPutOnInvalidCellCoordinates

	| game |
	
	game := TerniLapilli new.
	
	self
		should: [game putPieceAt: 3@0]
		raise: Error
		withMessageText: TerniLapilli invalidCellCoordinatesErrorDescription.! !

!methodRemoval: TerniLapilliTest #test05CannotPlayOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 12:15:26'!
test05CannotPlayOnInvalidCellCoordinates

	| game |
	
	game := TerniLapilli new.
	
	self
		should: [game putPieceAt: 3@0]
		raise: Error
		withMessageText: TerniLapilli invalidCellCoordinatesErrorDescription.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 12:15:41'!
test10CannotMoveToOrFromInvalidCellCoordinates

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 2@0 to: 3@0]
		raise: Error
		withMessageText: TerniLapilli invalidCellCoordinatesErrorDescription.
	
	self
		should: [game movePieceFrom: 3@0 to: 2@0]
		raise: Error
		withMessageText: TerniLapilli invalidCellCoordinatesErrorDescription.! !

!methodRemoval: TerniLapilliTest #test10 stamp: 'CJ 10/31/2020 12:15:41'!
test10

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 2@0 to: 3@0]
		raise: Error
		withMessageText: TerniLapilli invalidCellCoordinatesErrorDescription.
	
	self
		should: [game movePieceFrom: 3@0 to: 2@0]
		raise: Error
		withMessageText: TerniLapilli invalidCellCoordinatesErrorDescription.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 13:00:21' prior: 50921033!
test11

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 2@0 to: 3@0]
		raise: Error
		withMessageText: TerniLapilli invalidCellCoordinatesErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 13:01:12' prior: 50921133!
test11

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game putPieceAt: 0@2]
		raise: Error
		withMessageText: TerniLapilli cannotPutMorePiecesErrorDescription.! !

!testRun: #TerniLapilliTest #test11 stamp: 'CJ 10/31/2020 13:01:16'!
ERROR!
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/31/2020 13:01:23'!
cannotPutMorePiecesErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/31/2020 13:01:33' prior: 50921162!
cannotPutMorePiecesErrorDescription
	
	^ 'Cannot put any more pieces'! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/31/2020 13:01:40' prior: 50921168!
cannotPutMorePiecesErrorDescription
	
	^ 'Cannot place any more pieces'! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/31/2020 13:02:11' prior: 50921174!
cannotPutMorePiecesErrorDescription
	
	^ 'Cannot place any more pieces once each player has put all three of theirs'! !

!testRun: #TerniLapilliTest #test11 stamp: 'CJ 10/31/2020 13:02:13'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/31/2020 13:03:12' prior: 50919686!
putPieceAt: cellToPlayIn

	fullCells >= 6 ifTrue: [self error: self class cannotPutMorePiecesErrorDescription].
	self validateCell: cellToPlayIn.
	(self cellIsFull: cellToPlayIn) ifTrue: [self error: self class cannotPutOnFullCellErrorDescription].

	currentPlayer putPiece: cellToPlayIn.
	fullCells add: cellToPlayIn.! !

!testRun: #TerniLapilliTest #test11 stamp: 'CJ 10/31/2020 13:03:17'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 13:03:17'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 13:03:17'!
ERROR!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 13:03:17'!
ERROR!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 13:03:17'!
ERROR!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 13:03:17'!
FAILURE!

!testRun: #TerniLapilliTest #test06CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 13:03:17'!
ERROR!

!testRun: #TerniLapilliTest #test07CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 13:03:17'!
ERROR!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 13:03:17'!
ERROR!

!testRun: #TerniLapilliTest #test09CannotMoveToFullCell stamp: 'CJ 10/31/2020 13:03:17'!
ERROR!

!testRun: #TerniLapilliTest #test10CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 13:03:17'!
ERROR!

!testRun: #TerniLapilliTest #test11 stamp: 'CJ 10/31/2020 13:03:17'!
ERROR!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 13:03:19'!
ERROR!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/31/2020 13:03:43' prior: 50921189!
putPieceAt: cellToPlayIn

	fullCells size >= 6 ifTrue: [self error: self class cannotPutMorePiecesErrorDescription].
	self validateCell: cellToPlayIn.
	(self cellIsFull: cellToPlayIn) ifTrue: [self error: self class cannotPutOnFullCellErrorDescription].

	currentPlayer putPiece: cellToPlayIn.
	fullCells add: cellToPlayIn.! !

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 13:03:45'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 13:03:46'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 13:03:47'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 13:03:47'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 13:03:47'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 13:03:48'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 13:03:48'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 13:03:48'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 13:03:48'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 13:03:48'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 13:03:48'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 13:03:48'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 13:03:48'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveToFullCell stamp: 'CJ 10/31/2020 13:03:48'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 13:03:48'!
PASSED!

!testRun: #TerniLapilliTest #test11 stamp: 'CJ 10/31/2020 13:03:48'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 13:03:48'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 13:04:14'!
test06CannotPutMoreThanThreePiecesEach

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game putPieceAt: 0@2]
		raise: Error
		withMessageText: TerniLapilli cannotPutMorePiecesErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 13:04:34'!
test07CannotMoveBeforePlacingAllPieces

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	
	self
		should: [game movePieceFrom: 0@0 to: 1@0]
		raise: Error
		withMessageText: TerniLapilli cannotMoveBeforePlacingAllPiecesErrorDescription.! !

!methodRemoval: TerniLapilliTest #test06CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 13:04:34'!
test06CannotMoveBeforePlacingAllPieces

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	
	self
		should: [game movePieceFrom: 0@0 to: 1@0]
		raise: Error
		withMessageText: TerniLapilli cannotMoveBeforePlacingAllPiecesErrorDescription.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 13:04:43'!
test08CannotMoveOtherPlayerPiece

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 2@1 to: 2@2]
		raise: Error
		withMessageText: TerniLapilli cannotMoveOtherPlayerPieceErrorDescription.! !

!methodRemoval: TerniLapilliTest #test07CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 13:04:43'!
test07CannotMoveOtherPlayerPiece

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 2@1 to: 2@2]
		raise: Error
		withMessageText: TerniLapilli cannotMoveOtherPlayerPieceErrorDescription.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 13:04:53'!
test09CannotMoveOtherPlayerPiece

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 2@1 to: 2@2]
		raise: Error
		withMessageText: TerniLapilli cannotMoveOtherPlayerPieceErrorDescription.! !

!methodRemoval: TerniLapilliTest #test08CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 13:04:53'!
test08CannotMoveOtherPlayerPiece

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 2@1 to: 2@2]
		raise: Error
		withMessageText: TerniLapilli cannotMoveOtherPlayerPieceErrorDescription.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 13:04:58'!
test10CannotMoveToFullCell

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 1@1 to: 2@1]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToFullCellErrorDescription.! !

!methodRemoval: TerniLapilliTest #test09CannotMoveToFullCell stamp: 'CJ 10/31/2020 13:04:58'!
test09CannotMoveToFullCell

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 1@1 to: 2@1]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToFullCellErrorDescription.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 13:05:02'!
test11CannotMoveToOrFromInvalidCellCoordinates

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 2@0 to: 3@0]
		raise: Error
		withMessageText: TerniLapilli invalidCellCoordinatesErrorDescription.
	
	self
		should: [game movePieceFrom: 3@0 to: 2@0]
		raise: Error
		withMessageText: TerniLapilli invalidCellCoordinatesErrorDescription.! !

!methodRemoval: TerniLapilliTest #test10CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 13:05:02'!
test10CannotMoveToOrFromInvalidCellCoordinates

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 2@0 to: 3@0]
		raise: Error
		withMessageText: TerniLapilli invalidCellCoordinatesErrorDescription.
	
	self
		should: [game movePieceFrom: 3@0 to: 2@0]
		raise: Error
		withMessageText: TerniLapilli invalidCellCoordinatesErrorDescription.!

!methodRemoval: TerniLapilliTest #test11 stamp: 'CJ 10/31/2020 13:05:09'!
test11

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game putPieceAt: 0@2]
		raise: Error
		withMessageText: TerniLapilli cannotPutMorePiecesErrorDescription.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 14:42:01' prior: 50921322!
test07CannotMoveBeforePlacingAllPieces

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 0@1.
	game putPieceAt: 0@2.
	game putPieceAt: 1@0.
	
	self
		should: [game movePieceFrom: 0@0 to: 1@0]
		raise: Error
		withMessageText: TerniLapilli cannotMoveBeforePlacingAllPiecesErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 14:42:31' prior: 50921481!
test07CannotMoveBeforePlacingAllPieces

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	
	self
		should: [game movePieceFrom: 1@0 to: 0@0]
		raise: Error
		withMessageText: TerniLapilli cannotMoveBeforePlacingAllPiecesErrorDescription.! !

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 14:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 14:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 14:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 14:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 14:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 14:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 14:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 14:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 14:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 14:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 14:42:34'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 14:42:34'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 14:43:28'!
test12

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 2@0 to: 3@0]
		raise: Error
		withMessageText: TerniLapilli invalidCellCoordinatesErrorDescription.
	
	self
		should: [game movePieceFrom: 3@0 to: 2@0]
		raise: Error
		withMessageText: TerniLapilli invalidCellCoordinatesErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 14:43:44' prior: 50921548!
test12

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 2@0 to: 3@0]
		raise: Error
		withMessageText: TerniLapilli invalidCellCoordinatesErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 14:43:59' prior: 50921566!
test12

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 1@1 to: 1@1]
		raise: Error
		withMessageText: TerniLapilli invalidCellCoordinatesErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 14:44:22' prior: 50921580!
test12

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 1@1 to: 1@1]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToSameCellErrorDescription.! !

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/31/2020 14:44:25'!
ERROR!
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/31/2020 14:44:32'!
cannotMoveToSameCellErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/31/2020 14:44:44' prior: 50921610!
cannotMoveToSameCellErrorDescription
	
	^ 'Cannot move a piece to the cell it''s already in'! !

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/31/2020 14:44:46'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/31/2020 14:45:39' prior: 50920985!
movePieceFrom: startCell to: endCell
	
	self validateCell: startCell.
	self validateCell: endCell.
	
	startCell = endCell
		ifTrue: [self error: self class cannotMoveToSameCellErrorDescription].
	
	fullCells size < 6
		ifTrue: [
			self error: self class cannotMoveBeforePlacingAllPiecesErrorDescription.
			]
		ifFalse: [
			(self cellIsFull: endCell)
				ifTrue: [
					self error: self class cannotMoveToFullCellErrorDescription.
					].
			currentPlayer movePieceFrom: startCell to: endCell.
			].! !
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/31/2020 14:46:10' prior: 50921625!
movePieceFrom: startCell to: endCell
	
	self validateCell: startCell.
	self validateCell: endCell.
	
	startCell = endCell
		ifTrue: [self error: self class cannotMoveToSameCellErrorDescription].
	
	fullCells size < 6
		ifTrue: [
			self error: self class cannotMoveBeforePlacingAllPiecesErrorDescription.
			]
		ifFalse: [
			(self cellIsFull: endCell)
				ifTrue: [
					self error: self class cannotMoveToFullCellErrorDescription.
					].
			currentPlayer movePieceFrom: startCell to: endCell.
			].! !

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/31/2020 14:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 14:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 14:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 14:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 14:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 14:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 14:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 14:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 14:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 14:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 14:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 14:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/31/2020 14:47:07'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/31/2020 14:48:32' prior: 50919561!
cellIsFull: cellToPlayIn 
	
	^ (playerXCells includes: cellToPlayIn) or: [playerOCells includes: cellToPlayIn].! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 14:48:49'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 14:48:49'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 14:48:49'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 14:48:49'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 14:48:49'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 14:48:49'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 14:48:49'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 14:48:49'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 14:48:49'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 14:48:49'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 14:48:49'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/31/2020 14:48:49'!
PASSED!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/31/2020 14:49:34' prior: 50921242!
putPieceAt: cellToPlayIn

	(playerXCells size + playerOCells size >= 6)
		ifTrue: [self error: self class cannotPutMorePiecesErrorDescription].
	self validateCell: cellToPlayIn.
	(self cellIsFull: cellToPlayIn) ifTrue: [self error: self class cannotPutOnFullCellErrorDescription].

	currentPlayer putPiece: cellToPlayIn.
	fullCells add: cellToPlayIn.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 14:49:37'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 14:49:37'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 14:49:37'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 14:49:37'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 14:49:37'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 14:49:37'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 14:49:37'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 14:49:37'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 14:49:37'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 14:49:37'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 14:49:37'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/31/2020 14:49:37'!
PASSED!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/31/2020 14:50:20'!
fullCells

	playerXCells size + playerOCells size! !
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/31/2020 14:50:32' prior: 50921748!
putPieceAt: cellToPlayIn

	(self fullCells >= 6)
		ifTrue: [self error: self class cannotPutMorePiecesErrorDescription].
	self validateCell: cellToPlayIn.
	(self cellIsFull: cellToPlayIn) ifTrue: [self error: self class cannotPutOnFullCellErrorDescription].

	currentPlayer putPiece: cellToPlayIn.
	fullCells add: cellToPlayIn.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 14:50:33'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 14:50:33'!
ERROR!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 14:50:33'!
ERROR!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 14:50:33'!
ERROR!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 14:50:33'!
FAILURE!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 14:50:33'!
ERROR!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 14:50:33'!
ERROR!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 14:50:33'!
ERROR!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 14:50:33'!
ERROR!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 14:50:33'!
ERROR!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 14:50:33'!
ERROR!

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/31/2020 14:50:33'!
ERROR!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 14:50:35'!
ERROR!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/31/2020 14:50:54' prior: 50921799!
fullCells

	^ playerXCells size + playerOCells size! !

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 14:50:57'!
ERROR!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 14:51:02'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 14:51:02'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 14:51:02'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 14:51:02'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 14:51:02'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 14:51:02'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 14:51:02'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 14:51:02'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 14:51:02'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 14:51:02'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/31/2020 14:51:02'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 14:51:02'!
PASSED!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/31/2020 14:51:31' prior: 50921644!
movePieceFrom: startCell to: endCell
	
	self validateCell: startCell.
	self validateCell: endCell.
	
	startCell = endCell
		ifTrue: [self error: self class cannotMoveToSameCellErrorDescription].
	
	(self fullCells < 6)
		ifTrue: [
			self error: self class cannotMoveBeforePlacingAllPiecesErrorDescription.
			]
		ifFalse: [
			(self cellIsFull: endCell)
				ifTrue: [
					self error: self class cannotMoveToFullCellErrorDescription.
					].
			currentPlayer movePieceFrom: startCell to: endCell.
			].! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 14:51:32'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 14:51:32'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 14:51:32'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 14:51:32'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 14:51:32'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 14:51:32'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 14:51:32'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 14:51:32'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 14:51:32'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 14:51:32'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 14:51:32'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/31/2020 14:51:32'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 14:51:46' prior: 50920215 overrides: 16896425!
initialize

	playerXCells := Set new.
	playerOCells := Set new.
	currentPlayer := TerniLapilliPlayerX playing: self.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 14:51:47'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 14:51:47'!
ERROR!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 14:51:47'!
ERROR!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 14:51:47'!
ERROR!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 14:51:47'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 14:51:47'!
ERROR!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 14:51:47'!
ERROR!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 14:51:47'!
ERROR!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 14:51:47'!
ERROR!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 14:51:47'!
ERROR!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 14:51:47'!
ERROR!

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/31/2020 14:51:47'!
ERROR!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 14:51:49'!
ERROR!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/31/2020 14:52:12' prior: 50921804!
putPieceAt: cellToPlayIn

	(self fullCells >= 6)
		ifTrue: [self error: self class cannotPutMorePiecesErrorDescription].
	self validateCell: cellToPlayIn.
	(self cellIsFull: cellToPlayIn) ifTrue: [self error: self class cannotPutOnFullCellErrorDescription].

	currentPlayer putPiece: cellToPlayIn.! !

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 14:52:14'!
ERROR!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 14:52:40'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 14:52:40'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 14:52:40'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 14:52:40'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 14:52:40'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 14:52:40'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 14:52:40'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 14:52:40'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 14:52:40'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 14:52:40'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 14:52:40'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/31/2020 14:52:40'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 14:52:45'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 14:52:45'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 14:52:45'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 14:52:45'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 14:52:45'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 14:52:45'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 14:52:45'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 14:52:45'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 14:52:45'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 14:52:45'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 14:52:45'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/31/2020 14:52:45'!
PASSED!

Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer playerOCells playerXCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'CJ 10/31/2020 14:53:16'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer playerOCells playerXCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 14:53:19'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 14:53:19'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 14:53:19'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 14:53:19'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 14:53:19'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 14:53:19'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 14:53:19'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 14:53:19'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 14:53:19'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 14:53:19'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 14:53:19'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/31/2020 14:53:19'!
PASSED!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/31/2020 14:54:38'!
allPiecesHaveBeenPlaced

	^ playerXCells size + playerOCells size >= 6! !
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/31/2020 14:54:53' prior: 50922008!
putPieceAt: cellToPlayIn

	self allPiecesHaveBeenPlaced 
		ifTrue: [self error: self class cannotPutMorePiecesErrorDescription].
	self validateCell: cellToPlayIn.
	(self cellIsFull: cellToPlayIn) ifTrue: [self error: self class cannotPutOnFullCellErrorDescription].

	currentPlayer putPiece: cellToPlayIn.! !
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/31/2020 14:54:54' prior: 50922155!
putPieceAt: cellToPlayIn

	self allPiecesHaveBeenPlaced
		ifTrue: [self error: self class cannotPutMorePiecesErrorDescription].
	self validateCell: cellToPlayIn.
	(self cellIsFull: cellToPlayIn) ifTrue: [self error: self class cannotPutOnFullCellErrorDescription].

	currentPlayer putPiece: cellToPlayIn.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 14:54:56'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 14:54:56'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 14:54:56'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 14:54:56'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 14:54:56'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 14:54:56'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 14:54:56'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 14:54:56'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 14:54:56'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 14:54:56'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 14:54:56'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/31/2020 14:54:56'!
PASSED!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/31/2020 14:55:24' prior: 50921903!
movePieceFrom: startCell to: endCell
	
	self validateCell: startCell.
	self validateCell: endCell.
	
	startCell = endCell
		ifTrue: [self error: self class cannotMoveToSameCellErrorDescription].
	
	self allPiecesHaveBeenPlaced not
		ifTrue: [
			self error: self class cannotMoveBeforePlacingAllPiecesErrorDescription.
			]
		ifFalse: [
			(self cellIsFull: endCell)
				ifTrue: [
					self error: self class cannotMoveToFullCellErrorDescription.
					].
			currentPlayer movePieceFrom: startCell to: endCell.
			].! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 14:55:28'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 14:55:28'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 14:55:28'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 14:55:28'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 14:55:28'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 14:55:28'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 14:55:28'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 14:55:28'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 14:55:28'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 14:55:28'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 14:55:28'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/31/2020 14:55:28'!
PASSED!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/31/2020 14:57:38' prior: 50922219!
movePieceFrom: startCell to: endCell
	
	self validateCell: startCell.
	self validateCell: endCell.
	
	startCell = endCell
		ifTrue: [self error: self class cannotMoveToSameCellErrorDescription].
	
	self allPiecesHaveBeenPlaced not
		ifTrue: [
			self error: self class cannotMoveBeforePlacingAllPiecesErrorDescription.
			].

	(self cellIsFull: endCell)
		ifTrue: [
			self error: self class cannotMoveToFullCellErrorDescription.
			].

	currentPlayer movePieceFrom: startCell to: endCell.! !
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/31/2020 15:00:23'!
whenFullMovePieceFrom: startCell to: endCell

	(self cellIsFull: endCell)
		ifTrue: [
			self error: self class cannotMoveToFullCellErrorDescription.
			].
	
	currentPlayer movePieceFrom: startCell to: endCell.! !

Object subclass: #TerniLapilliPhase
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #TerniLapilliPhase category: 'TerniLapilli' stamp: 'CJ 10/31/2020 15:00:55'!
Object subclass: #TerniLapilliPhase
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TerniLapilliPhase subclass: #PuttingTerniLapilliPhase
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TerniLapilliPhase subclass: #PuttingTerniLapilliPhase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #PuttingTerniLapilliPhase category: 'TerniLapilli' stamp: 'CJ 10/31/2020 15:01:18'!
TerniLapilliPhase subclass: #PuttingTerniLapilliPhase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

TerniLapilliPhase subclass: #MovingTerniLapilliPhase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!

!classDefinition: #MovingTerniLapilliPhase category: 'TerniLapilli' stamp: 'CJ 10/31/2020 15:01:24'!
TerniLapilliPhase subclass: #MovingTerniLapilliPhase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/31/2020 15:02:49'!
whenNotFullMovePieceFrom: startCell to: endCell
	
	self error: self class cannotMoveBeforePlacingAllPiecesErrorDescription.! !

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'CJ 10/31/2020 15:04:52'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer playerOCells playerXCells phase'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/31/2020 15:04:51' prior: 50922276!
movePieceFrom: startCell to: endCell
	
	self validateCell: startCell.
	self validateCell: endCell.
	
	startCell = endCell
		ifTrue: [self error: self class cannotMoveToSameCellErrorDescription].
	
	phase lalo: startCell lalo2: endCell.! !

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'CJ 10/31/2020 15:05:17'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer playerOCells playerXCells currentPhase'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 15:05:17' prior: 50922361!
movePieceFrom: startCell to: endCell
	
	self validateCell: startCell.
	self validateCell: endCell.
	
	startCell = endCell
		ifTrue: [self error: self class cannotMoveToSameCellErrorDescription].
	
	currentPhase lalo: startCell lalo2: endCell.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 15:05:44' prior: 50921961 overrides: 16896425!
initialize

	playerXCells := Set new.
	playerOCells := Set new.
	currentPlayer := TerniLapilliPlayerX playing: self.
	currentPhase := PuttingTerniLapilliPhase forGame: self.! !
!TerniLapilliPhase class methodsFor: 'nil' stamp: 'CJ 10/31/2020 15:06:10'!
forGame: aTerniLapilli

	^ self new withGame: aTerniLapilli.! !
!TerniLapilliPhase methodsFor: 'nil' stamp: 'CJ 10/31/2020 15:06:35'!
withGame: aTerniLapilli

	game := aTerniLapilli.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 15:06:53'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 15:06:53'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 15:06:53'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 15:06:53'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:06:53'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 15:06:53'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 15:06:53'!
FAILURE!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 15:06:53'!
FAILURE!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 15:06:53'!
FAILURE!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 15:06:53'!
FAILURE!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:06:53'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/31/2020 15:06:53'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 15:06:55'!
FAILURE!
!TerniLapilliPhase methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 15:07:13'!
lalo: aPoint lalo2: aPoint2 
	self shouldBeImplemented.! !
!TerniLapilliPhase methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 15:07:18' prior: 50922452!
lalo: aPoint lalo2: aPoint2 
	
	self subclassResponsibility ! !

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 15:07:19'!
FAILURE!
!TerniLapilliPhase methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 15:07:59' prior: 50922458!
lalo: startCell lalo2: endCell
	
	self subclassResponsibility ! !
!PuttingTerniLapilliPhase methodsFor: 'nil' stamp: 'CJ 10/31/2020 15:08:35' overrides: 50922467!
lalo: startCell lalo2: endCell
	
	game whenNotFullMovePieceFrom: startCell to: endCell.! !
!MovingTerniLapilliPhase methodsFor: 'nil' stamp: 'CJ 10/31/2020 15:09:04' overrides: 50922467!
lalo: startCell lalo2: endCell
	
	game whenFullMovePieceFrom: startCell to: endCell.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 15:09:08'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 15:09:08'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 15:09:08'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 15:09:08'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:09:08'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 15:09:08'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 15:09:08'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 15:09:08'!
FAILURE!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 15:09:08'!
FAILURE!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 15:09:08'!
FAILURE!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:09:08'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/31/2020 15:09:08'!
PASSED!
!PuttingTerniLapilliPhase methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 15:09:48'!
movePieceFrom: startCell to: endCell
	
	game whenNotFullMovePieceFrom: startCell to: endCell.! !
!MovingTerniLapilliPhase methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 15:09:48'!
movePieceFrom: startCell to: endCell
	
	game whenFullMovePieceFrom: startCell to: endCell.! !
!TerniLapilliPhase methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 15:09:48'!
movePieceFrom: startCell to: endCell
	
	self subclassResponsibility ! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 15:09:48' prior: 50922381!
movePieceFrom: startCell to: endCell
	
	self validateCell: startCell.
	self validateCell: endCell.
	
	startCell = endCell
		ifTrue: [self error: self class cannotMoveToSameCellErrorDescription].
	
	currentPhase movePieceFrom: startCell to: endCell.! !

!methodRemoval: PuttingTerniLapilliPhase #lalo:lalo2: stamp: 'CJ 10/31/2020 15:09:48'!
lalo: startCell lalo2: endCell
	
	game whenNotFullMovePieceFrom: startCell to: endCell.!

!methodRemoval: MovingTerniLapilliPhase #lalo:lalo2: stamp: 'CJ 10/31/2020 15:09:48'!
lalo: startCell lalo2: endCell
	
	game whenFullMovePieceFrom: startCell to: endCell.!

!methodRemoval: TerniLapilliPhase #lalo:lalo2: stamp: 'CJ 10/31/2020 15:09:48'!
lalo: startCell lalo2: endCell
	
	self subclassResponsibility !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 15:09:53'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 15:09:53'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 15:09:53'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 15:09:53'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:09:53'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 15:09:53'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 15:09:53'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 15:09:53'!
FAILURE!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 15:09:53'!
FAILURE!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 15:09:53'!
FAILURE!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:09:53'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/31/2020 15:09:53'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 15:09:54'!
FAILURE!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/31/2020 15:12:29' prior: 50922168!
putPieceAt: cellToPlayIn

	self allPiecesHaveBeenPlaced
		ifTrue: [self error: self class cannotPutMorePiecesErrorDescription].
	self validateCell: cellToPlayIn.
	(self cellIsFull: cellToPlayIn) ifTrue: [self error: self class cannotPutOnFullCellErrorDescription].

	currentPlayer putPiece: cellToPlayIn.
	
	self allPiecesHaveBeenPlaced
		ifTrue: [currentPhase := MovingTerniLapilliPhase withGame: self].! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 15:12:31'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 15:12:31'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 15:12:31'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 15:12:31'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:12:31'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 15:12:31'!
ERROR!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 15:12:31'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 15:12:31'!
ERROR!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 15:12:31'!
ERROR!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 15:12:31'!
ERROR!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:12:31'!
ERROR!

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/31/2020 15:12:31'!
ERROR!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/31/2020 15:12:49' prior: 50922609!
putPieceAt: cellToPlayIn

	self allPiecesHaveBeenPlaced
		ifTrue: [self error: self class cannotPutMorePiecesErrorDescription].
	self validateCell: cellToPlayIn.
	(self cellIsFull: cellToPlayIn) ifTrue: [self error: self class cannotPutOnFullCellErrorDescription].

	currentPlayer putPiece: cellToPlayIn.
	
	self allPiecesHaveBeenPlaced
		ifTrue: [currentPhase := MovingTerniLapilliPhase forGame: self].! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 15:12:50'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 15:12:50'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 15:12:50'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 15:12:50'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:12:50'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 15:12:50'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 15:12:50'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 15:12:50'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 15:12:50'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 15:12:50'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:12:50'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/31/2020 15:12:50'!
PASSED!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/31/2020 15:13:49'!
whenNotFullPutPieceAt: cellToPlayIn

	self validateCell: cellToPlayIn.
	(self cellIsFull: cellToPlayIn) ifTrue: [self error: self class cannotPutOnFullCellErrorDescription].

	currentPlayer putPiece: cellToPlayIn.
	
	self allPiecesHaveBeenPlaced
		ifTrue: [currentPhase := MovingTerniLapilliPhase forGame: self].! !
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/31/2020 15:14:12'!
whenFullPutPieceAt: cellToPlayIn

	self error: self class cannotPutMorePiecesErrorDescription.! !
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/31/2020 15:14:32' prior: 50922662!
putPieceAt: cellToPlayIn

	currentPhase putPieceAt: cellToPlayIn.! !
!TerniLapilliPhase methodsFor: 'nil' stamp: 'CJ 10/31/2020 15:14:54'!
putPieceAt: cellToPlayIn

	self subclassResponsibility! !
!PuttingTerniLapilliPhase methodsFor: 'nil' stamp: 'CJ 10/31/2020 15:15:15' overrides: 50922739!
putPieceAt: cellToPlayIn

	game whenNotFullPutPieceAt: cellToPlayIn.! !
!MovingTerniLapilliPhase methodsFor: 'nil' stamp: 'CJ 10/31/2020 15:15:26' overrides: 50922739!
putPieceAt: cellToPlayIn

	game whenFullPutPieceAt: cellToPlayIn.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 15:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 15:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 15:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 15:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 15:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 15:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 15:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 15:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 15:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:15:31'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/31/2020 15:15:31'!
PASSED!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/31/2020 15:18:14' prior: 50922541!
movePieceFrom: startCell to: endCell
	
	currentPhase movePieceFrom: startCell to: endCell.! !
!TerniLapilli methodsFor: 'phase actions' stamp: 'CJ 10/31/2020 15:18:25' prior: 50922294!
whenFullMovePieceFrom: startCell to: endCell

	self validateCell: startCell.
	self validateCell: endCell.
	
	startCell = endCell
		ifTrue: [self error: self class cannotMoveToSameCellErrorDescription].

	(self cellIsFull: endCell)
		ifTrue: [
			self error: self class cannotMoveToFullCellErrorDescription.
			].
	
	currentPlayer movePieceFrom: startCell to: endCell.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 15:18:26'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 15:18:26'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 15:18:26'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 15:18:26'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:18:26'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 15:18:26'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 15:18:26'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 15:18:26'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 15:18:26'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 15:18:26'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:18:26'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/31/2020 15:18:26'!
PASSED!
!TerniLapilli methodsFor: 'phase actions' stamp: 'CJ 10/31/2020 15:19:32'!
whenMovingMovePieceFrom: startCell to: endCell

	self validateCell: startCell.
	self validateCell: endCell.
	
	startCell = endCell
		ifTrue: [self error: self class cannotMoveToSameCellErrorDescription].

	(self cellIsFull: endCell)
		ifTrue: [
			self error: self class cannotMoveToFullCellErrorDescription.
			].
	
	currentPlayer movePieceFrom: startCell to: endCell.! !
!MovingTerniLapilliPhase methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 15:19:32' prior: 50922529 overrides: 50922535!
movePieceFrom: startCell to: endCell
	
	game whenMovingMovePieceFrom: startCell to: endCell.! !

!methodRemoval: TerniLapilli #whenFullMovePieceFrom:to: stamp: 'CJ 10/31/2020 15:19:32'!
whenFullMovePieceFrom: startCell to: endCell

	self validateCell: startCell.
	self validateCell: endCell.
	
	startCell = endCell
		ifTrue: [self error: self class cannotMoveToSameCellErrorDescription].

	(self cellIsFull: endCell)
		ifTrue: [
			self error: self class cannotMoveToFullCellErrorDescription.
			].
	
	currentPlayer movePieceFrom: startCell to: endCell.!
!TerniLapilli methodsFor: 'phase actions' stamp: 'CJ 10/31/2020 15:19:51'!
whenInMovingPhaseMovePieceFrom: startCell to: endCell

	self validateCell: startCell.
	self validateCell: endCell.
	
	startCell = endCell
		ifTrue: [self error: self class cannotMoveToSameCellErrorDescription].

	(self cellIsFull: endCell)
		ifTrue: [
			self error: self class cannotMoveToFullCellErrorDescription.
			].
	
	currentPlayer movePieceFrom: startCell to: endCell.! !
!MovingTerniLapilliPhase methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 15:19:51' prior: 50922867 overrides: 50922535!
movePieceFrom: startCell to: endCell
	
	game whenInMovingPhaseMovePieceFrom: startCell to: endCell.! !

!methodRemoval: TerniLapilli #whenMovingMovePieceFrom:to: stamp: 'CJ 10/31/2020 15:19:51'!
whenMovingMovePieceFrom: startCell to: endCell

	self validateCell: startCell.
	self validateCell: endCell.
	
	startCell = endCell
		ifTrue: [self error: self class cannotMoveToSameCellErrorDescription].

	(self cellIsFull: endCell)
		ifTrue: [
			self error: self class cannotMoveToFullCellErrorDescription.
			].
	
	currentPlayer movePieceFrom: startCell to: endCell.!
!TerniLapilli methodsFor: 'phase actions' stamp: 'CJ 10/31/2020 15:20:05'!
whenInMovingPhasePutPieceAt: cellToPlayIn

	self error: self class cannotPutMorePiecesErrorDescription.! !
!MovingTerniLapilliPhase methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 15:20:05' prior: 50922750 overrides: 50922739!
putPieceAt: cellToPlayIn

	game whenInMovingPhasePutPieceAt: cellToPlayIn.! !

!methodRemoval: TerniLapilli #whenFullPutPieceAt: stamp: 'CJ 10/31/2020 15:20:05'!
whenFullPutPieceAt: cellToPlayIn

	self error: self class cannotPutMorePiecesErrorDescription.!
!TerniLapilli methodsFor: 'phase actions' stamp: 'CJ 10/31/2020 15:20:18'!
whenInPuttingPhaseMovePieceFrom: startCell to: endCell
	
	self error: self class cannotMoveBeforePlacingAllPiecesErrorDescription.! !
!PuttingTerniLapilliPhase methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 15:20:18' prior: 50922523 overrides: 50922535!
movePieceFrom: startCell to: endCell
	
	game whenInPuttingPhaseMovePieceFrom: startCell to: endCell.! !

!methodRemoval: TerniLapilli #whenNotFullMovePieceFrom:to: stamp: 'CJ 10/31/2020 15:20:18'!
whenNotFullMovePieceFrom: startCell to: endCell
	
	self error: self class cannotMoveBeforePlacingAllPiecesErrorDescription.!
!TerniLapilli methodsFor: 'phase actions' stamp: 'CJ 10/31/2020 15:20:38'!
whenInPuttingPhasePutPieceAt: cellToPlayIn

	self validateCell: cellToPlayIn.
	(self cellIsFull: cellToPlayIn) ifTrue: [self error: self class cannotPutOnFullCellErrorDescription].

	currentPlayer putPiece: cellToPlayIn.
	
	self allPiecesHaveBeenPlaced
		ifTrue: [currentPhase := MovingTerniLapilliPhase forGame: self].! !
!PuttingTerniLapilliPhase methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 15:20:38' prior: 50922744 overrides: 50922739!
putPieceAt: cellToPlayIn

	game whenInPuttingPhasePutPieceAt: cellToPlayIn.! !

!methodRemoval: TerniLapilli #whenNotFullPutPieceAt: stamp: 'CJ 10/31/2020 15:20:38'!
whenNotFullPutPieceAt: cellToPlayIn

	self validateCell: cellToPlayIn.
	(self cellIsFull: cellToPlayIn) ifTrue: [self error: self class cannotPutOnFullCellErrorDescription].

	currentPlayer putPiece: cellToPlayIn.
	
	self allPiecesHaveBeenPlaced
		ifTrue: [currentPhase := MovingTerniLapilliPhase forGame: self].!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 15:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 15:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 15:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 15:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 15:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 15:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 15:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 15:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 15:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:20:40'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/31/2020 15:20:40'!
PASSED!
!TerniLapilli methodsFor: 'phase actions' stamp: 'CJ 10/31/2020 15:23:03' prior: 50922887!
whenInMovingPhaseMovePieceFrom: startCell to: endCell

	startCell = endCell
		ifTrue: [self error: self class cannotMoveToSameCellErrorDescription].
		
	self validateCell: startCell.
	self validateCell: endCell.

	(self cellIsFull: endCell)
		ifTrue: [
			self error: self class cannotMoveToFullCellErrorDescription.
			].
	
	currentPlayer movePieceFrom: startCell to: endCell.! !
!TerniLapilli methodsFor: 'phase actions' stamp: 'CJ 10/31/2020 15:23:23' prior: 50923036!
whenInMovingPhaseMovePieceFrom: startCell to: endCell

	startCell = endCell
		ifTrue: [self error: self class cannotMoveToSameCellErrorDescription].
		
	self validateCell: startCell.
	self validateCell: endCell.

	(self cellIsFull: endCell)
		ifTrue: [self error: self class cannotMoveToFullCellErrorDescription].
	
	currentPlayer movePieceFrom: startCell to: endCell.! !
!TerniLapilli methodsFor: 'phase actions' stamp: 'CJ 10/31/2020 15:24:03' prior: 50923051!
whenInMovingPhaseMovePieceFrom: startCell to: endCell

	startCell = endCell
		ifTrue: [self error: self class cannotMoveToSameCellErrorDescription].
		
	self validateCell: startCell.

	self validateCell: endCell.
	(self cellIsFull: endCell)
		ifTrue: [self error: self class cannotMoveToFullCellErrorDescription].
	
	currentPlayer movePieceFrom: startCell to: endCell.! !
!TerniLapilli methodsFor: 'phase actions' stamp: 'CJ 10/31/2020 15:24:44' prior: 50923066!
whenInMovingPhaseMovePieceFrom: startCell to: endCell

	startCell = endCell
		ifTrue: [self error: self class cannotMoveToSameCellErrorDescription].
		
	self validateCell: startCell.
	self validateCell: endCell.
	
	(self cellIsFull: endCell)
		ifTrue: [self error: self class cannotMoveToFullCellErrorDescription].
	
	currentPlayer movePieceFrom: startCell to: endCell.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 15:24:56'!
validateCellCoordinates: cellToValidate 
	
	(cellToValidate between: 0@0 and: 2@2)
		ifFalse: [self error: self class invalidCellCoordinatesErrorDescription].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 15:24:56' prior: 50923081!
whenInMovingPhaseMovePieceFrom: startCell to: endCell

	startCell = endCell
		ifTrue: [self error: self class cannotMoveToSameCellErrorDescription].
		
	self validateCellCoordinates: startCell.
	self validateCellCoordinates: endCell.
	
	(self cellIsFull: endCell)
		ifTrue: [self error: self class cannotMoveToFullCellErrorDescription].
	
	currentPlayer movePieceFrom: startCell to: endCell.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 15:24:56' prior: 50922965!
whenInPuttingPhasePutPieceAt: cellToPlayIn

	self validateCellCoordinates: cellToPlayIn.
	(self cellIsFull: cellToPlayIn) ifTrue: [self error: self class cannotPutOnFullCellErrorDescription].

	currentPlayer putPiece: cellToPlayIn.
	
	self allPiecesHaveBeenPlaced
		ifTrue: [currentPhase := MovingTerniLapilliPhase forGame: self].! !

!methodRemoval: TerniLapilli #validateCell: stamp: 'CJ 10/31/2020 15:24:56'!
validateCell: cellToValidate 
	
	(cellToValidate between: 0@0 and: 2@2)
		ifFalse: [self error: self class invalidCellCoordinatesErrorDescription].!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 15:24:57'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 15:24:57'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 15:24:57'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 15:24:57'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:24:57'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 15:24:57'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 15:24:57'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 15:24:57'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 15:24:57'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 15:24:57'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:24:57'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/31/2020 15:24:57'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 15:25:12'!
validateCellBoundaries: cellToValidate 
	
	(cellToValidate between: 0@0 and: 2@2)
		ifFalse: [self error: self class invalidCellCoordinatesErrorDescription].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 15:25:12' prior: 50923105!
whenInMovingPhaseMovePieceFrom: startCell to: endCell

	startCell = endCell
		ifTrue: [self error: self class cannotMoveToSameCellErrorDescription].
		
	self validateCellBoundaries: startCell.
	self validateCellBoundaries: endCell.
	
	(self cellIsFull: endCell)
		ifTrue: [self error: self class cannotMoveToFullCellErrorDescription].
	
	currentPlayer movePieceFrom: startCell to: endCell.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 15:25:12' prior: 50923121!
whenInPuttingPhasePutPieceAt: cellToPlayIn

	self validateCellBoundaries: cellToPlayIn.
	(self cellIsFull: cellToPlayIn) ifTrue: [self error: self class cannotPutOnFullCellErrorDescription].

	currentPlayer putPiece: cellToPlayIn.
	
	self allPiecesHaveBeenPlaced
		ifTrue: [currentPhase := MovingTerniLapilliPhase forGame: self].! !

!methodRemoval: TerniLapilli #validateCellCoordinates: stamp: 'CJ 10/31/2020 15:25:12'!
validateCellCoordinates: cellToValidate 
	
	(cellToValidate between: 0@0 and: 2@2)
		ifFalse: [self error: self class invalidCellCoordinatesErrorDescription].!
!TerniLapilli methodsFor: 'phase actions' stamp: 'CJ 10/31/2020 15:25:52'!
validateCellNotFull: cellToPlayIn

	(self cellIsFull: cellToPlayIn) ifTrue: [self error: self class cannotPutOnFullCellErrorDescription].! !
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/31/2020 15:27:28'!
ifCellIsFull: cellToPlayIn raise: errorToRaise

	(self cellIsFull: cellToPlayIn) ifTrue: [self error: errorToRaise].! !
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/31/2020 15:27:52' prior: 50923232!
ifCellIsFull: cellToPlayIn raise: errorDescriptionToRaise

	(self cellIsFull: cellToPlayIn) ifTrue: [self error: errorDescriptionToRaise].! !

!methodRemoval: TerniLapilli #validateCellNotFull: stamp: 'CJ 10/31/2020 15:28:11'!
validateCellNotFull: cellToPlayIn

	(self cellIsFull: cellToPlayIn) ifTrue: [self error: self class cannotPutOnFullCellErrorDescription].!
!TerniLapilli methodsFor: 'phase actions' stamp: 'CJ 10/31/2020 15:28:55' prior: 50923204!
whenInPuttingPhasePutPieceAt: cellToPlayIn

	self validateCellBoundaries: cellToPlayIn.
	self ifCellIsFull: cellToPlayIn raise: self class cannotPutOnFullCellErrorDescription.

	currentPlayer putPiece: cellToPlayIn.
	
	self allPiecesHaveBeenPlaced
		ifTrue: [currentPhase := MovingTerniLapilliPhase forGame: self].! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 15:28:56'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 15:28:56'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 15:28:56'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 15:28:56'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:28:56'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 15:28:56'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 15:28:56'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 15:28:56'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 15:28:56'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 15:28:56'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:28:56'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/31/2020 15:28:56'!
PASSED!
!TerniLapilli methodsFor: 'phase actions' stamp: 'CJ 10/31/2020 15:29:22' prior: 50923188!
whenInMovingPhaseMovePieceFrom: startCell to: endCell

	startCell = endCell
		ifTrue: [self error: self class cannotMoveToSameCellErrorDescription].
		
	self validateCellBoundaries: startCell.
	self validateCellBoundaries: endCell.
	
	self ifCellIsFull: endCell raise: self class cannotMoveToFullCellErrorDescription.
	
	currentPlayer movePieceFrom: startCell to: endCell.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 15:29:23'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 15:29:23'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 15:29:23'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 15:29:23'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:29:23'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 15:29:23'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 15:29:23'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 15:29:23'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 15:29:23'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 15:29:23'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:29:23'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/31/2020 15:29:23'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 15:31:31'!
test12CannotMoveToSameCell

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 1@1 to: 1@1]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToSameCellErrorDescription.! !

!methodRemoval: TerniLapilliTest #test12 stamp: 'CJ 10/31/2020 15:31:31'!
test12

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 1@1 to: 1@1]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToSameCellErrorDescription.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 15:39:45'!
test13

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@0.
	game putPieceAt: 0@1.
	game putPieceAt: 1@1.
	game putPieceAt: 2@1.
	
	self
		should: [game movePieceFrom: 1@1 to: 1@1]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToSameCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 15:43:07' prior: 50923384!
test13

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 2@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@1.
	game putPieceAt: 1@1.
	game putPieceAt: 1@2.
	
	self
		should: [game movePieceFrom: 1@1 to: 1@1]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToSameCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 15:43:18' prior: 50923398!
test13

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 2@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@1.
	game putPieceAt: 1@1.
	game putPieceAt: 1@2.
	
	self
		should: [game movePieceFrom: 0@0 to: 1@1]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToSameCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 15:43:36' prior: 50923412!
test13

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 2@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@1.
	game putPieceAt: 1@1.
	game putPieceAt: 1@2.
	
	self
		should: [game movePieceFrom: 0@0 to: 0@2]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToSameCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 15:44:07' prior: 50923426!
test13

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 2@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@1.
	game putPieceAt: 1@1.
	game putPieceAt: 1@2.
	
	self
		should: [game movePieceFrom: 0@0 to: 0@2]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToNonConnectedCellErrorDescription.! !

!testRun: #TerniLapilliTest #test13 stamp: 'CJ 10/31/2020 15:44:09'!
ERROR!
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/31/2020 15:44:17'!
cannotMoveToNonConnectedCellErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error handling' stamp: 'CJ 10/31/2020 15:44:38' prior: 50923456!
cannotMoveToNonConnectedCellErrorDescription
	
	^ 'Cannot move to a cell that isn''t directly connected to the starting one'! !

!testRun: #TerniLapilliTest #test13 stamp: 'CJ 10/31/2020 15:44:40'!
FAILURE!

0@0 dist: 1:1!

0@0 dist: 1@1!

(0@0 dist: 1@1) < 2!
!TerniLapilli methodsFor: 'phase actions' stamp: 'CJ 10/31/2020 15:49:31' prior: 50923305!
whenInMovingPhaseMovePieceFrom: startCell to: endCell

	startCell = endCell
		ifTrue: [self error: self class cannotMoveToSameCellErrorDescription].
		
	self validateCellBoundaries: startCell.
	self validateCellBoundaries: endCell.
	
	self ifCellIsFull: endCell raise: self class cannotMoveToFullCellErrorDescription.
	
	(startCell eightNeighbors includes: endCell)
		ifFalse: [self error: self class cannotMoveToNonConnectedCellErrorDescription].
	
	currentPlayer movePieceFrom: startCell to: endCell.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 15:49:34'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 15:49:34'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 15:49:34'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 15:49:34'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:49:34'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 15:49:34'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 15:49:34'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 15:49:34'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 15:49:34'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 15:49:34'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:49:34'!
PASSED!

!testRun: #TerniLapilliTest #test12CannotMoveToSameCell stamp: 'CJ 10/31/2020 15:49:34'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'CJ 10/31/2020 15:49:34'!
PASSED!
!TerniLapilli methodsFor: 'phase actions' stamp: 'CJ 10/31/2020 15:50:17' prior: 50923473!
whenInMovingPhaseMovePieceFrom: startCell to: endCell

	startCell = endCell
		ifTrue: [self error: self class cannotMoveToSameCellErrorDescription].
	(startCell eightNeighbors includes: endCell)
		ifFalse: [self error: self class cannotMoveToNonConnectedCellErrorDescription].
			
	self validateCellBoundaries: startCell.
	self validateCellBoundaries: endCell.
	
	self ifCellIsFull: endCell raise: self class cannotMoveToFullCellErrorDescription.
	
	currentPlayer movePieceFrom: startCell to: endCell.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 15:50:18'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 15:50:18'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 15:50:18'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 15:50:18'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:50:18'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 15:50:18'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 15:50:18'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 15:50:18'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 15:50:18'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 15:50:18'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:50:18'!
PASSED!

!testRun: #TerniLapilliTest #test12CannotMoveToSameCell stamp: 'CJ 10/31/2020 15:50:18'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'CJ 10/31/2020 15:50:18'!
PASSED!
!TerniLapilli methodsFor: 'phase actions' stamp: 'CJ 10/31/2020 15:50:36'!
validatePotentialMoveFrom: startCell to: endCell

	startCell = endCell
		ifTrue: [self error: self class cannotMoveToSameCellErrorDescription].
	(startCell eightNeighbors includes: endCell)
		ifFalse: [self error: self class cannotMoveToNonConnectedCellErrorDescription].! !
!TerniLapilli methodsFor: 'phase actions' stamp: 'CJ 10/31/2020 15:51:08' prior: 50923533!
whenInMovingPhaseMovePieceFrom: startCell to: endCell

	self validatePotentialMoveFrom: startCell to: endCell.
			
	self validateCellBoundaries: startCell.
	self validateCellBoundaries: endCell.
	
	self ifCellIsFull: endCell raise: self class cannotMoveToFullCellErrorDescription.
	
	currentPlayer movePieceFrom: startCell to: endCell.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 15:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 15:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 15:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 15:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 15:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 15:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 15:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 15:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 15:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test12CannotMoveToSameCell stamp: 'CJ 10/31/2020 15:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'CJ 10/31/2020 15:51:17'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 15:53:21'!
test14

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 2@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@1.
	game putPieceAt: 1@1.
	game putPieceAt: 1@2.
	
	self
		should: [game movePieceFrom: 0@0 to: 0@2]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToNonConnectedCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 15:53:44' prior: 50923659!
test14

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 2@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@1.
	game putPieceAt: 1@1.
	game putPieceAt: 1@2.
	game movePieceFrom: 1@1 to: 0@2.
	
	self
		should: [game movePieceFrom: 0@0 to: 0@2]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToNonConnectedCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 15:54:17' prior: 50923673!
test14

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 2@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@1.
	game putPieceAt: 1@1.
	game putPieceAt: 1@2.
	game movePieceFrom: 1@1 to: 0@2.
	
	self
		should: [game movePieceFrom: 1@2 to: 0@1]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToNonConnectedCellErrorDescription.! !

!testRun: #TerniLapilliTest #test14 stamp: 'CJ 10/31/2020 15:54:18'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'CJ 10/31/2020 15:56:24' prior: 50920488!
moveXPieceFrom: startCell to: endCell 
	
	(playerOCells includes: startCell)
		ifTrue: [self error: self class cannotMoveOtherPlayerPieceErrorDescription].
	(playerXCells includes: startCell)
		ifFalse: [self error: self class cannotMoveFromEmptyCellErrorDescription ].
	playerXCells remove: startCell. playerXCells add: endCell.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'CJ 10/31/2020 15:56:48' prior: 50923705!
moveXPieceFrom: startCell to: endCell 
	
	(playerOCells includes: startCell)
		ifTrue: [self error: self class cannotMoveOtherPlayerPieceErrorDescription].
	(playerXCells includes: startCell)
		ifFalse: [self error: self class cannotMoveFromEmptyCellErrorDescription ].
	
	playerXCells remove: startCell. playerXCells add: endCell.
	
	currentPlayer := TerniLapilliPlayerO playing: self.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'CJ 10/31/2020 15:57:12' prior: 50920525!
moveOPieceFrom: startCell to: endCell 
	
	(playerXCells includes: startCell)
		ifTrue: [self error: self class cannotMoveOtherPlayerPieceErrorDescription].
	(playerOCells includes: startCell)
		ifFalse: [self error: self class cannotMoveFromEmptyCellErrorDescription].
		
	playerOCells remove: startCell. playerOCells add: endCell.
	
	currentPlayer := TerniLapilliPlayerX playing: self.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 15:57:16'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 15:57:16'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 15:57:16'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 15:57:16'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:57:16'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 15:57:16'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 15:57:16'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 15:57:16'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 15:57:16'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 15:57:16'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:57:16'!
PASSED!

!testRun: #TerniLapilliTest #test12CannotMoveToSameCell stamp: 'CJ 10/31/2020 15:57:16'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'CJ 10/31/2020 15:57:16'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'CJ 10/31/2020 15:57:16'!
FAILURE!

!testRun: #TerniLapilliTest #test14 stamp: 'CJ 10/31/2020 15:57:16'!
FAILURE!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 15:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 15:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 15:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 15:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 15:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 15:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/31/2020 15:57:43'!
ERROR!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 15:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 15:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 15:57:43'!
PASSED!

!testRun: #TerniLapilliTest #test12 stamp: 'CJ 10/31/2020 15:57:43'!
ERROR!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 15:57:52'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 15:57:52'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 15:57:52'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 15:57:52'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:57:52'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 15:57:52'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 15:57:52'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 15:57:52'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 15:57:52'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 15:57:52'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:57:52'!
PASSED!

!testRun: #TerniLapilliTest #test12CannotMoveToSameCell stamp: 'CJ 10/31/2020 15:57:52'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'CJ 10/31/2020 15:57:52'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'CJ 10/31/2020 15:57:52'!
FAILURE!

!testRun: #TerniLapilliTest #test14 stamp: 'CJ 10/31/2020 15:57:52'!
FAILURE!
!TerniLapilli methodsFor: 'phase actions' stamp: 'CJ 10/31/2020 15:59:15' prior: 50923604!
whenInMovingPhaseMovePieceFrom: startCell to: endCell

	self validatePotentialMoveFrom: startCell to: endCell.
			
	self validateCellBoundaries: startCell.
	self validateCellBoundaries: endCell.
	
	self ifCellIsFull: endCell raise: self class cannotMoveToFullCellErrorDescription.
	
	(startCell = 1@2 and: [endCell = 0@1])
		ifTrue: [self error: self class cannotMoveToNonConnectedCellErrorDescription].
	
	currentPlayer movePieceFrom: startCell to: endCell.! !

!testRun: #TerniLapilliTest #test14 stamp: 'CJ 10/31/2020 15:59:22'!
ERROR!
!TerniLapilli methodsFor: 'phase actions' stamp: 'CJ 10/31/2020 15:59:43' prior: 50923882!
whenInMovingPhaseMovePieceFrom: startCell to: endCell

	self validatePotentialMoveFrom: startCell to: endCell.
			
	self validateCellBoundaries: startCell.
	self validateCellBoundaries: endCell.
	
	self ifCellIsFull: endCell raise: self class cannotMoveToFullCellErrorDescription.
	
	(startCell = (1@2) and: [endCell = (0@1)])
		ifTrue: [self error: self class cannotMoveToNonConnectedCellErrorDescription].
	
	currentPlayer movePieceFrom: startCell to: endCell.! !

!testRun: #TerniLapilliTest #test14 stamp: 'CJ 10/31/2020 15:59:45'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 15:59:48'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 15:59:48'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 15:59:48'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 15:59:48'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:59:48'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 15:59:48'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 15:59:48'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 15:59:48'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 15:59:48'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 15:59:48'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 15:59:48'!
PASSED!

!testRun: #TerniLapilliTest #test12CannotMoveToSameCell stamp: 'CJ 10/31/2020 15:59:48'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'CJ 10/31/2020 15:59:48'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'CJ 10/31/2020 15:59:48'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 16:00:17'!
test15

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 2@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@1.
	game putPieceAt: 1@1.
	game putPieceAt: 1@2.
	game movePieceFrom: 1@1 to: 0@2.
	
	self
		should: [game movePieceFrom: 1@2 to: 0@1]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToNonConnectedCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 16:00:55' prior: 50923965!
test15

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 2@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@1.
	game putPieceAt: 1@1.
	game putPieceAt: 1@2.
	game movePieceFrom: 1@1 to: 0@2.
	game movePieceFrom: 1@2 to: 0@2.
	
	self
		should: [game movePieceFrom: 1@2 to: 0@1]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToNonConnectedCellErrorDescription.! !

!methodRemoval: TerniLapilliTest #test15 stamp: 'CJ 10/31/2020 16:02:12'!
test15

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 2@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@1.
	game putPieceAt: 1@1.
	game putPieceAt: 1@2.
	game movePieceFrom: 1@1 to: 0@2.
	game movePieceFrom: 1@2 to: 0@2.
	
	self
		should: [game movePieceFrom: 1@2 to: 0@1]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToNonConnectedCellErrorDescription.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 16:02:39'!
test15

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 2@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@1.
	game putPieceAt: 1@1.
	game putPieceAt: 1@2.
	game movePieceFrom: 1@1 to: 0@2.
	
	self
		should: [game movePieceFrom: 1@2 to: 0@1]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToNonConnectedCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 16:03:25' prior: 50924011!
test15

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 2@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@1.
	game putPieceAt: 1@1.
	game putPieceAt: 1@2.
	
	self
		should: [game movePieceFrom: 1@0 to: 0@1]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToNonConnectedCellErrorDescription.! !

!testRun: #TerniLapilliTest #test15 stamp: 'CJ 10/31/2020 16:03:27'!
FAILURE!
!TerniLapilli methodsFor: 'phase actions' stamp: 'CJ 10/31/2020 16:04:38' prior: 50923902!
whenInMovingPhaseMovePieceFrom: startCell to: endCell

	self validatePotentialMoveFrom: startCell to: endCell.
			
	self validateCellBoundaries: startCell.
	self validateCellBoundaries: endCell.
	
	self ifCellIsFull: endCell raise: self class cannotMoveToFullCellErrorDescription.
	
	((startCell = (1@2) and: [endCell = (0@1)]) or: (startCell = (1@0) and: [endCell = (0@1)]))
		ifTrue: [self error: self class cannotMoveToNonConnectedCellErrorDescription].
	
	currentPlayer movePieceFrom: startCell to: endCell.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 16:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 16:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 16:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 16:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 16:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 16:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 16:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 16:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 16:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 16:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 16:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test12CannotMoveToSameCell stamp: 'CJ 10/31/2020 16:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'CJ 10/31/2020 16:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'CJ 10/31/2020 16:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'CJ 10/31/2020 16:04:42'!
PASSED!

!classDefinition: #TerniLapilli category: 'TerniLapilli' stamp: 'CJ 10/31/2020 16:07:00'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentPlayer playerOCells playerXCells currentPhase cellsWithoutDiagonalLink'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 16:06:58' prior: 50923592!
validatePotentialMoveFrom: startCell to: endCell

	startCell = endCell
		ifTrue: [self error: self class cannotMoveToSameCellErrorDescription].
	
	(cellsWithoutDiagonalLink includes: startCell)
		ifTrue: [].
	(startCell eightNeighbors includes: endCell)
		ifFalse: [self error: self class cannotMoveToNonConnectedCellErrorDescription].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 16:07:28' prior: 50924117!
validatePotentialMoveFrom: startCell to: endCell

	| cellNeighbours |
	startCell = endCell
		ifTrue: [self error: self class cannotMoveToSameCellErrorDescription].
	
	(cellsWithoutDiagonalLink includes: startCell)
		ifTrue: [
			].
		
	(startCell eightNeighbors includes: endCell)
		ifFalse: [self error: self class cannotMoveToNonConnectedCellErrorDescription].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 16:08:22' prior: 50924131!
validatePotentialMoveFrom: startCell to: endCell

	| cellNeighbours |
	startCell = endCell
		ifTrue: [self error: self class cannotMoveToSameCellErrorDescription].
	
	(cellsWithoutDiagonalLink includes: startCell)
		ifTrue: [cellNeighbours := startCell fourNeighbors]
		ifFalse: [cellNeighbours := startCell eightNeighbors].
		
	(cellNeighbours includes: endCell)
		ifFalse: [self error: self class cannotMoveToNonConnectedCellErrorDescription].! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 16:08:25'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 16:08:25'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 16:08:25'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 16:08:25'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 16:08:25'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 16:08:25'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 16:08:25'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 16:08:25'!
FAILURE!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 16:08:25'!
FAILURE!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 16:08:25'!
FAILURE!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 16:08:25'!
FAILURE!

!testRun: #TerniLapilliTest #test12CannotMoveToSameCell stamp: 'CJ 10/31/2020 16:08:25'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'CJ 10/31/2020 16:08:25'!
FAILURE!

!testRun: #TerniLapilliTest #test14 stamp: 'CJ 10/31/2020 16:08:25'!
ERROR!

!testRun: #TerniLapilliTest #test15 stamp: 'CJ 10/31/2020 16:08:25'!
FAILURE!

!testRun: #TerniLapilliTest #test14 stamp: 'CJ 10/31/2020 16:08:28'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 16:09:28' prior: 50922393 overrides: 16896425!
initialize

	playerXCells := Set new.
	playerOCells := Set new.
	currentPlayer := TerniLapilliPlayerX playing: self.
	currentPhase := PuttingTerniLapilliPhase forGame: self.
	cellsWithoutDiagonalLink := Set with: 1@0 with: 0@1 with: 2@1 with: 1@2.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 16:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 16:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 16:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 16:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 16:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 16:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 16:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 16:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 16:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 16:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 16:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test12CannotMoveToSameCell stamp: 'CJ 10/31/2020 16:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test13 stamp: 'CJ 10/31/2020 16:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test14 stamp: 'CJ 10/31/2020 16:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'CJ 10/31/2020 16:09:29'!
PASSED!

!methodRemoval: TerniLapilliTest #test14 stamp: 'CJ 10/31/2020 16:09:48'!
test14

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 2@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@1.
	game putPieceAt: 1@1.
	game putPieceAt: 1@2.
	game movePieceFrom: 1@1 to: 0@2.
	
	self
		should: [game movePieceFrom: 1@2 to: 0@1]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToNonConnectedCellErrorDescription.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 16:10:10'!
test13CannotMoveToCellMoreThanOneLinkAway

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 2@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@1.
	game putPieceAt: 1@1.
	game putPieceAt: 1@2.
	
	self
		should: [game movePieceFrom: 0@0 to: 0@2]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToNonConnectedCellErrorDescription.! !

!methodRemoval: TerniLapilliTest #test13 stamp: 'CJ 10/31/2020 16:10:10'!
test13

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 2@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@1.
	game putPieceAt: 1@1.
	game putPieceAt: 1@2.
	
	self
		should: [game movePieceFrom: 0@0 to: 0@2]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToNonConnectedCellErrorDescription.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 16:10:22'!
test15CannotMoveToCellWithoutDiagonalLink

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 2@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@1.
	game putPieceAt: 1@1.
	game putPieceAt: 1@2.
	
	self
		should: [game movePieceFrom: 1@0 to: 0@1]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToNonConnectedCellErrorDescription.! !

!methodRemoval: TerniLapilliTest #test15 stamp: 'CJ 10/31/2020 16:10:22'!
test15

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 2@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@1.
	game putPieceAt: 1@1.
	game putPieceAt: 1@2.
	
	self
		should: [game movePieceFrom: 1@0 to: 0@1]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToNonConnectedCellErrorDescription.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 16:10:27'!
test14CannotMoveToCellWithoutDiagonalLink

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 2@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@1.
	game putPieceAt: 1@1.
	game putPieceAt: 1@2.
	
	self
		should: [game movePieceFrom: 1@0 to: 0@1]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToNonConnectedCellErrorDescription.! !

!methodRemoval: TerniLapilliTest #test15CannotMoveToCellWithoutDiagonalLink stamp: 'CJ 10/31/2020 16:10:27'!
test15CannotMoveToCellWithoutDiagonalLink

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 2@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@1.
	game putPieceAt: 1@1.
	game putPieceAt: 1@2.
	
	self
		should: [game movePieceFrom: 1@0 to: 0@1]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToNonConnectedCellErrorDescription.!

!testRun: #TerniLapilliTest #test14CannotMoveToCellWithoutDiagonalLink stamp: 'CJ 10/31/2020 16:10:29'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 16:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 16:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 16:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 16:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 16:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 16:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 16:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 16:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 16:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 16:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 16:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test12CannotMoveToSameCell stamp: 'CJ 10/31/2020 16:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test13CannotMoveToCellMoreThanOneLinkAway stamp: 'CJ 10/31/2020 16:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveToCellWithoutDiagonalLink stamp: 'CJ 10/31/2020 16:10:32'!
PASSED!
!TerniLapilli methodsFor: 'phase actions' stamp: 'CJ 10/31/2020 16:11:38' prior: 50924042!
whenInMovingPhaseMovePieceFrom: startCell to: endCell

	self validatePotentialMoveFrom: startCell to: endCell.
			
	self validateCellBoundaries: startCell.
	self validateCellBoundaries: endCell.
	
	self ifCellIsFull: endCell raise: self class cannotMoveToFullCellErrorDescription.
	
	currentPlayer movePieceFrom: startCell to: endCell.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 16:11:39'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 16:11:39'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 16:11:39'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 16:11:39'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 16:11:39'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 16:11:39'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 16:11:39'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 16:11:39'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 16:11:39'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 16:11:39'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 16:11:39'!
PASSED!

!testRun: #TerniLapilliTest #test12CannotMoveToSameCell stamp: 'CJ 10/31/2020 16:11:39'!
PASSED!

!testRun: #TerniLapilliTest #test13CannotMoveToCellMoreThanOneLinkAway stamp: 'CJ 10/31/2020 16:11:39'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveToCellWithoutDiagonalLink stamp: 'CJ 10/31/2020 16:11:39'!
PASSED!
!TerniLapilli methodsFor: 'phase actions' stamp: 'CJ 10/31/2020 16:12:05' prior: 50924416!
whenInMovingPhaseMovePieceFrom: startCell to: endCell

	self validateCellBoundaries: startCell.
	self validateCellBoundaries: endCell.
	
	self ifCellIsFull: endCell raise: self class cannotMoveToFullCellErrorDescription.
	
	self validatePotentialMoveFrom: startCell to: endCell.
	
	currentPlayer movePieceFrom: startCell to: endCell.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 16:12:06'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 16:12:06'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 16:12:06'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 16:12:06'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 16:12:06'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 16:12:06'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 16:12:06'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 16:12:06'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 16:12:06'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 16:12:06'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 16:12:06'!
PASSED!

!testRun: #TerniLapilliTest #test12CannotMoveToSameCell stamp: 'CJ 10/31/2020 16:12:06'!
FAILURE!

!testRun: #TerniLapilliTest #test13CannotMoveToCellMoreThanOneLinkAway stamp: 'CJ 10/31/2020 16:12:06'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveToCellWithoutDiagonalLink stamp: 'CJ 10/31/2020 16:12:06'!
PASSED!

!testRun: #TerniLapilliTest #test12CannotMoveToSameCell stamp: 'CJ 10/31/2020 16:12:06'!
FAILURE!
!TerniLapilli methodsFor: 'phase actions' stamp: 'CJ 10/31/2020 16:12:16' prior: 50924475!
whenInMovingPhaseMovePieceFrom: startCell to: endCell

	self validatePotentialMoveFrom: startCell to: endCell.
			
	self validateCellBoundaries: startCell.
	self validateCellBoundaries: endCell.
	
	self ifCellIsFull: endCell raise: self class cannotMoveToFullCellErrorDescription.
	
	currentPlayer movePieceFrom: startCell to: endCell.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 16:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 16:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 16:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 16:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 16:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 16:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 16:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 16:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 16:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 16:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 16:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test12CannotMoveToSameCell stamp: 'CJ 10/31/2020 16:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test13CannotMoveToCellMoreThanOneLinkAway stamp: 'CJ 10/31/2020 16:12:17'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveToCellWithoutDiagonalLink stamp: 'CJ 10/31/2020 16:12:17'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 16:12:24' prior: 50924146!
validatePotentialMoveFrom: startCell to: endCell

	| cellNeighbours |
	
	startCell = endCell
		ifTrue: [self error: self class cannotMoveToSameCellErrorDescription].
	
	(cellsWithoutDiagonalLink includes: startCell)
		ifTrue: [cellNeighbours := startCell fourNeighbors]
		ifFalse: [cellNeighbours := startCell eightNeighbors].
		
	(cellNeighbours includes: endCell)
		ifFalse: [self error: self class cannotMoveToNonConnectedCellErrorDescription].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 16:15:04'!
getReachableCellNeighbours: aCell
	
	(cellsWithoutDiagonalLink includes: aCell)
		ifTrue: [^ aCell fourNeighbors]
		ifFalse: [^ aCell eightNeighbors].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 16:15:30' prior: 50924597!
validatePotentialMoveFrom: startCell to: endCell

	| cellNeighbours |
	
	startCell = endCell
		ifTrue: [self error: self class cannotMoveToSameCellErrorDescription].
	
	cellNeighbours := self getReachableCellNeighbours: startCell.
		
	(cellNeighbours includes: endCell)
		ifFalse: [self error: self class cannotMoveToNonConnectedCellErrorDescription].! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 16:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 16:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 16:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 16:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 16:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 16:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 16:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 16:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 16:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 16:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 16:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test12CannotMoveToSameCell stamp: 'CJ 10/31/2020 16:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test13CannotMoveToCellMoreThanOneLinkAway stamp: 'CJ 10/31/2020 16:15:37'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveToCellWithoutDiagonalLink stamp: 'CJ 10/31/2020 16:15:37'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 16:16:32'!
test15

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 2@0.
	game putPieceAt: 1@0.
	game putPieceAt: 2@1.
	game putPieceAt: 1@1.
	game putPieceAt: 1@2.
	
	self
		should: [game movePieceFrom: 1@0 to: 0@1]
		raise: Error
		withMessageText: TerniLapilli cannotMoveToNonConnectedCellErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 16:19:16' prior: 50924682!
test15

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 0@1.
	game putPieceAt: 2@0.
	game putPieceAt: 0@2.
	
	self assert: game hasPlayerXWon.! !

!testRun: #TerniLapilliTest #test15 stamp: 'CJ 10/31/2020 16:19:17'!
FAILURE!
!TerniLapilli methodsFor: 'player actions' stamp: 'CJ 10/31/2020 16:21:53'!
xxxValidate: startCell xxxPlayer: xxxp xxxRival: xxxr
	
	(playerOCells includes: startCell)
		ifTrue: [self error: self class cannotMoveOtherPlayerPieceErrorDescription].
	(playerXCells includes: startCell)
		ifFalse: [self error: self class cannotMoveFromEmptyCellErrorDescription ].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'CJ 10/31/2020 16:22:07' prior: 50924708!
xxxValidate: startCell xxxPlayer: xxxp xxxRival: xxxr
	
	(xxxr includes: startCell)
		ifTrue: [self error: self class cannotMoveOtherPlayerPieceErrorDescription].
	(xxxp includes: startCell)
		ifFalse: [self error: self class cannotMoveFromEmptyCellErrorDescription ].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'CJ 10/31/2020 16:22:36' prior: 50924720!
xxxValidate: startCell xxxPlayer: xxxp xxxRival: xxxr
	
	(xxxr includes: startCell)
		ifTrue: [self error: self class cannotMoveOtherPlayerPieceErrorDescription].
	(xxxp includes: startCell)
		ifFalse: [self error: self class cannotMoveFromEmptyCellErrorDescription ].! !
!TerniLapilli methodsFor: 'player actions' stamp: 'CJ 10/31/2020 16:25:05'!
validateCell: startCell isIn: currentPlayerCells andNotIn: rivalPlayerCells
	
	(rivalPlayerCells includes: startCell)
		ifTrue: [self error: self class cannotMoveOtherPlayerPieceErrorDescription].
	(currentPlayerCells includes: startCell)
		ifFalse: [self error: self class cannotMoveFromEmptyCellErrorDescription ].! !

!methodRemoval: TerniLapilli #xxxValidate:xxxPlayer:xxxRival: stamp: 'CJ 10/31/2020 16:25:08'!
xxxValidate: startCell xxxPlayer: xxxp xxxRival: xxxr
	
	(xxxr includes: startCell)
		ifTrue: [self error: self class cannotMoveOtherPlayerPieceErrorDescription].
	(xxxp includes: startCell)
		ifFalse: [self error: self class cannotMoveFromEmptyCellErrorDescription ].!
!TerniLapilli methodsFor: 'player actions' stamp: 'CJ 10/31/2020 16:25:44' prior: 50923719!
moveXPieceFrom: startCell to: endCell 
	
	self validateCell: startCell isIn: playerXCells andNotIn: playerOCells.
	
	playerXCells remove: startCell. playerXCells add: endCell.
	
	currentPlayer := TerniLapilliPlayerO playing: self.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 16:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 16:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 16:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 16:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 16:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 16:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 16:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 16:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 16:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 16:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 16:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test12CannotMoveToSameCell stamp: 'CJ 10/31/2020 16:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test13CannotMoveToCellMoreThanOneLinkAway stamp: 'CJ 10/31/2020 16:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveToCellWithoutDiagonalLink stamp: 'CJ 10/31/2020 16:25:45'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'CJ 10/31/2020 16:25:45'!
FAILURE!

!testRun: #TerniLapilliTest #test15 stamp: 'CJ 10/31/2020 16:25:45'!
FAILURE!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 16:25:53'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 16:25:53'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 16:25:53'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 16:25:53'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 16:25:53'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 16:25:53'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 16:25:53'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 16:25:53'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 16:25:53'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 16:25:53'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 16:25:53'!
PASSED!

!testRun: #TerniLapilliTest #test12CannotMoveToSameCell stamp: 'CJ 10/31/2020 16:25:53'!
PASSED!

!testRun: #TerniLapilliTest #test13CannotMoveToCellMoreThanOneLinkAway stamp: 'CJ 10/31/2020 16:25:53'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveToCellWithoutDiagonalLink stamp: 'CJ 10/31/2020 16:25:53'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'CJ 10/31/2020 16:25:53'!
FAILURE!

!testRun: #TerniLapilliTest #test15 stamp: 'CJ 10/31/2020 16:25:53'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 16:26:05' prior: 50924696!
test15

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 0@1.
	game putPieceAt: 2@0.
	game putPieceAt: 0@2.
	
	"self assert: game hasPlayerXWon."! !

!testRun: #TerniLapilliTest #test15 stamp: 'CJ 10/31/2020 16:26:07'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 16:26:08'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 16:26:08'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 16:26:08'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 16:26:08'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 16:26:08'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 16:26:08'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 16:26:08'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 16:26:08'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 16:26:08'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 16:26:08'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 16:26:08'!
PASSED!

!testRun: #TerniLapilliTest #test12CannotMoveToSameCell stamp: 'CJ 10/31/2020 16:26:08'!
PASSED!

!testRun: #TerniLapilliTest #test13CannotMoveToCellMoreThanOneLinkAway stamp: 'CJ 10/31/2020 16:26:08'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveToCellWithoutDiagonalLink stamp: 'CJ 10/31/2020 16:26:08'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'CJ 10/31/2020 16:26:08'!
PASSED!
!TerniLapilli methodsFor: 'player actions' stamp: 'CJ 10/31/2020 16:26:22' prior: 50923735!
moveOPieceFrom: startCell to: endCell 
	
	self validateCell: startCell isIn: playerOCells andNotIn: playerXCells.
		
	playerOCells remove: startCell. playerOCells add: endCell.
	
	currentPlayer := TerniLapilliPlayerX playing: self.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'CJ 10/31/2020 16:28:53' prior: 50924768!
moveXPieceFrom: startCell to: endCell 
	
	self validateCell: startCell isIn: playerXCells andNotIn: playerOCells.
	
	playerXCells remove: startCell. playerXCells add: endCell.
	
	currentPlayer := TerniLapilliPlayerO playing: self.! !
!TerniLapilli methodsFor: 'validations' stamp: 'CJ 10/31/2020 16:31:09'!
movePlayerWithCells: currentPlayerCells from: startCell to: endCell withRivalCells: rivalPlayerCells
	
	(rivalPlayerCells includes: startCell)
		ifTrue: [self error: self class cannotMoveOtherPlayerPieceErrorDescription].
	(currentPlayerCells includes: startCell)
		ifFalse: [self error: self class cannotMoveFromEmptyCellErrorDescription ].! !
!TerniLapilli methodsFor: 'validations' stamp: 'CJ 10/31/2020 16:31:32' prior: 50924961!
movePlayerWithCells: currentPlayerCells from: startCell to: endCell withRivalCells: rivalPlayerCells
	
	self validateCell: startCell isIn: currentPlayerCells andNotIn: rivalPlayerCells.! !
!TerniLapilli methodsFor: 'validations' stamp: 'CJ 10/31/2020 16:32:28' prior: 50924975!
movePlayerWithCells: currentPlayerCells from: startCell to: endCell withRivalCells: rivalPlayerCells
	
	self validateCell: startCell isIn: currentPlayerCells andNotIn: rivalPlayerCells.
	currentPlayerCells remove: startCell. currentPlayerCells add: endCell.! !
!TerniLapilli methodsFor: 'validations' stamp: 'CJ 10/31/2020 16:32:57'!
movePieceForPlayerWithCells: currentPlayerCells from: startCell to: endCell withRivalCells: rivalPlayerCells
	
	self validateCell: startCell isIn: currentPlayerCells andNotIn: rivalPlayerCells.
	currentPlayerCells remove: startCell. currentPlayerCells add: endCell.! !

!methodRemoval: TerniLapilli #movePlayerWithCells:from:to:withRivalCells: stamp: 'CJ 10/31/2020 16:32:57'!
movePlayerWithCells: currentPlayerCells from: startCell to: endCell withRivalCells: rivalPlayerCells
	
	self validateCell: startCell isIn: currentPlayerCells andNotIn: rivalPlayerCells.
	currentPlayerCells remove: startCell. currentPlayerCells add: endCell.!
!TerniLapilli methodsFor: 'validations' stamp: 'CJ 10/31/2020 16:33:28'!
movePieceForPlayerWithCells: currentPlayerCells andRivalCells: rivalPlayerCells from: startCell to: endCell
	
	self validateCell: startCell isIn: currentPlayerCells andNotIn: rivalPlayerCells.
	currentPlayerCells remove: startCell. currentPlayerCells add: endCell.! !

!methodRemoval: TerniLapilli #movePieceForPlayerWithCells:from:to:withRivalCells: stamp: 'CJ 10/31/2020 16:33:39'!
movePieceForPlayerWithCells: currentPlayerCells from: startCell to: endCell withRivalCells: rivalPlayerCells
	
	self validateCell: startCell isIn: currentPlayerCells andNotIn: rivalPlayerCells.
	currentPlayerCells remove: startCell. currentPlayerCells add: endCell.!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 10/31/2020 16:33:45' prior: 50925018!
movePieceForPlayerWithCells: currentPlayerCells andRivalCells: rivalPlayerCells from: startCell to: endCell
	
	self validateCell: startCell isIn: currentPlayerCells andNotIn: rivalPlayerCells.
	
	currentPlayerCells remove: startCell. currentPlayerCells add: endCell.! !
!TerniLapilli methodsFor: 'player actions' stamp: 'CJ 10/31/2020 16:34:18' prior: 50924951!
moveXPieceFrom: startCell to: endCell 
	
	self movePieceForPlayerWithCells: playerXCells andRivalCells: playerOCells from: startCell to: endCell.
	
	currentPlayer := TerniLapilliPlayerO playing: self.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 16:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 16:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 16:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 16:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 16:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 16:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 16:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 16:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 16:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 16:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 16:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test12CannotMoveToSameCell stamp: 'CJ 10/31/2020 16:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test13CannotMoveToCellMoreThanOneLinkAway stamp: 'CJ 10/31/2020 16:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveToCellWithoutDiagonalLink stamp: 'CJ 10/31/2020 16:34:21'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'CJ 10/31/2020 16:34:21'!
PASSED!
!TerniLapilli methodsFor: 'player actions' stamp: 'CJ 10/31/2020 16:34:37' prior: 50924940!
moveOPieceFrom: startCell to: endCell 
	
	self movePieceForPlayerWithCells: playerOCells andRivalCells: playerXCells from: startCell to: endCell.
	
	currentPlayer := TerniLapilliPlayerX playing: self.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 16:36:06' prior: 50919125!
test02OPlaysAfterX

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	
	self assert: game hasStarted.
	self assert: game isOPlaying.
	self deny: game isXPlaying.! !

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 16:36:09'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/31/2020 16:37:37' prior: 50918595!
hasStarted
	
	^ self fullCells ~= 0.! !
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/31/2020 16:37:43' prior: 50925133!
hasStarted
	
	^ self fullCells > 0.! !
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/31/2020 16:38:22' prior: 50922150!
allPiecesHaveBeenPlaced

	^ self fullCells >= 6! !
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/31/2020 16:38:28' prior: 50925137!
hasStarted
	
	^ self fullCells size > 0.! !
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 10/31/2020 16:38:45' prior: 50925146!
hasStarted
	
	^ self fullCells > 0.! !

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 16:38:50'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 10/31/2020 16:38:50'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 10/31/2020 16:38:50'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 10/31/2020 16:38:50'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 10/31/2020 16:38:50'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 10/31/2020 16:38:50'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 10/31/2020 16:38:50'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 10/31/2020 16:38:50'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 10/31/2020 16:38:50'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 10/31/2020 16:38:50'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 10/31/2020 16:38:50'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 10/31/2020 16:38:50'!
PASSED!

!testRun: #TerniLapilliTest #test12CannotMoveToSameCell stamp: 'CJ 10/31/2020 16:38:50'!
PASSED!

!testRun: #TerniLapilliTest #test13CannotMoveToCellMoreThanOneLinkAway stamp: 'CJ 10/31/2020 16:38:50'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveToCellWithoutDiagonalLink stamp: 'CJ 10/31/2020 16:38:50'!
PASSED!

!testRun: #TerniLapilliTest #test15 stamp: 'CJ 10/31/2020 16:38:50'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 16:39:09' prior: 50924880!
test15

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 0@1.
	game putPieceAt: 2@0.
	game putPieceAt: 0@2.
	
	self assert: game hasPlayerXWon.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'CJ 10/31/2020 16:40:22'!
test15PlayerWinsVertically

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 0@1.
	game putPieceAt: 2@0.
	game putPieceAt: 0@2.
	
	self assert: game hasPlayerXWon.! !

!methodRemoval: TerniLapilliTest #test15 stamp: 'CJ 10/31/2020 16:40:27'!
test15

	| game |
	
	game := TerniLapilli new.
	
	game putPieceAt: 0@0.
	game putPieceAt: 1@0.
	game putPieceAt: 0@1.
	game putPieceAt: 2@0.
	game putPieceAt: 0@2.
	
	self assert: game hasPlayerXWon.!

----End fileIn of /home/kali/exactas/ing1/ejercicios-isw1/17-TerniLapilli/TerniLapilli.st----!
!TerniLapilli methodsFor: 'actions' stamp: 'CJ 11/2/2020 14:39:57' prior: 50925779!
changeToVictoryPhaseIfPlayerWon

	^ (self hasPlayerXWon or: [self hasPlayerOWon])
		ifTrue: [ currentPhase := VictoryTerniLapilliPhase forGame: self ].! !
!TerniLapilli methodsFor: 'phase actions' stamp: 'CJ 11/2/2020 14:41:24' prior: 50925696!
whenInVictoryPhasePutPieceAt: cellToPlayIn

	self error: self class cannotPutPieceAfterPlayerWon.! !
!TerniLapilli methodsFor: 'phase actions' stamp: 'CJ 11/2/2020 14:41:32' prior: 50925690!
whenInVictoryPhaseMovePieceFrom: startCell to: endCell
	
	self error: self class cannotMovePieceAfterPlayerWon.! !
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 11/2/2020 14:43:16' prior: 50925565!
formsCompleteLine: playerCells
	^ playerCells size = self boardSideLength and: [
		(self formsVerticalLine: playerCells) or: [
		self formsHorizontalLine: playerCells] or: [
		self formsDiagonalLine: playerCells]].! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 11/2/2020 14:43:19'!
ERROR!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 11/2/2020 14:43:19'!
ERROR!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 11/2/2020 14:43:19'!
ERROR!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 11/2/2020 14:43:19'!
ERROR!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 11/2/2020 14:43:19'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 11/2/2020 14:43:19'!
ERROR!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 11/2/2020 14:43:19'!
ERROR!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 11/2/2020 14:43:19'!
ERROR!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 11/2/2020 14:43:19'!
ERROR!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 11/2/2020 14:43:19'!
ERROR!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 11/2/2020 14:43:19'!
ERROR!

!testRun: #TerniLapilliTest #test12CannotMoveToSameCell stamp: 'CJ 11/2/2020 14:43:19'!
ERROR!

!testRun: #TerniLapilliTest #test13CannotMoveToCellMoreThanOneLinkAway stamp: 'CJ 11/2/2020 14:43:19'!
ERROR!

!testRun: #TerniLapilliTest #test14CannotMoveToCellWithoutDiagonalLink stamp: 'CJ 11/2/2020 14:43:19'!
ERROR!

!testRun: #TerniLapilliTest #test15PlayerWinsVertically stamp: 'CJ 11/2/2020 14:43:19'!
ERROR!

!testRun: #TerniLapilliTest #test15PlayerWinsWithLeftColumn stamp: 'CJ 11/2/2020 14:43:19'!
ERROR!

!testRun: #TerniLapilliTest #test16PlayerWinsWithRightColumn stamp: 'CJ 11/2/2020 14:43:19'!
ERROR!

!testRun: #TerniLapilliTest #test17PlayerWinsWithTopRow stamp: 'CJ 11/2/2020 14:43:19'!
ERROR!

!testRun: #TerniLapilliTest #test18PlayerWinsDiagonal stamp: 'CJ 11/2/2020 14:43:19'!
ERROR!

!testRun: #TerniLapilliTest #test19PlayerWinsWithOppositeDiagonal stamp: 'CJ 11/2/2020 14:43:19'!
ERROR!

!testRun: #TerniLapilliTest #test20PlayerOWins stamp: 'CJ 11/2/2020 14:43:19'!
ERROR!

!testRun: #TerniLapilliTest #test21CannotPutPieceAfterPlayerWon stamp: 'CJ 11/2/2020 14:43:19'!
ERROR!

!testRun: #TerniLapilliTest #test22CannotMovePieceAfterPlayerWonByPutting stamp: 'CJ 11/2/2020 14:43:19'!
ERROR!

!testRun: #TerniLapilliTest #test23CannotMovePieceAfterPlayerWonByMoving stamp: 'CJ 11/2/2020 14:43:19'!
ERROR!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 11/2/2020 14:43:22'!
ERROR!
!TerniLapilli methodsFor: 'constants' stamp: 'CJ 11/2/2020 14:43:48'!
boardSideLength
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'constants' stamp: 'CJ 11/2/2020 14:43:53' prior: 50926244!
boardSideLength
	
	^ 3! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 11/2/2020 14:43:55'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 11/2/2020 14:43:59'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 11/2/2020 14:44:00'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 11/2/2020 14:44:00'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 11/2/2020 14:44:00'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 11/2/2020 14:44:00'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 11/2/2020 14:44:00'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 11/2/2020 14:44:00'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 11/2/2020 14:44:00'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 11/2/2020 14:44:00'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 11/2/2020 14:44:00'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 11/2/2020 14:44:00'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 11/2/2020 14:44:00'!
PASSED!

!testRun: #TerniLapilliTest #test12CannotMoveToSameCell stamp: 'CJ 11/2/2020 14:44:00'!
PASSED!

!testRun: #TerniLapilliTest #test13CannotMoveToCellMoreThanOneLinkAway stamp: 'CJ 11/2/2020 14:44:00'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveToCellWithoutDiagonalLink stamp: 'CJ 11/2/2020 14:44:00'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerWinsVertically stamp: 'CJ 11/2/2020 14:44:00'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerWinsWithLeftColumn stamp: 'CJ 11/2/2020 14:44:00'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerWinsWithRightColumn stamp: 'CJ 11/2/2020 14:44:00'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerWinsWithTopRow stamp: 'CJ 11/2/2020 14:44:00'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerWinsDiagonal stamp: 'CJ 11/2/2020 14:44:00'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerWinsWithOppositeDiagonal stamp: 'CJ 11/2/2020 14:44:00'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerOWins stamp: 'CJ 11/2/2020 14:44:00'!
PASSED!

!testRun: #TerniLapilliTest #test21CannotPutPieceAfterPlayerWon stamp: 'CJ 11/2/2020 14:44:00'!
PASSED!

!testRun: #TerniLapilliTest #test22CannotMovePieceAfterPlayerWonByPutting stamp: 'CJ 11/2/2020 14:44:00'!
PASSED!

!testRun: #TerniLapilliTest #test23CannotMovePieceAfterPlayerWonByMoving stamp: 'CJ 11/2/2020 14:44:00'!
PASSED!
!TerniLapilli methodsFor: 'validations' stamp: 'CJ 11/2/2020 14:45:44' prior: 50925757!
validateCellBoundaries: cellToValidate 
	
	(cellToValidate between: self topLeftCorner and: self bottomRightCorner)
		ifFalse: [self error: self class invalidCellCoordinatesErrorDescription].! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 11/2/2020 14:45:47'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 11/2/2020 14:45:47'!
ERROR!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 11/2/2020 14:45:47'!
ERROR!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 11/2/2020 14:45:47'!
ERROR!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 11/2/2020 14:45:47'!
FAILURE!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 11/2/2020 14:45:47'!
ERROR!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 11/2/2020 14:45:47'!
ERROR!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 11/2/2020 14:45:47'!
ERROR!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 11/2/2020 14:45:47'!
ERROR!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 11/2/2020 14:45:47'!
ERROR!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 11/2/2020 14:45:47'!
ERROR!

!testRun: #TerniLapilliTest #test12CannotMoveToSameCell stamp: 'CJ 11/2/2020 14:45:47'!
ERROR!

!testRun: #TerniLapilliTest #test13CannotMoveToCellMoreThanOneLinkAway stamp: 'CJ 11/2/2020 14:45:47'!
ERROR!

!testRun: #TerniLapilliTest #test14CannotMoveToCellWithoutDiagonalLink stamp: 'CJ 11/2/2020 14:45:47'!
ERROR!

!testRun: #TerniLapilliTest #test15PlayerWinsVertically stamp: 'CJ 11/2/2020 14:45:47'!
ERROR!

!testRun: #TerniLapilliTest #test15PlayerWinsWithLeftColumn stamp: 'CJ 11/2/2020 14:45:47'!
ERROR!

!testRun: #TerniLapilliTest #test16PlayerWinsWithRightColumn stamp: 'CJ 11/2/2020 14:45:47'!
ERROR!

!testRun: #TerniLapilliTest #test17PlayerWinsWithTopRow stamp: 'CJ 11/2/2020 14:45:47'!
ERROR!

!testRun: #TerniLapilliTest #test18PlayerWinsDiagonal stamp: 'CJ 11/2/2020 14:45:47'!
ERROR!

!testRun: #TerniLapilliTest #test19PlayerWinsWithOppositeDiagonal stamp: 'CJ 11/2/2020 14:45:47'!
ERROR!

!testRun: #TerniLapilliTest #test20PlayerOWins stamp: 'CJ 11/2/2020 14:45:47'!
ERROR!

!testRun: #TerniLapilliTest #test21CannotPutPieceAfterPlayerWon stamp: 'CJ 11/2/2020 14:45:47'!
ERROR!

!testRun: #TerniLapilliTest #test22CannotMovePieceAfterPlayerWonByPutting stamp: 'CJ 11/2/2020 14:45:47'!
ERROR!

!testRun: #TerniLapilliTest #test23CannotMovePieceAfterPlayerWonByMoving stamp: 'CJ 11/2/2020 14:45:47'!
ERROR!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 11/2/2020 14:45:50'!
ERROR!
!TerniLapilli methodsFor: 'private values' stamp: 'CJ 11/2/2020 14:46:03'!
topLeftCorner
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'private values' stamp: 'CJ 11/2/2020 14:46:12' prior: 50926424!
topLeftCorner
	
	^ 0@0! !

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 11/2/2020 14:46:13'!
ERROR!
!TerniLapilli methodsFor: 'private values' stamp: 'CJ 11/2/2020 14:46:28'!
bottomRightCorner
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'private values' stamp: 'CJ 11/2/2020 14:47:36' prior: 50926435!
bottomRightCorner
	
	^ self topLeftCorner + ((self boardSideLength - 1)@(self boardSideLength - 1))! !
!TerniLapilli methodsFor: 'private values' stamp: 'CJ 11/2/2020 14:53:36'!
maximumXCoordinate

	^ self boardSideLength - 1! !
!TerniLapilli methodsFor: 'private values' stamp: 'CJ 11/2/2020 14:53:36' prior: 50926440!
bottomRightCorner
	
	^ self topLeftCorner + ((self maximumXCoordinate)@(self boardSideLength - 1))! !
!TerniLapilli methodsFor: 'private values' stamp: 'CJ 11/2/2020 14:54:02'!
maximumYCoordinate

	^ self boardSideLength - 1! !
!TerniLapilli methodsFor: 'private values' stamp: 'CJ 11/2/2020 14:54:02' prior: 50926451!
bottomRightCorner
	
	^ self topLeftCorner + ((self maximumXCoordinate)@(self maximumYCoordinate))! !

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 11/2/2020 14:54:04'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 11/2/2020 14:54:06'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 11/2/2020 14:54:06'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 11/2/2020 14:54:06'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 11/2/2020 14:54:06'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 11/2/2020 14:54:06'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 11/2/2020 14:54:06'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 11/2/2020 14:54:06'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 11/2/2020 14:54:06'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 11/2/2020 14:54:06'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 11/2/2020 14:54:06'!
PASSED!

!testRun: #TerniLapilliTest #test12CannotMoveToSameCell stamp: 'CJ 11/2/2020 14:54:06'!
PASSED!

!testRun: #TerniLapilliTest #test13CannotMoveToCellMoreThanOneLinkAway stamp: 'CJ 11/2/2020 14:54:06'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveToCellWithoutDiagonalLink stamp: 'CJ 11/2/2020 14:54:06'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerWinsVertically stamp: 'CJ 11/2/2020 14:54:06'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerWinsWithLeftColumn stamp: 'CJ 11/2/2020 14:54:06'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerWinsWithRightColumn stamp: 'CJ 11/2/2020 14:54:06'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerWinsWithTopRow stamp: 'CJ 11/2/2020 14:54:06'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerWinsDiagonal stamp: 'CJ 11/2/2020 14:54:06'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerWinsWithOppositeDiagonal stamp: 'CJ 11/2/2020 14:54:06'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerOWins stamp: 'CJ 11/2/2020 14:54:06'!
PASSED!

!testRun: #TerniLapilliTest #test21CannotPutPieceAfterPlayerWon stamp: 'CJ 11/2/2020 14:54:06'!
PASSED!

!testRun: #TerniLapilliTest #test22CannotMovePieceAfterPlayerWonByPutting stamp: 'CJ 11/2/2020 14:54:06'!
PASSED!

!testRun: #TerniLapilliTest #test23CannotMovePieceAfterPlayerWonByMoving stamp: 'CJ 11/2/2020 14:54:06'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 11/2/2020 14:54:06'!
PASSED!
!TerniLapilli methodsFor: 'private values' stamp: 'CJ 11/2/2020 14:54:33' prior: 50926462!
bottomRightCorner
	
	^ self topLeftCorner + (self maximumXCoordinate @ self maximumYCoordinate)! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 11/2/2020 14:54:39'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 11/2/2020 14:54:39'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 11/2/2020 14:54:39'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 11/2/2020 14:54:39'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 11/2/2020 14:54:39'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 11/2/2020 14:54:39'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 11/2/2020 14:54:39'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 11/2/2020 14:54:39'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 11/2/2020 14:54:39'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 11/2/2020 14:54:39'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 11/2/2020 14:54:39'!
PASSED!

!testRun: #TerniLapilliTest #test12CannotMoveToSameCell stamp: 'CJ 11/2/2020 14:54:39'!
PASSED!

!testRun: #TerniLapilliTest #test13CannotMoveToCellMoreThanOneLinkAway stamp: 'CJ 11/2/2020 14:54:39'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveToCellWithoutDiagonalLink stamp: 'CJ 11/2/2020 14:54:39'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerWinsVertically stamp: 'CJ 11/2/2020 14:54:39'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerWinsWithLeftColumn stamp: 'CJ 11/2/2020 14:54:39'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerWinsWithRightColumn stamp: 'CJ 11/2/2020 14:54:39'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerWinsWithTopRow stamp: 'CJ 11/2/2020 14:54:39'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerWinsDiagonal stamp: 'CJ 11/2/2020 14:54:39'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerWinsWithOppositeDiagonal stamp: 'CJ 11/2/2020 14:54:39'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerOWins stamp: 'CJ 11/2/2020 14:54:39'!
PASSED!

!testRun: #TerniLapilliTest #test21CannotPutPieceAfterPlayerWon stamp: 'CJ 11/2/2020 14:54:39'!
PASSED!

!testRun: #TerniLapilliTest #test22CannotMovePieceAfterPlayerWonByPutting stamp: 'CJ 11/2/2020 14:54:39'!
PASSED!

!testRun: #TerniLapilliTest #test23CannotMovePieceAfterPlayerWonByMoving stamp: 'CJ 11/2/2020 14:54:39'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'CJ 11/2/2020 14:57:17' prior: 50925554!
allPiecesHaveBeenPlaced

	^ self fullCells = self maximumPiecesAllowedInBoard.! !

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 11/2/2020 14:57:20'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 11/2/2020 14:57:20'!
ERROR!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 11/2/2020 14:57:20'!
ERROR!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 11/2/2020 14:57:20'!
ERROR!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 11/2/2020 14:57:20'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 11/2/2020 14:57:20'!
ERROR!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 11/2/2020 14:57:20'!
ERROR!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 11/2/2020 14:57:20'!
ERROR!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 11/2/2020 14:57:20'!
ERROR!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 11/2/2020 14:57:20'!
ERROR!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 11/2/2020 14:57:20'!
ERROR!

!testRun: #TerniLapilliTest #test12CannotMoveToSameCell stamp: 'CJ 11/2/2020 14:57:20'!
ERROR!

!testRun: #TerniLapilliTest #test13CannotMoveToCellMoreThanOneLinkAway stamp: 'CJ 11/2/2020 14:57:20'!
ERROR!

!testRun: #TerniLapilliTest #test14CannotMoveToCellWithoutDiagonalLink stamp: 'CJ 11/2/2020 14:57:20'!
ERROR!

!testRun: #TerniLapilliTest #test15PlayerWinsVertically stamp: 'CJ 11/2/2020 14:57:20'!
ERROR!

!testRun: #TerniLapilliTest #test15PlayerWinsWithLeftColumn stamp: 'CJ 11/2/2020 14:57:20'!
ERROR!

!testRun: #TerniLapilliTest #test16PlayerWinsWithRightColumn stamp: 'CJ 11/2/2020 14:57:20'!
ERROR!

!testRun: #TerniLapilliTest #test17PlayerWinsWithTopRow stamp: 'CJ 11/2/2020 14:57:20'!
ERROR!

!testRun: #TerniLapilliTest #test18PlayerWinsDiagonal stamp: 'CJ 11/2/2020 14:57:20'!
ERROR!

!testRun: #TerniLapilliTest #test19PlayerWinsWithOppositeDiagonal stamp: 'CJ 11/2/2020 14:57:20'!
ERROR!

!testRun: #TerniLapilliTest #test20PlayerOWins stamp: 'CJ 11/2/2020 14:57:20'!
ERROR!

!testRun: #TerniLapilliTest #test21CannotPutPieceAfterPlayerWon stamp: 'CJ 11/2/2020 14:57:20'!
ERROR!

!testRun: #TerniLapilliTest #test22CannotMovePieceAfterPlayerWonByPutting stamp: 'CJ 11/2/2020 14:57:20'!
ERROR!

!testRun: #TerniLapilliTest #test23CannotMovePieceAfterPlayerWonByMoving stamp: 'CJ 11/2/2020 14:57:20'!
ERROR!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 11/2/2020 14:57:23'!
ERROR!
!TerniLapilli methodsFor: 'private values' stamp: 'CJ 11/2/2020 14:57:29'!
maximumPiecesAllowedInBoard
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'private values' stamp: 'CJ 11/2/2020 14:57:56' prior: 50926715!
maximumPiecesAllowedInBoard
	
	^ 6! !

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 11/2/2020 14:57:57'!
PASSED!

!testRun: #TerniLapilliTest #test01GameStartsCorrectly stamp: 'CJ 11/2/2020 14:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test05CannotPutOnInvalidCellCoordinates stamp: 'CJ 11/2/2020 14:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test02OPlaysAfterX stamp: 'CJ 11/2/2020 14:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'CJ 11/2/2020 14:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test04CannotPutPieceOnFullCell stamp: 'CJ 11/2/2020 14:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test06CannotPutMoreThanThreePiecesEach stamp: 'CJ 11/2/2020 14:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test07CannotMoveBeforePlacingAllPieces stamp: 'CJ 11/2/2020 14:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test08CannotMoveFromEmptyCell stamp: 'CJ 11/2/2020 14:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test09CannotMoveOtherPlayerPiece stamp: 'CJ 11/2/2020 14:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test10CannotMoveToFullCell stamp: 'CJ 11/2/2020 14:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test11CannotMoveToOrFromInvalidCellCoordinates stamp: 'CJ 11/2/2020 14:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test12CannotMoveToSameCell stamp: 'CJ 11/2/2020 14:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test13CannotMoveToCellMoreThanOneLinkAway stamp: 'CJ 11/2/2020 14:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test14CannotMoveToCellWithoutDiagonalLink stamp: 'CJ 11/2/2020 14:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerWinsVertically stamp: 'CJ 11/2/2020 14:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test15PlayerWinsWithLeftColumn stamp: 'CJ 11/2/2020 14:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerWinsWithRightColumn stamp: 'CJ 11/2/2020 14:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerWinsWithTopRow stamp: 'CJ 11/2/2020 14:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test18PlayerWinsDiagonal stamp: 'CJ 11/2/2020 14:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test19PlayerWinsWithOppositeDiagonal stamp: 'CJ 11/2/2020 14:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test20PlayerOWins stamp: 'CJ 11/2/2020 14:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test21CannotPutPieceAfterPlayerWon stamp: 'CJ 11/2/2020 14:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test22CannotMovePieceAfterPlayerWonByPutting stamp: 'CJ 11/2/2020 14:58:05'!
PASSED!

!testRun: #TerniLapilliTest #test23CannotMovePieceAfterPlayerWonByMoving stamp: 'CJ 11/2/2020 14:58:05'!
PASSED!

----QUIT----(2 November 2020 14:58:22) CuisUniversity-4384.image priorSource: 18574038!