

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'VP 10/24/2020 16:48:02'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'VP 10/24/2020 16:51:27'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #N category: 'MarsRover' stamp: 'VP 10/24/2020 16:51:43'!
Object subclass: #N
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'no messages' stamp: 'VP 10/24/2020 16:51:16'!
test01_xxxx

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	self assert: rover location equals: 2@3.
	self assert: rover orientation equals: N.! !

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 16:52:54'!
ERROR!

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 16:52:54'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'VP 10/24/2020 16:53:07'!
deployAt: aPoint facing: aClass 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeDeployAt: aPoint facing: aClass ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'VP 10/24/2020 16:53:36' prior: 50877149!
deployAt: aLocation facing: aCardinalPoint

	^self new initializeDeployAt: aLocation facing: aCardinalPoint. ! !

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 16:53:40'!
ERROR!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'VP 10/24/2020 16:54:00'!
Object subclass: #MarsRover
	instanceVariableNames: 'location'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'VP 10/24/2020 16:54:00'!
Object subclass: #MarsRover
	instanceVariableNames: 'location cardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'VP 10/24/2020 16:54:00'!
initializeDeployAt: aLocation facing: aCardinalPoint 
	self shouldBeImplemented.
	location := aLocation.
	cardinalPoint := aCardinalPoint.! !
!MarsRover methodsFor: 'initialization' stamp: 'VP 10/24/2020 16:54:22' prior: 50877181!
initializeDeployAt: aLocation facing: aCardinalPoint 
	
	location := aLocation.
	cardinalPoint := aCardinalPoint.! !

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 16:54:23'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'VP 10/24/2020 16:54:30'!
location
	self shouldBeImplemented.
	^location! !
!MarsRover methodsFor: 'accessing' stamp: 'VP 10/24/2020 16:54:35' prior: 50877198!
location
	^location.! !

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 16:54:37'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'VP 10/24/2020 16:54:42'!
orientation
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'accessing' stamp: 'VP 10/24/2020 16:54:49' prior: 50877209!
orientation
	^cardinalPoint.! !

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 16:54:50'!
PASSED!

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 16:54:53'!
PASSED!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'VP 10/24/2020 16:55:23'!
Object subclass: #MarsRover
	instanceVariableNames: 'location orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'VP 10/24/2020 16:55:23' prior: 50877189!
initializeDeployAt: aLocation facing: aCardinalPoint 
	
	location := aLocation.
	orientation := aCardinalPoint.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'VP 10/24/2020 16:55:23' prior: 50877213!
orientation
	^orientation.! !

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 16:55:41'!
PASSED!
!MarsRover methodsFor: 'initialization' stamp: 'VP 10/24/2020 16:56:09' prior: 50877230!
initializeDeployAt: aLocation facing: anOrientation 
	
	location := aLocation.
	orientation := anOrientation.! !

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 16:56:16'!
PASSED!

!classDefinition: #E category: 'MarsRover' stamp: 'VP 10/24/2020 17:00:25'!
Object subclass: #E
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'VP 10/24/2020 17:00:19'!
test02_roverCommandR_shouldRotateRoverRightwards

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	rover sendCommands: 'r'.
	
	self assert: rover location equals: 2@3.
	self assert: rover orientation equals: E.! !

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 17:00:34'!
PASSED!

!testRun: #MarsRoverTest #test02_roverCommandR_shouldRotateRoverRightwards stamp: 'VP 10/24/2020 17:00:34'!
ERROR!

!testRun: #MarsRoverTest #test02_roverCommandR_shouldRotateRoverRightwards stamp: 'VP 10/24/2020 17:00:34'!
ERROR!
!MarsRover methodsFor: 'orientation' stamp: 'VP 10/24/2020 17:01:18'!
sendCommands: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'orientation' stamp: 'VP 10/24/2020 17:01:38' prior: 50877278!
sendCommands: aString 
	orientation := E.! !

!testRun: #MarsRoverTest #test02_roverCommandR_shouldRotateRoverRightwards stamp: 'VP 10/24/2020 17:01:39'!
PASSED!

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 17:01:40'!
PASSED!

!testRun: #MarsRoverTest #test02_roverCommandR_shouldRotateRoverRightwards stamp: 'VP 10/24/2020 17:01:40'!
PASSED!

!classDefinition: #W category: 'MarsRover' stamp: 'VP 10/24/2020 17:05:25'!
Object subclass: #W
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'tests' stamp: 'VP 10/24/2020 17:05:22'!
test03_roverCommandL_shouldOnlyRotateRoverLeftwards

	| rover |
	
	rover := MarsRover deployAt: 4@5 facing: N.
	
	rover sendCommands: 'l'.
	
	self assert: rover location equals: 4@5.
	self assert: rover orientation equals: W.! !

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 17:05:26'!
PASSED!

!testRun: #MarsRoverTest #test02_roverCommandR_shouldRotateRoverRightwards stamp: 'VP 10/24/2020 17:05:26'!
PASSED!

!testRun: #MarsRoverTest #test03_roverCommandL_shouldOnlyRotateRoverLeftwards stamp: 'VP 10/24/2020 17:05:26'!
FAILURE!

!testRun: #MarsRoverTest #test03_roverCommandL_shouldOnlyRotateRoverLeftwards stamp: 'VP 10/24/2020 17:05:26'!
FAILURE!
!MarsRover methodsFor: 'orientation' stamp: 'VP 10/24/2020 17:06:24' prior: 50877283!
sendCommands: aString 
	orientation := aString = 'r' ifTrue: [E] ifFalse: [W].! !

!testRun: #MarsRoverTest #test03_roverCommandL_shouldOnlyRotateRoverLeftwards stamp: 'VP 10/24/2020 17:06:26'!
PASSED!

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 17:06:28'!
PASSED!

!testRun: #MarsRoverTest #test02_roverCommandR_shouldRotateRoverRightwards stamp: 'VP 10/24/2020 17:06:28'!
PASSED!

!testRun: #MarsRoverTest #test03_roverCommandL_shouldOnlyRotateRoverLeftwards stamp: 'VP 10/24/2020 17:06:28'!
PASSED!

!classDefinition: #S category: 'MarsRover' stamp: 'VP 10/24/2020 17:09:23'!
Object subclass: #S
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'tests' stamp: 'VP 10/24/2020 17:09:20'!
test04_roverCommandLFromW_shouldLeaveRoverFacingS

	| rover |
	
	rover := MarsRover deployAt: 4@5 facing: W.
	
	rover sendCommands: 'l'.
	
	self assert: rover location equals: 4@5.
	self assert: rover orientation equals: S.! !

!testRun: #MarsRoverTest #test04_roverCommandLFromW_shouldLeaveRoverFacingS stamp: 'VP 10/24/2020 17:09:24'!
FAILURE!

!methodRemoval: MarsRoverTest #test04_roverCommandLFromW_shouldLeaveRoverFacingS stamp: 'VP 10/24/2020 17:12:41'!
test04_roverCommandLFromW_shouldLeaveRoverFacingS

	| rover |
	
	rover := MarsRover deployAt: 4@5 facing: W.
	
	rover sendCommands: 'l'.
	
	self assert: rover location equals: 4@5.
	self assert: rover orientation equals: S.!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:15:08'!
testCardinal01_EIsRightOfN

	self assert: N rightPoint equals: E.! !

!testRun: #MarsRoverTest #testCardinal01_EIsRightOfN stamp: 'VP 10/24/2020 17:15:15'!
ERROR!
!N class methodsFor: 'associating' stamp: 'VP 10/24/2020 17:16:14'!
rightPoint
	self shouldBeImplemented.! !
!N class methodsFor: 'associating' stamp: 'VP 10/24/2020 17:16:18' prior: 50877384!
rightPoint
	^E.! !

!testRun: #MarsRoverTest #testCardinal01_EIsRightOfN stamp: 'VP 10/24/2020 17:16:20'!
PASSED!

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 17:16:20'!
PASSED!

!testRun: #MarsRoverTest #test02_roverCommandR_shouldRotateRoverRightwards stamp: 'VP 10/24/2020 17:16:20'!
PASSED!

!testRun: #MarsRoverTest #test03_roverCommandL_shouldOnlyRotateRoverLeftwards stamp: 'VP 10/24/2020 17:16:20'!
PASSED!

!testRun: #MarsRoverTest #testCardinal01_EIsRightOfN stamp: 'VP 10/24/2020 17:16:20'!
PASSED!
!MarsRoverTest methodsFor: 'tests cardinalPoint' stamp: 'VP 10/24/2020 17:16:36'!
testCardinal01_WIsLeftOfN

	self assert: N leftPoint equals: W.! !

!testRun: #MarsRoverTest #testCardinal01_WIsLeftOfN stamp: 'VP 10/24/2020 17:16:39'!
ERROR!
!N class methodsFor: 'associating' stamp: 'VP 10/24/2020 17:16:50'!
leftPoint
	self shouldBeImplemented.! !
!N class methodsFor: 'associating' stamp: 'VP 10/24/2020 17:16:55' prior: 50877415!
leftPoint
	^W.! !

!testRun: #MarsRoverTest #testCardinal01_WIsLeftOfN stamp: 'VP 10/24/2020 17:16:56'!
PASSED!

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 17:16:56'!
PASSED!

!testRun: #MarsRoverTest #test02_roverCommandR_shouldRotateRoverRightwards stamp: 'VP 10/24/2020 17:16:56'!
PASSED!

!testRun: #MarsRoverTest #test03_roverCommandL_shouldOnlyRotateRoverLeftwards stamp: 'VP 10/24/2020 17:16:56'!
PASSED!

!testRun: #MarsRoverTest #testCardinal01_EIsRightOfN stamp: 'VP 10/24/2020 17:16:56'!
PASSED!

!testRun: #MarsRoverTest #testCardinal01_WIsLeftOfN stamp: 'VP 10/24/2020 17:16:56'!
PASSED!
!MarsRoverTest methodsFor: 'tests cardinalPoint' stamp: 'VP 10/24/2020 17:17:03'!
testCardinal02_WIsLeftOfN

	self assert: N leftPoint equals: W.! !

!methodRemoval: MarsRoverTest #testCardinal01_WIsLeftOfN stamp: 'VP 10/24/2020 17:17:03'!
testCardinal01_WIsLeftOfN

	self assert: N leftPoint equals: W.!
!MarsRoverTest methodsFor: 'tests cardinalPoint' stamp: 'VP 10/24/2020 17:18:00'!
testCardinal03_NIsRightOfW

	self assert: W rightPoint equals: N.! !

----STARTUP---- (24 October 2020 17:21:34) as /Users/vpomsztein/Documents/Facu/ISW1/PracticaParcial/CuisUniversity-4384.image!


!methodRemoval: GameOfLifeTest #test05_gameOfLifeWithOnlyTwoAdjacentLiveCellsHasTwoLiveCells stamp: 'VP 10/24/2020 17:21:39'!
test05_gameOfLifeWithOnlyTwoAdjacentLiveCellsHasTwoLiveCells

	| gameOfLife |
	
	gameOfLife := GameOfLife new.
	
	gameOfLife addLiveCellAt: 0@0.
	gameOfLife addLiveCellAt: 0@1.
	
	self assert: 2 equals: gameOfLife liveCells.!

!methodRemoval: GameOfLifeTest #test04_gameOfLifeWithLiveCellHasAllDeadInNextTick stamp: 'VP 10/24/2020 17:21:39'!
test04_gameOfLifeWithLiveCellHasAllDeadInNextTick

	| gameOfLife |
	
	gameOfLife := GameOfLife new.
	
	gameOfLife addLiveCellAt: 0@0.
	gameOfLife nextTick.
	
	self assert: 0 equals: gameOfLife liveCells.!

!methodRemoval: GameOfLifeTest #test03_addLiveCellToEmptyGameHas1LiveCell stamp: 'VP 10/24/2020 17:21:39'!
test03_addLiveCellToEmptyGameHas1LiveCell

	| gameOfLife |
	
	gameOfLife := GameOfLife new.
	
	gameOfLife addLiveCellAt: 0@0.
	
	self assert: 1 equals: gameOfLife liveCells.!

!methodRemoval: GameOfLifeTest #test01_newGameOfLifeHasAllDeadCells stamp: 'VP 10/24/2020 17:21:39'!
test01_newGameOfLifeHasAllDeadCells

	| gameOfLife |
	
	gameOfLife := GameOfLife new.
	
	self assert: 0 equals: gameOfLife liveCells.!

!methodRemoval: GameOfLifeTest #test02_gameOfLifeWithoutLiveCellsStaysTheSame stamp: 'VP 10/24/2020 17:21:39'!
test02_gameOfLifeWithoutLiveCellsStaysTheSame

	| gameOfLife |
	
	gameOfLife := GameOfLife new.
	
	gameOfLife nextTick.
	
	self assert: 0 equals: gameOfLife liveCells.!

!classRemoval: #GameOfLife stamp: 'VP 10/24/2020 17:21:40'!
Object subclass: #GameOfLife
	instanceVariableNames: 'hasLiveCell'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'GameOfLife'!

!classDefinition: #GameOfLife category: 'GameOfLife' stamp: 'VP 10/24/2020 17:21:40'!
Object subclass: #GameOfLife
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'GameOfLife'!
!GameOfLifeTest methodsFor: 'tests' stamp: 'VP 10/22/2020 20:42:21'!
test01
	
	| gameOfLife |
	gameOfLife := GameOfLife newWithLiveCellsAt: {1@1} gridSize: 3@3.
	
	gameOfLife tick.
	
	self deny: gameOfLife isCellAliveAt: 1@1.! !
!GameOfLifeTest methodsFor: 'tests' stamp: 'VP 10/22/2020 20:42:35' prior: 50877519!
test01
	
	| gameOfLife |
	gameOfLife := GameOfLife newWithLiveCellsAt: {1@1} gridSize: 3@3.
	
	gameOfLife tick.
	
	self deny: (gameOfLife isCellAliveAt: 1@1).! !
!GameOfLife class methodsFor: 'instance creation' stamp: 'VP 10/22/2020 20:42:48'!
newWithLiveCellsAt: anArray gridSize: aPoint 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNewWithLiveCellsAt: anArray gridSize: aPoint ! !
!GameOfLife class methodsFor: 'instance creation' stamp: 'VP 10/22/2020 20:43:25' prior: 50877535!
newWithLiveCellsAt: cellPoints gridSize: aGridSize
	^self new initializeNewWithLiveCellsAt: cellPoints gridSize: aGridSize.! !

!classDefinition: #GameOfLife category: 'GameOfLife' stamp: 'VP 10/24/2020 17:21:41'!
Object subclass: #GameOfLife
	instanceVariableNames: 'cellPoints_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'GameOfLife'!

!classDefinition: #GameOfLife category: 'GameOfLife' stamp: 'VP 10/24/2020 17:21:41'!
Object subclass: #GameOfLife
	instanceVariableNames: 'cellPoints_CHANGE_ME gridSize'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'GameOfLife'!
!GameOfLife methodsFor: 'initialization' stamp: 'VP 10/22/2020 20:43:52'!
initializeNewWithLiveCellsAt: cellPoints gridSize: aGridSize 
	self shouldBeImplemented.
	cellPoints_CHANGE_ME := cellPoints.
	gridSize := aGridSize.! !

!classDefinition: #GameOfLife category: 'GameOfLife' stamp: 'VP 10/24/2020 17:21:41'!
Object subclass: #GameOfLife
	instanceVariableNames: 'cellPoints_CHANGE_ME gridSize liveCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'GameOfLife'!
!GameOfLife methodsFor: 'initialization' stamp: 'VP 10/22/2020 20:44:21' prior: 50877567!
initializeNewWithLiveCellsAt: cellPoints gridSize: aGridSize 
	liveCells := cellPoints.
	gridSize := aGridSize.! !
!GameOfLife methodsFor: 'evaluating' stamp: 'VP 10/22/2020 20:44:39'!
tick
	self shouldBeImplemented.! !
!GameOfLife methodsFor: 'evaluating' stamp: 'VP 10/22/2020 20:44:42' prior: 50877589!
tick
	! !
!GameOfLife methodsFor: 'evaluating' stamp: 'VP 10/22/2020 20:45:14'!
isCellAliveAt: aPoint 
	self shouldBeImplemented.! !
!GameOfLife methodsFor: 'evaluating' stamp: 'VP 10/22/2020 20:45:21' prior: 50877596!
isCellAliveAt: aPoint 
	^false.! !

!classDefinition: #GameOfLife category: 'GameOfLife' stamp: 'VP 10/24/2020 17:21:41'!
Object subclass: #GameOfLife
	instanceVariableNames: 'gridSize liveCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'GameOfLife'!

!classDefinition: #GameOfLife category: 'GameOfLife' stamp: 'VP 10/24/2020 17:21:41'!
Object subclass: #GameOfLife
	instanceVariableNames: 'gridSize liveCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'GameOfLife'!
!GameOfLifeTest methodsFor: 'tests' stamp: 'VP 10/22/2020 20:46:07'!
test01_liveCellWithNoNeighborsDiesInNextGen
	
	| gameOfLife |
	gameOfLife := GameOfLife newWithLiveCellsAt: {1@1} gridSize: 3@3.
	
	gameOfLife tick.
	
	self deny: (gameOfLife isCellAliveAt: 1@1).! !

!methodRemoval: GameOfLifeTest #test01 stamp: 'VP 10/24/2020 17:21:41'!
test01
	
	| gameOfLife |
	gameOfLife := GameOfLife newWithLiveCellsAt: {1@1} gridSize: 3@3.
	
	gameOfLife tick.
	
	self deny: (gameOfLife isCellAliveAt: 1@1).!
!GameOfLifeTest methodsFor: 'tests' stamp: 'VP 10/22/2020 20:46:52'!
test02_liveCellWithOneNeighborDiesInNextGen
	
	| gameOfLife |
	gameOfLife := GameOfLife newWithLiveCellsAt: {1@1. 1@2} gridSize: 3@3.
	
	gameOfLife tick.
	
	self deny: (gameOfLife isCellAliveAt: 1@1).! !
!GameOfLifeTest methodsFor: 'tests' stamp: 'VP 10/22/2020 20:47:07' prior: 50877635!
test02_liveCellWithOneNeighborDiesInNextGen
	
	| gameOfLife |
	gameOfLife := GameOfLife newWithLiveCellsAt: {1@1. 1@2} gridSize: 3@3.
	
	gameOfLife tick.
	
	self deny: (gameOfLife isCellAliveAt: 1@1).
	self deny: (gameOfLife isCellAliveAt: 1@2).! !
!GameOfLifeTest methodsFor: 'tests' stamp: 'VP 10/22/2020 20:48:37'!
test02_liveCellWithTwoNeighborsLivesInNextGen
	
	| gameOfLife |
	gameOfLife := GameOfLife newWithLiveCellsAt: {1@1. 1@2. 1@3} gridSize: 3@3.
	
	gameOfLife tick.
	
	self deny: (gameOfLife isCellAliveAt: 1@1).
	self assert: (gameOfLife isCellAliveAt: 1@2).
	self deny: (gameOfLife isCellAliveAt: 1@3).! !
!GameOfLife methodsFor: 'evaluating' stamp: 'VP 10/22/2020 20:53:05' prior: 50877601!
isCellAliveAt: aPoint 
	^aPoint eightNeighbors sum: [ :aNeighbor |
		(liveCells includes: aNeighbor) ifTrue: [1] ifFalse: [0].
	] >= 2.! !
!GameOfLife methodsFor: 'evaluating' stamp: 'VP 10/22/2020 20:53:23' prior: 50877668!
isCellAliveAt: aPoint 
	^(aPoint eightNeighbors sum: [ :aNeighbor |
		(liveCells includes: aNeighbor) ifTrue: [1] ifFalse: [0].
	]) >= 2.! !

!methodRemoval: GameOfLifeTest #test02_liveCellWithOneNeighborDiesInNextGen stamp: 'VP 10/24/2020 17:21:42'!
test02_liveCellWithOneNeighborDiesInNextGen
	
	| gameOfLife |
	gameOfLife := GameOfLife newWithLiveCellsAt: {1@1. 1@2} gridSize: 3@3.
	
	gameOfLife tick.
	
	self deny: (gameOfLife isCellAliveAt: 1@1).
	self deny: (gameOfLife isCellAliveAt: 1@2).!
!GameOfLifeTest methodsFor: 'tests' stamp: 'VP 10/22/2020 20:59:32'!
test03_liveCellWithFourNeighborsDiesInNextGen
	
	| gameOfLife |
	gameOfLife := GameOfLife newWithLiveCellsAt: {1@2. 2@1. 2@2. 2@3. 3@2} gridSize: 3@3.
	
	gameOfLife tick. 
	
	self deny: (gameOfLife isCellAliveAt: 2@2).! !
!GameOfLife methodsFor: 'evaluating' stamp: 'VP 10/22/2020 21:00:42' prior: 50877676!
isCellAliveAt: aPoint
	| liveNeighbors |
	
	liveNeighbors := (aPoint eightNeighbors sum: [ :aNeighbor |
		(liveCells includes: aNeighbor) ifTrue: [1] ifFalse: [0].
	]).

	^liveNeighbors between: 2 and: 3.! !
!GameOfLifeTest methodsFor: 'tests' stamp: 'VP 10/22/2020 21:01:04'!
test01_liveCellWithLessThanTwoNeighborsDiesInNextGen
	
	| gameOfLife |
	gameOfLife := GameOfLife newWithLiveCellsAt: {1@1} gridSize: 3@3.
	
	gameOfLife tick.
	
	self deny: (gameOfLife isCellAliveAt: 1@1).! !
!GameOfLifeTest methodsFor: 'tests' stamp: 'VP 10/22/2020 21:01:16' prior: 50877713!
test01_liveCellWithLessThanTwoNeighborsDiesInNextGen
	
	| gameOfLife |
	gameOfLife := GameOfLife newWithLiveCellsAt: {1@1. 1@2} gridSize: 3@3.
	
	gameOfLife tick.
	
	self deny: (gameOfLife isCellAliveAt: 1@1).! !

!methodRemoval: GameOfLifeTest #test01_liveCellWithNoNeighborsDiesInNextGen stamp: 'VP 10/24/2020 17:21:42'!
test01_liveCellWithNoNeighborsDiesInNextGen
	
	| gameOfLife |
	gameOfLife := GameOfLife newWithLiveCellsAt: {1@1} gridSize: 3@3.
	
	gameOfLife tick.
	
	self deny: (gameOfLife isCellAliveAt: 1@1).!
!GameOfLifeTest methodsFor: 'tests' stamp: 'VP 10/22/2020 21:02:08'!
test02_liveCellWithTwoOrThreeNeighborsLivesInNextGen
	
	| gameOfLife |
	gameOfLife := GameOfLife newWithLiveCellsAt: {1@1. 1@2. 1@3} gridSize: 3@3.
	
	gameOfLife tick.
	
	self deny: (gameOfLife isCellAliveAt: 1@1).
	self assert: (gameOfLife isCellAliveAt: 1@2).
	self deny: (gameOfLife isCellAliveAt: 1@3).! !
!GameOfLifeTest methodsFor: 'tests' stamp: 'VP 10/22/2020 21:02:12' prior: 50877742!
test02_liveCellWithTwoOrThreeNeighborsLivesInNextGen
	
	| gameOfLife |
	gameOfLife := GameOfLife newWithLiveCellsAt: {1@1. 1@2. 1@3. 2@2} gridSize: 3@3.
	
	gameOfLife tick.
	
	self deny: (gameOfLife isCellAliveAt: 1@1).
	self assert: (gameOfLife isCellAliveAt: 1@2).
	self deny: (gameOfLife isCellAliveAt: 1@3).! !

!methodRemoval: GameOfLifeTest #test02_liveCellWithTwoNeighborsLivesInNextGen stamp: 'VP 10/24/2020 17:21:42'!
test02_liveCellWithTwoNeighborsLivesInNextGen
	
	| gameOfLife |
	gameOfLife := GameOfLife newWithLiveCellsAt: {1@1. 1@2. 1@3} gridSize: 3@3.
	
	gameOfLife tick.
	
	self deny: (gameOfLife isCellAliveAt: 1@1).
	self assert: (gameOfLife isCellAliveAt: 1@2).
	self deny: (gameOfLife isCellAliveAt: 1@3).!
!GameOfLifeTest methodsFor: 'tests' stamp: 'VP 10/22/2020 21:04:08'!
test02_liveCellWithTwoNeighborsLivesInNextGen
	
	| gameOfLife |
	gameOfLife := GameOfLife newWithLiveCellsAt: {1@1. 1@2. 1@3 } gridSize: 3@3.
	
	gameOfLife tick.
	
	self deny: (gameOfLife isCellAliveAt: 1@1).
	self assert: (gameOfLife isCellAliveAt: 1@2).
	self deny: (gameOfLife isCellAliveAt: 1@3).! !

!methodRemoval: GameOfLifeTest #test02_liveCellWithTwoOrThreeNeighborsLivesInNextGen stamp: 'VP 10/24/2020 17:21:42'!
test02_liveCellWithTwoOrThreeNeighborsLivesInNextGen
	
	| gameOfLife |
	gameOfLife := GameOfLife newWithLiveCellsAt: {1@1. 1@2. 1@3. 2@2} gridSize: 3@3.
	
	gameOfLife tick.
	
	self deny: (gameOfLife isCellAliveAt: 1@1).
	self assert: (gameOfLife isCellAliveAt: 1@2).
	self deny: (gameOfLife isCellAliveAt: 1@3).!
!GameOfLife methodsFor: 'evaluating' stamp: 'VP 10/22/2020 21:04:41' prior: 50877704!
isCellAliveAt: aPoint
	^liveCells includes: aPoint.! !
!GameOfLife methodsFor: 'evaluating' stamp: 'VP 10/22/2020 21:10:29' prior: 50877593!
tick
	
	| previousLiveCells |
	
	previousLiveCells := liveCells.
	liveCells := {}.
	
	1 to: gridSize x do: [ :x |
		1 to: gridSize y do: [ :y |
			| liveNeighbors |
		
			liveNeighbors := (x@y eightNeighbors sum: [ :aNeighbor |
				(liveCells includes: aNeighbor) ifTrue: [1] ifFalse: [0].
			]).

			(liveNeighbors between: 2 and: 3) ifTrue: [
				liveCells add: x@y.
			].
		].
	].! !
!GameOfLife methodsFor: 'evaluating' stamp: 'VP 10/22/2020 21:10:43' prior: 50877811!
tick
	
	| previousLiveCells |
	
	previousLiveCells := liveCells.
	liveCells := {}.
	
	1 to: gridSize x do: [ :x |
		1 to: gridSize y do: [ :y |
			| liveNeighbors |
		
			liveNeighbors := (x@y eightNeighbors sum: [ :aNeighbor |
				(previousLiveCells includes: aNeighbor) ifTrue: [1] ifFalse: [0].
			]).

			(liveNeighbors between: 2 and: 3) ifTrue: [
				liveCells add: x@y.
			].
		].
	].! !
!GameOfLife methodsFor: 'evaluating' stamp: 'VP 10/22/2020 21:11:52' prior: 50877826!
tick
	
	| previousLiveCells |
	
	previousLiveCells := liveCells.
	liveCells := {}.
	
	1 to: gridSize x do: [ :x |
		1 to: gridSize y do: [ :y |
			| liveNeighbors currentCellPoint |
			
			currentCellPoint := x@y.
		
			liveNeighbors := (currentCellPoint eightNeighbors sum: [ :aNeighbor |
				(previousLiveCells includes: aNeighbor) ifTrue: [1] ifFalse: [0].
			]).

			(liveNeighbors between: 2 and: 3) ifTrue: [
				liveCells add: currentCellPoint.
			].
		].
	].! !
!GameOfLife methodsFor: 'initialization' stamp: 'VP 10/22/2020 21:13:12' prior: 50877583!
initializeNewWithLiveCellsAt: cellPoints gridSize: aGridSize 
	liveCells := OrderedCollection newFrom: cellPoints.
	gridSize := aGridSize.! !
!GameOfLife methodsFor: 'evaluating' stamp: 'VP 10/22/2020 21:13:33' prior: 50877842!
tick
	
	| previousLiveCells |
	
	previousLiveCells := liveCells.
	liveCells := OrderedCollection new.
	
	1 to: gridSize x do: [ :x |
		1 to: gridSize y do: [ :y |
			| liveNeighbors currentCellPoint |
			
			currentCellPoint := x@y.
		
			liveNeighbors := (currentCellPoint eightNeighbors sum: [ :aNeighbor |
				(previousLiveCells includes: aNeighbor) ifTrue: [1] ifFalse: [0].
			]).

			(liveNeighbors between: 2 and: 3) ifTrue: [
				liveCells add: currentCellPoint.
			].
		].
	].! !
!GameOfLifeTest methodsFor: 'tests' stamp: 'VP 10/22/2020 21:15:13'!
test04_deadCellWithThreeNeighborsBecomesAliveInNextGen
	
	| gameOfLife |
	gameOfLife := GameOfLife newWithLiveCellsAt: {1@2. 2@1. 2@3 } gridSize: 3@3.
	
	gameOfLife tick. 
	
	self assert: (gameOfLife isCellAliveAt: 2@2).! !
!GameOfLifeTest methodsFor: 'tests' stamp: 'VP 10/22/2020 21:15:46' prior: 50877886!
test04_deadCellWithThreeNeighborsBecomesAliveInNextGen
	
	| gameOfLife |
	gameOfLife := GameOfLife newWithLiveCellsAt: {1@2. 2@1. 2@3 } gridSize: 3@3.
	

	
	self assert: (gameOfLife isCellAliveAt: 2@2).! !
!GameOfLifeTest methodsFor: 'tests' stamp: 'VP 10/22/2020 21:15:51' prior: 50877896!
test04_deadCellWithThreeNeighborsBecomesAliveInNextGen
	
	| gameOfLife |
	gameOfLife := GameOfLife newWithLiveCellsAt: {1@2. 2@1. 2@3 } gridSize: 3@3.
	
	gameOfLife tick.
	
	self assert: (gameOfLife isCellAliveAt: 2@2).! !
!GameOfLife methodsFor: 'evaluating' stamp: 'VP 10/22/2020 21:17:22' prior: 50877868!
tick
	
	| previousLiveCells |
	
	previousLiveCells := liveCells.
	liveCells := OrderedCollection new.
	
	1 to: gridSize x do: [ :x |
		1 to: gridSize y do: [ :y |
			| liveNeighbors currentCellPoint |
			
			currentCellPoint := x@y.
		
			liveNeighbors := (currentCellPoint eightNeighbors sum: [ :aNeighbor |
				(previousLiveCells includes: aNeighbor) ifTrue: [1] ifFalse: [0].
			]).

			((previousLiveCells includes: currentCellPoint) and: [liveNeighbors between: 2 and: 3]) ifTrue: [
				liveCells add: currentCellPoint.
			].
		].
	].! !

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'VP 10/24/2020 17:21:42'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'VP 10/24/2020 17:21:42'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'VP 10/24/2020 17:21:42'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #N category: 'MarsRover' stamp: 'VP 10/24/2020 17:21:42'!
Object subclass: #N
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'no messages' stamp: 'VP 10/24/2020 16:51:16'!
test01_xxxx

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	self assert: rover location equals: 2@3.
	self assert: rover orientation equals: N.! !
!MarsRover class methodsFor: 'instance creation' stamp: 'VP 10/24/2020 16:53:07'!
deployAt: aPoint facing: aClass 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeDeployAt: aPoint facing: aClass ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'VP 10/24/2020 16:53:36' prior: 50877970!
deployAt: aLocation facing: aCardinalPoint

	^self new initializeDeployAt: aLocation facing: aCardinalPoint. ! !

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'VP 10/24/2020 17:21:43'!
Object subclass: #MarsRover
	instanceVariableNames: 'location'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'VP 10/24/2020 17:21:43'!
Object subclass: #MarsRover
	instanceVariableNames: 'location cardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'VP 10/24/2020 16:54:00'!
initializeDeployAt: aLocation facing: aCardinalPoint 
	self shouldBeImplemented.
	location := aLocation.
	cardinalPoint := aCardinalPoint.! !
!MarsRover methodsFor: 'initialization' stamp: 'VP 10/24/2020 16:54:22' prior: 50877999!
initializeDeployAt: aLocation facing: aCardinalPoint 
	
	location := aLocation.
	cardinalPoint := aCardinalPoint.! !
!MarsRover methodsFor: 'accessing' stamp: 'VP 10/24/2020 16:54:30'!
location
	self shouldBeImplemented.
	^location! !
!MarsRover methodsFor: 'accessing' stamp: 'VP 10/24/2020 16:54:35' prior: 50878013!
location
	^location.! !
!MarsRover methodsFor: 'accessing' stamp: 'VP 10/24/2020 16:54:42'!
orientation
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'accessing' stamp: 'VP 10/24/2020 16:54:49' prior: 50878021!
orientation
	^cardinalPoint.! !

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'VP 10/24/2020 17:21:43'!
Object subclass: #MarsRover
	instanceVariableNames: 'location orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'VP 10/24/2020 16:55:23' prior: 50878007!
initializeDeployAt: aLocation facing: aCardinalPoint 
	
	location := aLocation.
	orientation := aCardinalPoint.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'VP 10/24/2020 16:55:23' prior: 50878025!
orientation
	^orientation.! !
!MarsRover methodsFor: 'initialization' stamp: 'VP 10/24/2020 16:56:09' prior: 50878037!
initializeDeployAt: aLocation facing: anOrientation 
	
	location := aLocation.
	orientation := anOrientation.! !

!classDefinition: #E category: 'MarsRover' stamp: 'VP 10/24/2020 17:21:44'!
Object subclass: #E
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'VP 10/24/2020 17:00:19'!
test02_roverCommandR_shouldRotateRoverRightwards

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	rover sendCommands: 'r'.
	
	self assert: rover location equals: 2@3.
	self assert: rover orientation equals: E.! !
!MarsRover methodsFor: 'orientation' stamp: 'VP 10/24/2020 17:01:18'!
sendCommands: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'orientation' stamp: 'VP 10/24/2020 17:01:38' prior: 50878071!
sendCommands: aString 
	orientation := E.! !

!classDefinition: #W category: 'MarsRover' stamp: 'VP 10/24/2020 17:21:44'!
Object subclass: #W
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'tests' stamp: 'VP 10/24/2020 17:05:22'!
test03_roverCommandL_shouldOnlyRotateRoverLeftwards

	| rover |
	
	rover := MarsRover deployAt: 4@5 facing: N.
	
	rover sendCommands: 'l'.
	
	self assert: rover location equals: 4@5.
	self assert: rover orientation equals: W.! !
!MarsRover methodsFor: 'orientation' stamp: 'VP 10/24/2020 17:06:24' prior: 50878076!
sendCommands: aString 
	orientation := aString = 'r' ifTrue: [E] ifFalse: [W].! !

!classDefinition: #S category: 'MarsRover' stamp: 'VP 10/24/2020 17:21:44'!
Object subclass: #S
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'tests' stamp: 'VP 10/24/2020 17:09:20'!
test04_roverCommandLFromW_shouldLeaveRoverFacingS

	| rover |
	
	rover := MarsRover deployAt: 4@5 facing: W.
	
	rover sendCommands: 'l'.
	
	self assert: rover location equals: 4@5.
	self assert: rover orientation equals: S.! !

!methodRemoval: MarsRoverTest #test04_roverCommandLFromW_shouldLeaveRoverFacingS stamp: 'VP 10/24/2020 17:21:44'!
test04_roverCommandLFromW_shouldLeaveRoverFacingS

	| rover |
	
	rover := MarsRover deployAt: 4@5 facing: W.
	
	rover sendCommands: 'l'.
	
	self assert: rover location equals: 4@5.
	self assert: rover orientation equals: S.!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:15:08'!
testCardinal01_EIsRightOfN

	self assert: N rightPoint equals: E.! !
!N class methodsFor: 'associating' stamp: 'VP 10/24/2020 17:16:14'!
rightPoint
	self shouldBeImplemented.! !
!N class methodsFor: 'associating' stamp: 'VP 10/24/2020 17:16:18' prior: 50878133!
rightPoint
	^E.! !
!MarsRoverTest methodsFor: 'tests cardinalPoint' stamp: 'VP 10/24/2020 17:16:36'!
testCardinal01_WIsLeftOfN

	self assert: N leftPoint equals: W.! !
!N class methodsFor: 'associating' stamp: 'VP 10/24/2020 17:16:50'!
leftPoint
	self shouldBeImplemented.! !
!N class methodsFor: 'associating' stamp: 'VP 10/24/2020 17:16:55' prior: 50878146!
leftPoint
	^W.! !
!MarsRoverTest methodsFor: 'tests cardinalPoint' stamp: 'VP 10/24/2020 17:17:03'!
testCardinal02_WIsLeftOfN

	self assert: N leftPoint equals: W.! !

!methodRemoval: MarsRoverTest #testCardinal01_WIsLeftOfN stamp: 'VP 10/24/2020 17:21:44'!
testCardinal01_WIsLeftOfN

	self assert: N leftPoint equals: W.!
!MarsRoverTest methodsFor: 'tests cardinalPoint' stamp: 'VP 10/24/2020 17:18:00'!
testCardinal03_NIsRightOfW

	self assert: W rightPoint equals: N.! !

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 17:22:27'!
PASSED!

!testRun: #MarsRoverTest #test02_roverCommandR_shouldRotateRoverRightwards stamp: 'VP 10/24/2020 17:22:27'!
PASSED!

!testRun: #MarsRoverTest #test03_roverCommandL_shouldOnlyRotateRoverLeftwards stamp: 'VP 10/24/2020 17:22:27'!
PASSED!

!testRun: #MarsRoverTest #testCardinal01_EIsRightOfN stamp: 'VP 10/24/2020 17:22:27'!
PASSED!

!testRun: #MarsRoverTest #testCardinal02_WIsLeftOfN stamp: 'VP 10/24/2020 17:22:27'!
PASSED!

!testRun: #MarsRoverTest #testCardinal03_NIsRightOfW stamp: 'VP 10/24/2020 17:22:27'!
ERROR!

!testRun: #MarsRoverTest #testCardinal03_NIsRightOfW stamp: 'VP 10/24/2020 17:22:27'!
ERROR!
!W class methodsFor: 'associating' stamp: 'VP 10/24/2020 17:22:33'!
rightPoint
	self shouldBeImplemented.! !
!W class methodsFor: 'associating' stamp: 'VP 10/24/2020 17:22:39' prior: 50878190!
rightPoint
	^N.! !

!testRun: #MarsRoverTest #testCardinal03_NIsRightOfW stamp: 'VP 10/24/2020 17:22:41'!
PASSED!

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 17:22:47'!
PASSED!

!testRun: #MarsRoverTest #test02_roverCommandR_shouldRotateRoverRightwards stamp: 'VP 10/24/2020 17:22:47'!
PASSED!

!testRun: #MarsRoverTest #test03_roverCommandL_shouldOnlyRotateRoverLeftwards stamp: 'VP 10/24/2020 17:22:47'!
PASSED!

!testRun: #MarsRoverTest #testCardinal01_EIsRightOfN stamp: 'VP 10/24/2020 17:22:47'!
PASSED!

!testRun: #MarsRoverTest #testCardinal02_WIsLeftOfN stamp: 'VP 10/24/2020 17:22:47'!
PASSED!

!testRun: #MarsRoverTest #testCardinal03_NIsRightOfW stamp: 'VP 10/24/2020 17:22:47'!
PASSED!
!MarsRoverTest methodsFor: 'tests cardinalPoint' stamp: 'VP 10/24/2020 17:23:21'!
testCardinal03_SIsLeftOfW

	self assert: W leftPoint equals: S.! !

!testRun: #MarsRoverTest #testCardinal03_SIsLeftOfW stamp: 'VP 10/24/2020 17:23:22'!
ERROR!
!W class methodsFor: 'associating' stamp: 'VP 10/24/2020 17:23:27'!
leftPoint
	self shouldBeImplemented.! !
!W class methodsFor: 'associating' stamp: 'VP 10/24/2020 17:23:31' prior: 50878227!
leftPoint
	^S.! !

!testRun: #MarsRoverTest #testCardinal03_SIsLeftOfW stamp: 'VP 10/24/2020 17:23:32'!
PASSED!

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 17:23:32'!
PASSED!

!testRun: #MarsRoverTest #test02_roverCommandR_shouldRotateRoverRightwards stamp: 'VP 10/24/2020 17:23:32'!
PASSED!

!testRun: #MarsRoverTest #test03_roverCommandL_shouldOnlyRotateRoverLeftwards stamp: 'VP 10/24/2020 17:23:32'!
PASSED!

!testRun: #MarsRoverTest #testCardinal01_EIsRightOfN stamp: 'VP 10/24/2020 17:23:32'!
PASSED!

!testRun: #MarsRoverTest #testCardinal02_WIsLeftOfN stamp: 'VP 10/24/2020 17:23:32'!
PASSED!

!testRun: #MarsRoverTest #testCardinal03_NIsRightOfW stamp: 'VP 10/24/2020 17:23:32'!
PASSED!

!testRun: #MarsRoverTest #testCardinal03_SIsLeftOfW stamp: 'VP 10/24/2020 17:23:32'!
PASSED!
!MarsRoverTest methodsFor: 'tests cardinalPoint' stamp: 'VP 10/24/2020 17:23:57'!
testCardinal03_WIsRightOfS

	self assert: S rightPoint equals: W.! !

!testRun: #MarsRoverTest #testCardinal03_WIsRightOfS stamp: 'VP 10/24/2020 17:24:01'!
ERROR!
!S class methodsFor: 'associating' stamp: 'VP 10/24/2020 17:24:07'!
rightPoint
	self shouldBeImplemented.! !
!S class methodsFor: 'associating' stamp: 'VP 10/24/2020 17:24:15' prior: 50878267!
rightPoint
	^W.! !

!testRun: #MarsRoverTest #testCardinal03_WIsRightOfS stamp: 'VP 10/24/2020 17:24:16'!
PASSED!

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 17:24:16'!
PASSED!

!testRun: #MarsRoverTest #test02_roverCommandR_shouldRotateRoverRightwards stamp: 'VP 10/24/2020 17:24:16'!
PASSED!

!testRun: #MarsRoverTest #test03_roverCommandL_shouldOnlyRotateRoverLeftwards stamp: 'VP 10/24/2020 17:24:16'!
PASSED!

!testRun: #MarsRoverTest #testCardinal01_EIsRightOfN stamp: 'VP 10/24/2020 17:24:16'!
PASSED!

!testRun: #MarsRoverTest #testCardinal02_WIsLeftOfN stamp: 'VP 10/24/2020 17:24:16'!
PASSED!

!testRun: #MarsRoverTest #testCardinal03_NIsRightOfW stamp: 'VP 10/24/2020 17:24:16'!
PASSED!

!testRun: #MarsRoverTest #testCardinal03_SIsLeftOfW stamp: 'VP 10/24/2020 17:24:16'!
PASSED!

!testRun: #MarsRoverTest #testCardinal03_WIsRightOfS stamp: 'VP 10/24/2020 17:24:16'!
PASSED!
!MarsRoverTest methodsFor: 'tests cardinalPoint' stamp: 'VP 10/24/2020 17:24:32'!
testCardinal04_SIsLeftOfW

	self assert: W leftPoint equals: S.! !

!methodRemoval: MarsRoverTest #testCardinal03_SIsLeftOfW stamp: 'VP 10/24/2020 17:24:32'!
testCardinal03_SIsLeftOfW

	self assert: W leftPoint equals: S.!
!MarsRoverTest methodsFor: 'tests cardinalPoint' stamp: 'VP 10/24/2020 17:24:45'!
testCardinal05_WIsRightOfS

	self assert: S rightPoint equals: W.! !

!methodRemoval: MarsRoverTest #testCardinal03_WIsRightOfS stamp: 'VP 10/24/2020 17:24:45'!
testCardinal03_WIsRightOfS

	self assert: S rightPoint equals: W.!
!MarsRoverTest methodsFor: 'tests cardinalPoint' stamp: 'VP 10/24/2020 17:25:03'!
testCardinal05_EIsLefttOfS

	self assert: S leftPoint equals: E.! !

!testRun: #MarsRoverTest #testCardinal05_EIsLefttOfS stamp: 'VP 10/24/2020 17:25:06'!
ERROR!
!S class methodsFor: 'associating' stamp: 'VP 10/24/2020 17:25:13'!
leftPoint
	self shouldBeImplemented.! !
!S class methodsFor: 'associating' stamp: 'VP 10/24/2020 17:25:23' prior: 50878330!
leftPoint
	^E.! !

!testRun: #MarsRoverTest #testCardinal05_EIsLefttOfS stamp: 'VP 10/24/2020 17:25:24'!
PASSED!

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 17:25:24'!
PASSED!

!testRun: #MarsRoverTest #test02_roverCommandR_shouldRotateRoverRightwards stamp: 'VP 10/24/2020 17:25:24'!
PASSED!

!testRun: #MarsRoverTest #test03_roverCommandL_shouldOnlyRotateRoverLeftwards stamp: 'VP 10/24/2020 17:25:24'!
PASSED!

!testRun: #MarsRoverTest #testCardinal01_EIsRightOfN stamp: 'VP 10/24/2020 17:25:24'!
PASSED!

!testRun: #MarsRoverTest #testCardinal02_WIsLeftOfN stamp: 'VP 10/24/2020 17:25:24'!
PASSED!

!testRun: #MarsRoverTest #testCardinal03_NIsRightOfW stamp: 'VP 10/24/2020 17:25:24'!
PASSED!

!testRun: #MarsRoverTest #testCardinal04_SIsLeftOfW stamp: 'VP 10/24/2020 17:25:24'!
PASSED!

!testRun: #MarsRoverTest #testCardinal05_EIsLefttOfS stamp: 'VP 10/24/2020 17:25:24'!
PASSED!

!testRun: #MarsRoverTest #testCardinal05_WIsRightOfS stamp: 'VP 10/24/2020 17:25:24'!
PASSED!
!MarsRoverTest methodsFor: 'tests cardinalPoint' stamp: 'VP 10/24/2020 17:25:28'!
testCardinal05_EIsLeftOfS

	self assert: S leftPoint equals: E.! !

!methodRemoval: MarsRoverTest #testCardinal05_EIsLefttOfS stamp: 'VP 10/24/2020 17:25:28'!
testCardinal05_EIsLefttOfS

	self assert: S leftPoint equals: E.!
!MarsRoverTest methodsFor: 'tests cardinalPoint' stamp: 'VP 10/24/2020 17:25:38'!
testCardinal06_EIsLeftOfS

	self assert: S leftPoint equals: E.! !

!methodRemoval: MarsRoverTest #testCardinal05_EIsLeftOfS stamp: 'VP 10/24/2020 17:25:38'!
testCardinal05_EIsLeftOfS

	self assert: S leftPoint equals: E.!
!MarsRoverTest methodsFor: 'tests cardinalPoint' stamp: 'VP 10/24/2020 17:26:00'!
testCardinal07_SIsRightOfE

	self assert: E rightPoint equals: S.! !

!testRun: #MarsRoverTest #testCardinal07_SIsRightOfE stamp: 'VP 10/24/2020 17:26:01'!
ERROR!
!E class methodsFor: 'associating' stamp: 'VP 10/24/2020 17:26:06'!
rightPoint
	self shouldBeImplemented.! !
!E class methodsFor: 'associating' stamp: 'VP 10/24/2020 17:26:14' prior: 50878396!
rightPoint
	^S.! !

!testRun: #MarsRoverTest #testCardinal07_SIsRightOfE stamp: 'VP 10/24/2020 17:26:21'!
PASSED!

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 17:26:21'!
PASSED!

!testRun: #MarsRoverTest #test02_roverCommandR_shouldRotateRoverRightwards stamp: 'VP 10/24/2020 17:26:21'!
PASSED!

!testRun: #MarsRoverTest #test03_roverCommandL_shouldOnlyRotateRoverLeftwards stamp: 'VP 10/24/2020 17:26:21'!
PASSED!

!testRun: #MarsRoverTest #testCardinal01_EIsRightOfN stamp: 'VP 10/24/2020 17:26:21'!
PASSED!

!testRun: #MarsRoverTest #testCardinal02_WIsLeftOfN stamp: 'VP 10/24/2020 17:26:21'!
PASSED!

!testRun: #MarsRoverTest #testCardinal03_NIsRightOfW stamp: 'VP 10/24/2020 17:26:21'!
PASSED!

!testRun: #MarsRoverTest #testCardinal04_SIsLeftOfW stamp: 'VP 10/24/2020 17:26:21'!
PASSED!

!testRun: #MarsRoverTest #testCardinal05_WIsRightOfS stamp: 'VP 10/24/2020 17:26:21'!
PASSED!

!testRun: #MarsRoverTest #testCardinal06_EIsLeftOfS stamp: 'VP 10/24/2020 17:26:21'!
PASSED!

!testRun: #MarsRoverTest #testCardinal07_SIsRightOfE stamp: 'VP 10/24/2020 17:26:21'!
PASSED!
!MarsRoverTest methodsFor: 'tests cardinalPoint' stamp: 'VP 10/24/2020 17:26:38'!
testCardinal08_NIsLeftOfE

	self assert: E leftPoint equals: N.! !

!testRun: #MarsRoverTest #testCardinal08_NIsLeftOfE stamp: 'VP 10/24/2020 17:26:39'!
ERROR!
!E class methodsFor: 'associating' stamp: 'VP 10/24/2020 17:26:43'!
leftPoint
	self shouldBeImplemented.! !
!E class methodsFor: 'associating' stamp: 'VP 10/24/2020 17:26:49' prior: 50878445!
leftPoint
	^N.! !

!testRun: #MarsRoverTest #testCardinal08_NIsLeftOfE stamp: 'VP 10/24/2020 17:26:50'!
PASSED!

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 17:26:50'!
PASSED!

!testRun: #MarsRoverTest #test02_roverCommandR_shouldRotateRoverRightwards stamp: 'VP 10/24/2020 17:26:50'!
PASSED!

!testRun: #MarsRoverTest #test03_roverCommandL_shouldOnlyRotateRoverLeftwards stamp: 'VP 10/24/2020 17:26:50'!
PASSED!

!testRun: #MarsRoverTest #testCardinal01_EIsRightOfN stamp: 'VP 10/24/2020 17:26:50'!
PASSED!

!testRun: #MarsRoverTest #testCardinal02_WIsLeftOfN stamp: 'VP 10/24/2020 17:26:50'!
PASSED!

!testRun: #MarsRoverTest #testCardinal03_NIsRightOfW stamp: 'VP 10/24/2020 17:26:50'!
PASSED!

!testRun: #MarsRoverTest #testCardinal04_SIsLeftOfW stamp: 'VP 10/24/2020 17:26:50'!
PASSED!

!testRun: #MarsRoverTest #testCardinal05_WIsRightOfS stamp: 'VP 10/24/2020 17:26:50'!
PASSED!

!testRun: #MarsRoverTest #testCardinal06_EIsLeftOfS stamp: 'VP 10/24/2020 17:26:50'!
PASSED!

!testRun: #MarsRoverTest #testCardinal07_SIsRightOfE stamp: 'VP 10/24/2020 17:26:50'!
PASSED!

!testRun: #MarsRoverTest #testCardinal08_NIsLeftOfE stamp: 'VP 10/24/2020 17:26:50'!
PASSED!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:27:17' prior: 50878061!
test02_roverCommandR_shouldRotateRoverRightwards

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	rover sendCommands: 'r'.
	
	self assert: rover location equals: 2@3.
	self assert: rover orientation equals: N rightPoint.! !

!testRun: #MarsRoverTest #test02_roverCommandR_shouldRotateRoverRightwards stamp: 'VP 10/24/2020 17:27:20'!
PASSED!

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 17:27:20'!
PASSED!

!testRun: #MarsRoverTest #test02_roverCommandR_shouldRotateRoverRightwards stamp: 'VP 10/24/2020 17:27:20'!
PASSED!

!testRun: #MarsRoverTest #test03_roverCommandL_shouldOnlyRotateRoverLeftwards stamp: 'VP 10/24/2020 17:27:20'!
PASSED!

!testRun: #MarsRoverTest #testCardinal01_EIsRightOfN stamp: 'VP 10/24/2020 17:27:20'!
PASSED!

!testRun: #MarsRoverTest #testCardinal02_WIsLeftOfN stamp: 'VP 10/24/2020 17:27:20'!
PASSED!

!testRun: #MarsRoverTest #testCardinal03_NIsRightOfW stamp: 'VP 10/24/2020 17:27:20'!
PASSED!

!testRun: #MarsRoverTest #testCardinal04_SIsLeftOfW stamp: 'VP 10/24/2020 17:27:20'!
PASSED!

!testRun: #MarsRoverTest #testCardinal05_WIsRightOfS stamp: 'VP 10/24/2020 17:27:20'!
PASSED!

!testRun: #MarsRoverTest #testCardinal06_EIsLeftOfS stamp: 'VP 10/24/2020 17:27:20'!
PASSED!

!testRun: #MarsRoverTest #testCardinal07_SIsRightOfE stamp: 'VP 10/24/2020 17:27:20'!
PASSED!

!testRun: #MarsRoverTest #testCardinal08_NIsLeftOfE stamp: 'VP 10/24/2020 17:27:20'!
PASSED!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:27:25' prior: 50878086!
test03_roverCommandL_shouldOnlyRotateRoverLeftwards

	| rover |
	
	rover := MarsRover deployAt: 4@5 facing: N.
	
	rover sendCommands: 'l'.
	
	self assert: rover location equals: 4@5.
	self assert: rover orientation equals: W leftPoint.! !

!testRun: #MarsRoverTest #test03_roverCommandL_shouldOnlyRotateRoverLeftwards stamp: 'VP 10/24/2020 17:27:35'!
FAILURE!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:27:40' prior: 50878537!
test03_roverCommandL_shouldOnlyRotateRoverLeftwards

	| rover |
	
	rover := MarsRover deployAt: 4@5 facing: N.
	
	rover sendCommands: 'l'.
	
	self assert: rover location equals: 4@5.
	self assert: rover orientation equals: N leftPoint.! !

!testRun: #MarsRoverTest #test03_roverCommandL_shouldOnlyRotateRoverLeftwards stamp: 'VP 10/24/2020 17:27:44'!
PASSED!

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 17:27:44'!
PASSED!

!testRun: #MarsRoverTest #test02_roverCommandR_shouldRotateRoverRightwards stamp: 'VP 10/24/2020 17:27:44'!
PASSED!

!testRun: #MarsRoverTest #test03_roverCommandL_shouldOnlyRotateRoverLeftwards stamp: 'VP 10/24/2020 17:27:44'!
PASSED!

!testRun: #MarsRoverTest #testCardinal01_EIsRightOfN stamp: 'VP 10/24/2020 17:27:44'!
PASSED!

!testRun: #MarsRoverTest #testCardinal02_WIsLeftOfN stamp: 'VP 10/24/2020 17:27:44'!
PASSED!

!testRun: #MarsRoverTest #testCardinal03_NIsRightOfW stamp: 'VP 10/24/2020 17:27:44'!
PASSED!

!testRun: #MarsRoverTest #testCardinal04_SIsLeftOfW stamp: 'VP 10/24/2020 17:27:44'!
PASSED!

!testRun: #MarsRoverTest #testCardinal05_WIsRightOfS stamp: 'VP 10/24/2020 17:27:44'!
PASSED!

!testRun: #MarsRoverTest #testCardinal06_EIsLeftOfS stamp: 'VP 10/24/2020 17:27:44'!
PASSED!

!testRun: #MarsRoverTest #testCardinal07_SIsRightOfE stamp: 'VP 10/24/2020 17:27:44'!
PASSED!

!testRun: #MarsRoverTest #testCardinal08_NIsLeftOfE stamp: 'VP 10/24/2020 17:27:44'!
PASSED!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:29:54' prior: 50878552!
test03_roverCommandL_shouldOnlyRotateRoverLeftwards

	| rover |
	
	rover := MarsRover deployAt: 4@5 facing: N.
	
	rover sendCommands: 'l'.
	
	self assert: rover location equals: 4@5.
	self assert: rover orientation equals: N leftPoint.! !

!testRun: #MarsRoverTest #test03_roverCommandL_shouldOnlyRotateRoverLeftwards stamp: 'VP 10/24/2020 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #test02_roverCommandR_shouldRotateRoverRightwards stamp: 'VP 10/24/2020 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #test03_roverCommandL_shouldOnlyRotateRoverLeftwards stamp: 'VP 10/24/2020 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #testCardinal01_EIsRightOfN stamp: 'VP 10/24/2020 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #testCardinal02_WIsLeftOfN stamp: 'VP 10/24/2020 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #testCardinal03_NIsRightOfW stamp: 'VP 10/24/2020 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #testCardinal04_SIsLeftOfW stamp: 'VP 10/24/2020 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #testCardinal05_WIsRightOfS stamp: 'VP 10/24/2020 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #testCardinal06_EIsLeftOfS stamp: 'VP 10/24/2020 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #testCardinal07_SIsRightOfE stamp: 'VP 10/24/2020 17:29:54'!
PASSED!

!testRun: #MarsRoverTest #testCardinal08_NIsLeftOfE stamp: 'VP 10/24/2020 17:29:54'!
PASSED!
!MarsRoverTest methodsFor: 'tests cardinalPoint' stamp: 'VP 10/24/2020 17:32:27'!
testCardinal01_RCommandOnRoverFacingN_leavesRoverFacingE

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	rover sendCommands: 'r'.
	
	self assert: rover location equals: 2@3.
	self assert: rover orientation equals: E.! !

!methodRemoval: MarsRoverTest #testCardinal01_EIsRightOfN stamp: 'VP 10/24/2020 17:32:32'!
testCardinal01_EIsRightOfN

	self assert: N rightPoint equals: E.!

!methodRemoval: MarsRoverTest #test02_roverCommandR_shouldRotateRoverRightwards stamp: 'VP 10/24/2020 17:32:39'!
test02_roverCommandR_shouldRotateRoverRightwards

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	rover sendCommands: 'r'.
	
	self assert: rover location equals: 2@3.
	self assert: rover orientation equals: N rightPoint.!

!methodRemoval: MarsRoverTest #test03_roverCommandL_shouldOnlyRotateRoverLeftwards stamp: 'VP 10/24/2020 17:32:41'!
test03_roverCommandL_shouldOnlyRotateRoverLeftwards

	| rover |
	
	rover := MarsRover deployAt: 4@5 facing: N.
	
	rover sendCommands: 'l'.
	
	self assert: rover location equals: 4@5.
	self assert: rover orientation equals: N leftPoint.!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:32:48'!
test02_RCommandOnRoverFacingN_leavesRoverFacingE

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	rover sendCommands: 'r'.
	
	self assert: rover location equals: 2@3.
	self assert: rover orientation equals: E.! !

!methodRemoval: MarsRoverTest #testCardinal01_RCommandOnRoverFacingN_leavesRoverFacingE stamp: 'VP 10/24/2020 17:32:49'!
testCardinal01_RCommandOnRoverFacingN_leavesRoverFacingE

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	rover sendCommands: 'r'.
	
	self assert: rover location equals: 2@3.
	self assert: rover orientation equals: E.!

!testRun: #MarsRoverTest #test02_RCommandOnRoverFacingN_leavesRoverFacingE stamp: 'VP 10/24/2020 17:32:54'!
PASSED!

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 17:32:54'!
PASSED!

!testRun: #MarsRoverTest #test02_RCommandOnRoverFacingN_leavesRoverFacingE stamp: 'VP 10/24/2020 17:32:54'!
PASSED!

!testRun: #MarsRoverTest #testCardinal02_WIsLeftOfN stamp: 'VP 10/24/2020 17:32:54'!
PASSED!

!testRun: #MarsRoverTest #testCardinal03_NIsRightOfW stamp: 'VP 10/24/2020 17:32:54'!
PASSED!

!testRun: #MarsRoverTest #testCardinal04_SIsLeftOfW stamp: 'VP 10/24/2020 17:32:54'!
PASSED!

!testRun: #MarsRoverTest #testCardinal05_WIsRightOfS stamp: 'VP 10/24/2020 17:32:54'!
PASSED!

!testRun: #MarsRoverTest #testCardinal06_EIsLeftOfS stamp: 'VP 10/24/2020 17:32:54'!
PASSED!

!testRun: #MarsRoverTest #testCardinal07_SIsRightOfE stamp: 'VP 10/24/2020 17:32:54'!
PASSED!

!testRun: #MarsRoverTest #testCardinal08_NIsLeftOfE stamp: 'VP 10/24/2020 17:32:54'!
PASSED!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:33:07'!
test02_LCommandOnRoverFacingN_leavesRoverFacingW

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	rover sendCommands: 'r'.
	
	self assert: rover location equals: 2@3.
	self assert: rover orientation equals: W.! !
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:33:11'!
test03_LCommandOnRoverFacingN_leavesRoverFacingW

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	rover sendCommands: 'r'.
	
	self assert: rover location equals: 2@3.
	self assert: rover orientation equals: W.! !

!methodRemoval: MarsRoverTest #test02_LCommandOnRoverFacingN_leavesRoverFacingW stamp: 'VP 10/24/2020 17:33:11'!
test02_LCommandOnRoverFacingN_leavesRoverFacingW

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	rover sendCommands: 'r'.
	
	self assert: rover location equals: 2@3.
	self assert: rover orientation equals: W.!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:33:13' prior: 50878746!
test03_LCommandOnRoverFacingN_leavesRoverFacingW

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	rover sendCommands: 'l'.
	
	self assert: rover location equals: 2@3.
	self assert: rover orientation equals: W.! !

!testRun: #MarsRoverTest #test03_LCommandOnRoverFacingN_leavesRoverFacingW stamp: 'VP 10/24/2020 17:33:14'!
PASSED!

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 17:33:14'!
PASSED!

!testRun: #MarsRoverTest #test02_RCommandOnRoverFacingN_leavesRoverFacingE stamp: 'VP 10/24/2020 17:33:14'!
PASSED!

!testRun: #MarsRoverTest #test03_LCommandOnRoverFacingN_leavesRoverFacingW stamp: 'VP 10/24/2020 17:33:14'!
PASSED!

!testRun: #MarsRoverTest #testCardinal02_WIsLeftOfN stamp: 'VP 10/24/2020 17:33:14'!
PASSED!

!testRun: #MarsRoverTest #testCardinal03_NIsRightOfW stamp: 'VP 10/24/2020 17:33:14'!
PASSED!

!testRun: #MarsRoverTest #testCardinal04_SIsLeftOfW stamp: 'VP 10/24/2020 17:33:14'!
PASSED!

!testRun: #MarsRoverTest #testCardinal05_WIsRightOfS stamp: 'VP 10/24/2020 17:33:14'!
PASSED!

!testRun: #MarsRoverTest #testCardinal06_EIsLeftOfS stamp: 'VP 10/24/2020 17:33:14'!
PASSED!

!testRun: #MarsRoverTest #testCardinal07_SIsRightOfE stamp: 'VP 10/24/2020 17:33:14'!
PASSED!

!testRun: #MarsRoverTest #testCardinal08_NIsLeftOfE stamp: 'VP 10/24/2020 17:33:14'!
PASSED!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:33:42'!
test03_RCommandOnRoverFacingW_leavesRoverFacingN

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: W.
	
	rover sendCommands: 'r'.
	
	self assert: rover location equals: 2@3.
	self assert: rover orientation equals: N.! !

!testRun: #MarsRoverTest #test03_RCommandOnRoverFacingW_leavesRoverFacingN stamp: 'VP 10/24/2020 17:33:43'!
FAILURE!
!MarsRover methodsFor: 'orientation' stamp: 'VP 10/24/2020 17:35:14' prior: 50878096!
sendCommands: aString 
	orientation := aString = 'r' ifTrue: [orientation rightPoint] ifFalse: [orientation leftPoint].! !

!testRun: #MarsRoverTest #test03_RCommandOnRoverFacingW_leavesRoverFacingN stamp: 'VP 10/24/2020 17:35:14'!
PASSED!

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 17:35:14'!
PASSED!

!testRun: #MarsRoverTest #test02_RCommandOnRoverFacingN_leavesRoverFacingE stamp: 'VP 10/24/2020 17:35:14'!
PASSED!

!testRun: #MarsRoverTest #test03_LCommandOnRoverFacingN_leavesRoverFacingW stamp: 'VP 10/24/2020 17:35:14'!
PASSED!

!testRun: #MarsRoverTest #test03_RCommandOnRoverFacingW_leavesRoverFacingN stamp: 'VP 10/24/2020 17:35:14'!
PASSED!

!testRun: #MarsRoverTest #testCardinal02_WIsLeftOfN stamp: 'VP 10/24/2020 17:35:14'!
PASSED!

!testRun: #MarsRoverTest #testCardinal03_NIsRightOfW stamp: 'VP 10/24/2020 17:35:14'!
PASSED!

!testRun: #MarsRoverTest #testCardinal04_SIsLeftOfW stamp: 'VP 10/24/2020 17:35:14'!
PASSED!

!testRun: #MarsRoverTest #testCardinal05_WIsRightOfS stamp: 'VP 10/24/2020 17:35:14'!
PASSED!

!testRun: #MarsRoverTest #testCardinal06_EIsLeftOfS stamp: 'VP 10/24/2020 17:35:14'!
PASSED!

!testRun: #MarsRoverTest #testCardinal07_SIsRightOfE stamp: 'VP 10/24/2020 17:35:14'!
PASSED!

!testRun: #MarsRoverTest #testCardinal08_NIsLeftOfE stamp: 'VP 10/24/2020 17:35:14'!
PASSED!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:35:25'!
test03_LCommandOnRoverFacingW_leavesRoverFacingS

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: W.
	
	rover sendCommands: 'l'.
	
	self assert: rover location equals: 2@3.
	self assert: rover orientation equals: S.! !
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:35:32'!
test05_LCommandOnRoverFacingW_leavesRoverFacingS

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: W.
	
	rover sendCommands: 'l'.
	
	self assert: rover location equals: 2@3.
	self assert: rover orientation equals: S.! !

!methodRemoval: MarsRoverTest #test03_LCommandOnRoverFacingW_leavesRoverFacingS stamp: 'VP 10/24/2020 17:35:32'!
test03_LCommandOnRoverFacingW_leavesRoverFacingS

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: W.
	
	rover sendCommands: 'l'.
	
	self assert: rover location equals: 2@3.
	self assert: rover orientation equals: S.!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:35:39'!
test04_RCommandOnRoverFacingW_leavesRoverFacingN

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: W.
	
	rover sendCommands: 'r'.
	
	self assert: rover location equals: 2@3.
	self assert: rover orientation equals: N.! !

!methodRemoval: MarsRoverTest #test03_RCommandOnRoverFacingW_leavesRoverFacingN stamp: 'VP 10/24/2020 17:35:39'!
test03_RCommandOnRoverFacingW_leavesRoverFacingN

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: W.
	
	rover sendCommands: 'r'.
	
	self assert: rover location equals: 2@3.
	self assert: rover orientation equals: N.!

!methodRemoval: MarsRoverTest #testCardinal02_WIsLeftOfN stamp: 'VP 10/24/2020 17:35:47'!
testCardinal02_WIsLeftOfN

	self assert: N leftPoint equals: W.!

!methodRemoval: MarsRoverTest #testCardinal03_NIsRightOfW stamp: 'VP 10/24/2020 17:35:49'!
testCardinal03_NIsRightOfW

	self assert: W rightPoint equals: N.!

!methodRemoval: MarsRoverTest #testCardinal04_SIsLeftOfW stamp: 'VP 10/24/2020 17:35:52'!
testCardinal04_SIsLeftOfW

	self assert: W leftPoint equals: S.!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:36:15'!
test05_RCommandOnRoverFacingS_leavesRoverFacingW

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: S.
	
	rover sendCommands: 'r'.
	
	self assert: rover location equals: 2@3.
	self assert: rover orientation equals: W.! !
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:36:20'!
test06_RCommandOnRoverFacingS_leavesRoverFacingW

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: S.
	
	rover sendCommands: 'r'.
	
	self assert: rover location equals: 2@3.
	self assert: rover orientation equals: W.! !

!methodRemoval: MarsRoverTest #test05_RCommandOnRoverFacingS_leavesRoverFacingW stamp: 'VP 10/24/2020 17:36:20'!
test05_RCommandOnRoverFacingS_leavesRoverFacingW

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: S.
	
	rover sendCommands: 'r'.
	
	self assert: rover location equals: 2@3.
	self assert: rover orientation equals: W.!

!methodRemoval: MarsRoverTest #testCardinal05_WIsRightOfS stamp: 'VP 10/24/2020 17:36:27'!
testCardinal05_WIsRightOfS

	self assert: S rightPoint equals: W.!

!methodRemoval: MarsRoverTest #testCardinal06_EIsLeftOfS stamp: 'VP 10/24/2020 17:36:27'!
testCardinal06_EIsLeftOfS

	self assert: S leftPoint equals: E.!

!methodRemoval: MarsRoverTest #testCardinal07_SIsRightOfE stamp: 'VP 10/24/2020 17:36:27'!
testCardinal07_SIsRightOfE

	self assert: E rightPoint equals: S.!

!methodRemoval: MarsRoverTest #testCardinal08_NIsLeftOfE stamp: 'VP 10/24/2020 17:36:27'!
testCardinal08_NIsLeftOfE

	self assert: E leftPoint equals: N.!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:36:55'!
test07_LCommandOnRoverFacingS_leavesRoverFacingE

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: S.
	
	rover sendCommands: 'l'.
	
	self assert: rover location equals: 2@3.
	self assert: rover orientation equals: E.! !
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:37:31'!
test08_RCommandOnRoverFacingE_leavesRoverFacingS

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: E.
	
	rover sendCommands: 'r'.
	
	self assert: rover location equals: 2@3.
	self assert: rover orientation equals: S.! !
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:37:40'!
test09_LCommandOnRoverFacingE_leavesRoverFacingN

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: E.
	
	rover sendCommands: 'l'.
	
	self assert: rover location equals: 2@3.
	self assert: rover orientation equals: N.! !

!testRun: #MarsRoverTest #test09_LCommandOnRoverFacingE_leavesRoverFacingN stamp: 'VP 10/24/2020 17:37:41'!
PASSED!

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 17:37:41'!
PASSED!

!testRun: #MarsRoverTest #test02_RCommandOnRoverFacingN_leavesRoverFacingE stamp: 'VP 10/24/2020 17:37:41'!
PASSED!

!testRun: #MarsRoverTest #test03_LCommandOnRoverFacingN_leavesRoverFacingW stamp: 'VP 10/24/2020 17:37:41'!
PASSED!

!testRun: #MarsRoverTest #test04_RCommandOnRoverFacingW_leavesRoverFacingN stamp: 'VP 10/24/2020 17:37:41'!
PASSED!

!testRun: #MarsRoverTest #test05_LCommandOnRoverFacingW_leavesRoverFacingS stamp: 'VP 10/24/2020 17:37:41'!
PASSED!

!testRun: #MarsRoverTest #test06_RCommandOnRoverFacingS_leavesRoverFacingW stamp: 'VP 10/24/2020 17:37:41'!
PASSED!

!testRun: #MarsRoverTest #test07_LCommandOnRoverFacingS_leavesRoverFacingE stamp: 'VP 10/24/2020 17:37:41'!
PASSED!

!testRun: #MarsRoverTest #test08_RCommandOnRoverFacingE_leavesRoverFacingS stamp: 'VP 10/24/2020 17:37:41'!
PASSED!

!testRun: #MarsRoverTest #test09_LCommandOnRoverFacingE_leavesRoverFacingN stamp: 'VP 10/24/2020 17:37:41'!
PASSED!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:39:04'!
test10_LRCommandsOnRover_leavesRoverOrientationIntact

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	rover sendCommands: 'lr'.
	
	self assert: rover location equals: 2@3.
	self assert: rover orientation equals: N.! !

!testRun: #MarsRoverTest #test10_LRCommandsOnRover_leavesRoverOrientationIntact stamp: 'VP 10/24/2020 17:39:07'!
FAILURE!
!MarsRover methodsFor: 'orientation' stamp: 'VP 10/24/2020 17:40:25' prior: 50878825!
sendCommands: aString
	aString do: [ :command |
		orientation := command = $r ifTrue: [orientation rightPoint] ifFalse: [orientation leftPoint].
	].! !

!testRun: #MarsRoverTest #test10_LRCommandsOnRover_leavesRoverOrientationIntact stamp: 'VP 10/24/2020 17:40:29'!
PASSED!

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 17:40:29'!
PASSED!

!testRun: #MarsRoverTest #test02_RCommandOnRoverFacingN_leavesRoverFacingE stamp: 'VP 10/24/2020 17:40:29'!
PASSED!

!testRun: #MarsRoverTest #test03_LCommandOnRoverFacingN_leavesRoverFacingW stamp: 'VP 10/24/2020 17:40:29'!
PASSED!

!testRun: #MarsRoverTest #test04_RCommandOnRoverFacingW_leavesRoverFacingN stamp: 'VP 10/24/2020 17:40:29'!
PASSED!

!testRun: #MarsRoverTest #test05_LCommandOnRoverFacingW_leavesRoverFacingS stamp: 'VP 10/24/2020 17:40:29'!
PASSED!

!testRun: #MarsRoverTest #test06_RCommandOnRoverFacingS_leavesRoverFacingW stamp: 'VP 10/24/2020 17:40:29'!
PASSED!

!testRun: #MarsRoverTest #test07_LCommandOnRoverFacingS_leavesRoverFacingE stamp: 'VP 10/24/2020 17:40:29'!
PASSED!

!testRun: #MarsRoverTest #test08_RCommandOnRoverFacingE_leavesRoverFacingS stamp: 'VP 10/24/2020 17:40:29'!
PASSED!

!testRun: #MarsRoverTest #test09_LCommandOnRoverFacingE_leavesRoverFacingN stamp: 'VP 10/24/2020 17:40:29'!
PASSED!

!testRun: #MarsRoverTest #test10_LRCommandsOnRover_leavesRoverOrientationIntact stamp: 'VP 10/24/2020 17:40:29'!
PASSED!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:43:28'!
test11_FCommandOnRoverFacingN_movesRoverNorth

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	rover sendCommands: 'f'.
	
	self assert: rover location equals: 2@4.
	self assert: rover orientation equals: N.! !

!testRun: #MarsRoverTest #test11_FCommandOnRoverFacingN_movesRoverNorth stamp: 'VP 10/24/2020 17:43:29'!
FAILURE!
!MarsRover methodsFor: 'orientation' stamp: 'VP 10/24/2020 17:45:50' prior: 50879063!
sendCommands: aString
	aString do: [ :command |
		command = $r ifTrue: [orientation := orientation rightPoint].
		command = $l ifTrue: [orientation := orientation leftPoint].
		command = $f ifTrue: [location := location + 0@1].
	].! !

!testRun: #MarsRoverTest #test11_FCommandOnRoverFacingN_movesRoverNorth stamp: 'VP 10/24/2020 17:45:51'!
ERROR!
!MarsRover methodsFor: 'orientation' stamp: 'VP 10/24/2020 17:46:13' prior: 50879124!
sendCommands: aString
	aString do: [ :command |
		command = $r ifTrue: [orientation := orientation rightPoint].
		command = $l ifTrue: [orientation := orientation leftPoint].
		command = $f ifTrue: [location := location + (0@1)].
	].! !

!testRun: #MarsRoverTest #test11_FCommandOnRoverFacingN_movesRoverNorth stamp: 'VP 10/24/2020 17:46:16'!
PASSED!

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 17:46:16'!
PASSED!

!testRun: #MarsRoverTest #test02_RCommandOnRoverFacingN_leavesRoverFacingE stamp: 'VP 10/24/2020 17:46:16'!
PASSED!

!testRun: #MarsRoverTest #test03_LCommandOnRoverFacingN_leavesRoverFacingW stamp: 'VP 10/24/2020 17:46:16'!
PASSED!

!testRun: #MarsRoverTest #test04_RCommandOnRoverFacingW_leavesRoverFacingN stamp: 'VP 10/24/2020 17:46:16'!
PASSED!

!testRun: #MarsRoverTest #test05_LCommandOnRoverFacingW_leavesRoverFacingS stamp: 'VP 10/24/2020 17:46:16'!
PASSED!

!testRun: #MarsRoverTest #test06_RCommandOnRoverFacingS_leavesRoverFacingW stamp: 'VP 10/24/2020 17:46:16'!
PASSED!

!testRun: #MarsRoverTest #test07_LCommandOnRoverFacingS_leavesRoverFacingE stamp: 'VP 10/24/2020 17:46:16'!
PASSED!

!testRun: #MarsRoverTest #test08_RCommandOnRoverFacingE_leavesRoverFacingS stamp: 'VP 10/24/2020 17:46:16'!
PASSED!

!testRun: #MarsRoverTest #test09_LCommandOnRoverFacingE_leavesRoverFacingN stamp: 'VP 10/24/2020 17:46:16'!
PASSED!

!testRun: #MarsRoverTest #test10_LRCommandsOnRover_leavesRoverOrientationIntact stamp: 'VP 10/24/2020 17:46:16'!
PASSED!

!testRun: #MarsRoverTest #test11_FCommandOnRoverFacingN_movesRoverNorth stamp: 'VP 10/24/2020 17:46:16'!
PASSED!

!testRun: #MarsRoverTest #test11_FCommandOnRoverFacingN_movesRoverNorth stamp: 'VP 10/24/2020 17:46:18'!
PASSED!

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 17:46:18'!
PASSED!

!testRun: #MarsRoverTest #test02_RCommandOnRoverFacingN_leavesRoverFacingE stamp: 'VP 10/24/2020 17:46:18'!
PASSED!

!testRun: #MarsRoverTest #test03_LCommandOnRoverFacingN_leavesRoverFacingW stamp: 'VP 10/24/2020 17:46:18'!
PASSED!

!testRun: #MarsRoverTest #test04_RCommandOnRoverFacingW_leavesRoverFacingN stamp: 'VP 10/24/2020 17:46:18'!
PASSED!

!testRun: #MarsRoverTest #test05_LCommandOnRoverFacingW_leavesRoverFacingS stamp: 'VP 10/24/2020 17:46:18'!
PASSED!

!testRun: #MarsRoverTest #test06_RCommandOnRoverFacingS_leavesRoverFacingW stamp: 'VP 10/24/2020 17:46:18'!
PASSED!

!testRun: #MarsRoverTest #test07_LCommandOnRoverFacingS_leavesRoverFacingE stamp: 'VP 10/24/2020 17:46:18'!
PASSED!

!testRun: #MarsRoverTest #test08_RCommandOnRoverFacingE_leavesRoverFacingS stamp: 'VP 10/24/2020 17:46:18'!
PASSED!

!testRun: #MarsRoverTest #test09_LCommandOnRoverFacingE_leavesRoverFacingN stamp: 'VP 10/24/2020 17:46:18'!
PASSED!

!testRun: #MarsRoverTest #test10_LRCommandsOnRover_leavesRoverOrientationIntact stamp: 'VP 10/24/2020 17:46:18'!
PASSED!

!testRun: #MarsRoverTest #test11_FCommandOnRoverFacingN_movesRoverNorth stamp: 'VP 10/24/2020 17:46:18'!
PASSED!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:47:14'!
test12_FCommandOnRoverFacingW_movesRoverWest

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: W.
	
	rover sendCommands: 'f'.
	
	self assert: rover location equals: 1@3.
	self assert: rover orientation equals: W.! !

!testRun: #MarsRoverTest #test12_FCommandOnRoverFacingW_movesRoverWest stamp: 'VP 10/24/2020 17:47:14'!
FAILURE!
!MarsRover methodsFor: 'orientation' stamp: 'VP 10/24/2020 17:49:22' prior: 50879138!
sendCommands: aString
	aString do: [ :command |
		command = $r ifTrue: [orientation := orientation rightPoint].
		command = $l ifTrue: [orientation := orientation leftPoint].
		command = $f ifTrue: [location := location + ((orientation = W ifTrue: [-1] ifFalse: [0])@(orientation = N ifTrue: [1] ifFalse: [0]))].
	].! !

!testRun: #MarsRoverTest #test12_FCommandOnRoverFacingW_movesRoverWest stamp: 'VP 10/24/2020 17:49:23'!
PASSED!

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 17:49:23'!
PASSED!

!testRun: #MarsRoverTest #test02_RCommandOnRoverFacingN_leavesRoverFacingE stamp: 'VP 10/24/2020 17:49:23'!
PASSED!

!testRun: #MarsRoverTest #test03_LCommandOnRoverFacingN_leavesRoverFacingW stamp: 'VP 10/24/2020 17:49:23'!
PASSED!

!testRun: #MarsRoverTest #test04_RCommandOnRoverFacingW_leavesRoverFacingN stamp: 'VP 10/24/2020 17:49:23'!
PASSED!

!testRun: #MarsRoverTest #test05_LCommandOnRoverFacingW_leavesRoverFacingS stamp: 'VP 10/24/2020 17:49:23'!
PASSED!

!testRun: #MarsRoverTest #test06_RCommandOnRoverFacingS_leavesRoverFacingW stamp: 'VP 10/24/2020 17:49:23'!
PASSED!

!testRun: #MarsRoverTest #test07_LCommandOnRoverFacingS_leavesRoverFacingE stamp: 'VP 10/24/2020 17:49:23'!
PASSED!

!testRun: #MarsRoverTest #test08_RCommandOnRoverFacingE_leavesRoverFacingS stamp: 'VP 10/24/2020 17:49:23'!
PASSED!

!testRun: #MarsRoverTest #test09_LCommandOnRoverFacingE_leavesRoverFacingN stamp: 'VP 10/24/2020 17:49:23'!
PASSED!

!testRun: #MarsRoverTest #test10_LRCommandsOnRover_leavesRoverOrientationIntact stamp: 'VP 10/24/2020 17:49:23'!
PASSED!

!testRun: #MarsRoverTest #test11_FCommandOnRoverFacingN_movesRoverNorth stamp: 'VP 10/24/2020 17:49:23'!
PASSED!

!testRun: #MarsRoverTest #test12_FCommandOnRoverFacingW_movesRoverWest stamp: 'VP 10/24/2020 17:49:23'!
PASSED!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:49:39'!
test12_FCommandOnRoverFacingS_movesRoverSout

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: S.
	
	rover sendCommands: 'f'.
	
	self assert: rover location equals: 2@2.
	self assert: rover orientation equals: W.! !

!testRun: #MarsRoverTest #test12_FCommandOnRoverFacingS_movesRoverSout stamp: 'VP 10/24/2020 17:49:40'!
FAILURE!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:49:44' prior: 50879307!
test12_FCommandOnRoverFacingS_movesRoverSout

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: S.
	
	rover sendCommands: 'f'.
	
	self assert: rover location equals: 2@2.
	self assert: rover orientation equals: S.! !

!testRun: #MarsRoverTest #test12_FCommandOnRoverFacingS_movesRoverSout stamp: 'VP 10/24/2020 17:49:45'!
FAILURE!
!MarsRover methodsFor: 'orientation' stamp: 'VP 10/24/2020 17:54:03' prior: 50879248!
sendCommands: aString
	aString do: [ :command |
		command = $r ifTrue: [orientation := orientation rightPoint].
		command = $l ifTrue: [orientation := orientation leftPoint].
		command = $f ifTrue: [location := location + orientation unitarianSpherePoint].
	].! !
!N methodsFor: 'no messages' stamp: 'VP 10/24/2020 17:54:24'!
unitarianSpherePoint

	^0@1.! !

!methodRemoval: N #unitarianSpherePoint stamp: 'VP 10/24/2020 17:54:34'!
unitarianSpherePoint

	^0@1.!
!N class methodsFor: 'nil' stamp: 'VP 10/24/2020 17:54:54'!
unitarianSpherePoint

	^0@1.! !
!W class methodsFor: 'nil' stamp: 'VP 10/24/2020 17:55:42'!
unitarianSpherePoint

	^-1@0.! !
!S class methodsFor: 'nil' stamp: 'VP 10/24/2020 17:55:59'!
unitarianSpherePoint

	^0@-1.! !

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 17:56:06'!
PASSED!

!testRun: #MarsRoverTest #test02_RCommandOnRoverFacingN_leavesRoverFacingE stamp: 'VP 10/24/2020 17:56:06'!
PASSED!

!testRun: #MarsRoverTest #test03_LCommandOnRoverFacingN_leavesRoverFacingW stamp: 'VP 10/24/2020 17:56:06'!
PASSED!

!testRun: #MarsRoverTest #test04_RCommandOnRoverFacingW_leavesRoverFacingN stamp: 'VP 10/24/2020 17:56:06'!
PASSED!

!testRun: #MarsRoverTest #test05_LCommandOnRoverFacingW_leavesRoverFacingS stamp: 'VP 10/24/2020 17:56:06'!
PASSED!

!testRun: #MarsRoverTest #test06_RCommandOnRoverFacingS_leavesRoverFacingW stamp: 'VP 10/24/2020 17:56:06'!
PASSED!

!testRun: #MarsRoverTest #test07_LCommandOnRoverFacingS_leavesRoverFacingE stamp: 'VP 10/24/2020 17:56:06'!
PASSED!

!testRun: #MarsRoverTest #test08_RCommandOnRoverFacingE_leavesRoverFacingS stamp: 'VP 10/24/2020 17:56:06'!
PASSED!

!testRun: #MarsRoverTest #test09_LCommandOnRoverFacingE_leavesRoverFacingN stamp: 'VP 10/24/2020 17:56:06'!
PASSED!

!testRun: #MarsRoverTest #test10_LRCommandsOnRover_leavesRoverOrientationIntact stamp: 'VP 10/24/2020 17:56:06'!
PASSED!

!testRun: #MarsRoverTest #test11_FCommandOnRoverFacingN_movesRoverNorth stamp: 'VP 10/24/2020 17:56:06'!
PASSED!

!testRun: #MarsRoverTest #test12_FCommandOnRoverFacingS_movesRoverSout stamp: 'VP 10/24/2020 17:56:06'!
PASSED!

!testRun: #MarsRoverTest #test12_FCommandOnRoverFacingW_movesRoverWest stamp: 'VP 10/24/2020 17:56:06'!
PASSED!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:56:16'!
test13_FCommandOnRoverFacingW_movesRoverWest

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: W.
	
	rover sendCommands: 'f'.
	
	self assert: rover location equals: 1@3.
	self assert: rover orientation equals: W.! !

!methodRemoval: MarsRoverTest #test12_FCommandOnRoverFacingW_movesRoverWest stamp: 'VP 10/24/2020 17:56:16'!
test12_FCommandOnRoverFacingW_movesRoverWest

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: W.
	
	rover sendCommands: 'f'.
	
	self assert: rover location equals: 1@3.
	self assert: rover orientation equals: W.!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:56:27'!
test12_FCommandOnRoverFacingW_movesRoverWest

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: W.
	
	rover sendCommands: 'f'.
	
	self assert: rover location equals: 1@3.
	self assert: rover orientation equals: W.! !

!methodRemoval: MarsRoverTest #test13_FCommandOnRoverFacingW_movesRoverWest stamp: 'VP 10/24/2020 17:56:27'!
test13_FCommandOnRoverFacingW_movesRoverWest

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: W.
	
	rover sendCommands: 'f'.
	
	self assert: rover location equals: 1@3.
	self assert: rover orientation equals: W.!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:56:30'!
test13_FCommandOnRoverFacingS_movesRoverSout

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: S.
	
	rover sendCommands: 'f'.
	
	self assert: rover location equals: 2@2.
	self assert: rover orientation equals: S.! !

!methodRemoval: MarsRoverTest #test12_FCommandOnRoverFacingS_movesRoverSout stamp: 'VP 10/24/2020 17:56:30'!
test12_FCommandOnRoverFacingS_movesRoverSout

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: S.
	
	rover sendCommands: 'f'.
	
	self assert: rover location equals: 2@2.
	self assert: rover orientation equals: S.!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:56:54'!
test14_FCommandOnRoverFacingE_movesRoverEast

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: E.
	
	rover sendCommands: 'f'.
	
	self assert: rover location equals: 3@2.
	self assert: rover orientation equals: E.! !

!testRun: #MarsRoverTest #test14_FCommandOnRoverFacingE_movesRoverEast stamp: 'VP 10/24/2020 17:56:55'!
ERROR!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:57:03' prior: 50879469!
test14_FCommandOnRoverFacingE_movesRoverEast

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: E.
	
	rover sendCommands: 'f'.
	
	self assert: rover location equals: 3@3.
	self assert: rover orientation equals: E.! !

!testRun: #MarsRoverTest #test14_FCommandOnRoverFacingE_movesRoverEast stamp: 'VP 10/24/2020 17:57:04'!
ERROR!
!E class methodsFor: 'accessing' stamp: 'VP 10/24/2020 17:57:10'!
unitarianSpherePoint
	self shouldBeImplemented.! !
!E class methodsFor: 'accessing' stamp: 'VP 10/24/2020 17:57:16' prior: 50879496!
unitarianSpherePoint

	^1@0.! !

!testRun: #MarsRoverTest #test14_FCommandOnRoverFacingE_movesRoverEast stamp: 'VP 10/24/2020 17:57:18'!
PASSED!

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 17:57:18'!
PASSED!

!testRun: #MarsRoverTest #test02_RCommandOnRoverFacingN_leavesRoverFacingE stamp: 'VP 10/24/2020 17:57:18'!
PASSED!

!testRun: #MarsRoverTest #test03_LCommandOnRoverFacingN_leavesRoverFacingW stamp: 'VP 10/24/2020 17:57:18'!
PASSED!

!testRun: #MarsRoverTest #test04_RCommandOnRoverFacingW_leavesRoverFacingN stamp: 'VP 10/24/2020 17:57:18'!
PASSED!

!testRun: #MarsRoverTest #test05_LCommandOnRoverFacingW_leavesRoverFacingS stamp: 'VP 10/24/2020 17:57:18'!
PASSED!

!testRun: #MarsRoverTest #test06_RCommandOnRoverFacingS_leavesRoverFacingW stamp: 'VP 10/24/2020 17:57:18'!
PASSED!

!testRun: #MarsRoverTest #test07_LCommandOnRoverFacingS_leavesRoverFacingE stamp: 'VP 10/24/2020 17:57:18'!
PASSED!

!testRun: #MarsRoverTest #test08_RCommandOnRoverFacingE_leavesRoverFacingS stamp: 'VP 10/24/2020 17:57:18'!
PASSED!

!testRun: #MarsRoverTest #test09_LCommandOnRoverFacingE_leavesRoverFacingN stamp: 'VP 10/24/2020 17:57:18'!
PASSED!

!testRun: #MarsRoverTest #test10_LRCommandsOnRover_leavesRoverOrientationIntact stamp: 'VP 10/24/2020 17:57:18'!
PASSED!

!testRun: #MarsRoverTest #test11_FCommandOnRoverFacingN_movesRoverNorth stamp: 'VP 10/24/2020 17:57:18'!
PASSED!

!testRun: #MarsRoverTest #test12_FCommandOnRoverFacingW_movesRoverWest stamp: 'VP 10/24/2020 17:57:18'!
PASSED!

!testRun: #MarsRoverTest #test13_FCommandOnRoverFacingS_movesRoverSout stamp: 'VP 10/24/2020 17:57:18'!
PASSED!

!testRun: #MarsRoverTest #test14_FCommandOnRoverFacingE_movesRoverEast stamp: 'VP 10/24/2020 17:57:18'!
PASSED!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:57:26'!
test13_FCommandOnRoverFacingS_movesRoverSouth

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: S.
	
	rover sendCommands: 'f'.
	
	self assert: rover location equals: 2@2.
	self assert: rover orientation equals: S.! !

!methodRemoval: MarsRoverTest #test13_FCommandOnRoverFacingS_movesRoverSout stamp: 'VP 10/24/2020 17:57:26'!
test13_FCommandOnRoverFacingS_movesRoverSout

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: S.
	
	rover sendCommands: 'f'.
	
	self assert: rover location equals: 2@2.
	self assert: rover orientation equals: S.!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:58:00'!
test15_BCommandOnRoverFacingN_movesRoverSouth

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	rover sendCommands: 'f'.
	
	self assert: rover location equals: 2@2.
	self assert: rover orientation equals: N.! !

!testRun: #MarsRoverTest #test15_BCommandOnRoverFacingN_movesRoverSouth stamp: 'VP 10/24/2020 17:58:02'!
FAILURE!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:58:17' prior: 50879578!
test15_BCommandOnRoverFacingN_movesRoverSouth

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	rover sendCommands: 'b'.
	
	self assert: rover location equals: 2@2.
	self assert: rover orientation equals: N.! !

!testRun: #MarsRoverTest #test15_BCommandOnRoverFacingN_movesRoverSouth stamp: 'VP 10/24/2020 17:58:19'!
FAILURE!
!MarsRover methodsFor: 'orientation' stamp: 'VP 10/24/2020 17:58:45' prior: 50879335!
sendCommands: aString
	aString do: [ :command |
		command = $r ifTrue: [orientation := orientation rightPoint].
		command = $l ifTrue: [orientation := orientation leftPoint].
		command = $f ifTrue: [location := location + orientation unitarianSpherePoint].
		command = $b ifTrue: [location := location - orientation unitarianSpherePoint].
	].! !

!testRun: #MarsRoverTest #test15_BCommandOnRoverFacingN_movesRoverSouth stamp: 'VP 10/24/2020 17:58:54'!
PASSED!

!testRun: #MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 17:58:54'!
PASSED!

!testRun: #MarsRoverTest #test02_RCommandOnRoverFacingN_leavesRoverFacingE stamp: 'VP 10/24/2020 17:58:54'!
PASSED!

!testRun: #MarsRoverTest #test03_LCommandOnRoverFacingN_leavesRoverFacingW stamp: 'VP 10/24/2020 17:58:54'!
PASSED!

!testRun: #MarsRoverTest #test04_RCommandOnRoverFacingW_leavesRoverFacingN stamp: 'VP 10/24/2020 17:58:54'!
PASSED!

!testRun: #MarsRoverTest #test05_LCommandOnRoverFacingW_leavesRoverFacingS stamp: 'VP 10/24/2020 17:58:54'!
PASSED!

!testRun: #MarsRoverTest #test06_RCommandOnRoverFacingS_leavesRoverFacingW stamp: 'VP 10/24/2020 17:58:54'!
PASSED!

!testRun: #MarsRoverTest #test07_LCommandOnRoverFacingS_leavesRoverFacingE stamp: 'VP 10/24/2020 17:58:54'!
PASSED!

!testRun: #MarsRoverTest #test08_RCommandOnRoverFacingE_leavesRoverFacingS stamp: 'VP 10/24/2020 17:58:54'!
PASSED!

!testRun: #MarsRoverTest #test09_LCommandOnRoverFacingE_leavesRoverFacingN stamp: 'VP 10/24/2020 17:58:54'!
PASSED!

!testRun: #MarsRoverTest #test10_LRCommandsOnRover_leavesRoverOrientationIntact stamp: 'VP 10/24/2020 17:58:54'!
PASSED!

!testRun: #MarsRoverTest #test11_FCommandOnRoverFacingN_movesRoverNorth stamp: 'VP 10/24/2020 17:58:54'!
PASSED!

!testRun: #MarsRoverTest #test12_FCommandOnRoverFacingW_movesRoverWest stamp: 'VP 10/24/2020 17:58:54'!
PASSED!

!testRun: #MarsRoverTest #test13_FCommandOnRoverFacingS_movesRoverSouth stamp: 'VP 10/24/2020 17:58:54'!
PASSED!

!testRun: #MarsRoverTest #test14_FCommandOnRoverFacingE_movesRoverEast stamp: 'VP 10/24/2020 17:58:54'!
PASSED!

!testRun: #MarsRoverTest #test15_BCommandOnRoverFacingN_movesRoverSouth stamp: 'VP 10/24/2020 17:58:54'!
PASSED!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 17:59:31'!
test15_BCommandOnRover_movesRoverOnOppositeForwardOrientation

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	rover sendCommands: 'b'.
	
	self assert: rover location equals: 2@2.
	self assert: rover orientation equals: N.! !

!methodRemoval: MarsRoverTest #test15_BCommandOnRoverFacingN_movesRoverSouth stamp: 'VP 10/24/2020 17:59:31'!
test15_BCommandOnRoverFacingN_movesRoverSouth

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	rover sendCommands: 'b'.
	
	self assert: rover location equals: 2@2.
	self assert: rover orientation equals: N.!

!classDefinition: #CardinalPoint category: 'MarsRover' stamp: 'VP 10/24/2020 18:00:55'!
Object subclass: #CardinalPoint
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #N category: 'MarsRover' stamp: 'VP 10/24/2020 18:00:55'!
CardinalPoint subclass: #N
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

CardinalPoint subclass: #E
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #E category: 'MarsRover' stamp: 'VP 10/24/2020 18:01:24'!
CardinalPoint subclass: #E
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

CardinalPoint subclass: #S
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #S category: 'MarsRover' stamp: 'VP 10/24/2020 18:01:27'!
CardinalPoint subclass: #S
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

CardinalPoint subclass: #W
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #W category: 'MarsRover' stamp: 'VP 10/24/2020 18:01:29'!
CardinalPoint subclass: #W
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!CardinalPoint class methodsFor: 'no messages' stamp: 'VP 10/24/2020 18:01:51'!
leftPoint
	^self subclassResponsibility.! !
!CardinalPoint class methodsFor: 'as yet unclassified' stamp: 'VP 10/24/2020 18:01:56'!
rightPoint
	^self subclassResponsibility.! !
!CardinalPoint class methodsFor: 'as yet unclassified' stamp: 'VP 10/24/2020 18:02:03'!
unitarianSpherePoint
	^self subclassResponsibility.! !
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 18:03:40'!
test01_deployRover_respectsDeployLocationAndOrientation

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	self assert: rover location equals: 2@3.
	self assert: rover orientation equals: N.! !

!methodRemoval: MarsRoverTest #test01_xxxx stamp: 'VP 10/24/2020 18:03:40'!
test01_xxxx

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	self assert: rover location equals: 2@3.
	self assert: rover orientation equals: N.!

----SNAPSHOT----(24 October 2020 18:05:15) CuisUniversity-4384.image priorSource: 17432618!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 18:13:09'!
test16_CommandStripWithUnknownCommandOnRover_leavesRoverInStateWhenUnknownCommandWasFound

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	self should: [rover sendCommands: 'rrfflfflblwbbbbbbb']
	raise: Error
	withExceptionDo: [
		self assert: rover location equals: 4@-1.
		self assert: rover orientation equals: W.
	] description: (MarsRover notUnderstoodTextForCommand: 'w').
	
	! !

!testRun: #MarsRoverTest #test16_CommandStripWithUnknownCommandOnRover_leavesRoverInStateWhenUnknownCommandWasFound stamp: 'VP 10/24/2020 18:13:11'!
ERROR!
!MarsRover class methodsFor: 'error handling' stamp: 'VP 10/24/2020 18:13:33'!
notUnderstoodTextForCommand: aString 
	self shouldBeImplemented.! !
!MarsRover class methodsFor: 'error handling' stamp: 'VP 10/24/2020 18:14:15' prior: 50879794!
notUnderstoodTextForCommand: anUnknownCommand 
	
	^'Received unknown command: ', anUnknownCommand.! !

!testRun: #MarsRoverTest #test16_CommandStripWithUnknownCommandOnRover_leavesRoverInStateWhenUnknownCommandWasFound stamp: 'VP 10/24/2020 18:14:16'!
FAILURE!
!MarsRover methodsFor: 'orientation' stamp: 'VP 10/24/2020 18:17:45' prior: 50879606!
sendCommands: aString
	aString do: [ :command |
		(command ~= $r and: [command ~= $l] and: [command ~= $f] and: [command ~= $b]) ifTrue: [self raiseUnknownCommandErrorFor: command].
		
		command = $r ifTrue: [orientation := orientation rightPoint].
		command = $l ifTrue: [orientation := orientation leftPoint].
		command = $f ifTrue: [location := location + orientation unitarianSpherePoint].
		command = $b ifTrue: [location := location - orientation unitarianSpherePoint].
	].! !

!testRun: #MarsRoverTest #test16_CommandStripWithUnknownCommandOnRover_leavesRoverInStateWhenUnknownCommandWasFound stamp: 'VP 10/24/2020 18:17:52'!
ERROR!
!MarsRover methodsFor: 'orientation' stamp: 'VP 10/24/2020 18:19:30'!
raiseUnknownCommandErrorFor: aCommand

	^self signalErrorWith: (self class notUnderstoodTextForCommand: aCommand).! !

!testRun: #MarsRoverTest #test01_deployRover_respectsDeployLocationAndOrientation stamp: 'VP 10/24/2020 18:19:34'!
PASSED!

!testRun: #MarsRoverTest #test02_RCommandOnRoverFacingN_leavesRoverFacingE stamp: 'VP 10/24/2020 18:19:34'!
PASSED!

!testRun: #MarsRoverTest #test03_LCommandOnRoverFacingN_leavesRoverFacingW stamp: 'VP 10/24/2020 18:19:34'!
PASSED!

!testRun: #MarsRoverTest #test04_RCommandOnRoverFacingW_leavesRoverFacingN stamp: 'VP 10/24/2020 18:19:34'!
PASSED!

!testRun: #MarsRoverTest #test05_LCommandOnRoverFacingW_leavesRoverFacingS stamp: 'VP 10/24/2020 18:19:34'!
PASSED!

!testRun: #MarsRoverTest #test06_RCommandOnRoverFacingS_leavesRoverFacingW stamp: 'VP 10/24/2020 18:19:34'!
PASSED!

!testRun: #MarsRoverTest #test07_LCommandOnRoverFacingS_leavesRoverFacingE stamp: 'VP 10/24/2020 18:19:34'!
PASSED!

!testRun: #MarsRoverTest #test08_RCommandOnRoverFacingE_leavesRoverFacingS stamp: 'VP 10/24/2020 18:19:34'!
PASSED!

!testRun: #MarsRoverTest #test09_LCommandOnRoverFacingE_leavesRoverFacingN stamp: 'VP 10/24/2020 18:19:34'!
PASSED!

!testRun: #MarsRoverTest #test10_LRCommandsOnRover_leavesRoverOrientationIntact stamp: 'VP 10/24/2020 18:19:34'!
PASSED!

!testRun: #MarsRoverTest #test11_FCommandOnRoverFacingN_movesRoverNorth stamp: 'VP 10/24/2020 18:19:34'!
PASSED!

!testRun: #MarsRoverTest #test12_FCommandOnRoverFacingW_movesRoverWest stamp: 'VP 10/24/2020 18:19:34'!
PASSED!

!testRun: #MarsRoverTest #test13_FCommandOnRoverFacingS_movesRoverSouth stamp: 'VP 10/24/2020 18:19:34'!
PASSED!

!testRun: #MarsRoverTest #test14_FCommandOnRoverFacingE_movesRoverEast stamp: 'VP 10/24/2020 18:19:34'!
PASSED!

!testRun: #MarsRoverTest #test15_BCommandOnRover_movesRoverOnOppositeForwardOrientation stamp: 'VP 10/24/2020 18:19:34'!
PASSED!

!testRun: #MarsRoverTest #test16_CommandStripWithUnknownCommandOnRover_leavesRoverInStateWhenUnknownCommandWasFound stamp: 'VP 10/24/2020 18:19:34'!
ERROR!

!testRun: #MarsRoverTest #test16_CommandStripWithUnknownCommandOnRover_leavesRoverInStateWhenUnknownCommandWasFound stamp: 'VP 10/24/2020 18:19:34'!
ERROR!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 18:20:04' prior: 50879774!
test16_CommandStripWithUnknownCommandOnRover_leavesRoverInStateWhenUnknownCommandWasFound

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	self should: [rover sendCommands: 'rrfflfflblwbbbbbbb']
	raise: Error
	withExceptionDo: [ :anError |
		self assert: rover location equals: 4@-1.
		self assert: rover orientation equals: W.
	] description: (MarsRover notUnderstoodTextForCommand: 'w').
	
	! !

!testRun: #MarsRoverTest #test16_CommandStripWithUnknownCommandOnRover_leavesRoverInStateWhenUnknownCommandWasFound stamp: 'VP 10/24/2020 18:20:05'!
FAILURE!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 18:20:50' prior: 50879906!
test16_CommandStripWithUnknownCommandOnRover_leavesRoverInStateWhenUnknownCommandWasFound

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	self should: [rover sendCommands: 'rrfflfflblwbbbbbbb']
	raise: Error
	withExceptionDo: [ :anError |
		self assert: 4@-1 equals: rover location.
		self assert: W equals: rover orientation.
	] description: (MarsRover notUnderstoodTextForCommand: 'w').
	
	! !
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 18:21:41' prior: 50879927!
test16_CommandStripWithUnknownCommandOnRover_leavesRoverInStateWhenUnknownCommandWasFound

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	self should: [rover sendCommands: 'rrfflfflblwbbbbbbb']
	raise: Error
	withExceptionDo: [ :anError |
		self assert: 4@0 equals: rover location.
		self assert: W equals: rover orientation.
	] description: (MarsRover notUnderstoodTextForCommand: 'w').
	
	! !

!testRun: #MarsRoverTest #test16_CommandStripWithUnknownCommandOnRover_leavesRoverInStateWhenUnknownCommandWasFound stamp: 'VP 10/24/2020 18:21:42'!
PASSED!

!testRun: #MarsRoverTest #test01_deployRover_respectsDeployLocationAndOrientation stamp: 'VP 10/24/2020 18:21:42'!
PASSED!

!testRun: #MarsRoverTest #test02_RCommandOnRoverFacingN_leavesRoverFacingE stamp: 'VP 10/24/2020 18:21:42'!
PASSED!

!testRun: #MarsRoverTest #test03_LCommandOnRoverFacingN_leavesRoverFacingW stamp: 'VP 10/24/2020 18:21:42'!
PASSED!

!testRun: #MarsRoverTest #test04_RCommandOnRoverFacingW_leavesRoverFacingN stamp: 'VP 10/24/2020 18:21:42'!
PASSED!

!testRun: #MarsRoverTest #test05_LCommandOnRoverFacingW_leavesRoverFacingS stamp: 'VP 10/24/2020 18:21:42'!
PASSED!

!testRun: #MarsRoverTest #test06_RCommandOnRoverFacingS_leavesRoverFacingW stamp: 'VP 10/24/2020 18:21:42'!
PASSED!

!testRun: #MarsRoverTest #test07_LCommandOnRoverFacingS_leavesRoverFacingE stamp: 'VP 10/24/2020 18:21:42'!
PASSED!

!testRun: #MarsRoverTest #test08_RCommandOnRoverFacingE_leavesRoverFacingS stamp: 'VP 10/24/2020 18:21:42'!
PASSED!

!testRun: #MarsRoverTest #test09_LCommandOnRoverFacingE_leavesRoverFacingN stamp: 'VP 10/24/2020 18:21:42'!
PASSED!

!testRun: #MarsRoverTest #test10_LRCommandsOnRover_leavesRoverOrientationIntact stamp: 'VP 10/24/2020 18:21:42'!
PASSED!

!testRun: #MarsRoverTest #test11_FCommandOnRoverFacingN_movesRoverNorth stamp: 'VP 10/24/2020 18:21:42'!
PASSED!

!testRun: #MarsRoverTest #test12_FCommandOnRoverFacingW_movesRoverWest stamp: 'VP 10/24/2020 18:21:42'!
PASSED!

!testRun: #MarsRoverTest #test13_FCommandOnRoverFacingS_movesRoverSouth stamp: 'VP 10/24/2020 18:21:42'!
PASSED!

!testRun: #MarsRoverTest #test14_FCommandOnRoverFacingE_movesRoverEast stamp: 'VP 10/24/2020 18:21:42'!
PASSED!

!testRun: #MarsRoverTest #test15_BCommandOnRover_movesRoverOnOppositeForwardOrientation stamp: 'VP 10/24/2020 18:21:42'!
PASSED!

!testRun: #MarsRoverTest #test16_CommandStripWithUnknownCommandOnRover_leavesRoverInStateWhenUnknownCommandWasFound stamp: 'VP 10/24/2020 18:21:42'!
PASSED!
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 18:22:01' prior: 50879676!
test15_BCommandOnRover_movesRoverOnOppositeForwardOrientation

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	rover sendCommands: 'b'.
	
	self assert: 2@2 equals: rover location.
	self assert: N equals: rover orientation.! !
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 18:22:27' prior: 50879483!
test14_FCommandOnRoverFacingE_movesRoverEast

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: E.
	
	rover sendCommands: 'f'.
	
	self assert: 3@3 equals: rover location.
	self assert: E equals: rover orientation.! !
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 18:22:39' prior: 50879558!
test13_FCommandOnRoverFacingS_movesRoverSouth

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: S.
	
	rover sendCommands: 'f'.
	
	self assert: 2@2 equals: rover location.
	self assert: S equals: rover orientation.! !
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 18:22:51' prior: 50879429!
test12_FCommandOnRoverFacingW_movesRoverWest

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: W.
	
	rover sendCommands: 'f'.
	
	self assert: 1@3 equals: rover location.
	self assert: W equals: rover orientation.! !
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 18:23:03' prior: 50879110!
test11_FCommandOnRoverFacingN_movesRoverNorth

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	rover sendCommands: 'f'.
	
	self assert: 2@4 equals: rover location.
	self assert: N equals: rover orientation.! !
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 18:23:14' prior: 50879049!
test10_LRCommandsOnRover_leavesRoverOrientationIntact

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	rover sendCommands: 'lr'.
	
	self assert: 2@3 equals: rover location.
	self assert: N equals: rover orientation.! !
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 18:23:24' prior: 50879004!
test09_LCommandOnRoverFacingE_leavesRoverFacingN

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: E.
	
	rover sendCommands: 'l'.
	
	self assert: 2@3 equals: rover location.
	self assert: N equals: rover orientation.! !
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 18:23:36' prior: 50878994!
test08_RCommandOnRoverFacingE_leavesRoverFacingS

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: E.
	
	rover sendCommands: 'r'.
	
	self assert: 2@3 equals: rover location.
	self assert: S equals: rover orientation.! !
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 18:23:48' prior: 50878984!
test07_LCommandOnRoverFacingS_leavesRoverFacingE

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: S.
	
	rover sendCommands: 'l'.
	
	self assert: 2@3 equals: rover location.
	self assert: E equals: rover orientation.! !
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 18:23:59' prior: 50878944!
test06_RCommandOnRoverFacingS_leavesRoverFacingW

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: S.
	
	rover sendCommands: 'r'.
	
	self assert: 2@3 equals: rover location.
	self assert: W equals: rover orientation.! !
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 18:24:09' prior: 50878879!
test05_LCommandOnRoverFacingW_leavesRoverFacingS

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: W.
	
	rover sendCommands: 'l'.
	
	self assert: 2@3 equals: rover location.
	self assert: S equals: rover orientation.! !
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 18:24:22' prior: 50878899!
test04_RCommandOnRoverFacingW_leavesRoverFacingN

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: W.
	
	rover sendCommands: 'r'.
	
	self assert: 2@3 equals: rover location.
	self assert: N equals: rover orientation.! !
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 18:24:33' prior: 50878767!
test03_LCommandOnRoverFacingN_leavesRoverFacingW

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	rover sendCommands: 'l'.
	
	self assert: 2@3 equals: rover location.
	self assert: W equals: rover orientation.! !
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 18:24:45' prior: 50878685!
test02_RCommandOnRoverFacingN_leavesRoverFacingE

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	rover sendCommands: 'r'.
	
	self assert: 2@3 equals: rover location.
	self assert: E equals: rover orientation.! !
!MarsRoverTest methodsFor: 'tests rover' stamp: 'VP 10/24/2020 18:24:56' prior: 50879755!
test01_deployRover_respectsDeployLocationAndOrientation

	| rover |
	
	rover := MarsRover deployAt: 2@3 facing: N.
	
	self assert: 2@3 equals: rover location.
	self assert: N equals: rover orientation.! !

!testRun: #MarsRoverTest #test01_deployRover_respectsDeployLocationAndOrientation stamp: 'VP 10/24/2020 18:24:57'!
PASSED!

!testRun: #MarsRoverTest #test01_deployRover_respectsDeployLocationAndOrientation stamp: 'VP 10/24/2020 18:24:57'!
PASSED!

!testRun: #MarsRoverTest #test02_RCommandOnRoverFacingN_leavesRoverFacingE stamp: 'VP 10/24/2020 18:24:57'!
PASSED!

!testRun: #MarsRoverTest #test03_LCommandOnRoverFacingN_leavesRoverFacingW stamp: 'VP 10/24/2020 18:24:57'!
PASSED!

!testRun: #MarsRoverTest #test04_RCommandOnRoverFacingW_leavesRoverFacingN stamp: 'VP 10/24/2020 18:24:57'!
PASSED!

!testRun: #MarsRoverTest #test05_LCommandOnRoverFacingW_leavesRoverFacingS stamp: 'VP 10/24/2020 18:24:57'!
PASSED!

!testRun: #MarsRoverTest #test06_RCommandOnRoverFacingS_leavesRoverFacingW stamp: 'VP 10/24/2020 18:24:57'!
PASSED!

!testRun: #MarsRoverTest #test07_LCommandOnRoverFacingS_leavesRoverFacingE stamp: 'VP 10/24/2020 18:24:57'!
PASSED!

!testRun: #MarsRoverTest #test08_RCommandOnRoverFacingE_leavesRoverFacingS stamp: 'VP 10/24/2020 18:24:57'!
PASSED!

!testRun: #MarsRoverTest #test09_LCommandOnRoverFacingE_leavesRoverFacingN stamp: 'VP 10/24/2020 18:24:57'!
PASSED!

!testRun: #MarsRoverTest #test10_LRCommandsOnRover_leavesRoverOrientationIntact stamp: 'VP 10/24/2020 18:24:57'!
PASSED!

!testRun: #MarsRoverTest #test11_FCommandOnRoverFacingN_movesRoverNorth stamp: 'VP 10/24/2020 18:24:57'!
PASSED!

!testRun: #MarsRoverTest #test12_FCommandOnRoverFacingW_movesRoverWest stamp: 'VP 10/24/2020 18:24:57'!
PASSED!

!testRun: #MarsRoverTest #test13_FCommandOnRoverFacingS_movesRoverSouth stamp: 'VP 10/24/2020 18:24:57'!
PASSED!

!testRun: #MarsRoverTest #test14_FCommandOnRoverFacingE_movesRoverEast stamp: 'VP 10/24/2020 18:24:57'!
PASSED!

!testRun: #MarsRoverTest #test15_BCommandOnRover_movesRoverOnOppositeForwardOrientation stamp: 'VP 10/24/2020 18:24:57'!
PASSED!

!testRun: #MarsRoverTest #test16_CommandStripWithUnknownCommandOnRover_leavesRoverInStateWhenUnknownCommandWasFound stamp: 'VP 10/24/2020 18:24:57'!
PASSED!
!MarsRover methodsFor: 'orientation' stamp: 'VP 10/24/2020 18:25:17' prior: 50879811!
sendCommands: aCommandStream
	aCommandStream do: [ :command |
		(command ~= $r and: [command ~= $l] and: [command ~= $f] and: [command ~= $b]) ifTrue: [self raiseUnknownCommandErrorFor: command].
		
		command = $r ifTrue: [orientation := orientation rightPoint].
		command = $l ifTrue: [orientation := orientation leftPoint].
		command = $f ifTrue: [location := location + orientation unitarianSpherePoint].
		command = $b ifTrue: [location := location - orientation unitarianSpherePoint].
	].! !
!MarsRover methodsFor: 'orientation' stamp: 'VP 10/24/2020 18:25:50'!
isUnknownCommand: command

	^ command ~= $r and: [command ~= $l] and: [command ~= $f] and: [command ~= $b]! !
!MarsRover methodsFor: 'orientation' stamp: 'VP 10/24/2020 18:25:50' prior: 50880240!
sendCommands: aCommandStream
	aCommandStream do: [ :command |
		(self isUnknownCommand: command) ifTrue: [self raiseUnknownCommandErrorFor: command].
		
		command = $r ifTrue: [orientation := orientation rightPoint].
		command = $l ifTrue: [orientation := orientation leftPoint].
		command = $f ifTrue: [location := location + orientation unitarianSpherePoint].
		command = $b ifTrue: [location := location - orientation unitarianSpherePoint].
	].! !

----SNAPSHOT----(24 October 2020 18:27:30) CuisUniversity-4384.image priorSource: 17539864!