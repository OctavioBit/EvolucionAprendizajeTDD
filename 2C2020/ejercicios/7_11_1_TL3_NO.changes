----STARTUP---- (26 November 2020 15:47:52) as C:\Program Files\CuisUniversity\CuisUniversity-4365.image!


!classRemoval: #TusLibrosAPI stamp: 'eb 11/26/2020 15:49:42'!
Object subclass: #TusLibrosAPI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Catalogue stamp: 'eb 11/26/2020 15:49:42'!
Object subclass: #Catalogue
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'eb 11/26/2020 15:49:42'!
Object subclass: #Cart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #TusLibrosAPITest stamp: 'eb 11/26/2020 15:49:43'!
TestCase subclass: #TusLibrosAPITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'eb 11/26/2020 15:49:43'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\ebonansea\Documents\Personal\Facultad\Ingenieria de software 1\Ejercicios propios\20-TusLibros\it-2\TusLibros.st----!

!classRemoval: #Trailer stamp: 'eb 11/26/2020 15:51:50'!
Object subclass: #Trailer
	instanceVariableNames: 'weightCapacity heightCapacity container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #WorkingNormal stamp: 'eb 11/26/2020 15:51:50'!
RobotState subclass: #WorkingNormal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #SensorsFailure stamp: 'eb 11/26/2020 15:51:51'!
RobotState subclass: #SensorsFailure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #OutOfOrder stamp: 'eb 11/26/2020 15:51:51'!
RobotState subclass: #OutOfOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #MechanicalFailure stamp: 'eb 11/26/2020 15:51:51'!
RobotState subclass: #MechanicalFailure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #RobotState stamp: 'eb 11/26/2020 15:51:52'!
Object subclass: #RobotState
	instanceVariableNames: 'robot'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #Robot stamp: 'eb 11/26/2020 15:51:52'!
Object subclass: #Robot
	instanceVariableNames: 'status trailer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #ProductB stamp: 'eb 11/26/2020 15:51:52'!
Product subclass: #ProductB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #ProductA stamp: 'eb 11/26/2020 15:51:53'!
Product subclass: #ProductA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #Product stamp: 'eb 11/26/2020 15:51:53'!
Object subclass: #Product
	instanceVariableNames: 'weight height'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #TrailerTest stamp: 'eb 11/26/2020 15:51:54'!
TestCase subclass: #TrailerTest
	instanceVariableNames: 'trailer weightCapacity halfExceededHeightCapacity'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #RobotTest stamp: 'eb 11/26/2020 15:51:54'!
TestCase subclass: #RobotTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #ProductTest stamp: 'eb 11/26/2020 15:51:54'!
TestCase subclass: #ProductTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2020-1C-Parcial-Enunciado'!

!classRemoval: #MerchantProcessorSimulator stamp: 'eb 11/26/2020 15:52:07'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'lastTransactionId valid'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'eb 11/26/2020 15:52:07'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expiration owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'eb 11/26/2020 15:52:08'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'eb 11/26/2020 15:52:08'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'eb 11/26/2020 15:52:09'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'eb 11/26/2020 15:52:09'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'eb 11/26/2020 15:52:09'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\ebonansea\Documents\Personal\Facultad\Ingenieria de software 1\Ejercicios propios\20-TusLibros\it-2\TusLibros.st----!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 15:53:16'!
test03CreditCardExpirationDateCanNotLessThanToday

	self should:[ CreditCard of: 'Alan Key' withNumber: 1234567891011121 andExpiration: FixedGregorianDate yesterday. self fail]
		raise: Error
		withMessageText: CreditCard dateCanNotLessThanTodayErrorDescription.! !

!methodRemoval: CreditCardTest #test03CreditCardDateCanNotLessThanToday stamp: 'eb 11/26/2020 15:53:16'!
test03CreditCardDateCanNotLessThanToday

	self should:[ CreditCard of: 'Alan Key' withNumber: 1234567891011121 andExpiration: FixedGregorianDate yesterday. self fail]
		raise: Error
		withMessageText: CreditCard dateCanNotLessThanTodayErrorDescription.!
!CreditCardTest methodsFor: 'test' stamp: 'eb 11/26/2020 16:15:52'!
test03CreditCardExpirationDateCanNotBeLessThanToday

	self should:[ CreditCard of: 'Alan Key' withNumber: 1234567891011121 andExpiration: FixedGregorianDate yesterday. self fail]
		raise: Error
		withMessageText: CreditCard dateCanNotLessThanTodayErrorDescription.! !

!methodRemoval: CreditCardTest #test03CreditCardExpirationDateCanNotLessThanToday stamp: 'eb 11/26/2020 16:15:52'!
test03CreditCardExpirationDateCanNotLessThanToday

	self should:[ CreditCard of: 'Alan Key' withNumber: 1234567891011121 andExpiration: FixedGregorianDate yesterday. self fail]
		raise: Error
		withMessageText: CreditCard dateCanNotLessThanTodayErrorDescription.!
!CreditCardTest methodsFor: 'test' stamp: 'eb 11/26/2020 16:16:12' prior: 50997072!
test03CreditCardExpirationDateCanNotBeLessThanToday

	self should:[ CreditCard of: 'Alan Key' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear yesterday. self fail]
		raise: Error
		withMessageText: CreditCard dateCanNotLessThanTodayErrorDescription.! !

!testRun: #CreditCardTest #test03CreditCardExpirationDateCanNotBeLessThanToday stamp: 'eb 11/26/2020 16:16:22'!
FAILURE!

!testRun: #CreditCardTest #test03CreditCardExpirationDateCanNotBeLessThanToday stamp: 'eb 11/26/2020 16:16:22'!
FAILURE!
!CreditCardTest methodsFor: 'test' stamp: 'eb 11/26/2020 16:17:38' prior: 50996780!
test02CreditCardNumberMustHaveSixteenDigits

	self should:[ CreditCard of: 'Alan Kay' withNumber: 0 andExpiration: FixedGregorianDate today. self fail]
		raise: Error
		withMessageText: CreditCard numberMustHaveSixteenDigitsErrorDescription.! !
!CreditCardTest methodsFor: 'test' stamp: 'eb 11/26/2020 16:17:47' prior: 50997096!
test03CreditCardExpirationDateCanNotBeLessThanToday

	self should:[ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear yesterday. self fail]
		raise: Error
		withMessageText: CreditCard dateCanNotLessThanTodayErrorDescription.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 16:18:01' prior: 50996958!
dateCanNotLessThanTodayErrorDescription
	
	^ 'Date can not be less than today'! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 16:18:16'!
dateCanNotBeLessThanTodayErrorDescription
	
	^ 'Date can not be less than today'! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 16:18:16' prior: 50996970!
of: anOwner withNumber: aNumber andExpiration: anExpiration

	( anOwner isEmpty ) ifTrue: [ self error: self ownerNameCanNotEmptyErrorDescription ].
	(aNumber asString size ~= 16) ifTrue: [ self error: self numberMustHaveSixteenDigitsErrorDescription ].
	(anExpiration < FixedGregorianDate today) ifTrue: [ self error: self dateCanNotBeLessThanTodayErrorDescription ].

	^ self new of: anOwner withNumber: aNumber andExpiration: anExpiration .! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 16:18:16' prior: 50997126!
test03CreditCardExpirationDateCanNotBeLessThanToday

	self should:[ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear yesterday. self fail]
		raise: Error
		withMessageText: CreditCard dateCanNotBeLessThanTodayErrorDescription.! !

!methodRemoval: CreditCard class #dateCanNotLessThanTodayErrorDescription stamp: 'eb 11/26/2020 16:18:16'!
dateCanNotLessThanTodayErrorDescription
	
	^ 'Date can not be less than today'!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 16:18:26' prior: 50996987!
ownerNameCanNotEmptyErrorDescription
	
	^ 'Owner name can not be empty'! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 16:18:37'!
ownerNameCanNotBeEmptyErrorDescription
	
	^ 'Owner name can not be empty'! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 16:18:37' prior: 50997150!
of: anOwner withNumber: aNumber andExpiration: anExpiration

	( anOwner isEmpty ) ifTrue: [ self error: self ownerNameCanNotBeEmptyErrorDescription ].
	(aNumber asString size ~= 16) ifTrue: [ self error: self numberMustHaveSixteenDigitsErrorDescription ].
	(anExpiration < FixedGregorianDate today) ifTrue: [ self error: self dateCanNotBeLessThanTodayErrorDescription ].

	^ self new of: anOwner withNumber: aNumber andExpiration: anExpiration .! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 16:18:37' prior: 50996769!
test01CreditCardOwnerNameCanNotEmpty

	self should:[ CreditCard of: '' withNumber: 1234567891011121 andExpiration: FixedGregorianDate today. self fail]
		raise: Error
		withMessageText: CreditCard ownerNameCanNotBeEmptyErrorDescription.! !

!methodRemoval: CreditCard class #ownerNameCanNotEmptyErrorDescription stamp: 'eb 11/26/2020 16:18:37'!
ownerNameCanNotEmptyErrorDescription
	
	^ 'Owner name can not be empty'!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 16:18:43'!
ownerNameCanNotEmBeptyErrorDescription
	
	^ 'Owner name can not be empty'! !

!methodRemoval: CreditCard class #ownerNameCanNotBeEmptyErrorDescription stamp: 'eb 11/26/2020 16:18:48'!
ownerNameCanNotBeEmptyErrorDescription
	
	^ 'Owner name can not be empty'!
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 16:19:01'!
ownerNameCanNotBeEmptyErrorDescription
	
	^ 'Owner name can not be empty'! !

!methodRemoval: CreditCard class #ownerNameCanNotEmBeptyErrorDescription stamp: 'eb 11/26/2020 16:19:01'!
ownerNameCanNotEmBeptyErrorDescription
	
	^ 'Owner name can not be empty'!
!CreditCard class methodsFor: 'instance creation' stamp: 'eb 11/26/2020 16:19:44' prior: 50997198!
of: anOwner withNumber: aNumber andExpiration: anExpiration

	(anOwner isEmpty) ifTrue: [ self error: self ownerNameCanNotBeEmptyErrorDescription ].
	(aNumber asString size ~= 16) ifTrue: [ self error: self numberMustHaveSixteenDigitsErrorDescription ].
	(anExpiration < FixedGregorianDate today) ifTrue: [ self error: self dateCanNotBeLessThanTodayErrorDescription ].

	^ self new of: anOwner withNumber: aNumber andExpiration: anExpiration .! !
!CreditCard class methodsFor: 'instance creation' stamp: 'eb 11/26/2020 16:20:49' prior: 50997255!
of: anOwner withNumber: aNumber andExpiration: anExpiration

	(anOwner isEmpty) ifTrue: [ self error: self ownerNameCanNotBeEmptyErrorDescription ].
	(aNumber asString size ~= 16) ifTrue: [ self error: self numberMustHaveSixteenDigitsErrorDescription ].
	(anExpiration < GregorianMonthOfYear today) ifTrue: [ self error: self dateCanNotBeLessThanTodayErrorDescription ].

	^ self new of: anOwner withNumber: aNumber andExpiration: anExpiration .! !
!CreditCard class methodsFor: 'instance creation' stamp: 'eb 11/26/2020 16:21:30' prior: 50997273!
of: anOwner withNumber: aNumber andExpiration: anExpiration

	(anOwner isEmpty) ifTrue: [ self error: self ownerNameCanNotBeEmptyErrorDescription ].
	(aNumber asString size ~= 16) ifTrue: [ self error: self numberMustHaveSixteenDigitsErrorDescription ].
	(anExpiration < GregorianMonthOfYear current) ifTrue: [ self error: self dateCanNotBeLessThanTodayErrorDescription ].

	^ self new of: anOwner withNumber: aNumber andExpiration: anExpiration .! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'eb 11/26/2020 16:21:51'!
monthCanNotBeLessThanCurrentErrorDescription
	
	^ 'Date can not be less than today'! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 16:21:51' prior: 50997168!
test03CreditCardExpirationDateCanNotBeLessThanToday

	self should:[ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear yesterday. self fail]
		raise: Error
		withMessageText: CreditCard monthCanNotBeLessThanCurrentErrorDescription.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 16:21:51' prior: 50997291!
of: anOwner withNumber: aNumber andExpiration: anExpiration

	(anOwner isEmpty) ifTrue: [ self error: self ownerNameCanNotBeEmptyErrorDescription ].
	(aNumber asString size ~= 16) ifTrue: [ self error: self numberMustHaveSixteenDigitsErrorDescription ].
	(anExpiration < GregorianMonthOfYear current) ifTrue: [ self error: self monthCanNotBeLessThanCurrentErrorDescription ].

	^ self new of: anOwner withNumber: aNumber andExpiration: anExpiration .! !

!methodRemoval: CreditCard class #dateCanNotBeLessThanTodayErrorDescription stamp: 'eb 11/26/2020 16:21:51'!
dateCanNotBeLessThanTodayErrorDescription
	
	^ 'Date can not be less than today'!
!CreditCardTest methodsFor: 'test' stamp: 'eb 11/26/2020 16:22:16'!
test01CreditCardOwnerNameCanNotBeEmpty

	self should:[ CreditCard of: '' withNumber: 1234567891011121 andExpiration: FixedGregorianDate today. self fail]
		raise: Error
		withMessageText: CreditCard ownerNameCanNotBeEmptyErrorDescription.! !

!methodRemoval: CreditCardTest #test01CreditCardOwnerNameCanNotEmpty stamp: 'eb 11/26/2020 16:22:16'!
test01CreditCardOwnerNameCanNotEmpty

	self should:[ CreditCard of: '' withNumber: 1234567891011121 andExpiration: FixedGregorianDate today. self fail]
		raise: Error
		withMessageText: CreditCard ownerNameCanNotBeEmptyErrorDescription.!
!CreditCardTest methodsFor: 'test' stamp: 'eb 11/26/2020 16:22:40'!
test03CreditCardExpirationMonthCanNotBeLessThanCurrent

	self should:[ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear yesterday. self fail]
		raise: Error
		withMessageText: CreditCard monthCanNotBeLessThanCurrentErrorDescription.! !

!methodRemoval: CreditCardTest #test03CreditCardExpirationDateCanNotBeLessThanToday stamp: 'eb 11/26/2020 16:22:40'!
test03CreditCardExpirationDateCanNotBeLessThanToday

	self should:[ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear yesterday. self fail]
		raise: Error
		withMessageText: CreditCard monthCanNotBeLessThanCurrentErrorDescription.!

!testRun: #CreditCardTest #test01CreditCardOwnerNameCanNotBeEmpty stamp: 'eb 11/26/2020 16:23:22'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberMustHaveSixteenDigits stamp: 'eb 11/26/2020 16:23:22'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardExpirationMonthCanNotBeLessThanCurrent stamp: 'eb 11/26/2020 16:23:22'!
FAILURE!

!testRun: #CreditCardTest #test03CreditCardExpirationMonthCanNotBeLessThanCurrent stamp: 'eb 11/26/2020 16:23:22'!
FAILURE!

!testRun: #CreditCardTest #test01CreditCardOwnerNameCanNotBeEmpty stamp: 'eb 11/26/2020 16:23:36'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberMustHaveSixteenDigits stamp: 'eb 11/26/2020 16:23:39'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'eb 11/26/2020 16:23:53' prior: 50997349!
test01CreditCardOwnerNameCanNotBeEmpty

	self should:[ CreditCard of: '' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current. self fail]
		raise: Error
		withMessageText: CreditCard ownerNameCanNotBeEmptyErrorDescription.! !
!CreditCardTest methodsFor: 'test' stamp: 'eb 11/26/2020 16:24:02' prior: 50997115!
test02CreditCardNumberMustHaveSixteenDigits

	self should:[ CreditCard of: 'Alan Kay' withNumber: 0 andExpiration: GregorianMonthOfYear current. self fail]
		raise: Error
		withMessageText: CreditCard numberMustHaveSixteenDigitsErrorDescription.! !
!CreditCardTest methodsFor: 'test' stamp: 'eb 11/26/2020 16:24:44' prior: 50997370!
test03CreditCardExpirationMonthCanNotBeLessThanCurrent

	self should:[ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: (GregorianMonthOfYear year: 2020 month: April). self fail]
		raise: Error
		withMessageText: CreditCard monthCanNotBeLessThanCurrentErrorDescription.! !

!testRun: #CreditCardTest #test03CreditCardExpirationMonthCanNotBeLessThanCurrent stamp: 'eb 11/26/2020 16:24:49'!
FAILURE!

!testRun: #CreditCardTest #test03CreditCardExpirationMonthCanNotBeLessThanCurrent stamp: 'eb 11/26/2020 16:24:49'!
FAILURE!
!CreditCardTest methodsFor: 'test' stamp: 'eb 11/26/2020 16:26:10' prior: 50997438!
test03CreditCardExpirationMonthCanNotBeLessThanCurrent

	self should:[ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: (GregorianMonthOfYear yearNumber: 2020 monthNumber: April). self fail]
		raise: Error
		withMessageText: CreditCard monthCanNotBeLessThanCurrentErrorDescription.! !

!testRun: #CreditCardTest #test03CreditCardExpirationMonthCanNotBeLessThanCurrent stamp: 'eb 11/26/2020 16:26:12'!
FAILURE!

!testRun: #CreditCardTest #test03CreditCardExpirationMonthCanNotBeLessThanCurrent stamp: 'eb 11/26/2020 16:26:12'!
FAILURE!
!CreditCardTest methodsFor: 'test' stamp: 'eb 11/26/2020 16:26:19' prior: 50997458!
test03CreditCardExpirationMonthCanNotBeLessThanCurrent

	self should:[ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: (GregorianMonthOfYear yearNumber: 2020 monthNumber: 1). self fail]
		raise: Error
		withMessageText: CreditCard monthCanNotBeLessThanCurrentErrorDescription.! !

!testRun: #CreditCardTest #test03CreditCardExpirationMonthCanNotBeLessThanCurrent stamp: 'eb 11/26/2020 16:26:20'!
PASSED!
!CashierTest methodsFor: 'empty cashier' stamp: 'eb 11/26/2020 16:29:00' prior: 50996677!
test01CashierCanNotCheckoutWithEmptyCart

	| cashier cart aCatalog creditCard |
	
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	
	self should: [ cashier checkout: cart with: creditCard using: merchantProcessor . self fail] 
		raise: Error
		withMessageText: Cashier canNotCheckoutForEmptyCartErrorDescription.
! !
!CashierTest methodsFor: 'not empty cashier' stamp: 'eb 11/26/2020 16:30:19' prior: 50996695!
test02CashierCheckoutWithCartWithAnElement

	| cashier cart aCatalog creditCard transactionId |
	
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1' .
	
	transactionId _ cashier checkout: cart with: creditCard using: merchantProcessor.
	self assert: merchantProcessor lastTransactionId equals: transactionId.! !
!CashierTest methodsFor: 'not empty cashier' stamp: 'eb 11/26/2020 16:30:27' prior: 50996714!
test03CashierCheckoutWithCartWithManyElements

	| cashier cart aCatalog creditCard transactionId |
	
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2; add: 'book2' -> 3; add: 'book3' -> 4.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	
	cart add: 'book1'.
	cart add: 2 of: 'book2'. 
	
	transactionId _ cashier checkout: cart with: creditCard using: merchantProcessor.
	self assert: merchantProcessor lastTransactionId equals: transactionId.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 16:32:36' prior: 50996893!
checkout: aCart with: aCreditCard using: aMerchantProcessor

	| price |
	
	price _ self priceOf: aCart.
	
	(aCart isEmpty) ifTrue: [ self error: self class canNotCheckoutForEmptyCartErrorDescription ].
	
	^ [ aMerchantProcessor pay: price with: aCreditCard ] on:Error do:[ self error: self class errorInMerchantProcessorErrorDescription ].! !
!Cashier methodsFor: 'checkout' stamp: 'eb 11/26/2020 16:37:30' prior: 50997557!
checkout: aCart with: aCreditCard using: aMerchantProcessor

	| price |
	
	price _ self priceOf: aCart.
	
	(aCart isEmpty) ifTrue: [ self error: self class canNotCheckoutForEmptyCartErrorDescription ].
	
	^ [ aMerchantProcessor pay: price with: aCreditCard ] on:Error do:[ self error: self class errorInMerchantProcessorErrorDescription ].! !

!methodRemoval: Cashier #priceOf: stamp: 'eb 11/26/2020 16:37:59'!
priceOf: aCart

	 ^ aCart price.!
!Cashier methodsFor: 'checkout' stamp: 'eb 11/26/2020 16:38:19' prior: 50997571!
checkout: aCart with: aCreditCard using: aMerchantProcessor

	| price |

	(aCart isEmpty) ifTrue: [ self error: self class canNotCheckoutForEmptyCartErrorDescription ].
	price _ aCart price.
	^ [ aMerchantProcessor pay: price with: aCreditCard ] on:Error do:[ self error: self class errorInMerchantProcessorErrorDescription ].! !
!Cashier methodsFor: 'checkout' stamp: 'eb 11/26/2020 16:38:23' prior: 50997588!
checkout: aCart with: aCreditCard using: aMerchantProcessor
	| price |

	(aCart isEmpty) ifTrue: [ self error: self class canNotCheckoutForEmptyCartErrorDescription ].
	price _ aCart price.
	^ [ aMerchantProcessor pay: price with: aCreditCard ] on:Error do:[ self error: self class errorInMerchantProcessorErrorDescription ].! !
!Cashier methodsFor: 'checkout' stamp: 'eb 11/26/2020 16:38:26' prior: 50997601!
checkout: aCart with: aCreditCard using: aMerchantProcessor
	| price |
	(aCart isEmpty) ifTrue: [ self error: self class canNotCheckoutForEmptyCartErrorDescription ].
	price _ aCart price.
	^ [ aMerchantProcessor pay: price with: aCreditCard ] on:Error do:[ self error: self class errorInMerchantProcessorErrorDescription ].! !
!Cashier methodsFor: 'checkout' stamp: 'eb 11/26/2020 16:38:53' prior: 50997614!
checkout: aCart with: aCreditCard using: aMerchantProcessor
	| price |
	(aCart isEmpty) ifTrue: [ self error: self class canNotCheckoutForEmptyCartErrorDescription ].
	price _ aCart price.
	^ [ aMerchantProcessor pay: price with: aCreditCard ] 
		on:Error 
		do:[ self error: self class errorInMerchantProcessorErrorDescription ].! !
!Cashier methodsFor: 'checkout' stamp: 'eb 11/26/2020 16:38:59' prior: 50997627!
checkout: aCart with: aCreditCard using: aMerchantProcessor
	| price |
	(aCart isEmpty) ifTrue: [ self error: self class canNotCheckoutForEmptyCartErrorDescription ].
	price _ aCart price.
	^ [ aMerchantProcessor pay: price with: aCreditCard ] 
		on: Error 
		do: [ self error: self class errorInMerchantProcessorErrorDescription ].! !

Object subclass: #Ticket
	instanceVariableNames: 'transactionId amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Ticket category: #TusLibros stamp: 'eb 11/26/2020 16:40:12'!
Object subclass: #Ticket
	instanceVariableNames: 'transactionId amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Ticket methodsFor: 'accessing' stamp: 'eb 11/26/2020 16:40:32'!
transactionId

	^ transactionId .! !
!Ticket methodsFor: 'accessing' stamp: 'eb 11/26/2020 16:40:44'!
amount

	^ amount .! !
!Ticket methodsFor: 'initialization' stamp: 'eb 11/26/2020 16:41:29'!
initializeWith: aTransactionId of: anAmount

	transactionId _ aTransactionId .
	
	amount _ anAmount .! !
!Ticket class methodsFor: 'no messages' stamp: 'eb 11/26/2020 16:42:17'!
with: aTransactionId of: anAmount

	^ self new initializeWith: aTransactionId of: anAmount .! !
!CashierTest methodsFor: 'not empty cashier' stamp: 'eb 11/26/2020 16:44:49' prior: 50997515!
test02CashierCheckoutWithCartWithAnElement

	| cashier cart aCatalog creditCard ticket |
	
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1' .
	ticket _ cashier checkout: cart with: creditCard using: merchantProcessor.
	
	self assert: (aCatalog at: 'book1') equals: (ticket amount).
	self assert: merchantProcessor lastTransactionId equals: (ticket transactionId ).! !
!CashierTest methodsFor: 'not empty cashier' stamp: 'eb 11/26/2020 16:44:51' prior: 50997685!
test02CashierCheckoutWithCartWithAnElement

	| cashier cart aCatalog creditCard ticket |
	
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1' .
	ticket _ cashier checkout: cart with: creditCard using: merchantProcessor.
	
	self assert: (aCatalog at: 'book1') equals: (ticket amount).
	self assert: merchantProcessor lastTransactionId equals: (ticket transactionId).! !

Object subclass: #Cashier
	instanceVariableNames: 'lastTransactionId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'eb 11/26/2020 16:45:19'!
Object subclass: #Cashier
	instanceVariableNames: 'lastTransactionId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'nil' stamp: 'eb 11/26/2020 16:45:36'!
iniitalize
	
	lastTransactionId _ 0.! !
!Cashier methodsFor: 'initialization' stamp: 'eb 11/26/2020 16:45:58' overrides: 16896425!
initialize
	
	lastTransactionId _ 0.! !

!methodRemoval: Cashier #iniitalize stamp: 'eb 11/26/2020 16:45:58'!
iniitalize
	
	lastTransactionId _ 0.!
!Cashier methodsFor: 'initialization' stamp: 'eb 11/26/2020 16:46:05' prior: 50997744 overrides: 16896425!
initialize
	
	super initialize .
	
	lastTransactionId _ 0.! !
!Cashier methodsFor: 'nil' stamp: 'eb 11/26/2020 16:46:34'!
lastTransactionId
	
	^ lastTransactionId .! !
!CashierTest methodsFor: 'not empty cashier' stamp: 'eb 11/26/2020 16:47:10' prior: 50997707!
test02CashierCheckoutWithCartWithAnElement

	| cashier cart aCatalog creditCard ticket |
	
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1' .
	ticket _ cashier checkout: cart with: creditCard using: merchantProcessor.
	
	self assert: (aCatalog at: 'book1') equals: ticket amount.
	self assert: cashier lastTransactionId equals: ticket transactionId.! !

!testRun: #CashierTest #test02CashierCheckoutWithCartWithAnElement stamp: 'eb 11/26/2020 16:47:15'!
FAILURE!

!testRun: #CashierTest #test02CashierCheckoutWithCartWithAnElement stamp: 'eb 11/26/2020 16:47:15'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'eb 11/26/2020 16:48:12' prior: 50997641!
checkout: aCart with: aCreditCard using: aMerchantProcessor
	| price |
	(aCart isEmpty) ifTrue: [ self error: self class canNotCheckoutForEmptyCartErrorDescription ].
	price _ aCart price.
	[ aMerchantProcessor pay: price with: aCreditCard ] 
		on: Error 
		do: [ self error: self class errorInMerchantProcessorErrorDescription ].
		
	lastTransactionId _ lastTransactionId + 1.
		
	^ Ticket with: lastTransactionId of: price .! !

!testRun: #CashierTest #test02CashierCheckoutWithCartWithAnElement stamp: 'eb 11/26/2020 16:48:20'!
PASSED!

!testRun: #CashierTest #test03CashierCheckoutWithCartWithManyElements stamp: 'eb 11/26/2020 16:48:22'!
FAILURE!

!testRun: #CashierTest #test03CashierCheckoutWithCartWithManyElements stamp: 'eb 11/26/2020 16:48:22'!
FAILURE!
!CashierTest methodsFor: 'not empty cashier' stamp: 'eb 11/26/2020 16:48:51' prior: 50997535!
test03CashierCheckoutWithCartWithManyElements

	| cashier cart aCatalog creditCard transactionId |
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2; add: 'book2' -> 3; add: 'book3' -> 4.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1'.
	cart add: 2 of: 'book2'. 
	transactionId _ cashier checkout: cart with: creditCard using: merchantProcessor.
	self assert: merchantProcessor lastTransactionId equals: transactionId.! !
!CashierTest methodsFor: 'not empty cashier' stamp: 'eb 11/26/2020 16:49:02' prior: 50997761!
test02CashierCheckoutWithCartWithAnElement

	| cashier cart aCatalog creditCard ticket |
	
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1' .
	ticket _ cashier checkout: cart with: creditCard using: merchantProcessor.
	
	self assert: cart price equals: ticket amount.
	self assert: cashier lastTransactionId equals: ticket transactionId.! !

!testRun: #CashierTest #test02CashierCheckoutWithCartWithAnElement stamp: 'eb 11/26/2020 16:49:04'!
PASSED!
!CashierTest methodsFor: 'not empty cashier' stamp: 'eb 11/26/2020 16:49:30' prior: 50997816!
test03CashierCheckoutWithCartWithManyElements

	| cashier cart aCatalog creditCard ticket |
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2; add: 'book2' -> 3; add: 'book3' -> 4.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1'.
	cart add: 2 of: 'book2'. 
	ticket _ cashier checkout: cart with: creditCard using: merchantProcessor.
	
	self assert: cart price equals: ticket amount.
	
	self assert: cashier lastTransactionId equals: ticket transactionId.! !

!testRun: #CashierTest #test03CashierCheckoutWithCartWithManyElements stamp: 'eb 11/26/2020 16:49:32'!
PASSED!

!testRun: #CashierTest #test04CanNotBuyOnMerchantProcessorError stamp: 'eb 11/26/2020 16:49:37'!
ERROR!

!testRun: #CashierTest #test04CanNotBuyOnMerchantProcessorError stamp: 'eb 11/26/2020 16:49:37'!
ERROR!
!CashierTest methodsFor: 'not empty cashier' stamp: 'eb 11/26/2020 16:50:06' prior: 50996736!
test04CanNotBuyOnMerchantProcessorError

	| cashier cart aCatalog creditCard |
	
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2; add: 'book2' -> 3; add: 'book3' -> 4.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	
	cart add: 'book1'.
	
	merchantProcessor invalidate.
	
	self should: [cashier checkout: cart with: creditCard using: merchantProcessor. self fail]
		raise: Error  
		withMessageText: Cashier errorInMerchantProcessorErrorDescription.
! !

!testRun: #CashierTest #test04CanNotBuyOnMerchantProcessorError stamp: 'eb 11/26/2020 16:50:07'!
PASSED!
!CashierTest methodsFor: 'empty cashier' stamp: 'eb 11/26/2020 16:52:56' prior: 50997496!
test01CashierCanNotCheckoutWithEmptyCart
	| cashier cart aCatalog creditCard previousTransactionId |
	
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	previousTransactionId _ cashier lastTransactionId .
	
	self should: [ cashier checkout: cart with: creditCard using: merchantProcessor . self fail] 
		raise: Error
		withMessageText: Cashier canNotCheckoutForEmptyCartErrorDescription.
		
	self assert: cashier lastTransactionId equals: previousTransactionId .
! !

!testRun: #CashierTest #test01CashierCanNotCheckoutWithEmptyCart stamp: 'eb 11/26/2020 16:52:57'!
PASSED!
!CashierTest methodsFor: 'not empty cashier' stamp: 'eb 11/26/2020 16:53:51' prior: 50997895!
test04CanNotBuyOnMerchantProcessorError
	| cashier cart aCatalog creditCard previousTransactionId |
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2; add: 'book2' -> 3; add: 'book3' -> 4.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1'.
	
	previousTransactionId _ cashier lastTransactionId .
	merchantProcessor invalidate.
	self should: [cashier checkout: cart with: creditCard using: merchantProcessor. self fail]
		raise: Error  
		withMessageText: Cashier errorInMerchantProcessorErrorDescription.
	self assert: cashier lastTransactionId equals: previousTransactionId .	
! !

!testRun: #CashierTest #test04CanNotBuyOnMerchantProcessorError stamp: 'eb 11/26/2020 16:53:52'!
PASSED!

Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorSimulator category: #TusLibros stamp: 'eb 11/26/2020 16:57:52'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorSimulator category: #TusLibros stamp: 'eb 11/26/2020 16:58:01'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'state' stamp: 'eb 11/26/2020 16:58:12'!
state

	^ state. ! !

!methodRemoval: MerchantProcessorSimulator #state stamp: 'eb 11/26/2020 16:58:16'!
state

	^ state. !

!methodRemoval: MerchantProcessorSimulator #invalidate stamp: 'eb 11/26/2020 16:58:19'!
invalidate

	valid _ false.!

!methodRemoval: MerchantProcessorSimulator #lastTransactionId stamp: 'eb 11/26/2020 16:58:25'!
lastTransactionId

	^ lastTransactionId!
!MerchantProcessorSimulator methodsFor: 'accessing' stamp: 'eb 11/26/2020 16:58:36'!
state
	
	^ state .! !
!MerchantProcessorSimulator methodsFor: 'initialization' stamp: 'eb 11/26/2020 16:58:51' prior: 50997007 overrides: 16896425!
initialize
	state _ #WorkingNormal. ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 16:58:55'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 16:58:55'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'eb 11/26/2020 16:58:55'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'eb 11/26/2020 16:58:55'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'eb 11/26/2020 16:58:55'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 16:58:55'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'eb 11/26/2020 16:58:55'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 16:58:55'!
ERROR!

!testRun: #CashierTest #test01CashierCanNotCheckoutWithEmptyCart stamp: 'eb 11/26/2020 16:58:55'!
PASSED!

!testRun: #CashierTest #test02CashierCheckoutWithCartWithAnElement stamp: 'eb 11/26/2020 16:58:55'!
ERROR!

!testRun: #CashierTest #test03CashierCheckoutWithCartWithManyElements stamp: 'eb 11/26/2020 16:58:55'!
ERROR!

!testRun: #CashierTest #test04CanNotBuyOnMerchantProcessorError stamp: 'eb 11/26/2020 16:58:55'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardOwnerNameCanNotBeEmpty stamp: 'eb 11/26/2020 16:58:55'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberMustHaveSixteenDigits stamp: 'eb 11/26/2020 16:58:55'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardExpirationMonthCanNotBeLessThanCurrent stamp: 'eb 11/26/2020 16:58:55'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 16:59:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 16:59:02'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'eb 11/26/2020 16:59:02'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'eb 11/26/2020 16:59:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'eb 11/26/2020 16:59:02'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 16:59:02'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'eb 11/26/2020 16:59:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 16:59:02'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 16:59:05'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardOwnerNameCanNotBeEmpty stamp: 'eb 11/26/2020 16:59:17'!
PASSED!

!testRun: #CashierTest #test01CashierCanNotCheckoutWithEmptyCart stamp: 'eb 11/26/2020 16:59:20'!
PASSED!

!testRun: #CashierTest #test02CashierCheckoutWithCartWithAnElement stamp: 'eb 11/26/2020 16:59:22'!
ERROR!

!testRun: #CashierTest #test02CashierCheckoutWithCartWithAnElement stamp: 'eb 11/26/2020 16:59:22'!
ERROR!
!MerchantProcessorSimulator methodsFor: 'operations' stamp: 'eb 11/26/2020 17:02:08' prior: 50997021!
pay: aPrice with: aCreditCard 
	(state = #StolenCreditCard) ifTrue: [ self error: self class stolenCreditCardErrorDescription] .
	
	(state = #NotEnoughCredit) ifTrue: [ self error: self class notEnoughCreditErrorDescription] .
	^ self .
! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 17:02:32'!
stolenCreditCardErrorDescription

	^ 'Credit card is stolen.'! !
!MerchantProcessorSimulator class methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 17:02:53'!
notEnoughCreditErrorDescription

	^ 'Credit is not enough.'! !

!methodRemoval: MerchantProcessorSimulator class #errorDoingTransactionErrorDescription stamp: 'eb 11/26/2020 17:02:55'!
errorDoingTransactionErrorDescription

	^ 'Error doing transaction error description'!

!methodRemoval: MerchantProcessorSimulator #state stamp: 'eb 11/26/2020 17:03:26'!
state
	
	^ state .!
!MerchantProcessorSimulator methodsFor: 'nil' stamp: 'eb 11/26/2020 17:04:06'!
asStolenCreditCard
	
	state _ #StolenCreditCard.
	
	^ self .! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 17:04:23'!
asNotEnoughCredit
	
	state _ #NotEnoughCredit.
	
	^ self .! !
!CashierTest methodsFor: 'test' stamp: 'eb 11/26/2020 17:06:25'!
test04CanNotBuyWithStolenCreditCard
	| cashier cart aCatalog creditCard previousTransactionId |
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2; add: 'book2' -> 3; add: 'book3' -> 4.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1'.
	
	previousTransactionId _ cashier lastTransactionId .
	self should: [cashier checkout: cart with: creditCard using: merchantProcessor asStolenCreditCard . self fail]
		raise: Error  
		withMessageText: Cashier errorInMerchantProcessorErrorDescription.
	self assert: cashier lastTransactionId equals: previousTransactionId .	
! !

!methodRemoval: CashierTest #test04CanNotBuyOnMerchantProcessorError stamp: 'eb 11/26/2020 17:06:29'!
test04CanNotBuyOnMerchantProcessorError
	| cashier cart aCatalog creditCard previousTransactionId |
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2; add: 'book2' -> 3; add: 'book3' -> 4.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1'.
	
	previousTransactionId _ cashier lastTransactionId .
	merchantProcessor invalidate.
	self should: [cashier checkout: cart with: creditCard using: merchantProcessor. self fail]
		raise: Error  
		withMessageText: Cashier errorInMerchantProcessorErrorDescription.
	self assert: cashier lastTransactionId equals: previousTransactionId .	
!

!testRun: #CashierTest #test04CanNotBuyWithStolenCreditCard stamp: 'eb 11/26/2020 17:06:31'!
PASSED!
!MerchantProcessorSimulator methodsFor: 'state' stamp: 'eb 11/26/2020 17:06:53'!
withStolenCreditCard
	
	state _ #StolenCreditCard.
	
	^ self .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 17:06:53' prior: 50998160!
test04CanNotBuyWithStolenCreditCard
	| cashier cart aCatalog creditCard previousTransactionId |
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2; add: 'book2' -> 3; add: 'book3' -> 4.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1'.
	
	previousTransactionId _ cashier lastTransactionId .
	self should: [cashier checkout: cart with: creditCard using: merchantProcessor withStolenCreditCard . self fail]
		raise: Error  
		withMessageText: Cashier errorInMerchantProcessorErrorDescription.
	self assert: cashier lastTransactionId equals: previousTransactionId .	
! !

!methodRemoval: MerchantProcessorSimulator #asStolenCreditCard stamp: 'eb 11/26/2020 17:06:53'!
asStolenCreditCard
	
	state _ #StolenCreditCard.
	
	^ self .!
!CashierTest methodsFor: 'test' stamp: 'eb 11/26/2020 17:07:35'!
test04CanNotBuyWithNotEnoughCredit
	| cashier cart aCatalog creditCard previousTransactionId |
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2; add: 'book2' -> 3; add: 'book3' -> 4.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1'.
	
	previousTransactionId _ cashier lastTransactionId .
	self should: [cashier checkout: cart with: creditCard using: merchantProcessor asNotEnoughCredit . self fail]
		raise: Error  
		withMessageText: Cashier errorInMerchantProcessorErrorDescription.
	self assert: cashier lastTransactionId equals: previousTransactionId .	
! !
!CashierTest methodsFor: 'test' stamp: 'eb 11/26/2020 17:07:47'!
test05CanNotBuyWithNotEnoughCredit
	| cashier cart aCatalog creditCard previousTransactionId |
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2; add: 'book2' -> 3; add: 'book3' -> 4.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1'.
	
	previousTransactionId _ cashier lastTransactionId .
	self should: [cashier checkout: cart with: creditCard using: merchantProcessor asNotEnoughCredit . self fail]
		raise: Error  
		withMessageText: Cashier errorInMerchantProcessorErrorDescription.
	self assert: cashier lastTransactionId equals: previousTransactionId .	
! !

!methodRemoval: CashierTest #test04CanNotBuyWithNotEnoughCredit stamp: 'eb 11/26/2020 17:07:47'!
test04CanNotBuyWithNotEnoughCredit
	| cashier cart aCatalog creditCard previousTransactionId |
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2; add: 'book2' -> 3; add: 'book3' -> 4.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1'.
	
	previousTransactionId _ cashier lastTransactionId .
	self should: [cashier checkout: cart with: creditCard using: merchantProcessor asNotEnoughCredit . self fail]
		raise: Error  
		withMessageText: Cashier errorInMerchantProcessorErrorDescription.
	self assert: cashier lastTransactionId equals: previousTransactionId .	
!

!testRun: #CashierTest #test05CanNotBuyWithNotEnoughCredit stamp: 'eb 11/26/2020 17:07:48'!
PASSED!
!MerchantProcessorSimulator methodsFor: 'state' stamp: 'eb 11/26/2020 17:08:13'!
withNotEnoughCredit
	
	state _ #NotEnoughCredit.
	
	^ self .! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 17:08:13' prior: 50998277!
test05CanNotBuyWithNotEnoughCredit
	| cashier cart aCatalog creditCard previousTransactionId |
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2; add: 'book2' -> 3; add: 'book3' -> 4.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1'.
	
	previousTransactionId _ cashier lastTransactionId .
	self should: [cashier checkout: cart with: creditCard using: merchantProcessor withNotEnoughCredit . self fail]
		raise: Error  
		withMessageText: Cashier errorInMerchantProcessorErrorDescription.
	self assert: cashier lastTransactionId equals: previousTransactionId .	
! !

!methodRemoval: MerchantProcessorSimulator #asNotEnoughCredit stamp: 'eb 11/26/2020 17:08:13'!
asNotEnoughCredit
	
	state _ #NotEnoughCredit.
	
	^ self .!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 17:09:14'!
canNotCheckoutWithStolenCreditCardErrorDescription
	
	^ 'Can not checkout with stolen credit card error description'! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 17:09:38'!
canNotCheckoutWithNotEnoughCreditErrorDescription
	
	^ 'Can not checkout with not enough credit'.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'eb 11/26/2020 17:09:43' prior: 50998368!
canNotCheckoutWithStolenCreditCardErrorDescription
	
	^ 'Can not checkout with stolen credit card'.! !

!methodRemoval: Cashier class #errorInMerchantProcessorErrorDescription stamp: 'eb 11/26/2020 17:09:46'!
errorInMerchantProcessorErrorDescription
	
	^ 'Error in merchant processor'!
!CashierTest methodsFor: 'test' stamp: 'eb 11/26/2020 17:10:13' prior: 50998222!
test04CanNotBuyWithStolenCreditCard
	| cashier cart aCatalog creditCard previousTransactionId |
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2; add: 'book2' -> 3; add: 'book3' -> 4.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1'.
	
	previousTransactionId _ cashier lastTransactionId .
	self should: [cashier checkout: cart with: creditCard using: merchantProcessor withStolenCreditCard . self fail]
		raise: Error  
		withMessageText: Cashier canNotCheckoutWithStolenCreditCardErrorDescription .
	self assert: cashier lastTransactionId equals: previousTransactionId .	
! !
!CashierTest methodsFor: 'test' stamp: 'eb 11/26/2020 17:10:25' prior: 50998337!
test05CanNotBuyWithNotEnoughCredit
	| cashier cart aCatalog creditCard previousTransactionId |
	cashier _ Cashier new.
	aCatalog _ Dictionary new.
	aCatalog add: 'book1' -> 2; add: 'book2' -> 3; add: 'book3' -> 4.
	creditCard  _ CreditCard of: 'Alan Kay' withNumber: 1234567891011121 andExpiration: GregorianMonthOfYear current.
	cart _ Cart acceptingItemsOf: aCatalog.
	cart add: 'book1'.
	
	previousTransactionId _ cashier lastTransactionId .
	self should: [cashier checkout: cart with: creditCard using: merchantProcessor withNotEnoughCredit . self fail]
		raise: Error  
		withMessageText: Cashier canNotCheckoutWithNotEnoughCreditErrorDescription .
	self assert: cashier lastTransactionId equals: previousTransactionId .	
! !

Object subclass: #StolenCreditCardError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StolenCreditCardError category: #TusLibros stamp: 'eb 11/26/2020 17:11:17'!
Object subclass: #StolenCreditCardError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #NotEnoughCreditError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #NotEnoughCreditError category: #TusLibros stamp: 'eb 11/26/2020 17:11:26'!
Object subclass: #NotEnoughCreditError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: MerchantProcessorSimulator class #notEnoughCreditErrorDescription stamp: 'eb 11/26/2020 17:11:39'!
notEnoughCreditErrorDescription

	^ 'Credit is not enough.'!

!methodRemoval: MerchantProcessorSimulator class #stolenCreditCardErrorDescription stamp: 'eb 11/26/2020 17:11:39'!
stolenCreditCardErrorDescription

	^ 'Credit card is stolen.'!
!MerchantProcessorSimulator methodsFor: 'operations' stamp: 'eb 11/26/2020 17:13:04' prior: 50998119!
pay: aPrice with: aCreditCard 
	(state = #StolenCreditCard) ifTrue: [ self error: StolenCreditCardError ] .
	
	(state = #NotEnoughCredit) ifTrue: [ self error: NotEnoughCreditError ] .
	^ self .
! !
!MerchantProcessorSimulator methodsFor: 'operations' stamp: 'eb 11/26/2020 17:13:30' prior: 50998481!
pay: aPrice with: aCreditCard 
	(state = #StolenCreditCard) ifTrue: [ self signal: StolenCreditCardError ] .
	
	(state = #NotEnoughCredit) ifTrue: [ self error: NotEnoughCreditError ] .
	^ self .
! !
!MerchantProcessorSimulator methodsFor: 'operations' stamp: 'eb 11/26/2020 17:14:12' prior: 50998491!
pay: aPrice with: aCreditCard 
	(state = #StolenCreditCard) ifTrue: [ ^ StolenCreditCardError new ] .
	
	(state = #NotEnoughCredit) ifTrue: [ ^ NotEnoughCreditError new ] .
	^ self .
! !

!testRun: #CashierTest #test01CashierCanNotCheckoutWithEmptyCart stamp: 'eb 11/26/2020 17:14:20'!
PASSED!

!testRun: #CashierTest #test02CashierCheckoutWithCartWithAnElement stamp: 'eb 11/26/2020 17:14:20'!
PASSED!

!testRun: #CashierTest #test03CashierCheckoutWithCartWithManyElements stamp: 'eb 11/26/2020 17:14:20'!
PASSED!

!testRun: #CashierTest #test04CanNotBuyWithStolenCreditCard stamp: 'eb 11/26/2020 17:14:20'!
FAILURE!

!testRun: #CashierTest #test05CanNotBuyWithNotEnoughCredit stamp: 'eb 11/26/2020 17:14:20'!
FAILURE!

!testRun: #CashierTest #test04CanNotBuyWithStolenCreditCard stamp: 'eb 11/26/2020 17:14:23'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'eb 11/26/2020 17:14:47' prior: 50997789!
checkout: aCart with: aCreditCard using: aMerchantProcessor
	| price |
	(aCart isEmpty) ifTrue: [ self error: self class canNotCheckoutForEmptyCartErrorDescription ].
	price _ aCart price.
	[ aMerchantProcessor pay: price with: aCreditCard ] 
		on: StolenCreditCardError 
		do: [ self error: self class errorInMerchantProcessorErrorDescription ].
		
	lastTransactionId _ lastTransactionId + 1.
		
	^ Ticket with: lastTransactionId of: price .! !
!Cashier methodsFor: 'checkout' stamp: 'eb 11/26/2020 17:15:03' prior: 50998530!
checkout: aCart with: aCreditCard using: aMerchantProcessor
	| price |
	(aCart isEmpty) ifTrue: [ self error: self class canNotCheckoutForEmptyCartErrorDescription ].
	price _ aCart price.
	[ aMerchantProcessor pay: price with: aCreditCard ] 
		on: StolenCreditCardError 
		do: [ self error: self class canNotCheckoutWithStolenCreditCardErrorDescription ].
		
	lastTransactionId _ lastTransactionId + 1.
		
	^ Ticket with: lastTransactionId of: price .! !

!testRun: #CashierTest #test04CanNotBuyWithStolenCreditCard stamp: 'eb 11/26/2020 17:15:08'!
FAILURE!

!testRun: #CashierTest #test04CanNotBuyWithStolenCreditCard stamp: 'eb 11/26/2020 17:15:08'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'eb 11/26/2020 17:15:48' prior: 50998547!
checkout: aCart with: aCreditCard using: aMerchantProcessor
	| price |
	(aCart isEmpty) ifTrue: [ self error: self class canNotCheckoutForEmptyCartErrorDescription ].
	price _ aCart price.
	[ aMerchantProcessor pay: price with: aCreditCard ] 
		on: StolenCreditCardError 
		do: [ self error: self class canNotCheckoutWithStolenCreditCardErrorDescription ]
		on: NotEnoughCreditError 
		do: [ self error: self class canNotCheckoutWithNotEnoughCreditErrorDescription ].
		
	lastTransactionId _ lastTransactionId + 1.
		
	^ Ticket with: lastTransactionId of: price .! !

Error subclass: #StolenCreditCardError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StolenCreditCardError category: #TusLibros stamp: 'eb 11/26/2020 17:16:11'!
Error subclass: #StolenCreditCardError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Error subclass: #NotEnoughCreditError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #NotEnoughCreditError category: #TusLibros stamp: 'eb 11/26/2020 17:16:15'!
Error subclass: #NotEnoughCreditError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CashierTest #test01CashierCanNotCheckoutWithEmptyCart stamp: 'eb 11/26/2020 17:16:18'!
PASSED!

!testRun: #CashierTest #test02CashierCheckoutWithCartWithAnElement stamp: 'eb 11/26/2020 17:16:18'!
PASSED!

!testRun: #CashierTest #test03CashierCheckoutWithCartWithManyElements stamp: 'eb 11/26/2020 17:16:18'!
PASSED!

!testRun: #CashierTest #test04CanNotBuyWithStolenCreditCard stamp: 'eb 11/26/2020 17:16:18'!
FAILURE!

!testRun: #CashierTest #test05CanNotBuyWithNotEnoughCredit stamp: 'eb 11/26/2020 17:16:18'!
FAILURE!

!testRun: #CashierTest #test04CanNotBuyWithStolenCreditCard stamp: 'eb 11/26/2020 17:16:23'!
FAILURE!

!testRun: #CashierTest #test04CanNotBuyWithStolenCreditCard stamp: 'eb 11/26/2020 17:16:23'!
FAILURE!
!MerchantProcessorSimulator methodsFor: 'operations' stamp: 'eb 11/26/2020 17:21:35' prior: 50998501!
pay: aPrice with: aCreditCard 
	(state = #StolenCreditCard) ifTrue: [ StolenCreditCardError signal ] .
	
	(state = #NotEnoughCredit) ifTrue: [ NotEnoughCreditError signal ] .
	^ self .
! !

!testRun: #CashierTest #test01CashierCanNotCheckoutWithEmptyCart stamp: 'eb 11/26/2020 17:21:45'!
PASSED!

!testRun: #CashierTest #test02CashierCheckoutWithCartWithAnElement stamp: 'eb 11/26/2020 17:21:45'!
PASSED!

!testRun: #CashierTest #test03CashierCheckoutWithCartWithManyElements stamp: 'eb 11/26/2020 17:21:45'!
PASSED!

!testRun: #CashierTest #test04CanNotBuyWithStolenCreditCard stamp: 'eb 11/26/2020 17:21:45'!
PASSED!

!testRun: #CashierTest #test05CanNotBuyWithNotEnoughCredit stamp: 'eb 11/26/2020 17:21:45'!
PASSED!

!testRun: #CashierTest #test04CanNotBuyWithStolenCreditCard stamp: 'eb 11/26/2020 17:21:47'!
PASSED!

!testRun: #CashierTest #test01CashierCanNotCheckoutWithEmptyCart stamp: 'eb 11/26/2020 17:22:29'!
PASSED!

!testRun: #CashierTest #test02CashierCheckoutWithCartWithAnElement stamp: 'eb 11/26/2020 17:22:29'!
PASSED!

!testRun: #CashierTest #test03CashierCheckoutWithCartWithManyElements stamp: 'eb 11/26/2020 17:22:29'!
PASSED!

!testRun: #CashierTest #test04CanNotBuyWithStolenCreditCard stamp: 'eb 11/26/2020 17:22:29'!
PASSED!

!testRun: #CashierTest #test05CanNotBuyWithNotEnoughCredit stamp: 'eb 11/26/2020 17:22:29'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 17:22:36'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:22:36'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'eb 11/26/2020 17:22:36'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'eb 11/26/2020 17:22:36'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'eb 11/26/2020 17:22:36'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 17:22:36'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'eb 11/26/2020 17:22:36'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:22:36'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 17:22:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:22:43'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:22:43'!
ERROR!
!Cart methodsFor: 'initialization' stamp: 'eb 11/26/2020 17:22:59' prior: 50996835!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Dictionary new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 17:23:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:23:01'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'eb 11/26/2020 17:23:01'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'eb 11/26/2020 17:23:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'eb 11/26/2020 17:23:01'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 17:23:01'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'eb 11/26/2020 17:23:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:23:01'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:23:06'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:23:06'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'eb 11/26/2020 17:24:10' prior: 50996646!
defaultCatalog
	| catalog |
	
	catalog _ Dictionary new .
	
	catalog at: self itemSellByTheStore put: 1.
	^ catalog .! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 17:24:13'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:24:13'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'eb 11/26/2020 17:24:13'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'eb 11/26/2020 17:24:13'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'eb 11/26/2020 17:24:13'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 17:24:13'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'eb 11/26/2020 17:24:13'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:24:13'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 17:24:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:24:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'eb 11/26/2020 17:24:24'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'eb 11/26/2020 17:24:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'eb 11/26/2020 17:24:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 17:24:24'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'eb 11/26/2020 17:24:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:24:24'!
ERROR!
!Cart methodsFor: 'adding' stamp: 'eb 11/26/2020 17:24:54' prior: 50996862!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items at: anItem put: 1 ] .! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 17:24:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:24:56'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'eb 11/26/2020 17:24:56'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'eb 11/26/2020 17:24:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'eb 11/26/2020 17:24:56'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 17:24:56'!
FAILURE!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'eb 11/26/2020 17:24:56'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:24:56'!
FAILURE!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 17:25:15'!
FAILURE!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 17:25:15'!
FAILURE!
!Cart methodsFor: 'testing' stamp: 'eb 11/26/2020 17:25:35' prior: 50996850!
includes: anItem

	^items keys includes: anItem ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 17:25:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:25:37'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'eb 11/26/2020 17:25:37'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'eb 11/26/2020 17:25:37'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'eb 11/26/2020 17:25:37'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 17:25:37'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'eb 11/26/2020 17:25:37'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:25:37'!
FAILURE!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:25:37'!
FAILURE!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:25:48'!
FAILURE!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:25:48'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 17:25:55'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:25:56'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'eb 11/26/2020 17:25:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'eb 11/26/2020 17:25:58'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'eb 11/26/2020 17:25:59'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 17:26:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'eb 11/26/2020 17:26:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:26:02'!
FAILURE!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:26:02'!
FAILURE!
!Cart methodsFor: 'queries' stamp: 'eb 11/26/2020 17:26:20' prior: 50996841!
occurrencesOf: anItem

	^items keys occurrencesOf: anItem  ! !
!Cart methodsFor: 'queries' stamp: 'eb 11/26/2020 17:26:40' prior: 50998924!
occurrencesOf: anItem

	^items occurrencesOf: anItem  ! !
!Cart methodsFor: 'initialization' stamp: 'eb 11/26/2020 17:26:51' prior: 50998719!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'testing' stamp: 'eb 11/26/2020 17:26:56' prior: 50998855!
includes: anItem

	^items includes: anItem ! !
!Cart methodsFor: 'adding' stamp: 'eb 11/26/2020 17:27:52' prior: 50998815!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ] .! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 17:28:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:28:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'eb 11/26/2020 17:28:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'eb 11/26/2020 17:28:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'eb 11/26/2020 17:28:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 17:28:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'eb 11/26/2020 17:28:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:28:34'!
PASSED!
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50998757!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 17:29:04'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:29:06'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:29:06'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:29:20'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:29:20'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'eb 11/26/2020 17:31:00' prior: 50998978!
defaultCatalog
	| catalog |
	
	catalog _ Dictionary new .
	
	catalog at: self itemSellByTheStore put: 10.
	^ catalog .! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 17:31:03'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:31:03'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'eb 11/26/2020 17:31:03'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'eb 11/26/2020 17:31:03'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'eb 11/26/2020 17:31:03'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 17:31:03'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'eb 11/26/2020 17:31:03'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:31:03'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 17:31:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:31:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'eb 11/26/2020 17:31:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'eb 11/26/2020 17:31:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'eb 11/26/2020 17:31:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 17:31:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'eb 11/26/2020 17:31:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:31:10'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CashierTest #test01CashierCanNotCheckoutWithEmptyCart stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CashierTest #test02CashierCheckoutWithCartWithAnElement stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CashierTest #test03CashierCheckoutWithCartWithManyElements stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CashierTest #test04CanNotBuyWithStolenCreditCard stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CashierTest #test05CanNotBuyWithNotEnoughCredit stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardOwnerNameCanNotBeEmpty stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberMustHaveSixteenDigits stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardExpirationMonthCanNotBeLessThanCurrent stamp: 'eb 11/26/2020 17:31:18'!
PASSED!

----QUIT----(26 November 2020 17:35:50) CuisUniversity-4365.image priorSource: 21255648!

----STARTUP---- (30 November 2020 17:13:13) as C:\Program Files\CuisUniversity\CuisUniversity-4365.image!


----End fileIn of C:\Users\ebonansea\Documents\Personal\Facultad\Ingenieria de software 1\Ejercicios propios\20-TusLibros\it-3\TusLibros-3.st----!

----QUIT----(30 November 2020 17:26:44) CuisUniversity-4365.image priorSource: 21358688!

----STARTUP---- (2 December 2020 19:30:07) as C:\Program Files\CuisUniversity\CuisUniversity-4365.image!


----End fileIn of C:\Users\ebonansea\Documents\Personal\Facultad\Ingenieria de software 1\Ejercicios propios\20-TusLibros\it-3\TusLibros.st----!

!classRemoval: #Ticket stamp: 'eb 12/2/2020 19:34:54'!
Object subclass: #Ticket
	instanceVariableNames: 'transactionId amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreTestObjectsFactory stamp: 'eb 12/2/2020 19:34:54'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 'eb 12/2/2020 19:34:55'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProcessorSimulator stamp: 'eb 12/2/2020 19:34:55'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #UnsuccessfulResponse stamp: 'eb 12/2/2020 19:34:56'!
InternalAPIResponse subclass: #UnsuccessfulResponse
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #SuccessfulResponse stamp: 'eb 12/2/2020 19:34:56'!
InternalAPIResponse subclass: #SuccessfulResponse
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #InternalAPIResponse stamp: 'eb 12/2/2020 19:34:56'!
Object subclass: #InternalAPIResponse
	instanceVariableNames: 'payload'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #InternalAPI stamp: 'eb 12/2/2020 19:34:57'!
Object subclass: #InternalAPI
	instanceVariableNames: 'users nextId carts date modifications cartsPerUser catalog merchantProcesor nextTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'eb 12/2/2020 19:34:57'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'eb 12/2/2020 19:34:58'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'eb 12/2/2020 19:34:58'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #InternalAPITest stamp: 'eb 12/2/2020 19:34:59'!
TestCase subclass: #InternalAPITest
	instanceVariableNames: 'debitBehavior testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'eb 12/2/2020 19:35:00'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'eb 12/2/2020 19:35:00'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'eb 12/2/2020 19:35:00'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StolenCreditCardError stamp: 'eb 12/2/2020 19:35:01'!
Error subclass: #StolenCreditCardError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #NotEnoughCreditError stamp: 'eb 12/2/2020 19:35:01'!
Error subclass: #NotEnoughCreditError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #KeyNotFound stamp: 'eb 12/2/2020 19:35:02'!
Error subclass: #KeyNotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #InvalidISBN stamp: 'eb 12/2/2020 19:35:02'!
Error subclass: #InvalidISBN
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #InvalidBookQuantity stamp: 'eb 12/2/2020 19:35:03'!
Error subclass: #InvalidBookQuantity
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\ebonansea\Documents\Personal\Facultad\Ingenieria de software 1\Ejercicios propios\20-TusLibros\it-3\TusLibros.st----!

!classRemoval: #KeyNotFound stamp: 'eb 12/2/2020 19:36:14'!
Error subclass: #KeyNotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectsFactory methodsFor: 'internal API' stamp: 'eb 12/2/2020 19:39:04' prior: 51002424!
internalApiUsingMerchantProccessor: aMerchantProccessor
	
	^ InternalAPI with: self authenticatedUsers 
				on: today 
				usingCatalog: self defaultCatalog 
				usingMerchantProccesor: aMerchantProccessor.! !

!methodRemoval: StoreTestObjectsFactory #internalApi stamp: 'eb 12/2/2020 19:39:08'!
internalApi
	
	^ InternalAPI with: self authenticatedUsers 
				on: today 
				usingCatalog: self defaultCatalog 
				usingMerchantProccesor: self.!
!InternalAPIResponse methodsFor: 'accesing' stamp: 'eb 12/2/2020 19:42:21' prior: 51002262!
payload

	^ payload copy.! !

!methodRemoval: SuccessfulResponse #payload stamp: 'eb 12/2/2020 19:42:31'!
payload
	 
	^ payload !

!methodRemoval: UnsuccessfulResponse #payload stamp: 'eb 12/2/2020 19:42:35'!
payload

	^ payload !
!InternalAPITest methodsFor: 'create test' stamp: 'eb 12/2/2020 19:56:14' prior: 51001455!
test01CreateCartSuccessfulWithCorrectClientIdAndPassword

	| response internalApi |
	
	internalApi _ testObjectFactory internalApi.
	response _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
		
	self assert: response code = 0.
		
	! !
!InternalAPITest methodsFor: 'create test' stamp: 'eb 12/2/2020 19:56:33' prior: 51002488!
test01CreateCartSuccessfulWithCorrectClientIdAndPassword

	| createResponse internalApi |
	
	internalApi _ testObjectFactory internalApi.
	createResponse _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
		
	self assert: createResponse code = 0.
		
	! !
!InternalAPITest methodsFor: 'create test' stamp: 'eb 12/2/2020 19:58:04' prior: 51002499!
test01CreateCartSuccessfulWithCorrectClientIdAndPassword

	| createResponse internalApi |
	
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	createResponse _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
	self assert: createResponse code = 0.! !
!InternalAPITest methodsFor: 'create test' stamp: 'eb 12/2/2020 19:58:50'!
test01CreateCartSuccessfullyWithCorrectClientIdAndPassword

	| createResponse internalApi |
	
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	createResponse _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
	self assert: createResponse code = 0.! !

!methodRemoval: InternalAPITest #test01CreateCartSuccessfulWithCorrectClientIdAndPassword stamp: 'eb 12/2/2020 19:58:50'!
test01CreateCartSuccessfulWithCorrectClientIdAndPassword

	| createResponse internalApi |
	
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	createResponse _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
	self assert: createResponse code = 0.!
!InternalAPITest methodsFor: 'create test' stamp: 'eb 12/2/2020 19:59:38'!
test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword

	| createResponse internalApi |
	
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	createResponse _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
	self assert: createResponse code = 0.! !

!methodRemoval: InternalAPITest #test01CreateCartSuccessfullyWithCorrectClientIdAndPassword stamp: 'eb 12/2/2020 19:59:38'!
test01CreateCartSuccessfullyWithCorrectClientIdAndPassword

	| createResponse internalApi |
	
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	createResponse _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
	self assert: createResponse code = 0.!
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 19:59:56' prior: 51002548!
test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword

	| createResponse internalApi |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	createResponse _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
	self assert: createResponse code = 0.! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:00:46'!
assertSuccessfullyResponse: createResponse

	^ self assert: createResponse code = 0! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:00:46' prior: 51002574!
test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword

	| createResponse internalApi |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	createResponse _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
	self assertSuccessfullyResponse: createResponse.! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:01:57' prior: 51001466!
test02CreateCartReturnsDifferentIdPerCustomer
	| internalApi response1 response2|
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	response1 _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	response2 _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.	
	self deny: response1 payload = response2 payload.
	! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:02:19' prior: 51002605!
test02CreateCartReturnsDifferentIdPerCustomer
	| internalApi id1 response2|
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	id1 _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	response2 _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.	
	self deny: id1 payload = response2 payload.
	! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:02:24' prior: 51002620!
test02CreateCartReturnsDifferentIdPerCustomer
	| internalApi id1 id2|
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	id1 _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	id2 _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.	
	self deny: id1 payload = id2 payload.
	! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:02:55' prior: 51002634!
test02CreateCartReturnsDifferentIdPerCustomer
	| internalApi firstCustomerCartId id2|
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	firstCustomerCartId _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	id2 _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.	
	self deny: firstCustomerCartId payload = id2 payload.
	! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:03:05' prior: 51002647!
test02CreateCartReturnsDifferentIdPerCustomer
	| internalApi firstCustomerCartId secondCustomerCartId |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	firstCustomerCartId _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	secondCustomerCartId _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.	
	self deny: firstCustomerCartId payload = secondCustomerCartId payload.
	! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:03:35' prior: 51002662!
test02CreateCartReturnsDifferentIdPerCustomer
	| internalApi firstCustomerCartId secondCustomerCartId |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	firstCustomerCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload .
	secondCustomerCartId _ (internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk') payload.	
	self deny: firstCustomerCartId = secondCustomerCartId
	! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:04:23' prior: 51001480!
test03CreateCartReturnsOneWithUnregisteredClientId
	| internalApi response |
	internalApi _ testObjectFactory internalApi.
	response _ internalApi createCartFor: 'Edsger Dijkstra' with: 'nanoDijkstra'.
	self assert: response code = 1.
	self assert: response payload equals: InternalAPI userNotRegisteredErrorDescription. 
		
	
		
	! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:04:43'!
test03CreateCartIsUnsuccessfullyWithUnregisteredClientId
	| internalApi response |
	internalApi _ testObjectFactory internalApi.
	response _ internalApi createCartFor: 'Edsger Dijkstra' with: 'nanoDijkstra'.
	self assert: response code = 1.
	self assert: response payload equals: InternalAPI userNotRegisteredErrorDescription. 
		
	
		
	! !

!methodRemoval: InternalAPITest #test03CreateCartReturnsOneWithUnregisteredClientId stamp: 'eb 12/2/2020 20:04:43'!
test03CreateCartReturnsOneWithUnregisteredClientId
	| internalApi response |
	internalApi _ testObjectFactory internalApi.
	response _ internalApi createCartFor: 'Edsger Dijkstra' with: 'nanoDijkstra'.
	self assert: response code = 1.
	self assert: response payload equals: InternalAPI userNotRegisteredErrorDescription. 
		
	
		
	!
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:04:56' prior: 51002710!
test03CreateCartIsUnsuccessfullyWithUnregisteredClientId
	| internalApi response |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	response _ internalApi createCartFor: 'Edsger Dijkstra' with: 'nanoDijkstra'.
	self assert: response code = 1.
	self assert: response payload equals: InternalAPI userNotRegisteredErrorDescription. 
		
	
		
	! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:05:26'!
assertUnsuccesfullyResponse: response

	^ self assert: response code = 1! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:05:26' prior: 51002739!
test03CreateCartIsUnsuccessfullyWithUnregisteredClientId
	| internalApi response |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	response _ internalApi createCartFor: 'Edsger Dijkstra' with: 'nanoDijkstra'.
	self assertUnsuccesfullyResponse: response.
	self assert: response payload equals: InternalAPI userNotRegisteredErrorDescription. 
		
	
		
	! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:06:10'!
test04CreateCartSuccessfullyEffectivlyCreatesCart

	| internalApi response |
	
	internalApi _ testObjectFactory internalApi.
 	
	response _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	self assert: response code = 0.
	
	self assert: (internalApi hasCartsOf: 'Alan Kay').
	
		
	! !

!methodRemoval: InternalAPITest #test04CreateCartSuccessfulEffectivlyCreatesCart stamp: 'eb 12/2/2020 20:06:10'!
test04CreateCartSuccessfulEffectivlyCreatesCart

	| internalApi response |
	
	internalApi _ testObjectFactory internalApi.
 	
	response _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	self assert: response code = 0.
	
	self assert: (internalApi hasCartsOf: 'Alan Kay').
	
		
	!
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:06:43' prior: 51002775!
test04CreateCartSuccessfullyEffectivlyCreatesCart
	| internalApi response |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	response _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	self assertSuccessfullyResponse: response.
	self assert: (internalApi hasCartsOf: 'Alan Kay').
	
		
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:09:42'!
test05AddToCartIsSuccessfullyWithValidCartId

	| internalApi responseCreate responseAdd |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseAdd _ internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3 on: (DateAndTime now). 

	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	! !

!methodRemoval: InternalAPITest #test05AddToCartSuccessfulWithCartId stamp: 'eb 12/2/2020 20:09:42'!
test05AddToCartSuccessfulWithCartId

	| internalApi responseCreate responseAdd |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseAdd _ internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3 on: (DateAndTime now). 

	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	!
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:11:09' prior: 51002814!
test05AddToCartIsSuccessfullyWithValidCartId

	| internalApi responseCreate responseAdd |
	
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseAdd _ internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3 on: (DateAndTime now). 

	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:11:29' prior: 51002848!
test05AddToCartIsSuccessfullyWithValidCartId

	| internalApi responseCreate responseAdd |
	
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	responseAdd _ internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3 on: (DateAndTime now). 
	self assert: responseAdd code = 0.
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:11:53' prior: 51002866!
test05AddToCartIsSuccessfullyWithValidCartId
	| internalApi responseCreate responseAdd |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	responseAdd _ internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3 on: (DateAndTime now). 
	self assert: responseAdd code = 0.
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:12:17' prior: 51002884!
test05AddToCartIsSuccessfullyWithValidCartId
	| internalApi responseCreate responseAdd |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	responseAdd _ internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3 on: (DateAndTime now). 
	self assertSuccessfullyResponse: responseAdd .
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:12:36' prior: 51002901!
test05AddToCartIsSuccessfullyWithValidCartId
	| internalApi validCartId responseAdd |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	
	validCartId _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	responseAdd _ internalApi addToCart: validCartId payload withISBN: 'book' withQuantity: 3 on: (DateAndTime now). 
	self assertSuccessfullyResponse: responseAdd .
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:12:46' prior: 51002919!
test05AddToCartIsSuccessfullyWithValidCartId
	| internalApi validCartId responseAdd |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	
	validCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload.
	responseAdd _ internalApi addToCart: validCartId payload withISBN: 'book' withQuantity: 3 on: (DateAndTime now). 
	self assertSuccessfullyResponse: responseAdd .
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:12:57' prior: 51002937!
test05AddToCartIsSuccessfullyWithValidCartId
	| internalApi validCartId responseAdd |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	
	validCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload.
	responseAdd _ internalApi addToCart: validCartId withISBN: 'book' withQuantity: 3 on: (DateAndTime now). 
	self assertSuccessfullyResponse: responseAdd .
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPI methodsFor: 'API' stamp: 'eb 12/2/2020 20:13:36'!
add: aCartId toCart: aISBN withQuantity: aQuantity on: aDate
	
	^ self ensureExecutionOf: [ self addToCart: aCartId withISBN: aISBN withQuantity: aQuantity ] withCart: aCartId validOn: aDate.
	
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 20:13:36' prior: 51002955!
test05AddToCartIsSuccessfullyWithValidCartId
	| internalApi validCartId responseAdd |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	
	validCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload.
	responseAdd _ internalApi add: validCartId toCart: 'book' withQuantity: 3 on: (DateAndTime now). 
	self assertSuccessfullyResponse: responseAdd .
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 20:13:36' prior: 51001537!
test11ListCartWithOnlyItemIntoCart

	| internalApi responseCreate responseList ISBN idCart listItems |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN withOccurrences: 3.
	
	self assert: responseList payload = listItems.

	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 20:13:36' prior: 51001637!
test08AddToCartUnsuccessfulWithIvalidISBN

	| responseCreate internalApi idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ self invalidISBN.
	
	self should: [ internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). self fail]  
		raise: Error  
		withMessageText: Cart invalidItemErrorMessage.
	
	
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 20:13:36' prior: 51001557!
test12ListCartWithManyItemsIntoCart

	| internalApi responseCreate responseList ISBN1 ISBN2 idCart listItems |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi add: idCart toCart: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi add: idCart toCart: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN1 withOccurrences: 3.
	listItems add: ISBN2 withOccurrences: 5.
	
	self assert: responseList payload = listItems.

	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 20:13:37' prior: 51001772!
test17CheckOutUnsuccessfulWithInvalidUser

	| internalApi responseCreate responseCheckOut idCart creditCard ISBN |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	creditCard _ testObjectFactory expiredCreditCard.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi add: idCart toCart: ISBN withQuantity: 3 on: testObjectFactory today . 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCard: creditCard ofOwner: 'Edsger Dijkstra' on: testObjectFactory today.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 20:13:37' prior: 51001745!
test16CheckOutUnsuccessfulWithExpiredCreditCard

	| internalApi responseCreate responseCheckOut idCart creditCard ISBN |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	creditCard _ testObjectFactory expiredCreditCard.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi add: idCart toCart: ISBN withQuantity: 3 on: testObjectFactory today . 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCard: creditCard ofOwner: 'Alan Kay' on: testObjectFactory today.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 20:13:37' prior: 51001674!
test13CheckOutSuccessfulWithNotEmptyCart

	| internalApi responseCreate responseCheckOut ISBN1 ISBN2 idCart creditCard date |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi add: idCart toCart: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi add: idCart toCart: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	date _ DateAndTime now month.
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload = 1.
	
	self assert: responseCheckOut code = 0.! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 20:13:37' prior: 51001619!
test07AddToCartUnsuccessfulWithCartInvalid

	| internalApi responseAdd idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ self invalidIdCart.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: InternalAPI cartNotRegisteredErrorDescription.
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 20:13:37' prior: 51001599!
test06AddToCartSuccessfulEffectivlyAddedToCart

	| internalApi responseCreate responseAdd idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 

	self assert: (internalApi cart: idCart has: ISBN times: 3).
	
	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 20:13:37' prior: 51001655!
test09AddToCartUnsuccessfulWithIvalidISBN

	| responseCreate internalApi responseAdd idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi add: idCart toCart: ISBN withQuantity: 0 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: Cart invalidQuantityErrorMessage.
	! !

!methodRemoval: InternalAPI #addToCart:withISBN:withQuantity:on: stamp: 'eb 12/2/2020 20:13:37'!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity on: aDate
	
	^ self ensureExecutionOf: [ self addToCart: aCartId withISBN: aISBN withQuantity: aQuantity ] withCart: aCartId validOn: aDate.
	
	!
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:15:03' prior: 51002982!
test05AddToCartIsSuccessfullyWithValidCartId
	| internalApi validCartId responseAdd |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	
	validCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload.
	responseAdd _ internalApi 
		add: testObjectFactory itemSellByTheStore 
		toCart: validCartId
		withQuantity: 3
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: responseAdd .
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:16:09' prior: 51003219!
test05AddToCartIsSuccessfullyWithValidCartId
	| internalApi validCartId addResponse |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	
	validCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload.
	addResponse _ internalApi 
		add: testObjectFactory itemSellByTheStore 
		toCart: validCartId
		withQuantity: 3
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: addResponse .
	self assert: addResponse payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:17:42'!
test06AddToCartSuccessfullyEffectivlyAddsToCart

	| internalApi responseCreate responseAdd idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 

	self assert: (internalApi cart: idCart has: ISBN times: 3).
	
	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	! !

!methodRemoval: InternalAPITest #test06AddToCartSuccessfulEffectivlyAddedToCart stamp: 'eb 12/2/2020 20:17:42'!
test06AddToCartSuccessfulEffectivlyAddedToCart

	| internalApi responseCreate responseAdd idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 

	self assert: (internalApi cart: idCart has: ISBN times: 3).
	
	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	!
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:17:45'!
test06AddToCartSuccessfulElyffectivlyAddedToCart

	| internalApi responseCreate responseAdd idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 

	self assert: (internalApi cart: idCart has: ISBN times: 3).
	
	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	! !

!methodRemoval: InternalAPITest #test06AddToCartSuccessfulElyffectivlyAddedToCart stamp: 'eb 12/2/2020 20:17:48'!
test06AddToCartSuccessfulElyffectivlyAddedToCart

	| internalApi responseCreate responseAdd idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 

	self assert: (internalApi cart: idCart has: ISBN times: 3).
	
	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	!
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:18:31' prior: 51003256!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| internalApi responseCreate responseAdd idCart ISBN|
	internalApi _ testObjectFactory internalApi.
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	idCart _ responseCreate payload.
	ISBN _ 'book'.
	responseAdd _ internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 
	self assert: (internalApi cart: idCart has: ISBN times: 3).
	self assert: responseAdd code = 0.
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:19:15' prior: 51003338!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| internalApi responseCreate responseAdd idCart ISBN|
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	idCart _ responseCreate payload.
	ISBN _ 'book'.
	responseAdd _ internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 
	self assert: (internalApi cart: idCart has: ISBN times: 3).
	self assert: responseAdd code = 0.
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:19:27' prior: 51003358!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| internalApi responseCreate responseAdd cartId ISBN|
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	cartId _ responseCreate payload.
	ISBN _ 'book'.
	responseAdd _ internalApi add: cartId toCart: ISBN withQuantity: 3 on: (DateAndTime now). 
	self assert: (internalApi cart: cartId has: ISBN times: 3).
	self assert: responseAdd code = 0.
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:19:48' prior: 51003379!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| internalApi responseAdd cartId ISBN|
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	cartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload .
	ISBN _ 'book'.
	responseAdd _ internalApi add: cartId toCart: ISBN withQuantity: 3 on: (DateAndTime now). 
	self assert: (internalApi cart: cartId has: ISBN times: 3).
	self assert: responseAdd code = 0.
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:22:16' prior: 51003400!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| internalApi responseAdd cartId |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	cartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload .
	responseAdd _ internalApi 
		add: testObjectFactory itemSellByTheStore
		toCart: cartId 
		withQuantity: 3 
		on: testObjectFactory today. 
	self assert: (internalApi cart: cartId has: testObjectFactory itemSellByTheStore times: 3).
	self assertSuccessfullyResponse: responseAdd .
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:22:42' prior: 51003419!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| internalApi addResponse cartId |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	cartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload .
	addResponse _ internalApi 
		add: testObjectFactory itemSellByTheStore
		toCart: cartId 
		withQuantity: 3 
		on: testObjectFactory today. 
	self assert: (internalApi cart: cartId has: testObjectFactory itemSellByTheStore times: 3).
	self assertSuccessfullyResponse: addResponse .
	self assert: addResponse payload equals: 'OK'.
	! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 20:23:32'!
cart: aCartId has: aISBN withQuantity: anAmount 
	
	| cart |
	
	cart _ carts at: aCartId .
	
	^ (cart includes: aISBN) and: [(cart occurrencesOf: aISBN) = anAmount ].! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 20:23:32' prior: 51003440!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| internalApi addResponse cartId |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	cartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload .
	addResponse _ internalApi 
		add: testObjectFactory itemSellByTheStore
		toCart: cartId 
		withQuantity: 3 
		on: testObjectFactory today. 
	self assert: (internalApi cart: cartId has: testObjectFactory itemSellByTheStore withQuantity: 3).
	self assertSuccessfullyResponse: addResponse .
	self assert: addResponse payload equals: 'OK'.
	! !

!methodRemoval: InternalAPI #cart:has:times: stamp: 'eb 12/2/2020 20:23:32'!
cart: aCartId has: aISBN times: anAmount 
	
	| cart |
	
	cart _ carts at: aCartId .
	
	^ (cart includes: aISBN) and: [(cart occurrencesOf: aISBN) = anAmount ].!
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:23:57' prior: 51003470!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| internalApi addResponse cartId |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	cartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload .
	addResponse _ internalApi 
		add: testObjectFactory itemSellByTheStore
		toCart: cartId 
		withQuantity: 3 
		on: testObjectFactory today. 
	self assert: (internalApi cart: cartId has: testObjectFactory itemSellByTheStore withQuantity: 3).
	self assertSuccessfullyResponse: addResponse .
	self assert: addResponse payload equals: 'OK'.! !

TestCase subclass: #InternalAPITest
	instanceVariableNames: 'internalApi debitBehavior testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #InternalAPITest
	instanceVariableNames: 'debitBehavior testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalAPITest category: #TusLibros stamp: 'eb 12/2/2020 20:26:26'!
TestCase subclass: #InternalAPITest
	instanceVariableNames: 'debitBehavior testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #InternalAPITest
	instanceVariableNames: 'debitBehavior testObjectFactory internalApi1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalAPITest category: #TusLibros stamp: 'eb 12/2/2020 20:26:41'!
TestCase subclass: #InternalAPITest
	instanceVariableNames: 'debitBehavior testObjectFactory internalApi1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPITest methodsFor: 'setUp' stamp: 'eb 12/2/2020 20:27:03' prior: 51001800 overrides: 16927572!
setUp 
	debitBehavior _ [ :anAmount :aCreditCard | ].
	testObjectFactory _ StoreTestObjectsFactory new.
	
	internalApi1 _ testObjectFactory internalApiUsingMerchantProccessor: self.! !

!methodRemoval: InternalAPITest #invalidIdCart stamp: 'eb 12/2/2020 20:27:50'!
invalidIdCart

	^ 'Invalid id cart'!

!methodRemoval: InternalAPITest #invalidISBN stamp: 'eb 12/2/2020 20:27:51'!
invalidISBN

	^ 'Invalid ISBN'!

!methodRemoval: InternalAPITest #invalidCreditCard stamp: 'eb 12/2/2020 20:27:52'!
invalidCreditCard

	^ 'Invalid credit card'!
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:28:39' prior: 51002592!
test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword

	| createResponse  |
	createResponse _ internalApi1 createCartFor: 'Dan Ingalls' with: 'smalltalk'.
	self assertSuccessfullyResponse: createResponse.! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:28:59' prior: 51003573!
test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword

	| createResponse  |
	createResponse _ internalApi1 createCartFor: 'Dan Ingalls' with: 'smalltalk'.
	self assertSuccessfullyResponse: (internalApi1 createCartFor: 'Dan Ingalls' with: 'smalltalk').! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:29:07' prior: 51003583!
test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword
	self assertSuccessfullyResponse: (internalApi1 createCartFor: 'Dan Ingalls' with: 'smalltalk').! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:29:37'!
test02CreateCartReturnsDifferentIdsPerCustomer
	| internalApi firstCustomerCartId secondCustomerCartId |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	firstCustomerCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload .
	secondCustomerCartId _ (internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk') payload.	
	self deny: firstCustomerCartId = secondCustomerCartId
	! !

!methodRemoval: InternalAPITest #test02CreateCartReturnsDifferentIdPerCustomer stamp: 'eb 12/2/2020 20:29:37'!
test02CreateCartReturnsDifferentIdPerCustomer
	| internalApi firstCustomerCartId secondCustomerCartId |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	firstCustomerCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload .
	secondCustomerCartId _ (internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk') payload.	
	self deny: firstCustomerCartId = secondCustomerCartId
	!
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:30:09' prior: 51003603!
test02CreateCartReturnsDifferentIdsPerCustomer
	| firstCustomerCartId secondCustomerCartId |
	firstCustomerCartId _ (internalApi1 createCartFor: 'Alan Kay' with: 'objetos') payload .
	secondCustomerCartId _ (internalApi1 createCartFor: 'Dan Ingalls' with: 'smalltalk') payload.	
	self deny: firstCustomerCartId = secondCustomerCartId
	! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:31:04' prior: 51002760!
test03CreateCartIsUnsuccessfullyWithUnregisteredClientId
	| response |
	response _ internalApi1 createCartFor: 'Edsger Dijkstra' with: 'nanoDijkstra'.
	self assertUnsuccesfullyResponse: response.
	self assert: response payload equals: InternalAPI userNotRegisteredErrorDescription. 
		
	
		
	! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:31:44' prior: 51002801!
test04CreateCartSuccessfullyEffectivlyCreatesCart
	| response |
	response _ internalApi1 createCartFor: 'Alan Kay' with: 'objetos'.
	self assertSuccessfullyResponse: response.
	self assert: (internalApi1 hasCartsOf: 'Alan Kay').
	
		
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:34:36' prior: 51003238!
test05AddToCartIsSuccessfullyWithValidCartId
	| validCartId addResponse |
	
	validCartId _ (internalApi1 createCartFor: 'Alan Kay' with: 'objetos') payload.
	addResponse _ internalApi1 
		add: testObjectFactory itemSellByTheStore 
		toCart: validCartId
		withQuantity: 3
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: addResponse .
	self assert: addResponse payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:35:36' prior: 51003499!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| addResponse cartId |
	cartId _ (internalApi1 createCartFor: 'Alan Kay' with: 'objetos') payload .
	addResponse _ internalApi1 
		add: testObjectFactory itemSellByTheStore
		toCart: cartId 
		withQuantity: 3 
		on: testObjectFactory today. 
	self assert: (internalApi1 cart: cartId has: testObjectFactory itemSellByTheStore withQuantity: 3).
	self assertSuccessfullyResponse: addResponse .
	self assert: addResponse payload equals: 'OK'.! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:36:41'!
validCartId

	^ (internalApi1 createCartFor: 'Alan Kay' with: 'objetos') payload! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:36:41' prior: 51003675!
test05AddToCartIsSuccessfullyWithValidCartId
	| validCartId addResponse |
	
	validCartId _ self validCartId.
	addResponse _ internalApi1 
		add: testObjectFactory itemSellByTheStore 
		toCart: validCartId
		withQuantity: 3
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: addResponse .
	self assert: addResponse payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:36:54' prior: 51003691!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| addResponse cartId |
	cartId _ self validCartId .
	addResponse _ internalApi1 
		add: testObjectFactory itemSellByTheStore
		toCart: cartId 
		withQuantity: 3 
		on: testObjectFactory today. 
	self assert: (internalApi1 cart: cartId has: testObjectFactory itemSellByTheStore withQuantity: 3).
	self assertSuccessfullyResponse: addResponse .
	self assert: addResponse payload equals: 'OK'.! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:37:48'!
successfullyAddResponseFor: cartId

	^ internalApi1 
		add: testObjectFactory itemSellByTheStore
		toCart: cartId 
		withQuantity: 3 
		on: testObjectFactory today! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:37:48' prior: 51003730!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| addResponse cartId |
	cartId _ self validCartId .
	addResponse _ self successfullyAddResponseFor: cartId. 
	self assert: (internalApi1 cart: cartId has: testObjectFactory itemSellByTheStore withQuantity: 3).
	self assertSuccessfullyResponse: addResponse .
	self assert: addResponse payload equals: 'OK'.! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:38:11' prior: 51003715!
test05AddToCartIsSuccessfullyWithValidCartId
	| addResponse |
	
	addResponse _ self successfullyAddResponseFor: self validCartId. 

	self assertSuccessfullyResponse: addResponse .
	self assert: addResponse payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:38:47' prior: 51003756!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| addResponse |
	addResponse _ self successfullyAddResponseFor: self validCartId. 
	self assert: (internalApi1 cart: self validCartId has: testObjectFactory itemSellByTheStore withQuantity: 3).
	self assertSuccessfullyResponse: addResponse .
	self assert: addResponse payload equals: 'OK'.! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:39:30' prior: 51003782!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| addResponse |
	addResponse _ self successfullyAddResponseFor: self validCartId. 
	self assert: (internalApi1 cart: self validCartId has: testObjectFactory itemSellByTheStore withQuantity: 3).! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:39:45' prior: 51003796!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	self successfullyAddResponseFor: self validCartId. 
	self assert: (internalApi1 cart: self validCartId has: testObjectFactory itemSellByTheStore withQuantity: 3).! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:40:55' prior: 51003807!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	self successfullyAddResponseFor: self validCartId. 
	self assertSuccessfullyAddResponseAddsItemsCorrectly.

	self assert: (internalApi1 cart: self validCartId has: testObjectFactory itemSellByTheStore withQuantity: 3).! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:41:28'!
assertSuccessfullyAddResponseAddsItemsCorrectly

	self assert: (internalApi1 
		cart: self validCartId 
		has: testObjectFactory itemSellByTheStore 
		withQuantity: 3).! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:42:30' prior: 51003817!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	self successfullyAddResponseFor: self validCartId. 
	self assertSuccessfullyAddResponseAddsItemsCorrectly.
! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:42:56' prior: 51003837!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	self successfullyAddResponseFor: self validCartId. 
	self assertSuccessfullyAddResponseAddsItemsCorrectlyFor: self validCartId.
! !
!InternalAPITest methodsFor: 'assertions' stamp: 'eb 12/2/2020 20:43:13'!
assertSuccessfullyAddResponseAddsItemsCorrectlyFor: aCartId

	self assert: (internalApi1 
		cart: aCartId
		has: testObjectFactory itemSellByTheStore 
		withQuantity: 3).! !
!InternalAPITest methodsFor: 'responses' stamp: 'eb 12/2/2020 20:43:31' prior: 51003747!
successfullyAddResponseFor: aCartId

	^ internalApi1 
		add: testObjectFactory itemSellByTheStore
		toCart: aCartId 
		withQuantity: 3 
		on: testObjectFactory today! !

!methodRemoval: InternalAPITest #assertSuccessfullyAddResponseAddsItemsCorrectly stamp: 'eb 12/2/2020 20:43:38'!
assertSuccessfullyAddResponseAddsItemsCorrectly

	self assert: (internalApi1 
		cart: self validCartId 
		has: testObjectFactory itemSellByTheStore 
		withQuantity: 3).!
!InternalAPITest methodsFor: 'assertions' stamp: 'eb 12/2/2020 20:43:49' prior: 51002586!
assertSuccessfullyResponse: aResponse

	^ self assert: aResponse code = 0! !
!InternalAPITest methodsFor: 'assertions' stamp: 'eb 12/2/2020 20:43:55' prior: 51002754!
assertUnsuccesfullyResponse: aResponse

	^ self assert: aResponse code = 1! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:51:24'!
test07AddToCartIsUnsuccessfullyWithInvalidCartId

	| internalApi responseAdd idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ self invalidIdCart.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: InternalAPI cartNotRegisteredErrorDescription.
	! !

!methodRemoval: InternalAPITest #test07AddToCartUnsuccessfulWithCartInvalid stamp: 'eb 12/2/2020 20:51:24'!
test07AddToCartUnsuccessfulWithCartInvalid

	| internalApi responseAdd idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ self invalidIdCart.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: InternalAPI cartNotRegisteredErrorDescription.
	!
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:51:45' prior: 51003891!
test07AddToCartIsUnsuccessfullyWithInvalidCartId

	| internalApi responseAdd idCart ISBN|
	 	
	internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ self invalidIdCart.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: InternalAPI cartNotRegisteredErrorDescription.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:54:20' prior: 51003928!
test07AddToCartIsUnsuccessfullyWithInvalidCartId

	| responseAdd idCart ISBN|	
	idCart _ self invalidIdCart.
	ISBN _ 'book'.
	responseAdd _ internalApi1 
		add: testObjectFactory itemSellByTheStore 
		toCart: testObjectFactory invalidCartId
		withQuantity: 3 
		on: testObjectFactory now.
	self assertUnsuccesfullyResponse: responseAdd .
	self assert: responseAdd payload equals: InternalAPI cartNotRegisteredErrorDescription.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:55:03' prior: 51003945!
test07AddToCartIsUnsuccessfullyWithInvalidCartId

	| addResponse |	
	addResponse _ internalApi1 
		add: testObjectFactory itemSellByTheStore 
		toCart: testObjectFactory invalidCartId
		withQuantity: 3 
		on: testObjectFactory now.
	self assertUnsuccesfullyResponse: addResponse .
	self assert: addResponse payload equals: InternalAPI cartNotRegisteredErrorDescription.
	! !
!InternalAPITest methodsFor: 'carts' stamp: 'eb 12/2/2020 20:55:38'!
invalidCartId

	^ 'Invalid cart id'.! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:55:47' prior: 51003962!
test07AddToCartIsUnsuccessfullyWithInvalidCartId

	| addResponse |	
	addResponse _ internalApi1 
		add: testObjectFactory itemSellByTheStore 
		toCart: self invalidCartId
		withQuantity: 3 
		on: testObjectFactory now.
	self assertUnsuccesfullyResponse: addResponse .
	self assert: addResponse payload equals: InternalAPI cartNotRegisteredErrorDescription.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:57:32'!
test08AddToCartIsUnsuccessfullyWithIvalidISBN

	| responseCreate internalApi idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ self invalidISBN.
	
	self should: [ internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). self fail]  
		raise: Error  
		withMessageText: Cart invalidItemErrorMessage.
	
	
	! !

!methodRemoval: InternalAPITest #test08AddToCartUnsuccessfulWithIvalidISBN stamp: 'eb 12/2/2020 20:57:32'!
test08AddToCartUnsuccessfulWithIvalidISBN

	| responseCreate internalApi idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ self invalidISBN.
	
	self should: [ internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). self fail]  
		raise: Error  
		withMessageText: Cart invalidItemErrorMessage.
	
	
	!

!methodRemoval: InternalAPITest #test09AddToCartUnsuccessfulWithIvalidISBN stamp: 'eb 12/2/2020 20:58:22'!
test09AddToCartUnsuccessfulWithIvalidISBN

	| responseCreate internalApi responseAdd idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi add: idCart toCart: ISBN withQuantity: 0 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: Cart invalidQuantityErrorMessage.
	!
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 21:02:27' prior: 51003995!
test08AddToCartIsUnsuccessfullyWithIvalidISBN
	| cartId addResponse |		
	cartId _ self validCartId .
	addResponse _ internalApi1
		add: self invalidCartId 
		toCart: cartId
		withQuantity: 3
		on: testObjectFactory now.
	
	self assertUnsuccesfullyResponse: addResponse .
	
	self assert: addResponse payload = Cart invalidItemErrorMessage.
	
	
	! !

!testRun: #InternalAPITest #test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword stamp: 'eb 12/2/2020 21:02:34'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdsPerCustomer stamp: 'eb 12/2/2020 21:02:34'!
PASSED!

!testRun: #InternalAPITest #test03CreateCartIsUnsuccessfullyWithUnregisteredClientId stamp: 'eb 12/2/2020 21:02:34'!
PASSED!

!testRun: #InternalAPITest #test04CreateCartSuccessfullyEffectivlyCreatesCart stamp: 'eb 12/2/2020 21:02:34'!
PASSED!

!testRun: #InternalAPITest #test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword stamp: 'eb 12/2/2020 21:02:37'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdsPerCustomer stamp: 'eb 12/2/2020 21:02:37'!
PASSED!

!testRun: #InternalAPITest #test03CreateCartIsUnsuccessfullyWithUnregisteredClientId stamp: 'eb 12/2/2020 21:02:37'!
PASSED!

!testRun: #InternalAPITest #test04CreateCartSuccessfullyEffectivlyCreatesCart stamp: 'eb 12/2/2020 21:02:37'!
PASSED!

!testRun: #InternalAPITest #test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword stamp: 'eb 12/2/2020 21:02:44'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdsPerCustomer stamp: 'eb 12/2/2020 21:02:44'!
PASSED!

!testRun: #InternalAPITest #test03CreateCartIsUnsuccessfullyWithUnregisteredClientId stamp: 'eb 12/2/2020 21:02:44'!
PASSED!

!testRun: #InternalAPITest #test04CreateCartSuccessfullyEffectivlyCreatesCart stamp: 'eb 12/2/2020 21:02:44'!
PASSED!

!testRun: #InternalAPITest #test05AddToCartIsSuccessfullyWithValidCartId stamp: 'eb 12/2/2020 21:02:48'!
FAILURE!

!testRun: #InternalAPITest #test06AddToCartSuccessfullyEffectivlyAddsToCart stamp: 'eb 12/2/2020 21:02:48'!
FAILURE!

!testRun: #InternalAPITest #test07AddToCartIsUnsuccessfullyWithInvalidCartId stamp: 'eb 12/2/2020 21:02:48'!
ERROR!

!testRun: #InternalAPITest #test08AddToCartIsUnsuccessfullyWithIvalidISBN stamp: 'eb 12/2/2020 21:02:48'!
ERROR!

!testRun: #InternalAPITest #test05AddToCartIsSuccessfullyWithValidCartId stamp: 'eb 12/2/2020 21:03:28'!
FAILURE!

!testRun: #InternalAPITest #test06AddToCartSuccessfullyEffectivlyAddsToCart stamp: 'eb 12/2/2020 21:03:28'!
FAILURE!

!testRun: #InternalAPITest #test07AddToCartIsUnsuccessfullyWithInvalidCartId stamp: 'eb 12/2/2020 21:03:28'!
ERROR!

!testRun: #InternalAPITest #test08AddToCartIsUnsuccessfullyWithIvalidISBN stamp: 'eb 12/2/2020 21:03:28'!
ERROR!

!testRun: #InternalAPITest #test05AddToCartIsSuccessfullyWithValidCartId stamp: 'eb 12/2/2020 21:03:32'!
FAILURE!

!testRun: #InternalAPITest #test05AddToCartIsSuccessfullyWithValidCartId stamp: 'eb 12/2/2020 21:03:32'!
FAILURE!
!InternalAPI methodsFor: 'API' stamp: 'eb 12/2/2020 21:05:11' prior: 51002972!
add: anItem toCart: aCartId withQuantity: aQuantity on: aDate
	^ self 
		ensureExecutionOf: [ self addToCart: aCartId withISBN: anItem withQuantity: aQuantity ] 
		withCart: aCartId 
		validOn: aDate.
	
	! !
!InternalAPI methodsFor: 'API' stamp: 'eb 12/2/2020 21:05:36'!
add: aCartId toCart: aISBN withQuantity: aQuantity
	
	| cart |
	
	[ cart _ carts at: aCartId ] on: Error do: [^ UnsuccessfulResponse with: (self class cartNotRegisteredErrorDescription) ].
	
	[cart add: aQuantity of: aISBN] on: InvalidBookQuantity do: [:error | ^ UnsuccessfulResponse with: error messageText ].
	
	^ SuccessfulResponse with: 'OK'.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 21:05:36' prior: 51004147!
add: anItem toCart: aCartId withQuantity: aQuantity on: aDate
	^ self 
		ensureExecutionOf: [ self add: aCartId toCart: anItem withQuantity: aQuantity ] 
		withCart: aCartId 
		validOn: aDate.
	
	! !

!methodRemoval: InternalAPI #addToCart:withISBN:withQuantity: stamp: 'eb 12/2/2020 21:05:36'!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity
	
	| cart |
	
	[ cart _ carts at: aCartId ] on: Error do: [^ UnsuccessfulResponse with: (self class cartNotRegisteredErrorDescription) ].
	
	[cart add: aQuantity of: aISBN] on: InvalidBookQuantity do: [:error | ^ UnsuccessfulResponse with: error messageText ].
	
	^ SuccessfulResponse with: 'OK'.!
!InternalAPI methodsFor: 'API' stamp: 'eb 12/2/2020 21:07:12' prior: 51004156!
add: anItem toCart: aCartId withQuantity: aQuantity
	| cart |
	[ cart _ carts at: aCartId ] 
		on: Error 
		do: [ ^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
	[cart add: aQuantity of: anItem] 
		on: InvalidBookQuantity 
		do: [ :error | ^ UnsuccessfulResponse with: error messageText ].
	
	^ SuccessfulResponse with: 'OK'.! !
!InternalAPI methodsFor: 'API' stamp: 'eb 12/2/2020 21:07:16' prior: 51004195!
add: anItem toCart: aCartId withQuantity: aQuantity
	| cart |
	[ cart _ carts at: aCartId ] 
		on: Error 
		do: [ ^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
	[cart add: aQuantity of: anItem] 
		on: InvalidBookQuantity 
		do: [ :error | ^ UnsuccessfulResponse with: error messageText ].
	^ SuccessfulResponse with: 'OK'.! !
!InternalAPI methodsFor: 'API' stamp: 'eb 12/2/2020 21:07:31' prior: 51004171!
add: anItem toCart: aCartId withQuantity: aQuantity on: aDate
	^ self 
		ensureExecutionOf: [ self add: anItem toCart: aCartId withQuantity: aQuantity ] 
		withCart: aCartId 
		validOn: aDate.
	
	! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 21:07:50'!
ensureExecutionOf: aBlock withCart: aCartId isValidOn: aDate

	| returnValue |

	self ensureDateOf: aCartId isValidOn: aDate.
	
	returnValue _ aBlock value.
	
	self updateDateOf: aCartId to: aDate.
	
	^ returnValue .
	
	! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 21:07:50' prior: 51004223!
add: anItem toCart: aCartId withQuantity: aQuantity on: aDate
	^ self 
		ensureExecutionOf: [ self add: anItem toCart: aCartId withQuantity: aQuantity ] 
		withCart: aCartId 
		isValidOn: aDate.
	
	! !

!methodRemoval: InternalAPI #ensureExecutionOf:withCart:validOn: stamp: 'eb 12/2/2020 21:07:50'!
ensureExecutionOf: aBlock withCart: aCartId validOn: aDate

	| returnValue |

	self ensureDateOf: aCartId isValidOn: aDate.
	
	returnValue _ aBlock value.
	
	self updateDateOf: aCartId to: aDate.
	
	^ returnValue .
	
	!

!testRun: #InternalAPITest #test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword stamp: 'eb 12/2/2020 21:08:35'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdsPerCustomer stamp: 'eb 12/2/2020 21:08:35'!
PASSED!

!testRun: #InternalAPITest #test03CreateCartIsUnsuccessfullyWithUnregisteredClientId stamp: 'eb 12/2/2020 21:08:35'!
PASSED!

!testRun: #InternalAPITest #test04CreateCartSuccessfullyEffectivlyCreatesCart stamp: 'eb 12/2/2020 21:08:35'!
PASSED!

!testRun: #InternalAPITest #test05AddToCartIsSuccessfullyWithValidCartId stamp: 'eb 12/2/2020 21:08:37'!
PASSED!

!testRun: #InternalAPITest #test06AddToCartSuccessfullyEffectivlyAddsToCart stamp: 'eb 12/2/2020 21:08:37'!
FAILURE!

!testRun: #InternalAPITest #test07AddToCartIsUnsuccessfullyWithInvalidCartId stamp: 'eb 12/2/2020 21:08:37'!
ERROR!

!testRun: #InternalAPITest #test08AddToCartIsUnsuccessfullyWithIvalidISBN stamp: 'eb 12/2/2020 21:08:37'!
ERROR!

!testRun: #InternalAPITest #test05AddToCartIsSuccessfullyWithValidCartId stamp: 'eb 12/2/2020 21:08:44'!
PASSED!

!testRun: #InternalAPITest #test06AddToCartSuccessfullyEffectivlyAddsToCart stamp: 'eb 12/2/2020 21:08:46'!
FAILURE!

!testRun: #InternalAPITest #test06AddToCartSuccessfullyEffectivlyAddsToCart stamp: 'eb 12/2/2020 21:08:46'!
FAILURE!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 21:09:51' prior: 51003461!
cart: aCartId has: anItem withQuantity: aQuantity 
	| cart |
	cart _ carts at: aCartId .
	^ (cart includes: anItem) and: [ (cart occurrencesOf: anItem) = aQuantity ].! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 21:10:28' prior: 51003845!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| validCartId |
	
	validCartId _ self validCartId.
	
	self successfullyAddResponseFor: self validCartId. 
	self assertSuccessfullyAddResponseAddsItemsCorrectlyFor: self validCartId.
! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 21:10:35' prior: 51004313!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| cartId |
	
	cartId _ self validCartId.
	
	self successfullyAddResponseFor: self validCartId. 
	self assertSuccessfullyAddResponseAddsItemsCorrectlyFor: self validCartId.
! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 21:11:01' prior: 51004324!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| cartId |
	
	cartId _ self validCartId.
	
	self successfullyAddResponseFor: cartId. 
	self assertSuccessfullyAddResponseAddsItemsCorrectlyFor: cartId.
! !

!testRun: #InternalAPITest #test06AddToCartSuccessfullyEffectivlyAddsToCart stamp: 'eb 12/2/2020 21:11:04'!
PASSED!

!testRun: #InternalAPITest #test07AddToCartIsUnsuccessfullyWithInvalidCartId stamp: 'eb 12/2/2020 21:11:07'!
ERROR!

!testRun: #InternalAPITest #test07AddToCartIsUnsuccessfullyWithInvalidCartId stamp: 'eb 12/2/2020 21:11:07'!
ERROR!
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 21:11:16' prior: 51003981!
test07AddToCartIsUnsuccessfullyWithInvalidCartId

	| addResponse |	
	addResponse _ internalApi1 
		add: testObjectFactory itemSellByTheStore 
		toCart: self invalidCartId
		withQuantity: 3 
		on: testObjectFactory today.
	self assertUnsuccesfullyResponse: addResponse .
	self assert: addResponse payload equals: InternalAPI cartNotRegisteredErrorDescription.
	! !

!testRun: #InternalAPITest #test07AddToCartIsUnsuccessfullyWithInvalidCartId stamp: 'eb 12/2/2020 21:11:17'!
PASSED!

!testRun: #InternalAPITest #test08AddToCartIsUnsuccessfullyWithIvalidISBN stamp: 'eb 12/2/2020 21:11:23'!
ERROR!

!testRun: #InternalAPITest #test08AddToCartIsUnsuccessfullyWithIvalidISBN stamp: 'eb 12/2/2020 21:11:23'!
ERROR!
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 21:11:29' prior: 51004051!
test08AddToCartIsUnsuccessfullyWithIvalidISBN
	| cartId addResponse |		
	cartId _ self validCartId .
	addResponse _ internalApi1
		add: self invalidCartId 
		toCart: cartId
		withQuantity: 3
		on: testObjectFactory today.
	
	self assertUnsuccesfullyResponse: addResponse .
	
	self assert: addResponse payload = Cart invalidItemErrorMessage.
	
	
	! !

!testRun: #InternalAPITest #test08AddToCartIsUnsuccessfullyWithIvalidISBN stamp: 'eb 12/2/2020 21:11:30'!
ERROR!

!testRun: #InternalAPITest #test08AddToCartIsUnsuccessfullyWithIvalidISBN stamp: 'eb 12/2/2020 21:11:30'!
ERROR!
!InternalAPI methodsFor: 'add to cart' stamp: 'eb 12/2/2020 21:12:41' prior: 51004243!
add: anItem toCart: aCartId withQuantity: aQuantity on: aDate
	[ ^ self 
		ensureExecutionOf: [ self add: anItem toCart: aCartId withQuantity: aQuantity ] 
		withCart: aCartId 
		isValidOn: aDate. ] on: Error do: [ :error | ^ UnsuccessfulResponse with: error messageText ].
	
	! !

!testRun: #InternalAPITest #test08AddToCartIsUnsuccessfullyWithIvalidISBN stamp: 'eb 12/2/2020 21:12:48'!
PASSED!
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:13:54'!
test09ListCartWithEmptyCart

	| internalApi responseCreate responseList |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseList _ internalApi listCart: responseCreate payload.
	
	self assert: responseList payload isEmpty.

	! !

!methodRemoval: InternalAPITest #test10ListCartWithEmptyCart stamp: 'eb 12/2/2020 21:13:54'!
test10ListCartWithEmptyCart

	| internalApi responseCreate responseList |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseList _ internalApi listCart: responseCreate payload.
	
	self assert: responseList payload isEmpty.

	!
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:16:35' prior: 51004417!
test09ListCartWithEmptyCart
	| cartId  |
	cartId _ self validCartId .	
	self assert: (internalApi1 listCart: cartId) payload isEmpty.

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:17:15' prior: 51004444!
test09ListCartWithEmptyCart
	| cartId |
	cartId _ self validCartId .	
	self assert: (internalApi1 listCart: cartId) payload isEmpty.

	! !

!testRun: #InternalAPITest #test09ListCartWithEmptyCart stamp: 'eb 12/2/2020 21:23:36'!
PASSED!
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:25:00'!
test11ListCartWithOnlyOneItemIntoCart

	| internalApi responseCreate responseList ISBN idCart listItems |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN withOccurrences: 3.
	
	self assert: responseList payload = listItems.

	! !

!methodRemoval: InternalAPITest #test11ListCartWithOnlyItemIntoCart stamp: 'eb 12/2/2020 21:25:00'!
test11ListCartWithOnlyItemIntoCart

	| internalApi responseCreate responseList ISBN idCart listItems |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN withOccurrences: 3.
	
	self assert: responseList payload = listItems.

	!
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:25:22' prior: 51004462!
test11ListCartWithOnlyOneItemIntoCart
	| internalApi responseCreate responseList ISBN idCart listItems |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN withOccurrences: 3.
	
	self assert: responseList payload = listItems.

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:27:24'!
test10ListCartWithNotEmptyCart
	| cartId |
	cartId _ self validCartId .	
	self assert: (internalApi1 listCart: cartId) payload isEmpty.

	! !

!methodRemoval: InternalAPITest #test11ListCartWithOnlyOneItemIntoCart stamp: 'eb 12/2/2020 21:27:26'!
test11ListCartWithOnlyOneItemIntoCart
	| internalApi responseCreate responseList ISBN idCart listItems |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN withOccurrences: 3.
	
	self assert: responseList payload = listItems.

	!

!methodRemoval: InternalAPITest #test12ListCartWithManyItemsIntoCart stamp: 'eb 12/2/2020 21:27:27'!
test12ListCartWithManyItemsIntoCart

	| internalApi responseCreate responseList ISBN1 ISBN2 idCart listItems |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi add: idCart toCart: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi add: idCart toCart: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN1 withOccurrences: 3.
	listItems add: ISBN2 withOccurrences: 5.
	
	self assert: responseList payload = listItems.

	!
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:27:34'!
test10ListCartWithInvalidCart
	| cartId |
	cartId _ self validCartId .	
	self assert: (internalApi1 listCart: cartId) payload isEmpty.

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:27:40'!
test11ListCartWithInvalidCart
	| cartId |
	cartId _ self validCartId .	
	self assert: (internalApi1 listCart: cartId) payload isEmpty.

	! !

!methodRemoval: InternalAPITest #test10ListCartWithInvalidCart stamp: 'eb 12/2/2020 21:27:40'!
test10ListCartWithInvalidCart
	| cartId |
	cartId _ self validCartId .	
	self assert: (internalApi1 listCart: cartId) payload isEmpty.

	!
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:31:55' prior: 51004523!
test10ListCartWithNotEmptyCart
	| cartId listResponse |
	cartId _ self validCartId .	
	
	self successfullyAddResponseFor: cartId.
	
	listResponse _ internalApi1 listCart: cartId .
	self assert: (internalApi1 listCart: cartId) payload isEmpty.

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:34:46' prior: 51004598!
test10ListCartWithNotEmptyCart
	| cartId listResponse |
	cartId _ self validCartId .	
	
	self successfullyAddResponseFor: cartId.
	
	listResponse _ internalApi1 listCart: cartId .
	self assert: (listResponse occurrencesOf: self itemSellByTheStore) = 3.

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:37:17' prior: 51004609!
test10ListCartWithNotEmptyCart
	| cartId listResponse |
	cartId _ self validCartId .	
	
	self successfullyAddResponseFor: cartId.
	
	listResponse _ internalApi1 listCart: cartId .
	self assert: (listResponse = Bag new add: self itemSellByTheStore withOccurences: 3).

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:37:56' prior: 51004621!
test10ListCartWithNotEmptyCart
	| cartId listResponse |
	cartId _ self validCartId .	
	
	self successfullyAddResponseFor: cartId.
	
	listResponse _ internalApi1 listCart: cartId .
	self assert: (listResponse = Bag new add: self itemSellByTheStore withOccurrences: 3).

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:38:13' prior: 51004633!
test10ListCartWithNotEmptyCart
	| cartId listResponse |
	cartId _ self validCartId .	
	
	self successfullyAddResponseFor: cartId.
	
	listResponse _ internalApi1 listCart: cartId .
	self assert: (listResponse = Bag new add: self itemSellByTheStore withOccurrences: 3).

	! !

!testRun: #InternalAPITest #test09ListCartWithEmptyCart stamp: 'eb 12/2/2020 21:38:14'!
PASSED!

!testRun: #InternalAPITest #test10ListCartWithNotEmptyCart stamp: 'eb 12/2/2020 21:38:14'!
ERROR!

!testRun: #InternalAPITest #test11ListCartWithInvalidCart stamp: 'eb 12/2/2020 21:38:15'!
PASSED!

!testRun: #InternalAPITest #test10ListCartWithNotEmptyCart stamp: 'eb 12/2/2020 21:38:15'!
ERROR!
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:38:26' prior: 51004645!
test10ListCartWithNotEmptyCart
	| cartId listResponse |
	cartId _ self validCartId .	
	
	self successfullyAddResponseFor: cartId.
	
	listResponse _ internalApi1 listCart: cartId .
	self assert: (listResponse = Bag new add: testObjectFactory itemSellByTheStore withOccurrences: 3).

	! !

!testRun: #InternalAPITest #test10ListCartWithNotEmptyCart stamp: 'eb 12/2/2020 21:38:27'!
ERROR!
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:39:36' prior: 51004669!
test10ListCartWithNotEmptyCart
	| cartId listResponse targetElements |
	cartId _ self validCartId .	
	
	self successfullyAddResponseFor: cartId.
	
	listResponse _ internalApi1 listCart: cartId .
	
	targetElements _ Bag new.
	targetElements  add: testObjectFactory itemSellByTheStore withOccurrences: 3. 
	self assert: (listResponse = Bag new add: testObjectFactory itemSellByTheStore withOccurrences: 3).

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:40:12' prior: 51004684!
test10ListCartWithNotEmptyCart
	| cartId targetElements |
	cartId _ self validCartId .	
	
	self successfullyAddResponseFor: cartId.
		
	targetElements _ Bag new.
	
	targetElements  add: testObjectFactory itemSellByTheStore withOccurrences: 3. 
	self assert: targetElements equals: (internalApi1 listCart: cartId) .

	! !

!testRun: #InternalAPITest #test10ListCartWithNotEmptyCart stamp: 'eb 12/2/2020 21:40:29'!
FAILURE!

!testRun: #InternalAPITest #test10ListCartWithNotEmptyCart stamp: 'eb 12/2/2020 21:40:29'!
FAILURE!
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:41:19' prior: 51004452!
test09ListCartWithEmptyCart
	| cartId response |
	cartId _ self validCartId .	
	
	response _ internalApi1 listCart: cartId.
	
	self assertSuccessfullyResponse: response.
	self assert: response payload isEmpty.

	! !

!testRun: #InternalAPITest #test09ListCartWithEmptyCart stamp: 'eb 12/2/2020 21:41:21'!
PASSED!
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:42:16' prior: 51004700!
test10ListCartWithNotEmptyCart
	| cartId listCartResponse targetElements |
	cartId _ self validCartId .	
	
	self successfullyAddResponseFor: cartId.
		
	targetElements _ Bag new.
	
	targetElements  add: testObjectFactory itemSellByTheStore withOccurrences: 3. 
	
	listCartResponse _ internalApi1 listCart: cartId.
	
	self assertSuccessfullyResponse: listCartResponse .
	self assert: targetElements equals: listCartResponse payload .

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:42:26' prior: 51004720!
test09ListCartWithEmptyCart
	| cartId listCartResponse |
	cartId _ self validCartId .	
	
	listCartResponse _ internalApi1 listCart: cartId.
	
	self assertSuccessfullyResponse: listCartResponse.
	self assert: listCartResponse payload isEmpty.

	! !

!testRun: #InternalAPITest #test09ListCartWithEmptyCart stamp: 'eb 12/2/2020 21:42:31'!
PASSED!

!testRun: #InternalAPITest #test10ListCartWithNotEmptyCart stamp: 'eb 12/2/2020 21:42:33'!
PASSED!
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:44:52' prior: 51004583!
test11ListCartWithInvalidCart
	| cartId listCartResponse |
	cartId _ self validCartId .	
	
	listCartResponse _ internalApi1 listCart: cartId.
	self assertUnsuccesfullyResponse: listCartResponse.

	self assert: internalApi1 class cartNotRegisteredErrorDescription equals: listCartResponse payload .
	! !

!testRun: #InternalAPITest #test11ListCartWithInvalidCart stamp: 'eb 12/2/2020 21:44:57'!
FAILURE!

!testRun: #InternalAPITest #test11ListCartWithInvalidCart stamp: 'eb 12/2/2020 21:44:57'!
FAILURE!
!InternalAPI methodsFor: 'API' stamp: 'eb 12/2/2020 21:45:49' prior: 51002172!
listCart: aCartId
	| cart listItems |
	[ cart _ carts at: aCartId. ]
		on: Error
		do: [ ^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
	listItems _ cart items.
	^ SuccessfulResponse with: listItems asBag. 
	
	! !

!testRun: #InternalAPITest #test11ListCartWithInvalidCart stamp: 'eb 12/2/2020 21:45:55'!
FAILURE!

!testRun: #InternalAPITest #test11ListCartWithInvalidCart stamp: 'eb 12/2/2020 21:45:55'!
FAILURE!
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:46:38' prior: 51004767!
test11ListCartWithInvalidCart
	| cartId listCartResponse |
	cartId _ self invalidCartId .	
	
	listCartResponse _ internalApi1 listCart: cartId.
	self assertUnsuccesfullyResponse: listCartResponse.

	self assert: internalApi1 class cartNotRegisteredErrorDescription equals: listCartResponse payload .
	! !

!testRun: #InternalAPITest #test11ListCartWithInvalidCart stamp: 'eb 12/2/2020 21:46:40'!
PASSED!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 21:51:02'!
test12CheckOutIsSuccessfulluWithNotEmptyCart

	| internalApi responseCreate responseCheckOut ISBN1 ISBN2 idCart creditCard date |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi add: idCart toCart: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi add: idCart toCart: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	date _ DateAndTime now month.
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload = 1.
	
	self assert: responseCheckOut code = 0.! !

!methodRemoval: InternalAPITest #test13CheckOutSuccessfulWithNotEmptyCart stamp: 'eb 12/2/2020 21:51:02'!
test13CheckOutSuccessfulWithNotEmptyCart

	| internalApi responseCreate responseCheckOut ISBN1 ISBN2 idCart creditCard date |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi add: idCart toCart: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi add: idCart toCart: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	date _ DateAndTime now month.
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload = 1.
	
	self assert: responseCheckOut code = 0.!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 21:51:39'!
test12CheckOutIsSuccessfullyWithNotEmptyCart

	| internalApi responseCreate responseCheckOut ISBN1 ISBN2 idCart creditCard date |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi add: idCart toCart: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi add: idCart toCart: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	date _ DateAndTime now month.
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload = 1.
	
	self assert: responseCheckOut code = 0.! !

!methodRemoval: InternalAPITest #test12CheckOutIsSuccessfulluWithNotEmptyCart stamp: 'eb 12/2/2020 21:51:39'!
test12CheckOutIsSuccessfulluWithNotEmptyCart

	| internalApi responseCreate responseCheckOut ISBN1 ISBN2 idCart creditCard date |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi add: idCart toCart: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi add: idCart toCart: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	date _ DateAndTime now month.
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload = 1.
	
	self assert: responseCheckOut code = 0.!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 21:56:19' prior: 51004875!
test12CheckOutIsSuccessfullyWithNotEmptyCart
	| cartId |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 21:58:55'!
nextCartId

	nextId _ nextId + 1.
	
	^ nextId ! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 21:58:55' prior: 51002156!
createCartFor: anUser with: aPassword 
	
	| idCart cart|
	
	[ self ensureIsRegisteredUser: anUser with: aPassword ] on: Error do: [:error | ^UnsuccessfulResponse with: error messageText ].
	
	cart _ Cart acceptingItemsOf: catalog.
	
	idCart _ self nextCartId.
	
	cartsPerUser add: anUser -> cart.
	
	carts add: idCart -> cart.
	
	modifications add: idCart -> date.
	
	^ SuccessfulResponse with: idCart.! !

!methodRemoval: InternalAPI #nextIdFree stamp: 'eb 12/2/2020 21:58:55'!
nextIdFree

	nextId _ nextId + 1.
	
	^ nextId !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 21:59:03' prior: 51004939!
nextCartId
	nextId _ nextId + 1.
	^ nextId ! !

!classDefinition: #InternalAPI category: #TusLibros stamp: 'eb 12/2/2020 21:59:08'!
Object subclass: #InternalAPI
	instanceVariableNames: 'users nextCartId carts date modifications cartsPerUser catalog merchantProcesor nextTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 21:59:08' prior: 51002039!
initializeWith: aUsersCollection on: aDate usingCatalog: aCatalog usingMerchantProccesor: aMerchantProccesor
	
	users _ aUsersCollection.
	
	date _ aDate.
	
	carts _ Dictionary new.
	
	catalog _ aCatalog.
	
	cartsPerUser _ Dictionary new.
	
	modifications _ Dictionary new.
	
	nextCartId _ 0.
	
	nextTransaction _ 0.
	
	merchantProcesor _ aMerchantProccesor.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 21:59:08' prior: 51004965!
nextCartId
	nextCartId _ nextCartId + 1.
	^ nextCartId ! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 21:59:27'!
nextCheckOutId

	nextTransaction _ nextTransaction + 1.
	
	^ nextTransaction
	! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 21:59:27' prior: 51002137!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	
	| cart cashier|
	
	[cart _ carts at: aCartId ] on: Error do:[^ UnsuccessfulResponse with: (self class cartNotRegisteredErrorDescription) ].
	
	[cashier _ Cashier toCheckout: cart charging: aCreditCard throught: merchantProcesor on: aDate registeringOn: OrderedCollection new] on: Error do: [:error| ^ UnsuccessfulResponse with: error messageText].
	
	cashier checkOut.
	
	^ SuccessfulResponse with: self nextCheckOutId.
	! !

!methodRemoval: InternalAPI #nextTransaction stamp: 'eb 12/2/2020 21:59:27'!
nextTransaction

	nextTransaction _ nextTransaction + 1.
	
	^ nextTransaction
	!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 21:59:34' prior: 51005000!
nextCheckOutId
	nextTransaction _ nextTransaction + 1.
	^ nextTransaction
	! !

!classDefinition: #InternalAPI category: #TusLibros stamp: 'eb 12/2/2020 21:59:42'!
Object subclass: #InternalAPI
	instanceVariableNames: 'users nextCartId carts date modifications cartsPerUser catalog merchantProcesor nextCheckOutId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 21:59:42' prior: 51004980!
initializeWith: aUsersCollection on: aDate usingCatalog: aCatalog usingMerchantProccesor: aMerchantProccesor
	
	users _ aUsersCollection.
	
	date _ aDate.
	
	carts _ Dictionary new.
	
	catalog _ aCatalog.
	
	cartsPerUser _ Dictionary new.
	
	modifications _ Dictionary new.
	
	nextCartId _ 0.
	
	nextCheckOutId _ 0.
	
	merchantProcesor _ aMerchantProccesor.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 21:59:42' prior: 51005031!
nextCheckOutId
	nextCheckOutId _ nextCheckOutId + 1.
	^ nextCheckOutId
	! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 22:00:46' prior: 51002062!
ensureDateOf: aCartId isValidOn: aDate
	| halfHourAgo |
	halfHourAgo _ aDate - 30 minutes.
	((modifications includesKey: aCartId) and: [(modifications at: aCartId)  < halfHourAgo ]) 
		ifTrue: [ self error: self class cartIsExpiredErrorDescription ].! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 22:01:05' prior: 51002083!
ensureIsRegisteredUser: anUser with: aPassword 
	| aPasswordRegistered |
	aPasswordRegistered _ users at: anUser ifAbsent:[ self error: self class userNotRegisteredErrorDescription ].
	^ aPasswordRegistered = aPassword.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 22:01:31'!
ensureUser: anUser isRegisteredWith: aPassword 
	| aPasswordRegistered |
	aPasswordRegistered _ users at: anUser ifAbsent:[ self error: self class userNotRegisteredErrorDescription ].
	^ aPasswordRegistered = aPassword.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 22:01:31' prior: 51004944!
createCartFor: anUser with: aPassword 
	
	| idCart cart|
	
	[ self ensureUser: anUser isRegisteredWith: aPassword ] on: Error do: [:error | ^UnsuccessfulResponse with: error messageText ].
	
	cart _ Cart acceptingItemsOf: catalog.
	
	idCart _ self nextCartId.
	
	cartsPerUser add: anUser -> cart.
	
	carts add: idCart -> cart.
	
	modifications add: idCart -> date.
	
	^ SuccessfulResponse with: idCart.! !

!methodRemoval: InternalAPI #ensureIsRegisteredUser:with: stamp: 'eb 12/2/2020 22:01:31'!
ensureIsRegisteredUser: anUser with: aPassword 
	| aPasswordRegistered |
	aPasswordRegistered _ users at: anUser ifAbsent:[ self error: self class userNotRegisteredErrorDescription ].
	^ aPasswordRegistered = aPassword.!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 22:01:48' prior: 51005089!
ensureUser: anUser isRegisteredWith: aPassword 
	| registeredPassword |
	registeredPassword _ users at: anUser ifAbsent:[ self error: self class userNotRegisteredErrorDescription ].
	^ registeredPassword = aPassword.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 22:01:57' prior: 51002109!
updateDateOf: aCartId to: aDate
	modifications at: aCartId put: aDate .! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 22:02:14' prior: 51004232!
ensureExecutionOf: aBlock withCart: aCartId isValidOn: aDate
	| returnValue |
	self ensureDateOf: aCartId isValidOn: aDate.
	returnValue _ aBlock value.
	self updateDateOf: aCartId to: aDate.
	^ returnValue .
	
	! !
!InternalAPI methodsFor: 'expiration' stamp: 'eb 12/2/2020 22:03:07'!
updateModificationDateOf: aCartId to: aDate
	modifications at: aCartId put: aDate .! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 22:03:08' prior: 51005142!
ensureExecutionOf: aBlock withCart: aCartId isValidOn: aDate
	| returnValue |
	self ensureDateOf: aCartId isValidOn: aDate.
	returnValue _ aBlock value.
	self updateModificationDateOf: aCartId to: aDate.
	^ returnValue .
	
	! !

!methodRemoval: InternalAPI #updateDateOf:to: stamp: 'eb 12/2/2020 22:03:08'!
updateDateOf: aCartId to: aDate
	modifications at: aCartId put: aDate .!
!InternalAPI methodsFor: 'initialization' stamp: 'eb 12/2/2020 22:04:14' prior: 51005047!
initializeWith: aUsersCollection on: aDate usingCatalog: aCatalog usingMerchantProccesor: aMerchantProccesor
	users _ aUsersCollection.
	date _ aDate.
	carts _ Dictionary new.
	catalog _ aCatalog.
	cartsPerUser _ Dictionary new.
	modifications _ Dictionary new.
	nextCartId _ 0.
	nextCheckOutId _ 0.
	merchantProcesor _ aMerchantProccesor.! !
!InternalAPI methodsFor: 'initialization' stamp: 'eb 12/2/2020 22:04:36' prior: 51005173!
initializeWith: aUsersCollection on: aDate usingCatalog: aCatalog usingMerchantProccesor: aMerchantProccesor
	users _ aUsersCollection.
	date _ aDate.
	catalog _ aCatalog.
	merchantProcesor _ aMerchantProccesor.
	carts _ Dictionary new.
	cartsPerUser _ Dictionary new.
	modifications _ Dictionary new.
	nextCartId _ 0.
	nextCheckOutId _ 0.! !
!InternalAPI methodsFor: 'testing' stamp: 'eb 12/2/2020 22:04:57' prior: 51002093!
hasCartsOf: anUser
	^ cartsPerUser includesKey: anUser.! !
!InternalAPI methodsFor: 'create cart' stamp: 'eb 12/2/2020 22:05:40' prior: 51005100!
createCartFor: anUser with: aPassword 
	| idCart cart|
	[ self ensureUser: anUser isRegisteredWith: aPassword ] 
		on: Error 
		do: [:error | ^UnsuccessfulResponse with: error messageText ].
	cart _ Cart acceptingItemsOf: catalog.
	idCart _ self nextCartId.
	cartsPerUser add: anUser -> cart.
	carts add: idCart -> cart.
	modifications add: idCart -> date.
	^ SuccessfulResponse with: idCart.! !
!InternalAPI methodsFor: 'create cart' stamp: 'eb 12/2/2020 22:05:43' prior: 51005206!
createCartFor: anUser with: aPassword 
	| cartId cart|
	[ self ensureUser: anUser isRegisteredWith: aPassword ] 
		on: Error 
		do: [:error | ^UnsuccessfulResponse with: error messageText ].
	cart _ Cart acceptingItemsOf: catalog.
	cartId _ self nextCartId.
	cartsPerUser add: anUser -> cart.
	carts add: cartId -> cart.
	modifications add: cartId -> date.
	^ SuccessfulResponse with: cartId.! !
!InternalAPI methodsFor: 'create cart' stamp: 'eb 12/2/2020 22:06:08' prior: 51005222!
createCartFor: anUser with: aPassword 
	| cartId cart |
	[ self ensureUser: anUser isRegisteredWith: aPassword ] 
		on: Error 
		do: [:error | ^UnsuccessfulResponse with: error messageText ].
	cart _ Cart acceptingItemsOf: catalog.
	cartId _ self nextCartId.
	cartsPerUser add: anUser -> cart.
	carts add: cartId -> cart.
	modifications add: cartId -> date.
	^ SuccessfulResponse with: cartId.! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:08:09' prior: 51005006!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier |
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[ ^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
	[ cashier _ Cashier 
		toCheckout: cart 
		charging: aCreditCard 
		throught: merchantProcesor 
		on: aDate 
		registeringOn: OrderedCollection new ] 
			on: Error 
			do: [:error| ^ UnsuccessfulResponse with: error messageText].
	
	cashier checkOut.
	
	^ SuccessfulResponse with: self nextCheckOutId.
	! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:08:25' prior: 51005254!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier |
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[ ^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
	[ cashier _ Cashier 
		toCheckout: cart 
		charging: aCreditCard 
		throught: merchantProcesor 
		on: aDate 
		registeringOn: OrderedCollection new ] 
			on: Error 
			do: [:error| ^ UnsuccessfulResponse with: error messageText].
	cashier checkOut.
	^ SuccessfulResponse with: self nextCheckOutId.
	! !

!classDefinition: #InternalAPI category: #TusLibros stamp: 'eb 12/2/2020 22:10:58'!
Object subclass: #InternalAPI
	instanceVariableNames: 'users nextCartId carts date modifications cartsPerUser catalog merchantProcesor nextCheckOutId purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:10:56' prior: 51005274!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[ ^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
	[ cashier _ Cashier 
		toCheckout: cart 
		charging: aCreditCard 
		throught: merchantProcesor 
		on: aDate 
		registeringOn: OrderedCollection new ] 
			on: Error 
			do: [:error| ^ UnsuccessfulResponse with: error messageText].
	
	checkoutId _ self nextCheckOutId.
	
	purchases at: anUser put: checkoutId.
	
	cashier checkOut.
	^ SuccessfulResponse with: checkoutId.
	! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:14:47' prior: 51005304!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[ ^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
	[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
		on: Error 
		do: [:error| ^ UnsuccessfulResponse with: error messageText].
	
	checkoutId _ self nextCheckOutId.
	
	self addPurchase: checkoutId to: anUser of: cart items withCost: cashier checkOut.
		
	^ SuccessfulResponse with: checkoutId.
	! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:16:42' prior: 51004932!
test12CheckOutIsSuccessfullyWithNotEmptyCart
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
	
! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:16:57'!
test12CheckOutIsSuccessfullyWithNotEmptyCartAndNotExpiredCreditCard
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
	
! !

!methodRemoval: InternalAPITest #test12CheckOutIsSuccessfullyWithNotEmptyCart stamp: 'eb 12/2/2020 22:16:58'!
test12CheckOutIsSuccessfullyWithNotEmptyCart
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
	
!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:17:21' prior: 51005357!
test12CheckOutIsSuccessfullyWithNotEmptyCartAndNotExpiredCreditCard
	| cartId creditCard checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
	
	creditCard _ CreditCard expiringOn: testObjectFactory nextYear .
! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:18:19' prior: 51005374!
test12CheckOutIsSuccessfullyWithNotEmptyCartAndNotExpiredCreditCard
	| cartId creditCard checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
	
	creditCard _ CreditCard expiringOn: testObjectFactory nextYear .
	
	checkoutResponse _ internalApi1 
		checkOutCart: cartId 
		withCreditCard: creditCard
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:19:15' prior: 51005385!
test12CheckOutIsSuccessfullyWithNotEmptyCartAndNotExpiredCreditCard
	| cartId creditCard checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
	
	creditCard _ CreditCard expiringOn: testObjectFactory nextYear .
	
	checkoutResponse _ internalApi1 
		checkOutCart: cartId 
		withCreditCard: creditCard
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: checkoutResponse.
	
	self assert: (3 * testObjectFactory itemSellByTheStorePrice) equals: checkoutResponse payload .
! !

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithNotEmptyCartAndNotExpiredCreditCard stamp: 'eb 12/2/2020 22:19:19'!
ERROR!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithNotEmptyCartAndNotExpiredCreditCard stamp: 'eb 12/2/2020 22:19:19'!
ERROR!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithNotEmptyCartAndNotExpiredCreditCard stamp: 'eb 12/2/2020 22:19:30'!
ERROR!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithNotEmptyCartAndNotExpiredCreditCard stamp: 'eb 12/2/2020 22:19:30'!
ERROR!
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:19:47'!
addPurchase: aSmallInteger to: aString of: anOrderedCollection withCost: aSmallInteger4 
	self shouldBeImplemented.! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:19:52' prior: 51005438!
addPurchase: aSmallInteger to: aString of: anOrderedCollection withCost: aSmallInteger4 
	
	! !

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithNotEmptyCartAndNotExpiredCreditCard stamp: 'eb 12/2/2020 22:20:04'!
FAILURE!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithNotEmptyCartAndNotExpiredCreditCard stamp: 'eb 12/2/2020 22:20:04'!
FAILURE!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:20:55' prior: 51005401!
test12CheckOutIsSuccessfullyWithNotEmptyCartAndNotExpiredCreditCard
	| cartId creditCard checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
	
	creditCard _ CreditCard expiringOn: testObjectFactory nextYear .
	
	checkoutResponse _ internalApi1 
		checkOutCart: cartId 
		withCreditCard: creditCard
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: checkoutResponse.
	
	self assert: 1 equals: checkoutResponse payload .
! !

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithNotEmptyCartAndNotExpiredCreditCard stamp: 'eb 12/2/2020 22:20:57'!
PASSED!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:22:34' prior: 51005460!
test12CheckOutIsSuccessfullyWithNotEmptyCartAndNotExpiredCreditCard
	| cartId creditCard checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
	
	creditCard _ CreditCard expiringOn: testObjectFactory nextYear .
	
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: checkoutResponse.
	
	self assert: 1 equals: checkoutResponse payload .
! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:23:04' prior: 51005484!
test12CheckOutIsSuccessfullyWithNotEmptyCartAndNotExpiredCreditCard
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: self validCartId.
		
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: checkoutResponse.
	
	self assert: 1 equals: checkoutResponse payload .
! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:23:12' prior: 51005504!
test12CheckOutIsSuccessfullyWithNotEmptyCartAndNotExpiredCreditCard
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
		
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: checkoutResponse.
	
	self assert: 1 equals: checkoutResponse payload .
! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:24:31'!
test13CheckOutIsUnsuccessfullyWithEmptyCart

	| internalApi responseCreate responseCheckOut idCart creditCard date |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier cartCanNotBeEmptyErrorMessage.
	
	self assert: responseCheckOut code = 1.! !

!methodRemoval: InternalAPITest #test14CheckOutUnsuccessfulWithEmptyCart stamp: 'eb 12/2/2020 22:24:31'!
test14CheckOutUnsuccessfulWithEmptyCart

	| internalApi responseCreate responseCheckOut idCart creditCard date |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier cartCanNotBeEmptyErrorMessage.
	
	self assert: responseCheckOut code = 1.!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:24:48'!
test14CheckOutIsUnsuccessfullyWithInvalidCart

	| internalApi responseCheckOut creditCard date |
	
	internalApi _ testObjectFactory internalApi.
 	
	internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: self invalidIdCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: InternalAPI cartNotRegisteredErrorDescription .
	
	self assert: responseCheckOut code = 1.! !

!methodRemoval: InternalAPITest #test15CheckOutUnsuccessfulWithInvalidCart stamp: 'eb 12/2/2020 22:24:49'!
test15CheckOutUnsuccessfulWithInvalidCart

	| internalApi responseCheckOut creditCard date |
	
	internalApi _ testObjectFactory internalApi.
 	
	internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: self invalidIdCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: InternalAPI cartNotRegisteredErrorDescription .
	
	self assert: responseCheckOut code = 1.!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:25:01'!
test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCard
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
		
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: checkoutResponse.
	
	self assert: 1 equals: checkoutResponse payload .
! !

!methodRemoval: InternalAPITest #test12CheckOutIsSuccessfullyWithNotEmptyCartAndNotExpiredCreditCard stamp: 'eb 12/2/2020 22:25:01'!
test12CheckOutIsSuccessfullyWithNotEmptyCartAndNotExpiredCreditCard
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
		
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: checkoutResponse.
	
	self assert: 1 equals: checkoutResponse payload .
!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:25:52'!
test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
		
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: checkoutResponse.
	
	self assert: 1 equals: checkoutResponse payload .
! !

!methodRemoval: InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCard stamp: 'eb 12/2/2020 22:25:52'!
test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCard
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
		
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: checkoutResponse.
	
	self assert: 1 equals: checkoutResponse payload .
!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:26:17'!
test15CheckOutIsUnsuccessfullyWithExpiredCreditCard

	| internalApi responseCreate responseCheckOut idCart creditCard ISBN |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	creditCard _ testObjectFactory expiredCreditCard.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi add: idCart toCart: ISBN withQuantity: 3 on: testObjectFactory today . 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCard: creditCard ofOwner: 'Alan Kay' on: testObjectFactory today.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !

!methodRemoval: InternalAPITest #test16CheckOutUnsuccessfulWithExpiredCreditCard stamp: 'eb 12/2/2020 22:26:17'!
test16CheckOutUnsuccessfulWithExpiredCreditCard

	| internalApi responseCreate responseCheckOut idCart creditCard ISBN |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	creditCard _ testObjectFactory expiredCreditCard.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi add: idCart toCart: ISBN withQuantity: 3 on: testObjectFactory today . 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCard: creditCard ofOwner: 'Alan Kay' on: testObjectFactory today.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:26:31'!
test16CheckOutUnsuccessfullyWithInvalidUser

	| internalApi responseCreate responseCheckOut idCart creditCard ISBN |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	creditCard _ testObjectFactory expiredCreditCard.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi add: idCart toCart: ISBN withQuantity: 3 on: testObjectFactory today . 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCard: creditCard ofOwner: 'Edsger Dijkstra' on: testObjectFactory today.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !

!methodRemoval: InternalAPITest #test17CheckOutUnsuccessfulWithInvalidUser stamp: 'eb 12/2/2020 22:26:32'!
test17CheckOutUnsuccessfulWithInvalidUser

	| internalApi responseCreate responseCheckOut idCart creditCard ISBN |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	creditCard _ testObjectFactory expiredCreditCard.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi add: idCart toCart: ISBN withQuantity: 3 on: testObjectFactory today . 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCard: creditCard ofOwner: 'Edsger Dijkstra' on: testObjectFactory today.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.!

!testRun: #InternalAPITest #test13CheckOutIsUnsuccessfullyWithEmptyCart stamp: 'eb 12/2/2020 22:28:25'!
ERROR!

!testRun: #InternalAPITest #test13CheckOutIsUnsuccessfullyWithEmptyCart stamp: 'eb 12/2/2020 22:28:25'!
ERROR!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:31:31' prior: 51005539!
test13CheckOutIsUnsuccessfullyWithEmptyCart

	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
			
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: Cashier cartCanNotBeEmptyErrorMessage equals: checkoutResponse payload .! !

!testRun: #InternalAPITest #test13CheckOutIsUnsuccessfullyWithEmptyCart stamp: 'eb 12/2/2020 22:31:49'!
PASSED!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:32:25' prior: 51005584!
test14CheckOutIsUnsuccessfullyWithInvalidCart

	| cartId checkoutResponse |
 		
	cartId _ self invalidCartId .
			
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: Cashier cartCanNotBeEmptyErrorMessage equals: checkoutResponse payload .! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:32:46' prior: 51005836!
test14CheckOutIsUnsuccessfullyWithInvalidCart

	| cartId checkoutResponse |
 		
	cartId _ self invalidCartId .
			
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI cartNotRegisteredErrorDescription equals: checkoutResponse payload .! !

!testRun: #InternalAPITest #test14CheckOutIsUnsuccessfullyWithInvalidCart stamp: 'eb 12/2/2020 22:32:47'!
PASSED!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:33:20' prior: 51005699!
test15CheckOutIsUnsuccessfullyWithExpiredCreditCard
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
			
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory expiredCreditCard
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: Cashier canNotChargeAnExpiredCreditCardErrorMessage  equals: checkoutResponse payload .! !

!testRun: #InternalAPITest #test15CheckOutIsUnsuccessfullyWithExpiredCreditCard stamp: 'eb 12/2/2020 22:33:21'!
FAILURE!

!testRun: #InternalAPITest #test15CheckOutIsUnsuccessfullyWithExpiredCreditCard stamp: 'eb 12/2/2020 22:33:21'!
FAILURE!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:33:34' prior: 51005874!
test15CheckOutIsUnsuccessfullyWithExpiredCreditCard
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId .
			
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory expiredCreditCard
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: Cashier canNotChargeAnExpiredCreditCardErrorMessage  equals: checkoutResponse payload .! !

!testRun: #InternalAPITest #test15CheckOutIsUnsuccessfullyWithExpiredCreditCard stamp: 'eb 12/2/2020 22:33:35'!
PASSED!

!testRun: #InternalAPITest #test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword stamp: 'eb 12/2/2020 22:33:35'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdsPerCustomer stamp: 'eb 12/2/2020 22:33:35'!
PASSED!

!testRun: #InternalAPITest #test03CreateCartIsUnsuccessfullyWithUnregisteredClientId stamp: 'eb 12/2/2020 22:33:35'!
PASSED!

!testRun: #InternalAPITest #test04CreateCartSuccessfullyEffectivlyCreatesCart stamp: 'eb 12/2/2020 22:33:35'!
PASSED!

!testRun: #InternalAPITest #test05AddToCartIsSuccessfullyWithValidCartId stamp: 'eb 12/2/2020 22:33:35'!
PASSED!

!testRun: #InternalAPITest #test06AddToCartSuccessfullyEffectivlyAddsToCart stamp: 'eb 12/2/2020 22:33:35'!
PASSED!

!testRun: #InternalAPITest #test07AddToCartIsUnsuccessfullyWithInvalidCartId stamp: 'eb 12/2/2020 22:33:35'!
PASSED!

!testRun: #InternalAPITest #test08AddToCartIsUnsuccessfullyWithIvalidISBN stamp: 'eb 12/2/2020 22:33:36'!
PASSED!

!testRun: #InternalAPITest #test09ListCartWithEmptyCart stamp: 'eb 12/2/2020 22:33:36'!
PASSED!

!testRun: #InternalAPITest #test10ListCartWithNotEmptyCart stamp: 'eb 12/2/2020 22:33:36'!
PASSED!

!testRun: #InternalAPITest #test11ListCartWithInvalidCart stamp: 'eb 12/2/2020 22:33:36'!
PASSED!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/2/2020 22:33:36'!
PASSED!

!testRun: #InternalAPITest #test13CheckOutIsUnsuccessfullyWithEmptyCart stamp: 'eb 12/2/2020 22:33:36'!
PASSED!

!testRun: #InternalAPITest #test14CheckOutIsUnsuccessfullyWithInvalidCart stamp: 'eb 12/2/2020 22:33:36'!
PASSED!

!testRun: #InternalAPITest #test15CheckOutIsUnsuccessfullyWithExpiredCreditCard stamp: 'eb 12/2/2020 22:33:36'!
PASSED!

!testRun: #InternalAPITest #test16CheckOutUnsuccessfullyWithInvalidUser stamp: 'eb 12/2/2020 22:33:36'!
ERROR!

!testRun: #InternalAPITest #test16CheckOutUnsuccessfullyWithInvalidUser stamp: 'eb 12/2/2020 22:33:36'!
ERROR!

!testRun: #InternalAPITest #test15CheckOutIsUnsuccessfullyWithExpiredCreditCard stamp: 'eb 12/2/2020 22:33:41'!
PASSED!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:34:46' prior: 51005754!
test16CheckOutUnsuccessfullyWithInvalidUser

	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
			
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Steve Jobs'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: Cashier cartCanNotBeEmptyErrorMessage equals: checkoutResponse payload .! !

!testRun: #InternalAPITest #test16CheckOutUnsuccessfullyWithInvalidUser stamp: 'eb 12/2/2020 22:34:49'!
FAILURE!

!testRun: #InternalAPITest #test16CheckOutUnsuccessfullyWithInvalidUser stamp: 'eb 12/2/2020 22:34:49'!
FAILURE!

!testRun: #InternalAPITest #test16CheckOutUnsuccessfullyWithInvalidUser stamp: 'eb 12/2/2020 22:34:55'!
FAILURE!

!testRun: #InternalAPITest #test16CheckOutUnsuccessfullyWithInvalidUser stamp: 'eb 12/2/2020 22:34:55'!
FAILURE!
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:41:26' prior: 51005326!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[ ^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
		
	[ self hasCartsOf: anUser ] ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
	[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
		on: Error 
		do: [:error| ^ UnsuccessfulResponse with: error messageText].
		
	checkoutId _ self nextCheckOutId.
	
	self addPurchase: checkoutId to: anUser of: cart items withCost: cashier checkOut.
		
	^ SuccessfulResponse with: checkoutId.
	! !

!testRun: #InternalAPITest #test16CheckOutUnsuccessfullyWithInvalidUser stamp: 'eb 12/2/2020 22:41:37'!
ERROR!

!testRun: #InternalAPITest #test16CheckOutUnsuccessfullyWithInvalidUser stamp: 'eb 12/2/2020 22:41:37'!
ERROR!
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:42:43' prior: 51006019!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[ ^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
		
	(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
	[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
		on: Error 
		do: [:error| ^ UnsuccessfulResponse with: error messageText].
		
	checkoutId _ self nextCheckOutId.
	
	self addPurchase: checkoutId to: anUser of: cart items withCost: cashier checkOut.
		
	^ SuccessfulResponse with: checkoutId.
	! !

!testRun: #InternalAPITest #test16CheckOutUnsuccessfullyWithInvalidUser stamp: 'eb 12/2/2020 22:42:54'!
ERROR!

!testRun: #InternalAPITest #test16CheckOutUnsuccessfullyWithInvalidUser stamp: 'eb 12/2/2020 22:42:54'!
ERROR!
!InternalAPI class methodsFor: '*Aconcagua-Extensions' stamp: 'eb 12/2/2020 22:43:15'!
userHasNotCartsErrorDescription
	self shouldBeImplemented.! !
!InternalAPI class methodsFor: '*Aconcagua-Extensions' stamp: 'eb 12/2/2020 22:43:30' prior: 51006086!
userHasNotCartsErrorDescription
	
	^ 'User has not carts'.! !

!testRun: #InternalAPITest #test16CheckOutUnsuccessfullyWithInvalidUser stamp: 'eb 12/2/2020 22:43:33'!
FAILURE!

!testRun: #InternalAPITest #test16CheckOutUnsuccessfullyWithInvalidUser stamp: 'eb 12/2/2020 22:43:33'!
FAILURE!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:44:00' prior: 51005987!
test16CheckOutUnsuccessfullyWithInvalidUser

	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
			
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Steve Jobs'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI userNotRegisteredErrorDescription equals: checkoutResponse payload .! !

!testRun: #InternalAPITest #test16CheckOutUnsuccessfullyWithInvalidUser stamp: 'eb 12/2/2020 22:44:03'!
FAILURE!

!testRun: #InternalAPITest #test16CheckOutUnsuccessfullyWithInvalidUser stamp: 'eb 12/2/2020 22:44:03'!
FAILURE!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:44:11' prior: 51006104!
test16CheckOutUnsuccessfullyWithInvalidUser

	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
			
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Steve Jobs'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI userHasNotCartsErrorDescription equals: checkoutResponse payload .! !

!testRun: #InternalAPITest #test16CheckOutUnsuccessfullyWithInvalidUser stamp: 'eb 12/2/2020 22:44:14'!
PASSED!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:45:14'!
test16CheckOutIsUnsuccessfullyWithInvalidUser

	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
			
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Steve Jobs'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI userHasNotCartsErrorDescription equals: checkoutResponse payload .! !

!methodRemoval: InternalAPITest #test16CheckOutUnsuccessfullyWithInvalidUser stamp: 'eb 12/2/2020 22:45:14'!
test16CheckOutUnsuccessfullyWithInvalidUser

	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
			
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Steve Jobs'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI userHasNotCartsErrorDescription equals: checkoutResponse payload .!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:46:25'!
test17CheckOutIsUnsuccessfullyWithAlienCart

	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
			
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Steve Jobs'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI userHasNotCartsErrorDescription equals: checkoutResponse payload .! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:47:21' prior: 51006187!
test17CheckOutIsUnsuccessfullyWithAlienCart

	| alanKayCartId checkoutResponse |
 		
	alanKayCartId _ self validCartId .
	
	self successfullyAddResponseFor: alanKayCartId.
			
	checkoutResponse _ internalApi1 
		checkOutCart: alanKayCartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Steve Jobs'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI userHasNotCartsErrorDescription equals: checkoutResponse payload .! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:47:54' prior: 51006205!
test17CheckOutIsUnsuccessfullyWithAlienCart

	| alanKayCartId  steveJobsCartId checkoutResponse |
 		
	alanKayCartId _ self validCartId .
	
	steveJobsCartId  _ internalApi1 createCartFor: 'Steve Jobs' with: 3.
	
	self successfullyAddResponseFor: alanKayCartId.
			
	checkoutResponse _ internalApi1 
		checkOutCart: alanKayCartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Steve Jobs'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI userHasNotCartsErrorDescription equals: checkoutResponse payload .! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:49:23' prior: 51006224!
test17CheckOutIsUnsuccessfullyWithAlienCart

	| alanKayCartId  danIngallsCartId checkoutResponse |
 		
	alanKayCartId _ self validCartId .
	
	danIngallsCartId  _ internalApi1 createCartFor: 'Dan Ingalls' with: 'smalltalk'.
	
	self successfullyAddResponseFor: alanKayCartId.
			
	self successfullyAddResponseFor: danIngallsCartId.

	checkoutResponse _ internalApi1 
		checkOutCart: alanKayCartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Dan Ingalls'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI userHasNotCartsErrorDescription equals: checkoutResponse payload .! !

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/2/2020 22:49:27'!
FAILURE!

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/2/2020 22:49:27'!
FAILURE!

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/2/2020 22:49:44'!
FAILURE!

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/2/2020 22:49:44'!
FAILURE!
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:51:30' prior: 51006053!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[ ^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
		
	(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
	
	(cartsPerUser at: anUser = aCartId) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
	[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
		on: Error 
		do: [:error| ^ UnsuccessfulResponse with: error messageText].
		
	checkoutId _ self nextCheckOutId.
	
	self addPurchase: checkoutId to: anUser of: cart items withCost: cashier checkOut.
		
	^ SuccessfulResponse with: checkoutId.
	! !

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/2/2020 22:51:36'!
ERROR!

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/2/2020 22:51:36'!
ERROR!

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/2/2020 22:52:02'!
ERROR!

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/2/2020 22:52:02'!
ERROR!
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:53:00' prior: 51006284!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[ ^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
		
	(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
	
	((cartsPerUser at: anUser) = aCartId) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
	[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
		on: Error 
		do: [:error| ^ UnsuccessfulResponse with: error messageText].
		
	checkoutId _ self nextCheckOutId.
	
	self addPurchase: checkoutId to: anUser of: cart items withCost: cashier checkOut.
		
	^ SuccessfulResponse with: checkoutId.
	! !

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/2/2020 22:53:05'!
ERROR!

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/2/2020 22:53:05'!
ERROR!
!InternalAPI class methodsFor: 'error descriptions' stamp: 'eb 12/2/2020 22:53:16'!
cartDoesNotBelongToUserErrorDescription
	self shouldBeImplemented.! !
!InternalAPI class methodsFor: 'error descriptions' stamp: 'eb 12/2/2020 22:53:25' prior: 51006367!
cartDoesNotBelongToUserErrorDescription
	
	^ 'Cart does not belong to user'.! !

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/2/2020 22:53:31'!
FAILURE!

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/2/2020 22:53:31'!
FAILURE!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:53:44' prior: 51006246!
test17CheckOutIsUnsuccessfullyWithAlienCart

	| alanKayCartId  danIngallsCartId checkoutResponse |
 		
	alanKayCartId _ self validCartId .
	
	danIngallsCartId  _ internalApi1 createCartFor: 'Dan Ingalls' with: 'smalltalk'.
	
	self successfullyAddResponseFor: alanKayCartId.
			
	self successfullyAddResponseFor: danIngallsCartId.

	checkoutResponse _ internalApi1 
		checkOutCart: alanKayCartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Dan Ingalls'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI cartDoesNotBelongToUserErrorDescription equals: checkoutResponse payload .! !

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/2/2020 22:53:46'!
PASSED!

!testRun: #InternalAPITest #test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword stamp: 'eb 12/2/2020 22:55:40'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdsPerCustomer stamp: 'eb 12/2/2020 22:55:40'!
PASSED!

!testRun: #InternalAPITest #test03CreateCartIsUnsuccessfullyWithUnregisteredClientId stamp: 'eb 12/2/2020 22:55:40'!
PASSED!

!testRun: #InternalAPITest #test04CreateCartSuccessfullyEffectivlyCreatesCart stamp: 'eb 12/2/2020 22:55:40'!
PASSED!

!testRun: #InternalAPITest #test05AddToCartIsSuccessfullyWithValidCartId stamp: 'eb 12/2/2020 22:55:40'!
PASSED!

!testRun: #InternalAPITest #test06AddToCartSuccessfullyEffectivlyAddsToCart stamp: 'eb 12/2/2020 22:55:40'!
PASSED!

!testRun: #InternalAPITest #test07AddToCartIsUnsuccessfullyWithInvalidCartId stamp: 'eb 12/2/2020 22:55:40'!
PASSED!

!testRun: #InternalAPITest #test08AddToCartIsUnsuccessfullyWithIvalidISBN stamp: 'eb 12/2/2020 22:55:40'!
PASSED!

!testRun: #InternalAPITest #test09ListCartWithEmptyCart stamp: 'eb 12/2/2020 22:55:40'!
PASSED!

!testRun: #InternalAPITest #test10ListCartWithNotEmptyCart stamp: 'eb 12/2/2020 22:55:40'!
PASSED!

!testRun: #InternalAPITest #test11ListCartWithInvalidCart stamp: 'eb 12/2/2020 22:55:40'!
PASSED!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/2/2020 22:55:40'!
FAILURE!

!testRun: #InternalAPITest #test13CheckOutIsUnsuccessfullyWithEmptyCart stamp: 'eb 12/2/2020 22:55:40'!
FAILURE!

!testRun: #InternalAPITest #test14CheckOutIsUnsuccessfullyWithInvalidCart stamp: 'eb 12/2/2020 22:55:40'!
PASSED!

!testRun: #InternalAPITest #test15CheckOutIsUnsuccessfullyWithExpiredCreditCard stamp: 'eb 12/2/2020 22:55:40'!
FAILURE!

!testRun: #InternalAPITest #test16CheckOutIsUnsuccessfullyWithInvalidUser stamp: 'eb 12/2/2020 22:55:40'!
PASSED!

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/2/2020 22:55:40'!
PASSED!

!testRun: #InternalAPITest #test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword stamp: 'eb 12/2/2020 22:55:51'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdsPerCustomer stamp: 'eb 12/2/2020 22:55:51'!
PASSED!

!testRun: #InternalAPITest #test03CreateCartIsUnsuccessfullyWithUnregisteredClientId stamp: 'eb 12/2/2020 22:55:51'!
PASSED!

!testRun: #InternalAPITest #test04CreateCartSuccessfullyEffectivlyCreatesCart stamp: 'eb 12/2/2020 22:55:51'!
PASSED!

!testRun: #InternalAPITest #test05AddToCartIsSuccessfullyWithValidCartId stamp: 'eb 12/2/2020 22:55:51'!
PASSED!

!testRun: #InternalAPITest #test06AddToCartSuccessfullyEffectivlyAddsToCart stamp: 'eb 12/2/2020 22:55:51'!
PASSED!

!testRun: #InternalAPITest #test07AddToCartIsUnsuccessfullyWithInvalidCartId stamp: 'eb 12/2/2020 22:55:51'!
PASSED!

!testRun: #InternalAPITest #test08AddToCartIsUnsuccessfullyWithIvalidISBN stamp: 'eb 12/2/2020 22:55:51'!
PASSED!

!testRun: #InternalAPITest #test09ListCartWithEmptyCart stamp: 'eb 12/2/2020 22:55:51'!
PASSED!

!testRun: #InternalAPITest #test10ListCartWithNotEmptyCart stamp: 'eb 12/2/2020 22:55:51'!
PASSED!

!testRun: #InternalAPITest #test11ListCartWithInvalidCart stamp: 'eb 12/2/2020 22:55:51'!
PASSED!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/2/2020 22:55:51'!
FAILURE!

!testRun: #InternalAPITest #test13CheckOutIsUnsuccessfullyWithEmptyCart stamp: 'eb 12/2/2020 22:55:51'!
FAILURE!

!testRun: #InternalAPITest #test14CheckOutIsUnsuccessfullyWithInvalidCart stamp: 'eb 12/2/2020 22:55:51'!
PASSED!

!testRun: #InternalAPITest #test15CheckOutIsUnsuccessfullyWithExpiredCreditCard stamp: 'eb 12/2/2020 22:55:51'!
FAILURE!

!testRun: #InternalAPITest #test16CheckOutIsUnsuccessfullyWithInvalidUser stamp: 'eb 12/2/2020 22:55:51'!
PASSED!

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/2/2020 22:55:51'!
PASSED!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/2/2020 22:56:00'!
FAILURE!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/2/2020 22:56:00'!
FAILURE!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/2/2020 22:57:08'!
FAILURE!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/2/2020 22:57:08'!
FAILURE!

!methodRemoval: InternalAPI class #with: stamp: 'eb 12/2/2020 22:57:18'!
with: aUsersCollection
	
	^self new initializeWith: aUsersCollection.!

!methodRemoval: InternalAPI class #with:on: stamp: 'eb 12/2/2020 22:57:21'!
with: aUsersCollection on: aDate
	
	^self new initializeWith: aUsersCollection on: aDate.!

!methodRemoval: InternalAPI class #with:on:usingCatalog: stamp: 'eb 12/2/2020 22:57:23'!
with: aUsersCollection on: aDate usingCatalog: aCatalog
	
	^self new initializeWith: aUsersCollection on: aDate usingCatalog: aCatalog .!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/2/2020 22:57:36'!
FAILURE!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/2/2020 22:57:36'!
FAILURE!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/2/2020 22:59:44'!
FAILURE!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/2/2020 22:59:44'!
FAILURE!
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 23:00:45' prior: 51006329!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	self halt .
	
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[ ^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
		
	(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
	
	((cartsPerUser at: anUser) = aCartId) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
	[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
		on: Error 
		do: [:error| ^ UnsuccessfulResponse with: error messageText].
		
	checkoutId _ self nextCheckOutId.
	
	self addPurchase: checkoutId to: anUser of: cart items withCost: cashier checkOut.
		
	^ SuccessfulResponse with: checkoutId.
	! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 23:01:36' prior: 51006594!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	self halt .
	
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[ :error | ^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
		
	(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
	
	((cartsPerUser at: anUser) = aCartId) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
	[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
		on: Error 
		do: [:error| ^ UnsuccessfulResponse with: error messageText].
		
	checkoutId _ self nextCheckOutId.
	
	self addPurchase: checkoutId to: anUser of: cart items withCost: cashier checkOut.
		
	^ SuccessfulResponse with: checkoutId.
	! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 23:01:43' prior: 51006625!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[ :error | ^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
		
	(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
	
	((cartsPerUser at: anUser) = aCartId) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
	[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
		on: Error 
		do: [:error| ^ UnsuccessfulResponse with: error messageText].
		
	checkoutId _ self nextCheckOutId.
	
	self addPurchase: checkoutId to: anUser of: cart items withCost: cashier checkOut.
		
	^ SuccessfulResponse with: checkoutId.
	! !

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/2/2020 23:01:59'!
FAILURE!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/2/2020 23:02:41'!
FAILURE!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/2/2020 23:02:41'!
FAILURE!
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 23:03:15' prior: 51006656!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[ :error | ^ UnsuccessfulResponse with: error messageText ].
		
	(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
	
	((cartsPerUser at: anUser) = aCartId) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
	[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
		on: Error 
		do: [:error| ^ UnsuccessfulResponse with: error messageText].
		
	checkoutId _ self nextCheckOutId.
	
	self addPurchase: checkoutId to: anUser of: cart items withCost: cashier checkOut.
		
	^ SuccessfulResponse with: checkoutId.
	! !

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/2/2020 23:03:21'!
FAILURE!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/2/2020 23:03:21'!
FAILURE!
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 23:04:17' prior: 51006702!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
		
	(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
	
	((cartsPerUser at: anUser) = aCartId) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
	[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
		on: Error 
		do: [:error| ^ UnsuccessfulResponse with: error messageText].
		
	checkoutId _ self nextCheckOutId.
	
	self addPurchase: checkoutId to: anUser of: cart items withCost: cashier checkOut.
		
	^ SuccessfulResponse with: checkoutId.
	! !

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/2/2020 23:04:37'!
PASSED!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/2/2020 23:04:43'!
FAILURE!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/2/2020 23:04:43'!
FAILURE!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/2/2020 23:05:17'!
FAILURE!
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 23:06:42' prior: 51006742!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
		
	(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
	
	((cartsPerUser at: anUser) = cart) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
	[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
		on: Error 
		do: [:error| ^ UnsuccessfulResponse with: error messageText].
		
	checkoutId _ self nextCheckOutId.
	
	self addPurchase: checkoutId to: anUser of: cart items withCost: cashier checkOut.
		
	^ SuccessfulResponse with: checkoutId.
	! !

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/2/2020 23:06:52'!
PASSED!

!testRun: #InternalAPITest #test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword stamp: 'eb 12/2/2020 23:06:56'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdsPerCustomer stamp: 'eb 12/2/2020 23:06:56'!
PASSED!

!testRun: #InternalAPITest #test03CreateCartIsUnsuccessfullyWithUnregisteredClientId stamp: 'eb 12/2/2020 23:06:56'!
PASSED!

!testRun: #InternalAPITest #test04CreateCartSuccessfullyEffectivlyCreatesCart stamp: 'eb 12/2/2020 23:06:56'!
PASSED!

!testRun: #InternalAPITest #test05AddToCartIsSuccessfullyWithValidCartId stamp: 'eb 12/2/2020 23:06:56'!
PASSED!

!testRun: #InternalAPITest #test06AddToCartSuccessfullyEffectivlyAddsToCart stamp: 'eb 12/2/2020 23:06:56'!
PASSED!

!testRun: #InternalAPITest #test07AddToCartIsUnsuccessfullyWithInvalidCartId stamp: 'eb 12/2/2020 23:06:56'!
PASSED!

!testRun: #InternalAPITest #test08AddToCartIsUnsuccessfullyWithIvalidISBN stamp: 'eb 12/2/2020 23:06:56'!
PASSED!

!testRun: #InternalAPITest #test09ListCartWithEmptyCart stamp: 'eb 12/2/2020 23:06:56'!
PASSED!

!testRun: #InternalAPITest #test10ListCartWithNotEmptyCart stamp: 'eb 12/2/2020 23:06:56'!
PASSED!

!testRun: #InternalAPITest #test11ListCartWithInvalidCart stamp: 'eb 12/2/2020 23:06:56'!
PASSED!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/2/2020 23:06:56'!
PASSED!

!testRun: #InternalAPITest #test13CheckOutIsUnsuccessfullyWithEmptyCart stamp: 'eb 12/2/2020 23:06:56'!
PASSED!

!testRun: #InternalAPITest #test14CheckOutIsUnsuccessfullyWithInvalidCart stamp: 'eb 12/2/2020 23:06:56'!
PASSED!

!testRun: #InternalAPITest #test15CheckOutIsUnsuccessfullyWithExpiredCreditCard stamp: 'eb 12/2/2020 23:06:56'!
PASSED!

!testRun: #InternalAPITest #test16CheckOutIsUnsuccessfullyWithInvalidUser stamp: 'eb 12/2/2020 23:06:56'!
PASSED!

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/2/2020 23:06:56'!
PASSED!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:11:09'!
test18ListPurchasesWithEmptyCart

    | internalApi responseListPurchases |

    internalApi  testObjectFactory internalApiUsingMerchantProccessor: self.

    internalApi createCartFor: 'Alan Kay' with: 'objetos'.

    responseListPurchases  internalApi listPurchases: 'Alan Kay' with: 'objetos'. 

    self assert: responseListPurchases payload equals: Bag new.

    self assert: responseListPurchases code = 1.! !
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 23:13:41' prior: 51004733!
test10ListCartWithNotEmptyCart
	| cartId listCartResponse targetElements |
	cartId _ self validCartId .	
	
	self successfullyAddResponseFor: cartId.
		
	targetElements _ Bag new.
	
	targetElements  add: testObjectFactory itemSellByTheStore withOccurrences: 3. 
	
	listCartResponse _ internalApi1 listCart: cartId.
	
	self assertSuccessfullyResponse: listCartResponse .
	self assert: targetElements equals: listCartResponse payload .
	
	self halt .

	! !

Sale subclass: #DetailedSale
	instanceVariableNames: 'detail'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #DetailedSale category: #TusLibros stamp: 'eb 12/2/2020 23:23:09'!
Sale subclass: #DetailedSale
	instanceVariableNames: 'detail'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!DetailedSale methodsFor: 'nil' stamp: 'eb 12/2/2020 23:23:19'!
detail

	^ detail copy.! !
!DetailedSale class methodsFor: 'no messages' stamp: 'eb 12/2/2020 23:25:29'!
of: aTotal with: anItemCollection

	^ self new initializeOf: aTotal with: anItemCollection .! !
!DetailedSale methodsFor: 'nil' stamp: 'eb 12/2/2020 23:26:27'!
initializeOf: aTotal with: anItemCollection
	
	total _ aTotal .
	
	detail _ anItemCollection .! !
!DetailedSale methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:26:33' prior: 51006941!
initializeOf: aTotal with: anItemCollection
	
	total _ aTotal .
	detail _ anItemCollection .
	
	^ self .! !

!classRemoval: #InvalidISBN stamp: 'eb 12/2/2020 23:28:04'!
Error subclass: #InvalidISBN
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #InternalAPITest #test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword stamp: 'eb 12/2/2020 23:28:06'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdsPerCustomer stamp: 'eb 12/2/2020 23:28:06'!
PASSED!

!testRun: #InternalAPITest #test03CreateCartIsUnsuccessfullyWithUnregisteredClientId stamp: 'eb 12/2/2020 23:28:06'!
PASSED!

!testRun: #InternalAPITest #test04CreateCartSuccessfullyEffectivlyCreatesCart stamp: 'eb 12/2/2020 23:28:06'!
PASSED!

!testRun: #InternalAPITest #test05AddToCartIsSuccessfullyWithValidCartId stamp: 'eb 12/2/2020 23:28:06'!
PASSED!

!testRun: #InternalAPITest #test06AddToCartSuccessfullyEffectivlyAddsToCart stamp: 'eb 12/2/2020 23:28:06'!
PASSED!

!testRun: #InternalAPITest #test07AddToCartIsUnsuccessfullyWithInvalidCartId stamp: 'eb 12/2/2020 23:28:06'!
PASSED!

!testRun: #InternalAPITest #test08AddToCartIsUnsuccessfullyWithIvalidISBN stamp: 'eb 12/2/2020 23:28:06'!
PASSED!

!testRun: #InternalAPITest #test09ListCartWithEmptyCart stamp: 'eb 12/2/2020 23:28:06'!
PASSED!

!testRun: #InternalAPITest #test11ListCartWithInvalidCart stamp: 'eb 12/2/2020 23:28:06'!
PASSED!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/2/2020 23:28:06'!
PASSED!

!testRun: #InternalAPITest #test13CheckOutIsUnsuccessfullyWithEmptyCart stamp: 'eb 12/2/2020 23:28:06'!
PASSED!

!testRun: #InternalAPITest #test14CheckOutIsUnsuccessfullyWithInvalidCart stamp: 'eb 12/2/2020 23:28:06'!
PASSED!

!testRun: #InternalAPITest #test15CheckOutIsUnsuccessfullyWithExpiredCreditCard stamp: 'eb 12/2/2020 23:28:06'!
PASSED!

!testRun: #InternalAPITest #test16CheckOutIsUnsuccessfullyWithInvalidUser stamp: 'eb 12/2/2020 23:28:06'!
PASSED!

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/2/2020 23:28:06'!
PASSED!

!testRun: #InternalAPITest #test18ListPurchasesWithEmptyCart stamp: 'eb 12/2/2020 23:28:06'!
ERROR!
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 23:28:22' prior: 51006904!
test10ListCartWithNotEmptyCart
	| cartId listCartResponse targetElements |
	cartId _ self validCartId .	
	
	self successfullyAddResponseFor: cartId.
		
	targetElements _ Bag new.
	
	targetElements  add: testObjectFactory itemSellByTheStore withOccurrences: 3. 
	
	listCartResponse _ internalApi1 listCart: cartId.
	
	self assertSuccessfullyResponse: listCartResponse .
	self assert: targetElements equals: listCartResponse payload .
	! !

!testRun: #InternalAPITest #test10ListCartWithNotEmptyCart stamp: 'eb 12/2/2020 23:28:29'!
PASSED!

!testRun: #InternalAPITest #test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword stamp: 'eb 12/2/2020 23:28:33'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdsPerCustomer stamp: 'eb 12/2/2020 23:28:33'!
PASSED!

!testRun: #InternalAPITest #test03CreateCartIsUnsuccessfullyWithUnregisteredClientId stamp: 'eb 12/2/2020 23:28:33'!
PASSED!

!testRun: #InternalAPITest #test04CreateCartSuccessfullyEffectivlyCreatesCart stamp: 'eb 12/2/2020 23:28:33'!
PASSED!

!testRun: #InternalAPITest #test05AddToCartIsSuccessfullyWithValidCartId stamp: 'eb 12/2/2020 23:28:33'!
PASSED!

!testRun: #InternalAPITest #test06AddToCartSuccessfullyEffectivlyAddsToCart stamp: 'eb 12/2/2020 23:28:33'!
PASSED!

!testRun: #InternalAPITest #test07AddToCartIsUnsuccessfullyWithInvalidCartId stamp: 'eb 12/2/2020 23:28:33'!
PASSED!

!testRun: #InternalAPITest #test08AddToCartIsUnsuccessfullyWithIvalidISBN stamp: 'eb 12/2/2020 23:28:33'!
PASSED!

!testRun: #InternalAPITest #test09ListCartWithEmptyCart stamp: 'eb 12/2/2020 23:28:33'!
PASSED!

!testRun: #InternalAPITest #test10ListCartWithNotEmptyCart stamp: 'eb 12/2/2020 23:28:33'!
PASSED!

!testRun: #InternalAPITest #test11ListCartWithInvalidCart stamp: 'eb 12/2/2020 23:28:33'!
PASSED!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/2/2020 23:28:33'!
PASSED!

!testRun: #InternalAPITest #test13CheckOutIsUnsuccessfullyWithEmptyCart stamp: 'eb 12/2/2020 23:28:33'!
PASSED!

!testRun: #InternalAPITest #test14CheckOutIsUnsuccessfullyWithInvalidCart stamp: 'eb 12/2/2020 23:28:33'!
PASSED!

!testRun: #InternalAPITest #test15CheckOutIsUnsuccessfullyWithExpiredCreditCard stamp: 'eb 12/2/2020 23:28:33'!
PASSED!

!testRun: #InternalAPITest #test16CheckOutIsUnsuccessfullyWithInvalidUser stamp: 'eb 12/2/2020 23:28:33'!
PASSED!

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/2/2020 23:28:33'!
PASSED!

!testRun: #InternalAPITest #test18ListPurchasesWithEmptyCart stamp: 'eb 12/2/2020 23:28:33'!
ERROR!

!testRun: #InternalAPITest #test18ListPurchasesWithEmptyCart stamp: 'eb 12/2/2020 23:28:33'!
ERROR!

!testRun: #InternalAPITest #test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword stamp: 'eb 12/2/2020 23:28:40'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdsPerCustomer stamp: 'eb 12/2/2020 23:28:40'!
PASSED!

!testRun: #InternalAPITest #test03CreateCartIsUnsuccessfullyWithUnregisteredClientId stamp: 'eb 12/2/2020 23:28:40'!
PASSED!

!testRun: #InternalAPITest #test04CreateCartSuccessfullyEffectivlyCreatesCart stamp: 'eb 12/2/2020 23:28:40'!
PASSED!

!testRun: #InternalAPITest #test05AddToCartIsSuccessfullyWithValidCartId stamp: 'eb 12/2/2020 23:28:42'!
PASSED!

!testRun: #InternalAPITest #test06AddToCartSuccessfullyEffectivlyAddsToCart stamp: 'eb 12/2/2020 23:28:42'!
PASSED!

!testRun: #InternalAPITest #test07AddToCartIsUnsuccessfullyWithInvalidCartId stamp: 'eb 12/2/2020 23:28:42'!
PASSED!

!testRun: #InternalAPITest #test08AddToCartIsUnsuccessfullyWithIvalidISBN stamp: 'eb 12/2/2020 23:28:42'!
PASSED!

!testRun: #InternalAPITest #test09ListCartWithEmptyCart stamp: 'eb 12/2/2020 23:28:43'!
PASSED!

!testRun: #InternalAPITest #test10ListCartWithNotEmptyCart stamp: 'eb 12/2/2020 23:28:43'!
PASSED!

!testRun: #InternalAPITest #test11ListCartWithInvalidCart stamp: 'eb 12/2/2020 23:28:43'!
PASSED!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/2/2020 23:28:45'!
PASSED!

!testRun: #InternalAPITest #test13CheckOutIsUnsuccessfullyWithEmptyCart stamp: 'eb 12/2/2020 23:28:45'!
PASSED!

!testRun: #InternalAPITest #test14CheckOutIsUnsuccessfullyWithInvalidCart stamp: 'eb 12/2/2020 23:28:45'!
PASSED!

!testRun: #InternalAPITest #test15CheckOutIsUnsuccessfullyWithExpiredCreditCard stamp: 'eb 12/2/2020 23:28:45'!
PASSED!

!testRun: #InternalAPITest #test16CheckOutIsUnsuccessfullyWithInvalidUser stamp: 'eb 12/2/2020 23:28:45'!
PASSED!

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/2/2020 23:28:45'!
PASSED!

!testRun: #InternalAPITest #test18ListPurchasesWithEmptyCart stamp: 'eb 12/2/2020 23:28:47'!
ERROR!

!testRun: #InternalAPITest #test18ListPurchasesWithEmptyCart stamp: 'eb 12/2/2020 23:28:47'!
ERROR!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:30:23' prior: 51006888!
test18ListPurchasesWithEmptyCart

    ! !

!classDefinition: #InternalAPITest category: #TusLibros stamp: 'eb 12/2/2020 23:30:31'!
TestCase subclass: #InternalAPITest
	instanceVariableNames: 'debitBehavior testObjectFactory internalApi'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51004750!
test09ListCartWithEmptyCart
	| cartId listCartResponse |
	cartId _ self validCartId .	
	
	listCartResponse _ internalApi listCart: cartId.
	
	self assertSuccessfullyResponse: listCartResponse.
	self assert: listCartResponse payload isEmpty.

	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51005816!
test13CheckOutIsUnsuccessfullyWithEmptyCart

	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
			
	checkoutResponse _ internalApi 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: Cashier cartCanNotBeEmptyErrorMessage equals: checkoutResponse payload .! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51005662!
test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
		
	checkoutResponse _ internalApi 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: checkoutResponse.
	
	self assert: 1 equals: checkoutResponse payload .
! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51003553 overrides: 16927572!
setUp 
	debitBehavior _ [ :anAmount :aCreditCard | ].
	testObjectFactory _ StoreTestObjectsFactory new.
	
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51007022!
test10ListCartWithNotEmptyCart
	| cartId listCartResponse targetElements |
	cartId _ self validCartId .	
	
	self successfullyAddResponseFor: cartId.
		
	targetElements _ Bag new.
	
	targetElements  add: testObjectFactory itemSellByTheStore withOccurrences: 3. 
	
	listCartResponse _ internalApi listCart: cartId.
	
	self assertSuccessfullyResponse: listCartResponse .
	self assert: targetElements equals: listCartResponse payload .
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51003863!
successfullyAddResponseFor: aCartId

	^ internalApi 
		add: testObjectFactory itemSellByTheStore
		toCart: aCartId 
		withQuantity: 3 
		on: testObjectFactory today! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51004381!
test08AddToCartIsUnsuccessfullyWithIvalidISBN
	| cartId addResponse |		
	cartId _ self validCartId .
	addResponse _ internalApi
		add: self invalidCartId 
		toCart: cartId
		withQuantity: 3
		on: testObjectFactory today.
	
	self assertUnsuccesfullyResponse: addResponse .
	
	self assert: addResponse payload = Cart invalidItemErrorMessage.
	
	
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51003854!
assertSuccessfullyAddResponseAddsItemsCorrectlyFor: aCartId

	self assert: (internalApi 
		cart: aCartId
		has: testObjectFactory itemSellByTheStore 
		withQuantity: 3).! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51005899!
test15CheckOutIsUnsuccessfullyWithExpiredCreditCard
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId .
			
	checkoutResponse _ internalApi 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory expiredCreditCard
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: Cashier canNotChargeAnExpiredCreditCardErrorMessage  equals: checkoutResponse payload .! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51004803!
test11ListCartWithInvalidCart
	| cartId listCartResponse |
	cartId _ self invalidCartId .	
	
	listCartResponse _ internalApi listCart: cartId.
	self assertUnsuccesfullyResponse: listCartResponse.

	self assert: internalApi class cartNotRegisteredErrorDescription equals: listCartResponse payload .
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51006151!
test16CheckOutIsUnsuccessfullyWithInvalidUser

	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
			
	checkoutResponse _ internalApi 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Steve Jobs'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI userHasNotCartsErrorDescription equals: checkoutResponse payload .! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51003709!
validCartId

	^ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51006386!
test17CheckOutIsUnsuccessfullyWithAlienCart

	| alanKayCartId  danIngallsCartId checkoutResponse |
 		
	alanKayCartId _ self validCartId .
	
	danIngallsCartId  _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
	
	self successfullyAddResponseFor: alanKayCartId.
			
	self successfullyAddResponseFor: danIngallsCartId.

	checkoutResponse _ internalApi 
		checkOutCart: alanKayCartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Dan Ingalls'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI cartDoesNotBelongToUserErrorDescription equals: checkoutResponse payload .! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51003664!
test04CreateCartSuccessfullyEffectivlyCreatesCart
	| response |
	response _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	self assertSuccessfullyResponse: response.
	self assert: (internalApi hasCartsOf: 'Alan Kay').
	
		
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51004355!
test07AddToCartIsUnsuccessfullyWithInvalidCartId

	| addResponse |	
	addResponse _ internalApi 
		add: testObjectFactory itemSellByTheStore 
		toCart: self invalidCartId
		withQuantity: 3 
		on: testObjectFactory today.
	self assertUnsuccesfullyResponse: addResponse .
	self assert: addResponse payload equals: InternalAPI cartNotRegisteredErrorDescription.
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51003595!
test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword
	self assertSuccessfullyResponse: (internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk').! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51003637!
test02CreateCartReturnsDifferentIdsPerCustomer
	| firstCustomerCartId secondCustomerCartId |
	firstCustomerCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload .
	secondCustomerCartId _ (internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk') payload.	
	self deny: firstCustomerCartId = secondCustomerCartId
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51005853!
test14CheckOutIsUnsuccessfullyWithInvalidCart

	| cartId checkoutResponse |
 		
	cartId _ self invalidCartId .
			
	checkoutResponse _ internalApi 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI cartNotRegisteredErrorDescription equals: checkoutResponse payload .! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51003651!
test03CreateCartIsUnsuccessfullyWithUnregisteredClientId
	| response |
	response _ internalApi createCartFor: 'Edsger Dijkstra' with: 'nanoDijkstra'.
	self assertUnsuccesfullyResponse: response.
	self assert: response payload equals: InternalAPI userNotRegisteredErrorDescription. 
		
	
		
	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:33:51' prior: 51007179!
test18ListPurchasesWithEmptyCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: DetailedSale empty equals: listPurchasesResponse payload .
	! !

!testRun: #InternalAPITest #test18ListPurchasesWithEmptyCart stamp: 'eb 12/2/2020 23:33:58'!
ERROR!

!testRun: #InternalAPITest #test18ListPurchasesWithEmptyCart stamp: 'eb 12/2/2020 23:33:58'!
ERROR!
!InternalAPI methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:34:20'!
listPurchasesOf: aString with: aString2 
	self shouldBeImplemented.! !
!InternalAPI methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:34:50' prior: 51007478!
listPurchasesOf: anUser with: aPassword
 
	^ SuccessfulResponse with: DetailedSale empty.! !

!testRun: #InternalAPITest #test18ListPurchasesWithEmptyCart stamp: 'eb 12/2/2020 23:34:53'!
ERROR!

!testRun: #InternalAPITest #test18ListPurchasesWithEmptyCart stamp: 'eb 12/2/2020 23:34:53'!
ERROR!
!DetailedSale class methodsFor: 'instance creation' stamp: 'eb 12/2/2020 23:34:59'!
empty
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeEmpty! !
!DetailedSale class methodsFor: 'instance creation' stamp: 'eb 12/2/2020 23:35:22' prior: 51007496!
empty
	
	^self new initializeEmpty.! !
!DetailedSale class methodsFor: 'instance creation' stamp: 'eb 12/2/2020 23:35:24' prior: 51007504!
empty

	^self new initializeEmpty.! !

!testRun: #InternalAPITest #test18ListPurchasesWithEmptyCart stamp: 'eb 12/2/2020 23:35:29'!
ERROR!
!DetailedSale methodsFor: 'initialization' stamp: 'eb 12/2/2020 23:35:42'!
initializeEmpty
	self shouldBeImplemented.! !
!DetailedSale methodsFor: 'initialization' stamp: 'eb 12/2/2020 23:36:20' prior: 51007516!
initializeEmpty
	
	^ self initializeOf: 0 with: Bag new .! !

!testRun: #InternalAPITest #test18ListPurchasesWithEmptyCart stamp: 'eb 12/2/2020 23:36:23'!
FAILURE!

!testRun: #InternalAPITest #test18ListPurchasesWithEmptyCart stamp: 'eb 12/2/2020 23:36:23'!
FAILURE!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:36:47' prior: 51007459!
test18ListPurchasesWithEmptyCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	! !
!InternalAPI methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:37:07' prior: 51007484!
listPurchasesOf: anUser with: aPassword
 
	^ SuccessfulResponse with: (DetailedSale of: 0 with: Bag new).! !

!methodRemoval: DetailedSale #initializeEmpty stamp: 'eb 12/2/2020 23:37:17'!
initializeEmpty
	
	^ self initializeOf: 0 with: Bag new .!

!methodRemoval: DetailedSale class #empty stamp: 'eb 12/2/2020 23:37:21'!
empty

	^self new initializeEmpty.!

!testRun: #InternalAPITest #test18ListPurchasesWithEmptyCart stamp: 'eb 12/2/2020 23:37:28'!
FAILURE!

!testRun: #InternalAPITest #test18ListPurchasesWithEmptyCart stamp: 'eb 12/2/2020 23:37:28'!
FAILURE!

!testRun: #InternalAPITest #test18ListPurchasesWithEmptyCart stamp: 'eb 12/2/2020 23:37:44'!
FAILURE!

!testRun: #InternalAPITest #test18ListPurchasesWithEmptyCart stamp: 'eb 12/2/2020 23:37:44'!
FAILURE!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:40:18' prior: 51007533!
test18ListPurchasesWithEmptyCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	! !
!DetailedSale methodsFor: 'nil' stamp: 'eb 12/2/2020 23:41:33' overrides: 16881029!
= aDetailedSale

	^ total = aDetailedSale total and: (detail = aDetailedSale detail).
	! !

!testRun: #InternalAPITest #test18ListPurchasesWithEmptyCart stamp: 'eb 12/2/2020 23:41:50'!
PASSED!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:42:55'!
test18SuccesfullyListPurchasesOfEmptyCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	! !

!methodRemoval: InternalAPITest #test18ListPurchasesWithEmptyCart stamp: 'eb 12/2/2020 23:42:55'!
test18ListPurchasesWithEmptyCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:44:44'!
test19SuccesfullyListPurchasesOfCartWithOnlyOneItem

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:46:06' prior: 51007621!
test19SuccesfullyListPurchasesOfCartWithOnlyOneItem

	| cartId listPurchasesResponse |
	
	cartId _ self validCartId .
	
	internalApi
		add: testObjectFactory itemSellByTheStore 
		toCart: cartId.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:49:35' prior: 51007635!
test19SuccesfullyListPurchasesOfCartWithOnlyOneItem

	| cartId listPurchasesResponse |
	
	cartId _ self validCartId .
	
	internalApi
		add: testObjectFactory itemSellByTheStore 
		toCart: cartId
		withQuantity: 1
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self 
		assert: (DetailedSale of: testObjectFactory itemSellByTheStorePrice with: (Bag with: testObjectFactory itemNotSellByTheStore)) 
		equals: listPurchasesResponse payload .
	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:49:39' prior: 51007652!
test19SuccesfullyListPurchasesOfCartWithOnlyOneItem

	| cartId listPurchasesResponse |
	
	cartId _ self validCartId .
	
	internalApi
		add: testObjectFactory itemSellByTheStore 
		toCart: cartId
		withQuantity: 1
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self 
		assert: (DetailedSale of: testObjectFactory itemSellByTheStorePrice with: (Bag with: testObjectFactory itemNotSellByTheStore)) 
		equals: listPurchasesResponse payload .
	! !

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/2/2020 23:50:02'!
FAILURE!

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/2/2020 23:50:02'!
FAILURE!

!classDefinition: #InternalAPI category: #TusLibros stamp: 'eb 12/2/2020 23:52:40'!
Object subclass: #InternalAPI
	instanceVariableNames: 'users nextCartId carts date modifications cartsPerUser catalog merchantProcesor nextCheckOutId purchases detailedSalePerUser'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPI methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:52:38' prior: 51007546!
listPurchasesOf: anUser with: aPassword
 
	^ SuccessfulResponse with: (detailedSalePerUser at: anUser).! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 23:54:12' prior: 51006791!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
		
	(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
	
	((cartsPerUser at: anUser) = cart) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
	[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
		on: Error 
		do: [:error| ^ UnsuccessfulResponse with: error messageText].
		
	checkoutId _ self nextCheckOutId.
	
	self addDetailedSaleTo: anUser of: cart items withCost: cashier checkOut.
		
	^ SuccessfulResponse with: checkoutId.
	! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 23:57:05'!
addDetailedSaleTo: anUser of: anItemsCollection withCost: aCost

	detailedSalePerUser at: anUser put: (DetailedSale of: aCost with: anItemsCollection)
	
	! !

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/2/2020 23:57:13'!
ERROR!

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/2/2020 23:57:13'!
ERROR!
!InternalAPI methodsFor: 'initialization' stamp: 'eb 12/2/2020 23:57:42' prior: 51005187!
initializeWith: aUsersCollection on: aDate usingCatalog: aCatalog usingMerchantProccesor: aMerchantProccesor
	users _ aUsersCollection.
	date _ aDate.
	catalog _ aCatalog.
	merchantProcesor _ aMerchantProccesor.
	carts _ Dictionary new.
	cartsPerUser _ Dictionary new.
	modifications _ Dictionary new.
	detailedSalePerUser _ Dictionary new .
	nextCartId _ 0.
	nextCheckOutId _ 0.! !

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/2/2020 23:57:49'!
FAILURE!

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/2/2020 23:57:49'!
FAILURE!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:58:14' prior: 51007678!
test19SuccesfullyListPurchasesOfCartWithOnlyOneItem

	| cartId listPurchasesResponse |
	
	cartId _ self validCartId .
	
	internalApi
		add: testObjectFactory itemSellByTheStore 
		toCart: cartId
		withQuantity: 1
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self 
		assert: (DetailedSale of: testObjectFactory itemSellByTheStorePrice with: (Bag with: testObjectFactory itemSellByTheStore)) 
		equals: listPurchasesResponse payload .
	! !

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/2/2020 23:58:15'!
FAILURE!

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/2/2020 23:58:15'!
FAILURE!

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/2/2020 23:58:22'!
FAILURE!

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/2/2020 23:58:22'!
FAILURE!

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/2/2020 23:58:30'!
FAILURE!

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/2/2020 23:58:30'!
FAILURE!
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 00:00:02' prior: 51007729!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
		
	(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
	
	((cartsPerUser at: anUser) = cart) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
	[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
		on: Error 
		do: [:error| ^ UnsuccessfulResponse with: error messageText].
		
	checkoutId _ self nextCheckOutId.
	
	self addDetailedSaleTo: anUser of: cart items asBag withCost: cashier checkOut.
		
	^ SuccessfulResponse with: checkoutId.
	! !

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/3/2020 00:00:15'!
PASSED!
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 00:00:48' prior: 51007847!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
		
	(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
	
	((cartsPerUser at: anUser) = cart) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
	[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
		on: Error 
		do: [:error| ^ UnsuccessfulResponse with: error messageText].
		
	checkoutId _ self nextCheckOutId.
	
	self addDetailedSaleTo: anUser of: cart items withCost: cashier checkOut.
		
	^ SuccessfulResponse with: checkoutId.
	! !

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/3/2020 00:00:54'!
FAILURE!

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/3/2020 00:00:54'!
FAILURE!

!methodRemoval: InternalAPI #addPurchase:to:of:withCost: stamp: 'eb 12/3/2020 00:02:21'!
addPurchase: aSmallInteger to: aString of: anOrderedCollection withCost: aSmallInteger4 
	
	!
!InternalAPI methodsFor: 'nil' stamp: 'eb 12/3/2020 00:03:36'!
priceOf: anItem
	
	^ catalog at: anItem .! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 00:05:17' prior: 51007759!
addDetailedSaleTo: anUser of: anItemsCollection withCost: aCost
	
	| item itemsWithPrice |
	
	item _ anItemsCollection first .
	
	itemsWithPrice _ Dictionary new .
	
	itemsWithPrice at: item put: (self priceOf: item).
	
	detailedSalePerUser at: anUser put: (DetailedSale of: aCost with: itemsWithPrice)
	
	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:07:35' prior: 51007798!
test19SuccesfullyListPurchasesOfCartWithOnlyOneItem

	| cartId listPurchasesResponse expectedResponsePayload |
	
	cartId _ self validCartId .
	
	internalApi
		add: testObjectFactory itemSellByTheStore 
		toCart: cartId
		withQuantity: 1
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedResponsePayload _ DetailedSale 
		of: testObjectFactory itemSellByTheStorePrice 
		with: (Dictionary new add: testObjectFactory itemSellByTheStore -> testObjectFactory itemSellByTheStorePrice).
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse payload .
	! !

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/3/2020 00:07:39'!
FAILURE!

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/3/2020 00:07:39'!
FAILURE!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:10:54' prior: 51007942!
test19SuccesfullyListPurchasesOfCartWithOnlyOneItem

	| cartId listPurchasesResponse expectedDetail expectedResponsePayload |
	
	cartId _ self validCartId .
	
	internalApi
		add: testObjectFactory itemSellByTheStore 
		toCart: cartId
		withQuantity: 1
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> testObjectFactory itemSellByTheStorePrice.
	
	expectedResponsePayload _ DetailedSale of: testObjectFactory itemSellByTheStorePrice  with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse payload .
	! !

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/3/2020 00:10:56'!
PASSED!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:13:14'!
test20SuccesfullyListPurchasesOfCartWithManyItems

	| cartId listPurchasesResponse expectedDetail expectedResponsePayload |
	
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> testObjectFactory itemSellByTheStorePrice * 3.
	
	expectedResponsePayload _ DetailedSale of: testObjectFactory itemSellByTheStorePrice with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse payload .
	! !

!testRun: #InternalAPITest #test20SuccesfullyListPurchasesOfCartWithManyItems stamp: 'eb 12/3/2020 00:13:16'!
ERROR!

!testRun: #InternalAPITest #test20SuccesfullyListPurchasesOfCartWithManyItems stamp: 'eb 12/3/2020 00:13:16'!
ERROR!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:13:36' prior: 51008015!
test20SuccesfullyListPurchasesOfCartWithManyItems

	| cartId listPurchasesResponse expectedDetail expectedResponsePayload |
	
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedResponsePayload _ DetailedSale of: (testObjectFactory itemSellByTheStorePrice * 3)with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse payload .
	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:13:38' prior: 51008052!
test20SuccesfullyListPurchasesOfCartWithManyItems

	| cartId listPurchasesResponse expectedDetail expectedResponsePayload |
	
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedResponsePayload _ DetailedSale of: (testObjectFactory itemSellByTheStorePrice * 3) with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse payload .
	! !

!testRun: #InternalAPITest #test20SuccesfullyListPurchasesOfCartWithManyItems stamp: 'eb 12/3/2020 00:13:44'!
FAILURE!

!testRun: #InternalAPITest #test20SuccesfullyListPurchasesOfCartWithManyItems stamp: 'eb 12/3/2020 00:13:44'!
FAILURE!
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 00:15:00' prior: 51007929!
addDetailedSaleTo: anUser of: anItemsCollection withCost: aCost
	
	| item itemsWithPrice |
	
	item _ anItemsCollection first .
	
	itemsWithPrice _ Dictionary new .
	
	itemsWithPrice at: item put: (self priceOf: item * (anItemsCollection occurrencesOf: item)).
	
	detailedSalePerUser at: anUser put: (DetailedSale of: aCost with: itemsWithPrice)
	
	! !

!testRun: #InternalAPITest #test20SuccesfullyListPurchasesOfCartWithManyItems stamp: 'eb 12/3/2020 00:15:06'!
ERROR!

!testRun: #InternalAPITest #test20SuccesfullyListPurchasesOfCartWithManyItems stamp: 'eb 12/3/2020 00:15:06'!
ERROR!
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 00:15:31' prior: 51008119!
addDetailedSaleTo: anUser of: anItemsCollection withCost: aCost
	
	| item itemsWithPrice |
	
	item _ anItemsCollection first .
	
	itemsWithPrice _ Dictionary new .
	
	itemsWithPrice at: item put: ((self priceOf: item) * (anItemsCollection occurrencesOf: item)).
	
	detailedSalePerUser at: anUser put: (DetailedSale of: aCost with: itemsWithPrice)
	
	! !

!testRun: #InternalAPITest #test20SuccesfullyListPurchasesOfCartWithManyItems stamp: 'eb 12/3/2020 00:15:37'!
PASSED!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:15:50'!
test20SuccesfullyListPurchasesOfCartWithManyItemsOfSameType

	| cartId listPurchasesResponse expectedDetail expectedResponsePayload |
	
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedResponsePayload _ DetailedSale of: (testObjectFactory itemSellByTheStorePrice * 3) with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse payload .
	! !

!methodRemoval: InternalAPITest #test20SuccesfullyListPurchasesOfCartWithManyItems stamp: 'eb 12/3/2020 00:15:50'!
test20SuccesfullyListPurchasesOfCartWithManyItems

	| cartId listPurchasesResponse expectedDetail expectedResponsePayload |
	
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedResponsePayload _ DetailedSale of: (testObjectFactory itemSellByTheStorePrice * 3) with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse payload .
	!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:16:03'!
test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes

	| cartId listPurchasesResponse expectedDetail expectedResponsePayload |
	
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedResponsePayload _ DetailedSale of: (testObjectFactory itemSellByTheStorePrice * 3) with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse payload .
	! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'eb 12/3/2020 00:17:12'!
anotherItemSellByTheStore
	
	^ 'anotherValidBook'! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'eb 12/3/2020 00:17:23'!
anotherItemSellByTheStorePrice
	
	^20! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:18:50' prior: 51008219!
test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes

	| cartId listPurchasesResponse expectedDetail expectedResponsePayload |
	
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
	
	internalApi 
		add: testObjectFactory anotherItemSellByTheStore 
		toCart:  cartId 
		withQuantity: 3
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedResponsePayload _ DetailedSale of: (testObjectFactory itemSellByTheStorePrice * 3) with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse payload .
	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:19:50' prior: 51008259!
test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes

	| cartId listPurchasesResponse expectedDetail expectedResponsePayload |
	
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
	
	internalApi 
		add: testObjectFactory anotherItemSellByTheStore 
		toCart:  cartId 
		withQuantity: 4
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedDetail add: testObjectFactory anotherItemSellByTheStore -> (testObjectFactory anotherItemSellByTheStorePrice * 4).
	
	expectedResponsePayload _ DetailedSale of: (testObjectFactory itemSellByTheStorePrice * 3) with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse payload .
	! !

!testRun: #InternalAPITest #test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes stamp: 'eb 12/3/2020 00:19:56'!
FAILURE!

!testRun: #InternalAPITest #test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes stamp: 'eb 12/3/2020 00:19:56'!
FAILURE!
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 00:20:54' prior: 51008141!
addDetailedSaleTo: anUser of: anItemsCollection withCost: aCost
	
	| itemsWithPrice |
	
	itemsWithPrice _ Dictionary new .
	
	anItemsCollection do: [ :item | itemsWithPrice at: item put: ((self priceOf: item) * (anItemsCollection occurrencesOf: item)) ].
	
	detailedSalePerUser at: anUser put: (DetailedSale of: aCost with: itemsWithPrice)
	
	! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 00:21:16' prior: 51008339!
addDetailedSaleTo: anUser of: anItemsCollection withCost: aCost
	
	| itemsWithPrice |
	
	itemsWithPrice _ Dictionary new .
	
	anItemsCollection do: [ :item | 
		itemsWithPrice at: item put: ((self priceOf: item) * (anItemsCollection occurrencesOf: item)) 
	].
	
	detailedSalePerUser at: anUser put: (DetailedSale of: aCost with: itemsWithPrice)
	
	! !

!testRun: #InternalAPITest #test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes stamp: 'eb 12/3/2020 00:21:24'!
FAILURE!

!testRun: #InternalAPITest #test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes stamp: 'eb 12/3/2020 00:21:24'!
FAILURE!

!testRun: #InternalAPITest #test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes stamp: 'eb 12/3/2020 00:22:20'!
FAILURE!

!testRun: #InternalAPITest #test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes stamp: 'eb 12/3/2020 00:22:20'!
FAILURE!
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 00:23:09' prior: 51008353!
addDetailedSaleTo: anUser of: anItemsCollection withCost: aCost
	
	| itemsWithPrice |
	
	self halt .
	
	itemsWithPrice _ Dictionary new .
	
	anItemsCollection do: [ :item | 
		itemsWithPrice at: item put: ((self priceOf: item) * (anItemsCollection occurrencesOf: item)) 
	].
	
	detailedSalePerUser at: anUser put: (DetailedSale of: aCost with: itemsWithPrice)
	
	! !

!testRun: #InternalAPITest #test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword stamp: 'eb 12/3/2020 00:23:12'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdsPerCustomer stamp: 'eb 12/3/2020 00:23:12'!
PASSED!

!testRun: #InternalAPITest #test03CreateCartIsUnsuccessfullyWithUnregisteredClientId stamp: 'eb 12/3/2020 00:23:12'!
PASSED!

!testRun: #InternalAPITest #test04CreateCartSuccessfullyEffectivlyCreatesCart stamp: 'eb 12/3/2020 00:23:12'!
PASSED!

!testRun: #InternalAPITest #test05AddToCartIsSuccessfullyWithValidCartId stamp: 'eb 12/3/2020 00:23:12'!
PASSED!

!testRun: #InternalAPITest #test06AddToCartSuccessfullyEffectivlyAddsToCart stamp: 'eb 12/3/2020 00:23:12'!
PASSED!

!testRun: #InternalAPITest #test07AddToCartIsUnsuccessfullyWithInvalidCartId stamp: 'eb 12/3/2020 00:23:12'!
PASSED!

!testRun: #InternalAPITest #test08AddToCartIsUnsuccessfullyWithIvalidISBN stamp: 'eb 12/3/2020 00:23:12'!
PASSED!

!testRun: #InternalAPITest #test09ListCartWithEmptyCart stamp: 'eb 12/3/2020 00:23:12'!
PASSED!

!testRun: #InternalAPITest #test10ListCartWithNotEmptyCart stamp: 'eb 12/3/2020 00:23:12'!
PASSED!

!testRun: #InternalAPITest #test11ListCartWithInvalidCart stamp: 'eb 12/3/2020 00:23:12'!
PASSED!

!testRun: #InternalAPITest #test13CheckOutIsUnsuccessfullyWithEmptyCart stamp: 'eb 12/3/2020 00:23:12'!
PASSED!

!testRun: #InternalAPITest #test14CheckOutIsUnsuccessfullyWithInvalidCart stamp: 'eb 12/3/2020 00:23:12'!
PASSED!

!testRun: #InternalAPITest #test15CheckOutIsUnsuccessfullyWithExpiredCreditCard stamp: 'eb 12/3/2020 00:23:12'!
PASSED!

!testRun: #InternalAPITest #test16CheckOutIsUnsuccessfullyWithInvalidUser stamp: 'eb 12/3/2020 00:23:12'!
PASSED!

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/3/2020 00:23:12'!
PASSED!

!testRun: #InternalAPITest #test18SuccesfullyListPurchasesOfEmptyCart stamp: 'eb 12/3/2020 00:23:12'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'eb 12/3/2020 00:26:15' prior: 51002386!
defaultCatalog
	
	^ Dictionary new
		at: self itemSellByTheStore put: self itemSellByTheStorePrice;
		
		at: self anotherItemSellByTheStore put: self anotherItemSellByTheStorePrice;
		yourself ! !

!testRun: #InternalAPITest #test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes stamp: 'eb 12/3/2020 00:26:27'!
FAILURE!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:27:30' prior: 51008293!
test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes

	| cartId listPurchasesResponse expectedDetail expectedResponsePayload |
	
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
	
	internalApi 
		add: testObjectFactory anotherItemSellByTheStore 
		toCart:  cartId 
		withQuantity: 4
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedDetail add: testObjectFactory anotherItemSellByTheStore -> (testObjectFactory anotherItemSellByTheStorePrice * 4).
	
	expectedResponsePayload _ DetailedSale 
		of: (testObjectFactory itemSellByTheStorePrice * 3) + (testObjectFactory anotherItemSellByTheStorePrice * 4) 
		with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse payload .
	! !

!testRun: #InternalAPITest #test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes stamp: 'eb 12/3/2020 00:27:35'!
PASSED!
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 00:27:47' prior: 51008384!
addDetailedSaleTo: anUser of: anItemsCollection withCost: aCost
	
	| itemsWithPrice |
		
	itemsWithPrice _ Dictionary new .
	
	anItemsCollection do: [ :item | 
		itemsWithPrice at: item put: ((self priceOf: item) * (anItemsCollection occurrencesOf: item)) 
	].
	
	detailedSalePerUser at: anUser put: (DetailedSale of: aCost with: itemsWithPrice)
	
	! !

!testRun: #InternalAPITest #test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes stamp: 'eb 12/3/2020 00:27:57'!
PASSED!
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 00:29:13' prior: 51008517!
addDetailedSaleTo: anUser of: anItemsCollection withCost: aCost
	
	| itemsWithPrice |
		
	itemsWithPrice _ Dictionary new .
	
	anItemsCollection do: [ :item | (itemsWithPrice includesKey: item) ifFalse:
		 [ itemsWithPrice at: item put: ((self priceOf: item) * (anItemsCollection occurrencesOf: item)) ]
	].
	
	detailedSalePerUser at: anUser put: (DetailedSale of: aCost with: itemsWithPrice)
	
	! !

!testRun: #InternalAPITest #test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes stamp: 'eb 12/3/2020 00:29:48'!
PASSED!

!testRun: #InternalAPITest #test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword stamp: 'eb 12/3/2020 00:29:52'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdsPerCustomer stamp: 'eb 12/3/2020 00:29:52'!
PASSED!

!testRun: #InternalAPITest #test03CreateCartIsUnsuccessfullyWithUnregisteredClientId stamp: 'eb 12/3/2020 00:29:52'!
PASSED!

!testRun: #InternalAPITest #test04CreateCartSuccessfullyEffectivlyCreatesCart stamp: 'eb 12/3/2020 00:29:52'!
PASSED!

!testRun: #InternalAPITest #test05AddToCartIsSuccessfullyWithValidCartId stamp: 'eb 12/3/2020 00:29:52'!
PASSED!

!testRun: #InternalAPITest #test06AddToCartSuccessfullyEffectivlyAddsToCart stamp: 'eb 12/3/2020 00:29:52'!
PASSED!

!testRun: #InternalAPITest #test07AddToCartIsUnsuccessfullyWithInvalidCartId stamp: 'eb 12/3/2020 00:29:52'!
PASSED!

!testRun: #InternalAPITest #test08AddToCartIsUnsuccessfullyWithIvalidISBN stamp: 'eb 12/3/2020 00:29:52'!
PASSED!

!testRun: #InternalAPITest #test09ListCartWithEmptyCart stamp: 'eb 12/3/2020 00:29:52'!
PASSED!

!testRun: #InternalAPITest #test10ListCartWithNotEmptyCart stamp: 'eb 12/3/2020 00:29:52'!
PASSED!

!testRun: #InternalAPITest #test11ListCartWithInvalidCart stamp: 'eb 12/3/2020 00:29:52'!
PASSED!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/3/2020 00:29:52'!
PASSED!

!testRun: #InternalAPITest #test13CheckOutIsUnsuccessfullyWithEmptyCart stamp: 'eb 12/3/2020 00:29:52'!
PASSED!

!testRun: #InternalAPITest #test14CheckOutIsUnsuccessfullyWithInvalidCart stamp: 'eb 12/3/2020 00:29:52'!
PASSED!

!testRun: #InternalAPITest #test15CheckOutIsUnsuccessfullyWithExpiredCreditCard stamp: 'eb 12/3/2020 00:29:52'!
PASSED!

!testRun: #InternalAPITest #test16CheckOutIsUnsuccessfullyWithInvalidUser stamp: 'eb 12/3/2020 00:29:52'!
PASSED!

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/3/2020 00:29:52'!
PASSED!

!testRun: #InternalAPITest #test18SuccesfullyListPurchasesOfEmptyCart stamp: 'eb 12/3/2020 00:29:52'!
ERROR!

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/3/2020 00:29:52'!
PASSED!

!testRun: #InternalAPITest #test20SuccesfullyListPurchasesOfCartWithManyItemsOfSameType stamp: 'eb 12/3/2020 00:29:52'!
PASSED!

!testRun: #InternalAPITest #test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes stamp: 'eb 12/3/2020 00:29:52'!
PASSED!

!testRun: #InternalAPITest #test18SuccesfullyListPurchasesOfEmptyCart stamp: 'eb 12/3/2020 00:29:52'!
ERROR!

!testRun: #InternalAPITest #test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword stamp: 'eb 12/3/2020 00:30:00'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdsPerCustomer stamp: 'eb 12/3/2020 00:30:00'!
PASSED!

!testRun: #InternalAPITest #test03CreateCartIsUnsuccessfullyWithUnregisteredClientId stamp: 'eb 12/3/2020 00:30:00'!
PASSED!

!testRun: #InternalAPITest #test04CreateCartSuccessfullyEffectivlyCreatesCart stamp: 'eb 12/3/2020 00:30:00'!
PASSED!

!testRun: #InternalAPITest #test05AddToCartIsSuccessfullyWithValidCartId stamp: 'eb 12/3/2020 00:30:01'!
PASSED!

!testRun: #InternalAPITest #test06AddToCartSuccessfullyEffectivlyAddsToCart stamp: 'eb 12/3/2020 00:30:01'!
PASSED!

!testRun: #InternalAPITest #test07AddToCartIsUnsuccessfullyWithInvalidCartId stamp: 'eb 12/3/2020 00:30:01'!
PASSED!

!testRun: #InternalAPITest #test08AddToCartIsUnsuccessfullyWithIvalidISBN stamp: 'eb 12/3/2020 00:30:01'!
PASSED!

!testRun: #InternalAPITest #test09ListCartWithEmptyCart stamp: 'eb 12/3/2020 00:30:02'!
PASSED!

!testRun: #InternalAPITest #test10ListCartWithNotEmptyCart stamp: 'eb 12/3/2020 00:30:02'!
PASSED!

!testRun: #InternalAPITest #test11ListCartWithInvalidCart stamp: 'eb 12/3/2020 00:30:03'!
PASSED!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/3/2020 00:30:04'!
PASSED!

!testRun: #InternalAPITest #test13CheckOutIsUnsuccessfullyWithEmptyCart stamp: 'eb 12/3/2020 00:30:04'!
PASSED!

!testRun: #InternalAPITest #test14CheckOutIsUnsuccessfullyWithInvalidCart stamp: 'eb 12/3/2020 00:30:04'!
PASSED!

!testRun: #InternalAPITest #test15CheckOutIsUnsuccessfullyWithExpiredCreditCard stamp: 'eb 12/3/2020 00:30:04'!
PASSED!

!testRun: #InternalAPITest #test16CheckOutIsUnsuccessfullyWithInvalidUser stamp: 'eb 12/3/2020 00:30:04'!
PASSED!

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/3/2020 00:30:04'!
PASSED!

!testRun: #InternalAPITest #test18SuccesfullyListPurchasesOfEmptyCart stamp: 'eb 12/3/2020 00:30:06'!
ERROR!

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/3/2020 00:30:06'!
PASSED!

!testRun: #InternalAPITest #test20SuccesfullyListPurchasesOfCartWithManyItemsOfSameType stamp: 'eb 12/3/2020 00:30:06'!
PASSED!

!testRun: #InternalAPITest #test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes stamp: 'eb 12/3/2020 00:30:06'!
PASSED!

!testRun: #InternalAPITest #test18SuccesfullyListPurchasesOfEmptyCart stamp: 'eb 12/3/2020 00:30:06'!
ERROR!

!testRun: #InternalAPITest #test18SuccesfullyListPurchasesOfEmptyCart stamp: 'eb 12/3/2020 00:30:10'!
ERROR!

!testRun: #InternalAPITest #test18SuccesfullyListPurchasesOfEmptyCart stamp: 'eb 12/3/2020 00:30:10'!
ERROR!

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/3/2020 00:30:14'!
PASSED!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:30:56'!
test18CannotQueryListPurchasesOfEmptyCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:31:05'!
test19CannotQueryListPurchasesOfInvalidCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:31:15'!
test22SuccesfullyListPurchasesOfEmptyCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	! !

!methodRemoval: InternalAPITest #test18SuccesfullyListPurchasesOfEmptyCart stamp: 'eb 12/3/2020 00:31:15'!
test18SuccesfullyListPurchasesOfEmptyCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:31:20'!
test23CannotQueryListPurchasesOfInvalidCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	! !

!methodRemoval: InternalAPITest #test19CannotQueryListPurchasesOfInvalidCart stamp: 'eb 12/3/2020 00:31:21'!
test19CannotQueryListPurchasesOfInvalidCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:31:30'!
test24CannotQueryListPurchasesOfAlienCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	! !

!methodRemoval: InternalAPITest #test22SuccesfullyListPurchasesOfEmptyCart stamp: 'eb 12/3/2020 00:31:44'!
test22SuccesfullyListPurchasesOfEmptyCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:31:47'!
test22CannotQueryListPurchasesOfInvalidCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	! !

!methodRemoval: InternalAPITest #test23CannotQueryListPurchasesOfInvalidCart stamp: 'eb 12/3/2020 00:31:48'!
test23CannotQueryListPurchasesOfInvalidCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:31:53'!
test23CannotQueryListPurchasesOfAlienCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	! !

!methodRemoval: InternalAPITest #test24CannotQueryListPurchasesOfAlienCart stamp: 'eb 12/3/2020 00:31:53'!
test24CannotQueryListPurchasesOfAlienCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:32:31' prior: 51008727!
test18CannotQueryListPurchasesOfEmptyCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertUnsuccesfullyResponse: listPurchasesResponse .
	
	self assert: InternalAPI canNotQueryListPurchasesOfEmptyCartErroDescription equals: listPurchasesResponse payload .
	! !
!InternalAPI methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:33:48' prior: 51007722!
listPurchasesOf: anUser with: aPassword

	| detailedSale |
	
	[ detailedSale  _ detailedSalePerUser at: anUser ] ifAbsent: [ self error: self class canNotQueryListPurchsesOfEmptyCartErrorDescription ].
 
	^ SuccessfulResponse with: (detailedSalePerUser at: anUser).! !
!InternalAPI methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:34:12' prior: 51008903!
listPurchasesOf: anUser with: aPassword

	| detailedSale |
	
	[ detailedSale  _ detailedSalePerUser at: anUser ] ifAbsent: [ self error: self class canNotQueryListPurchsesOfEmptyCartErrorDescription ].
 
	^ SuccessfulResponse with: detailedSale.! !
!InternalAPI methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:34:28' prior: 51008915!
listPurchasesOf: anUser with: aPassword

	| detailedSale |
	
	detailedSale  _ detailedSalePerUser at: anUser ifAbsent: [ self error: self class canNotQueryListPurchsesOfEmptyCartErrorDescription ].
 
	^ SuccessfulResponse with: detailedSale.! !

!testRun: #InternalAPITest #test18CannotQueryListPurchasesOfEmptyCart stamp: 'eb 12/3/2020 00:34:35'!
ERROR!

!testRun: #InternalAPITest #test18CannotQueryListPurchasesOfEmptyCart stamp: 'eb 12/3/2020 00:34:35'!
ERROR!
!InternalAPI class methodsFor: 'error descriptions' stamp: 'eb 12/3/2020 00:34:45'!
canNotQueryListPurchsesOfEmptyCartErrorDescription
	self shouldBeImplemented.! !
!InternalAPI class methodsFor: 'error descriptions' stamp: 'eb 12/3/2020 00:35:14' prior: 51008944!
canNotQueryListPurchsesOfEmptyCartErrorDescription
	
	^ 'Can not query list purchases of empty cart'.! !

!testRun: #InternalAPITest #test18CannotQueryListPurchasesOfEmptyCart stamp: 'eb 12/3/2020 00:35:18'!
ERROR!

!testRun: #InternalAPITest #test18CannotQueryListPurchasesOfEmptyCart stamp: 'eb 12/3/2020 00:35:18'!
ERROR!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:35:37' prior: 51008888!
test18CannotQueryListPurchasesOfEmptyCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertUnsuccesfullyResponse: listPurchasesResponse .
	
	self assert: InternalAPI canNotQueryListPurchsesOfEmptyCartErrorDescription equals: listPurchasesResponse payload .
	! !
!InternalAPI methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:36:26' prior: 51008926!
listPurchasesOf: anUser with: aPassword

	| detailedSale |
	
	detailedSale  _ detailedSalePerUser at: anUser ifAbsent: 
		[ ^ UnsuccessfulResponse with: self class canNotQueryListPurchsesOfEmptyCartErrorDescription ].
 
	^ SuccessfulResponse with: detailedSale.! !

!testRun: #InternalAPITest #test18CannotQueryListPurchasesOfEmptyCart stamp: 'eb 12/3/2020 00:36:30'!
PASSED!

----STARTUP---- (3 December 2020 14:00:40) as C:\Program Files\CuisUniversity\CuisUniversity-4365.image!


!classDefinition: #InvalidBookQuantity category: #TusLibros stamp: 'eb 12/3/2020 14:00:53'!
Error subclass: #InvalidBookQuantity
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InvalidBookQuantity category: #TusLibros stamp: 'eb 12/3/2020 14:00:53'!
Error subclass: #InvalidBookQuantity
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InvalidISBN category: #TusLibros stamp: 'eb 12/3/2020 14:00:53'!
Error subclass: #InvalidISBN
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InvalidISBN category: #TusLibros stamp: 'eb 12/3/2020 14:00:53'!
Error subclass: #InvalidISBN
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #KeyNotFound category: #TusLibros stamp: 'eb 12/3/2020 14:00:53'!
Error subclass: #KeyNotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #KeyNotFound category: #TusLibros stamp: 'eb 12/3/2020 14:00:53'!
Error subclass: #KeyNotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'eb 12/3/2020 14:00:53'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'eb 12/3/2020 14:00:53'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:10' prior: 50999254!
test01NewCartsAreCreatedEmpty

	self assert: testObjectsFactory createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'ja 12/1/2020 19:13:53' prior: 50999229!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [ cart add: testObjectsFactory itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:10' prior: 50999260!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'ja 12/1/2020 19:14:32' prior: 50999215!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add: 0 of: testObjectsFactory itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'ja 12/1/2020 19:13:58' prior: 50999277!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add: 2 of: testObjectsFactory itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:11' prior: 50999292!
test06CartRemembersAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSellByTheStore.
	self assert: (cart includes: testObjectsFactory itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:11' prior: 50999269!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self deny: (cart includes: testObjectsFactory itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:11' prior: 50999243!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	self assert: (cart occurrencesOf: testObjectsFactory itemSellByTheStore) = 2! !
!CartTest methodsFor: 'setup' stamp: 'HernanWilkinson 6/17/2013 18:09' prior: 50999302 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !

!classDefinition: #CashierTest category: #TusLibros stamp: 'eb 12/3/2020 14:00:53'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'eb 12/3/2020 14:00:53'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:50' prior: 50999511!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:51' prior: 50999529!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:51' prior: 50999419!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: self
				on: testObjectsFactory today
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 19:04' prior: 50999441!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 19:00' prior: 50999486!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:59' prior: 50999459!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'setup' stamp: 'HernanWilkinson 6/17/2013 19:03' prior: 50999547 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ]! !
!CashierTest methodsFor: 'merchant processor protocol' stamp: 'HernanWilkinson 6/17/2013 19:02' prior: 50999554!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !

!classDefinition: #InternalAPITest category: #TusLibros stamp: 'eb 12/3/2020 14:00:53'!
TestCase subclass: #InternalAPITest
	instanceVariableNames: 'debitBehavior testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalAPITest category: #TusLibros stamp: 'eb 12/3/2020 14:00:53'!
TestCase subclass: #InternalAPITest
	instanceVariableNames: 'debitBehavior testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPITest methodsFor: 'create test' stamp: 'ja 12/2/2020 19:21:49'!
test01CreateCartSuccessfulWithCorrectClientIdAndPassword

	| response internalApi |
	
	internalApi _ testObjectFactory internalApi.
	response _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
		
	self assert: response code = 0.
		
	! !
!InternalAPITest methodsFor: 'create test' stamp: 'ja 12/2/2020 19:21:54'!
test02CreateCartReturnsDifferentIdPerCustomer

	| internalApi response1 response2|
	
	internalApi _ testObjectFactory internalApi.
 	
	response1 _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	response2 _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.	
	
	self deny: response1 payload = response2 payload.
		
	! !
!InternalAPITest methodsFor: 'create test' stamp: 'ja 12/2/2020 19:21:58'!
test03CreateCartReturnsOneWithUnregisteredClientId

	| internalApi response |
	
	internalApi _ testObjectFactory internalApi.
 	
	response _ internalApi createCartFor: 'Edsger Dijkstra' with: 'nanoDijkstra'.
	
	self assert: response code = 1.
	
	self assert: response payload equals: InternalAPI userNotRegisteredErrorDescription. 
		
	
		
	! !
!InternalAPITest methodsFor: 'create test' stamp: 'ja 12/2/2020 19:22:01'!
test04CreateCartSuccessfulEffectivlyCreatesCart

	| internalApi response |
	
	internalApi _ testObjectFactory internalApi.
 	
	response _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	self assert: response code = 0.
	
	self assert: (internalApi hasCartsOf: 'Alan Kay').
	
		
	! !
!InternalAPITest methodsFor: 'suport' stamp: 'ja 12/2/2020 16:54:01'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !
!InternalAPITest methodsFor: 'suport' stamp: 'ja 12/2/2020 17:30:08'!
invalidCreditCard

	^ 'Invalid credit card'! !
!InternalAPITest methodsFor: 'suport' stamp: 'ja 12/1/2020 18:56:06'!
invalidISBN

	^ 'Invalid ISBN'! !
!InternalAPITest methodsFor: 'suport' stamp: 'ja 12/1/2020 18:37:14'!
invalidIdCart

	^ 'Invalid id cart'! !
!InternalAPITest methodsFor: 'list cart' stamp: 'ja 12/2/2020 19:22:39'!
test10ListCartWithEmptyCart

	| internalApi responseCreate responseList |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseList _ internalApi listCart: responseCreate payload.
	
	self assert: responseList payload isEmpty.

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'ja 12/2/2020 19:22:43'!
test11ListCartWithOnlyItemIntoCart

	| internalApi responseCreate responseList ISBN idCart listItems |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN withOccurrences: 3.
	
	self assert: responseList payload = listItems.

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'ja 12/2/2020 19:22:47'!
test12ListCartWithManyItemsIntoCart

	| internalApi responseCreate responseList ISBN1 ISBN2 idCart listItems |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi addToCart: idCart withISBN: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi addToCart: idCart withISBN: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN1 withOccurrences: 3.
	listItems add: ISBN2 withOccurrences: 5.
	
	self assert: responseList payload = listItems.

	! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/2/2020 19:22:08'!
test05AddToCartSuccessfulWithCartId

	| internalApi responseCreate responseAdd |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseAdd _ internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3 on: (DateAndTime now). 

	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/2/2020 19:22:12'!
test06AddToCartSuccessfulEffectivlyAddedToCart

	| internalApi responseCreate responseAdd idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 

	self assert: (internalApi cart: idCart has: ISBN times: 3).
	
	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/2/2020 19:22:17'!
test07AddToCartUnsuccessfulWithCartInvalid

	| internalApi responseAdd idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ self invalidIdCart.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: InternalAPI cartNotRegisteredErrorDescription.
	! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/2/2020 19:22:21'!
test08AddToCartUnsuccessfulWithIvalidISBN

	| responseCreate internalApi idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ self invalidISBN.
	
	self should: [ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). self fail]  
		raise: Error  
		withMessageText: Cart invalidItemErrorMessage.
	
	
	! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/2/2020 19:22:32'!
test09AddToCartUnsuccessfulWithIvalidISBN

	| responseCreate internalApi responseAdd idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 0 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: Cart invalidQuantityErrorMessage.
	! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 19:22:55'!
test13CheckOutSuccessfulWithNotEmptyCart

	| internalApi responseCreate responseCheckOut ISBN1 ISBN2 idCart creditCard date |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi addToCart: idCart withISBN: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi addToCart: idCart withISBN: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	date _ DateAndTime now month.
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload = 1.
	
	self assert: responseCheckOut code = 0.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 19:22:59'!
test14CheckOutUnsuccessfulWithEmptyCart

	| internalApi responseCreate responseCheckOut idCart creditCard date |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier cartCanNotBeEmptyErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 19:23:04'!
test15CheckOutUnsuccessfulWithInvalidCart

	| internalApi responseCheckOut creditCard date |
	
	internalApi _ testObjectFactory internalApi.
 	
	internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: self invalidIdCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: InternalAPI cartNotRegisteredErrorDescription .
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 19:23:08'!
test16CheckOutUnsuccessfulWithExpiredCreditCard

	| internalApi responseCreate responseCheckOut idCart creditCard ISBN |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	creditCard _ testObjectFactory expiredCreditCard.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: testObjectFactory today . 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCard: creditCard ofOwner: 'Alan Kay' on: testObjectFactory today.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 19:23:12'!
test17CheckOutUnsuccessfulWithInvalidUser

	| internalApi responseCreate responseCheckOut idCart creditCard ISBN |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	creditCard _ testObjectFactory expiredCreditCard.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: testObjectFactory today . 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCard: creditCard ofOwner: 'Edsger Dijkstra' on: testObjectFactory today.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'setUp' stamp: 'ja 12/2/2020 18:41:35' overrides: 16927572!
setUp 

	debitBehavior _ [ :anAmount :aCreditCard | ].
	
	testObjectFactory _ StoreTestObjectsFactory new.! !

!classDefinition: #Cart category: #TusLibros stamp: 'eb 12/3/2020 14:00:54'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'eb 12/3/2020 14:00:54'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'assertions' stamp: 'ja 12/1/2020 19:12:30' prior: 50999138!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self class invalidItemErrorMessage ]! !
!Cart methodsFor: 'assertions' stamp: 'ja 12/1/2020 20:02:00' prior: 50999145!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [ InvalidBookQuantity signal: self class invalidQuantityErrorMessage ]! !
!Cart methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 17:48' prior: 50999152!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'queries' stamp: 'HernanWilkinson 6/17/2013 17:45' prior: 50999158!
occurrencesOf: anItem

	^items occurrencesOf: anItem  ! !
!Cart methodsFor: 'accesing' stamp: 'ja 12/1/2020 19:36:45'!
items

	^items copy! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44' prior: 50999163!
includes: anItem

	^items includes: anItem ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44' prior: 50999168!
isEmpty
	
	^items isEmpty ! !
!Cart methodsFor: 'total' stamp: 'HernanWilkinson 6/17/2013 19:09' prior: 50999172!
total

	^ items sum: [ :anItem | catalog at: anItem ]! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:44' prior: 50999185!
add: anItem

	^ self add: 1 of: anItem ! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:51' prior: 50999177!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !

!classDefinition: 'Cart class' category: #TusLibros stamp: 'eb 12/3/2020 14:00:54'!
Cart class
	instanceVariableNames: ''!

!classDefinition: 'Cart class' category: #TusLibros stamp: 'eb 12/3/2020 14:00:54'!
Cart class
	instanceVariableNames: ''!
!Cart class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 17:48' prior: 50999197!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog ! !
!Cart class methodsFor: 'instance creation' stamp: 'ja 12/1/2020 19:12:41'!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !
!Cart class methodsFor: 'instance creation' stamp: 'ja 12/1/2020 19:12:52'!
invalidQuantityErrorMessage
	
	^'Invalid number of items'! !

!classDefinition: #Cashier category: #TusLibros stamp: 'eb 12/3/2020 14:00:54'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'eb 12/3/2020 14:00:54'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checkout - private' stamp: 'HernanWilkinson 6/17/2013 19:08' prior: 50999330!
calculateTotal

	total := cart total.
	! !
!Cashier methodsFor: 'checkout - private' stamp: 'HernanWilkinson 6/17/2013 19:07' prior: 50999326!
createSale

	^ Sale of: total
! !
!Cashier methodsFor: 'checkout - private' stamp: 'HernanWilkinson 6/17/2013 19:06' prior: 50999335!
debitTotal

	merchantProcessor debit: total from: creditCard.
	! !
!Cashier methodsFor: 'checkout - private' stamp: 'HernanWilkinson 6/17/2013 19:06' prior: 50999321!
registerSale

	salesBook add: self createSale! !
!Cashier methodsFor: 'checkout' stamp: 'HernanWilkinson 6/17/2013 19:06' prior: 50999340!
checkOut

	self calculateTotal.
	self debitTotal.
	self registerSale.

	^ total! !
!Cashier methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 18:53' prior: 50999346!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook! !

!classDefinition: 'Cashier class' category: #TusLibros stamp: 'eb 12/3/2020 14:00:55'!
Cashier class
	instanceVariableNames: ''!

!classDefinition: 'Cashier class' category: #TusLibros stamp: 'eb 12/3/2020 14:00:55'!
Cashier class
	instanceVariableNames: ''!
!Cashier class methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 18:22' prior: 50999363!
assertIsNotEmpty: aCart 
	
	aCart isEmpty ifTrue: [self error: self cartCanNotBeEmptyErrorMessage ]! !
!Cashier class methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 18:23' prior: 50999369!
assertIsNotExpired: aCreditCard on: aDate
	
	(aCreditCard isExpiredOn: aDate) ifTrue: [ self error: self canNotChargeAnExpiredCreditCardErrorMessage ]! !
!Cashier class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 18:51' prior: 50999377!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook! !
!Cashier class methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 18:21' prior: 50999400!
canNotChargeAnExpiredCreditCardErrorMessage
	
	^'Can not charge an expired credit card'! !
!Cashier class methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:56' prior: 50999395!
cartCanNotBeEmptyErrorMessage
	
	^'Can not check out an empty cart'! !
!Cashier class methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 19:02' prior: 50999390!
creditCardHasNoCreditErrorMessage
	
	^'Credit card has no credit'! !

!classDefinition: #CreditCard category: #TusLibros stamp: 'eb 12/3/2020 14:00:55'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'eb 12/3/2020 14:00:55'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 18:39' prior: 50999571!
isExpiredOn: aDate 
	
	^expiration start < (Month month: aDate monthIndex year: aDate yearNumber) start ! !
!CreditCard methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 18:38' prior: 50999578!
initializeExpiringOn: aMonth 
	
	expiration := aMonth ! !

!classDefinition: 'CreditCard class' category: #TusLibros stamp: 'eb 12/3/2020 14:00:55'!
CreditCard class
	instanceVariableNames: ''!

!classDefinition: 'CreditCard class' category: #TusLibros stamp: 'eb 12/3/2020 14:00:55'!
CreditCard class
	instanceVariableNames: ''!
!CreditCard class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 18:38' prior: 50999591!
expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth! !

!classDefinition: #InternalAPI category: #TusLibros stamp: 'eb 12/3/2020 14:00:55'!
Object subclass: #InternalAPI
	instanceVariableNames: 'users nextId carts date modifications cartsPerUser catalog merchantProcesor nextTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalAPI category: #TusLibros stamp: 'eb 12/3/2020 14:00:55'!
Object subclass: #InternalAPI
	instanceVariableNames: 'users nextId carts date modifications cartsPerUser catalog merchantProcesor nextTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPI methodsFor: 'initialization' stamp: 'ja 12/2/2020 17:01:08'!
initializeWith: aUsersCollection on: aDate usingCatalog: aCatalog usingMerchantProccesor: aMerchantProccesor
	
	users _ aUsersCollection.
	
	date _ aDate.
	
	carts _ Dictionary new.
	
	catalog _ aCatalog.
	
	cartsPerUser _ Dictionary new.
	
	modifications _ Dictionary new.
	
	nextId _ 0.
	
	nextTransaction _ 0.
	
	merchantProcesor _ aMerchantProccesor.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 18:33:26'!
cart: aCartId has: aISBN times: anAmount 
	
	| cart |
	
	cart _ carts at: aCartId .
	
	^ (cart includes: aISBN) and: [(cart occurrencesOf: aISBN) = anAmount ].! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 17:56:48'!
ensureDateOf: aCartId isValidOn: aDate

	| halfHourAgo |
	
	halfHourAgo _ aDate - 30 minutes.
	
	((modifications includesKey: aCartId) and:[ (modifications at: aCartId)  < halfHourAgo ]) ifTrue:[self error: self class cartIsExpiredErrorDescription].! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/30/2020 19:19:27'!
ensureExecutionOf: aBlock withCart: aCartId validOn: aDate

	| returnValue |

	self ensureDateOf: aCartId isValidOn: aDate.
	
	returnValue _ aBlock value.
	
	self updateDateOf: aCartId to: aDate.
	
	^ returnValue .
	
	! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 19:14:22'!
ensureIsRegisteredUser: anUser with: aPassword 
	
	| aPasswordRegistered |
	
	aPasswordRegistered _ users at: anUser ifAbsent:[ self error: self class userNotRegisteredErrorDescription ].
	
	^ aPasswordRegistered = aPassword.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/2/2020 17:09:47'!
hasCartsOf: anUser
	
	^ cartsPerUser includesKey: anUser.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 17:24:25'!
nextIdFree

	nextId _ nextId + 1.
	
	^ nextId ! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/2/2020 16:46:31'!
nextTransaction

	nextTransaction _ nextTransaction + 1.
	
	^ nextTransaction
	! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/30/2020 19:34:11'!
updateDateOf: aCartId to: aDate

	modifications at: aCartId put: aDate .! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/2/2020 17:26:18'!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity
	
	| cart |
	
	[ cart _ carts at: aCartId ] on: Error do: [^ UnsuccessfulResponse with: (self class cartNotRegisteredErrorDescription) ].
	
	[cart add: aQuantity of: aISBN] on: InvalidBookQuantity do: [:error | ^ UnsuccessfulResponse with: error messageText ].
	
	^ SuccessfulResponse with: 'OK'.! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/2/2020 17:10:27'!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity on: aDate
	
	^ self ensureExecutionOf: [ self addToCart: aCartId withISBN: aISBN withQuantity: aQuantity ] withCart: aCartId validOn: aDate.
	
	! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/2/2020 19:18:57'!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	
	| cart cashier|
	
	[cart _ carts at: aCartId ] on: Error do:[^ UnsuccessfulResponse with: (self class cartNotRegisteredErrorDescription) ].
	
	[cashier _ Cashier toCheckout: cart charging: aCreditCard throught: merchantProcesor on: aDate registeringOn: OrderedCollection new] on: Error do: [:error| ^ UnsuccessfulResponse with: error messageText].
	
	cashier checkOut.
	
	^ SuccessfulResponse with: self nextTransaction.
	! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/1/2020 18:32:20'!
createCartFor: anUser with: aPassword 
	
	| idCart cart|
	
	[ self ensureIsRegisteredUser: anUser with: aPassword ] on: Error do: [:error | ^UnsuccessfulResponse with: error messageText ].
	
	cart _ Cart acceptingItemsOf: catalog.
	
	idCart _ self nextIdFree.
	
	cartsPerUser add: anUser -> cart.
	
	carts add: idCart -> cart.
	
	modifications add: idCart -> date.
	
	^ SuccessfulResponse with: idCart.! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/1/2020 19:38:17'!
listCart: aCartId
	
	| cart listItems |
	
	cart _ carts at: aCartId.
	
	listItems _ cart items.
		
	^ SuccessfulResponse with: listItems asBag. 
	
	! !

!classDefinition: 'InternalAPI class' category: #TusLibros stamp: 'eb 12/3/2020 14:00:55'!
InternalAPI class
	instanceVariableNames: ''!

!classDefinition: 'InternalAPI class' category: #TusLibros stamp: 'eb 12/3/2020 14:00:55'!
InternalAPI class
	instanceVariableNames: ''!
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 18:57:34'!
ISBNNotRegisteredErrorDescription

	^ 'ISBN is not registered'! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 11/30/2020 19:34:39'!
cartIsExpiredErrorDescription

	^ 'Cart is expired'! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 18:42:33'!
cartNotRegisteredErrorDescription

	^ 'Cart is not registered'! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 19:03:55'!
invalidQuantityErrorDescription

	^'Invalid quantity'! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 13:47:40'!
userNotRegisteredErrorDescription

	^ 'User not registered'! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 18:11:07'!
with: aUsersCollection
	
	^self new initializeWith: aUsersCollection.! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 17:21:47'!
with: aUsersCollection on: aDate
	
	^self new initializeWith: aUsersCollection on: aDate.! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 18:30:00'!
with: aUsersCollection on: aDate usingCatalog: aCatalog
	
	^self new initializeWith: aUsersCollection on: aDate usingCatalog: aCatalog .! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 12/2/2020 16:37:19'!
with: aUsersCollection on: aDate usingCatalog: aCatalog usingMerchantProccesor: aMerchantProccesor
	
	^self new initializeWith: aUsersCollection on: aDate usingCatalog: aCatalog usingMerchantProccesor: aMerchantProccesor.! !

!classDefinition: #InternalAPIResponse category: #TusLibros stamp: 'eb 12/3/2020 14:00:56'!
Object subclass: #InternalAPIResponse
	instanceVariableNames: 'payload'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalAPIResponse category: #TusLibros stamp: 'eb 12/3/2020 14:00:56'!
Object subclass: #InternalAPIResponse
	instanceVariableNames: 'payload'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPIResponse methodsFor: 'accesing' stamp: 'ja 11/29/2020 18:18:53'!
code

	self subclassResponsibility ! !
!InternalAPIResponse methodsFor: 'accesing' stamp: 'ja 11/29/2020 18:56:21'!
initializeWith: aPayload

	payload _ aPayload! !
!InternalAPIResponse methodsFor: 'accesing' stamp: 'ja 11/29/2020 18:57:44'!
payload

	self subclassResponsibility ! !

!classDefinition: 'InternalAPIResponse class' category: #TusLibros stamp: 'eb 12/3/2020 14:00:56'!
InternalAPIResponse class
	instanceVariableNames: 'payload'!

!classDefinition: 'InternalAPIResponse class' category: #TusLibros stamp: 'eb 12/3/2020 14:00:56'!
InternalAPIResponse class
	instanceVariableNames: 'payload'!
!InternalAPIResponse class methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 18:56:01'!
with: aPayload

	^ self new initializeWith: aPayload .! !

!classDefinition: #SuccessfulResponse category: #TusLibros stamp: 'eb 12/3/2020 14:00:56'!
InternalAPIResponse subclass: #SuccessfulResponse
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #SuccessfulResponse category: #TusLibros stamp: 'eb 12/3/2020 14:00:56'!
InternalAPIResponse subclass: #SuccessfulResponse
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!SuccessfulResponse methodsFor: 'accesing' stamp: 'ja 11/29/2020 19:00:16' overrides: 51010153!
code 

	^ 0! !
!SuccessfulResponse methodsFor: 'accesing' stamp: 'ja 11/29/2020 18:58:33' overrides: 51010161!
payload
	 
	^ payload ! !

!classDefinition: #UnsuccessfulResponse category: #TusLibros stamp: 'eb 12/3/2020 14:00:56'!
InternalAPIResponse subclass: #UnsuccessfulResponse
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #UnsuccessfulResponse category: #TusLibros stamp: 'eb 12/3/2020 14:00:56'!
InternalAPIResponse subclass: #UnsuccessfulResponse
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!UnsuccessfulResponse methodsFor: 'accesing' stamp: 'ja 11/29/2020 19:00:07' overrides: 51010153!
code 

	^ 1! !
!UnsuccessfulResponse methodsFor: 'accesing' stamp: 'ja 11/29/2020 18:59:00' overrides: 51010161!
payload

	^ payload ! !

!classDefinition: #Sale category: #TusLibros stamp: 'eb 12/3/2020 14:00:56'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: #TusLibros stamp: 'eb 12/3/2020 14:00:56'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'total' stamp: 'HernanWilkinson 6/17/2013 18:48' prior: 50999606!
total
	
	^ total! !
!Sale methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 18:47' prior: 50999610!
initializeTotal: aTotal

	total := aTotal ! !

!classDefinition: 'Sale class' category: #TusLibros stamp: 'eb 12/3/2020 14:00:56'!
Sale class
	instanceVariableNames: ''!

!classDefinition: 'Sale class' category: #TusLibros stamp: 'eb 12/3/2020 14:00:56'!
Sale class
	instanceVariableNames: ''!
!Sale class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 18:47' prior: 50999622!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal ! !

!classDefinition: #StoreTestObjectsFactory category: #TusLibros stamp: 'eb 12/3/2020 14:00:56'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreTestObjectsFactory category: #TusLibros stamp: 'eb 12/3/2020 14:00:56'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'HernanWilkinson 6/17/2013 18:08' prior: 50999641!
itemNotSellByTheStore
	
	^'invalidBook'! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'HernanWilkinson 6/17/2013 18:08' prior: 50999646!
itemSellByTheStore
	
	^ 'validBook'! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'HernanWilkinson 6/17/2013 18:08' prior: 50999650!
itemSellByTheStorePrice
	
	^10! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'HernanWilkinson 6/17/2013 18:08' prior: 50999654!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'HernanWilkinson 6/17/2013 18:08' prior: 50999659!
defaultCatalog
	
	^ Dictionary new
		at: self itemSellByTheStore put: self itemSellByTheStorePrice;
		yourself ! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'ja 12/2/2020 18:38:37' prior: 50999673!
expiredCreditCard
	
	^CreditCard expiringOn: self pastYear.! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'ja 12/2/2020 18:39:15' prior: 50999666!
notExpiredCreditCard
	
	^CreditCard expiringOn: self nextYear.! !
!StoreTestObjectsFactory methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 18:37' prior: 50999681 overrides: 16896425!
initialize

	today := DateAndTime now! !
!StoreTestObjectsFactory methodsFor: 'internal API' stamp: 'ja 12/2/2020 19:25:01'!
authenticatedUsers

	| users | 
	
	users _ Dictionary new.
	users add: 'Alan Kay' -> 'objetos';
		  add: 'Dan Ingalls' -> 'smalltalk'.
	
	^ users.! !
!StoreTestObjectsFactory methodsFor: 'internal API' stamp: 'ja 12/2/2020 19:25:36'!
internalApi
	
	^ InternalAPI with: self authenticatedUsers 
				on: today 
				usingCatalog: self defaultCatalog 
				usingMerchantProccesor: self.! !
!StoreTestObjectsFactory methodsFor: 'internal API' stamp: 'ja 12/2/2020 19:28:26'!
internalApiUsingMerchantProccessor: aMerchantProccessor
	
	^ InternalAPI with: self authenticatedUsers 
				on: today 
				usingCatalog: self defaultCatalog 
				usingMerchantProccesor: self.! !
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'ja 12/2/2020 18:39:00'!
nextYear
	
	^ Month month: today monthIndex year: today yearNumber + 1! !
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'ja 12/2/2020 18:38:11'!
pastYear
	
	^ Month month: today monthIndex year: today yearNumber - 1! !
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'HernanWilkinson 6/17/2013 18:37' prior: 50999686!
today
	
	^ today! !

!classRemoval: #Ticket stamp: 'eb 12/3/2020 14:00:57'!
Object subclass: #Ticket
	instanceVariableNames: 'transactionId amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreTestObjectsFactory stamp: 'eb 12/3/2020 14:00:57'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 'eb 12/3/2020 14:00:57'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProcessorSimulator stamp: 'eb 12/3/2020 14:00:57'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #UnsuccessfulResponse stamp: 'eb 12/3/2020 14:00:58'!
InternalAPIResponse subclass: #UnsuccessfulResponse
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #SuccessfulResponse stamp: 'eb 12/3/2020 14:00:58'!
InternalAPIResponse subclass: #SuccessfulResponse
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #InternalAPIResponse stamp: 'eb 12/3/2020 14:00:58'!
Object subclass: #InternalAPIResponse
	instanceVariableNames: 'payload'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #InternalAPI stamp: 'eb 12/3/2020 14:00:58'!
Object subclass: #InternalAPI
	instanceVariableNames: 'users nextId carts date modifications cartsPerUser catalog merchantProcesor nextTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'eb 12/3/2020 14:00:59'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'eb 12/3/2020 14:00:59'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'eb 12/3/2020 14:00:59'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #InternalAPITest stamp: 'eb 12/3/2020 14:01:00'!
TestCase subclass: #InternalAPITest
	instanceVariableNames: 'debitBehavior testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'eb 12/3/2020 14:01:01'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'eb 12/3/2020 14:01:01'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'eb 12/3/2020 14:01:01'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StolenCreditCardError stamp: 'eb 12/3/2020 14:01:02'!
Error subclass: #StolenCreditCardError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #NotEnoughCreditError stamp: 'eb 12/3/2020 14:01:02'!
Error subclass: #NotEnoughCreditError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #KeyNotFound stamp: 'eb 12/3/2020 14:01:02'!
Error subclass: #KeyNotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #InvalidISBN stamp: 'eb 12/3/2020 14:01:02'!
Error subclass: #InvalidISBN
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #InvalidBookQuantity stamp: 'eb 12/3/2020 14:01:03'!
Error subclass: #InvalidBookQuantity
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InvalidBookQuantity category: #TusLibros stamp: 'eb 12/3/2020 14:01:03'!
Error subclass: #InvalidBookQuantity
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InvalidBookQuantity category: #TusLibros stamp: 'eb 12/3/2020 14:01:03'!
Error subclass: #InvalidBookQuantity
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InvalidISBN category: #TusLibros stamp: 'eb 12/3/2020 14:01:03'!
Error subclass: #InvalidISBN
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InvalidISBN category: #TusLibros stamp: 'eb 12/3/2020 14:01:03'!
Error subclass: #InvalidISBN
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #KeyNotFound category: #TusLibros stamp: 'eb 12/3/2020 14:01:03'!
Error subclass: #KeyNotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #KeyNotFound category: #TusLibros stamp: 'eb 12/3/2020 14:01:03'!
Error subclass: #KeyNotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'eb 12/3/2020 14:01:03'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: #TusLibros stamp: 'eb 12/3/2020 14:01:03'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:10'!
test01NewCartsAreCreatedEmpty

	self assert: testObjectsFactory createCart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'ja 12/1/2020 19:13:53'!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [ cart add: testObjectsFactory itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:10'!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'ja 12/1/2020 19:14:32'!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add: 0 of: testObjectsFactory itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'ja 12/1/2020 19:13:58'!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add: 2 of: testObjectsFactory itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:11'!
test06CartRemembersAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: testObjectsFactory itemSellByTheStore.
	self assert: (cart includes: testObjectsFactory itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:11'!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self deny: (cart includes: testObjectsFactory itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:11'!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	self assert: (cart occurrencesOf: testObjectsFactory itemSellByTheStore) = 2! !
!CartTest methodsFor: 'setup' stamp: 'HernanWilkinson 6/17/2013 18:09' overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.! !

!classDefinition: #CashierTest category: #TusLibros stamp: 'eb 12/3/2020 14:01:03'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: #TusLibros stamp: 'eb 12/3/2020 14:01:03'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:50'!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:51'!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:51'!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: self
				on: testObjectsFactory today
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 19:04'!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 19:00'!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:59'!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'setup' stamp: 'HernanWilkinson 6/17/2013 19:03' overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ]! !
!CashierTest methodsFor: 'merchant processor protocol' stamp: 'HernanWilkinson 6/17/2013 19:02'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !

!classDefinition: #InternalAPITest category: #TusLibros stamp: 'eb 12/3/2020 14:01:04'!
TestCase subclass: #InternalAPITest
	instanceVariableNames: 'debitBehavior testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalAPITest category: #TusLibros stamp: 'eb 12/3/2020 14:01:04'!
TestCase subclass: #InternalAPITest
	instanceVariableNames: 'debitBehavior testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPITest methodsFor: 'create test' stamp: 'ja 12/2/2020 19:21:49'!
test01CreateCartSuccessfulWithCorrectClientIdAndPassword

	| response internalApi |
	
	internalApi _ testObjectFactory internalApi.
	response _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
		
	self assert: response code = 0.
		
	! !
!InternalAPITest methodsFor: 'create test' stamp: 'ja 12/2/2020 19:21:54'!
test02CreateCartReturnsDifferentIdPerCustomer

	| internalApi response1 response2|
	
	internalApi _ testObjectFactory internalApi.
 	
	response1 _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	response2 _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.	
	
	self deny: response1 payload = response2 payload.
		
	! !
!InternalAPITest methodsFor: 'create test' stamp: 'ja 12/2/2020 19:21:58'!
test03CreateCartReturnsOneWithUnregisteredClientId

	| internalApi response |
	
	internalApi _ testObjectFactory internalApi.
 	
	response _ internalApi createCartFor: 'Edsger Dijkstra' with: 'nanoDijkstra'.
	
	self assert: response code = 1.
	
	self assert: response payload equals: InternalAPI userNotRegisteredErrorDescription. 
		
	
		
	! !
!InternalAPITest methodsFor: 'create test' stamp: 'ja 12/2/2020 19:22:01'!
test04CreateCartSuccessfulEffectivlyCreatesCart

	| internalApi response |
	
	internalApi _ testObjectFactory internalApi.
 	
	response _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	self assert: response code = 0.
	
	self assert: (internalApi hasCartsOf: 'Alan Kay').
	
		
	! !
!InternalAPITest methodsFor: 'suport' stamp: 'ja 12/2/2020 16:54:01'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !
!InternalAPITest methodsFor: 'suport' stamp: 'ja 12/2/2020 17:30:08'!
invalidCreditCard

	^ 'Invalid credit card'! !
!InternalAPITest methodsFor: 'suport' stamp: 'ja 12/1/2020 18:56:06'!
invalidISBN

	^ 'Invalid ISBN'! !
!InternalAPITest methodsFor: 'suport' stamp: 'ja 12/1/2020 18:37:14'!
invalidIdCart

	^ 'Invalid id cart'! !
!InternalAPITest methodsFor: 'list cart' stamp: 'ja 12/2/2020 19:22:39'!
test10ListCartWithEmptyCart

	| internalApi responseCreate responseList |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseList _ internalApi listCart: responseCreate payload.
	
	self assert: responseList payload isEmpty.

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'ja 12/2/2020 19:22:43'!
test11ListCartWithOnlyItemIntoCart

	| internalApi responseCreate responseList ISBN idCart listItems |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN withOccurrences: 3.
	
	self assert: responseList payload = listItems.

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'ja 12/2/2020 19:22:47'!
test12ListCartWithManyItemsIntoCart

	| internalApi responseCreate responseList ISBN1 ISBN2 idCart listItems |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi addToCart: idCart withISBN: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi addToCart: idCart withISBN: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN1 withOccurrences: 3.
	listItems add: ISBN2 withOccurrences: 5.
	
	self assert: responseList payload = listItems.

	! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/2/2020 19:22:08'!
test05AddToCartSuccessfulWithCartId

	| internalApi responseCreate responseAdd |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseAdd _ internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3 on: (DateAndTime now). 

	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/2/2020 19:22:12'!
test06AddToCartSuccessfulEffectivlyAddedToCart

	| internalApi responseCreate responseAdd idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 

	self assert: (internalApi cart: idCart has: ISBN times: 3).
	
	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/2/2020 19:22:17'!
test07AddToCartUnsuccessfulWithCartInvalid

	| internalApi responseAdd idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ self invalidIdCart.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: InternalAPI cartNotRegisteredErrorDescription.
	! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/2/2020 19:22:21'!
test08AddToCartUnsuccessfulWithIvalidISBN

	| responseCreate internalApi idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ self invalidISBN.
	
	self should: [ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). self fail]  
		raise: Error  
		withMessageText: Cart invalidItemErrorMessage.
	
	
	! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/2/2020 19:22:32'!
test09AddToCartUnsuccessfulWithIvalidISBN

	| responseCreate internalApi responseAdd idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 0 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: Cart invalidQuantityErrorMessage.
	! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 19:22:55'!
test13CheckOutSuccessfulWithNotEmptyCart

	| internalApi responseCreate responseCheckOut ISBN1 ISBN2 idCart creditCard date |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi addToCart: idCart withISBN: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi addToCart: idCart withISBN: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	date _ DateAndTime now month.
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload = 1.
	
	self assert: responseCheckOut code = 0.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 19:22:59'!
test14CheckOutUnsuccessfulWithEmptyCart

	| internalApi responseCreate responseCheckOut idCart creditCard date |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier cartCanNotBeEmptyErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 19:23:04'!
test15CheckOutUnsuccessfulWithInvalidCart

	| internalApi responseCheckOut creditCard date |
	
	internalApi _ testObjectFactory internalApi.
 	
	internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: self invalidIdCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: InternalAPI cartNotRegisteredErrorDescription .
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 19:23:08'!
test16CheckOutUnsuccessfulWithExpiredCreditCard

	| internalApi responseCreate responseCheckOut idCart creditCard ISBN |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	creditCard _ testObjectFactory expiredCreditCard.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: testObjectFactory today . 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCard: creditCard ofOwner: 'Alan Kay' on: testObjectFactory today.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 19:23:12'!
test17CheckOutUnsuccessfulWithInvalidUser

	| internalApi responseCreate responseCheckOut idCart creditCard ISBN |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	creditCard _ testObjectFactory expiredCreditCard.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: testObjectFactory today . 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCard: creditCard ofOwner: 'Edsger Dijkstra' on: testObjectFactory today.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'setUp' stamp: 'ja 12/2/2020 18:41:35' overrides: 16927572!
setUp 

	debitBehavior _ [ :anAmount :aCreditCard | ].
	
	testObjectFactory _ StoreTestObjectsFactory new.! !

!classDefinition: #Cart category: #TusLibros stamp: 'eb 12/3/2020 14:01:05'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: #TusLibros stamp: 'eb 12/3/2020 14:01:05'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'assertions' stamp: 'ja 12/1/2020 19:12:30'!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self class invalidItemErrorMessage ]! !
!Cart methodsFor: 'assertions' stamp: 'ja 12/1/2020 20:02:00'!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [ InvalidBookQuantity signal: self class invalidQuantityErrorMessage ]! !
!Cart methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 17:48'!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'queries' stamp: 'HernanWilkinson 6/17/2013 17:45'!
occurrencesOf: anItem

	^items occurrencesOf: anItem  ! !
!Cart methodsFor: 'accesing' stamp: 'ja 12/1/2020 19:36:45'!
items

	^items copy! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44'!
includes: anItem

	^items includes: anItem ! !
!Cart methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 17:44'!
isEmpty
	
	^items isEmpty ! !
!Cart methodsFor: 'total' stamp: 'HernanWilkinson 6/17/2013 19:09'!
total

	^ items sum: [ :anItem | catalog at: anItem ]! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:44'!
add: anItem

	^ self add: 1 of: anItem ! !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:51'!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !

!classDefinition: 'Cart class' category: #TusLibros stamp: 'eb 12/3/2020 14:01:05'!
Cart class
	instanceVariableNames: ''!

!classDefinition: 'Cart class' category: #TusLibros stamp: 'eb 12/3/2020 14:01:05'!
Cart class
	instanceVariableNames: ''!
!Cart class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 17:48'!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog ! !
!Cart class methodsFor: 'instance creation' stamp: 'ja 12/1/2020 19:12:41'!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !
!Cart class methodsFor: 'instance creation' stamp: 'ja 12/1/2020 19:12:52'!
invalidQuantityErrorMessage
	
	^'Invalid number of items'! !

!classDefinition: #Cashier category: #TusLibros stamp: 'eb 12/3/2020 14:01:05'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: #TusLibros stamp: 'eb 12/3/2020 14:01:05'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checkout - private' stamp: 'HernanWilkinson 6/17/2013 19:08'!
calculateTotal

	total := cart total.
	! !
!Cashier methodsFor: 'checkout - private' stamp: 'HernanWilkinson 6/17/2013 19:07'!
createSale

	^ Sale of: total
! !
!Cashier methodsFor: 'checkout - private' stamp: 'HernanWilkinson 6/17/2013 19:06'!
debitTotal

	merchantProcessor debit: total from: creditCard.
	! !
!Cashier methodsFor: 'checkout - private' stamp: 'HernanWilkinson 6/17/2013 19:06'!
registerSale

	salesBook add: self createSale! !
!Cashier methodsFor: 'checkout' stamp: 'HernanWilkinson 6/17/2013 19:06'!
checkOut

	self calculateTotal.
	self debitTotal.
	self registerSale.

	^ total! !
!Cashier methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 18:53'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook! !

!classDefinition: 'Cashier class' category: #TusLibros stamp: 'eb 12/3/2020 14:01:05'!
Cashier class
	instanceVariableNames: ''!

!classDefinition: 'Cashier class' category: #TusLibros stamp: 'eb 12/3/2020 14:01:05'!
Cashier class
	instanceVariableNames: ''!
!Cashier class methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 18:22'!
assertIsNotEmpty: aCart 
	
	aCart isEmpty ifTrue: [self error: self cartCanNotBeEmptyErrorMessage ]! !
!Cashier class methodsFor: 'assertions' stamp: 'HernanWilkinson 6/17/2013 18:23'!
assertIsNotExpired: aCreditCard on: aDate
	
	(aCreditCard isExpiredOn: aDate) ifTrue: [ self error: self canNotChargeAnExpiredCreditCardErrorMessage ]! !
!Cashier class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 18:51'!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook! !
!Cashier class methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 18:21'!
canNotChargeAnExpiredCreditCardErrorMessage
	
	^'Can not charge an expired credit card'! !
!Cashier class methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 17:56'!
cartCanNotBeEmptyErrorMessage
	
	^'Can not check out an empty cart'! !
!Cashier class methodsFor: 'error messages' stamp: 'HernanWilkinson 6/17/2013 19:02'!
creditCardHasNoCreditErrorMessage
	
	^'Credit card has no credit'! !

!classDefinition: #CreditCard category: #TusLibros stamp: 'eb 12/3/2020 14:01:06'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: #TusLibros stamp: 'eb 12/3/2020 14:01:06'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'testing' stamp: 'HernanWilkinson 6/17/2013 18:39'!
isExpiredOn: aDate 
	
	^expiration start < (Month month: aDate monthIndex year: aDate yearNumber) start ! !
!CreditCard methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 18:38'!
initializeExpiringOn: aMonth 
	
	expiration := aMonth ! !

!classDefinition: 'CreditCard class' category: #TusLibros stamp: 'eb 12/3/2020 14:01:06'!
CreditCard class
	instanceVariableNames: ''!

!classDefinition: 'CreditCard class' category: #TusLibros stamp: 'eb 12/3/2020 14:01:06'!
CreditCard class
	instanceVariableNames: ''!
!CreditCard class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 18:38'!
expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth! !

!classDefinition: #InternalAPI category: #TusLibros stamp: 'eb 12/3/2020 14:01:06'!
Object subclass: #InternalAPI
	instanceVariableNames: 'users nextId carts date modifications cartsPerUser catalog merchantProcesor nextTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalAPI category: #TusLibros stamp: 'eb 12/3/2020 14:01:06'!
Object subclass: #InternalAPI
	instanceVariableNames: 'users nextId carts date modifications cartsPerUser catalog merchantProcesor nextTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPI methodsFor: 'initialization' stamp: 'ja 12/2/2020 17:01:08'!
initializeWith: aUsersCollection on: aDate usingCatalog: aCatalog usingMerchantProccesor: aMerchantProccesor
	
	users _ aUsersCollection.
	
	date _ aDate.
	
	carts _ Dictionary new.
	
	catalog _ aCatalog.
	
	cartsPerUser _ Dictionary new.
	
	modifications _ Dictionary new.
	
	nextId _ 0.
	
	nextTransaction _ 0.
	
	merchantProcesor _ aMerchantProccesor.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 18:33:26'!
cart: aCartId has: aISBN times: anAmount 
	
	| cart |
	
	cart _ carts at: aCartId .
	
	^ (cart includes: aISBN) and: [(cart occurrencesOf: aISBN) = anAmount ].! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 17:56:48'!
ensureDateOf: aCartId isValidOn: aDate

	| halfHourAgo |
	
	halfHourAgo _ aDate - 30 minutes.
	
	((modifications includesKey: aCartId) and:[ (modifications at: aCartId)  < halfHourAgo ]) ifTrue:[self error: self class cartIsExpiredErrorDescription].! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/30/2020 19:19:27'!
ensureExecutionOf: aBlock withCart: aCartId validOn: aDate

	| returnValue |

	self ensureDateOf: aCartId isValidOn: aDate.
	
	returnValue _ aBlock value.
	
	self updateDateOf: aCartId to: aDate.
	
	^ returnValue .
	
	! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 19:14:22'!
ensureIsRegisteredUser: anUser with: aPassword 
	
	| aPasswordRegistered |
	
	aPasswordRegistered _ users at: anUser ifAbsent:[ self error: self class userNotRegisteredErrorDescription ].
	
	^ aPasswordRegistered = aPassword.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/2/2020 17:09:47'!
hasCartsOf: anUser
	
	^ cartsPerUser includesKey: anUser.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 17:24:25'!
nextIdFree

	nextId _ nextId + 1.
	
	^ nextId ! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/2/2020 16:46:31'!
nextTransaction

	nextTransaction _ nextTransaction + 1.
	
	^ nextTransaction
	! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/30/2020 19:34:11'!
updateDateOf: aCartId to: aDate

	modifications at: aCartId put: aDate .! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/2/2020 17:26:18'!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity
	
	| cart |
	
	[ cart _ carts at: aCartId ] on: Error do: [^ UnsuccessfulResponse with: (self class cartNotRegisteredErrorDescription) ].
	
	[cart add: aQuantity of: aISBN] on: InvalidBookQuantity do: [:error | ^ UnsuccessfulResponse with: error messageText ].
	
	^ SuccessfulResponse with: 'OK'.! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/2/2020 17:10:27'!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity on: aDate
	
	^ self ensureExecutionOf: [ self addToCart: aCartId withISBN: aISBN withQuantity: aQuantity ] withCart: aCartId validOn: aDate.
	
	! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/2/2020 19:18:57'!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	
	| cart cashier|
	
	[cart _ carts at: aCartId ] on: Error do:[^ UnsuccessfulResponse with: (self class cartNotRegisteredErrorDescription) ].
	
	[cashier _ Cashier toCheckout: cart charging: aCreditCard throught: merchantProcesor on: aDate registeringOn: OrderedCollection new] on: Error do: [:error| ^ UnsuccessfulResponse with: error messageText].
	
	cashier checkOut.
	
	^ SuccessfulResponse with: self nextTransaction.
	! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/1/2020 18:32:20'!
createCartFor: anUser with: aPassword 
	
	| idCart cart|
	
	[ self ensureIsRegisteredUser: anUser with: aPassword ] on: Error do: [:error | ^UnsuccessfulResponse with: error messageText ].
	
	cart _ Cart acceptingItemsOf: catalog.
	
	idCart _ self nextIdFree.
	
	cartsPerUser add: anUser -> cart.
	
	carts add: idCart -> cart.
	
	modifications add: idCart -> date.
	
	^ SuccessfulResponse with: idCart.! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/1/2020 19:38:17'!
listCart: aCartId
	
	| cart listItems |
	
	cart _ carts at: aCartId.
	
	listItems _ cart items.
		
	^ SuccessfulResponse with: listItems asBag. 
	
	! !

!classDefinition: 'InternalAPI class' category: #TusLibros stamp: 'eb 12/3/2020 14:01:06'!
InternalAPI class
	instanceVariableNames: ''!

!classDefinition: 'InternalAPI class' category: #TusLibros stamp: 'eb 12/3/2020 14:01:06'!
InternalAPI class
	instanceVariableNames: ''!
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 18:57:34'!
ISBNNotRegisteredErrorDescription

	^ 'ISBN is not registered'! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 11/30/2020 19:34:39'!
cartIsExpiredErrorDescription

	^ 'Cart is expired'! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 18:42:33'!
cartNotRegisteredErrorDescription

	^ 'Cart is not registered'! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 19:03:55'!
invalidQuantityErrorDescription

	^'Invalid quantity'! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 13:47:40'!
userNotRegisteredErrorDescription

	^ 'User not registered'! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 18:11:07'!
with: aUsersCollection
	
	^self new initializeWith: aUsersCollection.! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 17:21:47'!
with: aUsersCollection on: aDate
	
	^self new initializeWith: aUsersCollection on: aDate.! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 18:30:00'!
with: aUsersCollection on: aDate usingCatalog: aCatalog
	
	^self new initializeWith: aUsersCollection on: aDate usingCatalog: aCatalog .! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 12/2/2020 16:37:19'!
with: aUsersCollection on: aDate usingCatalog: aCatalog usingMerchantProccesor: aMerchantProccesor
	
	^self new initializeWith: aUsersCollection on: aDate usingCatalog: aCatalog usingMerchantProccesor: aMerchantProccesor.! !

!classDefinition: #InternalAPIResponse category: #TusLibros stamp: 'eb 12/3/2020 14:01:06'!
Object subclass: #InternalAPIResponse
	instanceVariableNames: 'payload'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalAPIResponse category: #TusLibros stamp: 'eb 12/3/2020 14:01:06'!
Object subclass: #InternalAPIResponse
	instanceVariableNames: 'payload'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPIResponse methodsFor: 'accesing' stamp: 'ja 11/29/2020 18:18:53'!
code

	self subclassResponsibility ! !
!InternalAPIResponse methodsFor: 'accesing' stamp: 'ja 11/29/2020 18:56:21'!
initializeWith: aPayload

	payload _ aPayload! !
!InternalAPIResponse methodsFor: 'accesing' stamp: 'ja 11/29/2020 18:57:44'!
payload

	self subclassResponsibility ! !

!classDefinition: 'InternalAPIResponse class' category: #TusLibros stamp: 'eb 12/3/2020 14:01:07'!
InternalAPIResponse class
	instanceVariableNames: 'payload'!

!classDefinition: 'InternalAPIResponse class' category: #TusLibros stamp: 'eb 12/3/2020 14:01:07'!
InternalAPIResponse class
	instanceVariableNames: 'payload'!
!InternalAPIResponse class methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 18:56:01'!
with: aPayload

	^ self new initializeWith: aPayload .! !

!classDefinition: #SuccessfulResponse category: #TusLibros stamp: 'eb 12/3/2020 14:01:07'!
InternalAPIResponse subclass: #SuccessfulResponse
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #SuccessfulResponse category: #TusLibros stamp: 'eb 12/3/2020 14:01:07'!
InternalAPIResponse subclass: #SuccessfulResponse
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!SuccessfulResponse methodsFor: 'accesing' stamp: 'ja 11/29/2020 19:00:16' overrides: 51011625!
code 

	^ 0! !
!SuccessfulResponse methodsFor: 'accesing' stamp: 'ja 11/29/2020 18:58:33' overrides: 51011633!
payload
	 
	^ payload ! !

!classDefinition: #UnsuccessfulResponse category: #TusLibros stamp: 'eb 12/3/2020 14:01:07'!
InternalAPIResponse subclass: #UnsuccessfulResponse
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #UnsuccessfulResponse category: #TusLibros stamp: 'eb 12/3/2020 14:01:07'!
InternalAPIResponse subclass: #UnsuccessfulResponse
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!UnsuccessfulResponse methodsFor: 'accesing' stamp: 'ja 11/29/2020 19:00:07' overrides: 51011625!
code 

	^ 1! !
!UnsuccessfulResponse methodsFor: 'accesing' stamp: 'ja 11/29/2020 18:59:00' overrides: 51011633!
payload

	^ payload ! !

!classDefinition: #Sale category: #TusLibros stamp: 'eb 12/3/2020 14:01:07'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: #TusLibros stamp: 'eb 12/3/2020 14:01:07'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'total' stamp: 'HernanWilkinson 6/17/2013 18:48'!
total
	
	^ total! !
!Sale methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 18:47'!
initializeTotal: aTotal

	total := aTotal ! !

!classDefinition: 'Sale class' category: #TusLibros stamp: 'eb 12/3/2020 14:01:07'!
Sale class
	instanceVariableNames: ''!

!classDefinition: 'Sale class' category: #TusLibros stamp: 'eb 12/3/2020 14:01:07'!
Sale class
	instanceVariableNames: ''!
!Sale class methodsFor: 'instance creation' stamp: 'HernanWilkinson 6/17/2013 18:47'!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal ! !

!classDefinition: #StoreTestObjectsFactory category: #TusLibros stamp: 'eb 12/3/2020 14:01:07'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreTestObjectsFactory category: #TusLibros stamp: 'eb 12/3/2020 14:01:07'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'HernanWilkinson 6/17/2013 18:08'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'HernanWilkinson 6/17/2013 18:08'!
itemSellByTheStore
	
	^ 'validBook'! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'HernanWilkinson 6/17/2013 18:08'!
itemSellByTheStorePrice
	
	^10! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'HernanWilkinson 6/17/2013 18:08'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'HernanWilkinson 6/17/2013 18:08'!
defaultCatalog
	
	^ Dictionary new
		at: self itemSellByTheStore put: self itemSellByTheStorePrice;
		yourself ! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'ja 12/2/2020 18:38:37'!
expiredCreditCard
	
	^CreditCard expiringOn: self pastYear.! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'ja 12/2/2020 18:39:15'!
notExpiredCreditCard
	
	^CreditCard expiringOn: self nextYear.! !
!StoreTestObjectsFactory methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 18:37' overrides: 16896425!
initialize

	today := DateAndTime now! !
!StoreTestObjectsFactory methodsFor: 'internal API' stamp: 'ja 12/2/2020 19:25:01'!
authenticatedUsers

	| users | 
	
	users _ Dictionary new.
	users add: 'Alan Kay' -> 'objetos';
		  add: 'Dan Ingalls' -> 'smalltalk'.
	
	^ users.! !
!StoreTestObjectsFactory methodsFor: 'internal API' stamp: 'ja 12/2/2020 19:25:36'!
internalApi
	
	^ InternalAPI with: self authenticatedUsers 
				on: today 
				usingCatalog: self defaultCatalog 
				usingMerchantProccesor: self.! !
!StoreTestObjectsFactory methodsFor: 'internal API' stamp: 'ja 12/2/2020 19:28:26'!
internalApiUsingMerchantProccessor: aMerchantProccessor
	
	^ InternalAPI with: self authenticatedUsers 
				on: today 
				usingCatalog: self defaultCatalog 
				usingMerchantProccesor: self.! !
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'ja 12/2/2020 18:39:00'!
nextYear
	
	^ Month month: today monthIndex year: today yearNumber + 1! !
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'ja 12/2/2020 18:38:11'!
pastYear
	
	^ Month month: today monthIndex year: today yearNumber - 1! !
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'HernanWilkinson 6/17/2013 18:37'!
today
	
	^ today! !

!classRemoval: #KeyNotFound stamp: 'eb 12/3/2020 14:01:08'!
Error subclass: #KeyNotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestObjectsFactory methodsFor: 'internal API' stamp: 'eb 12/2/2020 19:39:04' prior: 51011805!
internalApiUsingMerchantProccessor: aMerchantProccessor
	
	^ InternalAPI with: self authenticatedUsers 
				on: today 
				usingCatalog: self defaultCatalog 
				usingMerchantProccesor: aMerchantProccessor.! !

!methodRemoval: StoreTestObjectsFactory #internalApi stamp: 'eb 12/3/2020 14:01:08'!
internalApi
	
	^ InternalAPI with: self authenticatedUsers 
				on: today 
				usingCatalog: self defaultCatalog 
				usingMerchantProccesor: self.!
!InternalAPIResponse methodsFor: 'accesing' stamp: 'eb 12/2/2020 19:42:21' prior: 51011633!
payload

	^ payload copy.! !

!methodRemoval: SuccessfulResponse #payload stamp: 'eb 12/3/2020 14:01:08'!
payload
	 
	^ payload !

!methodRemoval: UnsuccessfulResponse #payload stamp: 'eb 12/3/2020 14:01:08'!
payload

	^ payload !
!InternalAPITest methodsFor: 'create test' stamp: 'eb 12/2/2020 19:56:14' prior: 51010809!
test01CreateCartSuccessfulWithCorrectClientIdAndPassword

	| response internalApi |
	
	internalApi _ testObjectFactory internalApi.
	response _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
		
	self assert: response code = 0.
		
	! !
!InternalAPITest methodsFor: 'create test' stamp: 'eb 12/2/2020 19:56:33' prior: 51011864!
test01CreateCartSuccessfulWithCorrectClientIdAndPassword

	| createResponse internalApi |
	
	internalApi _ testObjectFactory internalApi.
	createResponse _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
		
	self assert: createResponse code = 0.
		
	! !
!InternalAPITest methodsFor: 'create test' stamp: 'eb 12/2/2020 19:58:04' prior: 51011875!
test01CreateCartSuccessfulWithCorrectClientIdAndPassword

	| createResponse internalApi |
	
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	createResponse _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
	self assert: createResponse code = 0.! !
!InternalAPITest methodsFor: 'create test' stamp: 'eb 12/2/2020 19:58:50'!
test01CreateCartSuccessfullyWithCorrectClientIdAndPassword

	| createResponse internalApi |
	
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	createResponse _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
	self assert: createResponse code = 0.! !

!methodRemoval: InternalAPITest #test01CreateCartSuccessfulWithCorrectClientIdAndPassword stamp: 'eb 12/3/2020 14:01:08'!
test01CreateCartSuccessfulWithCorrectClientIdAndPassword

	| createResponse internalApi |
	
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	createResponse _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
	self assert: createResponse code = 0.!
!InternalAPITest methodsFor: 'create test' stamp: 'eb 12/2/2020 19:59:38'!
test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword

	| createResponse internalApi |
	
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	createResponse _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
	self assert: createResponse code = 0.! !

!methodRemoval: InternalAPITest #test01CreateCartSuccessfullyWithCorrectClientIdAndPassword stamp: 'eb 12/3/2020 14:01:08'!
test01CreateCartSuccessfullyWithCorrectClientIdAndPassword

	| createResponse internalApi |
	
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	createResponse _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
	self assert: createResponse code = 0.!
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 19:59:56' prior: 51011924!
test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword

	| createResponse internalApi |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	createResponse _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
	self assert: createResponse code = 0.! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:00:46'!
assertSuccessfullyResponse: createResponse

	^ self assert: createResponse code = 0! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:00:46' prior: 51011950!
test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword

	| createResponse internalApi |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	createResponse _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
	self assertSuccessfullyResponse: createResponse.! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:01:57' prior: 51010820!
test02CreateCartReturnsDifferentIdPerCustomer
	| internalApi response1 response2|
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	response1 _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	response2 _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.	
	self deny: response1 payload = response2 payload.
	! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:02:19' prior: 51011981!
test02CreateCartReturnsDifferentIdPerCustomer
	| internalApi id1 response2|
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	id1 _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	response2 _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.	
	self deny: id1 payload = response2 payload.
	! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:02:24' prior: 51011996!
test02CreateCartReturnsDifferentIdPerCustomer
	| internalApi id1 id2|
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	id1 _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	id2 _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.	
	self deny: id1 payload = id2 payload.
	! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:02:55' prior: 51012010!
test02CreateCartReturnsDifferentIdPerCustomer
	| internalApi firstCustomerCartId id2|
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	firstCustomerCartId _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	id2 _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.	
	self deny: firstCustomerCartId payload = id2 payload.
	! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:03:05' prior: 51012023!
test02CreateCartReturnsDifferentIdPerCustomer
	| internalApi firstCustomerCartId secondCustomerCartId |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	firstCustomerCartId _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	secondCustomerCartId _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.	
	self deny: firstCustomerCartId payload = secondCustomerCartId payload.
	! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:03:35' prior: 51012038!
test02CreateCartReturnsDifferentIdPerCustomer
	| internalApi firstCustomerCartId secondCustomerCartId |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	firstCustomerCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload .
	secondCustomerCartId _ (internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk') payload.	
	self deny: firstCustomerCartId = secondCustomerCartId
	! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:04:23' prior: 51010834!
test03CreateCartReturnsOneWithUnregisteredClientId
	| internalApi response |
	internalApi _ testObjectFactory internalApi.
	response _ internalApi createCartFor: 'Edsger Dijkstra' with: 'nanoDijkstra'.
	self assert: response code = 1.
	self assert: response payload equals: InternalAPI userNotRegisteredErrorDescription. 
		
	
		
	! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:04:43'!
test03CreateCartIsUnsuccessfullyWithUnregisteredClientId
	| internalApi response |
	internalApi _ testObjectFactory internalApi.
	response _ internalApi createCartFor: 'Edsger Dijkstra' with: 'nanoDijkstra'.
	self assert: response code = 1.
	self assert: response payload equals: InternalAPI userNotRegisteredErrorDescription. 
		
	
		
	! !

!methodRemoval: InternalAPITest #test03CreateCartReturnsOneWithUnregisteredClientId stamp: 'eb 12/3/2020 14:01:08'!
test03CreateCartReturnsOneWithUnregisteredClientId
	| internalApi response |
	internalApi _ testObjectFactory internalApi.
	response _ internalApi createCartFor: 'Edsger Dijkstra' with: 'nanoDijkstra'.
	self assert: response code = 1.
	self assert: response payload equals: InternalAPI userNotRegisteredErrorDescription. 
		
	
		
	!
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:04:56' prior: 51012086!
test03CreateCartIsUnsuccessfullyWithUnregisteredClientId
	| internalApi response |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	response _ internalApi createCartFor: 'Edsger Dijkstra' with: 'nanoDijkstra'.
	self assert: response code = 1.
	self assert: response payload equals: InternalAPI userNotRegisteredErrorDescription. 
		
	
		
	! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:05:26'!
assertUnsuccesfullyResponse: response

	^ self assert: response code = 1! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:05:26' prior: 51012115!
test03CreateCartIsUnsuccessfullyWithUnregisteredClientId
	| internalApi response |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	response _ internalApi createCartFor: 'Edsger Dijkstra' with: 'nanoDijkstra'.
	self assertUnsuccesfullyResponse: response.
	self assert: response payload equals: InternalAPI userNotRegisteredErrorDescription. 
		
	
		
	! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:06:10'!
test04CreateCartSuccessfullyEffectivlyCreatesCart

	| internalApi response |
	
	internalApi _ testObjectFactory internalApi.
 	
	response _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	self assert: response code = 0.
	
	self assert: (internalApi hasCartsOf: 'Alan Kay').
	
		
	! !

!methodRemoval: InternalAPITest #test04CreateCartSuccessfulEffectivlyCreatesCart stamp: 'eb 12/3/2020 14:01:08'!
test04CreateCartSuccessfulEffectivlyCreatesCart

	| internalApi response |
	
	internalApi _ testObjectFactory internalApi.
 	
	response _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	self assert: response code = 0.
	
	self assert: (internalApi hasCartsOf: 'Alan Kay').
	
		
	!
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:06:43' prior: 51012151!
test04CreateCartSuccessfullyEffectivlyCreatesCart
	| internalApi response |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	response _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	self assertSuccessfullyResponse: response.
	self assert: (internalApi hasCartsOf: 'Alan Kay').
	
		
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:09:42'!
test05AddToCartIsSuccessfullyWithValidCartId

	| internalApi responseCreate responseAdd |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseAdd _ internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3 on: (DateAndTime now). 

	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	! !

!methodRemoval: InternalAPITest #test05AddToCartSuccessfulWithCartId stamp: 'eb 12/3/2020 14:01:08'!
test05AddToCartSuccessfulWithCartId

	| internalApi responseCreate responseAdd |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseAdd _ internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3 on: (DateAndTime now). 

	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	!
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:11:09' prior: 51012190!
test05AddToCartIsSuccessfullyWithValidCartId

	| internalApi responseCreate responseAdd |
	
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseAdd _ internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3 on: (DateAndTime now). 

	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:11:29' prior: 51012224!
test05AddToCartIsSuccessfullyWithValidCartId

	| internalApi responseCreate responseAdd |
	
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	responseAdd _ internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3 on: (DateAndTime now). 
	self assert: responseAdd code = 0.
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:11:53' prior: 51012242!
test05AddToCartIsSuccessfullyWithValidCartId
	| internalApi responseCreate responseAdd |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	responseAdd _ internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3 on: (DateAndTime now). 
	self assert: responseAdd code = 0.
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:12:17' prior: 51012260!
test05AddToCartIsSuccessfullyWithValidCartId
	| internalApi responseCreate responseAdd |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	responseAdd _ internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3 on: (DateAndTime now). 
	self assertSuccessfullyResponse: responseAdd .
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:12:36' prior: 51012277!
test05AddToCartIsSuccessfullyWithValidCartId
	| internalApi validCartId responseAdd |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	
	validCartId _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	responseAdd _ internalApi addToCart: validCartId payload withISBN: 'book' withQuantity: 3 on: (DateAndTime now). 
	self assertSuccessfullyResponse: responseAdd .
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:12:46' prior: 51012295!
test05AddToCartIsSuccessfullyWithValidCartId
	| internalApi validCartId responseAdd |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	
	validCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload.
	responseAdd _ internalApi addToCart: validCartId payload withISBN: 'book' withQuantity: 3 on: (DateAndTime now). 
	self assertSuccessfullyResponse: responseAdd .
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:12:57' prior: 51012313!
test05AddToCartIsSuccessfullyWithValidCartId
	| internalApi validCartId responseAdd |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	
	validCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload.
	responseAdd _ internalApi addToCart: validCartId withISBN: 'book' withQuantity: 3 on: (DateAndTime now). 
	self assertSuccessfullyResponse: responseAdd .
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPI methodsFor: 'API' stamp: 'eb 12/2/2020 20:13:36'!
add: aCartId toCart: aISBN withQuantity: aQuantity on: aDate
	
	^ self ensureExecutionOf: [ self addToCart: aCartId withISBN: aISBN withQuantity: aQuantity ] withCart: aCartId validOn: aDate.
	
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 20:13:36' prior: 51012331!
test05AddToCartIsSuccessfullyWithValidCartId
	| internalApi validCartId responseAdd |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	
	validCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload.
	responseAdd _ internalApi add: validCartId toCart: 'book' withQuantity: 3 on: (DateAndTime now). 
	self assertSuccessfullyResponse: responseAdd .
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 20:13:36' prior: 51010891!
test11ListCartWithOnlyItemIntoCart

	| internalApi responseCreate responseList ISBN idCart listItems |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN withOccurrences: 3.
	
	self assert: responseList payload = listItems.

	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 20:13:36' prior: 51010991!
test08AddToCartUnsuccessfulWithIvalidISBN

	| responseCreate internalApi idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ self invalidISBN.
	
	self should: [ internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). self fail]  
		raise: Error  
		withMessageText: Cart invalidItemErrorMessage.
	
	
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 20:13:36' prior: 51010911!
test12ListCartWithManyItemsIntoCart

	| internalApi responseCreate responseList ISBN1 ISBN2 idCart listItems |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi add: idCart toCart: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi add: idCart toCart: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN1 withOccurrences: 3.
	listItems add: ISBN2 withOccurrences: 5.
	
	self assert: responseList payload = listItems.

	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 20:13:37' prior: 51011126!
test17CheckOutUnsuccessfulWithInvalidUser

	| internalApi responseCreate responseCheckOut idCart creditCard ISBN |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	creditCard _ testObjectFactory expiredCreditCard.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi add: idCart toCart: ISBN withQuantity: 3 on: testObjectFactory today . 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCard: creditCard ofOwner: 'Edsger Dijkstra' on: testObjectFactory today.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 20:13:37' prior: 51011099!
test16CheckOutUnsuccessfulWithExpiredCreditCard

	| internalApi responseCreate responseCheckOut idCart creditCard ISBN |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	creditCard _ testObjectFactory expiredCreditCard.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi add: idCart toCart: ISBN withQuantity: 3 on: testObjectFactory today . 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCard: creditCard ofOwner: 'Alan Kay' on: testObjectFactory today.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 20:13:37' prior: 51011028!
test13CheckOutSuccessfulWithNotEmptyCart

	| internalApi responseCreate responseCheckOut ISBN1 ISBN2 idCart creditCard date |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi add: idCart toCart: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi add: idCart toCart: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	date _ DateAndTime now month.
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload = 1.
	
	self assert: responseCheckOut code = 0.! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 20:13:37' prior: 51010973!
test07AddToCartUnsuccessfulWithCartInvalid

	| internalApi responseAdd idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ self invalidIdCart.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: InternalAPI cartNotRegisteredErrorDescription.
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 20:13:37' prior: 51010953!
test06AddToCartSuccessfulEffectivlyAddedToCart

	| internalApi responseCreate responseAdd idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 

	self assert: (internalApi cart: idCart has: ISBN times: 3).
	
	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 20:13:37' prior: 51011009!
test09AddToCartUnsuccessfulWithIvalidISBN

	| responseCreate internalApi responseAdd idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi add: idCart toCart: ISBN withQuantity: 0 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: Cart invalidQuantityErrorMessage.
	! !

!methodRemoval: InternalAPI #addToCart:withISBN:withQuantity:on: stamp: 'eb 12/3/2020 14:01:09'!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity on: aDate
	
	^ self ensureExecutionOf: [ self addToCart: aCartId withISBN: aISBN withQuantity: aQuantity ] withCart: aCartId validOn: aDate.
	
	!
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:15:03' prior: 51012358!
test05AddToCartIsSuccessfullyWithValidCartId
	| internalApi validCartId responseAdd |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	
	validCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload.
	responseAdd _ internalApi 
		add: testObjectFactory itemSellByTheStore 
		toCart: validCartId
		withQuantity: 3
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: responseAdd .
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:16:09' prior: 51012595!
test05AddToCartIsSuccessfullyWithValidCartId
	| internalApi validCartId addResponse |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	
	validCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload.
	addResponse _ internalApi 
		add: testObjectFactory itemSellByTheStore 
		toCart: validCartId
		withQuantity: 3
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: addResponse .
	self assert: addResponse payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:17:42'!
test06AddToCartSuccessfullyEffectivlyAddsToCart

	| internalApi responseCreate responseAdd idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 

	self assert: (internalApi cart: idCart has: ISBN times: 3).
	
	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	! !

!methodRemoval: InternalAPITest #test06AddToCartSuccessfulEffectivlyAddedToCart stamp: 'eb 12/3/2020 14:01:09'!
test06AddToCartSuccessfulEffectivlyAddedToCart

	| internalApi responseCreate responseAdd idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 

	self assert: (internalApi cart: idCart has: ISBN times: 3).
	
	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	!
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:17:45'!
test06AddToCartSuccessfulElyffectivlyAddedToCart

	| internalApi responseCreate responseAdd idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 

	self assert: (internalApi cart: idCart has: ISBN times: 3).
	
	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	! !

!methodRemoval: InternalAPITest #test06AddToCartSuccessfulElyffectivlyAddedToCart stamp: 'eb 12/3/2020 14:01:09'!
test06AddToCartSuccessfulElyffectivlyAddedToCart

	| internalApi responseCreate responseAdd idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 

	self assert: (internalApi cart: idCart has: ISBN times: 3).
	
	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	!
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:18:31' prior: 51012632!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| internalApi responseCreate responseAdd idCart ISBN|
	internalApi _ testObjectFactory internalApi.
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	idCart _ responseCreate payload.
	ISBN _ 'book'.
	responseAdd _ internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 
	self assert: (internalApi cart: idCart has: ISBN times: 3).
	self assert: responseAdd code = 0.
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:19:15' prior: 51012714!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| internalApi responseCreate responseAdd idCart ISBN|
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	idCart _ responseCreate payload.
	ISBN _ 'book'.
	responseAdd _ internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 
	self assert: (internalApi cart: idCart has: ISBN times: 3).
	self assert: responseAdd code = 0.
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:19:27' prior: 51012734!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| internalApi responseCreate responseAdd cartId ISBN|
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	cartId _ responseCreate payload.
	ISBN _ 'book'.
	responseAdd _ internalApi add: cartId toCart: ISBN withQuantity: 3 on: (DateAndTime now). 
	self assert: (internalApi cart: cartId has: ISBN times: 3).
	self assert: responseAdd code = 0.
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:19:48' prior: 51012755!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| internalApi responseAdd cartId ISBN|
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	cartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload .
	ISBN _ 'book'.
	responseAdd _ internalApi add: cartId toCart: ISBN withQuantity: 3 on: (DateAndTime now). 
	self assert: (internalApi cart: cartId has: ISBN times: 3).
	self assert: responseAdd code = 0.
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:22:16' prior: 51012776!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| internalApi responseAdd cartId |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	cartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload .
	responseAdd _ internalApi 
		add: testObjectFactory itemSellByTheStore
		toCart: cartId 
		withQuantity: 3 
		on: testObjectFactory today. 
	self assert: (internalApi cart: cartId has: testObjectFactory itemSellByTheStore times: 3).
	self assertSuccessfullyResponse: responseAdd .
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:22:42' prior: 51012795!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| internalApi addResponse cartId |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	cartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload .
	addResponse _ internalApi 
		add: testObjectFactory itemSellByTheStore
		toCart: cartId 
		withQuantity: 3 
		on: testObjectFactory today. 
	self assert: (internalApi cart: cartId has: testObjectFactory itemSellByTheStore times: 3).
	self assertSuccessfullyResponse: addResponse .
	self assert: addResponse payload equals: 'OK'.
	! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 20:23:32'!
cart: aCartId has: aISBN withQuantity: anAmount 
	
	| cart |
	
	cart _ carts at: aCartId .
	
	^ (cart includes: aISBN) and: [(cart occurrencesOf: aISBN) = anAmount ].! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 20:23:32' prior: 51012816!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| internalApi addResponse cartId |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	cartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload .
	addResponse _ internalApi 
		add: testObjectFactory itemSellByTheStore
		toCart: cartId 
		withQuantity: 3 
		on: testObjectFactory today. 
	self assert: (internalApi cart: cartId has: testObjectFactory itemSellByTheStore withQuantity: 3).
	self assertSuccessfullyResponse: addResponse .
	self assert: addResponse payload equals: 'OK'.
	! !

!methodRemoval: InternalAPI #cart:has:times: stamp: 'eb 12/3/2020 14:01:09'!
cart: aCartId has: aISBN times: anAmount 
	
	| cart |
	
	cart _ carts at: aCartId .
	
	^ (cart includes: aISBN) and: [(cart occurrencesOf: aISBN) = anAmount ].!
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:23:57' prior: 51012846!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| internalApi addResponse cartId |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	cartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload .
	addResponse _ internalApi 
		add: testObjectFactory itemSellByTheStore
		toCart: cartId 
		withQuantity: 3 
		on: testObjectFactory today. 
	self assert: (internalApi cart: cartId has: testObjectFactory itemSellByTheStore withQuantity: 3).
	self assertSuccessfullyResponse: addResponse .
	self assert: addResponse payload equals: 'OK'.! !

!classDefinition: #InternalAPITest category: #TusLibros stamp: 'eb 12/3/2020 14:01:09'!
TestCase subclass: #InternalAPITest
	instanceVariableNames: 'debitBehavior testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalAPITest category: #TusLibros stamp: 'eb 12/3/2020 14:01:09'!
TestCase subclass: #InternalAPITest
	instanceVariableNames: 'debitBehavior testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalAPITest category: #TusLibros stamp: 'eb 12/3/2020 14:01:09'!
TestCase subclass: #InternalAPITest
	instanceVariableNames: 'debitBehavior testObjectFactory internalApi1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalAPITest category: #TusLibros stamp: 'eb 12/3/2020 14:01:09'!
TestCase subclass: #InternalAPITest
	instanceVariableNames: 'debitBehavior testObjectFactory internalApi1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPITest methodsFor: 'setUp' stamp: 'eb 12/2/2020 20:27:03' prior: 51011154 overrides: 16927572!
setUp 
	debitBehavior _ [ :anAmount :aCreditCard | ].
	testObjectFactory _ StoreTestObjectsFactory new.
	
	internalApi1 _ testObjectFactory internalApiUsingMerchantProccessor: self.! !

!methodRemoval: InternalAPITest #invalidIdCart stamp: 'eb 12/3/2020 14:01:09'!
invalidIdCart

	^ 'Invalid id cart'!

!methodRemoval: InternalAPITest #invalidISBN stamp: 'eb 12/3/2020 14:01:09'!
invalidISBN

	^ 'Invalid ISBN'!

!methodRemoval: InternalAPITest #invalidCreditCard stamp: 'eb 12/3/2020 14:01:09'!
invalidCreditCard

	^ 'Invalid credit card'!
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:28:39' prior: 51011968!
test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword

	| createResponse  |
	createResponse _ internalApi1 createCartFor: 'Dan Ingalls' with: 'smalltalk'.
	self assertSuccessfullyResponse: createResponse.! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:28:59' prior: 51012949!
test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword

	| createResponse  |
	createResponse _ internalApi1 createCartFor: 'Dan Ingalls' with: 'smalltalk'.
	self assertSuccessfullyResponse: (internalApi1 createCartFor: 'Dan Ingalls' with: 'smalltalk').! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:29:07' prior: 51012959!
test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword
	self assertSuccessfullyResponse: (internalApi1 createCartFor: 'Dan Ingalls' with: 'smalltalk').! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:29:37'!
test02CreateCartReturnsDifferentIdsPerCustomer
	| internalApi firstCustomerCartId secondCustomerCartId |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	firstCustomerCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload .
	secondCustomerCartId _ (internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk') payload.	
	self deny: firstCustomerCartId = secondCustomerCartId
	! !

!methodRemoval: InternalAPITest #test02CreateCartReturnsDifferentIdPerCustomer stamp: 'eb 12/3/2020 14:01:09'!
test02CreateCartReturnsDifferentIdPerCustomer
	| internalApi firstCustomerCartId secondCustomerCartId |
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
	firstCustomerCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload .
	secondCustomerCartId _ (internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk') payload.	
	self deny: firstCustomerCartId = secondCustomerCartId
	!
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:30:09' prior: 51012979!
test02CreateCartReturnsDifferentIdsPerCustomer
	| firstCustomerCartId secondCustomerCartId |
	firstCustomerCartId _ (internalApi1 createCartFor: 'Alan Kay' with: 'objetos') payload .
	secondCustomerCartId _ (internalApi1 createCartFor: 'Dan Ingalls' with: 'smalltalk') payload.	
	self deny: firstCustomerCartId = secondCustomerCartId
	! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:31:04' prior: 51012136!
test03CreateCartIsUnsuccessfullyWithUnregisteredClientId
	| response |
	response _ internalApi1 createCartFor: 'Edsger Dijkstra' with: 'nanoDijkstra'.
	self assertUnsuccesfullyResponse: response.
	self assert: response payload equals: InternalAPI userNotRegisteredErrorDescription. 
		
	
		
	! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/2/2020 20:31:44' prior: 51012177!
test04CreateCartSuccessfullyEffectivlyCreatesCart
	| response |
	response _ internalApi1 createCartFor: 'Alan Kay' with: 'objetos'.
	self assertSuccessfullyResponse: response.
	self assert: (internalApi1 hasCartsOf: 'Alan Kay').
	
		
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:34:36' prior: 51012614!
test05AddToCartIsSuccessfullyWithValidCartId
	| validCartId addResponse |
	
	validCartId _ (internalApi1 createCartFor: 'Alan Kay' with: 'objetos') payload.
	addResponse _ internalApi1 
		add: testObjectFactory itemSellByTheStore 
		toCart: validCartId
		withQuantity: 3
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: addResponse .
	self assert: addResponse payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:35:36' prior: 51012875!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| addResponse cartId |
	cartId _ (internalApi1 createCartFor: 'Alan Kay' with: 'objetos') payload .
	addResponse _ internalApi1 
		add: testObjectFactory itemSellByTheStore
		toCart: cartId 
		withQuantity: 3 
		on: testObjectFactory today. 
	self assert: (internalApi1 cart: cartId has: testObjectFactory itemSellByTheStore withQuantity: 3).
	self assertSuccessfullyResponse: addResponse .
	self assert: addResponse payload equals: 'OK'.! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:36:41'!
validCartId

	^ (internalApi1 createCartFor: 'Alan Kay' with: 'objetos') payload! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:36:41' prior: 51013051!
test05AddToCartIsSuccessfullyWithValidCartId
	| validCartId addResponse |
	
	validCartId _ self validCartId.
	addResponse _ internalApi1 
		add: testObjectFactory itemSellByTheStore 
		toCart: validCartId
		withQuantity: 3
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: addResponse .
	self assert: addResponse payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:36:54' prior: 51013067!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| addResponse cartId |
	cartId _ self validCartId .
	addResponse _ internalApi1 
		add: testObjectFactory itemSellByTheStore
		toCart: cartId 
		withQuantity: 3 
		on: testObjectFactory today. 
	self assert: (internalApi1 cart: cartId has: testObjectFactory itemSellByTheStore withQuantity: 3).
	self assertSuccessfullyResponse: addResponse .
	self assert: addResponse payload equals: 'OK'.! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:37:48'!
successfullyAddResponseFor: cartId

	^ internalApi1 
		add: testObjectFactory itemSellByTheStore
		toCart: cartId 
		withQuantity: 3 
		on: testObjectFactory today! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:37:48' prior: 51013106!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| addResponse cartId |
	cartId _ self validCartId .
	addResponse _ self successfullyAddResponseFor: cartId. 
	self assert: (internalApi1 cart: cartId has: testObjectFactory itemSellByTheStore withQuantity: 3).
	self assertSuccessfullyResponse: addResponse .
	self assert: addResponse payload equals: 'OK'.! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:38:11' prior: 51013091!
test05AddToCartIsSuccessfullyWithValidCartId
	| addResponse |
	
	addResponse _ self successfullyAddResponseFor: self validCartId. 

	self assertSuccessfullyResponse: addResponse .
	self assert: addResponse payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:38:47' prior: 51013132!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| addResponse |
	addResponse _ self successfullyAddResponseFor: self validCartId. 
	self assert: (internalApi1 cart: self validCartId has: testObjectFactory itemSellByTheStore withQuantity: 3).
	self assertSuccessfullyResponse: addResponse .
	self assert: addResponse payload equals: 'OK'.! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:39:30' prior: 51013158!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| addResponse |
	addResponse _ self successfullyAddResponseFor: self validCartId. 
	self assert: (internalApi1 cart: self validCartId has: testObjectFactory itemSellByTheStore withQuantity: 3).! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:39:45' prior: 51013172!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	self successfullyAddResponseFor: self validCartId. 
	self assert: (internalApi1 cart: self validCartId has: testObjectFactory itemSellByTheStore withQuantity: 3).! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:40:55' prior: 51013183!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	self successfullyAddResponseFor: self validCartId. 
	self assertSuccessfullyAddResponseAddsItemsCorrectly.

	self assert: (internalApi1 cart: self validCartId has: testObjectFactory itemSellByTheStore withQuantity: 3).! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:41:28'!
assertSuccessfullyAddResponseAddsItemsCorrectly

	self assert: (internalApi1 
		cart: self validCartId 
		has: testObjectFactory itemSellByTheStore 
		withQuantity: 3).! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:42:30' prior: 51013193!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	self successfullyAddResponseFor: self validCartId. 
	self assertSuccessfullyAddResponseAddsItemsCorrectly.
! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:42:56' prior: 51013213!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	self successfullyAddResponseFor: self validCartId. 
	self assertSuccessfullyAddResponseAddsItemsCorrectlyFor: self validCartId.
! !
!InternalAPITest methodsFor: 'assertions' stamp: 'eb 12/2/2020 20:43:13'!
assertSuccessfullyAddResponseAddsItemsCorrectlyFor: aCartId

	self assert: (internalApi1 
		cart: aCartId
		has: testObjectFactory itemSellByTheStore 
		withQuantity: 3).! !
!InternalAPITest methodsFor: 'responses' stamp: 'eb 12/2/2020 20:43:31' prior: 51013123!
successfullyAddResponseFor: aCartId

	^ internalApi1 
		add: testObjectFactory itemSellByTheStore
		toCart: aCartId 
		withQuantity: 3 
		on: testObjectFactory today! !

!methodRemoval: InternalAPITest #assertSuccessfullyAddResponseAddsItemsCorrectly stamp: 'eb 12/3/2020 14:01:10'!
assertSuccessfullyAddResponseAddsItemsCorrectly

	self assert: (internalApi1 
		cart: self validCartId 
		has: testObjectFactory itemSellByTheStore 
		withQuantity: 3).!
!InternalAPITest methodsFor: 'assertions' stamp: 'eb 12/2/2020 20:43:49' prior: 51011962!
assertSuccessfullyResponse: aResponse

	^ self assert: aResponse code = 0! !
!InternalAPITest methodsFor: 'assertions' stamp: 'eb 12/2/2020 20:43:55' prior: 51012130!
assertUnsuccesfullyResponse: aResponse

	^ self assert: aResponse code = 1! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:51:24'!
test07AddToCartIsUnsuccessfullyWithInvalidCartId

	| internalApi responseAdd idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ self invalidIdCart.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: InternalAPI cartNotRegisteredErrorDescription.
	! !

!methodRemoval: InternalAPITest #test07AddToCartUnsuccessfulWithCartInvalid stamp: 'eb 12/3/2020 14:01:10'!
test07AddToCartUnsuccessfulWithCartInvalid

	| internalApi responseAdd idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ self invalidIdCart.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: InternalAPI cartNotRegisteredErrorDescription.
	!
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:51:45' prior: 51013267!
test07AddToCartIsUnsuccessfullyWithInvalidCartId

	| internalApi responseAdd idCart ISBN|
	 	
	internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ self invalidIdCart.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: InternalAPI cartNotRegisteredErrorDescription.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:54:20' prior: 51013304!
test07AddToCartIsUnsuccessfullyWithInvalidCartId

	| responseAdd idCart ISBN|	
	idCart _ self invalidIdCart.
	ISBN _ 'book'.
	responseAdd _ internalApi1 
		add: testObjectFactory itemSellByTheStore 
		toCart: testObjectFactory invalidCartId
		withQuantity: 3 
		on: testObjectFactory now.
	self assertUnsuccesfullyResponse: responseAdd .
	self assert: responseAdd payload equals: InternalAPI cartNotRegisteredErrorDescription.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:55:03' prior: 51013321!
test07AddToCartIsUnsuccessfullyWithInvalidCartId

	| addResponse |	
	addResponse _ internalApi1 
		add: testObjectFactory itemSellByTheStore 
		toCart: testObjectFactory invalidCartId
		withQuantity: 3 
		on: testObjectFactory now.
	self assertUnsuccesfullyResponse: addResponse .
	self assert: addResponse payload equals: InternalAPI cartNotRegisteredErrorDescription.
	! !
!InternalAPITest methodsFor: 'carts' stamp: 'eb 12/2/2020 20:55:38'!
invalidCartId

	^ 'Invalid cart id'.! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:55:47' prior: 51013338!
test07AddToCartIsUnsuccessfullyWithInvalidCartId

	| addResponse |	
	addResponse _ internalApi1 
		add: testObjectFactory itemSellByTheStore 
		toCart: self invalidCartId
		withQuantity: 3 
		on: testObjectFactory now.
	self assertUnsuccesfullyResponse: addResponse .
	self assert: addResponse payload equals: InternalAPI cartNotRegisteredErrorDescription.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 20:57:32'!
test08AddToCartIsUnsuccessfullyWithIvalidISBN

	| responseCreate internalApi idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ self invalidISBN.
	
	self should: [ internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). self fail]  
		raise: Error  
		withMessageText: Cart invalidItemErrorMessage.
	
	
	! !

!methodRemoval: InternalAPITest #test08AddToCartUnsuccessfulWithIvalidISBN stamp: 'eb 12/3/2020 14:01:10'!
test08AddToCartUnsuccessfulWithIvalidISBN

	| responseCreate internalApi idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ self invalidISBN.
	
	self should: [ internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). self fail]  
		raise: Error  
		withMessageText: Cart invalidItemErrorMessage.
	
	
	!

!methodRemoval: InternalAPITest #test09AddToCartUnsuccessfulWithIvalidISBN stamp: 'eb 12/3/2020 14:01:10'!
test09AddToCartUnsuccessfulWithIvalidISBN

	| responseCreate internalApi responseAdd idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi add: idCart toCart: ISBN withQuantity: 0 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: Cart invalidQuantityErrorMessage.
	!
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 21:02:27' prior: 51013371!
test08AddToCartIsUnsuccessfullyWithIvalidISBN
	| cartId addResponse |		
	cartId _ self validCartId .
	addResponse _ internalApi1
		add: self invalidCartId 
		toCart: cartId
		withQuantity: 3
		on: testObjectFactory now.
	
	self assertUnsuccesfullyResponse: addResponse .
	
	self assert: addResponse payload = Cart invalidItemErrorMessage.
	
	
	! !
!InternalAPI methodsFor: 'API' stamp: 'eb 12/2/2020 21:05:11' prior: 51012348!
add: anItem toCart: aCartId withQuantity: aQuantity on: aDate
	^ self 
		ensureExecutionOf: [ self addToCart: aCartId withISBN: anItem withQuantity: aQuantity ] 
		withCart: aCartId 
		validOn: aDate.
	
	! !
!InternalAPI methodsFor: 'API' stamp: 'eb 12/2/2020 21:05:36'!
add: aCartId toCart: aISBN withQuantity: aQuantity
	
	| cart |
	
	[ cart _ carts at: aCartId ] on: Error do: [^ UnsuccessfulResponse with: (self class cartNotRegisteredErrorDescription) ].
	
	[cart add: aQuantity of: aISBN] on: InvalidBookQuantity do: [:error | ^ UnsuccessfulResponse with: error messageText ].
	
	^ SuccessfulResponse with: 'OK'.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 21:05:36' prior: 51013441!
add: anItem toCart: aCartId withQuantity: aQuantity on: aDate
	^ self 
		ensureExecutionOf: [ self add: aCartId toCart: anItem withQuantity: aQuantity ] 
		withCart: aCartId 
		validOn: aDate.
	
	! !

!methodRemoval: InternalAPI #addToCart:withISBN:withQuantity: stamp: 'eb 12/3/2020 14:01:10'!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity
	
	| cart |
	
	[ cart _ carts at: aCartId ] on: Error do: [^ UnsuccessfulResponse with: (self class cartNotRegisteredErrorDescription) ].
	
	[cart add: aQuantity of: aISBN] on: InvalidBookQuantity do: [:error | ^ UnsuccessfulResponse with: error messageText ].
	
	^ SuccessfulResponse with: 'OK'.!
!InternalAPI methodsFor: 'API' stamp: 'eb 12/2/2020 21:07:12' prior: 51013450!
add: anItem toCart: aCartId withQuantity: aQuantity
	| cart |
	[ cart _ carts at: aCartId ] 
		on: Error 
		do: [ ^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
	[cart add: aQuantity of: anItem] 
		on: InvalidBookQuantity 
		do: [ :error | ^ UnsuccessfulResponse with: error messageText ].
	
	^ SuccessfulResponse with: 'OK'.! !
!InternalAPI methodsFor: 'API' stamp: 'eb 12/2/2020 21:07:16' prior: 51013489!
add: anItem toCart: aCartId withQuantity: aQuantity
	| cart |
	[ cart _ carts at: aCartId ] 
		on: Error 
		do: [ ^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
	[cart add: aQuantity of: anItem] 
		on: InvalidBookQuantity 
		do: [ :error | ^ UnsuccessfulResponse with: error messageText ].
	^ SuccessfulResponse with: 'OK'.! !
!InternalAPI methodsFor: 'API' stamp: 'eb 12/2/2020 21:07:31' prior: 51013465!
add: anItem toCart: aCartId withQuantity: aQuantity on: aDate
	^ self 
		ensureExecutionOf: [ self add: anItem toCart: aCartId withQuantity: aQuantity ] 
		withCart: aCartId 
		validOn: aDate.
	
	! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 21:07:50'!
ensureExecutionOf: aBlock withCart: aCartId isValidOn: aDate

	| returnValue |

	self ensureDateOf: aCartId isValidOn: aDate.
	
	returnValue _ aBlock value.
	
	self updateDateOf: aCartId to: aDate.
	
	^ returnValue .
	
	! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 21:07:50' prior: 51013517!
add: anItem toCart: aCartId withQuantity: aQuantity on: aDate
	^ self 
		ensureExecutionOf: [ self add: anItem toCart: aCartId withQuantity: aQuantity ] 
		withCart: aCartId 
		isValidOn: aDate.
	
	! !

!methodRemoval: InternalAPI #ensureExecutionOf:withCart:validOn: stamp: 'eb 12/3/2020 14:01:10'!
ensureExecutionOf: aBlock withCart: aCartId validOn: aDate

	| returnValue |

	self ensureDateOf: aCartId isValidOn: aDate.
	
	returnValue _ aBlock value.
	
	self updateDateOf: aCartId to: aDate.
	
	^ returnValue .
	
	!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 21:09:51' prior: 51012837!
cart: aCartId has: anItem withQuantity: aQuantity 
	| cart |
	cart _ carts at: aCartId .
	^ (cart includes: anItem) and: [ (cart occurrencesOf: anItem) = aQuantity ].! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 21:10:28' prior: 51013221!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| validCartId |
	
	validCartId _ self validCartId.
	
	self successfullyAddResponseFor: self validCartId. 
	self assertSuccessfullyAddResponseAddsItemsCorrectlyFor: self validCartId.
! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 21:10:35' prior: 51013566!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| cartId |
	
	cartId _ self validCartId.
	
	self successfullyAddResponseFor: self validCartId. 
	self assertSuccessfullyAddResponseAddsItemsCorrectlyFor: self validCartId.
! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 21:11:01' prior: 51013577!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| cartId |
	
	cartId _ self validCartId.
	
	self successfullyAddResponseFor: cartId. 
	self assertSuccessfullyAddResponseAddsItemsCorrectlyFor: cartId.
! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 21:11:16' prior: 51013357!
test07AddToCartIsUnsuccessfullyWithInvalidCartId

	| addResponse |	
	addResponse _ internalApi1 
		add: testObjectFactory itemSellByTheStore 
		toCart: self invalidCartId
		withQuantity: 3 
		on: testObjectFactory today.
	self assertUnsuccesfullyResponse: addResponse .
	self assert: addResponse payload equals: InternalAPI cartNotRegisteredErrorDescription.
	! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/2/2020 21:11:29' prior: 51013427!
test08AddToCartIsUnsuccessfullyWithIvalidISBN
	| cartId addResponse |		
	cartId _ self validCartId .
	addResponse _ internalApi1
		add: self invalidCartId 
		toCart: cartId
		withQuantity: 3
		on: testObjectFactory today.
	
	self assertUnsuccesfullyResponse: addResponse .
	
	self assert: addResponse payload = Cart invalidItemErrorMessage.
	
	
	! !
!InternalAPI methodsFor: 'add to cart' stamp: 'eb 12/2/2020 21:12:41' prior: 51013537!
add: anItem toCart: aCartId withQuantity: aQuantity on: aDate
	[ ^ self 
		ensureExecutionOf: [ self add: anItem toCart: aCartId withQuantity: aQuantity ] 
		withCart: aCartId 
		isValidOn: aDate. ] on: Error do: [ :error | ^ UnsuccessfulResponse with: error messageText ].
	
	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:13:54'!
test09ListCartWithEmptyCart

	| internalApi responseCreate responseList |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseList _ internalApi listCart: responseCreate payload.
	
	self assert: responseList payload isEmpty.

	! !

!methodRemoval: InternalAPITest #test10ListCartWithEmptyCart stamp: 'eb 12/3/2020 14:01:10'!
test10ListCartWithEmptyCart

	| internalApi responseCreate responseList |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseList _ internalApi listCart: responseCreate payload.
	
	self assert: responseList payload isEmpty.

	!
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:16:35' prior: 51013638!
test09ListCartWithEmptyCart
	| cartId  |
	cartId _ self validCartId .	
	self assert: (internalApi1 listCart: cartId) payload isEmpty.

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:17:15' prior: 51013665!
test09ListCartWithEmptyCart
	| cartId |
	cartId _ self validCartId .	
	self assert: (internalApi1 listCart: cartId) payload isEmpty.

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:25:00'!
test11ListCartWithOnlyOneItemIntoCart

	| internalApi responseCreate responseList ISBN idCart listItems |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN withOccurrences: 3.
	
	self assert: responseList payload = listItems.

	! !

!methodRemoval: InternalAPITest #test11ListCartWithOnlyItemIntoCart stamp: 'eb 12/3/2020 14:01:10'!
test11ListCartWithOnlyItemIntoCart

	| internalApi responseCreate responseList ISBN idCart listItems |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN withOccurrences: 3.
	
	self assert: responseList payload = listItems.

	!
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:25:22' prior: 51013680!
test11ListCartWithOnlyOneItemIntoCart
	| internalApi responseCreate responseList ISBN idCart listItems |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN withOccurrences: 3.
	
	self assert: responseList payload = listItems.

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:27:24'!
test10ListCartWithNotEmptyCart
	| cartId |
	cartId _ self validCartId .	
	self assert: (internalApi1 listCart: cartId) payload isEmpty.

	! !

!methodRemoval: InternalAPITest #test11ListCartWithOnlyOneItemIntoCart stamp: 'eb 12/3/2020 14:01:10'!
test11ListCartWithOnlyOneItemIntoCart
	| internalApi responseCreate responseList ISBN idCart listItems |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi add: idCart toCart: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN withOccurrences: 3.
	
	self assert: responseList payload = listItems.

	!

!methodRemoval: InternalAPITest #test12ListCartWithManyItemsIntoCart stamp: 'eb 12/3/2020 14:01:10'!
test12ListCartWithManyItemsIntoCart

	| internalApi responseCreate responseList ISBN1 ISBN2 idCart listItems |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi add: idCart toCart: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi add: idCart toCart: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN1 withOccurrences: 3.
	listItems add: ISBN2 withOccurrences: 5.
	
	self assert: responseList payload = listItems.

	!
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:27:34'!
test10ListCartWithInvalidCart
	| cartId |
	cartId _ self validCartId .	
	self assert: (internalApi1 listCart: cartId) payload isEmpty.

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:27:40'!
test11ListCartWithInvalidCart
	| cartId |
	cartId _ self validCartId .	
	self assert: (internalApi1 listCart: cartId) payload isEmpty.

	! !

!methodRemoval: InternalAPITest #test10ListCartWithInvalidCart stamp: 'eb 12/3/2020 14:01:10'!
test10ListCartWithInvalidCart
	| cartId |
	cartId _ self validCartId .	
	self assert: (internalApi1 listCart: cartId) payload isEmpty.

	!
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:31:55' prior: 51013741!
test10ListCartWithNotEmptyCart
	| cartId listResponse |
	cartId _ self validCartId .	
	
	self successfullyAddResponseFor: cartId.
	
	listResponse _ internalApi1 listCart: cartId .
	self assert: (internalApi1 listCart: cartId) payload isEmpty.

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:34:46' prior: 51013816!
test10ListCartWithNotEmptyCart
	| cartId listResponse |
	cartId _ self validCartId .	
	
	self successfullyAddResponseFor: cartId.
	
	listResponse _ internalApi1 listCart: cartId .
	self assert: (listResponse occurrencesOf: self itemSellByTheStore) = 3.

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:37:17' prior: 51013827!
test10ListCartWithNotEmptyCart
	| cartId listResponse |
	cartId _ self validCartId .	
	
	self successfullyAddResponseFor: cartId.
	
	listResponse _ internalApi1 listCart: cartId .
	self assert: (listResponse = Bag new add: self itemSellByTheStore withOccurences: 3).

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:37:56' prior: 51013839!
test10ListCartWithNotEmptyCart
	| cartId listResponse |
	cartId _ self validCartId .	
	
	self successfullyAddResponseFor: cartId.
	
	listResponse _ internalApi1 listCart: cartId .
	self assert: (listResponse = Bag new add: self itemSellByTheStore withOccurrences: 3).

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:38:13' prior: 51013851!
test10ListCartWithNotEmptyCart
	| cartId listResponse |
	cartId _ self validCartId .	
	
	self successfullyAddResponseFor: cartId.
	
	listResponse _ internalApi1 listCart: cartId .
	self assert: (listResponse = Bag new add: self itemSellByTheStore withOccurrences: 3).

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:38:26' prior: 51013863!
test10ListCartWithNotEmptyCart
	| cartId listResponse |
	cartId _ self validCartId .	
	
	self successfullyAddResponseFor: cartId.
	
	listResponse _ internalApi1 listCart: cartId .
	self assert: (listResponse = Bag new add: testObjectFactory itemSellByTheStore withOccurrences: 3).

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:39:36' prior: 51013875!
test10ListCartWithNotEmptyCart
	| cartId listResponse targetElements |
	cartId _ self validCartId .	
	
	self successfullyAddResponseFor: cartId.
	
	listResponse _ internalApi1 listCart: cartId .
	
	targetElements _ Bag new.
	targetElements  add: testObjectFactory itemSellByTheStore withOccurrences: 3. 
	self assert: (listResponse = Bag new add: testObjectFactory itemSellByTheStore withOccurrences: 3).

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:40:12' prior: 51013887!
test10ListCartWithNotEmptyCart
	| cartId targetElements |
	cartId _ self validCartId .	
	
	self successfullyAddResponseFor: cartId.
		
	targetElements _ Bag new.
	
	targetElements  add: testObjectFactory itemSellByTheStore withOccurrences: 3. 
	self assert: targetElements equals: (internalApi1 listCart: cartId) .

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:41:19' prior: 51013673!
test09ListCartWithEmptyCart
	| cartId response |
	cartId _ self validCartId .	
	
	response _ internalApi1 listCart: cartId.
	
	self assertSuccessfullyResponse: response.
	self assert: response payload isEmpty.

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:42:16' prior: 51013903!
test10ListCartWithNotEmptyCart
	| cartId listCartResponse targetElements |
	cartId _ self validCartId .	
	
	self successfullyAddResponseFor: cartId.
		
	targetElements _ Bag new.
	
	targetElements  add: testObjectFactory itemSellByTheStore withOccurrences: 3. 
	
	listCartResponse _ internalApi1 listCart: cartId.
	
	self assertSuccessfullyResponse: listCartResponse .
	self assert: targetElements equals: listCartResponse payload .

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:42:26' prior: 51013916!
test09ListCartWithEmptyCart
	| cartId listCartResponse |
	cartId _ self validCartId .	
	
	listCartResponse _ internalApi1 listCart: cartId.
	
	self assertSuccessfullyResponse: listCartResponse.
	self assert: listCartResponse payload isEmpty.

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:44:52' prior: 51013801!
test11ListCartWithInvalidCart
	| cartId listCartResponse |
	cartId _ self validCartId .	
	
	listCartResponse _ internalApi1 listCart: cartId.
	self assertUnsuccesfullyResponse: listCartResponse.

	self assert: internalApi1 class cartNotRegisteredErrorDescription equals: listCartResponse payload .
	! !
!InternalAPI methodsFor: 'API' stamp: 'eb 12/2/2020 21:45:49' prior: 51011539!
listCart: aCartId
	| cart listItems |
	[ cart _ carts at: aCartId. ]
		on: Error
		do: [ ^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
	listItems _ cart items.
	^ SuccessfulResponse with: listItems asBag. 
	
	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 21:46:38' prior: 51013954!
test11ListCartWithInvalidCart
	| cartId listCartResponse |
	cartId _ self invalidCartId .	
	
	listCartResponse _ internalApi1 listCart: cartId.
	self assertUnsuccesfullyResponse: listCartResponse.

	self assert: internalApi1 class cartNotRegisteredErrorDescription equals: listCartResponse payload .
	! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 21:51:02'!
test12CheckOutIsSuccessfulluWithNotEmptyCart

	| internalApi responseCreate responseCheckOut ISBN1 ISBN2 idCart creditCard date |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi add: idCart toCart: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi add: idCart toCart: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	date _ DateAndTime now month.
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload = 1.
	
	self assert: responseCheckOut code = 0.! !

!methodRemoval: InternalAPITest #test13CheckOutSuccessfulWithNotEmptyCart stamp: 'eb 12/3/2020 14:01:11'!
test13CheckOutSuccessfulWithNotEmptyCart

	| internalApi responseCreate responseCheckOut ISBN1 ISBN2 idCart creditCard date |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi add: idCart toCart: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi add: idCart toCart: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	date _ DateAndTime now month.
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload = 1.
	
	self assert: responseCheckOut code = 0.!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 21:51:39'!
test12CheckOutIsSuccessfullyWithNotEmptyCart

	| internalApi responseCreate responseCheckOut ISBN1 ISBN2 idCart creditCard date |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi add: idCart toCart: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi add: idCart toCart: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	date _ DateAndTime now month.
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload = 1.
	
	self assert: responseCheckOut code = 0.! !

!methodRemoval: InternalAPITest #test12CheckOutIsSuccessfulluWithNotEmptyCart stamp: 'eb 12/3/2020 14:01:11'!
test12CheckOutIsSuccessfulluWithNotEmptyCart

	| internalApi responseCreate responseCheckOut ISBN1 ISBN2 idCart creditCard date |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi add: idCart toCart: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi add: idCart toCart: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	date _ DateAndTime now month.
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload = 1.
	
	self assert: responseCheckOut code = 0.!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 21:56:19' prior: 51014047!
test12CheckOutIsSuccessfullyWithNotEmptyCart
	| cartId |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 21:58:55'!
nextCartId

	nextId _ nextId + 1.
	
	^ nextId ! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 21:58:55' prior: 51011523!
createCartFor: anUser with: aPassword 
	
	| idCart cart|
	
	[ self ensureIsRegisteredUser: anUser with: aPassword ] on: Error do: [:error | ^UnsuccessfulResponse with: error messageText ].
	
	cart _ Cart acceptingItemsOf: catalog.
	
	idCart _ self nextCartId.
	
	cartsPerUser add: anUser -> cart.
	
	carts add: idCart -> cart.
	
	modifications add: idCart -> date.
	
	^ SuccessfulResponse with: idCart.! !

!methodRemoval: InternalAPI #nextIdFree stamp: 'eb 12/3/2020 14:01:11'!
nextIdFree

	nextId _ nextId + 1.
	
	^ nextId !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 21:59:03' prior: 51014111!
nextCartId
	nextId _ nextId + 1.
	^ nextId ! !

!classDefinition: #InternalAPI category: #TusLibros stamp: 'eb 12/3/2020 14:01:11'!
Object subclass: #InternalAPI
	instanceVariableNames: 'users nextCartId carts date modifications cartsPerUser catalog merchantProcesor nextTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 21:59:08' prior: 51011406!
initializeWith: aUsersCollection on: aDate usingCatalog: aCatalog usingMerchantProccesor: aMerchantProccesor
	
	users _ aUsersCollection.
	
	date _ aDate.
	
	carts _ Dictionary new.
	
	catalog _ aCatalog.
	
	cartsPerUser _ Dictionary new.
	
	modifications _ Dictionary new.
	
	nextCartId _ 0.
	
	nextTransaction _ 0.
	
	merchantProcesor _ aMerchantProccesor.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 21:59:08' prior: 51014137!
nextCartId
	nextCartId _ nextCartId + 1.
	^ nextCartId ! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 21:59:27'!
nextCheckOutId

	nextTransaction _ nextTransaction + 1.
	
	^ nextTransaction
	! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 21:59:27' prior: 51011504!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	
	| cart cashier|
	
	[cart _ carts at: aCartId ] on: Error do:[^ UnsuccessfulResponse with: (self class cartNotRegisteredErrorDescription) ].
	
	[cashier _ Cashier toCheckout: cart charging: aCreditCard throught: merchantProcesor on: aDate registeringOn: OrderedCollection new] on: Error do: [:error| ^ UnsuccessfulResponse with: error messageText].
	
	cashier checkOut.
	
	^ SuccessfulResponse with: self nextCheckOutId.
	! !

!methodRemoval: InternalAPI #nextTransaction stamp: 'eb 12/3/2020 14:01:11'!
nextTransaction

	nextTransaction _ nextTransaction + 1.
	
	^ nextTransaction
	!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 21:59:34' prior: 51014172!
nextCheckOutId
	nextTransaction _ nextTransaction + 1.
	^ nextTransaction
	! !

!classDefinition: #InternalAPI category: #TusLibros stamp: 'eb 12/3/2020 14:01:11'!
Object subclass: #InternalAPI
	instanceVariableNames: 'users nextCartId carts date modifications cartsPerUser catalog merchantProcesor nextCheckOutId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 21:59:42' prior: 51014152!
initializeWith: aUsersCollection on: aDate usingCatalog: aCatalog usingMerchantProccesor: aMerchantProccesor
	
	users _ aUsersCollection.
	
	date _ aDate.
	
	carts _ Dictionary new.
	
	catalog _ aCatalog.
	
	cartsPerUser _ Dictionary new.
	
	modifications _ Dictionary new.
	
	nextCartId _ 0.
	
	nextCheckOutId _ 0.
	
	merchantProcesor _ aMerchantProccesor.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 21:59:42' prior: 51014203!
nextCheckOutId
	nextCheckOutId _ nextCheckOutId + 1.
	^ nextCheckOutId
	! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 22:00:46' prior: 51011429!
ensureDateOf: aCartId isValidOn: aDate
	| halfHourAgo |
	halfHourAgo _ aDate - 30 minutes.
	((modifications includesKey: aCartId) and: [(modifications at: aCartId)  < halfHourAgo ]) 
		ifTrue: [ self error: self class cartIsExpiredErrorDescription ].! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 22:01:05' prior: 51011450!
ensureIsRegisteredUser: anUser with: aPassword 
	| aPasswordRegistered |
	aPasswordRegistered _ users at: anUser ifAbsent:[ self error: self class userNotRegisteredErrorDescription ].
	^ aPasswordRegistered = aPassword.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 22:01:31'!
ensureUser: anUser isRegisteredWith: aPassword 
	| aPasswordRegistered |
	aPasswordRegistered _ users at: anUser ifAbsent:[ self error: self class userNotRegisteredErrorDescription ].
	^ aPasswordRegistered = aPassword.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 22:01:31' prior: 51014116!
createCartFor: anUser with: aPassword 
	
	| idCart cart|
	
	[ self ensureUser: anUser isRegisteredWith: aPassword ] on: Error do: [:error | ^UnsuccessfulResponse with: error messageText ].
	
	cart _ Cart acceptingItemsOf: catalog.
	
	idCart _ self nextCartId.
	
	cartsPerUser add: anUser -> cart.
	
	carts add: idCart -> cart.
	
	modifications add: idCart -> date.
	
	^ SuccessfulResponse with: idCart.! !

!methodRemoval: InternalAPI #ensureIsRegisteredUser:with: stamp: 'eb 12/3/2020 14:01:11'!
ensureIsRegisteredUser: anUser with: aPassword 
	| aPasswordRegistered |
	aPasswordRegistered _ users at: anUser ifAbsent:[ self error: self class userNotRegisteredErrorDescription ].
	^ aPasswordRegistered = aPassword.!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 22:01:48' prior: 51014261!
ensureUser: anUser isRegisteredWith: aPassword 
	| registeredPassword |
	registeredPassword _ users at: anUser ifAbsent:[ self error: self class userNotRegisteredErrorDescription ].
	^ registeredPassword = aPassword.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 22:01:57' prior: 51011476!
updateDateOf: aCartId to: aDate
	modifications at: aCartId put: aDate .! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 22:02:14' prior: 51013526!
ensureExecutionOf: aBlock withCart: aCartId isValidOn: aDate
	| returnValue |
	self ensureDateOf: aCartId isValidOn: aDate.
	returnValue _ aBlock value.
	self updateDateOf: aCartId to: aDate.
	^ returnValue .
	
	! !
!InternalAPI methodsFor: 'expiration' stamp: 'eb 12/2/2020 22:03:07'!
updateModificationDateOf: aCartId to: aDate
	modifications at: aCartId put: aDate .! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 22:03:08' prior: 51014314!
ensureExecutionOf: aBlock withCart: aCartId isValidOn: aDate
	| returnValue |
	self ensureDateOf: aCartId isValidOn: aDate.
	returnValue _ aBlock value.
	self updateModificationDateOf: aCartId to: aDate.
	^ returnValue .
	
	! !

!methodRemoval: InternalAPI #updateDateOf:to: stamp: 'eb 12/3/2020 14:01:11'!
updateDateOf: aCartId to: aDate
	modifications at: aCartId put: aDate .!
!InternalAPI methodsFor: 'initialization' stamp: 'eb 12/2/2020 22:04:14' prior: 51014219!
initializeWith: aUsersCollection on: aDate usingCatalog: aCatalog usingMerchantProccesor: aMerchantProccesor
	users _ aUsersCollection.
	date _ aDate.
	carts _ Dictionary new.
	catalog _ aCatalog.
	cartsPerUser _ Dictionary new.
	modifications _ Dictionary new.
	nextCartId _ 0.
	nextCheckOutId _ 0.
	merchantProcesor _ aMerchantProccesor.! !
!InternalAPI methodsFor: 'initialization' stamp: 'eb 12/2/2020 22:04:36' prior: 51014345!
initializeWith: aUsersCollection on: aDate usingCatalog: aCatalog usingMerchantProccesor: aMerchantProccesor
	users _ aUsersCollection.
	date _ aDate.
	catalog _ aCatalog.
	merchantProcesor _ aMerchantProccesor.
	carts _ Dictionary new.
	cartsPerUser _ Dictionary new.
	modifications _ Dictionary new.
	nextCartId _ 0.
	nextCheckOutId _ 0.! !
!InternalAPI methodsFor: 'testing' stamp: 'eb 12/2/2020 22:04:57' prior: 51011460!
hasCartsOf: anUser
	^ cartsPerUser includesKey: anUser.! !
!InternalAPI methodsFor: 'create cart' stamp: 'eb 12/2/2020 22:05:40' prior: 51014272!
createCartFor: anUser with: aPassword 
	| idCart cart|
	[ self ensureUser: anUser isRegisteredWith: aPassword ] 
		on: Error 
		do: [:error | ^UnsuccessfulResponse with: error messageText ].
	cart _ Cart acceptingItemsOf: catalog.
	idCart _ self nextCartId.
	cartsPerUser add: anUser -> cart.
	carts add: idCart -> cart.
	modifications add: idCart -> date.
	^ SuccessfulResponse with: idCart.! !
!InternalAPI methodsFor: 'create cart' stamp: 'eb 12/2/2020 22:05:43' prior: 51014378!
createCartFor: anUser with: aPassword 
	| cartId cart|
	[ self ensureUser: anUser isRegisteredWith: aPassword ] 
		on: Error 
		do: [:error | ^UnsuccessfulResponse with: error messageText ].
	cart _ Cart acceptingItemsOf: catalog.
	cartId _ self nextCartId.
	cartsPerUser add: anUser -> cart.
	carts add: cartId -> cart.
	modifications add: cartId -> date.
	^ SuccessfulResponse with: cartId.! !
!InternalAPI methodsFor: 'create cart' stamp: 'eb 12/2/2020 22:06:08' prior: 51014394!
createCartFor: anUser with: aPassword 
	| cartId cart |
	[ self ensureUser: anUser isRegisteredWith: aPassword ] 
		on: Error 
		do: [:error | ^UnsuccessfulResponse with: error messageText ].
	cart _ Cart acceptingItemsOf: catalog.
	cartId _ self nextCartId.
	cartsPerUser add: anUser -> cart.
	carts add: cartId -> cart.
	modifications add: cartId -> date.
	^ SuccessfulResponse with: cartId.! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:08:09' prior: 51014178!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier |
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[ ^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
	[ cashier _ Cashier 
		toCheckout: cart 
		charging: aCreditCard 
		throught: merchantProcesor 
		on: aDate 
		registeringOn: OrderedCollection new ] 
			on: Error 
			do: [:error| ^ UnsuccessfulResponse with: error messageText].
	
	cashier checkOut.
	
	^ SuccessfulResponse with: self nextCheckOutId.
	! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:08:25' prior: 51014426!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier |
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[ ^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
	[ cashier _ Cashier 
		toCheckout: cart 
		charging: aCreditCard 
		throught: merchantProcesor 
		on: aDate 
		registeringOn: OrderedCollection new ] 
			on: Error 
			do: [:error| ^ UnsuccessfulResponse with: error messageText].
	cashier checkOut.
	^ SuccessfulResponse with: self nextCheckOutId.
	! !

!classDefinition: #InternalAPI category: #TusLibros stamp: 'eb 12/3/2020 14:01:11'!
Object subclass: #InternalAPI
	instanceVariableNames: 'users nextCartId carts date modifications cartsPerUser catalog merchantProcesor nextCheckOutId purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:10:56' prior: 51014446!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[ ^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
	[ cashier _ Cashier 
		toCheckout: cart 
		charging: aCreditCard 
		throught: merchantProcesor 
		on: aDate 
		registeringOn: OrderedCollection new ] 
			on: Error 
			do: [:error| ^ UnsuccessfulResponse with: error messageText].
	
	checkoutId _ self nextCheckOutId.
	
	purchases at: anUser put: checkoutId.
	
	cashier checkOut.
	^ SuccessfulResponse with: checkoutId.
	! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:14:47' prior: 51014476!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[ ^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
	[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
		on: Error 
		do: [:error| ^ UnsuccessfulResponse with: error messageText].
	
	checkoutId _ self nextCheckOutId.
	
	self addPurchase: checkoutId to: anUser of: cart items withCost: cashier checkOut.
		
	^ SuccessfulResponse with: checkoutId.
	! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:16:42' prior: 51014104!
test12CheckOutIsSuccessfullyWithNotEmptyCart
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
	
! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:16:57'!
test12CheckOutIsSuccessfullyWithNotEmptyCartAndNotExpiredCreditCard
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
	
! !

!methodRemoval: InternalAPITest #test12CheckOutIsSuccessfullyWithNotEmptyCart stamp: 'eb 12/3/2020 14:01:12'!
test12CheckOutIsSuccessfullyWithNotEmptyCart
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
	
!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:17:21' prior: 51014529!
test12CheckOutIsSuccessfullyWithNotEmptyCartAndNotExpiredCreditCard
	| cartId creditCard checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
	
	creditCard _ CreditCard expiringOn: testObjectFactory nextYear .
! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:18:19' prior: 51014546!
test12CheckOutIsSuccessfullyWithNotEmptyCartAndNotExpiredCreditCard
	| cartId creditCard checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
	
	creditCard _ CreditCard expiringOn: testObjectFactory nextYear .
	
	checkoutResponse _ internalApi1 
		checkOutCart: cartId 
		withCreditCard: creditCard
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:19:15' prior: 51014557!
test12CheckOutIsSuccessfullyWithNotEmptyCartAndNotExpiredCreditCard
	| cartId creditCard checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
	
	creditCard _ CreditCard expiringOn: testObjectFactory nextYear .
	
	checkoutResponse _ internalApi1 
		checkOutCart: cartId 
		withCreditCard: creditCard
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: checkoutResponse.
	
	self assert: (3 * testObjectFactory itemSellByTheStorePrice) equals: checkoutResponse payload .
! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:19:47'!
addPurchase: aSmallInteger to: aString of: anOrderedCollection withCost: aSmallInteger4 
	self shouldBeImplemented.! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:19:52' prior: 51014593!
addPurchase: aSmallInteger to: aString of: anOrderedCollection withCost: aSmallInteger4 
	
	! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:20:55' prior: 51014573!
test12CheckOutIsSuccessfullyWithNotEmptyCartAndNotExpiredCreditCard
	| cartId creditCard checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
	
	creditCard _ CreditCard expiringOn: testObjectFactory nextYear .
	
	checkoutResponse _ internalApi1 
		checkOutCart: cartId 
		withCreditCard: creditCard
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: checkoutResponse.
	
	self assert: 1 equals: checkoutResponse payload .
! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:22:34' prior: 51014606!
test12CheckOutIsSuccessfullyWithNotEmptyCartAndNotExpiredCreditCard
	| cartId creditCard checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
	
	creditCard _ CreditCard expiringOn: testObjectFactory nextYear .
	
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: checkoutResponse.
	
	self assert: 1 equals: checkoutResponse payload .
! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:23:04' prior: 51014625!
test12CheckOutIsSuccessfullyWithNotEmptyCartAndNotExpiredCreditCard
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: self validCartId.
		
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: checkoutResponse.
	
	self assert: 1 equals: checkoutResponse payload .
! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:23:12' prior: 51014645!
test12CheckOutIsSuccessfullyWithNotEmptyCartAndNotExpiredCreditCard
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
		
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: checkoutResponse.
	
	self assert: 1 equals: checkoutResponse payload .
! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:24:31'!
test13CheckOutIsUnsuccessfullyWithEmptyCart

	| internalApi responseCreate responseCheckOut idCart creditCard date |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier cartCanNotBeEmptyErrorMessage.
	
	self assert: responseCheckOut code = 1.! !

!methodRemoval: InternalAPITest #test14CheckOutUnsuccessfulWithEmptyCart stamp: 'eb 12/3/2020 14:01:12'!
test14CheckOutUnsuccessfulWithEmptyCart

	| internalApi responseCreate responseCheckOut idCart creditCard date |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier cartCanNotBeEmptyErrorMessage.
	
	self assert: responseCheckOut code = 1.!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:24:48'!
test14CheckOutIsUnsuccessfullyWithInvalidCart

	| internalApi responseCheckOut creditCard date |
	
	internalApi _ testObjectFactory internalApi.
 	
	internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: self invalidIdCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: InternalAPI cartNotRegisteredErrorDescription .
	
	self assert: responseCheckOut code = 1.! !

!methodRemoval: InternalAPITest #test15CheckOutUnsuccessfulWithInvalidCart stamp: 'eb 12/3/2020 14:01:12'!
test15CheckOutUnsuccessfulWithInvalidCart

	| internalApi responseCheckOut creditCard date |
	
	internalApi _ testObjectFactory internalApi.
 	
	internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: self invalidIdCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: InternalAPI cartNotRegisteredErrorDescription .
	
	self assert: responseCheckOut code = 1.!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:25:01'!
test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCard
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
		
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: checkoutResponse.
	
	self assert: 1 equals: checkoutResponse payload .
! !

!methodRemoval: InternalAPITest #test12CheckOutIsSuccessfullyWithNotEmptyCartAndNotExpiredCreditCard stamp: 'eb 12/3/2020 14:01:12'!
test12CheckOutIsSuccessfullyWithNotEmptyCartAndNotExpiredCreditCard
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
		
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: checkoutResponse.
	
	self assert: 1 equals: checkoutResponse payload .
!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:25:52'!
test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
		
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: checkoutResponse.
	
	self assert: 1 equals: checkoutResponse payload .
! !

!methodRemoval: InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCard stamp: 'eb 12/3/2020 14:01:12'!
test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCard
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
		
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: checkoutResponse.
	
	self assert: 1 equals: checkoutResponse payload .
!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:26:17'!
test15CheckOutIsUnsuccessfullyWithExpiredCreditCard

	| internalApi responseCreate responseCheckOut idCart creditCard ISBN |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	creditCard _ testObjectFactory expiredCreditCard.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi add: idCart toCart: ISBN withQuantity: 3 on: testObjectFactory today . 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCard: creditCard ofOwner: 'Alan Kay' on: testObjectFactory today.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !

!methodRemoval: InternalAPITest #test16CheckOutUnsuccessfulWithExpiredCreditCard stamp: 'eb 12/3/2020 14:01:12'!
test16CheckOutUnsuccessfulWithExpiredCreditCard

	| internalApi responseCreate responseCheckOut idCart creditCard ISBN |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	creditCard _ testObjectFactory expiredCreditCard.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi add: idCart toCart: ISBN withQuantity: 3 on: testObjectFactory today . 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCard: creditCard ofOwner: 'Alan Kay' on: testObjectFactory today.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:26:31'!
test16CheckOutUnsuccessfullyWithInvalidUser

	| internalApi responseCreate responseCheckOut idCart creditCard ISBN |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	creditCard _ testObjectFactory expiredCreditCard.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi add: idCart toCart: ISBN withQuantity: 3 on: testObjectFactory today . 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCard: creditCard ofOwner: 'Edsger Dijkstra' on: testObjectFactory today.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !

!methodRemoval: InternalAPITest #test17CheckOutUnsuccessfulWithInvalidUser stamp: 'eb 12/3/2020 14:01:12'!
test17CheckOutUnsuccessfulWithInvalidUser

	| internalApi responseCreate responseCheckOut idCart creditCard ISBN |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	creditCard _ testObjectFactory expiredCreditCard.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi add: idCart toCart: ISBN withQuantity: 3 on: testObjectFactory today . 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCard: creditCard ofOwner: 'Edsger Dijkstra' on: testObjectFactory today.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:31:31' prior: 51014680!
test13CheckOutIsUnsuccessfullyWithEmptyCart

	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
			
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: Cashier cartCanNotBeEmptyErrorMessage equals: checkoutResponse payload .! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:32:25' prior: 51014725!
test14CheckOutIsUnsuccessfullyWithInvalidCart

	| cartId checkoutResponse |
 		
	cartId _ self invalidCartId .
			
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: Cashier cartCanNotBeEmptyErrorMessage equals: checkoutResponse payload .! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:32:46' prior: 51014967!
test14CheckOutIsUnsuccessfullyWithInvalidCart

	| cartId checkoutResponse |
 		
	cartId _ self invalidCartId .
			
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI cartNotRegisteredErrorDescription equals: checkoutResponse payload .! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:33:20' prior: 51014840!
test15CheckOutIsUnsuccessfullyWithExpiredCreditCard
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
			
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory expiredCreditCard
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: Cashier canNotChargeAnExpiredCreditCardErrorMessage  equals: checkoutResponse payload .! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:33:34' prior: 51015001!
test15CheckOutIsUnsuccessfullyWithExpiredCreditCard
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId .
			
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory expiredCreditCard
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: Cashier canNotChargeAnExpiredCreditCardErrorMessage  equals: checkoutResponse payload .! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:34:46' prior: 51014895!
test16CheckOutUnsuccessfullyWithInvalidUser

	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
			
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Steve Jobs'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: Cashier cartCanNotBeEmptyErrorMessage equals: checkoutResponse payload .! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:41:26' prior: 51014498!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[ ^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
		
	[ self hasCartsOf: anUser ] ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
	[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
		on: Error 
		do: [:error| ^ UnsuccessfulResponse with: error messageText].
		
	checkoutId _ self nextCheckOutId.
	
	self addPurchase: checkoutId to: anUser of: cart items withCost: cashier checkOut.
		
	^ SuccessfulResponse with: checkoutId.
	! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:42:43' prior: 51015055!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[ ^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
		
	(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
	[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
		on: Error 
		do: [:error| ^ UnsuccessfulResponse with: error messageText].
		
	checkoutId _ self nextCheckOutId.
	
	self addPurchase: checkoutId to: anUser of: cart items withCost: cashier checkOut.
		
	^ SuccessfulResponse with: checkoutId.
	! !
!InternalAPI class methodsFor: '*Aconcagua-Extensions' stamp: 'eb 12/2/2020 22:43:15'!
userHasNotCartsErrorDescription
	self shouldBeImplemented.! !
!InternalAPI class methodsFor: '*Aconcagua-Extensions' stamp: 'eb 12/2/2020 22:43:30' prior: 51015108!
userHasNotCartsErrorDescription
	
	^ 'User has not carts'.! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:44:00' prior: 51015037!
test16CheckOutUnsuccessfullyWithInvalidUser

	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
			
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Steve Jobs'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI userNotRegisteredErrorDescription equals: checkoutResponse payload .! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:44:11' prior: 51015119!
test16CheckOutUnsuccessfullyWithInvalidUser

	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
			
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Steve Jobs'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI userHasNotCartsErrorDescription equals: checkoutResponse payload .! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:45:14'!
test16CheckOutIsUnsuccessfullyWithInvalidUser

	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
			
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Steve Jobs'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI userHasNotCartsErrorDescription equals: checkoutResponse payload .! !

!methodRemoval: InternalAPITest #test16CheckOutUnsuccessfullyWithInvalidUser stamp: 'eb 12/3/2020 14:01:12'!
test16CheckOutUnsuccessfullyWithInvalidUser

	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
			
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Steve Jobs'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI userHasNotCartsErrorDescription equals: checkoutResponse payload .!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:46:25'!
test17CheckOutIsUnsuccessfullyWithAlienCart

	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
			
	checkoutResponse _ internalApi1 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Steve Jobs'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI userHasNotCartsErrorDescription equals: checkoutResponse payload .! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:47:21' prior: 51015192!
test17CheckOutIsUnsuccessfullyWithAlienCart

	| alanKayCartId checkoutResponse |
 		
	alanKayCartId _ self validCartId .
	
	self successfullyAddResponseFor: alanKayCartId.
			
	checkoutResponse _ internalApi1 
		checkOutCart: alanKayCartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Steve Jobs'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI userHasNotCartsErrorDescription equals: checkoutResponse payload .! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:47:54' prior: 51015210!
test17CheckOutIsUnsuccessfullyWithAlienCart

	| alanKayCartId  steveJobsCartId checkoutResponse |
 		
	alanKayCartId _ self validCartId .
	
	steveJobsCartId  _ internalApi1 createCartFor: 'Steve Jobs' with: 3.
	
	self successfullyAddResponseFor: alanKayCartId.
			
	checkoutResponse _ internalApi1 
		checkOutCart: alanKayCartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Steve Jobs'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI userHasNotCartsErrorDescription equals: checkoutResponse payload .! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:49:23' prior: 51015229!
test17CheckOutIsUnsuccessfullyWithAlienCart

	| alanKayCartId  danIngallsCartId checkoutResponse |
 		
	alanKayCartId _ self validCartId .
	
	danIngallsCartId  _ internalApi1 createCartFor: 'Dan Ingalls' with: 'smalltalk'.
	
	self successfullyAddResponseFor: alanKayCartId.
			
	self successfullyAddResponseFor: danIngallsCartId.

	checkoutResponse _ internalApi1 
		checkOutCart: alanKayCartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Dan Ingalls'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI userHasNotCartsErrorDescription equals: checkoutResponse payload .! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:51:30' prior: 51015082!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[ ^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
		
	(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
	
	(cartsPerUser at: anUser = aCartId) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
	[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
		on: Error 
		do: [:error| ^ UnsuccessfulResponse with: error messageText].
		
	checkoutId _ self nextCheckOutId.
	
	self addPurchase: checkoutId to: anUser of: cart items withCost: cashier checkOut.
		
	^ SuccessfulResponse with: checkoutId.
	! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:53:00' prior: 51015275!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[ ^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
		
	(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
	
	((cartsPerUser at: anUser) = aCartId) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
	[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
		on: Error 
		do: [:error| ^ UnsuccessfulResponse with: error messageText].
		
	checkoutId _ self nextCheckOutId.
	
	self addPurchase: checkoutId to: anUser of: cart items withCost: cashier checkOut.
		
	^ SuccessfulResponse with: checkoutId.
	! !
!InternalAPI class methodsFor: 'error descriptions' stamp: 'eb 12/2/2020 22:53:16'!
cartDoesNotBelongToUserErrorDescription
	self shouldBeImplemented.! !
!InternalAPI class methodsFor: 'error descriptions' stamp: 'eb 12/2/2020 22:53:25' prior: 51015337!
cartDoesNotBelongToUserErrorDescription
	
	^ 'Cart does not belong to user'.! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 22:53:44' prior: 51015251!
test17CheckOutIsUnsuccessfullyWithAlienCart

	| alanKayCartId  danIngallsCartId checkoutResponse |
 		
	alanKayCartId _ self validCartId .
	
	danIngallsCartId  _ internalApi1 createCartFor: 'Dan Ingalls' with: 'smalltalk'.
	
	self successfullyAddResponseFor: alanKayCartId.
			
	self successfullyAddResponseFor: danIngallsCartId.

	checkoutResponse _ internalApi1 
		checkOutCart: alanKayCartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Dan Ingalls'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI cartDoesNotBelongToUserErrorDescription equals: checkoutResponse payload .! !

!methodRemoval: InternalAPI class #with: stamp: 'eb 12/3/2020 14:01:13'!
with: aUsersCollection
	
	^self new initializeWith: aUsersCollection.!

!methodRemoval: InternalAPI class #with:on: stamp: 'eb 12/3/2020 14:01:13'!
with: aUsersCollection on: aDate
	
	^self new initializeWith: aUsersCollection on: aDate.!

!methodRemoval: InternalAPI class #with:on:usingCatalog: stamp: 'eb 12/3/2020 14:01:13'!
with: aUsersCollection on: aDate usingCatalog: aCatalog
	
	^self new initializeWith: aUsersCollection on: aDate usingCatalog: aCatalog .!
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 23:00:45' prior: 51015306!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	self halt .
	
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[ ^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
		
	(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
	
	((cartsPerUser at: anUser) = aCartId) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
	[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
		on: Error 
		do: [:error| ^ UnsuccessfulResponse with: error messageText].
		
	checkoutId _ self nextCheckOutId.
	
	self addPurchase: checkoutId to: anUser of: cart items withCost: cashier checkOut.
		
	^ SuccessfulResponse with: checkoutId.
	! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 23:01:36' prior: 51015390!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	self halt .
	
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[ :error | ^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
		
	(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
	
	((cartsPerUser at: anUser) = aCartId) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
	[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
		on: Error 
		do: [:error| ^ UnsuccessfulResponse with: error messageText].
		
	checkoutId _ self nextCheckOutId.
	
	self addPurchase: checkoutId to: anUser of: cart items withCost: cashier checkOut.
		
	^ SuccessfulResponse with: checkoutId.
	! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 23:01:43' prior: 51015421!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[ :error | ^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
		
	(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
	
	((cartsPerUser at: anUser) = aCartId) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
	[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
		on: Error 
		do: [:error| ^ UnsuccessfulResponse with: error messageText].
		
	checkoutId _ self nextCheckOutId.
	
	self addPurchase: checkoutId to: anUser of: cart items withCost: cashier checkOut.
		
	^ SuccessfulResponse with: checkoutId.
	! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 23:03:15' prior: 51015452!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[ :error | ^ UnsuccessfulResponse with: error messageText ].
		
	(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
	
	((cartsPerUser at: anUser) = aCartId) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
	[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
		on: Error 
		do: [:error| ^ UnsuccessfulResponse with: error messageText].
		
	checkoutId _ self nextCheckOutId.
	
	self addPurchase: checkoutId to: anUser of: cart items withCost: cashier checkOut.
		
	^ SuccessfulResponse with: checkoutId.
	! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 23:04:17' prior: 51015483!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
		
	(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
	
	((cartsPerUser at: anUser) = aCartId) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
	[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
		on: Error 
		do: [:error| ^ UnsuccessfulResponse with: error messageText].
		
	checkoutId _ self nextCheckOutId.
	
	self addPurchase: checkoutId to: anUser of: cart items withCost: cashier checkOut.
		
	^ SuccessfulResponse with: checkoutId.
	! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 23:06:42' prior: 51015513!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
		
	(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
	
	((cartsPerUser at: anUser) = cart) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
	[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
		on: Error 
		do: [:error| ^ UnsuccessfulResponse with: error messageText].
		
	checkoutId _ self nextCheckOutId.
	
	self addPurchase: checkoutId to: anUser of: cart items withCost: cashier checkOut.
		
	^ SuccessfulResponse with: checkoutId.
	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:11:09'!
test18ListPurchasesWithEmptyCart

    | internalApi responseListPurchases |

    internalApi  testObjectFactory internalApiUsingMerchantProccessor: self.

    internalApi createCartFor: 'Alan Kay' with: 'objetos'.

    responseListPurchases  internalApi listPurchases: 'Alan Kay' with: 'objetos'. 

    self assert: responseListPurchases payload equals: Bag new.

    self assert: responseListPurchases code = 1.! !
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 23:13:41' prior: 51013926!
test10ListCartWithNotEmptyCart
	| cartId listCartResponse targetElements |
	cartId _ self validCartId .	
	
	self successfullyAddResponseFor: cartId.
		
	targetElements _ Bag new.
	
	targetElements  add: testObjectFactory itemSellByTheStore withOccurrences: 3. 
	
	listCartResponse _ internalApi1 listCart: cartId.
	
	self assertSuccessfullyResponse: listCartResponse .
	self assert: targetElements equals: listCartResponse payload .
	
	self halt .

	! !

!classDefinition: #DetailedSale category: #TusLibros stamp: 'eb 12/3/2020 14:01:13'!
Sale subclass: #DetailedSale
	instanceVariableNames: 'detail'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #DetailedSale category: #TusLibros stamp: 'eb 12/3/2020 14:01:13'!
Sale subclass: #DetailedSale
	instanceVariableNames: 'detail'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!DetailedSale methodsFor: 'nil' stamp: 'eb 12/2/2020 23:23:19'!
detail

	^ detail copy.! !
!DetailedSale class methodsFor: 'no messages' stamp: 'eb 12/2/2020 23:25:29'!
of: aTotal with: anItemCollection

	^ self new initializeOf: aTotal with: anItemCollection .! !
!DetailedSale methodsFor: 'nil' stamp: 'eb 12/2/2020 23:26:27'!
initializeOf: aTotal with: anItemCollection
	
	total _ aTotal .
	
	detail _ anItemCollection .! !
!DetailedSale methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:26:33' prior: 51015629!
initializeOf: aTotal with: anItemCollection
	
	total _ aTotal .
	detail _ anItemCollection .
	
	^ self .! !

!classRemoval: #InvalidISBN stamp: 'eb 12/3/2020 14:01:13'!
Error subclass: #InvalidISBN
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/2/2020 23:28:22' prior: 51015590!
test10ListCartWithNotEmptyCart
	| cartId listCartResponse targetElements |
	cartId _ self validCartId .	
	
	self successfullyAddResponseFor: cartId.
		
	targetElements _ Bag new.
	
	targetElements  add: testObjectFactory itemSellByTheStore withOccurrences: 3. 
	
	listCartResponse _ internalApi1 listCart: cartId.
	
	self assertSuccessfullyResponse: listCartResponse .
	self assert: targetElements equals: listCartResponse payload .
	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:30:23' prior: 51015574!
test18ListPurchasesWithEmptyCart

    ! !

!classDefinition: #InternalAPITest category: #TusLibros stamp: 'eb 12/3/2020 14:01:13'!
TestCase subclass: #InternalAPITest
	instanceVariableNames: 'debitBehavior testObjectFactory internalApi'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51013943!
test09ListCartWithEmptyCart
	| cartId listCartResponse |
	cartId _ self validCartId .	
	
	listCartResponse _ internalApi listCart: cartId.
	
	self assertSuccessfullyResponse: listCartResponse.
	self assert: listCartResponse payload isEmpty.

	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51014950!
test13CheckOutIsUnsuccessfullyWithEmptyCart

	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
			
	checkoutResponse _ internalApi 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: Cashier cartCanNotBeEmptyErrorMessage equals: checkoutResponse payload .! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51014803!
test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
		
	checkoutResponse _ internalApi 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: checkoutResponse.
	
	self assert: 1 equals: checkoutResponse payload .
! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51012929 overrides: 16927572!
setUp 
	debitBehavior _ [ :anAmount :aCreditCard | ].
	testObjectFactory _ StoreTestObjectsFactory new.
	
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51015648!
test10ListCartWithNotEmptyCart
	| cartId listCartResponse targetElements |
	cartId _ self validCartId .	
	
	self successfullyAddResponseFor: cartId.
		
	targetElements _ Bag new.
	
	targetElements  add: testObjectFactory itemSellByTheStore withOccurrences: 3. 
	
	listCartResponse _ internalApi listCart: cartId.
	
	self assertSuccessfullyResponse: listCartResponse .
	self assert: targetElements equals: listCartResponse payload .
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51013239!
successfullyAddResponseFor: aCartId

	^ internalApi 
		add: testObjectFactory itemSellByTheStore
		toCart: aCartId 
		withQuantity: 3 
		on: testObjectFactory today! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51013612!
test08AddToCartIsUnsuccessfullyWithIvalidISBN
	| cartId addResponse |		
	cartId _ self validCartId .
	addResponse _ internalApi
		add: self invalidCartId 
		toCart: cartId
		withQuantity: 3
		on: testObjectFactory today.
	
	self assertUnsuccesfullyResponse: addResponse .
	
	self assert: addResponse payload = Cart invalidItemErrorMessage.
	
	
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51013230!
assertSuccessfullyAddResponseAddsItemsCorrectlyFor: aCartId

	self assert: (internalApi 
		cart: aCartId
		has: testObjectFactory itemSellByTheStore 
		withQuantity: 3).! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51015018!
test15CheckOutIsUnsuccessfullyWithExpiredCreditCard
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId .
			
	checkoutResponse _ internalApi 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory expiredCreditCard
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: Cashier canNotChargeAnExpiredCreditCardErrorMessage  equals: checkoutResponse payload .! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51013978!
test11ListCartWithInvalidCart
	| cartId listCartResponse |
	cartId _ self invalidCartId .	
	
	listCartResponse _ internalApi listCart: cartId.
	self assertUnsuccesfullyResponse: listCartResponse.

	self assert: internalApi class cartNotRegisteredErrorDescription equals: listCartResponse payload .
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51015156!
test16CheckOutIsUnsuccessfullyWithInvalidUser

	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
			
	checkoutResponse _ internalApi 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Steve Jobs'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI userHasNotCartsErrorDescription equals: checkoutResponse payload .! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51013085!
validCartId

	^ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51015349!
test17CheckOutIsUnsuccessfullyWithAlienCart

	| alanKayCartId  danIngallsCartId checkoutResponse |
 		
	alanKayCartId _ self validCartId .
	
	danIngallsCartId  _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
	
	self successfullyAddResponseFor: alanKayCartId.
			
	self successfullyAddResponseFor: danIngallsCartId.

	checkoutResponse _ internalApi 
		checkOutCart: alanKayCartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Dan Ingalls'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI cartDoesNotBelongToUserErrorDescription equals: checkoutResponse payload .! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51013040!
test04CreateCartSuccessfullyEffectivlyCreatesCart
	| response |
	response _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	self assertSuccessfullyResponse: response.
	self assert: (internalApi hasCartsOf: 'Alan Kay').
	
		
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51013597!
test07AddToCartIsUnsuccessfullyWithInvalidCartId

	| addResponse |	
	addResponse _ internalApi 
		add: testObjectFactory itemSellByTheStore 
		toCart: self invalidCartId
		withQuantity: 3 
		on: testObjectFactory today.
	self assertUnsuccesfullyResponse: addResponse .
	self assert: addResponse payload equals: InternalAPI cartNotRegisteredErrorDescription.
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51012971!
test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword
	self assertSuccessfullyResponse: (internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk').! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51013013!
test02CreateCartReturnsDifferentIdsPerCustomer
	| firstCustomerCartId secondCustomerCartId |
	firstCustomerCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos') payload .
	secondCustomerCartId _ (internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk') payload.	
	self deny: firstCustomerCartId = secondCustomerCartId
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51014984!
test14CheckOutIsUnsuccessfullyWithInvalidCart

	| cartId checkoutResponse |
 		
	cartId _ self invalidCartId .
			
	checkoutResponse _ internalApi 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI cartNotRegisteredErrorDescription equals: checkoutResponse payload .! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/2/2020 23:30:31' prior: 51013027!
test03CreateCartIsUnsuccessfullyWithUnregisteredClientId
	| response |
	response _ internalApi createCartFor: 'Edsger Dijkstra' with: 'nanoDijkstra'.
	self assertUnsuccesfullyResponse: response.
	self assert: response payload equals: InternalAPI userNotRegisteredErrorDescription. 
		
	
		
	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:33:51' prior: 51015665!
test18ListPurchasesWithEmptyCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: DetailedSale empty equals: listPurchasesResponse payload .
	! !
!InternalAPI methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:34:20'!
listPurchasesOf: aString with: aString2 
	self shouldBeImplemented.! !
!InternalAPI methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:34:50' prior: 51015957!
listPurchasesOf: anUser with: aPassword
 
	^ SuccessfulResponse with: DetailedSale empty.! !
!DetailedSale class methodsFor: 'instance creation' stamp: 'eb 12/2/2020 23:34:59'!
empty
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeEmpty! !
!DetailedSale class methodsFor: 'instance creation' stamp: 'eb 12/2/2020 23:35:22' prior: 51015969!
empty
	
	^self new initializeEmpty.! !
!DetailedSale class methodsFor: 'instance creation' stamp: 'eb 12/2/2020 23:35:24' prior: 51015977!
empty

	^self new initializeEmpty.! !
!DetailedSale methodsFor: 'initialization' stamp: 'eb 12/2/2020 23:35:42'!
initializeEmpty
	self shouldBeImplemented.! !
!DetailedSale methodsFor: 'initialization' stamp: 'eb 12/2/2020 23:36:20' prior: 51015986!
initializeEmpty
	
	^ self initializeOf: 0 with: Bag new .! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:36:47' prior: 51015945!
test18ListPurchasesWithEmptyCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	! !
!InternalAPI methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:37:07' prior: 51015963!
listPurchasesOf: anUser with: aPassword
 
	^ SuccessfulResponse with: (DetailedSale of: 0 with: Bag new).! !

!methodRemoval: DetailedSale #initializeEmpty stamp: 'eb 12/3/2020 14:01:14'!
initializeEmpty
	
	^ self initializeOf: 0 with: Bag new .!

!methodRemoval: DetailedSale class #empty stamp: 'eb 12/3/2020 14:01:14'!
empty

	^self new initializeEmpty.!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:40:18' prior: 51015996!
test18ListPurchasesWithEmptyCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	! !
!DetailedSale methodsFor: 'nil' stamp: 'eb 12/2/2020 23:41:33' overrides: 16881029!
= aDetailedSale

	^ total = aDetailedSale total and: (detail = aDetailedSale detail).
	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:42:55'!
test18SuccesfullyListPurchasesOfEmptyCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	! !

!methodRemoval: InternalAPITest #test18ListPurchasesWithEmptyCart stamp: 'eb 12/3/2020 14:01:14'!
test18ListPurchasesWithEmptyCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:44:44'!
test19SuccesfullyListPurchasesOfCartWithOnlyOneItem

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:46:06' prior: 51016069!
test19SuccesfullyListPurchasesOfCartWithOnlyOneItem

	| cartId listPurchasesResponse |
	
	cartId _ self validCartId .
	
	internalApi
		add: testObjectFactory itemSellByTheStore 
		toCart: cartId.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:49:35' prior: 51016083!
test19SuccesfullyListPurchasesOfCartWithOnlyOneItem

	| cartId listPurchasesResponse |
	
	cartId _ self validCartId .
	
	internalApi
		add: testObjectFactory itemSellByTheStore 
		toCart: cartId
		withQuantity: 1
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self 
		assert: (DetailedSale of: testObjectFactory itemSellByTheStorePrice with: (Bag with: testObjectFactory itemNotSellByTheStore)) 
		equals: listPurchasesResponse payload .
	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:49:39' prior: 51016100!
test19SuccesfullyListPurchasesOfCartWithOnlyOneItem

	| cartId listPurchasesResponse |
	
	cartId _ self validCartId .
	
	internalApi
		add: testObjectFactory itemSellByTheStore 
		toCart: cartId
		withQuantity: 1
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self 
		assert: (DetailedSale of: testObjectFactory itemSellByTheStorePrice with: (Bag with: testObjectFactory itemNotSellByTheStore)) 
		equals: listPurchasesResponse payload .
	! !

!classDefinition: #InternalAPI category: #TusLibros stamp: 'eb 12/3/2020 14:01:14'!
Object subclass: #InternalAPI
	instanceVariableNames: 'users nextCartId carts date modifications cartsPerUser catalog merchantProcesor nextCheckOutId purchases detailedSalePerUser'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPI methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:52:38' prior: 51016009!
listPurchasesOf: anUser with: aPassword
 
	^ SuccessfulResponse with: (detailedSalePerUser at: anUser).! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 23:54:12' prior: 51015544!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
		
	(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
	
	((cartsPerUser at: anUser) = cart) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
	[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
		on: Error 
		do: [:error| ^ UnsuccessfulResponse with: error messageText].
		
	checkoutId _ self nextCheckOutId.
	
	self addDetailedSaleTo: anUser of: cart items withCost: cashier checkOut.
		
	^ SuccessfulResponse with: checkoutId.
	! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/2/2020 23:57:05'!
addDetailedSaleTo: anUser of: anItemsCollection withCost: aCost

	detailedSalePerUser at: anUser put: (DetailedSale of: aCost with: anItemsCollection)
	
	! !
!InternalAPI methodsFor: 'initialization' stamp: 'eb 12/2/2020 23:57:42' prior: 51014359!
initializeWith: aUsersCollection on: aDate usingCatalog: aCatalog usingMerchantProccesor: aMerchantProccesor
	users _ aUsersCollection.
	date _ aDate.
	catalog _ aCatalog.
	merchantProcesor _ aMerchantProccesor.
	carts _ Dictionary new.
	cartsPerUser _ Dictionary new.
	modifications _ Dictionary new.
	detailedSalePerUser _ Dictionary new .
	nextCartId _ 0.
	nextCheckOutId _ 0.! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/2/2020 23:58:14' prior: 51016126!
test19SuccesfullyListPurchasesOfCartWithOnlyOneItem

	| cartId listPurchasesResponse |
	
	cartId _ self validCartId .
	
	internalApi
		add: testObjectFactory itemSellByTheStore 
		toCart: cartId
		withQuantity: 1
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self 
		assert: (DetailedSale of: testObjectFactory itemSellByTheStorePrice with: (Bag with: testObjectFactory itemSellByTheStore)) 
		equals: listPurchasesResponse payload .
	! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 00:00:02' prior: 51016169!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
		
	(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
	
	((cartsPerUser at: anUser) = cart) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
	[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
		on: Error 
		do: [:error| ^ UnsuccessfulResponse with: error messageText].
		
	checkoutId _ self nextCheckOutId.
	
	self addDetailedSaleTo: anUser of: cart items asBag withCost: cashier checkOut.
		
	^ SuccessfulResponse with: checkoutId.
	! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 00:00:48' prior: 51016248!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	| cart cashier checkoutId |
	
	[ cart _ carts at: aCartId ] 
		on: Error 
		do:[^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
		
	(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
	
	((cartsPerUser at: anUser) = cart) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
	[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
		on: Error 
		do: [:error| ^ UnsuccessfulResponse with: error messageText].
		
	checkoutId _ self nextCheckOutId.
	
	self addDetailedSaleTo: anUser of: cart items withCost: cashier checkOut.
		
	^ SuccessfulResponse with: checkoutId.
	! !

!methodRemoval: InternalAPI #addPurchase:to:of:withCost: stamp: 'eb 12/3/2020 14:01:14'!
addPurchase: aSmallInteger to: aString of: anOrderedCollection withCost: aSmallInteger4 
	
	!
!InternalAPI methodsFor: 'nil' stamp: 'eb 12/3/2020 00:03:36'!
priceOf: anItem
	
	^ catalog at: anItem .! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 00:05:17' prior: 51016199!
addDetailedSaleTo: anUser of: anItemsCollection withCost: aCost
	
	| item itemsWithPrice |
	
	item _ anItemsCollection first .
	
	itemsWithPrice _ Dictionary new .
	
	itemsWithPrice at: item put: (self priceOf: item).
	
	detailedSalePerUser at: anUser put: (DetailedSale of: aCost with: itemsWithPrice)
	
	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:07:35' prior: 51016222!
test19SuccesfullyListPurchasesOfCartWithOnlyOneItem

	| cartId listPurchasesResponse expectedResponsePayload |
	
	cartId _ self validCartId .
	
	internalApi
		add: testObjectFactory itemSellByTheStore 
		toCart: cartId
		withQuantity: 1
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedResponsePayload _ DetailedSale 
		of: testObjectFactory itemSellByTheStorePrice 
		with: (Dictionary new add: testObjectFactory itemSellByTheStore -> testObjectFactory itemSellByTheStorePrice).
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse payload .
	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:10:54' prior: 51016332!
test19SuccesfullyListPurchasesOfCartWithOnlyOneItem

	| cartId listPurchasesResponse expectedDetail expectedResponsePayload |
	
	cartId _ self validCartId .
	
	internalApi
		add: testObjectFactory itemSellByTheStore 
		toCart: cartId
		withQuantity: 1
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> testObjectFactory itemSellByTheStorePrice.
	
	expectedResponsePayload _ DetailedSale of: testObjectFactory itemSellByTheStorePrice  with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse payload .
	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:13:14'!
test20SuccesfullyListPurchasesOfCartWithManyItems

	| cartId listPurchasesResponse expectedDetail expectedResponsePayload |
	
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> testObjectFactory itemSellByTheStorePrice * 3.
	
	expectedResponsePayload _ DetailedSale of: testObjectFactory itemSellByTheStorePrice with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse payload .
	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:13:36' prior: 51016394!
test20SuccesfullyListPurchasesOfCartWithManyItems

	| cartId listPurchasesResponse expectedDetail expectedResponsePayload |
	
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedResponsePayload _ DetailedSale of: (testObjectFactory itemSellByTheStorePrice * 3)with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse payload .
	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:13:38' prior: 51016424!
test20SuccesfullyListPurchasesOfCartWithManyItems

	| cartId listPurchasesResponse expectedDetail expectedResponsePayload |
	
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedResponsePayload _ DetailedSale of: (testObjectFactory itemSellByTheStorePrice * 3) with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse payload .
	! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 00:15:00' prior: 51016319!
addDetailedSaleTo: anUser of: anItemsCollection withCost: aCost
	
	| item itemsWithPrice |
	
	item _ anItemsCollection first .
	
	itemsWithPrice _ Dictionary new .
	
	itemsWithPrice at: item put: (self priceOf: item * (anItemsCollection occurrencesOf: item)).
	
	detailedSalePerUser at: anUser put: (DetailedSale of: aCost with: itemsWithPrice)
	
	! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 00:15:31' prior: 51016484!
addDetailedSaleTo: anUser of: anItemsCollection withCost: aCost
	
	| item itemsWithPrice |
	
	item _ anItemsCollection first .
	
	itemsWithPrice _ Dictionary new .
	
	itemsWithPrice at: item put: ((self priceOf: item) * (anItemsCollection occurrencesOf: item)).
	
	detailedSalePerUser at: anUser put: (DetailedSale of: aCost with: itemsWithPrice)
	
	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:15:50'!
test20SuccesfullyListPurchasesOfCartWithManyItemsOfSameType

	| cartId listPurchasesResponse expectedDetail expectedResponsePayload |
	
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedResponsePayload _ DetailedSale of: (testObjectFactory itemSellByTheStorePrice * 3) with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse payload .
	! !

!methodRemoval: InternalAPITest #test20SuccesfullyListPurchasesOfCartWithManyItems stamp: 'eb 12/3/2020 14:01:14'!
test20SuccesfullyListPurchasesOfCartWithManyItems

	| cartId listPurchasesResponse expectedDetail expectedResponsePayload |
	
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedResponsePayload _ DetailedSale of: (testObjectFactory itemSellByTheStorePrice * 3) with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse payload .
	!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:16:03'!
test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes

	| cartId listPurchasesResponse expectedDetail expectedResponsePayload |
	
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedResponsePayload _ DetailedSale of: (testObjectFactory itemSellByTheStorePrice * 3) with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse payload .
	! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'eb 12/3/2020 00:17:12'!
anotherItemSellByTheStore
	
	^ 'anotherValidBook'! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'eb 12/3/2020 00:17:23'!
anotherItemSellByTheStorePrice
	
	^20! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:18:50' prior: 51016572!
test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes

	| cartId listPurchasesResponse expectedDetail expectedResponsePayload |
	
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
	
	internalApi 
		add: testObjectFactory anotherItemSellByTheStore 
		toCart:  cartId 
		withQuantity: 3
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedResponsePayload _ DetailedSale of: (testObjectFactory itemSellByTheStorePrice * 3) with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse payload .
	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:19:50' prior: 51016612!
test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes

	| cartId listPurchasesResponse expectedDetail expectedResponsePayload |
	
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
	
	internalApi 
		add: testObjectFactory anotherItemSellByTheStore 
		toCart:  cartId 
		withQuantity: 4
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedDetail add: testObjectFactory anotherItemSellByTheStore -> (testObjectFactory anotherItemSellByTheStorePrice * 4).
	
	expectedResponsePayload _ DetailedSale of: (testObjectFactory itemSellByTheStorePrice * 3) with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse payload .
	! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 00:20:54' prior: 51016498!
addDetailedSaleTo: anUser of: anItemsCollection withCost: aCost
	
	| itemsWithPrice |
	
	itemsWithPrice _ Dictionary new .
	
	anItemsCollection do: [ :item | itemsWithPrice at: item put: ((self priceOf: item) * (anItemsCollection occurrencesOf: item)) ].
	
	detailedSalePerUser at: anUser put: (DetailedSale of: aCost with: itemsWithPrice)
	
	! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 00:21:16' prior: 51016684!
addDetailedSaleTo: anUser of: anItemsCollection withCost: aCost
	
	| itemsWithPrice |
	
	itemsWithPrice _ Dictionary new .
	
	anItemsCollection do: [ :item | 
		itemsWithPrice at: item put: ((self priceOf: item) * (anItemsCollection occurrencesOf: item)) 
	].
	
	detailedSalePerUser at: anUser put: (DetailedSale of: aCost with: itemsWithPrice)
	
	! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 00:23:09' prior: 51016698!
addDetailedSaleTo: anUser of: anItemsCollection withCost: aCost
	
	| itemsWithPrice |
	
	self halt .
	
	itemsWithPrice _ Dictionary new .
	
	anItemsCollection do: [ :item | 
		itemsWithPrice at: item put: ((self priceOf: item) * (anItemsCollection occurrencesOf: item)) 
	].
	
	detailedSalePerUser at: anUser put: (DetailedSale of: aCost with: itemsWithPrice)
	
	! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'eb 12/3/2020 00:26:15' prior: 51011767!
defaultCatalog
	
	^ Dictionary new
		at: self itemSellByTheStore put: self itemSellByTheStorePrice;
		
		at: self anotherItemSellByTheStore put: self anotherItemSellByTheStorePrice;
		yourself ! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:27:30' prior: 51016646!
test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes

	| cartId listPurchasesResponse expectedDetail expectedResponsePayload |
	
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
	
	internalApi 
		add: testObjectFactory anotherItemSellByTheStore 
		toCart:  cartId 
		withQuantity: 4
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedDetail add: testObjectFactory anotherItemSellByTheStore -> (testObjectFactory anotherItemSellByTheStorePrice * 4).
	
	expectedResponsePayload _ DetailedSale 
		of: (testObjectFactory itemSellByTheStorePrice * 3) + (testObjectFactory anotherItemSellByTheStorePrice * 4) 
		with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse payload .
	! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 00:27:47' prior: 51016712!
addDetailedSaleTo: anUser of: anItemsCollection withCost: aCost
	
	| itemsWithPrice |
		
	itemsWithPrice _ Dictionary new .
	
	anItemsCollection do: [ :item | 
		itemsWithPrice at: item put: ((self priceOf: item) * (anItemsCollection occurrencesOf: item)) 
	].
	
	detailedSalePerUser at: anUser put: (DetailedSale of: aCost with: itemsWithPrice)
	
	! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 00:29:13' prior: 51016777!
addDetailedSaleTo: anUser of: anItemsCollection withCost: aCost
	
	| itemsWithPrice |
		
	itemsWithPrice _ Dictionary new .
	
	anItemsCollection do: [ :item | (itemsWithPrice includesKey: item) ifFalse:
		 [ itemsWithPrice at: item put: ((self priceOf: item) * (anItemsCollection occurrencesOf: item)) ]
	].
	
	detailedSalePerUser at: anUser put: (DetailedSale of: aCost with: itemsWithPrice)
	
	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:30:56'!
test18CannotQueryListPurchasesOfEmptyCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:31:05'!
test19CannotQueryListPurchasesOfInvalidCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:31:15'!
test22SuccesfullyListPurchasesOfEmptyCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	! !

!methodRemoval: InternalAPITest #test18SuccesfullyListPurchasesOfEmptyCart stamp: 'eb 12/3/2020 14:01:15'!
test18SuccesfullyListPurchasesOfEmptyCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:31:20'!
test23CannotQueryListPurchasesOfInvalidCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	! !

!methodRemoval: InternalAPITest #test19CannotQueryListPurchasesOfInvalidCart stamp: 'eb 12/3/2020 14:01:15'!
test19CannotQueryListPurchasesOfInvalidCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:31:30'!
test24CannotQueryListPurchasesOfAlienCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	! !

!methodRemoval: InternalAPITest #test22SuccesfullyListPurchasesOfEmptyCart stamp: 'eb 12/3/2020 14:01:15'!
test22SuccesfullyListPurchasesOfEmptyCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:31:47'!
test22CannotQueryListPurchasesOfInvalidCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	! !

!methodRemoval: InternalAPITest #test23CannotQueryListPurchasesOfInvalidCart stamp: 'eb 12/3/2020 14:01:15'!
test23CannotQueryListPurchasesOfInvalidCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:31:53'!
test23CannotQueryListPurchasesOfAlienCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	! !

!methodRemoval: InternalAPITest #test24CannotQueryListPurchasesOfAlienCart stamp: 'eb 12/3/2020 14:01:15'!
test24CannotQueryListPurchasesOfAlienCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:32:31' prior: 51016806!
test18CannotQueryListPurchasesOfEmptyCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertUnsuccesfullyResponse: listPurchasesResponse .
	
	self assert: InternalAPI canNotQueryListPurchasesOfEmptyCartErroDescription equals: listPurchasesResponse payload .
	! !
!InternalAPI methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:33:48' prior: 51016162!
listPurchasesOf: anUser with: aPassword

	| detailedSale |
	
	[ detailedSale  _ detailedSalePerUser at: anUser ] ifAbsent: [ self error: self class canNotQueryListPurchsesOfEmptyCartErrorDescription ].
 
	^ SuccessfulResponse with: (detailedSalePerUser at: anUser).! !
!InternalAPI methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:34:12' prior: 51016982!
listPurchasesOf: anUser with: aPassword

	| detailedSale |
	
	[ detailedSale  _ detailedSalePerUser at: anUser ] ifAbsent: [ self error: self class canNotQueryListPurchsesOfEmptyCartErrorDescription ].
 
	^ SuccessfulResponse with: detailedSale.! !
!InternalAPI methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:34:28' prior: 51016994!
listPurchasesOf: anUser with: aPassword

	| detailedSale |
	
	detailedSale  _ detailedSalePerUser at: anUser ifAbsent: [ self error: self class canNotQueryListPurchsesOfEmptyCartErrorDescription ].
 
	^ SuccessfulResponse with: detailedSale.! !
!InternalAPI class methodsFor: 'error descriptions' stamp: 'eb 12/3/2020 00:34:45'!
canNotQueryListPurchsesOfEmptyCartErrorDescription
	self shouldBeImplemented.! !
!InternalAPI class methodsFor: 'error descriptions' stamp: 'eb 12/3/2020 00:35:14' prior: 51017016!
canNotQueryListPurchsesOfEmptyCartErrorDescription
	
	^ 'Can not query list purchases of empty cart'.! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:35:37' prior: 51016967!
test18CannotQueryListPurchasesOfEmptyCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertUnsuccesfullyResponse: listPurchasesResponse .
	
	self assert: InternalAPI canNotQueryListPurchsesOfEmptyCartErrorDescription equals: listPurchasesResponse payload .
	! !
!InternalAPI methodsFor: 'list purchases' stamp: 'eb 12/3/2020 00:36:26' prior: 51017005!
listPurchasesOf: anUser with: aPassword

	| detailedSale |
	
	detailedSale  _ detailedSalePerUser at: anUser ifAbsent: 
		[ ^ UnsuccessfulResponse with: self class canNotQueryListPurchsesOfEmptyCartErrorDescription ].
 
	^ SuccessfulResponse with: detailedSale.! !

!classRemoval: #StoreTestObjectsFactory stamp: 'eb 12/3/2020 14:02:17'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #DetailedSale stamp: 'eb 12/3/2020 14:02:18'!
Sale subclass: #DetailedSale
	instanceVariableNames: 'detail'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 'eb 12/3/2020 14:02:18'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #UnsuccessfulResponse stamp: 'eb 12/3/2020 14:02:18'!
InternalAPIResponse subclass: #UnsuccessfulResponse
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #SuccessfulResponse stamp: 'eb 12/3/2020 14:02:18'!
InternalAPIResponse subclass: #SuccessfulResponse
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #InternalAPIResponse stamp: 'eb 12/3/2020 14:02:19'!
Object subclass: #InternalAPIResponse
	instanceVariableNames: 'payload'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #InternalAPI stamp: 'eb 12/3/2020 14:02:19'!
Object subclass: #InternalAPI
	instanceVariableNames: 'users nextCartId carts date modifications cartsPerUser catalog merchantProcesor nextCheckOutId purchases detailedSalePerUser'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'eb 12/3/2020 14:02:19'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'eb 12/3/2020 14:02:20'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'eb 12/3/2020 14:02:20'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #InternalAPITest stamp: 'eb 12/3/2020 14:02:20'!
TestCase subclass: #InternalAPITest
	instanceVariableNames: 'debitBehavior testObjectFactory internalApi'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'eb 12/3/2020 14:02:21'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'eb 12/3/2020 14:02:21'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #InvalidBookQuantity stamp: 'eb 12/3/2020 14:02:21'!
Error subclass: #InvalidBookQuantity
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\ebonansea\Documents\Personal\Facultad\Ingenieria de software 1\Ejercicios propios\20-TusLibros\it-3\TusLibros.st----!

!testRun: #InternalAPITest #test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes stamp: 'eb 12/3/2020 14:04:17'!
PASSED!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 14:06:56'!
test22CannotQueryListPurchasesOfUserWithoutCarts

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	! !

!methodRemoval: InternalAPITest #test22CannotQueryListPurchasesOfInvalidCart stamp: 'eb 12/3/2020 14:06:56'!
test22CannotQueryListPurchasesOfInvalidCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 14:07:39' prior: 51018593!
test22CannotQueryListPurchasesOfUserWithoutCarts

	| listPurchasesResponse |
		
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertUnsuccesfullyResponse: listPurchasesResponse .
	
	self 
		assert: InternalAPI canNotQueryListPurchasesOfUserWithoutCartsErrorDescription
		equals: listPurchasesResponse payload .
	! !

!testRun: #InternalAPITest #test22CannotQueryListPurchasesOfUserWithoutCarts stamp: 'eb 12/3/2020 14:07:51'!
ERROR!

!testRun: #InternalAPITest #test22CannotQueryListPurchasesOfUserWithoutCarts stamp: 'eb 12/3/2020 14:07:51'!
ERROR!
!InternalAPI class methodsFor: 'error descriptions' stamp: 'eb 12/3/2020 14:08:07'!
canNotQueryListPurchasesOfUserWithoutCartsErrorDescription
	self shouldBeImplemented.! !
!InternalAPI class methodsFor: 'error descriptions' stamp: 'eb 12/3/2020 14:08:25' prior: 51018643!
canNotQueryListPurchasesOfUserWithoutCartsErrorDescription
	
	^ 'Can not query list purchases of user without carts'! !

!testRun: #InternalAPITest #test22CannotQueryListPurchasesOfUserWithoutCarts stamp: 'eb 12/3/2020 14:08:35'!
FAILURE!

!testRun: #InternalAPITest #test22CannotQueryListPurchasesOfUserWithoutCarts stamp: 'eb 12/3/2020 14:08:38'!
FAILURE!

!testRun: #InternalAPITest #test22CannotQueryListPurchasesOfUserWithoutCarts stamp: 'eb 12/3/2020 14:08:38'!
FAILURE!
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 14:08:48' prior: 51018649!
canNotQueryListPurchasesOfUserWithoutCartsErrorDescription
	self shouldBeImplemented.! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 14:08:55' prior: 51017799!
test23CannotQueryListPurchasesOfAlienCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	! !

!testRun: #InternalAPITest #test22CannotQueryListPurchasesOfUserWithoutCarts stamp: 'eb 12/3/2020 14:08:58'!
ERROR!

!testRun: #InternalAPITest #test22CannotQueryListPurchasesOfUserWithoutCarts stamp: 'eb 12/3/2020 14:08:58'!
ERROR!
!InternalAPI class methodsFor: 'error descriptions' stamp: 'eb 12/3/2020 14:09:19' prior: 51018668!
canNotQueryListPurchasesOfUserWithoutCartsErrorDescription
	
	^ 'Can not query list purchases of user without carts'.! !

!testRun: #InternalAPITest #test22CannotQueryListPurchasesOfUserWithoutCarts stamp: 'eb 12/3/2020 14:09:22'!
FAILURE!

!testRun: #InternalAPITest #test22CannotQueryListPurchasesOfUserWithoutCarts stamp: 'eb 12/3/2020 14:09:22'!
FAILURE!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 14:10:25'!
test18CannotQueryListPurchasesWithoutUserCheckout

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertUnsuccesfullyResponse: listPurchasesResponse .
	
	self assert: InternalAPI canNotQueryListPurchsesOfEmptyCartErrorDescription equals: listPurchasesResponse payload .
	! !

!methodRemoval: InternalAPITest #test18CannotQueryListPurchasesOfEmptyCart stamp: 'eb 12/3/2020 14:10:25'!
test18CannotQueryListPurchasesOfEmptyCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertUnsuccesfullyResponse: listPurchasesResponse .
	
	self assert: InternalAPI canNotQueryListPurchsesOfEmptyCartErrorDescription equals: listPurchasesResponse payload .
	!

!methodRemoval: InternalAPITest #test22CannotQueryListPurchasesOfUserWithoutCarts stamp: 'eb 12/3/2020 14:10:29'!
test22CannotQueryListPurchasesOfUserWithoutCarts

	| listPurchasesResponse |
		
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertUnsuccesfullyResponse: listPurchasesResponse .
	
	self 
		assert: InternalAPI canNotQueryListPurchasesOfUserWithoutCartsErrorDescription
		equals: listPurchasesResponse payload .
	!
!InternalAPI class methodsFor: 'error descriptions' stamp: 'eb 12/3/2020 14:10:49'!
canNotQueryListPurchasesWithoutUserCheckoutErrorDescription
	
	^ 'Can not query list purchases of empty cart'.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 14:10:50' prior: 51018269!
listPurchasesOf: anUser with: aPassword

	| detailedSale |
	
	detailedSale  _ detailedSalePerUser at: anUser ifAbsent: 
		[ ^ UnsuccessfulResponse with: self class canNotQueryListPurchasesWithoutUserCheckoutErrorDescription ].
 
	^ SuccessfulResponse with: detailedSale.! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 14:10:50' prior: 51018709!
test18CannotQueryListPurchasesWithoutUserCheckout

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertUnsuccesfullyResponse: listPurchasesResponse .
	
	self assert: InternalAPI canNotQueryListPurchasesWithoutUserCheckoutErrorDescription equals: listPurchasesResponse payload .
	! !

!methodRemoval: InternalAPI class #canNotQueryListPurchsesOfEmptyCartErrorDescription stamp: 'eb 12/3/2020 14:10:50'!
canNotQueryListPurchsesOfEmptyCartErrorDescription
	
	^ 'Can not query list purchases of empty cart'.!
!InternalAPI class methodsFor: 'error descriptions' stamp: 'eb 12/3/2020 14:11:03' prior: 51018753!
canNotQueryListPurchasesWithoutUserCheckoutErrorDescription
	
	^ 'Can not query list purchases without user checkout'.! !

!testRun: #InternalAPITest #test18CannotQueryListPurchasesWithoutUserCheckout stamp: 'eb 12/3/2020 14:11:05'!
PASSED!

!testRun: #InternalAPITest #test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword stamp: 'eb 12/3/2020 14:11:05'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdsPerCustomer stamp: 'eb 12/3/2020 14:11:05'!
PASSED!

!testRun: #InternalAPITest #test03CreateCartIsUnsuccessfullyWithUnregisteredClientId stamp: 'eb 12/3/2020 14:11:05'!
PASSED!

!testRun: #InternalAPITest #test04CreateCartSuccessfullyEffectivlyCreatesCart stamp: 'eb 12/3/2020 14:11:05'!
PASSED!

!testRun: #InternalAPITest #test05AddToCartIsSuccessfullyWithValidCartId stamp: 'eb 12/3/2020 14:11:05'!
PASSED!

!testRun: #InternalAPITest #test06AddToCartSuccessfullyEffectivlyAddsToCart stamp: 'eb 12/3/2020 14:11:05'!
PASSED!

!testRun: #InternalAPITest #test07AddToCartIsUnsuccessfullyWithInvalidCartId stamp: 'eb 12/3/2020 14:11:05'!
PASSED!

!testRun: #InternalAPITest #test08AddToCartIsUnsuccessfullyWithIvalidISBN stamp: 'eb 12/3/2020 14:11:05'!
PASSED!

!testRun: #InternalAPITest #test09ListCartWithEmptyCart stamp: 'eb 12/3/2020 14:11:05'!
PASSED!

!testRun: #InternalAPITest #test10ListCartWithNotEmptyCart stamp: 'eb 12/3/2020 14:11:05'!
PASSED!

!testRun: #InternalAPITest #test11ListCartWithInvalidCart stamp: 'eb 12/3/2020 14:11:05'!
PASSED!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/3/2020 14:11:05'!
PASSED!

!testRun: #InternalAPITest #test13CheckOutIsUnsuccessfullyWithEmptyCart stamp: 'eb 12/3/2020 14:11:05'!
PASSED!

!testRun: #InternalAPITest #test14CheckOutIsUnsuccessfullyWithInvalidCart stamp: 'eb 12/3/2020 14:11:06'!
PASSED!

!testRun: #InternalAPITest #test15CheckOutIsUnsuccessfullyWithExpiredCreditCard stamp: 'eb 12/3/2020 14:11:06'!
PASSED!

!testRun: #InternalAPITest #test16CheckOutIsUnsuccessfullyWithInvalidUser stamp: 'eb 12/3/2020 14:11:06'!
PASSED!

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/3/2020 14:11:06'!
PASSED!

!testRun: #InternalAPITest #test18CannotQueryListPurchasesWithoutUserCheckout stamp: 'eb 12/3/2020 14:11:06'!
PASSED!

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/3/2020 14:11:06'!
PASSED!

!testRun: #InternalAPITest #test20SuccesfullyListPurchasesOfCartWithManyItemsOfSameType stamp: 'eb 12/3/2020 14:11:06'!
PASSED!

!testRun: #InternalAPITest #test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes stamp: 'eb 12/3/2020 14:11:06'!
PASSED!

!testRun: #InternalAPITest #test23CannotQueryListPurchasesOfAlienCart stamp: 'eb 12/3/2020 14:11:06'!
FAILURE!

!testRun: #InternalAPITest #test23CannotQueryListPurchasesOfAlienCart stamp: 'eb 12/3/2020 14:11:06'!
FAILURE!

!testRun: #InternalAPITest #test18CannotQueryListPurchasesWithoutUserCheckout stamp: 'eb 12/3/2020 14:11:09'!
PASSED!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 14:12:19'!
test23CannotQueryListPurchasesWithInvalidCredentials

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	! !

!methodRemoval: InternalAPITest #test23CannotQueryListPurchasesOfAlienCart stamp: 'eb 12/3/2020 14:12:19'!
test23CannotQueryListPurchasesOfAlienCart

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: (DetailedSale of: 0 with: Bag new) equals: listPurchasesResponse payload .
	!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 14:13:22' prior: 51018893!
test23CannotQueryListPurchasesWithInvalidCredentials

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'java'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: InternalAPI canNotQueryListPurchasesWithInvalidCredentialsErrorDescription 
		equals: listPurchasesResponse payload .
	! !

!testRun: #InternalAPITest #test23CannotQueryListPurchasesWithInvalidCredentials stamp: 'eb 12/3/2020 14:13:25'!
FAILURE!

!testRun: #InternalAPITest #test23CannotQueryListPurchasesWithInvalidCredentials stamp: 'eb 12/3/2020 14:13:25'!
FAILURE!

!testRun: #InternalAPITest #test23CannotQueryListPurchasesWithInvalidCredentials stamp: 'eb 12/3/2020 14:13:30'!
FAILURE!

!testRun: #InternalAPITest #test23CannotQueryListPurchasesWithInvalidCredentials stamp: 'eb 12/3/2020 14:13:30'!
FAILURE!
!InternalAPI methodsFor: 'list purchases' stamp: 'eb 12/3/2020 14:14:02' prior: 51018760!
listPurchasesOf: anUser with: aPassword

	| detailedSale |
	
	self ensureUser:  anUser isRegisteredWith: aPassword.
	
	detailedSale  _ detailedSalePerUser at: anUser ifAbsent: 
		[ ^ UnsuccessfulResponse with: self class canNotQueryListPurchasesWithoutUserCheckoutErrorDescription ].
 
	^ SuccessfulResponse with: detailedSale.! !
!InternalAPI methodsFor: 'login' stamp: 'eb 12/3/2020 14:14:32' prior: 51018112!
ensureUser: anUser isRegisteredWith: aPassword 
	| registeredPassword |
	registeredPassword _ users at: anUser ifAbsent: [ self error: self class userNotRegisteredErrorDescription ].
	^ registeredPassword = aPassword.! !
!InternalAPI methodsFor: 'login' stamp: 'eb 12/3/2020 14:15:11' prior: 51018965!
ensureUser: anUser isRegisteredWith: aPassword 
	| registeredPassword |
	registeredPassword _ users at: anUser ifAbsent: [ self error: self class userNotRegisteredErrorDescription ].
	(registeredPassword = aPassword) ifFalse: [ self error: self class incorrectPasswordErrorDescription ].! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 14:15:37' prior: 51018921!
test23CannotQueryListPurchasesWithInvalidCredentials

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'java'.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self assert: InternalAPI incorrectPasswordErrorDescription 
		equals: listPurchasesResponse payload .
	! !
!InternalAPI methodsFor: 'list purchases' stamp: 'eb 12/3/2020 14:16:22' prior: 51018952!
listPurchasesOf: anUser with: aPassword

	| detailedSale |
	
	[ self ensureUser:  anUser isRegisteredWith: aPassword. ]
		on: Error
		do: [ :error | ^ UnsuccessfulResponse with: error messageText ].
	
	detailedSale  _ detailedSalePerUser at: anUser ifAbsent: 
		[ ^ UnsuccessfulResponse with: self class canNotQueryListPurchasesWithoutUserCheckoutErrorDescription ].
 
	^ SuccessfulResponse with: detailedSale.! !

!testRun: #InternalAPITest #test18CannotQueryListPurchasesWithoutUserCheckout stamp: 'eb 12/3/2020 14:16:28'!
PASSED!

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/3/2020 14:16:28'!
PASSED!

!testRun: #InternalAPITest #test20SuccesfullyListPurchasesOfCartWithManyItemsOfSameType stamp: 'eb 12/3/2020 14:16:28'!
PASSED!

!testRun: #InternalAPITest #test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes stamp: 'eb 12/3/2020 14:16:28'!
PASSED!

!testRun: #InternalAPITest #test23CannotQueryListPurchasesWithInvalidCredentials stamp: 'eb 12/3/2020 14:16:28'!
FAILURE!

!testRun: #InternalAPITest #test23CannotQueryListPurchasesWithInvalidCredentials stamp: 'eb 12/3/2020 14:16:28'!
FAILURE!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 14:16:36' prior: 51018988!
test23CannotQueryListPurchasesWithInvalidCredentials

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'java'.
	
	self assertUnsuccesfullyResponse: listPurchasesResponse .
	
	self assert: InternalAPI incorrectPasswordErrorDescription 
		equals: listPurchasesResponse payload .
	! !

!testRun: #InternalAPITest #test23CannotQueryListPurchasesWithInvalidCredentials stamp: 'eb 12/3/2020 14:16:38'!
ERROR!

!testRun: #InternalAPITest #test23CannotQueryListPurchasesWithInvalidCredentials stamp: 'eb 12/3/2020 14:16:38'!
ERROR!
!InternalAPI class methodsFor: 'error descriptions' stamp: 'eb 12/3/2020 14:16:55'!
incorrectPasswordErrorDescription
	self shouldBeImplemented.! !
!InternalAPI class methodsFor: 'error descriptions' stamp: 'eb 12/3/2020 14:17:04' prior: 51019064!
incorrectPasswordErrorDescription
	
	^ 'Incorrect password'.! !

!testRun: #InternalAPITest #test23CannotQueryListPurchasesWithInvalidCredentials stamp: 'eb 12/3/2020 14:17:07'!
PASSED!
!InternalAPITest methodsFor: 'expiration' stamp: 'eb 12/3/2020 14:23:24'!
test24CannotAddToExpiredCart! !
!InternalAPITest methodsFor: 'expiration' stamp: 'eb 12/3/2020 14:23:52'!
test25CannotListExpiredCart! !
!InternalAPITest methodsFor: 'expiration' stamp: 'eb 12/3/2020 14:23:59'!
test25CannotCheckoutExpiredCart! !

!methodRemoval: InternalAPI class #ISBNNotRegisteredErrorDescription stamp: 'eb 12/3/2020 14:26:34'!
ISBNNotRegisteredErrorDescription

	^ 'ISBN is not registered'!

!methodRemoval: InternalAPI class #canNotQueryListPurchasesOfUserWithoutCartsErrorDescription stamp: 'eb 12/3/2020 14:26:37'!
canNotQueryListPurchasesOfUserWithoutCartsErrorDescription
	
	^ 'Can not query list purchases of user without carts'.!

!methodRemoval: InternalAPI class #invalidQuantityErrorDescription stamp: 'eb 12/3/2020 14:27:00'!
invalidQuantityErrorDescription

	^'Invalid quantity'!
!InternalAPITest methodsFor: 'expiration' stamp: 'eb 12/3/2020 14:29:28' prior: 51019079!
test24CannotAddToExpiredCart

	| cartId |
	
	cartId _ self validCartId .
	
	internalApi 
		add:  testObjectFactory itemSellByTheStore
		toCart:  cartId
		withQuantity:  3
		on: testObjectFactory expired! !
!InternalAPI methodsFor: 'create cart' stamp: 'eb 12/3/2020 14:31:21'!
createCartFor: anUser with: aPassword on: aDate
	| response |
	
	response _ self createCartFor: anUser with: aPassword.
	
	modifications at: response payload put: aDate.! !
!InternalAPI methodsFor: 'create cart' stamp: 'eb 12/3/2020 14:31:31' prior: 51019118!
createCartFor: anUser with: aPassword on: aDate
	| response |
	
	response _ self createCartFor: anUser with: aPassword.
	
	modifications at: response payload put: aDate.
	
	^ response .! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/3/2020 14:32:27' prior: 51017428!
test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword
	self assertSuccessfullyResponse: (internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk' on: testObjectFactory today).! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/3/2020 14:32:57' prior: 51017436!
test02CreateCartReturnsDifferentIdsPerCustomer
	| firstCustomerCartId secondCustomerCartId |
	firstCustomerCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) payload .
	secondCustomerCartId _ (internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'  on: testObjectFactory today) payload.	
	self deny: firstCustomerCartId = secondCustomerCartId
	! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/3/2020 14:33:04' prior: 51017450!
test03CreateCartIsUnsuccessfullyWithUnregisteredClientId
	| response |
	response _ internalApi createCartFor: 'Edsger Dijkstra' with: 'nanoDijkstra' on: testObjectFactory today.
	self assertUnsuccesfullyResponse: response.
	self assert: response payload equals: InternalAPI userNotRegisteredErrorDescription. 
		
	
		
	! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/3/2020 14:33:07' prior: 51017462!
test04CreateCartSuccessfullyEffectivlyCreatesCart
	| response |
	response _ internalApi createCartFor: 'Alan Kay' with: 'objetos'  on: testObjectFactory today.
	self assertSuccessfullyResponse: response.
	self assert: (internalApi hasCartsOf: 'Alan Kay').
	
		
	! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/3/2020 14:33:10' prior: 51019175!
test04CreateCartSuccessfullyEffectivlyCreatesCart
	| response |
	response _ internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today.
	self assertSuccessfullyResponse: response.
	self assert: (internalApi hasCartsOf: 'Alan Kay').
	
		
	! !
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 14:33:14' prior: 51017646!
test17CheckOutIsUnsuccessfullyWithAlienCart

	| alanKayCartId  danIngallsCartId checkoutResponse |
 		
	alanKayCartId _ self validCartId .
	
	danIngallsCartId  _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'  on: testObjectFactory today.
	
	self successfullyAddResponseFor: alanKayCartId.
			
	self successfullyAddResponseFor: danIngallsCartId.

	checkoutResponse _ internalApi 
		checkOutCart: alanKayCartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Dan Ingalls'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI cartDoesNotBelongToUserErrorDescription equals: checkoutResponse payload .! !
!InternalAPITest methodsFor: 'carts' stamp: 'eb 12/3/2020 14:33:26' prior: 51017834!
validCartId

	^ (internalApi createCartFor: 'Alan Kay' with: 'objetos'  on: testObjectFactory today) payload! !
!InternalAPITest methodsFor: 'expiration' stamp: 'eb 12/3/2020 14:36:14' prior: 51019109!
test24CannotAddToExpiredCart

	| cartId |
	
	cartId _ self validCartId .
	
	internalApi 
		add:  testObjectFactory itemSellByTheStore
		toCart:  cartId
		withQuantity:  3
		on: testObjectFactory cartExpiredDateFromToday.! !
!InternalAPITest methodsFor: 'expiration' stamp: 'eb 12/3/2020 14:36:59' prior: 51019231!
test24CannotAddToExpiredCart

	| cartId addResponse |
	
	cartId _ self validCartId .
	
	addResponse _ internalApi 
		add:  testObjectFactory itemSellByTheStore
		toCart:  cartId
		withQuantity:  3
		on: testObjectFactory cartExpiredDateFromToday.
		
	self assertUnsuccesfullyResponse: addResponse .
	
	self assert: InternalAPI expiredCartErrorDescription equals: addResponse payload .! !
!InternalAPIResponse methodsFor: 'accesing' stamp: 'eb 12/3/2020 14:37:16'!
data

	^ payload copy.! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 14:37:16' prior: 51017716!
test20SuccesfullyListPurchasesOfCartWithManyItemsOfSameType

	| cartId listPurchasesResponse expectedDetail expectedResponsePayload |
	
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedResponsePayload _ DetailedSale of: (testObjectFactory itemSellByTheStorePrice * 3) with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse data .
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 14:37:16' prior: 51017684!
test19SuccesfullyListPurchasesOfCartWithOnlyOneItem

	| cartId listPurchasesResponse expectedDetail expectedResponsePayload |
	
	cartId _ self validCartId .
	
	internalApi
		add: testObjectFactory itemSellByTheStore 
		toCart: cartId
		withQuantity: 1
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> testObjectFactory itemSellByTheStorePrice.
	
	expectedResponsePayload _ DetailedSale of: testObjectFactory itemSellByTheStorePrice  with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse data .
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 14:37:16' prior: 51019161!
test03CreateCartIsUnsuccessfullyWithUnregisteredClientId
	| response |
	response _ internalApi createCartFor: 'Edsger Dijkstra' with: 'nanoDijkstra' on: testObjectFactory today.
	self assertUnsuccesfullyResponse: response.
	self assert: response data equals: InternalAPI userNotRegisteredErrorDescription. 
		
	
		
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 14:37:16' prior: 51017519!
test09ListCartWithEmptyCart
	| cartId listCartResponse |
	cartId _ self validCartId .	
	
	listCartResponse _ internalApi listCart: cartId.
	
	self assertSuccessfullyResponse: listCartResponse.
	self assert: listCartResponse data isEmpty.

	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 14:37:16' prior: 51017505!
test08AddToCartIsUnsuccessfullyWithIvalidISBN
	| cartId addResponse |		
	cartId _ self validCartId .
	addResponse _ internalApi
		add: self invalidCartId 
		toCart: cartId
		withQuantity: 3
		on: testObjectFactory today.
	
	self assertUnsuccesfullyResponse: addResponse .
	
	self assert: addResponse data = Cart invalidItemErrorMessage.
	
	
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 14:37:16' prior: 51017491!
test07AddToCartIsUnsuccessfullyWithInvalidCartId

	| addResponse |	
	addResponse _ internalApi 
		add: testObjectFactory itemSellByTheStore 
		toCart: self invalidCartId
		withQuantity: 3 
		on: testObjectFactory today.
	self assertUnsuccesfullyResponse: addResponse .
	self assert: addResponse data equals: InternalAPI cartNotRegisteredErrorDescription.
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 14:37:16' prior: 51017547!
test11ListCartWithInvalidCart
	| cartId listCartResponse |
	cartId _ self invalidCartId .	
	
	listCartResponse _ internalApi listCart: cartId.
	self assertUnsuccesfullyResponse: listCartResponse.

	self assert: internalApi class cartNotRegisteredErrorDescription equals: listCartResponse data .
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 14:37:16' prior: 51017628!
test16CheckOutIsUnsuccessfullyWithInvalidUser

	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
			
	checkoutResponse _ internalApi 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Steve Jobs'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI userHasNotCartsErrorDescription equals: checkoutResponse data .! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 14:37:16' prior: 51019199!
test17CheckOutIsUnsuccessfullyWithAlienCart

	| alanKayCartId  danIngallsCartId checkoutResponse |
 		
	alanKayCartId _ self validCartId .
	
	danIngallsCartId  _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'  on: testObjectFactory today.
	
	self successfullyAddResponseFor: alanKayCartId.
			
	self successfullyAddResponseFor: danIngallsCartId.

	checkoutResponse _ internalApi 
		checkOutCart: alanKayCartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Dan Ingalls'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI cartDoesNotBelongToUserErrorDescription equals: checkoutResponse data .! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 14:37:16' prior: 51019042!
test23CannotQueryListPurchasesWithInvalidCredentials

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'java'.
	
	self assertUnsuccesfullyResponse: listPurchasesResponse .
	
	self assert: InternalAPI incorrectPasswordErrorDescription 
		equals: listPurchasesResponse data .
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 14:37:16' prior: 51017530!
test10ListCartWithNotEmptyCart
	| cartId listCartResponse targetElements |
	cartId _ self validCartId .	
	
	self successfullyAddResponseFor: cartId.
		
	targetElements _ Bag new.
	
	targetElements  add: testObjectFactory itemSellByTheStore withOccurrences: 3. 
	
	listCartResponse _ internalApi listCart: cartId.
	
	self assertSuccessfullyResponse: listCartResponse .
	self assert: targetElements equals: listCartResponse data .
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 14:37:16' prior: 51017559!
test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
		
	checkoutResponse _ internalApi 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: checkoutResponse.
	
	self assert: 1 equals: checkoutResponse data .
! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 14:37:16' prior: 51019224!
validCartId

	^ (internalApi createCartFor: 'Alan Kay' with: 'objetos'  on: testObjectFactory today) data! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 14:37:16' prior: 51019241!
test24CannotAddToExpiredCart

	| cartId addResponse |
	
	cartId _ self validCartId .
	
	addResponse _ internalApi 
		add:  testObjectFactory itemSellByTheStore
		toCart:  cartId
		withQuantity:  3
		on: testObjectFactory cartExpiredDateFromToday.
		
	self assertUnsuccesfullyResponse: addResponse .
	
	self assert: InternalAPI expiredCartErrorDescription equals: addResponse data .! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 14:37:16' prior: 51017577!
test13CheckOutIsUnsuccessfullyWithEmptyCart

	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
			
	checkoutResponse _ internalApi 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: Cashier cartCanNotBeEmptyErrorMessage equals: checkoutResponse data .! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 14:37:16' prior: 51017746!
test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes

	| cartId listPurchasesResponse expectedDetail expectedResponsePayload |
	
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
	
	internalApi 
		add: testObjectFactory anotherItemSellByTheStore 
		toCart:  cartId 
		withQuantity: 4
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedDetail add: testObjectFactory anotherItemSellByTheStore -> (testObjectFactory anotherItemSellByTheStorePrice * 4).
	
	expectedResponsePayload _ DetailedSale 
		of: (testObjectFactory itemSellByTheStorePrice * 3) + (testObjectFactory anotherItemSellByTheStorePrice * 4) 
		with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse data .
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 14:37:16' prior: 51019145!
test02CreateCartReturnsDifferentIdsPerCustomer
	| firstCustomerCartId secondCustomerCartId |
	firstCustomerCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) data .
	secondCustomerCartId _ (internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'  on: testObjectFactory today) data.	
	self deny: firstCustomerCartId = secondCustomerCartId
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 14:37:16' prior: 51017610!
test15CheckOutIsUnsuccessfullyWithExpiredCreditCard
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId .
			
	checkoutResponse _ internalApi 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory expiredCreditCard
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: Cashier canNotChargeAnExpiredCreditCardErrorMessage  equals: checkoutResponse data .! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 14:37:16' prior: 51017472!
test05AddToCartIsSuccessfullyWithValidCartId
	| addResponse |
	
	addResponse _ self successfullyAddResponseFor: self validCartId. 

	self assertSuccessfullyResponse: addResponse .
	self assert: addResponse data equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 14:37:16' prior: 51017593!
test14CheckOutIsUnsuccessfullyWithInvalidCart

	| cartId checkoutResponse |
 		
	cartId _ self invalidCartId .
			
	checkoutResponse _ internalApi 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI cartNotRegisteredErrorDescription equals: checkoutResponse data .! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 14:37:16' prior: 51018772!
test18CannotQueryListPurchasesWithoutUserCheckout

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertUnsuccesfullyResponse: listPurchasesResponse .
	
	self assert: InternalAPI canNotQueryListPurchasesWithoutUserCheckoutErrorDescription equals: listPurchasesResponse data .
	! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 14:37:16' prior: 51019127!
createCartFor: anUser with: aPassword on: aDate
	| response |
	
	response _ self createCartFor: anUser with: aPassword.
	
	modifications at: response data put: aDate.
	
	^ response .! !

!methodRemoval: InternalAPIResponse #payload stamp: 'eb 12/3/2020 14:37:16'!
payload

	^ payload copy.!

!classDefinition: #InternalAPIResponse category: #TusLibros stamp: 'eb 12/3/2020 14:37:29'!
Object subclass: #InternalAPIResponse
	instanceVariableNames: 'data'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPIResponse methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 14:37:29' prior: 51018364!
initializeWith: aPayload

	data _ aPayload! !
!InternalAPIResponse methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 14:37:29' prior: 51019256!
data

	^ data copy.! !

!testRun: #InternalAPITest #test24CannotAddToExpiredCart stamp: 'eb 12/3/2020 14:37:36'!
ERROR!

!testRun: #InternalAPITest #test24CannotAddToExpiredCart stamp: 'eb 12/3/2020 14:37:36'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 14:37:52'!
cartExpiredDateFromToday
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 14:38:08' prior: 51019677!
cartExpiredDateFromToday
	
	^ today + 31 minutes .! !

!testRun: #InternalAPITest #test24CannotAddToExpiredCart stamp: 'eb 12/3/2020 14:38:14'!
ERROR!

!testRun: #InternalAPITest #test24CannotAddToExpiredCart stamp: 'eb 12/3/2020 14:38:14'!
ERROR!
!InternalAPI class methodsFor: 'error descriptions' stamp: 'eb 12/3/2020 14:38:23'!
expiredCartErrorDescription
	self shouldBeImplemented.! !
!InternalAPI class methodsFor: 'error descriptions' stamp: 'eb 12/3/2020 14:38:31' prior: 51019694!
expiredCartErrorDescription
	
	^ 'Cart is expired'.! !

!testRun: #InternalAPITest #test24CannotAddToExpiredCart stamp: 'eb 12/3/2020 14:38:33'!
PASSED!
!InternalAPITest methodsFor: 'expiration' stamp: 'eb 12/3/2020 14:39:27'!
assertResponseDataIsExpiredCartErrorDescription: addResponse

	^ self assert: InternalAPI expiredCartErrorDescription equals: addResponse data! !
!InternalAPITest methodsFor: 'expiration' stamp: 'eb 12/3/2020 14:39:27' prior: 51019491!
test24CannotAddToExpiredCart

	| cartId addResponse |
	
	cartId _ self validCartId .
	
	addResponse _ internalApi 
		add:  testObjectFactory itemSellByTheStore
		toCart:  cartId
		withQuantity:  3
		on: testObjectFactory cartExpiredDateFromToday.
		
	self assertUnsuccesfullyResponse: addResponse .
	
	self assertResponseDataIsExpiredCartErrorDescription: addResponse .! !
!InternalAPITest methodsFor: 'expiration' stamp: 'eb 12/3/2020 14:41:49' prior: 51019087!
test25CannotCheckoutExpiredCart

	| cartId listCartResponse |
	
	cartId _ self validCartId .
	
	internalApi 
		add:  testObjectFactory itemSellByTheStore
		toCart:  cartId
		withQuantity:  3
		on: testObjectFactory today .
		
	listCartResponse _ internalApi listCart: cartId on: testObjectFactory cartExpiredDateFromToday .
		
	self assertUnsuccesfullyResponse: listCartResponse .
	
	self assertResponseDataIsExpiredCartErrorDescription: listCartResponse .! !
!InternalAPI methodsFor: 'expiration' stamp: 'eb 12/3/2020 14:43:52' prior: 51018253!
ensureExecutionOf: aBlock withCart: aCartId isValidOn: aDate
	| returnValue |
	[ self ensureDateOf: aCartId isValidOn: aDate. ] on: Error do: [ :error | ^UnsuccessfulResponse with: error messageText ].
	returnValue _ aBlock value.
	self updateModificationDateOf: aCartId to: aDate.
	^ returnValue .
	
	! !

!methodRemoval: InternalAPI class #expiredCartErrorDescription stamp: 'eb 12/3/2020 14:44:38'!
expiredCartErrorDescription
	
	^ 'Cart is expired'.!
!InternalAPI methodsFor: 'create cart' stamp: 'eb 12/3/2020 14:47:23' prior: 51019642!
createCartFor: anUser with: aPassword on: aDate
	| response |
	
	response _ self createCartFor: anUser with: aPassword.
	
	self updateModificationDateOf: response data to: aDate.
	
	^ response .! !
!InternalAPI methodsFor: 'list cart' stamp: 'eb 12/3/2020 14:48:19'!
listCart: aCartId on: aDate
	^ self ensureExecutionOf: [ self listCart: aCartId ] withCart: aCartId isValidOn: aDate.
	! !

!testRun: #InternalAPITest #test25CannotCheckoutExpiredCart stamp: 'eb 12/3/2020 14:48:37'!
ERROR!

!testRun: #InternalAPITest #test25CannotCheckoutExpiredCart stamp: 'eb 12/3/2020 14:48:37'!
ERROR!
!InternalAPITest methodsFor: 'assertions' stamp: 'eb 12/3/2020 14:48:51' prior: 51019707!
assertResponseDataIsExpiredCartErrorDescription: addResponse

	^ self assert: InternalAPI cartExpiredDateFromToday equals: addResponse data! !

!testRun: #InternalAPITest #test24CannotAddToExpiredCart stamp: 'eb 12/3/2020 14:49:11'!
ERROR!

!testRun: #InternalAPITest #test24CannotAddToExpiredCart stamp: 'eb 12/3/2020 14:49:11'!
ERROR!
!InternalAPITest methodsFor: 'assertions' stamp: 'eb 12/3/2020 14:49:47' prior: 51019788!
assertResponseDataIsExpiredCartErrorDescription: addResponse

	^ self assert: InternalAPI cartIsExpiredErrorDescription equals: addResponse data! !

!testRun: #InternalAPITest #test24CannotAddToExpiredCart stamp: 'eb 12/3/2020 14:50:17'!
PASSED!

!testRun: #InternalAPITest #test25CannotCheckoutExpiredCart stamp: 'eb 12/3/2020 14:50:19'!
PASSED!

!testRun: #InternalAPITest #test25CannotListExpiredCart stamp: 'eb 12/3/2020 14:50:22'!
PASSED!
!InternalAPITest methodsFor: 'expiration' stamp: 'eb 12/3/2020 14:50:39' prior: 51019083!
test25CannotListExpiredCart
	| cartId listCartResponse |
	
	cartId _ self validCartId .
	
	internalApi 
		add:  testObjectFactory itemSellByTheStore
		toCart:  cartId
		withQuantity:  3
		on: testObjectFactory today .
		
	listCartResponse _ internalApi listCart: cartId on: testObjectFactory cartExpiredDateFromToday .
		
	self assertUnsuccesfullyResponse: listCartResponse .
	
	self assertResponseDataIsExpiredCartErrorDescription: listCartResponse .! !
!InternalAPITest methodsFor: 'expiration' stamp: 'eb 12/3/2020 14:50:47'!
test26CannotCheckoutExpiredCart

	| cartId listCartResponse |
	
	cartId _ self validCartId .
	
	internalApi 
		add:  testObjectFactory itemSellByTheStore
		toCart:  cartId
		withQuantity:  3
		on: testObjectFactory today .
		
	listCartResponse _ internalApi listCart: cartId on: testObjectFactory cartExpiredDateFromToday .
		
	self assertUnsuccesfullyResponse: listCartResponse .
	
	self assertResponseDataIsExpiredCartErrorDescription: listCartResponse .! !

!methodRemoval: InternalAPITest #test25CannotCheckoutExpiredCart stamp: 'eb 12/3/2020 14:50:47'!
test25CannotCheckoutExpiredCart

	| cartId listCartResponse |
	
	cartId _ self validCartId .
	
	internalApi 
		add:  testObjectFactory itemSellByTheStore
		toCart:  cartId
		withQuantity:  3
		on: testObjectFactory today .
		
	listCartResponse _ internalApi listCart: cartId on: testObjectFactory cartExpiredDateFromToday .
		
	self assertUnsuccesfullyResponse: listCartResponse .
	
	self assertResponseDataIsExpiredCartErrorDescription: listCartResponse .!
!InternalAPITest methodsFor: 'expiration' stamp: 'eb 12/3/2020 14:51:01' prior: 51019819!
test25CannotListExpiredCart

	| cartId listCartResponse |
	
	cartId _ self validCartId .
	
	internalApi 
		add:  testObjectFactory itemSellByTheStore
		toCart:  cartId
		withQuantity:  3
		on: testObjectFactory today .
		
	listCartResponse _ internalApi listCart: cartId on: testObjectFactory cartExpiredDateFromToday .
		
	self assertUnsuccesfullyResponse: listCartResponse .
	
	self assertResponseDataIsExpiredCartErrorDescription: listCartResponse .! !

!testRun: #InternalAPITest #test25CannotListExpiredCart stamp: 'eb 12/3/2020 14:51:02'!
PASSED!

!testRun: #InternalAPITest #test26CannotCheckoutExpiredCart stamp: 'eb 12/3/2020 14:51:05'!
PASSED!
!InternalAPITest methodsFor: 'expiration' stamp: 'eb 12/3/2020 14:52:06' prior: 51019836!
test26CannotCheckoutExpiredCart

	| cartId listCartResponse |
	
	cartId _ self validCartId .
	
	internalApi 
		add:  testObjectFactory itemSellByTheStore
		toCart:  cartId
		withQuantity:  3
		on: testObjectFactory today .
		
	listCartResponse _ internalApi 
		checkOutCart:  cartId 
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory cartExpiredDateFromToday .
		
	self assertUnsuccesfullyResponse: listCartResponse .
	
	self assertResponseDataIsExpiredCartErrorDescription: listCartResponse .! !

!testRun: #InternalAPITest #test26CannotCheckoutExpiredCart stamp: 'eb 12/3/2020 14:52:07'!
FAILURE!

!testRun: #InternalAPITest #test26CannotCheckoutExpiredCart stamp: 'eb 12/3/2020 14:52:07'!
FAILURE!
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 14:53:44' prior: 51018202!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	^ self 
		ensureExecutionOf: 
		[
			| cart cashier checkoutId |
	
			[ cart _ carts at: aCartId ] 
				on: Error 
				do:[^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
				
			(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
			
			((cartsPerUser at: anUser) = cart) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
			[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
				on: Error 
				do: [:error| ^ UnsuccessfulResponse with: error messageText].
				
			checkoutId _ self nextCheckOutId.
			
			self addDetailedSaleTo: anUser of: cart items withCost: cashier checkOut.
				
			^ SuccessfulResponse with: checkoutId.

		]
		withCart:  aCartId
		isValidOn: aDate
	
	! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 14:54:14' prior: 51019922!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	^ self 
		ensureExecutionOf: 
		[
			| cart cashier checkoutId |
	
			[ cart _ carts at: aCartId ] 
				on: Error 
				do:[^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
				
			(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
			
			((cartsPerUser at: anUser) = cart) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
			
			[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
				on: Error 
				do: [:error| ^ UnsuccessfulResponse with: error messageText].
				
			checkoutId _ self nextCheckOutId.
			
			self addDetailedSaleTo: anUser of: cart items withCost: cashier checkOut.
				
			^ SuccessfulResponse with: checkoutId.

		]
		withCart:  aCartId
		isValidOn: aDate
	
	! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 14:54:49' prior: 51019956!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	^ self 
		ensureExecutionOf: 
		[
			| cart cashier checkoutId |
	
			[ cart _ carts at: aCartId ] 
				on: Error 
				do:[^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
				
			(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
			
			((cartsPerUser at: anUser) = cart) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
			
			[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
				on: Error 
				do: [ :error| ^ UnsuccessfulResponse with: error messageText].
				
			checkoutId _ self nextCheckOutId.
			
			self addDetailedSaleTo: anUser of: cart items withCost: cashier checkOut.
				
			^ SuccessfulResponse with: checkoutId.

		]
		withCart:  aCartId
		isValidOn: aDate
	
	! !

!testRun: #InternalAPITest #test26CannotCheckoutExpiredCart stamp: 'eb 12/3/2020 14:56:16'!
PASSED!

!testRun: #InternalAPITest #test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword stamp: 'eb 12/3/2020 14:56:57'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdsPerCustomer stamp: 'eb 12/3/2020 14:56:57'!
PASSED!

!testRun: #InternalAPITest #test03CreateCartIsUnsuccessfullyWithUnregisteredClientId stamp: 'eb 12/3/2020 14:56:57'!
PASSED!

!testRun: #InternalAPITest #test04CreateCartSuccessfullyEffectivlyCreatesCart stamp: 'eb 12/3/2020 14:56:58'!
PASSED!

!testRun: #InternalAPITest #test05AddToCartIsSuccessfullyWithValidCartId stamp: 'eb 12/3/2020 14:56:58'!
PASSED!

!testRun: #InternalAPITest #test06AddToCartSuccessfullyEffectivlyAddsToCart stamp: 'eb 12/3/2020 14:56:58'!
PASSED!

!testRun: #InternalAPITest #test07AddToCartIsUnsuccessfullyWithInvalidCartId stamp: 'eb 12/3/2020 14:56:58'!
PASSED!

!testRun: #InternalAPITest #test08AddToCartIsUnsuccessfullyWithIvalidISBN stamp: 'eb 12/3/2020 14:56:58'!
PASSED!

!testRun: #InternalAPITest #test09ListCartWithEmptyCart stamp: 'eb 12/3/2020 14:56:58'!
PASSED!

!testRun: #InternalAPITest #test10ListCartWithNotEmptyCart stamp: 'eb 12/3/2020 14:56:58'!
PASSED!

!testRun: #InternalAPITest #test11ListCartWithInvalidCart stamp: 'eb 12/3/2020 14:56:58'!
PASSED!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/3/2020 14:56:58'!
PASSED!

!testRun: #InternalAPITest #test13CheckOutIsUnsuccessfullyWithEmptyCart stamp: 'eb 12/3/2020 14:56:58'!
PASSED!

!testRun: #InternalAPITest #test14CheckOutIsUnsuccessfullyWithInvalidCart stamp: 'eb 12/3/2020 14:56:58'!
PASSED!

!testRun: #InternalAPITest #test15CheckOutIsUnsuccessfullyWithExpiredCreditCard stamp: 'eb 12/3/2020 14:56:58'!
PASSED!

!testRun: #InternalAPITest #test16CheckOutIsUnsuccessfullyWithInvalidUser stamp: 'eb 12/3/2020 14:56:58'!
PASSED!

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/3/2020 14:56:58'!
PASSED!

!testRun: #InternalAPITest #test18CannotQueryListPurchasesWithoutUserCheckout stamp: 'eb 12/3/2020 14:56:58'!
PASSED!

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/3/2020 14:56:58'!
PASSED!

!testRun: #InternalAPITest #test20SuccesfullyListPurchasesOfCartWithManyItemsOfSameType stamp: 'eb 12/3/2020 14:56:58'!
PASSED!

!testRun: #InternalAPITest #test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes stamp: 'eb 12/3/2020 14:56:58'!
PASSED!

!testRun: #InternalAPITest #test23CannotQueryListPurchasesWithInvalidCredentials stamp: 'eb 12/3/2020 14:56:58'!
PASSED!

!testRun: #InternalAPITest #test24CannotAddToExpiredCart stamp: 'eb 12/3/2020 14:56:58'!
PASSED!

!testRun: #InternalAPITest #test25CannotListExpiredCart stamp: 'eb 12/3/2020 14:56:58'!
PASSED!

!testRun: #InternalAPITest #test26CannotCheckoutExpiredCart stamp: 'eb 12/3/2020 14:56:58'!
PASSED!

!testRun: #InternalAPITest #test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword stamp: 'eb 12/3/2020 15:04:10'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdsPerCustomer stamp: 'eb 12/3/2020 15:04:10'!
PASSED!

!testRun: #InternalAPITest #test03CreateCartIsUnsuccessfullyWithUnregisteredClientId stamp: 'eb 12/3/2020 15:04:10'!
PASSED!

!testRun: #InternalAPITest #test04CreateCartSuccessfullyEffectivlyCreatesCart stamp: 'eb 12/3/2020 15:04:10'!
PASSED!

!testRun: #InternalAPITest #test05AddToCartIsSuccessfullyWithValidCartId stamp: 'eb 12/3/2020 15:04:10'!
PASSED!

!testRun: #InternalAPITest #test06AddToCartSuccessfullyEffectivlyAddsToCart stamp: 'eb 12/3/2020 15:04:10'!
PASSED!

!testRun: #InternalAPITest #test07AddToCartIsUnsuccessfullyWithInvalidCartId stamp: 'eb 12/3/2020 15:04:10'!
PASSED!

!testRun: #InternalAPITest #test08AddToCartIsUnsuccessfullyWithIvalidISBN stamp: 'eb 12/3/2020 15:04:10'!
PASSED!

!testRun: #InternalAPITest #test09ListCartWithEmptyCart stamp: 'eb 12/3/2020 15:04:10'!
PASSED!

!testRun: #InternalAPITest #test10ListCartWithNotEmptyCart stamp: 'eb 12/3/2020 15:04:10'!
PASSED!

!testRun: #InternalAPITest #test11ListCartWithInvalidCart stamp: 'eb 12/3/2020 15:04:10'!
PASSED!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/3/2020 15:04:10'!
PASSED!

!testRun: #InternalAPITest #test13CheckOutIsUnsuccessfullyWithEmptyCart stamp: 'eb 12/3/2020 15:04:10'!
PASSED!

!testRun: #InternalAPITest #test14CheckOutIsUnsuccessfullyWithInvalidCart stamp: 'eb 12/3/2020 15:04:10'!
PASSED!

!testRun: #InternalAPITest #test15CheckOutIsUnsuccessfullyWithExpiredCreditCard stamp: 'eb 12/3/2020 15:04:10'!
PASSED!

!testRun: #InternalAPITest #test16CheckOutIsUnsuccessfullyWithInvalidUser stamp: 'eb 12/3/2020 15:04:10'!
PASSED!

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/3/2020 15:04:10'!
PASSED!

!testRun: #InternalAPITest #test18CannotQueryListPurchasesWithoutUserCheckout stamp: 'eb 12/3/2020 15:04:10'!
PASSED!

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/3/2020 15:04:10'!
PASSED!

!testRun: #InternalAPITest #test20SuccesfullyListPurchasesOfCartWithManyItemsOfSameType stamp: 'eb 12/3/2020 15:04:10'!
PASSED!

!testRun: #InternalAPITest #test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes stamp: 'eb 12/3/2020 15:04:10'!
PASSED!

!testRun: #InternalAPITest #test23CannotQueryListPurchasesWithInvalidCredentials stamp: 'eb 12/3/2020 15:04:10'!
PASSED!

!testRun: #InternalAPITest #test24CannotAddToExpiredCart stamp: 'eb 12/3/2020 15:04:10'!
PASSED!

!testRun: #InternalAPITest #test25CannotListExpiredCart stamp: 'eb 12/3/2020 15:04:10'!
PASSED!

!testRun: #InternalAPITest #test26CannotCheckoutExpiredCart stamp: 'eb 12/3/2020 15:04:10'!
PASSED!
!InternalAPI methodsFor: 'id generation' stamp: 'eb 12/3/2020 15:07:34' prior: 51018232!
nextCartId
	nextCartId _ nextCartId + 1.
	^ nextCartId ! !

!classDefinition: #InternalAPI category: #TusLibros stamp: 'eb 12/3/2020 15:08:26'!
Object subclass: #InternalAPI
	instanceVariableNames: 'users nextCartId carts date lastUsagePerCart cartsPerUser catalog merchantProcesor nextCheckOutId purchases detailedSalePerUser'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 15:08:26' prior: 51018242!
ensureDateOf: aCartId isValidOn: aDate
	| halfHourAgo |
	halfHourAgo _ aDate - 30 minutes.
	((lastUsagePerCart includesKey: aCartId) and: [(lastUsagePerCart at: aCartId)  < halfHourAgo ]) 
		ifTrue: [ self error: self class cartIsExpiredErrorDescription ].! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 15:08:26' prior: 51018097!
initializeWith: aUsersCollection on: aDate usingCatalog: aCatalog usingMerchantProccesor: aMerchantProccesor
	users _ aUsersCollection.
	date _ aDate.
	catalog _ aCatalog.
	merchantProcesor _ aMerchantProccesor.
	carts _ Dictionary new.
	cartsPerUser _ Dictionary new.
	lastUsagePerCart _ Dictionary new.
	detailedSalePerUser _ Dictionary new .
	nextCartId _ 0.
	nextCheckOutId _ 0.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 15:08:26' prior: 51018161!
createCartFor: anUser with: aPassword 
	| cartId cart |
	[ self ensureUser: anUser isRegisteredWith: aPassword ] 
		on: Error 
		do: [:error | ^UnsuccessfulResponse with: error messageText ].
	cart _ Cart acceptingItemsOf: catalog.
	cartId _ self nextCartId.
	cartsPerUser add: anUser -> cart.
	carts add: cartId -> cart.
	lastUsagePerCart add: cartId -> date.
	^ SuccessfulResponse with: cartId.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 15:08:26' prior: 51018263!
updateModificationDateOf: aCartId to: aDate
	lastUsagePerCart at: aCartId put: aDate .! !
!InternalAPI methodsFor: 'create cart' stamp: 'eb 12/3/2020 15:08:54' prior: 51020252!
createCartFor: anUser with: aPassword 
	| cartId cart |
	[ self ensureUser: anUser isRegisteredWith: aPassword ] 
		on: Error 
		do: [:error | ^UnsuccessfulResponse with: error messageText ].
	cart _ Cart acceptingItemsOf: catalog.
	cartId _ self nextCartId.
	cartsPerUser add: anUser -> cartId.
	carts add: cartId -> cart.
	lastUsagePerCart add: cartId -> date.
	^ SuccessfulResponse with: cartId.! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 15:10:37' prior: 51019990!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	^ self 
		ensureExecutionOf: 
		[
			| cart cashier checkoutId |
	
			[ cart _ carts at: aCartId ] 
				on: Error 
				do:[^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
				
			(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
			
			((cartsPerUser at: aCartId) = cart) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
			
			[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
				on: Error 
				do: [ :error| ^ UnsuccessfulResponse with: error messageText].
				
			checkoutId _ self nextCheckOutId.
			
			self addDetailedSaleTo: anUser of: cart items withCost: cashier checkOut.
				
			^ SuccessfulResponse with: checkoutId.

		]
		withCart:  aCartId
		isValidOn: aDate
	
	! !

!testRun: #InternalAPITest #test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword stamp: 'eb 12/3/2020 15:11:11'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdsPerCustomer stamp: 'eb 12/3/2020 15:11:11'!
PASSED!

!testRun: #InternalAPITest #test03CreateCartIsUnsuccessfullyWithUnregisteredClientId stamp: 'eb 12/3/2020 15:11:11'!
PASSED!

!testRun: #InternalAPITest #test04CreateCartSuccessfullyEffectivlyCreatesCart stamp: 'eb 12/3/2020 15:11:11'!
PASSED!

!testRun: #InternalAPITest #test05AddToCartIsSuccessfullyWithValidCartId stamp: 'eb 12/3/2020 15:11:11'!
PASSED!

!testRun: #InternalAPITest #test06AddToCartSuccessfullyEffectivlyAddsToCart stamp: 'eb 12/3/2020 15:11:11'!
PASSED!

!testRun: #InternalAPITest #test07AddToCartIsUnsuccessfullyWithInvalidCartId stamp: 'eb 12/3/2020 15:11:11'!
PASSED!

!testRun: #InternalAPITest #test08AddToCartIsUnsuccessfullyWithIvalidISBN stamp: 'eb 12/3/2020 15:11:11'!
PASSED!

!testRun: #InternalAPITest #test09ListCartWithEmptyCart stamp: 'eb 12/3/2020 15:11:11'!
PASSED!

!testRun: #InternalAPITest #test10ListCartWithNotEmptyCart stamp: 'eb 12/3/2020 15:11:11'!
PASSED!

!testRun: #InternalAPITest #test11ListCartWithInvalidCart stamp: 'eb 12/3/2020 15:11:11'!
PASSED!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/3/2020 15:11:11'!
ERROR!

!testRun: #InternalAPITest #test13CheckOutIsUnsuccessfullyWithEmptyCart stamp: 'eb 12/3/2020 15:11:11'!
ERROR!

!testRun: #InternalAPITest #test14CheckOutIsUnsuccessfullyWithInvalidCart stamp: 'eb 12/3/2020 15:11:11'!
PASSED!

!testRun: #InternalAPITest #test15CheckOutIsUnsuccessfullyWithExpiredCreditCard stamp: 'eb 12/3/2020 15:11:11'!
ERROR!

!testRun: #InternalAPITest #test16CheckOutIsUnsuccessfullyWithInvalidUser stamp: 'eb 12/3/2020 15:11:11'!
PASSED!

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/3/2020 15:11:11'!
ERROR!

!testRun: #InternalAPITest #test18CannotQueryListPurchasesWithoutUserCheckout stamp: 'eb 12/3/2020 15:11:11'!
PASSED!

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/3/2020 15:11:11'!
ERROR!

!testRun: #InternalAPITest #test20SuccesfullyListPurchasesOfCartWithManyItemsOfSameType stamp: 'eb 12/3/2020 15:11:11'!
ERROR!

!testRun: #InternalAPITest #test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes stamp: 'eb 12/3/2020 15:11:11'!
ERROR!

!testRun: #InternalAPITest #test23CannotQueryListPurchasesWithInvalidCredentials stamp: 'eb 12/3/2020 15:11:11'!
PASSED!

!testRun: #InternalAPITest #test24CannotAddToExpiredCart stamp: 'eb 12/3/2020 15:11:11'!
PASSED!

!testRun: #InternalAPITest #test25CannotListExpiredCart stamp: 'eb 12/3/2020 15:11:11'!
PASSED!

!testRun: #InternalAPITest #test26CannotCheckoutExpiredCart stamp: 'eb 12/3/2020 15:11:11'!
PASSED!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/3/2020 15:11:35'!
ERROR!

!testRun: #InternalAPITest #test13CheckOutIsUnsuccessfullyWithEmptyCart stamp: 'eb 12/3/2020 15:11:35'!
ERROR!

!testRun: #InternalAPITest #test14CheckOutIsUnsuccessfullyWithInvalidCart stamp: 'eb 12/3/2020 15:11:35'!
PASSED!

!testRun: #InternalAPITest #test15CheckOutIsUnsuccessfullyWithExpiredCreditCard stamp: 'eb 12/3/2020 15:11:35'!
ERROR!

!testRun: #InternalAPITest #test16CheckOutIsUnsuccessfullyWithInvalidUser stamp: 'eb 12/3/2020 15:11:35'!
PASSED!

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/3/2020 15:11:35'!
ERROR!

!testRun: #InternalAPITest #test18CannotQueryListPurchasesWithoutUserCheckout stamp: 'eb 12/3/2020 15:11:38'!
PASSED!

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/3/2020 15:11:38'!
ERROR!

!testRun: #InternalAPITest #test20SuccesfullyListPurchasesOfCartWithManyItemsOfSameType stamp: 'eb 12/3/2020 15:11:38'!
ERROR!

!testRun: #InternalAPITest #test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes stamp: 'eb 12/3/2020 15:11:38'!
ERROR!

!testRun: #InternalAPITest #test23CannotQueryListPurchasesWithInvalidCredentials stamp: 'eb 12/3/2020 15:11:38'!
PASSED!

!testRun: #InternalAPITest #test24CannotAddToExpiredCart stamp: 'eb 12/3/2020 15:11:41'!
PASSED!

!testRun: #InternalAPITest #test25CannotListExpiredCart stamp: 'eb 12/3/2020 15:11:41'!
PASSED!

!testRun: #InternalAPITest #test26CannotCheckoutExpiredCart stamp: 'eb 12/3/2020 15:11:41'!
PASSED!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/3/2020 15:11:44'!
ERROR!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/3/2020 15:11:44'!
ERROR!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/3/2020 15:11:50'!
ERROR!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/3/2020 15:11:50'!
ERROR!
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 15:12:10' prior: 51020290!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	^ self 
		ensureExecutionOf: 
		[
			| cart cashier checkoutId |
	
			[ cart _ carts at: aCartId ] 
				on: Error 
				do:[^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
				
			(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
			
			((cartsPerUser at: anUser) = aCartId) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
			
			[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
				on: Error 
				do: [ :error| ^ UnsuccessfulResponse with: error messageText].
				
			checkoutId _ self nextCheckOutId.
			
			self addDetailedSaleTo: anUser of: cart items withCost: cashier checkOut.
				
			^ SuccessfulResponse with: checkoutId.

		]
		withCart:  aCartId
		isValidOn: aDate
	
	! !

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/3/2020 15:12:14'!
PASSED!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/3/2020 15:12:16'!
PASSED!

!testRun: #InternalAPITest #test13CheckOutIsUnsuccessfullyWithEmptyCart stamp: 'eb 12/3/2020 15:12:16'!
PASSED!

!testRun: #InternalAPITest #test14CheckOutIsUnsuccessfullyWithInvalidCart stamp: 'eb 12/3/2020 15:12:16'!
PASSED!

!testRun: #InternalAPITest #test15CheckOutIsUnsuccessfullyWithExpiredCreditCard stamp: 'eb 12/3/2020 15:12:16'!
PASSED!

!testRun: #InternalAPITest #test16CheckOutIsUnsuccessfullyWithInvalidUser stamp: 'eb 12/3/2020 15:12:16'!
PASSED!

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/3/2020 15:12:16'!
PASSED!

!testRun: #InternalAPITest #test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword stamp: 'eb 12/3/2020 15:12:18'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdsPerCustomer stamp: 'eb 12/3/2020 15:12:18'!
PASSED!

!testRun: #InternalAPITest #test03CreateCartIsUnsuccessfullyWithUnregisteredClientId stamp: 'eb 12/3/2020 15:12:18'!
PASSED!

!testRun: #InternalAPITest #test04CreateCartSuccessfullyEffectivlyCreatesCart stamp: 'eb 12/3/2020 15:12:18'!
PASSED!

!testRun: #InternalAPITest #test05AddToCartIsSuccessfullyWithValidCartId stamp: 'eb 12/3/2020 15:12:18'!
PASSED!

!testRun: #InternalAPITest #test06AddToCartSuccessfullyEffectivlyAddsToCart stamp: 'eb 12/3/2020 15:12:18'!
PASSED!

!testRun: #InternalAPITest #test07AddToCartIsUnsuccessfullyWithInvalidCartId stamp: 'eb 12/3/2020 15:12:18'!
PASSED!

!testRun: #InternalAPITest #test08AddToCartIsUnsuccessfullyWithIvalidISBN stamp: 'eb 12/3/2020 15:12:18'!
PASSED!

!testRun: #InternalAPITest #test09ListCartWithEmptyCart stamp: 'eb 12/3/2020 15:12:18'!
PASSED!

!testRun: #InternalAPITest #test10ListCartWithNotEmptyCart stamp: 'eb 12/3/2020 15:12:18'!
PASSED!

!testRun: #InternalAPITest #test11ListCartWithInvalidCart stamp: 'eb 12/3/2020 15:12:18'!
PASSED!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/3/2020 15:12:18'!
PASSED!

!testRun: #InternalAPITest #test13CheckOutIsUnsuccessfullyWithEmptyCart stamp: 'eb 12/3/2020 15:12:18'!
PASSED!

!testRun: #InternalAPITest #test14CheckOutIsUnsuccessfullyWithInvalidCart stamp: 'eb 12/3/2020 15:12:18'!
PASSED!

!testRun: #InternalAPITest #test15CheckOutIsUnsuccessfullyWithExpiredCreditCard stamp: 'eb 12/3/2020 15:12:18'!
PASSED!

!testRun: #InternalAPITest #test16CheckOutIsUnsuccessfullyWithInvalidUser stamp: 'eb 12/3/2020 15:12:18'!
PASSED!

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/3/2020 15:12:18'!
PASSED!

!testRun: #InternalAPITest #test18CannotQueryListPurchasesWithoutUserCheckout stamp: 'eb 12/3/2020 15:12:18'!
PASSED!

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/3/2020 15:12:18'!
PASSED!

!testRun: #InternalAPITest #test20SuccesfullyListPurchasesOfCartWithManyItemsOfSameType stamp: 'eb 12/3/2020 15:12:18'!
PASSED!

!testRun: #InternalAPITest #test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes stamp: 'eb 12/3/2020 15:12:18'!
PASSED!

!testRun: #InternalAPITest #test23CannotQueryListPurchasesWithInvalidCredentials stamp: 'eb 12/3/2020 15:12:18'!
PASSED!

!testRun: #InternalAPITest #test24CannotAddToExpiredCart stamp: 'eb 12/3/2020 15:12:18'!
PASSED!

!testRun: #InternalAPITest #test25CannotListExpiredCart stamp: 'eb 12/3/2020 15:12:18'!
PASSED!

!testRun: #InternalAPITest #test26CannotCheckoutExpiredCart stamp: 'eb 12/3/2020 15:12:18'!
PASSED!
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/3/2020 15:15:22'!
test05UsersCouldHaveMultipleCarts
	| response |
	response _ internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today.
	self assertSuccessfullyResponse: response.
	self assert: (internalApi hasCartsOf: 'Alan Kay').
	
		
	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 15:21:51'!
test24SuccessfullyListPurchasesOfUserWithMultipleCarts! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/3/2020 15:23:40' prior: 51020637!
test05UsersCouldHaveMultipleCarts
	| createResponse1 createResponse2|
	createResponse1 _ internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today.
	self assertSuccessfullyResponse: createResponse1.
	self assert: (internalApi hasCartsOf: 'Alan Kay').
	createResponse2 _ internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today.
	self assertSuccessfullyResponse: createResponse2.
	self assert: (internalApi hasCartsOf: 'Alan Kay').
	
	self assert: 2 equals: (internalApi c)

	
		
	! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/3/2020 15:24:01' prior: 51020653!
test05UsersCouldHaveMultipleCarts
	| createResponse1 createResponse2|
	createResponse1 _ internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today.
	self assertSuccessfullyResponse: createResponse1.
	self assert: (internalApi hasCartsOf: 'Alan Kay').
	createResponse2 _ internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today.
	self assertSuccessfullyResponse: createResponse2.
	self assert: (internalApi hasCartsOf: 'Alan Kay').
	
	self assert: 2 equals: (internalApi numberOfCartsOf: 'Alan Kay').

	
		
	! !

!testRun: #InternalAPITest #test05UsersCouldHaveMultipleCarts stamp: 'eb 12/3/2020 15:24:06'!
ERROR!

!testRun: #InternalAPITest #test05UsersCouldHaveMultipleCarts stamp: 'eb 12/3/2020 15:24:06'!
ERROR!
!InternalAPI methodsFor: 'testing' stamp: 'eb 12/3/2020 15:24:21'!
numberOfCartsOf: aString 
	self shouldBeImplemented.! !
!InternalAPI methodsFor: 'testing' stamp: 'eb 12/3/2020 15:24:53' prior: 51020700!
numberOfCartsOf: anUser 
	
	^ (cartsPerUser at: anUser) size.! !

!testRun: #InternalAPITest #test05UsersCouldHaveMultipleCarts stamp: 'eb 12/3/2020 15:25:00'!
ERROR!

!testRun: #InternalAPITest #test05UsersCouldHaveMultipleCarts stamp: 'eb 12/3/2020 15:25:00'!
ERROR!
!InternalAPI methodsFor: 'create cart' stamp: 'eb 12/3/2020 15:26:17'!
create: anUser for: cart withId: cartId

	cartsPerUser add: anUser -> cartId.
	carts add: cartId -> cart.
	lastUsagePerCart add: cartId -> date! !
!InternalAPI methodsFor: 'create cart' stamp: 'eb 12/3/2020 15:26:17' prior: 51020274!
createCartFor: anUser with: aPassword 
	| cartId cart |
	[ self ensureUser: anUser isRegisteredWith: aPassword ] 
		on: Error 
		do: [:error | ^UnsuccessfulResponse with: error messageText ].
	cart _ Cart acceptingItemsOf: catalog.
	cartId _ self nextCartId.
	self create: anUser for: cart withId: cartId.
	^ SuccessfulResponse with: cartId.! !
!InternalAPI methodsFor: 'create cart' stamp: 'eb 12/3/2020 15:27:02' prior: 51020716!
create: aCart for: anUser withId: aCartId

	cartsPerUser add: anUser -> aCartId.
	carts add: aCartId -> aCart.
	lastUsagePerCart add: aCartId -> date! !
!InternalAPI methodsFor: 'create cart' stamp: 'eb 12/3/2020 15:27:50' prior: 51020738!
create: aCart for: anUser withId: aCartId

	| currentCarts |
	
	currentCarts _ cartsPerUser at: anUser ifAbsent: OrderedCollection new.

	cartsPerUser add: anUser -> aCartId.
	carts add: aCartId -> aCart.
	lastUsagePerCart add: aCartId -> date! !
!InternalAPI methodsFor: 'create cart' stamp: 'eb 12/3/2020 15:28:03' prior: 51020746!
create: aCart for: anUser withId: aCartId

	| currentCarts |
	
	currentCarts _ cartsPerUser at: anUser ifAbsent: OrderedCollection new.
	
	currentCarts add: aCartId .

	cartsPerUser add: anUser -> currentCarts.
	carts add: aCartId -> aCart.
	lastUsagePerCart add: aCartId -> date! !

!testRun: #InternalAPITest #test05UsersCouldHaveMultipleCarts stamp: 'eb 12/3/2020 15:28:12'!
FAILURE!

!testRun: #InternalAPITest #test05UsersCouldHaveMultipleCarts stamp: 'eb 12/3/2020 15:28:12'!
FAILURE!

!testRun: #InternalAPITest #test05UsersCouldHaveMultipleCarts stamp: 'eb 12/3/2020 15:29:38'!
FAILURE!

!testRun: #InternalAPITest #test05UsersCouldHaveMultipleCarts stamp: 'eb 12/3/2020 15:29:38'!
FAILURE!
!InternalAPI methodsFor: 'create cart' stamp: 'eb 12/3/2020 15:49:39' prior: 51020757!
create: aCart for: anUser withId: aCartId

	| currentCarts |
	
	currentCarts _ cartsPerUser at: anUser ifAbsent: OrderedCollection new.
	
	currentCarts add: aCartId .

	cartsPerUser at: anUser put: currentCarts.
	carts add: aCartId -> aCart.
	lastUsagePerCart add: aCartId -> date! !
!InternalAPI methodsFor: 'create cart' stamp: 'eb 12/3/2020 15:49:45' prior: 51020782!
create: aCart for: anUser withId: aCartId

	| currentCarts |
	
	self halt. 
	
	currentCarts _ cartsPerUser at: anUser ifAbsent: OrderedCollection new.
	
	currentCarts add: aCartId .

	cartsPerUser at: anUser put: currentCarts.
	carts add: aCartId -> aCart.
	lastUsagePerCart add: aCartId -> date! !
!InternalAPI methodsFor: 'create cart' stamp: 'eb 12/3/2020 15:51:00' prior: 51020724!
createCartFor: anUser with: aPassword 
	| cartId cart |
	[ self ensureUser: anUser isRegisteredWith: aPassword ] 
		on: Error 
		do: [:error | ^UnsuccessfulResponse with: error messageText ].
	cart _ Cart acceptingItemsOf: catalog.
	cartId _ self nextCartId.
	self create: cart for: anUser withId: cartId.
	^ SuccessfulResponse with: cartId.! !
!InternalAPI methodsFor: 'create cart' stamp: 'eb 12/3/2020 15:51:33' prior: 51020794!
create: aCart for: anUser withId: aCartId

	| currentCarts |
		
	currentCarts _ cartsPerUser at: anUser ifAbsent: OrderedCollection new.
	
	currentCarts add: aCartId .

	cartsPerUser at: anUser put: currentCarts.
	carts add: aCartId -> aCart.
	lastUsagePerCart add: aCartId -> date! !

!testRun: #InternalAPITest #test05UsersCouldHaveMultipleCarts stamp: 'eb 12/3/2020 15:51:38'!
PASSED!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 15:53:21' prior: 51020648!
test24SuccessfullyListPurchasesOfUserWithMultipleCarts

	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 15:55:32' prior: 51020837!
test24SuccessfullyListPurchasesOfUserWithMultipleCarts

	| firstCartId secondCartId|
	
	firstCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) data.
	
	secondCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) data.
	
	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 15:57:04' prior: 51020842!
test24SuccessfullyListPurchasesOfUserWithMultipleCarts

	| firstCartId secondCartId |
	
	firstCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) data.
	
	secondCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) data.
	
	internalApi 
		add:  self itemSellByTheStore 
		toCart:  firstCartId 
		withQuantity:  3
		on: testObjectFactory today.
	
	internalApi 
		add:  self anotherItemSellByTheStore 
		toCart:  secondCartId 
		withQuantity:  4
		on: testObjectFactory today.! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 15:58:30' prior: 51020855!
test24SuccessfullyListPurchasesOfUserWithMultipleCarts

	| firstCartId secondCartId listPurchasesResponse expectedDetail expectedResponseData |
	
	firstCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) data.
	
	secondCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) data.
	
	internalApi 
		add:  self itemSellByTheStore 
		toCart:  firstCartId 
		withQuantity:  3
		on: testObjectFactory today.
	
	internalApi 
		add:  self anotherItemSellByTheStore 
		toCart:  secondCartId 
		withQuantity:  4
		on: testObjectFactory today.
		
		expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedDetail add: testObjectFactory anotherItemSellByTheStore -> (testObjectFactory anotherItemSellByTheStorePrice * 4).
	
	expectedResponseData _ DetailedSale 
		of: (testObjectFactory itemSellByTheStorePrice * 3) + (testObjectFactory anotherItemSellByTheStorePrice * 4) 
		with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponseData equals: listPurchasesResponse data .! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 15:59:13' prior: 51020876!
test24SuccessfullyListPurchasesOfUserWithMultipleCarts

	| firstCartId secondCartId listPurchasesResponse expectedDetail expectedResponseData |
	
	firstCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) data.
	
	secondCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) data.
	
	internalApi 
		add:  self itemSellByTheStore 
		toCart:  firstCartId 
		withQuantity:  3
		on: testObjectFactory today.
	
	internalApi 
		add:  self anotherItemSellByTheStore 
		toCart:  secondCartId 
		withQuantity:  4
		on: testObjectFactory today.
		
		expectedDetail _ Dictionary new.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'java'.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedDetail add: testObjectFactory anotherItemSellByTheStore -> (testObjectFactory anotherItemSellByTheStorePrice * 4).
	
	expectedResponseData _ DetailedSale 
		of: (testObjectFactory itemSellByTheStorePrice * 3) + (testObjectFactory anotherItemSellByTheStorePrice * 4) 
		with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponseData equals: listPurchasesResponse data .! !

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 15:59:16'!
ERROR!

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 15:59:16'!
ERROR!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 15:59:36' prior: 51020917!
test24SuccessfullyListPurchasesOfUserWithMultipleCarts

	| firstCartId secondCartId listPurchasesResponse expectedDetail expectedResponseData |
	
	firstCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) data.
	
	secondCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) data.
	
	internalApi 
		add:  testObjectFactory itemSellByTheStore 
		toCart:  firstCartId 
		withQuantity:  3
		on: testObjectFactory today.
	
	internalApi 
		add:  testObjectFactory anotherItemSellByTheStore 
		toCart:  secondCartId 
		withQuantity:  4
		on: testObjectFactory today.
		
		expectedDetail _ Dictionary new.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'java'.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedDetail add: testObjectFactory anotherItemSellByTheStore -> (testObjectFactory anotherItemSellByTheStorePrice * 4).
	
	expectedResponseData _ DetailedSale 
		of: (testObjectFactory itemSellByTheStorePrice * 3) + (testObjectFactory anotherItemSellByTheStorePrice * 4) 
		with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponseData equals: listPurchasesResponse data .! !

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 15:59:38'!
FAILURE!

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 15:59:38'!
FAILURE!

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 15:59:51'!
FAILURE!

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 15:59:51'!
FAILURE!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 16:00:13' prior: 51020968!
test24SuccessfullyListPurchasesOfUserWithMultipleCarts

	| firstCartId secondCartId listPurchasesResponse expectedDetail expectedResponseData |
	
	firstCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) data.
	
	secondCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) data.
	
	internalApi 
		add:  testObjectFactory itemSellByTheStore 
		toCart:  firstCartId 
		withQuantity:  3
		on: testObjectFactory today.
	
	internalApi 
		add:  testObjectFactory anotherItemSellByTheStore 
		toCart:  secondCartId 
		withQuantity:  4
		on: testObjectFactory today.
		
		expectedDetail _ Dictionary new.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedDetail add: testObjectFactory anotherItemSellByTheStore -> (testObjectFactory anotherItemSellByTheStorePrice * 4).
	
	expectedResponseData _ DetailedSale 
		of: (testObjectFactory itemSellByTheStorePrice * 3) + (testObjectFactory anotherItemSellByTheStorePrice * 4) 
		with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponseData equals: listPurchasesResponse data .! !

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:00:14'!
FAILURE!

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:00:14'!
FAILURE!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 16:01:27' prior: 51021028!
test24SuccessfullyListPurchasesOfUserWithMultipleCarts

	| firstCartId secondCartId listPurchasesResponse expectedDetail expectedResponseData |
	
	firstCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) data.
	
	secondCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) data.
	
	internalApi 
		add:  testObjectFactory itemSellByTheStore 
		toCart:  firstCartId 
		withQuantity:  3
		on: testObjectFactory today.
	
	internalApi 
		add:  testObjectFactory anotherItemSellByTheStore 
		toCart:  secondCartId 
		withQuantity:  4
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: firstCartId 
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: firstCartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	expectedDetail _ Dictionary new.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedDetail add: testObjectFactory anotherItemSellByTheStore -> (testObjectFactory anotherItemSellByTheStorePrice * 4).
	
	expectedResponseData _ DetailedSale 
		of: (testObjectFactory itemSellByTheStorePrice * 3) + (testObjectFactory anotherItemSellByTheStorePrice * 4) 
		with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponseData equals: listPurchasesResponse data .! !

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:01:50'!
FAILURE!

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:01:50'!
FAILURE!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 16:02:19' prior: 51021080!
test24SuccessfullyListPurchasesOfUserWithMultipleCarts

	| firstCartId secondCartId listPurchasesResponse expectedDetail expectedResponseData |
	
	firstCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) data.
	
	secondCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) data.
	
	internalApi 
		add:  testObjectFactory itemSellByTheStore 
		toCart:  firstCartId 
		withQuantity:  3
		on: testObjectFactory today.
	
	internalApi 
		add:  testObjectFactory anotherItemSellByTheStore 
		toCart:  secondCartId 
		withQuantity:  4
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: firstCartId 
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: secondCartId 
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	expectedDetail _ Dictionary new.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedDetail add: testObjectFactory anotherItemSellByTheStore -> (testObjectFactory anotherItemSellByTheStorePrice * 4).
	
	expectedResponseData _ DetailedSale 
		of: (testObjectFactory itemSellByTheStorePrice * 3) + (testObjectFactory anotherItemSellByTheStorePrice * 4) 
		with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponseData equals: listPurchasesResponse data .! !

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:02:24'!
FAILURE!

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:02:24'!
FAILURE!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 16:03:26' prior: 51021142!
test24SuccessfullyListPurchasesOfUserWithMultipleCarts

	| firstCartId secondCartId listPurchasesResponse expectedDetail expectedResponseData |
	
	firstCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) data.
	
	secondCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) data.
	
	internalApi 
		add:  testObjectFactory itemSellByTheStore 
		toCart:  firstCartId 
		withQuantity:  3
		on: testObjectFactory today.
	
	internalApi 
		add:  testObjectFactory anotherItemSellByTheStore 
		toCart:  secondCartId 
		withQuantity:  4
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: firstCartId 
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: secondCartId 
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.

	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedDetail add: testObjectFactory anotherItemSellByTheStore -> (testObjectFactory anotherItemSellByTheStorePrice * 4).
	
	expectedResponseData _ DetailedSale 
		of: (testObjectFactory itemSellByTheStorePrice * 3) + (testObjectFactory anotherItemSellByTheStorePrice * 4) 
		with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponseData equals: listPurchasesResponse data .! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 16:05:12' prior: 51018187!
addDetailedSaleTo: anUser of: anItemsCollection withCost: aCost
	
	| itemsWithPrice |
		
	self halt.	
	
	itemsWithPrice _ Dictionary new .
	
	anItemsCollection do: [ :item | (itemsWithPrice includesKey: item) ifFalse:
		 [ itemsWithPrice at: item put: ((self priceOf: item) * (anItemsCollection occurrencesOf: item)) ]
	].
	
	detailedSalePerUser at: anUser put: (DetailedSale of: aCost with: itemsWithPrice)
	
	! !

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:05:20'!
FAILURE!

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:05:20'!
FAILURE!

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:09:07'!
FAILURE!

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:09:07'!
FAILURE!

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:10:12'!
FAILURE!

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:10:12'!
FAILURE!
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 16:11:31' prior: 51020485!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	
	self halt. 
	
	^ self 
		ensureExecutionOf: 
		[
			| cart cashier checkoutId |
	
			[ cart _ carts at: aCartId ] 
				on: Error 
				do:[^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
				
			(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
			
			((cartsPerUser at: anUser) = aCartId) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
			
			[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
				on: Error 
				do: [ :error| ^ UnsuccessfulResponse with: error messageText].
				
			checkoutId _ self nextCheckOutId.
			
			self addDetailedSaleTo: anUser of: cart items withCost: cashier checkOut.
				
			^ SuccessfulResponse with: checkoutId.

		]
		withCart:  aCartId
		isValidOn: aDate
	
	! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 16:12:57' prior: 51021204!
test24SuccessfullyListPurchasesOfUserWithMultipleCarts

	| firstCartId secondCartId listPurchasesResponse expectedDetail expectedResponseData |
	
	firstCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) data.
	
	secondCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) data.
	
	self assertSuccessfullyResponse: (internalApi
		add:  testObjectFactory itemSellByTheStore 
		toCart:  firstCartId 
		withQuantity:  3
		on: testObjectFactory today) data.
	
	self assertSuccessfullyResponse: (internalApi
		add:  testObjectFactory anotherItemSellByTheStore 
		toCart:  secondCartId 
		withQuantity:  4
		on: testObjectFactory today) data.
		
	internalApi
		checkOutCart: firstCartId 
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: secondCartId 
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.

	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedDetail add: testObjectFactory anotherItemSellByTheStore -> (testObjectFactory anotherItemSellByTheStorePrice * 4).
	
	expectedResponseData _ DetailedSale 
		of: (testObjectFactory itemSellByTheStorePrice * 3) + (testObjectFactory anotherItemSellByTheStorePrice * 4) 
		with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponseData equals: listPurchasesResponse data .! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 16:13:21' prior: 51021333!
test24SuccessfullyListPurchasesOfUserWithMultipleCarts

	| firstCartId secondCartId listPurchasesResponse expectedDetail expectedResponseData |
	
	firstCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) data.
	
	secondCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) data.
	
	self assertSuccessfullyResponse: (internalApi
		add:  testObjectFactory itemSellByTheStore 
		toCart:  firstCartId 
		withQuantity:  3
		on: testObjectFactory today).
	
	self assertSuccessfullyResponse: (internalApi
		add:  testObjectFactory anotherItemSellByTheStore 
		toCart:  secondCartId 
		withQuantity:  4
		on: testObjectFactory today).
		
	internalApi
		checkOutCart: firstCartId 
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: secondCartId 
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.

	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedDetail add: testObjectFactory anotherItemSellByTheStore -> (testObjectFactory anotherItemSellByTheStorePrice * 4).
	
	expectedResponseData _ DetailedSale 
		of: (testObjectFactory itemSellByTheStorePrice * 3) + (testObjectFactory anotherItemSellByTheStorePrice * 4) 
		with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponseData equals: listPurchasesResponse data .! !
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 16:13:50' prior: 51021390!
test24SuccessfullyListPurchasesOfUserWithMultipleCarts

	| firstCartId secondCartId listPurchasesResponse expectedDetail expectedResponseData |
	
	firstCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) data.
	
	secondCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) data.
	
	self assertSuccessfullyResponse: (internalApi
		add:  testObjectFactory itemSellByTheStore 
		toCart:  firstCartId 
		withQuantity:  3
		on: testObjectFactory today).
	
	self assertSuccessfullyResponse: (internalApi
		add:  testObjectFactory anotherItemSellByTheStore 
		toCart:  secondCartId 
		withQuantity:  4
		on: testObjectFactory today).
		
	self assertSuccessfullyResponse: (internalApi 
		checkOutCart: firstCartId 
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today).
		
	self assertSuccessfullyResponse: (internalApi 
		checkOutCart: secondCartId 
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today).
		
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.

	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedDetail add: testObjectFactory anotherItemSellByTheStore -> (testObjectFactory anotherItemSellByTheStorePrice * 4).
	
	expectedResponseData _ DetailedSale 
		of: (testObjectFactory itemSellByTheStorePrice * 3) + (testObjectFactory anotherItemSellByTheStorePrice * 4) 
		with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponseData equals: listPurchasesResponse data .! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 16:14:10' prior: 51021298!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
		
	^ self 
		ensureExecutionOf: 
		[
			| cart cashier checkoutId |
	
			[ cart _ carts at: aCartId ] 
				on: Error 
				do:[^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
				
			(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
			
			((cartsPerUser at: anUser) = aCartId) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
			
			[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
				on: Error 
				do: [ :error| ^ UnsuccessfulResponse with: error messageText].
				
			checkoutId _ self nextCheckOutId.
			
			self addDetailedSaleTo: anUser of: cart items withCost: cashier checkOut.
				
			^ SuccessfulResponse with: checkoutId.

		]
		withCart:  aCartId
		isValidOn: aDate
	
	! !

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:14:16'!
FAILURE!

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:14:16'!
FAILURE!
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 16:15:04' prior: 51021505!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
		
	^ self 
		ensureExecutionOf: 
		[
			| cart cashier checkoutId |
	
			[ cart _ carts at: aCartId ] 
				on: Error 
				do:[^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription ].
				
			(self hasCartsOf: anUser) ifFalse: [ ^ UnsuccessfulResponse with: self class userHasNotCartsErrorDescription ].
			
			((cartsPerUser at: anUser) includes: aCartId) ifFalse: [ ^ UnsuccessfulResponse with: self class cartDoesNotBelongToUserErrorDescription ].
			
			[ cashier _ Cashier  toCheckout: cart  charging: aCreditCard  throught: merchantProcesor  on: aDate  registeringOn: OrderedCollection new ] 
				on: Error 
				do: [ :error| ^ UnsuccessfulResponse with: error messageText].
				
			checkoutId _ self nextCheckOutId.
			
			self addDetailedSaleTo: anUser of: cart items withCost: cashier checkOut.
				
			^ SuccessfulResponse with: checkoutId.

		]
		withCart:  aCartId
		isValidOn: aDate
	
	! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 16:15:18' prior: 51021258!
addDetailedSaleTo: anUser of: anItemsCollection withCost: aCost
	
	| itemsWithPrice |
			
	itemsWithPrice _ Dictionary new .
	
	anItemsCollection do: [ :item | (itemsWithPrice includesKey: item) ifFalse:
		 [ itemsWithPrice at: item put: ((self priceOf: item) * (anItemsCollection occurrencesOf: item)) ]
	].
	
	detailedSalePerUser at: anUser put: (DetailedSale of: aCost with: itemsWithPrice)
	
	! !
!DetailedSale methodsFor: 'nil' stamp: 'eb 12/3/2020 16:19:35'!
joinWith: aDetailedSale
	
	^ self new 
		initializeOf: (total + aDetailedSale total)
		with: (detail addAll: aDetailedSale detail)! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 16:22:01' prior: 51021581!
addDetailedSaleTo: anUser of: anItemsCollection withCost: aCost
	
	| currentDetailedSales itemsWithPrice |
			
	itemsWithPrice _ Dictionary new .
	
	anItemsCollection do: [ :item | (itemsWithPrice includesKey: item) ifFalse:
		 [ itemsWithPrice at: item put: ((self priceOf: item) * (anItemsCollection occurrencesOf: item)) ]
	].

	currentDetailedSales _ detailedSalePerUser at: anUser ifAbsent: OrderedCollection new .
	
	detailedSalePerUser at: anUser put: (DetailedSale of: aCost with: itemsWithPrice)
	
	! !
!InternalAPI methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 16:22:21' prior: 51021603!
addDetailedSaleTo: anUser of: anItemsCollection withCost: aCost
	
	| currentDetailedSales itemsWithPrice |
			
	itemsWithPrice _ Dictionary new .
	
	anItemsCollection do: [ :item | (itemsWithPrice includesKey: item) ifFalse:
		 [ itemsWithPrice at: item put: ((self priceOf: item) * (anItemsCollection occurrencesOf: item)) ]
	].

	currentDetailedSales _ detailedSalePerUser at: anUser ifAbsent: OrderedCollection new .
	
	currentDetailedSales add: (DetailedSale of: aCost with: itemsWithPrice).
	
	detailedSalePerUser at: anUser put: currentDetailedSales .
	
	! !

!classDefinition: #InternalAPI category: #TusLibros stamp: 'eb 12/3/2020 16:22:33'!
Object subclass: #InternalAPI
	instanceVariableNames: 'users nextCartId carts date lastUsagePerCart cartsPerUser catalog merchantProcesor nextCheckOutId purchases detailedSalesPerUser'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 16:22:33' prior: 51020236!
initializeWith: aUsersCollection on: aDate usingCatalog: aCatalog usingMerchantProccesor: aMerchantProccesor
	users _ aUsersCollection.
	date _ aDate.
	catalog _ aCatalog.
	merchantProcesor _ aMerchantProccesor.
	carts _ Dictionary new.
	cartsPerUser _ Dictionary new.
	lastUsagePerCart _ Dictionary new.
	detailedSalesPerUser _ Dictionary new .
	nextCartId _ 0.
	nextCheckOutId _ 0.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 16:22:33' prior: 51019002!
listPurchasesOf: anUser with: aPassword

	| detailedSale |
	
	[ self ensureUser:  anUser isRegisteredWith: aPassword. ]
		on: Error
		do: [ :error | ^ UnsuccessfulResponse with: error messageText ].
	
	detailedSale  _ detailedSalesPerUser at: anUser ifAbsent: 
		[ ^ UnsuccessfulResponse with: self class canNotQueryListPurchasesWithoutUserCheckoutErrorDescription ].
 
	^ SuccessfulResponse with: detailedSale.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'eb 12/3/2020 16:22:33' prior: 51021622!
addDetailedSaleTo: anUser of: anItemsCollection withCost: aCost
	
	| currentDetailedSales itemsWithPrice |
			
	itemsWithPrice _ Dictionary new .
	
	anItemsCollection do: [ :item | (itemsWithPrice includesKey: item) ifFalse:
		 [ itemsWithPrice at: item put: ((self priceOf: item) * (anItemsCollection occurrencesOf: item)) ]
	].

	currentDetailedSales _ detailedSalesPerUser at: anUser ifAbsent: OrderedCollection new .
	
	currentDetailedSales add: (DetailedSale of: aCost with: itemsWithPrice).
	
	detailedSalesPerUser at: anUser put: currentDetailedSales .
	
	! !
!InternalAPI methodsFor: 'list purchases' stamp: 'eb 12/3/2020 16:22:53' prior: 51021670!
listPurchasesOf: anUser with: aPassword

	| detailedSales |
	
	[ self ensureUser:  anUser isRegisteredWith: aPassword. ]
		on: Error
		do: [ :error | ^ UnsuccessfulResponse with: error messageText ].
	
	detailedSales  _ detailedSalesPerUser at: anUser ifAbsent: 
		[ ^ UnsuccessfulResponse with: self class canNotQueryListPurchasesWithoutUserCheckoutErrorDescription ].
 
	^ SuccessfulResponse with: detailedSales.! !
!DetailedSale class methodsFor: 'nil' stamp: 'eb 12/3/2020 16:23:51'!
joining: aDetailedSaleCollection! !
!InternalAPI methodsFor: 'list purchases' stamp: 'eb 12/3/2020 16:24:19' prior: 51021707!
listPurchasesOf: anUser with: aPassword

	| detailedSales |
	
	[ self ensureUser:  anUser isRegisteredWith: aPassword. ]
		on: Error
		do: [ :error | ^ UnsuccessfulResponse with: error messageText ].
	
	detailedSales  _ detailedSalesPerUser at: anUser ifAbsent: 
		[ ^ UnsuccessfulResponse with: self class canNotQueryListPurchasesWithoutUserCheckoutErrorDescription ].
 
	^ SuccessfulResponse with: (DetailedSale joining: detailedSales).! !
!DetailedSale class methodsFor: 'instance creation' stamp: 'eb 12/3/2020 16:25:07' prior: 51021723!
joining: aDetailedSaleCollection

	| detailedSale |
	
	detailedSale _ self of: 0 with: OrderedCollection new.! !
!DetailedSale class methodsFor: 'instance creation' stamp: 'eb 12/3/2020 16:25:19'!
empty

	^ self of: 0 with: OrderedCollection new! !
!DetailedSale class methodsFor: 'instance creation' stamp: 'eb 12/3/2020 16:25:19' prior: 51021744!
joining: aDetailedSaleCollection

	| detailedSale |
	
	detailedSale _ self empty.! !
!DetailedSale class methodsFor: 'instance creation' stamp: 'eb 12/3/2020 16:25:56' prior: 51021756!
joining: aDetailedSaleCollection

	| detailedSale |
	
	detailedSale _ self empty.
	
	aDetailedSaleCollection do: [ :aDetailedSale | detailedSale _ detailedSale joinWith: aDetailedSale ].
	
	^ detailedSale .! !

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:26:03'!
ERROR!

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:26:03'!
ERROR!

!testRun: #InternalAPITest #test18CannotQueryListPurchasesWithoutUserCheckout stamp: 'eb 12/3/2020 16:26:14'!
PASSED!

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/3/2020 16:26:15'!
ERROR!

!testRun: #InternalAPITest #test20SuccesfullyListPurchasesOfCartWithManyItemsOfSameType stamp: 'eb 12/3/2020 16:26:15'!
ERROR!

!testRun: #InternalAPITest #test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes stamp: 'eb 12/3/2020 16:26:15'!
ERROR!

!testRun: #InternalAPITest #test23CannotQueryListPurchasesWithInvalidCredentials stamp: 'eb 12/3/2020 16:26:15'!
PASSED!

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:26:15'!
ERROR!

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:26:20'!
ERROR!

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:26:20'!
ERROR!
!DetailedSale methodsFor: 'joining' stamp: 'eb 12/3/2020 16:26:48' prior: 51021596!
joinWith: aDetailedSale
	
	^ self class of: (total + aDetailedSale total) with: (detail addAll: aDetailedSale detail)! !

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:26:50'!
FAILURE!

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:26:50'!
FAILURE!
!DetailedSale methodsFor: 'joining' stamp: 'eb 12/3/2020 16:27:53' prior: 51021810!
joinWith: aDetailedSale
	
	^ self class of: (self total + aDetailedSale total) with: (self detail addAll: aDetailedSale detail)! !

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:28:01'!
FAILURE!

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:28:01'!
FAILURE!
!DetailedSale methodsFor: 'joining' stamp: 'eb 12/3/2020 16:30:41' prior: 51021825!
joinWith: aDetailedSale
	
	self halt.
	
	^ self class of: (self total + aDetailedSale total) with: (self detail addAll: aDetailedSale detail)! !

(self detail addAll: aDetailedSale detail)!

(self total + aDetailedSale total)!

self detail!

aDetailedSale detail!

(self detail addAll: aDetailedSale detail)!

(self detail addAll: aDetailedSale detail; yourself)!
!DetailedSale methodsFor: 'joining' stamp: 'eb 12/3/2020 16:32:27' prior: 51021840!
joinWith: aDetailedSale
	
	self halt.
	
	^ self class of: (self total + aDetailedSale total) with: (self detail addAll: aDetailedSale detail; yourself)! !
!DetailedSale methodsFor: 'joining' stamp: 'eb 12/3/2020 16:33:29' prior: 51021854!
joinWith: aDetailedSale
		
	^ self class of: (self total + aDetailedSale total) with: (self detail addAll: aDetailedSale detail; yourself)! !

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:33:33'!
FAILURE!

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:33:33'!
FAILURE!
!DetailedSale methodsFor: 'joining' stamp: 'eb 12/3/2020 16:34:37' prior: 51021862!
joinWith: aDetailedSale

	| joinedDetail |
	
	joinedDetail _ self detail.
	
	joinedDetail addAll: aDetailedSale detail.
		
	^ self class of: (self total + aDetailedSale total) with: joinedDetail! !
!DetailedSale methodsFor: 'joining' stamp: 'eb 12/3/2020 16:34:42' prior: 51021877!
joinWith: aDetailedSale

	| joinedDetail |
	
	joinedDetail _ self detail.
	
	joinedDetail addAll: aDetailedSale detail.
		
	^ self class of: (total + aDetailedSale total) with: joinedDetail! !

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:34:46'!
FAILURE!

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:34:46'!
FAILURE!

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:34:57'!
FAILURE!

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:34:57'!
FAILURE!
!DetailedSale methodsFor: 'joining' stamp: 'eb 12/3/2020 16:32:27' prior: 51021886!
joinWith: aDetailedSale
	
	self halt.
	
	^ self class of: (self total + aDetailedSale total) with: (self detail addAll: aDetailedSale detail; yourself)! !
!DetailedSale methodsFor: 'joining' stamp: 'eb 12/3/2020 16:35:25' prior: 51021911!
joinWith: aDetailedSale
	
	^ self class of: (self total + aDetailedSale total) with: (self detail addAll: aDetailedSale detail; yourself)! !
!DetailedSale methodsFor: 'joining' stamp: 'eb 12/3/2020 16:36:55' prior: 51021919!
joinWith: aDetailedSale
	
	| joinedDetail |
	
	detail do: [ :detailItem | ].

	
	^ self class of: (self total + aDetailedSale total) with: joinedDetail.! !
!DetailedSale methodsFor: 'joining' stamp: 'eb 12/3/2020 16:37:21' prior: 51021927!
joinWith: aDetailedSale
	
	| joinedDetail |
	
	joinedDetail _ Dictionary new .
	
	detail do: [ :detailItem | ].

	
	^ self class of: (self total + aDetailedSale total) with: joinedDetail.! !
!DetailedSale methodsFor: 'joining' stamp: 'eb 12/3/2020 16:37:38' prior: 51021935!
joinWith: aDetailedSale
	
	| joinedDetail |
	
	joinedDetail _ Dictionary new .
	
	detail do: [ :detailItem | self add: detailItem to: joinedDetail ].

	
	^ self class of: (self total + aDetailedSale total) with: joinedDetail.! !
!DetailedSale methodsFor: 'joining' stamp: 'eb 12/3/2020 16:37:56' prior: 51021944!
joinWith: aDetailedSale
	
	| joinedDetail |
	
	joinedDetail _ Dictionary new .
	
	detail do: [ :detailItem | self add: detailItem to: joinedDetail ].

	aDetailedSale detail do: [ :detailItem | self add: detailItem to: joinedDetail ].
	
	^ self class of: (self total + aDetailedSale total) with: joinedDetail.! !
!DetailedSale methodsFor: 'joining' stamp: 'eb 12/3/2020 16:38:41'!
add: aKeyValuePair to: aDictionary

	
	
	! !
!DetailedSale methodsFor: 'joining' stamp: 'eb 12/3/2020 16:39:10' prior: 51021966!
add: aKeyValuePair to: aDictionary

	(aDictionary includesKey: aKeyValuePair key)
		ifTrue: []
		ifFalse: [].
	
	! !
!DetailedSale methodsFor: 'joining' stamp: 'eb 12/3/2020 16:39:26' prior: 51021971!
add: aDetailItem to: aDetail

	(aDetail includesKey: aDetailItem key)
		ifTrue: []
		ifFalse: [].
	
	! !
!DetailedSale methodsFor: 'joining' stamp: 'eb 12/3/2020 16:41:10' prior: 51021978!
add: aDetailItemKeyAndValue to: aDetail

	| currentDetailItem |
	
	currentDetailItem _ aDetail at: aDetailItemKeyAndValue key ifAbsent: 0.
	
	currentDetailItem = currentDetailItem + aDetailItemKeyAndValue value.
	
	aDetail at: aDetailItemKeyAndValue key put: currentDetailItem.
	
	! !

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:41:14'!
ERROR!

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:41:14'!
ERROR!
!DetailedSale methodsFor: 'joining' stamp: 'eb 12/3/2020 16:42:33' prior: 51021954!
joinWith: aDetailedSale
	
	| joinedDetail |
	
	joinedDetail _ Dictionary new .
	
	self addItemsFrom: detail to: joinedDetail.
	
	self addItemsFrom: aDetailedSale detail  to: joinedDetail.
	
	^ self class of: (self total + aDetailedSale total) with: joinedDetail.! !
!DetailedSale methodsFor: 'joining' stamp: 'eb 12/3/2020 16:43:08'!
addItemsFrom: anItemsDictionary to: anotherItemsDictionary! !
!DetailedSale methodsFor: 'joining' stamp: 'eb 12/3/2020 16:43:34'!
add: aDetailItemValue to: aDetail at: aDetailItemKey

	| currentDetailItem |
	
	currentDetailItem _ aDetail at: aDetailItemKey ifAbsent: 0.
	
	currentDetailItem = currentDetailItem + aDetailItemValue.
	
	aDetail at: aDetailItemKey key put: currentDetailItem.
	
	! !
!DetailedSale methodsFor: 'joining' stamp: 'eb 12/3/2020 16:43:38' prior: 51022020!
add: aDetailItemValue to: aDetail at: aDetailItemKey

	| currentDetailItem |
	
	currentDetailItem _ aDetail at: aDetailItemKey ifAbsent: 0.
	
	currentDetailItem = currentDetailItem + aDetailItemValue.
	
	aDetail at: aDetailItemKey put: currentDetailItem.
	
	! !

!methodRemoval: DetailedSale #add:to: stamp: 'eb 12/3/2020 16:43:43'!
add: aDetailItemKeyAndValue to: aDetail

	| currentDetailItem |
	
	currentDetailItem _ aDetail at: aDetailItemKeyAndValue key ifAbsent: 0.
	
	currentDetailItem = currentDetailItem + aDetailItemKeyAndValue value.
	
	aDetail at: aDetailItemKeyAndValue key put: currentDetailItem.
	
	!
!DetailedSale methodsFor: 'joining' stamp: 'eb 12/3/2020 16:44:38' prior: 51022015!
addItemsFrom: anItemsDictionary to: anotherItemsDictionary

	anItemsDictionary keys do: [ :anItemKey | 
		self add: (anItemsDictionary at: anItemKey) to: anotherItemsDictionary at: anItemKey].! !

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:44:45'!
ERROR!

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:44:45'!
ERROR!
!DetailedSale class methodsFor: 'instance creation' stamp: 'eb 12/3/2020 16:45:12' prior: 51021751!
empty

	^ self of: 0 with: Dictionary new! !
!DetailedSale methodsFor: 'joining' stamp: 'eb 12/3/2020 16:45:46' prior: 51022004!
joinWith: aDetailedSale
	
	| joinedDetail |
	
	joinedDetail _ Dictionary new .
	
	self addItemsFrom: detail to: joinedDetail.
	
	self addItemsFrom: aDetailedSale detail  to: joinedDetail.
	
	^ self class of: (self total + aDetailedSale total) with: joinedDetail.! !

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:45:59'!
ERROR!

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:45:59'!
ERROR!
!DetailedSale methodsFor: 'joining' stamp: 'eb 12/3/2020 16:46:29' prior: 51022031!
add: aDetailItemValue to: aDetail at: aDetailItemKey

	| currentDetailItem |
	
	currentDetailItem _ aDetail at: aDetailItemKey ifAbsent: 0.
	
	currentDetailItem _ currentDetailItem + aDetailItemValue.
	
	aDetail at: aDetailItemKey put: currentDetailItem.
	
	! !

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:46:36'!
PASSED!

!testRun: #InternalAPITest #test18CannotQueryListPurchasesWithoutUserCheckout stamp: 'eb 12/3/2020 16:46:39'!
PASSED!

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/3/2020 16:46:39'!
PASSED!

!testRun: #InternalAPITest #test20SuccesfullyListPurchasesOfCartWithManyItemsOfSameType stamp: 'eb 12/3/2020 16:46:39'!
PASSED!

!testRun: #InternalAPITest #test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes stamp: 'eb 12/3/2020 16:46:39'!
PASSED!

!testRun: #InternalAPITest #test23CannotQueryListPurchasesWithInvalidCredentials stamp: 'eb 12/3/2020 16:46:39'!
PASSED!

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:46:39'!
PASSED!

!testRun: #InternalAPITest #test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword stamp: 'eb 12/3/2020 16:46:43'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdsPerCustomer stamp: 'eb 12/3/2020 16:46:43'!
PASSED!

!testRun: #InternalAPITest #test03CreateCartIsUnsuccessfullyWithUnregisteredClientId stamp: 'eb 12/3/2020 16:46:43'!
PASSED!

!testRun: #InternalAPITest #test04CreateCartSuccessfullyEffectivlyCreatesCart stamp: 'eb 12/3/2020 16:46:43'!
PASSED!

!testRun: #InternalAPITest #test05AddToCartIsSuccessfullyWithValidCartId stamp: 'eb 12/3/2020 16:46:43'!
PASSED!

!testRun: #InternalAPITest #test05UsersCouldHaveMultipleCarts stamp: 'eb 12/3/2020 16:46:43'!
PASSED!

!testRun: #InternalAPITest #test06AddToCartSuccessfullyEffectivlyAddsToCart stamp: 'eb 12/3/2020 16:46:43'!
PASSED!

!testRun: #InternalAPITest #test07AddToCartIsUnsuccessfullyWithInvalidCartId stamp: 'eb 12/3/2020 16:46:43'!
PASSED!

!testRun: #InternalAPITest #test08AddToCartIsUnsuccessfullyWithIvalidISBN stamp: 'eb 12/3/2020 16:46:43'!
PASSED!

!testRun: #InternalAPITest #test09ListCartWithEmptyCart stamp: 'eb 12/3/2020 16:46:43'!
PASSED!

!testRun: #InternalAPITest #test10ListCartWithNotEmptyCart stamp: 'eb 12/3/2020 16:46:43'!
PASSED!

!testRun: #InternalAPITest #test11ListCartWithInvalidCart stamp: 'eb 12/3/2020 16:46:43'!
PASSED!

!testRun: #InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/3/2020 16:46:43'!
PASSED!

!testRun: #InternalAPITest #test13CheckOutIsUnsuccessfullyWithEmptyCart stamp: 'eb 12/3/2020 16:46:43'!
PASSED!

!testRun: #InternalAPITest #test14CheckOutIsUnsuccessfullyWithInvalidCart stamp: 'eb 12/3/2020 16:46:43'!
PASSED!

!testRun: #InternalAPITest #test15CheckOutIsUnsuccessfullyWithExpiredCreditCard stamp: 'eb 12/3/2020 16:46:43'!
PASSED!

!testRun: #InternalAPITest #test16CheckOutIsUnsuccessfullyWithInvalidUser stamp: 'eb 12/3/2020 16:46:43'!
PASSED!

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/3/2020 16:46:43'!
PASSED!

!testRun: #InternalAPITest #test18CannotQueryListPurchasesWithoutUserCheckout stamp: 'eb 12/3/2020 16:46:43'!
PASSED!

!testRun: #InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/3/2020 16:46:43'!
PASSED!

!testRun: #InternalAPITest #test20SuccesfullyListPurchasesOfCartWithManyItemsOfSameType stamp: 'eb 12/3/2020 16:46:43'!
PASSED!

!testRun: #InternalAPITest #test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes stamp: 'eb 12/3/2020 16:46:43'!
PASSED!

!testRun: #InternalAPITest #test23CannotQueryListPurchasesWithInvalidCredentials stamp: 'eb 12/3/2020 16:46:43'!
PASSED!

!testRun: #InternalAPITest #test24CannotAddToExpiredCart stamp: 'eb 12/3/2020 16:46:43'!
PASSED!

!testRun: #InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:46:43'!
PASSED!

!testRun: #InternalAPITest #test25CannotListExpiredCart stamp: 'eb 12/3/2020 16:46:43'!
PASSED!

!testRun: #InternalAPITest #test26CannotCheckoutExpiredCart stamp: 'eb 12/3/2020 16:46:43'!
PASSED!
!InternalAPIResponse methodsFor: 'initialization' stamp: 'eb 12/3/2020 16:49:36' prior: 51019662!
initializeWith: aData

	data _ aData! !
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/3/2020 16:49:57'!
test06AddToCartIsSuccessfullyWithValidCartId
	| addResponse |
	
	addResponse _ self successfullyAddResponseFor: self validCartId. 

	self assertSuccessfullyResponse: addResponse .
	self assert: addResponse data equals: 'OK'.
	! !

!methodRemoval: InternalAPITest #test05AddToCartIsSuccessfullyWithValidCartId stamp: 'eb 12/3/2020 16:49:57'!
test05AddToCartIsSuccessfullyWithValidCartId
	| addResponse |
	
	addResponse _ self successfullyAddResponseFor: self validCartId. 

	self assertSuccessfullyResponse: addResponse .
	self assert: addResponse data equals: 'OK'.
	!
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/3/2020 16:50:00'!
test07AddToCartSuccessfullyEffectivlyAddsToCart
	| cartId |
	
	cartId _ self validCartId.
	
	self successfullyAddResponseFor: cartId. 
	self assertSuccessfullyAddResponseAddsItemsCorrectlyFor: cartId.
! !

!methodRemoval: InternalAPITest #test06AddToCartSuccessfullyEffectivlyAddsToCart stamp: 'eb 12/3/2020 16:50:01'!
test06AddToCartSuccessfullyEffectivlyAddsToCart
	| cartId |
	
	cartId _ self validCartId.
	
	self successfullyAddResponseFor: cartId. 
	self assertSuccessfullyAddResponseAddsItemsCorrectlyFor: cartId.
!
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/3/2020 16:50:09'!
test08AddToCartSuccessfullyEffectivlyAddsToCart
	| cartId |
	
	cartId _ self validCartId.
	
	self successfullyAddResponseFor: cartId. 
	self assertSuccessfullyAddResponseAddsItemsCorrectlyFor: cartId.
! !

!methodRemoval: InternalAPITest #test07AddToCartSuccessfullyEffectivlyAddsToCart stamp: 'eb 12/3/2020 16:50:09'!
test07AddToCartSuccessfullyEffectivlyAddsToCart
	| cartId |
	
	cartId _ self validCartId.
	
	self successfullyAddResponseFor: cartId. 
	self assertSuccessfullyAddResponseAddsItemsCorrectlyFor: cartId.
!
!InternalAPITest methodsFor: 'add to cart' stamp: 'eb 12/3/2020 16:50:13'!
test09AddToCartSuccessfullyEffectivlyAddsToCart
	| cartId |
	
	cartId _ self validCartId.
	
	self successfullyAddResponseFor: cartId. 
	self assertSuccessfullyAddResponseAddsItemsCorrectlyFor: cartId.
! !

!methodRemoval: InternalAPITest #test08AddToCartSuccessfullyEffectivlyAddsToCart stamp: 'eb 12/3/2020 16:50:13'!
test08AddToCartSuccessfullyEffectivlyAddsToCart
	| cartId |
	
	cartId _ self validCartId.
	
	self successfullyAddResponseFor: cartId. 
	self assertSuccessfullyAddResponseAddsItemsCorrectlyFor: cartId.
!
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/3/2020 16:50:17'!
test10ListCartWithEmptyCart
	| cartId listCartResponse |
	cartId _ self validCartId .	
	
	listCartResponse _ internalApi listCart: cartId.
	
	self assertSuccessfullyResponse: listCartResponse.
	self assert: listCartResponse data isEmpty.

	! !

!methodRemoval: InternalAPITest #test09ListCartWithEmptyCart stamp: 'eb 12/3/2020 16:50:17'!
test09ListCartWithEmptyCart
	| cartId listCartResponse |
	cartId _ self validCartId .	
	
	listCartResponse _ internalApi listCart: cartId.
	
	self assertSuccessfullyResponse: listCartResponse.
	self assert: listCartResponse data isEmpty.

	!
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/3/2020 16:50:23'!
test11ListCartWithNotEmptyCart
	| cartId listCartResponse targetElements |
	cartId _ self validCartId .	
	
	self successfullyAddResponseFor: cartId.
		
	targetElements _ Bag new.
	
	targetElements  add: testObjectFactory itemSellByTheStore withOccurrences: 3. 
	
	listCartResponse _ internalApi listCart: cartId.
	
	self assertSuccessfullyResponse: listCartResponse .
	self assert: targetElements equals: listCartResponse data .
	! !

!methodRemoval: InternalAPITest #test10ListCartWithNotEmptyCart stamp: 'eb 12/3/2020 16:50:23'!
test10ListCartWithNotEmptyCart
	| cartId listCartResponse targetElements |
	cartId _ self validCartId .	
	
	self successfullyAddResponseFor: cartId.
		
	targetElements _ Bag new.
	
	targetElements  add: testObjectFactory itemSellByTheStore withOccurrences: 3. 
	
	listCartResponse _ internalApi listCart: cartId.
	
	self assertSuccessfullyResponse: listCartResponse .
	self assert: targetElements equals: listCartResponse data .
	!
!InternalAPITest methodsFor: 'list cart' stamp: 'eb 12/3/2020 16:50:26'!
test12ListCartWithNotEmptyCart
	| cartId listCartResponse targetElements |
	cartId _ self validCartId .	
	
	self successfullyAddResponseFor: cartId.
		
	targetElements _ Bag new.
	
	targetElements  add: testObjectFactory itemSellByTheStore withOccurrences: 3. 
	
	listCartResponse _ internalApi listCart: cartId.
	
	self assertSuccessfullyResponse: listCartResponse .
	self assert: targetElements equals: listCartResponse data .
	! !

!methodRemoval: InternalAPITest #test11ListCartWithNotEmptyCart stamp: 'eb 12/3/2020 16:50:26'!
test11ListCartWithNotEmptyCart
	| cartId listCartResponse targetElements |
	cartId _ self validCartId .	
	
	self successfullyAddResponseFor: cartId.
		
	targetElements _ Bag new.
	
	targetElements  add: testObjectFactory itemSellByTheStore withOccurrences: 3. 
	
	listCartResponse _ internalApi listCart: cartId.
	
	self assertSuccessfullyResponse: listCartResponse .
	self assert: targetElements equals: listCartResponse data .
	!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 16:50:42'!
test13CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
		
	checkoutResponse _ internalApi 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: checkoutResponse.
	
	self assert: 1 equals: checkoutResponse data .
! !

!methodRemoval: InternalAPITest #test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/3/2020 16:50:42'!
test12CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser
	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
		
	checkoutResponse _ internalApi 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertSuccessfullyResponse: checkoutResponse.
	
	self assert: 1 equals: checkoutResponse data .
!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 16:50:46'!
test14CheckOutIsUnsuccessfullyWithEmptyCart

	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
			
	checkoutResponse _ internalApi 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: Cashier cartCanNotBeEmptyErrorMessage equals: checkoutResponse data .! !

!methodRemoval: InternalAPITest #test13CheckOutIsUnsuccessfullyWithEmptyCart stamp: 'eb 12/3/2020 16:50:46'!
test13CheckOutIsUnsuccessfullyWithEmptyCart

	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
			
	checkoutResponse _ internalApi 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: Cashier cartCanNotBeEmptyErrorMessage equals: checkoutResponse data .!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 16:50:50'!
test15CheckOutIsUnsuccessfullyWithInvalidCart

	| cartId checkoutResponse |
 		
	cartId _ self invalidCartId .
			
	checkoutResponse _ internalApi 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI cartNotRegisteredErrorDescription equals: checkoutResponse data .! !

!methodRemoval: InternalAPITest #test14CheckOutIsUnsuccessfullyWithInvalidCart stamp: 'eb 12/3/2020 16:50:50'!
test14CheckOutIsUnsuccessfullyWithInvalidCart

	| cartId checkoutResponse |
 		
	cartId _ self invalidCartId .
			
	checkoutResponse _ internalApi 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI cartNotRegisteredErrorDescription equals: checkoutResponse data .!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 16:50:56'!
test16CheckOutIsUnsuccessfullyWithInvalidCart

	| cartId checkoutResponse |
 		
	cartId _ self invalidCartId .
			
	checkoutResponse _ internalApi 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI cartNotRegisteredErrorDescription equals: checkoutResponse data .! !

!methodRemoval: InternalAPITest #test15CheckOutIsUnsuccessfullyWithInvalidCart stamp: 'eb 12/3/2020 16:50:56'!
test15CheckOutIsUnsuccessfullyWithInvalidCart

	| cartId checkoutResponse |
 		
	cartId _ self invalidCartId .
			
	checkoutResponse _ internalApi 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI cartNotRegisteredErrorDescription equals: checkoutResponse data .!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 16:50:59'!
test17CheckOutIsUnsuccessfullyWithInvalidUser

	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
			
	checkoutResponse _ internalApi 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Steve Jobs'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI userHasNotCartsErrorDescription equals: checkoutResponse data .! !

!methodRemoval: InternalAPITest #test16CheckOutIsUnsuccessfullyWithInvalidUser stamp: 'eb 12/3/2020 16:50:59'!
test16CheckOutIsUnsuccessfullyWithInvalidUser

	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
			
	checkoutResponse _ internalApi 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Steve Jobs'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI userHasNotCartsErrorDescription equals: checkoutResponse data .!
!InternalAPITest methodsFor: 'checkout cart' stamp: 'eb 12/3/2020 16:51:02'!
test18CheckOutIsUnsuccessfullyWithInvalidUser

	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
			
	checkoutResponse _ internalApi 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Steve Jobs'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI userHasNotCartsErrorDescription equals: checkoutResponse data .! !

!methodRemoval: InternalAPITest #test17CheckOutIsUnsuccessfullyWithInvalidUser stamp: 'eb 12/3/2020 16:51:02'!
test17CheckOutIsUnsuccessfullyWithInvalidUser

	| cartId checkoutResponse |
 		
	cartId _ self validCartId .
	
	self successfullyAddResponseFor: cartId.
			
	checkoutResponse _ internalApi 
		checkOutCart: cartId  
		withCreditCard: testObjectFactory notExpiredCreditCard 
		ofOwner:  'Steve Jobs'
		on: testObjectFactory today.
		
	self assertUnsuccesfullyResponse: checkoutResponse.
	
	self assert: InternalAPI userHasNotCartsErrorDescription equals: checkoutResponse data .!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 16:51:08'!
test19CannotQueryListPurchasesWithoutUserCheckout

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertUnsuccesfullyResponse: listPurchasesResponse .
	
	self assert: InternalAPI canNotQueryListPurchasesWithoutUserCheckoutErrorDescription equals: listPurchasesResponse data .
	! !

!methodRemoval: InternalAPITest #test18CannotQueryListPurchasesWithoutUserCheckout stamp: 'eb 12/3/2020 16:51:08'!
test18CannotQueryListPurchasesWithoutUserCheckout

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	self assertUnsuccesfullyResponse: listPurchasesResponse .
	
	self assert: InternalAPI canNotQueryListPurchasesWithoutUserCheckoutErrorDescription equals: listPurchasesResponse data .
	!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 16:51:12'!
test20SuccesfullyListPurchasesOfCartWithOnlyOneItem

	| cartId listPurchasesResponse expectedDetail expectedResponsePayload |
	
	cartId _ self validCartId .
	
	internalApi
		add: testObjectFactory itemSellByTheStore 
		toCart: cartId
		withQuantity: 1
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> testObjectFactory itemSellByTheStorePrice.
	
	expectedResponsePayload _ DetailedSale of: testObjectFactory itemSellByTheStorePrice  with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse data .
	! !

!methodRemoval: InternalAPITest #test19SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/3/2020 16:51:12'!
test19SuccesfullyListPurchasesOfCartWithOnlyOneItem

	| cartId listPurchasesResponse expectedDetail expectedResponsePayload |
	
	cartId _ self validCartId .
	
	internalApi
		add: testObjectFactory itemSellByTheStore 
		toCart: cartId
		withQuantity: 1
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> testObjectFactory itemSellByTheStorePrice.
	
	expectedResponsePayload _ DetailedSale of: testObjectFactory itemSellByTheStorePrice  with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse data .
	!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 16:51:15'!
test21SuccesfullyListPurchasesOfCartWithOnlyOneItem

	| cartId listPurchasesResponse expectedDetail expectedResponsePayload |
	
	cartId _ self validCartId .
	
	internalApi
		add: testObjectFactory itemSellByTheStore 
		toCart: cartId
		withQuantity: 1
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> testObjectFactory itemSellByTheStorePrice.
	
	expectedResponsePayload _ DetailedSale of: testObjectFactory itemSellByTheStorePrice  with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse data .
	! !

!methodRemoval: InternalAPITest #test20SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/3/2020 16:51:15'!
test20SuccesfullyListPurchasesOfCartWithOnlyOneItem

	| cartId listPurchasesResponse expectedDetail expectedResponsePayload |
	
	cartId _ self validCartId .
	
	internalApi
		add: testObjectFactory itemSellByTheStore 
		toCart: cartId
		withQuantity: 1
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> testObjectFactory itemSellByTheStorePrice.
	
	expectedResponsePayload _ DetailedSale of: testObjectFactory itemSellByTheStorePrice  with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse data .
	!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 16:51:19'!
test22SuccesfullyListPurchasesOfCartWithOnlyOneItem

	| cartId listPurchasesResponse expectedDetail expectedResponsePayload |
	
	cartId _ self validCartId .
	
	internalApi
		add: testObjectFactory itemSellByTheStore 
		toCart: cartId
		withQuantity: 1
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> testObjectFactory itemSellByTheStorePrice.
	
	expectedResponsePayload _ DetailedSale of: testObjectFactory itemSellByTheStorePrice  with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse data .
	! !

!methodRemoval: InternalAPITest #test21SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/3/2020 16:51:19'!
test21SuccesfullyListPurchasesOfCartWithOnlyOneItem

	| cartId listPurchasesResponse expectedDetail expectedResponsePayload |
	
	cartId _ self validCartId .
	
	internalApi
		add: testObjectFactory itemSellByTheStore 
		toCart: cartId
		withQuantity: 1
		on: testObjectFactory today.
		
	internalApi
		checkOutCart: cartId
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today.
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.
	
	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> testObjectFactory itemSellByTheStorePrice.
	
	expectedResponsePayload _ DetailedSale of: testObjectFactory itemSellByTheStorePrice  with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponsePayload equals: listPurchasesResponse data .
	!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 16:51:25'!
test24CannotQueryListPurchasesWithInvalidCredentials

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'java'.
	
	self assertUnsuccesfullyResponse: listPurchasesResponse .
	
	self assert: InternalAPI incorrectPasswordErrorDescription 
		equals: listPurchasesResponse data .
	! !

!methodRemoval: InternalAPITest #test23CannotQueryListPurchasesWithInvalidCredentials stamp: 'eb 12/3/2020 16:51:25'!
test23CannotQueryListPurchasesWithInvalidCredentials

	| listPurchasesResponse |
	
	self validCartId .
	
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'java'.
	
	self assertUnsuccesfullyResponse: listPurchasesResponse .
	
	self assert: InternalAPI incorrectPasswordErrorDescription 
		equals: listPurchasesResponse data .
	!
!InternalAPITest methodsFor: 'list purchases' stamp: 'eb 12/3/2020 16:51:28'!
test25SuccessfullyListPurchasesOfUserWithMultipleCarts

	| firstCartId secondCartId listPurchasesResponse expectedDetail expectedResponseData |
	
	firstCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) data.
	
	secondCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) data.
	
	self assertSuccessfullyResponse: (internalApi
		add:  testObjectFactory itemSellByTheStore 
		toCart:  firstCartId 
		withQuantity:  3
		on: testObjectFactory today).
	
	self assertSuccessfullyResponse: (internalApi
		add:  testObjectFactory anotherItemSellByTheStore 
		toCart:  secondCartId 
		withQuantity:  4
		on: testObjectFactory today).
		
	self assertSuccessfullyResponse: (internalApi 
		checkOutCart: firstCartId 
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today).
		
	self assertSuccessfullyResponse: (internalApi 
		checkOutCart: secondCartId 
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today).
		
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.

	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedDetail add: testObjectFactory anotherItemSellByTheStore -> (testObjectFactory anotherItemSellByTheStorePrice * 4).
	
	expectedResponseData _ DetailedSale 
		of: (testObjectFactory itemSellByTheStorePrice * 3) + (testObjectFactory anotherItemSellByTheStorePrice * 4) 
		with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponseData equals: listPurchasesResponse data .! !

!methodRemoval: InternalAPITest #test24SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:51:28'!
test24SuccessfullyListPurchasesOfUserWithMultipleCarts

	| firstCartId secondCartId listPurchasesResponse expectedDetail expectedResponseData |
	
	firstCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) data.
	
	secondCartId _ (internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today) data.
	
	self assertSuccessfullyResponse: (internalApi
		add:  testObjectFactory itemSellByTheStore 
		toCart:  firstCartId 
		withQuantity:  3
		on: testObjectFactory today).
	
	self assertSuccessfullyResponse: (internalApi
		add:  testObjectFactory anotherItemSellByTheStore 
		toCart:  secondCartId 
		withQuantity:  4
		on: testObjectFactory today).
		
	self assertSuccessfullyResponse: (internalApi 
		checkOutCart: firstCartId 
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today).
		
	self assertSuccessfullyResponse: (internalApi 
		checkOutCart: secondCartId 
		withCreditCard:  testObjectFactory notExpiredCreditCard 
		ofOwner:  'Alan Kay'
		on: testObjectFactory today).
		
	listPurchasesResponse _ internalApi listPurchasesOf: 'Alan Kay' with: 'objetos'.

	expectedDetail _ Dictionary new.
	
	expectedDetail add: testObjectFactory itemSellByTheStore -> (testObjectFactory itemSellByTheStorePrice * 3).
	
	expectedDetail add: testObjectFactory anotherItemSellByTheStore -> (testObjectFactory anotherItemSellByTheStorePrice * 4).
	
	expectedResponseData _ DetailedSale 
		of: (testObjectFactory itemSellByTheStorePrice * 3) + (testObjectFactory anotherItemSellByTheStorePrice * 4) 
		with: expectedDetail.
	
	self assertSuccessfullyResponse: listPurchasesResponse .
	
	self  assert: expectedResponseData equals: listPurchasesResponse data .!
!InternalAPITest methodsFor: 'expiration' stamp: 'eb 12/3/2020 16:51:34'!
test26CannotAddToExpiredCart

	| cartId addResponse |
	
	cartId _ self validCartId .
	
	addResponse _ internalApi 
		add:  testObjectFactory itemSellByTheStore
		toCart:  cartId
		withQuantity:  3
		on: testObjectFactory cartExpiredDateFromToday.
		
	self assertUnsuccesfullyResponse: addResponse .
	
	self assertResponseDataIsExpiredCartErrorDescription: addResponse .! !

!methodRemoval: InternalAPITest #test24CannotAddToExpiredCart stamp: 'eb 12/3/2020 16:51:34'!
test24CannotAddToExpiredCart

	| cartId addResponse |
	
	cartId _ self validCartId .
	
	addResponse _ internalApi 
		add:  testObjectFactory itemSellByTheStore
		toCart:  cartId
		withQuantity:  3
		on: testObjectFactory cartExpiredDateFromToday.
		
	self assertUnsuccesfullyResponse: addResponse .
	
	self assertResponseDataIsExpiredCartErrorDescription: addResponse .!
!InternalAPITest methodsFor: 'expiration' stamp: 'eb 12/3/2020 16:51:37'!
test27CannotAddToExpiredCart

	| cartId addResponse |
	
	cartId _ self validCartId .
	
	addResponse _ internalApi 
		add:  testObjectFactory itemSellByTheStore
		toCart:  cartId
		withQuantity:  3
		on: testObjectFactory cartExpiredDateFromToday.
		
	self assertUnsuccesfullyResponse: addResponse .
	
	self assertResponseDataIsExpiredCartErrorDescription: addResponse .! !

!methodRemoval: InternalAPITest #test26CannotAddToExpiredCart stamp: 'eb 12/3/2020 16:51:37'!
test26CannotAddToExpiredCart

	| cartId addResponse |
	
	cartId _ self validCartId .
	
	addResponse _ internalApi 
		add:  testObjectFactory itemSellByTheStore
		toCart:  cartId
		withQuantity:  3
		on: testObjectFactory cartExpiredDateFromToday.
		
	self assertUnsuccesfullyResponse: addResponse .
	
	self assertResponseDataIsExpiredCartErrorDescription: addResponse .!

!testRun: #InternalAPITest #test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword stamp: 'eb 12/3/2020 16:51:47'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdsPerCustomer stamp: 'eb 12/3/2020 16:51:47'!
PASSED!

!testRun: #InternalAPITest #test03CreateCartIsUnsuccessfullyWithUnregisteredClientId stamp: 'eb 12/3/2020 16:51:47'!
PASSED!

!testRun: #InternalAPITest #test04CreateCartSuccessfullyEffectivlyCreatesCart stamp: 'eb 12/3/2020 16:51:47'!
PASSED!

!testRun: #InternalAPITest #test05UsersCouldHaveMultipleCarts stamp: 'eb 12/3/2020 16:51:47'!
PASSED!

!testRun: #InternalAPITest #test06AddToCartIsSuccessfullyWithValidCartId stamp: 'eb 12/3/2020 16:51:47'!
PASSED!

!testRun: #InternalAPITest #test07AddToCartIsUnsuccessfullyWithInvalidCartId stamp: 'eb 12/3/2020 16:51:47'!
PASSED!

!testRun: #InternalAPITest #test08AddToCartIsUnsuccessfullyWithIvalidISBN stamp: 'eb 12/3/2020 16:51:47'!
PASSED!

!testRun: #InternalAPITest #test09AddToCartSuccessfullyEffectivlyAddsToCart stamp: 'eb 12/3/2020 16:51:47'!
PASSED!

!testRun: #InternalAPITest #test10ListCartWithEmptyCart stamp: 'eb 12/3/2020 16:51:47'!
PASSED!

!testRun: #InternalAPITest #test11ListCartWithInvalidCart stamp: 'eb 12/3/2020 16:51:47'!
PASSED!

!testRun: #InternalAPITest #test12ListCartWithNotEmptyCart stamp: 'eb 12/3/2020 16:51:47'!
PASSED!

!testRun: #InternalAPITest #test13CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/3/2020 16:51:47'!
PASSED!

!testRun: #InternalAPITest #test14CheckOutIsUnsuccessfullyWithEmptyCart stamp: 'eb 12/3/2020 16:51:47'!
PASSED!

!testRun: #InternalAPITest #test15CheckOutIsUnsuccessfullyWithExpiredCreditCard stamp: 'eb 12/3/2020 16:51:47'!
PASSED!

!testRun: #InternalAPITest #test16CheckOutIsUnsuccessfullyWithInvalidCart stamp: 'eb 12/3/2020 16:51:47'!
PASSED!

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/3/2020 16:51:47'!
PASSED!

!testRun: #InternalAPITest #test18CheckOutIsUnsuccessfullyWithInvalidUser stamp: 'eb 12/3/2020 16:51:47'!
PASSED!

!testRun: #InternalAPITest #test19CannotQueryListPurchasesWithoutUserCheckout stamp: 'eb 12/3/2020 16:51:47'!
PASSED!

!testRun: #InternalAPITest #test20SuccesfullyListPurchasesOfCartWithManyItemsOfSameType stamp: 'eb 12/3/2020 16:51:47'!
PASSED!

!testRun: #InternalAPITest #test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes stamp: 'eb 12/3/2020 16:51:47'!
PASSED!

!testRun: #InternalAPITest #test22SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/3/2020 16:51:47'!
PASSED!

!testRun: #InternalAPITest #test24CannotQueryListPurchasesWithInvalidCredentials stamp: 'eb 12/3/2020 16:51:47'!
PASSED!

!testRun: #InternalAPITest #test25CannotListExpiredCart stamp: 'eb 12/3/2020 16:51:47'!
PASSED!

!testRun: #InternalAPITest #test25SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:51:47'!
PASSED!

!testRun: #InternalAPITest #test26CannotCheckoutExpiredCart stamp: 'eb 12/3/2020 16:51:47'!
PASSED!

!testRun: #InternalAPITest #test27CannotAddToExpiredCart stamp: 'eb 12/3/2020 16:51:47'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #InternalAPITest #test01CreateCartIsSuccessfullyWithCorrectClientIdAndPassword stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdsPerCustomer stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #InternalAPITest #test03CreateCartIsUnsuccessfullyWithUnregisteredClientId stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #InternalAPITest #test04CreateCartSuccessfullyEffectivlyCreatesCart stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #InternalAPITest #test05UsersCouldHaveMultipleCarts stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #InternalAPITest #test06AddToCartIsSuccessfullyWithValidCartId stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #InternalAPITest #test07AddToCartIsUnsuccessfullyWithInvalidCartId stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #InternalAPITest #test08AddToCartIsUnsuccessfullyWithIvalidISBN stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #InternalAPITest #test09AddToCartSuccessfullyEffectivlyAddsToCart stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #InternalAPITest #test10ListCartWithEmptyCart stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #InternalAPITest #test11ListCartWithInvalidCart stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #InternalAPITest #test12ListCartWithNotEmptyCart stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #InternalAPITest #test13CheckOutIsSuccessfullyWithValidNotEmptyCartAndNotExpiredCreditCardAndValidUser stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #InternalAPITest #test14CheckOutIsUnsuccessfullyWithEmptyCart stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #InternalAPITest #test15CheckOutIsUnsuccessfullyWithExpiredCreditCard stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #InternalAPITest #test16CheckOutIsUnsuccessfullyWithInvalidCart stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #InternalAPITest #test17CheckOutIsUnsuccessfullyWithAlienCart stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #InternalAPITest #test18CheckOutIsUnsuccessfullyWithInvalidUser stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #InternalAPITest #test19CannotQueryListPurchasesWithoutUserCheckout stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #InternalAPITest #test20SuccesfullyListPurchasesOfCartWithManyItemsOfSameType stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #InternalAPITest #test21SuccesfullyListPurchasesOfCartWithManyItemsOfManyTypes stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #InternalAPITest #test22SuccesfullyListPurchasesOfCartWithOnlyOneItem stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #InternalAPITest #test24CannotQueryListPurchasesWithInvalidCredentials stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #InternalAPITest #test25CannotListExpiredCart stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #InternalAPITest #test25SuccessfullyListPurchasesOfUserWithMultipleCarts stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #InternalAPITest #test26CannotCheckoutExpiredCart stamp: 'eb 12/3/2020 16:56:02'!
PASSED!

!testRun: #InternalAPITest #test27CannotAddToExpiredCart stamp: 'eb 12/3/2020 16:56:02'!
PASSED!
!InternalAPITest methodsFor: 'assertions' stamp: 'eb 12/3/2020 17:03:23'!
assertSuccessfullyCreateResponse
	! !
!InternalAPITest methodsFor: 'assertions' stamp: 'eb 12/3/2020 17:04:11' prior: 51023276!
assertSuccessfullyCreateResponse
	
	| createResponse |
	
	createResponse _ internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today.
	
	self assertSuccessfullyResponse: createResponse.
	
	self assert: (internalApi hasCartsOf: 'Alan Kay').! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/3/2020 17:04:30' prior: 51020673!
test05UsersCouldHaveMultipleCarts
	
	self assertSuccessfullyCreateResponse.
	self assertSuccessfullyCreateResponse.
	
	self assert: 2 equals: (internalApi numberOfCartsOf: 'Alan Kay').

	
		
	! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/3/2020 17:04:37' prior: 51023292!
test05UsersCouldHaveMultipleCarts
	self assertSuccessfullyCreateResponse.
	self assertSuccessfullyCreateResponse.
	
	self assert: 2 equals: (internalApi numberOfCartsOf: 'Alan Kay').

	
		
	! !
!InternalAPITest methodsFor: 'create cart' stamp: 'eb 12/3/2020 17:04:44' prior: 51023302!
test05UsersCouldHaveMultipleCarts
	self assertSuccessfullyCreateResponse.
	self assertSuccessfullyCreateResponse.
	
	self assert: 2 equals: (internalApi numberOfCartsOf: 'Alan Kay').

	
		
	! !
!InternalAPITest methodsFor: 'assertions' stamp: 'eb 12/3/2020 17:04:52' prior: 51023280!
assertSuccessfullyCreateResponse
	
	| createResponse |
	
	createResponse _ internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today.
	
	self assertSuccessfullyResponse: createResponse.
	
	self assert: (internalApi hasCartsOf: 'Alan Kay').! !
!InternalAPITest methodsFor: 'assertions' stamp: 'eb 12/3/2020 17:04:55' prior: 51023321!
assertSuccessfullyCreateResponse
	
	| createResponse |
	
	createResponse _ internalApi createCartFor: 'Alan Kay' with: 'objetos' on: testObjectFactory today.
	
	self assertSuccessfullyResponse: createResponse.
	
	self assert: (internalApi hasCartsOf: 'Alan Kay').! !