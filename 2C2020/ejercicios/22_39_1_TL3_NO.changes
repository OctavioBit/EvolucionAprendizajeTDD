----End fileIn of /home/fede/Documentos/Facultad/Inge1/EjerciciosParaEntregar/2020-2c/20-TusLibros/Iteracion2/TusLibros-33.st----!

TestCase subclass: #FacadeTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #FacadeTest category: 'TusLibros' stamp: 'fr 11/28/2020 20:09:36'!
TestCase subclass: #FacadeTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Facade category: 'TusLibros' stamp: 'fr 11/28/2020 20:27:38'!
Object subclass: #Facade
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!FacadeTest methodsFor: 'no messages' stamp: 'fr 11/28/2020 20:27:27'!
test01

	| cartId facade |
	facade _ Facade new.
	
	cartId _ facade nextPutAll: self validUser asCommaSeparated: self validPassword.
	
	self assert: (facade listCart: cartId) isEmpty! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 20:28:11' prior: 50868345!
test01

	| cartId facade |
	
	facade _ Facade new.
	
	cartId _ facade nextPutAll: self validUser asCommaSeparated: self validPassword.
	
	self assert: (facade listCart: cartId) isEmpty! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 20:28:14' prior: 50868354!
test01

	| cartId facade |
	
	facade _ Facade new.
	cartId _ facade nextPutAll: self validUser asCommaSeparated: self validPassword.
	
	self assert: (facade listCart: cartId) isEmpty! !

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 20:28:18'!
ERROR!
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/28/2020 20:28:32'!
validUser
	self shouldBeImplemented.! !
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/28/2020 20:28:44' prior: 50868374!
validUser
	
	^'validUsername'! !

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 20:28:45'!
ERROR!
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/28/2020 20:28:54'!
validPassword
	self shouldBeImplemented.! !
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/28/2020 20:29:02' prior: 50868384!
validPassword
	
	^'validPassword'! !

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 20:29:03'!
ERROR!
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 20:29:35' prior: 50868363!
test01

	| cartId facade |
	
	facade _ Facade new.
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	
	self assert: (facade listCart: cartId) isEmpty! !

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 20:29:46'!
ERROR!
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 20:29:55'!
newCartForUser: aString andPassword: aString2 
	self shouldBeImplemented.! !
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 20:29:57' prior: 50868405!
newCartForUser: aString andPassword: aString2 
	
	! !
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 20:30:01' prior: 50868410!
newCartForUser: aUsername andPassword: aString2 
	
	! !
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 20:30:21' prior: 50868415!
newCartForUser: aUsername andPassword: aPassword 
	
	! !

!classDefinition: #Facade category: 'TusLibros' stamp: 'fr 11/28/2020 20:33:20'!
Object subclass: #Facade
	instanceVariableNames: 'carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Facade category: 'TusLibros' stamp: 'fr 11/28/2020 20:33:23'!
Object subclass: #Facade
	instanceVariableNames: 'carts catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 20:33:16' prior: 50868420!
newCartForUser: aUsername andPassword: aPassword 
	
	carts at: 1 put: Cart acceptingItemsOf: catalogue.
	
	^1! !
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 20:33:32' prior: 50868438!
newCartForUser: aUsername andPassword: aPassword 
	
	carts at: 1 put: (Cart acceptingItemsOf: catalogue).
	
	^1! !
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 20:34:00' prior: 50868444!
newCartForUser: aUsername andPassword: aPassword 
	
	carts add: 1 -> (Cart acceptingItemsOf: catalogue).
	
	^1! !

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 20:34:43'!
ERROR!
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 20:35:21' prior: 50868395!
test01

	| cartId facade |
	
	facade _ Facade acceptingItemsOf: self catalogue.
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	
	self assert: (facade listCart: cartId) isEmpty! !

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 20:35:24'!
ERROR!
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/28/2020 20:35:46'!
catalogue
	self shouldBeImplemented.! !
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/28/2020 20:35:51' prior: 50868470!
catalogue
	
	^Dictionary new! !

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 20:35:52'!
ERROR!
!Facade class methodsFor: 'instance creation' stamp: 'fr 11/28/2020 20:35:58'!
acceptingItemsOf: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeAcceptingItemsOf: aDictionary ! !
!Facade class methodsFor: 'instance creation' stamp: 'fr 11/28/2020 20:36:01' prior: 50868480!
acceptingItemsOf: aDictionary 
	
	^self new initializeAcceptingItemsOf: aDictionary ! !
!Facade class methodsFor: 'instance creation' stamp: 'fr 11/28/2020 20:36:06' prior: 50868489!
acceptingItemsOf: aCatalogue 
	
	^self new initializeAcceptingItemsOf: aCatalogue ! !

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 20:36:08'!
ERROR!
!Facade methodsFor: 'initialization' stamp: 'fr 11/28/2020 20:36:15'!
initializeAcceptingItemsOf: aCatalogue 
	self shouldBeImplemented.
	catalogue := aCatalogue.! !
!Facade methodsFor: 'initialization' stamp: 'fr 11/28/2020 20:36:19' prior: 50868503!
initializeAcceptingItemsOf: aCatalogue 
	
	catalogue _ aCatalogue.! !
!Facade methodsFor: 'initialization' stamp: 'fr 11/28/2020 20:36:27' prior: 50868509!
initializeAcceptingItemsOf: aCatalogue 
	
	catalogue _ aCatalogue.
	carts _ Dictionary new! !

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 20:36:29'!
ERROR!
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 20:36:37'!
listCart: aSmallInteger 
	self shouldBeImplemented.! !
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 20:36:52' prior: 50868522!
listCart: aCartId 
	
	
	! !
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 20:38:24' prior: 50868527!
listCart: aCartId 
	
	^{}
	! !

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 20:38:26'!
PASSED!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 20:38:26'!
PASSED!
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 20:38:33'!
test02

	| cartId facade |
	
	facade _ Facade acceptingItemsOf: self catalogue.
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	
	self assert: (facade listCart: cartId) isEmpty! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 20:39:42' prior: 50868539!
test02

	| facade |
	
	facade _ Facade acceptingItemsOf: self catalogue.
	self  should: [facade newCartForUser: self invalidUser andPassword: self validPassword]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorDescription
		! !

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 20:40:02'!
ERROR!
!Facade class methodsFor: 'error description' stamp: 'fr 11/28/2020 20:40:10'!
invalidCredentialsErrorDescription
	self shouldBeImplemented.! !
!Facade class methodsFor: 'error description' stamp: 'fr 11/28/2020 20:40:18' prior: 50868563!
invalidCredentialsErrorDescription
	
	^'Invalid credentials'! !

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 20:40:19'!
ERROR!
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/28/2020 20:40:28'!
invalidUser
	self shouldBeImplemented.! !
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/28/2020 20:40:36' prior: 50868575!
invalidUser
	
	^'Invalid username'! !

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 20:40:37'!
FAILURE!
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 20:53:12' prior: 50868450!
newCartForUser: aUsername andPassword: aPassword 
	
	self validateUsername: aUsername.
	
	carts add: 1 -> (Cart acceptingItemsOf: catalogue).
	^1! !

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 20:53:16'!
ERROR!
!Facade methodsFor: 'user validation' stamp: 'fr 11/28/2020 20:53:47'!
validateUsername: aString 
	self shouldBeImplemented.! !
!Facade methodsFor: 'user validation' stamp: 'fr 11/28/2020 20:53:49' prior: 50868595!
validateUsername: aString 
	
	! !
!Facade methodsFor: 'user validation' stamp: 'fr 11/28/2020 20:53:53' prior: 50868600!
validateUsername: aUsername 
	
	! !

!classDefinition: #Facade category: 'TusLibros' stamp: 'fr 11/28/2020 20:56:16'!
Object subclass: #Facade
	instanceVariableNames: 'carts catalogue users'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Facade methodsFor: 'user validation' stamp: 'fr 11/28/2020 20:56:13' prior: 50868604!
validateUsername: aUsername 
	
	(users includes: aUsername) ifFalse: [self invalidCredentialsErrorDescription]! !

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 20:56:18'!
ERROR!
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 21:00:13' prior: 50868549!
test02

	| facade |
	
	facade _ Facade acceptingItemsOf: self catalogue validatingUsersFrom: self usernames.
	self  should: [facade newCartForUser: self invalidUser andPassword: self validPassword]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorDescription
		! !

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 21:00:18'!
ERROR!
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/28/2020 21:00:27'!
usernames
	self shouldBeImplemented.! !
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/28/2020 21:00:38' prior: 50868638!
usernames
	
	^OrderedCollection with: self validUser ! !

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 21:00:39'!
ERROR!
!Facade class methodsFor: 'instance creation' stamp: 'fr 11/28/2020 21:00:44'!
acceptingItemsOf: aDictionary validatingUsersFrom: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeAcceptingItemsOf: aDictionary validatingUsersFrom: anOrderedCollection ! !
!Facade class methodsFor: 'instance creation' stamp: 'fr 11/28/2020 21:00:47' prior: 50868649!
acceptingItemsOf: aDictionary validatingUsersFrom: anOrderedCollection 
	
	^self new initializeAcceptingItemsOf: aDictionary validatingUsersFrom: anOrderedCollection ! !
!Facade class methodsFor: 'instance creation' stamp: 'fr 11/28/2020 21:00:50' prior: 50868661!
acceptingItemsOf: aCatalogue validatingUsersFrom: anOrderedCollection 
	
	^self new initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: anOrderedCollection ! !
!Facade class methodsFor: 'instance creation' stamp: 'fr 11/28/2020 21:01:01' prior: 50868670!
acceptingItemsOf: aCatalogue validatingUsersFrom: aUsernameList 
	
	^self new initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aUsernameList ! !

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 21:01:06'!
ERROR!

!classDefinition: #Facade category: 'TusLibros' stamp: 'fr 11/28/2020 21:01:12'!
Object subclass: #Facade
	instanceVariableNames: 'carts catalogue users usernameList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Facade methodsFor: 'initialization' stamp: 'fr 11/28/2020 21:01:12'!
initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aUsernameList 
	self shouldBeImplemented.
	catalogue := aCatalogue.
	usernameList := aUsernameList.! !
!Facade methodsFor: 'initialization' stamp: 'fr 11/28/2020 21:01:14' prior: 50868696!
initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aUsernameList 
	
	catalogue := aCatalogue.
	usernameList := aUsernameList.! !
!Facade methodsFor: 'initialization' stamp: 'fr 11/28/2020 21:01:24' prior: 50868704!
initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aUsernameList 
	
	catalogue _ aCatalogue.
	users _ aUsernameList.! !

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 21:01:25'!
ERROR!
!Facade methodsFor: 'user validation' stamp: 'fr 11/28/2020 21:01:40' prior: 50868615!
validateUsername: aUsername 
	
	(users includes: aUsername) ifFalse: [self error: self class invalidCredentialsErrorDescription]! !

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 21:01:42'!
PASSED!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 21:01:42'!
ERROR!

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 21:01:42'!
PASSED!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 21:01:42'!
ERROR!

users!
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 21:02:16' prior: 50868459!
test01

	| cartId facade |
	
	facade _ Facade acceptingItemsOf: self catalogue validatingUsersFrom: self usernames.
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	
	self assert: (facade listCart: cartId) isEmpty! !

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 21:02:17'!
ERROR!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 21:02:32'!
ERROR!

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 21:02:39'!
PASSED!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 21:02:39'!
ERROR!

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 21:02:39'!
PASSED!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 21:02:39'!
ERROR!
!Facade methodsFor: 'initialization' stamp: 'fr 11/28/2020 21:02:52' prior: 50868711!
initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aUsernameList 
	
	catalogue _ aCatalogue.
	users _ aUsernameList.
	carts _ Dictionary new.! !
!Facade methodsFor: 'initialization' stamp: 'fr 11/28/2020 21:02:53' prior: 50868761!
initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aUsernameList 
	
	catalogue _ aCatalogue.
	users _ aUsernameList.
	carts _ Dictionary new! !

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 21:02:54'!
PASSED!

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 21:02:55'!
PASSED!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 21:02:55'!
PASSED!

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 21:02:55'!
PASSED!
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 21:03:14'!
test03

	| facade |
	
	facade _ Facade acceptingItemsOf: self catalogue validatingUsersFrom: self usernames.
	self  should: [facade newCartForUser: self invalidUser andPassword: self validPassword]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorDescription
		! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 21:03:19' prior: 50868786!
test03

	| facade |
	
	facade _ Facade acceptingItemsOf: self catalogue validatingUsersFrom: self usernames.
	self  should: [facade newCartForUser: self validUser andPassword: self invalidPassword]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorDescription
		! !

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 21:03:28'!
ERROR!
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/28/2020 21:03:37'!
invalidPassword
	self shouldBeImplemented.! !
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/28/2020 21:03:42' prior: 50868813!
invalidPassword
	
	^'Invalid password'! !

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 21:03:43'!
FAILURE!
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/28/2020 21:04:06' prior: 50868642!
usernames
	
	^Dictionary new add: self validUser -> self validPassword; yourself! !

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 21:04:08'!
PASSED!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 21:04:08'!
ERROR!

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 21:04:08'!
PASSED!

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 21:04:08'!
PASSED!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 21:04:08'!
ERROR!

!classDefinition: #Facade category: 'TusLibros' stamp: 'fr 11/28/2020 21:04:27'!
Object subclass: #Facade
	instanceVariableNames: 'carts catalogue credentials usernameList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Facade methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 21:04:27' prior: 50868769!
initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aUsernameList 
	
	catalogue _ aCatalogue.
	credentials _ aUsernameList.
	carts _ Dictionary new! !
!Facade methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 21:04:27' prior: 50868720!
validateUsername: aUsername 
	
	(credentials includes: aUsername) ifFalse: [self error: self class invalidCredentialsErrorDescription]! !

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 21:04:29'!
ERROR!

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 21:04:44'!
PASSED!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 21:04:44'!
ERROR!

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 21:04:44'!
PASSED!

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 21:04:44'!
PASSED!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 21:04:44'!
ERROR!
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 21:06:51' prior: 50868585!
newCartForUser: aUsername andPassword: aPassword 
	
	self validateUsername: aUsername andPassword: aPassword.
	
	carts add: 1 -> (Cart acceptingItemsOf: catalogue).
	^1! !

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 21:06:53'!
ERROR!
!Facade methodsFor: 'credentials validations' stamp: 'fr 11/28/2020 21:07:02'!
validateUsername: aString andPassword: aString2 
	self shouldBeImplemented.! !
!Facade methodsFor: 'credentials validations' stamp: 'fr 11/28/2020 21:07:04' prior: 50868889!
validateUsername: aString andPassword: aString2 
	
	! !
!Facade methodsFor: 'credentials validations' stamp: 'fr 11/28/2020 21:07:07' prior: 50868895!
validateUsername: aUsername andPassword: aString2 
	
	! !
!Facade methodsFor: 'credentials validations' stamp: 'fr 11/28/2020 21:07:11' prior: 50868900!
validateUsername: aUsername andPassword: aPassword 
	
	! !
!Facade methodsFor: 'credentials validations' stamp: 'fr 11/28/2020 21:07:50' prior: 50868905!
validateUsername: aUsername andPassword: aPassword 
	
	(self validateUsername: aUsername) = aPassword ifFalse: [self invalidCredentialsErrorDescription]! !

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 21:07:51'!
ERROR!
!Facade methodsFor: 'user validation' stamp: 'fr 11/28/2020 21:08:12' prior: 50868857!
validateUsername: aUsername 
	
	^credentials at: aUsername ifAbsent: [self error: self class invalidCredentialsErrorDescription]! !

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 21:08:13'!
PASSED!

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 21:08:17'!
ERROR!
!Facade methodsFor: 'credentials validations' stamp: 'fr 11/28/2020 21:08:45' prior: 50868910!
validateUsername: aUsername andPassword: aPassword 
	
	(self validateUsername: aUsername) = aPassword ifFalse: [self error: self class invalidCredentialsErrorDescription]! !

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 21:08:46'!
PASSED!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 21:08:46'!
PASSED!

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 21:08:46'!
PASSED!

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 21:08:46'!
PASSED!

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 21:08:49'!
PASSED!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 21:08:49'!
PASSED!

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 21:08:49'!
PASSED!

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 21:08:49'!
PASSED!
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 21:10:43'!
test04

	| facade |
	
	facade _ Facade acceptingItemsOf: self catalogue validatingUsersFrom: self usernames.
	self  should: [facade newCartForUser: self validUser andPassword: self invalidPassword]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorDescription
		! !

!methodRemoval: FacadeTest #test04 stamp: 'fr 11/28/2020 21:10:45'!
test04

	| facade |
	
	facade _ Facade acceptingItemsOf: self catalogue validatingUsersFrom: self usernames.
	self  should: [facade newCartForUser: self validUser andPassword: self invalidPassword]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorDescription
		!
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 21:10:48'!
test04

	| cartId facade |
	
	facade _ Facade acceptingItemsOf: self catalogue validatingUsersFrom: self usernames.
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	
	self assert: (facade listCart: cartId) isEmpty! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 21:10:52' prior: 50868982!
test04

	| cartId facade |
	
	facade _ Facade acceptingItemsOf: self catalogue validatingUsersFrom: self usernames.
	
	self assert: (facade listCart: cartId) isEmpty! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 21:10:57' prior: 50868993!
test04

	| facade |
	
	facade _ Facade acceptingItemsOf: self catalogue validatingUsersFrom: self usernames.
	
	self assert: (facade listCart: 1) isEmpty! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 21:11:50' prior: 50869002!
test04

	| facade |
	
	facade _ Facade acceptingItemsOf: self catalogue validatingUsersFrom: self usernames.
		
	self  should: [facade listCart: 1] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCartIdErrorDescription! !

!testRun: #FacadeTest #test04 stamp: 'fr 11/28/2020 21:11:53'!
ERROR!
!Facade class methodsFor: 'error description' stamp: 'fr 11/28/2020 21:12:29'!
invalidCartIdErrorDescription
	self shouldBeImplemented.! !
!Facade class methodsFor: 'error description' stamp: 'fr 11/28/2020 21:12:35' prior: 50869023!
invalidCartIdErrorDescription
	
	^'Invalid cart'! !
!Facade class methodsFor: 'error description' stamp: 'fr 11/28/2020 21:12:40' prior: 50869028!
invalidCartIdErrorDescription
	
	^'Invalid cart id'! !

!testRun: #FacadeTest #test04 stamp: 'fr 11/28/2020 21:12:41'!
FAILURE!

!classDefinition: #Facade category: 'TusLibros' stamp: 'fr 11/28/2020 21:13:22'!
Object subclass: #Facade
	instanceVariableNames: 'carts catalogue credentials usernameList cartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Facade methodsFor: 'initialization' stamp: 'fr 11/28/2020 21:13:19' prior: 50868849!
initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aUsernameList 
	
	catalogue _ aCatalogue.
	credentials _ aUsernameList.
	carts _ Dictionary new.
	cartId _ 1.! !
!Facade methodsFor: 'initialization' stamp: 'fr 11/28/2020 21:13:24' prior: 50869048!
initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aUsernameList 
	
	catalogue _ aCatalogue.
	credentials _ aUsernameList.
	carts _ Dictionary new.
	cartId _ 1! !

!classDefinition: #Facade category: 'TusLibros' stamp: 'fr 11/28/2020 21:13:28'!
Object subclass: #Facade
	instanceVariableNames: 'carts catalogue credentials usernameList currentId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Facade methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 21:13:28' prior: 50869057!
initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aUsernameList 
	
	catalogue _ aCatalogue.
	credentials _ aUsernameList.
	carts _ Dictionary new.
	currentId _ 1! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 21:14:05' prior: 50869010!
test04

	| facade |
	
	facade _ Facade acceptingItemsOf: self catalogue validatingUsersFrom: self usernames.
		
	self  should: [facade listCart: 2] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCartIdErrorDescription! !
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 21:15:21' prior: 50868531!
listCart: aCartId 
	
	self validateCartId: aCartId.
	
	^{}
	! !

!testRun: #FacadeTest #test04 stamp: 'fr 11/28/2020 21:15:23'!
ERROR!
!Facade methodsFor: 'validation' stamp: 'fr 11/28/2020 21:15:34'!
validateCartId: aSmallInteger 
	self shouldBeImplemented.! !
!Facade methodsFor: 'validation' stamp: 'fr 11/28/2020 21:15:36' prior: 50869101!
validateCartId: aSmallInteger 
	
	! !
!Facade methodsFor: 'validation' stamp: 'fr 11/28/2020 21:15:39' prior: 50869106!
validateCartId: aCartId 
	
	! !
!Facade methodsFor: 'validation' stamp: 'fr 11/28/2020 21:15:41' prior: 50869110!
validateCartId: aCartId

	 
	
	! !
!Facade methodsFor: 'validation' stamp: 'fr 11/28/2020 21:16:02' prior: 50869114!
validateCartId: aCartId

	(carts includesKey: aCartId) ifFalse: [self error: self class invalidCartIdErrorDescription] 
	
	! !

!testRun: #FacadeTest #test04 stamp: 'fr 11/28/2020 21:16:03'!
PASSED!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 21:16:03'!
PASSED!

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 21:16:03'!
PASSED!

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 21:16:03'!
PASSED!

!testRun: #FacadeTest #test04 stamp: 'fr 11/28/2020 21:16:03'!
PASSED!
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 21:17:52' prior: 50869083!
test04

	| facade |
	
	facade _ Facade acceptingItemsOf: self catalogue validatingUsersFrom: self usernames.
		
	self  should: [facade listCart: 1] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCartIdErrorDescription! !

!testRun: #FacadeTest #test04 stamp: 'fr 11/28/2020 21:17:53'!
PASSED!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 21:17:53'!
PASSED!

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 21:17:53'!
PASSED!

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 21:17:53'!
PASSED!

!testRun: #FacadeTest #test04 stamp: 'fr 11/28/2020 21:17:53'!
PASSED!
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 21:18:18'!
test05

	| facade |
	
	facade _ Facade acceptingItemsOf: self catalogue validatingUsersFrom: self usernames.
		
	self  should: [facade listCart: 1] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCartIdErrorDescription! !

!methodRemoval: FacadeTest #test05 stamp: 'fr 11/28/2020 21:18:24'!
test05

	| facade |
	
	facade _ Facade acceptingItemsOf: self catalogue validatingUsersFrom: self usernames.
		
	self  should: [facade listCart: 1] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCartIdErrorDescription!
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 21:18:33'!
test05

	| cartId facade |
	
	facade _ Facade acceptingItemsOf: self catalogue validatingUsersFrom: self usernames.
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	
	self assert: (facade listCart: cartId) isEmpty! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 22:00:41' prior: 50869179!
test05

	| cartId facade |
	
	facade _ Facade acceptingItemsOf: self catalogue validatingUsersFrom: self usernames.
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	facade add: 1 of: self validItem to: cartId.
	self assert: (facade listCart: cartId) isEmpty! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 22:01:51' prior: 50869190!
test05

	| cartId facade |
	
	facade _ Facade acceptingItemsOf: self catalogue validatingUsersFrom: self usernames.
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	facade add: 2 of: self validItem to: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: self validItem) equals: 2! !

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:01:54'!
ERROR!
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/28/2020 22:02:02'!
validItem
	self shouldBeImplemented.! !
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/28/2020 22:02:09' prior: 50869218!
validItem
	
	^'valid item'! !

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:02:10'!
ERROR!
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 22:02:17'!
add: aSmallInteger of: aString to: aSmallInteger3 
	self shouldBeImplemented.! !
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 22:02:18' prior: 50869228!
add: aSmallInteger of: aString to: aSmallInteger3 
	
	! !
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 22:02:22' prior: 50869233!
add: aQuantity of: aString to: aSmallInteger3 
	
	! !
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 22:02:26' prior: 50869238!
add: aQuantity of: anItem to: aSmallInteger3 
	
	! !
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 22:02:29' prior: 50869243!
add: aQuantity of: anItem to: aCartId 
	
	! !
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 22:02:32' prior: 50869248!
add: aQuantity of: anItem to: aCartId 
	
	
	! !
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 22:02:35' prior: 50869252!
add: aQuantity of: anItem to: aCartId 
	
	
	! !
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 22:03:16' prior: 50869256!
add: aQuantity of: anItem to: aCartId 
	
	(carts at: aCartId) add: aQuantity of: anItem
	! !

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:03:17'!
ERROR!
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/28/2020 22:03:45' prior: 50868474!
catalogue
	
	^Dictionary new add: self validItem -> self validItemPrice; yourself! !

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:03:47'!
ERROR!
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/28/2020 22:03:52'!
validItemPrice
	self shouldBeImplemented.! !
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/28/2020 22:03:55' prior: 50869275!
validItemPrice
	
	^50! !
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/28/2020 22:03:58' prior: 50869279!
validItemPrice
	
	^100! !

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:03:59'!
FAILURE!
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 22:04:44' prior: 50869094!
listCart: aCartId 
	
	self validateCartId: aCartId.
	
	^(carts at: aCartId)
	! !
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 22:04:46' prior: 50869289!
listCart: aCartId 
	
	self validateCartId: aCartId.
	
	^(carts at: aCartId) 
	! !
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 22:05:27' prior: 50869294!
listCart: aCartId 
	
	self validateCartId: aCartId.
	
	^(carts at: aCartId) listCart
	! !

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:05:30'!
ERROR!
!Cart methodsFor: 'listing' stamp: 'fr 11/28/2020 22:05:36'!
listCart
	self shouldBeImplemented.! !
!Cart methodsFor: 'listing' stamp: 'fr 11/28/2020 22:05:38' prior: 50869306!
listCart
	
	! !
!Cart methodsFor: 'listing' stamp: 'fr 11/28/2020 22:06:04' prior: 50869310!
listCart
	
	^{}
	! !
!Cart methodsFor: 'listing' stamp: 'fr 11/28/2020 22:07:09' prior: 50869313!
listCart
	
	^items copy
	! !

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:07:16'!
PASSED!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 22:07:16'!
PASSED!

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 22:07:16'!
PASSED!

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 22:07:16'!
PASSED!

!testRun: #FacadeTest #test04 stamp: 'fr 11/28/2020 22:07:16'!
PASSED!

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:07:16'!
PASSED!
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 22:07:30' prior: 50869203!
test05

	| cartId facade |
	
	facade _ Facade acceptingItemsOf: self catalogue validatingUsersFrom: self usernames.
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	facade add: 2 of: self validItem to: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: self validItem) equals: 3! !

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:07:31'!
FAILURE!
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 22:08:40' prior: 50868878!
newCartForUser: aUsername andPassword: aPassword 
	
	self validateUsername: aUsername andPassword: aPassword.
	self updateId.
	carts add: currentId -> (Cart acceptingItemsOf: catalogue).
	^currentId ! !

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:08:42'!
ERROR!
!Facade methodsFor: 'id' stamp: 'fr 11/28/2020 22:08:49'!
updateId
	self shouldBeImplemented.! !
!Facade methodsFor: 'id' stamp: 'fr 11/28/2020 22:08:58' prior: 50869361!
updateId
	
	currentId _ currentId + 1! !

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:08:59'!
FAILURE!
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 22:09:03' prior: 50869335!
test05

	| cartId facade |
	
	facade _ Facade acceptingItemsOf: self catalogue validatingUsersFrom: self usernames.
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	facade add: 2 of: self validItem to: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: self validItem) equals: 2! !

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:09:04'!
PASSED!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 22:09:04'!
PASSED!

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 22:09:04'!
PASSED!

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 22:09:04'!
PASSED!

!testRun: #FacadeTest #test04 stamp: 'fr 11/28/2020 22:09:04'!
PASSED!

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:09:04'!
PASSED!
!Facade methodsFor: 'initialization' stamp: 'fr 11/28/2020 22:09:31' prior: 50869074!
initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aUsernameList 
	
	catalogue _ aCatalogue.
	credentials _ aUsernameList.
	carts _ Dictionary new.
	currentId _ 0! !

!methodRemoval: Facade class #acceptingItemsOf: stamp: 'fr 11/28/2020 22:09:48'!
acceptingItemsOf: aCatalogue 
	
	^self new initializeAcceptingItemsOf: aCatalogue !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 11/28/2020 22:09:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 11/28/2020 22:09:56'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 11/28/2020 22:09:56'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 11/28/2020 22:09:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 11/28/2020 22:09:56'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 11/28/2020 22:09:56'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 11/28/2020 22:09:56'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 11/28/2020 22:09:56'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 11/28/2020 22:09:56'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 11/28/2020 22:09:56'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 11/28/2020 22:09:56'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/28/2020 22:09:56'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 11/28/2020 22:09:56'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 11/28/2020 22:09:56'!
PASSED!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 22:09:56'!
PASSED!

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 22:09:56'!
PASSED!

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 22:09:56'!
PASSED!

!testRun: #FacadeTest #test04 stamp: 'fr 11/28/2020 22:09:56'!
PASSED!

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:09:56'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 11/28/2020 22:09:59'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 11/28/2020 22:09:59'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 11/28/2020 22:09:59'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 11/28/2020 22:09:59'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 11/28/2020 22:09:59'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 11/28/2020 22:09:59'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 11/28/2020 22:09:59'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 11/28/2020 22:09:59'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 11/28/2020 22:09:59'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 11/28/2020 22:09:59'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 11/28/2020 22:09:59'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/28/2020 22:09:59'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 11/28/2020 22:09:59'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 11/28/2020 22:09:59'!
PASSED!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 22:09:59'!
PASSED!

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 22:09:59'!
PASSED!

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 22:09:59'!
PASSED!

!testRun: #FacadeTest #test04 stamp: 'fr 11/28/2020 22:09:59'!
PASSED!

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:09:59'!
PASSED!
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 22:11:01' prior: 50869299!
listCart: aCartId 
	
	self validateCartId: aCartId.
	^(carts at: aCartId) listCart
	! !
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 22:11:33'!
add: aQuantity of: anItem toCartWithId: aCartId 
	
	(carts at: aCartId) add: aQuantity of: anItem
	! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 22:11:33' prior: 50869372!
test05

	| cartId facade |
	
	facade _ Facade acceptingItemsOf: self catalogue validatingUsersFrom: self usernames.
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	facade add: 2 of: self validItem toCartWithId: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: self validItem) equals: 2! !

!methodRemoval: Facade #add:of:to: stamp: 'fr 11/28/2020 22:11:33'!
add: aQuantity of: anItem to: aCartId 
	
	(carts at: aCartId) add: aQuantity of: anItem
	!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 11/28/2020 22:11:35'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 11/28/2020 22:11:35'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 11/28/2020 22:11:35'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 11/28/2020 22:11:35'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 11/28/2020 22:11:35'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 11/28/2020 22:11:35'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 11/28/2020 22:11:35'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 11/28/2020 22:11:35'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 11/28/2020 22:11:35'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 11/28/2020 22:11:35'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 11/28/2020 22:11:35'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/28/2020 22:11:35'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 11/28/2020 22:11:35'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 11/28/2020 22:11:35'!
PASSED!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 22:11:35'!
PASSED!

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 22:11:35'!
PASSED!

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 22:11:35'!
PASSED!

!testRun: #FacadeTest #test04 stamp: 'fr 11/28/2020 22:11:35'!
PASSED!

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:11:35'!
PASSED!
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 22:11:54'!
add: aQuantity of: anItem toCart: aCartId 
	
	(carts at: aCartId) add: aQuantity of: anItem
	! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 22:11:54' prior: 50869538!
test05

	| cartId facade |
	
	facade _ Facade acceptingItemsOf: self catalogue validatingUsersFrom: self usernames.
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	facade add: 2 of: self validItem toCart: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: self validItem) equals: 2! !

!methodRemoval: Facade #add:of:toCartWithId: stamp: 'fr 11/28/2020 22:11:54'!
add: aQuantity of: anItem toCartWithId: aCartId 
	
	(carts at: aCartId) add: aQuantity of: anItem
	!
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 22:12:38'!
test06

	| cartId facade |
	
	facade _ Facade acceptingItemsOf: self catalogue validatingUsersFrom: self usernames.
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	facade add: 2 of: self validItem toCart: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: self validItem) equals: 2! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 22:13:24' prior: 50869638!
test06

	| facade |
	
	facade _ Facade acceptingItemsOf: self catalogue validatingUsersFrom: self usernames.
	self  should: [facade add: 2 of: self validItem toCart: 1]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCartIdErrorDescription 
! !

!testRun: #FacadeTest #test06 stamp: 'fr 11/28/2020 22:13:29'!
FAILURE!
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 22:14:09' prior: 50869613!
add: aQuantity of: anItem toCart: aCartId 
	
	(carts at: aCartId ifAbsent: [self error: self invalidCartIdErrorDescription]) add: aQuantity of: anItem
	! !

!testRun: #FacadeTest #test06 stamp: 'fr 11/28/2020 22:14:11'!
ERROR!
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 22:14:20' prior: 50869666!
add: aQuantity of: anItem toCart: aCartId 
	
	(carts at: aCartId ifAbsent: [self error: self class invalidCartIdErrorDescription]) add: aQuantity of: anItem
	! !

!testRun: #FacadeTest #test06 stamp: 'fr 11/28/2020 22:14:21'!
PASSED!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 22:14:21'!
PASSED!

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 22:14:21'!
PASSED!

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 22:14:21'!
PASSED!

!testRun: #FacadeTest #test04 stamp: 'fr 11/28/2020 22:14:21'!
PASSED!

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:14:21'!
PASSED!

!testRun: #FacadeTest #test06 stamp: 'fr 11/28/2020 22:14:21'!
PASSED!
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 22:15:00'!
cartForId: aCartId

	^ carts at: aCartId ifAbsent: [self error: self class invalidCartIdErrorDescription]! !
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 22:15:00' prior: 50869676!
add: aQuantity of: anItem toCart: aCartId 
	
	(self cartForId: aCartId) add: aQuantity of: anItem
	! !
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 22:15:17' prior: 50869526!
listCart: aCartId 
	
	^(self cartForId: aCartId) listCart
	! !

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 22:15:19'!
PASSED!

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 22:15:19'!
PASSED!

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 22:15:19'!
PASSED!

!testRun: #FacadeTest #test04 stamp: 'fr 11/28/2020 22:15:19'!
PASSED!

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:15:19'!
PASSED!

!testRun: #FacadeTest #test06 stamp: 'fr 11/28/2020 22:15:19'!
PASSED!

!methodRemoval: Facade #validateCartId: stamp: 'fr 11/28/2020 22:15:29'!
validateCartId: aCartId

	(carts includesKey: aCartId) ifFalse: [self error: self class invalidCartIdErrorDescription] 
	
	!
!Facade methodsFor: 'validation' stamp: 'fr 11/28/2020 22:16:29'!
passwordForUsername: aUsername 
	
	^credentials at: aUsername ifAbsent: [self error: self class invalidCredentialsErrorDescription]! !
!Facade methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 22:16:29' prior: 50868932!
validateUsername: aUsername andPassword: aPassword 
	
	(self passwordForUsername: aUsername) = aPassword ifFalse: [self error: self class invalidCredentialsErrorDescription]! !

!methodRemoval: Facade #validateUsername: stamp: 'fr 11/28/2020 22:16:29'!
validateUsername: aUsername 
	
	^credentials at: aUsername ifAbsent: [self error: self class invalidCredentialsErrorDescription]!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 22:16:45'!
PASSED!

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 22:16:45'!
PASSED!

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 22:16:45'!
PASSED!

!testRun: #FacadeTest #test04 stamp: 'fr 11/28/2020 22:16:45'!
PASSED!

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:16:45'!
PASSED!

!testRun: #FacadeTest #test06 stamp: 'fr 11/28/2020 22:16:45'!
PASSED!

!methodRemoval: Facade #initializeAcceptingItemsOf: stamp: 'fr 11/28/2020 22:16:54'!
initializeAcceptingItemsOf: aCatalogue 
	
	catalogue _ aCatalogue.
	carts _ Dictionary new!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 22:16:56'!
PASSED!

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 22:16:56'!
PASSED!

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 22:16:56'!
PASSED!

!testRun: #FacadeTest #test04 stamp: 'fr 11/28/2020 22:16:56'!
PASSED!

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:16:56'!
PASSED!

!testRun: #FacadeTest #test06 stamp: 'fr 11/28/2020 22:16:56'!
PASSED!
!Facade methodsFor: 'cart' stamp: 'fr 11/28/2020 22:17:24' prior: 50869699!
cartForId: aCartId

	^carts at: aCartId ifAbsent: [self error: self class invalidCartIdErrorDescription]! !

----SNAPSHOT----(28 November 2020 22:18:33) CuisUniversity-4384.image priorSource: 17155780!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/28/2020 22:20:51'!
newFacade

	^ Facade acceptingItemsOf: self catalogue validatingUsersFrom: self usernames! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/28/2020 22:20:51' prior: 50869652!
test06

	| facade |
	
	facade _ self newFacade.
	self  should: [facade add: 2 of: self validItem toCart: 1]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCartIdErrorDescription 
! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/28/2020 22:21:14' prior: 50869619!
test05

	| cartId facade |
	
	facade _ self newFacade.
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	facade add: 2 of: self validItem toCart: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: self validItem) equals: 2! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/28/2020 22:21:18' prior: 50869137!
test04

	| facade |
	
	facade _ self newFacade.
		
	self  should: [facade listCart: 1] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCartIdErrorDescription! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/28/2020 22:21:22' prior: 50868799!
test03

	| facade |
	
	facade _ self newFacade.
	self  should: [facade newCartForUser: self validUser andPassword: self invalidPassword]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorDescription
		! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/28/2020 22:21:29' prior: 50868624!
test02

	| facade |
	
	facade _ self newFacade.
	self  should: [facade newCartForUser: self invalidUser andPassword: self validPassword]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorDescription
		! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/28/2020 22:21:35' prior: 50868737!
test01

	| cartId facade |
	
	facade _ self newFacade.
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	
	self assert: (facade listCart: cartId) isEmpty! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/28/2020 22:21:40' prior: 50869857!
test01

	| cartId facade1 |
	
	facade1 _ self newFacade.
	cartId _ facade1 newCartForUser: self validUser andPassword: self validPassword.
	
	self assert: (facade1 listCart: cartId) isEmpty! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 22:21:44' prior: 50869866!
test01

	| cartId  |
	
	facade1 _ self newFacade.
	cartId _ facade1 newCartForUser: self validUser andPassword: self validPassword.
	
	self assert: (facade1 listCart: cartId) isEmpty! !

!classDefinition: #FacadeTest category: 'TusLibros - Exercise - III' stamp: 'fr 11/28/2020 22:21:44'!
TestCase subclass: #FacadeTest
	instanceVariableNames: 'facade1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/28/2020 22:22:09' prior: 50869875!
test01

	| cartId  |
	
	cartId _ facade1 newCartForUser: self validUser andPassword: self validPassword.
	
	self assert: (facade1 listCart: cartId) isEmpty! !
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/28/2020 22:22:18' overrides: 16927572!
setUp
	
	facade1 _ self newFacade.
! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/28/2020 22:22:49' prior: 50869846!
test02

	
	facade1 _ self newFacade.
	self  should: [facade1 newCartForUser: self invalidUser andPassword: self validPassword]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorDescription
		! !

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 22:22:49'!
PASSED!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 22:22:49'!
PASSED!

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 22:22:49'!
PASSED!

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 22:22:49'!
PASSED!

!testRun: #FacadeTest #test04 stamp: 'fr 11/28/2020 22:22:49'!
PASSED!

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:22:49'!
PASSED!

!testRun: #FacadeTest #test06 stamp: 'fr 11/28/2020 22:22:49'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/28/2020 22:23:01' prior: 50869835!
test03
	
	self  should: [facade1 newCartForUser: self validUser andPassword: self invalidPassword]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorDescription
		! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/28/2020 22:23:04' prior: 50869904!
test02

		self  should: [facade1 newCartForUser: self invalidUser andPassword: self validPassword]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorDescription
		! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/28/2020 22:23:05' prior: 50869939!
test02

	self  should: [facade1 newCartForUser: self invalidUser andPassword: self validPassword]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorDescription
		! !

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 22:23:06'!
PASSED!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 22:23:06'!
PASSED!

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 22:23:06'!
PASSED!

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 22:23:06'!
PASSED!

!testRun: #FacadeTest #test04 stamp: 'fr 11/28/2020 22:23:06'!
PASSED!

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:23:06'!
PASSED!

!testRun: #FacadeTest #test06 stamp: 'fr 11/28/2020 22:23:06'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/28/2020 22:23:14' prior: 50869826!
test04
		
	self  should: [facade1 listCart: 1] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCartIdErrorDescription! !

!testRun: #FacadeTest #test04 stamp: 'fr 11/28/2020 22:23:15'!
PASSED!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 22:23:15'!
PASSED!

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 22:23:15'!
PASSED!

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 22:23:15'!
PASSED!

!testRun: #FacadeTest #test04 stamp: 'fr 11/28/2020 22:23:15'!
PASSED!

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:23:15'!
PASSED!

!testRun: #FacadeTest #test06 stamp: 'fr 11/28/2020 22:23:15'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/28/2020 22:23:30' prior: 50869815!
test05

	| cartId |
	cartId _ facade1 newCartForUser: self validUser andPassword: self validPassword.
	facade1 add: 2 of: self validItem toCart: cartId.
	self assert: ((facade1 listCart: cartId) occurrencesOf: self validItem) equals: 2! !

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:23:31'!
PASSED!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 22:23:31'!
PASSED!

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 22:23:31'!
PASSED!

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 22:23:31'!
PASSED!

!testRun: #FacadeTest #test04 stamp: 'fr 11/28/2020 22:23:31'!
PASSED!

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:23:31'!
PASSED!

!testRun: #FacadeTest #test06 stamp: 'fr 11/28/2020 22:23:31'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/28/2020 22:23:38' prior: 50869805!
test06

	self  should: [facade1 add: 2 of: self validItem toCart: 1]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCartIdErrorDescription 
! !

!testRun: #FacadeTest #test06 stamp: 'fr 11/28/2020 22:23:39'!
PASSED!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 22:23:39'!
PASSED!

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 22:23:39'!
PASSED!

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 22:23:39'!
PASSED!

!testRun: #FacadeTest #test04 stamp: 'fr 11/28/2020 22:23:39'!
PASSED!

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:23:39'!
PASSED!

!testRun: #FacadeTest #test06 stamp: 'fr 11/28/2020 22:23:39'!
PASSED!

!classDefinition: #FacadeTest category: 'TusLibros - Exercise - III' stamp: 'fr 11/28/2020 22:23:44'!
TestCase subclass: #FacadeTest
	instanceVariableNames: 'facade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 22:23:44' prior: 50869892!
test01

	| cartId  |
	
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	
	self assert: (facade listCart: cartId) isEmpty! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 22:23:44' prior: 50869930!
test03
	
	self  should: [facade newCartForUser: self validUser andPassword: self invalidPassword]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorDescription
		! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 22:23:44' prior: 50869996!
test05

	| cartId |
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	facade add: 2 of: self validItem toCart: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: self validItem) equals: 2! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 22:23:44' prior: 50869900 overrides: 16927572!
setUp
	
	facade _ self newFacade.
! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 22:23:44' prior: 50869948!
test02

	self  should: [facade newCartForUser: self invalidUser andPassword: self validPassword]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorDescription
		! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 22:23:44' prior: 50869973!
test04
		
	self  should: [facade listCart: 1] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCartIdErrorDescription! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 22:23:44' prior: 50870022!
test06

	self  should: [facade add: 2 of: self validItem toCart: 1]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCartIdErrorDescription 
! !

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 22:23:46'!
PASSED!

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 22:23:46'!
PASSED!

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 22:23:46'!
PASSED!

!testRun: #FacadeTest #test04 stamp: 'fr 11/28/2020 22:23:46'!
PASSED!

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:23:46'!
PASSED!

!testRun: #FacadeTest #test06 stamp: 'fr 11/28/2020 22:23:46'!
PASSED!

----SNAPSHOT----(28 November 2020 22:42:26) CuisUniversity-4384.image priorSource: 17220651!

!classDefinition: #FacadeTest category: 'TusLibros - Exercise - III' stamp: 'fr 11/28/2020 22:43:33'!
TestCase subclass: #FacadeTest
	instanceVariableNames: 'facade objectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!FacadeTest methodsFor: 'setup' stamp: 'fr 11/28/2020 22:43:31' prior: 50870083 overrides: 16927572!
setUp
	
	facade _ self newFacade.
	objectFactory _ StoreTestObjectsFactory new
! !
!FacadeTest methodsFor: 'setup' stamp: 'fr 11/28/2020 22:43:57' prior: 50870140 overrides: 16927572!
setUp
	
	objectFactory _ StoreTestObjectsFactory new.
	facade _ self newFacade
! !
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/28/2020 22:44:37' prior: 50869799!
newFacade

	^ Facade acceptingItemsOf: objectFactory catalogue validatingUsersFrom: self usernames! !

!methodRemoval: FacadeTest #catalogue stamp: 'fr 11/28/2020 22:44:48'!
catalogue
	
	^Dictionary new add: self validItem -> self validItemPrice; yourself!
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/28/2020 22:45:08' prior: 50870152!
newFacade

	^ Facade acceptingItemsOf: objectFactory defaultCatalog validatingUsersFrom: self usernames! !
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/28/2020 22:45:22'!
credentials
	
	^Dictionary new add: self validUser -> self validPassword; yourself! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 11/28/2020 22:45:22' prior: 50870163!
newFacade

	^ Facade acceptingItemsOf: objectFactory defaultCatalog validatingUsersFrom: self credentials! !

!methodRemoval: FacadeTest #usernames stamp: 'fr 11/28/2020 22:45:22'!
usernames
	
	^Dictionary new add: self validUser -> self validPassword; yourself!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/28/2020 22:46:10' prior: 50870072!
test05

	| cartId |
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: self validItem) equals: 2! !

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:46:11'!
FAILURE!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/28/2020 22:46:42' prior: 50870186!
test05

	| cartId |
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: objectFactory itemSellByTheStore) equals: 2! !

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:46:42'!
PASSED!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 22:46:42'!
PASSED!

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 22:46:42'!
PASSED!

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 22:46:42'!
PASSED!

!testRun: #FacadeTest #test04 stamp: 'fr 11/28/2020 22:46:42'!
PASSED!

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:46:42'!
PASSED!

!testRun: #FacadeTest #test06 stamp: 'fr 11/28/2020 22:46:42'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/28/2020 22:46:58' prior: 50870106!
test06

	self  should: [facade add: 2 of: objectFactory itemSellByTheStore toCart: 1]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCartIdErrorDescription 
! !

!testRun: #FacadeTest #test06 stamp: 'fr 11/28/2020 22:46:59'!
PASSED!

!testRun: #FacadeTest #test01 stamp: 'fr 11/28/2020 22:46:59'!
PASSED!

!testRun: #FacadeTest #test02 stamp: 'fr 11/28/2020 22:46:59'!
PASSED!

!testRun: #FacadeTest #test03 stamp: 'fr 11/28/2020 22:46:59'!
PASSED!

!testRun: #FacadeTest #test04 stamp: 'fr 11/28/2020 22:46:59'!
PASSED!

!testRun: #FacadeTest #test05 stamp: 'fr 11/28/2020 22:46:59'!
PASSED!

!testRun: #FacadeTest #test06 stamp: 'fr 11/28/2020 22:46:59'!
PASSED!

!methodRemoval: FacadeTest #validItem stamp: 'fr 11/28/2020 22:47:13'!
validItem
	
	^'valid item'!

!methodRemoval: FacadeTest #validItemPrice stamp: 'fr 11/28/2020 22:47:15'!
validItemPrice
	
	^100!

----SNAPSHOT----(28 November 2020 22:47:43) CuisUniversity-4384.image priorSource: 17231255!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 17:18:51'!
test07

	self  should: [facade add: 2 of: objectFactory itemSellByTheStore toCart: 1]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCartIdErrorDescription 
! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 17:19:01' prior: 50870259!
test07

	self  should: [facade add: 2 of: objectFactory itemNotSellByTheStore toCart: 1]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCartIdErrorDescription 
! !

!methodRemoval: FacadeTest #test07 stamp: 'fr 11/29/2020 17:19:03'!
test07

	self  should: [facade add: 2 of: objectFactory itemNotSellByTheStore toCart: 1]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCartIdErrorDescription 
!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 17:19:11'!
test07

	| cartId |
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: objectFactory itemSellByTheStore) equals: 2! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 17:25:10' prior: 50870284!
test07
! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 17:25:31'!
notas
	"Es necesario agregar un test que verifique "! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 17:25:51' prior: 50870299!
notas
	"Es necesario agregar un test que verifique el agregado de items que no est�n en el cat�logo a este nivel?"! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 17:25:56' prior: 50870296!
test07
	
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 17:28:38' prior: 50870311!
test07! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 17:28:49' prior: 50870314!
test07

	| cartId |
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: objectFactory itemSellByTheStore) equals: 2! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 17:30:24' prior: 50870199!
test05

	| cartId |
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: objectFactory itemSellByTheStore) equals: 2! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 17:30:42' prior: 50870317!
test07

	| cartId |
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: objectFactory itemSellByTheStore) equals: 2! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 17:32:55'!
test01CanCreateNewCart

	| cartId  |
	
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	
	self assert: (facade listCart: cartId) isEmpty! !

!methodRemoval: FacadeTest #test01 stamp: 'fr 11/29/2020 17:32:55'!
test01

	| cartId  |
	
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	
	self assert: (facade listCart: cartId) isEmpty!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 17:33:16'!
test02CanNotCreateNewCartForInvalidUser

	self  should: [facade newCartForUser: self invalidUser andPassword: self validPassword]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorDescription
		! !

!methodRemoval: FacadeTest #test02 stamp: 'fr 11/29/2020 17:33:16'!
test02

	self  should: [facade newCartForUser: self invalidUser andPassword: self validPassword]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorDescription
		!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 17:33:37'!
test03CanNotCreateNewCartForInvalidPassword
	
	self  should: [facade newCartForUser: self validUser andPassword: self invalidPassword]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorDescription
		! !

!methodRemoval: FacadeTest #test03 stamp: 'fr 11/29/2020 17:33:37'!
test03
	
	self  should: [facade newCartForUser: self validUser andPassword: self invalidPassword]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorDescription
		!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 17:33:51'!
test04CanNotListInexistentCart
		
	self  should: [facade listCart: 1] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCartIdErrorDescription! !

!methodRemoval: FacadeTest #test04 stamp: 'fr 11/29/2020 17:33:51'!
test04
		
	self  should: [facade listCart: 1] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCartIdErrorDescription!

!testRun: #FacadeTest #test05 stamp: 'fr 11/29/2020 17:33:59'!
FAILURE!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 17:34:14' prior: 50870329!
test05

	| cartId |
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: objectFactory itemSellByTheStore) equals: 1! !
!Cart methodsFor: 'listing' stamp: 'fr 11/29/2020 17:35:04' prior: 50869317!
listCart
	
	^OrderedCollection with: 'validBook'
	! !

!testRun: #FacadeTest #test05 stamp: 'fr 11/29/2020 17:35:05'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCart stamp: 'fr 11/29/2020 17:35:05'!
FAILURE!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/29/2020 17:35:05'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/29/2020 17:35:05'!
PASSED!

!testRun: #FacadeTest #test04CanNotListInexistentCart stamp: 'fr 11/29/2020 17:35:05'!
PASSED!

!testRun: #FacadeTest #test05 stamp: 'fr 11/29/2020 17:35:05'!
PASSED!

!testRun: #FacadeTest #test06 stamp: 'fr 11/29/2020 17:35:05'!
PASSED!

!testRun: #FacadeTest #test07 stamp: 'fr 11/29/2020 17:35:05'!
FAILURE!

!testRun: #FacadeTest #test05 stamp: 'fr 11/29/2020 17:35:42'!
PASSED!

!testRun: #FacadeTest #test06 stamp: 'fr 11/29/2020 17:35:45'!
PASSED!

!testRun: #FacadeTest #test07 stamp: 'fr 11/29/2020 17:35:48'!
FAILURE!

!testRun: #FacadeTest #test07 stamp: 'fr 11/29/2020 17:35:48'!
FAILURE!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 17:35:58' prior: 50870341!
test07

	| cartId |
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: objectFactory itemSellByTheStore) equals: 2! !

!testRun: #FacadeTest #test01CanCreateNewCart stamp: 'fr 11/29/2020 17:36:01'!
FAILURE!

!testRun: #FacadeTest #test01CanCreateNewCart stamp: 'fr 11/29/2020 17:36:01'!
FAILURE!

!testRun: #FacadeTest #test01CanCreateNewCart stamp: 'fr 11/29/2020 17:36:17'!
FAILURE!

!testRun: #FacadeTest #test01CanCreateNewCart stamp: 'fr 11/29/2020 17:36:17'!
FAILURE!
!Cart methodsFor: 'listing' stamp: 'fr 11/29/2020 17:36:50' prior: 50870432!
listCart
	
	^items isEmpty ifTrue: [{}] ifFalse: [OrderedCollection with: 'validBook']
	! !

!testRun: #FacadeTest #test01CanCreateNewCart stamp: 'fr 11/29/2020 17:36:57'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCart stamp: 'fr 11/29/2020 17:36:58'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCart stamp: 'fr 11/29/2020 17:36:58'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/29/2020 17:36:58'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/29/2020 17:36:58'!
PASSED!

!testRun: #FacadeTest #test04CanNotListInexistentCart stamp: 'fr 11/29/2020 17:36:58'!
PASSED!

!testRun: #FacadeTest #test05 stamp: 'fr 11/29/2020 17:36:58'!
PASSED!

!testRun: #FacadeTest #test06 stamp: 'fr 11/29/2020 17:36:58'!
PASSED!

!testRun: #FacadeTest #test07 stamp: 'fr 11/29/2020 17:36:58'!
FAILURE!

!testRun: #FacadeTest #test07 stamp: 'fr 11/29/2020 17:36:58'!
FAILURE!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 17:37:26'!
test05AddingAnItemWorksAsExpected

	| cartId |
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: objectFactory itemSellByTheStore) equals: 1! !

!methodRemoval: FacadeTest #test05 stamp: 'fr 11/29/2020 17:37:26'!
test05

	| cartId |
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: objectFactory itemSellByTheStore) equals: 1!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 17:39:35'!
test06CanNotAddAnItemToANonexistentCart

	self  should: [facade add: 2 of: objectFactory itemSellByTheStore toCart: 1]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCartIdErrorDescription 
! !

!methodRemoval: FacadeTest #test06 stamp: 'fr 11/29/2020 17:39:35'!
test06

	self  should: [facade add: 2 of: objectFactory itemSellByTheStore toCart: 1]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCartIdErrorDescription 
!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 17:39:45'!
test06CanNotAddItemsToANonexistentCart

	self  should: [facade add: 2 of: objectFactory itemSellByTheStore toCart: 1]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCartIdErrorDescription 
! !

!methodRemoval: FacadeTest #test06CanNotAddAnItemToANonexistentCart stamp: 'fr 11/29/2020 17:39:45'!
test06CanNotAddAnItemToANonexistentCart

	self  should: [facade add: 2 of: objectFactory itemSellByTheStore toCart: 1]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCartIdErrorDescription 
!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 17:39:51'!
test04CanNotListNonexistentCart
		
	self  should: [facade listCart: 1] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCartIdErrorDescription! !

!methodRemoval: FacadeTest #test04CanNotListInexistentCart stamp: 'fr 11/29/2020 17:39:51'!
test04CanNotListInexistentCart
		
	self  should: [facade listCart: 1] 
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCartIdErrorDescription!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 17:40:06'!
test06CanNotAddItemsToNonexistentCarts

	self  should: [facade add: 2 of: objectFactory itemSellByTheStore toCart: 1]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCartIdErrorDescription 
! !

!methodRemoval: FacadeTest #test06CanNotAddItemsToANonexistentCart stamp: 'fr 11/29/2020 17:40:06'!
test06CanNotAddItemsToANonexistentCart

	self  should: [facade add: 2 of: objectFactory itemSellByTheStore toCart: 1]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCartIdErrorDescription 
!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 17:40:19'!
test01CanCreateNewCartWithValidCredentials

	| cartId  |
	
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	
	self assert: (facade listCart: cartId) isEmpty! !

!methodRemoval: FacadeTest #test01CanCreateNewCart stamp: 'fr 11/29/2020 17:40:19'!
test01CanCreateNewCart

	| cartId  |
	
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	
	self assert: (facade listCart: cartId) isEmpty!

!testRun: #FacadeTest #test07 stamp: 'fr 11/29/2020 17:40:30'!
FAILURE!

!testRun: #FacadeTest #test07 stamp: 'fr 11/29/2020 17:40:35'!
FAILURE!
!Cart methodsFor: 'listing' stamp: 'fr 11/29/2020 17:40:50' prior: 50870490!
listCart
	
	^items copy
	! !

!testRun: #FacadeTest #test07 stamp: 'fr 11/29/2020 17:40:51'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/29/2020 17:40:51'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/29/2020 17:40:51'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/29/2020 17:40:51'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/29/2020 17:40:51'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/29/2020 17:40:51'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/29/2020 17:40:51'!
PASSED!

!testRun: #FacadeTest #test07 stamp: 'fr 11/29/2020 17:40:51'!
PASSED!

!testRun: #FacadeTest #test07 stamp: 'fr 11/29/2020 17:40:54'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 17:41:19'!
test07ListingACartWorksAsExpectedForMultipleItems

	| cartId |
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: objectFactory itemSellByTheStore) equals: 2! !

!methodRemoval: FacadeTest #test07 stamp: 'fr 11/29/2020 17:41:19'!
test07

	| cartId |
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: objectFactory itemSellByTheStore) equals: 2!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 17:43:19'!
test08

	| cartId |
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: objectFactory itemSellByTheStore) equals: 2! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 17:56:09' prior: 50870689!
test08

	| cartId |
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	! !

----SNAPSHOT----(29 November 2020 18:00:18) CuisUniversity-4384.image priorSource: 17235386!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 18:09:38' prior: 50870701!
test08

	| cartId ticket |
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	ticket _ facade silentlyMoveInstVarNamed: cartId from: self cardNumber to: self cardExpirationDate after: self cardOwner.
	self assert: ticket total equals: objectFactory itemSellByTheStorePrice * 2
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 18:10:20' prior: 50870712!
test08

	| cartId ticket |
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	ticket _ facade checkoutCart: cartId withCard: self cardNumber expiringOn: self cardExpirationDate forOwner: self cardOwner.
	self assert: ticket total equals: objectFactory itemSellByTheStorePrice * 2
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 18:11:14' prior: 50870727!
test08

	| cartId ticket |
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	ticket _ facade checkoutCart: cartId withCard: self cardNumber expiringOn: self cardExpirationDate forOwner: self cardOwner.
	self assert: ticket total equals: objectFactory itemSellByTheStorePrice * 2
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 18:11:17' prior: 50870742!
test08

	| cartId total |
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	total _ facade checkoutCart: cartId withCard: self cardNumber expiringOn: self cardExpirationDate forOwner: self cardOwner.
	self assert: total total equals: objectFactory itemSellByTheStorePrice * 2
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 18:11:20' prior: 50870757!
test08

	| cartId total |
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	total _ facade checkoutCart: cartId withCard: self cardNumber expiringOn: self cardExpirationDate forOwner: self cardOwner.
	self assert: total equals: objectFactory itemSellByTheStorePrice * 2
	! !

!testRun: #FacadeTest #test08 stamp: 'fr 11/29/2020 18:14:37'!
ERROR!
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/29/2020 18:14:50'!
cardNumber
	self shouldBeImplemented.! !
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/29/2020 18:15:17' prior: 50870788!
cardNumber
	"PARA QU� SE USA ESTO?"
	^'validCardNumber'! !

!testRun: #FacadeTest #test08 stamp: 'fr 11/29/2020 18:15:18'!
ERROR!
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/29/2020 18:15:25'!
cardExpirationDate
	self shouldBeImplemented.! !
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/29/2020 18:16:36' prior: 50870799!
cardExpirationDate
	
	^Month month: objectFactory today monthIndex year: objectFactory today yearNumber + 1! !

!testRun: #FacadeTest #test08 stamp: 'fr 11/29/2020 18:16:38'!
ERROR!
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/29/2020 18:16:59'!
cardOwner
	self shouldBeImplemented.! !
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/29/2020 18:17:01' prior: 50870812!
cardOwner
	
	! !
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/29/2020 18:17:24' prior: 50870816!
cardOwner
	"PARA QU� SE USA ESTO?"
	^'validCardOwner'
	! !

!testRun: #FacadeTest #test08 stamp: 'fr 11/29/2020 18:17:29'!
ERROR!
!Facade methodsFor: 'checkout' stamp: 'fr 11/29/2020 18:17:37'!
checkoutCart: aSmallInteger withCard: aString expiringOn: aMonth forOwner: aString4 
	self shouldBeImplemented.! !
!Facade methodsFor: 'checkout' stamp: 'fr 11/29/2020 18:17:42' prior: 50870827!
checkoutCart: aSmallInteger withCard: aString expiringOn: aMonth forOwner: aString4 
	
	! !
!Facade methodsFor: 'checkout' stamp: 'fr 11/29/2020 18:17:46' prior: 50870834!
checkoutCart: aCartId withCard: aString expiringOn: aMonth forOwner: aString4 
	
	! !
!Facade methodsFor: 'checkout' stamp: 'fr 11/29/2020 18:17:51' prior: 50870840!
checkoutCart: aCartId withCard: aCardNumber expiringOn: aMonth forOwner: aString4 
	
	! !
!Facade methodsFor: 'checkout' stamp: 'fr 11/29/2020 18:17:56' prior: 50870846!
checkoutCart: aCartId withCard: aCardNumber expiringOn: anExpirationDate forOwner: aString4 
	
	! !
!Facade methodsFor: 'checkout' stamp: 'fr 11/29/2020 18:18:01' prior: 50870852!
checkoutCart: aCartId withCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner 
	
	! !
!Facade methodsFor: 'checkout' stamp: 'fr 11/29/2020 18:18:03' prior: 50870858!
checkoutCart: aCartId withCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner 
	
	
	! !

!classDefinition: #Facade category: 'TusLibros - Exercise - III' stamp: 'fr 11/29/2020 18:23:19'!
Object subclass: #Facade
	instanceVariableNames: 'carts catalogue credentials usernameList currentId merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!

!classDefinition: #Facade category: 'TusLibros - Exercise - III' stamp: 'fr 11/29/2020 18:23:21'!
Object subclass: #Facade
	instanceVariableNames: 'carts catalogue credentials usernameList currentId merchantProcessor salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!Facade methodsFor: 'checkout' stamp: 'fr 11/29/2020 18:23:17' prior: 50870864!
checkoutCart: aCartId withCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner 
	
	^(Cashier toCheckout: (self cartForId: aCartId)
	 		charging: (CreditCard expiringOn: anExpirationDate) 
			throught: merchantProcessor 
			on: self today 
			registeringOn: salesBook) checkOut
		! !

!testRun: #FacadeTest #test08 stamp: 'fr 11/29/2020 18:23:32'!
ERROR!
!Facade methodsFor: 'time' stamp: 'fr 11/29/2020 18:23:39'!
today
	self shouldBeImplemented.! !
!Facade methodsFor: 'time' stamp: 'fr 11/29/2020 18:23:42' prior: 50870904!
today
	
	! !

Month current !
!Facade methodsFor: 'time' stamp: 'fr 11/29/2020 18:25:34' prior: 50870908!
today
	
	^Month current
	! !

!testRun: #FacadeTest #test08 stamp: 'fr 11/29/2020 18:25:44'!
ERROR!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 18:29:37' prior: 50870772!
test08

	| cartId total |
	facade _ Facade acceptingItemsOf: objectFactory defaultCatalog validatingUsersFrom: self credentials registeringSalesOn: self salesBook chargingThrough: self.
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	total _ facade checkoutCart: cartId withCard: self cardNumber expiringOn: self cardExpirationDate forOwner: self cardOwner.
	self assert: total equals: objectFactory itemSellByTheStorePrice * 2
	! !

!testRun: #FacadeTest #test08 stamp: 'fr 11/29/2020 18:29:44'!
ERROR!

!testRun: #FacadeTest #test08 stamp: 'fr 11/29/2020 18:32:41'!
ERROR!
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/29/2020 18:32:49'!
salesBook
	self shouldBeImplemented.! !
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/29/2020 18:32:56' prior: 50870942!
salesBook
	
	^OrderedCollection new! !

!testRun: #FacadeTest #test08 stamp: 'fr 11/29/2020 18:32:57'!
ERROR!
!Facade class methodsFor: 'instance creation' stamp: 'fr 11/29/2020 18:33:02'!
acceptingItemsOf: aDictionary validatingUsersFrom: aDictionary2 registeringSalesOn: anOrderedCollection chargingThrough: aFacadeTest 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeAcceptingItemsOf: aDictionary validatingUsersFrom: aDictionary2 registeringSalesOn: anOrderedCollection chargingThrough: aFacadeTest ! !
!Facade class methodsFor: 'instance creation' stamp: 'fr 11/29/2020 18:33:06' prior: 50870952!
acceptingItemsOf: aDictionary validatingUsersFrom: aDictionary2 registeringSalesOn: anOrderedCollection chargingThrough: aFacadeTest 
	
	^self new initializeAcceptingItemsOf: aDictionary validatingUsersFrom: aDictionary2 registeringSalesOn: anOrderedCollection chargingThrough: aFacadeTest ! !
!Facade class methodsFor: 'instance creation' stamp: 'fr 11/29/2020 18:33:15' prior: 50870968!
acceptingItemsOf: aCatalogue validatingUsersFrom: aDictionary2 registeringSalesOn: anOrderedCollection chargingThrough: aFacadeTest 
	
	^self new initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aDictionary2 registeringSalesOn: anOrderedCollection chargingThrough: aFacadeTest ! !
!Facade class methodsFor: 'instance creation' stamp: 'fr 11/29/2020 18:33:24' prior: 50870981!
acceptingItemsOf: aCatalogue validatingUsersFrom: aCredentialsList registeringSalesOn: anOrderedCollection chargingThrough: aFacadeTest 
	
	^self new initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aCredentialsList registeringSalesOn: anOrderedCollection chargingThrough: aFacadeTest ! !
!Facade class methodsFor: 'instance creation' stamp: 'fr 11/29/2020 18:33:34' prior: 50870994!
acceptingItemsOf: aCatalogue validatingUsersFrom: aCredentialsList registeringSalesOn: aSalesBook chargingThrough: aFacadeTest 
	
	^self new initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aCredentialsList registeringSalesOn: aSalesBook chargingThrough: aFacadeTest ! !
!Facade class methodsFor: 'instance creation' stamp: 'fr 11/29/2020 18:33:40' prior: 50871007!
acceptingItemsOf: aCatalogue validatingUsersFrom: aCredentialsList registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor 
	
	^self new initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aCredentialsList registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor ! !

!testRun: #FacadeTest #test08 stamp: 'fr 11/29/2020 18:33:43'!
ERROR!

!classDefinition: #Facade category: 'TusLibros - Exercise - III' stamp: 'fr 11/29/2020 18:33:50'!
Object subclass: #Facade
	instanceVariableNames: 'carts catalogue credentials usernameList currentId merchantProcessor salesBook credentialsList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!Facade methodsFor: 'initialization' stamp: 'fr 11/29/2020 18:33:50'!
initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aCredentialsList registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor 
	self shouldBeImplemented.
	catalogue := aCatalogue.
	credentialsList := aCredentialsList.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.! !
!Facade methodsFor: 'initialization' stamp: 'fr 11/29/2020 18:33:53' prior: 50871044!
initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aCredentialsList registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor 
	
	catalogue := aCatalogue.
	credentialsList := aCredentialsList.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.! !
!Facade methodsFor: 'initialization' stamp: 'fr 11/29/2020 18:34:28' prior: 50871057!
initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aCredentialsList registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor 
	
	catalogue _ aCatalogue.
	credentialsList _ aCredentialsList.
	salesBook _ aSalesBook.
	merchantProcessor _ aMerchantProcessor.
	
	carts _ Dictionary new.
	currentId _ 0! !

!testRun: #FacadeTest #test08 stamp: 'fr 11/29/2020 18:34:34'!
ERROR!

credentials!
!Facade methodsFor: 'initialization' stamp: 'fr 11/29/2020 18:35:21' prior: 50871069!
initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aCredentialsList registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor 
	
	catalogue _ aCatalogue.
	credentials _ aCredentialsList.
	salesBook _ aSalesBook.
	merchantProcessor _ aMerchantProcessor.
	
	carts _ Dictionary new.
	currentId _ 0! !

!testRun: #FacadeTest #test08 stamp: 'fr 11/29/2020 18:35:22'!
ERROR!
!FacadeTest methodsFor: 'merchant processor' stamp: 'fr 11/29/2020 18:35:34'!
debit: aSmallInteger from: aCreditCard 
	self shouldBeImplemented.! !
!FacadeTest methodsFor: 'merchant processor' stamp: 'fr 11/29/2020 18:35:35' prior: 50871100!
debit: aSmallInteger from: aCreditCard 
	! !
!FacadeTest methodsFor: 'merchant processor' stamp: 'fr 11/29/2020 18:35:41' prior: 50871106!
debit: anAmount from: aCreditCard 
	! !

!testRun: #FacadeTest #test08 stamp: 'fr 11/29/2020 18:35:42'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/29/2020 18:35:42'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/29/2020 18:35:42'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/29/2020 18:35:42'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/29/2020 18:35:42'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/29/2020 18:35:42'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/29/2020 18:35:42'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/29/2020 18:35:42'!
PASSED!

!testRun: #FacadeTest #test08 stamp: 'fr 11/29/2020 18:35:42'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 18:36:12' prior: 50870918!
test08

	| cartId total |
	facade _ Facade 
				acceptingItemsOf: objectFactory defaultCatalog 
				validatingUsersFrom: self credentials 
				registeringSalesOn: self salesBook 
				chargingThrough: self.
				
	cartId _ facade 
				newCartForUser: self validUser 
				andPassword: self validPassword.
				
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	total _ facade checkoutCart: cartId withCard: self cardNumber expiringOn: self cardExpirationDate forOwner: self cardOwner.
	self assert: total equals: objectFactory itemSellByTheStorePrice * 2
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 18:36:30' prior: 50871143!
test08

	| cartId total |
	facade _ Facade 
				acceptingItemsOf: objectFactory defaultCatalog 
				validatingUsersFrom: self credentials 
				registeringSalesOn: self salesBook 
				chargingThrough: self.
				
	cartId _ facade 
				newCartForUser: self validUser 
				andPassword: self validPassword.
				
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	total _ facade 
			checkoutCart: cartId 
			withCard: self cardNumber 
			expiringOn: self cardExpirationDate 
			forOwner: self cardOwner.
			
	self assert: total equals: objectFactory itemSellByTheStorePrice * 2
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 18:36:34' prior: 50871164!
test08

	| cartId total |
	facade _ Facade 
				acceptingItemsOf: objectFactory defaultCatalog 
				validatingUsersFrom: self credentials 
				registeringSalesOn: self salesBook 
				chargingThrough: self.
				
	cartId _ facade 
				newCartForUser: self validUser 
				andPassword: self validPassword.
				
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	
	total _ facade 
			checkoutCart: cartId 
			withCard: self cardNumber 
			expiringOn: self cardExpirationDate 
			forOwner: self cardOwner.
			
	self assert: total equals: objectFactory itemSellByTheStorePrice * 2
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 18:36:43' prior: 50871186!
test08

	| cartId total |
				
	cartId _ facade 
				newCartForUser: self validUser 
				andPassword: self validPassword.
				
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	
	total _ facade 
			checkoutCart: cartId 
			withCard: self cardNumber 
			expiringOn: self cardExpirationDate 
			forOwner: self cardOwner.
			
	self assert: total equals: objectFactory itemSellByTheStorePrice * 2
	! !
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/29/2020 18:37:01' prior: 50870175!
newFacade

	^ 	facade _ Facade 
				acceptingItemsOf: objectFactory defaultCatalog 
				validatingUsersFrom: self credentials 
				registeringSalesOn: self salesBook 
				chargingThrough: self.! !
!FacadeTest methodsFor: 'utils' stamp: 'fr 11/29/2020 18:37:03' prior: 50871224!
newFacade

	^ facade _ Facade 
				acceptingItemsOf: objectFactory defaultCatalog 
				validatingUsersFrom: self credentials 
				registeringSalesOn: self salesBook 
				chargingThrough: self.! !

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/29/2020 18:37:04'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/29/2020 18:37:04'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/29/2020 18:37:04'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/29/2020 18:37:04'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/29/2020 18:37:04'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/29/2020 18:37:04'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/29/2020 18:37:04'!
PASSED!

!testRun: #FacadeTest #test08 stamp: 'fr 11/29/2020 18:37:04'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 18:37:21'!
test08CanCheckoutAValidCart

	| cartId total |
				
	cartId _ facade 
				newCartForUser: self validUser 
				andPassword: self validPassword.
				
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	
	total _ facade 
			checkoutCart: cartId 
			withCard: self cardNumber 
			expiringOn: self cardExpirationDate 
			forOwner: self cardOwner.
			
	self assert: total equals: objectFactory itemSellByTheStorePrice * 2
	! !

!methodRemoval: FacadeTest #test08 stamp: 'fr 11/29/2020 18:37:21'!
test08

	| cartId total |
				
	cartId _ facade 
				newCartForUser: self validUser 
				andPassword: self validPassword.
				
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	
	total _ facade 
			checkoutCart: cartId 
			withCard: self cardNumber 
			expiringOn: self cardExpirationDate 
			forOwner: self cardOwner.
			
	self assert: total equals: objectFactory itemSellByTheStorePrice * 2
	!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 18:39:30' prior: 50871267!
test08CanCheckoutAValidCart

	
	
	self should: [facade 
				checkoutCart: 1 
				withCard: self cardNumber 
				expiringOn: self cardExpirationDate 
				forOwner: self cardOwner] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
								self assert: anError messageText equals: Facade invalidCartIdErrorDescription 	
		]
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 18:39:34' prior: 50871299!
test08CanCheckoutAValidCart
	
	self should: [facade 
				checkoutCart: 1 
				withCard: self cardNumber 
				expiringOn: self cardExpirationDate 
				forOwner: self cardOwner] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
								self assert: anError messageText equals: Facade invalidCartIdErrorDescription 	
		]
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 18:43:32' prior: 50871313!
test08CanCheckoutAValidCart
	
	self should: [facade 
				checkoutCart: 1 
				withCard: self cardNumber 
				expiringOn: self cardExpirationDate 
				forOwner: self cardOwner] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
						self assert: anError messageText equals: Facade invalidCartIdErrorDescription 	
					   ]
	! !

!classDefinition: #FacadeTest category: 'TusLibros - Exercise - III' stamp: 'fr 11/29/2020 18:44:40'!
TestCase subclass: #FacadeTest
	instanceVariableNames: 'facade objectFactory salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!FacadeTest methodsFor: 'setup' stamp: 'fr 11/29/2020 18:44:39' prior: 50870146 overrides: 16927572!
setUp
	
	objectFactory _ StoreTestObjectsFactory new.
	salesBook _ self salesBook.
	facade _ facade _ Facade 
				acceptingItemsOf: objectFactory defaultCatalog 
				validatingUsersFrom: self credentials 
				registeringSalesOn: salesBook
				chargingThrough: self.
! !
!FacadeTest methodsFor: 'setup' stamp: 'fr 11/29/2020 18:44:49' prior: 50871350 overrides: 16927572!
setUp
	
	objectFactory _ StoreTestObjectsFactory new.
	facade _ self newFacade
! !

TestCase subclass: #FacadeTest
	instanceVariableNames: 'facade objectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!

!classDefinition: #FacadeTest category: 'TusLibros - Exercise - III' stamp: 'fr 11/29/2020 18:44:55'!
TestCase subclass: #FacadeTest
	instanceVariableNames: 'facade objectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!

!classDefinition: #FacadeTest category: 'TusLibros - Exercise - III' stamp: 'fr 11/29/2020 18:45:19'!
TestCase subclass: #FacadeTest
	instanceVariableNames: 'facade objectFactory salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 18:45:17' prior: 50871327!
test08CanCheckoutAValidCart
	
	self should: [facade 
				checkoutCart: 1 
				withCard: self cardNumber 
				expiringOn: self cardExpirationDate 
				forOwner: self cardOwner] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
						self assert: anError messageText equals: Facade invalidCartIdErrorDescription.
						self assert: salesBook isEmpty 	
					   ]
	! !

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/29/2020 18:45:21'!
ERROR!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 18:46:22' prior: 50871390!
test08CanCheckoutAValidCart
	
	salesBook _ self salesBook.
	facade _ facade _ Facade 
				acceptingItemsOf: objectFactory defaultCatalog 
				validatingUsersFrom: self credentials 
				registeringSalesOn: salesBook
				chargingThrough: self.
	
	self should: [facade 
				checkoutCart: 1 
				withCard: self cardNumber 
				expiringOn: self cardExpirationDate 
				forOwner: self cardOwner] 
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError | 
						self assert: anError messageText equals: Facade invalidCartIdErrorDescription.
						self assert: salesBook isEmpty 	
					   ]
	! !

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/29/2020 18:46:25'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/29/2020 18:46:25'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/29/2020 18:46:25'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/29/2020 18:46:25'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/29/2020 18:46:25'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/29/2020 18:46:25'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/29/2020 18:46:25'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/29/2020 18:46:25'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/29/2020 18:46:25'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/29/2020 18:46:45'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/29/2020 18:46:45'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/29/2020 18:46:45'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/29/2020 18:46:45'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/29/2020 18:46:45'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/29/2020 18:46:45'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/29/2020 18:46:45'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/29/2020 18:46:45'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 18:37:21' prior: 50871408!
test08CanCheckoutAValidCart

	| cartId total |
				
	cartId _ facade 
				newCartForUser: self validUser 
				andPassword: self validPassword.
				
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	
	total _ facade 
			checkoutCart: cartId 
			withCard: self cardNumber 
			expiringOn: self cardExpirationDate 
			forOwner: self cardOwner.
			
	self assert: total equals: objectFactory itemSellByTheStorePrice * 2
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 18:47:17'!
test09

	| cartId total |
				
	cartId _ facade 
				newCartForUser: self validUser 
				andPassword: self validPassword.
				
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	
	total _ facade 
			checkoutCart: cartId 
			withCard: self cardNumber 
			expiringOn: self cardExpirationDate 
			forOwner: self cardOwner.
			
	self assert: total equals: objectFactory itemSellByTheStorePrice * 2
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 18:49:03' prior: 50871501!
test09
				
	salesBook _ self salesBook.
	facade _ facade _ Facade 
				acceptingItemsOf: objectFactory defaultCatalog 
				validatingUsersFrom: self credentials 
				registeringSalesOn: salesBook
				chargingThrough: self.
				
	self should: [facade 
			checkoutCart: 1 
			withCard: self cardNumber 
			expiringOn: self cardExpirationDate 
			forOwner: self cardOwner.] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
							self assert: anError messageText equals: Facade invalidCartIdErrorDescription.
							self assert: salesBook isEmpty
			]
	! !

!testRun: #FacadeTest #test09 stamp: 'fr 11/29/2020 18:49:04'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/29/2020 18:49:04'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/29/2020 18:49:04'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/29/2020 18:49:04'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/29/2020 18:49:04'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/29/2020 18:49:04'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/29/2020 18:49:04'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/29/2020 18:49:04'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/29/2020 18:49:04'!
PASSED!

!testRun: #FacadeTest #test09 stamp: 'fr 11/29/2020 18:49:04'!
PASSED!
!Facade methodsFor: 'checkout' stamp: 'fr 11/29/2020 18:50:36' prior: 50870890!
checkoutCart: aCartId withCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner 
	
	^(Cashier toCheckout: (carts at: aCartId)
	 		charging: (CreditCard expiringOn: anExpirationDate) 
			throught: merchantProcessor 
			on: self today 
			registeringOn: salesBook) checkOut
		! !

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/29/2020 18:50:38'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/29/2020 18:50:38'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/29/2020 18:50:38'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/29/2020 18:50:38'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/29/2020 18:50:38'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/29/2020 18:50:38'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/29/2020 18:50:38'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/29/2020 18:50:38'!
PASSED!

!testRun: #FacadeTest #test09 stamp: 'fr 11/29/2020 18:50:38'!
FAILURE!

!testRun: #FacadeTest #test09 stamp: 'fr 11/29/2020 18:50:38'!
FAILURE!

!testRun: #FacadeTest #test09 stamp: 'fr 11/29/2020 18:50:45'!
FAILURE!
!Facade methodsFor: 'checkout' stamp: 'fr 11/29/2020 18:51:33' prior: 50871568!
checkoutCart: aCartId withCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner 
	
	^(Cashier toCheckout: (self cartForId: aCartId)
	 		charging: (CreditCard expiringOn: anExpirationDate) 
			throught: merchantProcessor 
			on: self today 
			registeringOn: salesBook) checkOut
		! !

!testRun: #FacadeTest #test09 stamp: 'fr 11/29/2020 18:51:34'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/29/2020 18:51:34'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/29/2020 18:51:34'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/29/2020 18:51:34'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/29/2020 18:51:34'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/29/2020 18:51:34'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/29/2020 18:51:34'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/29/2020 18:51:34'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/29/2020 18:51:34'!
PASSED!

!testRun: #FacadeTest #test09 stamp: 'fr 11/29/2020 18:51:34'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 18:51:45' prior: 50871517!
test09
				
	self should: [facade 
			checkoutCart: 1 
			withCard: self cardNumber 
			expiringOn: self cardExpirationDate 
			forOwner: self cardOwner.] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
							self assert: anError messageText equals: Facade invalidCartIdErrorDescription.
							self assert: salesBook isEmpty
			]
	! !
!FacadeTest methodsFor: 'setup' stamp: 'fr 11/29/2020 18:51:53' prior: 50871362 overrides: 16927572!
setUp
	
	objectFactory _ StoreTestObjectsFactory new.
	salesBook _ self salesBook.
	facade _ facade _ Facade 
				acceptingItemsOf: objectFactory defaultCatalog 
				validatingUsersFrom: self credentials 
				registeringSalesOn: salesBook
				chargingThrough: self.
! !

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/29/2020 18:51:57'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/29/2020 18:51:57'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/29/2020 18:51:57'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/29/2020 18:51:57'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/29/2020 18:51:57'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/29/2020 18:51:57'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/29/2020 18:51:57'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/29/2020 18:51:57'!
PASSED!

!testRun: #FacadeTest #test09 stamp: 'fr 11/29/2020 18:51:57'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 18:53:03'!
test09CanNotCheckoutANonexistentCart
				
	self should: [facade 
			checkoutCart: 1 
			withCard: self cardNumber 
			expiringOn: self cardExpirationDate 
			forOwner: self cardOwner.] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
							self assert: anError messageText equals: Facade invalidCartIdErrorDescription.
							self assert: salesBook isEmpty
			]
	! !

!methodRemoval: FacadeTest #test09 stamp: 'fr 11/29/2020 18:53:03'!
test09
				
	self should: [facade 
			checkoutCart: 1 
			withCard: self cardNumber 
			expiringOn: self cardExpirationDate 
			forOwner: self cardOwner.] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
							self assert: anError messageText equals: Facade invalidCartIdErrorDescription.
							self assert: salesBook isEmpty
			]
	!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 18:53:08'!
test10
				
	self should: [facade 
			checkoutCart: 1 
			withCard: self cardNumber 
			expiringOn: self cardExpirationDate 
			forOwner: self cardOwner.] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
							self assert: anError messageText equals: Facade invalidCartIdErrorDescription.
							self assert: salesBook isEmpty
			]
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 18:54:50' prior: 50870304!
notas
	"Es necesario agregar un test que verifique el agregado de items que no est�n en el cat�logo a este nivel?"
	
	"Hace falta ver los checkouts con tarjeta vencida, robada, etc? Y con el carrito vac�o? Todo esto ya est� chequeado en el Cashier. Usamos la idea de que decida el error a seguir el que inicia la acci�n? "! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 18:55:10' prior: 50871752!
notas
	"Es necesario agregar un test que verifique el agregado de items que no est�n en el cat�logo a este nivel?"
	
	"Hace falta ver los checkouts con tarjeta vencida, robada, etc? Y con el carrito vac�o? Todo esto ya est� chequeado en el Cashier. Usamos la idea de que decida el error a seguir el que inicia la acci�n? (similar al ejemplo del caf� y la m�quina) "! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 19:11:17' prior: 50871765!
notas
	"Es necesario agregar un test que verifique el agregado de items que no est�n en el cat�logo a este nivel?"
	
	"Hace falta ver los checkouts con tarjeta vencida, robada, etc? Y con el carrito vac�o? Todo esto ya est� chequeado en el Cashier. Usamos la idea de que decida el error a seguir el que inicia la acci�n? (similar al ejemplo del caf� y la m�quina) -> test09"! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 19:11:27' prior: 50871780!
notas
	"Es necesario agregar un test que verifique el agregado de items que no est�n en el cat�logo a este nivel? -> test06"
	
	"Hace falta ver los checkouts con tarjeta vencida, robada, etc? Y con el carrito vac�o? Todo esto ya est� chequeado en el Cashier. Usamos la idea de que decida el error a seguir el que inicia la acci�n? (similar al ejemplo del caf� y la m�quina) -> test09"! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/29/2020 22:10:36' prior: 50871795!
notas
	"Es necesario agregar un test que verifique el agregado de items que no est�n en el cat�logo a este nivel? -> test06"
	
	"Hace falta ver los checkouts con tarjeta vencida, robada, etc? Y con el carrito vac�o? Todo esto ya est� chequeado en el Cashier. Usamos la idea de que decida el error a seguir el que inicia la acci�n? (similar al ejemplo del caf� y la m�quina) -> test09"
	
	"Tiene sentido modelar la venta para guardarla en el libro? No es conveniente guardar un comprobante del grupo ya que es lo que ocurre en la realidad?"! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 00:03:09'!
test11
				
	self should: [facade 
			checkoutCart: 1 
			withCard: self cardNumber 
			expiringOn: self cardExpirationDate 
			forOwner: self cardOwner.] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
							self assert: anError messageText equals: Facade invalidCartIdErrorDescription.
							self assert: salesBook isEmpty
			]
	! !

!methodRemoval: FacadeTest #test11 stamp: 'fr 11/30/2020 00:03:24'!
test11
				
	self should: [facade 
			checkoutCart: 1 
			withCard: self cardNumber 
			expiringOn: self cardExpirationDate 
			forOwner: self cardOwner.] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
							self assert: anError messageText equals: Facade invalidCartIdErrorDescription.
							self assert: salesBook isEmpty
			]
	!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 00:03:46' prior: 50871810!
notas
	"Es necesario agregar un test que verifique el agregado de items que no est�n en el cat�logo a este nivel? -> test06"
	
	"Hace falta ver los checkouts con tarjeta vencida, robada, etc? Y con el carrito vac�o? Todo esto ya est� chequeado en el Cashier. Usamos la idea de que decida el error a seguir el que inicia la acci�n? (similar al ejemplo del caf� y la m�quina) -> test09"
	
	"Tiene sentido modelar la venta para guardarla en el libro? No es conveniente guardar un comprobante del grupo ya que es lo que ocurre en la realidad?"
	
	"El id inv�lido puede ser nil?"! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 00:06:12' prior: 50871738!
test10
				
	
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 00:06:18' prior: 50871878!
test10

	| cartId total |
				
	cartId _ facade 
				newCartForUser: self validUser 
				andPassword: self validPassword.
				
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	
	total _ facade 
			checkoutCart: cartId 
			withCard: self cardNumber 
			expiringOn: self cardExpirationDate 
			forOwner: self cardOwner.
			
	self assert: total equals: objectFactory itemSellByTheStorePrice * 2
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 00:06:41' prior: 50871882!
test10

	| cartId total |
				
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: self cardNumber 
		expiringOn: self cardExpirationDate 
		forOwner: self cardOwner.
			
	self assert: total equals: objectFactory itemSellByTheStorePrice * 2
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 00:06:51' prior: 50871898!
test10

	| cartId |
				
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: self cardNumber 
		expiringOn: self cardExpirationDate 
		forOwner: self cardOwner.
			
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 00:08:27' prior: 50871857!
notas
	"Es necesario agregar un test que verifique el agregado de items que no est�n en el cat�logo a este nivel? -> test06"
	
	"Hace falta ver los checkouts con tarjeta vencida, robada, etc? Y con el carrito vac�o? Todo esto ya est� chequeado en el Cashier. Usamos la idea de que decida el error a seguir el que inicia la acci�n? (similar al ejemplo del caf� y la m�quina) -> test09"
	
	"Tiene sentido modelar la venta para guardarla en el libro? No es conveniente guardar un comprobante del grupo ya que es lo que ocurre en la realidad?"
	
	"El id inv�lido puede ser nil?"
	
	"Es correcto pasar la lista de usuarios y contrase�as o hay que hacer algo similar a lo del merchant processor?"! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 00:17:29' prior: 50871913!
test10

	| cartId purchase |
				
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: self cardNumber 
		expiringOn: self cardExpirationDate 
		forOwner: self cardOwner.
	
	purchase _ (facade listPurchasesOfUser: self validUser withPassword: self validPassword) first.
	
	self assert: (purchase occurrencesOf: objectFactory itemSellByTheStore) equals: 2.
	self assert: purchase total equals: (objectFactory itemSellByTheStore * 2)
	
	! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 00:17:54'!
ERROR!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 00:29:10' prior: 50871951!
test10

	| cartId purchase |
				
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: self cardNumber 
		expiringOn: self cardExpirationDate 
		forOwner: self cardOwner.
	
	purchase _ (facade listPurchasesOfUser: self validUser withPassword: self validPassword) first.
	
	self assert: (purchase occurrencesOf: objectFactory itemSellByTheStore) equals: 2.
	self assert: purchase total equals: (objectFactory itemSellByTheStore * 2)
	
	! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 00:29:58'!
ERROR!
!Facade methodsFor: 'listing' stamp: 'fr 11/30/2020 00:30:06'!
listPurchasesOfUser: aString withPassword: aString2 
	self shouldBeImplemented.! !
!Facade methodsFor: 'listing' stamp: 'fr 11/30/2020 00:30:25' prior: 50871997!
listPurchasesOfUser: aUsername withPassword: aPassword 

	
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 01:05:48' prior: 50871974!
test10

	| cartId purchase |
				
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: self cardNumber 
		expiringOn: self cardExpirationDate 
		forOwner: self cardOwner.
	
	purchase _ (facade listPurchasesOfUser: self validUser withPassword: self validPassword) first.
	
	self assert: (purchase occurrencesOf: objectFactory itemSellByTheStore) equals: 2.
	
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 01:05:51' prior: 50872008!
test10

	| cartId purchase |
				
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: self cardNumber 
		expiringOn: self cardExpirationDate 
		forOwner: self cardOwner.
	
	purchase _ (facade listPurchasesOfUser: self validUser withPassword: self validPassword).
	
	self assert: (purchase occurrencesOf: objectFactory itemSellByTheStore) equals: 2.
	
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 01:05:58' prior: 50872027!
test10

	| cartId purchase |
				
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: self cardNumber 
		expiringOn: self cardExpirationDate 
		forOwner: self cardOwner.
	
	purchase _ (facade listPurchasesOfUser: self validUser withPassword: self validPassword).
	
	self assert: (purchase occurrencesOf: objectFactory itemSellByTheStore) equals: 2.
	
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 01:06:01' prior: 50872046!
test10

	| cartId purchases |
				
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: self cardNumber 
		expiringOn: self cardExpirationDate 
		forOwner: self cardOwner.
	
	purchases _ (facade listPurchasesOfUser: self validUser withPassword: self validPassword).
	
	self assert: (purchases occurrencesOf: objectFactory itemSellByTheStore) equals: 2.
	
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 01:06:12' prior: 50872065!
test10

	| cartId |
				
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: self cardNumber 
		expiringOn: self cardExpirationDate 
		forOwner: self cardOwner.
	
	self assert: ((facade listPurchasesOfUser: self validUser withPassword: self validPassword) occurrencesOf: objectFactory itemSellByTheStore) equals: 2.
	
	! !

dict1 _ Bag new add: 'Fede' withOccurrences: 2; yourself !

dict1 !

bag1 _ Bag new add: 'Fede' withOccurrences: 2; yourself !

bag2 _ Bag new add: 'Fede' withOccurrences: 3; yourself  !

bag1 !

bag2 !

bag1 addAll: bag2 !

bag1 !

bag1 _ Bag new add: 'Fede' withOccurrences: 2; yourself !

bag1 _ Bag new add: 'Fede' withOccurrences: 2;add: 'Hola' withOccurrences: 2; yourself !

bag2 _ Bag new add: 'Fede' withOccurrences: 3; add: 'Hola' withOccurrences: 1; add: 'Disturbed' withOccurrences: 1; yourself !

bag2 _ Bag new add: 'Fede' withOccurrences: 3; add: 'Hola' withOccurrences: 1; add: 'Disturbed' withOccurrences: 1; yourself !

bag1 _ Bag new add: 'Fede' withOccurrences: 2;add: 'Hola' withOccurrences: 2; yourself !

bag1 addAll: bag2 !

bag1 !

bag1!

self sortedCounts !

self sortedElements  !

self contents   !

bag1 _ Dictionary new add: 'Fede' withOccurrences: 2;add: 'Hola' withOccurrences: 2; yourself !

bag1 _ Dictionary new add: 'Fede' -> 2;add: 'Hola' -> 2; yourself !

bag2 _ Dictionary new add: 'Fede' -> 3; add: 'Hola' -> 1; add: 'Disturbed' -> 1; yourself !

bag1 addAll: bag2 !

bag1 !

bag1 _ Bag new add: 'Fede' withOccurrences: 2; yourself !

bag2 _ Bag new add: 'Fede' withOccurrences: 3; yourself !

bag1 _ Bag new add: 'Fede' withOccurrences: 1; yourself !

bag1 _ Bag new add: 'Fede' withOccurrences: 2; yourself !

bag2 _ Bag new add: 'Fede' withOccurrences: 3; yourself !

bag3 _ Bag new add: 'Fede' withOccurrences: 1; yourself !

col _ OrderedCollection with: bag1 with: bag2 with: bag3 !

res _ col inject: Bag new into: [:subtotal :next | subtotal addAll: next] !

res !

res _ col inject: Bag new into: [:subtotal :next | subtotal addAll: next. subtotal]  !

res !

res sortedElements !

bag1 _ Bag new add: 'Fede' withOccurrences: 2; yourself !

bag2 _ Bag new add: 'Fede' withOccurrences: 3; yourself !

bag3 _ Bag new add: 'Fede' withOccurrences: 1; yourself !

col _ OrderedCollection with: bag1 with: bag2 with: bag3  !

col _ OrderedCollection with: bag1 with: bag2 with: bag3  !

res _ col inject: Bag new into: [:subtotal :next | subtotal addAll: next. subtotal]   !

res sortedElements !
!Facade methodsFor: 'listing' stamp: 'fr 11/30/2020 01:31:02' prior: 50872003!
listPurchasesOfUser: aUsername withPassword: aPassword 

	^(((salesBook select: [:aSale | aSale doneFor: aUsername]) collect: [:aSale | aSale itemsWithCounts]) inject: Bag new into: [:totalItemsWithCounts :itemsWithCounts | totalItemsWithCounts addAll: itemsWithCounts. totalItemsWithCounts]) sortedElements
	! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:31:12'!
ERROR!
!Sale methodsFor: 'customer' stamp: 'fr 11/30/2020 01:31:27'!
doneFor: aString 
	self shouldBeImplemented.! !
!Sale methodsFor: 'customer' stamp: 'fr 11/30/2020 01:31:42' prior: 50872182!
doneFor: aUsername 

	
	! !

!classDefinition: #Sale category: 'TusLibros - Exercise - III' stamp: 'fr 11/30/2020 01:31:55'!
Object subclass: #Sale
	instanceVariableNames: 'total customer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!Sale methodsFor: 'customer' stamp: 'fr 11/30/2020 01:31:53' prior: 50872186!
doneFor: aUsername 

	^customer = aUsername! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:31:56'!
ERROR!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 01:33:19' prior: 50872084!
test10

	| cartId |
				
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: self cardNumber 
		expiringOn: self cardExpirationDate 
		forOwner: self cardOwner.
	
	self assert: ((facade listPurchasesOfUser: self validUser withPassword: self validPassword) at: objectFactory itemSellByTheStore) equals: 2.
	
	! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:33:21'!
ERROR!

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:33:40'!
ERROR!

facade listPurchasesOfUser: self validUser withPassword: self validPassword!

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:33:57'!
ERROR!

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:34:01'!
ERROR!
!Facade methodsFor: 'listing' stamp: 'fr 11/30/2020 01:34:16' prior: 50872168!
listPurchasesOfUser: aUsername withPassword: aPassword 

	^(((salesBook select: [:aSale | aSale doneFor: aUsername]) collect: [:aSale | aSale itemsWithCounts]) inject: Bag new into: [:totalItemsWithCounts :itemsWithCounts | totalItemsWithCounts addAll: itemsWithCounts. totalItemsWithCounts]) contents
	! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:34:17'!
ERROR!
!Facade methodsFor: 'checkout' stamp: 'fr 11/30/2020 01:35:29' prior: 50871613!
checkoutCart: aCartId withCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner 
	
	^(Cashier toCheckout: (self cartForId: aCartId)
			for: aCardOwner
	 		charging: (CreditCard expiringOn: anExpirationDate) 
			throught: merchantProcessor 
			on: self today 
			registeringOn: salesBook) checkOut
		! !
!Facade methodsFor: 'checkout' stamp: 'fr 11/30/2020 01:36:02' prior: 50872248!
checkoutCart: aCartId withCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner 
	
	^(Cashier toCheckout: (self cartForId: aCartId)
	 		charging: (CreditCard expiringOn: anExpirationDate) 
			throught: merchantProcessor 
			on: self today 
			registeringOn: salesBook
			for: aCardOwner) checkOut
		! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:36:08'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 01:36:14'!
toCheckout: aCart charging: aCreditCard throught: aFacadeTest on: aMonth registeringOn: anOrderedCollection for: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aFacadeTest on: aMonth registeringOn: anOrderedCollection for: aString ! !
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 01:36:18' prior: 50872276!
toCheckout: aCart charging: aCreditCard throught: aFacadeTest on: aMonth registeringOn: anOrderedCollection for: aString 
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aFacadeTest on: aMonth registeringOn: anOrderedCollection for: aString ! !
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 01:36:24' prior: 50872291!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aMonth registeringOn: anOrderedCollection for: aString 
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aMonth registeringOn: anOrderedCollection for: aString ! !
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 01:36:29' prior: 50872303!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: anOrderedCollection for: aString 
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: anOrderedCollection for: aString ! !
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 01:36:34' prior: 50872315!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook for: aString 
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook for: aString ! !
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 01:36:38' prior: 50872327!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook for: aUsername 
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook for: aUsername ! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:36:46'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros - Exercise - III' stamp: 'fr 11/30/2020 01:37:08'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!

!classDefinition: #Cashier category: 'TusLibros - Exercise - III' stamp: 'fr 11/30/2020 01:37:08'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total date username'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!Cashier methodsFor: 'initialization' stamp: 'fr 11/30/2020 01:37:08'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook for: aUsername 
	self shouldBeImplemented.
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	date := aDate.
	salesBook := aSalesBook.
	username := aUsername.! !
!Cashier methodsFor: 'initialization' stamp: 'fr 11/30/2020 01:37:22' prior: 50872371!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook for: aUsername 
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	date := aDate.
	salesBook := aSalesBook.
	username := aUsername.! !

!methodRemoval: Cashier #initializeToCheckout:charging:throught:on:registeringOn:for: stamp: 'fr 11/30/2020 01:37:54'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook for: aUsername 
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	date := aDate.
	salesBook := aSalesBook.
	username := aUsername.!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 01:37:59'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 01:37:59'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/30/2020 01:37:59'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/30/2020 01:37:59'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/30/2020 01:37:59'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/30/2020 01:37:59'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/30/2020 01:37:59'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 01:37:59'!
ERROR!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 11/30/2020 01:37:59'!
PASSED!

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:37:59'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 11/30/2020 01:37:59'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 11/30/2020 01:37:59'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 11/30/2020 01:37:59'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 11/30/2020 01:37:59'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 11/30/2020 01:37:59'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 11/30/2020 01:37:59'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 11/30/2020 01:37:59'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 11/30/2020 01:37:59'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 11/30/2020 01:37:59'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 11/30/2020 01:37:59'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 11/30/2020 01:37:59'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 01:37:59'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 11/30/2020 01:37:59'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 11/30/2020 01:37:59'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 01:38:02'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 01:38:02'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/30/2020 01:38:02'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/30/2020 01:38:02'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/30/2020 01:38:02'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/30/2020 01:38:02'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/30/2020 01:38:02'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 01:38:02'!
ERROR!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 11/30/2020 01:38:02'!
PASSED!

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:38:02'!
ERROR!

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:38:08'!
ERROR!

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:38:08'!
ERROR!

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:38:16'!
ERROR!

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:38:16'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 01:38:23' prior: 50872339!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook for: aUsername 
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook for: aUsername ! !
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 01:38:28' prior: 50872526!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook for: aUsername 
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook for: aUsername ! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:38:49'!
ERROR!
!Cashier methodsFor: 'initialization' stamp: 'fr 11/30/2020 01:38:56'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook for: aUsername 
	self shouldBeImplemented.
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook.
	username := aUsername.! !
!Cashier methodsFor: 'initialization' stamp: 'fr 11/30/2020 01:38:59' prior: 50872551!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook for: aUsername 
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook.
	username := aUsername.! !
!Cashier methodsFor: 'initialization' stamp: 'fr 11/30/2020 01:39:11' prior: 50872563!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook for: aUsername 
	
	cart _ aCart.
	creditCard _ aCreditCard.
	merchantProcessor _ aMerchantProcessor.
	salesBook _ aSalesBook.
	username _ aUsername.! !

!classDefinition: #Cashier category: 'TusLibros - Exercise - III' stamp: 'fr 11/30/2020 01:39:15'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total date customer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 01:39:15' prior: 50872574!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook for: aUsername 
	
	cart _ aCart.
	creditCard _ aCreditCard.
	merchantProcessor _ aMerchantProcessor.
	salesBook _ aSalesBook.
	customer _ aUsername.! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:39:19'!
ERROR!
!Cashier methodsFor: 'checkout - private' stamp: 'fr 11/30/2020 01:44:13' prior: 50867970!
createSale

	^ Sale for: customer 
! !
!Cashier methodsFor: 'checkout - private' stamp: 'fr 11/30/2020 01:47:12' prior: 50872609!
createSale

	^ Sale for: self createTicket
! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:47:15'!
ERROR!
!Cashier methodsFor: 'private' stamp: 'fr 11/30/2020 01:47:23'!
createTicket
	self shouldBeImplemented.! !
!Cashier methodsFor: 'private' stamp: 'fr 11/30/2020 01:47:25' prior: 50872620!
createTicket
	
	! !
!Cashier methodsFor: 'private' stamp: 'fr 11/30/2020 01:47:31' prior: 50872624!
createTicket

	
	
	! !

!classDefinition: #SaleTicket category: 'TusLibros - Exercise - III' stamp: 'fr 11/30/2020 01:48:22'!
Object subclass: #SaleTicket
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!Cashier methodsFor: 'private' stamp: 'fr 11/30/2020 01:48:14' prior: 50872628!
createTicket

	| ticketEntries |
	ticketEntries _ OrderedCollection new.
	self collectTicketEntriesForTheCartInto: ticketEntries.
	^SaleTicket for: ticketEntries
	
	! !

!classRenamed: #SaleTicket as: #SaleReceipt stamp: 'fr 11/30/2020 01:48:49'!
Smalltalk renameClassNamed: #SaleTicket as: #SaleReceipt!
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 01:48:49' prior: 50872639!
createTicket

	| ticketEntries |
	ticketEntries _ OrderedCollection new.
	self collectTicketEntriesForTheCartInto: ticketEntries.
	^SaleReceipt for: ticketEntries
	
	! !
!Cashier methodsFor: 'private' stamp: 'fr 11/30/2020 01:49:17' prior: 50872652!
createTicket

	| ticketEntries |
	ticketEntries _ OrderedCollection new.
	self collectTicketEntriesInto: ticketEntries.
	^SaleReceipt for: ticketEntries
	
	! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:49:29'!
ERROR!
!Cashier methodsFor: 'private' stamp: 'fr 11/30/2020 01:49:39'!
collectTicketEntriesInto: anOrderedCollection 
	self shouldBeImplemented.! !

!classDefinition: #SaleReceiptEntry category: 'TusLibros - Exercise - III' stamp: 'fr 11/30/2020 01:50:49'!
Object subclass: #SaleReceiptEntry
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!Cashier methodsFor: 'private' stamp: 'fr 11/30/2020 01:50:55' prior: 50872670!
collectTicketEntriesInto: ticketEntries 
	
	cart itemsQuantitiesAndPricesDo: [:anItem :aQuantity :aPrice | 
		ticketEntries add: (SaleReceiptEntry for: aQuantity of: anItem costing: aPrice)
	]! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:51:00'!
ERROR!
!Cart methodsFor: 'enumerating' stamp: 'fr 11/30/2020 01:51:08'!
itemsQuantitiesAndPricesDo: aBlockClosure 
	self shouldBeImplemented.! !
!Cart methodsFor: 'enumerating' stamp: 'fr 11/30/2020 01:52:01' prior: 50872694!
itemsQuantitiesAndPricesDo: aBlock 
	
	items contents keysAndValuesDo: [:anItem :aQuantity | aBlock value: anItem value: aQuantity value: (catalog at: anItem)]
! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:52:03'!
ERROR!
!Cart methodsFor: 'initialization' stamp: 'fr 11/30/2020 01:52:32' prior: 50867806!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !
!Cart methodsFor: 'adding' stamp: 'fr 11/30/2020 01:53:06' prior: 50867828!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	items add: anItem withOccurrences: aQuantity! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:53:08'!
ERROR!
!SaleReceiptEntry class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 01:53:15'!
for: aSmallInteger of: aString costing: aSmallInteger3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aSmallInteger of: aString costing: aSmallInteger3 ! !
!SaleReceiptEntry class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 01:53:19' prior: 50872724!
for: aSmallInteger of: aString costing: aSmallInteger3 
	
	^self new initializeFor: aSmallInteger of: aString costing: aSmallInteger3 ! !
!SaleReceiptEntry class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 01:53:27' prior: 50872735!
for: aQuantity of: aString costing: aSmallInteger3 
	
	^self new initializeFor: aQuantity of: aString costing: aSmallInteger3 ! !
!SaleReceiptEntry class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 01:53:29' prior: 50872743!
for: aQuantity of: anItem costing: aSmallInteger3 
	
	^self new initializeFor: aQuantity of: anItem costing: aSmallInteger3 ! !
!SaleReceiptEntry class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 01:53:32' prior: 50872751!
for: aQuantity of: anItem costing: aPrice 
	
	^self new initializeFor: aQuantity of: anItem costing: aPrice ! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:53:34'!
ERROR!

!classDefinition: #SaleReceiptEntry category: 'TusLibros - Exercise - III' stamp: 'fr 11/30/2020 01:53:57'!
Object subclass: #SaleReceiptEntry
	instanceVariableNames: 'quantity'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!

!classDefinition: #SaleReceiptEntry category: 'TusLibros - Exercise - III' stamp: 'fr 11/30/2020 01:53:57'!
Object subclass: #SaleReceiptEntry
	instanceVariableNames: 'quantity item'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!

!classDefinition: #SaleReceiptEntry category: 'TusLibros - Exercise - III' stamp: 'fr 11/30/2020 01:53:57'!
Object subclass: #SaleReceiptEntry
	instanceVariableNames: 'quantity item price'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!SaleReceiptEntry methodsFor: 'initialization' stamp: 'fr 11/30/2020 01:53:57'!
initializeFor: aQuantity of: anItem costing: aPrice 
	self shouldBeImplemented.
	quantity := aQuantity.
	item := anItem.
	price := aPrice.! !
!SaleReceiptEntry methodsFor: 'initialization' stamp: 'fr 11/30/2020 01:53:59' prior: 50872793!
initializeFor: aQuantity of: anItem costing: aPrice 
	
	quantity := aQuantity.
	item := anItem.
	price := aPrice.! !
!SaleReceiptEntry methodsFor: 'initialization' stamp: 'fr 11/30/2020 01:54:06' prior: 50872801!
initializeFor: aQuantity of: anItem costing: aPrice 
	
	quantity _ aQuantity.
	item _ anItem.
	price _ aPrice.! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:54:07'!
ERROR!
!SaleReceipt class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 01:54:18'!
for: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: anOrderedCollection ! !
!SaleReceipt class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 01:54:21' prior: 50872817!
for: anOrderedCollection 
	
	^self new initializeFor: anOrderedCollection ! !
!SaleReceipt class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 01:54:46' prior: 50872826!
for: aReceiptEntriesList 
	
	^self new initializeFor: aReceiptEntriesList ! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:54:48'!
ERROR!

!classDefinition: #SaleReceipt category: 'TusLibros - Exercise - III' stamp: 'fr 11/30/2020 01:54:55'!
Object subclass: #SaleReceipt
	instanceVariableNames: 'receiptEntriesList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!SaleReceipt methodsFor: 'initialization' stamp: 'fr 11/30/2020 01:54:55'!
initializeFor: aReceiptEntriesList 
	self shouldBeImplemented.
	receiptEntriesList := aReceiptEntriesList.! !
!SaleReceipt methodsFor: 'initialization' stamp: 'fr 11/30/2020 01:54:57' prior: 50872848!
initializeFor: aReceiptEntriesList 
	
	receiptEntriesList := aReceiptEntriesList.! !

!classDefinition: #SaleReceipt category: 'TusLibros - Exercise - III' stamp: 'fr 11/30/2020 01:55:04'!
Object subclass: #SaleReceipt
	instanceVariableNames: 'receiptEntries'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!SaleReceipt methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 01:55:04' prior: 50872855!
initializeFor: aReceiptEntriesList 
	
	receiptEntries := aReceiptEntriesList.! !
!SaleReceipt methodsFor: 'initialization' stamp: 'fr 11/30/2020 01:55:07' prior: 50872869!
initializeFor: aReceiptEntriesList 
	
	receiptEntries _ aReceiptEntriesList.! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:55:10'!
ERROR!
!Sale class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 01:55:38'!
for: aSaleReceipt 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aSaleReceipt ! !
!Sale class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 01:55:41' prior: 50872883!
for: aSaleReceipt 
	
	^self new initializeFor: aSaleReceipt ! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:55:44'!
ERROR!

!classDefinition: #Sale category: 'TusLibros - Exercise - III' stamp: 'fr 11/30/2020 01:55:50'!
Object subclass: #Sale
	instanceVariableNames: 'total customer saleReceipt'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!Sale methodsFor: 'initialization' stamp: 'fr 11/30/2020 01:55:50'!
initializeFor: aSaleReceipt 
	self shouldBeImplemented.
	saleReceipt := aSaleReceipt.! !
!Sale methodsFor: 'initialization' stamp: 'fr 11/30/2020 01:55:52' prior: 50872906!
initializeFor: aSaleReceipt 
	
	saleReceipt := aSaleReceipt.! !
!Sale methodsFor: 'initialization' stamp: 'fr 11/30/2020 01:56:07' prior: 50872912!
initializeFor: aSaleReceipt 
	
	saleReceipt _ aSaleReceipt.! !
!Sale methodsFor: 'initialization' stamp: 'fr 11/30/2020 01:56:24' prior: 50872917!
initializeFor: aSaleReceipt 
	
	saleReceipt _ aSaleReceipt.! !

!classDefinition: #Sale category: 'TusLibros - Exercise - III' stamp: 'fr 11/30/2020 01:56:27'!
Object subclass: #Sale
	instanceVariableNames: 'total customer receipt'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!Sale methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 01:56:27' prior: 50872922!
initializeFor: aSaleReceipt 
	
	receipt _ aSaleReceipt.! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:56:29'!
ERROR!

aUsername!

customer!
!Cashier methodsFor: 'private' stamp: 'fr 11/30/2020 01:58:33' prior: 50872660!
createTicket

	| ticketEntries |
	ticketEntries _ OrderedCollection new.
	self collectTicketEntriesInto: ticketEntries.
	^SaleReceipt for: ticketEntries customer: customer 
	
	! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:58:44'!
ERROR!
!SaleReceipt class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 01:58:50'!
for: anOrderedCollection customer: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: anOrderedCollection customer: aString ! !
!SaleReceipt class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 01:58:53' prior: 50872954!
for: anOrderedCollection customer: aString 
	
	^self new initializeFor: anOrderedCollection customer: aString ! !
!SaleReceipt class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 01:59:11' prior: 50872964!
for: aSalesReceiptEntriesList customer: aString 
	
	^self new initializeFor: aSalesReceiptEntriesList customer: aString ! !
!SaleReceipt class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 01:59:15' prior: 50872971!
for: aSalesReceiptEntriesList customer: aUsername 
	
	^self new initializeFor: aSalesReceiptEntriesList customer: aUsername ! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 01:59:17'!
ERROR!

!classDefinition: #SaleReceipt category: 'TusLibros - Exercise - III' stamp: 'fr 11/30/2020 01:59:28'!
Object subclass: #SaleReceipt
	instanceVariableNames: 'receiptEntries salesReceiptEntriesList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!

!classDefinition: #SaleReceipt category: 'TusLibros - Exercise - III' stamp: 'fr 11/30/2020 01:59:28'!
Object subclass: #SaleReceipt
	instanceVariableNames: 'receiptEntries salesReceiptEntriesList username'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!SaleReceipt methodsFor: 'initialization' stamp: 'fr 11/30/2020 01:59:28'!
initializeFor: aSalesReceiptEntriesList customer: aUsername 
	self shouldBeImplemented.
	salesReceiptEntriesList := aSalesReceiptEntriesList.
	username := aUsername.! !
!SaleReceipt methodsFor: 'initialization' stamp: 'fr 11/30/2020 01:59:31' prior: 50873005!
initializeFor: aSalesReceiptEntriesList customer: aUsername 
	
	salesReceiptEntriesList := aSalesReceiptEntriesList.
	username := aUsername.! !
!SaleReceipt methodsFor: 'initialization' stamp: 'fr 11/30/2020 01:59:43' prior: 50873014!
initializeFor: aSalesReceiptEntriesList customer: aUsername 
	
	receiptEntries := aSalesReceiptEntriesList.
	username := aUsername.! !

!classDefinition: #SaleReceipt category: 'TusLibros - Exercise - III' stamp: 'fr 11/30/2020 01:59:49'!
Object subclass: #SaleReceipt
	instanceVariableNames: 'receiptEntries salesReceiptEntriesList customer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!SaleReceipt methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 01:59:49' prior: 50873022!
initializeFor: aSalesReceiptEntriesList customer: aUsername 
	
	receiptEntries := aSalesReceiptEntriesList.
	customer := aUsername.! !
!SaleReceipt methodsFor: 'initialization' stamp: 'fr 11/30/2020 01:59:55' prior: 50873039!
initializeFor: aSalesReceiptEntriesList customer: aUsername 
	
	receiptEntries _ aSalesReceiptEntriesList.
	customer _ aUsername.! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 02:00:01'!
ERROR!
!Sale methodsFor: 'customer' stamp: 'fr 11/30/2020 02:00:26' prior: 50872198!
doneFor: aUsername 

	^receipt customer = aUsername! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 02:00:32'!
ERROR!
!UndefinedObject methodsFor: 'accessing' stamp: 'fr 11/30/2020 02:00:38'!
customer
	self shouldBeImplemented.! !

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 02:00:57'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 02:00:57'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/30/2020 02:00:57'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/30/2020 02:00:57'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/30/2020 02:00:57'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/30/2020 02:00:57'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/30/2020 02:00:57'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:00:57'!
PASSED!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 11/30/2020 02:00:57'!
PASSED!

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 02:00:57'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 11/30/2020 02:00:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 11/30/2020 02:00:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 11/30/2020 02:00:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 11/30/2020 02:00:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 11/30/2020 02:00:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 11/30/2020 02:00:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 11/30/2020 02:00:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 11/30/2020 02:00:57'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 11/30/2020 02:00:57'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 11/30/2020 02:00:57'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 11/30/2020 02:00:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 02:00:57'!
FAILURE!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 11/30/2020 02:00:57'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 11/30/2020 02:00:57'!
PASSED!

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 02:01:07'!
ERROR!

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 02:01:07'!
ERROR!
!SaleReceipt methodsFor: 'accessing' stamp: 'fr 11/30/2020 02:01:19'!
customer
	self shouldBeImplemented.
	^customer! !
!SaleReceipt methodsFor: 'accessing' stamp: 'fr 11/30/2020 02:01:21' prior: 50873148!
customer
	
	^customer! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 02:01:23'!
ERROR!

salesBook!

salesBook select: [:aSale | aSale doneFor: aUsername]!

aSale!

receipt customer !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:02:28' prior: 50872205!
test10

	| cartId |
				
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: self cardNumber 
		expiringOn: self cardExpirationDate 
		forOwner: self validUser.
	
	self assert: ((facade listPurchasesOfUser: self validUser withPassword: self validPassword) at: objectFactory itemSellByTheStore) equals: 2.
	
	! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 02:02:32'!
ERROR!
!Sale methodsFor: 'listing' stamp: 'fr 11/30/2020 02:02:45'!
itemsWithCounts
	self shouldBeImplemented.! !
!Sale methodsFor: 'listing' stamp: 'fr 11/30/2020 02:05:57' prior: 50873181!
itemsWithCounts
	
	| items |
	items _ Bag new.
	receipt collectItemsWithCountsInto: items.
	^items! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 02:06:02'!
ERROR!
!SaleReceipt methodsFor: 'private' stamp: 'fr 11/30/2020 02:06:09'!
collectItemsWithCountsInto: aBag 
	self shouldBeImplemented.! !
!SaleReceipt methodsFor: 'private' stamp: 'fr 11/30/2020 02:07:06' prior: 50873193!
collectItemsWithCountsInto: aBag 
	
	receiptEntries do: [:aReceiptEntry | aBag add: aReceiptEntry item withOccurrences: aReceiptEntry quantity]! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 02:07:11'!
ERROR!
!SaleReceiptEntry methodsFor: 'accessing' stamp: 'fr 11/30/2020 02:07:18'!
item
	self shouldBeImplemented.
	^item! !
!SaleReceiptEntry methodsFor: 'accessing' stamp: 'fr 11/30/2020 02:07:20' prior: 50873208!
item
	
	^item! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 02:07:22'!
ERROR!
!SaleReceiptEntry methodsFor: 'accessing' stamp: 'fr 11/30/2020 02:07:27'!
quantity
	self shouldBeImplemented.
	^quantity! !
!SaleReceiptEntry methodsFor: 'accessing' stamp: 'fr 11/30/2020 02:07:29' prior: 50873219!
quantity
	
	^quantity! !

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 02:07:31'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 02:07:31'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 02:07:31'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/30/2020 02:07:31'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/30/2020 02:07:31'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/30/2020 02:07:31'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/30/2020 02:07:31'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/30/2020 02:07:31'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:07:31'!
PASSED!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 11/30/2020 02:07:31'!
PASSED!

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 02:07:31'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 11/30/2020 02:07:39'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 11/30/2020 02:07:39'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 11/30/2020 02:07:39'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 11/30/2020 02:07:39'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 11/30/2020 02:07:39'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 11/30/2020 02:07:39'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 11/30/2020 02:07:39'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 11/30/2020 02:07:39'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 11/30/2020 02:07:39'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 11/30/2020 02:07:39'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 11/30/2020 02:07:39'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 02:07:39'!
FAILURE!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 11/30/2020 02:07:39'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 11/30/2020 02:07:39'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 02:07:39'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 02:07:39'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/30/2020 02:07:39'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/30/2020 02:07:39'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/30/2020 02:07:39'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/30/2020 02:07:39'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/30/2020 02:07:39'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:07:39'!
PASSED!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 11/30/2020 02:07:39'!
PASSED!

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 02:07:39'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 02:07:39'!
FAILURE!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 02:08:02'!
FAILURE!
!Cashier methodsFor: 'checkout - private' stamp: 'fr 11/30/2020 02:08:41' prior: 50867974!
calculateTotal

	total _ cart total.
	! !

!classDefinition: #Cashier category: 'TusLibros - Exercise - III' stamp: 'fr 11/30/2020 02:08:44'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard ticket date customer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 02:08:44' prior: 50867978!
debitTotal

	merchantProcessor debit: ticket from: creditCard.
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 02:08:44' prior: 50873345!
calculateTotal

	ticket _ cart total.
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 02:08:44' prior: 50867983!
checkOut

	self calculateTotal.
	self debitTotal.
	self registerSale.

	^ ticket! !
!Cashier methodsFor: 'checkout - private' stamp: 'fr 11/30/2020 02:09:03' prior: 50873364!
calculateTotal

	ticket _ self createTicket.
	! !
!Cashier methodsFor: 'checkout' stamp: 'fr 11/30/2020 02:10:38' prior: 50873369!
checkOut

	self createTicket.
	self debitTotal.
	self registerSale.

	^ ticket! !

!classDefinition: #Cashier category: 'TusLibros - Exercise - III' stamp: 'fr 11/30/2020 02:10:43'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard receipt date customer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 02:10:43' prior: 50873359!
debitTotal

	merchantProcessor debit: receipt from: creditCard.
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 02:10:43' prior: 50873375!
calculateTotal

	receipt _ self createTicket.
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 02:10:43' prior: 50873380!
checkOut

	self createTicket.
	self debitTotal.
	self registerSale.

	^ receipt! !
!Cashier methodsFor: 'private' stamp: 'fr 11/30/2020 02:10:55' prior: 50872943!
createTicket

	| ticketEntries |
	ticketEntries _ OrderedCollection new.
	self collectTicketEntriesInto: ticketEntries.
	receipt _ SaleReceipt for: ticketEntries customer: customer 
	
	! !
!Cashier methodsFor: 'checkout - private' stamp: 'fr 11/30/2020 02:11:09' prior: 50873395!
debitTotal

	merchantProcessor debit: receipt total from: creditCard.
	! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 02:11:11'!
ERROR!
!SaleReceipt methodsFor: 'total' stamp: 'fr 11/30/2020 02:11:16'!
total
	self shouldBeImplemented.! !
!SaleReceipt methodsFor: 'total' stamp: 'fr 11/30/2020 02:11:40' prior: 50873429!
total
	
	^receiptEntries sum: [:aReceiptEntry | aReceiptEntry subtotal]! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 02:11:43'!
ERROR!
!SaleReceiptEntry methodsFor: 'total' stamp: 'fr 11/30/2020 02:11:49'!
subtotal
	self shouldBeImplemented.! !
!SaleReceiptEntry methodsFor: 'total' stamp: 'fr 11/30/2020 02:11:57' prior: 50873441!
subtotal
	
	^quantity * price! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 02:11:57'!
FAILURE!
!Cashier methodsFor: 'checkout - private' stamp: 'fr 11/30/2020 02:12:29' prior: 50872614!
createSale

	^ Sale for: receipt
! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 02:12:37'!
FAILURE!

cashier checkOut!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:15:20' prior: 50868150!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory today
			registeringOn:  salesBook
			for: testObjectsFactory validCustomer]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 11/30/2020 02:15:23'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'asdad' stamp: 'fr 11/30/2020 02:15:30'!
validCustomer
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'asdad' stamp: 'fr 11/30/2020 02:15:40' prior: 50873482!
validCustomer
	
	^'validCustomer'! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 11/30/2020 02:15:49'!
FAILURE!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 11/30/2020 02:16:24'!
FAILURE!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 11/30/2020 02:16:24'!
FAILURE!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 11/30/2020 02:16:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 02:16:24'!
FAILURE!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 11/30/2020 02:16:24'!
FAILURE!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 11/30/2020 02:16:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 11/30/2020 02:16:27'!
FAILURE!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 11/30/2020 02:16:27'!
FAILURE!
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 02:16:41' prior: 50872538!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook for: aUsername 
	
	self assertIsNotEmpty: aCart.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook for: aUsername ! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 11/30/2020 02:16:42'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 11/30/2020 02:16:45'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 11/30/2020 02:16:45'!
FAILURE!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 11/30/2020 02:16:45'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 02:16:45'!
FAILURE!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 11/30/2020 02:16:45'!
FAILURE!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 11/30/2020 02:16:45'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 11/30/2020 02:16:47'!
FAILURE!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 11/30/2020 02:17:06'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:17:22' prior: 50868168!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new
		for: testObjectsFactory validCustomer.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:17:27' prior: 50868061!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: self
				on: testObjectsFactory today
				registeringOn: salesBook
				for: testObjectsFactory validCustomer ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:17:34' prior: 50868082!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		for: testObjectsFactory validCustomer.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:17:39' prior: 50868126!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		for: testObjectsFactory validCustomer.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:17:44' prior: 50868100!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		for: testObjectsFactory validCustomer.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 11/30/2020 02:17:46'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 11/30/2020 02:17:46'!
FAILURE!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 11/30/2020 02:17:46'!
FAILURE!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 02:17:46'!
FAILURE!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 11/30/2020 02:17:46'!
FAILURE!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 11/30/2020 02:17:46'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 11/30/2020 02:18:05'!
FAILURE!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 11/30/2020 02:18:05'!
FAILURE!
!Cashier class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 02:18:17' prior: 50873521!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook for: aUsername 
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook for: aUsername ! !

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 11/30/2020 02:18:18'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 11/30/2020 02:18:21'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 11/30/2020 02:18:21'!
FAILURE!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 11/30/2020 02:18:21'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 02:18:21'!
FAILURE!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 11/30/2020 02:18:21'!
FAILURE!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 11/30/2020 02:18:21'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 11/30/2020 02:18:25'!
FAILURE!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 11/30/2020 02:18:25'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:18:35' prior: 50873563!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new
		for: testObjectsFactory validCustomer.
		
	self assert: cashier checkOut total = (testObjectsFactory itemSellByTheStorePrice * 2)! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 11/30/2020 02:18:36'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 11/30/2020 02:18:37'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 11/30/2020 02:18:42'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 11/30/2020 02:18:42'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 11/30/2020 02:18:42'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 02:18:42'!
FAILURE!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 11/30/2020 02:18:42'!
FAILURE!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 11/30/2020 02:18:42'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 02:18:55'!
FAILURE!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 02:18:55'!
FAILURE!

salesBook!
!Sale methodsFor: 'total' stamp: 'fr 11/30/2020 02:19:42' prior: 50868243!
total
	
	^ receipt total! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 02:19:45'!
FAILURE!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 02:19:49'!
FAILURE!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 02:19:49'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:20:04' prior: 50873602!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		for: testObjectsFactory validCustomer.
		
	total := cashier checkOut total.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 02:20:05'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 02:20:07'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 11/30/2020 02:20:14'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 11/30/2020 02:20:14'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 11/30/2020 02:20:14'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 02:20:14'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 11/30/2020 02:20:14'!
FAILURE!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 11/30/2020 02:20:14'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 11/30/2020 02:20:14'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:20:20' prior: 50873621!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		for: testObjectsFactory validCustomer.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut total.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 11/30/2020 02:20:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 11/30/2020 02:20:25'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 11/30/2020 02:20:25'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 11/30/2020 02:20:25'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 02:20:25'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 11/30/2020 02:20:25'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 11/30/2020 02:20:25'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 11/30/2020 02:20:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 11/30/2020 02:20:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 11/30/2020 02:20:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 11/30/2020 02:20:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 11/30/2020 02:20:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 11/30/2020 02:20:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 11/30/2020 02:20:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 11/30/2020 02:20:26'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 11/30/2020 02:20:26'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 11/30/2020 02:20:26'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 11/30/2020 02:20:26'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 02:20:26'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 11/30/2020 02:20:26'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 11/30/2020 02:20:26'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 02:20:26'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 02:20:26'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/30/2020 02:20:26'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/30/2020 02:20:26'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/30/2020 02:20:26'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/30/2020 02:20:26'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/30/2020 02:20:26'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:20:26'!
FAILURE!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 11/30/2020 02:20:26'!
PASSED!

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 02:20:26'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:20:26'!
FAILURE!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:20:54'!
FAILURE!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:20:54'!
FAILURE!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:21:19' prior: 50871485!
test08CanCheckoutAValidCart

	| cartId receipt |
				
	cartId _ facade 
				newCartForUser: self validUser 
				andPassword: self validPassword.
				
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	
	receipt _ facade 
			checkoutCart: cartId 
			withCard: self cardNumber 
			expiringOn: self cardExpirationDate 
			forOwner: self cardOwner.
			
	self assert: receipt equals: objectFactory itemSellByTheStorePrice * 2
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:21:23' prior: 50873992!
test08CanCheckoutAValidCart

	| cartId receipt |
				
	cartId _ facade 
				newCartForUser: self validUser 
				andPassword: self validPassword.
				
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	
	receipt _ facade 
			checkoutCart: cartId 
			withCard: self cardNumber 
			expiringOn: self cardExpirationDate 
			forOwner: self cardOwner.
			
	self assert: receipt total equals: objectFactory itemSellByTheStorePrice * 2
	! !

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:21:25'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 11/30/2020 02:21:27'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 11/30/2020 02:21:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 11/30/2020 02:21:27'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 11/30/2020 02:21:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 11/30/2020 02:21:27'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 11/30/2020 02:21:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 11/30/2020 02:21:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 11/30/2020 02:21:27'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 11/30/2020 02:21:27'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 11/30/2020 02:21:27'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 11/30/2020 02:21:27'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 02:21:27'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 11/30/2020 02:21:27'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 11/30/2020 02:21:27'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 02:21:27'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 02:21:27'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/30/2020 02:21:27'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/30/2020 02:21:27'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/30/2020 02:21:27'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/30/2020 02:21:27'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/30/2020 02:21:27'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:21:27'!
PASSED!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 11/30/2020 02:21:27'!
PASSED!

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 02:21:27'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:21:49' prior: 50873808!
test04CheckoutRegistersASale

	| cart cashier salesBook receipt |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		for: testObjectsFactory validCustomer.
		
	receipt := cashier checkOut total.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = receipt.! !
!CashierTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:21:55' prior: 50873857!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook receipt creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		for: testObjectsFactory validCustomer.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	receipt := cashier checkOut total.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = receipt.! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 11/30/2020 02:21:59'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 11/30/2020 02:21:59'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 11/30/2020 02:21:59'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 02:21:59'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 11/30/2020 02:21:59'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 11/30/2020 02:21:59'!
PASSED!

----SNAPSHOT----(30 November 2020 02:22:02) CuisUniversity-4384.image priorSource: 17249869!
!Cashier methodsFor: 'private' stamp: 'fr 11/30/2020 02:22:23'!
collectReceiptEntriesInto: ticketEntries 
	
	cart itemsQuantitiesAndPricesDo: [:anItem :aQuantity :aPrice | 
		ticketEntries add: (SaleReceiptEntry for: aQuantity of: anItem costing: aPrice)
	]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 02:22:23' prior: 50873412!
createTicket

	| ticketEntries |
	ticketEntries _ OrderedCollection new.
	self collectReceiptEntriesInto: ticketEntries.
	receipt _ SaleReceipt for: ticketEntries customer: customer 
	
	! !

!methodRemoval: Cashier #collectTicketEntriesInto: stamp: 'fr 11/30/2020 02:22:23'!
collectTicketEntriesInto: ticketEntries 
	
	cart itemsQuantitiesAndPricesDo: [:anItem :aQuantity :aPrice | 
		ticketEntries add: (SaleReceiptEntry for: aQuantity of: anItem costing: aPrice)
	]!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 11/30/2020 02:22:25'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 11/30/2020 02:22:25'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 11/30/2020 02:22:25'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 11/30/2020 02:22:25'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 11/30/2020 02:22:25'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 11/30/2020 02:22:25'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 11/30/2020 02:22:25'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 11/30/2020 02:22:25'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 11/30/2020 02:22:25'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 11/30/2020 02:22:25'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 11/30/2020 02:22:25'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 02:22:25'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 11/30/2020 02:22:25'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 11/30/2020 02:22:25'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 02:22:25'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 02:22:25'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/30/2020 02:22:25'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/30/2020 02:22:25'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/30/2020 02:22:25'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/30/2020 02:22:25'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/30/2020 02:22:25'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:22:25'!
PASSED!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 11/30/2020 02:22:25'!
PASSED!

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 02:22:25'!
PASSED!
!Cashier methodsFor: 'private' stamp: 'fr 11/30/2020 02:22:40'!
createReceipt

	| ticketEntries |
	ticketEntries _ OrderedCollection new.
	self collectReceiptEntriesInto: ticketEntries.
	receipt _ SaleReceipt for: ticketEntries customer: customer 
	
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 02:22:40' prior: 50873406!
checkOut

	self createReceipt.
	self debitTotal.
	self registerSale.

	^ receipt! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 02:22:40' prior: 50873401!
calculateTotal

	receipt _ self createReceipt.
	! !

!methodRemoval: Cashier #createTicket stamp: 'fr 11/30/2020 02:22:41'!
createTicket

	| ticketEntries |
	ticketEntries _ OrderedCollection new.
	self collectReceiptEntriesInto: ticketEntries.
	receipt _ SaleReceipt for: ticketEntries customer: customer 
	
	!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 11/30/2020 02:22:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 11/30/2020 02:22:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 11/30/2020 02:22:42'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 11/30/2020 02:22:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 11/30/2020 02:22:42'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 11/30/2020 02:22:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 11/30/2020 02:22:42'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 11/30/2020 02:22:42'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 11/30/2020 02:22:42'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 11/30/2020 02:22:42'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 11/30/2020 02:22:42'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 02:22:42'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 11/30/2020 02:22:42'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 11/30/2020 02:22:42'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 02:22:42'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 02:22:42'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/30/2020 02:22:42'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/30/2020 02:22:42'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/30/2020 02:22:42'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/30/2020 02:22:42'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/30/2020 02:22:42'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:22:42'!
PASSED!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 11/30/2020 02:22:42'!
PASSED!

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 02:22:42'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 11/30/2020 02:23:03'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 11/30/2020 02:23:03'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 11/30/2020 02:23:03'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 11/30/2020 02:23:03'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 11/30/2020 02:23:03'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 11/30/2020 02:23:03'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 11/30/2020 02:23:03'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 11/30/2020 02:23:03'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 11/30/2020 02:23:03'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 11/30/2020 02:23:03'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 11/30/2020 02:23:03'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 02:23:03'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 11/30/2020 02:23:03'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 11/30/2020 02:23:03'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 02:23:03'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 02:23:03'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/30/2020 02:23:03'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/30/2020 02:23:03'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/30/2020 02:23:03'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/30/2020 02:23:03'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/30/2020 02:23:03'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:23:03'!
PASSED!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 11/30/2020 02:23:03'!
PASSED!

!testRun: #FacadeTest #test10 stamp: 'fr 11/30/2020 02:23:03'!
PASSED!

!methodRemoval: Cashier #calculateTotal stamp: 'fr 11/30/2020 02:23:20'!
calculateTotal

	receipt _ self createReceipt.
	!
!Cashier methodsFor: 'checkout - private' stamp: 'fr 11/30/2020 02:24:09' prior: 50873452!
createSale

	^Sale for: receipt
! !
!Facade methodsFor: 'listing' stamp: 'fr 11/30/2020 02:25:34'!
salesForCustomer: aUsername

	^ salesBook select: [:aSale | aSale doneFor: aUsername]! !
!Facade methodsFor: 'listing' stamp: 'fr 11/30/2020 02:25:34' prior: 50872233!
listPurchasesOfUser: aUsername withPassword: aPassword 

	^(((self salesForCustomer: aUsername) collect: [:aSale | aSale itemsWithCounts]) inject: Bag new into: [:totalItemsWithCounts :itemsWithCounts | totalItemsWithCounts addAll: itemsWithCounts. totalItemsWithCounts]) contents
	! !
!Facade methodsFor: 'listing' stamp: 'fr 11/30/2020 02:26:05'!
itemsWithCountsForCustomer: aUsername

	^ (self salesForCustomer: aUsername) collect: [:aSale | aSale itemsWithCounts]! !
!Facade methodsFor: 'listing' stamp: 'fr 11/30/2020 02:26:05' prior: 50874475!
listPurchasesOfUser: aUsername withPassword: aPassword 

	^((self itemsWithCountsForCustomer: aUsername) inject: Bag new into: [:totalItemsWithCounts :itemsWithCounts | totalItemsWithCounts addAll: itemsWithCounts. totalItemsWithCounts]) contents
	! !
!Facade methodsFor: 'listing' stamp: 'fr 11/30/2020 02:26:41'!
totalItemsWithCountsForCustomer: aUsername

	^ (self itemsWithCountsForCustomer: aUsername) inject: Bag new into: [:totalItemsWithCounts :itemsWithCounts | totalItemsWithCounts addAll: itemsWithCounts. totalItemsWithCounts]! !
!Facade methodsFor: 'listing' stamp: 'fr 11/30/2020 02:26:41' prior: 50874493!
listPurchasesOfUser: aUsername withPassword: aPassword 

	^(self totalItemsWithCountsForCustomer: aUsername) contents
	! !

!methodRemoval: Facade #initializeAcceptingItemsOf:validatingUsersFrom: stamp: 'fr 11/30/2020 02:27:34'!
initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aUsernameList 
	
	catalogue _ aCatalogue.
	credentials _ aUsernameList.
	carts _ Dictionary new.
	currentId _ 0!

!methodRemoval: Facade class #acceptingItemsOf:validatingUsersFrom: stamp: 'fr 11/30/2020 02:27:41'!
acceptingItemsOf: aCatalogue validatingUsersFrom: aUsernameList 
	
	^self new initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aUsernameList !
!Facade methodsFor: 'purchase listing' stamp: 'fr 11/30/2020 02:29:31' prior: 50874503!
totalItemsWithCountsForCustomer: aUsername

	^ (self itemsWithCountsForCustomer: aUsername) 
									inject: Bag new 
									into: [:totalItemsWithCounts :itemsWithCounts | 
											totalItemsWithCounts addAll: itemsWithCounts. totalItemsWithCounts
									]! !
!Facade methodsFor: 'purchase listing' stamp: 'fr 11/30/2020 02:30:05'!
listPurchasesForCustomer: aUsername

	^ (self totalItemsWithCountsForCustomer: aUsername) contents! !
!Facade methodsFor: 'purchase listing' stamp: 'fr 11/30/2020 02:30:05' prior: 50874513!
listPurchasesOfUser: aUsername withPassword: aPassword 

	^self listPurchasesForCustomer: aUsername
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:30:58'!
test10PurchaseListHasTheCorrectQuantityOfItems

	| cartId |
				
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: self cardNumber 
		expiringOn: self cardExpirationDate 
		forOwner: self validUser.
	
	self assert: ((facade listPurchasesOfUser: self validUser withPassword: self validPassword) at: objectFactory itemSellByTheStore) equals: 2.
	
	! !

!methodRemoval: FacadeTest #test10 stamp: 'fr 11/30/2020 02:30:58'!
test10

	| cartId |
				
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: self cardNumber 
		expiringOn: self cardExpirationDate 
		forOwner: self validUser.
	
	self assert: ((facade listPurchasesOfUser: self validUser withPassword: self validPassword) at: objectFactory itemSellByTheStore) equals: 2.
	
	!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:31:08'!
test11

	| cartId |
				
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: self cardNumber 
		expiringOn: self cardExpirationDate 
		forOwner: self validUser.
	
	self assert: ((facade listPurchasesOfUser: self validUser withPassword: self validPassword) at: objectFactory itemSellByTheStore) equals: 2.
	
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:31:58' prior: 50874594!
test11

	| cartId |
				
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: self cardNumber 
		expiringOn: self cardExpirationDate 
		forOwner: self validUser.
	
	self  should: [facade listPurchasesOfUser: self validUser withPassword: self validPassword] 
		raise: Error - MessageNotUnderstood
		description: Facade invalidCredentialsErrorDescription 
	
	! !

!testRun: #FacadeTest #test11 stamp: 'fr 11/30/2020 02:32:00'!
FAILURE!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:32:11' prior: 50874611!
test11

	| cartId |
				
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: self cardNumber 
		expiringOn: self cardExpirationDate 
		forOwner: self validUser.
	
	self  should: [facade listPurchasesOfUser: self invalidUser withPassword: self validPassword] 
		raise: Error - MessageNotUnderstood
		description: Facade invalidCredentialsErrorDescription 
	
	! !
!Facade methodsFor: 'purchase listing' stamp: 'fr 11/30/2020 02:33:19' prior: 50874554!
listPurchasesOfUser: aUsername withPassword: aPassword 

	self passwordForUsername: aUsername.

	^self listPurchasesForCustomer: aUsername
	! !

!testRun: #FacadeTest #test11 stamp: 'fr 11/30/2020 02:33:31'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 02:33:31'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 02:33:31'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/30/2020 02:33:31'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/30/2020 02:33:31'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/30/2020 02:33:31'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/30/2020 02:33:31'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/30/2020 02:33:31'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:33:31'!
PASSED!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 11/30/2020 02:33:31'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 11/30/2020 02:33:31'!
PASSED!

!testRun: #FacadeTest #test11 stamp: 'fr 11/30/2020 02:33:31'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:33:41'!
test12

	| cartId |
				
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: self cardNumber 
		expiringOn: self cardExpirationDate 
		forOwner: self validUser.
	
	self  should: [facade listPurchasesOfUser: self invalidUser withPassword: self validPassword] 
		raise: Error - MessageNotUnderstood
		description: Facade invalidCredentialsErrorDescription 
	
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:33:48' prior: 50874695!
test12

	| cartId |
				
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: self cardNumber 
		expiringOn: self cardExpirationDate 
		forOwner: self validUser.
	
	self  should: [facade listPurchasesOfUser: self validUser withPassword: self invalidPassword] 
		raise: Error - MessageNotUnderstood
		description: Facade invalidCredentialsErrorDescription 
	
	! !

!testRun: #FacadeTest #test12 stamp: 'fr 11/30/2020 02:33:49'!
FAILURE!
!Facade methodsFor: 'purchase listing' stamp: 'fr 11/30/2020 02:34:10' prior: 50874651!
listPurchasesOfUser: aUsername withPassword: aPassword 

	self validateUsername: aUsername andPassword: aPassword.

	^self listPurchasesForCustomer: aUsername
	! !

!testRun: #FacadeTest #test12 stamp: 'fr 11/30/2020 02:34:11'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 02:34:11'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 02:34:11'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/30/2020 02:34:11'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/30/2020 02:34:11'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/30/2020 02:34:11'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/30/2020 02:34:11'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/30/2020 02:34:11'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:34:11'!
PASSED!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 11/30/2020 02:34:11'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 11/30/2020 02:34:11'!
PASSED!

!testRun: #FacadeTest #test11 stamp: 'fr 11/30/2020 02:34:11'!
PASSED!

!testRun: #FacadeTest #test12 stamp: 'fr 11/30/2020 02:34:11'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:34:26'!
test11CanNotListPurchasesForInvalidUsername

	| cartId |
				
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: self cardNumber 
		expiringOn: self cardExpirationDate 
		forOwner: self validUser.
	
	self  should: [facade listPurchasesOfUser: self invalidUser withPassword: self validPassword] 
		raise: Error - MessageNotUnderstood
		description: Facade invalidCredentialsErrorDescription 
	
	! !

!methodRemoval: FacadeTest #test11 stamp: 'fr 11/30/2020 02:34:26'!
test11

	| cartId |
				
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: self cardNumber 
		expiringOn: self cardExpirationDate 
		forOwner: self validUser.
	
	self  should: [facade listPurchasesOfUser: self invalidUser withPassword: self validPassword] 
		raise: Error - MessageNotUnderstood
		description: Facade invalidCredentialsErrorDescription 
	
	!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:34:44'!
test12CanNotListPurchasesForInvalidPassword

	| cartId |
				
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: self cardNumber 
		expiringOn: self cardExpirationDate 
		forOwner: self validUser.
	
	self  should: [facade listPurchasesOfUser: self validUser withPassword: self invalidPassword] 
		raise: Error - MessageNotUnderstood
		description: Facade invalidCredentialsErrorDescription 
	
	! !

!methodRemoval: FacadeTest #test12 stamp: 'fr 11/30/2020 02:34:44'!
test12

	| cartId |
				
	cartId _ facade newCartForUser: self validUser andPassword: self validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: self cardNumber 
		expiringOn: self cardExpirationDate 
		forOwner: self validUser.
	
	self  should: [facade listPurchasesOfUser: self validUser withPassword: self invalidPassword] 
		raise: Error - MessageNotUnderstood
		description: Facade invalidCredentialsErrorDescription 
	
	!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:35:10' prior: 50871926!
notas
	"Es necesario agregar un test que verifique el agregado de items que no est�n en el cat�logo a este nivel? -> test06"
	
	"Hace falta ver los checkouts con tarjeta vencida, robada, etc? Y con el carrito vac�o? Todo esto ya est� chequeado en el Cashier. Usamos la idea de que decida el error a seguir el que inicia la acci�n? (similar al ejemplo del caf� y la m�quina) -> test09"
	
	"Tiene sentido modelar la venta para guardarla en el libro? No es conveniente guardar un comprobante del grupo ya que es lo que ocurre en la realidad?"
	
	"El id inv�lido puede ser nil?"
	
	"Es correcto pasar la lista de usuarios y contrase�as o hay que hacer algo similar a lo del merchant processor?"
	
	"Customer vs username qu� conviene usar?"! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:35:16' prior: 50874857!
notas

	"Es necesario agregar un test que verifique el agregado de items que no est�n en el cat�logo a este nivel? -> test06"
	
	"Hace falta ver los checkouts con tarjeta vencida, robada, etc? Y con el carrito vac�o? Todo esto ya est� chequeado en el Cashier. Usamos la idea de que decida el error a seguir el que inicia la acci�n? (similar al ejemplo del caf� y la m�quina) -> test09"
	
	"Tiene sentido modelar la venta para guardarla en el libro? No es conveniente guardar un comprobante del grupo ya que es lo que ocurre en la realidad?"
	
	"El id inv�lido puede ser nil?"
	
	"Es correcto pasar la lista de usuarios y contrase�as o hay que hacer algo similar a lo del merchant processor?"
	
	"Customer vs username qu� conviene usar?"! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:35:35' prior: 50870615!
test01CanCreateNewCartWithValidCredentials

	| cartId  |
	
	cartId _ facade newCartForUser: objectFactory validUser andPassword: self validPassword.
	
	self assert: (facade listCart: cartId) isEmpty! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:35:40' prior: 50874909!
test01CanCreateNewCartWithValidCredentials

	| cartId  |
	
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	
	self assert: (facade listCart: cartId) isEmpty! !

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 02:35:41'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'asdad' stamp: 'fr 11/30/2020 02:35:48'!
validUser
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'asdad' stamp: 'fr 11/30/2020 02:35:58' prior: 50874931!
validUser
	
	^'validUsername'! !

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 02:36:01'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 02:36:09'!
validPassword
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 02:36:17' prior: 50874944!
validPassword
	
	^'validPassword'! !

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 02:36:18'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 02:36:18'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 02:36:18'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/30/2020 02:36:18'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/30/2020 02:36:18'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/30/2020 02:36:18'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/30/2020 02:36:18'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/30/2020 02:36:18'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:36:18'!
PASSED!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 11/30/2020 02:36:18'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 11/30/2020 02:36:18'!
PASSED!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 11/30/2020 02:36:18'!
PASSED!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 11/30/2020 02:36:18'!
PASSED!
!FacadeTest methodsFor: 'setup' stamp: 'fr 11/30/2020 02:36:39' prior: 50871671 overrides: 16927572!
setUp
	
	objectFactory _ StoreTestObjectsFactory new.
	salesBook _ self salesBook.
	facade _ facade _ Facade 
				acceptingItemsOf: objectFactory defaultCatalog 
				validatingUsersFrom: objectFactory defaultCredentials 
				registeringSalesOn: salesBook
				chargingThrough: self.
! !
!FacadeTest methodsFor: 'setup' stamp: 'fr 11/30/2020 02:36:51' prior: 50874997 overrides: 16927572!
setUp
	
	objectFactory _ StoreTestObjectsFactory new.
	salesBook _ objectFactory defaultSalesBook.
	facade _ facade _ Facade 
				acceptingItemsOf: objectFactory defaultCatalog 
				validatingUsersFrom: objectFactory defaultCredentials 
				registeringSalesOn: salesBook
				chargingThrough: self.
! !

!methodRemoval: FacadeTest #validUser stamp: 'fr 11/30/2020 02:37:07'!
validUser
	
	^'validUsername'!

!methodRemoval: FacadeTest #validPassword stamp: 'fr 11/30/2020 02:37:14'!
validPassword
	
	^'validPassword'!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:37:27' prior: 50870367!
test02CanNotCreateNewCartForInvalidUser

	self  should: [facade newCartForUser: objectFactory invalidUser andPassword: objectFactory validPassword]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorDescription
		! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:37:36' prior: 50870385!
test03CanNotCreateNewCartForInvalidPassword
	
	self  should: [facade newCartForUser: objectFactory validUser andPassword: objectFactory invalidPassword]
		raise: Error - MessageNotUnderstood 
		withMessageText: Facade invalidCredentialsErrorDescription
		! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:37:46' prior: 50870522!
test05AddingAnItemWorksAsExpected

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: objectFactory itemSellByTheStore) equals: 1! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:37:57' prior: 50870666!
test07ListingACartWorksAsExpectedForMultipleItems

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: objectFactory itemSellByTheStore) equals: 2! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:38:08' prior: 50874009!
test08CanCheckoutAValidCart

	| cartId receipt |
				
	cartId _ facade 
				newCartForUser: objectFactory validUser 
				andPassword: objectFactory validPassword.
				
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	
	receipt _ facade 
			checkoutCart: cartId 
			withCard: self cardNumber 
			expiringOn: self cardExpirationDate 
			forOwner: self cardOwner.
			
	self assert: receipt total equals: objectFactory itemSellByTheStorePrice * 2
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:38:18' prior: 50871710!
test09CanNotCheckoutANonexistentCart
				
	self should: [facade 
			checkoutCart: 1 
			withCard: self cardNumber 
			expiringOn: self cardExpirationDate 
			forOwner: objectFactory validUser.] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
							self assert: anError messageText equals: Facade invalidCartIdErrorDescription.
							self assert: salesBook isEmpty
			]
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:38:44' prior: 50874560!
test10PurchaseListHasTheCorrectQuantityOfItems

	| cartId |
				
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: self cardNumber 
		expiringOn: self cardExpirationDate 
		forOwner: objectFactory validUser.
	
	self assert: ((facade listPurchasesOfUser: objectFactory validUser withPassword: objectFactory validPassword) at: objectFactory itemSellByTheStore) equals: 2.
	
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:38:51' prior: 50874782!
test11CanNotListPurchasesForInvalidUsername

	| cartId |
				
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: self cardNumber 
		expiringOn: self cardExpirationDate 
		forOwner: self validUser.
	
	self  should: [facade listPurchasesOfUser: self invalidUser withPassword: self validPassword] 
		raise: Error - MessageNotUnderstood
		description: Facade invalidCredentialsErrorDescription 
	
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:38:58' prior: 50875131!
test11CanNotListPurchasesForInvalidUsername

	| cartId |
				
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: self cardNumber 
		expiringOn: self cardExpirationDate 
		forOwner: self validUser.
	
	self  should: [facade listPurchasesOfUser: objectFactory invalidUser withPassword: objectFactory validPassword] 
		raise: Error - MessageNotUnderstood
		description: Facade invalidCredentialsErrorDescription 
	
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:39:14' prior: 50874819!
test12CanNotListPurchasesForInvalidPassword

	| cartId |
				
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: self cardNumber 
		expiringOn: self cardExpirationDate 
		forOwner: objectFactory validUser.
	
	self  should: [facade listPurchasesOfUser: objectFactory validUser withPassword: objectFactory invalidPassword] 
		raise: Error - MessageNotUnderstood
		description: Facade invalidCredentialsErrorDescription 
	
	! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 02:39:38'!
defaultSalesBook
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 02:39:41' prior: 50875195!
defaultSalesBook
	
	^OrderedCollection new! !

!methodRemoval: FacadeTest #salesBook stamp: 'fr 11/30/2020 02:39:51'!
salesBook
	
	^OrderedCollection new!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 02:40:00'!
defaultCredentials
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 02:40:07' prior: 50875208!
defaultCredentials

	^Dictionary new add: self validUser -> self validPassword; yourself! !

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 11/30/2020 02:40:11'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 02:40:21'!
invalidPassword
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 02:40:27' prior: 50875223!
invalidPassword

	^'invalidPassword'! !

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 11/30/2020 02:40:28'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 02:40:33'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 02:40:33'!
ERROR!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/30/2020 02:40:33'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/30/2020 02:40:33'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/30/2020 02:40:33'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/30/2020 02:40:33'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/30/2020 02:40:33'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:40:33'!
PASSED!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 11/30/2020 02:40:33'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 11/30/2020 02:40:33'!
PASSED!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 11/30/2020 02:40:33'!
ERROR!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 11/30/2020 02:40:33'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 02:40:37'!
ERROR!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 02:40:37'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 02:40:43'!
invalidUser
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 02:40:51' prior: 50875282!
invalidUser
	
	^'invalidUsername'! !

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 02:40:51'!
PASSED!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 11/30/2020 02:40:54'!
ERROR!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 11/30/2020 02:40:54'!
ERROR!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 02:41:18'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 02:41:18'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/30/2020 02:41:18'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/30/2020 02:41:18'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/30/2020 02:41:18'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/30/2020 02:41:18'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/30/2020 02:41:18'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:41:18'!
PASSED!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 11/30/2020 02:41:18'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 11/30/2020 02:41:18'!
PASSED!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 11/30/2020 02:41:18'!
ERROR!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 11/30/2020 02:41:18'!
PASSED!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 11/30/2020 02:41:18'!
ERROR!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:41:28' prior: 50875152!
test11CanNotListPurchasesForInvalidUsername

	| cartId |
				
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: self cardNumber 
		expiringOn: self cardExpirationDate 
		forOwner: objectFactory validUser.
	
	self  should: [facade listPurchasesOfUser: objectFactory invalidUser withPassword: objectFactory validPassword] 
		raise: Error - MessageNotUnderstood
		description: Facade invalidCredentialsErrorDescription 
	
	! !

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 11/30/2020 02:41:29'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 02:41:29'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 02:41:29'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/30/2020 02:41:29'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/30/2020 02:41:29'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/30/2020 02:41:29'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/30/2020 02:41:29'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/30/2020 02:41:29'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:41:29'!
PASSED!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 11/30/2020 02:41:29'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 11/30/2020 02:41:29'!
PASSED!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 11/30/2020 02:41:29'!
PASSED!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 11/30/2020 02:41:29'!
PASSED!

!methodRemoval: FacadeTest #invalidUser stamp: 'fr 11/30/2020 02:41:36'!
invalidUser
	
	^'Invalid username'!

!methodRemoval: FacadeTest #invalidPassword stamp: 'fr 11/30/2020 02:41:37'!
invalidPassword
	
	^'Invalid password'!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 02:41:39'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 02:41:39'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/30/2020 02:41:39'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/30/2020 02:41:39'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/30/2020 02:41:39'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/30/2020 02:41:39'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/30/2020 02:41:39'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:41:39'!
PASSED!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 11/30/2020 02:41:39'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 11/30/2020 02:41:39'!
PASSED!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 11/30/2020 02:41:39'!
PASSED!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 11/30/2020 02:41:39'!
PASSED!

!methodRemoval: FacadeTest #credentials stamp: 'fr 11/30/2020 02:41:41'!
credentials
	
	^Dictionary new add: self validUser -> self validPassword; yourself!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 02:41:43'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 02:41:43'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/30/2020 02:41:43'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/30/2020 02:41:43'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/30/2020 02:41:43'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/30/2020 02:41:43'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/30/2020 02:41:43'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:41:43'!
PASSED!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 11/30/2020 02:41:43'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 11/30/2020 02:41:43'!
PASSED!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 11/30/2020 02:41:43'!
PASSED!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 11/30/2020 02:41:43'!
PASSED!

!methodRemoval: FacadeTest #cardOwner stamp: 'fr 11/30/2020 02:41:46'!
cardOwner
	"PARA QU� SE USA ESTO?"
	^'validCardOwner'
	!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 02:41:47'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 02:41:47'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/30/2020 02:41:47'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/30/2020 02:41:47'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/30/2020 02:41:47'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/30/2020 02:41:47'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/30/2020 02:41:47'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:41:47'!
ERROR!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 11/30/2020 02:41:47'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 11/30/2020 02:41:47'!
PASSED!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 11/30/2020 02:41:47'!
PASSED!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 11/30/2020 02:41:47'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:41:47'!
ERROR!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:42:23' prior: 50875077!
test08CanCheckoutAValidCart

	| cartId receipt |
				
	cartId _ facade 
				newCartForUser: objectFactory validUser 
				andPassword: objectFactory validPassword.
				
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	
	receipt _ facade 
			checkoutCart: cartId 
			withCard: self cardNumber 
			expiringOn: self cardExpirationDate 
			forOwner: objectFactory validUser.
			
	self assert: receipt total equals: objectFactory itemSellByTheStorePrice * 2
	! !

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:42:24'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 02:42:24'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 02:42:24'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/30/2020 02:42:24'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/30/2020 02:42:24'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/30/2020 02:42:24'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/30/2020 02:42:24'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/30/2020 02:42:24'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:42:24'!
PASSED!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 11/30/2020 02:42:24'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 11/30/2020 02:42:24'!
PASSED!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 11/30/2020 02:42:24'!
PASSED!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 11/30/2020 02:42:24'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:42:57' prior: 50875545!
test08CanCheckoutAValidCart

	| cartId receipt |
				
	cartId _ facade 
				newCartForUser: objectFactory validUser 
				andPassword: objectFactory validPassword.
				
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	
	receipt _ facade 
			checkoutCart: cartId 
			withCard: self cardNumber 
			expiringOn: self cardExpirationDate 
			forOwner: objectFactory validUser. "Usar algo distinto al user? Dividir owner de user?"
			
	self assert: receipt total equals: objectFactory itemSellByTheStorePrice * 2
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:43:28' prior: 50875605!
test08CanCheckoutAValidCart

	| cartId receipt |
				
	cartId _ facade 
				newCartForUser: objectFactory validUser 
				andPassword: objectFactory validPassword.
				
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	
	receipt _ facade 
			checkoutCart: cartId 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory validUser. "Usar algo distinto al user? Dividir owner de user?"
			
	self assert: receipt total equals: objectFactory itemSellByTheStorePrice * 2
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:43:36' prior: 50875095!
test09CanNotCheckoutANonexistentCart
				
	self should: [facade 
			checkoutCart: 1 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory validUser.] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
							self assert: anError messageText equals: Facade invalidCartIdErrorDescription.
							self assert: salesBook isEmpty
			]
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:43:43' prior: 50875111!
test10PurchaseListHasTheCorrectQuantityOfItems

	| cartId |
				
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory validUser.
	
	self assert: ((facade listPurchasesOfUser: objectFactory validUser withPassword: objectFactory validPassword) at: objectFactory itemSellByTheStore) equals: 2.
	
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:43:50' prior: 50875344!
test11CanNotListPurchasesForInvalidUsername

	| cartId |
				
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory validUser.
	
	self  should: [facade listPurchasesOfUser: objectFactory invalidUser withPassword: objectFactory validPassword] 
		raise: Error - MessageNotUnderstood
		description: Facade invalidCredentialsErrorDescription 
	
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 02:43:57' prior: 50875173!
test12CanNotListPurchasesForInvalidPassword

	| cartId |
				
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory validUser.
	
	self  should: [facade listPurchasesOfUser: objectFactory validUser withPassword: objectFactory invalidPassword] 
		raise: Error - MessageNotUnderstood
		description: Facade invalidCredentialsErrorDescription 
	
	! !

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 02:44:03'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 02:44:03'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/30/2020 02:44:03'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/30/2020 02:44:03'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/30/2020 02:44:03'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/30/2020 02:44:03'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/30/2020 02:44:03'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:44:03'!
ERROR!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 11/30/2020 02:44:03'!
ERROR!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 11/30/2020 02:44:03'!
ERROR!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 11/30/2020 02:44:03'!
ERROR!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 11/30/2020 02:44:03'!
ERROR!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:44:06'!
ERROR!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:44:06'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 02:44:14'!
cardNumber
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 02:44:25' prior: 50875770!
cardNumber
	
	^'1111 2222 3333 4444'! !

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:44:26'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 02:44:33'!
cardExpirationDate
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 02:44:38' prior: 50875782!
cardExpirationDate
	
	! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 02:45:01' prior: 50875787!
cardExpirationDate

	^Month month: self today monthIndex year: self today yearNumber + 1	
	! !

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:45:16'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 02:45:18'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 02:45:18'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/30/2020 02:45:18'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/30/2020 02:45:18'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/30/2020 02:45:18'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/30/2020 02:45:18'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/30/2020 02:45:18'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:45:18'!
PASSED!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 11/30/2020 02:45:18'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 11/30/2020 02:45:18'!
PASSED!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 11/30/2020 02:45:18'!
PASSED!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 11/30/2020 02:45:18'!
PASSED!

!methodRemoval: FacadeTest #cardExpirationDate stamp: 'fr 11/30/2020 02:45:21'!
cardExpirationDate
	
	^Month month: objectFactory today monthIndex year: objectFactory today yearNumber + 1!

!methodRemoval: FacadeTest #cardNumber stamp: 'fr 11/30/2020 02:45:23'!
cardNumber
	"PARA QU� SE USA ESTO?"
	^'validCardNumber'!

!methodRemoval: FacadeTest #newFacade stamp: 'fr 11/30/2020 02:45:25'!
newFacade

	^ facade _ Facade 
				acceptingItemsOf: objectFactory defaultCatalog 
				validatingUsersFrom: self credentials 
				registeringSalesOn: self salesBook 
				chargingThrough: self.!

!methodRemoval: SaleReceipt #initializeFor: stamp: 'fr 11/30/2020 02:57:05'!
initializeFor: aReceiptEntriesList 
	
	receiptEntries _ aReceiptEntriesList.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 11/30/2020 02:57:07'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 11/30/2020 02:57:07'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 11/30/2020 02:57:07'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 11/30/2020 02:57:07'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 11/30/2020 02:57:07'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 11/30/2020 02:57:07'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 11/30/2020 02:57:07'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 11/30/2020 02:57:07'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 11/30/2020 02:57:07'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 11/30/2020 02:57:07'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 11/30/2020 02:57:07'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 11/30/2020 02:57:07'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 11/30/2020 02:57:07'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 11/30/2020 02:57:07'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 02:57:07'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 02:57:07'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/30/2020 02:57:07'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/30/2020 02:57:07'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/30/2020 02:57:07'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/30/2020 02:57:07'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/30/2020 02:57:07'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 02:57:07'!
PASSED!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 11/30/2020 02:57:07'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 11/30/2020 02:57:07'!
PASSED!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 11/30/2020 02:57:07'!
PASSED!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 11/30/2020 02:57:07'!
PASSED!
!SaleReceipt methodsFor: 'private' stamp: 'fr 11/30/2020 03:04:26' prior: 50873198!
collectItemsWithCountsInto: aListOfItemsWithOccurrences 
	
	receiptEntries do: [:aReceiptEntry | aListOfItemsWithOccurrences add: aReceiptEntry item withOccurrences: aReceiptEntry quantity]! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 03:04:55' prior: 50875661!
test10PurchaseListHasTheCorrectQuantityOfItems

	| cartId |
				
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory validUser.

	facade add: 3 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory validUser.
	
	self assert: ((facade listPurchasesOfUser: objectFactory validUser withPassword: objectFactory validPassword) at: objectFactory itemSellByTheStore) equals: 2.
	
	! !

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 11/30/2020 03:04:55'!
FAILURE!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 03:05:28' prior: 50875958!
test10PurchaseListHasTheCorrectQuantityOfItems

	| cartId |
				
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory validUser.
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 3 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory validUser.
	
	self assert: ((facade listPurchasesOfUser: objectFactory validUser withPassword: objectFactory validPassword) at: objectFactory itemSellByTheStore) equals: 2.
	
	! !

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 11/30/2020 03:05:29'!
FAILURE!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 03:05:34' prior: 50875989!
test10PurchaseListHasTheCorrectQuantityOfItems

	| cartId |
				
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory validUser.
		
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 3 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory validUser.
	
	self assert: ((facade listPurchasesOfUser: objectFactory validUser withPassword: objectFactory validPassword) at: objectFactory itemSellByTheStore) equals: 2.
	
	! !

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 11/30/2020 03:05:35'!
FAILURE!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 11/30/2020 03:05:43'!
FAILURE!

self totalItemsWithCountsForCustomer: aUsername!

(self totalItemsWithCountsForCustomer: aUsername) contents!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 03:06:37' prior: 50876023!
test10PurchaseListHasTheCorrectQuantityOfItems

	| cartId |
				
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory validUser.
		
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 3 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory validUser.
	
	self assert: ((facade listPurchasesOfUser: objectFactory validUser withPassword: objectFactory validPassword) at: objectFactory itemSellByTheStore) equals: 5.
	
	! !

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 11/30/2020 03:06:37'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 03:06:37'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 03:06:37'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/30/2020 03:06:37'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/30/2020 03:06:37'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/30/2020 03:06:37'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/30/2020 03:06:37'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/30/2020 03:06:37'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 03:06:37'!
PASSED!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 11/30/2020 03:06:37'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 11/30/2020 03:06:37'!
PASSED!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 11/30/2020 03:06:37'!
PASSED!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 11/30/2020 03:06:37'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 03:06:41' prior: 50876064!
test10PurchaseListHasTheCorrectQuantityOfItems

	| cartId |
				
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory validUser.
		
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 3 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory validUser.
	
	self assert: ((facade listPurchasesOfUser: objectFactory validUser withPassword: objectFactory validPassword) at: objectFactory itemSellByTheStore) equals: 2.
	
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 03:06:48' prior: 50876138!
test10PurchaseListHasTheCorrectQuantityOfItems

	| cartId |
				
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory validUser.
	
	self assert: ((facade listPurchasesOfUser: objectFactory validUser withPassword: objectFactory validPassword) at: objectFactory itemSellByTheStore) equals: 2.
	
	! !

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 11/30/2020 03:06:49'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 03:06:49'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 03:06:49'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/30/2020 03:06:49'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/30/2020 03:06:49'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/30/2020 03:06:49'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/30/2020 03:06:49'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/30/2020 03:06:49'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 03:06:49'!
PASSED!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 11/30/2020 03:06:49'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 11/30/2020 03:06:49'!
PASSED!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 11/30/2020 03:06:49'!
PASSED!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 11/30/2020 03:06:49'!
PASSED!

----SNAPSHOT----(30 November 2020 03:11:54) CuisUniversity-4384.image priorSource: 17360675!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 03:12:34' prior: 50876169!
test10PurchaseListHasTheCorrectQuantityOfItems

	| cartId purchases |
				
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory validUser.
	
	
	purchases _ facade listPurchasesOfUser: objectFactory validUser withPassword: objectFactory validPassword.
	
	self assert: (purchases at: objectFactory itemSellByTheStore) equals: 2.
	
	! !

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 11/30/2020 03:12:36'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 03:12:36'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 03:12:36'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/30/2020 03:12:36'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/30/2020 03:12:36'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/30/2020 03:12:36'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/30/2020 03:12:36'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/30/2020 03:12:36'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 03:12:36'!
PASSED!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 11/30/2020 03:12:36'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 11/30/2020 03:12:36'!
PASSED!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 11/30/2020 03:12:36'!
PASSED!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 11/30/2020 03:12:36'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 03:12:51' prior: 50876235!
test10PurchaseListHasTheCorrectQuantityOfItems

	| cartId purchasesList |
				
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory validUser.
	purchasesList _ facade listPurchasesOfUser: objectFactory validUser withPassword: objectFactory validPassword.
	
	self assert: (purchasesList at: objectFactory itemSellByTheStore) equals: 2.
	
	! !

----SNAPSHOT----(30 November 2020 03:13:41) CuisUniversity-4384.image priorSource: 17426603!

----QUIT----(30 November 2020 03:42:14) CuisUniversity-4384.image priorSource: 17429465!

----STARTUP---- (30 November 2020 17:27:53) as /home/fede/Documentos/Facultad/Inge1/Cuises/linux64/CuisUniversity-4384.image!


----End fileIn of /home/fede/Documentos/Facultad/Inge1/Cuises/linux64/Packages/TerseGuide.pck.st----!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 18:10:40'!
test13

	| cartId |
				
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory validUser.
	
	self  should: [facade listPurchasesOfUser: objectFactory validUser withPassword: objectFactory invalidPassword] 
		raise: Error - MessageNotUnderstood
		description: Facade invalidCredentialsErrorDescription 
	
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 18:10:46' prior: 50879267!
test13

	| cartId |
				
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	
	
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 18:20:05' prior: 50874883!
notas
	
	"Tiene sentido modelar la venta para guardarla en el libro? No es conveniente guardar un comprobante del grupo ya que es lo que ocurre en la realidad?"
	
	"El id inv�lido puede ser nil?"
	
	"Es correcto pasar la lista de usuarios y contrase�as o hay que hacer algo similar a lo del merchant processor?"
	
	"Customer vs username qu� conviene usar?"! !

DateAndTime now!

Object subclass: #Sale
	instanceVariableNames: 'customer receipt'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!

!classDefinition: #Sale category: 'TusLibros - Exercise - III' stamp: 'fr 11/30/2020 18:50:11'!
Object subclass: #Sale
	instanceVariableNames: 'customer receipt'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!

!classDefinition: #Clock category: 'TusLibros - Exercise - III' stamp: 'fr 11/30/2020 19:08:31'!
Object subclass: #Clock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 19:08:27' prior: 50879288!
test13

	| cartId clock |
	clock _ Clock for: objectFactory today.
	
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	
	
	! !
!FacadeTest methodsFor: 'setup' stamp: 'fr 11/30/2020 19:08:45' prior: 50875010 overrides: 16927572!
setUp
	
	objectFactory _ StoreTestObjectsFactory new.
	salesBook _ objectFactory defaultSalesBook.
	facade _ Facade 
				acceptingItemsOf: objectFactory defaultCatalog 
				validatingUsersFrom: objectFactory defaultCredentials 
				registeringSalesOn: salesBook
				chargingThrough: self.
! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 19:11:51' prior: 50879330!
test13

	| cartId clock |
	clock _ Clock for: objectFactory today.
	facade _ Facade 
			acceptingItemsOf: objectFactory defaultCatalog 
			validatingUsersFrom: objectFactory defaultCredentials 
			registeringSalesOn: salesBook
			chargingThrough: self
			withClock: clock.
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock advanceAnHour.
	self  should: [facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId]
		raise: Error - MessageNotUnderstood
		description: Facade cartExpiredErrorDescription
	
	
	
	
	! !

!testRun: #FacadeTest #test13 stamp: 'fr 11/30/2020 19:12:00'!
ERROR!
!Clock class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 19:12:37'!
for: aDateAndTime 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aDateAndTime ! !
!Clock class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 19:12:42' prior: 50879374!
for: aDateAndTime 
	
	^self new initializeFor: aDateAndTime ! !
!Clock class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 19:12:49' prior: 50879382!
for: aTime 
	
	^self new initializeFor: aTime ! !

!testRun: #FacadeTest #test13 stamp: 'fr 11/30/2020 19:12:52'!
ERROR!

!classDefinition: #Clock category: 'TusLibros - Exercise - III' stamp: 'fr 11/30/2020 19:13:01'!
Object subclass: #Clock
	instanceVariableNames: 'time'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!Clock methodsFor: 'initialization' stamp: 'fr 11/30/2020 19:13:01'!
initializeFor: aTime 
	self shouldBeImplemented.
	time := aTime.! !
!Clock methodsFor: 'initialization' stamp: 'fr 11/30/2020 19:13:07' prior: 50879401!
initializeFor: aTime 
	
	time _ aTime.! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 19:13:59' prior: 50879351!
test13

	| cartId clock |
	clock _ Clock new.
	facade _ Facade 
			acceptingItemsOf: objectFactory defaultCatalog 
			validatingUsersFrom: objectFactory defaultCredentials 
			registeringSalesOn: salesBook
			chargingThrough: self
			withClock: clock.
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock advanceAnHour.
	self  should: [facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId]
		raise: Error - MessageNotUnderstood
		description: Facade cartExpiredErrorDescription
	
	
	
	
	! !

!methodRemoval: Clock #initializeFor: stamp: 'fr 11/30/2020 19:14:04'!
initializeFor: aTime 
	
	time _ aTime.!

!methodRemoval: Clock class #for: stamp: 'fr 11/30/2020 19:14:09'!
for: aTime 
	
	^self new initializeFor: aTime !

!testRun: #FacadeTest #test13 stamp: 'fr 11/30/2020 19:14:45'!
ERROR!
!Facade class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 19:14:52'!
acceptingItemsOf: aDictionary validatingUsersFrom: aDictionary2 registeringSalesOn: anOrderedCollection chargingThrough: aFacadeTest withClock: aClock 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeAcceptingItemsOf: aDictionary validatingUsersFrom: aDictionary2 registeringSalesOn: anOrderedCollection chargingThrough: aFacadeTest withClock: aClock ! !
!Facade class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 19:14:57' prior: 50879440!
acceptingItemsOf: aDictionary validatingUsersFrom: aDictionary2 registeringSalesOn: anOrderedCollection chargingThrough: aFacadeTest withClock: aClock 
	
	^self new initializeAcceptingItemsOf: aDictionary validatingUsersFrom: aDictionary2 registeringSalesOn: anOrderedCollection chargingThrough: aFacadeTest withClock: aClock ! !
!Facade class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 19:15:02' prior: 50879457!
acceptingItemsOf: aCatalogue validatingUsersFrom: aDictionary2 registeringSalesOn: anOrderedCollection chargingThrough: aFacadeTest withClock: aClock 
	
	^self new initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aDictionary2 registeringSalesOn: anOrderedCollection chargingThrough: aFacadeTest withClock: aClock ! !
!Facade class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 19:15:09' prior: 50879471!
acceptingItemsOf: aCatalogue validatingUsersFrom: aCredentialsList registeringSalesOn: anOrderedCollection chargingThrough: aFacadeTest withClock: aClock 
	
	^self new initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aCredentialsList registeringSalesOn: anOrderedCollection chargingThrough: aFacadeTest withClock: aClock ! !
!Facade class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 19:15:14' prior: 50879485!
acceptingItemsOf: aCatalogue validatingUsersFrom: aCredentialsList registeringSalesOn: aSalesBook chargingThrough: aFacadeTest withClock: aClock 
	
	^self new initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aCredentialsList registeringSalesOn: aSalesBook chargingThrough: aFacadeTest withClock: aClock ! !
!Facade class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 19:15:21' prior: 50879499!
acceptingItemsOf: aCatalogue validatingUsersFrom: aCredentialsList registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor withClock: aClock 
	
	^self new initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aCredentialsList registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor withClock: aClock ! !

!testRun: #FacadeTest #test13 stamp: 'fr 11/30/2020 19:15:34'!
ERROR!

!classDefinition: #Facade category: 'TusLibros - Exercise - III' stamp: 'fr 11/30/2020 19:15:58'!
Object subclass: #Facade
	instanceVariableNames: 'carts catalogue credentials usernameList currentId merchantProcessor salesBook credentialsList clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!Facade methodsFor: 'initialization' stamp: 'fr 11/30/2020 19:15:58'!
initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aCredentialsList registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor withClock: aClock 
	self shouldBeImplemented.
	catalogue := aCatalogue.
	credentialsList := aCredentialsList.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.
	clock := aClock.! !
!Facade methodsFor: 'initialization' stamp: 'fr 11/30/2020 19:16:01' prior: 50879538!
initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aCredentialsList registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor withClock: aClock 
	
	catalogue := aCatalogue.
	credentialsList := aCredentialsList.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.
	clock := aClock.! !
!Facade methodsFor: 'initialization' stamp: 'fr 11/30/2020 19:16:38' prior: 50879552!
initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aCredentialsList registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor withClock: aClock 
	
	catalogue _ aCatalogue.
	credentials _ aCredentialsList.
	salesBook _ aSalesBook.
	merchantProcessor _ aMerchantProcessor.
	clock := aClock.
	
	carts _ Dictionary new.
	currentId _ 0
! !

!testRun: #FacadeTest #test13 stamp: 'fr 11/30/2020 19:16:45'!
ERROR!
!Clock methodsFor: 'offset' stamp: 'fr 11/30/2020 19:16:58'!
advanceAnHour
	self shouldBeImplemented.! !

DateAndTime now !

DateAndTime now + 30 !

DateAndTime now !

DateAndTime now!

self class selectors !

Duration!

self selectors !

Duration hours: 1!

DateAndTime now + Duration hours: 1!

DateAndTime now + Duration hours: 1 !

DateAndTime now + Duration hours: 1 !

(DateAndTime now) + (Duration hours: 1) !
!Clock methodsFor: 'offset' stamp: 'fr 11/30/2020 19:21:01' prior: 50879581!
advanceAnHour
	
	time _ Duration hours: 1! !

!classDefinition: #Clock category: 'TusLibros - Exercise - III' stamp: 'fr 11/30/2020 19:21:11'!
Object subclass: #Clock
	instanceVariableNames: 'offset'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!Clock methodsFor: 'as yet unclassified' stamp: 'fr 11/30/2020 19:21:11' prior: 50879595!
advanceAnHour
	
	offset _ Duration hours: 1! !

!testRun: #FacadeTest #test13 stamp: 'fr 11/30/2020 19:21:18'!
ERROR!
!Facade class methodsFor: 'error description' stamp: 'fr 11/30/2020 19:21:32'!
cartExpiredErrorDescription
	self shouldBeImplemented.! !
!Facade class methodsFor: 'error description' stamp: 'fr 11/30/2020 19:21:47' prior: 50879614!
cartExpiredErrorDescription
	
	^'Cart session expired'! !

!testRun: #FacadeTest #test13 stamp: 'fr 11/30/2020 19:21:48'!
FAILURE!

!classDefinition: #CartSession category: 'TusLibros - Exercise - III' stamp: 'fr 11/30/2020 19:22:21'!
Object subclass: #CartSession
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!Facade methodsFor: 'cart management' stamp: 'fr 11/30/2020 19:22:17' prior: 50869350!
newCartForUser: aUsername andPassword: aPassword 
	
	self validateUsername: aUsername andPassword: aPassword.
	self updateId.
	carts add: currentId -> (CartSession for: (Cart acceptingItemsOf: catalogue)).
	^currentId ! !

!testRun: #FacadeTest #test13 stamp: 'fr 11/30/2020 19:22:30'!
ERROR!
!CartSession class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 19:22:35'!
for: aCart 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aCart ! !
!CartSession class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 19:22:38' prior: 50879646!
for: aCart 
	
	^self new initializeFor: aCart ! !

!testRun: #FacadeTest #test13 stamp: 'fr 11/30/2020 19:22:40'!
ERROR!

!classDefinition: #CartSession category: 'TusLibros - Exercise - III' stamp: 'fr 11/30/2020 19:22:48'!
Object subclass: #CartSession
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!CartSession methodsFor: 'initialization' stamp: 'fr 11/30/2020 19:22:48'!
initializeFor: aCart 
	self shouldBeImplemented.
	cart := aCart.! !
!CartSession methodsFor: 'initialization' stamp: 'fr 11/30/2020 19:22:53' prior: 50879668!
initializeFor: aCart 
	
	cart _ aCart.! !

!methodRemoval: CartSession class #for: stamp: 'fr 11/30/2020 19:23:24'!
for: aCart 
	
	^self new initializeFor: aCart !

!methodRemoval: CartSession #initializeFor: stamp: 'fr 11/30/2020 19:23:28'!
initializeFor: aCart 
	
	cart _ aCart.!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 11/30/2020 19:23:35'!
ERROR!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 11/30/2020 19:23:35'!
ERROR!

!testRun: #FacadeTest #test13 stamp: 'fr 11/30/2020 19:23:39'!
ERROR!
!Facade methodsFor: 'cart management' stamp: 'fr 11/30/2020 19:24:28' prior: 50879634!
newCartForUser: aUsername andPassword: aPassword 
	
	self validateUsername: aUsername andPassword: aPassword.
	self updateId.
	carts add: currentId -> (CartSession for: (Cart acceptingItemsOf: catalogue) facade: self).
	^currentId ! !

!testRun: #FacadeTest #test13 stamp: 'fr 11/30/2020 19:24:32'!
ERROR!
!CartSession class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 19:24:39'!
for: aCart facade: aFacade 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aCart facade: aFacade ! !
!CartSession class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 19:24:46' prior: 50879707!
for: aCart facade: aFacade 
	
	^self new initializeFor: aCart facade: aFacade ! !

!testRun: #FacadeTest #test13 stamp: 'fr 11/30/2020 19:24:55'!
ERROR!

!classDefinition: #CartSession category: 'TusLibros - Exercise - III' stamp: 'fr 11/30/2020 19:25:09'!
Object subclass: #CartSession
	instanceVariableNames: 'cart facade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!CartSession methodsFor: 'initialization' stamp: 'fr 11/30/2020 19:25:09'!
initializeFor: aCart facade: aFacade 
	self shouldBeImplemented.
	cart := aCart.
	facade := aFacade.! !
!CartSession methodsFor: 'initialization' stamp: 'fr 11/30/2020 19:25:15' prior: 50879732!
initializeFor: aCart facade: aFacade 
	
	cart _ aCart.
	facade _ aFacade.! !

!testRun: #FacadeTest #test13 stamp: 'fr 11/30/2020 19:25:20'!
ERROR!
!CartSession methodsFor: 'cart management' stamp: 'fr 11/30/2020 19:25:39'!
add: aSmallInteger of: aString 
	self shouldBeImplemented.! !

now _ (DateAndTime now) !

nowplus _ now + (Duration hours: 1)   !

nowplus - now !

nowplus - now > 1 hours  !

nowplus - now = 1 hours  !

now _ (DateAndTime now) !

nowplus _ now + (1 hours)   !

nowplus - now = 1 hours  !

1/2 hours !

30 minutes !

!classDefinition: #CartSession category: 'TusLibros - Exercise - III' stamp: 'fr 11/30/2020 19:29:03'!
Object subclass: #CartSession
	instanceVariableNames: 'cart facade lastUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!CartSession methodsFor: 'cart management' stamp: 'fr 11/30/2020 19:29:00' prior: 50879746!
add: aQuantity of: anItem 

	(facade now - lastUsed > 30 minutes) ifTrue: [Facade cartExpiredErrorDescription].
	! !
!CartSession methodsFor: 'cart management' stamp: 'fr 11/30/2020 19:29:53' prior: 50879768!
add: aQuantity of: anItem 

	(facade now - lastUsed > 30 minutes) ifTrue: [Facade cartExpiredErrorDescription].
	
	
	! !
!CartSession methodsFor: 'cart management' stamp: 'fr 11/30/2020 19:30:52' prior: 50879775!
add: aQuantity of: anItem 

	(facade now - lastUsed > 30 minutes) ifTrue: [Facade cartExpiredErrorDescription].
	
	cart add: aQuantity of: anItem
	
	
	! !

!testRun: #FacadeTest #test13 stamp: 'fr 11/30/2020 19:32:05'!
ERROR!
!Facade methodsFor: 'time' stamp: 'fr 11/30/2020 19:32:18'!
now
	self shouldBeImplemented.! !
!Facade methodsFor: 'time' stamp: 'fr 11/30/2020 19:32:26' prior: 50879791!
now
	
	^clock now! !

!testRun: #FacadeTest #test13 stamp: 'fr 11/30/2020 19:32:28'!
ERROR!
!Clock methodsFor: 'time' stamp: 'fr 11/30/2020 19:32:40'!
now
	self shouldBeImplemented.! !
!Clock methodsFor: 'time' stamp: 'fr 11/30/2020 19:32:48' prior: 50879800!
now
	
	^DateAndTime now! !

!testRun: #FacadeTest #test13 stamp: 'fr 11/30/2020 19:32:50'!
ERROR!
!CartSession methodsFor: 'cart management' stamp: 'fr 11/30/2020 19:33:07' prior: 50879782!
add: aQuantity of: anItem 

	((facade now) - lastUsed > 30 minutes) ifTrue: [Facade cartExpiredErrorDescription].
	
	cart add: aQuantity of: anItem
	
	
	! !
!CartSession methodsFor: 'cart management' stamp: 'fr 11/30/2020 19:33:18' prior: 50879810!
add: aQuantity of: anItem 

	(facade now - lastUsed > 30 minutes) ifTrue: [Facade cartExpiredErrorDescription].
	
	cart add: aQuantity of: anItem
	
	
	! !
!CartSession methodsFor: 'initialization' stamp: 'fr 11/30/2020 19:33:47' prior: 50879739!
initializeFor: aCart facade: aFacade 
	
	cart _ aCart.
	facade _ aFacade.
	lastUsed _ facade now! !

!testRun: #FacadeTest #test13 stamp: 'fr 11/30/2020 19:33:49'!
FAILURE!

!testRun: #FacadeTest #test13 stamp: 'fr 11/30/2020 19:34:02'!
FAILURE!
!Clock methodsFor: 'time' stamp: 'fr 11/30/2020 19:34:56' prior: 50879804!
now
	
	^DateAndTime now + offset ! !

!testRun: #FacadeTest #test13 stamp: 'fr 11/30/2020 19:35:01'!
FAILURE!

facade now!

facade now!
!CartSession methodsFor: 'initialization' stamp: 'fr 11/30/2020 19:38:23' prior: 50879826!
initializeFor: aCart facade: aFacade 
	
	cart _ aCart.
	facade _ aFacade.
	lastUsed _ aFacade now! !

aFacade now!
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 19:38:50' prior: 50879410!
test13

	| cartId clock |
	clock _ Clock newClock.
	facade _ Facade 
			acceptingItemsOf: objectFactory defaultCatalog 
			validatingUsersFrom: objectFactory defaultCredentials 
			registeringSalesOn: salesBook
			chargingThrough: self
			withClock: clock.
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock advanceAnHour.
	self  should: [facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId]
		raise: Error - MessageNotUnderstood
		description: Facade cartExpiredErrorDescription
	
	
	
	
	! !

!testRun: #FacadeTest #test13 stamp: 'fr 11/30/2020 19:38:55'!
ERROR!
!Clock class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 19:39:03'!
newClock
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNewClock! !
!Clock class methodsFor: 'instance creation' stamp: 'fr 11/30/2020 19:39:12' prior: 50879875!
newClock
	
	^self new initializeNewClock! !

!testRun: #FacadeTest #test13 stamp: 'fr 11/30/2020 19:39:13'!
ERROR!
!Clock methodsFor: 'initialization' stamp: 'fr 11/30/2020 19:39:21'!
initializeNewClock
	self shouldBeImplemented.! !
!Clock methodsFor: 'initialization' stamp: 'fr 11/30/2020 19:39:23' prior: 50879889!
initializeNewClock
	
	! !
!Clock methodsFor: 'initialization' stamp: 'fr 11/30/2020 19:39:52' prior: 50879894!
initializeNewClock
	
	offset _ Duration seconds: 0 ! !
!Clock methodsFor: 'initialization' stamp: 'fr 11/30/2020 19:40:04' prior: 50879898!
initializeNewClock
	
	offset _ 0 seconds! !

!testRun: #FacadeTest #test13 stamp: 'fr 11/30/2020 19:40:07'!
FAILURE!

clock!

self now !

self advanceAnHour !

self now !

lastUsed!

facade now - lastUsed!

!testRun: #FacadeTest #test13 stamp: 'fr 11/30/2020 19:41:59'!
FAILURE!

aFacade now!

!testRun: #FacadeTest #test13 stamp: 'fr 11/30/2020 19:42:50'!
FAILURE!

facade!

self now !

self at: 1 !

(self at: 1)!

lastUsed!

facade now!

facade now - lastUsed!

self > 30 minutes !

facade now - lastUsed!
!CartSession methodsFor: 'cart management' stamp: 'fr 11/30/2020 19:45:14' prior: 50879818!
add: aQuantity of: anItem 

	((facade now - lastUsed) > 30 minutes) ifTrue: [Facade cartExpiredErrorDescription].
	
	cart add: aQuantity of: anItem
	
	
	! !

!testRun: #FacadeTest #test13 stamp: 'fr 11/30/2020 19:45:15'!
FAILURE!

(facade now - lastUsed) > 30 minutes!
!CartSession methodsFor: 'cart management' stamp: 'fr 11/30/2020 19:45:48' prior: 50879922!
add: aQuantity of: anItem 

	(facade now - lastUsed > 30 minutes) ifTrue: [Facade cartExpiredErrorDescription].
	
	cart add: aQuantity of: anItem
	
	
	! !
!CartSession methodsFor: 'cart management' stamp: 'fr 11/30/2020 19:45:52' prior: 50879934!
add: aQuantity of: anItem 

	(facade now - lastUsed > 30 minutes) ifTrue: [self error: Facade cartExpiredErrorDescription].
	
	cart add: aQuantity of: anItem
	
	
	! !

!testRun: #FacadeTest #test13 stamp: 'fr 11/30/2020 19:45:53'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 19:45:53'!
ERROR!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 19:45:53'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/30/2020 19:45:53'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/30/2020 19:45:53'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/30/2020 19:45:53'!
ERROR!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/30/2020 19:45:53'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/30/2020 19:45:53'!
ERROR!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 19:45:53'!
ERROR!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 11/30/2020 19:45:53'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 11/30/2020 19:45:53'!
ERROR!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 11/30/2020 19:45:53'!
ERROR!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 11/30/2020 19:45:53'!
ERROR!

!testRun: #FacadeTest #test13 stamp: 'fr 11/30/2020 19:45:53'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 19:46:16'!
ERROR!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 19:46:16'!
ERROR!

!classDefinition: #FacadeTest category: 'TusLibros - Exercise - III' stamp: 'fr 11/30/2020 19:47:15'!
TestCase subclass: #FacadeTest
	instanceVariableNames: 'facade objectFactory salesBook clock1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!FacadeTest methodsFor: 'setup' stamp: 'fr 11/30/2020 19:47:13' prior: 50879339 overrides: 16927572!
setUp
	
	objectFactory _ StoreTestObjectsFactory new.
	salesBook _ objectFactory defaultSalesBook.
	clock1 _ Clock newClock.
	facade _ Facade 
			acceptingItemsOf: objectFactory defaultCatalog 
			validatingUsersFrom: objectFactory defaultCredentials 
			registeringSalesOn: salesBook
			chargingThrough: self
			withClock: clock1.
! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 11/30/2020 19:47:39' prior: 50879852!
test13

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock1 advanceAnHour.
	self  should: [facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId]
		raise: Error - MessageNotUnderstood
		description: Facade cartExpiredErrorDescription
	
	
	
	
	! !

!testRun: #FacadeTest #test13 stamp: 'fr 11/30/2020 19:47:42'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 11/30/2020 19:47:42'!
ERROR!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 11/30/2020 19:47:42'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 11/30/2020 19:47:42'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 11/30/2020 19:47:42'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 11/30/2020 19:47:43'!
ERROR!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 11/30/2020 19:47:43'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 11/30/2020 19:47:43'!
ERROR!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 11/30/2020 19:47:43'!
ERROR!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 11/30/2020 19:47:43'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 11/30/2020 19:47:43'!
ERROR!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 11/30/2020 19:47:43'!
ERROR!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 11/30/2020 19:47:43'!
ERROR!

!testRun: #FacadeTest #test13 stamp: 'fr 11/30/2020 19:47:43'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'fr 12/2/2020 19:50:50' prior: 50880024!
test13

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock1 advanceHalfAnHour.
	self  should: [facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId]
		raise: Error - MessageNotUnderstood
		description: Facade cartExpiredErrorDescription
	
	
	
	
	! !

!testRun: #FacadeTest #test13 stamp: 'fr 12/2/2020 19:50:52'!
ERROR!
!Clock methodsFor: 'as yet unclassified' stamp: 'fr 12/2/2020 19:51:07'!
advanceHalfAnHour
	self shouldBeImplemented.! !
!Clock methodsFor: 'as yet unclassified' stamp: 'fr 12/2/2020 19:51:19' prior: 50880096!
advanceHalfAnHour
	
	offset _ 30 minutes! !

!testRun: #FacadeTest #test13 stamp: 'fr 12/2/2020 19:51:20'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/2/2020 19:51:20'!
ERROR!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/2/2020 19:51:20'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/2/2020 19:51:20'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/2/2020 19:51:20'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/2/2020 19:51:20'!
ERROR!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/2/2020 19:51:20'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/2/2020 19:51:20'!
ERROR!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 19:51:20'!
ERROR!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/2/2020 19:51:20'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/2/2020 19:51:20'!
ERROR!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/2/2020 19:51:20'!
ERROR!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/2/2020 19:51:20'!
ERROR!

!testRun: #FacadeTest #test13 stamp: 'fr 12/2/2020 19:51:20'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/2/2020 19:51:38'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/2/2020 19:51:38'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/2/2020 19:51:38'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/2/2020 19:51:38'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/2/2020 19:51:38'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/2/2020 19:51:38'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/2/2020 19:51:38'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/2/2020 19:51:38'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/2/2020 19:51:56'!
ERROR!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/2/2020 19:51:56'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/2/2020 19:51:56'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/2/2020 19:51:56'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/2/2020 19:51:56'!
ERROR!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/2/2020 19:51:56'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/2/2020 19:51:56'!
ERROR!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 19:51:56'!
ERROR!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/2/2020 19:51:56'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/2/2020 19:51:56'!
ERROR!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/2/2020 19:51:56'!
ERROR!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/2/2020 19:51:56'!
ERROR!

!testRun: #FacadeTest #test13 stamp: 'fr 12/2/2020 19:51:56'!
PASSED!

!testRun: #FacadeTest #test13 stamp: 'fr 12/2/2020 19:51:59'!
PASSED!

facade now - lastUsed!
!CartSession methodsFor: 'cart management' stamp: 'fr 12/2/2020 19:52:51' prior: 50879942!
add: aQuantity of: anItem 

	(facade now - lastUsed >= 30 minutes) ifTrue: [self error: Facade cartExpiredErrorDescription].
	
	cart add: aQuantity of: anItem
	
	
	! !

!testRun: #FacadeTest #test13 stamp: 'fr 12/2/2020 19:52:52'!
PASSED!

!testRun: #FacadeTest #test13 stamp: 'fr 12/2/2020 19:52:54'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/2/2020 19:52:54'!
ERROR!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/2/2020 19:52:54'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/2/2020 19:52:54'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/2/2020 19:52:54'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/2/2020 19:52:54'!
ERROR!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/2/2020 19:52:54'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/2/2020 19:52:54'!
ERROR!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 19:52:54'!
ERROR!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/2/2020 19:52:54'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/2/2020 19:52:54'!
ERROR!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/2/2020 19:52:54'!
ERROR!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/2/2020 19:52:54'!
ERROR!

!testRun: #FacadeTest #test13 stamp: 'fr 12/2/2020 19:52:54'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/2/2020 19:52:59'!
ERROR!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/2/2020 19:52:59'!
ERROR!
!CartSession methodsFor: 'cart management' stamp: 'fr 12/2/2020 19:53:13'!
listCart
	self shouldBeImplemented.! !
!CartSession methodsFor: 'cart management' stamp: 'fr 12/2/2020 19:54:03' prior: 50880278!
listCart
	
	(facade now - lastUsed >= 30) ifTrue: [self error: Facade cartExpiredErrorDescription].
	
	^cart listCart! !

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/2/2020 19:54:07'!
ERROR!
!CartSession methodsFor: 'cart management' stamp: 'fr 12/2/2020 19:54:29' prior: 50880283!
listCart
	
	(facade now - lastUsed >= 30 minutes) ifTrue: [self error: Facade cartExpiredErrorDescription].
	
	^cart listCart! !

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/2/2020 19:54:30'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/2/2020 19:54:33'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/2/2020 19:54:35'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/2/2020 19:54:35'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/2/2020 19:54:35'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/2/2020 19:54:35'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/2/2020 19:54:35'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/2/2020 19:54:35'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/2/2020 19:54:35'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/2/2020 19:54:35'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 19:54:35'!
ERROR!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/2/2020 19:54:35'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/2/2020 19:54:35'!
ERROR!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/2/2020 19:54:35'!
ERROR!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/2/2020 19:54:35'!
ERROR!

!testRun: #FacadeTest #test13 stamp: 'fr 12/2/2020 19:54:35'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 19:54:42'!
ERROR!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 19:54:57'!
ERROR!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 19:54:57'!
ERROR!
!Facade methodsFor: 'checkout' stamp: 'fr 12/2/2020 19:56:35' prior: 50872261!
checkoutCart: aCartId withCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner 
	
	^(Cashier toCheckout: (self cartForId: aCartId)
	 		charging: (CreditCard expiringOn: anExpirationDate withNumber: aCardNumber ownedBy: aCardOwner) 
			throught: merchantProcessor 
			on: self today 
			registeringOn: salesBook
			for: aCardOwner) checkOut
		! !

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 19:56:40'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'fr 12/2/2020 19:56:45'!
expiringOn: aMonth withNumber: aString ownedBy: aString3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeExpiringOn: aMonth withNumber: aString ownedBy: aString3 ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'fr 12/2/2020 19:56:49' prior: 50880377!
expiringOn: aMonth withNumber: aString ownedBy: aString3 
	
	^self new initializeExpiringOn: aMonth withNumber: aString ownedBy: aString3 ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'fr 12/2/2020 19:56:58' prior: 50880388!
expiringOn: anExpirationDate withNumber: aString ownedBy: aString3 
	
	^self new initializeExpiringOn: anExpirationDate withNumber: aString ownedBy: aString3 ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'fr 12/2/2020 19:57:08' prior: 50880396!
expiringOn: anExpirationDate withNumber: aCreditCardNumber ownedBy: aString3 
	
	^self new initializeExpiringOn: anExpirationDate withNumber: aCreditCardNumber ownedBy: aString3 ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'fr 12/2/2020 19:57:15' prior: 50880405!
expiringOn: anExpirationDate withNumber: aCreditCardNumber ownedBy: aCreditCardOwner 
	
	^self new initializeExpiringOn: anExpirationDate withNumber: aCreditCardNumber ownedBy: aCreditCardOwner ! !

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 19:57:19'!
ERROR!

!classDefinition: #CreditCard category: 'TusLibros - Exercise - III' stamp: 'fr 12/2/2020 19:57:26'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!

!classDefinition: #CreditCard category: 'TusLibros - Exercise - III' stamp: 'fr 12/2/2020 19:57:27'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration expirationDate creditCardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!

!classDefinition: #CreditCard category: 'TusLibros - Exercise - III' stamp: 'fr 12/2/2020 19:57:27'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration expirationDate creditCardNumber creditCardOwner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!CreditCard methodsFor: 'initialization' stamp: 'fr 12/2/2020 19:57:27'!
initializeExpiringOn: anExpirationDate withNumber: aCreditCardNumber ownedBy: aCreditCardOwner 
	self shouldBeImplemented.
	expirationDate := anExpirationDate.
	creditCardNumber := aCreditCardNumber.
	creditCardOwner := aCreditCardOwner.! !
!CreditCard methodsFor: 'initialization' stamp: 'fr 12/2/2020 19:57:29' prior: 50880453!
initializeExpiringOn: anExpirationDate withNumber: aCreditCardNumber ownedBy: aCreditCardOwner 
	
	expirationDate := anExpirationDate.
	creditCardNumber := aCreditCardNumber.
	creditCardOwner := aCreditCardOwner.! !
!CreditCard methodsFor: 'initialization' stamp: 'fr 12/2/2020 19:57:42' prior: 50880464!
initializeExpiringOn: anExpirationDate withNumber: aCreditCardNumber ownedBy: aCreditCardOwner 
	
	expiration := anExpirationDate.
	creditCardNumber := aCreditCardNumber.
	creditCardOwner := aCreditCardOwner.! !

!classDefinition: #CreditCard category: 'TusLibros - Exercise - III' stamp: 'fr 12/2/2020 19:57:44'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration expirationDate number creditCardOwner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'fr 12/2/2020 19:57:44' prior: 50880474!
initializeExpiringOn: anExpirationDate withNumber: aCreditCardNumber ownedBy: aCreditCardOwner 
	
	expiration := anExpirationDate.
	number := aCreditCardNumber.
	creditCardOwner := aCreditCardOwner.! !

!classDefinition: #CreditCard category: 'TusLibros - Exercise - III' stamp: 'fr 12/2/2020 19:57:47'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration expirationDate number owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'fr 12/2/2020 19:57:47' prior: 50880493!
initializeExpiringOn: anExpirationDate withNumber: aCreditCardNumber ownedBy: aCreditCardOwner 
	
	expiration := anExpirationDate.
	number := aCreditCardNumber.
	owner := aCreditCardOwner.! !
!CreditCard methodsFor: 'initialization' stamp: 'fr 12/2/2020 19:57:57' prior: 50880512!
initializeExpiringOn: anExpirationDate withNumber: aCreditCardNumber ownedBy: aCreditCardOwner 
	
	expiration _ anExpirationDate.
	number _ aCreditCardNumber.
	owner _ aCreditCardOwner.! !

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 19:58:00'!
ERROR!
!CartSession methodsFor: 'cart management' stamp: 'fr 12/2/2020 20:00:16'!
isEmpty
	self shouldBeImplemented.! !
!CartSession methodsFor: 'cart management' stamp: 'fr 12/2/2020 20:02:47' prior: 50880533!
isEmpty
	
	! !
!CartSession methodsFor: 'cart management' stamp: 'fr 12/2/2020 20:03:01' prior: 50880538!
isEmpty
	
	^cart isEmpty! !

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 20:03:06'!
ERROR!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/2/2020 20:03:10'!
PASSED!
!CartSession methodsFor: 'cart management' stamp: 'fr 12/2/2020 20:03:32' prior: 50880293!
listCart
		
	^cart listCart! !

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/2/2020 20:03:33'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/2/2020 20:03:35'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/2/2020 20:03:35'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/2/2020 20:03:35'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/2/2020 20:03:35'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/2/2020 20:03:35'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/2/2020 20:03:35'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/2/2020 20:03:35'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/2/2020 20:03:35'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 20:03:35'!
ERROR!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/2/2020 20:03:35'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/2/2020 20:03:35'!
ERROR!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/2/2020 20:03:35'!
ERROR!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/2/2020 20:03:35'!
ERROR!

!testRun: #FacadeTest #test13 stamp: 'fr 12/2/2020 20:03:35'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 20:03:40'!
ERROR!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 20:03:40'!
ERROR!
!Facade methodsFor: 'checkout' stamp: 'fr 12/2/2020 20:10:23' prior: 50880360!
checkoutCart: aCartId withCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner 
	
	^(self cartForId: aCartId) cartDo: [(Cashier toCheckout: (self cartForId: aCartId)
	 		charging: (CreditCard expiringOn: anExpirationDate withNumber: aCardNumber ownedBy: aCardOwner) 
			throught: merchantProcessor 
			on: self today 
			registeringOn: salesBook
			for: aCardOwner) checkOut]
		! !
!Facade methodsFor: 'checkout' stamp: 'fr 12/2/2020 20:11:56' prior: 50880609!
checkoutCart: aCartId withCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner 
	
	^(self cartForId: aCartId) cartDo: [:aCart | 
			
			(Cashier toCheckout: aCart 
	 		charging: (CreditCard expiringOn: anExpirationDate withNumber: aCardNumber ownedBy: aCardOwner) 
			throught: merchantProcessor 
			on: self today 
			registeringOn: salesBook
			for: aCardOwner) checkOut]
		! !
!Facade methodsFor: 'checkout' stamp: 'fr 12/2/2020 20:12:03' prior: 50880624!
checkoutCart: aCartId withCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner 
	
	^(self cartForId: aCartId) cartDo: [:aCart | 
			(Cashier toCheckout: aCart 
	 		charging: (CreditCard expiringOn: anExpirationDate withNumber: aCardNumber ownedBy: aCardOwner) 
			throught: merchantProcessor 
			on: self today 
			registeringOn: salesBook
			for: aCardOwner) checkOut]
		! !
!Facade methodsFor: 'checkout' stamp: 'fr 12/2/2020 20:14:12' prior: 50880639!
checkoutCart: aCartId withCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner 
	
	^(self cartForId: aCartId) checkoutWithCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner through: merchantProcessor registeringOn: salesBook.
		! !

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 20:14:19'!
ERROR!
!CartSession methodsFor: 'cart management' stamp: 'fr 12/2/2020 20:14:25'!
checkoutWithCard: aString expiringOn: aMonth forOwner: aString3 through: aFacadeTest registeringOn: anOrderedCollection 
	self shouldBeImplemented.! !
!CartSession methodsFor: 'cart management' stamp: 'fr 12/2/2020 20:15:19' prior: 50880668!
checkoutWithCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner through: aMerchantProcessor registeringOn: aSalesBook 
	
	^(Cashier toCheckout: cart 
	 		charging: (CreditCard expiringOn: anExpirationDate withNumber: aCardNumber ownedBy: aCardOwner) 
			throught: aMerchantProcessor 
			on: self today 
			registeringOn: aSalesBook
			for: aCardOwner) checkOut! !

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 20:15:22'!
ERROR!
!CartSession methodsFor: 'cart management' stamp: 'fr 12/2/2020 20:15:36' prior: 50880676!
checkoutWithCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner through: aMerchantProcessor registeringOn: aSalesBook 
	
	^(Cashier toCheckout: cart 
	 		charging: (CreditCard expiringOn: anExpirationDate withNumber: aCardNumber ownedBy: aCardOwner) 
			throught: aMerchantProcessor 
			on: facade today 
			registeringOn: aSalesBook
			for: aCardOwner) checkOut! !

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 20:15:38'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 20:15:39'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/2/2020 20:15:39'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/2/2020 20:15:39'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/2/2020 20:15:39'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/2/2020 20:15:39'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/2/2020 20:15:39'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/2/2020 20:15:39'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/2/2020 20:15:39'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 20:15:39'!
PASSED!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/2/2020 20:15:39'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/2/2020 20:15:39'!
PASSED!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/2/2020 20:15:39'!
PASSED!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/2/2020 20:15:39'!
PASSED!

!testRun: #FacadeTest #test13 stamp: 'fr 12/2/2020 20:15:39'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'fr 12/2/2020 20:15:55'!
test13CanNotAddItemsToAnExpiredCart

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock1 advanceHalfAnHour.
	self  should: [facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId]
		raise: Error - MessageNotUnderstood
		description: Facade cartExpiredErrorDescription
	
	
	
	
	! !

!methodRemoval: FacadeTest #test13 stamp: 'fr 12/2/2020 20:15:55'!
test13

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock1 advanceHalfAnHour.
	self  should: [facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId]
		raise: Error - MessageNotUnderstood
		description: Facade cartExpiredErrorDescription
	
	
	
	
	!
!FacadeTest methodsFor: 'tests' stamp: 'fr 12/2/2020 20:24:55'!
test14

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock1 advanceHalfAnHour.
	self  should: [facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId]
		raise: Error - MessageNotUnderstood
		description: Facade cartExpiredErrorDescription
	
	
	
	
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 12/2/2020 20:25:36' prior: 50880781!
test14

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock1 advanceHalfAnHour.
	self  should: []
		raise: Error - MessageNotUnderstood
		description: Facade cartExpiredErrorDescription
	
	
	
	
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 12/2/2020 20:25:50' prior: 50880794!
test14

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock1 advanceHalfAnHour.
	self  should: [facade listCart: cartId]
		raise: Error - MessageNotUnderstood
		description: Facade cartExpiredErrorDescription
	
	
	
	
	! !

!testRun: #FacadeTest #test14 stamp: 'fr 12/2/2020 20:25:51'!
FAILURE!
!CartSession methodsFor: 'cart management' stamp: 'fr 12/2/2020 20:26:48' prior: 50880552!
listCart
		
	(facade now - lastUsed > 30 minutes) ifTrue: [self error: Facade cartExpiredErrorDescription].
		
	^cart listCart! !

!testRun: #FacadeTest #test14 stamp: 'fr 12/2/2020 20:26:50'!
FAILURE!

!testRun: #FacadeTest #test14 stamp: 'fr 12/2/2020 20:26:55'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/2/2020 20:26:55'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/2/2020 20:26:55'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/2/2020 20:26:55'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/2/2020 20:26:55'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/2/2020 20:26:55'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/2/2020 20:26:55'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/2/2020 20:26:55'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 20:26:55'!
PASSED!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/2/2020 20:26:55'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/2/2020 20:26:55'!
PASSED!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/2/2020 20:26:55'!
PASSED!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/2/2020 20:26:55'!
PASSED!

!testRun: #FacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/2/2020 20:26:55'!
PASSED!

!testRun: #FacadeTest #test14 stamp: 'fr 12/2/2020 20:26:55'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'fr 12/2/2020 20:27:09'!
test14CanNotListAnExpiredCart

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock1 advanceHalfAnHour.
	self  should: [facade listCart: cartId]
		raise: Error - MessageNotUnderstood
		description: Facade cartExpiredErrorDescription
	
	
	
	
	! !

!methodRemoval: FacadeTest #test14 stamp: 'fr 12/2/2020 20:27:09'!
test14

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock1 advanceHalfAnHour.
	self  should: [facade listCart: cartId]
		raise: Error - MessageNotUnderstood
		description: Facade cartExpiredErrorDescription
	
	
	
	
	!
!FacadeTest methodsFor: 'tests' stamp: 'fr 12/2/2020 20:27:13'!
test15

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock1 advanceHalfAnHour.
	self  should: [facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId]
		raise: Error - MessageNotUnderstood
		description: Facade cartExpiredErrorDescription
	
	
	
	
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 12/2/2020 20:27:25' prior: 50880898!
test15

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId.
	clock1 advanceHalfAnHour.
	self  should: []
		raise: Error - MessageNotUnderstood
		description: Facade cartExpiredErrorDescription
	
	
	
	
	! !
!FacadeTest methodsFor: 'tests' stamp: 'fr 12/2/2020 20:27:41' prior: 50880911!
test15

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId.
	clock1 advanceHalfAnHour.
	self  should: [facade 
			checkoutCart: cartId 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory validUser.]
		raise: Error - MessageNotUnderstood
		description: Facade cartExpiredErrorDescription
	
	
	
	
	! !

!testRun: #FacadeTest #test15 stamp: 'fr 12/2/2020 20:27:42'!
FAILURE!

!testRun: #FacadeTest #test15 stamp: 'fr 12/2/2020 20:27:49'!
FAILURE!
!CartSession methodsFor: 'cart management' stamp: 'fr 12/2/2020 20:28:40' prior: 50880694!
checkoutWithCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner through: aMerchantProcessor registeringOn: aSalesBook 
	
	(facade now - lastUsed > 30 minutes) ifTrue: [self error: Facade cartExpiredErrorDescription].
	
	^(Cashier toCheckout: cart 
	 		charging: (CreditCard expiringOn: anExpirationDate withNumber: aCardNumber ownedBy: aCardOwner) 
			throught: aMerchantProcessor 
			on: facade today 
			registeringOn: aSalesBook
			for: aCardOwner) checkOut! !

!testRun: #FacadeTest #test15 stamp: 'fr 12/2/2020 20:28:41'!
FAILURE!

!testRun: #FacadeTest #test15 stamp: 'fr 12/2/2020 20:28:43'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/2/2020 20:28:43'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/2/2020 20:28:43'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/2/2020 20:28:43'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/2/2020 20:28:43'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/2/2020 20:28:43'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/2/2020 20:28:43'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/2/2020 20:28:43'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 20:28:43'!
PASSED!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/2/2020 20:28:43'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/2/2020 20:28:43'!
PASSED!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/2/2020 20:28:43'!
PASSED!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/2/2020 20:28:43'!
PASSED!

!testRun: #FacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/2/2020 20:28:43'!
PASSED!

!testRun: #FacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/2/2020 20:28:43'!
PASSED!

!testRun: #FacadeTest #test15 stamp: 'fr 12/2/2020 20:28:43'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'fr 12/2/2020 20:28:47' prior: 50880924!
test15

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId.
	clock1 advanceHalfAnHour.
	self  should: [facade 
			checkoutCart: cartId 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory validUser]
		raise: Error - MessageNotUnderstood
		description: Facade cartExpiredErrorDescription
	
	
	
	
	! !

!testRun: #FacadeTest #test15 stamp: 'fr 12/2/2020 20:28:48'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/2/2020 20:28:48'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/2/2020 20:28:48'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/2/2020 20:28:48'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/2/2020 20:28:48'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/2/2020 20:28:48'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/2/2020 20:28:48'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/2/2020 20:28:48'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 20:28:48'!
PASSED!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/2/2020 20:28:48'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/2/2020 20:28:48'!
PASSED!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/2/2020 20:28:48'!
PASSED!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/2/2020 20:28:48'!
PASSED!

!testRun: #FacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/2/2020 20:28:48'!
PASSED!

!testRun: #FacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/2/2020 20:28:48'!
PASSED!

!testRun: #FacadeTest #test15 stamp: 'fr 12/2/2020 20:28:48'!
PASSED!
!FacadeTest methodsFor: 'tests' stamp: 'fr 12/2/2020 20:28:57'!
test15CanNotCheckoutAnExpiredCart

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId.
	clock1 advanceHalfAnHour.
	self  should: [facade 
			checkoutCart: cartId 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory validUser]
		raise: Error - MessageNotUnderstood
		description: Facade cartExpiredErrorDescription
	
	
	
	
	! !

!methodRemoval: FacadeTest #test15 stamp: 'fr 12/2/2020 20:28:57'!
test15

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId.
	clock1 advanceHalfAnHour.
	self  should: [facade 
			checkoutCart: cartId 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory validUser]
		raise: Error - MessageNotUnderstood
		description: Facade cartExpiredErrorDescription
	
	
	
	
	!

!methodRemoval: Clock #advanceAnHour stamp: 'fr 12/2/2020 20:30:24'!
advanceAnHour
	
	offset _ Duration hours: 1!

now _ DateAndTime now !

now !

now !

now !

now !

now !

now !

now !

now !

now _ DateAndTime now !

nowpluszero _ now + 0 seconds !

now < nowpluszero !

now > nowpluszero !

now = nowpluszero !

now == nowpluszero !

!classDefinition: #FacadeTest category: 'TusLibros - Exercise - III' stamp: 'fr 12/2/2020 20:59:35'!
TestCase subclass: #FacadeTest
	instanceVariableNames: 'facade objectFactory salesBook clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 12/2/2020 20:59:35' prior: 50880875!
test14CanNotListAnExpiredCart

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock advanceHalfAnHour.
	self  should: [facade listCart: cartId]
		raise: Error - MessageNotUnderstood
		description: Facade cartExpiredErrorDescription
	
	
	
	
	! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 12/2/2020 20:59:35' prior: 50880010 overrides: 16927572!
setUp
	
	objectFactory _ StoreTestObjectsFactory new.
	salesBook _ objectFactory defaultSalesBook.
	clock _ Clock newClock.
	facade _ Facade 
			acceptingItemsOf: objectFactory defaultCatalog 
			validatingUsersFrom: objectFactory defaultCredentials 
			registeringSalesOn: salesBook
			chargingThrough: self
			withClock: clock.
! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 12/2/2020 20:59:35' prior: 50880755!
test13CanNotAddItemsToAnExpiredCart

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock advanceHalfAnHour.
	self  should: [facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId]
		raise: Error - MessageNotUnderstood
		description: Facade cartExpiredErrorDescription
	
	
	
	
	! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 12/2/2020 20:59:35' prior: 50881084!
test15CanNotCheckoutAnExpiredCart

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId.
	clock advanceHalfAnHour.
	self  should: [facade 
			checkoutCart: cartId 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory validUser]
		raise: Error - MessageNotUnderstood
		description: Facade cartExpiredErrorDescription
	
	
	
	
	! !

!methodRemoval: Facade class #acceptingItemsOf:validatingUsersFrom:registeringSalesOn:chargingThrough: stamp: 'fr 12/2/2020 21:01:09'!
acceptingItemsOf: aCatalogue validatingUsersFrom: aCredentialsList registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor 
	
	^self new initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aCredentialsList registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor !

!methodRemoval: Facade #initializeAcceptingItemsOf:validatingUsersFrom:registeringSalesOn:chargingThrough: stamp: 'fr 12/2/2020 21:01:17'!
initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aCredentialsList registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor 
	
	catalogue _ aCatalogue.
	credentials _ aCredentialsList.
	salesBook _ aSalesBook.
	merchantProcessor _ aMerchantProcessor.
	
	carts _ Dictionary new.
	currentId _ 0!
!Facade methodsFor: 'time' stamp: 'fr 12/2/2020 21:02:18'!
currentMonth
	
	^Month current
	! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'fr 12/2/2020 21:02:18' prior: 50880947!
checkoutWithCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner through: aMerchantProcessor registeringOn: aSalesBook 
	
	(facade now - lastUsed > 30 minutes) ifTrue: [self error: Facade cartExpiredErrorDescription].
	
	^(Cashier toCheckout: cart 
	 		charging: (CreditCard expiringOn: anExpirationDate withNumber: aCardNumber ownedBy: aCardOwner) 
			throught: aMerchantProcessor 
			on: facade currentMonth 
			registeringOn: aSalesBook
			for: aCardOwner) checkOut! !

!methodRemoval: Facade #today stamp: 'fr 12/2/2020 21:02:18'!
today
	
	^Month current
	!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/2/2020 21:02:20'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/2/2020 21:02:20'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/2/2020 21:02:20'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/2/2020 21:02:20'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/2/2020 21:02:20'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/2/2020 21:02:20'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/2/2020 21:02:20'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 21:02:20'!
PASSED!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/2/2020 21:02:20'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/2/2020 21:02:20'!
PASSED!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/2/2020 21:02:20'!
PASSED!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/2/2020 21:02:20'!
PASSED!

!testRun: #FacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/2/2020 21:02:20'!
PASSED!

!testRun: #FacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/2/2020 21:02:20'!
PASSED!

!testRun: #FacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/2/2020 21:02:20'!
PASSED!
!Facade methodsFor: 'time' stamp: 'fr 12/2/2020 21:02:36' prior: 50881229!
currentMonth
	
	^clock currentMonth
	! !

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/2/2020 21:02:37'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/2/2020 21:02:37'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/2/2020 21:02:37'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/2/2020 21:02:37'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/2/2020 21:02:37'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/2/2020 21:02:37'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/2/2020 21:02:37'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 21:02:37'!
ERROR!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/2/2020 21:02:37'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/2/2020 21:02:37'!
ERROR!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/2/2020 21:02:37'!
ERROR!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/2/2020 21:02:37'!
ERROR!

!testRun: #FacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/2/2020 21:02:37'!
PASSED!

!testRun: #FacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/2/2020 21:02:37'!
PASSED!

!testRun: #FacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/2/2020 21:02:37'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 21:02:50'!
ERROR!
!Clock methodsFor: 'time' stamp: 'fr 12/2/2020 21:03:00'!
currentMonth
	self shouldBeImplemented.! !
!Clock methodsFor: 'time' stamp: 'fr 12/2/2020 21:03:10' prior: 50881357!
currentMonth
	
	^DateAndTime currentMonth ! !

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 21:03:12'!
ERROR!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 21:03:19'!
ERROR!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 21:03:19'!
ERROR!

DateAndTime !

self currentMonth !

self now currentMonth  !

self now   !

self now month !
!Clock methodsFor: 'time' stamp: 'fr 12/2/2020 21:03:59' prior: 50881361!
currentMonth
	
	^self now month ! !

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 21:04:00'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 21:04:02'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/2/2020 21:04:02'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/2/2020 21:04:02'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/2/2020 21:04:02'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/2/2020 21:04:02'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/2/2020 21:04:02'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/2/2020 21:04:02'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/2/2020 21:04:02'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 21:04:02'!
PASSED!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/2/2020 21:04:02'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/2/2020 21:04:02'!
PASSED!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/2/2020 21:04:02'!
PASSED!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/2/2020 21:04:02'!
PASSED!

!testRun: #FacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/2/2020 21:04:02'!
PASSED!

!testRun: #FacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/2/2020 21:04:02'!
PASSED!

!testRun: #FacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/2/2020 21:04:02'!
PASSED!

!classRenamed: #Facade as: #TusLibrosFacade stamp: 'fr 12/2/2020 23:57:50'!
Smalltalk renameClassNamed: #Facade as: #TusLibrosFacade!
!CartSession methodsFor: 'as yet unclassified' stamp: 'fr 12/2/2020 23:57:50' prior: 50880820!
listCart
		
	(facade now - lastUsed > 30 minutes) ifTrue: [self error: TusLibrosFacade cartExpiredErrorDescription].
		
	^cart listCart! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 12/2/2020 23:57:50' prior: 50875681!
test11CanNotListPurchasesForInvalidUsername

	| cartId |
				
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory validUser.
	
	self  should: [facade listPurchasesOfUser: objectFactory invalidUser withPassword: objectFactory validPassword] 
		raise: Error - MessageNotUnderstood
		description: TusLibrosFacade invalidCredentialsErrorDescription 
	
	! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 12/2/2020 23:57:50' prior: 50875040!
test03CanNotCreateNewCartForInvalidPassword
	
	self  should: [facade newCartForUser: objectFactory validUser andPassword: objectFactory invalidPassword]
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosFacade invalidCredentialsErrorDescription
		! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 12/2/2020 23:57:50' prior: 50870580!
test04CanNotListNonexistentCart
		
	self  should: [facade listCart: 1] 
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosFacade invalidCartIdErrorDescription! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 12/2/2020 23:57:50' prior: 50881168!
test13CanNotAddItemsToAnExpiredCart

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock advanceHalfAnHour.
	self  should: [facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId]
		raise: Error - MessageNotUnderstood
		description: TusLibrosFacade cartExpiredErrorDescription
	
	
	
	
	! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 12/2/2020 23:57:51' prior: 50881140!
test14CanNotListAnExpiredCart

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock advanceHalfAnHour.
	self  should: [facade listCart: cartId]
		raise: Error - MessageNotUnderstood
		description: TusLibrosFacade cartExpiredErrorDescription
	
	
	
	
	! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 12/2/2020 23:57:51' prior: 50875645!
test09CanNotCheckoutANonexistentCart
				
	self should: [facade 
			checkoutCart: 1 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory validUser.] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
							self assert: anError messageText equals: TusLibrosFacade invalidCartIdErrorDescription.
							self assert: salesBook isEmpty
			]
	! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 12/2/2020 23:57:51' prior: 50881183!
test15CanNotCheckoutAnExpiredCart

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId.
	clock advanceHalfAnHour.
	self  should: [facade 
			checkoutCart: cartId 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory validUser]
		raise: Error - MessageNotUnderstood
		description: TusLibrosFacade cartExpiredErrorDescription
	
	
	
	
	! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 12/2/2020 23:57:51' prior: 50881154 overrides: 16927572!
setUp
	
	objectFactory _ StoreTestObjectsFactory new.
	salesBook _ objectFactory defaultSalesBook.
	clock _ Clock newClock.
	facade _ TusLibrosFacade 
			acceptingItemsOf: objectFactory defaultCatalog 
			validatingUsersFrom: objectFactory defaultCredentials 
			registeringSalesOn: salesBook
			chargingThrough: self
			withClock: clock.
! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 12/2/2020 23:57:51' prior: 50875029!
test02CanNotCreateNewCartForInvalidUser

	self  should: [facade newCartForUser: objectFactory invalidUser andPassword: objectFactory validPassword]
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosFacade invalidCredentialsErrorDescription
		! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'fr 12/2/2020 23:57:51' prior: 50880218!
add: aQuantity of: anItem 

	(facade now - lastUsed >= 30 minutes) ifTrue: [self error: TusLibrosFacade cartExpiredErrorDescription].
	
	cart add: aQuantity of: anItem
	
	
	! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'fr 12/2/2020 23:57:51' prior: 50881234!
checkoutWithCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner through: aMerchantProcessor registeringOn: aSalesBook 
	
	(facade now - lastUsed > 30 minutes) ifTrue: [self error: TusLibrosFacade cartExpiredErrorDescription].
	
	^(Cashier toCheckout: cart 
	 		charging: (CreditCard expiringOn: anExpirationDate withNumber: aCardNumber ownedBy: aCardOwner) 
			throught: aMerchantProcessor 
			on: facade currentMonth 
			registeringOn: aSalesBook
			for: aCardOwner) checkOut! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 12/2/2020 23:57:51' prior: 50870596!
test06CanNotAddItemsToNonexistentCarts

	self  should: [facade add: 2 of: objectFactory itemSellByTheStore toCart: 1]
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosFacade invalidCartIdErrorDescription 
! !
!FacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 12/2/2020 23:57:51' prior: 50875703!
test12CanNotListPurchasesForInvalidPassword

	| cartId |
				
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory validUser.
	
	self  should: [facade listPurchasesOfUser: objectFactory validUser withPassword: objectFactory invalidPassword] 
		raise: Error - MessageNotUnderstood
		description: TusLibrosFacade invalidCredentialsErrorDescription 
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/2/2020 23:57:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/2/2020 23:57:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/2/2020 23:57:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/2/2020 23:57:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/2/2020 23:57:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/2/2020 23:57:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/2/2020 23:57:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/2/2020 23:57:57'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/2/2020 23:57:57'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/2/2020 23:57:57'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/2/2020 23:57:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/2/2020 23:57:57'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/2/2020 23:57:57'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/2/2020 23:57:57'!
PASSED!

!testRun: #FacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/2/2020 23:57:57'!
PASSED!

!testRun: #FacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/2/2020 23:57:57'!
PASSED!

!testRun: #FacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/2/2020 23:57:57'!
PASSED!

!testRun: #FacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/2/2020 23:57:57'!
PASSED!

!testRun: #FacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/2/2020 23:57:57'!
PASSED!

!testRun: #FacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/2/2020 23:57:57'!
PASSED!

!testRun: #FacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/2/2020 23:57:57'!
PASSED!

!testRun: #FacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 23:57:57'!
PASSED!

!testRun: #FacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/2/2020 23:57:57'!
PASSED!

!testRun: #FacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/2/2020 23:57:57'!
PASSED!

!testRun: #FacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/2/2020 23:57:57'!
PASSED!

!testRun: #FacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/2/2020 23:57:57'!
PASSED!

!testRun: #FacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/2/2020 23:57:57'!
PASSED!

!testRun: #FacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/2/2020 23:57:57'!
PASSED!

!testRun: #FacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/2/2020 23:57:57'!
PASSED!

!classRenamed: #FacadeTest as: #TusLibrosFacadeTest stamp: 'fr 12/2/2020 23:58:10'!
Smalltalk renameClassNamed: #FacadeTest as: #TusLibrosFacadeTest!

!methodRemoval: CartSession #isEmpty stamp: 'fr 12/2/2020 23:58:33'!
isEmpty
	
	^cart isEmpty!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/2/2020 23:58:36'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/2/2020 23:58:36'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/2/2020 23:58:36'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/2/2020 23:58:36'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/2/2020 23:58:36'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/2/2020 23:58:36'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/2/2020 23:58:36'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/2/2020 23:58:36'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/2/2020 23:58:36'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/2/2020 23:58:36'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/2/2020 23:58:36'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/2/2020 23:58:36'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/2/2020 23:58:36'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/2/2020 23:58:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/2/2020 23:58:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/2/2020 23:58:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/2/2020 23:58:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/2/2020 23:58:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/2/2020 23:58:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/2/2020 23:58:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/2/2020 23:58:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/2/2020 23:58:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/2/2020 23:58:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/2/2020 23:58:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/2/2020 23:58:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/2/2020 23:58:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/2/2020 23:58:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/2/2020 23:58:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/2/2020 23:58:36'!
PASSED!
!CartSession methodsFor: 'cart management' stamp: 'fr 12/3/2020 00:01:06'!
assertCartHasNotExpired

	^ (facade now - lastUsed >= 30 minutes) ifTrue: [self error: TusLibrosFacade cartExpiredErrorDescription]! !
!CartSession methodsFor: 'cart management' stamp: 'fr 12/3/2020 00:01:06' prior: 50881583!
add: aQuantity of: anItem 

	self assertCartHasNotExpired.
	
	cart add: aQuantity of: anItem
	
	
	! !
!CartSession methodsFor: 'cart management' stamp: 'fr 12/3/2020 00:01:15' prior: 50881592!
checkoutWithCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner through: aMerchantProcessor registeringOn: aSalesBook 
	
	self assertCartHasNotExpired.
	
	^(Cashier toCheckout: cart 
	 		charging: (CreditCard expiringOn: anExpirationDate withNumber: aCardNumber ownedBy: aCardOwner) 
			throught: aMerchantProcessor 
			on: facade currentMonth 
			registeringOn: aSalesBook
			for: aCardOwner) checkOut! !
!CartSession methodsFor: 'cart management' stamp: 'fr 12/3/2020 00:01:20' prior: 50881440!
listCart
		
	self assertCartHasNotExpired.
		
	^cart listCart! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 00:01:22'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 00:01:22'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 00:01:22'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 00:01:22'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 00:01:22'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 00:01:22'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 00:01:22'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 00:01:22'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 00:01:22'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 00:01:22'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 00:01:22'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 00:01:22'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 00:01:22'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 00:01:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 00:01:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 00:01:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 00:01:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 00:01:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 00:01:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 00:01:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 00:01:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 00:01:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 00:01:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 00:01:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 00:01:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 00:01:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 00:01:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 00:01:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 00:01:22'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 00:08:20' prior: 50881537!
test15CanNotCheckoutAnExpiredCart

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId.
	clock advanceHalfAnHour.
	self  should: [facade 
			checkoutCart: cartId 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory validUser]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |  
			
			self assert: anError messageText equals: TusLibrosFacade cartExpiredErrorDescription]
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 00:08:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 00:08:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 00:08:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 00:08:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 00:08:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 00:08:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 00:08:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 00:08:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 00:08:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 00:08:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 00:08:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 00:08:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 00:08:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 00:08:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 00:08:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 00:08:21'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 00:09:13' prior: 50881978!
test15CanNotCheckoutAnExpiredCart

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId.
	clock advanceHalfAnHour.
	self  should: [facade 
			checkoutCart: cartId 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory validUser]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |  
			self assert: anError messageText equals: TusLibrosFacade cartExpiredErrorDescription.
			self assert: (facade listPurchasesOfUser: objectFactory validUser withPassword: objectFactory validPassword) isEmpty
			]
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 00:09:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 00:09:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 00:09:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 00:09:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 00:09:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 00:09:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 00:09:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 00:09:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 00:09:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 00:09:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 00:09:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 00:09:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 00:09:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 00:09:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 00:09:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 00:09:14'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 00:10:08'!
test16

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId.
	clock advanceHalfAnHour.
	self  should: [facade 
			checkoutCart: cartId 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory validUser]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |  
			self assert: anError messageText equals: TusLibrosFacade cartExpiredErrorDescription.
			self assert: (facade listPurchasesOfUser: objectFactory validUser withPassword: objectFactory validPassword) isEmpty
			]
	
	
	
	
	! !

!methodRemoval: TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 00:10:15'!
test16

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId.
	clock advanceHalfAnHour.
	self  should: [facade 
			checkoutCart: cartId 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory validUser]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |  
			self assert: anError messageText equals: TusLibrosFacade cartExpiredErrorDescription.
			self assert: (facade listPurchasesOfUser: objectFactory validUser withPassword: objectFactory validPassword) isEmpty
			]
	
	
	
	
	!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 00:10:20'!
test16

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock advanceHalfAnHour.
	self  should: [facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId]
		raise: Error - MessageNotUnderstood
		description: TusLibrosFacade cartExpiredErrorDescription
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 00:10:38' prior: 50882185!
test16

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock advanceHalfAnHour.
	self should: [facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId] raise: Error
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 00:12:43' prior: 50882199!
test16

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock advanceHalfAnHour.
	[facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId] 
		ensure: [
			self should: [facade listCart: cartId]
				raise: Error - MessageNotUnderstood
				withMessageText: TusLibrosFacade invalidCartIdErrorDescription 
		]
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 00:12:45'!
ERROR!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 00:12:48'!
FAILURE!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 00:15:21' prior: 50881507!
test14CanNotListAnExpiredCart

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock advanceHalfAnHour.
	self  should: [facade listCart: cartId]
		signal: Error - MessageNotUnderstood
		withDescription: TusLibrosFacade cartExpiredErrorDescription
		asserting: []
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 00:15:22'!
ERROR!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 00:15:32' prior: 50882231!
test14CanNotListAnExpiredCart

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock advanceHalfAnHour.
	self  should: [facade listCart: cartId]
		raise: Error - MessageNotUnderstood
		description: TusLibrosFacade cartExpiredErrorDescription
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 00:15:33'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 00:15:33'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 00:15:33'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 00:15:33'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 00:15:33'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 00:15:33'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 00:15:33'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 00:15:33'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 00:15:33'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 00:15:33'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 00:15:33'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 00:15:33'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 00:15:33'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 00:15:33'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 00:15:33'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 00:15:33'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 00:15:33'!
ERROR!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 00:15:33'!
FAILURE!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 00:16:05' prior: 50882210!
test16

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock advanceHalfAnHour.
	self should: [facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId] raise: Error.
	self should: [facade listCart: cartId]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosFacade invalidCartIdErrorDescription 

	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 00:16:05'!
FAILURE!

!methodRemoval: TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 00:16:58'!
test16

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock advanceHalfAnHour.
	self should: [facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId] raise: Error.
	self should: [facade listCart: cartId]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosFacade invalidCartIdErrorDescription 

	
	
	
	
	!
!TusLibrosFacade methodsFor: 'cart management' stamp: 'fr 12/3/2020 00:17:52'!
cartSessionForCartId: aCartId

	^carts at: aCartId ifAbsent: [self error: self class invalidCartIdErrorDescription]! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 00:17:52' prior: 50869711!
listCart: aCartId 
	
	^(self cartSessionForCartId: aCartId) listCart
	! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 00:17:52' prior: 50869705!
add: aQuantity of: anItem toCart: aCartId 
	
	(self cartSessionForCartId: aCartId) add: aQuantity of: anItem
	! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 00:17:52' prior: 50880654!
checkoutCart: aCartId withCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner 
	
	^(self cartSessionForCartId: aCartId) checkoutWithCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner through: merchantProcessor registeringOn: salesBook.
		! !

!methodRemoval: TusLibrosFacade #cartForId: stamp: 'fr 12/3/2020 00:17:52'!
cartForId: aCartId

	^carts at: aCartId ifAbsent: [self error: self class invalidCartIdErrorDescription]!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 00:17:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 00:17:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 00:17:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 00:17:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 00:17:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 00:17:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 00:17:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 00:17:54'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 00:17:54'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 00:17:54'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 00:17:54'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 00:17:54'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 00:17:54'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 00:17:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 00:17:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 00:17:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 00:17:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 00:17:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 00:17:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 00:17:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 00:17:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 00:17:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 00:17:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 00:17:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 00:17:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 00:17:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 00:17:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 00:17:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 00:17:54'!
PASSED!
!TusLibrosFacade methodsFor: 'cart management' stamp: 'fr 12/3/2020 00:18:22'!
newCart

	^ Cart acceptingItemsOf: catalogue! !
!TusLibrosFacade methodsFor: 'cart management' stamp: 'fr 12/3/2020 00:18:22' prior: 50879694!
newCartForUser: aUsername andPassword: aPassword 
	
	self validateUsername: aUsername andPassword: aPassword.
	self updateId.
	carts add: currentId -> (CartSession for: (self newCart) facade: self).
	^currentId ! !
!TusLibrosFacade methodsFor: 'cart management' stamp: 'fr 12/3/2020 00:18:28' prior: 50882495!
newCartForUser: aUsername andPassword: aPassword 
	
	self validateUsername: aUsername andPassword: aPassword.
	self updateId.
	carts add: currentId -> (CartSession for: self newCart facade: self).
	^currentId ! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 00:18:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 00:18:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 00:18:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 00:18:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 00:18:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 00:18:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 00:18:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 00:18:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 00:18:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 00:18:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 00:18:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 00:18:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 00:18:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 00:18:29'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 00:18:29'!
PASSED!
!TusLibrosFacade methodsFor: 'cart management' stamp: 'fr 12/3/2020 00:18:55'!
newCartSession

	^ CartSession for: self newCart facade: self! !
!TusLibrosFacade methodsFor: 'cart management' stamp: 'fr 12/3/2020 00:18:55' prior: 50882505!
newCartForUser: aUsername andPassword: aPassword 
	
	self validateUsername: aUsername andPassword: aPassword.
	self updateId.
	carts add: currentId -> (self newCartSession).
	^currentId ! !
!TusLibrosFacade methodsFor: 'cart management' stamp: 'fr 12/3/2020 00:18:59' prior: 50882572!
newCartForUser: aUsername andPassword: aPassword 
	
	self validateUsername: aUsername andPassword: aPassword.
	self updateId.
	carts add: currentId -> self newCartSession.
	^currentId ! !
!TusLibrosFacade methodsFor: 'checkout' stamp: 'fr 12/3/2020 00:19:46' prior: 50882375!
checkoutCart: aCartId withCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner 
	
	^(self cartSessionForCartId: aCartId) 
								checkoutWithCard: aCardNumber 
								expiringOn: anExpirationDate 
								forOwner: aCardOwner 
								through: merchantProcessor 
								registeringOn: salesBook.
		! !

!methodRemoval: Sale class #of: stamp: 'fr 12/3/2020 00:23:46'!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 00:23:49'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 00:23:49'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 00:23:49'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 00:23:49'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 00:23:49'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 00:23:49'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 00:23:49'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 00:23:49'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 00:23:49'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 00:23:49'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 00:23:49'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 00:23:49'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 00:23:49'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 00:23:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 00:23:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 00:23:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 00:23:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 00:23:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 00:23:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 00:23:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 00:23:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 00:23:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 00:23:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 00:23:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 00:23:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 00:23:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 00:23:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 00:23:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 00:23:49'!
PASSED!

!methodRemoval: Sale #initializeTotal: stamp: 'fr 12/3/2020 00:23:54'!
initializeTotal: aTotal

	total := aTotal !

dict _ Dictionary new add: 'prod1' -> 5; add: 'prod2' -> 4; yourself !

dict add: 5 !

dict add: 'asd' !
!Cart methodsFor: 'adding' stamp: 'HernanWilkinson 6/17/2013 17:51' prior: 50872714!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	1 to: aQuantity do: [ :aNumber | items add: anItem ]! !
!Cart methodsFor: 'initialization' stamp: 'HernanWilkinson 6/17/2013 17:48' prior: 50872709!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'enumerating' stamp: 'fr 12/3/2020 00:27:58' prior: 50872699!
itemsQuantitiesAndPricesDo: aBlock 
	
	items asBag contents keysAndValuesDo: [:anItem :aQuantity | aBlock value: anItem value: aQuantity value: (catalog at: anItem)]
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 00:28:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 00:28:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 00:28:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 00:28:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 00:28:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 00:28:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 00:28:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 00:28:01'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 00:28:01'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 00:28:01'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 00:28:01'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 00:28:01'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 00:28:01'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 00:28:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 00:28:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 00:28:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 00:28:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 00:28:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 00:28:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 00:28:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 00:28:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 00:28:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 00:28:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 00:28:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 00:28:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 00:28:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 00:28:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 00:28:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 00:28:01'!
PASSED!

{1. 2. 3} !

{1. 2. 3} second !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 00:42:42' prior: 50876300!
test10PurchaseListHasTheCorrectQuantityOfItems

	| cartId purchasesList |
				
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory validUser.
	purchasesList _ facade listPurchasesOfUser: objectFactory validUser withPassword: objectFactory validPassword.
	
	self assert: (purchasesList first at: objectFactory itemSellByTheStore) equals: 2.
	self assert: purchasesList second equals: objectFactory itemSellByTheStorePrice * 2
	
	! !

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 00:42:44'!
ERROR!
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 00:44:21' prior: 50874548!
listPurchasesForCustomer: aUsername

	^ (self totalItemsWithCountsForCustomer: aUsername) contents! !
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 00:47:41' prior: 50882863!
listPurchasesForCustomer: aUsername

	^ {(self totalItemsWithCountsForCustomer: aUsername) contents. (self salesForCustomer: aUsername) sum: [:aSale | aSale total]}! !

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 00:47:48'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 00:48:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 00:48:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 00:48:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 00:48:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 00:48:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 00:48:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 00:48:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 00:48:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 00:48:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 00:48:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 00:48:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 00:48:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 00:48:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 00:48:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 00:48:04'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 00:48:04'!
ERROR!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 00:48:04'!
ERROR!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 00:48:38' prior: 50882056!
test15CanNotCheckoutAnExpiredCart

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId.
	clock advanceHalfAnHour.
	self  should: [facade 
			checkoutCart: cartId 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory validUser]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |  
			self assert: anError messageText equals: TusLibrosFacade cartExpiredErrorDescription.
			self assert: (facade listPurchasesOfUser: objectFactory validUser withPassword: objectFactory validPassword) first isEmpty
			]
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 00:48:40'!
FAILURE!

facade listPurchasesOfUser: objectFactory validUser withPassword: objectFactory validPassword!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 00:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 00:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 00:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 00:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 00:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 00:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 00:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 00:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 00:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 00:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 00:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 00:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 00:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 00:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 00:49:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 00:49:20'!
ERROR!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 00:49:20'!
ERROR!

facade listPurchasesOfUser: objectFactory validUser withPassword: objectFactory validPassword!
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 00:49:47' prior: 50882870!
listPurchasesForCustomer: aUsername

	^ {(self totalItemsWithCountsForCustomer: aUsername) contents. (self salesForCustomer: aUsername) sum: [:aSale | aSale total] ifEmpty: [0]}! !

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 00:49:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 00:49:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 00:49:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 00:49:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 00:49:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 00:49:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 00:49:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 00:49:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 00:49:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 00:49:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 00:49:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 00:49:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 00:49:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 00:49:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 00:49:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 00:49:50'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 00:49:50'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 00:56:18' prior: 50879295!
notas

	
	"Es correcto pasar la lista de usuarios y contrase�as o hay que hacer algo similar a lo del merchant processor?"
	
	"Customer vs username qu� conviene usar?"! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 00:56:36' prior: 50875287!
invalidUser
	
	^Object new! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 00:56:46' prior: 50875228!
invalidPassword

	^Object new! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 01:03:48' prior: 50883105!
notas

	
	"Convertir la lista de usuarios en un authenticator"
	
	"TRANSACTION ID -> EN MERCHANT PROCESSOR O ADMINISTRADO POR FACADE?"
	
! !

!methodRemoval: SaleReceipt class #for: stamp: 'fr 12/3/2020 01:06:18'!
for: aReceiptEntriesList 
	
	^self new initializeFor: aReceiptEntriesList !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 01:06:20'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 01:06:20'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 01:06:20'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 01:06:20'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 01:06:20'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 01:06:20'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 01:06:20'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 01:06:20'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 01:06:20'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 01:06:20'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 01:06:20'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 01:06:20'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 01:06:20'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 01:06:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 01:06:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 01:06:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 01:06:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 01:06:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 01:06:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 01:06:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 01:06:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 01:06:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 01:06:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 01:06:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 01:06:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 01:06:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 01:06:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 01:06:20'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 01:06:20'!
PASSED!

	"DESACOPLAR EL RELOJ DE DATE AND TIME"!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 01:07:24' prior: 50883123!
notas

	
	"Convertir la lista de usuarios en un authenticator"
	
	"TRANSACTION ID -> EN MERCHANT PROCESSOR O ADMINISTRADO POR FACADE?"
	
	"DESACOPLAR EL RELOJ DE DATE AND TIME"
	
! !
!TusLibrosFacadeTest methodsFor: 'setup' stamp: 'fr 12/3/2020 01:34:59' prior: 50881557 overrides: 16927572!
setUp
	
	objectFactory _ StoreTestObjectsFactory new.
	salesBook _ objectFactory defaultSalesBook.
	clock _ Clock newClock.
	facade _ TusLibrosFacade 
			acceptingItemsOf: objectFactory defaultCatalog 
			validatingUsersFrom: self 
			registeringSalesOn: salesBook
			chargingThrough: self
			withClock: clock.
! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 01:35:09'!
ERROR!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 01:35:09'!
ERROR!
!TusLibrosFacade methodsFor: 'cart management' stamp: 'fr 12/3/2020 01:36:40' prior: 50882581!
newCartForUser: aUsername andPassword: aPassword 
	
	credentials validateUsername: aUsername andPassword: aPassword.
	self updateId.
	carts add: currentId -> self newCartSession.
	^currentId ! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 01:36:42'!
ERROR!
!TusLibrosFacadeTest methodsFor: 'authenticator' stamp: 'fr 12/3/2020 01:36:51'!
validateUsername: aString andPassword: aString2 
	self shouldBeImplemented.! !
!TusLibrosFacadeTest methodsFor: 'authenticator' stamp: 'fr 12/3/2020 01:36:54' prior: 50883277!
validateUsername: aString andPassword: aString2 
	! !
!TusLibrosFacadeTest methodsFor: 'authenticator' stamp: 'fr 12/3/2020 01:37:01' prior: 50883283!
validateUsername: aUsername andPassword: aString2 
	! !
!TusLibrosFacadeTest methodsFor: 'authenticator' stamp: 'fr 12/3/2020 01:37:07' prior: 50883288!
validateUsername: aUsername andPassword: aPassword 
	! !

!classDefinition: #TusLibrosFacadeTest category: 'TusLibros - Exercise - III' stamp: 'fr 12/3/2020 01:38:31'!
TestCase subclass: #TusLibrosFacadeTest
	instanceVariableNames: 'facade objectFactory salesBook clock credentialds'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!TusLibrosFacadeTest methodsFor: 'authenticator' stamp: 'fr 12/3/2020 01:38:29' prior: 50883293!
validateUsername: aUsername andPassword: aPassword 
	
	(credentialds at: aUsername ifAbsent: [self error: TusLibrosFacade invalidCredentialsErrorDescription]) = aPassword ifFalse: [self error: TusLibrosFacade invalidCredentialsErrorDescription].
	! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 01:38:37'!
ERROR!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 01:39:41' prior: 50874918!
test01CanCreateNewCartWithValidCredentials

	| cartId  |
	credentialds _ objectFactory defaultCredentials.
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	
	self assert: (facade listCart: cartId) isEmpty! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 01:39:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 01:39:48'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 01:39:55' prior: 50883323!
test01CanCreateNewCartWithValidCredentials

	| cartId  |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	
	self assert: (facade listCart: cartId) isEmpty! !
!TusLibrosFacadeTest methodsFor: 'setup' stamp: 'fr 12/3/2020 01:40:11' prior: 50883244 overrides: 16927572!
setUp
	
	objectFactory _ StoreTestObjectsFactory new.
	
	credentialds _ objectFactory defaultCredentials.
	salesBook _ objectFactory defaultSalesBook.
	clock _ Clock newClock.
	
	facade _ TusLibrosFacade 
			acceptingItemsOf: objectFactory defaultCatalog 
			validatingUsersFrom: self 
			registeringSalesOn: salesBook
			chargingThrough: self
			withClock: clock.
! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 01:40:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 01:40:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 01:40:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 01:40:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 01:40:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 01:40:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 01:40:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 01:40:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 01:40:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 01:40:14'!
ERROR!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 01:40:14'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 01:40:14'!
ERROR!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 01:40:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 01:40:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 01:40:14'!
ERROR!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 01:40:28'!
ERROR!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 01:40:28'!
ERROR!
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 01:40:37' prior: 50874735!
listPurchasesOfUser: aUsername withPassword: aPassword 

	credentials validateUsername: aUsername andPassword: aPassword.

	^self listPurchasesForCustomer: aUsername
	! !

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 01:40:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 01:40:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 01:40:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 01:40:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 01:40:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 01:40:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 01:40:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 01:40:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 01:40:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 01:40:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 01:40:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 01:40:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 01:40:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 01:40:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 01:40:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 01:40:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 01:40:39'!
PASSED!

!classDefinition: #TusLibrosFacade category: 'TusLibros - Exercise - III' stamp: 'fr 12/3/2020 01:40:57'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'carts catalogue authenticator usernameList currentId merchantProcessor salesBook credentialsList clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 01:40:57' prior: 50883264!
newCartForUser: aUsername andPassword: aPassword 
	
	authenticator validateUsername: aUsername andPassword: aPassword.
	self updateId.
	carts add: currentId -> self newCartSession.
	^currentId ! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 01:40:57' prior: 50879565!
initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aCredentialsList registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor withClock: aClock 
	
	catalogue _ aCatalogue.
	authenticator _ aCredentialsList.
	salesBook _ aSalesBook.
	merchantProcessor _ aMerchantProcessor.
	clock := aClock.
	
	carts _ Dictionary new.
	currentId _ 0
! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 01:40:57' prior: 50883427!
listPurchasesOfUser: aUsername withPassword: aPassword 

	authenticator validateUsername: aUsername andPassword: aPassword.

	^self listPurchasesForCustomer: aUsername
	! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 01:40:57' prior: 50869735!
passwordForUsername: aUsername 
	
	^authenticator at: aUsername ifAbsent: [self error: self class invalidCredentialsErrorDescription]! !

Object subclass: #TusLibrosFacade
	instanceVariableNames: 'carts catalogue authenticator currentId merchantProcessor salesBook clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!

!classDefinition: #TusLibrosFacade category: 'TusLibros - Exercise - III' stamp: 'fr 12/3/2020 01:41:08'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'carts catalogue authenticator currentId merchantProcessor salesBook clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 01:41:09'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 01:41:09'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 01:41:09'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 01:41:09'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 01:41:09'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 01:41:09'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 01:41:09'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 01:41:09'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 01:41:09'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 01:41:09'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 01:41:09'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 01:41:09'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 01:41:09'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 01:41:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 01:41:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 01:41:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 01:41:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 01:41:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 01:41:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 01:41:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 01:41:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 01:41:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 01:41:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 01:41:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 01:41:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 01:41:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 01:41:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 01:41:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 01:41:09'!
PASSED!

!classDefinition: #TusLibrosFacade category: 'TusLibros - Exercise - III' stamp: 'fr 12/3/2020 01:41:46'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'cartsSessions catalogue authenticator currentId merchantProcessor salesBook clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 01:41:46' prior: 50883517!
initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: aCredentialsList registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor withClock: aClock 
	
	catalogue _ aCatalogue.
	authenticator _ aCredentialsList.
	salesBook _ aSalesBook.
	merchantProcessor _ aMerchantProcessor.
	clock := aClock.
	
	cartsSessions _ Dictionary new.
	currentId _ 0
! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 01:41:46' prior: 50882355!
cartSessionForCartId: aCartId

	^cartsSessions at: aCartId ifAbsent: [self error: self class invalidCartIdErrorDescription]! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 01:41:46' prior: 50883507!
newCartForUser: aUsername andPassword: aPassword 
	
	authenticator validateUsername: aUsername andPassword: aPassword.
	self updateId.
	cartsSessions add: currentId -> self newCartSession.
	^currentId ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 01:41:47'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 01:41:47'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 01:41:47'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 01:41:47'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 01:41:47'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 01:41:47'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 01:41:47'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 01:41:47'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 01:41:47'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 01:41:47'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 01:41:47'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 01:41:47'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 01:41:47'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 01:41:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 01:41:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 01:41:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 01:41:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 01:41:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 01:41:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 01:41:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 01:41:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 01:41:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 01:41:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 01:41:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 01:41:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 01:41:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 01:41:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 01:41:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 01:41:47'!
PASSED!
!TusLibrosFacade methodsFor: 'initialization' stamp: 'fr 12/3/2020 01:42:15' prior: 50883674!
initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: anAuthenticator registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor withClock: aClock 
	
	catalogue _ aCatalogue.
	authenticator _ anAuthenticator.
	salesBook _ aSalesBook.
	merchantProcessor _ aMerchantProcessor.
	clock := aClock.
	
	cartsSessions _ Dictionary new.
	currentId _ 0
! !
!TusLibrosFacade methodsFor: 'initialization' stamp: 'fr 12/3/2020 01:42:34'!
initializeAcceptingItemsOf: aCatalogue validatingUsersThrough: anAuthenticator registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor withClock: aClock 
	
	catalogue _ aCatalogue.
	authenticator _ anAuthenticator.
	salesBook _ aSalesBook.
	merchantProcessor _ aMerchantProcessor.
	clock := aClock.
	
	cartsSessions _ Dictionary new.
	currentId _ 0
! !
!TusLibrosFacade class methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 01:42:34' prior: 50879512!
acceptingItemsOf: aCatalogue validatingUsersFrom: aCredentialsList registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor withClock: aClock 
	
	^self new initializeAcceptingItemsOf: aCatalogue validatingUsersThrough: aCredentialsList registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor withClock: aClock ! !

!methodRemoval: TusLibrosFacade #initializeAcceptingItemsOf:validatingUsersFrom:registeringSalesOn:chargingThrough:withClock: stamp: 'fr 12/3/2020 01:42:34'!
initializeAcceptingItemsOf: aCatalogue validatingUsersFrom: anAuthenticator registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor withClock: aClock 
	
	catalogue _ aCatalogue.
	authenticator _ anAuthenticator.
	salesBook _ aSalesBook.
	merchantProcessor _ aMerchantProcessor.
	clock := aClock.
	
	cartsSessions _ Dictionary new.
	currentId _ 0
!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 01:42:36'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 01:42:36'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 01:42:36'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 01:42:36'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 01:42:36'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 01:42:36'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 01:42:36'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 01:42:36'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 01:42:36'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 01:42:36'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 01:42:36'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 01:42:36'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 01:42:36'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 01:42:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 01:42:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 01:42:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 01:42:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 01:42:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 01:42:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 01:42:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 01:42:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 01:42:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 01:42:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 01:42:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 01:42:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 01:42:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 01:42:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 01:42:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 01:42:36'!
PASSED!
!TusLibrosFacade class methodsFor: 'instance creation' stamp: 'fr 12/3/2020 01:42:45' prior: 50883833!
acceptingItemsOf: aCatalogue validatingUsersFrom: anAuthenticator registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor withClock: aClock 
	
	^self new initializeAcceptingItemsOf: aCatalogue validatingUsersThrough: anAuthenticator registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor withClock: aClock ! !
!TusLibrosFacade class methodsFor: 'instance creation' stamp: 'fr 12/3/2020 01:42:57'!
acceptingItemsOf: aCatalogue validatingUsersThrough: anAuthenticator registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor withClock: aClock 
	
	^self new initializeAcceptingItemsOf: aCatalogue validatingUsersThrough: anAuthenticator registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor withClock: aClock ! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 01:42:57' prior: 50883352 overrides: 16927572!
setUp
	
	objectFactory _ StoreTestObjectsFactory new.
	
	credentialds _ objectFactory defaultCredentials.
	salesBook _ objectFactory defaultSalesBook.
	clock _ Clock newClock.
	
	facade _ TusLibrosFacade 
			acceptingItemsOf: objectFactory defaultCatalog 
			validatingUsersThrough: self 
			registeringSalesOn: salesBook
			chargingThrough: self
			withClock: clock.
! !

!methodRemoval: TusLibrosFacade class #acceptingItemsOf:validatingUsersFrom:registeringSalesOn:chargingThrough:withClock: stamp: 'fr 12/3/2020 01:42:57'!
acceptingItemsOf: aCatalogue validatingUsersFrom: anAuthenticator registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor withClock: aClock 
	
	^self new initializeAcceptingItemsOf: aCatalogue validatingUsersThrough: anAuthenticator registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor withClock: aClock !

!methodRemoval: TusLibrosFacade #validateUsername:andPassword: stamp: 'fr 12/3/2020 01:44:46'!
validateUsername: aUsername andPassword: aPassword 
	
	(self passwordForUsername: aUsername) = aPassword ifFalse: [self error: self class invalidCredentialsErrorDescription]!

!methodRemoval: TusLibrosFacade #passwordForUsername: stamp: 'fr 12/3/2020 01:44:53'!
passwordForUsername: aUsername 
	
	^authenticator at: aUsername ifAbsent: [self error: self class invalidCredentialsErrorDescription]!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 01:45:32'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 01:45:32'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 01:45:32'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 01:45:32'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 01:45:32'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 01:45:32'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 01:45:32'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 01:45:32'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 01:45:32'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 01:45:32'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 01:45:32'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 01:45:32'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 01:45:32'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 01:45:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 01:45:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 01:45:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 01:45:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 01:45:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 01:45:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 01:45:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 01:45:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 01:45:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 01:45:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 01:45:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 01:45:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 01:45:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 01:45:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 01:45:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 01:45:32'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'setup' stamp: 'fr 12/3/2020 01:46:05' prior: 50883990 overrides: 16927572!
setUp
	
	objectFactory _ StoreTestObjectsFactory new.
	
	credentialds _ objectFactory defaultCredentials.
	salesBook _ objectFactory defaultSalesBook.
	clock _ objectFactory defaultClock.
	
	facade _ TusLibrosFacade 
			acceptingItemsOf: objectFactory defaultCatalog 
			validatingUsersThrough: self 
			registeringSalesOn: salesBook
			chargingThrough: self
			withClock: clock.
! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 01:46:15'!
defaultClock
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 01:46:21' prior: 50884149!
defaultClock
	
	^Clock newClock! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 01:46:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 01:46:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 01:46:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 01:46:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 01:46:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 01:46:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 01:46:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 01:46:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 01:46:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 01:46:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 01:46:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 01:46:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 01:46:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 01:46:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 01:46:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 01:46:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 01:46:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 01:46:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 01:46:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 01:46:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 01:46:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 01:46:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 01:46:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 01:46:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 01:46:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 01:46:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 01:46:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 01:46:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 01:46:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 01:46:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 01:46:25'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 01:46:39' prior: 50883234!
notas

	
	"TRANSACTION ID -> EN MERCHANT PROCESSOR O ADMINISTRADO POR FACADE?"
	
	"DESACOPLAR EL RELOJ DE DATE AND TIME"
	
! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 01:46:52' prior: 50884267!
notas

	
	"TRANSACTION ID -> EN MERCHANT PROCESSOR O ADMINISTRADO POR FACADE?"
	
	"DESACOPLAR EL RELOJ DE DATE AND TIME"
	
	"ACOMODAR EL LIST PURCHASES"
	
! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 01:52:42' prior: 50884274!
notas

	
	"TRANSACTION ID -> EN MERCHANT PROCESSOR O ADMINISTRADO POR FACADE?"
	
	"DESACOPLAR EL RELOJ DE DATE AND TIME"
	
	"ACOMODAR EL LIST PURCHASES"
	
	"Despu�s de la expiraci�n de la sesi�n habr�a que borrar el cart -> test para verificar que luego de un timeout el cartId es inv�lido"
	
	"Despu�s del checkout habr�a que borrar el cart -> test para verificar que luego del checkout el cartId es inv�lido"
	
! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 01:53:12' prior: 50884282!
notas

	"TRANSACTION ID -> EN MERCHANT PROCESSOR O ADMINISTRADO POR FACADE?"
	
	"DESACOPLAR EL RELOJ DE DATE AND TIME"
	
	"ACOMODAR EL LIST PURCHASES"
	
	"Despu�s de la expiraci�n de la sesi�n habr�a que borrar el cart -> test para verificar que luego de un timeout el cartId es inv�lido"
	
	"Despu�s del checkout habr�a que borrar el cart -> test para verificar que luego del checkout el cartId es inv�lido"
	
! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 01:54:31' prior: 50884298!
notas

	"TRANSACTION ID -> EN MERCHANT PROCESSOR O ADMINISTRADO POR FACADE?"
	
	"DESACOPLAR EL RELOJ DE DATE AND TIME"
	
	"ACOMODAR EL LIST PURCHASES"
	
	"Despu�s de la expiraci�n de la sesi�n habr�a que borrar el cart -> test para verificar que luego de un timeout el cartId es inv�lido"
	
	"Despu�s del checkout habr�a que borrar el cart -> test para verificar que luego del checkout el cartId es inv�lido"
	
	"Cambiar validUser por cardOwner"
	
! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 01:55:25' prior: 50883342!
test01CanCreateNewCartWithValidCredentials

	| cartId  |
	facade _ TusLibrosFacade 
			acceptingItemsOf: objectFactory defaultCatalog 
			validatingUsersThrough: self 
			registeringSalesOn: salesBook
			chargingThrough: self
			withClock: Clock for: DateAndTime.
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	
	self assert: (facade listCart: cartId) isEmpty! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 01:55:32' prior: 50884331!
test01CanCreateNewCartWithValidCredentials

	| cartId  |
	facade _ TusLibrosFacade 
			acceptingItemsOf: objectFactory defaultCatalog 
			validatingUsersThrough: self 
			registeringSalesOn: salesBook
			chargingThrough: self
			withClock: (Clock for: DateAndTime).
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	
	self assert: (facade listCart: cartId) isEmpty! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 01:55:32'!
ERROR!
!Clock class methodsFor: 'instance creation' stamp: 'fr 12/3/2020 01:55:37'!
for: aClass 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aClass ! !
!Clock class methodsFor: 'instance creation' stamp: 'fr 12/3/2020 01:55:42' prior: 50884367!
for: aClass 
	
	^self new initializeFor: aClass ! !
!Clock class methodsFor: 'instance creation' stamp: 'fr 12/3/2020 01:56:18' prior: 50884375!
for: aDateAndTimeGenerator 
	
	^self new initializeFor: aDateAndTimeGenerator ! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 01:56:34'!
ERROR!

!classDefinition: #Clock category: 'TusLibros - Exercise - III' stamp: 'fr 12/3/2020 01:56:42'!
Object subclass: #Clock
	instanceVariableNames: 'offset dateAndTimeGenerator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!Clock methodsFor: 'initialization' stamp: 'fr 12/3/2020 01:56:42'!
initializeFor: aDateAndTimeGenerator 
	self shouldBeImplemented.
	dateAndTimeGenerator := aDateAndTimeGenerator.! !
!Clock methodsFor: 'initialization' stamp: 'fr 12/3/2020 01:56:48' prior: 50884397!
initializeFor: aDateAndTimeGenerator 
	
	dateAndTimeGenerator _ aDateAndTimeGenerator.! !

!classDefinition: #Clock category: 'TusLibros - Exercise - III' stamp: 'fr 12/3/2020 01:56:51'!
Object subclass: #Clock
	instanceVariableNames: 'offset generator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!Clock methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 01:56:51' prior: 50884404!
initializeFor: aDateAndTimeGenerator 
	
	generator _ aDateAndTimeGenerator.! !

!classDefinition: #Clock category: 'TusLibros - Exercise - III' stamp: 'fr 12/3/2020 01:57:05'!
Object subclass: #Clock
	instanceVariableNames: 'offset dateAndTimeGenerator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!Clock methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 01:57:05' prior: 50884418!
initializeFor: aDateAndTimeGenerator 
	
	dateAndTimeGenerator _ aDateAndTimeGenerator.! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 01:58:10' prior: 50884347!
test01CanCreateNewCartWithValidCredentials

	| cartId  |
	facade _ TusLibrosFacade 
			acceptingItemsOf: objectFactory defaultCatalog 
			validatingUsersThrough: self 
			registeringSalesOn: salesBook
			chargingThrough: self
			withClock: (Clock for: DateAndTime now).
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	
	self assert: (facade listCart: cartId) isEmpty! !

!classDefinition: #Clock category: 'TusLibros - Exercise - III' stamp: 'fr 12/3/2020 01:58:29'!
Object subclass: #Clock
	instanceVariableNames: 'offset dateAndTimeGenerator now'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!Clock methodsFor: 'time' stamp: 'fr 12/3/2020 01:58:26' prior: 50879837!
now
	
	^now! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 01:58:35'!
ERROR!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 01:58:50'!
ERROR!
!Clock class methodsFor: 'instance creation' stamp: 'fr 12/3/2020 01:59:06' prior: 50884380!
for: aTimePoint 
	
	^self new initializeFor: aTimePoint ! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 01:59:22'!
ERROR!
!Clock methodsFor: 'initialization' stamp: 'fr 12/3/2020 01:59:39' prior: 50884432!
initializeFor: aDateAndTimeGenerator 
	
	now _ aDateAndTimeGenerator.! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 01:59:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 01:59:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 01:59:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 01:59:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 01:59:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 01:59:43'!
ERROR!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 01:59:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 01:59:43'!
ERROR!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 01:59:43'!
ERROR!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 01:59:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 01:59:43'!
ERROR!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 01:59:43'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 01:59:43'!
ERROR!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 01:59:43'!
ERROR!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 01:59:43'!
ERROR!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 01:59:43'!
ERROR!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 01:59:49'!
ERROR!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 01:59:49'!
ERROR!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 02:00:01'!
ERROR!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 02:00:10'!
ERROR!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 02:00:10'!
ERROR!

clock now!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 02:01:05' prior: 50884438!
test01CanCreateNewCartWithValidCredentials

	| cartId  |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	
	self assert: (facade listCart: cartId) isEmpty! !
!TusLibrosFacadeTest methodsFor: 'setup' stamp: 'fr 12/3/2020 02:01:16' prior: 50884134 overrides: 16927572!
setUp
	
	objectFactory _ StoreTestObjectsFactory new.
	
	credentialds _ objectFactory defaultCredentials.
	salesBook _ objectFactory defaultSalesBook.
	clock _ objectFactory defaultClock.
	
	facade _ facade _ TusLibrosFacade 
			acceptingItemsOf: objectFactory defaultCatalog 
			validatingUsersThrough: self 
			registeringSalesOn: salesBook
			chargingThrough: self
			withClock: (Clock for: DateAndTime now).
! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 02:01:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 02:01:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 02:01:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 02:01:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 02:01:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 02:01:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 02:01:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 02:01:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 02:01:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 02:01:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 02:01:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 02:01:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 02:01:16'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 02:01:16'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 02:01:16'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 02:01:24'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 02:01:24'!
FAILURE!
!Clock methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 02:01:45' prior: 50880101!
advanceHalfAnHour
	
	now _ now + 30 minutes! !

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 02:01:47'!
ERROR!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 02:02:02'!
ERROR!

now!

facade!

self now !

now!
!TusLibrosFacadeTest methodsFor: 'setup' stamp: 'fr 12/3/2020 02:03:08' prior: 50884570 overrides: 16927572!
setUp
	
	objectFactory _ StoreTestObjectsFactory new.
	
	credentialds _ objectFactory defaultCredentials.
	salesBook _ objectFactory defaultSalesBook.
	clock _ Clock for: DateAndTime now.
	
	facade _ facade _ TusLibrosFacade 
			acceptingItemsOf: objectFactory defaultCatalog 
			validatingUsersThrough: self 
			registeringSalesOn: salesBook
			chargingThrough: self
			withClock: clock.
! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 02:03:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 02:03:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 02:03:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 02:03:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 02:03:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 02:03:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 02:03:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 02:03:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 02:03:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 02:03:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 02:03:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 02:03:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 02:03:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 02:03:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 02:03:09'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'setup' stamp: 'fr 12/3/2020 02:03:25' prior: 50884659 overrides: 16927572!
setUp
	
	objectFactory _ StoreTestObjectsFactory new.
	
	credentialds _ objectFactory defaultCredentials.
	salesBook _ objectFactory defaultSalesBook.
	clock _ objectFactory defaultClock .
	
	facade _ facade _ TusLibrosFacade 
			acceptingItemsOf: objectFactory defaultCatalog 
			validatingUsersThrough: self 
			registeringSalesOn: salesBook
			chargingThrough: self
			withClock: clock.
! !
!TusLibrosFacadeTest methodsFor: 'setup' stamp: 'fr 12/3/2020 02:03:26' prior: 50884728 overrides: 16927572!
setUp
	
	objectFactory _ StoreTestObjectsFactory new.
	
	credentialds _ objectFactory defaultCredentials.
	salesBook _ objectFactory defaultSalesBook.
	clock _ objectFactory defaultClock.
	
	facade _ facade _ TusLibrosFacade 
			acceptingItemsOf: objectFactory defaultCatalog 
			validatingUsersThrough: self 
			registeringSalesOn: salesBook
			chargingThrough: self
			withClock: clock.
! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 02:03:33' prior: 50884154!
defaultClock
	
	^Clock for: DateAndTime now! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 02:03:41' prior: 50884314!
notas

	"TRANSACTION ID -> EN MERCHANT PROCESSOR O ADMINISTRADO POR FACADE?"
		
	"ACOMODAR EL LIST PURCHASES"
	
	"Despu�s de la expiraci�n de la sesi�n habr�a que borrar el cart -> test para verificar que luego de un timeout el cartId es inv�lido"
	
	"Despu�s del checkout habr�a que borrar el cart -> test para verificar que luego del checkout el cartId es inv�lido"
	
	"Cambiar validUser por cardOwner"
	
! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 02:06:36'!
test16

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock advanceHalfAnHour.
	[facade listCart: cartId]
		on: Error - MessageNotUnderstood
		do: [
			
		]
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 02:06:52' prior: 50884781!
test16

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock advanceHalfAnHour.
	[facade listCart: cartId]
		on: Error
		do: [
			
		]
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 02:08:07' prior: 50884792!
test16

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock advanceHalfAnHour.
	[facade listCart: cartId]
		on: Error
		do: [
			self should: (facade listCart: cartId) raise: Error - MessageNotUnderstood withMessageText: TusLibrosFacade invalidCartIdErrorDescription 
		]
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 02:08:37' prior: 50884802!
test16

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock advanceHalfAnHour.
	[facade listCart: cartId]
		on: Error
		do: [
			self  should: [facade listCart: cartId] 
				raise: Error - MessageNotUnderstood 
				withMessageText: TusLibrosFacade invalidCartIdErrorDescription 
		]! !

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:08:37'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:09:34'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:09:45'!
FAILURE!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 02:18:56' prior: 50884765!
notas

	"TRANSACTION ID -> EN MERCHANT PROCESSOR O ADMINISTRADO POR FACADE?"
		
	"ACOMODAR EL LIST PURCHASES"
	
	"Despu�s de la expiraci�n de la sesi�n habr�a que borrar el cart -> test para verificar que luego de un timeout el cartId es inv�lido"
	
	"Despu�s del checkout habr�a que borrar el cart -> test para verificar que luego del checkout el cartId es inv�lido"
	
	"Para borrar el cart sin pasarle el id al cartSession parece ser necesario que las operaciones del protocolo de cart para las que resultan polim�rficos, reciban un bloque que se parametrice con el cart"
	
	
	"Cambiar validUser por cardOwner"
	
! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 02:19:58' prior: 50884838!
notas

	"TRANSACTION ID -> EN MERCHANT PROCESSOR O ADMINISTRADO POR FACADE?"
		
	"ACOMODAR EL LIST PURCHASES"
	
	"Despu�s de la expiraci�n de la sesi�n habr�a que borrar el cart -> test para verificar que luego de un timeout el cartId es inv�lido"
	
	"Despu�s del checkout habr�a que borrar el cart -> test para verificar que luego del checkout el cartId es inv�lido"
	
	"Para borrar el cart sin pasarle el id al cartSession parece ser necesario que las operaciones del protocolo de cart para las que resultan polim�rficos, reciban un bloque que se parametrice con el cart. El cartSession no deber�a conocer su Id y hacer una b�squeda por == con un double dispatch no resulta satisfactorio"
	
	
	"Cambiar validUser por cardOwner"
	
! !

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:20:22'!
FAILURE!
!TusLibrosFacade methodsFor: 'cart management' stamp: 'fr 12/3/2020 02:21:56' prior: 50882362!
listCart: aCartId 
	
	^(self cartSessionForCartId: aCartId) do: [:aCart | aCart listCart. self removeCart: aCartId]
	! !

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:22:01'!
ERROR!
!CartSession methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 02:22:11'!
do: aBlockClosure 
	self shouldBeImplemented.! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 02:22:30' prior: 50884899!
do: aCartBlock
	
	^aCartBlock value: cart
	
	! !

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:22:32'!
ERROR!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 02:22:43'!
removeCart: aSmallInteger 
	self shouldBeImplemented.! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 02:22:45' prior: 50884911!
removeCart: aSmallInteger 
	
	! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 02:22:48' prior: 50884916!
removeCart: aCartId 
	
	! !

dict _ Dictionary new add: 'Fede' -> 2; add: 'Gra' -> 3; yourself !

dict removeKey: 'Fede' !

dict !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 02:25:46' prior: 50884921!
removeCart: aCartId 

	cartsSessions removeKey: aCartId 
	
	! !

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:25:47'!
FAILURE!

facade listCart: cartId!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:26:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 02:26:01'!
ERROR!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 02:26:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 02:26:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 02:26:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 02:26:01'!
ERROR!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 02:26:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 02:26:01'!
ERROR!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 02:26:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 02:26:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 02:26:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 02:26:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 02:26:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 02:26:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 02:26:01'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 02:26:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:26:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 02:26:12'!
ERROR!
!TusLibrosFacade methodsFor: 'cart management' stamp: 'fr 12/3/2020 02:26:45' prior: 50884890!
listCart: aCartId 
	
	^(self cartSessionForCartId: aCartId) do: [:aCart | | cartList | cartList _ aCart listCart. self removeCart: aCartId. cartList]
	! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 02:26:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 02:26:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 02:26:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 02:26:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 02:26:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 02:26:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 02:26:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 02:26:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 02:26:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 02:26:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 02:26:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 02:26:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 02:26:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 02:26:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 02:26:47'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 02:26:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:26:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 02:26:47'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 02:26:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 02:26:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 02:26:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 02:26:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 02:26:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 02:26:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 02:26:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 02:26:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 02:26:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 02:26:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 02:26:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 02:26:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 02:26:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 02:26:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 02:26:51'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 02:26:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:26:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 02:26:51'!
FAILURE!

facade listCart: cartId!
!TusLibrosFacade methodsFor: 'cart management' stamp: 'fr 12/3/2020 02:28:53' prior: 50884999!
listCart: aCartId 
	
	^(self cartSessionForCartId: aCartId) cartDo: [:aCart | | cartList | cartList _ aCart listCart. self removeCart: aCartId. cartList]
	! !

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 02:28:55'!
ERROR!
!CartSession methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 02:29:00'!
cartDo: aBlockClosure 
	self shouldBeImplemented.! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 02:30:20' prior: 50885143!
cartDo: aCartBlock 
	
	self assertCartHasNotExpired.
	
	^aCartBlock value: cart! !

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 02:30:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 02:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 02:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 02:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 02:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 02:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 02:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 02:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 02:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 02:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 02:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 02:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 02:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 02:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 02:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 02:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 02:30:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:30:22'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:30:22'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:32:03'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:32:03'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:32:41'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:32:49'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:34:45'!
FAILURE!

facade!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:35:38'!
FAILURE!

!methodRemoval: CartSession #do: stamp: 'fr 12/3/2020 02:36:28'!
do: aCartBlock
	
	^aCartBlock value: cart
	
	!

!methodRemoval: CartSession #cartDo: stamp: 'fr 12/3/2020 02:36:30'!
cartDo: aCartBlock 
	
	self assertCartHasNotExpired.
	
	^aCartBlock value: cart!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:36:38'!
ERROR!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:36:38'!
ERROR!
!TusLibrosFacade methodsFor: 'cart management' stamp: 'fr 12/3/2020 02:37:53' prior: 50885132!
listCart: aCartId 
	
	^(self cartSessionForCartId: aCartId) do: [:aCart | aCart listCart] ensureOnFail: [self removeCart: aCartId]
	! !
!TusLibrosFacade methodsFor: 'cart management' stamp: 'fr 12/3/2020 02:38:16' prior: 50885247!
listCart: aCartId 
	
	^(self cartSessionForCartId: aCartId) do: [:aCart | aCart listCart] ensureOnExpiredCart: [self removeCart: aCartId]
	! !

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:38:26'!
ERROR!
!CartSession methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 02:38:33'!
do: aBlockClosure ensureOnExpiredCart: aBlockClosure2 
	self shouldBeImplemented.! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 02:38:35' prior: 50885265!
do: aBlockClosure ensureOnExpiredCart: aBlockClosure2 
	
	! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 02:38:42' prior: 50885271!
do: aCartBlock ensureOnExpiredCart: aBlockClosure2 
	
	! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 02:38:55' prior: 50885276!
do: aCartBlock ensureOnExpiredCart: aCartExpirationBlock 
	
	! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 02:39:13' prior: 50885281!
do: aCartBlock ensureOnExpiredCart: aCartExpirationBlock 

	
	
	! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 02:39:44' prior: 50885286!
do: aCartBlock ensureOnExpiredCart: aCartExpirationBlock 

	[self assertCartHasNotExpired] ensure: aCartBlock.

	^aCartBlock value: cart
	
	! !

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:39:46'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:39:52'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:39:56'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:39:58'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:39:59'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:40:02'!
FAILURE!

----SNAPSHOT----(3 December 2020 02:40:20) CuisUniversity-4384.image priorSource: 17429559!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:41:05'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:41:11'!
FAILURE!
!CartSession methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 02:42:41' prior: 50885292!
do: aCartBlock ensureOnExpiredCart: aCartExpirationBlock 

	[self assertCartHasNotExpired] ensure: aCartExpirationBlock.

	^aCartBlock value: cart
	
	! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 02:42:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 02:42:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 02:42:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 02:42:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 02:42:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 02:42:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 02:42:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 02:42:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 02:42:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 02:42:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 02:42:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 02:42:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 02:42:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 02:42:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 02:42:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:42:43'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:42:43'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:42:43'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:42:45'!
PASSED!

----STARTUP---- (3 December 2020 02:43:57) as /home/fede/Documentos/Facultad/Inge1/Cuises/linux64/CuisUniversity-4384.image!


[self fail] ensure: [a _ 1] !

a !
!CartSession methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 02:45:36' prior: 50885292!
do: aCartBlock ensureOnExpiredCart: aCartExpirationBlock 

	[self assertCartHasNotExpired] ensure: aCartExpirationBlock.

	^aCartBlock value: cart
	
	! !

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:45:39'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:45:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:46:04'!
FAILURE!

----STARTUP---- (3 December 2020 02:46:32) as /home/fede/Documentos/Facultad/Inge1/Cuises/linux64/CuisUniversity-4384.image!


!methodRemoval: CartSession #do:ensureOnExpiredCart: stamp: 'fr 12/3/2020 02:47:01'!
do: aCartBlock ensureOnExpiredCart: aCartExpirationBlock 

	[self assertCartHasNotExpired] ensure: aCartBlock.

	^aCartBlock value: cart
	
	!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:47:54'!
ERROR!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:47:54'!
ERROR!
!CartSession methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 02:48:33'!
do: aBlockClosure ensureOnExpiredCart: aBlockClosure2 
	self shouldBeImplemented.! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 02:49:36' prior: 50885334!
do: aCartBlock ensureOnExpiredCart: aCartExpirationBlock 

	self assertCartHasNotExpiredOrExecute: aCartExpirationBlock.
	
	^aCartBlock
	! !

!methodRemoval: CartSession #do:ensureOnExpiredCart: stamp: 'fr 12/3/2020 02:49:50'!
do: aCartBlock ensureOnExpiredCart: aCartExpirationBlock 

	self assertCartHasNotExpiredOrExecute: aCartExpirationBlock.
	
	^aCartBlock
	!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 02:50:17' prior: 50884816!
test16

	| cartId receipt |
				
	cartId _ facade 
				newCartForUser: objectFactory validUser 
				andPassword: objectFactory validPassword.
				
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	
	receipt _ facade 
			checkoutCart: cartId 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory validUser. "Usar algo distinto al user? Dividir owner de user?"
			
	self assert: receipt total equals: objectFactory itemSellByTheStorePrice * 2
	! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 02:50:31' prior: 50885355!
test16

	| cartId receipt |
				
	cartId _ facade 
				newCartForUser: objectFactory validUser 
				andPassword: objectFactory validPassword.
				
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	
	receipt _ facade 
			checkoutCart: cartId 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory validUser. "Usar algo distinto al user? Dividir owner de user?"
			
	
	! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 02:50:44' prior: 50885375!
test16

	| cartId receipt |
				
	cartId _ facade 
				newCartForUser: objectFactory validUser 
				andPassword: objectFactory validPassword.
				
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory validUser.
		
	
	! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 02:53:02' prior: 50885392!
test16

	| cartId |
				
	cartId _ facade 
				newCartForUser: objectFactory validUser 
				andPassword: objectFactory validPassword.
				
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory validUser.
		
	self  should: [facade listCart: cartId] 
		raise: Error - MessageNotUnderstood  
		withMessageText: TusLibrosFacade invalidCartIdErrorDescription 
		
	
	! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 02:53:32' prior: 50885407!
test16

	| cartId |
				
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory validUser.
		
	self  should: [facade listCart: cartId] 
		raise: Error - MessageNotUnderstood  
		withMessageText: TusLibrosFacade invalidCartIdErrorDescription 
		
	
	! !

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:53:49'!
ERROR!
!TusLibrosFacade methodsFor: 'cart management' stamp: 'fr 12/3/2020 02:54:00' prior: 50885255!
listCart: aCartId 
	
	^(self cartSessionForCartId: aCartId) listCart
	! !

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:54:04'!
FAILURE!
!TusLibrosFacade methodsFor: 'checkout' stamp: 'fr 12/3/2020 02:55:27' prior: 50882590!
checkoutCart: aCartId withCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner 
	
	| receipt |
	receipt _ (self cartSessionForCartId: aCartId) 
								checkoutWithCard: aCardNumber 
								expiringOn: anExpirationDate 
								forOwner: aCardOwner 
								through: merchantProcessor 
								registeringOn: salesBook.
	self removeCart: aCartId.
	^receipt
		! !

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:55:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 02:55:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 02:55:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 02:55:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 02:55:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 02:55:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 02:55:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 02:55:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 02:55:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 02:55:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 02:55:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 02:55:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 02:55:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 02:55:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 02:55:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 02:55:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:55:30'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 02:56:01'!
test16CanNotPerformAnyOperationWithACartAfterCheckout

	| cartId |
				
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory validUser.
		
	self  should: [facade listCart: cartId] 
		raise: Error - MessageNotUnderstood  
		withMessageText: TusLibrosFacade invalidCartIdErrorDescription 
		
	
	! !

!methodRemoval: TusLibrosFacadeTest #test16 stamp: 'fr 12/3/2020 02:56:01'!
test16

	| cartId |
				
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory validUser.
		
	self  should: [facade listCart: cartId] 
		raise: Error - MessageNotUnderstood  
		withMessageText: TusLibrosFacade invalidCartIdErrorDescription 
		
	
	!
!CartSession methodsFor: 'cart management' stamp: 'fr 12/3/2020 03:01:42' prior: 50881851!
add: aQuantity of: anItem 

	self cartDoIfNotExpired: [cart add: aQuantity of: anItem]
	
	
	
	
	! !
!CartSession methodsFor: 'cart management' stamp: 'fr 12/3/2020 03:02:11'!
cartDoIfNotExpired: aCartBlock

	
	self assertCartHasNotExpired.
	
	^aCartBlock value! !
!CartSession methodsFor: 'cart management' stamp: 'fr 12/3/2020 03:02:14' prior: 50885574!
cartDoIfNotExpired: aCartBlock

	self assertCartHasNotExpired.
	
	^aCartBlock value! !
!CartSession methodsFor: 'cart management' stamp: 'fr 12/3/2020 03:02:35' prior: 50881858!
checkoutWithCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner through: aMerchantProcessor registeringOn: aSalesBook 
	
	self cartDoIfNotExpired:[(Cashier toCheckout: cart 
	 		charging: (CreditCard expiringOn: anExpirationDate withNumber: aCardNumber ownedBy: aCardOwner) 
			throught: aMerchantProcessor 
			on: facade currentMonth 
			registeringOn: aSalesBook
			for: aCardOwner) checkOut]! !
!CartSession methodsFor: 'cart management' stamp: 'fr 12/3/2020 03:02:49' prior: 50881875!
listCart
		
	self cartDoIfNotExpired: [cart listCart]! !
!CartSession methodsFor: 'cart management' stamp: 'fr 12/3/2020 03:03:03' prior: 50885586!
checkoutWithCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner through: aMerchantProcessor registeringOn: aSalesBook 
	
	self cartDoIfNotExpired:[(Cashier toCheckout: cart 
				 		charging: (CreditCard expiringOn: anExpirationDate withNumber: aCardNumber ownedBy: aCardOwner) 
						throught: aMerchantProcessor 
						on: facade currentMonth 
						registeringOn: aSalesBook
						for: aCardOwner) checkOut
					    ]! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 03:03:47' prior: 50884861!
notas

	"TRANSACTION ID -> EN MERCHANT PROCESSOR O ADMINISTRADO POR FACADE?"
		
	"ACOMODAR EL LIST PURCHASES"
	
	"Despu�s de la expiraci�n de la sesi�n habr�a que borrar el cart -> test para verificar que luego de un timeout el cartId es inv�lido"
		
	"Para borrar el cart sin pasarle el id al cartSession parece ser necesario que las operaciones del protocolo de cart para las que resultan polim�rficos, reciban un bloque que se parametrice con el cart. El cartSession no deber�a conocer su Id y hacer una b�squeda por == con un double dispatch no resulta satisfactorio"
	
	
	"Cambiar validUser por cardOwner"
	
! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 03:03:50' prior: 50885624!
notas

	"TRANSACTION ID -> EN MERCHANT PROCESSOR O ADMINISTRADO POR FACADE?"
		
	"ACOMODAR EL LIST PURCHASES"
	
	"Despu�s de la expiraci�n de la sesi�n habr�a que borrar el cart -> test para verificar que luego de un timeout el cartId es inv�lido"
		
	"Para borrar el cart sin pasarle el id al cartSession parece ser necesario que las operaciones del protocolo de cart para las que resultan polim�rficos, reciban un bloque que se parametrice con el cart. El cartSession no deber�a conocer su Id y hacer una b�squeda por == con un double dispatch no resulta satisfactorio"
	
	"Cambiar validUser por cardOwner"
	
! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 03:04:21' prior: 50885647!
notas

	"TRANSACTION ID -> EN MERCHANT PROCESSOR O ADMINISTRADO POR FACADE?"
		
	"ACOMODAR EL LIST PURCHASES"
	
	"Despu�s de la expiraci�n de la sesi�n habr�a que borrar el cart -> test para verificar que luego de un timeout el cartId es inv�lido"
		
	"Para borrar el cart sin pasarle el id al cartSession parece ser necesario que las operaciones del protocolo de cart para las que resultan polim�rficos, reciban un bloque que se parametrice con el cart. El cartSession no deber�a conocer su Id y hacer una b�squeda por == con un double dispatch no resulta satisfactorio"
	
	"Cambiar validUser por cardOwner"
	
	"Ensure de la actualizaci�n del lastUsed porque podr�a haber una excepci�n"
	
! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 03:05:00'!
ERROR!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 03:05:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 03:05:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 03:05:00'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 03:05:01'!
ERROR!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 03:05:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 03:05:01'!
ERROR!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:05:01'!
ERROR!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 03:05:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 03:05:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 03:05:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 03:05:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 03:05:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 03:05:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 03:05:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 03:05:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 03:05:07'!
ERROR!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 03:05:07'!
ERROR!
!CartSession methodsFor: 'cart management' stamp: 'fr 12/3/2020 03:05:39' prior: 50885602!
listCart
		
	^self cartDoIfNotExpired: [cart listCart]! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 03:05:41'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 03:05:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 03:05:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 03:05:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 03:05:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 03:05:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 03:05:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 03:05:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 03:05:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:05:42'!
ERROR!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 03:05:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 03:05:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 03:05:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 03:05:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 03:05:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 03:05:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 03:05:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 03:05:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:05:42'!
ERROR!
!CartSession methodsFor: 'cart management' stamp: 'fr 12/3/2020 03:06:05' prior: 50885607!
checkoutWithCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner through: aMerchantProcessor registeringOn: aSalesBook 
	
	^self cartDoIfNotExpired:[(Cashier toCheckout: cart 
				 		charging: (CreditCard expiringOn: anExpirationDate withNumber: aCardNumber ownedBy: aCardOwner) 
						throught: aMerchantProcessor 
						on: facade currentMonth 
						registeringOn: aSalesBook
						for: aCardOwner) checkOut
					    ]! !

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:06:07'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 03:06:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 03:06:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 03:06:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 03:06:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 03:06:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 03:06:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 03:06:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 03:06:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:06:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 03:06:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 03:06:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 03:06:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 03:06:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 03:06:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 03:06:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 03:06:08'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 03:06:08'!
PASSED!
!CartSession methodsFor: 'cart management' stamp: 'fr 12/3/2020 03:08:15' prior: 50885757!
listCart
		
	^self cartDoIfNotExpired: [cart listCart]! !
!CartSession methodsFor: 'cart management' stamp: 'fr 12/3/2020 03:08:34' prior: 50885580!
cartDoIfNotExpired: aCartBlock

	[self assertCartHasNotExpired] ensure: [lastUsed _ facade now].
	
	^aCartBlock value! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 03:08:35'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 03:08:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 03:08:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 03:08:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 03:08:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 03:08:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 03:08:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 03:08:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 03:08:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:08:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 03:08:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 03:08:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 03:08:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 03:08:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 03:08:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 03:08:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 03:08:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 03:08:36'!
PASSED!
!CartSession methodsFor: 'cart management' stamp: 'fr 12/3/2020 03:10:19' prior: 50885914!
cartDoIfNotExpired: aCartBlock

	self assertCartHasNotExpired.
	
	^aCartBlock ensure: [lastUsed _ facade now]! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 03:10:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 03:10:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 03:10:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 03:10:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 03:10:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 03:10:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 03:10:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:10:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 03:10:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 03:10:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 03:10:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 03:10:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 03:10:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 03:10:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 03:10:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 03:10:23'!
PASSED!
!Clock methodsFor: 'initialization' stamp: 'fr 12/3/2020 03:10:59' prior: 50884482!
initializeFor: aTimePoint 
	
	now _ aTimePoint.! !

!methodRemoval: Clock #initializeNewClock stamp: 'fr 12/3/2020 03:11:05'!
initializeNewClock
	
	offset _ 0 seconds!

!methodRemoval: Clock class #newClock stamp: 'fr 12/3/2020 03:11:08'!
newClock
	
	^self new initializeNewClock!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 03:11:34'!
PASSED!

----SNAPSHOT----(3 December 2020 03:11:37) CuisUniversity-4384.image priorSource: 17717237!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 03:12:04' prior: 50885669!
notas

	"TRANSACTION ID -> EN MERCHANT PROCESSOR O ADMINISTRADO POR FACADE?"
		
	"ACOMODAR EL LIST PURCHASES"
	
	"Despu�s de la expiraci�n de la sesi�n habr�a que borrar el cart -> test para verificar que luego de un timeout el cartId es inv�lido"
		
	"Para borrar el cart sin pasarle el id al cartSession parece ser necesario que las operaciones del protocolo de cart para las que resultan polim�rficos, reciban un bloque que se parametrice con el cart. El cartSession no deber�a conocer su Id y hacer una b�squeda por == con un double dispatch no resulta satisfactorio"
	
	"Cambiar validUser por cardOwner"
		
! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 03:12:37' prior: 50875625!
test08CanCheckoutAValidCart

	| cartId transactionId |
				
	cartId _ facade 
				newCartForUser: objectFactory validUser 
				andPassword: objectFactory validPassword.
				
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	
	transactionId _ facade 
			checkoutCart: cartId 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory validUser. "Usar algo distinto al user? Dividir owner de user?"
			
	self assert: transactionId total equals: objectFactory itemSellByTheStorePrice * 2
	! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 03:12:50' prior: 50886187!
test08CanCheckoutAValidCart

	| cartId transactionId |
				
	cartId _ facade 
				newCartForUser: objectFactory validUser 
				andPassword: objectFactory validPassword.
				
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	
	transactionId _ facade 
			checkoutCart: cartId 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory validUser.
			
	self assert: transactionId total equals: objectFactory itemSellByTheStorePrice * 2
	! !

!classDefinition: #TusLibrosFacadeTest category: 'TusLibros - Exercise - III' stamp: 'fr 12/3/2020 03:13:12'!
TestCase subclass: #TusLibrosFacadeTest
	instanceVariableNames: 'facade objectFactory salesBook clock credentialds merchantProcessorTransactionId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 03:13:10' prior: 50886208!
test08CanCheckoutAValidCart

	| cartId transactionId |
				
	cartId _ facade 
				newCartForUser: objectFactory validUser 
				andPassword: objectFactory validPassword.
				
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	
	transactionId _ facade 
			checkoutCart: cartId 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory validUser.
			
	self assert: transactionId equals: merchantProcessorTransactionId
	! !

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:14:32'!
FAILURE!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 03:14:53' prior: 50886238!
test08CanCheckoutAValidCart

	| cartId transactionId |
	merchantProcessorTransactionId _ 55.
	cartId _ facade 
				newCartForUser: objectFactory validUser 
				andPassword: objectFactory validPassword.
				
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	
	transactionId _ facade 
			checkoutCart: cartId 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory validUser.
			
	self assert: transactionId equals: merchantProcessorTransactionId
	! !
!TusLibrosFacade methodsFor: 'checkout' stamp: 'fr 12/3/2020 03:15:23' prior: 50885457!
checkoutCart: aCartId withCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner 
	
	| transactionId |
	transactionId _ (self cartSessionForCartId: aCartId) 
								checkoutWithCard: aCardNumber 
								expiringOn: anExpirationDate 
								forOwner: aCardOwner 
								through: merchantProcessor 
								registeringOn: salesBook.
	self removeCart: aCartId.
	^transactionId
		! !

facade!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:16:01'!
FAILURE!
!Cashier class methodsFor: 'instance creation' stamp: 'fr 12/3/2020 03:17:36' prior: 50873702!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook for: aCustomer 
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook for: aCustomer ! !
!Cashier methodsFor: 'initialization' stamp: 'fr 12/3/2020 03:17:55' prior: 50872595!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook for: aCustomer 
	
	cart _ aCart.
	creditCard _ aCreditCard.
	merchantProcessor _ aMerchantProcessor.
	salesBook _ aSalesBook.
	customer _ aCustomer.! !
!Cashier methodsFor: 'checkout' stamp: 'fr 12/3/2020 03:18:55' prior: 50874288!
checkOut

	self debitTotal.
	self createReceipt.
	self registerSale.

	^ receipt! !

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:18:56'!
ERROR!
!Cashier methodsFor: 'checkout - private' stamp: 'fr 12/3/2020 03:19:05' prior: 50873421!
debitTotal

	merchantProcessor debit: cart total from: creditCard.
	! !

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:19:07'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'fr 12/3/2020 03:20:20' prior: 50886324!
checkOut

	| transactionId |
	transactionId _ self debitTotal.
	self createReceiptWith: transactionId.
	self registerSale.

	^ receipt! !

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:21:45'!
ERROR!
!Cashier methodsFor: 'checkout - private' stamp: 'fr 12/3/2020 03:22:01'!
createReceiptWith: aCashier 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checkout - private' stamp: 'fr 12/3/2020 03:22:24' prior: 50886351!
createReceiptWith: aCashier 
	
	| ticketEntries |
	ticketEntries _ OrderedCollection new.
	self collectReceiptEntriesInto: ticketEntries.
	receipt _ SaleReceipt for: ticketEntries customer: customer ! !
!Cashier methodsFor: 'checkout - private' stamp: 'fr 12/3/2020 03:22:28' prior: 50886356!
createReceiptWith: aTransactionId 
	
	| ticketEntries |
	ticketEntries _ OrderedCollection new.
	self collectReceiptEntriesInto: ticketEntries.
	receipt _ SaleReceipt for: ticketEntries customer: customer ! !
!Cashier methodsFor: 'checkout - private' stamp: 'fr 12/3/2020 03:23:20' prior: 50886366!
createReceiptWith: aTransactionId 
	
	| ticketEntries |
	ticketEntries _ OrderedCollection new.
	self collectReceiptEntriesInto: ticketEntries.
	receipt _ SaleReceipt for: customer containing: ticketEntries withId: aTransactionId ! !

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:23:25'!
ERROR!
!SaleReceipt class methodsFor: 'instance creation' stamp: 'fr 12/3/2020 03:23:33'!
for: aString containing: anOrderedCollection withId: aCashier 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aString containing: anOrderedCollection withId: aCashier ! !
!SaleReceipt class methodsFor: 'instance creation' stamp: 'fr 12/3/2020 03:23:37' prior: 50886390!
for: aString containing: anOrderedCollection withId: aCashier 
	
	^self new initializeFor: aString containing: anOrderedCollection withId: aCashier ! !
!SaleReceipt class methodsFor: 'instance creation' stamp: 'fr 12/3/2020 03:24:09' prior: 50886401!
for: aSalesReceiptEntriesList containing: anOrderedCollection withId: aCashier 
	
	^self new initializeFor: aSalesReceiptEntriesList containing: anOrderedCollection withId: aCashier ! !
!SaleReceipt class methodsFor: 'instance creation' stamp: 'fr 12/3/2020 03:24:16' prior: 50886409!
for: aCustomer containing: anOrderedCollection withId: aCashier 
	
	^self new initializeFor: aCustomer containing: anOrderedCollection withId: aCashier ! !
!SaleReceipt class methodsFor: 'instance creation' stamp: 'fr 12/3/2020 03:24:19' prior: 50886418!
for: aCustomer containing: aSalesReceiptEntriesList withId: aCashier 
	
	^self new initializeFor: aCustomer containing: aSalesReceiptEntriesList withId: aCashier ! !
!SaleReceipt class methodsFor: 'instance creation' stamp: 'fr 12/3/2020 03:24:26' prior: 50886426!
for: aCustomer containing: aSalesReceiptEntriesList withId: aTransactionId 
	
	^self new initializeFor: aCustomer containing: aSalesReceiptEntriesList withId: aTransactionId ! !

!classDefinition: #CartSession category: 'TusLibros - Exercise - III' stamp: 'fr 12/3/2020 03:29:58'!
Object subclass: #CartSession
	instanceVariableNames: 'cart facade lastUsed username'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!CartSession methodsFor: 'cart management' stamp: 'fr 12/3/2020 03:29:56' prior: 50885829!
checkoutWithCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner through: aMerchantProcessor registeringOn: aSalesBook 
	
	^self cartDoIfNotExpired:[(Cashier toCheckout: cart 
				 		charging: (CreditCard expiringOn: anExpirationDate withNumber: aCardNumber ownedBy: aCardOwner) 
						throught: aMerchantProcessor 
						on: facade currentMonth 
						registeringOn: aSalesBook
						for: username) checkOut
					    ]! !
!TusLibrosFacade methodsFor: 'cart management' stamp: 'fr 12/3/2020 03:32:05' prior: 50883697!
newCartForUser: aUsername andPassword: aPassword 
	
	authenticator validateUsername: aUsername andPassword: aPassword.
	self updateId.
	cartsSessions add: currentId -> (self newCartSessionFor: aUsername).
	^currentId ! !

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:32:14'!
ERROR!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 03:32:19'!
newCartSessionFor: aString 
	self shouldBeImplemented.! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 03:32:31' prior: 50886483!
newCartSessionFor: aUsername 
	
	^ CartSession for: self newCart on: self user: aUsername! !

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:32:34'!
ERROR!
!CartSession class methodsFor: 'instance creation' stamp: 'fr 12/3/2020 03:32:39'!
for: aCart on: aTusLibrosFacade user: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aCart on: aTusLibrosFacade user: aString ! !
!CartSession class methodsFor: 'instance creation' stamp: 'fr 12/3/2020 03:32:43' prior: 50886497!
for: aCart on: aTusLibrosFacade user: aString 
	
	^self new initializeFor: aCart on: aTusLibrosFacade user: aString ! !
!CartSession class methodsFor: 'instance creation' stamp: 'fr 12/3/2020 03:32:48' prior: 50886507!
for: aCart on: aFacade user: aString 
	
	^self new initializeFor: aCart on: aFacade user: aString ! !
!CartSession class methodsFor: 'instance creation' stamp: 'fr 12/3/2020 03:32:52' prior: 50886514!
for: aCart on: aFacade user: aUsername 
	
	^self new initializeFor: aCart on: aFacade user: aUsername ! !

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:32:54'!
ERROR!
!CartSession methodsFor: 'initialization' stamp: 'fr 12/3/2020 03:33:01'!
initializeFor: aCart on: aFacade user: aUsername 
	self shouldBeImplemented.
	cart := aCart.
	facade := aFacade.
	username := aUsername.! !
!CartSession methodsFor: 'initialization' stamp: 'fr 12/3/2020 03:33:21' prior: 50886530!
initializeFor: aCart on: aFacade user: aUsername 
	
	cart _ aCart.
	facade _ aFacade.
	username _ aUsername.
	lastUsed _ facade now! !

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:33:26'!
ERROR!

username!

aCardOwner!
!TusLibrosFacadeTest methodsFor: 'merchant processor' stamp: 'fr 12/3/2020 03:34:33' prior: 50871111!
debit: anAmount from: aCreditCard 
	
	^merchantProcessorTransactionId ! !

transactionId!

transactionId!

transactionId!
!Cashier methodsFor: 'checkout - private' stamp: 'fr 12/3/2020 03:35:06' prior: 50886333!
debitTotal

	^merchantProcessor debit: cart total from: creditCard.
	! !

transactionId!

transactionId!

!classDefinition: #SaleReceipt category: 'TusLibros - Exercise - III' stamp: 'fr 12/3/2020 03:35:51'!
Object subclass: #SaleReceipt
	instanceVariableNames: 'receiptEntries salesReceiptEntriesList customer transactionId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!SaleReceipt methodsFor: 'initialization' stamp: 'fr 12/3/2020 03:35:51'!
initializeFor: aCustomer containing: aSalesReceiptEntriesList withId: aTransactionId 
	self shouldBeImplemented.
	customer := aCustomer.
	salesReceiptEntriesList := aSalesReceiptEntriesList.
	transactionId := aTransactionId.! !
!SaleReceipt methodsFor: 'initialization' stamp: 'fr 12/3/2020 03:36:00' prior: 50886573!
initializeFor: aCustomer containing: aSalesReceiptEntriesList withId: aTransactionId 
	
	customer _ aCustomer.
	salesReceiptEntriesList _ aSalesReceiptEntriesList.
	transactionId _ aTransactionId.! !

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:36:06'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 03:36:12'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 03:36:12'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 03:36:12'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 03:36:12'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 03:36:12'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 03:36:12'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 03:36:12'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 03:36:12'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 03:36:12'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 03:36:12'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 03:36:12'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 03:36:12'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 03:36:12'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 03:36:12'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 03:36:12'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 03:36:12'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 03:36:12'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 03:36:12'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 03:36:12'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 03:36:12'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 03:36:12'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:36:12'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 03:36:12'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 03:36:12'!
ERROR!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 03:36:12'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 03:36:12'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 03:36:12'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 03:36:12'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 03:36:12'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 03:36:12'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:36:40'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:36:40'!
FAILURE!
!CartSession methodsFor: 'cart management' stamp: 'fr 12/3/2020 03:37:20' prior: 50886453!
checkoutWithCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner through: aMerchantProcessor registeringOn: aSalesBook 
	
	^self cartDoIfNotExpired:[(Cashier toCheckout: cart 
				 		charging: (CreditCard expiringOn: anExpirationDate withNumber: aCardNumber ownedBy: aCardOwner) 
						throught: aMerchantProcessor 
						on: facade currentMonth 
						registeringOn: aSalesBook
						for: username) checkOut transactionId
					    ]! !

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:37:21'!
ERROR!
!SaleReceipt methodsFor: 'accessing' stamp: 'fr 12/3/2020 03:37:28'!
transactionId
	self shouldBeImplemented.
	^transactionId! !
!SaleReceipt methodsFor: 'accessing' stamp: 'fr 12/3/2020 03:37:29' prior: 50886724!
transactionId
	
	^transactionId! !

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:37:30'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:37:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 03:37:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 03:37:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 03:37:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 03:37:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 03:37:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 03:37:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 03:37:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:37:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 03:37:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 03:37:32'!
ERROR!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 03:37:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 03:37:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 03:37:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 03:37:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 03:37:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 03:37:32'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 03:37:32'!
ERROR!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 03:37:44'!
ERROR!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 03:37:44'!
ERROR!

receiptEntries!

facade!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 03:40:47'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 03:40:47'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 03:40:47'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 03:40:47'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 03:40:47'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 03:40:47'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 03:40:47'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 03:40:47'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 03:40:47'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 03:40:47'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 03:40:47'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 03:40:47'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 03:40:47'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 03:40:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 03:40:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 03:40:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 03:40:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 03:40:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 03:40:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 03:40:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 03:40:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:40:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 03:40:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 03:40:47'!
ERROR!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 03:40:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 03:40:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 03:40:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 03:40:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 03:40:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 03:40:47'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 03:40:50'!
ERROR!

cashier checkOut!

cashier checkOut total!

receiptEntries!
!Cashier methodsFor: 'checkout - private' stamp: 'fr 12/3/2020 03:42:57' prior: 50886376!
createReceiptWith: aTransactionId 
	
	| receiptEntries |
	receiptEntries _ OrderedCollection new.
	self collectReceiptEntriesInto: receiptEntries.
	receipt _ SaleReceipt for: customer containing: receiptEntries withId: aTransactionId ! !

receiptEntries!

self first !

self first!
!SaleReceipt methodsFor: 'initialization' stamp: 'fr 12/3/2020 03:43:46' prior: 50886583!
initializeFor: aCustomer containing: aSalesReceiptEntriesList withId: aTransactionId 
	
	customer _ aCustomer.
	receiptEntries _ aSalesReceiptEntriesList.
	transactionId _ aTransactionId.! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 03:43:49'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 03:43:49'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 03:43:49'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 03:43:49'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 03:43:49'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 03:43:49'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 03:43:49'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 03:43:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 03:43:53'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 03:43:53'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 03:43:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 03:43:53'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 03:43:53'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 03:43:53'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 03:43:53'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 03:43:53'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 03:43:53'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 03:43:53'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 03:43:53'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 03:43:53'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 03:43:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 03:43:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 03:43:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 03:43:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 03:43:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 03:43:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 03:43:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 03:43:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:43:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 03:43:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 03:43:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 03:43:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 03:43:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 03:43:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 03:43:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 03:43:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 03:43:53'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 03:45:01' prior: 50886164!
notas

	"TRANSACTION ID -> EN MERCHANT PROCESSOR O ADMINISTRADO POR FACADE? => QUED� EN MERCHANT"
		
	"ACOMODAR EL LIST PURCHASES"
	
	"Despu�s de la expiraci�n de la sesi�n habr�a que borrar el cart -> test para verificar que luego de un timeout el cartId es inv�lido"
		
	"Para borrar el cart sin pasarle el id al cartSession parece ser necesario que las operaciones del protocolo de cart para las que resultan polim�rficos, reciban un bloque que se parametrice con el cart. El cartSession no deber�a conocer su Id y hacer una b�squeda por == con un double dispatch no resulta satisfactorio"
	
	"Cambiar validUser por cardOwner"
		
! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 03:45:24' prior: 50887059!
notas

	"TRANSACTION ID -> EN MERCHANT PROCESSOR O ADMINISTRADO POR FACADE? => QUED� EN MERCHANT"
		
	"ACOMODAR EL LIST PURCHASES"
	
	"Despu�s de la expiraci�n de la sesi�n habr�a que borrar el cart -> test para verificar que luego de un timeout el cartId es inv�lido"
		
	"Para borrar el cart sin pasarle el id al cartSession parece ser necesario que las operaciones del protocolo de cart para las que resultan polim�rficos, reciban un bloque que se parametrice con el cart. El cartSession no deber�a conocer su Id y hacer una b�squeda por == con un double dispatch no resulta satisfactorio"
	
	"Cambiar validUser por cardOwner => LISTO EN M�TODOS QUEDA CAMBIAR EN TESTS"
		
! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 03:45:40' prior: 50886260!
test08CanCheckoutAValidCart

	| cartId transactionId |
	merchantProcessorTransactionId _ 55.
	cartId _ facade 
				newCartForUser: objectFactory validUser 
				andPassword: objectFactory validPassword.
				
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	
	transactionId _ facade 
			checkoutCart: cartId 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory cardOwner.
			
	self assert: transactionId equals: merchantProcessorTransactionId
	! !

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:45:42'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 03:45:47'!
cardOwner
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 03:45:57' prior: 50887130!
cardOwner
	
	^'Federico Rosende'! !

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:45:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 03:45:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 03:45:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 03:45:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 03:45:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 03:45:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 03:45:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 03:45:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:45:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 03:45:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 03:45:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 03:45:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 03:45:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 03:45:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 03:45:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 03:45:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 03:45:59'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 03:46:09' prior: 50881520!
test09CanNotCheckoutANonexistentCart
				
	self should: [facade 
			checkoutCart: 1 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory cardOwner.] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
							self assert: anError messageText equals: TusLibrosFacade invalidCartIdErrorDescription.
							self assert: salesBook isEmpty
			]
	! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 03:46:21' prior: 50882942!
test15CanNotCheckoutAnExpiredCart

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId.
	clock advanceHalfAnHour.
	self  should: [facade 
			checkoutCart: cartId 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory cardOwner]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |  
			self assert: anError messageText equals: TusLibrosFacade cartExpiredErrorDescription.
			self assert: (facade listPurchasesOfUser: objectFactory validUser withPassword: objectFactory validPassword) first isEmpty
			]
	
	
	
	
	! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 03:46:26' prior: 50885529!
test16CanNotPerformAnyOperationWithACartAfterCheckout

	| cartId |
				
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory cardOwner.
		
	self  should: [facade listCart: cartId] 
		raise: Error - MessageNotUnderstood  
		withMessageText: TusLibrosFacade invalidCartIdErrorDescription 
		
	
	! !

----SNAPSHOT----(3 December 2020 03:47:40) CuisUniversity-4384.image priorSource: 17744327!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 03:47:51' prior: 50887082!
notas
		
	"ACOMODAR EL LIST PURCHASES"
	
	"Despu�s de la expiraci�n de la sesi�n habr�a que borrar el cart -> test para verificar que luego de un timeout el cartId es inv�lido"
		
	"Para borrar el cart sin pasarle el id al cartSession parece ser necesario que las operaciones del protocolo de cart para las que resultan polim�rficos, reciban un bloque que se parametrice con el cart. El cartSession no deber�a conocer su Id y hacer una b�squeda por == con un double dispatch no resulta satisfactorio"
	
	"Cambiar validUser por cardOwner => LISTO EN M�TODOS QUEDA CAMBIAR EN TESTS"
		
! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 03:47:58' prior: 50887266!
notas
		
	"ACOMODAR EL LIST PURCHASES"
	
	"Despu�s de la expiraci�n de la sesi�n habr�a que borrar el cart -> test para verificar que luego de un timeout el cartId es inv�lido"
		
	"Para borrar el cart sin pasarle el id al cartSession parece ser necesario que las operaciones del protocolo de cart para las que resultan polim�rficos, reciban un bloque que se parametrice con el cart. El cartSession no deber�a conocer su Id y hacer una b�squeda por == con un double dispatch no resulta satisfactorio"
			
! !

!classDefinition: #CartSession category: 'TusLibros - Exercise - III' stamp: 'fr 12/3/2020 03:48:18'!
Object subclass: #CartSession
	instanceVariableNames: 'cart facade lastUsed user'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!CartSession methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 03:48:18' prior: 50886704!
checkoutWithCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner through: aMerchantProcessor registeringOn: aSalesBook 
	
	^self cartDoIfNotExpired:[(Cashier toCheckout: cart 
				 		charging: (CreditCard expiringOn: anExpirationDate withNumber: aCardNumber ownedBy: aCardOwner) 
						throught: aMerchantProcessor 
						on: facade currentMonth 
						registeringOn: aSalesBook
						for: user) checkOut transactionId
					    ]! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 03:48:18' prior: 50886538!
initializeFor: aCart on: aFacade user: aUsername 
	
	cart _ aCart.
	facade _ aFacade.
	user _ aUsername.
	lastUsed _ facade now! !

Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard receipt customer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!

!classDefinition: #Cashier category: 'TusLibros - Exercise - III' stamp: 'fr 12/3/2020 03:48:34'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard receipt customer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!

Object subclass: #Clock
	instanceVariableNames: 'now'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!

!classDefinition: #Clock category: 'TusLibros - Exercise - III' stamp: 'fr 12/3/2020 03:49:21'!
Object subclass: #Clock
	instanceVariableNames: 'now'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!

Object subclass: #CreditCard
	instanceVariableNames: 'expiration number owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!

!classDefinition: #CreditCard category: 'TusLibros - Exercise - III' stamp: 'fr 12/3/2020 03:49:28'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!

Object subclass: #Sale
	instanceVariableNames: 'receipt'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!

!classDefinition: #Sale category: 'TusLibros - Exercise - III' stamp: 'fr 12/3/2020 03:49:55'!
Object subclass: #Sale
	instanceVariableNames: 'receipt'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!

Object subclass: #SaleReceipt
	instanceVariableNames: 'receiptEntries customer transactionId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!

!classDefinition: #SaleReceipt category: 'TusLibros - Exercise - III' stamp: 'fr 12/3/2020 03:50:05'!
Object subclass: #SaleReceipt
	instanceVariableNames: 'receiptEntries customer transactionId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!

!classDefinition: #TusLibrosFacadeTest category: 'TusLibros - Exercise - III' stamp: 'fr 12/3/2020 03:50:37'!
TestCase subclass: #TusLibrosFacadeTest
	instanceVariableNames: 'facade objectFactory salesBook clock credentials merchantProcessorTransactionId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 03:50:37' prior: 50883308!
validateUsername: aUsername andPassword: aPassword 
	
	(credentials at: aUsername ifAbsent: [self error: TusLibrosFacade invalidCredentialsErrorDescription]) = aPassword ifFalse: [self error: TusLibrosFacade invalidCredentialsErrorDescription].
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 03:50:37' prior: 50884744 overrides: 16927572!
setUp
	
	objectFactory _ StoreTestObjectsFactory new.
	
	credentials _ objectFactory defaultCredentials.
	salesBook _ objectFactory defaultSalesBook.
	clock _ objectFactory defaultClock.
	
	facade _ facade _ TusLibrosFacade 
			acceptingItemsOf: objectFactory defaultCatalog 
			validatingUsersThrough: self 
			registeringSalesOn: salesBook
			chargingThrough: self
			withClock: clock.
! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 03:51:05' prior: 50887107!
test08CanCheckoutAValidCart

	| cartId transactionId |
	merchantProcessorTransactionId _ 55.
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
				
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	
	transactionId _ facade 
			checkoutCart: cartId 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory cardOwner.
			
	self assert: transactionId equals: merchantProcessorTransactionId
	! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 03:51:14' prior: 50887447!
test08CanCheckoutAValidCart

	| cartId transactionId |
	merchantProcessorTransactionId _ 55.
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	
	transactionId _ facade 
			checkoutCart: cartId 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory cardOwner.
			
	self assert: transactionId equals: merchantProcessorTransactionId
	! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 03:51:18' prior: 50887466!
test08CanCheckoutAValidCart

	| cartId transactionId |
	merchantProcessorTransactionId _ 55.
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	transactionId _ facade 
			checkoutCart: cartId 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory cardOwner.
			
	self assert: transactionId equals: merchantProcessorTransactionId
	! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 03:51:21' prior: 50887485!
test08CanCheckoutAValidCart

	| cartId transactionId |
	merchantProcessorTransactionId _ 55.
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	transactionId _ facade 
			checkoutCart: cartId 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory cardOwner.	
	self assert: transactionId equals: merchantProcessorTransactionId
	! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 03:51:24' prior: 50887504!
test08CanCheckoutAValidCart

	| cartId transactionId |
	merchantProcessorTransactionId _ 55.
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	transactionId _ facade 
			checkoutCart: cartId 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory cardOwner.
				
	self assert: transactionId equals: merchantProcessorTransactionId
	! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 03:51:58' prior: 50887288!
notas
		
	"ACOMODAR EL LIST PURCHASES"
	
	"Despu�s de la expiraci�n de la sesi�n habr�a que borrar el cart -> test para verificar que luego de un timeout el cartId es inv�lido"
			
! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 03:52:31' prior: 50887542!
notas
		
	"ACOMODAR EL LIST PURCHASES"
	
	"Despu�s de la expiraci�n de la sesi�n habr�a que borrar el cart -> test para verificar que luego de un timeout el cartId es inv�lido => Paso bloque que se ejecute si la condici�n de expiraci�n es verdadera"
	
	"Acomodar categor�as y sacar c�digo repetido"
			
! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 03:52:54' prior: 50887551!
notas
		
	"ACOMODAR EL LIST PURCHASES"
	
	"Despu�s de la expiraci�n de la sesi�n habr�a que borrar el cart -> test para verificar que luego de un timeout el cartId es inv�lido => Paso bloque que se ejecute si la condici�n de expiraci�n es verdadera"
	
	"Acomodar categor�as y sacar c�digo repetido de los tests"
			
! !
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 03:54:41' prior: 50883037!
listPurchasesForCustomer: aUsername

	^ {((self itemsWithCountsForCustomer: aUsername) 
									inject: Bag new 
									into: [:totalItemsWithCounts :itemsWithCounts | 
											totalItemsWithCounts addAll: itemsWithCounts. totalItemsWithCounts
									]) contents. (self salesForCustomer: aUsername) sum: [:aSale | aSale total] ifEmpty: [0]}! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 03:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 03:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 03:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 03:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 03:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 03:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 03:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 03:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 03:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 03:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 03:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 03:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 03:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 03:54:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 03:54:42'!
PASSED!
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 03:55:00' prior: 50887577!
listPurchasesForCustomer: aUsername

	^ {(((self salesForCustomer: aUsername) collect: [:aSale | aSale itemsWithCounts]) 
									inject: Bag new 
									into: [:totalItemsWithCounts :itemsWithCounts | 
											totalItemsWithCounts addAll: itemsWithCounts. totalItemsWithCounts
									]) contents. (self salesForCustomer: aUsername) sum: [:aSale | aSale total] ifEmpty: [0]}! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 03:55:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 03:55:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 03:55:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 03:55:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 03:55:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 03:55:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 03:55:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:55:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 03:55:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 03:55:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 03:55:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 03:55:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 03:55:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 03:55:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 03:55:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 03:55:01'!
PASSED!
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 03:56:22' prior: 50887648!
listPurchasesForCustomer: aUsername

	| salesForCustomer |
	salesForCustomer _ self salesForCustomer: aUsername.

	^ {(((salesForCustomer) collect: [:aSale | aSale itemsWithCounts]) 
									inject: Bag new 
									into: [:totalItemsWithCounts :itemsWithCounts | 
											totalItemsWithCounts addAll: itemsWithCounts. totalItemsWithCounts
									]) contents. (salesForCustomer) sum: [:aSale | aSale total] ifEmpty: [0]}! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 03:56:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 03:56:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 03:56:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 03:56:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 03:56:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 03:56:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 03:56:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 03:56:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 03:56:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 03:56:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 03:56:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 03:56:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 03:56:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 03:56:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 03:56:24'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 03:56:24'!
PASSED!
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 03:56:55' prior: 50887720!
listPurchasesForCustomer: aUsername

	| salesForCustomer |
	salesForCustomer _ self salesForCustomer: aUsername.

	^ {( ( (salesForCustomer) collect: [:aSale | aSale itemsWithCounts]) 
									inject: Bag new 
									into: [:totalItemsWithCounts :itemsWithCounts | 
											totalItemsWithCounts addAll: itemsWithCounts. totalItemsWithCounts
									]) contents. (salesForCustomer) sum: [:aSale | aSale total] ifEmpty: [0]}! !
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 03:57:39'!
itemsWithCountsFor: salesForCustomer

	^ (salesForCustomer) collect: [:aSale | aSale itemsWithCounts]! !
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 03:57:39' prior: 50887793!
listPurchasesForCustomer: aUsername

	| salesForCustomer |
	salesForCustomer _ self salesForCustomer: aUsername.

	^ {( ( self itemsWithCountsFor: salesForCustomer) 
									inject: Bag new 
									into: [:totalItemsWithCounts :itemsWithCounts | 
											totalItemsWithCounts addAll: itemsWithCounts. totalItemsWithCounts
									]) contents. (salesForCustomer) sum: [:aSale | aSale total] ifEmpty: [0]}! !
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 03:58:58' prior: 50887817!
listPurchasesForCustomer: aUsername

	| salesForCustomer |
	salesForCustomer _ self salesForCustomer: aUsername.

	^ {( ( self itemsWithCountsFor: salesForCustomer) inject: Bag new into: [:totalItemsWithCounts :itemsWithCounts | totalItemsWithCounts addAll: itemsWithCounts. totalItemsWithCounts]) contents. (salesForCustomer) sum: [:aSale | aSale total] ifEmpty: [0]}! !
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 03:59:40' prior: 50887833!
listPurchasesForCustomer: aUsername

	| salesForCustomer |
	salesForCustomer _ self salesForCustomer: aUsername.

	^ {( self totalItemsWithCountsFor: salesForCustomer) contents. (salesForCustomer) sum: [:aSale | aSale total] ifEmpty: [0]}! !
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 03:59:46' prior: 50887848!
listPurchasesForCustomer: aUsername

	| salesForCustomer |
	salesForCustomer _ self salesForCustomer: aUsername.

	^ {(self totalItemsWithCountsFor: salesForCustomer) contents. (salesForCustomer) sum: [:aSale | aSale total] ifEmpty: [0]}! !
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 04:00:08'!
totalItemsWithCountsFor: salesForCustomer

	^(self itemsWithCountsFor: salesForCustomer) inject: Bag new into: [:totalItemsWithCounts :itemsWithCounts | totalItemsWithCounts addAll: itemsWithCounts. totalItemsWithCounts]! !

!methodRemoval: TusLibrosFacade #totalItemsWithCountsForCustomer: stamp: 'fr 12/3/2020 04:00:51'!
totalItemsWithCountsForCustomer: aUsername

	^ (self itemsWithCountsForCustomer: aUsername) 
									inject: Bag new 
									into: [:totalItemsWithCounts :itemsWithCounts | 
											totalItemsWithCounts addAll: itemsWithCounts. totalItemsWithCounts
									]!

!methodRemoval: TusLibrosFacade #itemsWithCountsForCustomer: stamp: 'fr 12/3/2020 04:00:57'!
itemsWithCountsForCustomer: aUsername

	^ (self salesForCustomer: aUsername) collect: [:aSale | aSale itemsWithCounts]!
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 04:01:40'!
itemsWithCountsForEachSale: salesForCustomer

	^ (salesForCustomer) collect: [:aSale | aSale itemsWithCounts]! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 04:01:40' prior: 50887870!
totalItemsWithCountsFor: salesForCustomer

	^(self itemsWithCountsForEachSale: salesForCustomer) inject: Bag new into: [:totalItemsWithCounts :itemsWithCounts | totalItemsWithCounts addAll: itemsWithCounts. totalItemsWithCounts]! !

!methodRemoval: TusLibrosFacade #itemsWithCountsFor: stamp: 'fr 12/3/2020 04:01:40'!
itemsWithCountsFor: salesForCustomer

	^ (salesForCustomer) collect: [:aSale | aSale itemsWithCounts]!
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 04:02:31'!
itemsWithCountsForAllSalesCombined: salesForCustomer

	^(self itemsWithCountsForEachSale: salesForCustomer) inject: Bag new into: [:totalItemsWithCounts :itemsWithCounts | totalItemsWithCounts addAll: itemsWithCounts. totalItemsWithCounts]! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 04:02:31' prior: 50887859!
listPurchasesForCustomer: aUsername

	| salesForCustomer |
	salesForCustomer _ self salesForCustomer: aUsername.

	^ {(self itemsWithCountsForAllSalesCombined: salesForCustomer) contents. (salesForCustomer) sum: [:aSale | aSale total] ifEmpty: [0]}! !

!methodRemoval: TusLibrosFacade #totalItemsWithCountsFor: stamp: 'fr 12/3/2020 04:02:31'!
totalItemsWithCountsFor: salesForCustomer

	^(self itemsWithCountsForEachSale: salesForCustomer) inject: Bag new into: [:totalItemsWithCounts :itemsWithCounts | totalItemsWithCounts addAll: itemsWithCounts. totalItemsWithCounts]!
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 04:03:18'!
itemsWithCounts: salesForCustomer

	^ (self itemsWithCountsForAllSalesCombined: salesForCustomer) contents! !
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 04:03:18' prior: 50887932!
listPurchasesForCustomer: aUsername

	| salesForCustomer |
	salesForCustomer _ self salesForCustomer: aUsername.

	^ {self itemsWithCounts: salesForCustomer. (salesForCustomer) sum: [:aSale | aSale total] ifEmpty: [0]}! !
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 04:03:48'!
totalFor: salesForCustomer

	^ (salesForCustomer) sum: [:aSale | aSale total] ifEmpty: [0]! !
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 04:03:48' prior: 50887960!
listPurchasesForCustomer: aUsername

	| salesForCustomer |
	salesForCustomer _ self salesForCustomer: aUsername.

	^ {self itemsWithCounts: salesForCustomer. self totalFor: salesForCustomer}! !
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 04:15:50'!
itemsWithCountsFor: salesForCustomer

	^ (self itemsWithCountsForAllSalesCombined: salesForCustomer) contents! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 04:15:50' prior: 50887976!
listPurchasesForCustomer: aUsername

	| salesForCustomer |
	salesForCustomer _ self salesForCustomer: aUsername.

	^ {self itemsWithCountsFor: salesForCustomer. self totalFor: salesForCustomer}! !

!methodRemoval: TusLibrosFacade #itemsWithCounts: stamp: 'fr 12/3/2020 04:15:50'!
itemsWithCounts: salesForCustomer

	^ (self itemsWithCountsForAllSalesCombined: salesForCustomer) contents!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 04:17:11' prior: 50887564!
notas
			
	"Despu�s de la expiraci�n de la sesi�n habr�a que borrar el cart -> test para verificar que luego de un timeout el cartId es inv�lido => Paso bloque que se ejecute si la condici�n de expiraci�n es verdadera"
	
	"Acomodar categor�as y sacar c�digo repetido de los tests"
			
! !

----SNAPSHOT----(3 December 2020 04:17:31) CuisUniversity-4384.image priorSource: 17779563!

{1. 2. 5. 8. 6. 4. 3} select: [:num | num even. num*2] !

{1. 2. 5. 8. 6. 4. 3} select: [:num | num even]  !
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 04:26:45' prior: 50887921!
itemsWithCountsForAllSalesCombined: salesForCustomer

	^salesForCustomer inject: Bag new into: [:aSale :totalItemsWithCounts | | itemsWithCounts | itemsWithCounts _ aSale itemsWithCounts addAll: totalItemsWithCounts. itemsWithCounts]! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 04:26:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 04:26:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 04:26:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 04:26:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 04:26:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 04:26:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 04:26:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 04:26:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 04:26:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 04:26:46'!
ERROR!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 04:26:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 04:26:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 04:26:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 04:26:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 04:26:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 04:26:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 04:26:46'!
ERROR!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 04:27:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 04:27:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 04:27:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 04:27:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 04:27:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 04:27:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 04:27:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 04:27:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 04:27:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 04:27:15'!
ERROR!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 04:27:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 04:27:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 04:27:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 04:27:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 04:27:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 04:27:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 04:27:15'!
ERROR!

salesForCustomer!

salesForCustomer!

aSale!
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 04:29:13' prior: 50888026!
itemsWithCountsForAllSalesCombined: salesForCustomer

	^salesForCustomer inject: Bag new into: [:totalItemsWithCounts :aSale | | itemsWithCounts | itemsWithCounts _ aSale itemsWithCounts addAll: totalItemsWithCounts. itemsWithCounts]! !

aSale!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 04:29:22'!
ERROR!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 04:29:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 04:29:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 04:29:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 04:29:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 04:29:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 04:29:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 04:29:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 04:29:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 04:29:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 04:29:25'!
ERROR!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 04:29:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 04:29:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 04:29:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 04:29:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 04:29:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 04:29:25'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 04:29:25'!
ERROR!
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 04:02:31' prior: 50888158!
itemsWithCountsForAllSalesCombined: salesForCustomer

	^(self itemsWithCountsForEachSale: salesForCustomer) inject: Bag new into: [:totalItemsWithCounts :itemsWithCounts | totalItemsWithCounts addAll: itemsWithCounts. totalItemsWithCounts]! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 04:29:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 04:29:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 04:29:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 04:29:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 04:29:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 04:29:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 04:29:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 04:29:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 04:29:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 04:29:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 04:29:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 04:29:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 04:29:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 04:29:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 04:29:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 04:29:47'!
PASSED!
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 04:30:48' prior: 50888233!
itemsWithCountsForAllSalesCombined: salesForCustomer

	^ salesForCustomer inject: Bag new into: [:totalItemsWithCounts :aSale | totalItemsWithCounts addAll: aSale itemsWithCounts. aSale itemsWithCounts]! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 04:30:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 04:30:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 04:30:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 04:30:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 04:30:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 04:30:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 04:30:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 04:30:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 04:30:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 04:30:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 04:30:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 04:30:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 04:30:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 04:30:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 04:30:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 04:30:49'!
PASSED!
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 04:31:16' prior: 50888300!
itemsWithCountsForAllSalesCombined: salesForCustomer

	^ salesForCustomer inject: Bag new into: [:totalItemsWithCounts :aSale | totalItemsWithCounts addAll: aSale itemsWithCounts]! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 04:31:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 04:31:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 04:31:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 04:31:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 04:31:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 04:31:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 04:31:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 04:31:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 04:31:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 04:31:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 04:31:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 04:31:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 04:31:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 04:31:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 04:31:17'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 04:31:17'!
PASSED!

!methodRemoval: TusLibrosFacade #itemsWithCountsForEachSale: stamp: 'fr 12/3/2020 04:31:37'!
itemsWithCountsForEachSale: salesForCustomer

	^ (salesForCustomer) collect: [:aSale | aSale itemsWithCounts]!
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 04:31:52'!
itemsWithCountsForAllSales: salesForCustomer

	^ salesForCustomer inject: Bag new into: [:totalItemsWithCounts :aSale | totalItemsWithCounts addAll: aSale itemsWithCounts]! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 04:31:52' prior: 50887985!
itemsWithCountsFor: salesForCustomer

	^ (self itemsWithCountsForAllSales: salesForCustomer) contents! !

!methodRemoval: TusLibrosFacade #itemsWithCountsForAllSalesCombined: stamp: 'fr 12/3/2020 04:31:52'!
itemsWithCountsForAllSalesCombined: salesForCustomer

	^ salesForCustomer inject: Bag new into: [:totalItemsWithCounts :aSale | totalItemsWithCounts addAll: aSale itemsWithCounts]!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 04:31:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 04:31:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 04:31:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 04:31:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 04:31:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 04:31:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 04:31:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 04:31:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 04:31:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 04:31:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 04:31:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 04:31:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 04:31:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 04:31:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 04:31:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 04:31:56'!
PASSED!
!TusLibrosFacade methodsFor: 'purchase listing - private' stamp: 'fr 12/3/2020 04:35:21' prior: 50888446!
itemsWithCountsFor: salesForCustomer

	^ (self itemsWithCountsForAllSales: salesForCustomer) asDictionary! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 04:35:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 04:35:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 04:35:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 04:35:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 04:35:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 04:35:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 04:35:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 04:35:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 04:35:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 04:35:21'!
ERROR!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 04:35:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 04:35:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 04:35:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 04:35:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 04:35:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 04:35:21'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 04:35:21'!
ERROR!
!TusLibrosFacade methodsFor: 'purchase listing - private' stamp: 'fr 12/3/2020 04:35:29' prior: 50888518!
itemsWithCountsFor: salesForCustomer

	^ (self itemsWithCountsForAllSales: salesForCustomer) contents! !
!TusLibrosFacade methodsFor: 'purchase listing - private' stamp: 'fr 12/3/2020 04:35:49' prior: 50888585!
itemsWithCountsFor: salesForCustomer

	^ (self itemsWithCountsForAllSales: salesForCustomer) ! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 04:35:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 04:35:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 04:35:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 04:35:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 04:35:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 04:35:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 04:35:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 04:35:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 04:35:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 04:35:49'!
ERROR!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 04:35:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 04:35:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 04:35:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 04:35:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 04:35:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 04:35:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 04:35:49'!
ERROR!
!TusLibrosFacade methodsFor: 'purchase listing - private' stamp: 'fr 12/3/2020 04:35:55' prior: 50888592!
itemsWithCountsFor: salesForCustomer

	^ (self itemsWithCountsForAllSales: salesForCustomer) contents! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 04:35:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 04:35:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 04:35:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 04:35:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 04:35:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 04:35:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 04:35:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 04:35:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 04:35:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 04:35:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 04:35:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 04:35:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 04:35:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 04:35:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 04:35:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 04:35:56'!
PASSED!

bag _ Bag new add: 'Fede' withOccurrences: 5; add: 'Noel' withOccurrences: 2; yourself !

bag asDictionary !

bag sortedElements  !

bag sortedElements  asDictionary !
!TusLibrosFacade methodsFor: 'purchase listing - private' stamp: 'fr 12/3/2020 04:39:14' prior: 50888659!
itemsWithCountsFor: salesForCustomer

	^ (self itemsWithCountsForAllSales: salesForCustomer) sortedElements asDictionary! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 04:39:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 04:39:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 04:39:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 04:39:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 04:39:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 04:39:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 04:39:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 04:39:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 04:39:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 04:39:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 04:39:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 04:39:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 04:39:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 04:39:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 04:39:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 04:39:14'!
PASSED!
!Cart methodsFor: 'enumerating' stamp: 'fr 12/3/2020 04:39:27' prior: 50882727!
itemsQuantitiesAndPricesDo: aBlock 
	
	items asBag sortedElements asDictionary keysAndValuesDo: [:anItem :aQuantity | aBlock value: anItem value: aQuantity value: (catalog at: anItem)]
! !
!Cart methodsFor: 'enumerating' stamp: 'fr 12/3/2020 04:39:42'!
itemsAsDictionary

	^ items asBag sortedElements asDictionary! !
!Cart methodsFor: 'enumerating' stamp: 'fr 12/3/2020 04:39:42' prior: 50888791!
itemsQuantitiesAndPricesDo: aBlock 
	
	self itemsAsDictionary keysAndValuesDo: [:anItem :aQuantity | aBlock value: anItem value: aQuantity value: (catalog at: anItem)]
! !

!methodRemoval: Cashier class #toCheckout:charging:throught:on:registeringOn: stamp: 'fr 12/3/2020 04:40:27'!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook!

!methodRemoval: Cashier #initializeToCheckout:charging:throught:registeringOn: stamp: 'fr 12/3/2020 04:40:34'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook!

!methodRemoval: CreditCard class #expiringOn: stamp: 'fr 12/3/2020 04:42:47'!
expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'fr 12/3/2020 04:43:40' prior: 50868309!
expiredCreditCard
	
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber - 1)
			     withNumber: self cardNumber 
			     ownedBy: self cardOwner ! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'fr 12/3/2020 04:43:58' prior: 50868302!
notExpiredCreditCard
	
	^CreditCard expiringOn: (Month month: today monthIndex year: today yearNumber + 1)
			     withNumber: self cardNumber 
			     ownedBy: self cardOwner ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 04:44:02'!
PASSED!

!methodRemoval: CreditCard #initializeExpiringOn: stamp: 'fr 12/3/2020 04:44:07'!
initializeExpiringOn: aMonth 
	
	expiration := aMonth !

!methodRemoval: SaleReceipt #initializeFor:customer: stamp: 'fr 12/3/2020 04:45:49'!
initializeFor: aSalesReceiptEntriesList customer: aUsername 
	
	receiptEntries _ aSalesReceiptEntriesList.
	customer _ aUsername.!

!methodRemoval: SaleReceipt class #for:customer: stamp: 'fr 12/3/2020 04:45:58'!
for: aSalesReceiptEntriesList customer: aUsername 
	
	^self new initializeFor: aSalesReceiptEntriesList customer: aUsername !
!Cashier methodsFor: 'checkout - private' stamp: 'fr 12/3/2020 04:46:51' prior: 50874279!
createReceipt

	| ticketEntries |
	ticketEntries _ OrderedCollection new.
	self collectReceiptEntriesInto: ticketEntries.
	receipt _ SaleReceipt for: customer containing: ticketEntries withId: 5 
	
	! !

!methodRemoval: Cashier #createReceipt stamp: 'fr 12/3/2020 04:47:03'!
createReceipt

	| ticketEntries |
	ticketEntries _ OrderedCollection new.
	self collectReceiptEntriesInto: ticketEntries.
	receipt _ SaleReceipt for: customer containing: ticketEntries withId: 5 
	
	!

!methodRemoval: StoreTestObjectsFactory #validCustomer stamp: 'fr 12/3/2020 04:50:25'!
validCustomer
	
	^'validCustomer'!
!CashierTest methodsFor: 'tests' stamp: 'fr 12/3/2020 04:50:32' prior: 50873460!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory today
			registeringOn:  salesBook
			for: testObjectsFactory validUser]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'fr 12/3/2020 04:50:37' prior: 50873745!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new
		for: testObjectsFactory validUser.
		
	self assert: cashier checkOut total = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'tests' stamp: 'fr 12/3/2020 04:50:41' prior: 50873580!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: self
				on: testObjectsFactory today
				registeringOn: salesBook
				for: testObjectsFactory validUser ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'fr 12/3/2020 04:50:45' prior: 50874106!
test04CheckoutRegistersASale

	| cart cashier salesBook receipt |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		for: testObjectsFactory validUser.
		
	receipt := cashier checkOut total.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = receipt.! !
!CashierTest methodsFor: 'tests' stamp: 'fr 12/3/2020 04:50:49' prior: 50874126!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook receipt creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		for: testObjectsFactory validUser.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	receipt := cashier checkOut total.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = receipt.! !
!CashierTest methodsFor: 'tests' stamp: 'fr 12/3/2020 04:50:54' prior: 50873647!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		for: testObjectsFactory validUser.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!TusLibrosFacade methodsFor: 'id' stamp: 'fr 12/3/2020 05:01:58'!
updateCartId
	
	currentId _ currentId + 1! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 05:01:58' prior: 50886470!
newCartForUser: aUsername andPassword: aPassword 
	
	authenticator validateUsername: aUsername andPassword: aPassword.
	self updateCartId.
	cartsSessions add: currentId -> (self newCartSessionFor: aUsername).
	^currentId ! !

!methodRemoval: TusLibrosFacade #updateId stamp: 'fr 12/3/2020 05:01:58'!
updateId
	
	currentId _ currentId + 1!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 05:02:01'!
PASSED!

----SNAPSHOT----(3 December 2020 05:03:45) CuisUniversity-4384.image priorSource: 17803776!
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 05:04:47' prior: 50883532!
listPurchasesOfUser: aUsername withPassword: aPassword 

	authenticator validateUsername: aUsername andPassword: aPassword.
	^self listPurchasesForCustomer: aUsername
	! !
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 05:05:14'!
validateUsername: aPassword withPassword: aUsername

	^ authenticator validateUsername: aUsername andPassword: aPassword! !
!TusLibrosFacade methodsFor: 'purchase listing' stamp: 'fr 12/3/2020 05:05:14' prior: 50889254!
listPurchasesOfUser: aUsername withPassword: aPassword 

	self validateUsername: aPassword withPassword: aUsername.
	^self listPurchasesForCustomer: aUsername
	! !
!TusLibrosFacade methodsFor: 'cart management' stamp: 'fr 12/3/2020 05:05:22' prior: 50889136!
newCartForUser: aUsername andPassword: aPassword 
	
	self validateUsername: aPassword withPassword: aUsername.
	self updateCartId.
	cartsSessions add: currentId -> (self newCartSessionFor: aUsername).
	^currentId ! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 05:05:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 05:05:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 05:05:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 05:05:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 05:05:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 05:05:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 05:05:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 05:05:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 05:05:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 05:05:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 05:05:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 05:05:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 05:05:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 05:05:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 05:05:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 05:05:23'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'authenticator' stamp: 'fr 12/3/2020 05:05:36'!
validateUsername: aUsername withPassword: aPassword 
	
	(credentials at: aUsername ifAbsent: [self error: TusLibrosFacade invalidCredentialsErrorDescription]) = aPassword ifFalse: [self error: TusLibrosFacade invalidCredentialsErrorDescription].
	! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 05:05:36' prior: 50889262!
validateUsername: aPassword withPassword: aUsername

	^ authenticator validateUsername: aUsername withPassword: aPassword! !

!methodRemoval: TusLibrosFacadeTest #validateUsername:andPassword: stamp: 'fr 12/3/2020 05:05:36'!
validateUsername: aUsername andPassword: aPassword 
	
	(credentials at: aUsername ifAbsent: [self error: TusLibrosFacade invalidCredentialsErrorDescription]) = aPassword ifFalse: [self error: TusLibrosFacade invalidCredentialsErrorDescription].
	!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 05:05:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 05:05:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 05:05:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 05:05:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 05:05:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 05:05:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 05:05:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 05:05:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 05:05:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 05:05:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 05:05:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 05:05:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 05:05:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 05:05:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 05:05:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 05:05:38'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 05:05:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 05:05:40'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 05:05:40'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 05:05:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 05:05:40'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 05:05:40'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 05:05:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 05:05:40'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 05:05:40'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 05:05:40'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 05:05:40'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 05:05:40'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 05:05:40'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 05:05:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 05:05:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 05:05:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 05:05:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 05:05:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 05:05:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 05:05:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 05:05:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 05:05:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 05:05:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 05:05:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 05:05:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 05:05:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 05:05:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 05:05:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 05:05:40'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 05:05:40'!
PASSED!
!TusLibrosFacade methodsFor: 'initialization' stamp: 'fr 12/3/2020 05:06:05' prior: 50883818!
initializeAcceptingItemsOf: aCatalogue validatingUsersThrough: anAuthenticator registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor withClock: aClock 
	
	catalogue _ aCatalogue.
	authenticator _ anAuthenticator.
	salesBook _ aSalesBook.
	merchantProcessor _ aMerchantProcessor.
	clock _ aClock.
	
	cartsSessions _ Dictionary new.
	currentId _ 0
! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 05:06:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 05:06:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 05:06:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 05:06:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 05:06:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 05:06:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 05:06:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 05:06:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 05:06:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 05:06:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 05:06:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 05:06:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 05:06:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 05:06:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 05:06:06'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 05:06:06'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:06:49' prior: 50888007!
notas
			
	"Despu�s de la expiraci�n de la sesi�n habr�a que borrar el cart -> test para verificar que luego de un timeout el cartId es inv�lido => Paso bloque que se ejecute si la condici�n de expiraci�n es verdadera"
				
! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:07:56'!
assertCreatingACartFailsForUser: aUsername withPassword: aPassword

	self  should: [facade newCartForUser: aUsername andPassword: aPassword]
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosFacade invalidCredentialsErrorDescription
		! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:08:23' prior: 50881571!
test02CanNotCreateNewCartForInvalidUser

	self  should: [facade newCartForUser: objectFactory invalidUser andPassword: objectFactory validPassword]
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosFacade invalidCredentialsErrorDescription.
		
	self assertCreatingACartFailsForUser: objectFactory invalidUser withPassword: objectFactory validPassword.
		! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:08:26' prior: 50889623!
test02CanNotCreateNewCartForInvalidUser
		
	self assertCreatingACartFailsForUser: objectFactory invalidUser withPassword: objectFactory validPassword.
		! !

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 05:08:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 05:08:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 05:08:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 05:08:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 05:08:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 05:08:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 05:08:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 05:08:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 05:08:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 05:08:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 05:08:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 05:08:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 05:08:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 05:08:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 05:08:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 05:08:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 05:08:27'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:08:41' prior: 50881471!
test03CanNotCreateNewCartForInvalidPassword
	
	self  should: [facade newCartForUser: objectFactory validUser andPassword: objectFactory invalidPassword]
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosFacade invalidCredentialsErrorDescription.
		
	self assertCreatingACartFailsForUser: objectFactory validUser withPassword: objectFactory invalidPassword.

		! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:08:43' prior: 50889706!
test03CanNotCreateNewCartForInvalidPassword
		
	self assertCreatingACartFailsForUser: objectFactory validUser withPassword: objectFactory invalidPassword.

		! !

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 05:08:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 05:08:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 05:08:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 05:08:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 05:08:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 05:08:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 05:08:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 05:08:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 05:08:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 05:08:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 05:08:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 05:08:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 05:08:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 05:08:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 05:08:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 05:08:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 05:08:44'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:08:47' prior: 50889721!
test03CanNotCreateNewCartForInvalidPassword
		
	self assertCreatingACartFailsForUser: objectFactory validUser withPassword: objectFactory validPassword.

		! !

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 05:08:47'!
FAILURE!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:08:54' prior: 50889789!
test03CanNotCreateNewCartForInvalidPassword
		
	self assertCreatingACartFailsForUser: objectFactory validUser withPassword: objectFactory invalidPassword.

		! !

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 05:08:55'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 05:08:55'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 05:08:55'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 05:08:55'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 05:08:55'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 05:08:55'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 05:08:55'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 05:08:55'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 05:08:55'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 05:08:55'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 05:08:55'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 05:08:55'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 05:08:55'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 05:08:55'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 05:08:55'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 05:08:55'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 05:08:55'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:10:10'!
assertBlockFailsForInvalidCart: aBlock
		
	self  should: aBlock
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosFacade invalidCartIdErrorDescription! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:10:42' prior: 50881483!
test04CanNotListNonexistentCart
		
	self  should: [facade listCart: 1] 
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosFacade invalidCartIdErrorDescription.
		
	self assertBlockFailsForInvalidCart: [facade listCart: objectFactory invalidCartId]! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:10:47' prior: 50889878!
test04CanNotListNonexistentCart
		
	self assertBlockFailsForInvalidCart: [facade listCart: objectFactory invalidCartId]! !

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 05:10:48'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 05:10:53'!
invalidCartId
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 05:10:58' prior: 50889900!
invalidCartId
	
	^Object new! !

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 05:10:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 05:10:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 05:10:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 05:10:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 05:10:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 05:10:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 05:10:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 05:10:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 05:10:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 05:10:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 05:10:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 05:10:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 05:10:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 05:10:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 05:10:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 05:10:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 05:10:59'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:11:46' prior: 50881611!
test06CanNotAddItemsToNonexistentCarts
		
	self assertBlockFailsForInvalidCart: [facade add: 2 of: objectFactory itemSellByTheStore toCart: objectFactory invalidCartId ]
! !

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 05:11:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 05:11:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 05:11:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 05:11:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 05:11:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 05:11:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 05:11:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 05:11:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 05:11:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 05:11:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 05:11:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 05:11:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 05:11:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 05:11:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 05:11:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 05:11:47'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 05:11:47'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:11:49' prior: 50889969!
test06CanNotAddItemsToNonexistentCarts
		
	self assertBlockFailsForInvalidCart: [facade add: 2 of: objectFactory itemSellByTheStore toCart: objectFactory invalidCartId]
! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:17:17' prior: 50875064!
test07ListingACartWorksAsExpectedForMultipleItems

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: objectFactory itemSellByTheStore) equals: 2.! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:17:53' prior: 50887199!
test09CanNotCheckoutANonexistentCart
				
	self should: [facade 
			checkoutCart: objectFactory invalidCartId 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory cardOwner.] 
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
							self assert: anError messageText equals: TusLibrosFacade invalidCartIdErrorDescription.
							self assert: salesBook isEmpty
			]
	! !

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 05:17:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 05:17:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 05:17:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 05:17:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 05:17:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 05:17:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 05:17:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 05:17:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 05:17:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 05:17:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 05:17:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 05:17:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 05:17:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 05:17:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 05:17:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 05:17:53'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 05:17:53'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:18:16'!
test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal

	| cartId purchasesList |
				
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory validUser.
	purchasesList _ facade listPurchasesOfUser: objectFactory validUser withPassword: objectFactory validPassword.
	
	self assert: (purchasesList first at: objectFactory itemSellByTheStore) equals: 2.
	self assert: purchasesList second equals: objectFactory itemSellByTheStorePrice * 2
	
	! !

!methodRemoval: TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItems stamp: 'fr 12/3/2020 05:18:16'!
test10PurchaseListHasTheCorrectQuantityOfItems

	| cartId purchasesList |
				
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory validUser.
	purchasesList _ facade listPurchasesOfUser: objectFactory validUser withPassword: objectFactory validPassword.
	
	self assert: (purchasesList first at: objectFactory itemSellByTheStore) equals: 2.
	self assert: purchasesList second equals: objectFactory itemSellByTheStorePrice * 2
	
	!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:20:29'!
assertListingACartReflectsAddedProductsWithAmount: anAmount

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	facade add: anAmount of: objectFactory itemSellByTheStore toCart: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: objectFactory itemSellByTheStore) equals: anAmount.! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:21:15'!
test05AddingAnItemIsReflectedWhenListingTheCart

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: objectFactory itemSellByTheStore) equals: 1! !

!methodRemoval: TusLibrosFacadeTest #test05AddingAnItemWorksAsExpected stamp: 'fr 12/3/2020 05:21:15'!
test05AddingAnItemWorksAsExpected

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: objectFactory itemSellByTheStore) equals: 1!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:22:34'!
test07AddingMultipleItemsIsReflectedWhenListingTheCart

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: objectFactory itemSellByTheStore) equals: 2.! !

!methodRemoval: TusLibrosFacadeTest #test07ListingACartWorksAsExpectedForMultipleItems stamp: 'fr 12/3/2020 05:22:34'!
test07ListingACartWorksAsExpectedForMultipleItems

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: objectFactory itemSellByTheStore) equals: 2.!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:23:53' prior: 50890202!
test05AddingAnItemIsReflectedWhenListingTheCart

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId.
	self assert: ((facade listCart: cartId) occurrencesOf: objectFactory itemSellByTheStore) equals: 1.

	self assertListingACartReflectsAddedProductsWithAmount: 1
! !

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 05:23:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 05:23:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 05:23:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 05:23:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 05:23:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 05:23:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 05:23:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 05:23:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 05:23:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 05:23:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 05:23:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 05:23:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 05:23:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 05:23:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 05:23:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 05:23:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 05:23:54'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:24:00' prior: 50890256!
test05AddingAnItemIsReflectedWhenListingTheCart

	self assertListingACartReflectsAddedProductsWithAmount: 1
! !

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 05:24:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 05:24:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 05:24:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 05:24:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 05:24:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 05:24:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 05:24:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 05:24:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 05:24:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 05:24:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 05:24:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 05:24:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 05:24:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 05:24:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 05:24:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 05:24:01'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 05:24:01'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:24:22' prior: 50890228!
test07AddingMultipleItemsIsReflectedWhenListingTheCart

	self assertListingACartReflectsAddedProductsWithAmount: 2
! !

!testRun: #TusLibrosFacadeTest #test07AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 05:24:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 05:24:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 05:24:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 05:24:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 05:24:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 05:24:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 05:24:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 05:24:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 05:24:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 05:24:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 05:24:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 05:24:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 05:24:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 05:24:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 05:24:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 05:24:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 05:24:22'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:24:36'!
test06AddingMultipleItemsIsReflectedWhenListingTheCart

	self assertListingACartReflectsAddedProductsWithAmount: 2
! !

!methodRemoval: TusLibrosFacadeTest #test07AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 05:24:36'!
test07AddingMultipleItemsIsReflectedWhenListingTheCart

	self assertListingACartReflectsAddedProductsWithAmount: 2
!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:24:40'!
test07CanNotAddItemsToNonexistentCarts
		
	self assertBlockFailsForInvalidCart: [facade add: 2 of: objectFactory itemSellByTheStore toCart: objectFactory invalidCartId]
! !

!methodRemoval: TusLibrosFacadeTest #test06CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 05:24:40'!
test06CanNotAddItemsToNonexistentCarts
		
	self assertBlockFailsForInvalidCart: [facade add: 2 of: objectFactory itemSellByTheStore toCart: objectFactory invalidCartId]
!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:25:01' prior: 50887523!
test08CanCheckoutAValidCart

	| cartId transactionId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	transactionId _ facade 
			checkoutCart: cartId 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory cardOwner.
				
	self assert: transactionId equals: merchantProcessorTransactionId
	! !
!TusLibrosFacadeTest methodsFor: 'setup' stamp: 'fr 12/3/2020 05:25:13' prior: 50887431 overrides: 16927572!
setUp
	
	objectFactory _ StoreTestObjectsFactory new.
	
	credentials _ objectFactory defaultCredentials.
	salesBook _ objectFactory defaultSalesBook.
	clock _ objectFactory defaultClock.
	merchantProcessorTransactionId _ 55.

	facade _ facade _ TusLibrosFacade 
			acceptingItemsOf: objectFactory defaultCatalog 
			validatingUsersThrough: self 
			registeringSalesOn: salesBook
			chargingThrough: self
			withClock: clock.
! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 05:25:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 05:25:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 05:25:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 05:25:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 05:25:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 05:25:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 05:25:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 05:25:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 05:25:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 05:25:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 05:25:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 05:25:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 05:25:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 05:25:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 05:25:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 05:25:14'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:27:57'!
createNewCartForValidCredentialsAndCheckout

	| cartId transactionId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	transactionId _ facade 
			checkoutCart: cartId 
			withCard: objectFactory cardNumber 
			expiringOn: objectFactory cardExpirationDate 
			forOwner: objectFactory cardOwner.
				
	! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:28:09' prior: 50890592!
createNewCartForValidCredentialsAndCheckout

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	^facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory cardOwner.
			
	! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:28:53' prior: 50890500!
test08CanCheckoutAValidCart

	| transactionId |
	transactionId _ self createNewCartForValidCredentialsAndCheckout.
	self assert: transactionId equals: merchantProcessorTransactionId
	! !

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 05:28:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 05:28:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 05:28:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 05:28:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 05:28:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 05:28:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 05:28:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 05:28:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 05:28:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 05:28:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 05:28:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 05:28:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 05:28:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 05:28:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 05:28:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 05:28:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 05:28:54'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:28:57' prior: 50890624!
test08CanCheckoutAValidCart

	| transactionId |
	transactionId _ self createNewCartForValidCredentialsAndCheckout.
	
	self assert: transactionId equals: merchantProcessorTransactionId
	! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:29:16' prior: 50890138!
test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal

	| purchasesList |
				
	self createNewCartForValidCredentialsAndCheckout.
	purchasesList _ facade listPurchasesOfUser: objectFactory validUser withPassword: objectFactory validPassword.
	
	self assert: (purchasesList first at: objectFactory itemSellByTheStore) equals: 2.
	self assert: purchasesList second equals: objectFactory itemSellByTheStorePrice * 2
	
	! !

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 05:29:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 05:29:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 05:29:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 05:29:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 05:29:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 05:29:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 05:29:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 05:29:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 05:29:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 05:29:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 05:29:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 05:29:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 05:29:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 05:29:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 05:29:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 05:29:19'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 05:29:19'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:29:29' prior: 50881448!
test11CanNotListPurchasesForInvalidUsername

	
				
	self createNewCartForValidCredentialsAndCheckout.
	
	self  should: [facade listPurchasesOfUser: objectFactory invalidUser withPassword: objectFactory validPassword] 
		raise: Error - MessageNotUnderstood
		description: TusLibrosFacade invalidCredentialsErrorDescription 
	
	! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:29:33' prior: 50890780!
test11CanNotListPurchasesForInvalidUsername
			
	self createNewCartForValidCredentialsAndCheckout.
	
	self  should: [facade listPurchasesOfUser: objectFactory invalidUser withPassword: objectFactory validPassword] 
		raise: Error - MessageNotUnderstood
		description: TusLibrosFacade invalidCredentialsErrorDescription 
	
	! !

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 05:29:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 05:29:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 05:29:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 05:29:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 05:29:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 05:29:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 05:29:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 05:29:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 05:29:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 05:29:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 05:29:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 05:29:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 05:29:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 05:29:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 05:29:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 05:29:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 05:29:34'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:29:43' prior: 50881622!
test12CanNotListPurchasesForInvalidPassword

	self createNewCartForValidCredentialsAndCheckout.
	
	self  should: [facade listPurchasesOfUser: objectFactory validUser withPassword: objectFactory invalidPassword] 
		raise: Error - MessageNotUnderstood
		description: TusLibrosFacade invalidCredentialsErrorDescription 
	
	! !

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 05:29:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 05:29:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 05:29:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 05:29:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 05:29:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 05:29:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 05:29:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 05:29:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 05:29:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 05:29:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 05:29:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 05:29:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 05:29:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 05:29:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 05:29:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 05:29:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 05:29:44'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:31:01'!
assertListingPurchasesFailsForUsername: aUsername andPassword: aPassword
			
	self createNewCartForValidCredentialsAndCheckout.
	
	self  should: [facade listPurchasesOfUser: aUsername withPassword: aPassword] 
		raise: Error - MessageNotUnderstood
		description: TusLibrosFacade invalidCredentialsErrorDescription 
	
	! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:31:28'!
createNewCartForValidCredentialsAndCheckoutAfterAddingProducts

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	^facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory cardOwner.
			
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 05:31:28' prior: 50890942!
assertListingPurchasesFailsForUsername: aUsername andPassword: aPassword
			
	self createNewCartForValidCredentialsAndCheckoutAfterAddingProducts.
	
	self  should: [facade listPurchasesOfUser: aUsername withPassword: aPassword] 
		raise: Error - MessageNotUnderstood
		description: TusLibrosFacade invalidCredentialsErrorDescription 
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 05:31:28' prior: 50890794!
test11CanNotListPurchasesForInvalidUsername
			
	self createNewCartForValidCredentialsAndCheckoutAfterAddingProducts.
	
	self  should: [facade listPurchasesOfUser: objectFactory invalidUser withPassword: objectFactory validPassword] 
		raise: Error - MessageNotUnderstood
		description: TusLibrosFacade invalidCredentialsErrorDescription 
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 05:31:28' prior: 50890702!
test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal

	| purchasesList |
				
	self createNewCartForValidCredentialsAndCheckoutAfterAddingProducts.
	purchasesList _ facade listPurchasesOfUser: objectFactory validUser withPassword: objectFactory validPassword.
	
	self assert: (purchasesList first at: objectFactory itemSellByTheStore) equals: 2.
	self assert: purchasesList second equals: objectFactory itemSellByTheStorePrice * 2
	
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 05:31:28' prior: 50890693!
test08CanCheckoutAValidCart

	| transactionId |
	transactionId _ self createNewCartForValidCredentialsAndCheckoutAfterAddingProducts.
	
	self assert: transactionId equals: merchantProcessorTransactionId
	! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 05:31:28' prior: 50890868!
test12CanNotListPurchasesForInvalidPassword

	self createNewCartForValidCredentialsAndCheckoutAfterAddingProducts.
	
	self  should: [facade listPurchasesOfUser: objectFactory validUser withPassword: objectFactory invalidPassword] 
		raise: Error - MessageNotUnderstood
		description: TusLibrosFacade invalidCredentialsErrorDescription 
	
	! !

!methodRemoval: TusLibrosFacadeTest #createNewCartForValidCredentialsAndCheckout stamp: 'fr 12/3/2020 05:31:29'!
createNewCartForValidCredentialsAndCheckout

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	^facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory cardOwner.
			
	!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:32:10'!
assertListingPurchasesAfterCheckingOutAValidCartForAValidUserFailsForUsername: aUsername andPassword: aPassword
			
	self createNewCartForValidCredentialsAndCheckoutAfterAddingProducts.
	
	self  should: [facade listPurchasesOfUser: aUsername withPassword: aPassword] 
		raise: Error - MessageNotUnderstood
		description: TusLibrosFacade invalidCredentialsErrorDescription 
	
	! !

!methodRemoval: TusLibrosFacadeTest #assertListingPurchasesFailsForUsername:andPassword: stamp: 'fr 12/3/2020 05:32:10'!
assertListingPurchasesFailsForUsername: aUsername andPassword: aPassword
			
	self createNewCartForValidCredentialsAndCheckoutAfterAddingProducts.
	
	self  should: [facade listPurchasesOfUser: aUsername withPassword: aPassword] 
		raise: Error - MessageNotUnderstood
		description: TusLibrosFacade invalidCredentialsErrorDescription 
	
	!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:32:35'!
assertListingPurchasesAfterCheckingOutACartForAValidUserFailsForUser: aUsername andPassword: aPassword
			
	self createNewCartForValidCredentialsAndCheckoutAfterAddingProducts.
	
	self  should: [facade listPurchasesOfUser: aUsername withPassword: aPassword] 
		raise: Error - MessageNotUnderstood
		description: TusLibrosFacade invalidCredentialsErrorDescription 
	
	! !

!methodRemoval: TusLibrosFacadeTest #assertListingPurchasesAfterCheckingOutAValidCartForAValidUserFailsForUsername:andPassword: stamp: 'fr 12/3/2020 05:32:35'!
assertListingPurchasesAfterCheckingOutAValidCartForAValidUserFailsForUsername: aUsername andPassword: aPassword
			
	self createNewCartForValidCredentialsAndCheckoutAfterAddingProducts.
	
	self  should: [facade listPurchasesOfUser: aUsername withPassword: aPassword] 
		raise: Error - MessageNotUnderstood
		description: TusLibrosFacade invalidCredentialsErrorDescription 
	
	!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:33:15' prior: 50890985!
test11CanNotListPurchasesForInvalidUsername
			
	self createNewCartForValidCredentialsAndCheckoutAfterAddingProducts.
	
	self  should: [facade listPurchasesOfUser: objectFactory invalidUser withPassword: objectFactory validPassword] 
		raise: Error - MessageNotUnderstood
		description: TusLibrosFacade invalidCredentialsErrorDescription.
		
	self assertListingPurchasesAfterCheckingOutACartForAValidUserFailsForUser: objectFactory invalidUser andPassword: objectFactory validPassword 
	
	! !

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 05:33:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 05:33:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 05:33:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 05:33:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 05:33:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 05:33:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 05:33:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 05:33:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 05:33:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 05:33:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 05:33:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 05:33:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 05:33:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 05:33:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 05:33:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 05:33:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 05:33:16'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:33:21' prior: 50891117!
test11CanNotListPurchasesForInvalidUsername
		
	self assertListingPurchasesAfterCheckingOutACartForAValidUserFailsForUser: objectFactory invalidUser andPassword: objectFactory validPassword 
	
	! !

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 05:33:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 05:33:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 05:33:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 05:33:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 05:33:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 05:33:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 05:33:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 05:33:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 05:33:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 05:33:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 05:33:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 05:33:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 05:33:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 05:33:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 05:33:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 05:33:22'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 05:33:22'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:33:30' prior: 50891197!
test11CanNotListPurchasesForInvalidUsername
		
	self  assertListingPurchasesAfterCheckingOutACartForAValidUserFailsForUser: objectFactory invalidUser 
		andPassword: objectFactory validPassword 
	
	! !

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 05:33:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 05:33:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 05:33:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 05:33:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 05:33:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 05:33:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 05:33:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 05:33:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 05:33:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 05:33:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 05:33:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 05:33:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 05:33:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 05:33:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 05:33:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 05:33:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 05:33:31'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:33:53' prior: 50891027!
test12CanNotListPurchasesForInvalidPassword
		
	self  assertListingPurchasesAfterCheckingOutACartForAValidUserFailsForUser: objectFactory validUser 
		andPassword: objectFactory invalidPassword 
	
	! !

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 05:33:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 05:33:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 05:33:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 05:33:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 05:33:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 05:33:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 05:33:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 05:33:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 05:33:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 05:33:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 05:33:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 05:33:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 05:33:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 05:33:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 05:33:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 05:33:54'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 05:33:54'!
PASSED!

----SNAPSHOT----(3 December 2020 05:34:33) CuisUniversity-4384.image priorSource: 17843201!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:34:39' prior: 50887242!
test16CanNotPerformAnyOperationWithACartAfterCheckout

	| cartId |
				
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory cardOwner.
		
	self  should: [facade listCart: cartId] 
		raise: Error - MessageNotUnderstood  
		withMessageText: TusLibrosFacade invalidCartIdErrorDescription 
		
	
	! !
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:34:52' prior: 50891410!
test16CanNotPerformAnyOperationWithACartAfterCheckout

	| cartId |
				
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId.
	facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory cardOwner.
		
	self  should: [facade listCart: cartId] 
		raise: Error - MessageNotUnderstood  
		withMessageText: TusLibrosFacade invalidCartIdErrorDescription 
		
	
	! !

----SNAPSHOT----(3 December 2020 05:35:50) CuisUniversity-4384.image priorSource: 17912197!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 05:37:02' prior: 50889602!
notas
			
	"Despu�s de la expiraci�n de la sesi�n habr�a que borrar el cart -> test para verificar que luego de un timeout el cartId es inv�lido => Paso bloque que se ejecute si la condici�n de expiraci�n es verdadera"
				
! !
!TusLibrosFacadeTest methodsFor: 'merchant processor' stamp: 'fr 12/3/2020 07:33:55' prior: 50886550!
debit: anAmount from: aCreditCard 
	
! !
!TusLibrosFacadeTest methodsFor: 'setup' stamp: 'fr 12/3/2020 07:34:00' prior: 50890519 overrides: 16927572!
setUp
	
	objectFactory _ StoreTestObjectsFactory new.
	
	credentials _ objectFactory defaultCredentials.
	salesBook _ objectFactory defaultSalesBook.
	clock _ objectFactory defaultClock.

	facade _ facade _ TusLibrosFacade 
			acceptingItemsOf: objectFactory defaultCatalog 
			validatingUsersThrough: self 
			registeringSalesOn: salesBook
			chargingThrough: self
			withClock: clock.
! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 07:34:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 07:34:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 07:34:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 07:34:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 07:34:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 07:34:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 07:34:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 07:34:05'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 07:34:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 07:34:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 07:34:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 07:34:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 07:34:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 07:34:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 07:34:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 07:34:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 07:34:05'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'fr 12/3/2020 07:35:31' prior: 50886341!
checkOut

	self createReceipt.
	self debitTotal.
	self registerSale.

	^ receipt! !

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 07:35:38'!
ERROR!
!Cashier methodsFor: 'checkout - private' stamp: 'fr 12/3/2020 07:35:48'!
createReceipt
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checkout - private' stamp: 'fr 12/3/2020 07:36:15' prior: 50891556!
createReceipt
	
	| receiptEntries |
	receiptEntries _ OrderedCollection new.
	self collectReceiptEntriesInto: receiptEntries.
	receipt _ SaleReceipt for: customer containing: receiptEntries! !

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 07:36:27'!
ERROR!
!SaleReceipt class methodsFor: 'instance creation' stamp: 'fr 12/3/2020 07:36:34'!
for: aString containing: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aString containing: anOrderedCollection ! !
!SaleReceipt class methodsFor: 'instance creation' stamp: 'fr 12/3/2020 07:36:38' prior: 50891573!
for: aString containing: anOrderedCollection 
	
	^self new initializeFor: aString containing: anOrderedCollection ! !
!SaleReceipt class methodsFor: 'instance creation' stamp: 'fr 12/3/2020 07:37:10' prior: 50891583!
for: aCustomer containing: aSalesReceiptEntriesList 
	
	^self new initializeFor: aCustomer containing: aSalesReceiptEntriesList! !

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 07:37:11'!
ERROR!

!classDefinition: #SaleReceipt category: 'TusLibros - Exercise - III' stamp: 'fr 12/3/2020 07:37:21'!
Object subclass: #SaleReceipt
	instanceVariableNames: 'receiptEntries customer transactionId salesReceiptEntriesList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!SaleReceipt methodsFor: 'initialization' stamp: 'fr 12/3/2020 07:37:21'!
initializeFor: aCustomer containing: aSalesReceiptEntriesList 
	self shouldBeImplemented.
	customer := aCustomer.
	salesReceiptEntriesList := aSalesReceiptEntriesList.! !
!SaleReceipt methodsFor: 'initialization' stamp: 'fr 12/3/2020 07:37:23' prior: 50891610!
initializeFor: aCustomer containing: aSalesReceiptEntriesList 
	
	customer := aCustomer.
	salesReceiptEntriesList := aSalesReceiptEntriesList.! !
!SaleReceipt methodsFor: 'initialization' stamp: 'fr 12/3/2020 07:37:33' prior: 50891619!
initializeFor: aCustomer containing: aSalesReceiptEntriesList 
	
	customer _ aCustomer.
	receiptEntries _ aSalesReceiptEntriesList.! !

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 07:37:43'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 07:37:46'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 07:37:46'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 07:37:46'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 07:37:46'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 07:37:46'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 07:37:46'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 07:37:46'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 07:37:46'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 07:37:46'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 07:37:46'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 07:37:46'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 07:37:46'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 07:37:46'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 07:37:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 07:37:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 07:37:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 07:37:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 07:37:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 07:37:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 07:37:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 07:37:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 07:37:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 07:37:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 07:37:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 07:37:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 07:37:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 07:37:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 07:37:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 07:37:46'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 07:37:46'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 07:39:35' prior: 50891017!
test08CanCheckoutAValidCart

	| transactionId |
	transactionId _ self createNewCartForValidCredentialsAndCheckoutAfterAddingProducts.
	
	self assert: (facade lastTransactionWas: transactionId)
	! !

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 07:39:37'!
ERROR!
!TusLibrosFacade methodsFor: 'testing' stamp: 'fr 12/3/2020 07:40:11'!
lastTransactionWas: anUndefinedObject 
	self shouldBeImplemented.! !
!TusLibrosFacade methodsFor: 'testing' stamp: 'fr 12/3/2020 07:40:13' prior: 50891752!
lastTransactionWas: anUndefinedObject 
	
	! !
!TusLibrosFacade methodsFor: 'testing' stamp: 'fr 12/3/2020 07:40:24' prior: 50891757!
lastTransactionWas: aTransactionId 
	
	! !
!TusLibrosFacade methodsFor: 'testing' stamp: 'fr 12/3/2020 07:40:26' prior: 50891762!
lastTransactionWas: aTransactionId 

	
	
	! !

!classDefinition: #TusLibrosFacade category: 'TusLibros - Exercise - III' stamp: 'fr 12/3/2020 07:40:43'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'cartsSessions catalogue authenticator currentId merchantProcessor salesBook clock currentTransactionId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!TusLibrosFacade methodsFor: 'testing' stamp: 'fr 12/3/2020 07:40:41' prior: 50891767!
lastTransactionWas: aTransactionId 

	^currentTransactionId = aTransactionId 
	
	! !
!TusLibrosFacadeTest methodsFor: 'setup' stamp: 'fr 12/3/2020 07:41:12' prior: 50891471 overrides: 16927572!
setUp
	
	objectFactory _ StoreTestObjectsFactory new.
	
	credentials _ objectFactory defaultCredentials.
	salesBook _ objectFactory defaultSalesBook.
	clock _ objectFactory defaultClock.

	facade _ TusLibrosFacade 
			acceptingItemsOf: objectFactory defaultCatalog 
			validatingUsersThrough: self 
			registeringSalesOn: salesBook
			chargingThrough: self
			withClock: clock.
! !
!TusLibrosFacadeTest methodsFor: 'utils' stamp: 'fr 12/3/2020 07:41:32' prior: 50890955!
createNewCartForValidCredentialsAndCheckoutAfterAddingProducts

	| cartId |

facade _ TusLibrosFacade 
			acceptingItemsOf: objectFactory defaultCatalog 
			validatingUsersThrough: self 
			registeringSalesOn: salesBook
			chargingThrough: self
			withClock: clock.



	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	facade add: 2 of: objectFactory itemSellByTheStore toCart: cartId.
	^facade 
		checkoutCart: cartId 
		withCard: objectFactory cardNumber 
		expiringOn: objectFactory cardExpirationDate 
		forOwner: objectFactory cardOwner.
			
	! !
!TusLibrosFacade methodsFor: 'initialization' stamp: 'fr 12/3/2020 07:42:04' prior: 50889531!
initializeAcceptingItemsOf: aCatalogue validatingUsersThrough: anAuthenticator registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor withClock: aClock 
	
	catalogue _ aCatalogue.
	authenticator _ anAuthenticator.
	salesBook _ aSalesBook.
	merchantProcessor _ aMerchantProcessor.
	clock _ aClock.
	
	cartsSessions _ Dictionary new.
	currentId _ 0.
	currentTransactionId _ 0
! !

!classDefinition: #TusLibrosFacade category: 'TusLibros - Exercise - III' stamp: 'fr 12/3/2020 07:42:08'!
Object subclass: #TusLibrosFacade
	instanceVariableNames: 'cartsSessions catalogue authenticator currentCartId merchantProcessor salesBook clock currentTransactionId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros - Exercise - III'!
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 07:42:08' prior: 50889278!
newCartForUser: aUsername andPassword: aPassword 
	
	self validateUsername: aPassword withPassword: aUsername.
	self updateCartId.
	cartsSessions add: currentCartId -> (self newCartSessionFor: aUsername).
	^currentCartId ! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 07:42:08' prior: 50891827!
initializeAcceptingItemsOf: aCatalogue validatingUsersThrough: anAuthenticator registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor withClock: aClock 
	
	catalogue _ aCatalogue.
	authenticator _ anAuthenticator.
	salesBook _ aSalesBook.
	merchantProcessor _ aMerchantProcessor.
	clock _ aClock.
	
	cartsSessions _ Dictionary new.
	currentCartId _ 0.
	currentTransactionId _ 0
! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 07:42:08' prior: 50889131!
updateCartId
	
	currentCartId _ currentCartId + 1! !

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 07:42:21'!
FAILURE!
!TusLibrosFacade methodsFor: 'cart management' stamp: 'fr 12/3/2020 07:43:07' prior: 50886280!
checkoutCart: aCartId withCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner 
	
	(self cartSessionForCartId: aCartId) 
						checkoutWithCard: aCardNumber 
						expiringOn: anExpirationDate 
						forOwner: aCardOwner 
						through: merchantProcessor 
						registeringOn: salesBook.
	self removeCart: aCartId.
	^self newTransactionId
		! !

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 07:43:10'!
ERROR!
!TusLibrosFacade methodsFor: 'id' stamp: 'fr 12/3/2020 07:43:26'!
newTransactionId
	self shouldBeImplemented.! !
!TusLibrosFacade methodsFor: 'id' stamp: 'fr 12/3/2020 07:43:44' prior: 50891906!
newTransactionId
	
	currentTransactionId _ currentTransactionId + 1.
	^currentTransactionId ! !

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 07:43:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 07:43:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 07:43:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 07:43:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 07:43:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 07:43:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 07:43:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 07:43:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 07:43:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 07:43:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 07:43:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 07:43:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 07:43:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 07:43:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 07:43:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 07:43:45'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 07:43:45'!
PASSED!

!methodRemoval: SaleReceipt class #for:containing:withId: stamp: 'fr 12/3/2020 08:46:04'!
for: aCustomer containing: aSalesReceiptEntriesList withId: aTransactionId 
	
	^self new initializeFor: aCustomer containing: aSalesReceiptEntriesList withId: aTransactionId !

!methodRemoval: SaleReceipt #initializeFor:containing:withId: stamp: 'fr 12/3/2020 08:46:12'!
initializeFor: aCustomer containing: aSalesReceiptEntriesList withId: aTransactionId 
	
	customer _ aCustomer.
	receiptEntries _ aSalesReceiptEntriesList.
	transactionId _ aTransactionId.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 08:46:14'!
PASSED!

!methodRemoval: Cashier #createReceiptWith: stamp: 'fr 12/3/2020 08:46:24'!
createReceiptWith: aTransactionId 
	
	| receiptEntries |
	receiptEntries _ OrderedCollection new.
	self collectReceiptEntriesInto: receiptEntries.
	receipt _ SaleReceipt for: customer containing: receiptEntries withId: aTransactionId !
!Cart methodsFor: 'listing' stamp: 'fr 12/3/2020 11:01:36' prior: 50870636!
listCart
	
	^items asBag
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 11:01:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 11:01:37'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 11:01:37'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 11:01:37'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 11:01:37'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 11:01:37'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 11:01:37'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 11:01:37'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 11:01:39'!
PASSED!

cart _ Cart acceptingItemsOf: (OrderedCollection with: 'Fede')!

cart add: 2 of: 'Fede' !

cart!

self selectors !

self class selectors !

cart add: 2 of: 'Fede'!

cart _ Cart acceptingItemsOf: (Dictionary new add: 'Fede'->50).!

cart add: 2 of: 'Fede'!

cart _ Cart acceptingItemsOf: (Dictionary new add: 'Fede'->50;yourself).!

cart add: 2 of: 'Fede'!

cart listCart !
!Cart methodsFor: 'listing' stamp: 'fr 12/3/2020 11:04:31' prior: 50892107!
listCart
	
	^self itemsAsDictionary 
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 11:04:32'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 11:04:32'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 11:04:32'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 11:04:32'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 11:04:32'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 11:04:32'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 11:04:32'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 11:04:32'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 11:04:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 11:04:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 11:04:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 11:04:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 11:04:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 11:04:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 11:04:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 11:04:34'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 11:04:34'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 11:04:34'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 11:04:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 11:04:34'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 11:04:34'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 11:04:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 11:04:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 11:04:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 11:04:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 11:04:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:04:34'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:04:34'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 11:04:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 11:04:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 11:04:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 11:04:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 11:04:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 11:04:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 11:04:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 11:04:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 11:04:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 11:04:34'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:04:42'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:04:42'!
FAILURE!

cart _ Cart acceptingItemsOf: (Dictionary new add: 'Fede'->50;yourself).!

cart add: 2 of: 'Fede'!

cart listCart !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 11:05:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 11:05:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 11:05:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 11:05:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:05:13'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:05:13'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 11:05:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 11:05:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 11:05:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 11:05:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 11:05:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 11:05:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 11:05:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 11:05:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 11:05:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 11:05:13'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:05:29'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:05:29'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:05:33'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 11:05:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 11:05:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 11:05:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 11:05:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:05:36'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:05:36'!
FAILURE!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 11:05:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 11:05:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 11:05:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 11:05:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 11:05:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 11:05:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 11:05:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 11:05:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 11:05:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 11:05:36'!
PASSED!

facade!

facade!

anAmount!

self itemsAsDictionary !

facade listCart: cartId!

anAmount!

(facade listCart: cartId) occurrencesOf: objectFactory itemSellByTheStore!
!TusLibrosFacadeTest methodsFor: 'utils' stamp: 'fr 12/3/2020 11:08:29' prior: 50890188!
assertListingACartReflectsAddedProductsWithAmount: anAmount

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.
	facade add: anAmount of: objectFactory itemSellByTheStore toCart: cartId.
	self assert: ((facade listCart: cartId) at: objectFactory itemSellByTheStore) equals: anAmount.! !

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:08:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 11:08:35'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 11:08:35'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 11:08:35'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 11:08:35'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:08:35'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:08:35'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 11:08:35'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 11:08:35'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 11:08:35'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 11:08:35'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 11:08:35'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 11:08:35'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 11:08:35'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 11:08:35'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 11:08:35'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 11:08:35'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 11:08:37'!
PASSED!

----SNAPSHOT----(3 December 2020 11:09:30) CuisUniversity-4384.image priorSource: 17913611!

----SNAPSHOT----(3 December 2020 11:10:29) CuisUniversity-4384.image priorSource: 17953636!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 11:12:35' prior: 50891455!

notas! !

!methodRemoval: TusLibrosFacadeTest #notas stamp: 'fr 12/3/2020 11:12:37'!
notas!
!TusLibrosFacade methodsFor: 'id' stamp: 'fr 12/3/2020 11:14:08'!
newCartId
	
	currentCartId _ currentCartId + 1! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 11:14:08' prior: 50891854!
newCartForUser: aUsername andPassword: aPassword 
	
	self validateUsername: aPassword withPassword: aUsername.
	self newCartId.
	cartsSessions add: currentCartId -> (self newCartSessionFor: aUsername).
	^currentCartId ! !

!methodRemoval: TusLibrosFacade #updateCartId stamp: 'fr 12/3/2020 11:14:08'!
updateCartId
	
	currentCartId _ currentCartId + 1!
!TusLibrosFacade methodsFor: 'id' stamp: 'fr 12/3/2020 11:14:17' prior: 50892713!
newCartId
	
	currentCartId _ currentCartId + 1.
	^currentCartId ! !
!TusLibrosFacade methodsFor: 'cart management' stamp: 'fr 12/3/2020 11:14:45' prior: 50892718!
newCartForUser: aUsername andPassword: aPassword 
	
	self validateUsername: aPassword withPassword: aUsername.
	cartsSessions add: currentCartId -> (self newCartSessionFor: aUsername).
	^self newCartId.
 ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 11:14:49'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 11:14:49'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 11:14:49'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 11:14:49'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 11:14:49'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 11:14:49'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 11:14:49'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 11:14:49'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 11:14:49'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 11:14:49'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 11:14:49'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 11:14:49'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 11:14:49'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 11:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 11:14:49'!
ERROR!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 11:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 11:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 11:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:14:49'!
ERROR!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:14:49'!
ERROR!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 11:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 11:14:49'!
ERROR!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 11:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 11:14:49'!
ERROR!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 11:14:49'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 11:14:49'!
ERROR!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 11:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 11:14:49'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 11:14:49'!
ERROR!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 11:14:49'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 11:14:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 11:14:56'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 11:14:56'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 11:14:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 11:14:56'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 11:14:56'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 11:14:56'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 11:14:56'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 11:14:56'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 11:14:56'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 11:14:56'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 11:14:56'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 11:14:56'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 11:14:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 11:14:56'!
ERROR!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 11:14:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 11:14:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 11:14:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:14:56'!
ERROR!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:14:56'!
ERROR!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 11:14:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 11:14:56'!
ERROR!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 11:14:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 11:14:56'!
ERROR!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 11:14:56'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 11:14:56'!
ERROR!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 11:14:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 11:14:56'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 11:14:56'!
ERROR!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 11:14:56'!
ERROR!
!TusLibrosFacade methodsFor: 'initialization' stamp: 'fr 12/3/2020 11:15:03' prior: 50891865!
initializeAcceptingItemsOf: aCatalogue validatingUsersThrough: anAuthenticator registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor withClock: aClock 
	
	catalogue _ aCatalogue.
	authenticator _ anAuthenticator.
	salesBook _ aSalesBook.
	merchantProcessor _ aMerchantProcessor.
	clock _ aClock.
	
	cartsSessions _ Dictionary new.
	currentCartId _ 1.
	currentTransactionId _ 0
! !
!TusLibrosFacade methodsFor: 'initialization' stamp: 'fr 12/3/2020 11:15:05' prior: 50892952!
initializeAcceptingItemsOf: aCatalogue validatingUsersThrough: anAuthenticator registeringSalesOn: aSalesBook chargingThrough: aMerchantProcessor withClock: aClock 
	
	catalogue _ aCatalogue.
	authenticator _ anAuthenticator.
	salesBook _ aSalesBook.
	merchantProcessor _ aMerchantProcessor.
	clock _ aClock.
	
	cartsSessions _ Dictionary new.
	currentCartId _ 1.
	currentTransactionId _ 1
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 11:15:09'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 11:15:09'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 11:15:09'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 11:15:09'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 11:15:09'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 11:15:09'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 11:15:09'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 11:15:09'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 11:15:09'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 11:15:09'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 11:15:09'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 11:15:09'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 11:15:09'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 11:15:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 11:15:09'!
ERROR!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 11:15:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 11:15:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 11:15:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:15:09'!
ERROR!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:15:09'!
ERROR!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 11:15:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 11:15:09'!
ERROR!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 11:15:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 11:15:09'!
ERROR!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 11:15:09'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 11:15:09'!
ERROR!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 11:15:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 11:15:09'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 11:15:09'!
ERROR!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 11:15:09'!
ERROR!
!TusLibrosFacade methodsFor: 'id' stamp: 'fr 12/3/2020 11:15:49' prior: 50892732!
newCartId
	
	currentCartId _ currentCartId + 1.
! !
!TusLibrosFacade methodsFor: 'cart management' stamp: 'fr 12/3/2020 11:16:17' prior: 50892738!
newCartForUser: aUsername andPassword: aPassword 
	
	self validateUsername: aPassword withPassword: aUsername.
	self newCartId.
	cartsSessions add: currentCartId -> (self newCartSessionFor: aUsername).
	^currentCartId .
 ! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 11:16:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 11:16:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 11:16:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 11:16:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:16:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:16:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 11:16:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 11:16:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 11:16:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 11:16:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 11:16:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 11:16:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 11:16:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 11:16:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 11:16:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 11:16:18'!
PASSED!
!TusLibrosFacade methodsFor: 'id' stamp: 'fr 12/3/2020 11:16:32'!
updateCartId
	
	currentCartId _ currentCartId + 1.
! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 11:16:32' prior: 50893090!
newCartForUser: aUsername andPassword: aPassword 
	
	self validateUsername: aPassword withPassword: aUsername.
	self updateCartId.
	cartsSessions add: currentCartId -> (self newCartSessionFor: aUsername).
	^currentCartId .
 ! !

!methodRemoval: TusLibrosFacade #newCartId stamp: 'fr 12/3/2020 11:16:32'!
newCartId
	
	currentCartId _ currentCartId + 1.
!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 11:18:14' prior: 50881492!
test13CanNotAddItemsToAnExpiredCart

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock advanceHalfAnHour.
	self  should: [facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
				self assert: anError messageText equals: TusLibrosFacade cartExpiredErrorDescription
			]
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 11:18:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 11:18:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 11:18:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 11:18:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 11:18:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:18:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:18:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 11:18:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 11:18:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 11:18:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 11:18:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 11:18:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 11:18:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 11:18:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 11:18:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 11:18:15'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 11:18:15'!
PASSED!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 11:18:52' prior: 50893176!
test13CanNotAddItemsToAnExpiredCart

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock advanceHalfAnHour.
	self  should: [facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
				self assert: anError messageText equals: TusLibrosFacade cartExpiredErrorDescription
				clock goBackHalfAnHour.
				self assert: (facade listCart: cartId) isEmpty
			]
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 11:18:54'!
ERROR!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 11:19:11'!
ERROR!
!TusLibrosFacadeTest methodsFor: 'tests' stamp: 'fr 12/3/2020 11:19:21' prior: 50893253!
test13CanNotAddItemsToAnExpiredCart

	| cartId |
	cartId _ facade newCartForUser: objectFactory validUser andPassword: objectFactory validPassword.	
	clock advanceHalfAnHour.
	self  should: [facade add: 1 of: objectFactory itemSellByTheStore toCart: cartId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
				self assert: anError messageText equals: TusLibrosFacade cartExpiredErrorDescription.
				clock goBackHalfAnHour.
				self assert: (facade listCart: cartId) isEmpty
			]
	
	
	
	
	! !

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 11:19:22'!
ERROR!
!Clock methodsFor: 'time' stamp: 'fr 12/3/2020 11:19:31'!
goBackHalfAnHour
	self shouldBeImplemented.! !
!Clock methodsFor: 'time' stamp: 'fr 12/3/2020 11:19:42' prior: 50893301!
goBackHalfAnHour
	
	now _ now - 30 minutes! !

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 11:19:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 11:19:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 11:19:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 11:19:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 11:19:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:19:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:19:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 11:19:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 11:19:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 11:19:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 11:19:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 11:19:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 11:19:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 11:19:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 11:19:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 11:19:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 11:19:44'!
PASSED!
!CartSession methodsFor: 'validation' stamp: 'fr 12/3/2020 11:20:41' prior: 50881843!
assertCartHasNotExpired

	^ (facade now - lastUsed >= facade sessionDuration) ifTrue: [self error: TusLibrosFacade cartExpiredErrorDescription]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 11:20:44'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 11:20:44'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 11:20:44'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 11:20:44'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 11:20:44'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 11:20:44'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 11:20:44'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 11:20:44'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 11:20:44'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 11:20:44'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 11:20:44'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 11:20:44'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 11:20:44'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 11:20:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 11:20:44'!
ERROR!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 11:20:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 11:20:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 11:20:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:20:44'!
ERROR!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:20:44'!
ERROR!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 11:20:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 11:20:44'!
ERROR!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 11:20:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 11:20:44'!
ERROR!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 11:20:44'!
ERROR!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 11:20:44'!
ERROR!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 11:20:44'!
ERROR!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 11:20:44'!
ERROR!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 11:20:44'!
ERROR!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 11:20:44'!
ERROR!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 11:20:46'!
ERROR!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 11:20:46'!
ERROR!
!TusLibrosFacade methodsFor: 'time' stamp: 'fr 12/3/2020 11:20:57'!
sessionDuration
	self shouldBeImplemented.! !
!TusLibrosFacade methodsFor: 'time' stamp: 'fr 12/3/2020 11:21:01' prior: 50893486!
sessionDuration
	
	^30 minutes! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 11:21:03'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 11:21:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 11:21:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 11:21:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 11:21:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 11:21:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 11:21:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 11:21:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 11:21:05'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 11:21:05'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 11:21:05'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 11:21:05'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 11:21:05'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 11:21:05'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 11:21:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 11:21:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 11:21:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 11:21:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 11:21:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:21:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:21:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 11:21:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 11:21:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 11:21:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 11:21:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 11:21:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 11:21:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 11:21:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 11:21:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 11:21:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 11:21:06'!
PASSED!

----SNAPSHOT----(3 December 2020 11:21:14) CuisUniversity-4384.image priorSource: 17953729!

!methodRemoval: TusLibrosFacade #newCartSession stamp: 'fr 12/3/2020 11:23:49'!
newCartSession

	^ CartSession for: self newCart facade: self!

!methodRemoval: CartSession class #for:facade: stamp: 'fr 12/3/2020 11:23:56'!
for: aCart facade: aFacade 
	
	^self new initializeFor: aCart facade: aFacade !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 11:23:58'!
PASSED!

----SNAPSHOT----(3 December 2020 11:25:52) CuisUniversity-4384.image priorSource: 17982399!

----SNAPSHOT----(3 December 2020 11:26:22) CuisUniversity-4384.image priorSource: 17986070!

----QUIT----(3 December 2020 11:38:52) CuisUniversity-4384.image priorSource: 17986163!

----STARTUP---- (3 December 2020 16:19:05) as /home/fede/Documentos/Facultad/Inge1/Cuises/linux64/CuisUniversity-4384.image!

!TusLibrosFacadeTest methodsFor: 'authenticator' stamp: 'fr 12/3/2020 16:22:21'!
validateUsername: aUsername

	^ credentials at: aUsername ifAbsent: [self error: TusLibrosFacade invalidCredentialsErrorDescription]! !
!TusLibrosFacadeTest methodsFor: 'authenticator' stamp: 'fr 12/3/2020 16:22:21' prior: 50889344!
validateUsername: aUsername withPassword: aPassword 
	
	(self validateUsername: aUsername) = aPassword ifFalse: [self error: TusLibrosFacade invalidCredentialsErrorDescription].
	! !
!TusLibrosFacadeTest methodsFor: 'authenticator' stamp: 'fr 12/3/2020 16:23:09'!
validateUsernameAndObtainPasswordFor: aUsername

	^ credentials at: aUsername ifAbsent: [self error: TusLibrosFacade invalidCredentialsErrorDescription]! !
!TusLibrosFacadeTest methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 16:23:09' prior: 50893736!
validateUsername: aUsername withPassword: aPassword 
	
	(self validateUsernameAndObtainPasswordFor: aUsername) = aPassword ifFalse: [self error: TusLibrosFacade invalidCredentialsErrorDescription].
	! !

!methodRemoval: TusLibrosFacadeTest #validateUsername: stamp: 'fr 12/3/2020 16:23:09'!
validateUsername: aUsername

	^ credentials at: aUsername ifAbsent: [self error: TusLibrosFacade invalidCredentialsErrorDescription]!
!TusLibrosFacadeTest methodsFor: 'authenticator' stamp: 'fr 12/3/2020 16:24:04'!
signalInvalidCredentialsError

	^ self error: TusLibrosFacade invalidCredentialsErrorDescription! !
!TusLibrosFacadeTest methodsFor: 'authenticator' stamp: 'fr 12/3/2020 16:24:04' prior: 50893754!
validateUsername: aUsername withPassword: aPassword 
	
	(self validateUsernameAndObtainPasswordFor: aUsername) = aPassword ifFalse: [self signalInvalidCredentialsError].
	! !
!TusLibrosFacadeTest methodsFor: 'authenticator' stamp: 'fr 12/3/2020 16:24:15' prior: 50893745!
validateUsernameAndObtainPasswordFor: aUsername

	^ credentials at: aUsername ifAbsent: [self signalInvalidCredentialsError]! !

----SNAPSHOT----(3 December 2020 16:24:26) CuisUniversity-4384.image priorSource: 17986256!

!methodRemoval: CartSession #initializeFor:facade: stamp: 'fr 12/3/2020 16:25:11'!
initializeFor: aCart facade: aFacade 
	
	cart _ aCart.
	facade _ aFacade.
	lastUsed _ aFacade now!

----SNAPSHOT----(3 December 2020 16:25:19) CuisUniversity-4384.image priorSource: 17988543!
!CartSession methodsFor: 'validation' stamp: 'fr 12/3/2020 16:25:59'!
cartHasExpired

	^ facade now - lastUsed >= facade sessionDuration! !
!CartSession methodsFor: 'validation' stamp: 'fr 12/3/2020 16:25:59' prior: 50893370!
assertCartHasNotExpired

	^ (self cartHasExpired) ifTrue: [self error: TusLibrosFacade cartExpiredErrorDescription]! !
!CartSession methodsFor: 'validation' stamp: 'fr 12/3/2020 16:26:05' prior: 50893809!
assertCartHasNotExpired

	^self cartHasExpired ifTrue: [self error: TusLibrosFacade cartExpiredErrorDescription]! !

----SNAPSHOT----(3 December 2020 16:26:29) CuisUniversity-4384.image priorSource: 17988819!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 16:26:31'!
PASSED!

----QUIT----(3 December 2020 16:29:21) CuisUniversity-4384.image priorSource: 17989491!

----STARTUP---- (3 December 2020 16:32:37) as /home/fede/Documentos/Facultad/Inge1/Cuises/linux64/CuisUniversity-4384.image!

!TusLibrosFacade methodsFor: 'cart management' stamp: 'fr 12/3/2020 16:33:48'!
do: aBlock forCartSession: aCartId
	
	aBlock value: (self cartSessionForCartId: aCartId) 
	! !
!TusLibrosFacade methodsFor: 'cart management' stamp: 'fr 12/3/2020 16:34:25' prior: 50885449!
listCart: aCartId 
	
	"^(self cartSessionForCartId: aCartId) listCart"
	^self do: [:aCartSession | aCartSession listCart] forCartSession: aCartId 
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 16:34:27'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 16:34:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 16:34:27'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 16:34:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 16:34:27'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 16:34:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 16:34:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 16:34:27'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 16:34:27'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 16:34:27'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 16:34:27'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 16:34:27'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 16:34:27'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 16:34:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 16:34:27'!
ERROR!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 16:34:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 16:34:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 16:34:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 16:34:27'!
ERROR!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 16:34:27'!
ERROR!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 16:34:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 16:34:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 16:34:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 16:34:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 16:34:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 16:34:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 16:34:27'!
ERROR!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 16:34:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 16:34:27'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 16:34:27'!
PASSED!
!TusLibrosFacade methodsFor: 'cart management' stamp: 'fr 12/3/2020 16:34:34' prior: 50893935!
do: aBlock forCartSession: aCartId
	
	^aBlock value: (self cartSessionForCartId: aCartId) 
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 16:34:36'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 16:34:36'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 16:34:36'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 16:34:36'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 16:34:36'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 16:34:36'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 16:34:36'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 16:34:36'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 16:34:36'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 16:34:36'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 16:34:36'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 16:34:36'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 16:34:36'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 16:34:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 16:34:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 16:34:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 16:34:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 16:34:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 16:34:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 16:34:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 16:34:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 16:34:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 16:34:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 16:34:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 16:34:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 16:34:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 16:34:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 16:34:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 16:34:36'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 16:34:36'!
PASSED!
!TusLibrosFacade methodsFor: 'cart management' stamp: 'fr 12/3/2020 16:34:43' prior: 50893941!
listCart: aCartId 
	
	^self do: [:aCartSession | aCartSession listCart] forCartSession: aCartId 
	! !
!TusLibrosFacade methodsFor: 'cart management' stamp: 'fr 12/3/2020 16:35:58' prior: 50891889!
checkoutCart: aCartId withCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner 
	
	^self do: [:aCartSession | 	aCartSession 
							checkoutWithCard: aCardNumber 
							expiringOn: anExpirationDate 
							forOwner: aCardOwner 
							through: merchantProcessor 
							registeringOn: salesBook.
						self removeCart: aCartId.
						^self newTransactionId] 
					
		 forCartSession: aCartId 

		! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 16:36:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 16:36:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 16:36:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 16:36:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 16:36:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 16:36:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 16:36:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 16:36:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 16:36:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 16:36:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 16:36:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 16:36:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 16:36:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 16:36:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 16:36:02'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 16:36:02'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 16:36:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 16:36:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 16:36:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 16:36:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 16:36:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 16:36:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 16:36:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 16:36:05'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 16:36:05'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 16:36:05'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 16:36:05'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 16:36:05'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 16:36:05'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 16:36:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 16:36:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 16:36:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 16:36:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 16:36:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 16:36:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 16:36:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 16:36:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 16:36:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 16:36:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 16:36:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 16:36:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 16:36:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 16:36:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 16:36:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 16:36:05'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 16:36:05'!
PASSED!
!TusLibrosFacade methodsFor: 'cart management' stamp: 'fr 12/3/2020 16:36:41' prior: 50882368!
add: aQuantity of: anItem toCart: aCartId 
	
	self do: [:aCartSession | aCartSession add: aQuantity of: anItem] forCartSession: aCartId 
	! !

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 16:36:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 16:36:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 16:36:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 16:36:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 16:36:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 16:36:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 16:36:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 16:36:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 16:36:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 16:36:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 16:36:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 16:36:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 16:36:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 16:36:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 16:36:42'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 16:36:42'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 16:36:44'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 16:36:44'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 16:36:44'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 16:36:44'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 16:36:44'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 16:36:44'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 16:36:44'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 16:36:44'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 16:36:44'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 16:36:44'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 16:36:44'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 16:36:44'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 16:36:44'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 16:36:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 16:36:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 16:36:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 16:36:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 16:36:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 16:36:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 16:36:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 16:36:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 16:36:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 16:36:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 16:36:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 16:36:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 16:36:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 16:36:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 16:36:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 16:36:44'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 16:36:44'!
PASSED!
!TusLibrosFacade methodsFor: 'cart management' stamp: 'fr 12/3/2020 16:37:33'!
do: aBlock forCartSessionFor: aCartId
	
	^aBlock value: (self cartSessionForCartId: aCartId) 
	! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 16:37:33' prior: 50894160!
listCart: aCartId 
	
	^self do: [:aCartSession | aCartSession listCart] forCartSessionFor: aCartId 
	! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 16:37:33' prior: 50894167!
checkoutCart: aCartId withCard: aCardNumber expiringOn: anExpirationDate forOwner: aCardOwner 
	
	^self do: [:aCartSession | 	aCartSession 
							checkoutWithCard: aCardNumber 
							expiringOn: anExpirationDate 
							forOwner: aCardOwner 
							through: merchantProcessor 
							registeringOn: salesBook.
						self removeCart: aCartId.
						^self newTransactionId] 
					
		 forCartSessionFor: aCartId 

		! !
!TusLibrosFacade methodsFor: 'as yet unclassified' stamp: 'fr 12/3/2020 16:37:33' prior: 50894343!
add: aQuantity of: anItem toCart: aCartId 
	
	self do: [:aCartSession | aCartSession add: aQuantity of: anItem] forCartSessionFor: aCartId 
	! !

!methodRemoval: TusLibrosFacade #do:forCartSession: stamp: 'fr 12/3/2020 16:37:33'!
do: aBlock forCartSession: aCartId
	
	^aBlock value: (self cartSessionForCartId: aCartId) 
	!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 16:37:38'!
PASSED!

----SNAPSHOT----(3 December 2020 16:37:53) CuisUniversity-4384.image priorSource: 17992858!
!Cart methodsFor: 'initialization' stamp: 'fr 12/3/2020 16:39:48' prior: 50882721!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !
!Cart methodsFor: 'listing' stamp: 'fr 12/3/2020 16:40:01' prior: 50892250!
listCart
	
	^items contents 
	! !
!Cart methodsFor: 'enumerating' stamp: 'fr 12/3/2020 16:40:17' prior: 50888804!
itemsQuantitiesAndPricesDo: aBlock 
	
	items contents keysAndValuesDo: [:anItem :aQuantity | aBlock value: anItem value: aQuantity value: (catalog at: anItem)]
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 16:40:18'!
PASSED!

!methodRemoval: Cart #itemsAsDictionary stamp: 'fr 12/3/2020 16:40:26'!
itemsAsDictionary

	^ items asBag sortedElements asDictionary!
!Cart methodsFor: 'adding' stamp: 'fr 12/3/2020 16:40:58' prior: 50882713!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	items add: anItem withOccurrences: aQuantity! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 16:40:59'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 16:40:59'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 16:40:59'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 16:40:59'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 16:40:59'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 16:40:59'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 16:40:59'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 16:40:59'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 16:40:59'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 16:40:59'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 16:40:59'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 16:40:59'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 16:40:59'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 16:40:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 16:40:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 16:40:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 16:40:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 16:40:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 16:40:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 16:40:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 16:40:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 16:40:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 16:40:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 16:40:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 16:40:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 16:40:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 16:40:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 16:40:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 16:40:59'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 16:40:59'!
PASSED!
!TusLibrosFacade methodsFor: 'purchase listing - private' stamp: 'fr 12/3/2020 16:41:46' prior: 50888728!
itemsWithCountsFor: salesForCustomer

	^ (self itemsWithCountsForAllSales: salesForCustomer) contents ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 16:41:48'!
PASSED!

----SNAPSHOT----(3 December 2020 16:41:57) CuisUniversity-4384.image priorSource: 18016173!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 16:43:23'!
PASSED!

----SNAPSHOT----(3 December 2020 16:43:27) CuisUniversity-4384.image priorSource: 18027251!

----QUIT----(3 December 2020 16:45:25) CuisUniversity-4384.image priorSource: 18030618!

----STARTUP---- (3 December 2020 16:46:39) as /home/fede/Documentos/Facultad/Inge1/Cuises/linux64/CuisUniversity-4384.image!


!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 16:46:51'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test01CanCreateNewCartWithValidCredentials stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test02CanNotCreateNewCartForInvalidUser stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test03CanNotCreateNewCartForInvalidPassword stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test04CanNotListNonexistentCart stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test05AddingAnItemIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test06AddingMultipleItemsIsReflectedWhenListingTheCart stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test07CanNotAddItemsToNonexistentCarts stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test08CanCheckoutAValidCart stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test09CanNotCheckoutANonexistentCart stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test10PurchaseListHasTheCorrectQuantityOfItemsAndTotal stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test11CanNotListPurchasesForInvalidUsername stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test12CanNotListPurchasesForInvalidPassword stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test13CanNotAddItemsToAnExpiredCart stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test14CanNotListAnExpiredCart stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test15CanNotCheckoutAnExpiredCart stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

!testRun: #TusLibrosFacadeTest #test16CanNotPerformAnyOperationWithACartAfterCheckout stamp: 'fr 12/3/2020 16:50:16'!
PASSED!

----SNAPSHOT----(3 December 2020 16:50:22) CuisUniversity-4384.image priorSource: 18030711!

----SNAPSHOT----(3 December 2020 16:50:44) CuisUniversity-4384.image priorSource: 18037475!

----SNAPSHOT----(3 December 2020 16:51:07) CuisUniversity-4384.image priorSource: 18037568!