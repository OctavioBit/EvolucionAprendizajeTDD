

----STARTUP---- (29 October 2020 17:21:42) as C:\Program Files\CuisUniversity\CuisUniversity-4365.image!


TestCase subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli-Exercise'!

!classDefinition: #TerniLapilli category: #'TerniLapilli-Exercise' stamp: 'eb 10/29/2020 17:22:19'!
TestCase subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli-Exercise'!

TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli-Exercise'!

!classDefinition: #TerniLapilliTest category: #'TerniLapilli-Exercise' stamp: 'eb 10/29/2020 17:22:23'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli-Exercise'!

!classRemoval: #TerniLapilli stamp: 'eb 10/29/2020 17:22:27'!
TestCase subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli-Exercise'!
!TerniLapilliTest methodsFor: 'no messages' stamp: 'eb 10/29/2020 17:26:13'!
test01AtTheBegginingBoardIsEmpty
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 10/29/2020 17:27:08'!
test02XCloudBePlacedIntoBoard
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 10/29/2020 17:27:21'!
test03OCouldBePlacedIntoBoard
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 10/29/2020 17:27:32'!
test02XCouldBePlacedIntoBoard
	! !

!methodRemoval: TerniLapilliTest #test02XCloudBePlacedIntoBoard stamp: 'eb 10/29/2020 17:27:32'!
test02XCloudBePlacedIntoBoard
	!

Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli-Exercise'!

!classDefinition: #TerniLapilli category: #'TerniLapilli-Exercise' stamp: 'eb 10/29/2020 17:27:48'!
Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli-Exercise'!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 10/29/2020 17:28:25' prior: 50963723!
test01AtTheBegginingBoardIsEmpty
	
	| game |
	
	game _ TerniLapilli new .
	
	game board isEmpty.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 10/29/2020 17:28:37' prior: 50963756!
test01AtTheBegginingBoardIsEmpty
	
	| game |
	
	game _ TerniLapilli new .
	
	self assert: game board isEmpty.
	
	! !

!testRun: #TerniLapilliTest #test01AtTheBegginingBoardIsEmpty stamp: 'eb 10/29/2020 17:28:42'!
ERROR!

!testRun: #TerniLapilliTest #test01AtTheBegginingBoardIsEmpty stamp: 'eb 10/29/2020 17:28:42'!
ERROR!

!testRun: #TerniLapilliTest #test01AtTheBegginingBoardIsEmpty stamp: 'eb 10/29/2020 17:29:04'!
ERROR!

!testRun: #TerniLapilliTest #test01AtTheBegginingBoardIsEmpty stamp: 'eb 10/29/2020 17:29:04'!
ERROR!

!testRun: #TerniLapilliTest #test01AtTheBegginingBoardIsEmpty stamp: 'eb 10/29/2020 17:29:07'!
ERROR!

!testRun: #TerniLapilliTest #test01AtTheBegginingBoardIsEmpty stamp: 'eb 10/29/2020 17:29:07'!
ERROR!

!testRun: #TerniLapilliTest #test01AtTheBegginingBoardIsEmpty stamp: 'eb 10/29/2020 17:29:19'!
ERROR!

!testRun: #TerniLapilliTest #test01AtTheBegginingBoardIsEmpty stamp: 'eb 10/29/2020 17:29:20'!
ERROR!
!TerniLapilli methodsFor: 'accessing' stamp: 'eb 10/29/2020 17:29:32'!
board
	self shouldBeImplemented.! !

!classDefinition: #TerniLapilli category: #'TerniLapilli-Exercise' stamp: 'eb 10/29/2020 17:29:52'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'board'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli-Exercise'!
!TerniLapilli methodsFor: 'accessing' stamp: 'eb 10/29/2020 17:29:48' prior: 50963795!
board

	^ board .! !

!classDefinition: #TerniLapilliBoard category: #'TerniLapilli-Exercise' stamp: 'eb 10/29/2020 17:31:02'!
Object subclass: #TerniLapilliBoard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli-Exercise'!
!TerniLapilli methodsFor: 'nil' stamp: 'eb 10/29/2020 17:30:59' overrides: 16896425!
initialize
	
	board _ TerniLapilliBoard new .! !

!testRun: #TerniLapilliTest #test01AtTheBegginingBoardIsEmpty stamp: 'eb 10/29/2020 17:31:12'!
ERROR!

!testRun: #TerniLapilliTest #test01AtTheBegginingBoardIsEmpty stamp: 'eb 10/29/2020 17:31:12'!
ERROR!
!TerniLapilliBoard methodsFor: 'testing' stamp: 'eb 10/29/2020 17:31:31'!
isEmpty
	self shouldBeImplemented.! !
!TerniLapilliBoard methodsFor: 'testing' stamp: 'eb 10/29/2020 17:31:38' prior: 50963830!
isEmpty
	
	^ true .! !

!testRun: #TerniLapilliTest #test01AtTheBegginingBoardIsEmpty stamp: 'eb 10/29/2020 17:33:03'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 10/29/2020 17:49:07'!
test02XCanInitGame
	
	| game |
	
	game _ TerniLapilli new.
	
	self deny: game isPlayingX. 
	
	self deny: game isPlayingO.
	
	game putXAt: 0@0 .
	
	self assert: game isPlayingX .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 10/29/2020 17:49:21'!
test03OCanInitGame
	
	| game |
	
	game _ TerniLapilli new.
	
	self deny: game isPlayingX. 
	
	self deny: game isPlayingO.
	
	game putXAt: 0@0 .
	
	self assert: game isPlayingX .! !

!methodRemoval: TerniLapilliTest #test02XCouldBePlacedIntoBoard stamp: 'eb 10/29/2020 17:49:24'!
test02XCouldBePlacedIntoBoard
	!

!methodRemoval: TerniLapilliTest #test03OCouldBePlacedIntoBoard stamp: 'eb 10/29/2020 17:49:25'!
test03OCouldBePlacedIntoBoard
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 10/29/2020 17:49:52' prior: 50963850!
test03OCanInitGame
	
	| game |
	
	game _ TerniLapilli new.
	
	self deny: game isPlayingX. 
	
	self deny: game isPlayingO.
	
	game putOAt: 0@0 .
	
	self assert: game isPlayingX .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 10/29/2020 17:52:05'!
test03OCanotInitGame
	
	| game |
	
	game _ TerniLapilli new.
	
	self deny: game isPlayingX. 
	
	self deny: game isPlayingO.
	
	self should: [ game putOAt: 0@0. ]
		raise: Error
		withMessageText: game class onlyXCanInitGameError .! !

!methodRemoval: TerniLapilliTest #test03OCanInitGame stamp: 'eb 10/29/2020 17:52:09'!
test03OCanInitGame
	
	| game |
	
	game _ TerniLapilli new.
	
	self deny: game isPlayingX. 
	
	self deny: game isPlayingO.
	
	game putOAt: 0@0 .
	
	self assert: game isPlayingX .!

!testRun: #TerniLapilliTest #test02XCanInitGame stamp: 'eb 10/29/2020 17:52:11'!
ERROR!

!testRun: #TerniLapilliTest #test02XCanInitGame stamp: 'eb 10/29/2020 17:52:11'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'eb 10/29/2020 17:52:30'!
isPlayingX
	self shouldBeImplemented.! !

!classDefinition: #TerniLapilli category: #'TerniLapilli-Exercise' stamp: 'eb 10/29/2020 17:52:58'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'board isPlayingX'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli-Exercise'!
!TerniLapilli methodsFor: 'testing' stamp: 'eb 10/29/2020 17:52:57' prior: 50963900!
isPlayingX

	^ isPlayingX.! !

!testRun: #TerniLapilliTest #test02XCanInitGame stamp: 'eb 10/29/2020 17:53:06'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'eb 10/29/2020 17:53:53' prior: 50963819 overrides: 16896425!
initialize
	
	board _ TerniLapilliBoard new .
	
	isPlayingX _ false .! !

!testRun: #TerniLapilliTest #test02XCanInitGame stamp: 'eb 10/29/2020 18:14:27'!
ERROR!

!testRun: #TerniLapilliTest #test02XCanInitGame stamp: 'eb 10/29/2020 18:14:27'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'eb 10/29/2020 18:14:50'!
isPlayingO
	self shouldBeImplemented.! !

!classDefinition: #TerniLapilli category: #'TerniLapilli-Exercise' stamp: 'eb 10/29/2020 18:15:10'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'board isPlayingX isPlayingO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli-Exercise'!
!TerniLapilli methodsFor: 'testing' stamp: 'eb 10/29/2020 18:15:07' prior: 50963930!
isPlayingO
	
	^ isPlayingO.! !

!testRun: #TerniLapilliTest #test02XCanInitGame stamp: 'eb 10/29/2020 18:15:15'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'eb 10/29/2020 18:15:42' prior: 50963920 overrides: 16896425!
initialize
	
	board _ TerniLapilliBoard new .
	
	isPlayingX _ false .
	
	isPlayingO _ false .! !

!testRun: #TerniLapilliTest #test01AtTheBegginingBoardIsEmpty stamp: 'eb 10/29/2020 18:15:47'!
PASSED!

!testRun: #TerniLapilliTest #test02XCanInitGame stamp: 'eb 10/29/2020 18:15:48'!
ERROR!

!testRun: #TerniLapilliTest #test02XCanInitGame stamp: 'eb 10/29/2020 18:15:48'!
ERROR!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 18:16:02'!
putXAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 18:16:16' prior: 50963965!
putXAt: aPoint 
	
	^ self.! !

!testRun: #TerniLapilliTest #test01AtTheBegginingBoardIsEmpty stamp: 'eb 10/29/2020 18:16:20'!
PASSED!

!testRun: #TerniLapilliTest #test02XCanInitGame stamp: 'eb 10/29/2020 18:16:20'!
FAILURE!

!testRun: #TerniLapilliTest #test03OCanotInitGame stamp: 'eb 10/29/2020 18:16:20'!
ERROR!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 18:16:46' prior: 50963970!
putXAt: aPoint 
	
	isPlayingX _ true .
	
	^ self.! !

!testRun: #TerniLapilliTest #test02XCanInitGame stamp: 'eb 10/29/2020 18:16:52'!
PASSED!

!testRun: #TerniLapilliTest #test03OCanotInitGame stamp: 'eb 10/29/2020 18:16:58'!
ERROR!

!testRun: #TerniLapilliTest #test03OCanotInitGame stamp: 'eb 10/29/2020 18:16:58'!
ERROR!
!TerniLapilli class methodsFor: '*Chalten-Time Extensions' stamp: 'eb 10/29/2020 18:17:23'!
onlyXCanInitGameError
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: '*Chalten-Time Extensions' stamp: 'eb 10/29/2020 18:17:41' prior: 50963997!
onlyXCanInitGameError
	
	^ 'Only X can init game' .! !

!testRun: #TerniLapilliTest #test03OCanotInitGame stamp: 'eb 10/29/2020 18:17:58'!
FAILURE!

!testRun: #TerniLapilliTest #test03OCanotInitGame stamp: 'eb 10/29/2020 18:17:58'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 10/29/2020 18:18:22' prior: 50963876!
test03OCanotInitGame
	
	| game |
	
	game _ TerniLapilli new.
	
	self deny: game isPlayingX. 
	
	self deny: game isPlayingO.
	
	self should: [ game putOAt: 0@0. self fail. ]
		raise: Error
		withMessageText: game class onlyXCanInitGameError .! !

!testRun: #TerniLapilliTest #test03OCanotInitGame stamp: 'eb 10/29/2020 18:18:23'!
FAILURE!

!testRun: #TerniLapilliTest #test03OCanotInitGame stamp: 'eb 10/29/2020 18:18:23'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 18:19:30'!
putOAt: aPoint 
	
	board isEmpty ifTrue: [ self error: self class onlyXCanInitGameError. ].
	
	^ self .
	
	! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 18:19:42' prior: 50964029!
putOAt: aPoint 
	
	board isEmpty ifTrue: [ self error: self class onlyXCanInitGameError. ].
	
	! !

!testRun: #TerniLapilliTest #test03OCanotInitGame stamp: 'eb 10/29/2020 18:19:45'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 10/29/2020 18:20:42'!
test03OCannotInitGame
	
	| game |
	
	game _ TerniLapilli new.
	
	self deny: game isPlayingX. 
	
	self deny: game isPlayingO.
	
	self should: [ game putOAt: 0@0. self fail. ]
		raise: Error
		withMessageText: game class onlyXCanInitGameError .! !

!methodRemoval: TerniLapilliTest #test03OCanotInitGame stamp: 'eb 10/29/2020 18:20:42'!
test03OCanotInitGame
	
	| game |
	
	game _ TerniLapilli new.
	
	self deny: game isPlayingX. 
	
	self deny: game isPlayingO.
	
	self should: [ game putOAt: 0@0. self fail. ]
		raise: Error
		withMessageText: game class onlyXCanInitGameError .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 18:24:26'!
test04XCannotPlayTwice
	
	| game |
	
	game _ TerniLapilli new.
	
	game putXAt: 0@0 .
	
	self should: [ game putXAt: 0@1. self fail. ]
		raise: Error
		withMessageText: game class playerCannotPlayTwiceError .! !

!testRun: #TerniLapilliTest #test04XCannotPlayTwice stamp: 'eb 10/29/2020 18:24:38'!
ERROR!

!testRun: #TerniLapilliTest #test04XCannotPlayTwice stamp: 'eb 10/29/2020 18:24:38'!
ERROR!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 10/29/2020 18:24:48'!
playerCannotPlayTwiceError
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 10/29/2020 18:25:00' prior: 50964082!
playerCannotPlayTwiceError

	^ 'Player cannot play twice'.! !

!testRun: #TerniLapilliTest #test01AtTheBegginingBoardIsEmpty stamp: 'eb 10/29/2020 18:25:03'!
PASSED!

!testRun: #TerniLapilliTest #test02XCanInitGame stamp: 'eb 10/29/2020 18:25:03'!
PASSED!

!testRun: #TerniLapilliTest #test03OCannotInitGame stamp: 'eb 10/29/2020 18:25:03'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayTwice stamp: 'eb 10/29/2020 18:25:03'!
FAILURE!

!testRun: #TerniLapilliTest #test04XCannotPlayTwice stamp: 'eb 10/29/2020 18:25:03'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 18:26:02' prior: 50963983!
putXAt: aPoint 
	
	isPlayingX ifTrue: [ self error: self class playerCannotPlayTwiceError ] .
	
	isPlayingX _ true .! !

!testRun: #TerniLapilliTest #test04XCannotPlayTwice stamp: 'eb 10/29/2020 18:26:07'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 18:26:23'!
test05OCannotPlayTwice
	
	| game |
	
	game _ TerniLapilli new.
	
	game putOAt: 0@0 .
	
	self should: [ game putXAt: 0@1. self fail. ]
		raise: Error
		withMessageText: game class playerCannotPlayTwiceError .! !

!testRun: #TerniLapilliTest #test01AtTheBegginingBoardIsEmpty stamp: 'eb 10/29/2020 18:26:25'!
PASSED!

!testRun: #TerniLapilliTest #test02XCanInitGame stamp: 'eb 10/29/2020 18:26:25'!
PASSED!

!testRun: #TerniLapilliTest #test03OCannotInitGame stamp: 'eb 10/29/2020 18:26:25'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayTwice stamp: 'eb 10/29/2020 18:26:25'!
PASSED!

!testRun: #TerniLapilliTest #test05OCannotPlayTwice stamp: 'eb 10/29/2020 18:26:25'!
ERROR!

!testRun: #TerniLapilliTest #test05OCannotPlayTwice stamp: 'eb 10/29/2020 18:26:25'!
ERROR!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 18:26:57' prior: 50964116!
test05OCannotPlayTwice
	
	| game |
	
	game _ TerniLapilli new.
	
	game putXAt: 0@0 .
	
	game putOAt: 0@1 .
	
	self should: [ game putOAt: 0@1. self fail. ]
		raise: Error
		withMessageText: game class playerCannotPlayTwiceError .! !

!testRun: #TerniLapilliTest #test05OCannotPlayTwice stamp: 'eb 10/29/2020 18:27:01'!
ERROR!

!testRun: #TerniLapilliTest #test05OCannotPlayTwice stamp: 'eb 10/29/2020 18:27:01'!
ERROR!

Object subclass: #TerniLapilliBoard
	instanceVariableNames: 'XTokens OTokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli-Exercise'!

!classDefinition: #TerniLapilliBoard category: #'TerniLapilli-Exercise' stamp: 'eb 10/29/2020 18:28:36'!
Object subclass: #TerniLapilliBoard
	instanceVariableNames: 'XTokens OTokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli-Exercise'!
!TerniLapilliBoard methodsFor: 'nil' stamp: 'eb 10/29/2020 18:29:06' overrides: 16896425!
initialize
	
	XTokens _ OrderedCollection new .
	
	OTokens _ OrderedCollection new .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 18:29:53' prior: 50964107!
putXAt: aPoint 
	
	isPlayingX ifTrue: [ self error: self class playerCannotPlayTwiceError ] .
	
	isPlayingX _ true .
	
	board addXToken: aPoint.! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 18:30:08' prior: 50964180!
putXAt: aPoint 
	
	isPlayingX ifTrue: [ self error: self class playerCannotPlayTwiceError ] .
	
	isPlayingX _ true .
	
	board addX: aPoint.! !

!testRun: #TerniLapilliTest #test05OCannotPlayTwice stamp: 'eb 10/29/2020 18:30:16'!
ERROR!

!testRun: #TerniLapilliTest #test05OCannotPlayTwice stamp: 'eb 10/29/2020 18:30:16'!
ERROR!
!TerniLapilliBoard methodsFor: 'as yet unclassified' stamp: 'eb 10/29/2020 18:30:28'!
addX: aPoint 
	self shouldBeImplemented.! !
!TerniLapilliBoard methodsFor: 'as yet unclassified' stamp: 'eb 10/29/2020 18:30:41' prior: 50964201!
addX: aPoint 
	
	XTokens add: aPoint .! !

!testRun: #TerniLapilliTest #test05OCannotPlayTwice stamp: 'eb 10/29/2020 18:30:46'!
ERROR!

!testRun: #TerniLapilliTest #test05OCannotPlayTwice stamp: 'eb 10/29/2020 18:30:46'!
ERROR!
!TerniLapilliBoard methodsFor: 'testing' stamp: 'eb 10/29/2020 18:31:06' prior: 50963834!
isEmpty
	
	^ XTokens isEmpty and: [ OTokens  isEmpty ].! !

!testRun: #TerniLapilliTest #test05OCannotPlayTwice stamp: 'eb 10/29/2020 18:31:12'!
FAILURE!

!testRun: #TerniLapilliTest #test05OCannotPlayTwice stamp: 'eb 10/29/2020 18:31:12'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 18:32:03' prior: 50964036!
putOAt: aPoint 
	
	board isEmpty ifTrue: [ self error: self class onlyXCanInitGameError. ].
	
	isPlayingO ifTrue: [ self error: self class playerCannotPlayTwiceError. ].
	
	isPlayingO _ true .
	! !

!testRun: #TerniLapilliTest #test05OCannotPlayTwice stamp: 'eb 10/29/2020 18:32:08'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 18:43:45'!
test06XCanInitGameAnywhereOnTheBoard! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 18:48:57' prior: 50964239!
test06XCanInitGameAnywhereOnTheBoard

	| game |
	
	game _ TerniLapilli new .
	
	self assert: (game board availablePositions) equals: (-1@1 corner: 1@-1)! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 18:50:27'!
test06AtTheBegginingAllBoardPositionsAreAvailable

	| game |
	
	game _ TerniLapilli new .
	
	self assert: (game board availablePositions) equals: (-1@1 corner: 1@-1)! !

!methodRemoval: TerniLapilliTest #test06XCanInitGameAnywhereOnTheBoard stamp: 'eb 10/29/2020 18:50:30'!
test06XCanInitGameAnywhereOnTheBoard

	| game |
	
	game _ TerniLapilli new .
	
	self assert: (game board availablePositions) equals: (-1@1 corner: 1@-1)!

!testRun: #TerniLapilliTest #test06AtTheBegginingAllBoardPositionsAreAvailable stamp: 'eb 10/29/2020 18:50:34'!
ERROR!

!testRun: #TerniLapilliTest #test06AtTheBegginingAllBoardPositionsAreAvailable stamp: 'eb 10/29/2020 18:50:34'!
ERROR!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 18:50:52'!
test01AtTheBeginningBoardIsEmpty
	
	| game |
	
	game _ TerniLapilli new .
	
	self assert: game board isEmpty.
	
	! !

!methodRemoval: TerniLapilliTest #test01AtTheBegginingBoardIsEmpty stamp: 'eb 10/29/2020 18:50:52'!
test01AtTheBegginingBoardIsEmpty
	
	| game |
	
	game _ TerniLapilli new .
	
	self assert: game board isEmpty.
	
	!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 18:50:58'!
test06AtTheBeginningAllBoardPositionsAreAvailable

	| game |
	
	game _ TerniLapilli new .
	
	self assert: (game board availablePositions) equals: (-1@1 corner: 1@-1)! !

!methodRemoval: TerniLapilliTest #test06AtTheBegginingAllBoardPositionsAreAvailable stamp: 'eb 10/29/2020 18:50:58'!
test06AtTheBegginingAllBoardPositionsAreAvailable

	| game |
	
	game _ TerniLapilli new .
	
	self assert: (game board availablePositions) equals: (-1@1 corner: 1@-1)!

!testRun: #TerniLapilliTest #test06AtTheBeginningAllBoardPositionsAreAvailable stamp: 'eb 10/29/2020 18:51:01'!
ERROR!

!testRun: #TerniLapilliTest #test06AtTheBeginningAllBoardPositionsAreAvailable stamp: 'eb 10/29/2020 18:51:01'!
ERROR!
!TerniLapilliBoard methodsFor: 'as yet unclassified' stamp: 'eb 10/29/2020 18:51:13'!
availablePositions
	self shouldBeImplemented.! !
!TerniLapilliBoard methodsFor: 'as yet unclassified' stamp: 'eb 10/29/2020 18:51:24' prior: 50964314!
availablePositions

	^ -1@1 corner: 1@-1 .! !

!testRun: #TerniLapilliTest #test06AtTheBeginningAllBoardPositionsAreAvailable stamp: 'eb 10/29/2020 18:51:26'!
PASSED!

!testRun: #TerniLapilliTest #test06AtTheBeginningAllBoardPositionsAreAvailable stamp: 'eb 10/29/2020 18:51:30'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 18:58:17'!
test07TokensShouldBePlacedIntoBoard

	| game |
	
	game _ TerniLapilli new .
	
	self should: [ game putXAt: -2@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardError.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 18:59:01' prior: 50964331!
test07TokensShouldBePlacedIntoBoard

	| game |
	
	game _ TerniLapilli new .
	
	self should: [ game putXAt: -2@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardError.
		
	self should: [ game putXAt: 0@-2. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardError.
		
	self should: [ game putXAt: 2@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardError.
		
	self should: [ game putXAt: 0@2. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardError.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 19:16:38'!
test01AtTheBeginningBoardIsEmptyAndXShouldPlay
	
	| game |
	
	game _ TerniLapilli new .
	
	self assert: game boardIsEmpty.
	
	self assert: game isPlayingX .
	! !
!TerniLapilli methodsFor: 'initialization' stamp: 'eb 10/29/2020 19:17:09' prior: 50963951 overrides: 16896425!
initialize
		
	isPlayingX _ false .
	
	isPlayingO _ false .! !

!classRemoval: #TerniLapilliBoard stamp: 'eb 10/29/2020 19:17:12'!
Object subclass: #TerniLapilliBoard
	instanceVariableNames: 'XTokens OTokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli-Exercise'!

Object subclass: #TerniLapilli
	instanceVariableNames: 'XTokens OTokens isPlayingX isPlayingO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli-Exercise'!

!classDefinition: #TerniLapilli category: #'TerniLapilli-Exercise' stamp: 'eb 10/29/2020 19:17:17'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'XTokens OTokens isPlayingX isPlayingO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli-Exercise'!
!TerniLapilli methodsFor: 'initialization' stamp: 'eb 10/29/2020 19:17:43' prior: 50964370 overrides: 16896425!
initialize

	XTokens _ OrderedCollection new .
	
	OTokens _ OrderedCollection new .
		
	isPlayingX _ false .
	
	isPlayingO _ false .! !
!TerniLapilli methodsFor: 'initialization' stamp: 'eb 10/29/2020 19:17:46' prior: 50964397 overrides: 16896425!
initialize

	XTokens _ OrderedCollection new .
	
	OTokens _ OrderedCollection new .
		
	isPlayingX _ true .
	
	isPlayingO _ false .! !

!methodRemoval: TerniLapilliTest #test01AtTheBeginningBoardIsEmpty stamp: 'eb 10/29/2020 19:17:54'!
test01AtTheBeginningBoardIsEmpty
	
	| game |
	
	game _ TerniLapilli new .
	
	self assert: game board isEmpty.
	
	!

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 10/29/2020 19:17:57'!
ERROR!
!TerniLapilli methodsFor: 'testing' stamp: 'eb 10/29/2020 19:18:12'!
boardIsEmpty
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'testing' stamp: 'eb 10/29/2020 19:18:33' prior: 50964422!
boardIsEmpty
	
	^ XTokens isEmpty and: [ OTokens  isEmpty ] .! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 10/29/2020 19:18:39'!
PASSED!

!methodRemoval: TerniLapilliTest #test02XCanInitGame stamp: 'eb 10/29/2020 19:18:55'!
test02XCanInitGame
	
	| game |
	
	game _ TerniLapilli new.
	
	self deny: game isPlayingX. 
	
	self deny: game isPlayingO.
	
	game putXAt: 0@0 .
	
	self assert: game isPlayingX .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 19:19:13'!
test02OCannotInitGame
	
	| game |
	
	game _ TerniLapilli new.
	
	self deny: game isPlayingX. 
	
	self deny: game isPlayingO.
	
	self should: [ game putOAt: 0@0. self fail. ]
		raise: Error
		withMessageText: game class onlyXCanInitGameError .! !

!methodRemoval: TerniLapilliTest #test03OCannotInitGame stamp: 'eb 10/29/2020 19:19:13'!
test03OCannotInitGame
	
	| game |
	
	game _ TerniLapilli new.
	
	self deny: game isPlayingX. 
	
	self deny: game isPlayingO.
	
	self should: [ game putOAt: 0@0. self fail. ]
		raise: Error
		withMessageText: game class onlyXCanInitGameError .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 19:19:27' prior: 50964443!
test02OCannotInitGame
	
	| game |
	
	game _ TerniLapilli new.
	
	self should: [ game putOAt: 0@0. self fail. ]
		raise: Error
		withMessageText: game class onlyXCanInitGameError .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 19:19:42' prior: 50964464!
test02OCannotInitGame
	
	| game |
	
	game _ TerniLapilli new.
	
	self should: [ game putOAt: 0@0. self fail. ]
		raise: Error
		withMessageText: game class playerXShouldPlay .! !

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 10/29/2020 19:19:46'!
ERROR!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 10/29/2020 19:19:46'!
ERROR!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 10/29/2020 19:19:48'!
ERROR!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 10/29/2020 19:19:48'!
ERROR!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 10/29/2020 19:19:49'!
ERROR!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 10/29/2020 19:19:49'!
ERROR!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 10/29/2020 19:20:01'!
ERROR!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 10/29/2020 19:20:01'!
ERROR!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'eb 10/29/2020 19:20:09'!
playerXShouldPlay
	self shouldBeImplemented.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 19:20:17' prior: 50964473!
test02OCannotInitGame
	
	| game |
	
	game _ TerniLapilli new.
	
	self should: [ game putOAt: 0@0. self fail. ]
		raise: Error
		withMessageText: game class playerXShouldPlayErrorDescription .! !

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 10/29/2020 19:20:21'!
ERROR!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 10/29/2020 19:20:29'!
playerXShouldPlayErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 10/29/2020 19:20:44' prior: 50964522!
playerXShouldPlayErrorDescription

	^ 'X player should play' .! !

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 10/29/2020 19:20:48'!
FAILURE!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 10/29/2020 19:20:48'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 19:21:33' prior: 50964227!
putOAt: aPoint 
	
	isPlayingX ifTrue: [ self class playerXShouldPlayErrorDescription ].! !

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 10/29/2020 19:21:37'!
FAILURE!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 10/29/2020 19:21:37'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 19:21:57' prior: 50964539!
putOAt: aPoint 
	
	isPlayingX ifTrue: [ self error: self class playerXShouldPlayErrorDescription ].! !

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 10/29/2020 19:22:00'!
PASSED!

!testRun: #TerniLapilliTest #test04XCannotPlayTwice stamp: 'eb 10/29/2020 19:22:19'!
ERROR!

!testRun: #TerniLapilliTest #test04XCannotPlayTwice stamp: 'eb 10/29/2020 19:22:19'!
ERROR!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 19:23:28'!
test03OPlaysAfterX
	
	| game |
	
	game _ TerniLapilli new.
	
	game putXAt: 0@0 .
	
	self assert: game isPlayingO .! !

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 10/29/2020 19:23:35'!
ERROR!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 10/29/2020 19:23:35'!
ERROR!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 19:23:55' prior: 50964188!
putXAt: aPoint 
	
	isPlayingO _ true .! !

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 10/29/2020 19:23:58'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 19:24:17'!
test03XPlaysAfterO
	
	| game |
	
	game _ TerniLapilli new.
	
	game putXAt: 0@0 .
	
	game putOAt: 0@1 .
	
	self assert: game isPlayingX .! !

!testRun: #TerniLapilliTest #test03XPlaysAfterO stamp: 'eb 10/29/2020 19:24:18'!
ERROR!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 19:24:36'!
test04XPlaysAfterO
	
	| game |
	
	game _ TerniLapilli new.
	
	game putXAt: 0@0 .
	
	game putOAt: 0@1 .
	
	self assert: game isPlayingX .! !

!methodRemoval: TerniLapilliTest #test03XPlaysAfterO stamp: 'eb 10/29/2020 19:24:39'!
test03XPlaysAfterO
	
	| game |
	
	game _ TerniLapilli new.
	
	game putXAt: 0@0 .
	
	game putOAt: 0@1 .
	
	self assert: game isPlayingX .!

!methodRemoval: TerniLapilliTest #test04XCannotPlayTwice stamp: 'eb 10/29/2020 19:24:41'!
test04XCannotPlayTwice
	
	| game |
	
	game _ TerniLapilli new.
	
	game putXAt: 0@0 .
	
	self should: [ game putXAt: 0@1. self fail. ]
		raise: Error
		withMessageText: game class playerCannotPlayTwiceError .!

!methodRemoval: TerniLapilliTest #test05OCannotPlayTwice stamp: 'eb 10/29/2020 19:24:44'!
test05OCannotPlayTwice
	
	| game |
	
	game _ TerniLapilli new.
	
	game putXAt: 0@0 .
	
	game putOAt: 0@1 .
	
	self should: [ game putOAt: 0@1. self fail. ]
		raise: Error
		withMessageText: game class playerCannotPlayTwiceError .!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 19:24:58' prior: 50964551!
putOAt: aPoint 
	
	isPlayingX ifTrue: [ self error: self class playerXShouldPlayErrorDescription ].
	
	isPlayingX _ true .! !

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 10/29/2020 19:25:02'!
ERROR!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 10/29/2020 19:25:02'!
ERROR!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 10/29/2020 19:25:06'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 10/29/2020 19:25:08'!
ERROR!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 10/29/2020 19:25:08'!
ERROR!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 19:25:42' prior: 50964578!
putXAt: aPoint 
	
	isPlayingX _ false .
	
	isPlayingO _ true .! !

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 10/29/2020 19:25:47'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 19:26:05' prior: 50964595!
test04XPlaysAfterO
	
	| game |
	
	game _ TerniLapilli new.
	
	game putXAt: 0@0 .
	
	game putOAt: 0@1 .
	
	self assert: game isPlayingX .
	
	self deny: game isPlayingO .! !

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 10/29/2020 19:26:06'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 19:26:26' prior: 50964629!
putOAt: aPoint 
	
	isPlayingX ifTrue: [ self error: self class playerXShouldPlayErrorDescription ].
	
	isPlayingO _ false .
	
	isPlayingX _ true .! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 10/29/2020 19:26:29'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 10/29/2020 19:26:29'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 10/29/2020 19:26:29'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 10/29/2020 19:26:29'!
PASSED!

!testRun: #TerniLapilliTest #test06AtTheBeginningAllBoardPositionsAreAvailable stamp: 'eb 10/29/2020 19:26:29'!
ERROR!

!testRun: #TerniLapilliTest #test07TokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 19:26:29'!
ERROR!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 10/29/2020 19:26:33'!
PASSED!

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 10/29/2020 19:26:36'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 10/29/2020 19:26:37'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 10/29/2020 19:26:38'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 10/29/2020 19:26:39'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 19:27:02' prior: 50964566!
test03OPlaysAfterX
	
	| game |
	
	game _ TerniLapilli new.
	
	game putXAt: 0@0 .
	
	self assert: game isPlayingO .
	
	self deny: game isPlayingX .! !

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 10/29/2020 19:27:04'!
PASSED!

Object subclass: #TerniLapilli
	instanceVariableNames: 'XTokens OTokens isPlayingX'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli-Exercise'!

!classDefinition: #TerniLapilli category: #'TerniLapilli-Exercise' stamp: 'eb 10/29/2020 19:28:06'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'XTokens OTokens isPlayingX'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli-Exercise'!
!TerniLapilli methodsFor: 'initialization' stamp: 'eb 10/29/2020 19:28:15' prior: 50964405 overrides: 16896425!
initialize

	XTokens _ OrderedCollection new .
	
	OTokens _ OrderedCollection new .
		
	isPlayingX _ true .! !
!TerniLapilli methodsFor: 'testing' stamp: 'eb 10/29/2020 19:28:36' prior: 50963943!
isPlayingO
	
	^ isPlayingX not .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 19:29:05' prior: 50964669!
putOAt: aPoint 
	
	isPlayingX ifTrue: [ self error: self class playerXShouldPlayErrorDescription ].
		
	isPlayingX _ true .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 19:29:10' prior: 50964650!
putXAt: aPoint 
	
	isPlayingX _ false .! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 10/29/2020 19:29:13'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 10/29/2020 19:29:14'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 10/29/2020 19:29:15'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 10/29/2020 19:29:16'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 19:29:36' prior: 50964289!
test06AtTheBeginningAllBoardPositionsAreAvailable

	| game |
	
	game _ TerniLapilli new .
	
	self assert: (game board) equals: (-1@1 corner: 1@-1)! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 10/29/2020 19:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 10/29/2020 19:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 10/29/2020 19:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 10/29/2020 19:29:40'!
PASSED!

!testRun: #TerniLapilliTest #test06AtTheBeginningAllBoardPositionsAreAvailable stamp: 'eb 10/29/2020 19:29:40'!
FAILURE!

!testRun: #TerniLapilliTest #test07TokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 19:29:40'!
ERROR!

!methodRemoval: TerniLapilli #board stamp: 'eb 10/29/2020 19:29:49'!
board

	^ board .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 19:30:01'!
test05AtTheBeginningAllBoardPositionsAreAvailable

	| game |
	
	game _ TerniLapilli new .
	
	self assert: (game board) equals: (-1@1 corner: 1@-1)! !

!methodRemoval: TerniLapilliTest #test06AtTheBeginningAllBoardPositionsAreAvailable stamp: 'eb 10/29/2020 19:30:01'!
test06AtTheBeginningAllBoardPositionsAreAvailable

	| game |
	
	game _ TerniLapilli new .
	
	self assert: (game board) equals: (-1@1 corner: 1@-1)!

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 10/29/2020 19:30:07'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 10/29/2020 19:30:07'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 10/29/2020 19:30:07'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 10/29/2020 19:30:07'!
PASSED!

!testRun: #TerniLapilliTest #test05AtTheBeginningAllBoardPositionsAreAvailable stamp: 'eb 10/29/2020 19:30:07'!
ERROR!

!testRun: #TerniLapilliTest #test07TokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 19:30:07'!
ERROR!

!testRun: #TerniLapilliTest #test05AtTheBeginningAllBoardPositionsAreAvailable stamp: 'eb 10/29/2020 19:30:10'!
ERROR!

!testRun: #TerniLapilliTest #test05AtTheBeginningAllBoardPositionsAreAvailable stamp: 'eb 10/29/2020 19:30:10'!
ERROR!
!TerniLapilli methodsFor: 'accessing' stamp: 'eb 10/29/2020 19:30:22'!
board
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'accessing' stamp: 'eb 10/29/2020 19:30:34' prior: 50964843!
board
	
	^ -1@1 corner: 1@-1 .! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 10/29/2020 19:30:37'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 10/29/2020 19:30:37'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 10/29/2020 19:30:37'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 10/29/2020 19:30:37'!
PASSED!

!testRun: #TerniLapilliTest #test05AtTheBeginningAllBoardPositionsAreAvailable stamp: 'eb 10/29/2020 19:30:37'!
PASSED!

!testRun: #TerniLapilliTest #test07TokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 19:30:37'!
ERROR!

!testRun: #TerniLapilliTest #test07TokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 19:30:37'!
ERROR!

!testRun: #TerniLapilliTest #test05AtTheBeginningAllBoardPositionsAreAvailable stamp: 'eb 10/29/2020 19:30:48'!
PASSED!

!testRun: #TerniLapilliTest #test07TokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 19:31:10'!
ERROR!

!testRun: #TerniLapilliTest #test07TokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 19:31:10'!
ERROR!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 19:31:34' prior: 50964341!
test07TokensShouldBePlacedIntoBoard

	| game |
	
	game _ TerniLapilli new .
	
	self should: [ game putXAt: -2@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@-2. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 2@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@2. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.! !

!testRun: #TerniLapilliTest #test07TokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 19:32:54'!
ERROR!

!testRun: #TerniLapilliTest #test07TokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 19:32:54'!
ERROR!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'eb 10/29/2020 19:33:02'!
playerIsOutsideBoardErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'eb 10/29/2020 19:33:28' prior: 50964913!
playerIsOutsideBoardErrorDescription
	
	^ 'Player is outside board'.! !

!testRun: #TerniLapilliTest #test07TokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 19:33:33'!
FAILURE!

!testRun: #TerniLapilliTest #test07TokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 19:33:33'!
FAILURE!

!methodRemoval: TerniLapilli class #onlyXCanInitGameError stamp: 'eb 10/29/2020 19:37:39'!
onlyXCanInitGameError
	
	^ 'Only X can init game' .!

!methodRemoval: TerniLapilli class #playerCannotPlayTwiceError stamp: 'eb 10/29/2020 19:37:46'!
playerCannotPlayTwiceError

	^ 'Player cannot play twice'.!

!methodRemoval: TerniLapilli class #playerXShouldPlay stamp: 'eb 10/29/2020 19:38:09'!
playerXShouldPlay
	self shouldBeImplemented.!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 10/29/2020 19:38:22' prior: 50964528!
playerXShouldPlayErrorDescription

	^ 'Player X should play' .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 19:38:42' prior: 50964754!
putXAt: aPoint 
	
	(self board containsPoint: aPoint) ifFalse: [ self error: self class playerIsOutsideBoardErrorDescription ].
	
	isPlayingX _ false .! !

!testRun: #TerniLapilliTest #test07TokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 19:38:51'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 19:39:30'!
test07XTokensShouldBePlacedIntoBoard

	| game |
	
	game _ TerniLapilli new .
	
	self should: [ game putXAt: -2@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@-2. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 2@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@2. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.! !

!methodRemoval: TerniLapilliTest #test07TokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 19:39:30'!
test07TokensShouldBePlacedIntoBoard

	| game |
	
	game _ TerniLapilli new .
	
	self should: [ game putXAt: -2@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@-2. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 2@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@2. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 19:39:57'!
test06XTokensShouldBePlacedIntoBoard

	| game |
	
	game _ TerniLapilli new .
	
	self should: [ game putXAt: -2@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@-2. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 2@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@2. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.! !

!methodRemoval: TerniLapilliTest #test07XTokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 19:39:57'!
test07XTokensShouldBePlacedIntoBoard

	| game |
	
	game _ TerniLapilli new .
	
	self should: [ game putXAt: -2@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@-2. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 2@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@2. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 19:40:26'!
test07OTokensShouldBePlacedIntoBoard

	| game |
	
	game _ TerniLapilli new .
	
	self should: [ game putOAt: -2@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@-2. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 2@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@2. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.! !

!testRun: #TerniLapilliTest #test07OTokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 19:40:30'!
FAILURE!

!testRun: #TerniLapilliTest #test07OTokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 19:40:30'!
FAILURE!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 19:40:56' prior: 50965049!
test07OTokensShouldBePlacedIntoBoard

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	self should: [ game putOAt: -2@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@-2. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 2@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@2. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.! !

!testRun: #TerniLapilliTest #test07OTokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 19:41:00'!
ERROR!

!testRun: #TerniLapilliTest #test07OTokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 19:41:00'!
ERROR!

!testRun: #TerniLapilliTest #test06XTokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 19:41:11'!
PASSED!

!testRun: #TerniLapilliTest #test07OTokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 19:41:13'!
ERROR!

!testRun: #TerniLapilliTest #test07OTokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 19:41:13'!
ERROR!

self board!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 20:24:56' prior: 50965078!
test07OTokensShouldBePlacedIntoBoard

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: -1@1 .
	
	self should: [ game putOAt: -2@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@-2. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 2@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@2. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.! !

!testRun: #TerniLapilliTest #test07OTokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 20:24:59'!
ERROR!

!testRun: #TerniLapilliTest #test07OTokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 20:24:59'!
ERROR!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 20:25:39' prior: 50965118!
test07OTokensShouldBePlacedIntoBoard

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: -0.9@0.9 .
	
	self should: [ game putOAt: -2@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@-2. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 2@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@2. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.! !

!testRun: #TerniLapilliTest #test07OTokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 20:25:41'!
ERROR!

!testRun: #TerniLapilliTest #test07OTokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 20:25:41'!
ERROR!

rectangle!

rectangle _ -1@1 corner: 1@-1.!

rectangle _ -1@1 corner: 1@-1.
!

rectangle _ -1@1 corner: 1@-1.
!

rectangle !

rectangle area !

rectangle _ -1@1 corner: 1@1.
!

rectangle _ -1@1 corner: 1@1.
!

rectangle!

rectangle area !

(-1@1 corner: 1@1) area !

(-1@1 corner: 1@-1) area  !

(-2@2 corner: 2@-2) area  !

(0@0) corner: (10@10)!

(0@0) corner: (10@10) area!

((0@0) corner: (10@10)) area!

((-10@10) corner: (10@10)) area !

(0@0 corner: 2@2) area !

(0@0 corner: 2@2) containsPoint: 0@0!

(0@0 corner: 2@2) containsPoint: 0@1!

(0@0 corner: 2@2) containsPoint: 0@2!

(0@0 corner: 3@3) containsPoint: 0@2!

(0@0 corner: 3@3) containsPoint: 1@0!

(0@0 corner: 3@3) containsPoint: 2@0!

(0@0 corner: 3@3) containsPoint: 3@0!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 20:33:56' prior: 50964801!
test05AtTheBeginningAllBoardPositionsAreAvailable

	| game |
	
	game _ TerniLapilli new .
	
	self assert: (game board) equals: (0@0 corner: 3@3)! !
!TerniLapilli methodsFor: 'accessing' stamp: 'eb 10/29/2020 20:34:03' prior: 50964847!
board
	
	^ 0@0 corner: 3@3 .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 20:34:39' prior: 50965005!
test06XTokensShouldBePlacedIntoBoard

	| game |
	
	game _ TerniLapilli new .
	
	self should: [ game putXAt: -1@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@-1. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 3@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@3. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.! !

!methodRemoval: TerniLapilliTest #test07OTokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 20:34:45'!
test07OTokensShouldBePlacedIntoBoard

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: -0.9@0.9 .
	
	self should: [ game putOAt: -2@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@-2. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 2@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@2. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.!

!testRun: #TerniLapilliTest #test06XTokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 20:34:48'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 20:35:23'!
test07OTokensShouldBePlacedIntoBoard

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0.
	
	self should: [ game putOAt: -1@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@-1. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 3@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@3. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.! !

!testRun: #TerniLapilliTest #test07OTokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 20:35:25'!
FAILURE!

!testRun: #TerniLapilliTest #test07OTokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 20:35:25'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 20:35:50' prior: 50964747!
putOAt: aPoint 

	(self board containsPoint: aPoint) ifFalse: [ self error: self class playerIsOutsideBoardErrorDescription ].
	
	isPlayingX ifTrue: [ self error: self class playerXShouldPlayErrorDescription ].
		
	isPlayingX _ true .! !

!testRun: #TerniLapilliTest #test07OTokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 20:35:58'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 20:39:53' prior: 50965261!
test07OTokensShouldBePlacedIntoBoard

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0.
	
	self should: [ game putOAt: -1@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@-1. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 3@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@3. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 20:40:00'!
test06XTokensShouldBePlacedIntoBoardInAValidPosition

	| game |
	
	game _ TerniLapilli new .
	
	self should: [ game putXAt: -1@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@-1. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 3@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@3. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 20:41:20' prior: 50965327!
test06XTokensShouldBePlacedIntoBoardInAValidPosition

	| game |
	
	game _ TerniLapilli new .
	
	self should: [ game putXAt: -1@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@-1. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 3@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@3. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0.5@1. self fail.]
		raise: Error
		withMessageText: game class canNotLeaveFromEmptySlotErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 20:41:23' prior: 50965350!
test06XTokensShouldBePlacedIntoBoardInAValidPosition

	| game |
	
	game _ TerniLapilli new .
	
	self should: [ game putXAt: -1@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@-1. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 3@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@3. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0.5@1. self fail.]
		raise: Error
		withMessageText: game class playerPositionIsInvalidErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 20:41:35' prior: 50965377!
test06XTokensShouldBePlacedIntoBoardInAValidPosition

	| game |
	
	game _ TerniLapilli new .
	
	self should: [ game putXAt: -1@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@-1. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 3@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@3. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0.5@1. self fail.]
		raise: Error
		withMessageText: game class playerPositionIsInvalidErrorDescription.
	
	self should: [ game putXAt: 1@0.5. self fail.]
		raise: Error
		withMessageText: game class playerPositionIsInvalidErrorDescription.! !

!testRun: #TerniLapilliTest #test06XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 10/29/2020 20:41:38'!
ERROR!

!testRun: #TerniLapilliTest #test06XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 10/29/2020 20:41:39'!
ERROR!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 10/29/2020 20:41:52'!
playerPositionIsInvalidErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 10/29/2020 20:42:06' prior: 50965443!
playerPositionIsInvalidErrorDescription

	^ 'Player position is invalid'.
! !

!testRun: #TerniLapilliTest #test06XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 10/29/2020 20:42:10'!
FAILURE!

!testRun: #TerniLapilliTest #test06XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 10/29/2020 20:42:10'!
FAILURE!

!methodRemoval: TerniLapilliTest #test06XTokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 20:42:15'!
test06XTokensShouldBePlacedIntoBoard

	| game |
	
	game _ TerniLapilli new .
	
	self should: [ game putXAt: -1@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@-1. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 3@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@3. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.!

!testRun: #TerniLapilliTest #test06XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 10/29/2020 20:42:17'!
FAILURE!

!testRun: #TerniLapilliTest #test06XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 10/29/2020 20:42:17'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 20:44:00' prior: 50964950!
putXAt: aPoint 
	
	(self board containsPoint: aPoint) ifFalse: [ self error: self class playerIsOutsideBoardErrorDescription ].
	
	(aPoint isIntegerPoint) ifFalse: [].
	
	isPlayingX _ false .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 20:44:17' prior: 50965492!
putXAt: aPoint 
	
	(self board containsPoint: aPoint) ifFalse: [ self error: self class playerIsOutsideBoardErrorDescription ].
	
	(aPoint isIntegerPoint) ifFalse: [self error: self class playerPositionIsInvalidErrorDescription ].
	
	isPlayingX _ false .! !

!testRun: #TerniLapilliTest #test06XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 10/29/2020 20:44:24'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 20:44:42' prior: 50965305!
test07OTokensShouldBePlacedIntoBoard

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0.
	
	self should: [ game putOAt: -1@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@-1. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 3@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@3. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
		self should: [ game putXAt: 0.5@1. self fail.]
		raise: Error
		withMessageText: game class playerPositionIsInvalidErrorDescription.
	
	self should: [ game putXAt: 1@0.5. self fail.]
		raise: Error
		withMessageText: game class playerPositionIsInvalidErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 20:44:45' prior: 50965516!
test07OTokensShouldBePlacedIntoBoard

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0.
	
	self should: [ game putOAt: -1@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@-1. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 3@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@3. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0.5@1. self fail.]
		raise: Error
		withMessageText: game class playerPositionIsInvalidErrorDescription.
	
	self should: [ game putXAt: 1@0.5. self fail.]
		raise: Error
		withMessageText: game class playerPositionIsInvalidErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 20:45:00'!
test07OTokensShouldBePlacedIntoBoardnAValidPosition

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0.
	
	self should: [ game putOAt: -1@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@-1. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 3@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@3. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0.5@1. self fail.]
		raise: Error
		withMessageText: game class playerPositionIsInvalidErrorDescription.
	
	self should: [ game putXAt: 1@0.5. self fail.]
		raise: Error
		withMessageText: game class playerPositionIsInvalidErrorDescription.! !

!methodRemoval: TerniLapilliTest #test07OTokensShouldBePlacedIntoBoard stamp: 'eb 10/29/2020 20:45:00'!
test07OTokensShouldBePlacedIntoBoard

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0.
	
	self should: [ game putOAt: -1@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@-1. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 3@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@3. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0.5@1. self fail.]
		raise: Error
		withMessageText: game class playerPositionIsInvalidErrorDescription.
	
	self should: [ game putXAt: 1@0.5. self fail.]
		raise: Error
		withMessageText: game class playerPositionIsInvalidErrorDescription.!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 20:45:31' prior: 50965579!
test07OTokensShouldBePlacedIntoBoardnAValidPosition

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0.
	
	self should: [ game putOAt: -1@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@-1. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 3@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@3. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0.5@1. self fail.]
		raise: Error
		withMessageText: game class playerPositionIsInvalidErrorDescription.
	
	self should: [ game putOAt: 1@0.5. self fail.]
		raise: Error
		withMessageText: game class playerPositionIsInvalidErrorDescription.! !

!testRun: #TerniLapilliTest #test07OTokensShouldBePlacedIntoBoardnAValidPosition stamp: 'eb 10/29/2020 20:45:37'!
FAILURE!

!testRun: #TerniLapilliTest #test07OTokensShouldBePlacedIntoBoardnAValidPosition stamp: 'eb 10/29/2020 20:45:37'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 20:46:00' prior: 50965291!
putOAt: aPoint 

	(self board containsPoint: aPoint) ifFalse: [ self error: self class playerIsOutsideBoardErrorDescription ].
	
	(aPoint isIntegerPoint) ifFalse: [self error: self class playerPositionIsInvalidErrorDescription ].
	
	isPlayingX ifTrue: [ self error: self class playerXShouldPlayErrorDescription ].
		
	isPlayingX _ true .! !

!testRun: #TerniLapilliTest #test07OTokensShouldBePlacedIntoBoardnAValidPosition stamp: 'eb 10/29/2020 20:46:05'!
PASSED!
!TerniLapilliTest methodsFor: 'nil' stamp: 'eb 10/29/2020 20:48:47'!
test08XTokensShouldBePlacedIntoAvailablePositions
	
	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	self should: [ game putOAt: 0@0 ]
		raise: Error
		withMessageText: game class positionIsnAvailableErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 10/29/2020 20:48:55' prior: 50965699!
test08XTokensShouldBePlacedIntoAvailablePositions
	
	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	self should: [ game putOAt: 0@0 ]
		raise: Error
		withMessageText: game class positionIsntAvailableErrorDescription.! !

!testRun: #TerniLapilliTest #test08XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/29/2020 20:49:01'!
ERROR!

!testRun: #TerniLapilliTest #test08XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/29/2020 20:49:01'!
ERROR!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 10/29/2020 20:49:11'!
positionIsntAvailableErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 10/29/2020 20:49:37' prior: 50965728!
positionIsntAvailableErrorDescription
	
	^ 'Position isnt available'.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 10/29/2020 20:49:54'!
positionIsNotAvailableErrorDescription
	
	^ 'Position isnt available'.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 10/29/2020 20:49:54' prior: 50965710!
test08XTokensShouldBePlacedIntoAvailablePositions
	
	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	self should: [ game putOAt: 0@0 ]
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription.! !

!methodRemoval: TerniLapilli class #positionIsntAvailableErrorDescription stamp: 'eb 10/29/2020 20:49:54'!
positionIsntAvailableErrorDescription
	
	^ 'Position isnt available'.!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 10/29/2020 20:50:12' prior: 50965739!
positionIsNotAvailableErrorDescription
	
	^ 'Position is not available'.! !

!testRun: #TerniLapilliTest #test08XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/29/2020 20:50:16'!
FAILURE!

!testRun: #TerniLapilliTest #test08XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/29/2020 20:50:16'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 10/29/2020 20:50:29' prior: 50965745!
test08XTokensShouldBePlacedIntoAvailablePositions
	
	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	self should: [ game putOAt: 0@0. self fail. ]
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription.! !

!testRun: #TerniLapilliTest #test08XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/29/2020 20:50:31'!
FAILURE!

!testRun: #TerniLapilliTest #test08XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/29/2020 20:50:31'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 20:50:51' prior: 50965501!
putXAt: aPoint 
	
	(self board containsPoint: aPoint) ifFalse: [ self error: self class playerIsOutsideBoardErrorDescription ].
	
	(aPoint isIntegerPoint) ifFalse: [self error: self class playerPositionIsInvalidErrorDescription ].
	
	XTokens add: aPoint .
	
	isPlayingX _ false .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 20:52:05' prior: 50965682!
putOAt: aPoint 

	(self board containsPoint: aPoint) ifFalse: [ self error: self class playerIsOutsideBoardErrorDescription ].
	
	(aPoint isIntegerPoint) ifFalse: [self error: self class playerPositionIsInvalidErrorDescription ].
	
	(XTokens includes: aPoint) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
	
	isPlayingX ifTrue: [ self error: self class playerXShouldPlayErrorDescription ].
		
	isPlayingX _ true .! !

!testRun: #TerniLapilliTest #test08XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/29/2020 20:52:15'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 10/29/2020 20:52:48' prior: 50965776!
test08XTokensShouldBePlacedIntoAvailablePositions
	
	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 1@0.
	
	self should: [ game putXAt: 0@0. self fail. ]
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription.! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 20:52:57' prior: 50965807!
putOAt: aPoint 

	(self board containsPoint: aPoint) ifFalse: [ self error: self class playerIsOutsideBoardErrorDescription ].
	
	(aPoint isIntegerPoint) ifFalse: [self error: self class playerPositionIsInvalidErrorDescription ].
		
	isPlayingX ifTrue: [ self error: self class playerXShouldPlayErrorDescription ].
		
	isPlayingX _ true .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 20:53:04' prior: 50965795!
putXAt: aPoint 
	
	(self board containsPoint: aPoint) ifFalse: [ self error: self class playerIsOutsideBoardErrorDescription ].
	
	(aPoint isIntegerPoint) ifFalse: [self error: self class playerPositionIsInvalidErrorDescription ].
	
	(XTokens includes: aPoint) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
	
	XTokens add: aPoint .
	
	isPlayingX _ false .! !

!testRun: #TerniLapilliTest #test08XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/29/2020 20:53:09'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 10/29/2020 20:53:19' prior: 50965828!
test08XTokensShouldBePlacedIntoAvailablePositions
	
	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 1@0.
	
	self should: [ game putXAt: 0@0. self fail. ]
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription.
		
	self should: [ game putXAt: 1@0. self fail. ]
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription.! !

!testRun: #TerniLapilliTest #test08XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/29/2020 20:53:20'!
FAILURE!

!testRun: #TerniLapilliTest #test08XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/29/2020 20:53:20'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 20:53:43' prior: 50965854!
putXAt: aPoint 
	
	(self board containsPoint: aPoint) ifFalse: [ self error: self class playerIsOutsideBoardErrorDescription ].
	
	(aPoint isIntegerPoint) ifFalse: [self error: self class playerPositionIsInvalidErrorDescription ].
	
	(XTokens includes: aPoint) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
	
	(OTokens includes: aPoint) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
	
	XTokens add: aPoint .
	
	isPlayingX _ false .! !

!testRun: #TerniLapilliTest #test08XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/29/2020 20:53:49'!
FAILURE!

!testRun: #TerniLapilliTest #test08XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/29/2020 20:53:49'!
FAILURE!

!testRun: #TerniLapilliTest #test08XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/29/2020 20:54:01'!
FAILURE!

!testRun: #TerniLapilliTest #test08XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/29/2020 20:54:01'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 20:54:27' prior: 50965840!
putOAt: aPoint 

	(self board containsPoint: aPoint) ifFalse: [ self error: self class playerIsOutsideBoardErrorDescription ].
	
	(aPoint isIntegerPoint) ifFalse: [self error: self class playerPositionIsInvalidErrorDescription ].
		
	isPlayingX ifTrue: [ self error: self class playerXShouldPlayErrorDescription ].
	
	OTokens add: aPoint .
		
	isPlayingX _ true .! !

!testRun: #TerniLapilliTest #test08XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/29/2020 20:54:32'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 10/29/2020 20:55:10'!
test09OTokensShouldBePlacedIntoAvailablePositions
	
	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 1@0.
	
	game putXAt: 1@1 .
	
	self should: [ game putOAt: 0@0. self fail. ]
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription.
		
	self should: [ game putXAt: 1@0. self fail. ]
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription.! !

!testRun: #TerniLapilliTest #test09OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/29/2020 20:55:12'!
FAILURE!

!testRun: #TerniLapilliTest #test09OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/29/2020 20:55:12'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 20:55:35' prior: 50965931!
putOAt: aPoint 

	(self board containsPoint: aPoint) ifFalse: [ self error: self class playerIsOutsideBoardErrorDescription ].
	
	(aPoint isIntegerPoint) ifFalse: [self error: self class playerPositionIsInvalidErrorDescription ].
	
	(XTokens includes: aPoint) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifTrue: [ self error: self class playerXShouldPlayErrorDescription ].
	
	OTokens add: aPoint .
		
	isPlayingX _ true .! !

!testRun: #TerniLapilliTest #test09OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/29/2020 20:55:40'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 10/29/2020 20:55:51' prior: 50965949!
test09OTokensShouldBePlacedIntoAvailablePositions
	
	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 1@0.
	
	game putXAt: 1@1 .
	
	self should: [ game putOAt: 0@0. self fail. ]
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription.
		
	self should: [ game putOAt: 1@0. self fail. ]
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription.! !

!testRun: #TerniLapilliTest #test09OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/29/2020 20:55:52'!
FAILURE!

!testRun: #TerniLapilliTest #test09OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/29/2020 20:55:52'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 20:56:13' prior: 50965973!
putOAt: aPoint 

	(self board containsPoint: aPoint) ifFalse: [ self error: self class playerIsOutsideBoardErrorDescription ].
	
	(aPoint isIntegerPoint) ifFalse: [self error: self class playerPositionIsInvalidErrorDescription ].
	
	(XTokens includes: aPoint) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
	
	(OTokens includes: aPoint) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifTrue: [ self error: self class playerXShouldPlayErrorDescription ].
	
	OTokens add: aPoint .
		
	isPlayingX _ true .! !

!testRun: #TerniLapilliTest #test09OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/29/2020 20:56:21'!
PASSED!

!methodRemoval: TerniLapilliTest #test05AtTheBeginningAllBoardPositionsAreAvailable stamp: 'eb 10/29/2020 21:00:08'!
test05AtTheBeginningAllBoardPositionsAreAvailable

	| game |
	
	game _ TerniLapilli new .
	
	self assert: (game board) equals: (0@0 corner: 3@3)!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 21:03:30'!
test05XTokensShouldBePlacedIntoBoardInAValidPosition

	| game |
	
	game _ TerniLapilli new .
	
	self should: [ game putXAt: -1@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@-1. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 3@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@3. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0.5@1. self fail.]
		raise: Error
		withMessageText: game class playerPositionIsInvalidErrorDescription.
	
	self should: [ game putXAt: 1@0.5. self fail.]
		raise: Error
		withMessageText: game class playerPositionIsInvalidErrorDescription.! !

!methodRemoval: TerniLapilliTest #test06XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 10/29/2020 21:03:30'!
test06XTokensShouldBePlacedIntoBoardInAValidPosition

	| game |
	
	game _ TerniLapilli new .
	
	self should: [ game putXAt: -1@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@-1. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 3@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@3. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0.5@1. self fail.]
		raise: Error
		withMessageText: game class playerPositionIsInvalidErrorDescription.
	
	self should: [ game putXAt: 1@0.5. self fail.]
		raise: Error
		withMessageText: game class playerPositionIsInvalidErrorDescription.!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 21:03:42'!
test06OTokensShouldBePlacedIntoBoardnAValidPosition

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0.
	
	self should: [ game putOAt: -1@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@-1. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 3@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@3. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0.5@1. self fail.]
		raise: Error
		withMessageText: game class playerPositionIsInvalidErrorDescription.
	
	self should: [ game putOAt: 1@0.5. self fail.]
		raise: Error
		withMessageText: game class playerPositionIsInvalidErrorDescription.! !

!methodRemoval: TerniLapilliTest #test07OTokensShouldBePlacedIntoBoardnAValidPosition stamp: 'eb 10/29/2020 21:03:42'!
test07OTokensShouldBePlacedIntoBoardnAValidPosition

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0.
	
	self should: [ game putOAt: -1@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@-1. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 3@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@3. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0.5@1. self fail.]
		raise: Error
		withMessageText: game class playerPositionIsInvalidErrorDescription.
	
	self should: [ game putOAt: 1@0.5. self fail.]
		raise: Error
		withMessageText: game class playerPositionIsInvalidErrorDescription.!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 21:03:49'!
test07XTokensShouldBePlacedIntoAvailablePositions
	
	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 1@0.
	
	self should: [ game putXAt: 0@0. self fail. ]
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription.
		
	self should: [ game putXAt: 1@0. self fail. ]
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription.! !

!methodRemoval: TerniLapilliTest #test08XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/29/2020 21:03:49'!
test08XTokensShouldBePlacedIntoAvailablePositions
	
	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 1@0.
	
	self should: [ game putXAt: 0@0. self fail. ]
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription.
		
	self should: [ game putXAt: 1@0. self fail. ]
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription.!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 21:03:58'!
test08OTokensShouldBePlacedIntoAvailablePositions
	
	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 1@0.
	
	game putXAt: 1@1 .
	
	self should: [ game putOAt: 0@0. self fail. ]
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription.
		
	self should: [ game putOAt: 1@0. self fail. ]
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription.! !

!methodRemoval: TerniLapilliTest #test09OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/29/2020 21:03:58'!
test09OTokensShouldBePlacedIntoAvailablePositions
	
	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 1@0.
	
	game putXAt: 1@1 .
	
	self should: [ game putOAt: 0@0. self fail. ]
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription.
		
	self should: [ game putOAt: 1@0. self fail. ]
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription.!

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 10/29/2020 21:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 10/29/2020 21:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 10/29/2020 21:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 10/29/2020 21:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test05XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 10/29/2020 21:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test06OTokensShouldBePlacedIntoBoardnAValidPosition stamp: 'eb 10/29/2020 21:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test07XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/29/2020 21:04:02'!
PASSED!

!testRun: #TerniLapilliTest #test08OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/29/2020 21:04:02'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 21:08:08'!
test09XTokensShouldNotBeMoreThanThree

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@1 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 1@2 .
	
	game putOAt: 2@1 .
	
	self should: [ game putXAt: 2@2. self fail.]
		raise: Error
		withMessageText: game class cannotPutMoreThanThreeXTokensErrorDescription .! !

!testRun: #TerniLapilliTest #test09XTokensShouldNotBeMoreThanThree stamp: 'eb 10/29/2020 21:08:12'!
ERROR!

!testRun: #TerniLapilliTest #test09XTokensShouldNotBeMoreThanThree stamp: 'eb 10/29/2020 21:08:12'!
ERROR!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 10/29/2020 21:08:24'!
cannotPutMoreThanThreeXTokensErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 10/29/2020 21:08:44' prior: 50966293!
cannotPutMoreThanThreeXTokensErrorDescription
	
	^ 'Cannot put more than three X tokens into board' .! !

!testRun: #TerniLapilliTest #test09XTokensShouldNotBeMoreThanThree stamp: 'eb 10/29/2020 21:08:47'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 21:10:01' prior: 50965897!
putXAt: aPoint 
	
	(self board containsPoint: aPoint) ifFalse: [ self error: self class playerIsOutsideBoardErrorDescription ].
	
	(aPoint isIntegerPoint) ifFalse: [self error: self class playerPositionIsInvalidErrorDescription ].
	
	(XTokens includes: aPoint) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
	
	(OTokens includes: aPoint) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
	
	(XTokens length = 3) ifTrue: [self error: self class cannotPutMoreThanThreeXTokensErrorDescription ].
	
	XTokens add: aPoint .
	
	isPlayingX _ false .! !

!testRun: #TerniLapilliTest #test09XTokensShouldNotBeMoreThanThree stamp: 'eb 10/29/2020 21:10:16'!
ERROR!

!testRun: #TerniLapilliTest #test09XTokensShouldNotBeMoreThanThree stamp: 'eb 10/29/2020 21:10:16'!
ERROR!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 21:10:39' prior: 50966309!
putXAt: aPoint 
	
	(self board containsPoint: aPoint) ifFalse: [ self error: self class playerIsOutsideBoardErrorDescription ].
	
	(aPoint isIntegerPoint) ifFalse: [self error: self class playerPositionIsInvalidErrorDescription ].
	
	(XTokens includes: aPoint) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
	
	(OTokens includes: aPoint) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
	
	(XTokens size = 3) ifTrue: [self error: self class cannotPutMoreThanThreeXTokensErrorDescription ].
	
	XTokens add: aPoint .
	
	isPlayingX _ false .! !

!testRun: #TerniLapilliTest #test09XTokensShouldNotBeMoreThanThree stamp: 'eb 10/29/2020 21:10:45'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 21:16:07'!
test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@1 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 1@2 .
	
	game putOAt: 2@1 .
	
	self should: [ game putXAt: 2@2. self fail.]
		raise: Error
		withMessageText: game class cannotPutMoreThanThreeXTokensErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 21:19:09' prior: 50966363!
test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	self should: [ game moveXTokenFrom: 0@0 to: 0@1] 
		raise: Error
		withMessageText: game class movementsCanOnlyBeDoneWithThreeTokens .! !

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 10/29/2020 21:19:44'!
ERROR!

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 10/29/2020 21:19:44'!
ERROR!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 10/29/2020 21:19:58'!
movementsCanOnlyBeDoneWithThreeTokens
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 10/29/2020 21:20:13' prior: 50966399!
movementsCanOnlyBeDoneWithThreeTokens
	
	^ 'Movements can only be done with three tokens'.! !

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 10/29/2020 21:20:32'!
FAILURE!

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 10/29/2020 21:20:32'!
FAILURE!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 21:20:53' prior: 50966378!
test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	self should: [ game moveXTokenFrom: 0@0 to: 0@1. self fail. ] 
		raise: Error
		withMessageText: game class movementsCanOnlyBeDoneWithThreeTokens .! !

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 10/29/2020 21:20:56'!
FAILURE!

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 10/29/2020 21:20:56'!
FAILURE!

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 10/29/2020 21:21:47'!
FAILURE!

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 10/29/2020 21:21:47'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 21:22:50'!
moveXTokenFrom: aSourcePoint to: aTargetPoint
	
	self error: self class ! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 21:23:05' prior: 50966448!
moveXTokenFrom: aSourcePoint to: aTargetPoint
	
	self error: self class movementsCanOnlyBeDoneWithThreeTokens.! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 10/29/2020 21:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 10/29/2020 21:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 10/29/2020 21:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 10/29/2020 21:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test05XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 10/29/2020 21:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test06OTokensShouldBePlacedIntoBoardnAValidPosition stamp: 'eb 10/29/2020 21:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test07XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/29/2020 21:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test08OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/29/2020 21:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test09XTokensShouldNotBeMoreThanThree stamp: 'eb 10/29/2020 21:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 10/29/2020 21:23:08'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 21:23:58'!
test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 2@0.
	
	self should: [ game moveXTokenFrom: 0@0 to: 0@1. self fail. ] 
		raise: Error
		withMessageText: game class movementsCanOnlyBeDoneWithThreeTokens .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/29/2020 21:24:08' prior: 50966495!
test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 2@0.
	
	self should: [ game moveOTokenFrom: 0@2 to: 0@1. self fail. ] 
		raise: Error
		withMessageText: game class movementsCanOnlyBeDoneWithThreeTokens .! !

!testRun: #TerniLapilliTest #test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens stamp: 'eb 10/29/2020 21:24:12'!
FAILURE!

!testRun: #TerniLapilliTest #test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens stamp: 'eb 10/29/2020 21:24:12'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/29/2020 21:24:25'!
moveOTokenFrom: aSourcePoint to: aTargetPoint
	
	self error: self class movementsCanOnlyBeDoneWithThreeTokens.! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 10/29/2020 21:24:27'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 10/29/2020 21:24:27'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 10/29/2020 21:24:27'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 10/29/2020 21:24:27'!
PASSED!

!testRun: #TerniLapilliTest #test05XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 10/29/2020 21:24:27'!
PASSED!

!testRun: #TerniLapilliTest #test06OTokensShouldBePlacedIntoBoardnAValidPosition stamp: 'eb 10/29/2020 21:24:27'!
PASSED!

!testRun: #TerniLapilliTest #test07XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/29/2020 21:24:27'!
PASSED!

!testRun: #TerniLapilliTest #test08OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/29/2020 21:24:27'!
PASSED!

!testRun: #TerniLapilliTest #test09XTokensShouldNotBeMoreThanThree stamp: 'eb 10/29/2020 21:24:27'!
PASSED!

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 10/29/2020 21:24:27'!
PASSED!

!testRun: #TerniLapilliTest #test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens stamp: 'eb 10/29/2020 21:24:27'!
PASSED!

----QUIT----(29 October 2020 21:45:07) CuisUniversity-4365.image priorSource: 20225119!

----STARTUP---- (31 October 2020 14:08:29) as C:\Program Files\CuisUniversity\CuisUniversity-4365.image!

!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 14:17:27' prior: 50966509!
test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	self should: [ game moveOTokenFrom: 0@2 to: 1@2. self fail. ] 
		raise: Error
		withMessageText: game class movementsCanOnlyBeDoneWithThreeTokens .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 14:18:00'!
test12XTokensCannotBeMovedToPositionsWithOTokens

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	self should: [ game moveOTokenFrom: 0@2 to: 1@2. self fail. ] 
		raise: Error
		withMessageText: game class movementsCanOnlyBeDoneWithThreeTokens .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 14:20:48' prior: 50966596!
test12XTokensCannotBeMovedToPositionsWithOTokens

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	self should: [ game moveXTokenFrom: 1@0 to: 1@1. self fail. ] 
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription .! !

!testRun: #TerniLapilliTest #test12XTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 10/31/2020 14:20:51'!
FAILURE!

!testRun: #TerniLapilliTest #test12XTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 10/31/2020 14:20:51'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/31/2020 14:24:12' prior: 50966454!
moveXTokenFrom: aSourcePoint to: aTargetPoint
	
	self error: self class movementsCanOnlyBeDoneWithThreeTokens.
	
	(OTokens includes: aTargetPoint) ifTrue: [ ^ self error: self class positionIsNotAvailableErrorDescription .]! !

!testRun: #TerniLapilliTest #test12XTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 10/31/2020 14:24:14'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/31/2020 14:24:38' prior: 50966632!
moveXTokenFrom: aSourcePoint to: aTargetPoint
	
	(OTokens includes: aTargetPoint) ifTrue: [ ^ self error: self class positionIsNotAvailableErrorDescription .] .
	
	self error: self class movementsCanOnlyBeDoneWithThreeTokens.
! !

!testRun: #TerniLapilliTest #test12XTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 10/31/2020 14:24:41'!
PASSED!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/31/2020 14:26:14' prior: 50966646!
moveXTokenFrom: aSourcePoint to: aTargetPoint
	
	[ XTokens remove: aSourcePoint . self putXAt: aTargetPoint ] on: Error do: [ self putXAt: aSourcePoint ].
		
	self error: self class movementsCanOnlyBeDoneWithThreeTokens.
! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/31/2020 14:26:56' prior: 50966660!
moveXTokenFrom: aSourcePoint to: aTargetPoint

	(OTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	[ XTokens remove: aSourcePoint . self putXAt: aTargetPoint ] on: Error do: [ self putXAt: aSourcePoint ].
		
	
! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 10/31/2020 14:27:05'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 10/31/2020 14:27:05'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 10/31/2020 14:27:05'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 10/31/2020 14:27:05'!
PASSED!

!testRun: #TerniLapilliTest #test05XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 10/31/2020 14:27:05'!
PASSED!

!testRun: #TerniLapilliTest #test06OTokensShouldBePlacedIntoBoardnAValidPosition stamp: 'eb 10/31/2020 14:27:05'!
PASSED!

!testRun: #TerniLapilliTest #test07XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/31/2020 14:27:05'!
PASSED!

!testRun: #TerniLapilliTest #test08OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/31/2020 14:27:05'!
PASSED!

!testRun: #TerniLapilliTest #test09XTokensShouldNotBeMoreThanThree stamp: 'eb 10/31/2020 14:27:05'!
PASSED!

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 10/31/2020 14:27:05'!
PASSED!

!testRun: #TerniLapilliTest #test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens stamp: 'eb 10/31/2020 14:27:05'!
PASSED!

!testRun: #TerniLapilliTest #test12XTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 10/31/2020 14:27:05'!
FAILURE!

!testRun: #TerniLapilliTest #test12XTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 10/31/2020 14:27:05'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/31/2020 14:27:58' prior: 50966670!
moveXTokenFrom: aSourcePoint to: aTargetPoint

	(OTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	self putXAt: aTargetPoint .
	
	XTokens remove: aSourcePoint .
		
	
! !

!testRun: #TerniLapilliTest #test12XTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 10/31/2020 14:28:06'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 14:28:55'!
test13XTokensCannotBeMovedToPositionsWithXTokens

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	self should: [ game moveXTokenFrom: 1@0 to: 0@0. self fail. ] 
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription .! !

!testRun: #TerniLapilliTest #test13XTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 10/31/2020 14:28:57'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 14:29:27'!
test14OTokensCannotBeMovedToPositionsWithOTokens

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	self should: [ game moveXTokenFrom: 1@0 to: 0@0. self fail. ] 
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 14:30:41' prior: 50966758!
test14OTokensCannotBeMovedToPositionsWithOTokens

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXTokenFrom: 1@0 to: 2@0.
	
	self should: [ game moveXTokenFrom: 1@0 to: 0@0. self fail. ] 
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 14:32:22' prior: 50966773!
test14OTokensCannotBeMovedToPositionsWithOTokens

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXTokenFrom: 1@0 to: 2@0.
	
	self should: [ game moveOTokenFrom: 1@1 to: 1@2. self fail. ] 
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription .! !

!testRun: #TerniLapilliTest #test14OTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 10/31/2020 14:32:24'!
ERROR!

!testRun: #TerniLapilliTest #test14OTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 10/31/2020 14:32:24'!
ERROR!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/31/2020 14:33:37' prior: 50966530!
moveOTokenFrom: aSourcePoint to: aTargetPoint
	
	(OTokens size < 3) ifTrue: [self error: self class movementsCanOnlyBeDoneWithThreeTokens.] .
	
	self error: self class positionIsNotAvailableErrorDescription .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/31/2020 14:34:57' prior: 50966812!
moveOTokenFrom: aSourcePoint to: aTargetPoint
	
	(OTokens size < 3) ifTrue: [self error: self class movementsCanOnlyBeDoneWithThreeTokens.] .
	
	self error: self class positionIsNotAvailableErrorDescription .! !

!testRun: #TerniLapilliTest #test14OTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 10/31/2020 14:35:17'!
ERROR!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/31/2020 14:38:19' prior: 50966727!
moveXTokenFrom: aSourcePoint to: aTargetPoint

	(OTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
	
	self putXAt: aTargetPoint .
	
	XTokens remove: aSourcePoint .
		
	
! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/31/2020 14:38:45' prior: 50966835!
moveXTokenFrom: aSourcePoint to: aTargetPoint

	(OTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	XTokens remove: aSourcePoint .
	
	XTokens add: aTargetPoint .
		
	
! !

!testRun: #TerniLapilliTest #test12XTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 10/31/2020 14:38:55'!
PASSED!

!testRun: #TerniLapilliTest #test13XTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 10/31/2020 14:38:56'!
PASSED!

!testRun: #TerniLapilliTest #test14OTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 10/31/2020 14:38:58'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 14:40:03'!
test14OTokensCannotBeMovedToPositionsWithXTokens

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXTokenFrom: 1@0 to: 2@0.
	
	self should: [ game moveOTokenFrom: 1@1 to: 1@2. self fail. ] 
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 14:40:17' prior: 50966876!
test14OTokensCannotBeMovedToPositionsWithXTokens

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXTokenFrom: 1@0 to: 2@0.
	
	self should: [ game moveOTokenFrom: 1@1 to: 1@0. self fail. ] 
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription .! !

!testRun: #TerniLapilliTest #test14OTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 10/31/2020 14:40:19'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 14:40:29'!
test15OTokensCannotBeMovedToPositionsWithXTokens

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXTokenFrom: 1@0 to: 2@0.
	
	self should: [ game moveOTokenFrom: 1@1 to: 1@0. self fail. ] 
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription .! !

!methodRemoval: TerniLapilliTest #test14OTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 10/31/2020 14:40:29'!
test14OTokensCannotBeMovedToPositionsWithXTokens

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXTokenFrom: 1@0 to: 2@0.
	
	self should: [ game moveOTokenFrom: 1@1 to: 1@0. self fail. ] 
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 14:45:17'!
test03OPutsAfterX
	
	| game |
	
	game _ TerniLapilli new.
	
	game putXAt: 0@0 .
	
	self assert: game isPlayingO .
	
	self deny: game isPlayingX .! !

!methodRemoval: TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 10/31/2020 14:45:17'!
test03OPlaysAfterX
	
	| game |
	
	game _ TerniLapilli new.
	
	game putXAt: 0@0 .
	
	self assert: game isPlayingO .
	
	self deny: game isPlayingX .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 14:45:26'!
test04XPutsAfterO
	
	| game |
	
	game _ TerniLapilli new.
	
	game putXAt: 0@0 .
	
	game putOAt: 0@1 .
	
	self assert: game isPlayingX .
	
	self deny: game isPlayingO .! !

!methodRemoval: TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 10/31/2020 14:45:26'!
test04XPlaysAfterO
	
	| game |
	
	game _ TerniLapilli new.
	
	game putXAt: 0@0 .
	
	game putOAt: 0@1 .
	
	self assert: game isPlayingX .
	
	self deny: game isPlayingO .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 14:46:57'!
test16XCannotMoveTwice

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXTokenFrom: 1@0 to: 2@0.
	
	self should: [ game moveXTokenFrom: 2@0 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: game class cannotMoveTwiceErrorDescription .! !

!testRun: #TerniLapilliTest #test16XCannotMoveTwice stamp: 'eb 10/31/2020 14:47:26'!
ERROR!

!testRun: #TerniLapilliTest #test16XCannotMoveTwice stamp: 'eb 10/31/2020 14:47:26'!
ERROR!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 10/31/2020 14:47:48'!
cannotMoveTwiceErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 10/31/2020 14:48:02' prior: 50966995!
cannotMoveTwiceErrorDescription

	^ 'Player cannot move twice'.! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 10/31/2020 14:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 10/31/2020 14:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test03OPutsAfterX stamp: 'eb 10/31/2020 14:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test04XPutsAfterO stamp: 'eb 10/31/2020 14:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test05XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 10/31/2020 14:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test06OTokensShouldBePlacedIntoBoardnAValidPosition stamp: 'eb 10/31/2020 14:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test07XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/31/2020 14:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test08OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/31/2020 14:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test09XTokensShouldNotBeMoreThanThree stamp: 'eb 10/31/2020 14:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 10/31/2020 14:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens stamp: 'eb 10/31/2020 14:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test12XTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 10/31/2020 14:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test13XTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 10/31/2020 14:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test14OTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 10/31/2020 14:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test15OTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 10/31/2020 14:48:05'!
PASSED!

!testRun: #TerniLapilliTest #test16XCannotMoveTwice stamp: 'eb 10/31/2020 14:48:05'!
FAILURE!

!testRun: #TerniLapilliTest #test16XCannotMoveTwice stamp: 'eb 10/31/2020 14:48:05'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/31/2020 14:49:08' prior: 50966850!
moveXTokenFrom: aSourcePoint to: aTargetPoint

	isPlayingX ifFalse: [ self error: self class cannotMoveTwiceErrorDescription ].

	(OTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	XTokens remove: aSourcePoint .
	
	XTokens add: aTargetPoint .
		
	
! !

!testRun: #TerniLapilliTest #test16XCannotMoveTwice stamp: 'eb 10/31/2020 14:49:13'!
FAILURE!

!testRun: #TerniLapilliTest #test16XCannotMoveTwice stamp: 'eb 10/31/2020 14:49:14'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/31/2020 14:49:37' prior: 50967066!
moveXTokenFrom: aSourcePoint to: aTargetPoint

	isPlayingX ifFalse: [ self error: self class cannotMoveTwiceErrorDescription ].

	(OTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	XTokens remove: aSourcePoint .
	
	XTokens add: aTargetPoint .
	
	isPlayingX _ false .
	
! !

!testRun: #TerniLapilliTest #test16XCannotMoveTwice stamp: 'eb 10/31/2020 14:49:41'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 14:49:53'!
test16OCannotMoveTwice

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXTokenFrom: 1@0 to: 2@0.
	
	self should: [ game moveXTokenFrom: 2@0 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: game class cannotMoveTwiceErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 14:50:00'!
test17OCannotMoveTwice

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXTokenFrom: 1@0 to: 2@0.
	
	self should: [ game moveXTokenFrom: 2@0 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: game class cannotMoveTwiceErrorDescription .! !

!methodRemoval: TerniLapilliTest #test16OCannotMoveTwice stamp: 'eb 10/31/2020 14:50:02'!
test16OCannotMoveTwice

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXTokenFrom: 1@0 to: 2@0.
	
	self should: [ game moveXTokenFrom: 2@0 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: game class cannotMoveTwiceErrorDescription .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 14:53:45' prior: 50967125!
test17OCannotMoveTwice

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXTokenFrom: 1@0 to: 2@0.
	
	game moveOTokenFrom: 1@1 to: 2@1.
	
	self should: [ game moveOTokenFrom: 1@1 to: 3@1. self fail. ] 
		raise: Error
		withMessageText: game class cannotMoveTwiceErrorDescription .! !

!testRun: #TerniLapilliTest #test17OCannotMoveTwice stamp: 'eb 10/31/2020 14:53:46'!
ERROR!

!testRun: #TerniLapilliTest #test17OCannotMoveTwice stamp: 'eb 10/31/2020 14:53:46'!
ERROR!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 14:54:06' prior: 50967155!
test17OCannotMoveTwice

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXTokenFrom: 1@0 to: 2@0.
	
	game moveOTokenFrom: 1@1 to: 2@1.
	
	self should: [ game moveOTokenFrom: 1@1 to: 2@2. self fail. ] 
		raise: Error
		withMessageText: game class cannotMoveTwiceErrorDescription .! !

!testRun: #TerniLapilliTest #test17OCannotMoveTwice stamp: 'eb 10/31/2020 14:54:09'!
ERROR!

!testRun: #TerniLapilliTest #test17OCannotMoveTwice stamp: 'eb 10/31/2020 14:54:09'!
ERROR!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 14:54:23' prior: 50967177!
test17OCannotMoveTwice

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXTokenFrom: 1@0 to: 2@0.
	
	game moveOTokenFrom: 1@1 to: 2@1.
	
	self should: [ game moveOTokenFrom: 2@1 to: 2@2. self fail. ] 
		raise: Error
		withMessageText: game class cannotMoveTwiceErrorDescription .! !

!testRun: #TerniLapilliTest #test17OCannotMoveTwice stamp: 'eb 10/31/2020 14:54:25'!
ERROR!

!testRun: #TerniLapilliTest #test17OCannotMoveTwice stamp: 'eb 10/31/2020 14:54:25'!
ERROR!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/31/2020 14:56:27' prior: 50966822!
moveOTokenFrom: aSourcePoint to: aTargetPoint
	
	isPlayingX ifFalse: [ self error: self class cannotMoveTwiceErrorDescription ].

	(OTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	XTokens remove: aSourcePoint .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/31/2020 14:57:09' prior: 50967089!
moveXTokenFrom: aSourcePoint to: aTargetPoint

	isPlayingX ifFalse: [ self error: self class cannotMoveTwiceErrorDescription ].

	(XTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	XTokens remove: aSourcePoint .
	
	XTokens add: aTargetPoint .
	
	isPlayingX _ false .
	
! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/31/2020 14:57:59' prior: 50967221!
moveOTokenFrom: aSourcePoint to: aTargetPoint
	
	isPlayingX ifTrue: [ self error: self class cannotMoveTwiceErrorDescription ].

	(OTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	OTokens remove: aSourcePoint .
	
	OTokens add: aTargetPoint .
	
	isPlayingX _ true .! !

!testRun: #TerniLapilliTest #test17OCannotMoveTwice stamp: 'eb 10/31/2020 14:58:04'!
PASSED!

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 10/31/2020 14:58:28'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 10/31/2020 14:58:28'!
PASSED!

!testRun: #TerniLapilliTest #test03OPutsAfterX stamp: 'eb 10/31/2020 14:58:28'!
PASSED!

!testRun: #TerniLapilliTest #test04XPutsAfterO stamp: 'eb 10/31/2020 14:58:28'!
PASSED!

!testRun: #TerniLapilliTest #test05XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 10/31/2020 14:58:28'!
PASSED!

!testRun: #TerniLapilliTest #test06OTokensShouldBePlacedIntoBoardnAValidPosition stamp: 'eb 10/31/2020 14:58:28'!
PASSED!

!testRun: #TerniLapilliTest #test07XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/31/2020 14:58:28'!
PASSED!

!testRun: #TerniLapilliTest #test08OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/31/2020 14:58:28'!
PASSED!

!testRun: #TerniLapilliTest #test09XTokensShouldNotBeMoreThanThree stamp: 'eb 10/31/2020 14:58:28'!
PASSED!

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 10/31/2020 14:58:28'!
PASSED!

!testRun: #TerniLapilliTest #test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens stamp: 'eb 10/31/2020 14:58:28'!
PASSED!

!testRun: #TerniLapilliTest #test12XTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 10/31/2020 14:58:28'!
PASSED!

!testRun: #TerniLapilliTest #test13XTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 10/31/2020 14:58:28'!
PASSED!

!testRun: #TerniLapilliTest #test14OTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 10/31/2020 14:58:28'!
PASSED!

!testRun: #TerniLapilliTest #test15OTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 10/31/2020 14:58:28'!
FAILURE!

!testRun: #TerniLapilliTest #test16XCannotMoveTwice stamp: 'eb 10/31/2020 14:58:29'!
PASSED!

!testRun: #TerniLapilliTest #test17OCannotMoveTwice stamp: 'eb 10/31/2020 14:58:29'!
PASSED!

!testRun: #TerniLapilliTest #test15OTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 10/31/2020 14:58:29'!
FAILURE!

!testRun: #TerniLapilliTest #test15OTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 10/31/2020 14:58:48'!
FAILURE!

!testRun: #TerniLapilliTest #test15OTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 10/31/2020 14:58:48'!
FAILURE!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 14:59:06' prior: 50966911!
test15OTokensCannotBeMovedToPositionsWithXTokens

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXTokenFrom: 1@0 to: 2@0.
	
	self should: [ game moveOTokenFrom: 1@1 to: 2@0. self fail. ] 
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription .! !

!testRun: #TerniLapilliTest #test15OTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 10/31/2020 14:59:08'!
PASSED!

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 10/31/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 10/31/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test03OPutsAfterX stamp: 'eb 10/31/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test04XPutsAfterO stamp: 'eb 10/31/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test05XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 10/31/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test06OTokensShouldBePlacedIntoBoardnAValidPosition stamp: 'eb 10/31/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test07XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/31/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test08OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 10/31/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test09XTokensShouldNotBeMoreThanThree stamp: 'eb 10/31/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 10/31/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens stamp: 'eb 10/31/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test12XTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 10/31/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test13XTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 10/31/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test14OTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 10/31/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test15OTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 10/31/2020 15:00:13'!
PASSED!

!testRun: #TerniLapilliTest #test16XCannotMoveTwice stamp: 'eb 10/31/2020 15:00:14'!
PASSED!

!testRun: #TerniLapilliTest #test17OCannotMoveTwice stamp: 'eb 10/31/2020 15:00:14'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 15:08:15'!
test18MovementsLengthIsOne

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
		
	self should: [ game moveXTokenFrom: 1@0 to: 2@2. self fail. ] 
		raise: Error
		withMessageText: game class movementsLengthShouldBeOneErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 15:08:23'!
test18MovementsLengthShouldBeOne

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
		
	self should: [ game moveXTokenFrom: 1@0 to: 2@2. self fail. ] 
		raise: Error
		withMessageText: game class movementsLengthShouldBeOneErrorDescription .! !

!methodRemoval: TerniLapilliTest #test18MovementsLengthIsOne stamp: 'eb 10/31/2020 15:08:25'!
test18MovementsLengthIsOne

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
		
	self should: [ game moveXTokenFrom: 1@0 to: 2@2. self fail. ] 
		raise: Error
		withMessageText: game class movementsLengthShouldBeOneErrorDescription .!

!testRun: #TerniLapilliTest #test18MovementsLengthShouldBeOne stamp: 'eb 10/31/2020 15:08:35'!
ERROR!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 15:12:47'!
test18XMovementsLengthShouldBeOne

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
		
	self should: [ game moveXTokenFrom: 1@0 to: 2@2. self fail. ] 
		raise: Error
		withMessageText: game class movementsLengthShouldBeOneErrorDescription .! !

!methodRemoval: TerniLapilliTest #test18MovementsLengthShouldBeOne stamp: 'eb 10/31/2020 15:12:49'!
test18MovementsLengthShouldBeOne

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
		
	self should: [ game moveXTokenFrom: 1@0 to: 2@2. self fail. ] 
		raise: Error
		withMessageText: game class movementsLengthShouldBeOneErrorDescription .!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/31/2020 15:13:41' prior: 50967237!
moveXTokenFrom: aSourcePoint to: aTargetPoint

	(XTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifFalse: [ self error: self class cannotMoveTwiceErrorDescription ].
		
	XTokens remove: aSourcePoint .
	
	XTokens add: aTargetPoint .
	
	isPlayingX _ false .
	
! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/31/2020 15:16:58' prior: 50967500!
moveXTokenFrom: aSourcePoint to: aTargetPoint

	(XTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifFalse: [ self error: self class cannotMoveTwiceErrorDescription ].
	
	self assertThat: aSourcePoint isWithinOneUnitDistanceTo: aTargetPoint.
		
	XTokens remove: aSourcePoint .
	
	XTokens add: aTargetPoint .
	
	isPlayingX _ false .
	
! !

!testRun: #TerniLapilliTest #test18XMovementsLengthShouldBeOne stamp: 'eb 10/31/2020 15:17:08'!
ERROR!

!testRun: #TerniLapilliTest #test18XMovementsLengthShouldBeOne stamp: 'eb 10/31/2020 15:17:08'!
ERROR!

!testRun: #TerniLapilliTest #test18XMovementsLengthShouldBeOne stamp: 'eb 10/31/2020 15:17:09'!
ERROR!

!testRun: #TerniLapilliTest #test18XMovementsLengthShouldBeOne stamp: 'eb 10/31/2020 15:17:09'!
ERROR!

!testRun: #TerniLapilliTest #test18XMovementsLengthShouldBeOne stamp: 'eb 10/31/2020 15:17:24'!
ERROR!

!testRun: #TerniLapilliTest #test18XMovementsLengthShouldBeOne stamp: 'eb 10/31/2020 15:17:24'!
ERROR!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 10/31/2020 15:17:38'!
movementsLengthShouldBeOneErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 10/31/2020 15:17:55' prior: 50967558!
movementsLengthShouldBeOneErrorDescription

	^ 'Movements length should be one'.! !

!testRun: #TerniLapilliTest #test18XMovementsLengthShouldBeOne stamp: 'eb 10/31/2020 15:17:59'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'eb 10/31/2020 15:23:27'!
assertThat: aSourcePoint isWithinOneUnitDistanceTo: aTargetPoint
	
	| dX dY verticalDistanceIsOne horizontalDistanceIsOne diagonalDistanceIsOne |
	
	dX _ (aSourcePoint x - aTargetPoint x) abs.
	
	dY _ (aSourcePoint y - aTargetPoint y) abs.
	
	verticalDistanceIsOne _ (dX = 0 and: [dY = 1]) .
	
	horizontalDistanceIsOne _ (dX = 1 and: [dY = 0]).
	
	diagonalDistanceIsOne _ (dX = 1 and: [dY = 1]).
	
	^ (dX = 0 and: (dY = 1)) or:
	    (dX = 1 and: (dY = 0)) or:
	    [dX = 1 and: [dY = 1]]! !
!TerniLapilli methodsFor: 'testing' stamp: 'eb 10/31/2020 15:23:51' prior: 50967573!
assertThat: aSourcePoint isWithinOneUnitDistanceTo: aTargetPoint
	
	| dX dY verticalDistanceIsOne horizontalDistanceIsOne diagonalDistanceIsOne |
	
	dX _ (aSourcePoint x - aTargetPoint x) abs.
	
	dY _ (aSourcePoint y - aTargetPoint y) abs.
	
	verticalDistanceIsOne _ (dX = 0 and: [dY = 1]) .
	
	horizontalDistanceIsOne _ (dX = 1 and: [dY = 0]).
	
	diagonalDistanceIsOne _ (dX = 1 and: [dY = 1]).
	
	^verticalDistanceIsOne or: horizontalDistanceIsOne or: diagonalDistanceIsOne .! !

!testRun: #TerniLapilliTest #test18XMovementsLengthShouldBeOne stamp: 'eb 10/31/2020 15:24:03'!
FAILURE!

!testRun: #TerniLapilliTest #test18XMovementsLengthShouldBeOne stamp: 'eb 10/31/2020 15:24:03'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'eb 10/31/2020 15:24:57' prior: 50967591!
assertThat: aSourcePoint isWithinOneUnitDistanceTo: aTargetPoint
	
	| dX dY verticalDistanceIsOne horizontalDistanceIsOne diagonalDistanceIsOne |
	
	dX _ (aSourcePoint x - aTargetPoint x) abs.
	
	dY _ (aSourcePoint y - aTargetPoint y) abs.
	
	verticalDistanceIsOne _ (dX = 0 and: [dY = 1]) .
	
	horizontalDistanceIsOne _ (dX = 1 and: [dY = 0]).
	
	diagonalDistanceIsOne _ (dX = 1 and: [dY = 1]).
	
	(verticalDistanceIsOne or: horizontalDistanceIsOne or: diagonalDistanceIsOne) ifTrue: 
		[ self error: self class movementsLengthShouldBeOneErrorDescription .]! !

!testRun: #TerniLapilliTest #test18XMovementsLengthShouldBeOne stamp: 'eb 10/31/2020 15:25:03'!
FAILURE!

!testRun: #TerniLapilliTest #test18XMovementsLengthShouldBeOne stamp: 'eb 10/31/2020 15:25:03'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'eb 10/31/2020 15:25:37' prior: 50967616!
assertThat: aSourcePoint isWithinOneUnitDistanceTo: aTargetPoint
	
	| dX dY verticalDistanceIsOne horizontalDistanceIsOne diagonalDistanceIsOne |
	
	dX _ (aSourcePoint x - aTargetPoint x) abs.
	
	dY _ (aSourcePoint y - aTargetPoint y) abs.
	
	verticalDistanceIsOne _ (dX = 0 and: [dY = 1]) .
	
	horizontalDistanceIsOne _ (dX = 1 and: [dY = 0]).
	
	diagonalDistanceIsOne _ (dX = 1 and: [dY = 1]).
	
	(verticalDistanceIsOne or: horizontalDistanceIsOne or: diagonalDistanceIsOne) ifFalse: 
		[ self error: self class movementsLengthShouldBeOneErrorDescription .]! !

!testRun: #TerniLapilliTest #test18XMovementsLengthShouldBeOne stamp: 'eb 10/31/2020 15:25:43'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 15:26:01'!
test19OMovementsLengthShouldBeOne

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
		
	self should: [ game moveXTokenFrom: 1@0 to: 2@2. self fail. ] 
		raise: Error
		withMessageText: game class movementsLengthShouldBeOneErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 15:26:53' prior: 50967667!
test19OMovementsLengthShouldBeOne

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXTokenFrom: 1@0 to: 2@0 .
		
	self should: [ game moveOTokenFrom: 0@2 to: 2@2. self fail. ] 
		raise: Error
		withMessageText: game class movementsLengthShouldBeOneErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 15:27:24' prior: 50967682!
test19OMovementsLengthShouldBeOne

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXTokenFrom: 1@0 to: 2@0 .
		
	self should: [ game moveOTokenFrom: 0@2 to: 0@2. self fail. ] 
		raise: Error
		withMessageText: game class movementsLengthShouldBeOneErrorDescription .! !

!testRun: #TerniLapilliTest #test19OMovementsLengthShouldBeOne stamp: 'eb 10/31/2020 15:27:28'!
FAILURE!

!testRun: #TerniLapilliTest #test19OMovementsLengthShouldBeOne stamp: 'eb 10/31/2020 15:27:28'!
FAILURE!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 15:27:47' prior: 50967698!
test19OMovementsLengthShouldBeOne

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXTokenFrom: 1@0 to: 2@0 .
		
	self should: [ game moveOTokenFrom: 0@2 to: 2@2. self fail. ] 
		raise: Error
		withMessageText: game class movementsLengthShouldBeOneErrorDescription .! !

!testRun: #TerniLapilliTest #test19OMovementsLengthShouldBeOne stamp: 'eb 10/31/2020 15:27:48'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/31/2020 15:28:11' prior: 50967255!
moveOTokenFrom: aSourcePoint to: aTargetPoint
	
	isPlayingX ifTrue: [ self error: self class cannotMoveTwiceErrorDescription ].

	(OTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	self assertThat: aSourcePoint isWithinOneUnitDistanceTo: aTargetPoint.
	
	OTokens remove: aSourcePoint .
	
	OTokens add: aTargetPoint .
	
	isPlayingX _ true .! !

!testRun: #TerniLapilliTest #test19OMovementsLengthShouldBeOne stamp: 'eb 10/31/2020 15:28:21'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 15:33:11'!
test20XTokensMovementsSourcesAreAlreadyInBoard

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
		
	self should: [ game moveXTokenFrom: 2@2 to: 2@1 . self fail. ] 
		raise: Error
		withMessageText: game class movementSourceHasNotTokenErrorDescription .! !

!testRun: #TerniLapilliTest #test20XTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 10/31/2020 15:33:19'!
ERROR!

!testRun: #TerniLapilliTest #test20XTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 10/31/2020 15:33:19'!
ERROR!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 10/31/2020 15:33:29'!
movementSourceHasNotTokenErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 10/31/2020 15:33:43' prior: 50967784!
movementSourceHasNotTokenErrorDescription

	^ 'Movement source has no token'.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 10/31/2020 15:33:58' prior: 50967790!
movementSourceHasNotTokenErrorDescription

	^ 'Movement source has not token'.! !

!testRun: #TerniLapilliTest #test20XTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 10/31/2020 15:34:04'!
FAILURE!

!testRun: #TerniLapilliTest #test20XTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 10/31/2020 15:34:04'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/31/2020 15:35:03' prior: 50967518!
moveXTokenFrom: aSourcePoint to: aTargetPoint

	(XTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifFalse: [ self error: self class cannotMoveTwiceErrorDescription ].
	
	self assertThat: aSourcePoint isWithinOneUnitDistanceTo: aTargetPoint.
		
	XTokens remove: aSourcePoint ifAbsent: [ self error: self class movementSourceHasNotTokenErrorDescription ].
	
	XTokens add: aTargetPoint .
	
	isPlayingX _ false .
	
! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/31/2020 15:38:03' prior: 50967809!
moveXTokenFrom: aSourcePoint to: aTargetPoint

	(XTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifFalse: [ self error: self class cannotMoveTwiceErrorDescription ].
	
	self assertThat: aSourcePoint isWithinOneUnitDistanceTo: aTargetPoint.
	
	((XTokens includes: aSourcePoint ) or: [ OTokens includes: aSourcePoint ]) 
		ifFalse: [ self error: self class movementSourceHasNotTokenErrorDescription ].
		
	XTokens remove: aSourcePoint .
	
	XTokens add: aTargetPoint .
	
	isPlayingX _ false .
	
! !

!testRun: #TerniLapilliTest #test20XTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 10/31/2020 15:38:16'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 15:38:30'!
test21OTokensMovementsSourcesAreAlreadyInBoard

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
		
	self should: [ game moveXTokenFrom: 2@2 to: 2@1 . self fail. ] 
		raise: Error
		withMessageText: game class movementSourceHasNotTokenErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 15:39:13' prior: 50967861!
test21OTokensMovementsSourcesAreAlreadyInBoard

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
		
	game moveXTokenFrom: 0@1 to: 0@2.
	
	self should: [ game moveOTokenFrom: 2@2 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: game class movementSourceHasNotTokenErrorDescription .! !

!testRun: #TerniLapilliTest #test21OTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 10/31/2020 15:39:16'!
ERROR!

!testRun: #TerniLapilliTest #test21OTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 10/31/2020 15:39:16'!
ERROR!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 10/31/2020 15:40:10' prior: 50967876!
test21OTokensMovementsSourcesAreAlreadyInBoard

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
		
	game moveXTokenFrom: 1@0 to: 2@0.
	
	self should: [ game moveOTokenFrom: 2@2 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: game class movementSourceHasNotTokenErrorDescription .! !

!testRun: #TerniLapilliTest #test21OTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 10/31/2020 15:40:11'!
FAILURE!

!testRun: #TerniLapilliTest #test21OTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 10/31/2020 15:40:11'!
FAILURE!

!testRun: #TerniLapilliTest #test21OTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 10/31/2020 15:40:31'!
FAILURE!

!testRun: #TerniLapilliTest #test21OTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 10/31/2020 15:40:31'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 10/31/2020 15:41:51' prior: 50967739!
moveOTokenFrom: aSourcePoint to: aTargetPoint
	
	(OTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifTrue: [ self error: self class cannotMoveTwiceErrorDescription ].
		
	self assertThat: aSourcePoint isWithinOneUnitDistanceTo: aTargetPoint.
	
	((XTokens includes: aSourcePoint ) or: [ OTokens includes: aSourcePoint ]) 
		ifFalse: [self error: self class movementSourceHasNotTokenErrorDescription ].
	
	OTokens remove: aSourcePoint .
	
	OTokens add: aTargetPoint .
	
	isPlayingX _ true .! !

!testRun: #TerniLapilliTest #test21OTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 10/31/2020 15:41:54'!
PASSED!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 10/31/2020 15:44:56' prior: 50965449!
playerPositionIsInvalidErrorDescription

	^ 'Position is invalid'.
! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 10/31/2020 15:44:58'!
positionIsInvalidErrorDescription

	^ 'Position is invalid'.
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 10/31/2020 15:44:58' prior: 50966115!
test06OTokensShouldBePlacedIntoBoardnAValidPosition

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0.
	
	self should: [ game putOAt: -1@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@-1. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 3@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@3. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0.5@1. self fail.]
		raise: Error
		withMessageText: game class positionIsInvalidErrorDescription.
	
	self should: [ game putOAt: 1@0.5. self fail.]
		raise: Error
		withMessageText: game class positionIsInvalidErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 10/31/2020 15:44:58' prior: 50966052!
test05XTokensShouldBePlacedIntoBoardInAValidPosition

	| game |
	
	game _ TerniLapilli new .
	
	self should: [ game putXAt: -1@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@-1. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 3@0. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@3. self fail.]
		raise: Error
		withMessageText: game class playerIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0.5@1. self fail.]
		raise: Error
		withMessageText: game class positionIsInvalidErrorDescription.
	
	self should: [ game putXAt: 1@0.5. self fail.]
		raise: Error
		withMessageText: game class positionIsInvalidErrorDescription.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'eb 10/31/2020 15:44:58' prior: 50966338!
putXAt: aPoint 
	
	(self board containsPoint: aPoint) ifFalse: [ self error: self class playerIsOutsideBoardErrorDescription ].
	
	(aPoint isIntegerPoint) ifFalse: [self error: self class positionIsInvalidErrorDescription ].
	
	(XTokens includes: aPoint) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
	
	(OTokens includes: aPoint) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
	
	(XTokens size = 3) ifTrue: [self error: self class cannotPutMoreThanThreeXTokensErrorDescription ].
	
	XTokens add: aPoint .
	
	isPlayingX _ false .! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'eb 10/31/2020 15:44:58' prior: 50966019!
putOAt: aPoint 

	(self board containsPoint: aPoint) ifFalse: [ self error: self class playerIsOutsideBoardErrorDescription ].
	
	(aPoint isIntegerPoint) ifFalse: [self error: self class positionIsInvalidErrorDescription ].
	
	(XTokens includes: aPoint) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
	
	(OTokens includes: aPoint) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifTrue: [ self error: self class playerXShouldPlayErrorDescription ].
	
	OTokens add: aPoint .
		
	isPlayingX _ true .! !

!methodRemoval: TerniLapilli class #playerPositionIsInvalidErrorDescription stamp: 'eb 10/31/2020 15:44:58'!
playerPositionIsInvalidErrorDescription

	^ 'Position is invalid'.
!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 10/31/2020 15:45:22' prior: 50964919!
playerIsOutsideBoardErrorDescription
	
	^ 'Position is outside board'.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 10/31/2020 15:45:39'!
positionIsOutsideBoardErrorDescription
	
	^ 'Position is outside board'.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'eb 10/31/2020 15:45:39' prior: 50968055!
putOAt: aPoint 

	(self board containsPoint: aPoint) ifFalse: [ self error: self class positionIsOutsideBoardErrorDescription ].
	
	(aPoint isIntegerPoint) ifFalse: [self error: self class positionIsInvalidErrorDescription ].
	
	(XTokens includes: aPoint) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
	
	(OTokens includes: aPoint) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifTrue: [ self error: self class playerXShouldPlayErrorDescription ].
	
	OTokens add: aPoint .
		
	isPlayingX _ true .! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'eb 10/31/2020 15:45:39' prior: 50968033!
putXAt: aPoint 
	
	(self board containsPoint: aPoint) ifFalse: [ self error: self class positionIsOutsideBoardErrorDescription ].
	
	(aPoint isIntegerPoint) ifFalse: [self error: self class positionIsInvalidErrorDescription ].
	
	(XTokens includes: aPoint) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
	
	(OTokens includes: aPoint) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
	
	(XTokens size = 3) ifTrue: [self error: self class cannotPutMoreThanThreeXTokensErrorDescription ].
	
	XTokens add: aPoint .
	
	isPlayingX _ false .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 10/31/2020 15:45:39' prior: 50967970!
test06OTokensShouldBePlacedIntoBoardnAValidPosition

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0.
	
	self should: [ game putOAt: -1@0. self fail.]
		raise: Error
		withMessageText: game class positionIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@-1. self fail.]
		raise: Error
		withMessageText: game class positionIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 3@0. self fail.]
		raise: Error
		withMessageText: game class positionIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0@3. self fail.]
		raise: Error
		withMessageText: game class positionIsOutsideBoardErrorDescription.
		
	self should: [ game putOAt: 0.5@1. self fail.]
		raise: Error
		withMessageText: game class positionIsInvalidErrorDescription.
	
	self should: [ game putOAt: 1@0.5. self fail.]
		raise: Error
		withMessageText: game class positionIsInvalidErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 10/31/2020 15:45:39' prior: 50968002!
test05XTokensShouldBePlacedIntoBoardInAValidPosition

	| game |
	
	game _ TerniLapilli new .
	
	self should: [ game putXAt: -1@0. self fail.]
		raise: Error
		withMessageText: game class positionIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@-1. self fail.]
		raise: Error
		withMessageText: game class positionIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 3@0. self fail.]
		raise: Error
		withMessageText: game class positionIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0@3. self fail.]
		raise: Error
		withMessageText: game class positionIsOutsideBoardErrorDescription.
		
	self should: [ game putXAt: 0.5@1. self fail.]
		raise: Error
		withMessageText: game class positionIsInvalidErrorDescription.
	
	self should: [ game putXAt: 1@0.5. self fail.]
		raise: Error
		withMessageText: game class positionIsInvalidErrorDescription.! !

!methodRemoval: TerniLapilli class #playerIsOutsideBoardErrorDescription stamp: 'eb 10/31/2020 15:45:39'!
playerIsOutsideBoardErrorDescription
	
	^ 'Position is outside board'.!

----QUIT----(31 October 2020 16:44:34) CuisUniversity-4365.image priorSource: 20317572!

----STARTUP---- (1 November 2020 19:44:03) as C:\Program Files\CuisUniversity\CuisUniversity-4365.image!


----End fileIn of C:\Users\ebonansea\Documents\Personal\Facultad\Ingenieria de software 1\Ejercicios propios\17-TerniLapilli\TerniLapilli-Exercise.st----!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/1/2020 19:48:50'!
test22WhenMovingDestinationShouldBeIntoTheBoard

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
		
	game moveXTokenFrom: 1@0 to: 2@0.
	
	self should: [ game moveOTokenFrom: 2@2 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: game class movementSourceHasNotTokenErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/1/2020 19:52:03' prior: 50968771!
test22WhenMovingDestinationShouldBeIntoTheBoard

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	self should: [ game moveXTokenFrom: 1@0 to: 3@0. self fail. ] 
		raise: Error
		withMessageText: game class movementDestinationHasNotTokenErrorDescription .! !

!testRun: #TerniLapilliTest #test22WhenMovingDestinationShouldBeIntoTheBoard stamp: 'eb 11/1/2020 19:52:03'!
ERROR!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/1/2020 19:52:24' prior: 50968787!
test22WhenMovingDestinationShouldBeIntoTheBoard

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	self should: [ game moveXTokenFrom: 1@0 to: 3@0. self fail. ] 
		raise: Error
		withMessageText: game class movementDestinationIsOutsideBoardErrorDescription .! !

!testRun: #TerniLapilliTest #test22WhenMovingDestinationShouldBeIntoTheBoard stamp: 'eb 11/1/2020 19:52:27'!
ERROR!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 11/1/2020 19:52:38'!
movementDestinationIsOutsideBoardErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 11/1/2020 19:53:17' prior: 50968825!
movementDestinationIsOutsideBoardErrorDescription
	
	^ 'Movement destination is outside board'.! !

!testRun: #TerniLapilliTest #test22WhenMovingDestinationShouldBeIntoTheBoard stamp: 'eb 11/1/2020 19:53:19'!
FAILURE!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/1/2020 19:53:56' prior: 50968806!
test22WhenMovingDestinationShouldBeIntoTheBoard

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	self should: [ game moveXTokenFrom: 1@0 to: 1@-1. self fail. ] 
		raise: Error
		withMessageText: game class movementDestinationIsOutsideBoardErrorDescription .! !

!testRun: #TerniLapilliTest #test22WhenMovingDestinationShouldBeIntoTheBoard stamp: 'eb 11/1/2020 19:53:59'!
FAILURE!

!testRun: #TerniLapilliTest #test22WhenMovingDestinationShouldBeIntoTheBoard stamp: 'eb 11/1/2020 19:53:59'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/1/2020 19:55:27' prior: 50968635!
moveXTokenFrom: aSourcePoint to: aTargetPoint

	(XTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifFalse: [ self error: self class cannotMoveTwiceErrorDescription ].
	
	self assertThat: aSourcePoint isWithinOneUnitDistanceTo: aTargetPoint.
	
	((XTokens includes: aSourcePoint ) or: [ OTokens includes: aSourcePoint ]) 
		ifFalse: [ self error: self class movementSourceHasNotTokenErrorDescription ].
		
	(self board containsPoint: aTargetPoint ) ifFalse: [ self error: self class movementDestinationIsOutsideBoardErrorDescription ].
		
	XTokens remove: aSourcePoint .
	
	XTokens add: aTargetPoint .
	
	isPlayingX _ false .
	
! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/1/2020 19:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/1/2020 19:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test03OPutsAfterX stamp: 'eb 11/1/2020 19:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test04XPutsAfterO stamp: 'eb 11/1/2020 19:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test05XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 11/1/2020 19:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test06OTokensShouldBePlacedIntoBoardnAValidPosition stamp: 'eb 11/1/2020 19:55:32'!
PASSED!

!testRun: #TerniLapilliTest #test07XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/1/2020 19:55:32'!
PASSED!

!testRun: #TerniLapilliTest #test08OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/1/2020 19:55:32'!
PASSED!

!testRun: #TerniLapilliTest #test09XTokensShouldNotBeMoreThanThree stamp: 'eb 11/1/2020 19:55:32'!
PASSED!

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 11/1/2020 19:55:32'!
PASSED!

!testRun: #TerniLapilliTest #test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens stamp: 'eb 11/1/2020 19:55:32'!
PASSED!

!testRun: #TerniLapilliTest #test12XTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/1/2020 19:55:33'!
PASSED!

!testRun: #TerniLapilliTest #test13XTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/1/2020 19:55:33'!
PASSED!

!testRun: #TerniLapilliTest #test14OTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/1/2020 19:55:33'!
PASSED!

!testRun: #TerniLapilliTest #test15OTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/1/2020 19:55:33'!
PASSED!

!testRun: #TerniLapilliTest #test16XCannotMoveTwice stamp: 'eb 11/1/2020 19:55:33'!
PASSED!

!testRun: #TerniLapilliTest #test17OCannotMoveTwice stamp: 'eb 11/1/2020 19:55:33'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovementsLengthShouldBeOne stamp: 'eb 11/1/2020 19:55:33'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovementsLengthShouldBeOne stamp: 'eb 11/1/2020 19:55:33'!
PASSED!

!testRun: #TerniLapilliTest #test20XTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/1/2020 19:55:33'!
PASSED!

!testRun: #TerniLapilliTest #test21OTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/1/2020 19:55:33'!
PASSED!

!testRun: #TerniLapilliTest #test22WhenMovingDestinationShouldBeIntoTheBoard stamp: 'eb 11/1/2020 19:55:33'!
PASSED!

!testRun: #TerniLapilliTest #test22WhenMovingDestinationShouldBeIntoTheBoard stamp: 'eb 11/1/2020 19:55:40'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/1/2020 19:56:44'!
test23WhenMovingDestinationShouldBeValid

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	self should: [ game moveXTokenFrom: 1@0 to: 1@-1. self fail. ] 
		raise: Error
		withMessageText: game class movementDestinationIsOutsideBoardErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/1/2020 19:57:03' prior: 50968973!
test23WhenMovingDestinationShouldBeValid

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	self should: [ game moveXTokenFrom: 1@0 to: 1@0.1. self fail. ] 
		raise: Error
		withMessageText: game class movementDestinationIsInvalidErrorDescription .! !

!testRun: #TerniLapilliTest #test23WhenMovingDestinationShouldBeValid stamp: 'eb 11/1/2020 19:57:09'!
ERROR!

!testRun: #TerniLapilliTest #test23WhenMovingDestinationShouldBeValid stamp: 'eb 11/1/2020 19:57:09'!
ERROR!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 11/1/2020 19:57:18'!
movementDestinationIsInvalidErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 11/1/2020 19:57:40' prior: 50969010!
movementDestinationIsInvalidErrorDescription
	
	^ 'Movement destination is invalid'.! !

!testRun: #TerniLapilliTest #test23WhenMovingDestinationShouldBeValid stamp: 'eb 11/1/2020 19:57:49'!
FAILURE!

!testRun: #TerniLapilliTest #test23WhenMovingDestinationShouldBeValid stamp: 'eb 11/1/2020 19:57:49'!
FAILURE!

!methodRemoval: TerniLapilliTest #test23WhenMovingDestinationShouldBeValid stamp: 'eb 11/1/2020 19:58:41'!
test23WhenMovingDestinationShouldBeValid

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	self should: [ game moveXTokenFrom: 1@0 to: 1@0.1. self fail. ] 
		raise: Error
		withMessageText: game class movementDestinationIsInvalidErrorDescription .!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/1/2020 19:59:53'!
assertThatPositionIsIntoTheBoard: aPoint

	^ (self board containsPoint: aPoint) ifFalse: [ self error: self class positionIsOutsideBoardErrorDescription ]! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/1/2020 19:59:53' prior: 50968660!
putOAt: aPoint 

	self assertThatPositionIsIntoTheBoard: aPoint.
	
	(aPoint isIntegerPoint) ifFalse: [self error: self class positionIsInvalidErrorDescription ].
	
	(XTokens includes: aPoint) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
	
	(OTokens includes: aPoint) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifTrue: [ self error: self class playerXShouldPlayErrorDescription ].
	
	OTokens add: aPoint .
		
	isPlayingX _ true .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/1/2020 20:00:22' prior: 50968841!
test22WhenMovingDestinationShouldBeIntoTheBoard

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	self should: [ game moveXTokenFrom: 1@0 to: 1@-1. self fail. ] 
		raise: Error
		withMessageText: game class positionIsOutsideBoardErrorDescription .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/1/2020 20:01:09' prior: 50968864!
moveXTokenFrom: aSourcePoint to: aTargetPoint

	(XTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifFalse: [ self error: self class cannotMoveTwiceErrorDescription ].
	
	self assertThat: aSourcePoint isWithinOneUnitDistanceTo: aTargetPoint.
	
	((XTokens includes: aSourcePoint ) or: [ OTokens includes: aSourcePoint ]) 
		ifFalse: [ self error: self class movementSourceHasNotTokenErrorDescription ].
		
	self assertThatPositionIsIntoTheBoard: aTargetPoint .
		
	XTokens remove: aSourcePoint .
	
	XTokens add: aTargetPoint .
	
	isPlayingX _ false .
	
! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/1/2020 20:02:34'!
test22WhenMovingXDestinationShouldBeIntoTheBoard

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	self should: [ game moveXTokenFrom: 1@0 to: 1@-1. self fail. ] 
		raise: Error
		withMessageText: game class positionIsOutsideBoardErrorDescription .! !

!methodRemoval: TerniLapilliTest #test22WhenMovingDestinationShouldBeIntoTheBoard stamp: 'eb 11/1/2020 20:02:37'!
test22WhenMovingDestinationShouldBeIntoTheBoard

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	self should: [ game moveXTokenFrom: 1@0 to: 1@-1. self fail. ] 
		raise: Error
		withMessageText: game class positionIsOutsideBoardErrorDescription .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/1/2020 20:05:50'!
test23WhenMovingODestinationShouldBeIntoTheBoard

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXTokenFrom: 1@0 to: 2@0.
	
	self should: [ game moveOTokenFrom: 1@1 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: game class positionIsOutsideBoardErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/1/2020 20:06:01' prior: 50969142!
test23WhenMovingODestinationShouldBeIntoTheBoard

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXTokenFrom: 1@0 to: 2@0.
	
	self should: [ game moveOTokenFrom: 1@1 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: game class positionIsOutsideBoardErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/1/2020 20:06:22' prior: 50969158!
test23WhenMovingODestinationShouldBeIntoTheBoard

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXTokenFrom: 1@0 to: 2@0.
	
	self should: [ game moveOTokenFrom: 0@2 to: -1@2. self fail. ] 
		raise: Error
		withMessageText: game class positionIsOutsideBoardErrorDescription .! !

!testRun: #TerniLapilliTest #test23WhenMovingODestinationShouldBeIntoTheBoard stamp: 'eb 11/1/2020 20:06:25'!
FAILURE!

!testRun: #TerniLapilliTest #test23WhenMovingODestinationShouldBeIntoTheBoard stamp: 'eb 11/1/2020 20:06:25'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/1/2020 20:07:04' prior: 50968610!
moveOTokenFrom: aSourcePoint to: aTargetPoint
	
	(OTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifTrue: [ self error: self class cannotMoveTwiceErrorDescription ].
		
	self assertThat: aSourcePoint isWithinOneUnitDistanceTo: aTargetPoint.
	
	((XTokens includes: aSourcePoint ) or: [ OTokens includes: aSourcePoint ]) 
		ifFalse: [self error: self class movementSourceHasNotTokenErrorDescription ].
	
	self assertThatPositionIsIntoTheBoard: aTargetPoint .
	
	OTokens remove: aSourcePoint .
	
	OTokens add: aTargetPoint .
	
	isPlayingX _ true .! !

!testRun: #TerniLapilliTest #test23WhenMovingODestinationShouldBeIntoTheBoard stamp: 'eb 11/1/2020 20:07:14'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/1/2020 20:08:42'!
test24WhenMovingXSourcePositionShouldContainX

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXTokenFrom: 1@0 to: 2@0.
	
	self should: [ game moveOTokenFrom: 0@2 to: -1@2. self fail. ] 
		raise: Error
		withMessageText: game class positionIsOutsideBoardErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/1/2020 20:10:23' prior: 50969227!
test24WhenMovingXSourcePositionShouldContainX

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
		
	self should: [ game moveXTokenFrom: 1@1 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: game class positionHasOErrorDescription .! !

!testRun: #TerniLapilliTest #test24WhenMovingXSourcePositionShouldContainX stamp: 'eb 11/1/2020 20:10:26'!
ERROR!

!testRun: #TerniLapilliTest #test24WhenMovingXSourcePositionShouldContainX stamp: 'eb 11/1/2020 20:10:26'!
ERROR!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 11/1/2020 20:10:44'!
positionHasOErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 11/1/2020 20:10:58' prior: 50969265!
positionHasOErrorDescription

	^ 'Position has O'.! !

!testRun: #TerniLapilliTest #test24WhenMovingXSourcePositionShouldContainX stamp: 'eb 11/1/2020 20:11:03'!
FAILURE!

!testRun: #TerniLapilliTest #test24WhenMovingXSourcePositionShouldContainX stamp: 'eb 11/1/2020 20:11:03'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/1/2020 20:13:24' prior: 50969085!
moveXTokenFrom: aSourcePoint to: aTargetPoint

	(XTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifFalse: [ self error: self class cannotMoveTwiceErrorDescription ].
	
	self assertThat: aSourcePoint isWithinOneUnitDistanceTo: aTargetPoint.
	
	((XTokens includes: aSourcePoint ) or: [ OTokens includes: aSourcePoint ]) 
		ifFalse: [ self error: self class movementSourceHasNotTokenErrorDescription ].
		
	self assertThatPositionIsIntoTheBoard: aTargetPoint .
	
	(OTokens includes: aSourcePoint) ifTrue: [self error: self class positionHasOErrorDescription ].
		
	XTokens remove: aSourcePoint .
	
	XTokens add: aTargetPoint .
	
	isPlayingX _ false .
	
! !

!testRun: #TerniLapilliTest #test24WhenMovingXSourcePositionShouldContainX stamp: 'eb 11/1/2020 20:13:29'!
PASSED!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/1/2020 20:14:17' prior: 50969282!
moveXTokenFrom: aSourcePoint to: aTargetPoint

	(XTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifFalse: [ self error: self class cannotMoveTwiceErrorDescription ].
	
	self assertThat: aSourcePoint isWithinOneUnitDistanceTo: aTargetPoint.
	
	((XTokens includes: aSourcePoint ) or: [ OTokens includes: aSourcePoint ]) 
		ifFalse: [ self error: self class movementSourceHasNotTokenErrorDescription ].
	
	(OTokens includes: aSourcePoint) ifTrue: [self error: self class positionHasOErrorDescription ].
	
	self assertThatPositionIsIntoTheBoard: aTargetPoint .
	
	
		
	XTokens remove: aSourcePoint .
	
	XTokens add: aTargetPoint .
	
	isPlayingX _ false .
	
! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/1/2020 20:15:25' prior: 50969316!
moveXTokenFrom: aSourcePoint to: aTargetPoint

	(XTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifFalse: [ self error: self class cannotMoveTwiceErrorDescription ].
	
	self assertThat: aSourcePoint isWithinOneUnitDistanceTo: aTargetPoint.
	
	self assertThatSourceIsX: aSourcePoint .
	
	self assertThatPositionIsIntoTheBoard: aTargetPoint .
	
	
		
	XTokens remove: aSourcePoint .
	
	XTokens add: aTargetPoint .
	
	isPlayingX _ false .
	
! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/1/2020 20:15:38' prior: 50969346!
moveXTokenFrom: aSourcePoint to: aTargetPoint

	(XTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifFalse: [ self error: self class cannotMoveTwiceErrorDescription ].
	
	self assertThat: aSourcePoint isWithinOneUnitDistanceTo: aTargetPoint.
	
	self assertThatSourceIsX: aSourcePoint .
	
	self assertThatPositionIsIntoTheBoard: aTargetPoint .
		
	XTokens remove: aSourcePoint .
	
	XTokens add: aTargetPoint .
	
	isPlayingX _ false .
	
! !

!testRun: #TerniLapilliTest #test24WhenMovingXSourcePositionShouldContainX stamp: 'eb 11/1/2020 20:15:45'!
FAILURE!

!testRun: #TerniLapilliTest #test24WhenMovingXSourcePositionShouldContainX stamp: 'eb 11/1/2020 20:15:45'!
FAILURE!
!TerniLapilli methodsFor: 'testing' stamp: 'eb 11/1/2020 20:16:26'!
assertThatSourceIsX: aSourcePoint

	 ((XTokens includes: aSourcePoint ) or: [ OTokens includes: aSourcePoint ]) 
		ifFalse: [ self error: self class movementSourceHasNotTokenErrorDescription ].
	
	(OTokens includes: aSourcePoint) ifTrue: [self error: self class positionHasOErrorDescription ].! !

!testRun: #TerniLapilliTest #test24WhenMovingXSourcePositionShouldContainX stamp: 'eb 11/1/2020 20:16:41'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/1/2020 20:17:05'!
test25WhenMovingOSourcePositionShouldContainO

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
		
	self should: [ game moveXTokenFrom: 1@1 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: game class positionHasOErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/1/2020 20:17:46' prior: 50969416!
test25WhenMovingOSourcePositionShouldContainO

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXTokenFrom: 1@0 to: 2@0.
		
	self should: [ game moveOTokenFrom: 2@0 to: 1@0. self fail. ] 
		raise: Error
		withMessageText: game class positionHasXErrorDescription .! !

!testRun: #TerniLapilliTest #test25WhenMovingOSourcePositionShouldContainO stamp: 'eb 11/1/2020 20:18:14'!
ERROR!

!testRun: #TerniLapilliTest #test25WhenMovingOSourcePositionShouldContainO stamp: 'eb 11/1/2020 20:18:14'!
ERROR!
!TerniLapilli class methodsFor: '*Cuis-University-Model' stamp: 'eb 11/1/2020 20:18:21'!
positionHasXErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: '*Cuis-University-Model' stamp: 'eb 11/1/2020 20:18:37' prior: 50969454!
positionHasXErrorDescription

	^ 'Position has X'.! !

!testRun: #TerniLapilliTest #test25WhenMovingOSourcePositionShouldContainO stamp: 'eb 11/1/2020 20:18:40'!
FAILURE!

!testRun: #TerniLapilliTest #test25WhenMovingOSourcePositionShouldContainO stamp: 'eb 11/1/2020 20:18:40'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/1/2020 20:19:43' prior: 50969197!
moveOTokenFrom: aSourcePoint to: aTargetPoint
	
	(OTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifTrue: [ self error: self class cannotMoveTwiceErrorDescription ].
		
	self assertThat: aSourcePoint isWithinOneUnitDistanceTo: aTargetPoint.
	
	((XTokens includes: aSourcePoint ) or: [ OTokens includes: aSourcePoint ]) 
		ifFalse: [self error: self class movementSourceHasNotTokenErrorDescription ].
		
	(XTokens includes: aSourcePoint) ifTrue: [ self error: self class positionHasXErrorDescription ] .
	
	self assertThatPositionIsIntoTheBoard: aTargetPoint .
	
	OTokens remove: aSourcePoint .
	
	OTokens add: aTargetPoint .
	
	isPlayingX _ true .! !

!testRun: #TerniLapilliTest #test25WhenMovingOSourcePositionShouldContainO stamp: 'eb 11/1/2020 20:19:49'!
PASSED!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/1/2020 20:20:32' prior: 50969472!
moveOTokenFrom: aSourcePoint to: aTargetPoint
	
	(OTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifTrue: [ self error: self class cannotMoveTwiceErrorDescription ].
		
	self assertThat: aSourcePoint isWithinOneUnitDistanceTo: aTargetPoint.
	
	self assertIsO: aSourcePoint .
	
	self assertThatPositionIsIntoTheBoard: aTargetPoint .
	
	OTokens remove: aSourcePoint .
	
	OTokens add: aTargetPoint .
	
	isPlayingX _ true .! !
!TerniLapilli methodsFor: 'testing' stamp: 'eb 11/1/2020 20:20:54'!
assertIsO: aPoint

	((XTokens includes: aPoint ) or: [ OTokens includes: aPoint ]) 
		ifFalse: [self error: self class movementSourceHasNotTokenErrorDescription ].
		
	(XTokens includes: aPoint) ifTrue: [ self error: self class positionHasXErrorDescription ] .! !
!TerniLapilli methodsFor: 'testing' stamp: 'eb 11/1/2020 20:21:09' prior: 50969400!
assertThatSourceIsX: aSourcePoint

	 ((XTokens includes: aSourcePoint ) or: [ OTokens includes: aSourcePoint ]) 
		ifFalse: [ self error: self class movementSourceHasNotTokenErrorDescription ].
	
	(OTokens includes: aSourcePoint) ifTrue: [self error: self class positionHasOErrorDescription ].! !
!TerniLapilli methodsFor: 'testing' stamp: 'eb 11/1/2020 20:21:26'!
assertIsX: aSourcePoint

	 ((XTokens includes: aSourcePoint ) or: [ OTokens includes: aSourcePoint ]) 
		ifFalse: [ self error: self class movementSourceHasNotTokenErrorDescription ].
	
	(OTokens includes: aSourcePoint) ifTrue: [self error: self class positionHasOErrorDescription ].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'eb 11/1/2020 20:21:26' prior: 50969370!
moveXTokenFrom: aSourcePoint to: aTargetPoint

	(XTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifFalse: [ self error: self class cannotMoveTwiceErrorDescription ].
	
	self assertThat: aSourcePoint isWithinOneUnitDistanceTo: aTargetPoint.
	
	self assertIsX: aSourcePoint .
	
	self assertThatPositionIsIntoTheBoard: aTargetPoint .
		
	XTokens remove: aSourcePoint .
	
	XTokens add: aTargetPoint .
	
	isPlayingX _ false .
	
! !

!methodRemoval: TerniLapilli #assertThatSourceIsX: stamp: 'eb 11/1/2020 20:21:26'!
assertThatSourceIsX: aSourcePoint

	 ((XTokens includes: aSourcePoint ) or: [ OTokens includes: aSourcePoint ]) 
		ifFalse: [ self error: self class movementSourceHasNotTokenErrorDescription ].
	
	(OTokens includes: aSourcePoint) ifTrue: [self error: self class positionHasOErrorDescription ].!
!TerniLapilli methodsFor: 'testing' stamp: 'eb 11/1/2020 20:21:38' prior: 50969552!
assertIsX: aPoint

	 ((XTokens includes: aPoint ) or: [ OTokens includes: aPoint ]) 
		ifFalse: [ self error: self class movementSourceHasNotTokenErrorDescription ].
	
	(OTokens includes: aPoint) ifTrue: [self error: self class positionHasOErrorDescription ].! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/1/2020 20:21:46'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/1/2020 20:21:46'!
PASSED!

!testRun: #TerniLapilliTest #test03OPutsAfterX stamp: 'eb 11/1/2020 20:21:46'!
PASSED!

!testRun: #TerniLapilliTest #test04XPutsAfterO stamp: 'eb 11/1/2020 20:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test05XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 11/1/2020 20:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test06OTokensShouldBePlacedIntoBoardnAValidPosition stamp: 'eb 11/1/2020 20:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test07XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/1/2020 20:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test08OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/1/2020 20:21:47'!
PASSED!

!testRun: #TerniLapilliTest #test09XTokensShouldNotBeMoreThanThree stamp: 'eb 11/1/2020 20:21:48'!
PASSED!

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 11/1/2020 20:21:48'!
PASSED!

!testRun: #TerniLapilliTest #test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens stamp: 'eb 11/1/2020 20:21:48'!
PASSED!

!testRun: #TerniLapilliTest #test12XTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/1/2020 20:21:48'!
PASSED!

!testRun: #TerniLapilliTest #test13XTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/1/2020 20:21:49'!
PASSED!

!testRun: #TerniLapilliTest #test14OTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/1/2020 20:21:49'!
PASSED!

!testRun: #TerniLapilliTest #test15OTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/1/2020 20:21:49'!
PASSED!

!testRun: #TerniLapilliTest #test16XCannotMoveTwice stamp: 'eb 11/1/2020 20:21:49'!
PASSED!

!testRun: #TerniLapilliTest #test17OCannotMoveTwice stamp: 'eb 11/1/2020 20:21:49'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovementsLengthShouldBeOne stamp: 'eb 11/1/2020 20:21:49'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovementsLengthShouldBeOne stamp: 'eb 11/1/2020 20:21:49'!
PASSED!

!testRun: #TerniLapilliTest #test20XTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/1/2020 20:21:49'!
PASSED!

!testRun: #TerniLapilliTest #test21OTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/1/2020 20:21:49'!
PASSED!

!testRun: #TerniLapilliTest #test22WhenMovingXDestinationShouldBeIntoTheBoard stamp: 'eb 11/1/2020 20:21:49'!
PASSED!

!testRun: #TerniLapilliTest #test23WhenMovingODestinationShouldBeIntoTheBoard stamp: 'eb 11/1/2020 20:21:50'!
PASSED!

!testRun: #TerniLapilliTest #test24WhenMovingXSourcePositionShouldContainX stamp: 'eb 11/1/2020 20:21:50'!
PASSED!

!testRun: #TerniLapilliTest #test25WhenMovingOSourcePositionShouldContainO stamp: 'eb 11/1/2020 20:21:50'!
PASSED!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/1/2020 20:24:05'!
moveOFrom: aSourcePoint to: aTargetPoint
	
	(OTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifTrue: [ self error: self class cannotMoveTwiceErrorDescription ].
		
	self assertThat: aSourcePoint isWithinOneUnitDistanceTo: aTargetPoint.
	
	self assertIsO: aSourcePoint .
	
	self assertThatPositionIsIntoTheBoard: aTargetPoint .
	
	OTokens remove: aSourcePoint .
	
	OTokens add: aTargetPoint .
	
	isPlayingX _ true .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/1/2020 20:24:05' prior: 50968534!
test21OTokensMovementsSourcesAreAlreadyInBoard

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
		
	game moveXTokenFrom: 1@0 to: 2@0.
	
	self should: [ game moveOFrom: 2@2 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: game class movementSourceHasNotTokenErrorDescription .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/1/2020 20:24:06' prior: 50968441!
test15OTokensCannotBeMovedToPositionsWithXTokens

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXTokenFrom: 1@0 to: 2@0.
	
	self should: [ game moveOFrom: 1@1 to: 2@0. self fail. ] 
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/1/2020 20:24:06' prior: 50969174!
test23WhenMovingODestinationShouldBeIntoTheBoard

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXTokenFrom: 1@0 to: 2@0.
	
	self should: [ game moveOFrom: 0@2 to: -1@2. self fail. ] 
		raise: Error
		withMessageText: game class positionIsOutsideBoardErrorDescription .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/1/2020 20:24:06' prior: 50968503!
test19OMovementsLengthShouldBeOne

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXTokenFrom: 1@0 to: 2@0 .
		
	self should: [ game moveOFrom: 0@2 to: 2@2. self fail. ] 
		raise: Error
		withMessageText: game class movementsLengthShouldBeOneErrorDescription .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/1/2020 20:24:06' prior: 50968472!
test17OCannotMoveTwice

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXTokenFrom: 1@0 to: 2@0.
	
	game moveOFrom: 1@1 to: 2@1.
	
	self should: [ game moveOFrom: 2@1 to: 2@2. self fail. ] 
		raise: Error
		withMessageText: game class cannotMoveTwiceErrorDescription .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/1/2020 20:24:06' prior: 50969431!
test25WhenMovingOSourcePositionShouldContainO

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXTokenFrom: 1@0 to: 2@0.
		
	self should: [ game moveOFrom: 2@0 to: 1@0. self fail. ] 
		raise: Error
		withMessageText: game class positionHasXErrorDescription .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/1/2020 20:24:06' prior: 50968425!
test14OTokensCannotBeMovedToPositionsWithOTokens

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXTokenFrom: 1@0 to: 2@0.
	
	self should: [ game moveOFrom: 1@1 to: 1@2. self fail. ] 
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/1/2020 20:24:06' prior: 50968381!
test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	self should: [ game moveOFrom: 0@2 to: 1@2. self fail. ] 
		raise: Error
		withMessageText: game class movementsCanOnlyBeDoneWithThreeTokens .! !

!methodRemoval: TerniLapilli #moveOTokenFrom:to: stamp: 'eb 11/1/2020 20:24:06'!
moveOTokenFrom: aSourcePoint to: aTargetPoint
	
	(OTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifTrue: [ self error: self class cannotMoveTwiceErrorDescription ].
		
	self assertThat: aSourcePoint isWithinOneUnitDistanceTo: aTargetPoint.
	
	self assertIsO: aSourcePoint .
	
	self assertThatPositionIsIntoTheBoard: aTargetPoint .
	
	OTokens remove: aSourcePoint .
	
	OTokens add: aTargetPoint .
	
	isPlayingX _ true .!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/1/2020 20:24:33'!
moveXFrom: aSourcePoint to: aTargetPoint

	(XTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifFalse: [ self error: self class cannotMoveTwiceErrorDescription ].
	
	self assertThat: aSourcePoint isWithinOneUnitDistanceTo: aTargetPoint.
	
	self assertIsX: aSourcePoint .
	
	self assertThatPositionIsIntoTheBoard: aTargetPoint .
		
	XTokens remove: aSourcePoint .
	
	XTokens add: aTargetPoint .
	
	isPlayingX _ false .
	
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/1/2020 20:24:33' prior: 50969816!
test14OTokensCannotBeMovedToPositionsWithOTokens

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXFrom: 1@0 to: 2@0.
	
	self should: [ game moveOFrom: 1@1 to: 1@2. self fail. ] 
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/1/2020 20:24:33' prior: 50968457!
test16XCannotMoveTwice

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXFrom: 1@0 to: 2@0.
	
	self should: [ game moveXFrom: 2@0 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: game class cannotMoveTwiceErrorDescription .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/1/2020 20:24:33' prior: 50969112!
test22WhenMovingXDestinationShouldBeIntoTheBoard

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	self should: [ game moveXFrom: 1@0 to: 1@-1. self fail. ] 
		raise: Error
		withMessageText: game class positionIsOutsideBoardErrorDescription .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/1/2020 20:24:33' prior: 50968488!
test18XMovementsLengthShouldBeOne

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
		
	self should: [ game moveXFrom: 1@0 to: 2@2. self fail. ] 
		raise: Error
		withMessageText: game class movementsLengthShouldBeOneErrorDescription .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/1/2020 20:24:34' prior: 50969752!
test23WhenMovingODestinationShouldBeIntoTheBoard

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXFrom: 1@0 to: 2@0.
	
	self should: [ game moveOFrom: 0@2 to: -1@2. self fail. ] 
		raise: Error
		withMessageText: game class positionIsOutsideBoardErrorDescription .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/1/2020 20:24:34' prior: 50969768!
test19OMovementsLengthShouldBeOne

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXFrom: 1@0 to: 2@0 .
		
	self should: [ game moveOFrom: 0@2 to: 2@2. self fail. ] 
		raise: Error
		withMessageText: game class movementsLengthShouldBeOneErrorDescription .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/1/2020 20:24:34' prior: 50969243!
test24WhenMovingXSourcePositionShouldContainX

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
		
	self should: [ game moveXFrom: 1@1 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: game class positionHasOErrorDescription .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/1/2020 20:24:34' prior: 50968410!
test13XTokensCannotBeMovedToPositionsWithXTokens

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	self should: [ game moveXFrom: 1@0 to: 0@0. self fail. ] 
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/1/2020 20:24:34' prior: 50968395!
test12XTokensCannotBeMovedToPositionsWithOTokens

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	self should: [ game moveXFrom: 1@0 to: 1@1. self fail. ] 
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/1/2020 20:24:34' prior: 50968519!
test20XTokensMovementsSourcesAreAlreadyInBoard

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
		
	self should: [ game moveXFrom: 2@2 to: 2@1 . self fail. ] 
		raise: Error
		withMessageText: game class movementSourceHasNotTokenErrorDescription .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/1/2020 20:24:34' prior: 50968367!
test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	self should: [ game moveXFrom: 0@0 to: 0@1. self fail. ] 
		raise: Error
		withMessageText: game class movementsCanOnlyBeDoneWithThreeTokens .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/1/2020 20:24:34' prior: 50969720!
test21OTokensMovementsSourcesAreAlreadyInBoard

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
		
	game moveXFrom: 1@0 to: 2@0.
	
	self should: [ game moveOFrom: 2@2 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: game class movementSourceHasNotTokenErrorDescription .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/1/2020 20:24:35' prior: 50969784!
test17OCannotMoveTwice

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXFrom: 1@0 to: 2@0.
	
	game moveOFrom: 1@1 to: 2@1.
	
	self should: [ game moveOFrom: 2@1 to: 2@2. self fail. ] 
		raise: Error
		withMessageText: game class cannotMoveTwiceErrorDescription .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/1/2020 20:24:35' prior: 50969736!
test15OTokensCannotBeMovedToPositionsWithXTokens

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXFrom: 1@0 to: 2@0.
	
	self should: [ game moveOFrom: 1@1 to: 2@0. self fail. ] 
		raise: Error
		withMessageText: game class positionIsNotAvailableErrorDescription .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/1/2020 20:24:35' prior: 50969800!
test25WhenMovingOSourcePositionShouldContainO

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXFrom: 1@0 to: 2@0.
		
	self should: [ game moveOFrom: 2@0 to: 1@0. self fail. ] 
		raise: Error
		withMessageText: game class positionHasXErrorDescription .! !

!methodRemoval: TerniLapilli #moveXTokenFrom:to: stamp: 'eb 11/1/2020 20:24:35'!
moveXTokenFrom: aSourcePoint to: aTargetPoint

	(XTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifFalse: [ self error: self class cannotMoveTwiceErrorDescription ].
	
	self assertThat: aSourcePoint isWithinOneUnitDistanceTo: aTargetPoint.
	
	self assertIsX: aSourcePoint .
	
	self assertThatPositionIsIntoTheBoard: aTargetPoint .
		
	XTokens remove: aSourcePoint .
	
	XTokens add: aTargetPoint .
	
	isPlayingX _ false .
	
!

----QUIT----(1 November 2020 20:30:56) CuisUniversity-4365.image priorSource: 20369712!

----STARTUP---- (2 November 2020 08:29:54) as C:\Program Files\CuisUniversity\CuisUniversity-4365.image!

!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 08:33:23'!
test26XWinsWhenHasThreeInLine

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXFrom: 1@0 to: 2@0.
	
	game moveOFrom: 1@1 to: 2@1.
		
	self should: [ game moveOFrom: 2@0 to: 1@0. self fail. ] 
		raise: Error
		withMessageText: game class positionHasXErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 08:36:48' prior: 50970151!
test26XWinsWhenHasThreeInLine

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXFrom: 1@0 to: 2@0.
	
	game moveOFrom: 1@1 to: 2@1.
	
	game moveXFrom: 0@1 to: 1@1.
	
	game moveOFrom: 1@2 to: 2@2.
	
	game moveXFrom: 1@1 to: 1@0.
	
	self assert: self isOver .
	
	self assert: self hasPlayerXWon.
	
	self deny: self hasPlayerOWon.
		
	self should: [ game moveOFrom: 2@0 to: 1@0. self fail. ] 
		raise: Error
		withMessageText: game class positionHasXErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 08:37:06' prior: 50970167!
test26XWinsWhenHasThreeInLine

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXFrom: 1@0 to: 2@0.
	
	game moveOFrom: 1@1 to: 2@1.
	
	game moveXFrom: 0@1 to: 1@1.
	
	game moveOFrom: 1@2 to: 2@2.
	
	game moveXFrom: 1@1 to: 1@0.
	
	self assert: self isOver .
	
	self assert: self hasPlayerXWon.
	
	self deny: self hasPlayerOWon.! !

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 08:37:13'!
ERROR!

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 08:37:13'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 08:37:21'!
isOver
	self shouldBeImplemented.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 08:37:29' prior: 50970189!
test26XWinsWhenHasThreeInLine

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXFrom: 1@0 to: 2@0.
	
	game moveOFrom: 1@1 to: 2@1.
	
	game moveXFrom: 0@1 to: 1@1.
	
	game moveOFrom: 1@2 to: 2@2.
	
	game moveXFrom: 1@1 to: 1@0.
	
	self assert: game isOver .
	
	self assert: game hasPlayerXWon.
	
	self deny: game hasPlayerOWon.! !

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 08:37:31'!
ERROR!

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 08:37:31'!
ERROR!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 08:37:46'!
isOver
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 08:37:56' prior: 50970240!
isOver
	
	^ true.! !

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 08:38:04'!
ERROR!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 08:38:13'!
hasPlayerXWon
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 08:38:23' prior: 50970250!
hasPlayerXWon
	
	^ true.! !

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 08:38:26'!
ERROR!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 08:38:34'!
hasPlayerOWon
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 08:38:44' prior: 50970261!
hasPlayerOWon
	
	^ false.! !

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 08:38:47'!
PASSED!

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 08:38:51'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 08:39:13'!
test27OWinsWhenHasThreeInLine

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXFrom: 1@0 to: 2@0.
	
	game moveOFrom: 1@1 to: 2@1.
	
	game moveXFrom: 0@1 to: 1@1.
	
	game moveOFrom: 1@2 to: 2@2.
	
	game moveXFrom: 1@1 to: 1@0.
	
	self assert: game isOver .
	
	self assert: game hasPlayerXWon.
	
	self deny: game hasPlayerOWon.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 08:39:54' prior: 50970275!
test27OWinsWhenHasThreeInLine

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	game putOAt: 1@2.
	
	game moveXFrom: 1@0 to: 2@0.
	
	game moveOFrom: 1@1 to: 2@1.
	
	game moveXFrom: 0@1 to: 1@1.
	
	game moveOFrom: 2@1 to: 2@2.
	
	self assert: game isOver .
	
	self assert: game hasPlayerOWon.
	
	self deny: game hasPlayerXWon.! !

!testRun: #TerniLapilliTest #test27OWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 08:39:57'!
FAILURE!

!testRun: #TerniLapilliTest #test27OWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 08:39:57'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 08:50:01' prior: 50970254!
hasPlayerXWon

	| verticalWin horizontalWin diagonalWin |
	
	(XTokens size < 3) ifTrue: [ ^false ].
	
	
	verticalWin _ XTokens allSatisfy: [ :each | (XTokens at: 1) x = each x ]
	
	^ true.! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 08:50:42' prior: 50970316!
hasPlayerXWon

	| verticalWin horizontalWin diagonalWin |
	
	(XTokens size < 3) ifTrue: [ ^false ].
	
	verticalWin _ XTokens allSatisfy: [ :each | (XTokens at: 1) x = each x ].
	
	horizontalWin _ XTokens allSatisfy: [ :each | (XTokens at: 1) y = each y ].
	
	^ true.! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 08:52:50' prior: 50970325!
hasPlayerXWon

	| verticalWin horizontalWin diagonalWin |
	
	(XTokens size < 3) ifTrue: [ ^false ].
	
	verticalWin _ XTokens allSatisfy: [ :each | (XTokens at: 1) x = each x ].
	
	horizontalWin _ XTokens allSatisfy: [ :each | (XTokens at: 1) y = each y ].
	
	diagonalWin _ XTokens = #(0@0. 1@1. 2@2.) or: XTokens = #(0@2. 1@1. 2@0.).
	
	^ verticalWin or: horizontalWin or: diagonalWin.! !
!TerniLapilli methodsFor: 'initialization' stamp: 'eb 11/2/2020 08:53:05' prior: 50968569 overrides: 16896425!
initialize

	XTokens _ Set new .
	
	OTokens _ Set new .
		
	isPlayingX _ true .! !

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 08:53:24'!
ERROR!

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 08:53:24'!
ERROR!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 08:54:01' prior: 50970337!
hasPlayerXWon

	| verticalWin horizontalWin diagonalWin |
	
	(XTokens size < 3) ifTrue: [ ^false ].
	
	verticalWin _ XTokens allSatisfy: [ :each | (XTokens first) x = each x ].
	
	horizontalWin _ XTokens allSatisfy: [ :each | (XTokens at: 1) y = each y ].
	
	diagonalWin _ XTokens = #(0@0. 1@1. 2@2.) or: XTokens = #(0@2. 1@1. 2@0.).
	
	^ verticalWin or: horizontalWin or: diagonalWin.! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 08:54:18' prior: 50970365!
hasPlayerXWon

	| verticalWin horizontalWin diagonalWin |
	
	(XTokens size < 3) ifTrue: [ ^false ].
	
	verticalWin _ XTokens allSatisfy: [ :each | XTokens first x = each x ].
	
	horizontalWin _ XTokens allSatisfy: [ :each | XTokens first y = each y ].
	
	diagonalWin _ XTokens = #(0@0. 1@1. 2@2.) or: XTokens = #(0@2. 1@1. 2@0.).
	
	^ verticalWin or: horizontalWin or: diagonalWin.! !

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 08:54:22'!
ERROR!

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 08:54:22'!
ERROR!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 08:55:58' prior: 50970380!
hasPlayerXWon

	| verticalWin horizontalWin diagonalWin |
	
	(XTokens size < 3) ifTrue: [ ^false ].
	
	verticalWin _ XTokens allSatisfy: [ :a :b | a x = b x ].
	
	horizontalWin _ XTokens allSatisfy: [ :a : b | a y = b y ].
	
	diagonalWin _ XTokens = #(0@0. 1@1. 2@2.) or: XTokens = #(0@2. 1@1. 2@0.).
	
	^ verticalWin or: horizontalWin or: diagonalWin.! !

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 08:56:05'!
ERROR!

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 08:56:05'!
ERROR!

----QUIT----(2 November 2020 09:21:31) CuisUniversity-4365.image priorSource: 20431797!

----STARTUP---- (2 November 2020 13:19:24) as C:\Program Files\CuisUniversity\CuisUniversity-4365.image!


!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 13:20:34'!
ERROR!

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 13:20:34'!
ERROR!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 13:24:48' prior: 50970401!
hasPlayerXWon

	| verticalWin horizontalWin diagonalWin |
	
	(XTokens size < 3) ifTrue: [ ^false ].
	
	verticalWin _ XTokens allSatisfy: [ :each | XTokens asArray first x = each x.].
	
	horizontalWin _ XTokens allSatisfy: [ :each | XTokens asArray first y = each y. ].
	
	diagonalWin _ XTokens = #(0@0. 1@1. 2@2.) or: XTokens = #(0@2. 1@1. 2@0.).
	
	^ verticalWin or: horizontalWin or: diagonalWin.! !

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 13:24:51'!
PASSED!

!testRun: #TerniLapilliTest #test27OWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 13:24:51'!
FAILURE!

!testRun: #TerniLapilliTest #test27OWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 13:24:51'!
FAILURE!

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 13:25:07'!
PASSED!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 13:26:20' prior: 50970265!
hasPlayerOWon
	
	| verticalWin horizontalWin diagonalWin |
	
	(OTokens size < 3) ifTrue: [ ^false ].
	
	verticalWin _ OTokens allSatisfy: [ :each | OTokens asArray first x = each x.].
	
	horizontalWin _ OTokens allSatisfy: [ :each | OTokens asArray first y = each y. ].
	
	diagonalWin _ OTokens = #(0@0. 1@1. 2@2.) or: OTokens = #(0@2. 1@1. 2@0.).
	
	^ verticalWin or: horizontalWin or: diagonalWin.! !

!testRun: #TerniLapilliTest #test27OWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 13:26:26'!
PASSED!

!methodRemoval: TerniLapilliTest #isOver stamp: 'eb 11/2/2020 13:27:43'!
isOver
	self shouldBeImplemented.!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 13:28:14' prior: 50970244!
isOver
	
	^ self hasPlayerOWon or: [ self hasPlayerXWon ].! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 13:42:29'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 13:42:29'!
PASSED!

!testRun: #TerniLapilliTest #test03OPutsAfterX stamp: 'eb 11/2/2020 13:42:29'!
PASSED!

!testRun: #TerniLapilliTest #test04XPutsAfterO stamp: 'eb 11/2/2020 13:42:29'!
PASSED!

!testRun: #TerniLapilliTest #test05XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 11/2/2020 13:42:29'!
PASSED!

!testRun: #TerniLapilliTest #test06OTokensShouldBePlacedIntoBoardnAValidPosition stamp: 'eb 11/2/2020 13:42:29'!
PASSED!

!testRun: #TerniLapilliTest #test07XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 13:42:29'!
PASSED!

!testRun: #TerniLapilliTest #test08OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 13:42:29'!
PASSED!

!testRun: #TerniLapilliTest #test09XTokensShouldNotBeMoreThanThree stamp: 'eb 11/2/2020 13:42:29'!
PASSED!

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 11/2/2020 13:42:29'!
PASSED!

!testRun: #TerniLapilliTest #test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens stamp: 'eb 11/2/2020 13:42:29'!
PASSED!

!testRun: #TerniLapilliTest #test12XTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 13:42:30'!
PASSED!

!testRun: #TerniLapilliTest #test13XTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 13:42:30'!
PASSED!

!testRun: #TerniLapilliTest #test14OTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 13:42:30'!
PASSED!

!testRun: #TerniLapilliTest #test15OTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 13:42:30'!
PASSED!

!testRun: #TerniLapilliTest #test16XCannotMoveTwice stamp: 'eb 11/2/2020 13:42:30'!
PASSED!

!testRun: #TerniLapilliTest #test17OCannotMoveTwice stamp: 'eb 11/2/2020 13:42:30'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 13:42:30'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 13:42:30'!
PASSED!

!testRun: #TerniLapilliTest #test20XTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 13:42:30'!
PASSED!

!testRun: #TerniLapilliTest #test21OTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 13:42:30'!
PASSED!

!testRun: #TerniLapilliTest #test22WhenMovingXDestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 13:42:30'!
PASSED!

!testRun: #TerniLapilliTest #test23WhenMovingODestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 13:42:30'!
PASSED!

!testRun: #TerniLapilliTest #test24WhenMovingXSourcePositionShouldContainX stamp: 'eb 11/2/2020 13:42:30'!
PASSED!

!testRun: #TerniLapilliTest #test25WhenMovingOSourcePositionShouldContainO stamp: 'eb 11/2/2020 13:42:30'!
PASSED!

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 13:42:30'!
PASSED!

!testRun: #TerniLapilliTest #test27OWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 13:42:30'!
PASSED!
!TerniLapilli methodsFor: 'testing' stamp: 'eb 11/2/2020 13:42:55' prior: 50969529!
assertIsO: aPosition

	((XTokens includes: aPosition ) or: [ OTokens includes: aPosition ]) 
		ifFalse: [self error: self class movementSourceHasNotTokenErrorDescription ].
		
	(XTokens includes: aPosition) ifTrue: [ self error: self class positionHasXErrorDescription ] .! !
!TerniLapilli methodsFor: 'testing' stamp: 'eb 11/2/2020 13:43:42' prior: 50970583!
assertIsO: aPosition

	((XTokens includes: aPosition ) or: [ OTokens includes: aPosition ]) 
		ifFalse: [self error: self class movementSourceHasNotTokenErrorDescription ].
		
	(XTokens includes: aPosition) ifTrue: [ self error: self class positionHasXErrorDescription ] .! !
!TerniLapilli methodsFor: 'testing' stamp: 'eb 11/2/2020 13:43:59'!
assertHasO: aPosition

	((XTokens includes: aPosition ) or: [ OTokens includes: aPosition ]) 
		ifFalse: [self error: self class movementSourceHasNotTokenErrorDescription ].
		
	(XTokens includes: aPosition) ifTrue: [ self error: self class positionHasXErrorDescription ] .! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 13:43:59' prior: 50969697!
moveOFrom: aSourcePoint to: aTargetPoint
	
	(OTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifTrue: [ self error: self class cannotMoveTwiceErrorDescription ].
		
	self assertThat: aSourcePoint isWithinOneUnitDistanceTo: aTargetPoint.
	
	self assertHasO: aSourcePoint .
	
	self assertThatPositionIsIntoTheBoard: aTargetPoint .
	
	OTokens remove: aSourcePoint .
	
	OTokens add: aTargetPoint .
	
	isPlayingX _ true .! !

!methodRemoval: TerniLapilli #assertIsO: stamp: 'eb 11/2/2020 13:43:59'!
assertIsO: aPosition

	((XTokens includes: aPosition ) or: [ OTokens includes: aPosition ]) 
		ifFalse: [self error: self class movementSourceHasNotTokenErrorDescription ].
		
	(XTokens includes: aPosition) ifTrue: [ self error: self class positionHasXErrorDescription ] .!
!TerniLapilli methodsFor: 'testing' stamp: 'eb 11/2/2020 13:44:08' prior: 50969599!
assertIsX: aPosition

	 ((XTokens includes: aPosition ) or: [ OTokens includes: aPosition ]) 
		ifFalse: [ self error: self class movementSourceHasNotTokenErrorDescription ].
	
	(OTokens includes: aPosition) ifTrue: [self error: self class positionHasOErrorDescription ].! !
!TerniLapilli methodsFor: 'testing' stamp: 'eb 11/2/2020 13:44:19'!
assertHasX: aPosition

	 ((XTokens includes: aPosition ) or: [ OTokens includes: aPosition ]) 
		ifFalse: [ self error: self class movementSourceHasNotTokenErrorDescription ].
	
	(OTokens includes: aPosition) ifTrue: [self error: self class positionHasOErrorDescription ].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 13:44:19' prior: 50969868!
moveXFrom: aSourcePoint to: aTargetPoint

	(XTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifFalse: [ self error: self class cannotMoveTwiceErrorDescription ].
	
	self assertThat: aSourcePoint isWithinOneUnitDistanceTo: aTargetPoint.
	
	self assertHasX: aSourcePoint .
	
	self assertThatPositionIsIntoTheBoard: aTargetPoint .
		
	XTokens remove: aSourcePoint .
	
	XTokens add: aTargetPoint .
	
	isPlayingX _ false .
	
! !

!methodRemoval: TerniLapilli #assertIsX: stamp: 'eb 11/2/2020 13:44:19'!
assertIsX: aPosition

	 ((XTokens includes: aPosition ) or: [ OTokens includes: aPosition ]) 
		ifFalse: [ self error: self class movementSourceHasNotTokenErrorDescription ].
	
	(OTokens includes: aPosition) ifTrue: [self error: self class positionHasOErrorDescription ].!
!TerniLapilli methodsFor: 'asserting' stamp: 'eb 11/2/2020 13:45:59' prior: 50968576!
assertThat: aSourcePosition isWithinOneUnitDistanceTo: aTargetPoint
	
	| dX dY verticalDistanceIsOne horizontalDistanceIsOne diagonalDistanceIsOne |
	
	dX _ (aSourcePosition x - aTargetPoint x) abs.
	
	dY _ (aSourcePosition y - aTargetPoint y) abs.
	
	verticalDistanceIsOne _ (dX = 0 and: [dY = 1]) .
	
	horizontalDistanceIsOne _ (dX = 1 and: [dY = 0]).
	
	diagonalDistanceIsOne _ (dX = 1 and: [dY = 1]).
	
	(verticalDistanceIsOne or: horizontalDistanceIsOne or: diagonalDistanceIsOne) ifFalse: 
		[ self error: self class movementsLengthShouldBeOneErrorDescription .]! !
!TerniLapilli methodsFor: 'asserting' stamp: 'eb 11/2/2020 13:46:04' prior: 50970709!
assertThat: aSourcePosition isWithinOneUnitDistanceTo: aTargetPosition
	
	| dX dY verticalDistanceIsOne horizontalDistanceIsOne diagonalDistanceIsOne |
	
	dX _ (aSourcePosition x - aTargetPosition x) abs.
	
	dY _ (aSourcePosition y - aTargetPosition y) abs.
	
	verticalDistanceIsOne _ (dX = 0 and: [dY = 1]) .
	
	horizontalDistanceIsOne _ (dX = 1 and: [dY = 0]).
	
	diagonalDistanceIsOne _ (dX = 1 and: [dY = 1]).
	
	(verticalDistanceIsOne or: horizontalDistanceIsOne or: diagonalDistanceIsOne) ifFalse: 
		[ self error: self class movementsLengthShouldBeOneErrorDescription .]! !
!TerniLapilli methodsFor: 'asserting' stamp: 'eb 11/2/2020 13:47:18' prior: 50969043!
assertThatPositionIsIntoTheBoard: aPosition

	^ (self board containsPoint: aPosition) ifFalse: [ self error: self class positionIsOutsideBoardErrorDescription ]! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 13:47:55' prior: 50970434!
hasPlayerXWon

	| verticalWin horizontalWin diagonalWin |
	
	(XTokens size < 3) ifTrue: [ ^false ].
	
	verticalWin _ XTokens allSatisfy: [ :token | XTokens asArray first x = token x.].
	
	horizontalWin _ XTokens allSatisfy: [ :each | XTokens asArray first y = each y. ].
	
	diagonalWin _ XTokens = #(0@0. 1@1. 2@2.) or: XTokens = #(0@2. 1@1. 2@0.).
	
	^ verticalWin or: horizontalWin or: diagonalWin.! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 13:47:57' prior: 50970759!
hasPlayerXWon

	| verticalWin horizontalWin diagonalWin |
	
	(XTokens size < 3) ifTrue: [ ^false ].
	
	verticalWin _ XTokens allSatisfy: [ :token | XTokens asArray first x = token x.].
	
	horizontalWin _ XTokens allSatisfy: [ :token | XTokens asArray first y = token y. ].
	
	diagonalWin _ XTokens = #(0@0. 1@1. 2@2.) or: XTokens = #(0@2. 1@1. 2@0.).
	
	^ verticalWin or: horizontalWin or: diagonalWin.! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 13:48:25' prior: 50970618!
moveOFrom: aSourcePosition to: aTargetPoint
	
	(OTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifTrue: [ self error: self class cannotMoveTwiceErrorDescription ].
		
	self assertThat: aSourcePosition isWithinOneUnitDistanceTo: aTargetPoint.
	
	self assertHasO: aSourcePosition .
	
	self assertThatPositionIsIntoTheBoard: aTargetPoint .
	
	OTokens remove: aSourcePosition .
	
	OTokens add: aTargetPoint .
	
	isPlayingX _ true .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 13:48:29' prior: 50970791!
moveOFrom: aSourcePosition to: aTargetPosition
	
	(OTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPosition ) or: [ OTokens includes: aTargetPosition ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifTrue: [ self error: self class cannotMoveTwiceErrorDescription ].
		
	self assertThat: aSourcePosition isWithinOneUnitDistanceTo: aTargetPosition.
	
	self assertHasO: aSourcePosition .
	
	self assertThatPositionIsIntoTheBoard: aTargetPosition .
	
	OTokens remove: aSourcePosition .
	
	OTokens add: aTargetPosition .
	
	isPlayingX _ true .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 13:48:38' prior: 50970675!
moveXFrom: aSourcePosition to: aTargetPoint

	(XTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPoint ) or: [ OTokens includes: aTargetPoint ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifFalse: [ self error: self class cannotMoveTwiceErrorDescription ].
	
	self assertThat: aSourcePosition isWithinOneUnitDistanceTo: aTargetPoint.
	
	self assertHasX: aSourcePosition .
	
	self assertThatPositionIsIntoTheBoard: aTargetPoint .
		
	XTokens remove: aSourcePosition .
	
	XTokens add: aTargetPoint .
	
	isPlayingX _ false .
	
! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 13:48:43' prior: 50970838!
moveXFrom: aSourcePosition to: aTargetPosition

	(XTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPosition ) or: [ OTokens includes: aTargetPosition ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifFalse: [ self error: self class cannotMoveTwiceErrorDescription ].
	
	self assertThat: aSourcePosition isWithinOneUnitDistanceTo: aTargetPosition.
	
	self assertHasX: aSourcePosition .
	
	self assertThatPositionIsIntoTheBoard: aTargetPosition .
		
	XTokens remove: aSourcePosition .
	
	XTokens add: aTargetPosition .
	
	isPlayingX _ false .
	
! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 13:49:05'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 13:49:05'!
PASSED!

!testRun: #TerniLapilliTest #test03OPutsAfterX stamp: 'eb 11/2/2020 13:49:05'!
PASSED!

!testRun: #TerniLapilliTest #test04XPutsAfterO stamp: 'eb 11/2/2020 13:49:05'!
PASSED!

!testRun: #TerniLapilliTest #test05XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 11/2/2020 13:49:05'!
PASSED!

!testRun: #TerniLapilliTest #test06OTokensShouldBePlacedIntoBoardnAValidPosition stamp: 'eb 11/2/2020 13:49:05'!
PASSED!

!testRun: #TerniLapilliTest #test07XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 13:49:05'!
PASSED!

!testRun: #TerniLapilliTest #test08OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 13:49:05'!
PASSED!

!testRun: #TerniLapilliTest #test09XTokensShouldNotBeMoreThanThree stamp: 'eb 11/2/2020 13:49:05'!
PASSED!

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 11/2/2020 13:49:05'!
PASSED!

!testRun: #TerniLapilliTest #test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens stamp: 'eb 11/2/2020 13:49:05'!
PASSED!

!testRun: #TerniLapilliTest #test12XTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 13:49:05'!
PASSED!

!testRun: #TerniLapilliTest #test13XTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 13:49:05'!
PASSED!

!testRun: #TerniLapilliTest #test14OTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 13:49:06'!
PASSED!

!testRun: #TerniLapilliTest #test15OTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 13:49:06'!
PASSED!

!testRun: #TerniLapilliTest #test16XCannotMoveTwice stamp: 'eb 11/2/2020 13:49:06'!
PASSED!

!testRun: #TerniLapilliTest #test17OCannotMoveTwice stamp: 'eb 11/2/2020 13:49:06'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 13:49:06'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 13:49:06'!
PASSED!

!testRun: #TerniLapilliTest #test20XTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 13:49:06'!
PASSED!

!testRun: #TerniLapilliTest #test21OTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 13:49:06'!
PASSED!

!testRun: #TerniLapilliTest #test22WhenMovingXDestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 13:49:06'!
PASSED!

!testRun: #TerniLapilliTest #test23WhenMovingODestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 13:49:06'!
PASSED!

!testRun: #TerniLapilliTest #test24WhenMovingXSourcePositionShouldContainX stamp: 'eb 11/2/2020 13:49:06'!
PASSED!

!testRun: #TerniLapilliTest #test25WhenMovingOSourcePositionShouldContainO stamp: 'eb 11/2/2020 13:49:06'!
PASSED!

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 13:49:06'!
PASSED!

!testRun: #TerniLapilliTest #test27OWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 13:49:06'!
PASSED!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 11/2/2020 13:50:54' prior: 50968717!
cannotPutMoreThanThreeXTokensErrorDescription
	
	^ 'Cannot put more than three X tokens into board' .! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 11/2/2020 13:51:06'!
cannotPutMoreThanThreeTokensErrorDescription
	
	^ 'Cannot put more than three X tokens into board' .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 13:51:06' prior: 50968353!
test09XTokensShouldNotBeMoreThanThree

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@1 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 1@2 .
	
	game putOAt: 2@1 .
	
	self should: [ game putXAt: 2@2. self fail.]
		raise: Error
		withMessageText: game class cannotPutMoreThanThreeTokensErrorDescription .! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 13:51:06' prior: 50968681!
putXAt: aPoint 
	
	(self board containsPoint: aPoint) ifFalse: [ self error: self class positionIsOutsideBoardErrorDescription ].
	
	(aPoint isIntegerPoint) ifFalse: [self error: self class positionIsInvalidErrorDescription ].
	
	(XTokens includes: aPoint) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
	
	(OTokens includes: aPoint) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
	
	(XTokens size = 3) ifTrue: [self error: self class cannotPutMoreThanThreeTokensErrorDescription ].
	
	XTokens add: aPoint .
	
	isPlayingX _ false .! !

!methodRemoval: TerniLapilli class #cannotPutMoreThanThreeXTokensErrorDescription stamp: 'eb 11/2/2020 13:51:06'!
cannotPutMoreThanThreeXTokensErrorDescription
	
	^ 'Cannot put more than three X tokens into board' .!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 11/2/2020 13:51:11' prior: 50970985!
cannotPutMoreThanThreeTokensErrorDescription
	
	^ 'Cannot put more than three tokens into board' .! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 13:52:24'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 13:52:24'!
PASSED!

!testRun: #TerniLapilliTest #test03OPutsAfterX stamp: 'eb 11/2/2020 13:52:24'!
PASSED!

!testRun: #TerniLapilliTest #test04XPutsAfterO stamp: 'eb 11/2/2020 13:52:24'!
PASSED!

!testRun: #TerniLapilliTest #test05XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 11/2/2020 13:52:24'!
PASSED!

!testRun: #TerniLapilliTest #test06OTokensShouldBePlacedIntoBoardnAValidPosition stamp: 'eb 11/2/2020 13:52:24'!
PASSED!

!testRun: #TerniLapilliTest #test07XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 13:52:24'!
PASSED!

!testRun: #TerniLapilliTest #test08OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 13:52:24'!
PASSED!

!testRun: #TerniLapilliTest #test09XTokensShouldNotBeMoreThanThree stamp: 'eb 11/2/2020 13:52:24'!
PASSED!

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 11/2/2020 13:52:24'!
PASSED!

!testRun: #TerniLapilliTest #test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens stamp: 'eb 11/2/2020 13:52:24'!
PASSED!

!testRun: #TerniLapilliTest #test12XTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 13:52:24'!
PASSED!

!testRun: #TerniLapilliTest #test13XTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 13:52:24'!
PASSED!

!testRun: #TerniLapilliTest #test14OTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 13:52:24'!
PASSED!

!testRun: #TerniLapilliTest #test15OTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 13:52:24'!
PASSED!

!testRun: #TerniLapilliTest #test16XCannotMoveTwice stamp: 'eb 11/2/2020 13:52:24'!
PASSED!

!testRun: #TerniLapilliTest #test17OCannotMoveTwice stamp: 'eb 11/2/2020 13:52:24'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 13:52:24'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 13:52:24'!
PASSED!

!testRun: #TerniLapilliTest #test20XTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 13:52:24'!
PASSED!

!testRun: #TerniLapilliTest #test21OTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 13:52:24'!
PASSED!

!testRun: #TerniLapilliTest #test22WhenMovingXDestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 13:52:24'!
PASSED!

!testRun: #TerniLapilliTest #test23WhenMovingODestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 13:52:24'!
PASSED!

!testRun: #TerniLapilliTest #test24WhenMovingXSourcePositionShouldContainX stamp: 'eb 11/2/2020 13:52:24'!
PASSED!

!testRun: #TerniLapilliTest #test25WhenMovingOSourcePositionShouldContainO stamp: 'eb 11/2/2020 13:52:24'!
PASSED!

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 13:52:24'!
PASSED!

!testRun: #TerniLapilliTest #test27OWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 13:52:24'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 13:52:49'!
test03OPlaysAfterX
	
	| game |
	
	game _ TerniLapilli new.
	
	game putXAt: 0@0 .
	
	self assert: game isPlayingO .
	
	self deny: game isPlayingX .! !

!methodRemoval: TerniLapilliTest #test03OPutsAfterX stamp: 'eb 11/2/2020 13:52:49'!
test03OPutsAfterX
	
	| game |
	
	game _ TerniLapilli new.
	
	game putXAt: 0@0 .
	
	self assert: game isPlayingO .
	
	self deny: game isPlayingX .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 13:53:12'!
test04XPlaysAfterO
	
	| game |
	
	game _ TerniLapilli new.
	
	game putXAt: 0@0 .
	
	game putOAt: 0@1 .
	
	self assert: game isPlayingX .
	
	self deny: game isPlayingO .! !

!methodRemoval: TerniLapilliTest #test04XPutsAfterO stamp: 'eb 11/2/2020 13:53:12'!
test04XPutsAfterO
	
	| game |
	
	game _ TerniLapilli new.
	
	game putXAt: 0@0 .
	
	game putOAt: 0@1 .
	
	self assert: game isPlayingX .
	
	self deny: game isPlayingO .!

TestCase subclass: #TerniLapilliTest
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli-Exercise'!

TestCase subclass: #TerniLapilliTest
	instanceVariableNames: 'terniLapilli'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli-Exercise'!

!classDefinition: #TerniLapilliTest category: #'TerniLapilli-Exercise' stamp: 'eb 11/2/2020 13:55:49'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: 'terniLapilli'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilli-Exercise'!
!TerniLapilliTest methodsFor: 'nil' stamp: 'eb 11/2/2020 13:56:04' overrides: 16927572!
setUp
	
	terniLapilli _ TerniLapilli new .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 13:56:29' prior: 50968223!
test01AtTheBeginningBoardIsEmptyAndXShouldPlay
	
	self assert: terniLapilli boardIsEmpty.
	
	self assert: terniLapilli isPlayingX .
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 13:56:42' prior: 50968231!
test02OCannotInitGame
	
	self should: [ terniLapilli putOAt: 0@0. self fail. ]
		raise: Error
		withMessageText: terniLapilli class playerXShouldPlayErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 13:57:58' prior: 50971197!
test02OCannotInitGame
	
	terniLapilli putXAt: 0@0.
	
	self should: [ terniLapilli putOAt: 0@0. self fail. ]
		raise: Error
		withMessageText: terniLapilli class playerXShouldPlayErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 14:51:50' prior: 50971135!
test03OPlaysAfterX
	
	terniLapilli putXAt: 0@0 .
	
	self assert: terniLapilli isPlayingO .
	
	self deny: terniLapilli isPlayingX .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 14:52:05' prior: 50971150!
test04XPlaysAfterO
	
	terniLapilli putXAt: 0@0 .
	
	terniLapilli putOAt: 0@1 .
	
	self assert: terniLapilli isPlayingX .
	
	self deny: terniLapilli isPlayingO .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 14:55:44' prior: 50968257!
test05XTokensShouldBePlacedIntoBoardInAValidPosition
	
	self should: [ terniLapilli putXAt: -1@0. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.
		
	self should: [ terniLapilli putXAt: 0@-1. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.
		
	self should: [ terniLapilli putXAt: 3@0. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.
		
	self should: [ terniLapilli putXAt: 0@3. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.
		
	self should: [ terniLapilli putXAt: 0.5@1. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription.
	
	self should: [ terniLapilli putXAt: 1@0.5. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 14:58:55'!
assertThatPositionsAreInsideBoard

	self should: [ terniLapilli putXAt: -1@0. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.
		
	self should: [ terniLapilli putXAt: 0@-1. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.
		
	self should: [ terniLapilli putXAt: 3@0. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.
		
	self should: [ terniLapilli putXAt: 0@3. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 14:58:55' prior: 50971230!
test05XTokensShouldBePlacedIntoBoardInAValidPosition
	
	self assertThatPositionsAreInsideBoard.
		
	self should: [ terniLapilli putXAt: 0.5@1. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription.
	
	self should: [ terniLapilli putXAt: 1@0.5. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 14:59:11'!
assertThatPositionsAreInteger

	self should: [ terniLapilli putXAt: 0.5@1. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription.
	
	self should: [ terniLapilli putXAt: 1@0.5. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 14:59:11' prior: 50971285!
test05XTokensShouldBePlacedIntoBoardInAValidPosition
	
	self assertThatPositionsAreInsideBoard.
		
	self assertThatPositionsAreInteger.! !
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 15:00:55'!
assertThatXPositionsAreInsideBoard

	self should: [ terniLapilli putXAt: -1@0. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.
		
	self should: [ terniLapilli putXAt: 0@-1. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.
		
	self should: [ terniLapilli putXAt: 3@0. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.
		
	self should: [ terniLapilli putXAt: 0@3. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 15:00:55' prior: 50971313!
test05XTokensShouldBePlacedIntoBoardInAValidPosition
	
	self assertThatXPositionsAreInsideBoard.
		
	self assertThatPositionsAreInteger.! !

!methodRemoval: TerniLapilliTest #assertThatPositionsAreInsideBoard stamp: 'eb 11/2/2020 15:00:55'!
assertThatPositionsAreInsideBoard

	self should: [ terniLapilli putXAt: -1@0. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.
		
	self should: [ terniLapilli putXAt: 0@-1. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.
		
	self should: [ terniLapilli putXAt: 3@0. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.
		
	self should: [ terniLapilli putXAt: 0@3. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription!
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 15:01:04'!
assertThatXPositionsAreInteger

	self should: [ terniLapilli putXAt: 0.5@1. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription.
	
	self should: [ terniLapilli putXAt: 1@0.5. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 15:01:04' prior: 50971344!
test05XTokensShouldBePlacedIntoBoardInAValidPosition
	
	self assertThatXPositionsAreInsideBoard.
		
	self assertThatXPositionsAreInteger.! !

!methodRemoval: TerniLapilliTest #assertThatPositionsAreInteger stamp: 'eb 11/2/2020 15:01:04'!
assertThatPositionsAreInteger

	self should: [ terniLapilli putXAt: 0.5@1. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription.
	
	self should: [ terniLapilli putXAt: 1@0.5. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:02:15' prior: 50968288!
test06OTokensShouldBePlacedIntoBoardnAValidPosition
	
	self should: [ terniLapilli putOAt: -1@0. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.
		
	self should: [ terniLapilli putOAt: 0@-1. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.
		
	self should: [ terniLapilli putOAt: 3@0. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.
		
	self should: [ terniLapilli putOAt: 0@3. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.
		
	self should: [ terniLapilli putOAt: 0.5@1. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription.
	
	self should: [ terniLapilli putOAt: 1@0.5. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:03:45'!
assertThatOPositionsAreInsideBoard

	self should: [ terniLapilli putOAt: -1@0. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.
		
	self should: [ terniLapilli putOAt: 0@-1. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.
		
	self should: [ terniLapilli putOAt: 3@0. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.
		
	self should: [ terniLapilli putOAt: 0@3. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:03:45' prior: 50971409!
test06OTokensShouldBePlacedIntoBoardnAValidPosition
	
	self assertThatOPositionsAreInsideBoard.
		
	self should: [ terniLapilli putOAt: 0.5@1. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription.
	
	self should: [ terniLapilli putOAt: 1@0.5. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:04:00'!
assertThatOPositionsAreInteger

	self should: [ terniLapilli putOAt: 0.5@1. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription.
	
	self should: [ terniLapilli putOAt: 1@0.5. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:04:00' prior: 50971464!
test06OTokensShouldBePlacedIntoBoardnAValidPosition
	
	self assertThatOPositionsAreInsideBoard.
		
	self assertThatOPositionsAreInteger.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:04:43' prior: 50968320!
test07XTokensShouldBePlacedIntoAvailablePositions

	terniLapilli putXAt: 0@0 .
	
	terniLapilli putOAt: 1@0.
	
	self should: [ terniLapilli putXAt: 0@0. self fail. ]
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription.
		
	self should: [ terniLapilli putXAt: 1@0. self fail. ]
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:07:13' prior: 50971500!
test07XTokensShouldBePlacedIntoAvailablePositions

	terniLapilli putXAt: 0@0 .
	
	terniLapilli putOAt: 1@0.
	
	self should: [ terniLapilli putXAt: 0@0. self fail. ]
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription.
		
	self should: [ terniLapilli putXAt: 1@0. self fail. ]
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:07:57' prior: 50971516!
test07XTokensShouldBePlacedIntoAvailablePositions

	terniLapilli putXAt: 0@0 .
	
	terniLapilli putOAt: 1@0.
	
	self should: [ terniLapilli putXAt: 0@0. self fail. ]
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription.
		
	self should: [ terniLapilli putXAt: 1@0. self fail. ]
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:08:18' prior: 50971532!
test07XTokensShouldBePlacedIntoAvailablePositions

	terniLapilli putXAt: 0@0 .
	
	terniLapilli putOAt: 1@0.
	
	! !
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 15:08:43'!
denyPuttingXOnOccupiedPosition

	self should: [ terniLapilli putXAt: 0@0. self fail. ]
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription.
		
	self should: [ terniLapilli putXAt: 1@0. self fail. ]
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:08:51' prior: 50971548!
test07XTokensShouldBePlacedIntoAvailablePositions

	terniLapilli putXAt: 0@0 .
	
	terniLapilli putOAt: 1@0.
	
	self denyPuttingXOnOccupiedPosition .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:09:15' prior: 50968336!
test08OTokensShouldBePlacedIntoAvailablePositions
	
	terniLapilli putXAt: 0@0 .
	
	terniLapilli putOAt: 1@0.
	
	terniLapilli putXAt: 1@1 .
	
	self should: [ terniLapilli putOAt: 0@0. self fail. ]
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription.
		
	self should: [ terniLapilli putOAt: 1@0. self fail. ]
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:09:39'!
denyPuttingOOnOccupiedPosition

	self should: [ terniLapilli putOAt: 0@0. self fail. ]
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription.
		
	self should: [ terniLapilli putOAt: 1@0. self fail. ]
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:09:39' prior: 50971577!
test08OTokensShouldBePlacedIntoAvailablePositions
	
	terniLapilli putXAt: 0@0 .
	
	terniLapilli putOAt: 1@0.
	
	terniLapilli putXAt: 1@1 .
	
	self denyPuttingOOnOccupiedPosition.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:10:27' prior: 50970992!
test09XTokensShouldNotBeMoreThanThree

	terniLapilli putXAt: 0@0 .
	
	terniLapilli putOAt: 0@1 .
	
	terniLapilli putXAt: 1@0.
	
	terniLapilli putOAt: 1@1 .
	
	terniLapilli putXAt: 1@2 .
	
	terniLapilli putOAt: 2@1 .
	
	self should: [ terniLapilli putXAt: 2@2. self fail.]
		raise: Error
		withMessageText: terniLapilli class cannotPutMoreThanThreeTokensErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:13:04'!
fillBoard

	terniLapilli putXAt: 0@0 .
	
	terniLapilli putOAt: 0@1 .
	
	terniLapilli putXAt: 1@0.
	
	terniLapilli putOAt: 1@1 .
	
	terniLapilli putXAt: 1@2 .
	
	terniLapilli putOAt: 2@1! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:13:04' prior: 50971617!
test09XTokensShouldNotBeMoreThanThree

	self fillBoard .
	
	self should: [ terniLapilli putXAt: 2@2. self fail.]
		raise: Error
		withMessageText: terniLapilli class cannotPutMoreThanThreeTokensErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:13:54' prior: 50970045!
test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens

	self fillBoard .
	
	self should: [ terniLapilli moveXFrom: 0@0 to: 0@1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class movementsCanOnlyBeDoneWithThreeTokens .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:14:02' prior: 50969832!
test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens

	| game |
	
	game _ TerniLapilli new .
	
	game putXAt: 0@0 .
	
	game putOAt: 0@2 .
	
	game putXAt: 1@0.
	
	game putOAt: 1@1 .
	
	game putXAt: 0@1.
	
	self should: [ terniLapilli moveOFrom: 0@2 to: 1@2. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class movementsCanOnlyBeDoneWithThreeTokens .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:14:08' prior: 50971661!
test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens

	self fillBoard .
	
	self should: [ terniLapilli moveOFrom: 0@2 to: 1@2. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class movementsCanOnlyBeDoneWithThreeTokens .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:14:24' prior: 50970015!
test12XTokensCannotBeMovedToPositionsWithOTokens

	self fillBoard .
	
	self should: [ terniLapilli moveXFrom: 1@0 to: 1@1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription .! !

!testRun: #TerniLapilliTest #test12XTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 15:14:36'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:15:04' prior: 50970000!
test13XTokensCannotBeMovedToPositionsWithXTokens

	self fillBoard .
	
	self should: [ terniLapilli moveXFrom: 1@0 to: 0@0. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:15:22' prior: 50969892!
test14OTokensCannotBeMovedToPositionsWithOTokens

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	self should: [ terniLapilli moveOFrom: 1@1 to: 1@2. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:15:42' prior: 50970091!
test15OTokensCannotBeMovedToPositionsWithXTokens

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	self should: [ terniLapilli moveOFrom: 1@1 to: 2@0. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:15:54' prior: 50969908!
test16XCannotMoveTwice

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	self should: [ terniLapilli moveXFrom: 2@0 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class cannotMoveTwiceErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:16:11' prior: 50970075!
test17OCannotMoveTwice

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	terniLapilli moveOFrom: 1@1 to: 2@1.
	
	self should: [ terniLapilli moveOFrom: 2@1 to: 2@2. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class cannotMoveTwiceErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:18:02' prior: 50969938!
test18XMovementsLengthShouldBeOne

	self fillBoard .
		
	self should: [ terniLapilli moveXFrom: 1@0 to: 2@2. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class movementsLengthShouldBeOneErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:18:27' prior: 50969969!
test19OMovementsLengthShouldBeOne

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0 .
		
	self should: [ terniLapilli moveOFrom: 0@2 to: 2@2. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class movementsLengthShouldBeOneErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:18:41' prior: 50970030!
test20XTokensMovementsSourcesAreAlreadyInBoard

	self fillBoard .
		
	self should: [ terniLapilli moveXFrom: 2@2 to: 2@1 . self fail. ] 
		raise: Error
		withMessageText: terniLapilli class movementSourceHasNotTokenErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:18:54' prior: 50970059!
test21OTokensMovementsSourcesAreAlreadyInBoard

	self fillBoard .
		
	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	self should: [ terniLapilli moveOFrom: 2@2 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class movementSourceHasNotTokenErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:19:31' prior: 50969923!
test22WhenMovingXDestinationShouldBeIntoTheBoard

	self fillBoard .
	
	self should: [ terniLapilli moveXFrom: 1@0 to: 1@-1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:19:59' prior: 50969953!
test23WhenMovingODestinationShouldBeIntoTheBoard

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	self should: [ terniLapilli moveOFrom: 0@2 to: -1@2. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:20:22' prior: 50969985!
test24WhenMovingXSourcePositionShouldContainX

	self fillBoard .
		
	self should: [ terniLapilli moveXFrom: 1@1 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionHasOErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:20:39' prior: 50970107!
test25WhenMovingOSourcePositionShouldContainO

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0.
		
	self should: [ terniLapilli moveOFrom: 2@0 to: 1@0. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionHasXErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:21:37' prior: 50970217!
test26XWinsWhenHasThreeInLine

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	terniLapilli moveOFrom: 1@1 to: 2@1.
	
	terniLapilli moveXFrom: 0@1 to: 1@1.
	
	terniLapilli moveOFrom: 1@2 to: 2@2.
	
	terniLapilli moveXFrom: 1@1 to: 1@0.
	
	self assert: terniLapilli isOver .
	
	self assert: terniLapilli hasPlayerXWon.
	
	self deny: terniLapilli hasPlayerOWon.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:21:54'!
makeXWin

	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	terniLapilli moveOFrom: 1@1 to: 2@1.
	
	terniLapilli moveXFrom: 0@1 to: 1@1.
	
	terniLapilli moveOFrom: 1@2 to: 2@2.
	
	terniLapilli moveXFrom: 1@1 to: 1@0! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:21:54' prior: 50971848!
test26XWinsWhenHasThreeInLine

	self fillBoard .
	
	self makeXWin.
	
	self assert: terniLapilli isOver .
	
	self assert: terniLapilli hasPlayerXWon.
	
	self deny: terniLapilli hasPlayerOWon.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:22:18' prior: 50970293!
test27OWinsWhenHasThreeInLine

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	terniLapilli moveOFrom: 1@1 to: 2@1.
	
	terniLapilli moveXFrom: 0@1 to: 1@1.
	
	terniLapilli moveOFrom: 2@1 to: 2@2.
	
	self assert: terniLapilli isOver .
	
	self assert: terniLapilli hasPlayerOWon.
	
	self deny: terniLapilli hasPlayerXWon.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:22:33'!
makeOWin

	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	terniLapilli moveOFrom: 1@1 to: 2@1.
	
	terniLapilli moveXFrom: 0@1 to: 1@1.
	
	terniLapilli moveOFrom: 2@1 to: 2@2! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:22:33' prior: 50971881!
test27OWinsWhenHasThreeInLine

	self fillBoard .
	
	self makeOWin.
	
	self assert: terniLapilli isOver .
	
	self assert: terniLapilli hasPlayerOWon.
	
	self deny: terniLapilli hasPlayerXWon.! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 15:22:37'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 15:22:37'!
FAILURE!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 15:22:37'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 15:22:37'!
PASSED!

!testRun: #TerniLapilliTest #test05XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 11/2/2020 15:22:37'!
PASSED!

!testRun: #TerniLapilliTest #test06OTokensShouldBePlacedIntoBoardnAValidPosition stamp: 'eb 11/2/2020 15:22:37'!
PASSED!

!testRun: #TerniLapilliTest #test07XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 15:22:37'!
PASSED!

!testRun: #TerniLapilliTest #test08OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 15:22:37'!
PASSED!

!testRun: #TerniLapilliTest #test09XTokensShouldNotBeMoreThanThree stamp: 'eb 11/2/2020 15:22:37'!
PASSED!

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 11/2/2020 15:22:37'!
FAILURE!

!testRun: #TerniLapilliTest #test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens stamp: 'eb 11/2/2020 15:22:37'!
FAILURE!

!testRun: #TerniLapilliTest #test12XTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 15:22:37'!
PASSED!

!testRun: #TerniLapilliTest #test13XTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 15:22:37'!
PASSED!

!testRun: #TerniLapilliTest #test14OTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 15:22:37'!
PASSED!

!testRun: #TerniLapilliTest #test15OTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 15:22:37'!
PASSED!

!testRun: #TerniLapilliTest #test16XCannotMoveTwice stamp: 'eb 11/2/2020 15:22:37'!
FAILURE!

!testRun: #TerniLapilliTest #test17OCannotMoveTwice stamp: 'eb 11/2/2020 15:22:37'!
ERROR!

!testRun: #TerniLapilliTest #test18XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 15:22:37'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 15:22:37'!
PASSED!

!testRun: #TerniLapilliTest #test20XTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 15:22:37'!
FAILURE!

!testRun: #TerniLapilliTest #test21OTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 15:22:37'!
FAILURE!

!testRun: #TerniLapilliTest #test22WhenMovingXDestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 15:22:37'!
PASSED!

!testRun: #TerniLapilliTest #test23WhenMovingODestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 15:22:37'!
FAILURE!

!testRun: #TerniLapilliTest #test24WhenMovingXSourcePositionShouldContainX stamp: 'eb 11/2/2020 15:22:37'!
FAILURE!

!testRun: #TerniLapilliTest #test25WhenMovingOSourcePositionShouldContainO stamp: 'eb 11/2/2020 15:22:37'!
PASSED!

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 15:22:37'!
ERROR!

!testRun: #TerniLapilliTest #test27OWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 15:22:37'!
ERROR!

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 15:23:03'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 15:23:05'!
FAILURE!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 15:23:05'!
FAILURE!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:23:23' prior: 50971206!
test02OCannotInitGame
		
	self should: [ terniLapilli putOAt: 0@0. self fail. ]
		raise: Error
		withMessageText: terniLapilli class playerXShouldPlayErrorDescription .! !

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 15:23:25'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 15:23:27'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 15:23:29'!
PASSED!

!testRun: #TerniLapilliTest #test05XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 11/2/2020 15:23:31'!
PASSED!

!testRun: #TerniLapilliTest #test06OTokensShouldBePlacedIntoBoardnAValidPosition stamp: 'eb 11/2/2020 15:23:32'!
PASSED!

!testRun: #TerniLapilliTest #test07XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 15:23:33'!
PASSED!

!testRun: #TerniLapilliTest #test08OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 15:23:35'!
PASSED!

!testRun: #TerniLapilliTest #test09XTokensShouldNotBeMoreThanThree stamp: 'eb 11/2/2020 15:23:36'!
PASSED!

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 11/2/2020 15:23:37'!
FAILURE!

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 11/2/2020 15:23:37'!
FAILURE!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:24:26' prior: 50971650!
test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens

	terniLapilli putXAt: 0@0 .
	
	terniLapilli putOAt: 0@1 .
	
	terniLapilli putXAt: 1@0.
	
	terniLapilli putOAt: 1@1 .
	
	self should: [ terniLapilli moveXFrom: 0@0 to: 0@1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class movementsCanOnlyBeDoneWithThreeTokens .! !

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 11/2/2020 15:24:27'!
PASSED!

!testRun: #TerniLapilliTest #test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens stamp: 'eb 11/2/2020 15:24:30'!
FAILURE!

!testRun: #TerniLapilliTest #test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens stamp: 'eb 11/2/2020 15:24:30'!
FAILURE!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:24:41' prior: 50971676!
test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens

	terniLapilli putXAt: 0@0 .
	
	terniLapilli putOAt: 0@1 .
	
	terniLapilli putXAt: 1@0.
	
	terniLapilli putOAt: 1@1 .
	
	self should: [ terniLapilli moveOFrom: 0@2 to: 1@2. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class movementsCanOnlyBeDoneWithThreeTokens .! !

!testRun: #TerniLapilliTest #test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens stamp: 'eb 11/2/2020 15:24:42'!
PASSED!

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 15:24:42'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 15:24:42'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 15:24:42'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 15:24:42'!
PASSED!

!testRun: #TerniLapilliTest #test05XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 11/2/2020 15:24:42'!
PASSED!

!testRun: #TerniLapilliTest #test06OTokensShouldBePlacedIntoBoardnAValidPosition stamp: 'eb 11/2/2020 15:24:42'!
PASSED!

!testRun: #TerniLapilliTest #test07XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 15:24:42'!
PASSED!

!testRun: #TerniLapilliTest #test08OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 15:24:42'!
PASSED!

!testRun: #TerniLapilliTest #test09XTokensShouldNotBeMoreThanThree stamp: 'eb 11/2/2020 15:24:42'!
PASSED!

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 11/2/2020 15:24:42'!
PASSED!

!testRun: #TerniLapilliTest #test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens stamp: 'eb 11/2/2020 15:24:42'!
PASSED!

!testRun: #TerniLapilliTest #test12XTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 15:24:42'!
PASSED!

!testRun: #TerniLapilliTest #test13XTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 15:24:42'!
PASSED!

!testRun: #TerniLapilliTest #test14OTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 15:24:42'!
PASSED!

!testRun: #TerniLapilliTest #test15OTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 15:24:42'!
PASSED!

!testRun: #TerniLapilliTest #test16XCannotMoveTwice stamp: 'eb 11/2/2020 15:24:42'!
FAILURE!

!testRun: #TerniLapilliTest #test17OCannotMoveTwice stamp: 'eb 11/2/2020 15:24:42'!
ERROR!

!testRun: #TerniLapilliTest #test18XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 15:24:42'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 15:24:42'!
PASSED!

!testRun: #TerniLapilliTest #test20XTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 15:24:42'!
FAILURE!

!testRun: #TerniLapilliTest #test21OTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 15:24:42'!
FAILURE!

!testRun: #TerniLapilliTest #test22WhenMovingXDestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 15:24:43'!
PASSED!

!testRun: #TerniLapilliTest #test23WhenMovingODestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 15:24:43'!
FAILURE!

!testRun: #TerniLapilliTest #test24WhenMovingXSourcePositionShouldContainX stamp: 'eb 11/2/2020 15:24:43'!
FAILURE!

!testRun: #TerniLapilliTest #test25WhenMovingOSourcePositionShouldContainO stamp: 'eb 11/2/2020 15:24:43'!
PASSED!

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 15:24:43'!
ERROR!

!testRun: #TerniLapilliTest #test27OWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 15:24:43'!
ERROR!

!testRun: #TerniLapilliTest #test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens stamp: 'eb 11/2/2020 15:24:46'!
PASSED!

!testRun: #TerniLapilliTest #test12XTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 15:24:48'!
PASSED!

!testRun: #TerniLapilliTest #test13XTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 15:24:49'!
PASSED!

!testRun: #TerniLapilliTest #test14OTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 15:24:51'!
PASSED!

!testRun: #TerniLapilliTest #test15OTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 15:24:52'!
PASSED!

!testRun: #TerniLapilliTest #test16XCannotMoveTwice stamp: 'eb 11/2/2020 15:24:53'!
FAILURE!

!testRun: #TerniLapilliTest #test16XCannotMoveTwice stamp: 'eb 11/2/2020 15:24:53'!
FAILURE!
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 15:27:22' prior: 50971631!
fillBoard

	terniLapilli putXAt: 0@0 .
	
	terniLapilli putOAt: 0@1 .
	
	terniLapilli putXAt: 1@0.
	
	terniLapilli putOAt: 1@1 .
	
	terniLapilli putXAt: 1@2 .
	
	terniLapilli putOAt: 0@2! !

!testRun: #TerniLapilliTest #test13XTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 15:27:26'!
PASSED!

!testRun: #TerniLapilliTest #test16XCannotMoveTwice stamp: 'eb 11/2/2020 15:27:29'!
PASSED!

!testRun: #TerniLapilliTest #test17OCannotMoveTwice stamp: 'eb 11/2/2020 15:27:30'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 15:27:32'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 15:27:33'!
PASSED!

!testRun: #TerniLapilliTest #test20XTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 15:27:34'!
PASSED!

!testRun: #TerniLapilliTest #test21OTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 15:27:35'!
PASSED!

!testRun: #TerniLapilliTest #test22WhenMovingXDestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 15:27:36'!
PASSED!

!testRun: #TerniLapilliTest #test23WhenMovingODestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 15:27:37'!
PASSED!

!testRun: #TerniLapilliTest #test24WhenMovingXSourcePositionShouldContainX stamp: 'eb 11/2/2020 15:27:38'!
PASSED!

!testRun: #TerniLapilliTest #test25WhenMovingOSourcePositionShouldContainO stamp: 'eb 11/2/2020 15:27:39'!
PASSED!

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 15:27:39'!
ERROR!

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 15:27:39'!
ERROR!

!testRun: #TerniLapilliTest #test27OWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 15:27:47'!
ERROR!

!testRun: #TerniLapilliTest #test27OWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 15:27:47'!
ERROR!

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 15:27:52'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 15:27:52'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 15:27:52'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 15:27:52'!
PASSED!

!testRun: #TerniLapilliTest #test05XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 11/2/2020 15:27:52'!
PASSED!

!testRun: #TerniLapilliTest #test06OTokensShouldBePlacedIntoBoardnAValidPosition stamp: 'eb 11/2/2020 15:27:52'!
PASSED!

!testRun: #TerniLapilliTest #test07XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 15:27:52'!
PASSED!

!testRun: #TerniLapilliTest #test08OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 15:27:52'!
PASSED!

!testRun: #TerniLapilliTest #test09XTokensShouldNotBeMoreThanThree stamp: 'eb 11/2/2020 15:27:52'!
PASSED!

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 11/2/2020 15:27:52'!
PASSED!

!testRun: #TerniLapilliTest #test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens stamp: 'eb 11/2/2020 15:27:52'!
PASSED!

!testRun: #TerniLapilliTest #test12XTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 15:27:52'!
PASSED!

!testRun: #TerniLapilliTest #test13XTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 15:27:52'!
PASSED!

!testRun: #TerniLapilliTest #test14OTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 15:27:52'!
PASSED!

!testRun: #TerniLapilliTest #test15OTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 15:27:52'!
PASSED!

!testRun: #TerniLapilliTest #test16XCannotMoveTwice stamp: 'eb 11/2/2020 15:27:52'!
PASSED!

!testRun: #TerniLapilliTest #test17OCannotMoveTwice stamp: 'eb 11/2/2020 15:27:52'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 15:27:52'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 15:27:52'!
PASSED!

!testRun: #TerniLapilliTest #test20XTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 15:27:52'!
PASSED!

!testRun: #TerniLapilliTest #test21OTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 15:27:52'!
PASSED!

!testRun: #TerniLapilliTest #test22WhenMovingXDestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 15:27:52'!
PASSED!

!testRun: #TerniLapilliTest #test23WhenMovingODestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 15:27:52'!
PASSED!

!testRun: #TerniLapilliTest #test24WhenMovingXSourcePositionShouldContainX stamp: 'eb 11/2/2020 15:27:52'!
PASSED!

!testRun: #TerniLapilliTest #test25WhenMovingOSourcePositionShouldContainO stamp: 'eb 11/2/2020 15:27:52'!
PASSED!

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 15:27:52'!
ERROR!

!testRun: #TerniLapilliTest #test27OWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 15:27:52'!
ERROR!
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 15:30:45' prior: 50971862!
makeXWin

	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	terniLapilli moveOFrom: 1@1 to: 2@1.
	
	terniLapilli moveXFrom: 1@2 to: 1@1.
	
	terniLapilli moveOFrom: 2@1 to: 2@2.
	
	terniLapilli moveXFrom: 1@1 to: 1@0! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 15:30:50'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 15:30:50'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 15:30:50'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 15:30:50'!
PASSED!

!testRun: #TerniLapilliTest #test05XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 11/2/2020 15:30:50'!
PASSED!

!testRun: #TerniLapilliTest #test06OTokensShouldBePlacedIntoBoardnAValidPosition stamp: 'eb 11/2/2020 15:30:50'!
PASSED!

!testRun: #TerniLapilliTest #test07XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 15:30:50'!
PASSED!

!testRun: #TerniLapilliTest #test08OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 15:30:50'!
PASSED!

!testRun: #TerniLapilliTest #test09XTokensShouldNotBeMoreThanThree stamp: 'eb 11/2/2020 15:30:50'!
PASSED!

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 11/2/2020 15:30:50'!
PASSED!

!testRun: #TerniLapilliTest #test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens stamp: 'eb 11/2/2020 15:30:50'!
PASSED!

!testRun: #TerniLapilliTest #test12XTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 15:30:50'!
PASSED!

!testRun: #TerniLapilliTest #test13XTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 15:30:50'!
PASSED!

!testRun: #TerniLapilliTest #test14OTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 15:30:50'!
PASSED!

!testRun: #TerniLapilliTest #test15OTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 15:30:50'!
PASSED!

!testRun: #TerniLapilliTest #test16XCannotMoveTwice stamp: 'eb 11/2/2020 15:30:50'!
PASSED!

!testRun: #TerniLapilliTest #test17OCannotMoveTwice stamp: 'eb 11/2/2020 15:30:50'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 15:30:50'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 15:30:50'!
PASSED!

!testRun: #TerniLapilliTest #test20XTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 15:30:50'!
PASSED!

!testRun: #TerniLapilliTest #test21OTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 15:30:50'!
PASSED!

!testRun: #TerniLapilliTest #test22WhenMovingXDestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 15:30:50'!
PASSED!

!testRun: #TerniLapilliTest #test23WhenMovingODestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 15:30:50'!
PASSED!

!testRun: #TerniLapilliTest #test24WhenMovingXSourcePositionShouldContainX stamp: 'eb 11/2/2020 15:30:50'!
PASSED!

!testRun: #TerniLapilliTest #test25WhenMovingOSourcePositionShouldContainO stamp: 'eb 11/2/2020 15:30:50'!
PASSED!

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 15:30:50'!
PASSED!

!testRun: #TerniLapilliTest #test27OWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 15:30:50'!
ERROR!

!testRun: #TerniLapilliTest #test27OWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 15:30:50'!
ERROR!

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 15:31:00'!
PASSED!
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 15:35:00' prior: 50971894!
makeOWin

	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	terniLapilli moveOFrom: 1@1 to: 2@1.
	
	terniLapilli moveXFrom: 1@2 to: 2@2.
	
	terniLapilli moveOFrom: 0@2 to: 1@2.
	
	terniLapilli moveXFrom: 2@0  to: 1@0.
	
	terniLapilli moveOFrom: 1@2 to: 1@1.! !

!testRun: #TerniLapilliTest #test27OWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 15:35:16'!
PASSED!

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 15:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 15:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 15:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 15:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test05XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 11/2/2020 15:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test06OTokensShouldBePlacedIntoBoardnAValidPosition stamp: 'eb 11/2/2020 15:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test07XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 15:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test08OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 15:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test09XTokensShouldNotBeMoreThanThree stamp: 'eb 11/2/2020 15:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 11/2/2020 15:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens stamp: 'eb 11/2/2020 15:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test12XTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 15:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test13XTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 15:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test14OTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 15:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test15OTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 15:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test16XCannotMoveTwice stamp: 'eb 11/2/2020 15:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test17OCannotMoveTwice stamp: 'eb 11/2/2020 15:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 15:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 15:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test20XTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 15:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test21OTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 15:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test22WhenMovingXDestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 15:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test23WhenMovingODestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 15:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test24WhenMovingXSourcePositionShouldContainX stamp: 'eb 11/2/2020 15:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test25WhenMovingOSourcePositionShouldContainO stamp: 'eb 11/2/2020 15:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 15:35:18'!
PASSED!

!testRun: #TerniLapilliTest #test27OWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 15:35:18'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:36:28'!
test28XCannotPlayWhenIsOver

	self fillBoard .
	
	self makeOWin.
	
	! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:37:36'!
test28XCannotPlayWhenGameIsOver

	self fillBoard .
	
	self makeOWin.
	
	self should: [ terniLapilli moveXFrom: 2@0 to:1@0. self fail ]
		raise: Error
		withMessageText: terniLapilli class gameIsOverErrorDescription! !

!methodRemoval: TerniLapilliTest #test28XCannotPlayWhenIsOver stamp: 'eb 11/2/2020 15:37:40'!
test28XCannotPlayWhenIsOver

	self fillBoard .
	
	self makeOWin.
	
	!

!testRun: #TerniLapilliTest #test28XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:37:41'!
ERROR!

!testRun: #TerniLapilliTest #test28XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:37:41'!
ERROR!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 11/2/2020 15:37:50'!
gameIsOverErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 11/2/2020 15:37:58' prior: 50972616!
gameIsOverErrorDescription
	
	^ 'Game is over'.! !

!testRun: #TerniLapilliTest #test28XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:37:59'!
FAILURE!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:38:43' prior: 50972595!
test28XCannotPlayWhenGameIsOver

	self fillBoard .
	
	self makeOWin.
	
	self should: [ terniLapilli moveXFrom: 1@0 to: 2@0. self fail ]
		raise: Error
		withMessageText: terniLapilli class gameIsOverErrorDescription! !

!testRun: #TerniLapilliTest #test28XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:38:48'!
FAILURE!

!testRun: #TerniLapilliTest #test28XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:38:48'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 15:39:46' prior: 50970861!
moveXFrom: aSourcePosition to: aTargetPosition

	(XTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPosition ) or: [ OTokens includes: aTargetPosition ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifFalse: [ self error: self class cannotMoveTwiceErrorDescription ].
	
	self assertThat: aSourcePosition isWithinOneUnitDistanceTo: aTargetPosition.
	
	self assertHasX: aSourcePosition .
	
	self assertThatPositionIsIntoTheBoard: aTargetPosition .
	
	(self isOver) ifTrue: [ self error: self class gameIsOverErrorDescription ].
		
	XTokens remove: aSourcePosition .
	
	XTokens add: aTargetPosition .
	
	isPlayingX _ false .
	
! !

!testRun: #TerniLapilliTest #test28XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:39:49'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:40:01'!
test29OCannotPlayWhenGameIsOver

	self fillBoard .
	
	self makeXWin.
	
	self should: [ terniLapilli moveXFrom: 1@0 to: 2@0. self fail ]
		raise: Error
		withMessageText: terniLapilli class gameIsOverErrorDescription! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:40:19' prior: 50972674!
test29OCannotPlayWhenGameIsOver

	self fillBoard .
	
	self makeXWin.
	
	self should: [ terniLapilli moveXFrom: 2@2 to: 2@1. self fail ]
		raise: Error
		withMessageText: terniLapilli class gameIsOverErrorDescription! !

!testRun: #TerniLapilliTest #test29OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:40:20'!
FAILURE!

!testRun: #TerniLapilliTest #test29OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:40:20'!
FAILURE!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:40:29' prior: 50972684!
test29OCannotPlayWhenGameIsOver

	self fillBoard .
	
	self makeXWin.
	
	self should: [ terniLapilli moveOFrom: 2@2 to: 2@1. self fail ]
		raise: Error
		withMessageText: terniLapilli class gameIsOverErrorDescription! !

!testRun: #TerniLapilliTest #test29OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:40:30'!
FAILURE!

!testRun: #TerniLapilliTest #test29OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:40:30'!
FAILURE!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 15:41:11' prior: 50970814!
moveOFrom: aSourcePosition to: aTargetPosition
	
	(OTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPosition ) or: [ OTokens includes: aTargetPosition ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifTrue: [ self error: self class cannotMoveTwiceErrorDescription ].
		
	self assertThat: aSourcePosition isWithinOneUnitDistanceTo: aTargetPosition.
	
	self assertHasO: aSourcePosition .
	
	self assertThatPositionIsIntoTheBoard: aTargetPosition .
	
	(self isOver) ifTrue: [ self error: self class gameIsOverErrorDescription ].
	
	OTokens remove: aSourcePosition .
	
	OTokens add: aTargetPosition .
	
	isPlayingX _ true .! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 15:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 15:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 15:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 15:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test05XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 11/2/2020 15:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test06OTokensShouldBePlacedIntoBoardnAValidPosition stamp: 'eb 11/2/2020 15:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test07XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 15:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test08OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 15:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test09XTokensShouldNotBeMoreThanThree stamp: 'eb 11/2/2020 15:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 11/2/2020 15:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens stamp: 'eb 11/2/2020 15:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test12XTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 15:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test13XTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 15:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test14OTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 15:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test15OTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 15:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test16XCannotMoveTwice stamp: 'eb 11/2/2020 15:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test17OCannotMoveTwice stamp: 'eb 11/2/2020 15:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 15:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 15:41:16'!
PASSED!

!testRun: #TerniLapilliTest #test20XTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 15:41:17'!
PASSED!

!testRun: #TerniLapilliTest #test21OTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 15:41:17'!
PASSED!

!testRun: #TerniLapilliTest #test22WhenMovingXDestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 15:41:17'!
PASSED!

!testRun: #TerniLapilliTest #test23WhenMovingODestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 15:41:17'!
PASSED!

!testRun: #TerniLapilliTest #test24WhenMovingXSourcePositionShouldContainX stamp: 'eb 11/2/2020 15:41:17'!
PASSED!

!testRun: #TerniLapilliTest #test25WhenMovingOSourcePositionShouldContainO stamp: 'eb 11/2/2020 15:41:17'!
PASSED!

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 15:41:17'!
PASSED!

!testRun: #TerniLapilliTest #test27OWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 15:41:17'!
PASSED!

!testRun: #TerniLapilliTest #test28XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:41:17'!
PASSED!

!testRun: #TerniLapilliTest #test29OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:41:17'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:43:33' prior: 50972701!
test29OCannotPlayWhenGameIsOver

	self fillBoard .
	
	self moveXFrom: 1@0 to: 2@1.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:43:38' prior: 50972844!
test29OCannotPlayWhenGameIsOver

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@1.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:43:46' prior: 50972850!
test29OCannotPlayWhenGameIsOver

	self fillBoard .
	
	self moveXFrom: 1@0 to: 2@1.! !

!testRun: #TerniLapilliTest #test29OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:43:47'!
ERROR!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:44:14'!
test30OCannotPlayWhenGameIsOver

	self fillBoard .
	
	self makeXWin.
	
	self should: [ terniLapilli moveXFrom: 2@2 to: 2@0. self fail ]
		raise: Error
		withMessageText: terniLapilli class gameIsOverErrorDescription! !

!testRun: #TerniLapilliTest #test30OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:44:14'!
FAILURE!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:44:40' prior: 50972865!
test30OCannotPlayWhenGameIsOver

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@1.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:44:43'!
test30

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@1.! !

!methodRemoval: TerniLapilliTest #test30OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:44:45'!
test30OCannotPlayWhenGameIsOver

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@1.!

!testRun: #TerniLapilliTest #test30 stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test05XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test06OTokensShouldBePlacedIntoBoardnAValidPosition stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test07XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test08OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test09XTokensShouldNotBeMoreThanThree stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test12XTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test13XTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test14OTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test15OTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test16XCannotMoveTwice stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test17OCannotMoveTwice stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test20XTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test21OTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test22WhenMovingXDestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test23WhenMovingODestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test24WhenMovingXSourcePositionShouldContainX stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test25WhenMovingOSourcePositionShouldContainO stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test27OWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test28XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test29OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:44:47'!
ERROR!

!testRun: #TerniLapilliTest #test30 stamp: 'eb 11/2/2020 15:44:47'!
PASSED!

!testRun: #TerniLapilliTest #test29OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:44:47'!
ERROR!

!testRun: #TerniLapilliTest #test30 stamp: 'eb 11/2/2020 15:45:01'!
PASSED!

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 15:45:32'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 15:45:32'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 15:45:32'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 15:45:32'!
PASSED!

!testRun: #TerniLapilliTest #test05XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 11/2/2020 15:45:32'!
PASSED!

!testRun: #TerniLapilliTest #test06OTokensShouldBePlacedIntoBoardnAValidPosition stamp: 'eb 11/2/2020 15:45:32'!
PASSED!

!testRun: #TerniLapilliTest #test07XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 15:45:32'!
PASSED!

!testRun: #TerniLapilliTest #test08OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 15:45:32'!
PASSED!

!testRun: #TerniLapilliTest #test09XTokensShouldNotBeMoreThanThree stamp: 'eb 11/2/2020 15:45:32'!
PASSED!

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 11/2/2020 15:45:32'!
PASSED!

!testRun: #TerniLapilliTest #test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens stamp: 'eb 11/2/2020 15:45:32'!
PASSED!

!testRun: #TerniLapilliTest #test12XTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 15:45:32'!
PASSED!

!testRun: #TerniLapilliTest #test13XTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 15:45:32'!
PASSED!

!testRun: #TerniLapilliTest #test14OTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 15:45:32'!
PASSED!

!testRun: #TerniLapilliTest #test15OTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 15:45:32'!
PASSED!

!testRun: #TerniLapilliTest #test16XCannotMoveTwice stamp: 'eb 11/2/2020 15:45:32'!
PASSED!

!testRun: #TerniLapilliTest #test17OCannotMoveTwice stamp: 'eb 11/2/2020 15:45:32'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 15:45:32'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 15:45:32'!
PASSED!

!testRun: #TerniLapilliTest #test20XTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 15:45:32'!
PASSED!

!testRun: #TerniLapilliTest #test21OTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 15:45:32'!
PASSED!

!testRun: #TerniLapilliTest #test22WhenMovingXDestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 15:45:32'!
PASSED!

!testRun: #TerniLapilliTest #test23WhenMovingODestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 15:45:32'!
PASSED!

!testRun: #TerniLapilliTest #test24WhenMovingXSourcePositionShouldContainX stamp: 'eb 11/2/2020 15:45:32'!
PASSED!

!testRun: #TerniLapilliTest #test25WhenMovingOSourcePositionShouldContainO stamp: 'eb 11/2/2020 15:45:32'!
PASSED!

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 15:45:32'!
PASSED!

!testRun: #TerniLapilliTest #test27OWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 15:45:32'!
PASSED!

!testRun: #TerniLapilliTest #test28XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:45:32'!
PASSED!

!testRun: #TerniLapilliTest #test29OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:45:32'!
ERROR!

!testRun: #TerniLapilliTest #test30 stamp: 'eb 11/2/2020 15:45:32'!
PASSED!

!testRun: #TerniLapilliTest #test29OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:45:32'!
ERROR!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:46:06' prior: 50972856!
test29OCannotPlayWhenGameIsOver

	self fillBoard .
	
	self makeXWin.
	
	self should: [ terniLapilli moveXFrom: 2@0 to: 1@0. self fail ]
		raise: Error
		withMessageText: terniLapilli class gameIsOverErrorDescription.! !

!testRun: #TerniLapilliTest #test29OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:46:07'!
FAILURE!

!testRun: #TerniLapilliTest #test29OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:46:07'!
FAILURE!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:46:17' prior: 50973111!
test29OCannotPlayWhenGameIsOver

	self fillBoard .
	
	self makeOWin.
	
	self should: [ terniLapilli moveXFrom: 2@0 to: 1@0. self fail ]
		raise: Error
		withMessageText: terniLapilli class gameIsOverErrorDescription.! !

!testRun: #TerniLapilliTest #test29OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:46:19'!
FAILURE!

!testRun: #TerniLapilliTest #test29OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:46:19'!
FAILURE!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:46:27' prior: 50973128!
test29OCannotPlayWhenGameIsOver

	self fillBoard .
	
	self makeXWin.
	
	self should: [ terniLapilli moveXFrom: 2@0 to: 1@0. self fail ]
		raise: Error
		withMessageText: terniLapilli class gameIsOverErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:46:50' prior: 50973145!
test29OCannotPlayWhenGameIsOver

	self fillBoard .
	
	self makeXWin.
	
	self should: [ terniLapilli moveOFrom: 2@2 to: 2@1. self fail ]
		raise: Error
		withMessageText: terniLapilli class gameIsOverErrorDescription.! !

!testRun: #TerniLapilliTest #test29OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:46:52'!
PASSED!

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 15:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 15:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 15:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 15:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test05XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 11/2/2020 15:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test06OTokensShouldBePlacedIntoBoardnAValidPosition stamp: 'eb 11/2/2020 15:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test07XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 15:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test08OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 15:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test09XTokensShouldNotBeMoreThanThree stamp: 'eb 11/2/2020 15:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 11/2/2020 15:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens stamp: 'eb 11/2/2020 15:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test12XTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 15:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test13XTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 15:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test14OTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 15:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test15OTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 15:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test16XCannotMoveTwice stamp: 'eb 11/2/2020 15:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test17OCannotMoveTwice stamp: 'eb 11/2/2020 15:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 15:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 15:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test20XTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 15:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test21OTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 15:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test22WhenMovingXDestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 15:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test23WhenMovingODestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 15:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test24WhenMovingXSourcePositionShouldContainX stamp: 'eb 11/2/2020 15:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test25WhenMovingOSourcePositionShouldContainO stamp: 'eb 11/2/2020 15:46:55'!
PASSED!

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 15:46:56'!
PASSED!

!testRun: #TerniLapilliTest #test27OWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 15:46:56'!
PASSED!

!testRun: #TerniLapilliTest #test28XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:46:56'!
PASSED!

!testRun: #TerniLapilliTest #test29OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:46:56'!
PASSED!

!testRun: #TerniLapilliTest #test30 stamp: 'eb 11/2/2020 15:46:56'!
PASSED!
!TerniLapilli methodsFor: 'asserting' stamp: 'eb 11/2/2020 15:48:44' prior: 50970730!
assertThat: aSourcePosition isWithinOneUnitDistanceTo: aTargetPosition
	
	| dX dY verticalDistanceIsOne horizontalDistanceIsOne diagonalDistanceIsOne |
	
	dX _ (aSourcePosition x - aTargetPosition x) abs.
	
	dY _ (aSourcePosition y - aTargetPosition y) abs.
	
	verticalDistanceIsOne _ (dX = 0 and: [dY = 1]) .
	
	horizontalDistanceIsOne _ (dX = 1 and: [dY = 0]).
	
	diagonalDistanceIsOne _ (dX = 1 and: [dY = 1] and: [aSourcePosition x = aSourcePosition y]).
	
	(verticalDistanceIsOne or: horizontalDistanceIsOne or: diagonalDistanceIsOne) ifFalse: 
		[ self error: self class movementsLengthShouldBeOneErrorDescription .]! !
!TerniLapilli methodsFor: 'asserting' stamp: 'eb 11/2/2020 15:49:34'!
isInSomeDiagonal: aSourcePosition

	^ aSourcePosition x = aSourcePosition y! !
!TerniLapilli methodsFor: 'asserting' stamp: 'eb 11/2/2020 15:49:34' prior: 50973271!
assertThat: aSourcePosition isWithinOneUnitDistanceTo: aTargetPosition
	
	| dX dY verticalDistanceIsOne horizontalDistanceIsOne diagonalDistanceIsOne |
	
	dX _ (aSourcePosition x - aTargetPosition x) abs.
	
	dY _ (aSourcePosition y - aTargetPosition y) abs.
	
	verticalDistanceIsOne _ (dX = 0 and: [dY = 1]) .
	
	horizontalDistanceIsOne _ (dX = 1 and: [dY = 0]).
	
	diagonalDistanceIsOne _ (dX = 1 and: [dY = 1] and: [self isInSomeDiagonal: aSourcePosition]).
	
	(verticalDistanceIsOne or: horizontalDistanceIsOne or: diagonalDistanceIsOne) ifFalse: 
		[ self error: self class movementsLengthShouldBeOneErrorDescription .]! !
!TerniLapilli methodsFor: 'asserting' stamp: 'eb 11/2/2020 15:49:53' prior: 50973299!
assertThat: aSourcePosition isWithinOneUnitDistanceTo: aTargetPosition
	
	| dX dY verticalDistanceIsOne horizontalDistanceIsOne diagonalDistanceIsOne |
	
	dX _ (aSourcePosition x - aTargetPosition x) abs.
	
	dY _ (aSourcePosition y - aTargetPosition y) abs.
	
	verticalDistanceIsOne _ (dX = 0 and: [dY = 1]) .
	
	horizontalDistanceIsOne _ (dX = 1 and: [dY = 0]).
	
	diagonalDistanceIsOne _ (dX = 1 and: [dY = 1] and: [self isInSomeDiagonal: aSourcePosition] and: [self isInSomeDiagonal: aTargetPosition ]).
	
	(verticalDistanceIsOne or: horizontalDistanceIsOne or: diagonalDistanceIsOne) ifFalse: 
		[ self error: self class movementsLengthShouldBeOneErrorDescription .]! !
!TerniLapilli methodsFor: 'asserting' stamp: 'eb 11/2/2020 15:50:18' prior: 50973293!
isInSomeDiagonal: aPosition

	^ aPosition x = aPosition y! !
!TerniLapilli methodsFor: 'asserting' stamp: 'eb 11/2/2020 15:51:14' prior: 50973346!
isInSomeDiagonal: aPosition
	
	| isInPrincipalDiagonal isInNotPrincipalDiagonal |
	
	isInPrincipalDiagonal _ aPosition x = aPosition y.
	
	isInNotPrincipalDiagonal _ true.

	^ isInPrincipalDiagonal or: isInNotPrincipalDiagonal.! !
!TerniLapilli methodsFor: 'asserting' stamp: 'eb 11/2/2020 15:51:51' prior: 50973351!
isInSomeDiagonal: aPosition
	
	| isInPrincipalDiagonal isInNotPrincipalDiagonal |
	
	isInPrincipalDiagonal _ aPosition x = aPosition y.
	
	isInNotPrincipalDiagonal _ #(0@2. 1@1. 2@0) includes: aPosition .

	^ isInPrincipalDiagonal or: isInNotPrincipalDiagonal.! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 15:51:53'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 15:51:53'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 15:51:53'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 15:51:53'!
PASSED!

!testRun: #TerniLapilliTest #test05XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 11/2/2020 15:51:53'!
PASSED!

!testRun: #TerniLapilliTest #test06OTokensShouldBePlacedIntoBoardnAValidPosition stamp: 'eb 11/2/2020 15:51:54'!
PASSED!

!testRun: #TerniLapilliTest #test07XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 15:51:54'!
PASSED!

!testRun: #TerniLapilliTest #test08OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 15:51:54'!
PASSED!

!testRun: #TerniLapilliTest #test09XTokensShouldNotBeMoreThanThree stamp: 'eb 11/2/2020 15:51:54'!
PASSED!

!testRun: #TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 11/2/2020 15:51:54'!
PASSED!

!testRun: #TerniLapilliTest #test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens stamp: 'eb 11/2/2020 15:51:54'!
PASSED!

!testRun: #TerniLapilliTest #test12XTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 15:51:54'!
PASSED!

!testRun: #TerniLapilliTest #test13XTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 15:51:54'!
PASSED!

!testRun: #TerniLapilliTest #test14OTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 15:51:54'!
PASSED!

!testRun: #TerniLapilliTest #test15OTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 15:51:54'!
PASSED!

!testRun: #TerniLapilliTest #test16XCannotMoveTwice stamp: 'eb 11/2/2020 15:51:54'!
PASSED!

!testRun: #TerniLapilliTest #test17OCannotMoveTwice stamp: 'eb 11/2/2020 15:51:54'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 15:51:54'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 15:51:54'!
PASSED!

!testRun: #TerniLapilliTest #test20XTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 15:51:54'!
PASSED!

!testRun: #TerniLapilliTest #test21OTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 15:51:54'!
PASSED!

!testRun: #TerniLapilliTest #test22WhenMovingXDestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 15:51:54'!
PASSED!

!testRun: #TerniLapilliTest #test23WhenMovingODestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 15:51:54'!
PASSED!

!testRun: #TerniLapilliTest #test24WhenMovingXSourcePositionShouldContainX stamp: 'eb 11/2/2020 15:51:54'!
PASSED!

!testRun: #TerniLapilliTest #test25WhenMovingOSourcePositionShouldContainO stamp: 'eb 11/2/2020 15:51:54'!
PASSED!

!testRun: #TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 15:51:54'!
PASSED!

!testRun: #TerniLapilliTest #test27OWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 15:51:54'!
PASSED!

!testRun: #TerniLapilliTest #test28XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:51:54'!
PASSED!

!testRun: #TerniLapilliTest #test29OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 15:51:54'!
PASSED!

!testRun: #TerniLapilliTest #test30 stamp: 'eb 11/2/2020 15:51:54'!
ERROR!

!testRun: #TerniLapilliTest #test30 stamp: 'eb 11/2/2020 15:51:54'!
ERROR!

!testRun: #TerniLapilliTest #test30 stamp: 'eb 11/2/2020 15:52:01'!
ERROR!

!testRun: #TerniLapilliTest #test30 stamp: 'eb 11/2/2020 15:52:01'!
ERROR!

!methodRemoval: TerniLapilliTest #test30 stamp: 'eb 11/2/2020 15:52:06'!
test30

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@1.!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 15:52:52' prior: 50969051!
putOAt: aPosition 

	self assertThatPositionIsIntoTheBoard: aPosition.
	
	(aPosition isIntegerPoint) ifFalse: [self error: self class positionIsInvalidErrorDescription ].
	
	(XTokens includes: aPosition) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
	
	(OTokens includes: aPosition) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifTrue: [ self error: self class playerXShouldPlayErrorDescription ].
	
	OTokens add: aPosition .
		
	isPlayingX _ true .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 15:52:59' prior: 50971006!
putXAt: aPosition 
	
	(self board containsPoint: aPosition) ifFalse: [ self error: self class positionIsOutsideBoardErrorDescription ].
	
	(aPosition isIntegerPoint) ifFalse: [self error: self class positionIsInvalidErrorDescription ].
	
	(XTokens includes: aPosition) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
	
	(OTokens includes: aPosition) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
	
	(XTokens size = 3) ifTrue: [self error: self class cannotPutMoreThanThreeTokensErrorDescription ].
	
	XTokens add: aPosition .
	
	isPlayingX _ false .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:55:05'!
test05XShouldPutInAValidPosition
	
	self assertThatXPositionsAreInsideBoard.
		
	self assertThatXPositionsAreInteger.! !

!methodRemoval: TerniLapilliTest #test05XTokensShouldBePlacedIntoBoardInAValidPosition stamp: 'eb 11/2/2020 15:55:05'!
test05XTokensShouldBePlacedIntoBoardInAValidPosition
	
	self assertThatXPositionsAreInsideBoard.
		
	self assertThatXPositionsAreInteger.!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:55:23'!
test06OShouldPutInAValidPosition
	
	self assertThatOPositionsAreInsideBoard.
		
	self assertThatOPositionsAreInteger.! !

!methodRemoval: TerniLapilliTest #test06OTokensShouldBePlacedIntoBoardnAValidPosition stamp: 'eb 11/2/2020 15:55:23'!
test06OTokensShouldBePlacedIntoBoardnAValidPosition
	
	self assertThatOPositionsAreInsideBoard.
		
	self assertThatOPositionsAreInteger.!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:55:57'!
test07XShouldPutInAvailablePosition

	terniLapilli putXAt: 0@0 .
	
	terniLapilli putOAt: 1@0.
	
	self denyPuttingXOnOccupiedPosition .! !

!methodRemoval: TerniLapilliTest #test07XTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 15:55:57'!
test07XTokensShouldBePlacedIntoAvailablePositions

	terniLapilli putXAt: 0@0 .
	
	terniLapilli putOAt: 1@0.
	
	self denyPuttingXOnOccupiedPosition .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:56:11'!
test08OShouldPutInAvailablePosition
	
	terniLapilli putXAt: 0@0 .
	
	terniLapilli putOAt: 1@0.
	
	terniLapilli putXAt: 1@1 .
	
	self denyPuttingOOnOccupiedPosition.! !

!methodRemoval: TerniLapilliTest #test08OTokensShouldBePlacedIntoAvailablePositions stamp: 'eb 11/2/2020 15:56:11'!
test08OTokensShouldBePlacedIntoAvailablePositions
	
	terniLapilli putXAt: 0@0 .
	
	terniLapilli putOAt: 1@0.
	
	terniLapilli putXAt: 1@1 .
	
	self denyPuttingOOnOccupiedPosition.!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:56:25'!
test09XCannotPutMoreThanThreeTimes

	self fillBoard .
	
	self should: [ terniLapilli putXAt: 2@2. self fail.]
		raise: Error
		withMessageText: terniLapilli class cannotPutMoreThanThreeTokensErrorDescription .! !

!methodRemoval: TerniLapilliTest #test09XTokensShouldNotBeMoreThanThree stamp: 'eb 11/2/2020 15:56:25'!
test09XTokensShouldNotBeMoreThanThree

	self fillBoard .
	
	self should: [ terniLapilli putXAt: 2@2. self fail.]
		raise: Error
		withMessageText: terniLapilli class cannotPutMoreThanThreeTokensErrorDescription .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:57:07'!
test10XCanMoveOnlyWithThreeTokens

	terniLapilli putXAt: 0@0 .
	
	terniLapilli putOAt: 0@1 .
	
	terniLapilli putXAt: 1@0.
	
	terniLapilli putOAt: 1@1 .
	
	self should: [ terniLapilli moveXFrom: 0@0 to: 0@1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class movementsCanOnlyBeDoneWithThreeTokens .! !

!methodRemoval: TerniLapilliTest #test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens stamp: 'eb 11/2/2020 15:57:07'!
test10XTokensCanBeMovedOnlyWhenThereAreThreeXTokens

	terniLapilli putXAt: 0@0 .
	
	terniLapilli putOAt: 0@1 .
	
	terniLapilli putXAt: 1@0.
	
	terniLapilli putOAt: 1@1 .
	
	self should: [ terniLapilli moveXFrom: 0@0 to: 0@1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class movementsCanOnlyBeDoneWithThreeTokens .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:57:33'!
test11OCanMoveOnlyWithThreeTokens

	terniLapilli putXAt: 0@0 .
	
	terniLapilli putOAt: 0@1 .
	
	terniLapilli putXAt: 1@0.
	
	terniLapilli putOAt: 1@1 .
	
	self should: [ terniLapilli moveOFrom: 0@2 to: 1@2. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class movementsCanOnlyBeDoneWithThreeTokens .! !

!methodRemoval: TerniLapilliTest #test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens stamp: 'eb 11/2/2020 15:57:33'!
test11OTokensCanBeMovedOnlyWhenThereAreThreeOTokens

	terniLapilli putXAt: 0@0 .
	
	terniLapilli putOAt: 0@1 .
	
	terniLapilli putXAt: 1@0.
	
	terniLapilli putOAt: 1@1 .
	
	self should: [ terniLapilli moveOFrom: 0@2 to: 1@2. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class movementsCanOnlyBeDoneWithThreeTokens .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:57:54'!
test12XCannotMoveToOPositions

	self fillBoard .
	
	self should: [ terniLapilli moveXFrom: 1@0 to: 1@1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription .! !

!methodRemoval: TerniLapilliTest #test12XTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 15:57:54'!
test12XTokensCannotBeMovedToPositionsWithOTokens

	self fillBoard .
	
	self should: [ terniLapilli moveXFrom: 1@0 to: 1@1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:58:09'!
test13XCannotMoveToXPositions

	self fillBoard .
	
	self should: [ terniLapilli moveXFrom: 1@0 to: 0@0. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription .! !

!methodRemoval: TerniLapilliTest #test13XTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 15:58:09'!
test13XTokensCannotBeMovedToPositionsWithXTokens

	self fillBoard .
	
	self should: [ terniLapilli moveXFrom: 1@0 to: 0@0. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:58:31' prior: 50973663!
test12XCannotMoveToOPositions

	self fillBoard .
	
	self should: [ terniLapilli moveXFrom: 1@0 to: 1@1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription .
		
	self should: [ terniLapilli moveXFrom: 1@0 to: 0@0. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription .! !

!methodRemoval: TerniLapilliTest #test13XCannotMoveToXPositions stamp: 'eb 11/2/2020 15:58:33'!
test13XCannotMoveToXPositions

	self fillBoard .
	
	self should: [ terniLapilli moveXFrom: 1@0 to: 0@0. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:58:41'!
test12XCannotMoveToOccupiedPositions

	self fillBoard .
	
	self should: [ terniLapilli moveXFrom: 1@0 to: 1@1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription .
		
	self should: [ terniLapilli moveXFrom: 1@0 to: 0@0. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription .! !

!methodRemoval: TerniLapilliTest #test12XCannotMoveToOPositions stamp: 'eb 11/2/2020 15:58:41'!
test12XCannotMoveToOPositions

	self fillBoard .
	
	self should: [ terniLapilli moveXFrom: 1@0 to: 1@1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription .
		
	self should: [ terniLapilli moveXFrom: 1@0 to: 0@0. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription .!

!testRun: #TerniLapilliTest #test12XCannotMoveToOccupiedPositions stamp: 'eb 11/2/2020 15:58:46'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:59:04'!
test13OCannotMoveToOcuppiedPositions

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	self should: [ terniLapilli moveOFrom: 1@1 to: 1@2. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription .! !

!methodRemoval: TerniLapilliTest #test14OTokensCannotBeMovedToPositionsWithOTokens stamp: 'eb 11/2/2020 15:59:04'!
test14OTokensCannotBeMovedToPositionsWithOTokens

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	self should: [ terniLapilli moveOFrom: 1@1 to: 1@2. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 15:59:28' prior: 50973761!
test13OCannotMoveToOcuppiedPositions

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	self should: [ terniLapilli moveOFrom: 1@1 to: 1@2. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription .
	
	self should: [ terniLapilli moveOFrom: 1@1 to: 2@0. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription .! !

!methodRemoval: TerniLapilliTest #test15OTokensCannotBeMovedToPositionsWithXTokens stamp: 'eb 11/2/2020 15:59:41'!
test15OTokensCannotBeMovedToPositionsWithXTokens

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	self should: [ terniLapilli moveOFrom: 1@1 to: 2@0. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:00:08'!
test14XCannotMoveTwice

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	self should: [ terniLapilli moveXFrom: 2@0 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class cannotMoveTwiceErrorDescription .! !

!methodRemoval: TerniLapilliTest #test16XCannotMoveTwice stamp: 'eb 11/2/2020 16:00:08'!
test16XCannotMoveTwice

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	self should: [ terniLapilli moveXFrom: 2@0 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class cannotMoveTwiceErrorDescription .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:00:12'!
test15OCannotMoveTwice

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	terniLapilli moveOFrom: 1@1 to: 2@1.
	
	self should: [ terniLapilli moveOFrom: 2@1 to: 2@2. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class cannotMoveTwiceErrorDescription .! !

!methodRemoval: TerniLapilliTest #test17OCannotMoveTwice stamp: 'eb 11/2/2020 16:00:12'!
test17OCannotMoveTwice

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	terniLapilli moveOFrom: 1@1 to: 2@1.
	
	self should: [ terniLapilli moveOFrom: 2@1 to: 2@2. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class cannotMoveTwiceErrorDescription .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:00:17'!
test16XMovementsLengthShouldBeOne

	self fillBoard .
		
	self should: [ terniLapilli moveXFrom: 1@0 to: 2@2. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class movementsLengthShouldBeOneErrorDescription .! !

!methodRemoval: TerniLapilliTest #test18XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:00:17'!
test18XMovementsLengthShouldBeOne

	self fillBoard .
		
	self should: [ terniLapilli moveXFrom: 1@0 to: 2@2. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class movementsLengthShouldBeOneErrorDescription .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:00:21'!
test17OMovementsLengthShouldBeOne

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0 .
		
	self should: [ terniLapilli moveOFrom: 0@2 to: 2@2. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class movementsLengthShouldBeOneErrorDescription .! !

!methodRemoval: TerniLapilliTest #test19OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:00:21'!
test19OMovementsLengthShouldBeOne

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0 .
		
	self should: [ terniLapilli moveOFrom: 0@2 to: 2@2. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class movementsLengthShouldBeOneErrorDescription .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:00:56'!
test18XMovesFromPositionsAlreadyUsedInBoard

	self fillBoard .
		
	self should: [ terniLapilli moveXFrom: 2@2 to: 2@1 . self fail. ] 
		raise: Error
		withMessageText: terniLapilli class movementSourceHasNotTokenErrorDescription .! !

!methodRemoval: TerniLapilliTest #test20XTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 16:00:56'!
test20XTokensMovementsSourcesAreAlreadyInBoard

	self fillBoard .
		
	self should: [ terniLapilli moveXFrom: 2@2 to: 2@1 . self fail. ] 
		raise: Error
		withMessageText: terniLapilli class movementSourceHasNotTokenErrorDescription .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:01:24'!
test19OMovesFromPositionsAlreadyUsedInBoard

	self fillBoard .
		
	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	self should: [ terniLapilli moveOFrom: 2@2 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class movementSourceHasNotTokenErrorDescription .! !

!methodRemoval: TerniLapilliTest #test21OTokensMovementsSourcesAreAlreadyInBoard stamp: 'eb 11/2/2020 16:01:25'!
test21OTokensMovementsSourcesAreAlreadyInBoard

	self fillBoard .
		
	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	self should: [ terniLapilli moveOFrom: 2@2 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class movementSourceHasNotTokenErrorDescription .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:02:10'!
test20XMovesToAValidPositionInTheBoard

	self fillBoard .
	
	self should: [ terniLapilli moveXFrom: 1@0 to: 1@-1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription .! !

!methodRemoval: TerniLapilliTest #test22WhenMovingXDestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 16:02:10'!
test22WhenMovingXDestinationShouldBeIntoTheBoard

	self fillBoard .
	
	self should: [ terniLapilli moveXFrom: 1@0 to: 1@-1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:02:27'!
test21OMovesToAValidPositionInTheBoard

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	self should: [ terniLapilli moveOFrom: 0@2 to: -1@2. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription .! !

!methodRemoval: TerniLapilliTest #test23WhenMovingODestinationShouldBeIntoTheBoard stamp: 'eb 11/2/2020 16:02:27'!
test23WhenMovingODestinationShouldBeIntoTheBoard

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	self should: [ terniLapilli moveOFrom: 0@2 to: -1@2. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:03:06'!
test22XMovesFromSomeOwnToken

	self fillBoard .
		
	self should: [ terniLapilli moveXFrom: 1@1 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionHasOErrorDescription .! !

!methodRemoval: TerniLapilliTest #test24WhenMovingXSourcePositionShouldContainX stamp: 'eb 11/2/2020 16:03:06'!
test24WhenMovingXSourcePositionShouldContainX

	self fillBoard .
		
	self should: [ terniLapilli moveXFrom: 1@1 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionHasOErrorDescription .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:03:16'!
test23OMovesFromSomeOwnToken

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0.
		
	self should: [ terniLapilli moveOFrom: 2@0 to: 1@0. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionHasXErrorDescription .! !

!methodRemoval: TerniLapilliTest #test25WhenMovingOSourcePositionShouldContainO stamp: 'eb 11/2/2020 16:03:16'!
test25WhenMovingOSourcePositionShouldContainO

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0.
		
	self should: [ terniLapilli moveOFrom: 2@0 to: 1@0. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionHasXErrorDescription .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:03:34'!
test26XWinsWhenHasThreeTokensInLine

	self fillBoard .
	
	self makeXWin.
	
	self assert: terniLapilli isOver .
	
	self assert: terniLapilli hasPlayerXWon.
	
	self deny: terniLapilli hasPlayerOWon.! !

!methodRemoval: TerniLapilliTest #test26XWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 16:03:34'!
test26XWinsWhenHasThreeInLine

	self fillBoard .
	
	self makeXWin.
	
	self assert: terniLapilli isOver .
	
	self assert: terniLapilli hasPlayerXWon.
	
	self deny: terniLapilli hasPlayerOWon.!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:03:40'!
test27OWinsWhenHasThreeTokensInLine

	self fillBoard .
	
	self makeOWin.
	
	self assert: terniLapilli isOver .
	
	self assert: terniLapilli hasPlayerOWon.
	
	self deny: terniLapilli hasPlayerXWon.! !

!methodRemoval: TerniLapilliTest #test27OWinsWhenHasThreeInLine stamp: 'eb 11/2/2020 16:03:40'!
test27OWinsWhenHasThreeInLine

	self fillBoard .
	
	self makeOWin.
	
	self assert: terniLapilli isOver .
	
	self assert: terniLapilli hasPlayerOWon.
	
	self deny: terniLapilli hasPlayerXWon.!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:03:46'!
test24XWinsWhenHasThreeTokensInLine

	self fillBoard .
	
	self makeXWin.
	
	self assert: terniLapilli isOver .
	
	self assert: terniLapilli hasPlayerXWon.
	
	self deny: terniLapilli hasPlayerOWon.! !

!methodRemoval: TerniLapilliTest #test26XWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:03:46'!
test26XWinsWhenHasThreeTokensInLine

	self fillBoard .
	
	self makeXWin.
	
	self assert: terniLapilli isOver .
	
	self assert: terniLapilli hasPlayerXWon.
	
	self deny: terniLapilli hasPlayerOWon.!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:03:51'!
test25OWinsWhenHasThreeTokensInLine

	self fillBoard .
	
	self makeOWin.
	
	self assert: terniLapilli isOver .
	
	self assert: terniLapilli hasPlayerOWon.
	
	self deny: terniLapilli hasPlayerXWon.! !

!methodRemoval: TerniLapilliTest #test27OWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:03:51'!
test27OWinsWhenHasThreeTokensInLine

	self fillBoard .
	
	self makeOWin.
	
	self assert: terniLapilli isOver .
	
	self assert: terniLapilli hasPlayerOWon.
	
	self deny: terniLapilli hasPlayerXWon.!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:03:59'!
test26XCannotPlayWhenGameIsOver

	self fillBoard .
	
	self makeOWin.
	
	self should: [ terniLapilli moveXFrom: 1@0 to: 2@0. self fail ]
		raise: Error
		withMessageText: terniLapilli class gameIsOverErrorDescription! !

!methodRemoval: TerniLapilliTest #test28XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:03:59'!
test28XCannotPlayWhenGameIsOver

	self fillBoard .
	
	self makeOWin.
	
	self should: [ terniLapilli moveXFrom: 1@0 to: 2@0. self fail ]
		raise: Error
		withMessageText: terniLapilli class gameIsOverErrorDescription!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:04:07'!
test27OCannotPlayWhenGameIsOver

	self fillBoard .
	
	self makeXWin.
	
	self should: [ terniLapilli moveOFrom: 2@2 to: 2@1. self fail ]
		raise: Error
		withMessageText: terniLapilli class gameIsOverErrorDescription.! !

!methodRemoval: TerniLapilliTest #test29OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:04:07'!
test29OCannotPlayWhenGameIsOver

	self fillBoard .
	
	self makeXWin.
	
	self should: [ terniLapilli moveOFrom: 2@2 to: 2@1. self fail ]
		raise: Error
		withMessageText: terniLapilli class gameIsOverErrorDescription.!

!methodRemoval: TerniLapilliTest #test18XMovesFromPositionsAlreadyUsedInBoard stamp: 'eb 11/2/2020 16:05:53'!
test18XMovesFromPositionsAlreadyUsedInBoard

	self fillBoard .
		
	self should: [ terniLapilli moveXFrom: 2@2 to: 2@1 . self fail. ] 
		raise: Error
		withMessageText: terniLapilli class movementSourceHasNotTokenErrorDescription .!

!methodRemoval: TerniLapilliTest #test19OMovesFromPositionsAlreadyUsedInBoard stamp: 'eb 11/2/2020 16:05:56'!
test19OMovesFromPositionsAlreadyUsedInBoard

	self fillBoard .
		
	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	self should: [ terniLapilli moveOFrom: 2@2 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class movementSourceHasNotTokenErrorDescription .!
!TerniLapilli methodsFor: 'asserting' stamp: 'eb 11/2/2020 16:06:29' prior: 50970606!
assertHasO: aPosition
		
	(XTokens includes: aPosition) ifTrue: [ self error: self class positionHasXErrorDescription ] .! !
!TerniLapilli methodsFor: 'asserting' stamp: 'eb 11/2/2020 16:06:35' prior: 50970663!
assertHasX: aPosition
	
	(OTokens includes: aPosition) ifTrue: [self error: self class positionHasOErrorDescription ].! !

!methodRemoval: TerniLapilli class #movementSourceHasNotTokenErrorDescription stamp: 'eb 11/2/2020 16:06:37'!
movementSourceHasNotTokenErrorDescription

	^ 'Movement source has not token'.!

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 16:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 16:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 16:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 16:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test06OShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test07XShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test08OShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test09XCannotPutMoreThanThreeTimes stamp: 'eb 11/2/2020 16:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test10XCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test11OCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test12XCannotMoveToOccupiedPositions stamp: 'eb 11/2/2020 16:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 16:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test14XCannotMoveTwice stamp: 'eb 11/2/2020 16:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test15OCannotMoveTwice stamp: 'eb 11/2/2020 16:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test16XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test17OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test20XMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test21OMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test22XMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test23OMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test24XWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test25OWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test26XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:06:42'!
PASSED!

!testRun: #TerniLapilliTest #test27OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:06:42'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:07:06'!
test18XMovesToAValidPositionInTheBoard

	self fillBoard .
	
	self should: [ terniLapilli moveXFrom: 1@0 to: 1@-1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription .! !

!methodRemoval: TerniLapilliTest #test20XMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:07:07'!
test20XMovesToAValidPositionInTheBoard

	self fillBoard .
	
	self should: [ terniLapilli moveXFrom: 1@0 to: 1@-1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:07:14'!
test19OMovesToAValidPositionInTheBoard

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	self should: [ terniLapilli moveOFrom: 0@2 to: -1@2. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription .! !

!methodRemoval: TerniLapilliTest #test21OMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:07:14'!
test21OMovesToAValidPositionInTheBoard

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	self should: [ terniLapilli moveOFrom: 0@2 to: -1@2. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:07:19'!
test20XMovesFromSomeOwnToken

	self fillBoard .
		
	self should: [ terniLapilli moveXFrom: 1@1 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionHasOErrorDescription .! !

!methodRemoval: TerniLapilliTest #test22XMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:07:19'!
test22XMovesFromSomeOwnToken

	self fillBoard .
		
	self should: [ terniLapilli moveXFrom: 1@1 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionHasOErrorDescription .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:07:26'!
test21OMovesFromSomeOwnToken

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0.
		
	self should: [ terniLapilli moveOFrom: 2@0 to: 1@0. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionHasXErrorDescription .! !

!methodRemoval: TerniLapilliTest #test23OMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:07:26'!
test23OMovesFromSomeOwnToken

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0.
		
	self should: [ terniLapilli moveOFrom: 2@0 to: 1@0. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionHasXErrorDescription .!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:07:30'!
test22XWinsWhenHasThreeTokensInLine

	self fillBoard .
	
	self makeXWin.
	
	self assert: terniLapilli isOver .
	
	self assert: terniLapilli hasPlayerXWon.
	
	self deny: terniLapilli hasPlayerOWon.! !

!methodRemoval: TerniLapilliTest #test24XWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:07:30'!
test24XWinsWhenHasThreeTokensInLine

	self fillBoard .
	
	self makeXWin.
	
	self assert: terniLapilli isOver .
	
	self assert: terniLapilli hasPlayerXWon.
	
	self deny: terniLapilli hasPlayerOWon.!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:07:34'!
test23OWinsWhenHasThreeTokensInLine

	self fillBoard .
	
	self makeOWin.
	
	self assert: terniLapilli isOver .
	
	self assert: terniLapilli hasPlayerOWon.
	
	self deny: terniLapilli hasPlayerXWon.! !

!methodRemoval: TerniLapilliTest #test25OWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:07:34'!
test25OWinsWhenHasThreeTokensInLine

	self fillBoard .
	
	self makeOWin.
	
	self assert: terniLapilli isOver .
	
	self assert: terniLapilli hasPlayerOWon.
	
	self deny: terniLapilli hasPlayerXWon.!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:07:39'!
test24XCannotPlayWhenGameIsOver

	self fillBoard .
	
	self makeOWin.
	
	self should: [ terniLapilli moveXFrom: 1@0 to: 2@0. self fail ]
		raise: Error
		withMessageText: terniLapilli class gameIsOverErrorDescription! !

!methodRemoval: TerniLapilliTest #test26XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:07:39'!
test26XCannotPlayWhenGameIsOver

	self fillBoard .
	
	self makeOWin.
	
	self should: [ terniLapilli moveXFrom: 1@0 to: 2@0. self fail ]
		raise: Error
		withMessageText: terniLapilli class gameIsOverErrorDescription!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:07:47'!
test25OCannotPlayWhenGameIsOver

	self fillBoard .
	
	self makeXWin.
	
	self should: [ terniLapilli moveOFrom: 2@2 to: 2@1. self fail ]
		raise: Error
		withMessageText: terniLapilli class gameIsOverErrorDescription.! !

!methodRemoval: TerniLapilliTest #test27OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:07:47'!
test27OCannotPlayWhenGameIsOver

	self fillBoard .
	
	self makeXWin.
	
	self should: [ terniLapilli moveOFrom: 2@2 to: 2@1. self fail ]
		raise: Error
		withMessageText: terniLapilli class gameIsOverErrorDescription.!

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 16:07:51'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 16:07:51'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 16:07:51'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 16:07:51'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:07:51'!
PASSED!

!testRun: #TerniLapilliTest #test06OShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:07:51'!
PASSED!

!testRun: #TerniLapilliTest #test07XShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:07:51'!
PASSED!

!testRun: #TerniLapilliTest #test08OShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:07:51'!
PASSED!

!testRun: #TerniLapilliTest #test09XCannotPutMoreThanThreeTimes stamp: 'eb 11/2/2020 16:07:51'!
PASSED!

!testRun: #TerniLapilliTest #test10XCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:07:51'!
PASSED!

!testRun: #TerniLapilliTest #test11OCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:07:51'!
PASSED!

!testRun: #TerniLapilliTest #test12XCannotMoveToOccupiedPositions stamp: 'eb 11/2/2020 16:07:51'!
PASSED!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 16:07:51'!
PASSED!

!testRun: #TerniLapilliTest #test14XCannotMoveTwice stamp: 'eb 11/2/2020 16:07:51'!
PASSED!

!testRun: #TerniLapilliTest #test15OCannotMoveTwice stamp: 'eb 11/2/2020 16:07:51'!
PASSED!

!testRun: #TerniLapilliTest #test16XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:07:51'!
PASSED!

!testRun: #TerniLapilliTest #test17OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:07:51'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:07:51'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:07:51'!
PASSED!

!testRun: #TerniLapilliTest #test20XMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:07:51'!
PASSED!

!testRun: #TerniLapilliTest #test21OMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:07:51'!
PASSED!

!testRun: #TerniLapilliTest #test22XWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:07:51'!
PASSED!

!testRun: #TerniLapilliTest #test23OWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:07:51'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:07:51'!
PASSED!

!testRun: #TerniLapilliTest #test25OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:07:51'!
PASSED!
!TerniLapilli methodsFor: 'nil' stamp: 'eb 11/2/2020 16:10:39'!
lookForVictoryIn: aPositionCollection

	! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:10:54' prior: 50970462!
hasPlayerOWon
	
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 16:10:57' prior: 50974498!
lookForVictoryIn: aPositionCollection

	| verticalWin horizontalWin diagonalWin |
	
	(OTokens size < 3) ifTrue: [ ^false ].
	
	verticalWin _ OTokens allSatisfy: [ :each | OTokens asArray first x = each x.].
	
	horizontalWin _ OTokens allSatisfy: [ :each | OTokens asArray first y = each y. ].
	
	diagonalWin _ OTokens = #(0@0. 1@1. 2@2.) or: OTokens = #(0@2. 1@1. 2@0.).
	
	^ verticalWin or: horizontalWin or: diagonalWin.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 16:11:14' prior: 50974506!
lookForVictoryIn: aPositionCollection

	| verticalWin horizontalWin diagonalWin |
	
	(aPositionCollection size < 3) ifTrue: [ ^false ].
	
	verticalWin _ aPositionCollection allSatisfy: [ :each | aPositionCollection asArray first x = each x.].
	
	horizontalWin _ aPositionCollection allSatisfy: [ :each | aPositionCollection asArray first y = each y. ].
	
	diagonalWin _ aPositionCollection = #(0@0. 1@1. 2@2.) or: aPositionCollection = #(0@2. 1@1. 2@0.).
	
	^ verticalWin or: horizontalWin or: diagonalWin.! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:12:02' prior: 50974502!
hasPlayerOWon
	
	^ self lookForVictoryIn: OTokens .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:12:21' prior: 50970775!
hasPlayerXWon

	^ self lookForVictoryIn: XTokens .! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 16:12:40'!
principalDiagonal
	
	^ nil.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 16:12:45'!
notPrincipalDiagonal
	
	^ nil.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 16:12:59' prior: 50974552!
principalDiagonal
	
	^ #(0@0. 1@1. 2@2.) .! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 16:13:15' prior: 50974523!
lookForVictoryIn: aPositionCollection

	| verticalWin horizontalWin diagonalWin |
	
	(aPositionCollection size < 3) ifTrue: [ ^false ].
	
	verticalWin _ aPositionCollection allSatisfy: [ :each | aPositionCollection asArray first x = each x.].
	
	horizontalWin _ aPositionCollection allSatisfy: [ :each | aPositionCollection asArray first y = each y. ].
	
	diagonalWin _ aPositionCollection = self principalDiagonal or: aPositionCollection = #(0@2. 1@1. 2@0.).
	
	^ verticalWin or: horizontalWin or: diagonalWin.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 16:13:24' prior: 50974566!
lookForVictoryIn: aPositionCollection

	| verticalWin horizontalWin diagonalWin |
	
	(aPositionCollection size < 3) ifTrue: [ ^false ].
	
	verticalWin _ aPositionCollection allSatisfy: [ :each | aPositionCollection asArray first x = each x.].
	
	horizontalWin _ aPositionCollection allSatisfy: [ :each | aPositionCollection asArray first y = each y. ].
	
	diagonalWin _ aPositionCollection = self principalDiagonal or: aPositionCollection = self notPrincipalDiagonal .
	
	^ verticalWin or: horizontalWin or: diagonalWin.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 16:13:28' prior: 50974556!
notPrincipalDiagonal
	
	^  #(0@2. 1@1. 2@0.).! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 16:13:30'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 16:13:30'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 16:13:30'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 16:13:30'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:13:30'!
PASSED!

!testRun: #TerniLapilliTest #test06OShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:13:30'!
PASSED!

!testRun: #TerniLapilliTest #test07XShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:13:30'!
PASSED!

!testRun: #TerniLapilliTest #test08OShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:13:30'!
PASSED!

!testRun: #TerniLapilliTest #test09XCannotPutMoreThanThreeTimes stamp: 'eb 11/2/2020 16:13:30'!
PASSED!

!testRun: #TerniLapilliTest #test10XCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:13:30'!
PASSED!

!testRun: #TerniLapilliTest #test11OCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:13:30'!
PASSED!

!testRun: #TerniLapilliTest #test12XCannotMoveToOccupiedPositions stamp: 'eb 11/2/2020 16:13:30'!
PASSED!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 16:13:30'!
PASSED!

!testRun: #TerniLapilliTest #test14XCannotMoveTwice stamp: 'eb 11/2/2020 16:13:30'!
PASSED!

!testRun: #TerniLapilliTest #test15OCannotMoveTwice stamp: 'eb 11/2/2020 16:13:30'!
PASSED!

!testRun: #TerniLapilliTest #test16XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:13:30'!
PASSED!

!testRun: #TerniLapilliTest #test17OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:13:30'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:13:30'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:13:30'!
PASSED!

!testRun: #TerniLapilliTest #test20XMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:13:30'!
PASSED!

!testRun: #TerniLapilliTest #test21OMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:13:31'!
PASSED!

!testRun: #TerniLapilliTest #test22XWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:13:31'!
PASSED!

!testRun: #TerniLapilliTest #test23OWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:13:31'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:13:31'!
PASSED!

!testRun: #TerniLapilliTest #test25OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:13:31'!
PASSED!
!TerniLapilli methodsFor: 'asserting' stamp: 'eb 11/2/2020 16:14:37' prior: 50973361!
isInSomeDiagonal: aPosition
	
	^ (self principalDiagonal includes: aPosition) or: [ self notPrincipalDiagonal includes: aPosition].! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:16:25'!
assertThatThereAreThreeTokens

	^ (OTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ]! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:16:25' prior: 50972717!
moveOFrom: aSourcePosition to: aTargetPosition
	
	self assertThatThereAreThreeTokens.
	
	((XTokens includes: aTargetPosition ) or: [ OTokens includes: aTargetPosition ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifTrue: [ self error: self class cannotMoveTwiceErrorDescription ].
		
	self assertThat: aSourcePosition isWithinOneUnitDistanceTo: aTargetPosition.
	
	self assertHasO: aSourcePosition .
	
	self assertThatPositionIsIntoTheBoard: aTargetPosition .
	
	(self isOver) ifTrue: [ self error: self class gameIsOverErrorDescription ].
	
	OTokens remove: aSourcePosition .
	
	OTokens add: aTargetPosition .
	
	isPlayingX _ true .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:16:30' prior: 50974705!
moveOFrom: aSourcePosition to: aTargetPosition
	
	self assertThatThereAreThreeTokens: XTokens.
	
	((XTokens includes: aTargetPosition ) or: [ OTokens includes: aTargetPosition ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifTrue: [ self error: self class cannotMoveTwiceErrorDescription ].
		
	self assertThat: aSourcePosition isWithinOneUnitDistanceTo: aTargetPosition.
	
	self assertHasO: aSourcePosition .
	
	self assertThatPositionIsIntoTheBoard: aTargetPosition .
	
	(self isOver) ifTrue: [ self error: self class gameIsOverErrorDescription ].
	
	OTokens remove: aSourcePosition .
	
	OTokens add: aTargetPosition .
	
	isPlayingX _ true .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:16:42'!
assertThatThereAreThreeTokens: aPositionCollection

	^ (aPositionCollection size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ]! !

!methodRemoval: TerniLapilli #assertThatThereAreThreeTokens stamp: 'eb 11/2/2020 16:16:44'!
assertThatThereAreThreeTokens

	^ (OTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ]!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:17:11' prior: 50974730!
moveOFrom: aSourcePosition to: aTargetPosition
	
	self assertThatThereAreThreeTokens: OTokens .
	
	((XTokens includes: aTargetPosition ) or: [ OTokens includes: aTargetPosition ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifTrue: [ self error: self class cannotMoveTwiceErrorDescription ].
		
	self assertThat: aSourcePosition isWithinOneUnitDistanceTo: aTargetPosition.
	
	self assertHasO: aSourcePosition .
	
	self assertThatPositionIsIntoTheBoard: aTargetPosition .
	
	(self isOver) ifTrue: [ self error: self class gameIsOverErrorDescription ].
	
	OTokens remove: aSourcePosition .
	
	OTokens add: aTargetPosition .
	
	isPlayingX _ true .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:17:48' prior: 50974769!
moveOFrom: aSourcePosition to: aTargetPosition
	
	self assertThatThereAreThreeTokens: OTokens .
	
	((XTokens includes: aTargetPosition ) or: [ OTokens includes: aTargetPosition ]) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifTrue: [ self error: self class cannotMoveTwiceErrorDescription ].
		
	self assertThat: aSourcePosition isWithinOneUnitDistanceTo: aTargetPosition.
	
	self assertHasO: aSourcePosition .
	
	self assertThatPositionIsIntoTheBoard: aTargetPosition .
	
	(self isOver) ifTrue: [ self error: self class gameIsOverErrorDescription ].
	
	OTokens remove: aSourcePosition .
	
	OTokens add: aTargetPosition .
	
	isPlayingX _ true .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:18:09' prior: 50974794!
moveOFrom: aSourcePosition to: aTargetPosition
	
	self assertThatThereAreThreeTokens: OTokens .
	
	self assertThatTargetPositionIsAvailable.
		
	isPlayingX ifTrue: [ self error: self class cannotMoveTwiceErrorDescription ].
		
	self assertThat: aSourcePosition isWithinOneUnitDistanceTo: aTargetPosition.
	
	self assertHasO: aSourcePosition .
	
	self assertThatPositionIsIntoTheBoard: aTargetPosition .
	
	(self isOver) ifTrue: [ self error: self class gameIsOverErrorDescription ].
	
	OTokens remove: aSourcePosition .
	
	OTokens add: aTargetPosition .
	
	isPlayingX _ true .! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 16:18:15'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 16:18:15'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 16:18:15'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 16:18:15'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:18:15'!
PASSED!

!testRun: #TerniLapilliTest #test06OShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:18:15'!
PASSED!

!testRun: #TerniLapilliTest #test07XShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:18:15'!
PASSED!

!testRun: #TerniLapilliTest #test08OShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:18:16'!
PASSED!

!testRun: #TerniLapilliTest #test09XCannotPutMoreThanThreeTimes stamp: 'eb 11/2/2020 16:18:16'!
PASSED!

!testRun: #TerniLapilliTest #test10XCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:18:16'!
PASSED!

!testRun: #TerniLapilliTest #test11OCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:18:16'!
PASSED!

!testRun: #TerniLapilliTest #test12XCannotMoveToOccupiedPositions stamp: 'eb 11/2/2020 16:18:16'!
PASSED!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 16:18:16'!
FAILURE!

!testRun: #TerniLapilliTest #test14XCannotMoveTwice stamp: 'eb 11/2/2020 16:18:16'!
PASSED!

!testRun: #TerniLapilliTest #test15OCannotMoveTwice stamp: 'eb 11/2/2020 16:18:16'!
ERROR!

!testRun: #TerniLapilliTest #test16XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:18:16'!
PASSED!

!testRun: #TerniLapilliTest #test17OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:18:16'!
FAILURE!

!testRun: #TerniLapilliTest #test18XMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:18:16'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:18:16'!
FAILURE!

!testRun: #TerniLapilliTest #test20XMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:18:16'!
PASSED!

!testRun: #TerniLapilliTest #test21OMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:18:16'!
FAILURE!

!testRun: #TerniLapilliTest #test22XWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:18:16'!
ERROR!

!testRun: #TerniLapilliTest #test23OWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:18:16'!
ERROR!

!testRun: #TerniLapilliTest #test24XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:18:16'!
ERROR!

!testRun: #TerniLapilliTest #test25OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:18:16'!
ERROR!
!TerniLapilli methodsFor: 'asserting' stamp: 'eb 11/2/2020 16:18:50'!
assertThatPositionIsAvailable: aPosition

	((XTokens includes: aPosition ) or: [ OTokens includes: aPosition ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:19:11' prior: 50974819!
moveOFrom: aSourcePosition to: aTargetPosition
	
	self assertThatThereAreThreeTokens: OTokens .
	
	self assertThatPositionIsAvailable: aTargetPosition.
		
	isPlayingX ifTrue: [ self error: self class cannotMoveTwiceErrorDescription ].
		
	self assertThat: aSourcePosition isWithinOneUnitDistanceTo: aTargetPosition.
	
	self assertHasO: aSourcePosition .
	
	self assertThatPositionIsIntoTheBoard: aTargetPosition .
	
	(self isOver) ifTrue: [ self error: self class gameIsOverErrorDescription ].
	
	OTokens remove: aSourcePosition .
	
	OTokens add: aTargetPosition .
	
	isPlayingX _ true .! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 16:19:41'!
assertThatThereAreThreeTokensInto: aPositionCollection

	^ (aPositionCollection size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 16:19:41' prior: 50974929!
moveOFrom: aSourcePosition to: aTargetPosition
	
	self assertThatThereAreThreeTokensInto: OTokens .
	
	self assertThatPositionIsAvailable: aTargetPosition.
		
	isPlayingX ifTrue: [ self error: self class cannotMoveTwiceErrorDescription ].
		
	self assertThat: aSourcePosition isWithinOneUnitDistanceTo: aTargetPosition.
	
	self assertHasO: aSourcePosition .
	
	self assertThatPositionIsIntoTheBoard: aTargetPosition .
	
	(self isOver) ifTrue: [ self error: self class gameIsOverErrorDescription ].
	
	OTokens remove: aSourcePosition .
	
	OTokens add: aTargetPosition .
	
	isPlayingX _ true .! !

!methodRemoval: TerniLapilli #assertThatThereAreThreeTokens: stamp: 'eb 11/2/2020 16:19:41'!
assertThatThereAreThreeTokens: aPositionCollection

	^ (aPositionCollection size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ]!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:20:33' prior: 50974959!
moveOFrom: aSourcePosition to: aTargetPosition
	
	self assertThatThereAreThreeTokensInto: OTokens .
	
	self assertThatPositionIsAvailable: aTargetPosition.
		
	isPlayingX ifTrue: [ self error: self class cannotMoveTwiceErrorDescription ].
		
	self assertThat: aSourcePosition isWithinOneUnitDistanceTo: aTargetPosition.
	
	self assertHasO: aSourcePosition .
	
	self assertThatPositionIsIntoTheBoard: aTargetPosition .
	
	self isOver ifTrue: [ self error: self class gameIsOverErrorDescription ].
	
	OTokens remove: aSourcePosition .
	
	OTokens add: aTargetPosition .
	
	isPlayingX _ true .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:20:47' prior: 50974989!
moveOFrom: aSourcePosition to: aTargetPosition
	
	self assertThatThereAreThreeTokensInto: OTokens .
	
	self assertThatPositionIsAvailable: aTargetPosition.
		
	self assertThat: aSourcePosition isWithinOneUnitDistanceTo: aTargetPosition.
	
	self assertHasO: aSourcePosition .
	
	self assertThatPositionIsIntoTheBoard: aTargetPosition .
	
	isPlayingX ifTrue: [ self error: self class cannotMoveTwiceErrorDescription ].
	
	self isOver ifTrue: [ self error: self class gameIsOverErrorDescription ].
	
	OTokens remove: aSourcePosition .
	
	OTokens add: aTargetPosition .
	
	isPlayingX _ true .! !
!TerniLapilli methodsFor: 'asserting' stamp: 'eb 11/2/2020 16:22:42'!
assertThat: aPosition isInto: aPositionCollection
		
	(aPositionCollection includes: aPosition) ifTrue: [ self error: self class positionHasXErrorDescription ] .! !

!methodRemoval: TerniLapilli #assertHasX: stamp: 'eb 11/2/2020 16:22:45'!
assertHasX: aPosition
	
	(OTokens includes: aPosition) ifTrue: [self error: self class positionHasOErrorDescription ].!

!methodRemoval: TerniLapilli #assertHasO: stamp: 'eb 11/2/2020 16:22:49'!
assertHasO: aPosition
		
	(XTokens includes: aPosition) ifTrue: [ self error: self class positionHasXErrorDescription ] .!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:23:24' prior: 50975011!
moveOFrom: aSourcePosition to: aTargetPosition
	
	self assertThatThereAreThreeTokensInto: OTokens .
	
	self assertThatPositionIsAvailable: aTargetPosition.
		
	self assertThat: aSourcePosition isWithinOneUnitDistanceTo: aTargetPosition.
	
	self assertThat: aSourcePosition isInto: OTokens .
	
	self assertThatPositionIsIntoTheBoard: aTargetPosition .
	
	isPlayingX ifTrue: [ self error: self class cannotMoveTwiceErrorDescription ].
	
	self isOver ifTrue: [ self error: self class gameIsOverErrorDescription ].
	
	OTokens remove: aSourcePosition .
	
	OTokens add: aTargetPosition .
	
	isPlayingX _ true .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:24:37'!
assertThatMovementCanBeDoneFrom: aSourcePosition to: aTargetPosition

	self assertThatThereAreThreeTokensInto: OTokens .
	
	self assertThatPositionIsAvailable: aTargetPosition.
		
	self assertThat: aSourcePosition isWithinOneUnitDistanceTo: aTargetPosition.
	
	self assertThat: aSourcePosition isInto: OTokens .
	
	self assertThatPositionIsIntoTheBoard: aTargetPosition .
	
	isPlayingX ifTrue: [ self error: self class cannotMoveTwiceErrorDescription ].
	
	self isOver ifTrue: [ self error: self class gameIsOverErrorDescription ]! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:24:37' prior: 50975053!
moveOFrom: aSourcePosition to: aTargetPosition
	
	self assertThatMovementCanBeDoneFrom: aSourcePosition to: aTargetPosition.
	
	OTokens remove: aSourcePosition .
	
	OTokens add: aTargetPosition .
	
	isPlayingX _ true .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:25:10' prior: 50975095!
moveOFrom: aSourcePosition to: aTargetPosition
	
	self assertThatMovementCanBeDoneFrom: aSourcePosition 
		to: aTargetPosition
		using: OTokens.
	
	OTokens remove: aSourcePosition .
	
	OTokens add: aTargetPosition .
	
	isPlayingX _ true .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:25:19'!
assertThatMovementCanBeDoneFrom: aSourcePosition to: aTargetPosition using: aPositionCollection

	self assertThatThereAreThreeTokensInto: OTokens .
	
	self assertThatPositionIsAvailable: aTargetPosition.
		
	self assertThat: aSourcePosition isWithinOneUnitDistanceTo: aTargetPosition.
	
	self assertThat: aSourcePosition isInto: OTokens .
	
	self assertThatPositionIsIntoTheBoard: aTargetPosition .
	
	isPlayingX ifTrue: [ self error: self class cannotMoveTwiceErrorDescription ].
	
	self isOver ifTrue: [ self error: self class gameIsOverErrorDescription ]! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:25:37' prior: 50975115!
assertThatMovementCanBeDoneFrom: aSourcePosition to: aTargetPosition using: aPositionCollection

	self assertThatThereAreThreeTokensInto: aPositionCollection .
	
	self assertThatPositionIsAvailable: aTargetPosition.
		
	self assertThat: aSourcePosition isWithinOneUnitDistanceTo: aTargetPosition.
	
	self assertThat: aSourcePosition isInto: aPositionCollection .
	
	self assertThatPositionIsIntoTheBoard: aTargetPosition .
	
	isPlayingX ifTrue: [ self error: self class cannotMoveTwiceErrorDescription ].
	
	self isOver ifTrue: [ self error: self class gameIsOverErrorDescription ]! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:26:01' prior: 50975105!
moveOFrom: aSourcePosition to: aTargetPosition
	
	self assertThatMovementCanBeDoneFrom: aSourcePosition 
		to: aTargetPosition
		using: OTokens.
	
	isPlayingX ifTrue: [ self error: self class cannotMoveTwiceErrorDescription ].
	
	self isOver ifTrue: [ self error: self class gameIsOverErrorDescription ].
	
	OTokens remove: aSourcePosition .
	
	OTokens add: aTargetPosition .
	
	isPlayingX _ true .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:27:37' prior: 50972645!
moveXFrom: aSourcePosition to: aTargetPosition

	(XTokens size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ].
	
	((XTokens includes: aTargetPosition ) or: [ OTokens includes: aTargetPosition ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	
	
	self assertThat: aSourcePosition isWithinOneUnitDistanceTo: aTargetPosition.
	
	self assertHasX: aSourcePosition .
	
	self assertThatPositionIsIntoTheBoard: aTargetPosition .
	
	isPlayingX ifFalse: [ self error: self class cannotMoveTwiceErrorDescription ].
	
	self isOver ifTrue: [ self error: self class gameIsOverErrorDescription ].
		
	XTokens remove: aSourcePosition .
	
	XTokens add: aTargetPosition .
	
	isPlayingX _ false .
	
! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:28:08' prior: 50975173!
moveXFrom: aSourcePosition to: aTargetPosition

	self assertThatMovementCanBeDoneFrom: aSourcePosition
	 	to:  aTargetPosition
		using: XTokens .
	
	isPlayingX ifFalse: [ self error: self class cannotMoveTwiceErrorDescription ].
	
	self isOver ifTrue: [ self error: self class gameIsOverErrorDescription ].
		
	XTokens remove: aSourcePosition .
	
	XTokens add: aTargetPosition .
	
	isPlayingX _ false .
	
! !

!methodRemoval: TerniLapilli #assertThatMovementCanBeDoneFrom:to: stamp: 'eb 11/2/2020 16:28:13'!
assertThatMovementCanBeDoneFrom: aSourcePosition to: aTargetPosition

	self assertThatThereAreThreeTokensInto: OTokens .
	
	self assertThatPositionIsAvailable: aTargetPosition.
		
	self assertThat: aSourcePosition isWithinOneUnitDistanceTo: aTargetPosition.
	
	self assertThat: aSourcePosition isInto: OTokens .
	
	self assertThatPositionIsIntoTheBoard: aTargetPosition .
	
	isPlayingX ifTrue: [ self error: self class cannotMoveTwiceErrorDescription ].
	
	self isOver ifTrue: [ self error: self class gameIsOverErrorDescription ]!

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 16:28:18'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 16:28:19'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 16:28:19'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 16:28:19'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:28:19'!
PASSED!

!testRun: #TerniLapilliTest #test06OShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:28:19'!
PASSED!

!testRun: #TerniLapilliTest #test07XShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:28:19'!
PASSED!

!testRun: #TerniLapilliTest #test08OShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:28:19'!
PASSED!

!testRun: #TerniLapilliTest #test09XCannotPutMoreThanThreeTimes stamp: 'eb 11/2/2020 16:28:19'!
PASSED!

!testRun: #TerniLapilliTest #test10XCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:28:19'!
PASSED!

!testRun: #TerniLapilliTest #test11OCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:28:19'!
PASSED!

!testRun: #TerniLapilliTest #test12XCannotMoveToOccupiedPositions stamp: 'eb 11/2/2020 16:28:19'!
PASSED!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 16:28:19'!
ERROR!

!testRun: #TerniLapilliTest #test14XCannotMoveTwice stamp: 'eb 11/2/2020 16:28:19'!
ERROR!

!testRun: #TerniLapilliTest #test15OCannotMoveTwice stamp: 'eb 11/2/2020 16:28:19'!
ERROR!

!testRun: #TerniLapilliTest #test16XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:28:19'!
PASSED!

!testRun: #TerniLapilliTest #test17OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:28:19'!
ERROR!

!testRun: #TerniLapilliTest #test18XMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:28:19'!
FAILURE!

!testRun: #TerniLapilliTest #test19OMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:28:19'!
ERROR!

!testRun: #TerniLapilliTest #test20XMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:28:19'!
FAILURE!

!testRun: #TerniLapilliTest #test21OMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:28:19'!
ERROR!

!testRun: #TerniLapilliTest #test22XWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:28:19'!
ERROR!

!testRun: #TerniLapilliTest #test23OWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:28:19'!
ERROR!

!testRun: #TerniLapilliTest #test24XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:28:19'!
ERROR!

!testRun: #TerniLapilliTest #test25OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:28:20'!
ERROR!

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 16:28:59'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 16:28:59'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 16:28:59'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 16:28:59'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:28:59'!
PASSED!

!testRun: #TerniLapilliTest #test06OShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:28:59'!
PASSED!

!testRun: #TerniLapilliTest #test07XShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:28:59'!
PASSED!

!testRun: #TerniLapilliTest #test08OShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:28:59'!
PASSED!

!testRun: #TerniLapilliTest #test09XCannotPutMoreThanThreeTimes stamp: 'eb 11/2/2020 16:28:59'!
PASSED!

!testRun: #TerniLapilliTest #test10XCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:28:59'!
PASSED!

!testRun: #TerniLapilliTest #test11OCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:28:59'!
PASSED!

!testRun: #TerniLapilliTest #test12XCannotMoveToOccupiedPositions stamp: 'eb 11/2/2020 16:28:59'!
PASSED!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 16:28:59'!
ERROR!

!testRun: #TerniLapilliTest #test14XCannotMoveTwice stamp: 'eb 11/2/2020 16:28:59'!
ERROR!

!testRun: #TerniLapilliTest #test15OCannotMoveTwice stamp: 'eb 11/2/2020 16:28:59'!
ERROR!

!testRun: #TerniLapilliTest #test16XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:28:59'!
PASSED!

!testRun: #TerniLapilliTest #test17OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:28:59'!
ERROR!

!testRun: #TerniLapilliTest #test18XMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:28:59'!
FAILURE!

!testRun: #TerniLapilliTest #test19OMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:28:59'!
ERROR!

!testRun: #TerniLapilliTest #test20XMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:28:59'!
FAILURE!

!testRun: #TerniLapilliTest #test21OMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:28:59'!
ERROR!

!testRun: #TerniLapilliTest #test22XWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:28:59'!
ERROR!

!testRun: #TerniLapilliTest #test23OWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:28:59'!
ERROR!

!testRun: #TerniLapilliTest #test24XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:28:59'!
ERROR!

!testRun: #TerniLapilliTest #test25OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:28:59'!
ERROR!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 16:29:03'!
ERROR!
!TerniLapilli methodsFor: 'asserting' stamp: 'eb 11/2/2020 16:30:33' prior: 50975032!
assertThat: aPosition isInto: aPositionCollection
		
	(aPositionCollection includes: aPosition) ifTrue: [ self error: self class sourcePositionDoesNotBelongToPlayer ] .! !
!TerniLapilli class methodsFor: 'nil' stamp: 'eb 11/2/2020 16:31:29'!
sourcePositionDoesNotBelongToPlayerErrorDescription

	^ 'Source position does not belong to player'.! !

!methodRemoval: TerniLapilli class #positionHasOErrorDescription stamp: 'eb 11/2/2020 16:31:48'!
positionHasOErrorDescription

	^ 'Position has O'.!

!methodRemoval: TerniLapilli class #positionHasXErrorDescription stamp: 'eb 11/2/2020 16:31:50'!
positionHasXErrorDescription

	^ 'Position has X'.!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:32:27' prior: 50974305!
test20XMovesFromSomeOwnToken

	self fillBoard .
		
	self should: [ terniLapilli moveXFrom: 1@1 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class sourcePositionDoesNotBelongToPlayerErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:32:32' prior: 50974323!
test21OMovesFromSomeOwnToken

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0.
		
	self should: [ terniLapilli moveOFrom: 2@0 to: 1@0. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class sourcePositionDoesNotBelongToPlayerErrorDescription .! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 16:32:39'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 16:32:39'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 16:32:39'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 16:32:39'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:32:39'!
PASSED!

!testRun: #TerniLapilliTest #test06OShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:32:39'!
PASSED!

!testRun: #TerniLapilliTest #test07XShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:32:39'!
PASSED!

!testRun: #TerniLapilliTest #test08OShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:32:40'!
PASSED!

!testRun: #TerniLapilliTest #test09XCannotPutMoreThanThreeTimes stamp: 'eb 11/2/2020 16:32:40'!
PASSED!

!testRun: #TerniLapilliTest #test10XCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:32:40'!
PASSED!

!testRun: #TerniLapilliTest #test11OCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:32:40'!
PASSED!

!testRun: #TerniLapilliTest #test12XCannotMoveToOccupiedPositions stamp: 'eb 11/2/2020 16:32:40'!
PASSED!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 16:32:40'!
ERROR!

!testRun: #TerniLapilliTest #test14XCannotMoveTwice stamp: 'eb 11/2/2020 16:32:40'!
ERROR!

!testRun: #TerniLapilliTest #test15OCannotMoveTwice stamp: 'eb 11/2/2020 16:32:40'!
ERROR!

!testRun: #TerniLapilliTest #test16XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:32:40'!
PASSED!

!testRun: #TerniLapilliTest #test17OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:32:40'!
ERROR!

!testRun: #TerniLapilliTest #test18XMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:32:40'!
FAILURE!

!testRun: #TerniLapilliTest #test19OMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:32:40'!
ERROR!

!testRun: #TerniLapilliTest #test20XMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:32:40'!
FAILURE!

!testRun: #TerniLapilliTest #test21OMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:32:40'!
ERROR!

!testRun: #TerniLapilliTest #test22XWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:32:40'!
ERROR!

!testRun: #TerniLapilliTest #test23OWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:32:40'!
ERROR!

!testRun: #TerniLapilliTest #test24XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:32:40'!
ERROR!

!testRun: #TerniLapilliTest #test25OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:32:40'!
ERROR!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 16:32:43'!
ERROR!
!TerniLapilli methodsFor: 'asserting' stamp: 'eb 11/2/2020 16:32:50' prior: 50975398!
assertThat: aPosition isInto: aPositionCollection
		
	(aPositionCollection includes: aPosition) ifTrue: [ self error: self class sourcePositionDoesNotBelongToPlayerErrorDescription ] .! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 16:32:58'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 16:32:58'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 16:32:58'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 16:32:58'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:32:58'!
PASSED!

!testRun: #TerniLapilliTest #test06OShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:32:58'!
PASSED!

!testRun: #TerniLapilliTest #test07XShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:32:58'!
PASSED!

!testRun: #TerniLapilliTest #test08OShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:32:58'!
PASSED!

!testRun: #TerniLapilliTest #test09XCannotPutMoreThanThreeTimes stamp: 'eb 11/2/2020 16:32:58'!
PASSED!

!testRun: #TerniLapilliTest #test10XCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:32:58'!
PASSED!

!testRun: #TerniLapilliTest #test11OCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:32:58'!
PASSED!

!testRun: #TerniLapilliTest #test12XCannotMoveToOccupiedPositions stamp: 'eb 11/2/2020 16:32:58'!
PASSED!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 16:32:58'!
ERROR!

!testRun: #TerniLapilliTest #test14XCannotMoveTwice stamp: 'eb 11/2/2020 16:32:58'!
ERROR!

!testRun: #TerniLapilliTest #test15OCannotMoveTwice stamp: 'eb 11/2/2020 16:32:58'!
ERROR!

!testRun: #TerniLapilliTest #test16XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:32:58'!
PASSED!

!testRun: #TerniLapilliTest #test17OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:32:58'!
ERROR!

!testRun: #TerniLapilliTest #test18XMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:32:58'!
FAILURE!

!testRun: #TerniLapilliTest #test19OMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:32:59'!
ERROR!

!testRun: #TerniLapilliTest #test20XMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:32:59'!
FAILURE!

!testRun: #TerniLapilliTest #test21OMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:32:59'!
ERROR!

!testRun: #TerniLapilliTest #test22XWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:32:59'!
ERROR!

!testRun: #TerniLapilliTest #test23OWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:32:59'!
ERROR!

!testRun: #TerniLapilliTest #test24XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:32:59'!
ERROR!

!testRun: #TerniLapilliTest #test25OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:32:59'!
ERROR!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 16:33:01'!
ERROR!
!TerniLapilli methodsFor: 'asserting' stamp: 'eb 11/2/2020 16:33:45' prior: 50975136!
assertThatMovementCanBeDoneFrom: aSourcePosition to: aTargetPosition using: aPositionCollection

	self assertThatThereAreThreeTokensInto: aPositionCollection .
	
	self assertThatPositionIsAvailable: aTargetPosition.
		
	self assertThat: aSourcePosition isWithinOneUnitDistanceTo: aTargetPosition.
	
	self assertThat: aSourcePosition isInto: aPositionCollection .
	
	self assertThatPositionIsIntoTheBoard: aTargetPosition .! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 16:33:53'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 16:33:53'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 16:33:53'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 16:33:53'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:33:53'!
PASSED!

!testRun: #TerniLapilliTest #test06OShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:33:53'!
PASSED!

!testRun: #TerniLapilliTest #test07XShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:33:53'!
PASSED!

!testRun: #TerniLapilliTest #test08OShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:33:53'!
PASSED!

!testRun: #TerniLapilliTest #test09XCannotPutMoreThanThreeTimes stamp: 'eb 11/2/2020 16:33:53'!
PASSED!

!testRun: #TerniLapilliTest #test10XCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:33:53'!
PASSED!

!testRun: #TerniLapilliTest #test11OCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:33:53'!
PASSED!

!testRun: #TerniLapilliTest #test12XCannotMoveToOccupiedPositions stamp: 'eb 11/2/2020 16:33:53'!
PASSED!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 16:33:53'!
ERROR!

!testRun: #TerniLapilliTest #test14XCannotMoveTwice stamp: 'eb 11/2/2020 16:33:53'!
ERROR!

!testRun: #TerniLapilliTest #test15OCannotMoveTwice stamp: 'eb 11/2/2020 16:33:53'!
ERROR!

!testRun: #TerniLapilliTest #test16XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:33:53'!
PASSED!

!testRun: #TerniLapilliTest #test17OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:33:53'!
ERROR!

!testRun: #TerniLapilliTest #test18XMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:33:53'!
FAILURE!

!testRun: #TerniLapilliTest #test19OMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:33:53'!
ERROR!

!testRun: #TerniLapilliTest #test20XMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:33:53'!
FAILURE!

!testRun: #TerniLapilliTest #test21OMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:33:53'!
ERROR!

!testRun: #TerniLapilliTest #test22XWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:33:53'!
ERROR!

!testRun: #TerniLapilliTest #test23OWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:33:53'!
ERROR!

!testRun: #TerniLapilliTest #test24XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:33:53'!
ERROR!

!testRun: #TerniLapilliTest #test25OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:33:53'!
ERROR!

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 16:34:27'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 16:34:27'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 16:34:27'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 16:34:27'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:34:27'!
PASSED!

!testRun: #TerniLapilliTest #test06OShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:34:27'!
PASSED!

!testRun: #TerniLapilliTest #test07XShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:34:27'!
PASSED!

!testRun: #TerniLapilliTest #test08OShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:34:27'!
PASSED!

!testRun: #TerniLapilliTest #test09XCannotPutMoreThanThreeTimes stamp: 'eb 11/2/2020 16:34:27'!
PASSED!

!testRun: #TerniLapilliTest #test10XCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:34:27'!
PASSED!

!testRun: #TerniLapilliTest #test11OCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:34:27'!
PASSED!

!testRun: #TerniLapilliTest #test12XCannotMoveToOccupiedPositions stamp: 'eb 11/2/2020 16:34:27'!
PASSED!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 16:34:27'!
ERROR!

!testRun: #TerniLapilliTest #test14XCannotMoveTwice stamp: 'eb 11/2/2020 16:34:27'!
ERROR!

!testRun: #TerniLapilliTest #test15OCannotMoveTwice stamp: 'eb 11/2/2020 16:34:27'!
ERROR!

!testRun: #TerniLapilliTest #test16XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:34:27'!
PASSED!

!testRun: #TerniLapilliTest #test17OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:34:27'!
ERROR!

!testRun: #TerniLapilliTest #test18XMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:34:27'!
FAILURE!

!testRun: #TerniLapilliTest #test19OMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:34:27'!
ERROR!

!testRun: #TerniLapilliTest #test20XMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:34:27'!
FAILURE!

!testRun: #TerniLapilliTest #test21OMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:34:27'!
ERROR!

!testRun: #TerniLapilliTest #test22XWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:34:27'!
ERROR!

!testRun: #TerniLapilliTest #test23OWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:34:27'!
ERROR!

!testRun: #TerniLapilliTest #test24XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:34:27'!
ERROR!

!testRun: #TerniLapilliTest #test25OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:34:27'!
ERROR!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 16:34:29'!
ERROR!

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 16:35:03'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 16:35:03'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 16:35:03'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 16:35:03'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:35:03'!
PASSED!

!testRun: #TerniLapilliTest #test06OShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:35:03'!
PASSED!

!testRun: #TerniLapilliTest #test07XShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:35:03'!
PASSED!

!testRun: #TerniLapilliTest #test08OShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:35:03'!
PASSED!

!testRun: #TerniLapilliTest #test09XCannotPutMoreThanThreeTimes stamp: 'eb 11/2/2020 16:35:03'!
PASSED!

!testRun: #TerniLapilliTest #test10XCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:35:03'!
PASSED!

!testRun: #TerniLapilliTest #test11OCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:35:03'!
PASSED!

!testRun: #TerniLapilliTest #test12XCannotMoveToOccupiedPositions stamp: 'eb 11/2/2020 16:35:03'!
PASSED!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 16:35:03'!
ERROR!

!testRun: #TerniLapilliTest #test14XCannotMoveTwice stamp: 'eb 11/2/2020 16:35:03'!
ERROR!

!testRun: #TerniLapilliTest #test15OCannotMoveTwice stamp: 'eb 11/2/2020 16:35:03'!
ERROR!

!testRun: #TerniLapilliTest #test16XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:35:03'!
PASSED!

!testRun: #TerniLapilliTest #test17OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:35:03'!
ERROR!

!testRun: #TerniLapilliTest #test18XMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:35:03'!
FAILURE!

!testRun: #TerniLapilliTest #test19OMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:35:03'!
ERROR!

!testRun: #TerniLapilliTest #test20XMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:35:03'!
FAILURE!

!testRun: #TerniLapilliTest #test21OMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:35:03'!
ERROR!

!testRun: #TerniLapilliTest #test22XWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:35:03'!
ERROR!

!testRun: #TerniLapilliTest #test23OWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:35:03'!
ERROR!

!testRun: #TerniLapilliTest #test24XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:35:03'!
ERROR!

!testRun: #TerniLapilliTest #test25OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:35:03'!
ERROR!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 16:35:05'!
ERROR!
!TerniLapilli methodsFor: 'asserting' stamp: 'eb 11/2/2020 16:35:59' prior: 50975527!
assertThat: aPosition isInto: aPositionCollection
		
	(aPositionCollection includes: aPosition) ifFalse: [ self error: self class sourcePositionDoesNotBelongToPlayerErrorDescription ] .! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 16:36:03'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 16:36:03'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 16:36:03'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 16:36:03'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:36:03'!
PASSED!

!testRun: #TerniLapilliTest #test06OShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:36:03'!
PASSED!

!testRun: #TerniLapilliTest #test07XShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:36:03'!
PASSED!

!testRun: #TerniLapilliTest #test08OShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:36:03'!
PASSED!

!testRun: #TerniLapilliTest #test09XCannotPutMoreThanThreeTimes stamp: 'eb 11/2/2020 16:36:03'!
PASSED!

!testRun: #TerniLapilliTest #test10XCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:36:03'!
PASSED!

!testRun: #TerniLapilliTest #test11OCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:36:03'!
PASSED!

!testRun: #TerniLapilliTest #test12XCannotMoveToOccupiedPositions stamp: 'eb 11/2/2020 16:36:03'!
PASSED!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 16:36:03'!
PASSED!

!testRun: #TerniLapilliTest #test14XCannotMoveTwice stamp: 'eb 11/2/2020 16:36:03'!
PASSED!

!testRun: #TerniLapilliTest #test15OCannotMoveTwice stamp: 'eb 11/2/2020 16:36:03'!
PASSED!

!testRun: #TerniLapilliTest #test16XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:36:03'!
PASSED!

!testRun: #TerniLapilliTest #test17OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:36:03'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:36:03'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:36:03'!
PASSED!

!testRun: #TerniLapilliTest #test20XMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:36:03'!
PASSED!

!testRun: #TerniLapilliTest #test21OMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:36:03'!
PASSED!

!testRun: #TerniLapilliTest #test22XWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:36:03'!
PASSED!

!testRun: #TerniLapilliTest #test23OWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:36:03'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:36:03'!
PASSED!

!testRun: #TerniLapilliTest #test25OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:36:03'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 16:36:52'!
moveFrom: aSourcePosition to: aTargetPosition using: aPositionCollection
	
	aPositionCollection remove: aSourcePosition .
	
	aPositionCollection add: aTargetPosition .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:37:19' prior: 50975157!
moveOFrom: aSourcePosition to: aTargetPosition
	
	self assertThatMovementCanBeDoneFrom: aSourcePosition 
		to: aTargetPosition
		using: OTokens.
	
	isPlayingX ifTrue: [ self error: self class cannotMoveTwiceErrorDescription ].
	
	self isOver ifTrue: [ self error: self class gameIsOverErrorDescription ].
	
	self moveFrom: aSourcePosition to: aTargetPosition using: OTokens .
	
	isPlayingX _ true .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:37:29' prior: 50975978!
moveOFrom: aSourcePosition to: aTargetPosition
	
	self assertThatMovementCanBeDoneFrom: aSourcePosition to: aTargetPosition using: OTokens.
	
	isPlayingX ifTrue: [ self error: self class cannotMoveTwiceErrorDescription ].
	
	self isOver ifTrue: [ self error: self class gameIsOverErrorDescription ].
	
	self moveFrom: aSourcePosition to: aTargetPosition using: OTokens .
	
	isPlayingX _ true .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:37:57' prior: 50975200!
moveXFrom: aSourcePosition to: aTargetPosition

	self assertThatMovementCanBeDoneFrom: aSourcePosition to:  aTargetPosition using: XTokens .
	
	isPlayingX ifFalse: [ self error: self class cannotMoveTwiceErrorDescription ].
	
	self isOver ifTrue: [ self error: self class gameIsOverErrorDescription ].
		
	self moveFrom: aSourcePosition to: aTargetPosition using: OTokens .
	
	isPlayingX _ false .
	
! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:38:01' prior: 50976010!
moveXFrom: aSourcePosition to: aTargetPosition

	self assertThatMovementCanBeDoneFrom: aSourcePosition to:  aTargetPosition using: XTokens .
	
	isPlayingX ifFalse: [ self error: self class cannotMoveTwiceErrorDescription ].
	
	self isOver ifTrue: [ self error: self class gameIsOverErrorDescription ].
		
	self moveFrom: aSourcePosition to: aTargetPosition using: XTokens .
	
	isPlayingX _ false .
	
! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 16:38:03'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 16:38:03'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 16:38:03'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 16:38:03'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:38:03'!
PASSED!

!testRun: #TerniLapilliTest #test06OShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:38:03'!
PASSED!

!testRun: #TerniLapilliTest #test07XShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:38:03'!
PASSED!

!testRun: #TerniLapilliTest #test08OShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:38:03'!
PASSED!

!testRun: #TerniLapilliTest #test09XCannotPutMoreThanThreeTimes stamp: 'eb 11/2/2020 16:38:03'!
PASSED!

!testRun: #TerniLapilliTest #test10XCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:38:03'!
PASSED!

!testRun: #TerniLapilliTest #test11OCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:38:03'!
PASSED!

!testRun: #TerniLapilliTest #test12XCannotMoveToOccupiedPositions stamp: 'eb 11/2/2020 16:38:03'!
PASSED!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 16:38:03'!
PASSED!

!testRun: #TerniLapilliTest #test14XCannotMoveTwice stamp: 'eb 11/2/2020 16:38:03'!
PASSED!

!testRun: #TerniLapilliTest #test15OCannotMoveTwice stamp: 'eb 11/2/2020 16:38:03'!
PASSED!

!testRun: #TerniLapilliTest #test16XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:38:03'!
PASSED!

!testRun: #TerniLapilliTest #test17OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:38:03'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:38:04'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:38:04'!
PASSED!

!testRun: #TerniLapilliTest #test20XMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:38:04'!
PASSED!

!testRun: #TerniLapilliTest #test21OMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:38:04'!
PASSED!

!testRun: #TerniLapilliTest #test22XWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:38:04'!
PASSED!

!testRun: #TerniLapilliTest #test23OWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:38:04'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:38:04'!
PASSED!

!testRun: #TerniLapilliTest #test25OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:38:04'!
PASSED!
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:39:04' prior: 50973506!
putXAt: aPosition 
	
	self assertThatPositionIsIntoTheBoard: aPosition.
	
	(aPosition isIntegerPoint) ifFalse: [self error: self class positionIsInvalidErrorDescription ].
	
	(XTokens includes: aPosition) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
	
	(OTokens includes: aPosition) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
	
	(XTokens size = 3) ifTrue: [self error: self class cannotPutMoreThanThreeTokensErrorDescription ].
	
	XTokens add: aPosition .
	
	isPlayingX _ false .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:39:33'!
assertThatPositionIsInteger: aPosition

	^ (aPosition isIntegerPoint) ifFalse: [self error: self class positionIsInvalidErrorDescription ]! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:39:33' prior: 50973486!
putOAt: aPosition 

	self assertThatPositionIsIntoTheBoard: aPosition.
	
	self assertThatPositionIsInteger: aPosition.
	
	(XTokens includes: aPosition) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
	
	(OTokens includes: aPosition) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	isPlayingX ifTrue: [ self error: self class playerXShouldPlayErrorDescription ].
	
	OTokens add: aPosition .
		
	isPlayingX _ true .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:39:41' prior: 50976122!
putXAt: aPosition 
	
	self assertThatPositionIsIntoTheBoard: aPosition.
	
	self assertThatPositionIsInteger: aPosition.
	
	(XTokens includes: aPosition) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
	
	(OTokens includes: aPosition) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
	
	(XTokens size = 3) ifTrue: [self error: self class cannotPutMoreThanThreeTokensErrorDescription ].
	
	XTokens add: aPosition .
	
	isPlayingX _ false .! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 16:41:00'!
allTokens
	
	^ XTokens union: OTokens .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:41:26' prior: 50976150!
putOAt: aPosition 

	self assertThatPositionIsIntoTheBoard: aPosition.
	
	self assertThatPositionIsInteger: aPosition.
	
	(self allTokens includes: aPosition) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
			
	isPlayingX ifTrue: [ self error: self class playerXShouldPlayErrorDescription ].
	
	OTokens add: aPosition .
		
	isPlayingX _ true .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:41:36' prior: 50976168!
putXAt: aPosition 
	
	self assertThatPositionIsIntoTheBoard: aPosition.
	
	self assertThatPositionIsInteger: aPosition.
	
	(self allTokens includes: aPosition) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].
		
	(XTokens size = 3) ifTrue: [self error: self class cannotPutMoreThanThreeTokensErrorDescription ].
	
	XTokens add: aPosition .
	
	isPlayingX _ false .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:42:23'!
assertThatPlayerCanPutTokenInto: aPosition

	self assertThatPositionIsIntoTheBoard: aPosition.
	
	self assertThatPositionIsInteger: aPosition.
	
	(self allTokens includes: aPosition) ifTrue: [self error: self class positionIsNotAvailableErrorDescription ]! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:42:23' prior: 50976205!
putXAt: aPosition 
	
	self assertThatPlayerCanPutTokenInto: aPosition.
		
	(XTokens size = 3) ifTrue: [self error: self class cannotPutMoreThanThreeTokensErrorDescription ].
	
	XTokens add: aPosition .
	
	isPlayingX _ false .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:42:38' prior: 50976190!
putOAt: aPosition 

	self assertThatPlayerCanPutTokenInto: aPosition.
			
	isPlayingX ifTrue: [ self error: self class playerXShouldPlayErrorDescription ].
	
	OTokens add: aPosition .
		
	isPlayingX _ true .! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 16:42:40'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 16:42:40'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 16:42:40'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 16:42:40'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:42:40'!
PASSED!

!testRun: #TerniLapilliTest #test06OShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:42:40'!
PASSED!

!testRun: #TerniLapilliTest #test07XShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:42:40'!
PASSED!

!testRun: #TerniLapilliTest #test08OShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:42:40'!
PASSED!

!testRun: #TerniLapilliTest #test09XCannotPutMoreThanThreeTimes stamp: 'eb 11/2/2020 16:42:40'!
PASSED!

!testRun: #TerniLapilliTest #test10XCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:42:40'!
PASSED!

!testRun: #TerniLapilliTest #test11OCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:42:40'!
PASSED!

!testRun: #TerniLapilliTest #test12XCannotMoveToOccupiedPositions stamp: 'eb 11/2/2020 16:42:40'!
PASSED!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 16:42:40'!
PASSED!

!testRun: #TerniLapilliTest #test14XCannotMoveTwice stamp: 'eb 11/2/2020 16:42:40'!
PASSED!

!testRun: #TerniLapilliTest #test15OCannotMoveTwice stamp: 'eb 11/2/2020 16:42:40'!
PASSED!

!testRun: #TerniLapilliTest #test16XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:42:40'!
PASSED!

!testRun: #TerniLapilliTest #test17OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:42:40'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:42:40'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:42:40'!
PASSED!

!testRun: #TerniLapilliTest #test20XMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:42:40'!
PASSED!

!testRun: #TerniLapilliTest #test21OMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:42:40'!
PASSED!

!testRun: #TerniLapilliTest #test22XWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:42:40'!
PASSED!

!testRun: #TerniLapilliTest #test23OWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:42:40'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:42:40'!
PASSED!

!testRun: #TerniLapilliTest #test25OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:42:40'!
PASSED!
!TerniLapilli methodsFor: 'asserting' stamp: 'eb 11/2/2020 16:44:43' prior: 50974920!
assertThatPositionIsAvailable: aPosition

	((XTokens includes: aPosition ) or: [ OTokens includes: aPosition ]) 
		ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].! !
!TerniLapilli methodsFor: 'asserting' stamp: 'eb 11/2/2020 16:45:03' prior: 50970751!
assertThatPositionIsIntoTheBoard: aPosition

	(self board containsPoint: aPosition) ifFalse: [ self error: self class positionIsOutsideBoardErrorDescription ]! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:48:05' prior: 50976231!
putXAt: aPosition 
	
	self assertThatPlayerCanPutTokenInto: aPosition.
	
	isPlayingX ifFalse: [ self error: self class playerXShouldPlayErrorDescription ].
		
	(XTokens size = 3) ifTrue: [self error: self class cannotPutMoreThanThreeTokensErrorDescription ].
	
	XTokens add: aPosition .
	
	isPlayingX _ false .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:48:39' prior: 50976348!
putXAt: aPosition 
	
	self assertThatPlayerCanPutTokenInto: aPosition.
	
	isPlayingX ifFalse: [ self error: self class playerOShouldPlayErrorDescription ].
		
	(XTokens size = 3) ifTrue: [self error: self class cannotPutMoreThanThreeTokensErrorDescription ].
	
	XTokens add: aPosition .
	
	isPlayingX _ false .! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 16:48:44'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 16:48:44'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 16:48:44'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 16:48:44'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:48:44'!
PASSED!

!testRun: #TerniLapilliTest #test06OShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:48:44'!
PASSED!

!testRun: #TerniLapilliTest #test07XShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:48:44'!
PASSED!

!testRun: #TerniLapilliTest #test08OShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:48:44'!
PASSED!

!testRun: #TerniLapilliTest #test09XCannotPutMoreThanThreeTimes stamp: 'eb 11/2/2020 16:48:44'!
PASSED!

!testRun: #TerniLapilliTest #test10XCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:48:44'!
PASSED!

!testRun: #TerniLapilliTest #test11OCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:48:44'!
PASSED!

!testRun: #TerniLapilliTest #test12XCannotMoveToOccupiedPositions stamp: 'eb 11/2/2020 16:48:44'!
PASSED!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 16:48:44'!
PASSED!

!testRun: #TerniLapilliTest #test14XCannotMoveTwice stamp: 'eb 11/2/2020 16:48:44'!
PASSED!

!testRun: #TerniLapilliTest #test15OCannotMoveTwice stamp: 'eb 11/2/2020 16:48:44'!
PASSED!

!testRun: #TerniLapilliTest #test16XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:48:44'!
PASSED!

!testRun: #TerniLapilliTest #test17OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:48:44'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:48:44'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:48:44'!
PASSED!

!testRun: #TerniLapilliTest #test20XMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:48:44'!
PASSED!

!testRun: #TerniLapilliTest #test21OMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:48:44'!
PASSED!

!testRun: #TerniLapilliTest #test22XWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:48:44'!
PASSED!

!testRun: #TerniLapilliTest #test23OWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:48:44'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:48:45'!
PASSED!

!testRun: #TerniLapilliTest #test25OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:48:45'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:50:57'!
test26XCannotPutTwice

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	self should: [ terniLapilli moveXFrom: 2@0 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class cannotMoveTwiceErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:51:23' prior: 50976453!
test26XCannotPutTwice

	terniLapilli putXAt: 0@0.
	
	terniLapilli putXAt: 1@1.! !

!testRun: #TerniLapilliTest #test26XCannotPutTwice stamp: 'eb 11/2/2020 16:51:24'!
ERROR!

!testRun: #TerniLapilliTest #test26XCannotPutTwice stamp: 'eb 11/2/2020 16:51:24'!
ERROR!

!testRun: #TerniLapilliTest #test26XCannotPutTwice stamp: 'eb 11/2/2020 16:51:43'!
ERROR!

!testRun: #TerniLapilliTest #test26XCannotPutTwice stamp: 'eb 11/2/2020 16:51:43'!
ERROR!
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 11/2/2020 16:51:51'!
playerOShouldPlayErrorDescription
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'error descriptions' stamp: 'eb 11/2/2020 16:52:05' prior: 50976481!
playerOShouldPlayErrorDescription
	
	^ 'Player O should play'.! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:52:50' prior: 50976464!
test26XCannotPutTwice

	terniLapilli putXAt: 0@0.
	
	self should: [ terniLapilli putXAt: 1@1. self fail ]
		raise: Error
		withMessageText: terniLapilli class playerOShouldPlayErrorDescription .! !

!testRun: #TerniLapilliTest #test26XCannotPutTwice stamp: 'eb 11/2/2020 16:52:51'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:53:31'!
test27OCannotPutTwice

	terniLapilli putXAt: 0@0.
	
	terniLapilli putOAt: 1@0.
	
	self should: [ terniLapilli putOAt: 1@1. self fail ]
		raise: Error
		withMessageText: terniLapilli class playerOShouldPlayErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:53:33' prior: 50976504!
test27OCannotPutTwice

	terniLapilli putXAt: 0@0.
	
	terniLapilli putOAt: 1@0.
	
	self should: [ terniLapilli putOAt: 1@1. self fail ]
		raise: Error
		withMessageText: terniLapilli class playerXShouldPlayErrorDescription .! !

!testRun: #TerniLapilliTest #test27OCannotPutTwice stamp: 'eb 11/2/2020 16:53:34'!
PASSED!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:53:50' prior: 50973813!
test14XCannotMoveTwice

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	self should: [ terniLapilli moveXFrom: 2@0 to: 2@1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class playerOShouldPlayErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 16:53:55' prior: 50973834!
test15OCannotMoveTwice

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	terniLapilli moveOFrom: 1@1 to: 2@1.
	
	self should: [ terniLapilli moveOFrom: 2@1 to: 2@2. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class playerXShouldPlayErrorDescription .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:54:16' prior: 50976026!
moveXFrom: aSourcePosition to: aTargetPosition

	self assertThatMovementCanBeDoneFrom: aSourcePosition to:  aTargetPosition using: XTokens .
	
	self isPlayingO ifTrue: [ self error: self class playerOShouldPlayErrorDescription ].
	
	self isOver ifTrue: [ self error: self class gameIsOverErrorDescription ].
		
	self moveFrom: aSourcePosition to: aTargetPosition using: XTokens .
	
	isPlayingX _ false .
	
! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 16:54:31' prior: 50975994!
moveOFrom: aSourcePosition to: aTargetPosition
	
	self assertThatMovementCanBeDoneFrom: aSourcePosition to: aTargetPosition using: OTokens.
	
	self isPlayingX ifTrue: [ self error: self class playerXShouldPlayErrorDescription ].
	
	self isOver ifTrue: [ self error: self class gameIsOverErrorDescription ].
	
	self moveFrom: aSourcePosition to: aTargetPosition using: OTokens .
	
	isPlayingX _ true .! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 16:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 16:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 16:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 16:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test06OShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test07XShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test08OShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test09XCannotPutMoreThanThreeTimes stamp: 'eb 11/2/2020 16:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test10XCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test11OCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test12XCannotMoveToOccupiedPositions stamp: 'eb 11/2/2020 16:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 16:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test14XCannotMoveTwice stamp: 'eb 11/2/2020 16:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test15OCannotMoveTwice stamp: 'eb 11/2/2020 16:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test16XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test17OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test20XMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test21OMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test22XWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test23OWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test25OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test26XCannotPutTwice stamp: 'eb 11/2/2020 16:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test27OCannotPutTwice stamp: 'eb 11/2/2020 16:54:33'!
PASSED!

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 16:56:53'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 16:56:53'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 16:56:53'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 16:56:53'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:56:53'!
PASSED!

!testRun: #TerniLapilliTest #test06OShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:56:53'!
PASSED!

!testRun: #TerniLapilliTest #test07XShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:56:53'!
PASSED!

!testRun: #TerniLapilliTest #test08OShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:56:53'!
PASSED!

!testRun: #TerniLapilliTest #test09XCannotPutMoreThanThreeTimes stamp: 'eb 11/2/2020 16:56:54'!
PASSED!

!testRun: #TerniLapilliTest #test10XCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:56:54'!
PASSED!

!testRun: #TerniLapilliTest #test11OCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:56:54'!
PASSED!

!testRun: #TerniLapilliTest #test12XCannotMoveToOccupiedPositions stamp: 'eb 11/2/2020 16:56:54'!
PASSED!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 16:56:54'!
PASSED!

!testRun: #TerniLapilliTest #test14XCannotMoveTwice stamp: 'eb 11/2/2020 16:56:54'!
PASSED!

!testRun: #TerniLapilliTest #test15OCannotMoveTwice stamp: 'eb 11/2/2020 16:56:54'!
PASSED!

!testRun: #TerniLapilliTest #test16XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:56:54'!
PASSED!

!testRun: #TerniLapilliTest #test17OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:56:54'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:56:54'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:56:54'!
PASSED!

!testRun: #TerniLapilliTest #test20XMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:56:54'!
PASSED!

!testRun: #TerniLapilliTest #test21OMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:56:54'!
PASSED!

!testRun: #TerniLapilliTest #test22XWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:56:54'!
PASSED!

!testRun: #TerniLapilliTest #test23OWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:56:54'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:56:54'!
PASSED!

!testRun: #TerniLapilliTest #test25OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:56:54'!
PASSED!

!testRun: #TerniLapilliTest #test26XCannotPutTwice stamp: 'eb 11/2/2020 16:56:54'!
PASSED!

!testRun: #TerniLapilliTest #test27OCannotPutTwice stamp: 'eb 11/2/2020 16:56:54'!
PASSED!

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 16:57:07'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 16:57:07'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 16:57:07'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 16:57:07'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:57:07'!
PASSED!

!testRun: #TerniLapilliTest #test06OShouldPutInAValidPosition stamp: 'eb 11/2/2020 16:57:07'!
PASSED!

!testRun: #TerniLapilliTest #test07XShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:57:07'!
PASSED!

!testRun: #TerniLapilliTest #test08OShouldPutInAvailablePosition stamp: 'eb 11/2/2020 16:57:07'!
PASSED!

!testRun: #TerniLapilliTest #test09XCannotPutMoreThanThreeTimes stamp: 'eb 11/2/2020 16:57:07'!
PASSED!

!testRun: #TerniLapilliTest #test10XCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:57:07'!
PASSED!

!testRun: #TerniLapilliTest #test11OCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 16:57:07'!
PASSED!

!testRun: #TerniLapilliTest #test12XCannotMoveToOccupiedPositions stamp: 'eb 11/2/2020 16:57:07'!
PASSED!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 16:57:07'!
PASSED!

!testRun: #TerniLapilliTest #test14XCannotMoveTwice stamp: 'eb 11/2/2020 16:57:07'!
PASSED!

!testRun: #TerniLapilliTest #test15OCannotMoveTwice stamp: 'eb 11/2/2020 16:57:07'!
PASSED!

!testRun: #TerniLapilliTest #test16XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:57:07'!
PASSED!

!testRun: #TerniLapilliTest #test17OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 16:57:07'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:57:07'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 16:57:07'!
PASSED!

!testRun: #TerniLapilliTest #test20XMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:57:07'!
PASSED!

!testRun: #TerniLapilliTest #test21OMovesFromSomeOwnToken stamp: 'eb 11/2/2020 16:57:07'!
PASSED!

!testRun: #TerniLapilliTest #test22XWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:57:07'!
PASSED!

!testRun: #TerniLapilliTest #test23OWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 16:57:07'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:57:07'!
PASSED!

!testRun: #TerniLapilliTest #test25OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 16:57:07'!
PASSED!

!testRun: #TerniLapilliTest #test26XCannotPutTwice stamp: 'eb 11/2/2020 16:57:07'!
PASSED!

!testRun: #TerniLapilliTest #test27OCannotPutTwice stamp: 'eb 11/2/2020 16:57:07'!
PASSED!
!TerniLapilli methodsFor: 'asserting' stamp: 'eb 11/2/2020 17:01:42' prior: 50976331!
assertThatPositionIsAvailable: aPosition

	(self allTokens includes: aPosition)  ifTrue: [self error: self class positionIsNotAvailableErrorDescription ].! !
!TerniLapilli methodsFor: 'asserting' stamp: 'eb 11/2/2020 17:01:53' prior: 50976220!
assertThatPlayerCanPutTokenInto: aPosition

	self assertThatPositionIsIntoTheBoard: aPosition.
	
	self assertThatPositionIsInteger: aPosition.
	
	self assertThatPositionIsAvailable: aPosition .! !
!TerniLapilli methodsFor: 'asserting' stamp: 'eb 11/2/2020 17:02:24' prior: 50976142!
assertThatPositionIsInteger: aPosition

	(aPosition isIntegerPoint) ifFalse: [self error: self class positionIsInvalidErrorDescription ]! !
!TerniLapilli methodsFor: 'asserting' stamp: 'eb 11/2/2020 17:02:34' prior: 50974950!
assertThatThereAreThreeTokensInto: aPositionCollection

	(aPositionCollection size < 3) ifTrue: [ self error: self class movementsCanOnlyBeDoneWithThreeTokens. ]! !
!TerniLapilli methodsFor: 'accessing' stamp: 'eb 11/2/2020 17:02:58' prior: 50974606!
notPrincipalDiagonal
	
	^ #(0@2. 1@1. 2@0.).! !
!TerniLapilli methodsFor: 'testing' stamp: 'eb 11/2/2020 17:03:13' prior: 50968597!
boardIsEmpty
	
	^ self allTokens isEmpty .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 17:04:16' prior: 50976550!
moveXFrom: aSourcePosition to: aTargetPosition

	self assertThatMovementCanBeDoneFrom: aSourcePosition to:  aTargetPosition using: XTokens .
	
	self isPlayingO ifTrue: [ self error: self class playerOShouldPlayErrorDescription ].
		
	self moveFrom: aSourcePosition to: aTargetPosition using: XTokens .
	
	isPlayingX _ false .
	
! !
!TerniLapilli methodsFor: 'asserting' stamp: 'eb 11/2/2020 17:04:25' prior: 50975619!
assertThatMovementCanBeDoneFrom: aSourcePosition to: aTargetPosition using: aPositionCollection

	self assertThatThereAreThreeTokensInto: aPositionCollection .
	
	self assertThatPositionIsAvailable: aTargetPosition.
		
	self assertThat: aSourcePosition isWithinOneUnitDistanceTo: aTargetPosition.
	
	self assertThat: aSourcePosition isInto: aPositionCollection .
	
	self assertThatPositionIsIntoTheBoard: aTargetPosition .
	
	self isOver ifTrue: [ self error: self class gameIsOverErrorDescription ].! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 17:04:37' prior: 50976566!
moveOFrom: aSourcePosition to: aTargetPosition
	
	self assertThatMovementCanBeDoneFrom: aSourcePosition to: aTargetPosition using: OTokens.
	
	self isPlayingX ifTrue: [ self error: self class playerXShouldPlayErrorDescription ].
	
	
	self moveFrom: aSourcePosition to: aTargetPosition using: OTokens .
	
	isPlayingX _ true .! !
!TerniLapilli methodsFor: 'playing' stamp: 'eb 11/2/2020 17:04:38' prior: 50976915!
moveOFrom: aSourcePosition to: aTargetPosition
	
	self assertThatMovementCanBeDoneFrom: aSourcePosition to: aTargetPosition using: OTokens.
	
	self isPlayingX ifTrue: [ self error: self class playerXShouldPlayErrorDescription ].
	
	self moveFrom: aSourcePosition to: aTargetPosition using: OTokens .
	
	isPlayingX _ true .! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 17:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 17:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 17:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 17:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 17:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test06OShouldPutInAValidPosition stamp: 'eb 11/2/2020 17:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test07XShouldPutInAvailablePosition stamp: 'eb 11/2/2020 17:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test08OShouldPutInAvailablePosition stamp: 'eb 11/2/2020 17:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test09XCannotPutMoreThanThreeTimes stamp: 'eb 11/2/2020 17:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test10XCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 17:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test11OCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 17:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test12XCannotMoveToOccupiedPositions stamp: 'eb 11/2/2020 17:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 17:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test14XCannotMoveTwice stamp: 'eb 11/2/2020 17:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test15OCannotMoveTwice stamp: 'eb 11/2/2020 17:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test16XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 17:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test17OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 17:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 17:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 17:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test20XMovesFromSomeOwnToken stamp: 'eb 11/2/2020 17:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test21OMovesFromSomeOwnToken stamp: 'eb 11/2/2020 17:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test22XWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 17:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test23OWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 17:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 17:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test25OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 17:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test26XCannotPutTwice stamp: 'eb 11/2/2020 17:04:42'!
PASSED!

!testRun: #TerniLapilliTest #test27OCannotPutTwice stamp: 'eb 11/2/2020 17:04:42'!
PASSED!
!TerniLapilli methodsFor: 'asserting' stamp: 'eb 11/2/2020 17:10:28' prior: 50976856!
assertThatPositionIsInteger: aPosition

	aPosition isIntegerPoint ifFalse: [self error: self class positionIsInvalidErrorDescription ]! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 17:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 17:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 17:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 17:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 17:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test06OShouldPutInAValidPosition stamp: 'eb 11/2/2020 17:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test07XShouldPutInAvailablePosition stamp: 'eb 11/2/2020 17:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test08OShouldPutInAvailablePosition stamp: 'eb 11/2/2020 17:11:25'!
PASSED!

!testRun: #TerniLapilliTest #test09XCannotPutMoreThanThreeTimes stamp: 'eb 11/2/2020 17:11:26'!
PASSED!

!testRun: #TerniLapilliTest #test10XCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 17:11:26'!
PASSED!

!testRun: #TerniLapilliTest #test11OCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 17:11:26'!
PASSED!

!testRun: #TerniLapilliTest #test12XCannotMoveToOccupiedPositions stamp: 'eb 11/2/2020 17:11:26'!
PASSED!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 17:11:26'!
PASSED!

!testRun: #TerniLapilliTest #test14XCannotMoveTwice stamp: 'eb 11/2/2020 17:11:26'!
PASSED!

!testRun: #TerniLapilliTest #test15OCannotMoveTwice stamp: 'eb 11/2/2020 17:11:26'!
PASSED!

!testRun: #TerniLapilliTest #test16XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 17:11:26'!
PASSED!

!testRun: #TerniLapilliTest #test17OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 17:11:26'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 17:11:26'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 17:11:26'!
PASSED!

!testRun: #TerniLapilliTest #test20XMovesFromSomeOwnToken stamp: 'eb 11/2/2020 17:11:26'!
PASSED!

!testRun: #TerniLapilliTest #test21OMovesFromSomeOwnToken stamp: 'eb 11/2/2020 17:11:26'!
PASSED!

!testRun: #TerniLapilliTest #test22XWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 17:11:26'!
PASSED!

!testRun: #TerniLapilliTest #test23OWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 17:11:26'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 17:11:26'!
PASSED!

!testRun: #TerniLapilliTest #test25OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 17:11:26'!
PASSED!

!testRun: #TerniLapilliTest #test26XCannotPutTwice stamp: 'eb 11/2/2020 17:11:26'!
PASSED!

!testRun: #TerniLapilliTest #test27OCannotPutTwice stamp: 'eb 11/2/2020 17:11:26'!
PASSED!
!TerniLapilliTest methodsFor: 'nil' stamp: 'eb 11/2/2020 17:31:25'!
xxx: aPositionOutsideBoard
	
	self should: [ terniLapilli putOAt: aPositionOutsideBoard. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:32:12'!
raiseErrorWhenTryingToPutTokenInPositionOutsideBoard: aPositionOutsideBoard
	
	self should: [ terniLapilli putOAt: aPositionOutsideBoard. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.! !

!methodRemoval: TerniLapilliTest #xxx: stamp: 'eb 11/2/2020 17:32:14'!
xxx: aPositionOutsideBoard
	
	self should: [ terniLapilli putOAt: aPositionOutsideBoard. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:32:31'!
assertRaisingErrorWhenTryingToPutTokenInPositionOutsideBoard: aPositionOutsideBoard
	
	self should: [ terniLapilli putOAt: aPositionOutsideBoard. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.! !

!methodRemoval: TerniLapilliTest #raiseErrorWhenTryingToPutTokenInPositionOutsideBoard: stamp: 'eb 11/2/2020 17:32:34'!
raiseErrorWhenTryingToPutTokenInPositionOutsideBoard: aPositionOutsideBoard
	
	self should: [ terniLapilli putOAt: aPositionOutsideBoard. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.!
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 17:34:54' prior: 50971441!
assertThatOPositionsAreInsideBoard
	
	self assertRaisingErrorWhenTryingToPutTokenInPositionOutsideBoard: -1@0.

	self assertRaisingErrorWhenTryingToPutTokenInPositionOutsideBoard: 0@-1.
	
	self assertRaisingErrorWhenTryingToPutTokenInPositionOutsideBoard: 3@0.
		
	self assertRaisingErrorWhenTryingToPutTokenInPositionOutsideBoard: 0@3.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:38:31'!
assertRaisingErrorWhenTryingToPutTokenInNotIntegerPosition: aNotIntegerPosition
	
	self should: [ terniLapilli putOAt: aNotIntegerPosition. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:39:18' prior: 50977148!
assertRaisingErrorWhenTryingToPutTokenInPositionOutsideBoard: aPositionOutsideBoard
	
	self should: [ terniLapilli putOAt: aPositionOutsideBoard. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 17:39:56' prior: 50971479!
assertThatOPositionsAreInteger

	self assertRaisingErrorWhenTryingToPutTokenInNotIntegerPosition: 0.5@1.
	
	self assertRaisingErrorWhenTryingToPutTokenInNotIntegerPosition: 1@0.5.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:40:22'!
assertRaisingErrorWhenTryingToPutOTokenInNotIntegerPosition: aNotIntegerPosition
	
	self should: [ terniLapilli putOAt: aNotIntegerPosition. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.! !

!methodRemoval: TerniLapilliTest #assertRaisingErrorWhenTryingToPutTokenInNotIntegerPosition: stamp: 'eb 11/2/2020 17:40:34'!
assertRaisingErrorWhenTryingToPutTokenInNotIntegerPosition: aNotIntegerPosition
	
	self should: [ terniLapilli putOAt: aNotIntegerPosition. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:40:40'!
assertRaisingErrorWhenTryingToPutOTokenInPositionOutsideBoard: aPositionOutsideBoard
	
	self should: [ terniLapilli putOAt: aPositionOutsideBoard. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription.! !

!methodRemoval: TerniLapilliTest #assertRaisingErrorWhenTryingToPutTokenInPositionOutsideBoard: stamp: 'eb 11/2/2020 17:40:45'!
assertRaisingErrorWhenTryingToPutTokenInPositionOutsideBoard: aPositionOutsideBoard
	
	self should: [ terniLapilli putOAt: aPositionOutsideBoard. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:40:54'!
assertRaisingErrorWhenTryingToPutXTokenInNotIntegerPosition: aNotIntegerPosition
	
	self should: [ terniLapilli putXAt: aNotIntegerPosition. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:41:11'!
assertRaisingErrorWhenTryingToPutXTokenInPositionOutsideBoard: aPositionOutsideBoard
	
	self should: [ terniLapilli putXAt: aPositionOutsideBoard. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 17:41:43' prior: 50977171!
assertThatOPositionsAreInsideBoard
	
	self assertRaisingErrorWhenTryingToPutOTokenInPositionOutsideBoard: -1@0.

	self assertRaisingErrorWhenTryingToPutOTokenInPositionOutsideBoard: 0@-1.
	
	self assertRaisingErrorWhenTryingToPutOTokenInPositionOutsideBoard: 3@0.
		
	self assertRaisingErrorWhenTryingToPutOTokenInPositionOutsideBoard: 0@3.! !
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 17:41:50' prior: 50977207!
assertThatOPositionsAreInteger

	self assertRaisingErrorWhenTryingToPutOTokenInNotIntegerPosition: 0.5@1.
	
	self assertRaisingErrorWhenTryingToPutOTokenInNotIntegerPosition: 1@0.5.! !
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 17:42:21' prior: 50971320!
assertThatXPositionsAreInsideBoard

	self assertRaisingErrorWhenTryingToPutXTokenInPositionOutsideBoard: -1@0.

	self assertRaisingErrorWhenTryingToPutXTokenInPositionOutsideBoard: 0@-1.
	
	self assertRaisingErrorWhenTryingToPutXTokenInPositionOutsideBoard: 3@0.
		
	self assertRaisingErrorWhenTryingToPutXTokenInPositionOutsideBoard: 0@3.! !
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 17:42:48' prior: 50971374!
assertThatXPositionsAreInteger

	self assertRaisingErrorWhenTryingToPutXTokenInNotIntegerPosition: 0.5@1.
	
	self assertRaisingErrorWhenTryingToPutXTokenInNotIntegerPosition: 1@0.5.
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:44:57'!
denyOPlayOutsideBoardInPosition: aPositionOutsideBoard
	
	self should: [ terniLapilli putOAt: aPositionOutsideBoard. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:44:57' prior: 50977284!
assertThatOPositionsAreInsideBoard
	
	self denyOPlayOutsideBoardInPosition: -1@0.

	self denyOPlayOutsideBoardInPosition: 0@-1.
	
	self denyOPlayOutsideBoardInPosition: 3@0.
		
	self denyOPlayOutsideBoardInPosition: 0@3.! !

!methodRemoval: TerniLapilliTest #assertRaisingErrorWhenTryingToPutOTokenInPositionOutsideBoard: stamp: 'eb 11/2/2020 17:44:58'!
assertRaisingErrorWhenTryingToPutOTokenInPositionOutsideBoard: aPositionOutsideBoard
	
	self should: [ terniLapilli putOAt: aPositionOutsideBoard. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription.!
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 17:45:20'!
denyOPlayOutsideBoard
	
	self denyOPlayOutsideBoardInPosition: -1@0.

	self denyOPlayOutsideBoardInPosition: 0@-1.
	
	self denyOPlayOutsideBoardInPosition: 3@0.
		
	self denyOPlayOutsideBoardInPosition: 0@3.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:45:20' prior: 50973543!
test06OShouldPutInAValidPosition
	
	self denyOPlayOutsideBoard.
		
	self assertThatOPositionsAreInteger.! !

!methodRemoval: TerniLapilliTest #assertThatOPositionsAreInsideBoard stamp: 'eb 11/2/2020 17:45:20'!
assertThatOPositionsAreInsideBoard
	
	self denyOPlayOutsideBoardInPosition: -1@0.

	self denyOPlayOutsideBoardInPosition: 0@-1.
	
	self denyOPlayOutsideBoardInPosition: 3@0.
		
	self denyOPlayOutsideBoardInPosition: 0@3.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:45:49'!
denyOPlayOnNotIntegerPosition: aNotIntegerPosition
	
	self should: [ terniLapilli putOAt: aNotIntegerPosition. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:45:49' prior: 50977298!
assertThatOPositionsAreInteger

	self denyOPlayOnNotIntegerPosition: 0.5@1.
	
	self denyOPlayOnNotIntegerPosition: 1@0.5.! !

!methodRemoval: TerniLapilliTest #assertRaisingErrorWhenTryingToPutOTokenInNotIntegerPosition: stamp: 'eb 11/2/2020 17:45:49'!
assertRaisingErrorWhenTryingToPutOTokenInNotIntegerPosition: aNotIntegerPosition
	
	self should: [ terniLapilli putOAt: aNotIntegerPosition. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.!
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 17:46:18'!
denyOPlayOnNotIntegerPositions

	self denyOPlayOnNotIntegerPosition: 0.5@1.
	
	self denyOPlayOnNotIntegerPosition: 1@0.5.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:46:19' prior: 50977372!
test06OShouldPutInAValidPosition
	
	self denyOPlayOutsideBoard.
		
	self denyOPlayOnNotIntegerPositions.! !

!methodRemoval: TerniLapilliTest #assertThatOPositionsAreInteger stamp: 'eb 11/2/2020 17:46:19'!
assertThatOPositionsAreInteger

	self denyOPlayOnNotIntegerPosition: 0.5@1.
	
	self denyOPlayOnNotIntegerPosition: 1@0.5.!
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 17:46:42'!
denyOPlayOnNotIntegerPosition

	self denyOPlayOnNotIntegerPosition: 0.5@1.
	
	self denyOPlayOnNotIntegerPosition: 1@0.5.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:46:42' prior: 50977426!
test06OShouldPutInAValidPosition
	
	self denyOPlayOutsideBoard.
		
	self denyOPlayOnNotIntegerPosition.! !

!methodRemoval: TerniLapilliTest #denyOPlayOnNotIntegerPositions stamp: 'eb 11/2/2020 17:46:42'!
denyOPlayOnNotIntegerPositions

	self denyOPlayOnNotIntegerPosition: 0.5@1.
	
	self denyOPlayOnNotIntegerPosition: 1@0.5.!
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 17:47:13'!
denyXPlayOutsideBoard

	self assertRaisingErrorWhenTryingToPutXTokenInPositionOutsideBoard: -1@0.

	self assertRaisingErrorWhenTryingToPutXTokenInPositionOutsideBoard: 0@-1.
	
	self assertRaisingErrorWhenTryingToPutXTokenInPositionOutsideBoard: 3@0.
		
	self assertRaisingErrorWhenTryingToPutXTokenInPositionOutsideBoard: 0@3.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:47:13' prior: 50973528!
test05XShouldPutInAValidPosition
	
	self denyXPlayOutsideBoard.
		
	self assertThatXPositionsAreInteger.! !

!methodRemoval: TerniLapilliTest #assertThatXPositionsAreInsideBoard stamp: 'eb 11/2/2020 17:47:13'!
assertThatXPositionsAreInsideBoard

	self assertRaisingErrorWhenTryingToPutXTokenInPositionOutsideBoard: -1@0.

	self assertRaisingErrorWhenTryingToPutXTokenInPositionOutsideBoard: 0@-1.
	
	self assertRaisingErrorWhenTryingToPutXTokenInPositionOutsideBoard: 3@0.
		
	self assertRaisingErrorWhenTryingToPutXTokenInPositionOutsideBoard: 0@3.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:47:34'!
denyXPutOutsideBoardInPosition: aPositionOutsideBoard
	
	self should: [ terniLapilli putXAt: aPositionOutsideBoard. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:47:34' prior: 50977459!
denyXPlayOutsideBoard

	self denyXPutOutsideBoardInPosition: -1@0.

	self denyXPutOutsideBoardInPosition: 0@-1.
	
	self denyXPutOutsideBoardInPosition: 3@0.
		
	self denyXPutOutsideBoardInPosition: 0@3.! !

!methodRemoval: TerniLapilliTest #assertRaisingErrorWhenTryingToPutXTokenInPositionOutsideBoard: stamp: 'eb 11/2/2020 17:47:34'!
assertRaisingErrorWhenTryingToPutXTokenInPositionOutsideBoard: aPositionOutsideBoard
	
	self should: [ terniLapilli putXAt: aPositionOutsideBoard. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription.!
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 17:47:44' prior: 50977503!
denyXPlayOutsideBoard

	self denyXPutOutsideBoardInPosition: -1@0.

	self denyXPutOutsideBoardInPosition: 0@-1.
	
	self denyXPutOutsideBoardInPosition: 3@0.
		
	self denyXPutOutsideBoardInPosition: 0@3.! !
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 17:47:52'!
denyXPutOutsideBoard

	self denyXPutOutsideBoardInPosition: -1@0.

	self denyXPutOutsideBoardInPosition: 0@-1.
	
	self denyXPutOutsideBoardInPosition: 3@0.
		
	self denyXPutOutsideBoardInPosition: 0@3.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:47:52' prior: 50977473!
test05XShouldPutInAValidPosition
	
	self denyXPutOutsideBoard.
		
	self assertThatXPositionsAreInteger.! !

!methodRemoval: TerniLapilliTest #denyXPlayOutsideBoard stamp: 'eb 11/2/2020 17:47:52'!
denyXPlayOutsideBoard

	self denyXPutOutsideBoardInPosition: -1@0.

	self denyXPutOutsideBoardInPosition: 0@-1.
	
	self denyXPutOutsideBoardInPosition: 3@0.
		
	self denyXPutOutsideBoardInPosition: 0@3.!
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 17:48:14'!
denyXPutOnNotIntegerPosition

	self assertRaisingErrorWhenTryingToPutXTokenInNotIntegerPosition: 0.5@1.
	
	self assertRaisingErrorWhenTryingToPutXTokenInNotIntegerPosition: 1@0.5.
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:48:14' prior: 50977544!
test05XShouldPutInAValidPosition
	
	self denyXPutOutsideBoard.
		
	self denyXPutOnNotIntegerPosition.! !

!methodRemoval: TerniLapilliTest #assertThatXPositionsAreInteger stamp: 'eb 11/2/2020 17:48:14'!
assertThatXPositionsAreInteger

	self assertRaisingErrorWhenTryingToPutXTokenInNotIntegerPosition: 0.5@1.
	
	self assertRaisingErrorWhenTryingToPutXTokenInNotIntegerPosition: 1@0.5.
!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:48:41'!
denyXPutOnNotIntegerPosition: aNotIntegerPosition
	
	self should: [ terniLapilli putXAt: aNotIntegerPosition. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:48:41' prior: 50977559!
denyXPutOnNotIntegerPosition

	self denyXPutOnNotIntegerPosition: 0.5@1.
	
	self denyXPutOnNotIntegerPosition: 1@0.5.
! !

!methodRemoval: TerniLapilliTest #assertRaisingErrorWhenTryingToPutXTokenInNotIntegerPosition: stamp: 'eb 11/2/2020 17:48:41'!
assertRaisingErrorWhenTryingToPutXTokenInNotIntegerPosition: aNotIntegerPosition
	
	self should: [ terniLapilli putXAt: aNotIntegerPosition. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.!
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 17:49:04'!
denyOPutOnNotIntegerPosition

	self denyOPlayOnNotIntegerPosition: 0.5@1.
	
	self denyOPlayOnNotIntegerPosition: 1@0.5.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:49:04' prior: 50977446!
test06OShouldPutInAValidPosition
	
	self denyOPlayOutsideBoard.
		
	self denyOPutOnNotIntegerPosition.! !

!methodRemoval: TerniLapilliTest #denyOPlayOnNotIntegerPosition stamp: 'eb 11/2/2020 17:49:04'!
denyOPlayOnNotIntegerPosition

	self denyOPlayOnNotIntegerPosition: 0.5@1.
	
	self denyOPlayOnNotIntegerPosition: 1@0.5.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:49:15'!
denyOPutOnNotIntegerPosition: aNotIntegerPosition
	
	self should: [ terniLapilli putOAt: aNotIntegerPosition. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:49:15' prior: 50977612!
denyOPutOnNotIntegerPosition

	self denyOPutOnNotIntegerPosition: 0.5@1.
	
	self denyOPutOnNotIntegerPosition: 1@0.5.! !

!methodRemoval: TerniLapilliTest #denyOPlayOnNotIntegerPosition: stamp: 'eb 11/2/2020 17:49:15'!
denyOPlayOnNotIntegerPosition: aNotIntegerPosition
	
	self should: [ terniLapilli putOAt: aNotIntegerPosition. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription.!
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 17:49:30'!
denyOPutOutsideBoard
	
	self denyOPlayOutsideBoardInPosition: -1@0.

	self denyOPlayOutsideBoardInPosition: 0@-1.
	
	self denyOPlayOutsideBoardInPosition: 3@0.
		
	self denyOPlayOutsideBoardInPosition: 0@3.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:49:30' prior: 50977619!
test06OShouldPutInAValidPosition
	
	self denyOPutOutsideBoard.
		
	self denyOPutOnNotIntegerPosition.! !

!methodRemoval: TerniLapilliTest #denyOPlayOutsideBoard stamp: 'eb 11/2/2020 17:49:30'!
denyOPlayOutsideBoard
	
	self denyOPlayOutsideBoardInPosition: -1@0.

	self denyOPlayOutsideBoardInPosition: 0@-1.
	
	self denyOPlayOutsideBoardInPosition: 3@0.
		
	self denyOPlayOutsideBoardInPosition: 0@3.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:49:46'!
denyOPutOutsideBoard: aPositionOutsideBoard
	
	self should: [ terniLapilli putOAt: aPositionOutsideBoard. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:49:46' prior: 50977659!
denyOPutOutsideBoard
	
	self denyOPutOutsideBoard: -1@0.

	self denyOPutOutsideBoard: 0@-1.
	
	self denyOPutOutsideBoard: 3@0.
		
	self denyOPutOutsideBoard: 0@3.! !

!methodRemoval: TerniLapilliTest #denyOPlayOutsideBoardInPosition: stamp: 'eb 11/2/2020 17:49:46'!
denyOPlayOutsideBoardInPosition: aPositionOutsideBoard
	
	self should: [ terniLapilli putOAt: aPositionOutsideBoard. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:50:10'!
denyXPutOutsideBoard: aPositionOutsideBoard
	
	self should: [ terniLapilli putXAt: aPositionOutsideBoard. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:50:11' prior: 50977534!
denyXPutOutsideBoard

	self denyXPutOutsideBoard: -1@0.

	self denyXPutOutsideBoard: 0@-1.
	
	self denyXPutOutsideBoard: 3@0.
		
	self denyXPutOutsideBoard: 0@3.! !

!methodRemoval: TerniLapilliTest #denyXPutOutsideBoardInPosition: stamp: 'eb 11/2/2020 17:50:11'!
denyXPutOutsideBoardInPosition: aPositionOutsideBoard
	
	self should: [ terniLapilli putXAt: aPositionOutsideBoard. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription.!
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 17:50:51'!
denyOPutOnOccupiedPosition

	self should: [ terniLapilli putOAt: 0@0. self fail. ]
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription.
		
	self should: [ terniLapilli putOAt: 1@0. self fail. ]
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:50:51' prior: 50973573!
test08OShouldPutInAvailablePosition
	
	terniLapilli putXAt: 0@0 .
	
	terniLapilli putOAt: 1@0.
	
	terniLapilli putXAt: 1@1 .
	
	self denyOPutOnOccupiedPosition.! !

!methodRemoval: TerniLapilliTest #denyPuttingOOnOccupiedPosition stamp: 'eb 11/2/2020 17:50:51'!
denyPuttingOOnOccupiedPosition

	self should: [ terniLapilli putOAt: 0@0. self fail. ]
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription.
		
	self should: [ terniLapilli putOAt: 1@0. self fail. ]
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription!
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 17:51:12' prior: 50977741!
denyOPutOnOccupiedPosition

	self denyOPutOnOccupiedPosition: 0@0.
	
	self denyOPutOnOccupiedPosition: 1@0.

	self should: [ terniLapilli putOAt: 0@0. self fail. ]
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription.
		
	self should: [ terniLapilli putOAt: 1@0. self fail. ]
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription! !
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 17:51:38'!
denyOPutOnOccupiedPosition: anOccupiedPosition

	self should: [ terniLapilli putOAt: anOccupiedPosition. self fail. ]
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription.

	
	! !
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 17:51:56' prior: 50977777!
denyOPutOnOccupiedPosition

	self denyOPutOnOccupiedPosition: 0@0.
	
	self denyOPutOnOccupiedPosition: 1@0.! !
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 17:52:06'!
denyXPutOnOccupiedPosition

	self denyOPutOnOccupiedPosition: 0@0.
	
	self denyOPutOnOccupiedPosition: 1@0.! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 17:53:36'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 17:53:36'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 17:53:36'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 17:53:36'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 17:53:36'!
FAILURE!

!testRun: #TerniLapilliTest #test06OShouldPutInAValidPosition stamp: 'eb 11/2/2020 17:53:36'!
FAILURE!

!testRun: #TerniLapilliTest #test07XShouldPutInAvailablePosition stamp: 'eb 11/2/2020 17:53:36'!
PASSED!

!testRun: #TerniLapilliTest #test08OShouldPutInAvailablePosition stamp: 'eb 11/2/2020 17:53:36'!
PASSED!

!testRun: #TerniLapilliTest #test09XCannotPutMoreThanThreeTimes stamp: 'eb 11/2/2020 17:53:36'!
PASSED!

!testRun: #TerniLapilliTest #test10XCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 17:53:36'!
PASSED!

!testRun: #TerniLapilliTest #test11OCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 17:53:36'!
PASSED!

!testRun: #TerniLapilliTest #test12XCannotMoveToOccupiedPositions stamp: 'eb 11/2/2020 17:53:36'!
PASSED!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 17:53:36'!
PASSED!

!testRun: #TerniLapilliTest #test14XCannotMoveTwice stamp: 'eb 11/2/2020 17:53:36'!
PASSED!

!testRun: #TerniLapilliTest #test15OCannotMoveTwice stamp: 'eb 11/2/2020 17:53:36'!
PASSED!

!testRun: #TerniLapilliTest #test16XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 17:53:36'!
PASSED!

!testRun: #TerniLapilliTest #test17OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 17:53:36'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 17:53:36'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 17:53:36'!
PASSED!

!testRun: #TerniLapilliTest #test20XMovesFromSomeOwnToken stamp: 'eb 11/2/2020 17:53:36'!
PASSED!

!testRun: #TerniLapilliTest #test21OMovesFromSomeOwnToken stamp: 'eb 11/2/2020 17:53:36'!
PASSED!

!testRun: #TerniLapilliTest #test22XWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 17:53:36'!
PASSED!

!testRun: #TerniLapilliTest #test23OWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 17:53:36'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 17:53:36'!
PASSED!

!testRun: #TerniLapilliTest #test25OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 17:53:36'!
PASSED!

!testRun: #TerniLapilliTest #test26XCannotPutTwice stamp: 'eb 11/2/2020 17:53:36'!
PASSED!

!testRun: #TerniLapilliTest #test27OCannotPutTwice stamp: 'eb 11/2/2020 17:53:36'!
PASSED!
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 17:54:00'!
denyPuttingXOnOccupiedPositionn

	self should: [ terniLapilli putXAt: 0@0. self fail. ]
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription.
		
	self should: [ terniLapilli putXAt: 1@0. self fail. ]
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'eb 11/2/2020 17:54:00' prior: 50973558!
test07XShouldPutInAvailablePosition

	terniLapilli putXAt: 0@0 .
	
	terniLapilli putOAt: 1@0.
	
	self denyPuttingXOnOccupiedPositionn .! !

!methodRemoval: TerniLapilliTest #denyPuttingXOnOccupiedPosition stamp: 'eb 11/2/2020 17:54:00'!
denyPuttingXOnOccupiedPosition

	self should: [ terniLapilli putXAt: 0@0. self fail. ]
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription.
		
	self should: [ terniLapilli putXAt: 1@0. self fail. ]
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription.!
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 17:54:59' prior: 50977809!
denyXPutOnOccupiedPosition

	self denyXPutOnOccupiedPosition: 0@0.
	
	self denyXPutOnOccupiedPosition: 1@0.

	self should: [ terniLapilli putXAt: 0@0. self fail. ]
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription.
		
	self should: [ terniLapilli putXAt: 1@0. self fail. ]
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription.! !
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 17:55:09' prior: 50977936!
denyXPutOnOccupiedPosition

	self denyXPutOnOccupiedPosition: 0@0.
	
	self denyXPutOnOccupiedPosition: 1@0.! !
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 17:55:23'!
denyXPutOnOccupiedPosition: anOccupiedPosition

	self should: [ terniLapilli putXAt: anOccupiedPosition. self fail. ]
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription.! !

!methodRemoval: TerniLapilliTest #denyPuttingXOnOccupiedPositionn stamp: 'eb 11/2/2020 17:55:32'!
denyPuttingXOnOccupiedPositionn

	self should: [ terniLapilli putXAt: 0@0. self fail. ]
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription.
		
	self should: [ terniLapilli putXAt: 1@0. self fail. ]
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription.!
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 17:57:41' prior: 50977915!
test07XShouldPutInAvailablePosition

	terniLapilli putXAt: 0@0 .
	
	terniLapilli putOAt: 1@0.
	
	self denyXPutOnOccupiedPosition .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 17:58:48'!
denyXMoveToOccupiedPosition

	self should: [ terniLapilli moveXFrom: 1@0 to: 1@1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription .
		
	self should: [ terniLapilli moveXFrom: 1@0 to: 0@0. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 17:58:48' prior: 50973728!
test12XCannotMoveToOccupiedPositions

	self fillBoard .
	
	self denyXMoveToOccupiedPosition .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 17:59:20'!
denyOMoveToOccupiedPosition

	self should: [ terniLapilli moveOFrom: 1@1 to: 1@2. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription .
	
	self should: [ terniLapilli moveOFrom: 1@1 to: 2@0. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 17:59:20' prior: 50973785!
test13OCannotMoveToOcuppiedPositions

	self fillBoard .
	
	terniLapilli moveXFrom: 1@0 to: 2@0.
	
	self denyOMoveToOccupiedPosition .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 18:01:45' prior: 50978008!
denyOMoveToOccupiedPosition

	self should: [ terniLapilli moveOFrom: 1@1 to: 1@2. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing' stamp: 'eb 11/2/2020 18:01:55' prior: 50977988!
denyXMoveToOccupiedPosition

	self should: [ terniLapilli moveXFrom: 1@0 to: 1@1. self fail. ] 
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription .! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 18:02:00'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 18:02:00'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 18:02:00'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 18:02:00'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 18:02:00'!
FAILURE!

!testRun: #TerniLapilliTest #test06OShouldPutInAValidPosition stamp: 'eb 11/2/2020 18:02:00'!
FAILURE!

!testRun: #TerniLapilliTest #test07XShouldPutInAvailablePosition stamp: 'eb 11/2/2020 18:02:00'!
PASSED!

!testRun: #TerniLapilliTest #test08OShouldPutInAvailablePosition stamp: 'eb 11/2/2020 18:02:00'!
PASSED!

!testRun: #TerniLapilliTest #test09XCannotPutMoreThanThreeTimes stamp: 'eb 11/2/2020 18:02:00'!
PASSED!

!testRun: #TerniLapilliTest #test10XCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 18:02:00'!
PASSED!

!testRun: #TerniLapilliTest #test11OCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 18:02:00'!
PASSED!

!testRun: #TerniLapilliTest #test12XCannotMoveToOccupiedPositions stamp: 'eb 11/2/2020 18:02:00'!
PASSED!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 18:02:00'!
PASSED!

!testRun: #TerniLapilliTest #test14XCannotMoveTwice stamp: 'eb 11/2/2020 18:02:00'!
PASSED!

!testRun: #TerniLapilliTest #test15OCannotMoveTwice stamp: 'eb 11/2/2020 18:02:01'!
PASSED!

!testRun: #TerniLapilliTest #test16XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 18:02:01'!
PASSED!

!testRun: #TerniLapilliTest #test17OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 18:02:01'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 18:02:01'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 18:02:01'!
PASSED!

!testRun: #TerniLapilliTest #test20XMovesFromSomeOwnToken stamp: 'eb 11/2/2020 18:02:01'!
PASSED!

!testRun: #TerniLapilliTest #test21OMovesFromSomeOwnToken stamp: 'eb 11/2/2020 18:02:01'!
PASSED!

!testRun: #TerniLapilliTest #test22XWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 18:02:01'!
PASSED!

!testRun: #TerniLapilliTest #test23OWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 18:02:01'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 18:02:01'!
PASSED!

!testRun: #TerniLapilliTest #test25OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 18:02:01'!
PASSED!

!testRun: #TerniLapilliTest #test26XCannotPutTwice stamp: 'eb 11/2/2020 18:02:01'!
PASSED!

!testRun: #TerniLapilliTest #test27OCannotPutTwice stamp: 'eb 11/2/2020 18:02:01'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 18:02:02'!
FAILURE!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 18:02:54'!
FAILURE!
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 18:03:08' prior: 50977685!
denyOPutOutsideBoard: aPositionOutsideBoard
	
	self should: [ terniLapilli putOAt: aPositionOutsideBoard. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription .! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 18:03:10'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 18:03:10'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 18:03:10'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 18:03:10'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 18:03:10'!
FAILURE!

!testRun: #TerniLapilliTest #test06OShouldPutInAValidPosition stamp: 'eb 11/2/2020 18:03:10'!
FAILURE!

!testRun: #TerniLapilliTest #test07XShouldPutInAvailablePosition stamp: 'eb 11/2/2020 18:03:10'!
PASSED!

!testRun: #TerniLapilliTest #test08OShouldPutInAvailablePosition stamp: 'eb 11/2/2020 18:03:10'!
PASSED!

!testRun: #TerniLapilliTest #test09XCannotPutMoreThanThreeTimes stamp: 'eb 11/2/2020 18:03:10'!
PASSED!

!testRun: #TerniLapilliTest #test10XCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 18:03:10'!
PASSED!

!testRun: #TerniLapilliTest #test11OCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 18:03:10'!
PASSED!

!testRun: #TerniLapilliTest #test12XCannotMoveToOccupiedPositions stamp: 'eb 11/2/2020 18:03:10'!
PASSED!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 18:03:10'!
PASSED!

!testRun: #TerniLapilliTest #test14XCannotMoveTwice stamp: 'eb 11/2/2020 18:03:10'!
PASSED!

!testRun: #TerniLapilliTest #test15OCannotMoveTwice stamp: 'eb 11/2/2020 18:03:10'!
PASSED!

!testRun: #TerniLapilliTest #test16XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 18:03:10'!
PASSED!

!testRun: #TerniLapilliTest #test17OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 18:03:10'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 18:03:10'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 18:03:10'!
PASSED!

!testRun: #TerniLapilliTest #test20XMovesFromSomeOwnToken stamp: 'eb 11/2/2020 18:03:10'!
PASSED!

!testRun: #TerniLapilliTest #test21OMovesFromSomeOwnToken stamp: 'eb 11/2/2020 18:03:10'!
PASSED!

!testRun: #TerniLapilliTest #test22XWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 18:03:10'!
PASSED!

!testRun: #TerniLapilliTest #test23OWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 18:03:10'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 18:03:10'!
PASSED!

!testRun: #TerniLapilliTest #test25OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 18:03:10'!
PASSED!

!testRun: #TerniLapilliTest #test26XCannotPutTwice stamp: 'eb 11/2/2020 18:03:10'!
PASSED!

!testRun: #TerniLapilliTest #test27OCannotPutTwice stamp: 'eb 11/2/2020 18:03:10'!
PASSED!
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 18:03:24' prior: 50977632!
denyOPutOnNotIntegerPosition: aNotIntegerPosition
	
	self should: [ terniLapilli putOAt: aNotIntegerPosition. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 18:03:37' prior: 50977583!
denyXPutOnNotIntegerPosition: aNotIntegerPosition
	
	self should: [ terniLapilli putXAt: aNotIntegerPosition. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsInvalidErrorDescription.! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 18:03:40'!
FAILURE!

!testRun: #TerniLapilliTest #test06OShouldPutInAValidPosition stamp: 'eb 11/2/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test07XShouldPutInAvailablePosition stamp: 'eb 11/2/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test08OShouldPutInAvailablePosition stamp: 'eb 11/2/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test09XCannotPutMoreThanThreeTimes stamp: 'eb 11/2/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test10XCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test11OCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test12XCannotMoveToOccupiedPositions stamp: 'eb 11/2/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test14XCannotMoveTwice stamp: 'eb 11/2/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test15OCannotMoveTwice stamp: 'eb 11/2/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test16XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test17OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test20XMovesFromSomeOwnToken stamp: 'eb 11/2/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test21OMovesFromSomeOwnToken stamp: 'eb 11/2/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test22XWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test23OWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test25OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test26XCannotPutTwice stamp: 'eb 11/2/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test27OCannotPutTwice stamp: 'eb 11/2/2020 18:03:40'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 18:03:40'!
FAILURE!
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 18:03:52' prior: 50977958!
denyXPutOnOccupiedPosition: anOccupiedPosition

	self should: [ terniLapilli putXAt: anOccupiedPosition. self fail. ]
		raise: Error
		withMessageText: terniLapilli class positionIsNotAvailableErrorDescription .! !
!TerniLapilliTest methodsFor: 'testing-private' stamp: 'eb 11/2/2020 18:04:40' prior: 50977713!
denyXPutOutsideBoard: aPositionOutsideBoard
	
	self should: [ terniLapilli putXAt: aPositionOutsideBoard. self fail.]
		raise: Error
		withMessageText: terniLapilli class positionIsOutsideBoardErrorDescription .! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 18:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 18:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 18:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 18:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 18:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test06OShouldPutInAValidPosition stamp: 'eb 11/2/2020 18:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test07XShouldPutInAvailablePosition stamp: 'eb 11/2/2020 18:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test08OShouldPutInAvailablePosition stamp: 'eb 11/2/2020 18:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test09XCannotPutMoreThanThreeTimes stamp: 'eb 11/2/2020 18:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test10XCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 18:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test11OCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 18:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test12XCannotMoveToOccupiedPositions stamp: 'eb 11/2/2020 18:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 18:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test14XCannotMoveTwice stamp: 'eb 11/2/2020 18:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test15OCannotMoveTwice stamp: 'eb 11/2/2020 18:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test16XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 18:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test17OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 18:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 18:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 18:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test20XMovesFromSomeOwnToken stamp: 'eb 11/2/2020 18:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test21OMovesFromSomeOwnToken stamp: 'eb 11/2/2020 18:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test22XWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 18:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test23OWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 18:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 18:04:47'!
PASSED!

!testRun: #TerniLapilliTest #test25OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 18:04:48'!
PASSED!

!testRun: #TerniLapilliTest #test26XCannotPutTwice stamp: 'eb 11/2/2020 18:04:48'!
PASSED!

!testRun: #TerniLapilliTest #test27OCannotPutTwice stamp: 'eb 11/2/2020 18:04:48'!
PASSED!

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 18:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 18:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 18:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 18:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 18:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test06OShouldPutInAValidPosition stamp: 'eb 11/2/2020 18:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test07XShouldPutInAvailablePosition stamp: 'eb 11/2/2020 18:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test08OShouldPutInAvailablePosition stamp: 'eb 11/2/2020 18:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test09XCannotPutMoreThanThreeTimes stamp: 'eb 11/2/2020 18:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test10XCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 18:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test11OCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 18:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test12XCannotMoveToOccupiedPositions stamp: 'eb 11/2/2020 18:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 18:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test14XCannotMoveTwice stamp: 'eb 11/2/2020 18:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test15OCannotMoveTwice stamp: 'eb 11/2/2020 18:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test16XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 18:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test17OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 18:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 18:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 18:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test20XMovesFromSomeOwnToken stamp: 'eb 11/2/2020 18:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test21OMovesFromSomeOwnToken stamp: 'eb 11/2/2020 18:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test22XWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 18:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test23OWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 18:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 18:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test25OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 18:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test26XCannotPutTwice stamp: 'eb 11/2/2020 18:05:13'!
PASSED!

!testRun: #TerniLapilliTest #test27OCannotPutTwice stamp: 'eb 11/2/2020 18:05:13'!
PASSED!
!TerniLapilli methodsFor: 'playing-private' stamp: 'eb 11/2/2020 18:16:17' prior: 50974586!
lookForVictoryIn: aPositionCollection

	| verticalWin horizontalWin diagonalWin |
	
	(aPositionCollection size < 3) ifTrue: [ ^false ].
	
	verticalWin _ aPositionCollection allSatisfy: [ :aPosition | aPositionCollection asArray first x = aPosition x.].
	
	horizontalWin _ aPositionCollection allSatisfy: [ :each | aPositionCollection asArray first y = each y. ].
	
	diagonalWin _ aPositionCollection = self principalDiagonal or: aPositionCollection = self notPrincipalDiagonal .
	
	^ verticalWin or: horizontalWin or: diagonalWin.! !
!TerniLapilli methodsFor: 'playing-private' stamp: 'eb 11/2/2020 18:16:20' prior: 50978537!
lookForVictoryIn: aPositionCollection

	| verticalWin horizontalWin diagonalWin |
	
	(aPositionCollection size < 3) ifTrue: [ ^false ].
	
	verticalWin _ aPositionCollection allSatisfy: [ :aPosition | aPositionCollection asArray first x = aPosition x.].
	
	horizontalWin _ aPositionCollection allSatisfy: [ :aPosition | aPositionCollection asArray first y = aPosition y. ].
	
	diagonalWin _ aPositionCollection = self principalDiagonal or: aPositionCollection = self notPrincipalDiagonal .
	
	^ verticalWin or: horizontalWin or: diagonalWin.! !

!testRun: #TerniLapilliTest #test01AtTheBeginningBoardIsEmptyAndXShouldPlay stamp: 'eb 11/2/2020 18:16:44'!
PASSED!

!testRun: #TerniLapilliTest #test02OCannotInitGame stamp: 'eb 11/2/2020 18:16:44'!
PASSED!

!testRun: #TerniLapilliTest #test03OPlaysAfterX stamp: 'eb 11/2/2020 18:16:44'!
PASSED!

!testRun: #TerniLapilliTest #test04XPlaysAfterO stamp: 'eb 11/2/2020 18:16:44'!
PASSED!

!testRun: #TerniLapilliTest #test05XShouldPutInAValidPosition stamp: 'eb 11/2/2020 18:16:44'!
PASSED!

!testRun: #TerniLapilliTest #test06OShouldPutInAValidPosition stamp: 'eb 11/2/2020 18:16:44'!
PASSED!

!testRun: #TerniLapilliTest #test07XShouldPutInAvailablePosition stamp: 'eb 11/2/2020 18:16:44'!
PASSED!

!testRun: #TerniLapilliTest #test08OShouldPutInAvailablePosition stamp: 'eb 11/2/2020 18:16:44'!
PASSED!

!testRun: #TerniLapilliTest #test09XCannotPutMoreThanThreeTimes stamp: 'eb 11/2/2020 18:16:44'!
PASSED!

!testRun: #TerniLapilliTest #test10XCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 18:16:44'!
PASSED!

!testRun: #TerniLapilliTest #test11OCanMoveOnlyWithThreeTokens stamp: 'eb 11/2/2020 18:16:44'!
PASSED!

!testRun: #TerniLapilliTest #test12XCannotMoveToOccupiedPositions stamp: 'eb 11/2/2020 18:16:44'!
PASSED!

!testRun: #TerniLapilliTest #test13OCannotMoveToOcuppiedPositions stamp: 'eb 11/2/2020 18:16:44'!
PASSED!

!testRun: #TerniLapilliTest #test14XCannotMoveTwice stamp: 'eb 11/2/2020 18:16:44'!
PASSED!

!testRun: #TerniLapilliTest #test15OCannotMoveTwice stamp: 'eb 11/2/2020 18:16:44'!
PASSED!

!testRun: #TerniLapilliTest #test16XMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 18:16:44'!
PASSED!

!testRun: #TerniLapilliTest #test17OMovementsLengthShouldBeOne stamp: 'eb 11/2/2020 18:16:44'!
PASSED!

!testRun: #TerniLapilliTest #test18XMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 18:16:44'!
PASSED!

!testRun: #TerniLapilliTest #test19OMovesToAValidPositionInTheBoard stamp: 'eb 11/2/2020 18:16:44'!
PASSED!

!testRun: #TerniLapilliTest #test20XMovesFromSomeOwnToken stamp: 'eb 11/2/2020 18:16:44'!
PASSED!

!testRun: #TerniLapilliTest #test21OMovesFromSomeOwnToken stamp: 'eb 11/2/2020 18:16:44'!
PASSED!

!testRun: #TerniLapilliTest #test22XWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 18:16:44'!
PASSED!

!testRun: #TerniLapilliTest #test23OWinsWhenHasThreeTokensInLine stamp: 'eb 11/2/2020 18:16:44'!
PASSED!

!testRun: #TerniLapilliTest #test24XCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 18:16:44'!
PASSED!

!testRun: #TerniLapilliTest #test25OCannotPlayWhenGameIsOver stamp: 'eb 11/2/2020 18:16:44'!
PASSED!

!testRun: #TerniLapilliTest #test26XCannotPutTwice stamp: 'eb 11/2/2020 18:16:44'!
PASSED!

!testRun: #TerniLapilliTest #test27OCannotPutTwice stamp: 'eb 11/2/2020 18:16:44'!
PASSED!