----End fileIn of /home/jampuero/Documentos/isw1/linux64/TusLibros-33.st----!

Object subclass: #InternalAPI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalAPI category: #TusLibros stamp: 'ja 11/26/2020 20:52:41'!
Object subclass: #InternalAPI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #InternalAPITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalAPITest category: #TusLibros stamp: 'ja 11/26/2020 20:52:58'!
TestCase subclass: #InternalAPITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPITest methodsFor: 'no messages' stamp: 'ja 11/26/2020 21:09:56'!
test01CreateCartReturnsZeroWithCorrectClientIdAndPassword

	| internalAPI output aClient aPassword |
	
	internalAPI _ InternalAPI for: aClient with: aPassword.
	
	output _ internalAPI createCart.
		
	self assert: 0 equals: output .
		
	! !

!testRun: #InternalAPITest #test01CreateCartReturnsZeroWithCorrectClientIdAndPassword stamp: 'ja 11/26/2020 21:10:09'!
ERROR!
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 11/26/2020 21:10:19'!
for: anUndefinedObject with: anUndefinedObject2 
	self shouldBeImplemented.! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 11/26/2020 21:11:35' prior: 50974297!
for: aClient with: aPassword 
	
	^self new initializefor: aClient with: aPassword .! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 11/26/2020 21:11:49' prior: 50974303!
for: aClient with: aPassword 
	
	^self new initializeFor: aClient with: aPassword .! !

!testRun: #InternalAPITest #test01CreateCartReturnsZeroWithCorrectClientIdAndPassword stamp: 'ja 11/26/2020 21:11:52'!
ERROR!

!classDefinition: #InternalAPI category: #TusLibros stamp: 'ja 11/26/2020 21:12:02'!
Object subclass: #InternalAPI
	instanceVariableNames: 'client'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalAPI category: #TusLibros stamp: 'ja 11/26/2020 21:12:03'!
Object subclass: #InternalAPI
	instanceVariableNames: 'client password'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPI methodsFor: 'initialization' stamp: 'ja 11/26/2020 21:12:03'!
initializeFor: aClient with: aPassword 
	self shouldBeImplemented.
	client := aClient.
	password := aPassword.! !
!InternalAPI methodsFor: 'initialization' stamp: 'ja 11/26/2020 21:12:17' prior: 50974332!
initializeFor: aClient with: aPassword 
	
	client _ aClient.
	password _ aPassword.! !

!testRun: #InternalAPITest #test01CreateCartReturnsZeroWithCorrectClientIdAndPassword stamp: 'ja 11/26/2020 21:12:19'!
ERROR!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/26/2020 21:12:29'!
createCart
	self shouldBeImplemented.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/26/2020 21:13:00' prior: 50974349!
createCart
	
	^ 0.! !

!testRun: #InternalAPITest #test01CreateCartReturnsZeroWithCorrectClientIdAndPassword stamp: 'ja 11/26/2020 21:13:03'!
PASSED!

!testRun: #InternalAPITest #test01CreateCartReturnsZeroWithCorrectClientIdAndPassword stamp: 'ja 11/26/2020 21:13:03'!
PASSED!

----QUIT----(26 November 2020 23:39:07) CuisUniversity-4365.image priorSource: 20543380!

----STARTUP---- (29 November 2020 12:11:31) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4365.image!


!testRun: #InternalAPITest #test01CreateCartReturnsZeroWithCorrectClientIdAndPassword stamp: 'ja 11/29/2020 12:11:58'!
PASSED!
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 12:26:29' overrides: 16927572!
setUp
	
	! !

TestCase subclass: #InternalAPITest
	instanceVariableNames: 'internalAPI'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #InternalAPITest
	instanceVariableNames: 'internalAPI2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalAPITest category: #TusLibros stamp: 'ja 11/29/2020 12:26:49'!
TestCase subclass: #InternalAPITest
	instanceVariableNames: 'internalAPI2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 12:27:12' prior: 50974282!
test01CreateCartReturnsZeroWithCorrectClientIdAndPassword

	| internalAPI1 output aClient aPassword |
	
	internalAPI1 _ InternalAPI for: aClient with: aPassword.
	
	output _ internalAPI1 createCart.
		
	self assert: 0 equals: output .
		
	! !

TestCase subclass: #InternalAPITest
	instanceVariableNames: 'internalAPI'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalAPITest category: #TusLibros stamp: 'ja 11/29/2020 12:27:23'!
TestCase subclass: #InternalAPITest
	instanceVariableNames: 'internalAPI'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 12:29:06' prior: 50974377 overrides: 16927572!
setUp
	
	internalAPI _ InternalAPI with: self userAuthentication.! !
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 12:31:41' prior: 50974420 overrides: 16927572!
setUp
	
	internalAPI _ InternalAPI with: self authenticatedUsers.! !
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 12:36:29' prior: 50974397!
test01CreateCartReturnsZeroWithCorrectClientIdAndPassword

	| output aClient aPassword |
	
	internalAPI for: aClient with: aPassword.
	
	output _ internalAPI createCart.
		
	self assert: 0 equals: output .
		
	! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 12:38:16'!
with: usersDicc
	
	^self new initializeWith: usersDicc.! !

!classDefinition: #InternalAPI category: #TusLibros stamp: 'ja 11/29/2020 12:39:18'!
Object subclass: #InternalAPI
	instanceVariableNames: 'client password users'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPI methodsFor: 'initialization' stamp: 'ja 11/29/2020 12:39:17'!
initializeWith: usersDicc
	
	users _ usersDicc.! !
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 12:48:11' prior: 50974432!
test01CreateCartReturnsZeroWithCorrectClientIdAndPassword

	| output aClient aPassword |
	
	output _ internalAPI createCartFor: aClient with: aPassword.
		
	self assert: 0 equals: output .
		
	! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 12:52:32'!
authenticatedUsers
	self shouldBeImplemented.! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 13:12:10' prior: 50974468!
authenticatedUsers

	| users | 
	
	users _ Dictionary new.
	users add: 'Alan Kay' -> 'objetos';
		  add: 'Dan Ingalls' -> 'smalltalk'! !
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 13:12:21' prior: 50974473!
authenticatedUsers

	| users | 
	
	users _ Dictionary new.
	users add: 'Alan Kay' -> 'objetos';
		  add: 'Dan Ingalls' -> 'smalltalk'.
	
	^ users.! !

!testRun: #InternalAPITest #test01CreateCartReturnsZeroWithCorrectClientIdAndPassword stamp: 'ja 11/29/2020 13:12:48'!
ERROR!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 13:12:59'!
createCartFor: anUndefinedObject with: anUndefinedObject2 
	self shouldBeImplemented.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 13:17:03' prior: 50974493!
createCartFor: anUndefinedObject with: anUndefinedObject2 
	
	^ 0! !

!testRun: #InternalAPITest #test01CreateCartReturnsZeroWithCorrectClientIdAndPassword stamp: 'ja 11/29/2020 13:17:06'!
PASSED!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 13:18:18' prior: 50974499!
createCartFor: aUser with: aPassword 
	
	^ 0! !

!methodRemoval: InternalAPI #initializeFor:with: stamp: 'ja 11/29/2020 13:18:49'!
initializeFor: aClient with: aPassword 
	
	client _ aClient.
	password _ aPassword.!

!methodRemoval: InternalAPI #createCart stamp: 'ja 11/29/2020 13:19:07'!
createCart
	
	^ 0.!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 13:19:37' prior: 50974509!
createCartFor: aUser with: aPassword 
	
	
	
	^ 0! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 13:22:42' prior: 50974522!
createCartFor: aUser with: aPassword 
	
	self isRegisteredUser: aUser with: aPassword .
	
	^ 0! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 13:46:50'!
isRegisteredUser: aUser with: aPassword 
	
	| aPasswordRegistered |
	
	aPasswordRegistered _ users at: aUser ifAbsent:[ self error: self class userNotRegisteredErrorDescription ].
	
	^ aPasswordRegistered = aPassword.! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 13:47:40'!
userNotRegisteredErrorDescription

	^ 'User not registered'! !

!testRun: #InternalAPITest #test01CreateCartReturnsZeroWithCorrectClientIdAndPassword stamp: 'ja 11/29/2020 13:48:13'!
ERROR!

!testRun: #InternalAPITest #test01CreateCartReturnsZeroWithCorrectClientIdAndPassword stamp: 'ja 11/29/2020 13:48:13'!
ERROR!
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 13:51:35'!
internalApi
	
	internalAPI _ InternalAPI with: self authenticatedUsers.! !

!methodRemoval: InternalAPITest #setUp stamp: 'ja 11/29/2020 13:51:35'!
setUp
	
	internalAPI _ InternalAPI with: self authenticatedUsers.!
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 13:52:34' prior: 50974459!
test01CreateCartReturnsZeroWithCorrectClientIdAndPassword

	| interface output aClient aPassword |
	
	interface _ self internalApi.
	output _ interface createCartFor: aClient with: aPassword.
		
	self assert: 0 equals: output .
		
	! !

!testRun: #InternalAPITest #test01CreateCartReturnsZeroWithCorrectClientIdAndPassword stamp: 'ja 11/29/2020 13:54:47'!
ERROR!

!testRun: #InternalAPITest #test01CreateCartReturnsZeroWithCorrectClientIdAndPassword stamp: 'ja 11/29/2020 13:54:47'!
ERROR!
!InternalAPITest methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 13:55:28' prior: 50974556!
internalApi
	
	^ InternalAPI with: self authenticatedUsers.! !

TestCase subclass: #InternalAPITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalAPITest category: #TusLibros stamp: 'ja 11/29/2020 13:55:37'!
TestCase subclass: #InternalAPITest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #InternalAPITest #test01CreateCartReturnsZeroWithCorrectClientIdAndPassword stamp: 'ja 11/29/2020 13:55:43'!
ERROR!

!testRun: #InternalAPITest #test01CreateCartReturnsZeroWithCorrectClientIdAndPassword stamp: 'ja 11/29/2020 13:55:43'!
ERROR!
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 13:56:37' prior: 50974566!
test01CreateCartReturnsZeroWithCorrectClientIdAndPassword

	| interface output |
	
	interface _ self internalApi.
	output _ interface createCartFor: 'Dan Ingalls' with:  'smalltalk'.
		
	self assert: 0 equals: output .
		
	! !
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 13:56:46' prior: 50974609!
test01CreateCartReturnsZeroWithCorrectClientIdAndPassword

	| interface output |
	
	interface _ self internalApi.
	output _ interface createCartFor: 'Dan Ingalls' with: 'smalltalk'.
		
	self assert: 0 equals: output .
		
	! !

!testRun: #InternalAPITest #test01CreateCartReturnsZeroWithCorrectClientIdAndPassword stamp: 'ja 11/29/2020 13:56:52'!
PASSED!
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 13:57:29' prior: 50974619!
test01CreateCartReturnsZeroWithCorrectClientIdAndPassword

	| output internalApi |
	
	internalApi _ self internalApi.
	output _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
		
	self assert: 0 equals: output .
		
	! !

!testRun: #InternalAPITest #test01CreateCartReturnsZeroWithCorrectClientIdAndPassword stamp: 'ja 11/29/2020 13:57:36'!
PASSED!

!testRun: #InternalAPITest #test01CreateCartReturnsZeroWithCorrectClientIdAndPassword stamp: 'ja 11/29/2020 13:57:36'!
PASSED!
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 14:21:41'!
test02CreateCartReturnsOneWithUnregisteredClientId

	| output internalApi |
	
	internalApi _ self internalApi.
	output _ internalApi createCartFor: 'Edsger Dijkstra' with: 'nanoDijkstra'.
		
	self assert: 0 equals: output .
		
	! !
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 14:29:05' prior: 50974651!
test02CreateCartReturnsOneWithUnregisteredClientId

	| internalApi |
	
	internalApi _ self internalApi.
 	
	self should: [ internalApi createCartFor: 'Edsger Dijkstra' with: 'nanoDijkstra'. self fail ]
		raise: Error 
		withMessageText: InternalAPI userNotRegisteredErrorDescription.  
	
		
	! !

!testRun: #InternalAPITest #test02CreateCartReturnsOneWithUnregisteredClientId stamp: 'ja 11/29/2020 14:29:09'!
PASSED!
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 16:42:58' prior: 50974662!
test02CreateCartReturnsOneWithUnregisteredClientId

	| internalApi |
	
	internalApi _ self internalApi.
 	
	self should: [ internalApi createCartFor: 'Edsger Dijkstra' with: 'nanoDijkstra'. self fail ]
		raise: Error 
		withMessageText: InternalAPI userNotRegisteredErrorDescription.  
	
		
	! !

!testRun: #InternalAPITest #test02CreateCartReturnsOneWithUnregisteredClientId stamp: 'ja 11/29/2020 16:43:01'!
PASSED!

!testRun: #InternalAPITest #test01CreateCartReturnsZeroWithCorrectClientIdAndPassword stamp: 'ja 11/29/2020 16:43:01'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsOneWithUnregisteredClientId stamp: 'ja 11/29/2020 16:43:01'!
PASSED!
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 16:46:12' prior: 50974633!
test01CreateCartReturnsZeroWithCorrectClientIdAndPassword

	| output internalApi |
	
	internalApi _ self internalApi.
	output _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
		
	self assert: 0 equals: output .
		
	! !

Object subclass: #InternalAPI
	instanceVariableNames: 'users'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalAPI category: #TusLibros stamp: 'ja 11/29/2020 17:00:27'!
Object subclass: #InternalAPI
	instanceVariableNames: 'users'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #InternalAPITest #test01CreateCartReturnsZeroWithCorrectClientIdAndPassword stamp: 'ja 11/29/2020 17:00:34'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsOneWithUnregisteredClientId stamp: 'ja 11/29/2020 17:00:36'!
PASSED!
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 17:01:45'!
test03CreateCartReturnsOneWithUnregisteredClientId

	| internalApi |
	
	internalApi _ self internalApi.
 	
	self should: [ internalApi createCartFor: 'Edsger Dijkstra' with: 'nanoDijkstra'. self fail ]
		raise: Error 
		withMessageText: InternalAPI userNotRegisteredErrorDescription.  
	
		
	! !

!methodRemoval: InternalAPITest #test02CreateCartReturnsOneWithUnregisteredClientId stamp: 'ja 11/29/2020 17:01:45'!
test02CreateCartReturnsOneWithUnregisteredClientId

	| internalApi |
	
	internalApi _ self internalApi.
 	
	self should: [ internalApi createCartFor: 'Edsger Dijkstra' with: 'nanoDijkstra'. self fail ]
		raise: Error 
		withMessageText: InternalAPI userNotRegisteredErrorDescription.  
	
		
	!
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 17:03:56'!
test02CreateCartReturnsDifferentIdPerCustomer

	| internalApi |
	
	internalApi _ self internalApi.
 	
	internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	internalApi createCartFor: 'Dan Ingals' with: 'smalltalk'.	
		
	! !
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 17:04:14' prior: 50974756!
test02CreateCartReturnsDifferentIdPerCustomer

	| internalApi |
	
	internalApi _ self internalApi.
 	
	internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.	
		
	! !
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 17:09:26' prior: 50974767!
test02CreateCartReturnsDifferentIdPerCustomer

	| internalApi id1 id2|
	
	internalApi _ self internalApi.
 	
	id1 _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	id2 _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.	
	
	self deny: id1 = id2.
		
	! !

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdPerCustomer stamp: 'ja 11/29/2020 17:10:40'!
FAILURE!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 17:12:25' prior: 50974527!
createCartFor: aUser with: aPassword 
	
	| cartId |
	
	self isRegisteredUser: aUser with: aPassword .
	
	cartId _ self nextIdFree.
	
	^ 0! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 17:12:54' prior: 50974794!
createCartFor: aUser with: aPassword 
	
	| cartId |
	
	self isRegisteredUser: aUser with: aPassword .
	
	cartId _ self nextIdFree.
	
	^ cartId! !

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdPerCustomer stamp: 'ja 11/29/2020 17:12:59'!
ERROR!
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 17:15:25' prior: 50974702!
test01CreateCartReturnsZeroWithCorrectClientIdAndPassword

	| id internalApi |
	
	internalApi _ self internalApi.
	id _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
		
	self assert: 1 equals: id .
		
	! !
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 17:17:43'!
test01CreateCartSuccessfulWithCorrectClientIdAndPassword

	| id internalApi |
	
	internalApi _ self internalApi.
	id _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
		
	self assert: 1 equals: id .
		
	! !

!methodRemoval: InternalAPITest #test01CreateCartReturnsZeroWithCorrectClientIdAndPassword stamp: 'ja 11/29/2020 17:17:43'!
test01CreateCartReturnsZeroWithCorrectClientIdAndPassword

	| id internalApi |
	
	internalApi _ self internalApi.
	id _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
		
	self assert: 1 equals: id .
		
	!
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 17:22:06' prior: 50974824!
test01CreateCartSuccessfulWithCorrectClientIdAndPassword

	| id internalApi |
	
	internalApi _ self internalApi.
	id _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
		
	self assert: internalApi includes: id.
		
	! !
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 17:22:36' prior: 50974845!
test01CreateCartSuccessfulWithCorrectClientIdAndPassword

	| id internalApi |
	
	internalApi _ self internalApi.
	id _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
		
	self assert: (internalApi cartsId: id).
		
	! !

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdPerCustomer stamp: 'ja 11/29/2020 17:23:02'!
ERROR!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdPerCustomer stamp: 'ja 11/29/2020 17:23:02'!
ERROR!

!testRun: #InternalAPITest #test03CreateCartReturnsOneWithUnregisteredClientId stamp: 'ja 11/29/2020 17:23:11'!
PASSED!

Object subclass: #InternalAPI
	instanceVariableNames: 'users nextId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalAPI category: #TusLibros stamp: 'ja 11/29/2020 17:23:49'!
Object subclass: #InternalAPI
	instanceVariableNames: 'users nextId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 17:24:25'!
nextIdFree

	nextId _ nextId + 1.
	
	^ nextId ! !
!InternalAPI methodsFor: 'initialization' stamp: 'ja 11/29/2020 17:24:37' prior: 50974454!
initializeWith: usersDicc
	
	users _ usersDicc.
	
	nextId _ 0! !
!InternalAPI methodsFor: 'initialization' stamp: 'ja 11/29/2020 17:24:38' prior: 50974894!
initializeWith: usersDicc
	
	users _ usersDicc.
	
	nextId _ 0.! !

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdPerCustomer stamp: 'ja 11/29/2020 17:24:47'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdPerCustomer stamp: 'ja 11/29/2020 17:30:59'!
PASSED!
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 18:10:06' prior: 50974442!
with: users
	
	^self new initializeWith: users.! !
!InternalAPI methodsFor: 'initialization' stamp: 'ja 11/29/2020 18:10:54' prior: 50974899!
initializeWith: aUsersCollection
	
	users _ aUsersCollection.
	
	nextId _ 0.! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 18:11:07' prior: 50974912!
with: aUsersCollection
	
	^self new initializeWith: aUsersCollection.! !
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 18:15:41' prior: 50974856!
test01CreateCartSuccessfulWithCorrectClientIdAndPassword

	| id internalApi |
	
	internalApi _ self internalApi.
	id _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
		
	self assert: 1 = 1.
		
	! !

Object subclass: #Response
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Response category: #TusLibros stamp: 'ja 11/29/2020 18:17:03'!
Object subclass: #Response
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Response subclass: #SuccessfulResponse
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #SuccessfulResponse category: #TusLibros stamp: 'ja 11/29/2020 18:18:01'!
Response subclass: #SuccessfulResponse
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Response subclass: #UnsuccessfulResponse
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #UnsuccessfulResponse category: #TusLibros stamp: 'ja 11/29/2020 18:18:31'!
Response subclass: #UnsuccessfulResponse
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Response methodsFor: 'no messages' stamp: 'ja 11/29/2020 18:18:53'!
code

	self subclassResponsibility ! !
!Response methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 18:19:18'!
data

	self subclassResponsibility ! !

Object subclass: #Response
	instanceVariableNames: 'code data'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Response category: #TusLibros stamp: 'ja 11/29/2020 18:19:38'!
Object subclass: #Response
	instanceVariableNames: 'code data'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!SuccessfulResponse methodsFor: 'no messages' stamp: 'ja 11/29/2020 18:19:51' overrides: 50974972!
code 

	code _ 0! !
!UnsuccessfulResponse methodsFor: 'no messages' stamp: 'ja 11/29/2020 18:20:02' overrides: 50974972!
code 

	code _ 1 ! !
!Response methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 18:20:53' prior: 50974976!
data

	self subclassResponsibility ! !
!SuccessfulResponse methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 18:21:37' overrides: 50975000!
data
	 
	^ data copy! !

!classRenamed: #Response as: #InternalAPIResponse stamp: 'ja 11/29/2020 18:21:54'!
Smalltalk renameClassNamed: #Response as: #InternalAPIResponse!
!SuccessfulResponse methodsFor: 'accesing' stamp: 'ja 11/29/2020 18:24:38' prior: 50974992 overrides: 50974972!
code 

	^ code! !
!UnsuccessfulResponse methodsFor: 'accesing' stamp: 'ja 11/29/2020 18:24:53' prior: 50974996 overrides: 50974972!
code 

	^ code! !
!UnsuccessfulResponse methodsFor: 'accesing' stamp: 'ja 11/29/2020 18:25:00' overrides: 50975000!
data

	^ data! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 18:26:28' prior: 50974802!
createCartFor: aUser with: aPassword 
	
	| cartId |
	
	self isRegisteredUser: aUser with: aPassword .
	
	^ SuccessfulResponse with: self nextIdFree.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 18:26:38' prior: 50975027!
createCartFor: aUser with: aPassword 
	
	self isRegisteredUser: aUser with: aPassword .
	
	^ SuccessfulResponse with: self nextIdFree.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 18:31:22' prior: 50975035!
createCartFor: aUser with: aPassword 
	
	self isRegisteredUser: aUser with: aPassword.
	
	^ SuccessfulResponse with: self nextIdFree.! !

!classDefinition: 'InternalAPIResponse class' category: #TusLibros stamp: 'ja 11/29/2020 18:55:14'!
InternalAPIResponse class
	instanceVariableNames: 'payload'!
!InternalAPIResponse class methodsFor: 'no messages' stamp: 'ja 11/29/2020 18:55:11'!
with: aPayload

	payload _ aPayload! !
!InternalAPIResponse class methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 18:56:01' prior: 50975056!
with: aPayload

	^ self new initializeWith: aPayload .! !

!classDefinition: #InternalAPIResponse category: #TusLibros stamp: 'ja 11/29/2020 18:56:23'!
Object subclass: #InternalAPIResponse
	instanceVariableNames: 'code data payload'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPIResponse methodsFor: 'accesing' stamp: 'ja 11/29/2020 18:56:21'!
initializeWith: aPayload

	payload _ aPayload! !

Object subclass: #InternalAPIResponse
	instanceVariableNames: 'code payload'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalAPIResponse category: #TusLibros stamp: 'ja 11/29/2020 18:57:08'!
Object subclass: #InternalAPIResponse
	instanceVariableNames: 'code payload'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #InternalAPIResponse
	instanceVariableNames: 'payload'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalAPIResponse category: #TusLibros stamp: 'ja 11/29/2020 18:57:28'!
Object subclass: #InternalAPIResponse
	instanceVariableNames: 'payload'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPIResponse methodsFor: 'accesing' stamp: 'ja 11/29/2020 18:57:44'!
payload

	self subclassResponsibility ! !

!methodRemoval: InternalAPIResponse #data stamp: 'ja 11/29/2020 18:57:44'!
data

	self subclassResponsibility !
!SuccessfulResponse methodsFor: 'accesing' stamp: 'ja 11/29/2020 18:58:12' prior: 50975005!
data
	 
	! !
!SuccessfulResponse methodsFor: 'accesing' stamp: 'ja 11/29/2020 18:58:27' overrides: 50975101!
payload
	 
	! !

!methodRemoval: SuccessfulResponse #data stamp: 'ja 11/29/2020 18:58:27'!
data
	 
	!
!SuccessfulResponse methodsFor: 'accesing' stamp: 'ja 11/29/2020 18:58:33' prior: 50975113 overrides: 50975101!
payload
	 
	^ payload ! !
!UnsuccessfulResponse methodsFor: 'accesing' stamp: 'ja 11/29/2020 18:58:54' overrides: 50975101!
payload

	^ data! !
!UnsuccessfulResponse methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 18:58:54' prior: 50975023!
data

	^ data! !
!UnsuccessfulResponse methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 18:58:54' prior: 50975124 overrides: 50975101!
payload

	^ data! !

!methodRemoval: UnsuccessfulResponse #data stamp: 'ja 11/29/2020 18:58:54'!
data

	^ data!
!UnsuccessfulResponse methodsFor: 'accesing' stamp: 'ja 11/29/2020 18:59:00' prior: 50975133 overrides: 50975101!
payload

	^ payload ! !
!UnsuccessfulResponse methodsFor: 'accesing' stamp: 'ja 11/29/2020 19:00:07' prior: 50975019 overrides: 50974972!
code 

	^ 1! !
!SuccessfulResponse methodsFor: 'accesing' stamp: 'ja 11/29/2020 19:00:16' prior: 50975014 overrides: 50974972!
code 

	^ 0! !
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 19:02:51' prior: 50974929!
test01CreateCartSuccessfulWithCorrectClientIdAndPassword

	| response internalApi |
	
	internalApi _ self internalApi.
	response _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
		
	self assert: response code = 0.
		
	! !

!testRun: #InternalAPITest #test01CreateCartSuccessfulWithCorrectClientIdAndPassword stamp: 'ja 11/29/2020 19:02:57'!
PASSED!

!testRun: #InternalAPITest #test01CreateCartSuccessfulWithCorrectClientIdAndPassword stamp: 'ja 11/29/2020 19:02:57'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdPerCustomer stamp: 'ja 11/29/2020 19:02:57'!
PASSED!

!testRun: #InternalAPITest #test03CreateCartReturnsOneWithUnregisteredClientId stamp: 'ja 11/29/2020 19:02:57'!
PASSED!
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 19:04:17' prior: 50974778!
test02CreateCartReturnsDifferentIdPerCustomer

	| internalApi response1 id2|
	
	internalApi _ self internalApi.
 	
	response1 _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	id2 _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.	
	
	self deny: response1 = id2.
		
	! !
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 19:04:29' prior: 50975180!
test02CreateCartReturnsDifferentIdPerCustomer

	| internalApi response1 response2|
	
	internalApi _ self internalApi.
 	
	response1 _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	response2 _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.	
	
	self deny: response1 = response2.
		
	! !
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 19:04:59' prior: 50975192!
test02CreateCartReturnsDifferentIdPerCustomer

	| internalApi response1 response2|
	
	internalApi _ self internalApi.
 	
	response1 _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	response2 _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.	
	
	self deny: response1 payload = response2 payload.
		
	! !

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdPerCustomer stamp: 'ja 11/29/2020 19:05:16'!
PASSED!
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 19:05:46' prior: 50974731!
test03CreateCartReturnsOneWithUnregisteredClientId

	| internalApi response|
	
	internalApi _ self internalApi.
 	
	self should: [ internalApi createCartFor: 'Edsger Dijkstra' with: 'nanoDijkstra'. self fail ]
		raise: Error 
		withMessageText: InternalAPI userNotRegisteredErrorDescription.  
	
		
	! !
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 19:05:54' prior: 50975222!
test03CreateCartReturnsOneWithUnregisteredClientId

	| internalApi |
	
	internalApi _ self internalApi.
 	
	self should: [ internalApi createCartFor: 'Edsger Dijkstra' with: 'nanoDijkstra'. self fail ]
		raise: Error 
		withMessageText: InternalAPI userNotRegisteredErrorDescription.  
	
		
	! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 19:11:54'!
insureIsRegisteredUser: anUser with: aPassword 
	
	| aPasswordRegistered |
	
	aPasswordRegistered _ users at: anUser ifAbsent:[ self error: self class userNotRegisteredErrorDescription ].
	
	^ aPasswordRegistered = aPassword.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 19:13:41' prior: 50975043!
createCartFor: aUser with: aPassword 
	
	[ self isRegisteredUser: aUser with: aPassword ] on: Error do:[:error | ^UnsuccessfulResponse with: error].
	
	^ SuccessfulResponse with: self nextIdFree.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 19:13:52' prior: 50975258!
createCartFor: aUser with: aPassword 
	
	[ self isRegisteredUser: aUser with: aPassword ] on: Error do: [:error | ^UnsuccessfulResponse with: error].
	
	^ SuccessfulResponse with: self nextIdFree.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 19:14:22'!
ensureIsRegisteredUser: anUser with: aPassword 
	
	| aPasswordRegistered |
	
	aPasswordRegistered _ users at: anUser ifAbsent:[ self error: self class userNotRegisteredErrorDescription ].
	
	^ aPasswordRegistered = aPassword.! !

!methodRemoval: InternalAPI #insureIsRegisteredUser:with: stamp: 'ja 11/29/2020 19:14:26'!
insureIsRegisteredUser: anUser with: aPassword 
	
	| aPasswordRegistered |
	
	aPasswordRegistered _ users at: anUser ifAbsent:[ self error: self class userNotRegisteredErrorDescription ].
	
	^ aPasswordRegistered = aPassword.!

!methodRemoval: InternalAPI #isRegisteredUser:with: stamp: 'ja 11/29/2020 19:14:31'!
isRegisteredUser: aUser with: aPassword 
	
	| aPasswordRegistered |
	
	aPasswordRegistered _ users at: aUser ifAbsent:[ self error: self class userNotRegisteredErrorDescription ].
	
	^ aPasswordRegistered = aPassword.!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 19:15:01' prior: 50975268!
createCartFor: anUser with: aPassword 
	
	[ self ensureIsRegisteredUser: anUser with: aPassword ] on: Error do: [:error | ^UnsuccessfulResponse with: error].
	
	^ SuccessfulResponse with: self nextIdFree.! !
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 19:16:29' prior: 50975235!
test03CreateCartReturnsOneWithUnregisteredClientId

	| internalApi response |
	
	internalApi _ self internalApi.
 	
	response _ internalApi createCartFor: 'Edsger Dijkstra' with: 'nanoDijkstra'.
	
	self assert: response code = 1.
	self assert: response payload equals: InternalAPI userNotRegisteredErrorDescription. 
		
	
		
	! !

!testRun: #InternalAPITest #test03CreateCartReturnsOneWithUnregisteredClientId stamp: 'ja 11/29/2020 19:16:31'!
FAILURE!

!testRun: #InternalAPITest #test03CreateCartReturnsOneWithUnregisteredClientId stamp: 'ja 11/29/2020 19:16:31'!
FAILURE!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 19:18:38' prior: 50975307!
createCartFor: anUser with: aPassword 
	
	[ self ensureIsRegisteredUser: anUser with: aPassword ] on: Error do: [:error | ^UnsuccessfulResponse with: error messageText ].
	
	^ SuccessfulResponse with: self nextIdFree.! !

!testRun: #InternalAPITest #test03CreateCartReturnsOneWithUnregisteredClientId stamp: 'ja 11/29/2020 19:18:46'!
PASSED!

!testRun: #InternalAPITest #test01CreateCartSuccessfulWithCorrectClientIdAndPassword stamp: 'ja 11/29/2020 19:18:52'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdPerCustomer stamp: 'ja 11/29/2020 19:18:52'!
PASSED!

!testRun: #InternalAPITest #test03CreateCartReturnsOneWithUnregisteredClientId stamp: 'ja 11/29/2020 19:18:52'!
PASSED!
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 19:19:01' prior: 50975317!
test03CreateCartReturnsOneWithUnregisteredClientId

	| internalApi response |
	
	internalApi _ self internalApi.
 	
	response _ internalApi createCartFor: 'Edsger Dijkstra' with: 'nanoDijkstra'.
	
	self assert: response code = 1.
	
	self assert: response payload equals: InternalAPI userNotRegisteredErrorDescription. 
		
	
		
	! !
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 19:22:05'!
test04CreateCartSuccessfulEffectivlyCreatesCart

	| internalApi response |
	
	internalApi _ self internalApi.
 	
	response _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	self deny: (internalApi cartsOf: 'Alan Kay') isEmpty.
	
		
	! !
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 19:22:38' prior: 50975376!
test04CreateCartSuccessfulEffectivlyCreatesCart

	| internalApi response |
	
	internalApi _ self internalApi.
 	
	response _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	self assert: response code = 0.
	
	self deny: (internalApi cartsOf: 'Alan Kay') isEmpty.
	
		
	! !

!testRun: #InternalAPITest #test04CreateCartSuccessfulEffectivlyCreatesCart stamp: 'ja 11/29/2020 19:22:56'!
ERROR!

!testRun: #InternalAPITest #test04CreateCartSuccessfulEffectivlyCreatesCart stamp: 'ja 11/29/2020 19:22:56'!
ERROR!

!classDefinition: #InternalAPI category: #TusLibros stamp: 'ja 11/29/2020 19:24:25'!
Object subclass: #InternalAPI
	instanceVariableNames: 'users nextId carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 19:24:23' prior: 50975338!
createCartFor: anUser with: aPassword 
	
	[ self ensureIsRegisteredUser: anUser with: aPassword ] on: Error do: [:error | ^UnsuccessfulResponse with: error messageText ].
	
	carts add: anUser -> Cart new.
	
	^ SuccessfulResponse with: self nextIdFree.! !
!InternalAPI methodsFor: 'initialization' stamp: 'ja 11/29/2020 19:24:44' prior: 50974917!
initializeWith: aUsersCollection
	
	users _ aUsersCollection.
	
	carts _ Dictionary new.
	
	nextId _ 0.! !
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 19:26:37' prior: 50975387!
test04CreateCartSuccessfulEffectivlyCreatesCart

	| internalApi response |
	
	internalApi _ self internalApi.
 	
	response _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	self assert: response code = 0.
	
	self assert: (internalApi hasCartsOf: 'Alan Kay').
	
		
	! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 19:27:18'!
hasCartsOf: anUser
	
	^ carts includes: anUser.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 19:27:49' prior: 50975444!
hasCartsOf: anUser
	
	^ carts includesKey: anUser.! !

!testRun: #InternalAPITest #test04CreateCartSuccessfulEffectivlyCreatesCart stamp: 'ja 11/29/2020 19:27:59'!
PASSED!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 19:30:41' prior: 50975414!
createCartFor: anUser with: aPassword 
	
	| aCatalog |
	
	[ self ensureIsRegisteredUser: anUser with: aPassword ] on: Error do: [:error | ^UnsuccessfulResponse with: error messageText ].
	
	aCatalog _ OrderedCollection new.
	
	carts add: anUser -> (Cart acceptingItemsOf: aCatalog).
	
	^ SuccessfulResponse with: self nextIdFree.! !

!testRun: #InternalAPITest #test01CreateCartSuccessfulWithCorrectClientIdAndPassword stamp: 'ja 11/29/2020 19:34:37'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdPerCustomer stamp: 'ja 11/29/2020 19:34:39'!
PASSED!

!testRun: #InternalAPITest #test03CreateCartReturnsOneWithUnregisteredClientId stamp: 'ja 11/29/2020 19:34:41'!
PASSED!

!testRun: #InternalAPITest #test04CreateCartSuccessfulEffectivlyCreatesCart stamp: 'ja 11/29/2020 19:34:42'!
PASSED!
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 19:53:32'!
test05

	| internalApi response |
	
	internalApi _ self internalApi.
 	
	response _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	internalApi addToCartWith: response payload.

	self assert: response code = 0.
	
	self assert: (internalApi hasCartsOf: 'Alan Kay').
	
		
	! !
!InternalAPITest methodsFor: 'create test' stamp: 'ja 11/29/2020 19:55:41' prior: 50975486!
test05

	| internalApi response |
	
	internalApi _ self internalApi.
 	
	response _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	internalApi addToCartWith: response payload.

	self assert: response code = 0.
	
	self assert: (internalApi hasCartsOf: 'Alan Kay').	
	! !

!testRun: #InternalAPITest #test05 stamp: 'ja 11/29/2020 19:55:49'!
ERROR!

!testRun: #InternalAPITest #test05 stamp: 'ja 11/29/2020 19:55:49'!
ERROR!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 19:56:00'!
addToCartWith: aSmallInteger 
	self shouldBeImplemented.! !

!testRun: #InternalAPITest #test05 stamp: 'ja 11/29/2020 19:58:04'!
ERROR!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 19:58:16'!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 20:00:42' prior: 50975522!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity

	( carts includesKey: aCartId ) ifFalse: [ self error: self class cartNotFoundErrorDescription ].
	
	^ 0! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/29/2020 20:01:09' prior: 50975527!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity

	"( carts includesKey: aCartId ) ifFalse: [ self error: self class cartNotFoundErrorDescription ]."
	
	^ SuccessfulResponse with: 'OK'.! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 11/29/2020 20:04:12' prior: 50975498!
test05

	| internalApi responseCreate responseAdd |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseAdd _ internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3. 

	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload = '	OK'.
	! !

!testRun: #InternalAPITest #test05 stamp: 'ja 11/29/2020 20:04:13'!
FAILURE!

responseAdd payload!
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 11/29/2020 20:17:19' prior: 50975546!
test05

	| internalApi responseCreate responseAdd |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseAdd _ internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3. 

	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: '	OK'.
	! !

!testRun: #InternalAPITest #test05 stamp: 'ja 11/29/2020 20:17:21'!
FAILURE!

!testRun: #InternalAPITest #test05 stamp: 'ja 11/29/2020 20:17:34'!
FAILURE!

!testRun: #InternalAPITest #test05 stamp: 'ja 11/29/2020 20:17:34'!
FAILURE!

!methodRemoval: InternalAPI #addToCartWith: stamp: 'ja 11/29/2020 20:18:05'!
addToCartWith: aSmallInteger 
	self shouldBeImplemented.!
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 11/29/2020 20:18:22' prior: 50975563!
test05

	| internalApi responseCreate responseAdd |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseAdd _ internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3. 

	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	! !

!testRun: #InternalAPITest #test05 stamp: 'ja 11/29/2020 20:18:25'!
PASSED!

!testRun: #InternalAPITest #test05 stamp: 'ja 11/29/2020 20:23:07'!
PASSED!
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 11/29/2020 20:24:01'!
test05AddToCartSuccessfulWithCartId

	| internalApi responseCreate responseAdd |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseAdd _ internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3. 

	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	! !

!methodRemoval: InternalAPITest #test05 stamp: 'ja 11/29/2020 20:24:50'!
test05

	| internalApi responseCreate responseAdd |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseAdd _ internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3. 

	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	!

----QUIT----(29 November 2020 22:26:36) CuisUniversity-4365.image priorSource: 20566869!

----STARTUP---- (30 November 2020 17:15:15) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4365.image!


Object subclass: #InternalAPI
	instanceVariableNames: 'users nextId carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalAPI category: #TusLibros stamp: 'ja 11/30/2020 18:19:07'!
Object subclass: #InternalAPI
	instanceVariableNames: 'users nextId carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalAPI category: #TusLibros stamp: 'ja 11/30/2020 18:27:29'!
Object subclass: #InternalAPI
	instanceVariableNames: 'users nextId carts date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPI methodsFor: 'initialization' stamp: 'ja 11/30/2020 18:27:26'!
initializeWith: aUsersCollection on: aDate
	
	users _ aUsersCollection.
	
	date _ aDate .
	
	carts _ Dictionary new.
	
	nextId _ 0.! !
!InternalAPI methodsFor: 'initialization' stamp: 'ja 11/30/2020 18:27:33' prior: 50975662!
initializeWith: aUsersCollection on: aDate
	
	users _ aUsersCollection.
	
	date _ aDate.
	
	carts _ Dictionary new.
	
	nextId _ 0.! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 11/30/2020 18:30:06'!
with: aUsersCollection on: aDate
	
	^self new initializeWith: aUsersCollection on:aDate .! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 11/30/2020 18:30:20' prior: 50975677!
with: aUsersCollection on: aDate
	
	^self new initializeWith: aUsersCollection on: aDate.! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 11/30/2020 18:48:16'!
test10

	| internalApi responseCreate responseAdd |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseAdd _ internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3. 

	! !

Object subclass: #InternalAPIProxy
	instanceVariableNames: 'proxee modifications'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalAPIProxy category: #TusLibros stamp: 'ja 11/30/2020 18:49:28'!
Object subclass: #InternalAPIProxy
	instanceVariableNames: 'proxee modifications'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPIProxy class methodsFor: 'no messages' stamp: 'ja 11/30/2020 18:50:08'!
for: anInternalApi

	^ self new initializeFor: anInternalApi ! !
!InternalAPIProxy methodsFor: 'no messages' stamp: 'ja 11/30/2020 18:50:43'!
initializeFor: anInternalApi 

	proxee _ anInternalApi.
	
	modifications _ Dictionary new.! !
!InternalAPIProxy methodsFor: 'as yet unclassified' stamp: 'ja 11/30/2020 18:56:56' overrides: 16881366!
doesNotUnderstand: aMessage

	aMessage sendTo: proxee.! !
!InternalAPIProxy methodsFor: 'as yet unclassified' stamp: 'ja 11/30/2020 18:59:00' prior: 50975726 overrides: 16881366!
doesNotUnderstand: aMessage
	
	| returnValue |
	
	self ensureDateIsValid: aMessage.
	
	returnValue  _ aMessage sendTo: proxee.
	
	self updateModifications: aMessage.
	
	^ returnValue .! !

Object subclass: #InternalAPIProxy
	instanceVariableNames: 'proxee modifications'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InternalAPIProxy category: #TusLibros stamp: 'ja 11/30/2020 19:01:48'!
Object subclass: #InternalAPIProxy
	instanceVariableNames: 'proxee modifications'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRenamed: #InternalAPIProxy as: #CartExpirationProxy stamp: 'ja 11/30/2020 19:02:07'!
Smalltalk renameClassNamed: #InternalAPIProxy as: #CartExpirationProxy!
!InternalAPITest methodsFor: 'suport' stamp: 'ja 11/30/2020 19:02:39' prior: 50974585!
internalApi
	
	^ CartExpirationProxy for: (InternalAPI with: self authenticatedUsers).! !
!CartExpirationProxy methodsFor: 'as yet unclassified' stamp: 'ja 11/30/2020 19:04:52'!
ensureDateIsValid: aMessage! !
!CartExpirationProxy methodsFor: 'as yet unclassified' stamp: 'ja 11/30/2020 19:05:03'!
updateModifications: aMessage.! !
!CartExpirationProxy methodsFor: 'as yet unclassified' stamp: 'ja 11/30/2020 19:05:05' prior: 50975769!
updateModifications: aMessage! !
!InternalAPITest methodsFor: 'suport' stamp: 'ja 11/30/2020 19:11:27' prior: 50975759!
internalApi
	
	^ InternalAPI with: self authenticatedUsers.! !

!classRemoval: #CartExpirationProxy stamp: 'ja 11/30/2020 19:11:44'!
Object subclass: #CartExpirationProxy
	instanceVariableNames: 'proxee modifications'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/30/2020 19:15:33'!
xxx: aBlock yyy: aCartId on: aDate

	| returnValue |

	self ensureDateOf: aCartId isValidOn: aDate.
	
	returnValue _ aBlock value.
	
	self updateDateOf: aCartId to: aDate.
	
	^ returnValue .
	
	! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/30/2020 19:15:53'!
ensureDateOf: aCartId isValidOn: aDate! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/30/2020 19:16:01'!
updateDateOf: aCartId to: aDate! !

!methodRemoval: InternalAPI class #with:on: stamp: 'ja 11/30/2020 19:16:43'!
with: aUsersCollection on: aDate
	
	^self new initializeWith: aUsersCollection on: aDate.!

!methodRemoval: InternalAPI class #for:with: stamp: 'ja 11/30/2020 19:16:59'!
for: aClient with: aPassword 
	
	^self new initializeFor: aClient with: aPassword .!

!testRun: #InternalAPITest #test01CreateCartSuccessfulWithCorrectClientIdAndPassword stamp: 'ja 11/30/2020 19:17:11'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdPerCustomer stamp: 'ja 11/30/2020 19:17:13'!
PASSED!

!testRun: #InternalAPITest #test03CreateCartReturnsOneWithUnregisteredClientId stamp: 'ja 11/30/2020 19:17:15'!
PASSED!

!testRun: #InternalAPITest #test04CreateCartSuccessfulEffectivlyCreatesCart stamp: 'ja 11/30/2020 19:17:16'!
PASSED!

!testRun: #InternalAPITest #test05AddToCartSuccessfulWithCartId stamp: 'ja 11/30/2020 19:17:17'!
PASSED!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/30/2020 19:19:27'!
ensureExecutionOf: aBlock withCart: aCartId validOn: aDate

	| returnValue |

	self ensureDateOf: aCartId isValidOn: aDate.
	
	returnValue _ aBlock value.
	
	self updateDateOf: aCartId to: aDate.
	
	^ returnValue .
	
	! !

!methodRemoval: InternalAPI #xxx:yyy:on: stamp: 'ja 11/30/2020 19:19:31'!
xxx: aBlock yyy: aCartId on: aDate

	| returnValue |

	self ensureDateOf: aCartId isValidOn: aDate.
	
	returnValue _ aBlock value.
	
	self updateDateOf: aCartId to: aDate.
	
	^ returnValue .
	
	!

!classDefinition: #InternalAPI category: #TusLibros stamp: 'ja 11/30/2020 19:33:38'!
Object subclass: #InternalAPI
	instanceVariableNames: 'users nextId carts date modifications'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/30/2020 19:33:35' prior: 50975799!
ensureDateOf: aCartId isValidOn: aDate

	| halfHourAgo |
	
	halfHourAgo _ aDate - 30.
	
	((modifications includesKey: aCartId) and:[ modifications at: aCartId  < halfHourAgo ]) ifTrue:[self error: self class cartIsExpiredErrorDescription].! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/30/2020 19:34:11' prior: 50975803!
updateDateOf: aCartId to: aDate

	modifications at: aCartId put: aDate .! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 11/30/2020 19:34:39'!
cartIsExpiredErrorDescription

	^ 'Cart is expired'! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/30/2020 19:35:57'!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity on: aDate

	"( carts includesKey: aCartId ) ifFalse: [ self error: self class cartNotFoundErrorDescription ]."
	
	^ SuccessfulResponse with: 'OK'.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/30/2020 19:37:15' prior: 50975885!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity on: aDate

	"( carts includesKey: aCartId ) ifFalse: [ self error: self class cartNotFoundErrorDescription ]."
	
	self ensureExecutionOf: [self addToCart: aCartId withISBN: aISBN withQuantity: aQuantity on: aDate ] withCart: aCartId validOn: aDate.
	
	^ SuccessfulResponse with: 'OK'.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/30/2020 19:38:06' prior: 50975895!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity on: aDate

	"( carts includesKey: aCartId ) ifFalse: [ self error: self class cartNotFoundErrorDescription ]."
	
	self ensureExecutionOf: [self addToCart: aCartId withISBN: aISBN withQuantity: aQuantity] withCart: aCartId validOn: aDate.
	
	^ SuccessfulResponse with: 'OK'.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/30/2020 19:38:12' prior: 50975909!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity on: aDate

	"( carts includesKey: aCartId ) ifFalse: [ self error: self class cartNotFoundErrorDescription ]."
	
	self ensureExecutionOf: [self addToCart: aCartId withISBN: aISBN withQuantity: aQuantity] withCart: aCartId validOn: aDate.
	
	! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/30/2020 19:38:32' prior: 50975923!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity on: aDate

	"( carts includesKey: aCartId ) ifFalse: [ self error: self class cartNotFoundErrorDescription ]."
	
	self ensureExecutionOf: [ self addToCart: aCartId withISBN: aISBN withQuantity: aQuantity ] withCart: aCartId validOn: aDate.
	
	! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 11/30/2020 19:38:38' prior: 50975936!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity on: aDate

	"( carts includesKey: aCartId ) ifFalse: [ self error: self class cartNotFoundErrorDescription ]."
	
	^ self ensureExecutionOf: [ self addToCart: aCartId withISBN: aISBN withQuantity: aQuantity ] withCart: aCartId validOn: aDate.
	
	! !

Time now.!

a _ Time now. 
b _ Time now.
c _ a - b. 
c
!

c!
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 11/30/2020 19:44:19' prior: 50975608!
test05AddToCartSuccessfulWithCartId

	| internalApi responseCreate responseAdd |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseAdd _ internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3 on: Time now. 

	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	! !

a _ DateAndTime now. 
b _ 30 minutes.
c _ a - b. 
c
!

----QUIT----(30 November 2020 21:39:50) CuisUniversity-4365.image priorSource: 20607526!

----STARTUP---- (1 December 2020 16:44:58) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4365.image!

!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 16:46:58' prior: 50975863!
ensureDateOf: aCartId isValidOn: aDate

	| halfHourAgo |
	
	halfHourAgo _ aDate - 30 minutes.
	
	((modifications includesKey: aCartId) and:[ modifications at: aCartId  < halfHourAgo ]) ifTrue:[self error: self class cartIsExpiredErrorDescription].! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/1/2020 16:47:51' prior: 50975964!
test05AddToCartSuccessfulWithCartId

	| internalApi responseCreate responseAdd |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseAdd _ internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3 on: DateAndTime now. 

	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	! !

!testRun: #InternalAPITest #test05AddToCartSuccessfulWithCartId stamp: 'ja 12/1/2020 16:48:21'!
ERROR!
!InternalAPI methodsFor: 'initialization' stamp: 'ja 12/1/2020 16:51:08' prior: 50975425!
initializeWith: aUsersCollection
	
	users _ aUsersCollection.
	
	carts _ Dictionary new.
	
	modifications _ Dictionary new.
	
	nextId _ 0.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 16:54:07' prior: 50975458!
createCartFor: anUser with: aPassword 
	
	| aCatalog idCart |
	
	[ self ensureIsRegisteredUser: anUser with: aPassword ] on: Error do: [:error | ^UnsuccessfulResponse with: error messageText ].
	
	aCatalog _ OrderedCollection new.
	
	carts add: anUser -> (Cart acceptingItemsOf: aCatalog).
	
	idCart _ self nextIdFree.
	
	modifications add: idCart.
	
	^ SuccessfulResponse with: idCart.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 16:56:10'!
createCartFor: anUser with: aPassword on: aDate
	
	| aCatalog idCart |
	
	[ self ensureIsRegisteredUser: anUser with: aPassword ] on: Error do: [:error | ^UnsuccessfulResponse with: error messageText ].
	
	aCatalog _ OrderedCollection new.
	
	carts add: anUser -> (Cart acceptingItemsOf: aCatalog).
	
	idCart _ self nextIdFree.
	
	modifications add: idCart -> aDate.
	
	^ SuccessfulResponse with: idCart.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 16:56:49' prior: 50976026!
createCartFor: anUser with: aPassword 
	
	| aCatalog |
	
	[ self ensureIsRegisteredUser: anUser with: aPassword ] on: Error do: [:error | ^UnsuccessfulResponse with: error messageText ].
	
	aCatalog _ OrderedCollection new.
	
	carts add: anUser -> (Cart acceptingItemsOf: aCatalog).
	
	^ SuccessfulResponse with: self nextIdFree.! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/1/2020 16:58:40' prior: 50975999!
test05AddToCartSuccessfulWithCartId

	| internalApi responseCreate responseAdd |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos' on: DateAndTime now.
	
	responseAdd _ internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3 on: DateAndTime now. 

	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'suport' stamp: 'ja 12/1/2020 17:20:43' prior: 50975778!
internalApi
	
	^ InternalAPI with: self authenticatedUsers
				on: DateAndTime new.! !
!InternalAPITest methodsFor: 'suport' stamp: 'ja 12/1/2020 17:20:47' prior: 50976087!
internalApi
	
	^ InternalAPI with: self authenticatedUsers
				on: DateAndTime now.! !
!InternalAPITest methodsFor: 'suport' stamp: 'ja 12/1/2020 17:21:14' prior: 50976093!
internalApi
	
	^ InternalAPI with: self authenticatedUsers on: DateAndTime now.! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 17:21:47'!
with: aUsersCollection on: aDate
	
	^self new initializeWith: aUsersCollection on: aDate.! !
!InternalAPI methodsFor: 'initialization' stamp: 'ja 12/1/2020 17:22:06' prior: 50975670!
initializeWith: aUsersCollection on: aDate
	
	users _ aUsersCollection.
	
	date _ aDate.
	
	carts _ Dictionary new.
	
	modifications _ Dictionary new.
	
	nextId _ 0.! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/1/2020 17:23:08' prior: 50976071!
test05AddToCartSuccessfulWithCartId

	| internalApi responseCreate responseAdd |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseAdd _ internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3 on: DateAndTime now. 

	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 17:23:56' prior: 50976057!
createCartFor: anUser with: aPassword 
	
	| aCatalog idCart |
	
	[ self ensureIsRegisteredUser: anUser with: aPassword ] on: Error do: [:error | ^UnsuccessfulResponse with: error messageText ].
	
	aCatalog _ OrderedCollection new.
	
	carts add: anUser -> (Cart acceptingItemsOf: aCatalog).
	
	idCart _ self nextIdFree.
	
	modifications add: idCart -> date .
	
	^ SuccessfulResponse with: idCart.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 17:23:58' prior: 50976136!
createCartFor: anUser with: aPassword 
	
	| aCatalog idCart |
	
	[ self ensureIsRegisteredUser: anUser with: aPassword ] on: Error do: [:error | ^UnsuccessfulResponse with: error messageText ].
	
	aCatalog _ OrderedCollection new.
	
	carts add: anUser -> (Cart acceptingItemsOf: aCatalog).
	
	idCart _ self nextIdFree.
	
	modifications add: idCart -> date.
	
	^ SuccessfulResponse with: idCart.! !

!methodRemoval: InternalAPI #createCartFor:with:on: stamp: 'ja 12/1/2020 17:28:53'!
createCartFor: anUser with: aPassword on: aDate
	
	| aCatalog idCart |
	
	[ self ensureIsRegisteredUser: anUser with: aPassword ] on: Error do: [:error | ^UnsuccessfulResponse with: error messageText ].
	
	aCatalog _ OrderedCollection new.
	
	carts add: anUser -> (Cart acceptingItemsOf: aCatalog).
	
	idCart _ self nextIdFree.
	
	modifications add: idCart -> aDate.
	
	^ SuccessfulResponse with: idCart.!

!testRun: #InternalAPITest #test01CreateCartSuccessfulWithCorrectClientIdAndPassword stamp: 'ja 12/1/2020 17:29:41'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdPerCustomer stamp: 'ja 12/1/2020 17:29:43'!
PASSED!

!testRun: #InternalAPITest #test03CreateCartReturnsOneWithUnregisteredClientId stamp: 'ja 12/1/2020 17:29:44'!
PASSED!

!testRun: #InternalAPITest #test04CreateCartSuccessfulEffectivlyCreatesCart stamp: 'ja 12/1/2020 17:29:45'!
PASSED!

!testRun: #InternalAPITest #test05AddToCartSuccessfulWithCartId stamp: 'ja 12/1/2020 17:29:50'!
ERROR!

!testRun: #InternalAPITest #test05AddToCartSuccessfulWithCartId stamp: 'ja 12/1/2020 17:29:50'!
ERROR!

!testRun: #InternalAPITest #test05AddToCartSuccessfulWithCartId stamp: 'ja 12/1/2020 17:30:16'!
ERROR!

!testRun: #InternalAPITest #test05AddToCartSuccessfulWithCartId stamp: 'ja 12/1/2020 17:30:16'!
ERROR!

!testRun: #InternalAPITest #test05AddToCartSuccessfulWithCartId stamp: 'ja 12/1/2020 17:30:51'!
ERROR!

 modifications at: aCartId!

modifications at: aCartId!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 17:36:21' prior: 50975988!
ensureDateOf: aCartId isValidOn: aDate

	| halfHourAgo |
	
	halfHourAgo _ aDate - 30 minutes.
	
	((modifications includesKey: aCartId) and:[ modifications at: aCartId  < halfHourAgo ]) ifTrue:[self error: self class cartIsExpiredErrorDescription].! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 17:37:26' prior: 50976216!
ensureDateOf: aCartId isValidOn: aDate

	| halfHourAgo |
	
	halfHourAgo _ DateAndTime new.
	
	halfHourAgo _ aDate - 30 minutes.
	
	((modifications includesKey: aCartId) and:[ modifications at: aCartId  < halfHourAgo ]) ifTrue:[self error: self class cartIsExpiredErrorDescription].! !

modifications at: aCartId!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 17:41:23' prior: 50976227!
ensureDateOf: aCartId isValidOn: aDate

	| halfHourAgo |
	
	halfHourAgo _ aDate - 30 minutes.
	
	((modifications includesKey: aCartId) and:[ modifications at: aCartId  < halfHourAgo ]) ifTrue:[self error: self class cartIsExpiredErrorDescription].! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 17:44:06' prior: 50976240!
ensureDateOf: aCartId isValidOn: aDate

	| halfHourAgo |
	
	halfHourAgo _ aDate - DateAndTime fromSeconds: 1800.
	
	((modifications includesKey: aCartId) and:[ modifications at: aCartId  < halfHourAgo ]) ifTrue:[self error: self class cartIsExpiredErrorDescription].! !

!testRun: #InternalAPITest #test05AddToCartSuccessfulWithCartId stamp: 'ja 12/1/2020 17:44:08'!
ERROR!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 17:44:37' prior: 50976251!
ensureDateOf: aCartId isValidOn: aDate

	| halfHourAgo |
	
	halfHourAgo _ aDate - (DateAndTime fromSeconds: 1800).
	
	((modifications includesKey: aCartId) and:[ modifications at: aCartId  < halfHourAgo ]) ifTrue:[self error: self class cartIsExpiredErrorDescription].! !

!testRun: #InternalAPITest #test05AddToCartSuccessfulWithCartId stamp: 'ja 12/1/2020 17:44:48'!
ERROR!
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/1/2020 17:45:31' prior: 50976120!
test05AddToCartSuccessfulWithCartId

	| internalApi responseCreate responseAdd |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseAdd _ internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3 on: (DateAndTime now). 

	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	! !

!testRun: #InternalAPITest #test05AddToCartSuccessfulWithCartId stamp: 'ja 12/1/2020 17:45:34'!
ERROR!

!testRun: #InternalAPITest #test05AddToCartSuccessfulWithCartId stamp: 'ja 12/1/2020 17:46:51'!
ERROR!

!testRun: #InternalAPITest #test05AddToCartSuccessfulWithCartId stamp: 'ja 12/1/2020 17:46:51'!
ERROR!

!testRun: #InternalAPITest #test05AddToCartSuccessfulWithCartId stamp: 'ja 12/1/2020 17:47:39'!
ERROR!

!testRun: #InternalAPITest #test05AddToCartSuccessfulWithCartId stamp: 'ja 12/1/2020 17:47:39'!
ERROR!
!DateAndTime methodsFor: 'squeak protocol' stamp: 'ja 12/1/2020 17:52:57' prior: 16828922!
setJdn: j seconds: s nano: n offset: o

jdn := j.
seconds := s.
nanos :=  n.
offset :=  o.

^self
! !

!testRun: #InternalAPITest #test05AddToCartSuccessfulWithCartId stamp: 'ja 12/1/2020 17:53:10'!
ERROR!

!testRun: #InternalAPITest #test05AddToCartSuccessfulWithCartId stamp: 'ja 12/1/2020 17:53:10'!
ERROR!
!DateAndTime methodsFor: 'squeak protocol' stamp: 'ja 12/1/2020 17:53:32' prior: 50976313!
setJdn: j seconds: s nano: n offset: o

jdn := j.
seconds := s.
nanos :=  n.
offset :=  o
! !

!testRun: #InternalAPITest #test05AddToCartSuccessfulWithCartId stamp: 'ja 12/1/2020 17:54:48'!
ERROR!

!testRun: #InternalAPITest #test05AddToCartSuccessfulWithCartId stamp: 'ja 12/1/2020 17:54:48'!
ERROR!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 17:55:17' prior: 50976266!
ensureDateOf: aCartId isValidOn: aDate

	| halfHourAgo |
	
	halfHourAgo _ aDate - 30 minutes.
	
	((modifications includesKey: aCartId) and:[ modifications at: aCartId  < halfHourAgo ]) ifTrue:[self error: self class cartIsExpiredErrorDescription].! !

!testRun: #InternalAPITest #test05AddToCartSuccessfulWithCartId stamp: 'ja 12/1/2020 17:55:20'!
ERROR!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 17:56:48' prior: 50976339!
ensureDateOf: aCartId isValidOn: aDate

	| halfHourAgo |
	
	halfHourAgo _ aDate - 30 minutes.
	
	((modifications includesKey: aCartId) and:[ (modifications at: aCartId)  < halfHourAgo ]) ifTrue:[self error: self class cartIsExpiredErrorDescription].! !

!testRun: #InternalAPITest #test05AddToCartSuccessfulWithCartId stamp: 'ja 12/1/2020 17:57:47'!
PASSED!

!testRun: #InternalAPITest #test05AddToCartSuccessfulWithCartId stamp: 'ja 12/1/2020 17:57:51'!
PASSED!
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/1/2020 18:00:53'!
test06AddToCartSuccessfulEffectivlyAddedToCart

	| internalApi responseCreate responseAdd |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseAdd _ internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3 on: (DateAndTime now). 

	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/1/2020 18:07:02' prior: 50976371!
test06AddToCartSuccessfulEffectivlyAddedToCart

	| internalApi responseCreate responseAdd idCart ISBN|
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 

	self assert: (internalApi cart: idCart has: ISBN times: 3).
	! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/1/2020 18:07:44' prior: 50976387!
test06AddToCartSuccessfulEffectivlyAddedToCart

	| internalApi responseCreate responseAdd idCart ISBN|
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 

	self assert: (internalApi cart: idCart has: ISBN times: 3).
	
	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	! !

!testRun: #InternalAPITest #test06AddToCartSuccessfulEffectivlyAddedToCart stamp: 'ja 12/1/2020 18:07:51'!
ERROR!

!testRun: #InternalAPITest #test06AddToCartSuccessfulEffectivlyAddedToCart stamp: 'ja 12/1/2020 18:07:51'!
ERROR!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 18:08:01'!
cart: aSmallInteger has: aString times: aSmallInteger3 
	self shouldBeImplemented.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 18:08:39' prior: 50976431!
cart: aCartId has: aISBN times: anAmount 
	
	
	! !

!classDefinition: #InternalAPI category: #TusLibros stamp: 'ja 12/1/2020 18:13:36'!
Object subclass: #InternalAPI
	instanceVariableNames: 'users nextId carts date modifications cartsPerUser'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPI methodsFor: 'API' stamp: 'ja 12/1/2020 18:13:32' prior: 50976152!
createCartFor: anUser with: aPassword 
	
	| aCatalog idCart cart|
	
	[ self ensureIsRegisteredUser: anUser with: aPassword ] on: Error do: [:error | ^UnsuccessfulResponse with: error messageText ].
	
	aCatalog _ OrderedCollection new.
	
	cart _ Cart acceptingItemsOf: aCatalog.
	
	cartsPerUser add: anUser -> cart.
	
	idCart _ self nextIdFree.
	
	carts add: idCart -> cart.
	
	modifications add: idCart -> date.
	
	^ SuccessfulResponse with: idCart.! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/1/2020 18:13:51' prior: 50976450!
createCartFor: anUser with: aPassword 
	
	| aCatalog idCart cart|
	
	[ self ensureIsRegisteredUser: anUser with: aPassword ] on: Error do: [:error | ^UnsuccessfulResponse with: error messageText ].
	
	aCatalog _ OrderedCollection new.
	
	cart _ Cart acceptingItemsOf: aCatalog.
	
	idCart _ self nextIdFree.
	
	cartsPerUser add: anUser -> cart.
	
	carts add: idCart -> cart.
	
	modifications add: idCart -> date.
	
	^ SuccessfulResponse with: idCart.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 18:15:42' prior: 50976437!
cart: aCartId has: aISBN times: anAmount 
	
	| cart |
	
	cart _ carts at: aCartId .
	
	^ cart occurrencesOf: aISBN = anAmount .! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 18:16:22' prior: 50976485!
cart: aCartId has: aISBN times: anAmount 
	
	| cart |
	
	cart _ carts at: aCartId .
	
	^ (cart includes: aISBN) and: [cart occurrencesOf: aISBN = anAmount ].! !

!testRun: #InternalAPITest #test06AddToCartSuccessfulEffectivlyAddedToCart stamp: 'ja 12/1/2020 18:16:26'!
ERROR!

!testRun: #InternalAPITest #test06AddToCartSuccessfulEffectivlyAddedToCart stamp: 'ja 12/1/2020 18:16:43'!
ERROR!

!testRun: #InternalAPITest #test06AddToCartSuccessfulEffectivlyAddedToCart stamp: 'ja 12/1/2020 18:16:45'!
ERROR!

!testRun: #InternalAPITest #test06AddToCartSuccessfulEffectivlyAddedToCart stamp: 'ja 12/1/2020 18:17:04'!
ERROR!

!testRun: #InternalAPITest #test06AddToCartSuccessfulEffectivlyAddedToCart stamp: 'ja 12/1/2020 18:17:36'!
ERROR!
!InternalAPI methodsFor: 'initialization' stamp: 'ja 12/1/2020 18:18:05' prior: 50976018!
initializeWith: aUsersCollection
	
	users _ aUsersCollection.
	
	carts _ Dictionary new.
	
	cartsPerUser _ Dictionary new.
	
	modifications _ Dictionary new.
	
	nextId _ 0.! !

!testRun: #InternalAPITest #test06AddToCartSuccessfulEffectivlyAddedToCart stamp: 'ja 12/1/2020 18:18:10'!
ERROR!

!testRun: #InternalAPITest #test06AddToCartSuccessfulEffectivlyAddedToCart stamp: 'ja 12/1/2020 18:18:10'!
ERROR!

!testRun: #InternalAPITest #test06AddToCartSuccessfulEffectivlyAddedToCart stamp: 'ja 12/1/2020 18:18:30'!
ERROR!

!methodRemoval: InternalAPI #initializeWith: stamp: 'ja 12/1/2020 18:18:45'!
initializeWith: aUsersCollection
	
	users _ aUsersCollection.
	
	carts _ Dictionary new.
	
	cartsPerUser _ Dictionary new.
	
	modifications _ Dictionary new.
	
	nextId _ 0.!
!InternalAPI methodsFor: 'initialization' stamp: 'ja 12/1/2020 18:18:55' prior: 50976111!
initializeWith: aUsersCollection on: aDate
	
	users _ aUsersCollection.
	
	date _ aDate.
	
	carts _ Dictionary new.
	
	cartsPerUser _ Dictionary new.
	
	modifications _ Dictionary new.
	
	nextId _ 0.! !

!testRun: #InternalAPITest #test06AddToCartSuccessfulEffectivlyAddedToCart stamp: 'ja 12/1/2020 18:18:59'!
FAILURE!

!testRun: #InternalAPITest #test06AddToCartSuccessfulEffectivlyAddedToCart stamp: 'ja 12/1/2020 18:18:59'!
FAILURE!
!InternalAPI methodsFor: 'API' stamp: 'ja 12/1/2020 18:20:13' prior: 50975536!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity

	"( carts includesKey: aCartId ) ifFalse: [ self error: self class cartNotFoundErrorDescription ]."
	
	| cart |
	
	cart _ Cart new.
	
	^ SuccessfulResponse with: 'OK'.! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/1/2020 18:21:14' prior: 50976563!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity

	"( carts includesKey: aCartId ) ifFalse: [ self error: self class cartNotFoundErrorDescription ]."
	
	| cart |
	
	cart _ Cart add: aQuantity of: aISBN.
	
	^ SuccessfulResponse with: 'OK'.! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/1/2020 18:22:11' prior: 50976573!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity

	"( carts includesKey: aCartId ) ifFalse: [ self error: self class cartNotFoundErrorDescription ]."
	
	| cart |
	
	cart _ carts at: aCartId. 
	
	 cart add: aQuantity of: aISBN.
	
	^ SuccessfulResponse with: 'OK'.! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/1/2020 18:22:23' prior: 50976584!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity

	"( carts includesKey: aCartId ) ifFalse: [ self error: self class cartNotFoundErrorDescription ]."
	
	| cart |
	
	cart _ carts at: aCartId. 
	
	cart add: aQuantity of: aISBN.
	
	^ SuccessfulResponse with: 'OK'.! !

!testRun: #InternalAPITest #test06AddToCartSuccessfulEffectivlyAddedToCart stamp: 'ja 12/1/2020 18:22:39'!
ERROR!

!testRun: #InternalAPITest #test06AddToCartSuccessfulEffectivlyAddedToCart stamp: 'ja 12/1/2020 18:22:39'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ja 12/1/2020 18:23:35'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ja 12/1/2020 18:23:35'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ja 12/1/2020 18:23:35'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ja 12/1/2020 18:23:35'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ja 12/1/2020 18:23:35'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ja 12/1/2020 18:23:35'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ja 12/1/2020 18:23:35'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ja 12/1/2020 18:23:35'!
PASSED!
!InternalAPI methodsFor: 'API' stamp: 'ja 12/1/2020 18:24:52' prior: 50976467!
createCartFor: anUser with: aPassword 
	
	| aCatalog idCart cart|
	
	[ self ensureIsRegisteredUser: anUser with: aPassword ] on: Error do: [:error | ^UnsuccessfulResponse with: error messageText ].
	
	aCatalog _ Dictionary new.
	
	cart _ Cart acceptingItemsOf: aCatalog.
	
	idCart _ self nextIdFree.
	
	cartsPerUser add: anUser -> cart.
	
	carts add: idCart -> cart.
	
	modifications add: idCart -> date.
	
	^ SuccessfulResponse with: idCart.! !
!InternalAPITest methodsFor: 'suport' stamp: 'ja 12/1/2020 18:26:59' prior: 50976099!
internalApi
	
	| catalog |
	
	catalog _ Dictionary new.
	catalog add: 'book'.
	
	^ InternalAPI with: self authenticatedUsers 
				on: DateAndTime now 
				usingCatalog:  catalog .! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 18:27:31'!
with: aUsersCollection on: aDate usingCatalog: aCatalog
	
	^self new initializeWith: aUsersCollection on: aDate .! !
!InternalAPITest methodsFor: 'suport' stamp: 'ja 12/1/2020 18:28:42' prior: 50976657!
internalApi
	
	| catalog |
	
	catalog _ Dictionary new.
	catalog add: 'book' -> 100.
	
	^ InternalAPI with: self authenticatedUsers 
				on: DateAndTime now 
				usingCatalog:  catalog .! !
!InternalAPITest methodsFor: 'suport' stamp: 'ja 12/1/2020 18:29:15' prior: 50976673!
internalApi
	
	| catalog |
	
	catalog _ Dictionary new.
	catalog add: 'book' -> 100.
	
	^ InternalAPI with: self authenticatedUsers 
				on: DateAndTime now 
				usingCatalog: catalog .! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 18:30:00' prior: 50976666!
with: aUsersCollection on: aDate usingCatalog: aCatalog
	
	^self new initializeWith: aUsersCollection on: aDate usingCatalog: aCatalog .! !

!classDefinition: #InternalAPI category: #TusLibros stamp: 'ja 12/1/2020 18:30:40'!
Object subclass: #InternalAPI
	instanceVariableNames: 'users nextId carts date modifications cartsPerUser catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPI methodsFor: 'initialization' stamp: 'ja 12/1/2020 18:30:37'!
initializeWith: aUsersCollection on: aDate usingCatalog: aCatalog
	
	users _ aUsersCollection.
	
	date _ aDate.
	
	carts _ Dictionary new.
	
	catalog _ aCatalog.
	
	cartsPerUser _ Dictionary new.
	
	modifications _ Dictionary new.
	
	nextId _ 0.! !

!methodRemoval: InternalAPI #initializeWith:on: stamp: 'ja 12/1/2020 18:30:45'!
initializeWith: aUsersCollection on: aDate
	
	users _ aUsersCollection.
	
	date _ aDate.
	
	carts _ Dictionary new.
	
	cartsPerUser _ Dictionary new.
	
	modifications _ Dictionary new.
	
	nextId _ 0.!

!testRun: #InternalAPITest #test06AddToCartSuccessfulEffectivlyAddedToCart stamp: 'ja 12/1/2020 18:31:05'!
ERROR!

!testRun: #InternalAPITest #test06AddToCartSuccessfulEffectivlyAddedToCart stamp: 'ja 12/1/2020 18:31:05'!
ERROR!
!InternalAPI methodsFor: 'API' stamp: 'ja 12/1/2020 18:32:09' prior: 50976640!
createCartFor: anUser with: aPassword 
	
	| aCatalog idCart cart|
	
	[ self ensureIsRegisteredUser: anUser with: aPassword ] on: Error do: [:error | ^UnsuccessfulResponse with: error messageText ].
	
	aCatalog _ Dictionary new.
	
	cart _ Cart acceptingItemsOf: catalog.
	
	idCart _ self nextIdFree.
	
	cartsPerUser add: anUser -> cart.
	
	carts add: idCart -> cart.
	
	modifications add: idCart -> date.
	
	^ SuccessfulResponse with: idCart.! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/1/2020 18:32:20' prior: 50976735!
createCartFor: anUser with: aPassword 
	
	| idCart cart|
	
	[ self ensureIsRegisteredUser: anUser with: aPassword ] on: Error do: [:error | ^UnsuccessfulResponse with: error messageText ].
	
	cart _ Cart acceptingItemsOf: catalog.
	
	idCart _ self nextIdFree.
	
	cartsPerUser add: anUser -> cart.
	
	carts add: idCart -> cart.
	
	modifications add: idCart -> date.
	
	^ SuccessfulResponse with: idCart.! !

!testRun: #InternalAPITest #test06AddToCartSuccessfulEffectivlyAddedToCart stamp: 'ja 12/1/2020 18:32:27'!
ERROR!

!testRun: #InternalAPITest #test06AddToCartSuccessfulEffectivlyAddedToCart stamp: 'ja 12/1/2020 18:32:27'!
ERROR!

cart includes: aISBN!

cart occurrencesOf: aISBN = anAmount!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 18:33:26' prior: 50976493!
cart: aCartId has: aISBN times: anAmount 
	
	| cart |
	
	cart _ carts at: aCartId .
	
	^ (cart includes: aISBN) and: [(cart occurrencesOf: aISBN) = anAmount ].! !

!testRun: #InternalAPITest #test06AddToCartSuccessfulEffectivlyAddedToCart stamp: 'ja 12/1/2020 18:33:30'!
PASSED!

!testRun: #InternalAPITest #test06AddToCartSuccessfulEffectivlyAddedToCart stamp: 'ja 12/1/2020 18:33:33'!
PASSED!
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/1/2020 18:36:47'!
test07AddToCartUnsuccessfulWithCartInvalid

	| internalApi responseCreate responseAdd idCart ISBN|
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ self invalidIdCart.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 

	self assert: (internalApi cart: idCart has: ISBN times: 3).
	
	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'suport' stamp: 'ja 12/1/2020 18:37:14'!
invalidIdCart

	^ 'Invalid id cart'! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/1/2020 18:41:56' prior: 50976792!
test07AddToCartUnsuccessfulWithCartInvalid

	| internalApi responseCreate responseAdd idCart ISBN|
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ self invalidIdCart.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 

	self assert: (internalApi cart: idCart has: ISBN times: 3).
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: InternalAPI cartNotRegisteredErrorDescription.
	! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 18:42:33'!
cartNotRegisteredErrorDescription

	^ 'Cart is not registered'! !

!testRun: #InternalAPITest #test07AddToCartUnsuccessfulWithCartInvalid stamp: 'ja 12/1/2020 18:42:52'!
ERROR!

!testRun: #InternalAPITest #test07AddToCartUnsuccessfulWithCartInvalid stamp: 'ja 12/1/2020 18:42:52'!
ERROR!
!InternalAPI methodsFor: 'API' stamp: 'ja 12/1/2020 18:45:21' prior: 50976596!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity

	"( carts includesKey: aCartId ) ifFalse: [ self error: self class cartNotFoundErrorDescription ]."
	
	| cart |
	
	[ cart _ carts at: aCartId ] on: Error do: [:error | ^ UnsuccessfulResponse with: error messageText ].
	
	cart add: aQuantity of: aISBN.
	
	^ SuccessfulResponse with: 'OK'.! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/1/2020 18:45:28' prior: 50976848!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity

	"( carts includesKey: aCartId ) ifFalse: [ self error: self class cartNotFoundErrorDescription ]."
	
	| cart |
	
	[ cart _ carts at: aCartId ] on: Error do: [ :error | ^ UnsuccessfulResponse with: error messageText ].
	
	cart add: aQuantity of: aISBN.
	
	^ SuccessfulResponse with: 'OK'.! !

!testRun: #InternalAPITest #test07AddToCartUnsuccessfulWithCartInvalid stamp: 'ja 12/1/2020 18:45:35'!
ERROR!

!testRun: #InternalAPITest #test07AddToCartUnsuccessfulWithCartInvalid stamp: 'ja 12/1/2020 18:45:35'!
ERROR!
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/1/2020 18:46:34' prior: 50976815!
test07AddToCartUnsuccessfulWithCartInvalid

	| internalApi responseCreate responseAdd idCart ISBN|
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ self invalidIdCart.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: InternalAPI cartNotRegisteredErrorDescription.
	! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/1/2020 18:46:52' prior: 50976883!
test07AddToCartUnsuccessfulWithCartInvalid

	| internalApi responseAdd idCart ISBN|
	
	internalApi _ self internalApi.
 	
	internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ self invalidIdCart.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: InternalAPI cartNotRegisteredErrorDescription.
	! !

!testRun: #InternalAPITest #test07AddToCartUnsuccessfulWithCartInvalid stamp: 'ja 12/1/2020 18:46:57'!
FAILURE!

!testRun: #InternalAPITest #test07AddToCartUnsuccessfulWithCartInvalid stamp: 'ja 12/1/2020 18:46:57'!
FAILURE!

!testRun: #InternalAPITest #test07AddToCartUnsuccessfulWithCartInvalid stamp: 'ja 12/1/2020 18:48:47'!
FAILURE!

!testRun: #InternalAPITest #test07AddToCartUnsuccessfulWithCartInvalid stamp: 'ja 12/1/2020 18:48:47'!
FAILURE!
!InternalAPI methodsFor: 'API' stamp: 'ja 12/1/2020 18:51:06' prior: 50976862!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity

	"( carts includesKey: aCartId ) ifFalse: [ self error: self class cartNotFoundErrorDescription ]."
	
	| cart |
	
	[ cart _ carts at: aCartId ] on: Error do: [^ UnsuccessfulResponse with: self class cartNotRegisteredErrorDescription messageText ].
	
	cart add: aQuantity of: aISBN.
	
	^ SuccessfulResponse with: 'OK'.! !

!testRun: #InternalAPITest #test07AddToCartUnsuccessfulWithCartInvalid stamp: 'ja 12/1/2020 18:51:13'!
ERROR!

!testRun: #InternalAPITest #test07AddToCartUnsuccessfulWithCartInvalid stamp: 'ja 12/1/2020 18:51:13'!
ERROR!
!InternalAPI methodsFor: 'API' stamp: 'ja 12/1/2020 18:51:39' prior: 50976934!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity

	"( carts includesKey: aCartId ) ifFalse: [ self error: self class cartNotFoundErrorDescription ]."
	
	| cart |
	
	[ cart _ carts at: aCartId ] on: Error do: [^ UnsuccessfulResponse with: (self class cartNotRegisteredErrorDescription) messageText ].
	
	cart add: aQuantity of: aISBN.
	
	^ SuccessfulResponse with: 'OK'.! !

!testRun: #InternalAPITest #test07AddToCartUnsuccessfulWithCartInvalid stamp: 'ja 12/1/2020 18:51:44'!
ERROR!
!InternalAPI methodsFor: 'API' stamp: 'ja 12/1/2020 18:52:04' prior: 50976956!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity

	"( carts includesKey: aCartId ) ifFalse: [ self error: self class cartNotFoundErrorDescription ]."
	
	| cart |
	
	[ cart _ carts at: aCartId ] on: Error do: [^ UnsuccessfulResponse with: (self class cartNotRegisteredErrorDescription) ].
	
	cart add: aQuantity of: aISBN.
	
	^ SuccessfulResponse with: 'OK'.! !

!testRun: #InternalAPITest #test07AddToCartUnsuccessfulWithCartInvalid stamp: 'ja 12/1/2020 18:52:08'!
PASSED!
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/1/2020 18:54:58'!
test08AddToCartUnsuccessfulWithIvalidISBN

	| internalApi responseAdd idCart ISBN|
	
	internalApi _ self internalApi.
 	
	internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ internalApi payload .
	
	ISBN _ self invalidISBN.
	
	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: InternalAPI cartNotRegisteredErrorDescription.
	! !
!InternalAPITest methodsFor: 'suport' stamp: 'ja 12/1/2020 18:56:06'!
invalidISBN

	^ 'Invalid ISBN'! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/1/2020 18:56:53' prior: 50976992!
test08AddToCartUnsuccessfulWithIvalidISBN

	| internalApi responseAdd idCart ISBN|
	
	internalApi _ self internalApi.
 	
	internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ internalApi payload .
	
	ISBN _ self invalidISBN.
	
	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: InternalAPI ISBNNotRegisteredErrorDescription.
	! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 18:57:34'!
ISBNNotRegisteredErrorDescription

	^ 'ISBN is not registered'! !

!testRun: #InternalAPITest #test08AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/1/2020 18:57:51'!
ERROR!

!testRun: #InternalAPITest #test08AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/1/2020 18:57:51'!
ERROR!
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/1/2020 18:58:48' prior: 50977014!
test08AddToCartUnsuccessfulWithIvalidISBN

	| responseCreate internalApi responseAdd idCart ISBN|
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ self invalidISBN.
	
	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: InternalAPI ISBNNotRegisteredErrorDescription.
	! !

!testRun: #InternalAPITest #test08AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/1/2020 18:58:52'!
ERROR!

!testRun: #InternalAPITest #test08AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/1/2020 18:58:52'!
ERROR!
!InternalAPI methodsFor: 'API' stamp: 'ja 12/1/2020 18:59:43' prior: 50976974!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity

	"( carts includesKey: aCartId ) ifFalse: [ self error: self class cartNotFoundErrorDescription ]."
	
	| cart |
	
	[ cart _ carts at: aCartId ] on: Error do: [^ UnsuccessfulResponse with: (self class cartNotRegisteredErrorDescription) ].
	
	[cart add: aQuantity of: aISBN] on: Error do: [^ UnsuccessfulResponse with: (self class ISBNNotRegisteredErrorDescription ) ].
	
	^ SuccessfulResponse with: 'OK'.! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/1/2020 18:59:47' prior: 50977070!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity

	"( carts includesKey: aCartId ) ifFalse: [ self error: self class cartNotFoundErrorDescription ]."
	
	| cart |
	
	[ cart _ carts at: aCartId ] on: Error do: [^ UnsuccessfulResponse with: (self class cartNotRegisteredErrorDescription) ].
	
	[cart add: aQuantity of: aISBN] on: Error do: [^ UnsuccessfulResponse with: (self class ISBNNotRegisteredErrorDescription) ].
	
	^ SuccessfulResponse with: 'OK'.! !

!testRun: #InternalAPITest #test08AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/1/2020 18:59:50'!
PASSED!

!testRun: #InternalAPITest #test08AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/1/2020 18:59:52'!
PASSED!
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/1/2020 19:00:10' prior: 50977044!
test08AddToCartUnsuccessfulWithIvalidISBN

	| responseCreate internalApi responseAdd idCart ISBN|
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: InternalAPI ISBNNotRegisteredErrorDescription.
	! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/1/2020 19:00:14' prior: 50977113!
test08AddToCartUnsuccessfulWithIvalidISBN

	| responseCreate internalApi responseAdd idCart ISBN|
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 0 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: InternalAPI ISBNNotRegisteredErrorDescription.
	! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/1/2020 19:00:30' prior: 50977132!
test08AddToCartUnsuccessfulWithIvalidISBN

	| responseCreate internalApi responseAdd idCart ISBN|
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ self invalidISBN.
	
	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: InternalAPI ISBNNotRegisteredErrorDescription.
	! !

!testRun: #InternalAPITest #test08AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/1/2020 19:00:32'!
PASSED!
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/1/2020 19:01:03'!
test09AddToCartUnsuccessfulWithIvalidISBN

	| responseCreate internalApi responseAdd idCart ISBN|
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 0 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: InternalAPI ISBNNotRegisteredErrorDescription.
	! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/1/2020 19:03:26' prior: 50977173!
test09AddToCartUnsuccessfulWithIvalidISBN

	| responseCreate internalApi responseAdd idCart ISBN|
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 0 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: InternalAPI invalidQuantityErrorDescription.
	! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 19:03:55'!
invalidQuantityErrorDescription

	^'Invalid quantity'! !

!testRun: #InternalAPITest #test09AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/1/2020 19:04:06'!
FAILURE!

!testRun: #InternalAPITest #test09AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/1/2020 19:04:06'!
FAILURE!

!testRun: #InternalAPITest #test06AddToCartSuccessfulEffectivlyAddedToCart stamp: 'ja 12/1/2020 19:04:29'!
PASSED!

!testRun: #InternalAPITest #test09AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/1/2020 19:04:42'!
FAILURE!

!testRun: #InternalAPITest #test09AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/1/2020 19:04:42'!
FAILURE!
!InternalAPI methodsFor: 'API' stamp: 'ja 12/1/2020 19:08:23' prior: 50977088!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity

	"( carts includesKey: aCartId ) ifFalse: [ self error: self class cartNotFoundErrorDescription ]."
	
	| cart |
	
	[ cart _ carts at: aCartId ] on: Error do: [^ UnsuccessfulResponse with: (self class cartNotRegisteredErrorDescription) ].
	
	[cart add: aQuantity of: aISBN] on: Error do: [:error | ^ UnsuccessfulResponse with: error messageText ].
	
	^ SuccessfulResponse with: 'OK'.! !

!testRun: #InternalAPITest #test09AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/1/2020 19:09:13'!
FAILURE!

!testRun: #InternalAPITest #test08AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/1/2020 19:09:30'!
FAILURE!

!testRun: #InternalAPITest #test08AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/1/2020 19:09:30'!
FAILURE!
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/1/2020 19:09:55' prior: 50977151!
test08AddToCartUnsuccessfulWithIvalidISBN

	| responseCreate internalApi responseAdd idCart ISBN|
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ self invalidISBN.
	
	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: Cart ISBNNotRegisteredErrorDescription.
	! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/1/2020 19:12:03' prior: 50977192!
test09AddToCartUnsuccessfulWithIvalidISBN

	| responseCreate internalApi responseAdd idCart ISBN|
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 0 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: Cart invalidQuantityErrorDescription.
	! !
!Cart methodsFor: 'assertions' stamp: 'ja 12/1/2020 19:12:30' prior: 50973727!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self class invalidItemErrorMessage ]! !
!Cart class methodsFor: 'instance creation' stamp: 'ja 12/1/2020 19:12:41'!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !
!Cart class methodsFor: 'instance creation' stamp: 'ja 12/1/2020 19:12:52'!
invalidQuantityErrorMessage
	
	^'Invalid number of items'! !
!Cart methodsFor: 'assertions' stamp: 'ja 12/1/2020 19:13:03' prior: 50973733!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [ self error: self class invalidQuantityErrorMessage ]! !
!CartTest methodsFor: 'tests' stamp: 'ja 12/1/2020 19:13:53' prior: 50973813!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [ cart add: testObjectsFactory itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'ja 12/1/2020 19:13:58' prior: 50973857!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add: 2 of: testObjectsFactory itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!methodRemoval: Cart #invalidItemErrorMessage stamp: 'ja 12/1/2020 19:14:21'!
invalidItemErrorMessage
	
	^'Item is not in catalog'!
!CartTest methodsFor: 'tests' stamp: 'ja 12/1/2020 19:14:32' prior: 50973799!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add: 0 of: testObjectsFactory itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !

!methodRemoval: Cart #invalidQuantityErrorMessage stamp: 'ja 12/1/2020 19:14:42'!
invalidQuantityErrorMessage
	
	^'Invalid number of items'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ja 12/1/2020 19:14:44'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ja 12/1/2020 19:14:44'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ja 12/1/2020 19:14:44'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ja 12/1/2020 19:14:44'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ja 12/1/2020 19:14:44'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ja 12/1/2020 19:14:44'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ja 12/1/2020 19:14:44'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ja 12/1/2020 19:14:44'!
PASSED!
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/1/2020 19:15:07' prior: 50977280!
test09AddToCartUnsuccessfulWithIvalidISBN

	| responseCreate internalApi responseAdd idCart ISBN|
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 0 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: Cart invalidQuantityErrorMessage.
	! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/1/2020 19:15:23' prior: 50977261!
test08AddToCartUnsuccessfulWithIvalidISBN

	| responseCreate internalApi responseAdd idCart ISBN|
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ self invalidISBN.
	
	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: Cart invalidItemErrorMessage.
	! !

!testRun: #InternalAPITest #test08AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/1/2020 19:15:26'!
PASSED!

!testRun: #InternalAPITest #test09AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/1/2020 19:15:28'!
PASSED!
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/1/2020 19:19:36'!
test10ListCartWithEmptyCart

	| internalApi responseCreate responseList |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseList _ internalApi listCart: responseCreate payload.
	
	self assert: (responseList payload) isEmpty.

	! !

!methodRemoval: InternalAPITest #test10 stamp: 'ja 12/1/2020 19:20:12'!
test10

	| internalApi responseCreate responseAdd |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseAdd _ internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3. 

	!

!testRun: #InternalAPITest #test10ListCartWithEmptyCart stamp: 'ja 12/1/2020 19:20:22'!
ERROR!

!testRun: #InternalAPITest #test10ListCartWithEmptyCart stamp: 'ja 12/1/2020 19:20:22'!
ERROR!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 19:20:34'!
listCart: aSmallInteger 
	self shouldBeImplemented.! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 19:21:00' prior: 50977470!
listCart: aCartId

	^ Bag new. 
	
	! !
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/1/2020 19:21:39' prior: 50977475!
listCart: aCartId
		
	^ SuccessfulResponse with: Bag new. 
	
	! !

!testRun: #InternalAPITest #test10ListCartWithEmptyCart stamp: 'ja 12/1/2020 19:21:42'!
PASSED!

!testRun: #InternalAPITest #test10ListCartWithEmptyCart stamp: 'ja 12/1/2020 19:21:50'!
PASSED!
!InternalAPITest methodsFor: 'list cart' stamp: 'ja 12/1/2020 19:23:13'!
test11ListCartWithItemIntoCart

	| internalApi responseCreate responseList |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseList _ internalApi listCart: responseCreate payload.
	
	self assert: (responseList payload) isEmpty.

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'ja 12/1/2020 19:24:27' prior: 50977491!
test11ListCartWithItemIntoCart

	| internalApi responseCreate responseList ISBN idCart responseAdd |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseList _ internalApi listCart: responseCreate payload.
	
	self assert: responseList payload isEmpty.

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'ja 12/1/2020 19:24:43' prior: 50977441!
test10ListCartWithEmptyCart

	| internalApi responseCreate responseList |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseList _ internalApi listCart: responseCreate payload.
	
	self assert: responseList payload isEmpty.

	! !

!testRun: #InternalAPITest #test10ListCartWithEmptyCart stamp: 'ja 12/1/2020 19:24:45'!
PASSED!
!InternalAPITest methodsFor: 'list cart' stamp: 'ja 12/1/2020 19:25:04' prior: 50977504!
test11ListCartWithItemIntoCart

	| internalApi responseCreate responseList ISBN idCart responseAdd |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseList _ internalApi listCart: responseCreate payload.
	
	self assert: responseList payload isEmpty.

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'ja 12/1/2020 19:25:11' prior: 50977538!
test11ListCartWithItemIntoCart

	| internalApi responseCreate responseList ISBN idCart |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseList _ internalApi listCart: responseCreate payload.
	
	self assert: responseList payload isEmpty.

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'ja 12/1/2020 19:25:22' prior: 50977556!
test11ListCartWithItemIntoCart

	| internalApi responseCreate responseList ISBN idCart |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseList _ internalApi listCart: idCart.
	
	self assert: responseList payload isEmpty.

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'ja 12/1/2020 19:31:45' prior: 50977574!
test11ListCartWithItemIntoCart

	| internalApi responseCreate responseList ISBN idCart listItems |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	listItems add: ISBN withOccurrences: 3.
	
	self assert: responseList payload = listItems.

	! !

!testRun: #InternalAPITest #test11ListCartWithItemIntoCart stamp: 'ja 12/1/2020 19:33:37'!
FAILURE!

!testRun: #InternalAPITest #test11ListCartWithItemIntoCart stamp: 'ja 12/1/2020 19:33:37'!
FAILURE!
!InternalAPI methodsFor: 'API' stamp: 'ja 12/1/2020 19:34:48' prior: 50977480!
listCart: aCartId
	
	| cart |
	
	cart _ carts at: aCartId.
	
	
		
	^ SuccessfulResponse with: Bag new. 
	
	! !
!Cart methodsFor: 'testing' stamp: 'ja 12/1/2020 19:36:45'!
items

	^items copy! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/1/2020 19:38:16' prior: 50977617!
listCart: aCartId
	
	| cart listItems |
	
	cart _ carts at: aCartId.
	
	listItems _ cart items.
		
	^ SuccessfulResponse with: listItems asBag . 
	
	! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/1/2020 19:38:17' prior: 50977627!
listCart: aCartId
	
	| cart listItems |
	
	cart _ carts at: aCartId.
	
	listItems _ cart items.
		
	^ SuccessfulResponse with: listItems asBag. 
	
	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'ja 12/1/2020 19:38:30' prior: 50977591!
test11ListCartWithItemIntoCart

	| internalApi responseCreate responseList ISBN idCart listItems |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN withOccurrences: 3.
	
	self assert: responseList payload = listItems.

	! !

!testRun: #InternalAPITest #test11ListCartWithItemIntoCart stamp: 'ja 12/1/2020 19:38:33'!
PASSED!
!InternalAPITest methodsFor: 'list cart' stamp: 'ja 12/1/2020 19:40:16'!
test11ListCartWithOnceItemIntoCart

	| internalApi responseCreate responseList ISBN idCart listItems |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN withOccurrences: 3.
	
	self assert: responseList payload = listItems.

	! !

!methodRemoval: InternalAPITest #test11ListCartWithItemIntoCart stamp: 'ja 12/1/2020 19:40:16'!
test11ListCartWithItemIntoCart

	| internalApi responseCreate responseList ISBN idCart listItems |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN withOccurrences: 3.
	
	self assert: responseList payload = listItems.

	!
!InternalAPITest methodsFor: 'list cart' stamp: 'ja 12/1/2020 19:40:39'!
test12ListCartWithManyItemsIntoCart

	| internalApi responseCreate responseList ISBN idCart listItems |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN withOccurrences: 3.
	
	self assert: responseList payload = listItems.

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'ja 12/1/2020 19:42:12' prior: 50977704!
test12ListCartWithManyItemsIntoCart

	| internalApi responseCreate responseList ISBN1 ISBN2 idCart listItems |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'
	
	internalApi addToCart: idCart withISBN: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi addToCart: idCart withISBN: ISBN2 withQuantity: 3 on: (DateAndTime now).
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN1 withOccurrences: 3.
	
	self assert: responseList payload = listItems.

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'ja 12/1/2020 19:42:22' prior: 50977724!
test12ListCartWithManyItemsIntoCart

	| internalApi responseCreate responseList ISBN1 ISBN2 idCart listItems |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'
	
	internalApi addToCart: idCart withISBN: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi addToCart: idCart withISBN: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN1 withOccurrences: 3.
	
	self assert: responseList payload = listItems.

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'ja 12/1/2020 19:42:35'!
test11ListCartWithOnlyItemIntoCart

	| internalApi responseCreate responseList ISBN idCart listItems |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN withOccurrences: 3.
	
	self assert: responseList payload = listItems.

	! !

!methodRemoval: InternalAPITest #test11ListCartWithOnceItemIntoCart stamp: 'ja 12/1/2020 19:42:35'!
test11ListCartWithOnceItemIntoCart

	| internalApi responseCreate responseList ISBN idCart listItems |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN withOccurrences: 3.
	
	self assert: responseList payload = listItems.

	!
!InternalAPITest methodsFor: 'list cart' stamp: 'ja 12/1/2020 19:45:50' prior: 50977747!
test12ListCartWithManyItemsIntoCart

	| internalApi responseCreate responseList ISBN1 ISBN2 idCart listItems |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'
	
	internalApi addToCart: idCart withISBN: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi addToCart: idCart withISBN: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN1 withOccurrences: 3.
	listItems add: ISBN2 withOccurrences: 5.
	
	self assert: responseList payload = listItems.

	! !

!testRun: #InternalAPITest #test12ListCartWithManyItemsIntoCart stamp: 'ja 12/1/2020 19:45:54'!
ERROR!

!testRun: #InternalAPITest #test12ListCartWithManyItemsIntoCart stamp: 'ja 12/1/2020 19:45:54'!
ERROR!
!InternalAPITest methodsFor: 'list cart' stamp: 'ja 12/1/2020 19:46:19' prior: 50977809!
test12ListCartWithManyItemsIntoCart

	| internalApi responseCreate responseList ISBN1 ISBN2 idCart listItems |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi addToCart: idCart withISBN: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi addToCart: idCart withISBN: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN1 withOccurrences: 3.
	listItems add: ISBN2 withOccurrences: 5.
	
	self assert: responseList payload = listItems.

	! !

!testRun: #InternalAPITest #test12ListCartWithManyItemsIntoCart stamp: 'ja 12/1/2020 19:46:22'!
FAILURE!

!testRun: #InternalAPITest #test12ListCartWithManyItemsIntoCart stamp: 'ja 12/1/2020 19:46:22'!
FAILURE!

!testRun: #InternalAPITest #test12ListCartWithManyItemsIntoCart stamp: 'ja 12/1/2020 19:47:56'!
FAILURE!

!testRun: #InternalAPITest #test12ListCartWithManyItemsIntoCart stamp: 'ja 12/1/2020 19:47:56'!
FAILURE!

Error subclass: #InvalidBookQuantity
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InvalidBookQuantity category: #TusLibros stamp: 'ja 12/1/2020 19:57:52'!
Error subclass: #InvalidBookQuantity
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Error subclass: #InvalidISBN
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InvalidISBN category: #TusLibros stamp: 'ja 12/1/2020 19:58:07'!
Error subclass: #InvalidISBN
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPI methodsFor: 'API' stamp: 'ja 12/1/2020 19:59:04' prior: 50977233!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity

	"( carts includesKey: aCartId ) ifFalse: [ self error: self class cartNotFoundErrorDescription ]."
	
	| cart |
	
	[ cart _ carts at: aCartId ] on: Error do: [^ UnsuccessfulResponse with: (self class cartNotRegisteredErrorDescription) ].
	
	[cart add: aQuantity of: aISBN] on: InvalidBookQuantity do: [:error | ^ UnsuccessfulResponse with: error messageText ].
	
	^ SuccessfulResponse with: 'OK'.! !
!Cart methodsFor: 'assertions' stamp: 'ja 12/1/2020 20:02:00' prior: 50977315!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [ InvalidBookQuantity signal: self class invalidQuantityErrorMessage ]! !

!testRun: #InternalAPITest #test12ListCartWithManyItemsIntoCart stamp: 'ja 12/1/2020 20:02:48'!
ERROR!

!testRun: #InternalAPITest #test12ListCartWithManyItemsIntoCart stamp: 'ja 12/1/2020 20:02:48'!
ERROR!
!InternalAPITest methodsFor: 'suport' stamp: 'ja 12/1/2020 20:04:13' prior: 50976682!
internalApi
	
	| catalog |
	
	catalog _ Dictionary new.
	catalog add: 'book' -> 100; add: 'book1' -> 100; add: 'book2' -> 300.
	
	^ InternalAPI with: self authenticatedUsers 
				on: DateAndTime now 
				usingCatalog: catalog .! !
!InternalAPITest methodsFor: 'suport' stamp: 'ja 12/1/2020 20:04:18' prior: 50977931!
internalApi
	
	| catalog |
	
	catalog _ Dictionary new.
	catalog add: 'book' -> 100; add: 'book1' -> 200; add: 'book2' -> 300.
	
	^ InternalAPI with: self authenticatedUsers 
				on: DateAndTime now 
				usingCatalog: catalog .! !

!testRun: #InternalAPITest #test12ListCartWithManyItemsIntoCart stamp: 'ja 12/1/2020 20:04:26'!
PASSED!

----QUIT----(1 December 2020 23:30:30) CuisUniversity-4365.image priorSource: 20618561!

----STARTUP---- (2 December 2020 15:51:30) as /home/jampuero/Documentos/isw1/linux64/CuisUniversity-4365.image!


!testRun: #InternalAPITest #test12ListCartWithManyItemsIntoCart stamp: 'ja 12/2/2020 16:05:07'!
PASSED!

!testRun: #InternalAPITest #test11ListCartWithOnlyItemIntoCart stamp: 'ja 12/2/2020 16:05:09'!
PASSED!

!testRun: #InternalAPITest #test10ListCartWithEmptyCart stamp: 'ja 12/2/2020 16:05:10'!
PASSED!
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 16:08:04'!
test13

! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 16:10:13' prior: 50977970!
test13

"cartId: Id del carrito creado con /createCart
ccn: N�mero de tarjeta de credito
cced: Fecha de expiraci�n con 2 digitos para el mes y 4 para el a�o
cco: Nombre del due�o de la tarjeta."




! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 16:17:23' prior: 50977974!
test13

"cartId: Id del carrito creado con /createCart
ccn: N�mero de tarjeta de credito
cced: Fecha de expiraci�n con 2 digitos para el mes y 4 para el a�o
cco: Nombre del due�o de la tarjeta."

	| internalApi responseCreate responseList responseCheckOut ISBN1 ISBN2 idCart listItems creditCard date |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi addToCart: idCart withISBN: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi addToCart: idCart withISBN: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'. ! !

!classDefinition: #InternalAPITest category: #TusLibros stamp: 'ja 12/2/2020 16:25:25'!
TestCase subclass: #InternalAPITest
	instanceVariableNames: 'debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 16:25:23' overrides: 16927572!
setUp 

	debitBehavior := [ :anAmount :aCreditCard | ]! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 16:31:21' prior: 50977984!
test13

	| internalApi responseCreate responseCheckOut ISBN1 ISBN2 idCart creditCard date |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi addToCart: idCart withISBN: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi addToCart: idCart withISBN: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'. ! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 16:35:04' prior: 50978025!
test13

	| internalApi responseCreate responseCheckOut ISBN1 ISBN2 idCart creditCard date |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi addToCart: idCart withISBN: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi addToCart: idCart withISBN: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload = 1.
	
	self assert: responseCheckOut code = 0.! !
!InternalAPITest methodsFor: 'suport' stamp: 'ja 12/2/2020 16:36:14' prior: 50977941!
internalApi
	
	| catalog |
	
	catalog _ Dictionary new.
	catalog add: 'book' -> 100; add: 'book1' -> 200; add: 'book2' -> 300.
	
	^ InternalAPI with: self authenticatedUsers 
				on: DateAndTime now 
				usingCatalog: catalog 
				usingMerchantProccesor: self.! !
!InternalAPI class methodsFor: 'as yet unclassified' stamp: 'ja 12/2/2020 16:37:19'!
with: aUsersCollection on: aDate usingCatalog: aCatalog usingMerchantProccesor: aMerchantProccesor
	
	^self new initializeWith: aUsersCollection on: aDate usingCatalog: aCatalog usingMerchantProccesor: aMerchantProccesor.! !
!InternalAPI methodsFor: 'initialization' stamp: 'ja 12/2/2020 16:37:45'!
initializeWith: aUsersCollection on: aDate usingCatalog: aCatalog usingMerchantProccesor: aMerchantProccesor
	
	users _ aUsersCollection.
	
	date _ aDate.
	
	carts _ Dictionary new.
	
	catalog _ aCatalog.
	
	cartsPerUser _ Dictionary new.
	
	modifications _ Dictionary new.
	
	nextId _ 0.! !

!classDefinition: #InternalAPI category: #TusLibros stamp: 'ja 12/2/2020 16:38:11'!
Object subclass: #InternalAPI
	instanceVariableNames: 'users nextId carts date modifications cartsPerUser catalog merchantProcesor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPI methodsFor: 'initialization' stamp: 'ja 12/2/2020 16:38:08' prior: 50978091!
initializeWith: aUsersCollection on: aDate usingCatalog: aCatalog usingMerchantProccesor: aMerchantProccesor
	
	users _ aUsersCollection.
	
	date _ aDate.
	
	carts _ Dictionary new.
	
	catalog _ aCatalog.
	
	cartsPerUser _ Dictionary new.
	
	modifications _ Dictionary new.
	
	nextId _ 0.
	
	merchantProcesor _ aMerchantProccesor.! !

!testRun: #InternalAPITest #test13 stamp: 'ja 12/2/2020 16:38:32'!
ERROR!

!testRun: #InternalAPITest #test13 stamp: 'ja 12/2/2020 16:38:32'!
ERROR!
!InternalAPI methodsFor: 'API' stamp: 'ja 12/2/2020 16:38:43'!
checkOutCart: aSmallInteger withCreditCart: anUndefinedObject thatExpiresOn: anUndefinedObject3 ofOwner: aString 
	self shouldBeImplemented.! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/2/2020 16:45:10' prior: 50978130!
checkOutCart: idCart withCreditCart: aCreditCard thatExpiresOn: aDate ofOwner: aUser
	
	| cart cashier|
	
	cart _ carts at: idCart .
	
	cashier _ Cashier toCheckout: cart charging: aCreditCard throught: merchantProcesor on: aDate registeringOn: catalog .
	
	cashier checkOut.
	
	^ SuccessfulResponse with: self nextTransaction.
	! !

!testRun: #InternalAPITest #test13 stamp: 'ja 12/2/2020 16:45:17'!
ERROR!

!classDefinition: #InternalAPI category: #TusLibros stamp: 'ja 12/2/2020 16:46:33'!
Object subclass: #InternalAPI
	instanceVariableNames: 'users nextId carts date modifications cartsPerUser catalog merchantProcesor nextTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPI methodsFor: 'API' stamp: 'ja 12/2/2020 16:46:31'!
nextTransaction

	nextTransaction _ nextTransaction + 1.
	
	^ nextTransaction
	! !

!testRun: #InternalAPITest #test13 stamp: 'ja 12/2/2020 16:47:13'!
ERROR!

!testRun: #InternalAPITest #test13 stamp: 'ja 12/2/2020 16:47:13'!
ERROR!
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 16:48:50' prior: 50978046!
test13

	| internalApi responseCreate responseCheckOut ISBN1 ISBN2 idCart creditCard date |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi addToCart: idCart withISBN: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi addToCart: idCart withISBN: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	CreditCard expiringOn: Date new.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload = 1.
	
	self assert: responseCheckOut code = 0.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 16:49:01' prior: 50978173!
test13

	| internalApi responseCreate responseCheckOut ISBN1 ISBN2 idCart creditCard date |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi addToCart: idCart withISBN: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi addToCart: idCart withISBN: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	creditCard _ CreditCard expiringOn: Date new.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload = 1.
	
	self assert: responseCheckOut code = 0.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 16:51:02' prior: 50978198!
test13

	| internalApi responseCreate responseCheckOut ISBN1 ISBN2 idCart creditCard date |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi addToCart: idCart withISBN: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi addToCart: idCart withISBN: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	date _ DateAndTime now.
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload = 1.
	
	self assert: responseCheckOut code = 0.! !

!testRun: #InternalAPITest #test13 stamp: 'ja 12/2/2020 16:51:06'!
ERROR!

!testRun: #InternalAPITest #test13 stamp: 'ja 12/2/2020 16:51:06'!
ERROR!
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 16:53:03' prior: 50978224!
test13

	| internalApi responseCreate responseCheckOut ISBN1 ISBN2 idCart creditCard date |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi addToCart: idCart withISBN: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi addToCart: idCart withISBN: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	date _ DateAndTime now month.
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload = 1.
	
	self assert: responseCheckOut code = 0.! !

!testRun: #InternalAPITest #test13 stamp: 'ja 12/2/2020 16:53:06'!
ERROR!

!testRun: #InternalAPITest #test13 stamp: 'ja 12/2/2020 16:53:06'!
ERROR!
!InternalAPITest methodsFor: 'suport' stamp: 'ja 12/2/2020 16:54:01'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !

!testRun: #InternalAPITest #test13 stamp: 'ja 12/2/2020 16:54:15'!
ERROR!

!testRun: #InternalAPITest #test13 stamp: 'ja 12/2/2020 16:54:15'!
ERROR!

!testRun: #InternalAPITest #test13 stamp: 'ja 12/2/2020 16:55:19'!
ERROR!

self createSale!

!testRun: #InternalAPITest #test13 stamp: 'ja 12/2/2020 16:57:01'!
ERROR!
!InternalAPI methodsFor: 'API' stamp: 'ja 12/2/2020 17:00:14' prior: 50978137!
checkOutCart: idCart withCreditCart: aCreditCard thatExpiresOn: aDate ofOwner: aUser
	
	| cart cashier|
	
	cart _ carts at: idCart .
	
	cashier _ Cashier toCheckout: cart charging: aCreditCard throught: merchantProcesor on: aDate registeringOn: OrderedCollection new.
	
	cashier checkOut.
	
	^ SuccessfulResponse with: self nextTransaction.
	! !

!testRun: #InternalAPITest #test13 stamp: 'ja 12/2/2020 17:00:24'!
ERROR!

!testRun: #InternalAPITest #test13 stamp: 'ja 12/2/2020 17:00:24'!
ERROR!

!methodRemoval: InternalAPI #initializeWith:on:usingCatalog: stamp: 'ja 12/2/2020 17:00:52'!
initializeWith: aUsersCollection on: aDate usingCatalog: aCatalog
	
	users _ aUsersCollection.
	
	date _ aDate.
	
	carts _ Dictionary new.
	
	catalog _ aCatalog.
	
	cartsPerUser _ Dictionary new.
	
	modifications _ Dictionary new.
	
	nextId _ 0.!
!InternalAPI methodsFor: 'initialization' stamp: 'ja 12/2/2020 17:01:08' prior: 50978112!
initializeWith: aUsersCollection on: aDate usingCatalog: aCatalog usingMerchantProccesor: aMerchantProccesor
	
	users _ aUsersCollection.
	
	date _ aDate.
	
	carts _ Dictionary new.
	
	catalog _ aCatalog.
	
	cartsPerUser _ Dictionary new.
	
	modifications _ Dictionary new.
	
	nextId _ 0.
	
	nextTransaction _ 0.
	
	merchantProcesor _ aMerchantProccesor.! !

!testRun: #InternalAPITest #test13 stamp: 'ja 12/2/2020 17:01:14'!
PASSED!
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 17:03:33'!
test13CheckOutSuccessfulWithNotEmptyCart

	| internalApi responseCreate responseCheckOut ISBN1 ISBN2 idCart creditCard date |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi addToCart: idCart withISBN: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi addToCart: idCart withISBN: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	date _ DateAndTime now month.
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload = 1.
	
	self assert: responseCheckOut code = 0.! !

!methodRemoval: InternalAPITest #test13 stamp: 'ja 12/2/2020 17:03:58'!
test13

	| internalApi responseCreate responseCheckOut ISBN1 ISBN2 idCart creditCard date |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi addToCart: idCart withISBN: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi addToCart: idCart withISBN: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	date _ DateAndTime now month.
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload = 1.
	
	self assert: responseCheckOut code = 0.!
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 17:07:17'!
test14CheckOutUnsuccessfulWithEmptyCart

	| internalApi responseCreate responseCheckOut ISBN1 ISBN2 idCart creditCard date |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier cartCanNotBeEmptyErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 17:07:26' prior: 50978400!
test14CheckOutUnsuccessfulWithEmptyCart

	| internalApi responseCreate responseCheckOut idCart creditCard date |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier cartCanNotBeEmptyErrorMessage.
	
	self assert: responseCheckOut code = 1.! !

!testRun: #InternalAPITest #test14CheckOutUnsuccessfulWithEmptyCart stamp: 'ja 12/2/2020 17:07:31'!
ERROR!
!InternalAPI methodsFor: 'API' stamp: 'ja 12/2/2020 17:08:47' prior: 50978302!
checkOutCart: idCart withCreditCart: aCreditCard thatExpiresOn: aDate ofOwner: aUser
	
	| cart cashier|
	
	cart _ carts at: idCart .
	
	[cashier _ Cashier toCheckout: cart charging: aCreditCard throught: merchantProcesor on: aDate registeringOn: OrderedCollection new] on: Error do: [:error| ^ UnsuccessfulResponse with: error messageText].
	
	cashier checkOut.
	
	^ SuccessfulResponse with: self nextTransaction.
	! !

!testRun: #InternalAPITest #test14CheckOutUnsuccessfulWithEmptyCart stamp: 'ja 12/2/2020 17:08:49'!
PASSED!

!testRun: #InternalAPITest #test01CreateCartSuccessfulWithCorrectClientIdAndPassword stamp: 'ja 12/2/2020 17:08:49'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdPerCustomer stamp: 'ja 12/2/2020 17:08:49'!
PASSED!

!testRun: #InternalAPITest #test03CreateCartReturnsOneWithUnregisteredClientId stamp: 'ja 12/2/2020 17:08:49'!
PASSED!

!testRun: #InternalAPITest #test04CreateCartSuccessfulEffectivlyCreatesCart stamp: 'ja 12/2/2020 17:08:49'!
FAILURE!

!testRun: #InternalAPITest #test05AddToCartSuccessfulWithCartId stamp: 'ja 12/2/2020 17:08:49'!
PASSED!

!testRun: #InternalAPITest #test06AddToCartSuccessfulEffectivlyAddedToCart stamp: 'ja 12/2/2020 17:08:49'!
PASSED!

!testRun: #InternalAPITest #test07AddToCartUnsuccessfulWithCartInvalid stamp: 'ja 12/2/2020 17:08:49'!
PASSED!

!testRun: #InternalAPITest #test08AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/2/2020 17:08:49'!
ERROR!

!testRun: #InternalAPITest #test09AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/2/2020 17:08:49'!
PASSED!

!testRun: #InternalAPITest #test10ListCartWithEmptyCart stamp: 'ja 12/2/2020 17:08:49'!
PASSED!

!testRun: #InternalAPITest #test11ListCartWithOnlyItemIntoCart stamp: 'ja 12/2/2020 17:08:49'!
PASSED!

!testRun: #InternalAPITest #test12ListCartWithManyItemsIntoCart stamp: 'ja 12/2/2020 17:08:49'!
PASSED!

!testRun: #InternalAPITest #test13CheckOutSuccessfulWithNotEmptyCart stamp: 'ja 12/2/2020 17:08:49'!
PASSED!

!testRun: #InternalAPITest #test14CheckOutUnsuccessfulWithEmptyCart stamp: 'ja 12/2/2020 17:08:49'!
PASSED!

!testRun: #InternalAPITest #test14CheckOutUnsuccessfulWithEmptyCart stamp: 'ja 12/2/2020 17:09:06'!
PASSED!

!testRun: #InternalAPITest #test04CreateCartSuccessfulEffectivlyCreatesCart stamp: 'ja 12/2/2020 17:09:13'!
FAILURE!

!testRun: #InternalAPITest #test04CreateCartSuccessfulEffectivlyCreatesCart stamp: 'ja 12/2/2020 17:09:13'!
FAILURE!
!InternalAPI methodsFor: 'as yet unclassified' stamp: 'ja 12/2/2020 17:09:47' prior: 50975449!
hasCartsOf: anUser
	
	^ cartsPerUser includesKey: anUser.! !

!testRun: #InternalAPITest #test04CreateCartSuccessfulEffectivlyCreatesCart stamp: 'ja 12/2/2020 17:09:49'!
PASSED!

!testRun: #InternalAPITest #test08AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/2/2020 17:09:54'!
ERROR!

!testRun: #InternalAPITest #test08AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/2/2020 17:09:54'!
ERROR!
!InternalAPI methodsFor: 'API' stamp: 'ja 12/2/2020 17:10:27' prior: 50975949!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity on: aDate
	
	^ self ensureExecutionOf: [ self addToCart: aCartId withISBN: aISBN withQuantity: aQuantity ] withCart: aCartId validOn: aDate.
	
	! !

!testRun: #InternalAPITest #test08AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/2/2020 17:10:33'!
ERROR!

!testRun: #InternalAPITest #test08AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/2/2020 17:10:33'!
ERROR!

!testRun: #InternalAPITest #test08AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/2/2020 17:11:43'!
ERROR!

!testRun: #InternalAPITest #test08AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/2/2020 17:12:49'!
ERROR!
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/2/2020 17:15:54' prior: 50977416!
test08AddToCartUnsuccessfulWithIvalidISBN

	| responseCreate internalApi responseAdd idCart ISBN|
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ self invalidISBN.
	
"	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: Cart invalidItemErrorMessage."
	
	self should: [responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). self fail]  
		raise: Error  
		withMessageText: Cart invalidItemErrorMessage.
	
	self assert: responseAdd code = 1.
	! !

!testRun: #InternalAPITest #test08AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/2/2020 17:17:25'!
ERROR!

!testRun: #InternalAPITest #test08AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/2/2020 17:17:25'!
ERROR!
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/2/2020 17:17:39' prior: 50978564!
test08AddToCartUnsuccessfulWithIvalidISBN

	| responseCreate internalApi responseAdd idCart ISBN|
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ self invalidISBN.
	
"	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: Cart invalidItemErrorMessage."
	
	self should: [ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). self fail]  
		raise: Error  
		withMessageText: Cart invalidItemErrorMessage.
	
	
	! !

!testRun: #InternalAPITest #test08AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/2/2020 17:17:43'!
PASSED!

!testRun: #InternalAPITest #test08AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/2/2020 17:17:58'!
PASSED!
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/2/2020 17:18:13' prior: 50978597!
test08AddToCartUnsuccessfulWithIvalidISBN

	| responseCreate internalApi responseAdd idCart ISBN|
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ self invalidISBN.
	
"	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: Cart invalidItemErrorMessage."
	
	self should: [responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). self fail]  
		raise: Error  
		withMessageText: Cart invalidItemErrorMessage.
	
	
	! !

!testRun: #InternalAPITest #test08AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/2/2020 17:18:21'!
PASSED!

responseAdd!
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/2/2020 17:20:40' prior: 50978628!
test08AddToCartUnsuccessfulWithIvalidISBN

	| responseCreate internalApi responseAdd idCart ISBN|
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ self invalidISBN.
	
	self should: [ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). self fail]  
		raise: Error  
		withMessageText: Cart invalidItemErrorMessage.
	
	
	! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/2/2020 17:20:49' prior: 50978657!
test08AddToCartUnsuccessfulWithIvalidISBN

	| responseCreate internalApi idCart ISBN|
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ self invalidISBN.
	
	self should: [ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). self fail]  
		raise: Error  
		withMessageText: Cart invalidItemErrorMessage.
	
	
	! !

!testRun: #InternalAPITest #test08AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/2/2020 17:20:50'!
PASSED!

!testRun: #InternalAPITest #test01CreateCartSuccessfulWithCorrectClientIdAndPassword stamp: 'ja 12/2/2020 17:20:54'!
PASSED!

!testRun: #InternalAPITest #test02CreateCartReturnsDifferentIdPerCustomer stamp: 'ja 12/2/2020 17:20:54'!
PASSED!

!testRun: #InternalAPITest #test03CreateCartReturnsOneWithUnregisteredClientId stamp: 'ja 12/2/2020 17:20:54'!
PASSED!

!testRun: #InternalAPITest #test04CreateCartSuccessfulEffectivlyCreatesCart stamp: 'ja 12/2/2020 17:20:54'!
PASSED!

!testRun: #InternalAPITest #test05AddToCartSuccessfulWithCartId stamp: 'ja 12/2/2020 17:20:54'!
PASSED!

!testRun: #InternalAPITest #test06AddToCartSuccessfulEffectivlyAddedToCart stamp: 'ja 12/2/2020 17:20:54'!
PASSED!

!testRun: #InternalAPITest #test07AddToCartUnsuccessfulWithCartInvalid stamp: 'ja 12/2/2020 17:20:54'!
PASSED!

!testRun: #InternalAPITest #test08AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/2/2020 17:20:54'!
PASSED!

!testRun: #InternalAPITest #test09AddToCartUnsuccessfulWithIvalidISBN stamp: 'ja 12/2/2020 17:20:54'!
PASSED!

!testRun: #InternalAPITest #test10ListCartWithEmptyCart stamp: 'ja 12/2/2020 17:20:54'!
PASSED!

!testRun: #InternalAPITest #test11ListCartWithOnlyItemIntoCart stamp: 'ja 12/2/2020 17:20:54'!
PASSED!

!testRun: #InternalAPITest #test12ListCartWithManyItemsIntoCart stamp: 'ja 12/2/2020 17:20:54'!
PASSED!

!testRun: #InternalAPITest #test13CheckOutSuccessfulWithNotEmptyCart stamp: 'ja 12/2/2020 17:20:54'!
PASSED!

!testRun: #InternalAPITest #test14CheckOutUnsuccessfulWithEmptyCart stamp: 'ja 12/2/2020 17:20:54'!
PASSED!
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 17:21:07' prior: 50978422!
test14CheckOutUnsuccessfulWithEmptyCart

	| internalApi responseCreate responseCheckOut idCart creditCard date |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier cartCanNotBeEmptyErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 17:22:40'!
test15CheckOutUnsuccessfulWithInvalidCart

	| internalApi responseCreate responseCheckOut idCart creditCard date |
	
	internalApi _ self internalApi.
 	
	internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: self invalidIdCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier cartCanNotBeEmptyErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 17:22:50' prior: 50978766!
test15CheckOutUnsuccessfulWithInvalidCart

	| internalApi responseCheckOut idCart creditCard date |
	
	internalApi _ self internalApi.
 	
	internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: self invalidIdCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier cartCanNotBeEmptyErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 17:22:59' prior: 50978787!
test15CheckOutUnsuccessfulWithInvalidCart

	| internalApi responseCheckOut creditCard date |
	
	internalApi _ self internalApi.
 	
	internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: self invalidIdCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier cartCanNotBeEmptyErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 17:25:20' prior: 50978807!
test15CheckOutUnsuccessfulWithInvalidCart

	| internalApi responseCheckOut creditCard date |
	
	internalApi _ self internalApi.
 	
	internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: self invalidIdCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: InternalAPI cartNotRegisteredErrorDescription .
	
	self assert: responseCheckOut code = 1.! !

!testRun: #InternalAPITest #test15CheckOutUnsuccessfulWithInvalidCart stamp: 'ja 12/2/2020 17:25:24'!
ERROR!

!testRun: #InternalAPITest #test15CheckOutUnsuccessfulWithInvalidCart stamp: 'ja 12/2/2020 17:25:24'!
ERROR!
!InternalAPI methodsFor: 'API' stamp: 'ja 12/2/2020 17:26:18' prior: 50977900!
addToCart: aCartId withISBN: aISBN withQuantity: aQuantity
	
	| cart |
	
	[ cart _ carts at: aCartId ] on: Error do: [^ UnsuccessfulResponse with: (self class cartNotRegisteredErrorDescription) ].
	
	[cart add: aQuantity of: aISBN] on: InvalidBookQuantity do: [:error | ^ UnsuccessfulResponse with: error messageText ].
	
	^ SuccessfulResponse with: 'OK'.! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/2/2020 17:26:41' prior: 50978447!
checkOutCart: idCart withCreditCart: aCreditCard thatExpiresOn: aDate ofOwner: aUser
	
	| cart cashier|
	
	[cart _ carts at: idCart ] on: Error do:[^ UnsuccessfulResponse with: (self class cartNotRegisteredErrorDescription) ].
	
	[cashier _ Cashier toCheckout: cart charging: aCreditCard throught: merchantProcesor on: aDate registeringOn: OrderedCollection new] on: Error do: [:error| ^ UnsuccessfulResponse with: error messageText].
	
	cashier checkOut.
	
	^ SuccessfulResponse with: self nextTransaction.
	! !

!testRun: #InternalAPITest #test15CheckOutUnsuccessfulWithInvalidCart stamp: 'ja 12/2/2020 17:26:51'!
PASSED!

!testRun: #InternalAPITest #test15CheckOutUnsuccessfulWithInvalidCart stamp: 'ja 12/2/2020 17:27:01'!
PASSED!
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 17:28:08' prior: 50978745!
test14CheckOutUnsuccessfulWithEmptyCart

	| internalApi responseCreate responseCheckOut idCart creditCard date |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: self invalidCreditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier cartCanNotBeEmptyErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 17:28:32' prior: 50978894!
test14CheckOutUnsuccessfulWithEmptyCart

	| internalApi responseCreate responseCheckOut idCart creditCard date |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier cartCanNotBeEmptyErrorMessage.
	
	self assert: responseCheckOut code = 1.! !

!testRun: #InternalAPITest #test14CheckOutUnsuccessfulWithEmptyCart stamp: 'ja 12/2/2020 17:28:35'!
PASSED!

!testRun: #InternalAPITest #test15CheckOutUnsuccessfulWithInvalidCart stamp: 'ja 12/2/2020 17:28:37'!
PASSED!
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 17:29:30'!
test16CheckOutUnsuccessfulWithInvalidCreditCard

	| internalApi responseCreate responseCheckOut idCart date |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: self invalidCreditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier cartCanNotBeEmptyErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 17:29:44' prior: 50978944!
test16CheckOutUnsuccessfulWithInvalidCreditCard

	| internalApi responseCreate responseCheckOut idCart date |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: self invalidCreditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier cartCanNotBeEmptyErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 17:30:08'!
invalidCreditCard

	^ 'Invalid credit card'! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 17:30:53' prior: 50978964!
test16CheckOutUnsuccessfulWithInvalidCreditCard

	| internalApi responseCreate responseCheckOut idCart date |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: self invalidCreditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: CreditCard cartCanNotBeEmptyErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!CreditCard methodsFor: 'testing' stamp: 'ja 12/2/2020 17:46:19'!
with: aCreditCardNumber isExpiredOn: aDate 

	(aCreditCardNumber size ~= 16) ifTrue: [ self error: self invalidCreditCardNumberErrorDescription ].
	
	^expiration start < (Month month: aDate monthIndex year: aDate yearNumber) start ! !
!CreditCard methodsFor: 'testing' stamp: 'ja 12/2/2020 17:46:58'!
invalidCreditCardNumberErrorDescription

	^ 'Invalid credit card number error description'! !

!methodRemoval: CreditCard #with:isExpiredOn: stamp: 'ja 12/2/2020 17:53:50'!
with: aCreditCardNumber isExpiredOn: aDate 

	(aCreditCardNumber size ~= 16) ifTrue: [ self error: self invalidCreditCardNumberErrorDescription ].
	
	^expiration start < (Month month: aDate monthIndex year: aDate yearNumber) start !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ja 12/2/2020 17:53:53'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ja 12/2/2020 17:53:53'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ja 12/2/2020 17:53:53'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ja 12/2/2020 17:53:53'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ja 12/2/2020 17:53:53'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ja 12/2/2020 17:53:53'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ja 12/2/2020 17:53:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ja 12/2/2020 17:53:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ja 12/2/2020 17:53:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ja 12/2/2020 17:53:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ja 12/2/2020 17:53:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ja 12/2/2020 17:53:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ja 12/2/2020 17:53:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ja 12/2/2020 17:53:57'!
PASSED!
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 17:56:30' prior: 50978989!
test16CheckOutUnsuccessfulWithInvalidCreditCard

	| internalApi responseCreate responseCheckOut idCart date creditCard |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: (date month: date current  year: date previous) ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: CreditCard cartCanNotBeEmptyErrorMessage.
	
	self assert: responseCheckOut code = 1.! !

date _ DateAndTime now.
(date month: date current  year: date previous)!

date _ DateAndTime now.
(date month: date month  year: date year previous)!

DateAndTime year: 2000 month: 01 day: 01!
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 18:02:13' prior: 50979080!
test16CheckOutUnsuccessfulWithInvalidCreditCard

	| internalApi responseCreate responseCheckOut idCart date creditCard |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: (DateAndTime year: 2000 month: 01 day: 01)  ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: CreditCard cartCanNotBeEmptyErrorMessage.
	
	self assert: responseCheckOut code = 1.! !

!methodRemoval: CreditCard #invalidCreditCardNumberErrorDescription stamp: 'ja 12/2/2020 18:03:51'!
invalidCreditCardNumberErrorDescription

	^ 'Invalid credit card number error description'!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'ja 12/2/2020 18:03:57'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'ja 12/2/2020 18:03:57'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'ja 12/2/2020 18:03:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'ja 12/2/2020 18:03:57'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'ja 12/2/2020 18:03:57'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'ja 12/2/2020 18:03:57'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'ja 12/2/2020 18:03:59'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'ja 12/2/2020 18:03:59'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'ja 12/2/2020 18:03:59'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'ja 12/2/2020 18:03:59'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'ja 12/2/2020 18:03:59'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'ja 12/2/2020 18:03:59'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'ja 12/2/2020 18:03:59'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'ja 12/2/2020 18:03:59'!
PASSED!
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 18:05:31'!
test16CheckOutUnsuccessfulWithExpiredCreditCard

	| internalApi responseCreate responseCheckOut idCart date creditCard |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: (DateAndTime year: 2000 month: 01 day: 01)  ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !

!methodRemoval: InternalAPITest #test16CheckOutUnsuccessfulWithInvalidCreditCard stamp: 'ja 12/2/2020 18:05:48'!
test16CheckOutUnsuccessfulWithInvalidCreditCard

	| internalApi responseCreate responseCheckOut idCart date creditCard |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: (DateAndTime year: 2000 month: 01 day: 01)  ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: CreditCard cartCanNotBeEmptyErrorMessage.
	
	self assert: responseCheckOut code = 1.!

!testRun: #InternalAPITest #test16CheckOutUnsuccessfulWithExpiredCreditCard stamp: 'ja 12/2/2020 18:05:50'!
FAILURE!

!testRun: #InternalAPITest #test16CheckOutUnsuccessfulWithExpiredCreditCard stamp: 'ja 12/2/2020 18:05:50'!
FAILURE!
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 18:09:50' prior: 50979184!
test16CheckOutUnsuccessfulWithExpiredCreditCard

	| internalApi responseCreate responseCheckOut idCart date creditCard ISBN |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: date.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: (DateAndTime year: 2000 month: 01 day: 01)  ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !

!testRun: #InternalAPITest #test16CheckOutUnsuccessfulWithExpiredCreditCard stamp: 'ja 12/2/2020 18:09:57'!
FAILURE!

!testRun: #InternalAPITest #test16CheckOutUnsuccessfulWithExpiredCreditCard stamp: 'ja 12/2/2020 18:09:57'!
FAILURE!

expiration start < (Month month: aDate monthIndex year: aDate yearNumber) start!

(aCreditCard isExpiredOn: aDate)!

(Month month: aDate monthIndex year: aDate yearNumber) start !

expiration start!

(Month month: aDate monthIndex year: aDate yearNumber) start !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 18:17:58' prior: 50979239!
test16CheckOutUnsuccessfulWithExpiredCreditCard

	| internalApi responseCreate responseCheckOut idCart date creditCard ISBN |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: (DateAndTime year: 2000 month: 01 day: 01).
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn:  date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 18:18:02' prior: 50979283!
test16CheckOutUnsuccessfulWithExpiredCreditCard

	| internalApi responseCreate responseCheckOut idCart date creditCard ISBN |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: (DateAndTime year: 2000 month: 01 day: 01).
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !

!testRun: #InternalAPITest #test16CheckOutUnsuccessfulWithExpiredCreditCard stamp: 'ja 12/2/2020 18:18:04'!
FAILURE!

!testRun: #InternalAPITest #test16CheckOutUnsuccessfulWithExpiredCreditCard stamp: 'ja 12/2/2020 18:18:04'!
FAILURE!

Month month: aDate monthIndex year: aDate yearNumber!
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 18:24:11' prior: 50979311!
test16CheckOutUnsuccessfulWithExpiredCreditCard

	| internalApi responseCreate responseCheckOut idCart date creditCard ISBN |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: (GregorianMonthOfYear current previous).
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !

!testRun: #InternalAPITest #test16CheckOutUnsuccessfulWithExpiredCreditCard stamp: 'ja 12/2/2020 18:24:21'!
FAILURE!

!testRun: #InternalAPITest #test16CheckOutUnsuccessfulWithExpiredCreditCard stamp: 'ja 12/2/2020 18:24:21'!
FAILURE!
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 18:27:54' prior: 50979348!
test16CheckOutUnsuccessfulWithExpiredCreditCard

	| internalApi responseCreate responseCheckOut idCart date creditCard ISBN |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: (DateAndTime current previous).
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !

!testRun: #InternalAPITest #test16CheckOutUnsuccessfulWithExpiredCreditCard stamp: 'ja 12/2/2020 18:27:58'!
ERROR!

!testRun: #InternalAPITest #test16CheckOutUnsuccessfulWithExpiredCreditCard stamp: 'ja 12/2/2020 18:27:58'!
ERROR!
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 18:32:56' prior: 50979384!
test16CheckOutUnsuccessfulWithExpiredCreditCard

	| internalApi responseCreate responseCheckOut idCart date creditCard ISBN |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: (Date now subtractMonth: (Year yearNumber: 2018)  ).
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !

!testRun: #InternalAPITest #test16CheckOutUnsuccessfulWithExpiredCreditCard stamp: 'ja 12/2/2020 18:33:00'!
ERROR!

!testRun: #InternalAPITest #test16CheckOutUnsuccessfulWithExpiredCreditCard stamp: 'ja 12/2/2020 18:33:00'!
ERROR!
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 18:33:39' prior: 50979419!
test16CheckOutUnsuccessfulWithExpiredCreditCard

	| internalApi responseCreate responseCheckOut idCart date creditCard ISBN |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: (Date now subtractMonth: (Year yearNumber: 2018)  ).
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !

!testRun: #InternalAPITest #test16CheckOutUnsuccessfulWithExpiredCreditCard stamp: 'ja 12/2/2020 18:33:43'!
ERROR!

!testRun: #InternalAPITest #test16CheckOutUnsuccessfulWithExpiredCreditCard stamp: 'ja 12/2/2020 18:33:43'!
ERROR!
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 18:34:10' prior: 50979455!
test16CheckOutUnsuccessfulWithExpiredCreditCard

	| internalApi responseCreate responseCheckOut idCart date creditCard ISBN |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: (DateAndTime now subtractMonth: (Year yearNumber: 2018)  ).
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !

!testRun: #InternalAPITest #test16CheckOutUnsuccessfulWithExpiredCreditCard stamp: 'ja 12/2/2020 18:34:15'!
ERROR!

!testRun: #InternalAPITest #test16CheckOutUnsuccessfulWithExpiredCreditCard stamp: 'ja 12/2/2020 18:34:15'!
ERROR!
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 18:34:23' prior: 50979491!
test16CheckOutUnsuccessfulWithExpiredCreditCard

	| internalApi responseCreate responseCheckOut idCart date creditCard ISBN |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: (Date now subtractMonth: (Year yearNumber: 2018)  ).
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'ja 12/2/2020 18:38:11'!
pastYear
	
	^ Month month: today monthIndex year: today yearNumber - 1! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'ja 12/2/2020 18:38:37' prior: 50974243!
expiredCreditCard
	
	^CreditCard expiringOn: self pastYear.! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'ja 12/2/2020 18:39:00'!
nextYear
	
	^ Month month: today monthIndex year: today yearNumber + 1! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'ja 12/2/2020 18:39:15' prior: 50974236!
notExpiredCreditCard
	
	^CreditCard expiringOn: self nextYear.! !

!classDefinition: #InternalAPITest category: #TusLibros stamp: 'ja 12/2/2020 18:40:49'!
TestCase subclass: #InternalAPITest
	instanceVariableNames: 'debitBehavior testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 18:40:43' prior: 50979527!
test16CheckOutUnsuccessfulWithExpiredCreditCard

	| internalApi responseCreate responseCheckOut idCart date creditCard ISBN |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	
	creditCard _ testObjectFactory pastYear.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'setUp' stamp: 'ja 12/2/2020 18:41:30' prior: 50978020 overrides: 16927572!
setUp 

	debitBehavior _ [ :anAmount :aCreditCard | ].
	testObjectFactory _ StoreTestObjectsFactory new.! !
!InternalAPITest methodsFor: 'setUp' stamp: 'ja 12/2/2020 18:41:35' prior: 50979613 overrides: 16927572!
setUp 

	debitBehavior _ [ :anAmount :aCreditCard | ].
	
	testObjectFactory _ StoreTestObjectsFactory new.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 18:42:08' prior: 50979585!
test16CheckOutUnsuccessfulWithExpiredCreditCard

	| internalApi responseCreate responseCheckOut idCart date creditCard ISBN |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	
	creditCard _ testObjectFactory pastYear.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: testObjectFactory today . 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 18:44:40' prior: 50979627!
test16CheckOutUnsuccessfulWithExpiredCreditCard

	| internalApi responseCreate responseCheckOut idCart date creditCard ISBN |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	
	creditCard _ testObjectFactory pastYear.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: testObjectFactory today . 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 18:44:59' prior: 50979654!
test16CheckOutUnsuccessfulWithExpiredCreditCard

	| internalApi responseCreate responseCheckOut idCart creditCard ISBN |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	creditCard _ testObjectFactory pastYear.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: testObjectFactory today . 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 18:45:47' prior: 50979681!
test16CheckOutUnsuccessfulWithExpiredCreditCard

	| internalApi responseCreate responseCheckOut idCart creditCard ISBN |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	creditCard _ testObjectFactory expiredCreditCard.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: testObjectFactory today . 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !

!testRun: #InternalAPITest #test16CheckOutUnsuccessfulWithExpiredCreditCard stamp: 'ja 12/2/2020 18:46:22'!
ERROR!

!testRun: #InternalAPITest #test16CheckOutUnsuccessfulWithExpiredCreditCard stamp: 'ja 12/2/2020 18:46:22'!
ERROR!
!InternalAPI methodsFor: 'API' stamp: 'ja 12/2/2020 18:46:30'!
checkOutCart: aSmallInteger withCreditCart: aCreditCard ofOwner: aString 
	self shouldBeImplemented.! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/2/2020 18:46:35' prior: 50979738!
checkOutCart: aSmallInteger withCreditCart: aCreditCard ofOwner: aString 
	
	! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/2/2020 18:47:06' prior: 50979744!
checkOutCart: aSmallInteger withCreditCart: aCreditCard ofOwner: aString 
	
	| cart cashier|
	
	[ | idCart |cart _ carts at: idCart ] on: Error do:[^ UnsuccessfulResponse with: (self class cartNotRegisteredErrorDescription) ].
	
	[ | aDate |cashier _ Cashier toCheckout: cart charging: aCreditCard throught: merchantProcesor on: aDate registeringOn: OrderedCollection new] on: Error do: [:error| ^ UnsuccessfulResponse with: error messageText].
	
	cashier checkOut.
	
	^ SuccessfulResponse with: self nextTransaction.! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/2/2020 18:47:30' prior: 50979749!
checkOutCart: aSmallInteger withCreditCart: aCreditCard ofOwner: aString 
	
	! !

!classDefinition: #KeyNotFound category: #TusLibros stamp: 'ja 12/2/2020 18:49:21'!
Error subclass: #KeyNotFound
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InternalAPI methodsFor: 'API' stamp: 'ja 12/2/2020 18:52:40'!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	
	| cart cashier|
	
	[cart _ carts at: aCartId ] on: Error do:[^ UnsuccessfulResponse with: (self class cartNotRegisteredErrorDescription) ].
	
	[cashier _ Cashier toCheckout: cart charging: aCreditCard throught: merchantProcesor on: aDate registeringOn: OrderedCollection new] on: Error do: [:error| ^ UnsuccessfulResponse with: error messageText].
	
	cashier checkOut.
	
	^ SuccessfulResponse with: self nextTransaction.
	! !

!methodRemoval: InternalAPI #checkOutCart:withCreditCart:ofOwner: stamp: 'ja 12/2/2020 18:52:45'!
checkOutCart: aSmallInteger withCreditCart: aCreditCard ofOwner: aString 
	
	!

!methodRemoval: InternalAPI #checkOutCart:withCreditCart:thatExpiresOn:ofOwner: stamp: 'ja 12/2/2020 18:52:50'!
checkOutCart: idCart withCreditCart: aCreditCard thatExpiresOn: aDate ofOwner: aUser
	
	| cart cashier|
	
	[cart _ carts at: idCart ] on: Error do:[^ UnsuccessfulResponse with: (self class cartNotRegisteredErrorDescription) ].
	
	[cashier _ Cashier toCheckout: cart charging: aCreditCard throught: merchantProcesor on: aDate registeringOn: OrderedCollection new] on: Error do: [:error| ^ UnsuccessfulResponse with: error messageText].
	
	cashier checkOut.
	
	^ SuccessfulResponse with: self nextTransaction.
	!
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 18:54:01' prior: 50979706!
test16CheckOutUnsuccessfulWithExpiredCreditCard

	| internalApi responseCreate responseCheckOut idCart creditCard ISBN |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	creditCard _ testObjectFactory expiredCreditCard.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: testObjectFactory today . 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCard: creditCard ofOwner: 'Alan Kay' on: DateAndTime now.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 18:54:37' prior: 50979824!
test16CheckOutUnsuccessfulWithExpiredCreditCard

	| internalApi responseCreate responseCheckOut idCart creditCard ISBN |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	creditCard _ testObjectFactory expiredCreditCard.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: testObjectFactory today . 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCard: creditCard ofOwner: 'Alan Kay' on: testObjectFactory today.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !

!testRun: #InternalAPITest #test16CheckOutUnsuccessfulWithExpiredCreditCard stamp: 'ja 12/2/2020 19:09:57'!
PASSED!
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 19:12:17'!
test17CheckOutUnsuccessfulWithInvalidUser

	| internalApi responseCreate responseCheckOut idCart creditCard ISBN |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	creditCard _ testObjectFactory expiredCreditCard.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: testObjectFactory today . 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCard: creditCard ofOwner: 'Alan Kay' on: testObjectFactory today.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 19:12:56' prior: 50979880!
test17CheckOutUnsuccessfulWithInvalidUser

	| internalApi responseCreate responseCheckOut idCart creditCard ISBN |
	
	internalApi _ self internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	creditCard _ testObjectFactory expiredCreditCard.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: testObjectFactory today . 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCard: creditCard ofOwner: 'Edsger Dijkstra' on: testObjectFactory today.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/2/2020 19:18:57' prior: 50979780!
checkOutCart: aCartId withCreditCard: aCreditCard ofOwner: anUser on: aDate
	
	| cart cashier|
	
	[cart _ carts at: aCartId ] on: Error do:[^ UnsuccessfulResponse with: (self class cartNotRegisteredErrorDescription) ].
	
	[cashier _ Cashier toCheckout: cart charging: aCreditCard throught: merchantProcesor on: aDate registeringOn: OrderedCollection new] on: Error do: [:error| ^ UnsuccessfulResponse with: error messageText].
	
	cashier checkOut.
	
	^ SuccessfulResponse with: self nextTransaction.
	! !
!StoreTestObjectsFactory methodsFor: 'date' stamp: 'ja 12/2/2020 19:20:35'!
internalApi
	
	| catalog |
	
	catalog _ Dictionary new.
	catalog add: 'book' -> 100; add: 'book1' -> 200; add: 'book2' -> 300.
	
	^ InternalAPI with: self authenticatedUsers 
				on: DateAndTime now 
				usingCatalog: catalog 
				usingMerchantProccesor: self.! !

!methodRemoval: InternalAPITest #internalApi stamp: 'ja 12/2/2020 19:21:32'!
internalApi
	
	| catalog |
	
	catalog _ Dictionary new.
	catalog add: 'book' -> 100; add: 'book1' -> 200; add: 'book2' -> 300.
	
	^ InternalAPI with: self authenticatedUsers 
				on: DateAndTime now 
				usingCatalog: catalog 
				usingMerchantProccesor: self.!
!InternalAPITest methodsFor: 'create test' stamp: 'ja 12/2/2020 19:21:49' prior: 50975154!
test01CreateCartSuccessfulWithCorrectClientIdAndPassword

	| response internalApi |
	
	internalApi _ testObjectFactory internalApi.
	response _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.
		
	self assert: response code = 0.
		
	! !
!InternalAPITest methodsFor: 'create test' stamp: 'ja 12/2/2020 19:21:54' prior: 50975205!
test02CreateCartReturnsDifferentIdPerCustomer

	| internalApi response1 response2|
	
	internalApi _ testObjectFactory internalApi.
 	
	response1 _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	response2 _ internalApi createCartFor: 'Dan Ingalls' with: 'smalltalk'.	
	
	self deny: response1 payload = response2 payload.
		
	! !
!InternalAPITest methodsFor: 'create test' stamp: 'ja 12/2/2020 19:21:58' prior: 50975363!
test03CreateCartReturnsOneWithUnregisteredClientId

	| internalApi response |
	
	internalApi _ testObjectFactory internalApi.
 	
	response _ internalApi createCartFor: 'Edsger Dijkstra' with: 'nanoDijkstra'.
	
	self assert: response code = 1.
	
	self assert: response payload equals: InternalAPI userNotRegisteredErrorDescription. 
		
	
		
	! !
!InternalAPITest methodsFor: 'create test' stamp: 'ja 12/2/2020 19:22:01' prior: 50975432!
test04CreateCartSuccessfulEffectivlyCreatesCart

	| internalApi response |
	
	internalApi _ testObjectFactory internalApi.
 	
	response _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	self assert: response code = 0.
	
	self assert: (internalApi hasCartsOf: 'Alan Kay').
	
		
	! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/2/2020 19:22:08' prior: 50976281!
test05AddToCartSuccessfulWithCartId

	| internalApi responseCreate responseAdd |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseAdd _ internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3 on: (DateAndTime now). 

	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/2/2020 19:22:12' prior: 50976404!
test06AddToCartSuccessfulEffectivlyAddedToCart

	| internalApi responseCreate responseAdd idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 

	self assert: (internalApi cart: idCart has: ISBN times: 3).
	
	self assert: responseAdd code = 0.
	
	self assert: responseAdd payload equals: 'OK'.
	! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/2/2020 19:22:17' prior: 50976902!
test07AddToCartUnsuccessfulWithCartInvalid

	| internalApi responseAdd idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ self invalidIdCart.
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: InternalAPI cartNotRegisteredErrorDescription.
	! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/2/2020 19:22:21' prior: 50978675!
test08AddToCartUnsuccessfulWithIvalidISBN

	| responseCreate internalApi idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ self invalidISBN.
	
	self should: [ internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). self fail]  
		raise: Error  
		withMessageText: Cart invalidItemErrorMessage.
	
	
	! !
!InternalAPITest methodsFor: 'addToCart' stamp: 'ja 12/2/2020 19:22:32' prior: 50977398!
test09AddToCartUnsuccessfulWithIvalidISBN

	| responseCreate internalApi responseAdd idCart ISBN|
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload .
	
	ISBN _ 'book'.
	
	responseAdd _ internalApi addToCart: idCart withISBN: ISBN withQuantity: 0 on: (DateAndTime now). 
	
	self assert: responseAdd code = 1.
	
	self assert: responseAdd payload equals: Cart invalidQuantityErrorMessage.
	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'ja 12/2/2020 19:22:39' prior: 50977522!
test10ListCartWithEmptyCart

	| internalApi responseCreate responseList |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseList _ internalApi listCart: responseCreate payload.
	
	self assert: responseList payload isEmpty.

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'ja 12/2/2020 19:22:43' prior: 50977770!
test11ListCartWithOnlyItemIntoCart

	| internalApi responseCreate responseList ISBN idCart listItems |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: (DateAndTime now). 
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN withOccurrences: 3.
	
	self assert: responseList payload = listItems.

	! !
!InternalAPITest methodsFor: 'list cart' stamp: 'ja 12/2/2020 19:22:47' prior: 50977840!
test12ListCartWithManyItemsIntoCart

	| internalApi responseCreate responseList ISBN1 ISBN2 idCart listItems |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi addToCart: idCart withISBN: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi addToCart: idCart withISBN: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	responseList _ internalApi listCart: idCart.
	
	listItems _ Bag new.
	
	listItems add: ISBN1 withOccurrences: 3.
	listItems add: ISBN2 withOccurrences: 5.
	
	self assert: responseList payload = listItems.

	! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 19:22:55' prior: 50978347!
test13CheckOutSuccessfulWithNotEmptyCart

	| internalApi responseCreate responseCheckOut ISBN1 ISBN2 idCart creditCard date |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	internalApi addToCart: idCart withISBN: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi addToCart: idCart withISBN: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	date _ DateAndTime now month.
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload = 1.
	
	self assert: responseCheckOut code = 0.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 19:22:59' prior: 50978916!
test14CheckOutUnsuccessfulWithEmptyCart

	| internalApi responseCreate responseCheckOut idCart creditCard date |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: Cashier cartCanNotBeEmptyErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 19:23:04' prior: 50978827!
test15CheckOutUnsuccessfulWithInvalidCart

	| internalApi responseCheckOut creditCard date |
	
	internalApi _ testObjectFactory internalApi.
 	
	internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	date _ DateAndTime now month.
	
	creditCard _ CreditCard expiringOn: date.
	
	responseCheckOut _ internalApi checkOutCart: self invalidIdCart withCreditCart: creditCard thatExpiresOn: date ofOwner: 'Alan Kay'.
	
	self assert: responseCheckOut payload equals: InternalAPI cartNotRegisteredErrorDescription .
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 19:23:08' prior: 50979850!
test16CheckOutUnsuccessfulWithExpiredCreditCard

	| internalApi responseCreate responseCheckOut idCart creditCard ISBN |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	creditCard _ testObjectFactory expiredCreditCard.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: testObjectFactory today . 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCard: creditCard ofOwner: 'Alan Kay' on: testObjectFactory today.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 19:23:12' prior: 50979906!
test17CheckOutUnsuccessfulWithInvalidUser

	| internalApi responseCreate responseCheckOut idCart creditCard ISBN |
	
	internalApi _ testObjectFactory internalApi.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	idCart _ responseCreate payload.
	
	creditCard _ testObjectFactory expiredCreditCard.
	
	idCart _ responseCreate payload.
	
	ISBN _ 'book'.
	
	internalApi addToCart: idCart withISBN: ISBN withQuantity: 3 on: testObjectFactory today . 
	
	responseCheckOut _ internalApi checkOutCart: idCart withCreditCard: creditCard ofOwner: 'Edsger Dijkstra' on: testObjectFactory today.
	
	self assert: responseCheckOut payload equals: Cashier canNotChargeAnExpiredCreditCardErrorMessage.
	
	self assert: responseCheckOut code = 1.! !
!StoreTestObjectsFactory methodsFor: 'internal API' stamp: 'ja 12/2/2020 19:23:52' prior: 50979951!
internalApi
	
	| catalog |
	
	catalog _ Dictionary new.
	catalog add: 'book' -> 100; add: 'book1' -> 200; add: 'book2' -> 300.
	
	^ InternalAPI with: self authenticatedUsers 
				on: today 
				usingCatalog: catalog 
				usingMerchantProccesor: self.! !
!StoreTestObjectsFactory methodsFor: 'internal API' stamp: 'ja 12/2/2020 19:25:01'!
authenticatedUsers

	| users | 
	
	users _ Dictionary new.
	users add: 'Alan Kay' -> 'objetos';
		  add: 'Dan Ingalls' -> 'smalltalk'.
	
	^ users.! !
!StoreTestObjectsFactory methodsFor: 'internal API' stamp: 'ja 12/2/2020 19:25:14' prior: 50980298!
internalApi
	
	| catalog |
	
	catalog _ Dictionary new.
	catalog add: 'book' -> 100; add: 'book1' -> 200; add: 'book2' -> 300.
	
	^ InternalAPI with: self authenticatedUsers 
				on: today 
				usingCatalog: self defaultCatalog 
				usingMerchantProccesor: self.! !
!StoreTestObjectsFactory methodsFor: 'internal API' stamp: 'ja 12/2/2020 19:25:36' prior: 50980317!
internalApi
	
	^ InternalAPI with: self authenticatedUsers 
				on: today 
				usingCatalog: self defaultCatalog 
				usingMerchantProccesor: self.! !

!methodRemoval: InternalAPITest #authenticatedUsers stamp: 'ja 12/2/2020 19:26:01'!
authenticatedUsers

	| users | 
	
	users _ Dictionary new.
	users add: 'Alan Kay' -> 'objetos';
		  add: 'Dan Ingalls' -> 'smalltalk'.
	
	^ users.!
!StoreTestObjectsFactory methodsFor: 'internal API' stamp: 'ja 12/2/2020 19:28:26'!
internalApiUsingMerchantProccessor: aMerchantProccessor
	
	^ InternalAPI with: self authenticatedUsers 
				on: today 
				usingCatalog: self defaultCatalog 
				usingMerchantProccesor: self.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 20:16:03'!
test18ListPurchasesWithEmptyCart

	| internalApi responseListPurchases |
	
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
 	
	internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseListPurchases _ internalApi listPurchases: 'Alan Kay' with: 'objetos'. 
	
	self assert: responseListPurchases payload equals: Bag new.
	
	self assert: responseListPurchases code = 1.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 20:19:04'!
test19ListPurchasesWithOnlyItemIntoCart

	| internalApi responseListPurchases |
	
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
 	
	internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	responseListPurchases _ internalApi listPurchases: 'Alan Kay' with: 'objetos'. 
	
	self assert: responseListPurchases payload equals: Bag new.
	
	self assert: responseListPurchases code = 1.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 20:22:50' prior: 50980368!
test19ListPurchasesWithOnlyItemIntoCart

	| internalApi responseCreate responseListPurchases |
	
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3 on: (DateAndTime now). 
	
	responseListPurchases _ internalApi listPurchases: 'Alan Kay' with: 'objetos'. 
	
	self assert: responseListPurchases payload equals: Bag new.
	
	self assert: responseListPurchases code = 1.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 20:23:51' prior: 50980384!
test19ListPurchasesWithOnlyItemIntoCart

	| internalApi responseCreate responseListPurchases listItems|
	
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3 on: (DateAndTime now). 
	
	responseListPurchases _ internalApi listPurchases: 'Alan Kay' with: 'objetos'. 
	
	listItems _ Bag new.
	
	listItems add: 'book' withOccurrences: 3.
	
	self assert: responseListPurchases payload = listItems.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 20:24:04' prior: 50980404!
test19ListPurchasesWithOnlyItemIntoCart

	| internalApi responseCreate responseListPurchases listItems|
	
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3 on: (DateAndTime now). 
	
	responseListPurchases _ internalApi listPurchases: 'Alan Kay' with: 'objetos'. 
	
	listItems _ Bag new.
	
	listItems add: 'book' withOccurrences: 3.
	
	self assert: responseListPurchases payload = listItems.
	
	self assert: responseListPurchases code = 0.! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 20:24:27' prior: 50980425!
test19ListPurchasesWithOnlyItemIntoCart

	| internalApi responseCreate responseListPurchases listItems|
	
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3 on: (DateAndTime now). 
	
	responseListPurchases _ internalApi listPurchases: 'Alan Kay' with: 'objetos'. 
	
	listItems _ Bag new.
	
	listItems add: 'book' withOccurrences: 3.
	
	self assert: responseListPurchases payload = listItems.
	
	self assert: responseListPurchases code = 0.
	
	"falta assertar el total amount"! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 20:25:30'!
test20ListPurchasesWithManyItemsIntoCart

	| internalApi responseCreate responseListPurchases listItems|
	
	internalApi _ testObjectFactory internalApiUsingMerchantProccessor: self.
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	internalApi addToCart: responseCreate payload withISBN: 'book' withQuantity: 3 on: (DateAndTime now). 
	
	responseListPurchases _ internalApi listPurchases: 'Alan Kay' with: 'objetos'. 
	
	listItems _ Bag new.
	
	listItems add: 'book' withOccurrences: 3.
	
	self assert: responseListPurchases payload = listItems.
	
	self assert: responseListPurchases code = 0.
	
	"falta assertar el total amount"! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 20:32:13' prior: 50980471!
test20ListPurchasesWithManyItemsIntoCart

	| internalApi responseCreate responseListPurchases listItems ISBN1 ISBN2 idCart |
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	ISBN1 _ 'book1'.
	
	ISBN2 _ 'book2'.
	
	idCart _ responseCreate payload.
	
	internalApi addToCart: idCart withISBN: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	internalApi addToCart: idCart withISBN: ISBN2 withQuantity: 5 on: (DateAndTime now).
	
	responseListPurchases _ internalApi listPurchases: 'Alan Kay' with: 'objetos'. 
	
	listItems _ Bag new.
	
	listItems add: ISBN1 withOccurrences: 3.
	listItems add: ISBN2 withOccurrences: 5.
	
	self assert: responseListPurchases payload = listItems.
	
	self assert: responseListPurchases code = 0.
	
	"falta assertar el total amount"! !
!InternalAPITest methodsFor: 'checkOut' stamp: 'ja 12/2/2020 20:51:55'!
test22ListPurchasesUnsuccessfullyWithInvalidPassword

	| internalApi responseCreate ISBN1 idCart |
 	
	responseCreate _ internalApi createCartFor: 'Alan Kay' with: 'objetos'.
	
	ISBN1 _ 'book1'.
	
	idCart _ responseCreate payload.
	
	internalApi addToCart: idCart withISBN: ISBN1 withQuantity: 3 on: (DateAndTime now). 
	
	self should: [internalApi listPurchases: 'Alan Kay' with: 'smalltalk'.  self fail]
		raise: Error  
		withMessageText: InternalAPI invalidPasswordErrorDescription. ! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/2/2020 20:55:44'!
listPurchases: anUser with: aPassword
	
	| cart |
	
	cart _ cartsPerUser at: anUser .
	
	
	
	^ SuccessfulResponse with: cart.! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/2/2020 20:56:04' prior: 50980541!
listPurchases: anUser with: aPassword
	
	| cart listItems |
	
	cart _ cartsPerUser at: anUser .
	
	listItems _ cart items.
	
	^ SuccessfulResponse with: cart.! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/2/2020 20:56:15' prior: 50980548!
listPurchases: anUser with: aPassword
	
	| cart listItems |
	
	cart _ cartsPerUser at: anUser .
	
	listItems _ cart items.
	
	^ SuccessfulResponse with: listItems .! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/2/2020 20:56:31' prior: 50980556!
listPurchases: anUser with: aPassword
	
	| cart listItems |
	
	cart _ cartsPerUser at: anUser .
	
	listItems _ cart items.
	
	^ SuccessfulResponse with: listItems asBag .! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/2/2020 20:57:14' prior: 50980564!
listPurchases: anUser with: aPassword
	
	| cart listItems |
	
	[cart _ cartsPerUser at: anUser ] on: Error do: [ self error: self class userNotRegisteredErrorDescription ].
	
	listItems _ cart items.
	
	^ SuccessfulResponse with: listItems asBag .! !
!InternalAPI methodsFor: 'API' stamp: 'ja 12/2/2020 21:01:50' prior: 50980572!
listPurchases: anUser with: aPassword
	
	| cart listItems |
	
	[cart _ cartsPerUser at: anUser ] on: Error do: [ self error: self class userNotRegisteredErrorDescription ].
	
	( users at: anUser = aPassword ) ifFalse: [ self error: self class invalidPasswordErrorDescription ].
	
	listItems _ cart items.
	
	^ SuccessfulResponse with: listItems asBag .! !

----QUIT----(3 December 2020 00:37:53) CuisUniversity-4365.image priorSource: 20681711!