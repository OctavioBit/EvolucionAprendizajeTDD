

----STARTUP---- (29 October 2020 17:20:19) as C:\Users\Mati\Desktop\facu\IS1\windows64\CuisUniversity-4365.image!


TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliTest category: #'Terni Lapilli' stamp: 'MG 10/29/2020 17:21:59'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilliTest methodsFor: 'no messages' stamp: 'MG 10/29/2020 17:22:04'!
test01! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 17:37:39'!
test01OnGameStartPlayerXBegins
	| game |
			! !

!methodRemoval: TerniLapilliTest #test01 stamp: 'MG 10/29/2020 17:37:48'!
test01!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 17:38:33'!
test02AfterPlayerXMovesPlayerOShouldPlay
			! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 17:39:00'!
test03AfterPlayerOMovesPlayerXShouldMove
			! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 17:39:15' prior: 50878824!
test01OnGameStartPlayerXBegins
! !

!classDefinition: #TerniLapilli category: #'Terni Lapilli' stamp: 'MG 10/29/2020 17:45:43'!
Object subclass: #TerniLapilli
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 17:45:31' prior: 50878841!
test01OnGameStartPlayerXBegins
	| game |
	
	game := TerniLapilli new.
	
	self assert: true equals: game isPlayingX.
	self assert: 0 equals: game playedTokens.! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 17:46:12'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterPlayerXMovesPlayerOShouldPlay stamp: 'MG 10/29/2020 17:46:12'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOMovesPlayerXShouldMove stamp: 'MG 10/29/2020 17:46:12'!
PASSED!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 17:46:12'!
ERROR!
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/29/2020 17:46:30'!
isPlayingX
	self shouldBeImplemented.! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 17:46:40'!
ERROR!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 17:46:51'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterPlayerXMovesPlayerOShouldPlay stamp: 'MG 10/29/2020 17:46:51'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOMovesPlayerXShouldMove stamp: 'MG 10/29/2020 17:46:51'!
PASSED!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 17:46:51'!
ERROR!
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/29/2020 17:46:59' prior: 50878874!
isPlayingX
	^true.! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 17:47:02'!
ERROR!
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/29/2020 17:47:14'!
playedTokens
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/29/2020 17:47:21' prior: 50878902!
playedTokens
	^0.! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 17:47:22'!
PASSED!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 17:47:24'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXMovesPlayerOShouldPlay stamp: 'MG 10/29/2020 17:47:24'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOMovesPlayerXShouldMove stamp: 'MG 10/29/2020 17:47:24'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 17:49:03' prior: 50878831!
test02AfterPlayerXMovesPlayerOShouldPlay
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@3.
	
	self assert: true equals: game isPlayingO.
	self assert: 1 equals: game playedTokens.			! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 17:49:08'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXMovesPlayerOShouldPlay stamp: 'MG 10/29/2020 17:49:08'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterPlayerOMovesPlayerXShouldMove stamp: 'MG 10/29/2020 17:49:08'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXMovesPlayerOShouldPlay stamp: 'MG 10/29/2020 17:49:08'!
ERROR!
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/29/2020 17:50:03'!
putXAt: aPoint 
	self shouldBeImplemented.! !

!classDefinition: #TerniLapilli category: #'Terni Lapilli' stamp: 'MG 10/29/2020 17:51:02'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'tokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/29/2020 17:50:57' prior: 50878947!
putXAt: aPoint 
	tokens := tokens + 1.! !

!testRun: #TerniLapilliTest #test02AfterPlayerXMovesPlayerOShouldPlay stamp: 'MG 10/29/2020 17:51:05'!
ERROR!
!TerniLapilli methodsFor: 'nil' stamp: 'MG 10/29/2020 17:51:41' overrides: 16896425!
initialize 

	tokens := 0.! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 17:51:50'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXMovesPlayerOShouldPlay stamp: 'MG 10/29/2020 17:51:50'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterPlayerOMovesPlayerXShouldMove stamp: 'MG 10/29/2020 17:51:50'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXMovesPlayerOShouldPlay stamp: 'MG 10/29/2020 17:51:50'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 17:52:26'!
test02AfterPlayerXTurnPlayerOShouldPlay
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@3.
	
	self assert: true equals: game isPlayingO.
	self assert: 1 equals: game playedTokens.			! !

!methodRemoval: TerniLapilliTest #test02AfterPlayerXMovesPlayerOShouldPlay stamp: 'MG 10/29/2020 17:52:26'!
test02AfterPlayerXMovesPlayerOShouldPlay
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@3.
	
	self assert: true equals: game isPlayingO.
	self assert: 1 equals: game playedTokens.			!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 17:52:38'!
test03AfterPlayerOTurnPlayerXShouldMove
			! !

!methodRemoval: TerniLapilliTest #test03AfterPlayerOMovesPlayerXShouldMove stamp: 'MG 10/29/2020 17:52:39'!
test03AfterPlayerOMovesPlayerXShouldMove
			!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 18:12:28' prior: 50878853!
test01OnGameStartPlayerXBegins
	| game |
	
	game := TerniLapilli new.
	
	self assert: false equals: game isOver.
	self assert: true equals: game isPlayingX.
	self assert: 0 equals: game playedTokens.! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 18:13:42'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 18:13:42'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 18:13:42'!
PASSED!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 18:13:53'!
ERROR!
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/29/2020 18:14:08'!
isOver
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/29/2020 18:14:15' prior: 50879036!
isOver
	^false.! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 18:14:20'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 18:14:27'!
ERROR!
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/29/2020 18:14:48'!
isPlayingO
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/29/2020 18:15:04' prior: 50879050!
isPlayingO
	^tokens = 1.! !

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 18:15:06'!
FAILURE!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 18:15:30'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 18:15:30'!
FAILURE!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 18:15:30'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 18:15:30'!
FAILURE!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 18:15:51'!
FAILURE!
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/29/2020 18:16:32' prior: 50878907!
playedTokens
	^tokens.! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 18:16:36'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 18:16:36'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 18:16:36'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 18:17:06' prior: 50878985!
test02AfterPlayerXTurnPlayerOShouldPlay
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@3.
	
	"self assert: false equals: game isOver."
	self assert: true equals: game isPlayingO.
	self assert: 1 equals: game playedTokens.			! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 18:18:52' prior: 50879004!
test03AfterPlayerOTurnPlayerXShouldMove
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@3.
	game putOAt: 2@3.
	
	self assert: true equals: game isPlayingX.
	self assert: false equals: game isPlayingO.
	self assert: 2 equals: game playedTokens.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 18:19:15' prior: 50879095!
test02AfterPlayerXTurnPlayerOShouldPlay
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@3.
	
	"self assert: false equals: game isOver."
	self assert: true equals: game isPlayingO.
	self assert: false equals: game isPlayingX.
	self assert: 1 equals: game playedTokens.			! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 18:19:16'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 18:19:16'!
FAILURE!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 18:19:16'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 18:19:20'!
ERROR!
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/29/2020 18:19:31'!
putOAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/29/2020 18:21:19' prior: 50879143!
putOAt: aPoint 
	tokens := tokens + 1.! !

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 18:21:21'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 18:21:22'!
FAILURE!
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/29/2020 18:22:03' prior: 50878895!
isPlayingX
	^tokens even.! !

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 18:22:06'!
FAILURE!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 18:22:08'!
FAILURE!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 18:22:13'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 18:22:13'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 18:22:13'!
PASSED!
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/29/2020 18:22:53' prior: 50879055!
isPlayingO
	^tokens odd.! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 18:22:55'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 18:22:55'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 18:22:55'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 18:26:07'!
test04
	| game |
	
	game := TerniLapilli new.
	game playOAt: 3@3.
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 18:26:17' prior: 50879195!
test04
	| game |
	
	game := TerniLapilli new.
	game putOAt: 3@3.
! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 18:26:19'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 18:26:19'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 18:26:20'!
PASSED!

!testRun: #TerniLapilliTest #test04 stamp: 'MG 10/29/2020 18:26:20'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 18:30:43'!
test04PlayerOCantPlayOnPlayerXTurn
	| game |
	
	game := TerniLapilli new.
	self should: [game putOAt: 3@3] 
		raise: Error 
		withExceptionDo: [
			self assert: 0 equals: game playedTokens.
			self assert: true equals: game isPlayingX.	 
		]
		description: (TerniLapilli invalidTurnPlayMessage: #O ).
		
! !

!methodRemoval: TerniLapilliTest #test04 stamp: 'MG 10/29/2020 18:30:49'!
test04
	| game |
	
	game := TerniLapilli new.
	game putOAt: 3@3.
!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 18:30:50'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 18:30:50'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 18:30:50'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 18:30:50'!
ERROR!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 18:30:50'!
ERROR!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 18:31:16'!
invalidTurnPlayMessage: aSymbol 
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 18:32:36' prior: 50879253!
invalidTurnPlayMessage: invalidTurnPlayer 
	^'Player ', invalidTurnPlayer asString , 'can not play on this turn'.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 18:32:39' prior: 50879259!
invalidTurnPlayMessage: invalidTurnPlayer 
	^'Player ', invalidTurnPlayer asString , ' can not play on this turn'.! !

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 18:32:41'!
FAILURE!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 18:32:53'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 18:32:53'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 18:32:53'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 18:32:53'!
FAILURE!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 18:32:53'!
FAILURE!
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/29/2020 18:35:13' prior: 50879148!
putOAt: aPoint 
	self isPlayingO ifFalse: [^self signalErrorWith: (self class invalidTurnPlayMessage: #O)].
	tokens := tokens + 1.! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 18:35:16'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 18:35:16'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 18:35:16'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 18:35:16'!
ERROR!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 18:35:16'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 18:35:43' prior: 50879219!
test04PlayerOCantPlayOnPlayerXTurn
	| game |
	
	game := TerniLapilli new.
	self should: [game putOAt: 3@3] 
		raise: Error 
		withExceptionDo: [ :anErorr |
			self assert: 0 equals: game playedTokens.
			self assert: true equals: game isPlayingX.	 
		]
		description: (TerniLapilli invalidTurnPlayMessage: #O ).
		
! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 18:35:44'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 18:35:44'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 18:35:44'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 18:35:44'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 18:36:41'!
test05PlayerXCantPlayOnPlayerOTurn
	| game |
	
	game := TerniLapilli new.
	game putXAt: 2@3.
	self should: [game putXAt: 3@3] 
		raise: Error 
		withExceptionDo: [ :anErorr |
			self assert: 0 equals: game playedTokens.
			self assert: true equals: game isPlayingO.	 
		]
		description: (TerniLapilli invalidTurnPlayMessage: #X ).
		
! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 18:36:43'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 18:36:43'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 18:36:43'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 18:36:43'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 18:36:43'!
FAILURE!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 18:36:43'!
FAILURE!
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/29/2020 18:37:46' prior: 50878959!
putXAt: aPoint 
	self isPlayingX ifFalse: [^self signalErrorWith: (self class invalidTurnPlayMessage: #X)].
	tokens := tokens + 1.! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 18:37:50'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 18:37:50'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 18:37:51'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 18:37:51'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 18:37:51'!
FAILURE!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 18:37:51'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 18:38:01' prior: 50879345!
test05PlayerXCantPlayOnPlayerOTurn
	| game |
	
	game := TerniLapilli new.
	game putXAt: 2@3.
	self should: [game putXAt: 3@3] 
		raise: Error 
		withExceptionDo: [ :anErorr |
			self assert: 1 equals: game playedTokens.
			self assert: true equals: game isPlayingO.	 
		]
		description: (TerniLapilli invalidTurnPlayMessage: #X ).
		
! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 18:38:04'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 18:38:04'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 18:38:04'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 18:38:04'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 18:38:04'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 18:44:27'!
test06PlayerCantPutMoreThanThreeTokens
	| game |
	
	game := TerniLapilli new.
	1 to: 3 do: [ :y |
		game putXAt: 1@y.
		game putOAt: 2@y.
	].

	"self should:
		raise:  withExceptionDo:  description: "! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 18:44:49' prior: 50879407!
test05PlayerXCantPlayOnPlayerOTurn
	| game |
	
	game := TerniLapilli new.
	game putXAt: 2@3.
	self should: [game putXAt: 3@3] 
		raise: Error 
		withExceptionDo: [ :anErorr |
			self assert: 1 equals: game playedTokens.
			self assert: true equals: game isPlayingO.	 
		]
		description: 'hola' "(TerniLapilli invalidTurnPlayMessage: #X )."
		
! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 18:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 18:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 18:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 18:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 18:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerCantPutMoreThanThreeTokens stamp: 'MG 10/29/2020 18:44:51'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 18:45:41' prior: 50879447!
test05PlayerXCantPlayOnPlayerOTurn
	| game |
	
	game := TerniLapilli new.
	game putXAt: 2@3.
	self should: [game putXAt: 3@3] 
		raise: Error
		withExceptionDo: [ :anErorr |
			self assert: 1 equals: game playedTokens.
			self assert: true equals: game isPlayingO.	 
		]
		
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 18:45:49' prior: 50879318!
test04PlayerOCantPlayOnPlayerXTurn
	| game |
	
	game := TerniLapilli new.
	self should: [game putOAt: 3@3] 
		raise: Error 
		withExceptionDo: [ :anErorr |
			self assert: 0 equals: game playedTokens.
			self assert: true equals: game isPlayingX.	 
		].
		
! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 18:45:50'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 18:45:50'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 18:45:50'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 18:45:50'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 18:45:50'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerCantPutMoreThanThreeTokens stamp: 'MG 10/29/2020 18:45:50'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 18:47:53' prior: 50879437!
test06PlayerCantPutMoreThanThreeTokens
	| game |
	
	game := TerniLapilli new.
	1 to: 3 do: [ :y |
		game putXAt: 1@y.
		game putOAt: 2@y.
	].

	self should: [game putXAt:3@1]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: 6 equals: game playedTokens.
				
		]! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 18:48:00'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 18:48:00'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 18:48:00'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 18:48:00'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 18:48:00'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerCantPutMoreThanThreeTokens stamp: 'MG 10/29/2020 18:48:00'!
FAILURE!

!testRun: #TerniLapilliTest #test06PlayerCantPutMoreThanThreeTokens stamp: 'MG 10/29/2020 18:48:00'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 18:49:38' prior: 50879526!
test06PlayerCantPutMoreThanThreeTokens
	| game |
	
	game := TerniLapilli new.
	
	self should: [game putXAt:3@1]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: 6 equals: game playedTokens.
				
		]! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 18:51:07' prior: 50879562!
test06PlayerCantPutMoreThanThreeTokens
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 3@1.
	game putOAt: 1@2.
	game putXAt: 2@2.
	game putOAt: 3@2.
	
	self should: [game putXAt:3@3]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: 6 equals: game playedTokens.
				
		]! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 18:51:09'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 18:51:09'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 18:51:09'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 18:51:09'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 18:51:09'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerCantPutMoreThanThreeTokens stamp: 'MG 10/29/2020 18:51:09'!
FAILURE!

!testRun: #TerniLapilliTest #test06PlayerCantPutMoreThanThreeTokens stamp: 'MG 10/29/2020 18:51:09'!
FAILURE!

!testRun: #TerniLapilliTest #test06PlayerCantPutMoreThanThreeTokens stamp: 'MG 10/29/2020 18:51:20'!
FAILURE!
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/29/2020 18:53:36' prior: 50879379!
putXAt: aPoint 
	self isPlayingX ifFalse: [^self signalErrorWith: (self class invalidTurnPlayMessage: #X)].
	tokens = 6 ifTrue: [self signalErrorWith: (self class cantPlayMoreTokens) ].
	tokens := tokens + 1.! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/29/2020 18:54:01' prior: 50879613!
putXAt: aPoint 
	self isPlayingX ifFalse: [^self signalErrorWith: (self class invalidTurnPlayMessage: #X)].
	tokens = 6 ifTrue: [self signalErrorWith: (self class cantPlayMoreTokensMessage) ].
	tokens := tokens + 1.! !

!testRun: #TerniLapilliTest #test06PlayerCantPutMoreThanThreeTokens stamp: 'MG 10/29/2020 18:54:04'!
PASSED!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 18:54:06'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 18:54:06'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 18:54:06'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 18:54:06'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 18:54:06'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerCantPutMoreThanThreeTokens stamp: 'MG 10/29/2020 18:54:06'!
PASSED!
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/29/2020 18:54:52' prior: 50879623!
putXAt: aPoint 
	self isPlayingX ifFalse: [^self signalErrorWith: (self class invalidTurnPlayMessage: #X)].
	tokens >= 6 ifTrue: [self signalErrorWith: (self class cantPlayMoreTokensMessage) ].
	tokens := tokens + 1.! !

!testRun: #TerniLapilliTest #test06PlayerCantPutMoreThanThreeTokens stamp: 'MG 10/29/2020 18:54:56'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerCantPutMoreThanThreeTokens stamp: 'MG 10/29/2020 18:54:57'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerCantPutMoreThanThreeTokens stamp: 'MG 10/29/2020 18:55:00'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerCantPutMoreThanThreeTokens stamp: 'MG 10/29/2020 18:55:26'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 18:55:36' prior: 50879572!
test06PlayerCantPutMoreThanThreeTokens
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 3@1.
	game putOAt: 1@2.
	game putXAt: 2@2.
	game putOAt: 3@2.
	
	self should: [game putXAt:3@3]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: 6 equals: game playedTokens.
				
		]! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 18:55:43' prior: 50879681!
test06PlayerCantPutMoreThanThreeTokens
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 3@1.
	game putOAt: 1@2.
	game putXAt: 2@2.
	game putOAt: 3@2.
	
	self halt.
	self should: [game putXAt:3@3]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: 6 equals: game playedTokens.
				
		]! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/29/2020 18:56:15' prior: 50879657!
putXAt: aPoint 
	self isPlayingX ifFalse: [^self signalErrorWith: (self class invalidTurnPlayMessage: #X)].
	tokens >= 6 ifTrue: [^self signalErrorWith: (self class cantPlayMoreTokensMessage) ].
	tokens := tokens + 1.! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 18:56:19'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 18:56:19'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 18:56:19'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 18:56:19'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 18:56:19'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 18:56:27' prior: 50879695!
test06PlayerCantPutMoreThanThreeTokens
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 3@1.
	game putOAt: 1@2.
	game putXAt: 2@2.
	game putOAt: 3@2.
	

	self should: [game putXAt:3@3]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: 6 equals: game playedTokens.
				
		]! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 18:56:28'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 18:56:28'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 18:56:28'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 18:56:28'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 18:56:28'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayerCantPutMoreThanThreeTokens stamp: 'MG 10/29/2020 18:56:28'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 18:56:31' prior: 50879736!
test06PlayerCantPutMoreThanThreeTokens
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 3@1.
	game putOAt: 1@2.
	game putXAt: 2@2.
	game putOAt: 3@2.
	
	self halt.
	self should: [game putXAt:3@3]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: 6 equals: game playedTokens.
				
		]! !

!testRun: #TerniLapilliTest #test06PlayerCantPutMoreThanThreeTokens stamp: 'MG 10/29/2020 18:56:46'!
PASSED!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 18:58:06'!
cantPlayMoreTokensMessage
	^'Can not play more than 3 tokens per player. Players can move tokens if game is not over'.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 18:58:14' prior: 50879787!
cantPlayMoreTokensMessage
	^'Can not play more than 3 tokens per player. Players can move tokens'.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 18:58:31' prior: 50879770!
test06PlayerCantPutMoreThanThreeTokens
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 3@1.
	game putOAt: 1@2.
	game putXAt: 2@2.
	game putOAt: 3@2.
	

	self should: [game putXAt:3@3]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: 6 equals: game playedTokens.
				
		]! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/29/2020 18:58:46' prior: 50879293!
putOAt: aPoint 
	self isPlayingO ifFalse: [^self signalErrorWith: (self class invalidTurnPlayMessage: #O)].
	tokens >= 6 ifTrue: [^self signalErrorWith: (self class cantPlayMoreTokensMessage) ].
	tokens := tokens + 1.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 18:58:59'!
test06PlayersCantPutMoreThanThreeTokensEach
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 3@1.
	game putOAt: 1@2.
	game putXAt: 2@2.
	game putOAt: 3@2.
	

	self should: [game putXAt:3@3]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: 6 equals: game playedTokens.
				
		]! !

!methodRemoval: TerniLapilliTest #test06PlayerCantPutMoreThanThreeTokens stamp: 'MG 10/29/2020 18:59:00'!
test06PlayerCantPutMoreThanThreeTokens
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 3@1.
	game putOAt: 1@2.
	game putXAt: 2@2.
	game putOAt: 3@2.
	

	self should: [game putXAt:3@3]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: 6 equals: game playedTokens.
				
		]!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 19:15:46'!
test07PlayerXTokenIsPlacedCorrectly
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	
	self assert: true equals: (game XTokenAt: 1@1).
	self assert: false equals: (game OTokenAt: 1@1).! !

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 19:15:50'!
ERROR!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 19:16:03'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 19:16:03'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 19:16:03'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 19:16:03'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 19:16:03'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/29/2020 19:16:03'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 19:16:03'!
ERROR!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 19:16:03'!
ERROR!
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/29/2020 19:27:42'!
XTokenAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/29/2020 19:27:56' prior: 50879892!
XTokenAt: aPoint 
	^true.! !

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 19:27:57'!
ERROR!
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/29/2020 19:28:04'!
OTokenAt: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/29/2020 19:28:09' prior: 50879904!
OTokenAt: aPoint 
	^false.! !

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 19:28:10'!
PASSED!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 19:28:10'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 19:28:10'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 19:28:11'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 19:28:11'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 19:28:11'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/29/2020 19:28:11'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 19:28:11'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 19:28:53' prior: 50879853!
test07PlayerXTokenIsPlacedCorrectly
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	
	self assert: true equals: (game XTokenAt: 1@1).
	self assert: false equals: (game OTokenAt: 1@1).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 19:30:17'!
test08PlayerOTokenIsPlacedCorrectly
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.	
	
	self assert: true equals: (game OTokenAt: 2@1).
	self assert: false equals: (game XTokenAt: 2@1).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 19:30:31' prior: 50879950!
test08PlayerOTokenIsPlacedCorrectly
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.	
	
	self assert: true equals: (game XTokenAt: 1@1).
	self assert: true equals: (game OTokenAt: 2@1).
	self assert: false equals: (game XTokenAt: 2@1).! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 19:30:34'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 19:30:34'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 19:30:35'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 19:30:35'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 19:30:35'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/29/2020 19:30:35'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 19:30:35'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 19:30:35'!
FAILURE!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 19:30:35'!
FAILURE!

!classDefinition: #TerniLapilli category: #'Terni Lapilli' stamp: 'MG 10/29/2020 19:32:31'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'tokens xTokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/29/2020 19:32:26' prior: 50879709!
putXAt: aPoint 
	
	self isPlayingX ifFalse: [^self signalErrorWith: (self class invalidTurnPlayMessage: #X)].
	self playedTokens >= 6 ifTrue: [^self signalErrorWith: (self class cantPlayMoreTokensMessage) ].
	
	xTokens add: aPoint.
	! !

!classDefinition: #TerniLapilli category: #'Terni Lapilli' stamp: 'MG 10/29/2020 19:33:16'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'tokens xTokens oTokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'initialization' stamp: 'MG 10/29/2020 19:33:15' prior: 50878967 overrides: 16896425!
initialize 

	xTokens := OrderedCollection new.
	oTokens := OrderedCollection new.
	tokens := 0.! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/29/2020 19:33:55' prior: 50879816!
putOAt: aPoint 
	
	self isPlayingO ifFalse: [^self signalErrorWith: (self class invalidTurnPlayMessage: #O)].
	self playedTokens >= 6 ifTrue: [^self signalErrorWith: (self class cantPlayMoreTokensMessage) ].
	
	oTokens add: aPoint.! !
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/29/2020 19:35:19' prior: 50879897!
XTokenAt: aPoint 
	^xTokens includes: aPoint.! !
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/29/2020 19:35:35' prior: 50879909!
OTokenAt: aPoint 
	^oTokens includes: aPoint.! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 19:35:40'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 19:35:41'!
FAILURE!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 19:35:41'!
ERROR!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 19:35:41'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 19:35:41'!
FAILURE!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/29/2020 19:35:41'!
ERROR!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 19:35:41'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 19:35:41'!
ERROR!
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/29/2020 19:36:27' prior: 50879080!
playedTokens

	^oTokens size + xTokens size. ! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 19:36:28'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 19:36:28'!
FAILURE!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 19:36:28'!
ERROR!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 19:36:28'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 19:36:28'!
FAILURE!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/29/2020 19:36:28'!
ERROR!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 19:36:28'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 19:36:28'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 19:36:34'!
ERROR!
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/29/2020 19:37:03' prior: 50879181!
isPlayingO
	^self playedTokens odd.! !
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/29/2020 19:37:14' prior: 50879160!
isPlayingX
	^self playedTokens even.! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 19:37:18'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 19:37:18'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 19:37:18'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 19:37:18'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 19:37:18'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/29/2020 19:37:18'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 19:37:18'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 19:37:19'!
PASSED!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 19:37:33'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 19:37:33'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 19:37:33'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 19:37:33'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 19:37:33'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/29/2020 19:37:33'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 19:37:33'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 19:37:33'!
PASSED!

Object subclass: #TerniLapilli
	instanceVariableNames: 'xTokens oTokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: #'Terni Lapilli' stamp: 'MG 10/29/2020 19:37:51'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'xTokens oTokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 19:37:53'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 19:37:53'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 19:37:53'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 19:37:53'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 19:37:53'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/29/2020 19:37:53'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 19:37:53'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 19:37:53'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 19:38:49'!
test09
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	
	self should: [game putOAt: 1@1] 
	raise: Error  
	withExceptionDo: [:anError | 
			
	]! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 19:40:15' prior: 50880219!
test09
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	
	self should: [game putOAt: 1@1] 
	raise: Error  
	withExceptionDo: [:anError | 
		self assert: 1 equals: game playedTokens.
		self assert: true equals: (game XTokenAt: 1@1).
	]! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 19:40:30' prior: 50879014!
test01OnGameStartPlayerXBegins
	| game |
	
	game := TerniLapilli new.
	
	self deny: game isOver.
	self assert: game isPlayingX.
	self assert: 0 equals: game playedTokens.! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 19:40:31'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 19:41:41'!
test09PlayersCantStackTokens
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	
	self should: [game putOAt: 1@1] 
	raise: Error  
	withExceptionDo: [:anError | 
		self assert: 1 equals: game playedTokens.
		self assert: true equals: (game XTokenAt: 1@1).
	]! !

!methodRemoval: TerniLapilliTest #test09 stamp: 'MG 10/29/2020 19:41:43'!
test09
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	
	self should: [game putOAt: 1@1] 
	raise: Error  
	withExceptionDo: [:anError | 
		self assert: 1 equals: game playedTokens.
		self assert: true equals: (game XTokenAt: 1@1).
	]!

----SNAPSHOT----(29 October 2020 19:42:46) CuisUniversity-4365.image priorSource: 17508862!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/29/2020 20:20:27'!
FAILURE!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/29/2020 20:20:27'!
FAILURE!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 20:20:33'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 20:20:33'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 20:20:33'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 20:20:33'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 20:20:33'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/29/2020 20:20:34'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 20:20:34'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 20:20:34'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/29/2020 20:20:34'!
FAILURE!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/29/2020 20:20:34'!
FAILURE!
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/29/2020 20:24:02' prior: 50880034!
putOAt: aPoint 
	
	self isPlayingO ifFalse: [^self signalErrorWith: (self class invalidTurnPlayMessage: #O)].
	self playedTokens >= 6 ifTrue: [^self signalErrorWith: (self class cantPlayMoreTokensMessage) ].
	((self XTokenAt: aPoint) or: [self OTokenAt: aPoint]) ifTrue: 
	[^self signalErrorWith: (self class cantStackTokensMessage: aPoint)].
	oTokens add: aPoint.! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/29/2020 20:24:09' prior: 50880315!
putOAt: aPoint 
	
	self isPlayingO ifFalse: [^self signalErrorWith: (self class invalidTurnPlayMessage: #O)].
	self playedTokens >= 6 ifTrue: [^self signalErrorWith: (self class cantPlayMoreTokensMessage) ].
	((self XTokenAt: aPoint) or: [self OTokenAt: aPoint]) ifTrue: [^self signalErrorWith: (self class cantStackTokensMessage: aPoint)].
	oTokens add: aPoint.! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/29/2020 20:24:28' prior: 50880330!
putOAt: aPoint 
	
	self isPlayingO ifFalse: [^self signalErrorWith: (self class invalidTurnPlayMessage: #O)].
	self playedTokens >= 6 ifTrue: [^self signalErrorWith: (self class cantPlayMoreTokensMessage) ].
	((self XTokenAt: aPoint) or: [self OTokenAt: aPoint]) ifTrue: [^self signalErrorWith: (self class cantStackTokensMessage: aPoint)].
	oTokens add: aPoint.! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/29/2020 20:24:44' prior: 50880009!
putXAt: aPoint 
	
	self isPlayingX ifFalse: [^self signalErrorWith: (self class invalidTurnPlayMessage: #X)].
	self playedTokens >= 6 ifTrue: [^self signalErrorWith: (self class cantPlayMoreTokensMessage) ].
	((self XTokenAt: aPoint) or: [self OTokenAt: aPoint]) ifTrue: [^self signalErrorWith: (self class cantStackTokensMessage: aPoint)].
	xTokens add: aPoint.
	! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 20:24:56'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 20:24:56'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 20:24:56'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 20:24:56'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 20:24:56'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/29/2020 20:24:56'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 20:24:56'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 20:24:56'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/29/2020 20:24:56'!
PASSED!

----SNAPSHOT----(29 October 2020 20:25:06) CuisUniversity-4365.image priorSource: 17555886!

----SNAPSHOT----(29 October 2020 20:25:13) CuisUniversity-4365.image priorSource: 17560116!
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/29/2020 20:26:04' prior: 50880345!
putOAt: aPoint 
	
	self isPlayingO ifFalse: [^self signalErrorWith: (self class invalidTurnPlayMessage: #O)].
	self playedTokens >= 6 ifTrue: [^self signalErrorWith: (self class cantPlayMoreTokensMessage) ].
	((self XTokenAt: aPoint) or: [self OTokenAt: aPoint]) ifTrue: [^self signalErrorWith: (self class cantStackTokensMessage: aPoint)].
	oTokens add: aPoint.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 20:26:44'!
cantStackTokensMessage: aPoint
	^'Can not place more tokens in ', aPoint asString.! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 20:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 20:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 20:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 20:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 20:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/29/2020 20:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 20:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 20:26:54'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/29/2020 20:26:54'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 20:29:28'!
test10TokenCantBePutOutsideBoard
	| game |
	
	game := TerniLapilli new.

	
	self should: [	game putXAt: 4@2.] 
	raise: Error  
	withExceptionDo: [:anError | 
		self assert: 0 equals: game playedTokens.
	]! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 20:29:35'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 20:29:35'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 20:29:35'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 20:29:35'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 20:29:35'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/29/2020 20:29:35'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 20:29:35'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 20:29:35'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/29/2020 20:29:35'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/29/2020 20:29:35'!
FAILURE!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/29/2020 20:29:35'!
FAILURE!
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/29/2020 20:33:55' prior: 50880360!
putXAt: aPoint 
	
	self isPlayingX ifFalse: [^self signalErrorWith: (self class invalidTurnPlayMessage: #X)].
	self playedTokens >= 6 ifTrue: [^self signalErrorWith: (self class cantPlayMoreTokensMessage) ].
	((self XTokenAt: aPoint) or: [self OTokenAt: aPoint]) ifTrue: [^self signalErrorWith: (self class cantStackTokensMessage: aPoint)].
	(aPoint between: 1@1 and: 3@3) ifTrue:[^self signalErrorWith: (self class tokenOutOfBoardMessage: aPoint)].
	xTokens add: aPoint.
	! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 20:34:42'!
tokenOutOfBoardMessage: aPoint
	^'Point', aPoint asString , ' is outside of the board'.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 20:34:53' prior: 50880526!
tokenOutOfBoardMessage: aPoint
	^'Point ', aPoint asString , ' is outside of the board'.! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 20:35:31'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 20:35:31'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 20:35:31'!
ERROR!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 20:35:31'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 20:35:31'!
ERROR!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/29/2020 20:35:31'!
ERROR!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 20:35:31'!
ERROR!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 20:35:31'!
ERROR!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/29/2020 20:35:31'!
ERROR!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/29/2020 20:35:31'!
FAILURE!

4@1 between: 1@1 and: 3@3.!

2@1 between: 1@1 and: 3@3.!

1@3 between: 1@1 and: 3@3.!

3@3 between: 1@1 and: 3@3.!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 20:36:57'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 20:36:57'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 20:36:58'!
ERROR!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 20:36:58'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 20:36:58'!
ERROR!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/29/2020 20:36:58'!
ERROR!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 20:36:58'!
ERROR!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 20:36:58'!
ERROR!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/29/2020 20:36:58'!
ERROR!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/29/2020 20:36:58'!
FAILURE!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 20:36:59'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 20:37:10'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 20:37:20'!
ERROR!
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/29/2020 20:37:40' prior: 50880508!
putXAt: aPoint 
	
	self isPlayingX ifFalse: [^self signalErrorWith: (self class invalidTurnPlayMessage: #X)].
	self playedTokens >= 6 ifTrue: [^self signalErrorWith: (self class cantPlayMoreTokensMessage) ].
	((self XTokenAt: aPoint) or: [self OTokenAt: aPoint]) ifTrue: [^self signalErrorWith: (self class cantStackTokensMessage: aPoint)].
	(aPoint between: 1@1 and: 3@3) ifFalse:[^self signalErrorWith: (self class tokenOutOfBoardMessage: aPoint)].
	xTokens add: aPoint.
	! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 20:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 20:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 20:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 20:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 20:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/29/2020 20:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 20:37:43'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 20:37:44'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/29/2020 20:37:44'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/29/2020 20:37:44'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 20:38:45' prior: 50880462!
test10TokenCantBePutOutsideBoard
	| game |
	
	game := TerniLapilli new.

	
	self should: [	game putXAt: 4@-1.] 
	raise: Error  
	withExceptionDo: [:anError | 
		self assert: 0 equals: game playedTokens.
	]! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 20:43:34'!
test11MoveToken
	| game |
	
	game := TerniLapilli new.
	
	

	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 20:57:26'!
test11TokenFromNonStarPointCanBeMovedHorizontally
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 3@2.
	game putOAt: 1@2.
	game putXAt: 2@2.
	game putOAt: 3@1.
	
	game moveFrom: 1@2 to: 1@3.
	self assert: (game XTokenAt: 1@3).! !

!methodRemoval: TerniLapilliTest #test11MoveToken stamp: 'MG 10/29/2020 20:57:29'!
test11MoveToken
	| game |
	
	game := TerniLapilli new.
	
	

	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 20:57:41' prior: 50879826!
test06PlayersCantPutMoreThanThreeTokensEach
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 3@2.
	game putOAt: 1@2.
	game putXAt: 2@2.
	game putOAt: 3@1.
	

	self should: [game putXAt:3@3]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: 6 equals: game playedTokens.
				
		]! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 20:57:48'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 20:57:48'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 20:57:48'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 20:57:48'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 20:57:48'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/29/2020 20:57:48'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 20:57:48'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 20:57:48'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/29/2020 20:57:48'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/29/2020 20:57:48'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromNonStarPointCanBeMovedHorizontally stamp: 'MG 10/29/2020 20:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test11TokenFromNonStarPointCanBeMovedHorizontally stamp: 'MG 10/29/2020 20:57:48'!
ERROR!

!testRun: #TerniLapilliTest #test11TokenFromNonStarPointCanBeMovedHorizontally stamp: 'MG 10/29/2020 20:58:00'!
ERROR!
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/29/2020 20:58:12'!
moveFrom: aPoint to: aPoint2 
	self shouldBeImplemented.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 20:59:57' prior: 50880686!
test11TokenFromNonStarPointCanBeMovedHorizontally
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 3@2.
	game putOAt: 1@2.
	game putXAt: 2@2.
	game putOAt: 3@1.
	
	game moveXFrom: 1@2 to: 1@3.
	self assert: (game XTokenAt: 1@3).! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 21:00:00'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 21:00:00'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 21:00:00'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 21:00:00'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 21:00:00'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/29/2020 21:00:00'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 21:00:00'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 21:00:00'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/29/2020 21:00:00'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/29/2020 21:00:00'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromNonStarPointCanBeMovedHorizontally stamp: 'MG 10/29/2020 21:00:00'!
ERROR!

!testRun: #TerniLapilliTest #test11TokenFromNonStarPointCanBeMovedHorizontally stamp: 'MG 10/29/2020 21:00:00'!
ERROR!
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/29/2020 21:00:07'!
moveXFrom: aPoint to: aPoint2 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/29/2020 21:03:03' prior: 50880819!
moveXFrom: srcPoint to: dstPoint 
	xTokens replaceAll: srcPoint with: dstPoint. ! !

!testRun: #TerniLapilliTest #test11TokenFromNonStarPointCanBeMovedHorizontally stamp: 'MG 10/29/2020 21:03:05'!
FAILURE!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 21:03:22'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 21:03:22'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 21:03:22'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 21:03:22'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 21:03:22'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/29/2020 21:03:22'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 21:03:22'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 21:03:22'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/29/2020 21:03:22'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/29/2020 21:03:22'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromNonStarPointCanBeMovedHorizontally stamp: 'MG 10/29/2020 21:03:22'!
FAILURE!

!testRun: #TerniLapilliTest #test11TokenFromNonStarPointCanBeMovedHorizontally stamp: 'MG 10/29/2020 21:03:22'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 21:09:37' prior: 50880767!
test11TokenFromNonStarPointCanBeMovedHorizontally
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	game moveXFrom: 3@2 to: 3@3.
	self assert: (game XTokenAt: 3@3).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 21:09:49' prior: 50880703!
test06PlayersCantPutMoreThanThreeTokensEach
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.

	self should: [game putXAt:3@3]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: 6 equals: game playedTokens.
				
		]! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 21:10:26'!
test11TokenAnyPointCanBeMovedHorizontally
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	game moveXFrom: 3@2 to: 3@3.
	self assert: (game XTokenAt: 3@3).! !

!methodRemoval: TerniLapilliTest #test11TokenAnyPointCanBeMovedHorizontally stamp: 'MG 10/29/2020 21:10:28'!
test11TokenAnyPointCanBeMovedHorizontally
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	game moveXFrom: 3@2 to: 3@3.
	self assert: (game XTokenAt: 3@3).!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 21:10:39'!
test11TokenFromAnyPointCanBeMovedHorizontally
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	game moveXFrom: 3@2 to: 3@3.
	self assert: (game XTokenAt: 3@3).! !

!methodRemoval: TerniLapilliTest #test11TokenFromNonStarPointCanBeMovedHorizontally stamp: 'MG 10/29/2020 21:10:41'!
test11TokenFromNonStarPointCanBeMovedHorizontally
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	game moveXFrom: 3@2 to: 3@3.
	self assert: (game XTokenAt: 3@3).!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 21:10:58' prior: 50880924!
test11TokenFromAnyPointCanBeMovedHorizontally
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	game moveXFrom: 2@2 to: 1@2.
	self assert: (game XTokenAt: 1@2).! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/29/2020 21:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/29/2020 21:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/29/2020 21:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/29/2020 21:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/29/2020 21:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/29/2020 21:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 21:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/29/2020 21:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/29/2020 21:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/29/2020 21:10:59'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedHorizontally stamp: 'MG 10/29/2020 21:10:59'!
PASSED!

!methodRemoval: TerniLapilli #moveFrom:to: stamp: 'MG 10/29/2020 21:11:24'!
moveFrom: aPoint to: aPoint2 
	self shouldBeImplemented.!
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/29/2020 21:11:33'!
moveOFrom: srcPoint to: dstPoint 
	oTokens replaceAll: srcPoint with: dstPoint. ! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 21:12:35'!
test11TokenFromAnyPointCanBeMovedVertically
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	game moveXFrom: 2@2 to: 2@3.
	self assert: (game XTokenAt: 2@3).! !

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedVertically stamp: 'MG 10/29/2020 21:12:36'!
PASSED!

!methodRemoval: TerniLapilliTest #test11TokenFromAnyPointCanBeMovedVertically stamp: 'MG 10/29/2020 21:12:43'!
test11TokenFromAnyPointCanBeMovedVertically
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	game moveXFrom: 2@2 to: 2@3.
	self assert: (game XTokenAt: 2@3).!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 21:13:51'!
test11TokenFromAnyPointCanBeMovedNonDiagonally
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	game moveXFrom: 2@2 to: 1@2.
	self assert: (game XTokenAt: 1@2).! !

!methodRemoval: TerniLapilliTest #test11TokenFromAnyPointCanBeMovedHorizontally stamp: 'MG 10/29/2020 21:13:53'!
test11TokenFromAnyPointCanBeMovedHorizontally
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	game moveXFrom: 2@2 to: 1@2.
	self assert: (game XTokenAt: 1@2).!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 21:14:47'!
test12TokenFromNonStarPointCantBeMoved
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	game moveXFrom: 2@2 to: 1@2.
	self assert: (game XTokenAt: 1@2).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 21:15:30' prior: 50881057!
test12TokenFromNonStarPointCantBeMoved
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	self should: [game moveXFrom: 2@2 to: 1@2]
		raise: Error
		! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 21:16:24' prior: 50881069!
test12TokenFromNonStarPointCantBeMoved
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	self should: [game moveXFrom: 2@2 to: 1@2]
		raise: Error
		withExceptionDo: [:anError |
			self assert: (game XTokenAt: 2@2).
		]! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/29/2020 21:16:54'!
test12TokenFromNonStarPointCantBeMovedDiagonally
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	self should: [game moveXFrom: 2@2 to: 1@2]
		raise: Error
		withExceptionDo: [:anError |
			self assert: (game XTokenAt: 2@2).
		]! !

!methodRemoval: TerniLapilliTest #test12TokenFromNonStarPointCantBeMoved stamp: 'MG 10/29/2020 21:16:57'!
test12TokenFromNonStarPointCantBeMoved
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	self should: [game moveXFrom: 2@2 to: 1@2]
		raise: Error
		withExceptionDo: [:anError |
			self assert: (game XTokenAt: 2@2).
		]!

----QUIT----(29 October 2020 21:48:08) CuisUniversity-4365.image priorSource: 17560209!

----STARTUP---- (31 October 2020 10:40:02) as C:\Users\Mati\Desktop\facu\IS1\windows64\CuisUniversity-4365.image!

!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 10:41:37' prior: 50880619!
putXAt: aPoint 
	
	self isPlayingX ifFalse: [^self signalErrorWith: (self class invalidTurnPlayMessage: #X)].
	
	self playedTokens >= 6 ifTrue: [^self signalErrorWith: (self class cantPlayMoreTokensMessage) ].
	((self XTokenAt: aPoint) or: [self OTokenAt: aPoint]) ifTrue: [^self signalErrorWith: (self class cantStackTokensMessage: aPoint)].
	(aPoint between: 1@1 and: 3@3) ifFalse:[^self signalErrorWith: (self class tokenOutOfBoardMessage: aPoint)].
	xTokens add: aPoint.
	! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 10:43:28'!
put: aPlayer tokenAt: aPoint 
	
	(self isPlaying: aPlayer) ifFalse: [^self signalErrorWith: (self class invalidTurnPlayMessage: aPlayer)].
	
	self playedTokens >= 6 ifTrue: [^self signalErrorWith: (self class cantPlayMoreTokensMessage) ].
	((self XTokenAt: aPoint) or: [self OTokenAt: aPoint]) ifTrue: [^self signalErrorWith: (self class cantStackTokensMessage: aPoint)].
	(aPoint between: 1@1 and: 3@3) ifFalse:[^self signalErrorWith: (self class tokenOutOfBoardMessage: aPoint)].
	xTokens add: aPoint.
	! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 10:46:14' prior: 50881146!
put: aPlayer tokenAt: aPoint 
	
	(self isPlaying: aPlayer) ifFalse: [^self signalErrorWith: (self class invalidTurnPlayMessage: aPlayer)].
	
	self playedTokens >= 6 ifTrue: [^self signalErrorWith: (self class cantPlayMoreTokensMessage) ].
	((self XTokenAt: aPoint) or: [self OTokenAt: aPoint]) ifTrue: [^self signalErrorWith: (self class cantStackTokensMessage: aPoint)].
	(aPoint between: 1@1 and: 3@3) ifFalse:[^self signalErrorWith: (self class tokenOutOfBoardMessage: aPoint)].
	self player: aPlayer addTokenAt: aPoint.
	! !
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/31/2020 10:48:02'!
isPlaying: aPlayer
	aPlayer = #X ifTrue: [^self playedTokens even].
	aPlayer = #O ifTrue: [^self playedTokens odd].
	^false.! !
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/31/2020 10:48:07' prior: 50881184!
isPlaying: aPlayer
	
	aPlayer = #X ifTrue: [^self playedTokens even].
	aPlayer = #O ifTrue: [^self playedTokens odd].
	^false.! !
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/31/2020 10:50:22' prior: 50881191!
isPlaying: aPlayer
	
	^ (aPlayer = #X and:[self playedTokens even])
	 or: [aPlayer = #O and: [self playedTokens odd]]
	! !
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/31/2020 10:51:20'!
player: aPlayer addTokenAt: aPoint
	^xTokens includes: aPoint.! !
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/31/2020 10:52:21' prior: 50881205!
player: aPlayer addTokenAt: aPoint
	
	aPlayer = #X ifTrue: [xTokens add: aPoint].
	aPlayer = #O ifTrue: [oTokens add: aPoint].! !
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/31/2020 10:53:00' prior: 50881210!
player: aPlayer addTokenAt: aPoint
	
	aPlayer = #X ifTrue: [xTokens add: aPoint].
	aPlayer = #O ifTrue: [oTokens add: aPoint].
	! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 10:54:16'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 10:54:16'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 10:54:16'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 10:54:16'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 10:54:16'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 10:54:16'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 10:54:16'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 10:54:16'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 10:54:16'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 10:54:16'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 10:54:16'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 10:54:16'!
FAILURE!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 10:54:16'!
FAILURE!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 10:54:19'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 10:54:19'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 10:54:19'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 10:54:19'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 10:54:19'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 10:54:19'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 10:54:19'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 10:54:19'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 10:54:19'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 10:54:19'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 10:54:19'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 10:54:19'!
FAILURE!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 10:54:19'!
FAILURE!
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 10:55:30' prior: 50880411!
putOAt: aPoint 
	
	self put: #O tokenAt: aPoint.! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 10:55:42' prior: 50881128!
putXAt: aPoint 
	
	self put: #X tokenAt: aPoint.! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 10:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 10:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 10:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 10:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 10:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 10:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 10:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 10:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 10:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 10:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 10:56:23'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 10:56:23'!
FAILURE!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 10:56:23'!
FAILURE!
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 10:58:54'!
verifyValidPlayPosition: aPoint
	
	((self XTokenAt: aPoint) or: [self OTokenAt: aPoint]) ifTrue: [^self signalErrorWith: (self class cantStackTokensMessage: aPoint)].
	(aPoint between: 1@1 and: 3@3) ifFalse:[^self signalErrorWith: (self class tokenOutOfBoardMessage: aPoint)].
	
	! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 10:59:15' prior: 50881165!
put: aPlayer tokenAt: aPoint 
	
	(self isPlaying: aPlayer) ifFalse: [^self signalErrorWith: (self class invalidTurnPlayMessage: aPlayer)].
	
	self playedTokens >= 6 ifTrue: [^self signalErrorWith: (self class cantPlayMoreTokensMessage) ].
	self verifyValidPlayPosition: aPoint.
	
	self player: aPlayer addTokenAt: aPoint.
	! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 11:00:13'!
hasTokenAt: aPoint
	
	^(self XTokenAt: aPoint) or: [self OTokenAt: aPoint]! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 11:00:49' prior: 50881368!
verifyValidPlayPosition: aPoint
	
	(self hasTokenAt: aPoint) ifTrue: [^self signalErrorWith: (self class cantStackTokensMessage: aPoint)].
	(aPoint between: 1@1 and: 3@3) ifFalse:[^self signalErrorWith: (self class tokenOutOfBoardMessage: aPoint)].
	
	! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 11:01:24'!
isInBoard: aPoint
	
	^aPoint between: 1@1 and: 3@3
	
	! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 11:01:39' prior: 50881399!
verifyValidPlayPosition: aPoint
	
	(self hasTokenAt: aPoint) ifTrue: [^self signalErrorWith: (self class cantStackTokensMessage: aPoint)].
	(self isInBoard: aPoint) ifFalse:[^self signalErrorWith: (self class tokenOutOfBoardMessage: aPoint)].
	
	! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 11:02:25'!
verifyPositionIsNotOccupied: aPoint
	
	(self hasTokenAt: aPoint) ifTrue: [^self signalErrorWith: (self class cantStackTokensMessage: aPoint)].

	
	! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 11:02:40' prior: 50881415!
verifyValidPlayPosition: aPoint
	
	self verifyPositionIsNotOccupied: aPoint.
	(self isInBoard: aPoint) ifFalse:[^self signalErrorWith: (self class tokenOutOfBoardMessage: aPoint)].
	
	! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 11:02:59'!
verifyPositionInBoard: aPoint
	
	(self isInBoard: aPoint) ifFalse:[^self signalErrorWith: (self class tokenOutOfBoardMessage: aPoint)].
	
	! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 11:03:22' prior: 50881433!
verifyValidPlayPosition: aPoint
	
	self verifyPositionIsNotOccupied: aPoint.
	self verifyPositionIsNotOccupied: aPoint.
	
	! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 11:03:36' prior: 50881450!
verifyValidPlayPosition: aPoint
	
	self verifyPositionIsNotOccupied: aPoint.
	self verifyPositionInBoard: aPoint.
	
	! !
!TerniLapilli methodsFor: 'initialization' stamp: 'MG 10/31/2020 11:05:24' prior: 50880028 overrides: 16896425!
initialize 

	xTokens := OrderedCollection new.
	oTokens := OrderedCollection new.
	! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 11:05:39'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 11:05:39'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 11:05:39'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 11:05:39'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 11:05:39'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 11:05:39'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 11:05:39'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 11:05:39'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 11:05:39'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 11:05:40'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 11:05:40'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 11:05:40'!
FAILURE!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 11:05:40'!
FAILURE!
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 11:07:18'!
verifyPlayerTurn: aPlayer 
	
	(self isPlaying: aPlayer) ifFalse: [^self signalErrorWith: (self class invalidTurnPlayMessage: aPlayer)].
	
	! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 11:07:44' prior: 50881380!
put: aPlayer tokenAt: aPoint 
	
	self verifyPlayerTurn: aPlayer.
	
	self playedTokens >= 6 ifTrue: [^self signalErrorWith: (self class cantPlayMoreTokensMessage) ].
	self verifyValidPlayPosition: aPoint.
	
	self player: aPlayer addTokenAt: aPoint.
	! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 11:08:48'!
verifyNotMovePhase
	
	self playedTokens >= 6 ifTrue: [^self signalErrorWith: (self class cantPlayMoreTokensMessage) ].
	! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 11:09:03' prior: 50881523!
put: aPlayer tokenAt: aPoint 
	
	self verifyPlayerTurn: aPlayer.
	self verifyNotMovePhase.
	self verifyValidPlayPosition: aPoint.
	
	self player: aPlayer addTokenAt: aPoint.
	! !

Object subclass: #Player
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #Player category: #'Terni Lapilli' stamp: 'MG 10/31/2020 11:11:27'!
Object subclass: #Player
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

----SNAPSHOT----(31 October 2020 11:11:40) CuisUniversity-4365.image priorSource: 17583044!

Player subclass: #O
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #O category: #'Terni Lapilli' stamp: 'MG 10/31/2020 11:11:55'!
Player subclass: #O
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Player subclass: #X
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #X category: #'Terni Lapilli' stamp: 'MG 10/31/2020 11:11:58'!
Player subclass: #X
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Object subclass: #Player
	instanceVariableNames: 'tokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #Player category: #'Terni Lapilli' stamp: 'MG 10/31/2020 11:32:07'!
Object subclass: #Player
	instanceVariableNames: 'tokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!Player methodsFor: 'nil' stamp: 'MG 10/31/2020 11:32:28'!
tokens
	^tokens.! !
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/31/2020 11:33:06' prior: 50880117!
isPlayingO
	^self isPlaying: #O.! !
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/31/2020 11:33:14' prior: 50880121!
isPlayingX
	^self isPlaying: #X.! !

----QUIT----(31 October 2020 13:47:50) CuisUniversity-4365.image priorSource: 17597094!

----STARTUP---- (31 October 2020 14:31:25) as C:\Users\Mati\Desktop\facu\IS1\windows64\CuisUniversity-4365.image!


!classDefinition: #TerniLapilli category: #'Terni Lapilli' stamp: 'MG 10/31/2020 14:32:46'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'xTokens oTokens playerX'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: #'Terni Lapilli' stamp: 'MG 10/31/2020 14:32:47'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'xTokens oTokens playerX playerO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'initialization' stamp: 'MG 10/31/2020 14:32:43' prior: 50881465 overrides: 16896425!
initialize 
	
	playerX = Player new.
	playerO = Player new.
	xTokens := OrderedCollection new.
	oTokens := OrderedCollection new.
	! !
!Player methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 14:33:18'!
isPlaying
	self subclassResponsibility.! !
!O methodsFor: 'nil' stamp: 'MG 10/31/2020 14:33:32' overrides: 50881636!
isPlaying
	! !

!methodRemoval: O #isPlaying stamp: 'MG 10/31/2020 14:33:57'!
isPlaying
	!

!methodRemoval: Player #isPlaying stamp: 'MG 10/31/2020 14:34:03'!
isPlaying
	self subclassResponsibility.!

Object subclass: #Player
	instanceVariableNames: 'tokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #Player category: #'Terni Lapilli' stamp: 'MG 10/31/2020 14:34:21'!
Object subclass: #Player
	instanceVariableNames: 'tokens'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!Player methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 14:38:35'!
addTokenAt: aPoint.
	tokens add: aPoint.! !
!Player methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 14:38:41' prior: 50881660!
addTokenAt: aPoint
	tokens add: aPoint.! !

!classRemoval: #O stamp: 'MG 10/31/2020 14:38:58'!
Player subclass: #O
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #X stamp: 'MG 10/31/2020 14:39:08'!
Player subclass: #X
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!Player methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 14:39:52' overrides: 16896425!
initialize
	tokens := OrderedCollection new.! !

!methodRemoval: Player #tokens stamp: 'MG 10/31/2020 14:40:03'!
tokens
	^tokens.!
!Player methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 14:40:11'!
tokens
	^tokens.! !
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/31/2020 14:41:25' prior: 50880045!
XTokenAt: aPoint 
	^playerX tokens includes: aPoint.! !
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/31/2020 14:41:32' prior: 50880050!
OTokenAt: aPoint 
	^playerO tokens includes: aPoint.! !
!TerniLapilli methodsFor: 'initialization' stamp: 'MG 10/31/2020 14:42:24' prior: 50881629 overrides: 16896425!
initialize 
	
	playerX = Player new.
	playerO = Player new.
! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 14:42:58'!
isWithinBoardLimits: aPoint
	
	^aPoint between: 1@1 and: 3@3
	
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 14:42:58' prior: 50881442!
verifyPositionInBoard: aPoint
	
	(self isWithinBoardLimits: aPoint) ifFalse:[^self signalErrorWith: (self class tokenOutOfBoardMessage: aPoint)].
	
	! !

!methodRemoval: TerniLapilli #isInBoard: stamp: 'MG 10/31/2020 14:42:58'!
isInBoard: aPoint
	
	^aPoint between: 1@1 and: 3@3
	
	!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 14:43:41'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 14:43:41'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 14:43:41'!
ERROR!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 14:43:41'!
ERROR!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 14:43:41'!
ERROR!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 14:43:41'!
ERROR!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 14:43:41'!
ERROR!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 14:43:41'!
ERROR!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 14:43:41'!
ERROR!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 14:43:41'!
ERROR!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 14:43:41'!
ERROR!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 14:43:41'!
ERROR!
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/31/2020 14:45:30' prior: 50880082!
playedTokens

	^playerO tokens size + playerX tokens size. ! !
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/31/2020 14:45:36' prior: 50881198!
isPlaying: aPlayer
	
	^ (aPlayer = playerX and:[self playedTokens even])
	 or: [aPlayer = playerO and: [self playedTokens odd]]
	! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 14:45:38'!
FAILURE!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 14:45:38'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 14:45:38'!
ERROR!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 14:45:38'!
ERROR!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 14:45:38'!
ERROR!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 14:45:38'!
ERROR!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 14:45:38'!
ERROR!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 14:45:38'!
ERROR!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 14:45:38'!
ERROR!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 14:45:38'!
ERROR!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 14:45:38'!
ERROR!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 14:45:38'!
ERROR!
!Player methodsFor: 'gameplay' stamp: 'MG 10/31/2020 14:46:03' prior: 50881688!
tokens
	^tokens copy.! !
!Player methodsFor: 'accessing' stamp: 'MG 10/31/2020 14:46:32'!
tokensAmount
	^tokens size.! !
!Player methodsFor: 'accessing' stamp: 'MG 10/31/2020 14:46:38'!
tokenAmount
	^tokens size.! !

!methodRemoval: Player #tokensAmount stamp: 'MG 10/31/2020 14:46:40'!
tokensAmount
	^tokens size.!
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/31/2020 14:46:59' prior: 50881772!
isPlaying: aPlayer
	
	^ (aPlayer = playerX and:[self playedTokens even])
	 or: [aPlayer = playerO and: [self playedTokens odd]]
	! !
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/31/2020 14:47:22' prior: 50881767!
playedTokens

	^playerO tokenAmount + playerX tokenAmount . ! !
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/31/2020 14:47:34' prior: 50881598!
isPlayingO
	^self isPlaying: playerO.! !
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/31/2020 14:47:40' prior: 50881602!
isPlayingX
	^self isPlaying: playerX.! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 14:48:39' prior: 50881000!
moveOFrom: srcPoint to: dstPoint 
	playerO moveFrom: srcPoint to: dstPoint.! !
!Player methodsFor: 'nil' stamp: 'MG 10/31/2020 14:49:03'!
moveFrom: srcPoint to: dstPoint
	tokens replaceAll: srcPoint with: dstPoint .! !
!Player methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 14:49:06' prior: 50881859!
moveFrom: srcPoint to: dstPoint
	tokens replaceAll: srcPoint with: dstPoint.! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 14:49:23' prior: 50880824!
moveXFrom: srcPoint to: dstPoint 
	playerX moveFrom: srcPoint to: dstPoint.! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 14:49:44' prior: 50881854!
moveOFrom: srcPoint to: dstPoint 
	"verifies de pisado etc"
	playerO moveFrom: srcPoint to: dstPoint.! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 14:50:50' prior: 50881314!
putOAt: aPoint 
	
	
	self put: playerO tokenAt: aPoint.! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 14:50:55' prior: 50881883!
putOAt: aPoint 
	
	self put: playerO tokenAt: aPoint.! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 14:50:59' prior: 50881319!
putXAt: aPoint 
	
	self put: playerX tokenAt: aPoint.! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 14:52:05' prior: 50881541!
put: aPlayer tokenAt: aPoint 
	
	self verifyPlayerTurn: aPlayer.
	self verifyNotMovePhase.
	self verifyValidPlayPosition: aPoint.
	
	aPlayer putTokenAt: aPoint.
	! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 14:52:51' prior: 50881898!
put: aPlayer tokenAt: aPoint 
	
	self verifyPlayerTurn: aPlayer.
	self verifyNotMovePhase.
	self verifyValidPlayPosition: aPoint.
	
	aPlayer addTokenAt: aPoint.
	! !

!methodRemoval: TerniLapilli #player:addTokenAt: stamp: 'MG 10/31/2020 14:53:02'!
player: aPlayer addTokenAt: aPoint
	
	aPlayer = #X ifTrue: [xTokens add: aPoint].
	aPlayer = #O ifTrue: [oTokens add: aPoint].
	!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 14:53:06'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 14:53:06'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 14:53:06'!
ERROR!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 14:53:06'!
ERROR!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 14:53:07'!
ERROR!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 14:53:07'!
ERROR!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 14:53:07'!
ERROR!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 14:53:07'!
ERROR!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 14:53:07'!
ERROR!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 14:53:07'!
ERROR!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 14:53:07'!
ERROR!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 14:53:07'!
ERROR!
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/31/2020 14:53:35' prior: 50881692!
XTokenAt: aPoint 
	^playerX hasTokenAt: aPoint.! !
!Player methodsFor: 'gameplay' stamp: 'MG 10/31/2020 14:54:39'!
hasTokenAt: aPoint
	tokens includes: aPoint.! !
!Player methodsFor: 'gameplay' stamp: 'MG 10/31/2020 14:54:44' prior: 50881967!
hasTokenAt: aPoint
	^tokens includes: aPoint.! !
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/31/2020 14:55:08' prior: 50881697!
OTokenAt: aPoint 
	^playerO hasTokenAt: aPoint.! !

!methodRemoval: Player #tokens stamp: 'MG 10/31/2020 14:55:10'!
tokens
	^tokens copy.!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 14:55:52'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 14:55:52'!
ERROR!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 14:56:29'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 14:56:29'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 14:56:29'!
ERROR!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 14:56:30'!
ERROR!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 14:56:30'!
ERROR!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 14:56:30'!
ERROR!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 14:56:30'!
ERROR!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 14:56:30'!
ERROR!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 14:56:30'!
ERROR!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 14:56:30'!
ERROR!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 14:56:30'!
ERROR!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 14:56:30'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 14:56:34'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 14:56:34'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 14:56:39'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 14:56:48'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 14:56:48'!
ERROR!

TerniLapilli new.!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 14:57:13'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 14:57:13'!
ERROR!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 14:57:13'!
ERROR!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 14:57:13'!
ERROR!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 14:57:13'!
ERROR!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 14:57:13'!
ERROR!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 14:57:13'!
ERROR!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 14:57:13'!
ERROR!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 14:57:13'!
ERROR!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 14:57:13'!
ERROR!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 14:57:13'!
ERROR!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 14:57:14'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 14:57:15'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 14:57:15'!
ERROR!

Player new.!

| player |
player := Player new.
player tokenAmount.!

| player |
player := Player new.
player tokenAmount.!

Object subclass: #TerniLapilli
	instanceVariableNames: 'playerX playerO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: #'Terni Lapilli' stamp: 'MG 10/31/2020 14:58:37'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'playerX playerO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 14:59:12'!
ERROR!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 14:59:12'!
ERROR!
!TerniLapilli methodsFor: 'initialization' stamp: 'MG 10/31/2020 14:59:39' prior: 50881703 overrides: 16896425!
initialize 
	
	playerX := Player new.
	playerO := Player new.
! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 14:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 14:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 14:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 14:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 14:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 14:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 14:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 14:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 14:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 14:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 14:59:43'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 14:59:43'!
FAILURE!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 14:59:43'!
FAILURE!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 14:59:45'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 14:59:46'!
PASSED!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 14:59:49'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 14:59:49'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 14:59:49'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 14:59:49'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 14:59:49'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 14:59:49'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 14:59:49'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 14:59:50'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 14:59:50'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 14:59:50'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 14:59:50'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 14:59:50'!
FAILURE!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 14:59:50'!
FAILURE!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 15:01:49'!
FAILURE!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 15:01:49'!
FAILURE!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 15:02:19'!
FAILURE!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 15:02:19'!
FAILURE!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 15:03:34'!
FAILURE!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 15:03:34'!
FAILURE!
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 15:06:42'!
move: aPlayer tokenFrom: srcPoint to: dstPoint 

	
	aPlayer moveFrom: srcPoint to: dstPoint.
	! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 15:07:26' prior: 50881871!
moveXFrom: srcPoint to: dstPoint 
	self move: playerX tokenFrom: srcPoint to: dstPoint. ! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 15:07:50' prior: 50881877!
moveOFrom: srcPoint to: dstPoint 

	self move: playerO tokenFrom: srcPoint to: dstPoint. ! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 15:07:53' prior: 50882250!
moveXFrom: srcPoint to: dstPoint 

	self move: playerX tokenFrom: srcPoint to: dstPoint. ! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 15:09:15' prior: 50882244!
move: aPlayer tokenFrom: srcPoint to: dstPoint 

	
	aPlayer moveFrom: srcPoint to: dstPoint.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 15:12:15' prior: 50881033!
test11TokenFromAnyPointCanBeMovedNonDiagonally
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	game moveXFrom: 3@2 to: 3@3.
	self assert: (game XTokenAt: 3@3).! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 15:12:40' prior: 50881094!
test12TokenFromNonStarPointCantBeMovedDiagonally
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	self should: [game moveXFrom: 3@2 to: 2@3]
		raise: Error
		withExceptionDo: [:anError |
			self assert: (game XTokenAt: 3@2).
		]! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 15:14:11' prior: 50882268!
move: aPlayer tokenFrom: srcPoint to: dstPoint 

	dstPoint = 2@3 ifTrue:[self signalErrorWith: (self class cantMoveDiagonallyFrom: srcPoint)].
	aPlayer moveFrom: srcPoint to: dstPoint.
	! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 15:15:36'!
cantMoveDiagonallyFrom: srcPoint
	
	^'Token from: ', srcPoint asString, ' can not be moved diagonally'! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 15:15:56'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 15:15:56'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 15:15:56'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 15:15:56'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 15:15:56'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 15:15:56'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:15:56'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:15:56'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 15:15:56'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 15:15:56'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 15:15:56'!
ERROR!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 15:15:56'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 15:15:56'!
ERROR!
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 15:16:52' prior: 50882301!
move: aPlayer tokenFrom: srcPoint to: dstPoint 

	dstPoint = (2@3) ifTrue:[self signalErrorWith: (self class cantMoveDiagonallyFrom: srcPoint)].
	aPlayer moveFrom: srcPoint to: dstPoint.
	! !

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 15:16:54'!
PASSED!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 15:16:57'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 15:16:57'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 15:16:57'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 15:16:57'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 15:16:57'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 15:16:57'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:16:57'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:16:57'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 15:16:57'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 15:16:57'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 15:16:57'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 15:16:57'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 15:18:03'!
test13TokenFromStarPointCanBeMovedDiagonally
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	game moveXFrom: 2@2 to: 3@3.
	self assert: (game XTokenAt: 3@3).
	! !

!testRun: #TerniLapilliTest #test13TokenFromStarPointCanBeMovedDiagonally stamp: 'MG 10/31/2020 15:18:07'!
PASSED!
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 15:23:18' prior: 50882361!
move: aPlayer tokenFrom: srcPoint to: dstPoint 

	self isStarPoint: srcPoint. 
	dstPoint = (2@3) ifTrue:[self signalErrorWith: (self class cantMoveDiagonallyFrom: srcPoint)].
	aPlayer moveFrom: srcPoint to: dstPoint.
	! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 15:26:20' prior: 50882431!
move: aPlayer tokenFrom: srcPoint to: dstPoint 

	((self isStarPoint: srcPoint) or: [self isStarPoint: dstPoint]) ifFalse:[self signalErrorWith: (self class cantMoveDiagonallyFrom: srcPoint )].
	aPlayer moveFrom: srcPoint to: dstPoint.
	! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 15:27:04'!
verifyValidDiagonalMoveFrom: srcPoint to: dstPoint
	((self isStarPoint: srcPoint) or: [self isStarPoint: dstPoint]) ifFalse:[self signalErrorWith: (self class cantMoveDiagonallyFrom: srcPoint )].
	! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 15:27:30' prior: 50882441!
move: aPlayer tokenFrom: srcPoint to: dstPoint 

	self verifyValidDiagonalMoveFrom: srcPoint to: dstPoint.
	aPlayer moveFrom: srcPoint to: dstPoint.
	! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 15:27:36'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 15:27:36'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 15:27:36'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 15:27:36'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 15:27:36'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 15:27:36'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:27:36'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:27:36'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 15:27:36'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 15:27:36'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 15:27:36'!
ERROR!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 15:27:36'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenFromStarPointCanBeMovedDiagonally stamp: 'MG 10/31/2020 15:27:36'!
ERROR!

!methodRemoval: TerniLapilliTest #test13TokenFromStarPointCanBeMovedDiagonally stamp: 'MG 10/31/2020 15:27:45'!
test13TokenFromStarPointCanBeMovedDiagonally
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	game moveXFrom: 2@2 to: 3@3.
	self assert: (game XTokenAt: 3@3).
	!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 15:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 15:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 15:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 15:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 15:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 15:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 15:27:47'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 15:27:48'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 15:27:48'!
ERROR!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 15:27:48'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 15:27:48'!
ERROR!
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 15:28:05'!
isStarPoint: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 15:28:36' prior: 50882571!
isStarPoint: aPoint 
	^(aPoint x + aPoint y) even.! !

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 15:28:40'!
PASSED!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 15:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 15:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 15:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 15:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 15:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 15:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 15:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 15:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 15:28:41'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 15:28:41'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 15:30:29'!
test13TokenCantBeMovedOutOfBoard
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	self should: [game moveXFrom: 3@1 to: 4@1]
		raise: Error
		withExceptionDo: [:anError |
			self assert: (game XTokenAt: 3@1).
		]! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 15:30:31'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 15:30:31'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 15:30:31'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 15:30:31'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 15:30:31'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 15:30:31'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:30:31'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:30:31'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 15:30:31'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 15:30:31'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 15:30:31'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 15:30:32'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 15:30:32'!
FAILURE!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 15:30:32'!
FAILURE!
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 15:31:04' prior: 50882462!
move: aPlayer tokenFrom: srcPoint to: dstPoint 

	self verifyPositionInBoard: dstPoint.
	self verifyValidDiagonalMoveFrom: srcPoint to: dstPoint.
	aPlayer moveFrom: srcPoint to: dstPoint.
	! !

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 15:31:05'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 15:32:32' prior: 50882625!
test13TokenCantBeMovedOutOfBoard
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	self should: [game moveXFrom: 3@2 to: 4@2]
		raise: Error
		withExceptionDo: [:anError |
			self assert: (game XTokenAt: 3@2).
		]! !

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 15:32:33'!
PASSED!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 15:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 15:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 15:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 15:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 15:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 15:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:32:34'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 15:32:35'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 15:32:35'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 15:32:35'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 15:32:35'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 15:32:35'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 15:35:16'!
test14CantMoveInexistentToken
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	self should: [game moveXFrom: 3@3 to: 2@3]
		raise: Error
		withExceptionDo: [:anError |	
			self deny: (game XTokenAt: 3@3).
		]! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 15:35:56' prior: 50882760!
test14CantMoveInexistentToken
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	self should: [game moveXFrom: 3@3 to: 2@3]
		raise: Error
		withExceptionDo: [:anError |	
			self deny: (game XTokenAt: 3@3).
			self deny: (game XTokenAt: 2@3).
		]! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 15:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 15:36:07'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 15:36:08'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 15:36:08'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 15:36:08'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 15:36:08'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:36:08'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:36:08'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 15:36:08'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 15:36:08'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 15:36:08'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 15:36:08'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 15:36:08'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 15:36:08'!
FAILURE!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 15:36:08'!
FAILURE!
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 15:37:06' prior: 50882686!
move: aPlayer tokenFrom: srcPoint to: dstPoint 

	self verifyPositionIsOccupied: srcPoint.
	self verifyPositionInBoard: dstPoint.
	self verifyValidDiagonalMoveFrom: srcPoint to: dstPoint.
	aPlayer moveFrom: srcPoint to: dstPoint.
	! !

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 15:37:09'!
PASSED!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 15:37:12'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 15:37:12'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 15:37:12'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 15:37:12'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 15:37:12'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 15:37:12'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:37:12'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:37:12'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 15:37:12'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 15:37:12'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 15:37:12'!
ERROR!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 15:37:12'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 15:37:12'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 15:37:12'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 15:37:12'!
ERROR!
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 15:37:23'!
verifyPositionIsOccupied: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 15:39:07' prior: 50882903!
verifyPositionIsOccupied: aPoint 

	(self hasTokenAt: aPoint) ifFalse: [^self signalErrorWith: (self class cantStackTokensMessage: aPoint)].

	! !

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 15:39:09'!
PASSED!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 15:39:10'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 15:39:10'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 15:39:10'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 15:39:10'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 15:39:10'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 15:39:10'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:39:10'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:39:10'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 15:39:10'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 15:39:10'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 15:39:10'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 15:39:10'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 15:39:10'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 15:39:10'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 15:41:00'!
test15CantMoveAndStackTokens
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	self should: [game moveXFrom: 3@2 to: 3@1]
		raise: Error
		withExceptionDo: [:anError |	
			self assert: (game XTokenAt: 3@2).
			self deny: (game XTokenAt: 3@1).
		]! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 15:41:10' prior: 50882968!
test15CantMoveAndStackTokens
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	self should: [game moveXFrom: 3@2 to: 3@1]
		raise: Error
		withExceptionDo: [:anError |	
			self assert: (game XTokenAt: 3@2).
		]! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 15:41:15'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 15:41:15'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 15:41:15'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 15:41:15'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 15:41:15'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 15:41:15'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:41:15'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:41:15'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 15:41:15'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 15:41:15'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 15:41:15'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 15:41:15'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 15:41:15'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 15:41:15'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 15:41:15'!
FAILURE!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 15:41:15'!
FAILURE!
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 15:42:08' prior: 50882839!
move: aPlayer tokenFrom: srcPoint to: dstPoint 

	self verifyPositionIsOccupied: srcPoint.
	self verifyPositionIsNotOccupied: dstPoint.
	self verifyPositionInBoard: dstPoint.
	self verifyValidDiagonalMoveFrom: srcPoint to: dstPoint.
	aPlayer moveFrom: srcPoint to: dstPoint.
	! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 15:42:45' prior: 50883050!
move: aPlayer tokenFrom: srcPoint to: dstPoint 

	self verifyPositionIsOccupied: srcPoint.
	self verifyPositionIsNotOccupied: dstPoint.
	self verifyPositionInBoard: dstPoint.
	self verifyValidDiagonalMoveFrom: srcPoint to: dstPoint.
	aPlayer moveFrom: srcPoint to: dstPoint.
	! !

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 15:42:54'!
FAILURE!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 15:43:04'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 15:43:04'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 15:43:04'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 15:43:04'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 15:43:04'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 15:43:04'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:43:04'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:43:04'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 15:43:04'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 15:43:04'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 15:43:04'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 15:43:04'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 15:43:04'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 15:43:04'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 15:43:04'!
FAILURE!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 15:43:04'!
FAILURE!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 15:43:07'!
PASSED!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 15:43:09'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 15:43:09'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 15:43:09'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 15:43:09'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 15:43:09'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 15:43:09'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:43:09'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:43:09'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 15:43:09'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 15:43:09'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 15:43:09'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 15:43:09'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 15:43:09'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 15:43:09'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 15:43:09'!
FAILURE!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 15:43:09'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 15:44:16' prior: 50882983!
test15CantMoveAndStackTokens
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	self should: [game moveXFrom: 1@1 to: 1@2]
		raise: Error
		withExceptionDo: [:anError |	
			self assert: (game XTokenAt: 1@1).
		]! !

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 15:44:17'!
PASSED!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 15:44:18'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 15:44:18'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 15:44:18'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 15:44:18'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 15:44:18'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 15:44:18'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:44:18'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:44:18'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 15:44:18'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 15:44:18'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 15:44:18'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 15:44:18'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 15:44:18'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 15:44:18'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 15:44:18'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 15:46:24'!
test16PlayerCantMoveOnOtherPlayersTurn
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	self should: [game moveOFrom: 1@3 to: 2@3]
		raise: Error
		withExceptionDo: [:anError |	
			self assert: (game OTokenAt: 1@3).
			self deny: (game OTokenAt: 2@3).
		]! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 15:46:26'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 15:46:26'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 15:46:26'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 15:46:26'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 15:46:27'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 15:46:27'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:46:27'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:46:27'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 15:46:27'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 15:46:27'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 15:46:27'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 15:46:27'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 15:46:27'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 15:46:27'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 15:46:27'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 15:46:27'!
FAILURE!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 15:46:27'!
FAILURE!
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 15:47:05' prior: 50883062!
move: aPlayer tokenFrom: srcPoint to: dstPoint 
	
	self verifyPlayerTurn: aPlayer.	

	self verifyPositionIsOccupied: srcPoint.
	self verifyPositionIsNotOccupied: dstPoint.
	
	self verifyPositionInBoard: dstPoint.
	self verifyValidDiagonalMoveFrom: srcPoint to: dstPoint.
	aPlayer moveFrom: srcPoint to: dstPoint.
	! !

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 15:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 15:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 15:47:07'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 15:47:08'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 15:47:08'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 15:47:08'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 15:47:08'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:47:08'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:47:08'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 15:47:08'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 15:47:08'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 15:47:08'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 15:47:08'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 15:47:08'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 15:47:08'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 15:47:08'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 15:47:08'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 15:48:57' prior: 50883255!
test16PlayerCantMoveOnOtherPlayersTurn
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	game moveXFrom: 3@2 to: 3@3.
	
	self should: [game moveXFrom: 3@3 to: 2@3]
		raise: Error
		withExceptionDo: [:anError |	
			self assert: (game XTokenAt: 3@3).
			self deny: (game XTokenAt: 2@3).
		]! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 15:48:59'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 15:48:59'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 15:48:59'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 15:48:59'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 15:48:59'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 15:48:59'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:48:59'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:48:59'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 15:48:59'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 15:48:59'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 15:48:59'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 15:48:59'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 15:48:59'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 15:48:59'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 15:48:59'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 15:48:59'!
FAILURE!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 15:48:59'!
FAILURE!

!classDefinition: #TerniLapilli category: #'Terni Lapilli' stamp: 'MG 10/31/2020 15:53:23'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'playerX playerO lastPlayer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/31/2020 15:53:20' prior: 50881833!
isPlaying: aPlayer
	^ lastPlayer ~= aPlayer.
	
	"
	^ (aPlayer = playerX and:[self playedTokens even])
	 or: [aPlayer = playerO and: [self playedTokens odd]]
	"! !

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 15:53:30'!
FAILURE!
!TerniLapilli methodsFor: 'initialization' stamp: 'MG 10/31/2020 15:53:43' prior: 50882120 overrides: 16896425!
initialize 
	
	playerX := Player new.
	playerO := Player new.
! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 15:54:14' prior: 50881907!
put: aPlayer tokenAt: aPoint 
	
	self verifyPlayerTurn: aPlayer.
	self verifyNotMovePhase.
	self verifyValidPlayPosition: aPoint.
	
	aPlayer addTokenAt: aPoint.
	lastPlayer := aPlayer.
	! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 15:54:18'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 15:54:18'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 15:54:18'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 15:54:18'!
FAILURE!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 15:54:18'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 15:54:18'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:54:18'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:54:18'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 15:54:18'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 15:54:18'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 15:54:18'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 15:54:18'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 15:54:18'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 15:54:18'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 15:54:19'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 15:54:19'!
FAILURE!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 15:54:29'!
FAILURE!
!TerniLapilli methodsFor: 'initialization' stamp: 'MG 10/31/2020 15:55:20' prior: 50883492 overrides: 16896425!
initialize 
	
	playerX := Player new.
	playerO := Player new.
	lastPlayer := playerO. "medio hackoso :/"! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 15:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 15:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 15:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 15:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 15:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 15:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 15:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 15:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 15:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 15:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 15:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 15:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 15:55:31'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 15:55:31'!
FAILURE!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 15:55:32'!
FAILURE!
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 15:56:09' prior: 50883327!
move: aPlayer tokenFrom: srcPoint to: dstPoint 
	
	self verifyPlayerTurn: aPlayer.	

	self verifyPositionIsOccupied: srcPoint.
	self verifyPositionIsNotOccupied: dstPoint.
	
	self verifyPositionInBoard: dstPoint.
	self verifyValidDiagonalMoveFrom: srcPoint to: dstPoint.
	aPlayer moveFrom: srcPoint to: dstPoint.
	lastPlayer := aPlayer.
		! !

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 15:56:13'!
PASSED!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 15:56:14'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 15:56:14'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 15:56:14'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 15:56:14'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 15:56:14'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 15:56:14'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 15:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 15:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 15:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 15:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 15:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 15:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 15:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 15:56:15'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 15:59:16'!
test17PlayerCantMoveOnPutPhase
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.

	
	
	self should: [game moveOFrom: 1@3 to: 2@3]
		raise: Error
		withExceptionDo: [:anError |	
			self assert: (game XTokenAt: 1@3).
		]! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 15:59:21' prior: 50883700!
test17PlayerCantMoveOnPutPhase
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.

	self should: [game moveOFrom: 1@3 to: 2@3]
		raise: Error
		withExceptionDo: [:anError |	
			self assert: (game XTokenAt: 1@3).
		]! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 15:59:39'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 15:59:40'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 15:59:40'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 15:59:40'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 15:59:40'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 15:59:40'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:59:40'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 15:59:40'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 15:59:40'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 15:59:40'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 15:59:40'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 15:59:40'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 15:59:40'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 15:59:40'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 15:59:40'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 15:59:40'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 10/31/2020 15:59:40'!
FAILURE!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 10/31/2020 15:59:40'!
FAILURE!
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 16:00:36' prior: 50883629!
move: aPlayer tokenFrom: srcPoint to: dstPoint 
	
	self verifyMovePhase.
	self verifyPlayerTurn: aPlayer.	

	self verifyPositionIsOccupied: srcPoint.
	self verifyPositionIsNotOccupied: dstPoint.
	
	self verifyPositionInBoard: dstPoint.
	self verifyValidDiagonalMoveFrom: srcPoint to: dstPoint.
	aPlayer moveFrom: srcPoint to: dstPoint.
	lastPlayer := aPlayer.
		! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 16:02:12'!
verifyMovePhase
	
	self playedTokens < 6 ifTrue: [^self signalErrorWith: (self class cantMoveTokenYetMessage) ].
	! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 16:03:03'!
cantMoveTokenYetMessage
	^'Can not move tokens until all tokens are put'! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 16:03:26' prior: 50883807!
cantMoveTokenYetMessage
	^'Can not move tokens until all tokens have been put'! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 16:03:58'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 16:03:58'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 16:03:58'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 16:03:58'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 16:03:58'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 16:03:58'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 16:03:58'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 16:03:58'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 16:03:58'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 16:03:58'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 16:03:58'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 16:03:58'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 16:03:58'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 16:03:58'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 16:03:59'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 16:03:59'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 10/31/2020 16:03:59'!
FAILURE!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 10/31/2020 16:03:59'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 16:04:10' prior: 50883713!
test17PlayerCantMoveOnPutPhase
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.

	self should: [game moveOFrom: 1@3 to: 2@3]
		raise: Error
		withExceptionDo: [:anError |	
			self assert: (game OTokenAt: 1@3).
		]! !

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 10/31/2020 16:04:10'!
FAILURE!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 16:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 16:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 16:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 16:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 16:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 16:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 16:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 16:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 16:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 16:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 16:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 16:04:12'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 16:04:13'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 16:04:13'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 16:04:13'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 16:04:13'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 10/31/2020 16:04:13'!
FAILURE!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 10/31/2020 16:04:13'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 16:04:58' prior: 50883879!
test17PlayerCantMoveOnPutPhase
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.

	self should: [game moveOFrom: 1@2 to: 1@3]
		raise: Error
		withExceptionDo: [:anError |	
			self assert: (game OTokenAt: 1@2).
		]! !

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 10/31/2020 16:04:58'!
PASSED!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 16:04:59'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 16:04:59'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 16:04:59'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 16:04:59'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 16:04:59'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 16:04:59'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 16:04:59'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 16:04:59'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 16:04:59'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 16:04:59'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 16:04:59'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 16:04:59'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 16:04:59'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 16:04:59'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 16:04:59'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 16:04:59'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 10/31/2020 16:04:59'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 16:06:29'!
test18CantMoveToNonNeighborPoint
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.

	self should: [game moveOFrom: 1@2 to: 1@3]
		raise: Error
		withExceptionDo: [:anError |	
			self assert: (game OTokenAt: 1@2).
		]! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 16:06:47' prior: 50884029!
test18CantMoveToNonNeighborPoint
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	self should: [game moveOFrom: 1@2 to: 1@3]
		raise: Error
		withExceptionDo: [:anError |	
			self assert: (game OTokenAt: 1@2).
		]! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 16:08:26' prior: 50884042!
test18CantMoveToNonNeighborPoint
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	self should: [game moveXFrom: 1@1 to: 3@3]
		raise: Error
		withExceptionDo: [:anError |	
			self assert: (game XTokenAt: 1@1).
			self deny: (game XTokenAt: 3@3).
		]! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 16:08:28'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 16:08:28'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 16:08:28'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 16:08:28'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 16:08:28'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 16:08:28'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 16:08:28'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 16:08:29'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 16:08:29'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 16:08:29'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 16:08:29'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 16:08:29'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 16:08:29'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 16:08:29'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 16:08:29'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 16:08:29'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 10/31/2020 16:08:29'!
PASSED!

!testRun: #TerniLapilliTest #test18CantMoveToNonNeighborPoint stamp: 'MG 10/31/2020 16:08:29'!
FAILURE!

!testRun: #TerniLapilliTest #test18CantMoveToNonNeighborPoint stamp: 'MG 10/31/2020 16:08:29'!
FAILURE!

!testRun: #TerniLapilliTest #test18CantMoveToNonNeighborPoint stamp: 'MG 10/31/2020 16:08:32'!
PASSED!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 16:08:34'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 16:08:34'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 16:08:34'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 16:08:34'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 16:08:34'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 16:08:34'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 16:08:34'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 16:08:35'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 16:08:35'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 16:08:35'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 16:08:35'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 16:08:35'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 16:08:35'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 16:08:35'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 16:08:35'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 16:08:35'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 10/31/2020 16:08:35'!
PASSED!

!testRun: #TerniLapilliTest #test18CantMoveToNonNeighborPoint stamp: 'MG 10/31/2020 16:08:35'!
FAILURE!

!testRun: #TerniLapilliTest #test18CantMoveToNonNeighborPoint stamp: 'MG 10/31/2020 16:08:35'!
FAILURE!

srcPoint!
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 16:10:47' prior: 50883786!
move: aPlayer tokenFrom: srcPoint to: dstPoint 
	

	self verifyMovePhase.
	self verifyPlayerTurn: aPlayer.	

	self verifyMoveToNeighborFrom: srcPoint to: dstPoint.
	self verifyPositionIsOccupied: srcPoint.
	self verifyPositionIsNotOccupied: dstPoint.
	
	self verifyPositionInBoard: dstPoint.
	self verifyValidDiagonalMoveFrom: srcPoint to: dstPoint.
	aPlayer moveFrom: srcPoint to: dstPoint.
	lastPlayer := aPlayer.
		! !

!testRun: #TerniLapilliTest #test18CantMoveToNonNeighborPoint stamp: 'MG 10/31/2020 16:10:53'!
PASSED!
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 16:12:35'!
verifyMoveToNeighborFrom: srcPoint to: dstPoint

	^(srcPoint eightNeighbors includes: dstPoint) ifTrue: [self signalErrorWith: (self class cantMoveToNonNeighborPositionMessage)]! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 16:13:11'!
cantMoveToNonNeighborPositionMessage
	^'Cant move to non neighbor position'! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 16:16:08' prior: 50884220!
verifyMoveToNeighborFrom: srcPoint to: dstPoint

"Se podria para mas claridad modificar la guarda del if implementando en la clase Point
el mensaje isNeighbor:aPoint "
	^(srcPoint eightNeighbors includes: dstPoint) ifTrue: [self signalErrorWith: (self class cantMoveToNonNeighborPositionMessage)]! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 16:16:14'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 16:16:14'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 16:16:14'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 16:16:14'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 16:16:14'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 16:16:14'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 16:16:14'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 16:16:14'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 16:16:14'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 16:16:14'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 16:16:14'!
ERROR!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 16:16:14'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 16:16:14'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 16:16:14'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 16:16:14'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 16:16:14'!
ERROR!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 10/31/2020 16:16:15'!
PASSED!

!testRun: #TerniLapilliTest #test18CantMoveToNonNeighborPoint stamp: 'MG 10/31/2020 16:16:15'!
FAILURE!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 16:16:25'!
ERROR!
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 16:17:04' prior: 50884235!
verifyMoveToNeighborFrom: srcPoint to: dstPoint

"Se podria para mas claridad modificar la guarda del if implementando en la clase Point
el mensaje isNeighbor:aPoint "
	^(srcPoint eightNeighbors includes: dstPoint) ifTrue: [^self signalErrorWith: (self class cantMoveToNonNeighborPositionMessage)]! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 16:17:08' prior: 50884312!
verifyMoveToNeighborFrom: srcPoint to: dstPoint

"Se podria para mas claridad modificar la guarda del if implementando en la clase Point
el mensaje isNeighbor:aPoint "
	(srcPoint eightNeighbors includes: dstPoint) ifTrue: [^self signalErrorWith: (self class cantMoveToNonNeighborPositionMessage)]! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 16:17:09'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 16:17:09'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 16:17:09'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 16:17:09'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 16:17:09'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 16:17:09'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 16:17:09'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 16:17:09'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 16:17:09'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 16:17:09'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 16:17:09'!
ERROR!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 16:17:09'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 16:17:09'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 16:17:09'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 16:17:09'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 16:17:09'!
ERROR!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 10/31/2020 16:17:09'!
PASSED!

!testRun: #TerniLapilliTest #test18CantMoveToNonNeighborPoint stamp: 'MG 10/31/2020 16:17:10'!
FAILURE!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 16:17:13'!
ERROR!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 16:17:20'!
ERROR!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 16:17:46'!
ERROR!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 16:17:46'!
ERROR!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 16:18:55'!
ERROR!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 16:19:01'!
ERROR!
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 16:19:29' prior: 50884325!
verifyMoveToNeighborFrom: srcPoint to: dstPoint

"Se podria para mas claridad modificar la guarda del if implementando en la clase Point
el mensaje isNeighbor:aPoint "
	(srcPoint eightNeighbors includes: dstPoint) ifFalse: [^self signalErrorWith: (self class cantMoveToNonNeighborPositionMessage)]! !

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 16:19:37'!
PASSED!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 16:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 16:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 16:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 16:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 16:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 16:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 16:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 16:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 16:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 16:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 16:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 16:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 16:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 16:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 16:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 16:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 10/31/2020 16:19:38'!
PASSED!

!testRun: #TerniLapilliTest #test18CantMoveToNonNeighborPoint stamp: 'MG 10/31/2020 16:19:38'!
PASSED!
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 16:23:37'!
test19GameIsOverWhenPutting3TokensInLine
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@3.

	

	self assert: (game XTokenAt: 1@1).
	self deny: (game XTokenAt: 3@3).
		! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 16:26:03' prior: 50884496!
test19GameIsOverWhenPutting3TokensInLine
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@3.

	

	self assert: (game isOver).

		! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 16:26:49' prior: 50884507!
test19GameIsOverWhenPutting3TokensInLine
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@3.

	self should: [game putOAt: 1@3]
			raise: Error
			withExceptionDo: [:anError |	
				self assert: (game isOver).
			]	



		! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 16:27:25'!
test20
	"| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@3.

	self should: [game putOAt: 1@3]
			raise: Error
			withExceptionDo: [:anError |	
				self assert: (game isOver).
			]	"



		! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 16:27:41' prior: 50884517!
test19GameIsOverWhenPutting3TokensInLine
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@3.


	self assert: (game isOver).


		! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 16:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 16:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 16:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 16:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 16:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 16:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 16:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 16:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 16:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 16:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 16:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 16:27:43'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 16:27:43'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 16:27:43'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 16:27:43'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 16:27:43'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 10/31/2020 16:27:43'!
PASSED!

!testRun: #TerniLapilliTest #test18CantMoveToNonNeighborPoint stamp: 'MG 10/31/2020 16:27:43'!
PASSED!

!testRun: #TerniLapilliTest #test19GameIsOverWhenPutting3TokensInLine stamp: 'MG 10/31/2020 16:27:43'!
FAILURE!

!testRun: #TerniLapilliTest #test20 stamp: 'MG 10/31/2020 16:27:43'!
PASSED!

!testRun: #TerniLapilliTest #test19GameIsOverWhenPutting3TokensInLine stamp: 'MG 10/31/2020 16:27:43'!
FAILURE!
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/31/2020 16:28:52' prior: 50879040!
isOver
	^self aPlayerHasThreeInLine.! !
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/31/2020 16:29:00'!
asdas! !

!methodRemoval: TerniLapilli #asdas stamp: 'MG 10/31/2020 16:29:18'!
asdas!
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/31/2020 16:30:12' prior: 50884621!
isOver
	^self playerXWon or: [self playerOWon].! !
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/31/2020 16:30:33' prior: 50884631!
isOver
	^self hasPlayerXWon or: [self hasPlayerOWon].! !
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/31/2020 16:31:07'!
hasPlayerXWon
	^playerX hasWon.! !
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/31/2020 16:31:16'!
hasPlayerOWon
	^playerO hasWon.! !
!Player methodsFor: 'accessing' stamp: 'MG 10/31/2020 16:40:44'!
hasWon
	^self tokenAmount = 3 and: [ | token1 token2 token3 |
		token1 := tokens at: 1.
		token2 := tokens at: 2.
		token3 := tokens at: 3.
		
		(token1 x * ( token2 y - token3 y)) + (token2 x * (token3 y - token1 y)) + (token3 x * (token1 y - token2 y)) = 0.
	]! !
!Player methodsFor: 'accessing' stamp: 'MG 10/31/2020 16:42:41'!
calculateTriangleAreaFrom: token1 to: token2 to: token3
		^(token1 x * ( token2 y - token3 y)) + (token2 x * (token3 y - token1 y)) + (token3 x * (token1 y - token2 y)).
! !
!Player methodsFor: 'accessing' stamp: 'MG 10/31/2020 16:42:44' prior: 50884660!
calculateTriangleAreaFrom: point1 to: token2 to: token3
		^(point1 x * ( token2 y - token3 y)) + (token2 x * (token3 y - point1 y)) + (token3 x * (point1 y - token2 y)).
! !
!Player methodsFor: 'accessing' stamp: 'MG 10/31/2020 16:42:50' prior: 50884668!
calculateTriangleAreaFrom: point1 to: point2 to: token3
		^(point1 x * ( point2 y - token3 y)) + (point2 x * (token3 y - point1 y)) + (token3 x * (point1 y - point2 y)).
! !
!Player methodsFor: 'accessing' stamp: 'MG 10/31/2020 16:42:56' prior: 50884676!
calculateTriangleAreaFrom: point1 to: point2 to: point3
		^(point1 x * ( point2 y - point3 y)) + (point2 x * (point3 y - point1 y)) + (point3 x * (point1 y - point2 y)).
! !
!Player methodsFor: 'accessing' stamp: 'MG 10/31/2020 16:43:00' prior: 50884684!
calculateTriangleAreaFrom: point1 to: point2 to: point3
	
	^(point1 x * ( point2 y - point3 y)) + (point2 x * (point3 y - point1 y)) + (point3 x * (point1 y - point2 y)).
! !
!Player methodsFor: 'accessing' stamp: 'MG 10/31/2020 16:44:19' prior: 50884649!
hasWon
	^self tokenAmount = 3 and: [ | token1 token2 token3 |
		token1 := tokens at: 1.
		token2 := tokens at: 2.
		token3 := tokens at: 3.
		
		(self calculateTriangleAreaFrom: token1 to: token2 to: token3) = 0.
	]! !
!Player methodsFor: 'accessing' stamp: 'MG 10/31/2020 16:44:27' prior: 50884700!
hasWon
	
	^self tokenAmount = 3 and: [ | token1 token2 token3 |
		token1 := tokens at: 1.
		token2 := tokens at: 2.
		token3 := tokens at: 3.
		
		(self calculateTriangleAreaFrom: token1 to: token2 to: token3) = 0.
	]! !

!testRun: #TerniLapilliTest #test19GameIsOverWhenPutting3TokensInLine stamp: 'MG 10/31/2020 16:44:35'!
PASSED!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 16:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 16:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 16:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 16:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 16:44:37'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 10/31/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test18CantMoveToNonNeighborPoint stamp: 'MG 10/31/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test19GameIsOverWhenPutting3TokensInLine stamp: 'MG 10/31/2020 16:44:38'!
PASSED!

!testRun: #TerniLapilliTest #test20 stamp: 'MG 10/31/2020 16:44:38'!
PASSED!
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 16:44:46' prior: 50884529!
test20
	"| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@3.

	self should: [game putOAt: 1@3]
			raise: Error
			withExceptionDo: [:anError |	
				self assert: (game isOver).
			]	"



		! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 16:46:25'!
test19GameIsOverWhen3TokensAreInLine
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@3.


	self assert: (game isOver).


		! !

!methodRemoval: TerniLapilliTest #test19GameIsOverWhenPutting3TokensInLine stamp: 'MG 10/31/2020 16:46:25'!
test19GameIsOverWhenPutting3TokensInLine
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@3.


	self assert: (game isOver).


		!
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 16:46:51'!
test20CantPlayWhenGameIsOver
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@3.

	self should: [game putOAt: 1@3]
			raise: Error
			withExceptionDo: [:anError |	
				self assert: (game isOver).
			]	


		! !

!methodRemoval: TerniLapilliTest #test20 stamp: 'MG 10/31/2020 16:46:53'!
test20
	"| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@3.

	self should: [game putOAt: 1@3]
			raise: Error
			withExceptionDo: [:anError |	
				self assert: (game isOver).
			]	"



		!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 16:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 16:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 16:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 16:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 16:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 16:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 16:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 16:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 16:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 16:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 16:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 16:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 16:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 16:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 16:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 16:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 10/31/2020 16:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test18CantMoveToNonNeighborPoint stamp: 'MG 10/31/2020 16:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test19GameIsOverWhen3TokensAreInLine stamp: 'MG 10/31/2020 16:47:05'!
PASSED!

!testRun: #TerniLapilliTest #test20CantPlayWhenGameIsOver stamp: 'MG 10/31/2020 16:47:05'!
FAILURE!

!testRun: #TerniLapilliTest #test20CantPlayWhenGameIsOver stamp: 'MG 10/31/2020 16:47:05'!
FAILURE!
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 16:47:40' prior: 50883498!
put: aPlayer tokenAt: aPoint 
	
	self verifyGameNotOver.
	
	self verifyPlayerTurn: aPlayer.
	self verifyNotMovePhase.
	self verifyValidPlayPosition: aPoint.
	
	aPlayer addTokenAt: aPoint.
	lastPlayer := aPlayer.
	! !

!testRun: #TerniLapilliTest #test20CantPlayWhenGameIsOver stamp: 'MG 10/31/2020 16:47:43'!
PASSED!
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 16:48:39'!
verifyGameNotOver
	
	self isOver ifTrue: [^self signalErrorWith: (self class gameIsAlreadyOverMessage)].! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 16:49:09'!
gameIsAlreadyOverMessage
	^'Can not play when a player has already won'! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 16:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 16:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 16:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 16:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 16:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 16:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 16:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 16:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 16:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 16:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 16:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 16:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 16:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 16:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 16:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 16:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 10/31/2020 16:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test18CantMoveToNonNeighborPoint stamp: 'MG 10/31/2020 16:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test19GameIsOverWhen3TokensAreInLine stamp: 'MG 10/31/2020 16:49:26'!
PASSED!

!testRun: #TerniLapilliTest #test20CantPlayWhenGameIsOver stamp: 'MG 10/31/2020 16:49:26'!
PASSED!
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 16:49:52'!
test20CantPlayTokenWhenGameIsOver
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@3.

	self should: [game putOAt: 1@3]
			raise: Error
			withExceptionDo: [:anError |	
				self assert: (game isOver).
			]	


		! !

!methodRemoval: TerniLapilliTest #test20CantPlayWhenGameIsOver stamp: 'MG 10/31/2020 16:49:52'!
test20CantPlayWhenGameIsOver
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@3.

	self should: [game putOAt: 1@3]
			raise: Error
			withExceptionDo: [:anError |	
				self assert: (game isOver).
			]	


		!
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 16:51:57'!
test21CantMoveTokenWhenGameIsOver
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.

	game moveXFrom: 3@2 to: 3@3. 
	self should: [game moveOFrom: 1@3 to: 2@3]
			raise: Error
			withExceptionDo: [:anError |	
				self assert: (game isOver).
			]	


		! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 16:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 16:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 16:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 16:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 16:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 16:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 16:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 16:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 16:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 16:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 16:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 16:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 16:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 16:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 16:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 16:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 10/31/2020 16:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test18CantMoveToNonNeighborPoint stamp: 'MG 10/31/2020 16:51:58'!
PASSED!

!testRun: #TerniLapilliTest #test19GameIsOverWhen3TokensAreInLine stamp: 'MG 10/31/2020 16:51:59'!
PASSED!

!testRun: #TerniLapilliTest #test20CantPlayTokenWhenGameIsOver stamp: 'MG 10/31/2020 16:51:59'!
PASSED!

!testRun: #TerniLapilliTest #test21CantMoveTokenWhenGameIsOver stamp: 'MG 10/31/2020 16:51:59'!
FAILURE!

!testRun: #TerniLapilliTest #test21CantMoveTokenWhenGameIsOver stamp: 'MG 10/31/2020 16:51:59'!
FAILURE!
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 16:52:40' prior: 50884201!
move: aPlayer tokenFrom: srcPoint to: dstPoint 
	self verifyGameNotOver.
	
	self verifyMovePhase.
	self verifyPlayerTurn: aPlayer.	

	self verifyMoveToNeighborFrom: srcPoint to: dstPoint.
	self verifyPositionIsOccupied: srcPoint.
	self verifyPositionIsNotOccupied: dstPoint.
	
	self verifyPositionInBoard: dstPoint.
	self verifyValidDiagonalMoveFrom: srcPoint to: dstPoint.
	aPlayer moveFrom: srcPoint to: dstPoint.
	lastPlayer := aPlayer.
		! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 16:52:42'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 16:52:42'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 16:52:42'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 16:52:42'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 16:52:42'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 16:52:42'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 16:52:43'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 16:52:43'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 16:52:43'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 16:52:43'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 16:52:43'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 16:52:43'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 16:52:43'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 16:52:43'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 16:52:43'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 16:52:43'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 10/31/2020 16:52:43'!
PASSED!

!testRun: #TerniLapilliTest #test18CantMoveToNonNeighborPoint stamp: 'MG 10/31/2020 16:52:43'!
PASSED!

!testRun: #TerniLapilliTest #test19GameIsOverWhen3TokensAreInLine stamp: 'MG 10/31/2020 16:52:43'!
PASSED!

!testRun: #TerniLapilliTest #test20CantPlayTokenWhenGameIsOver stamp: 'MG 10/31/2020 16:52:43'!
PASSED!

!testRun: #TerniLapilliTest #test21CantMoveTokenWhenGameIsOver stamp: 'MG 10/31/2020 16:52:43'!
PASSED!

----SNAPSHOT----(31 October 2020 16:53:26) CuisUniversity-4365.image priorSource: 17598563!

----SNAPSHOT----(31 October 2020 16:53:37) CuisUniversity-4365.image priorSource: 17713699!

----QUIT----(31 October 2020 17:04:30) CuisUniversity-4365.image priorSource: 17713792!

----STARTUP---- (31 October 2020 18:15:41) as C:\Users\Mati\Desktop\facu\IS1\windows64\CuisUniversity-4365.image!


Object subclass: #TerniLapilliState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliState category: #'Terni Lapilli' stamp: 'MG 10/31/2020 18:17:33'!
Object subclass: #TerniLapilliState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/31/2020 18:18:21' prior: 50881840!
playedTokens
	^playerO tokenAmount + playerX tokenAmount . ! !

TerniLapilliState subclass: #TerniLapilliGameOverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliGameOverState category: #'Terni Lapilli' stamp: 'MG 10/31/2020 18:21:25'!
TerniLapilliState subclass: #TerniLapilliGameOverState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

TerniLapilliState subclass: #TerniLapilliPutState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliPutState category: #'Terni Lapilli' stamp: 'MG 10/31/2020 18:22:10'!
TerniLapilliState subclass: #TerniLapilliPutState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

TerniLapilliState subclass: #TerniLapilliMoveState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliMoveState category: #'Terni Lapilli' stamp: 'MG 10/31/2020 18:22:13'!
TerniLapilliState subclass: #TerniLapilliMoveState
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 18:22:38' prior: 50884926!
verifyGameNotOver
	
	self isOver ifTrue: [^self signalErrorWith: (self class gameIsAlreadyOverMessage)].! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 18:23:50' prior: 50885272!
verifyGameNotOver
	
	self isOver ifTrue: [^self signalErrorWith: (self class gameIsAlreadyOverMessage)].! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 18:24:36' prior: 50884913!
put: aPlayer tokenAt: aPoint 
	
	self verifyGameNotOver.
	
	self verifyPlayerTurn: aPlayer.
	self verifyNotMovePhase.
	self verifyValidPlayPosition: aPoint.
	
		
	aPlayer addTokenAt: aPoint.
	lastPlayer := aPlayer.
	! !

!classDefinition: #TerniLapilli category: #'Terni Lapilli' stamp: 'MG 10/31/2020 18:25:22'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'playerX playerO lastPlayer gameState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 18:25:18' prior: 50881893!
putXAt: aPoint 
	
	gameState tryPut: playerX tokenAt: aPoint.

	self put: playerX tokenAt: aPoint.! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 18:25:38' prior: 50885304!
putXAt: aPoint 
	
	gameState tryPut: playerX tokenAt: aPoint.

	! !
!TerniLapilliState methodsFor: 'no messages' stamp: 'MG 10/31/2020 18:26:13'!
tryPut: aPlayer tokenAt: aPoint

	self subclassResponsibility ! !

Object subclass: #TerniLapilliState
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliState category: #'Terni Lapilli' stamp: 'MG 10/31/2020 18:26:27'!
Object subclass: #TerniLapilliState
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilliState methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 18:27:08'!
initializeWith: aTerniLapilliGame 
	
	game := aTerniLapilliGame.! !
!TerniLapilliState class methodsFor: 'no messages' stamp: 'MG 10/31/2020 18:27:50'!
newWith: aTerniLapilliGame

	^self new initializeWith: aTerniLapilliGame.! !
!TerniLapilliPutState methodsFor: 'nil' stamp: 'MG 10/31/2020 18:29:24' overrides: 50885315!
tryPut: aPlayer tokenAt: aPoint
	
	
	game put: aPlayer tokenAt: aPoint.! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 18:30:14' prior: 50881888!
putOAt: aPoint 
	
	gameState tryPut: playerO tokenAt: aPoint.
! !
!TerniLapilliMoveState methodsFor: 'nil' stamp: 'MG 10/31/2020 18:30:31' overrides: 50885315!
tryPut: aPlayer tokenAt: aPoint
	
	! !
!TerniLapilliMoveState methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 18:30:59' prior: 50885354 overrides: 50885315!
tryPut: aPlayer tokenAt: aPoint

	^self signalErrorWith: (self class cantPlayMoreTokensMessage)! !
!TerniLapilliGameOverState methodsFor: 'no messages' stamp: 'MG 10/31/2020 18:31:47' overrides: 50885315!
tryPut: aPlayer tokenAt: aPoint

	^self signalErrorWith: (self class gameIsAlreadyOverMessage )! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 18:32:28' prior: 50882256!
moveOFrom: srcPoint to: dstPoint 

	gameState tryMove: playerO tokenFrom: srcPoint to: dstPoint.
	self move: playerO tokenFrom: srcPoint to: dstPoint. ! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 18:32:39' prior: 50885373!
moveOFrom: srcPoint to: dstPoint 

	gameState tryMove: playerO tokenFrom: srcPoint to: dstPoint.
	
	self move: playerO tokenFrom: srcPoint to: dstPoint. ! !
!TerniLapilliState methodsFor: 'gameplay' stamp: 'MG 10/31/2020 18:32:48'!
moveOFrom: srcPoint to: dstPoint 

	self subclassResponsibility ! !

!methodRemoval: TerniLapilliState #moveOFrom:to: stamp: 'MG 10/31/2020 18:33:13'!
moveOFrom: srcPoint to: dstPoint 

	self subclassResponsibility !
!TerniLapilliState methodsFor: 'gameplay' stamp: 'MG 10/31/2020 18:33:17'!
tryMove: playerO tokenFrom: srcPoint to: dstPoint

	self subclassResponsibility ! !
!TerniLapilliGameOverState methodsFor: 'gameplay' stamp: 'MG 10/31/2020 18:33:30' overrides: 50885399!
tryMove: playerO tokenFrom: srcPoint to: dstPoint

	^self signalErrorWith: (self class gameIsAlreadyOverMessage )! !
!TerniLapilliMoveState methodsFor: 'gameplay' stamp: 'MG 10/31/2020 18:33:47' overrides: 50885399!
tryMove: playerO tokenFrom: srcPoint to: dstPoint

	^0! !
!TerniLapilliGameOverState methodsFor: 'gameplay' stamp: 'MG 10/31/2020 18:33:55' prior: 50885405 overrides: 50885399!
tryMove: aPlayer tokenFrom: srcPoint to: dstPoint

	^self signalErrorWith: (self class gameIsAlreadyOverMessage )! !
!TerniLapilliState methodsFor: 'gameplay' stamp: 'MG 10/31/2020 18:34:00' prior: 50885399!
tryMove: aPlayer tokenFrom: srcPoint to: dstPoint

	self subclassResponsibility ! !
!TerniLapilliMoveState methodsFor: 'gameplay' stamp: 'MG 10/31/2020 18:35:04' prior: 50885412 overrides: 50885425!
tryMove: aPlayer tokenFrom: srcPoint to: dstPoint

	^game move: aPlayer tokenFrom: srcPoint to: dstPoint.! !
!TerniLapilliPutState methodsFor: 'gameplay' stamp: 'MG 10/31/2020 18:35:23' overrides: 50885425!
tryMove: aPlayer tokenFrom: srcPoint to: dstPoint

	^0! !
!TerniLapilliPutState methodsFor: 'gameplay' stamp: 'MG 10/31/2020 18:36:03' prior: 50885439 overrides: 50885425!
tryMove: aPlayer tokenFrom: srcPoint to: dstPoint

	^self signalErrorWith: (self class cantMoveTokenYetMessage)! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 18:36:34' prior: 50885381!
moveOFrom: srcPoint to: dstPoint 

	gameState tryMove: playerO tokenFrom: srcPoint to: dstPoint.
	
! !
!TerniLapilli methodsFor: 'gameplay' stamp: 'MG 10/31/2020 18:36:41' prior: 50882262!
moveXFrom: srcPoint to: dstPoint 

	gameState tryMove: playerX tokenFrom: srcPoint to: dstPoint.! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 18:37:29' prior: 50885286!
put: aPlayer tokenAt: aPoint 
	
	self verifyPlayerTurn: aPlayer.
	self verifyValidPlayPosition: aPoint.
			
	aPlayer addTokenAt: aPoint.
	lastPlayer := aPlayer.
	! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 18:38:50' prior: 50885117!
move: aPlayer tokenFrom: srcPoint to: dstPoint 
	self verifyPlayerTurn: aPlayer.	

	self verifyPositionInBoard: dstPoint.

	self verifyMoveToNeighborFrom: srcPoint to: dstPoint.
	self verifyPositionIsOccupied: srcPoint.
	self verifyPositionIsNotOccupied: dstPoint.
	
	self verifyValidDiagonalMoveFrom: srcPoint to: dstPoint.
	aPlayer moveFrom: srcPoint to: dstPoint.
	lastPlayer := aPlayer.
		! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 18:38:57' prior: 50885474!
move: aPlayer tokenFrom: srcPoint to: dstPoint 
	self verifyPlayerTurn: aPlayer.	

	self verifyPositionInBoard: dstPoint.

	self verifyMoveToNeighborFrom: srcPoint to: dstPoint.
	self verifyPositionIsOccupied: srcPoint.
	self verifyPositionIsNotOccupied: dstPoint.
	self verifyValidDiagonalMoveFrom: srcPoint to: dstPoint.
	
	aPlayer moveFrom: srcPoint to: dstPoint.
	lastPlayer := aPlayer.
		! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 18:39:03' prior: 50885490!
move: aPlayer tokenFrom: srcPoint to: dstPoint 
	self verifyPlayerTurn: aPlayer.	

	self verifyPositionInBoard: dstPoint.
	self verifyMoveToNeighborFrom: srcPoint to: dstPoint.
	self verifyPositionIsOccupied: srcPoint.
	self verifyPositionIsNotOccupied: dstPoint.
	self verifyValidDiagonalMoveFrom: srcPoint to: dstPoint.
	
	aPlayer moveFrom: srcPoint to: dstPoint.
	lastPlayer := aPlayer.
		! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 18:39:27' prior: 50885506!
move: aPlayer tokenFrom: srcPoint to: dstPoint 
	self verifyPlayerTurn: aPlayer.	

	self verifyPositionInBoard: dstPoint.
	self verifyMoveToNeighborFrom: srcPoint to: dstPoint.
	self verifyPositionIsOccupied: srcPoint.
	self verifyPositionIsNotOccupied: dstPoint.
	self verifyValidDiagonalMoveFrom: srcPoint to: dstPoint.
	
	aPlayer moveFrom: srcPoint to: dstPoint.
	lastPlayer := aPlayer.
		! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 18:39:55'!
verifyValidMoveFrom: srcPoint to: dstPoint 


	self verifyPositionInBoard: dstPoint.
	self verifyMoveToNeighborFrom: srcPoint to: dstPoint.
	self verifyPositionIsOccupied: srcPoint.
	self verifyPositionIsNotOccupied: dstPoint.
	self verifyValidDiagonalMoveFrom: srcPoint to: dstPoint.
	
	! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 18:40:29' prior: 50885522!
move: aPlayer tokenFrom: srcPoint to: dstPoint 
	self verifyPlayerTurn: aPlayer.	
	
	self verifyValidMoveFrom: srcPoint to: dstPoint.
	
	aPlayer moveFrom: srcPoint to: dstPoint.
	lastPlayer := aPlayer.
		! !

!methodRemoval: TerniLapilli #verifyGameNotOver stamp: 'MG 10/31/2020 18:40:40'!
verifyGameNotOver
	
	self isOver ifTrue: [^self signalErrorWith: (self class gameIsAlreadyOverMessage)].!

!methodRemoval: TerniLapilli #verifyMovePhase stamp: 'MG 10/31/2020 18:40:41'!
verifyMovePhase
	
	self playedTokens < 6 ifTrue: [^self signalErrorWith: (self class cantMoveTokenYetMessage) ].
	!

!methodRemoval: TerniLapilli #verifyNotMovePhase stamp: 'MG 10/31/2020 18:40:42'!
verifyNotMovePhase
	
	self playedTokens >= 6 ifTrue: [^self signalErrorWith: (self class cantPlayMoreTokensMessage) ].
	!
!TerniLapilli methodsFor: 'initialization' stamp: 'MG 10/31/2020 18:42:06' prior: 50883565 overrides: 16896425!
initialize 
	
	playerX := Player new.
	playerO := Player new.
	lastPlayer := playerO. "medio hackoso :/"
	gameState := TerniLapilliState newWith: self.! !
!TerniLapilli methodsFor: 'initialization' stamp: 'MG 10/31/2020 18:42:57' prior: 50885579 overrides: 16896425!
initialize 
	
	playerX := Player new.
	playerO := Player new.
	lastPlayer := playerO. "medio hackoso :/"
	gameState := TerniLapilliPutState newWith: self.! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 18:44:22' prior: 50885465!
put: aPlayer tokenAt: aPoint 
	
	self verifyPlayerTurn: aPlayer.
	self verifyValidPlayPosition: aPoint.
			
	aPlayer addTokenAt: aPoint.
	lastPlayer := aPlayer.
	gameState := TerniLapilliState gameStateFor: self.
	! !
!TerniLapilliState class methodsFor: 'instance creation' stamp: 'MG 10/31/2020 18:44:41'!
gameStateFor: aTerniLapilliGame

	^self new initializeWith: aTerniLapilliGame.! !

self subclasses!
!TerniLapilliState class methodsFor: 'instance creation' stamp: 'MG 10/31/2020 18:46:18' prior: 50885606!
gameStateFor: aTerniLapilliGame

	^self subclasses detect: [:aTerniLapilliState | aTerniLapilliState canHandle: aTerniLapilliGame ] ! !
!TerniLapilliState class methodsFor: 'instance creation' stamp: 'MG 10/31/2020 18:47:02'!
canHandle: aTerniLapilliGame

	^self subclassResponsibility.! !
!TerniLapilliState class methodsFor: 'instance creation' stamp: 'MG 10/31/2020 18:47:47' prior: 50885613!
gameStateFor: aTerniLapilliGame

	^(self subclasses detect: [:aTerniLapilliState | aTerniLapilliState canHandle: aTerniLapilliGame]) newWith: aTerniLapilliGame ! !
!TerniLapilliState class methodsFor: 'instance creation' stamp: 'MG 10/31/2020 18:47:49' prior: 50885627!
gameStateFor: aTerniLapilliGame

	^(self subclasses detect: [:aTerniLapilliState | aTerniLapilliState canHandle: aTerniLapilliGame]) newWith: aTerniLapilliGame.! !
!TerniLapilliGameOverState class methodsFor: 'no messages' stamp: 'MG 10/31/2020 18:48:17' overrides: 50885621!
canHandle: aTerniLapilliGame

	^self subclassResponsibility.! !
!TerniLapilliGameOverState class methodsFor: 'instance creation -- private' stamp: 'MG 10/31/2020 18:49:16' prior: 50885645 overrides: 50885621!
canHandle: aTerniLapilliGame

	! !
!TerniLapilliGameOverState class methodsFor: 'instance creation -- private' stamp: 'MG 10/31/2020 18:49:38' prior: 50885652 overrides: 50885621!
canHandle: aTerniLapilliGame

	^aTerniLapilliGame isOver! !
!TerniLapilliMoveState class methodsFor: 'no messages' stamp: 'MG 10/31/2020 18:49:47' overrides: 50885621!
canHandle: aTerniLapilliGame

	^aTerniLapilliGame isOver! !
!TerniLapilliMoveState class methodsFor: 'instance creation -- private' stamp: 'MG 10/31/2020 18:50:07' prior: 50885664 overrides: 50885621!
canHandle: aTerniLapilliGame

	^aTerniLapilliGame playedTokens = 6! !
!TerniLapilliPutState class methodsFor: 'no messages' stamp: 'MG 10/31/2020 18:50:21' overrides: 50885621!
canHandle: aTerniLapilliGame

	^aTerniLapilliGame playedTokens < 6! !
!TerniLapilli methodsFor: 'initialization' stamp: 'MG 10/31/2020 18:50:48' prior: 50885588 overrides: 16896425!
initialize 
	
	playerX := Player new.
	playerO := Player new.
	lastPlayer := playerO. "medio hackoso :/"
	gameState := TerniLapilliState gameStateFor: self.! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 18:50:59'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 18:50:59'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 18:50:59'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 18:50:59'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 18:50:59'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 18:50:59'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 18:50:59'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 18:50:59'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 18:50:59'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 18:51:00'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 18:51:00'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 18:51:00'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 18:51:00'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 18:51:00'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 18:51:00'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 18:51:00'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 10/31/2020 18:51:00'!
PASSED!

!testRun: #TerniLapilliTest #test18CantMoveToNonNeighborPoint stamp: 'MG 10/31/2020 18:51:00'!
PASSED!

!testRun: #TerniLapilliTest #test19GameIsOverWhen3TokensAreInLine stamp: 'MG 10/31/2020 18:51:00'!
PASSED!

!testRun: #TerniLapilliTest #test20CantPlayTokenWhenGameIsOver stamp: 'MG 10/31/2020 18:51:00'!
PASSED!

!testRun: #TerniLapilliTest #test21CantMoveTokenWhenGameIsOver stamp: 'MG 10/31/2020 18:51:00'!
FAILURE!

!testRun: #TerniLapilliTest #test21CantMoveTokenWhenGameIsOver stamp: 'MG 10/31/2020 18:51:00'!
FAILURE!
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 18:51:16' prior: 50885550!
move: aPlayer tokenFrom: srcPoint to: dstPoint 
	
	self verifyPlayerTurn: aPlayer.	
	self verifyValidMoveFrom: srcPoint to: dstPoint.
	
	aPlayer moveFrom: srcPoint to: dstPoint.
	lastPlayer := aPlayer.
		! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 18:52:14'!
updateGameStateAfterPlayFrom: aPlayer
	
	lastPlayer := aPlayer.
	gameState := TerniLapilliState gameStateFor: self.
	! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 18:52:29' prior: 50885596!
put: aPlayer tokenAt: aPoint 
	
	self verifyPlayerTurn: aPlayer.
	self verifyValidPlayPosition: aPoint.
			
	aPlayer addTokenAt: aPoint.
	self updateGameStateAfterPlayFrom: aPlayer.
	
	! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 18:52:44' prior: 50885765!
move: aPlayer tokenFrom: srcPoint to: dstPoint 
	
	self verifyPlayerTurn: aPlayer.	
	self verifyValidMoveFrom: srcPoint to: dstPoint.
	
	aPlayer moveFrom: srcPoint to: dstPoint.
	self updateGameStateAfterPlayFrom: aPlayer.! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 18:52:46'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 18:52:46'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 18:52:46'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 18:52:46'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 18:52:46'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 18:52:46'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 18:52:46'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 18:52:46'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 18:52:46'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 18:52:46'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 18:52:46'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 18:52:46'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 18:52:46'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 18:52:46'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 18:52:46'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 18:52:46'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 10/31/2020 18:52:46'!
PASSED!

!testRun: #TerniLapilliTest #test18CantMoveToNonNeighborPoint stamp: 'MG 10/31/2020 18:52:46'!
PASSED!

!testRun: #TerniLapilliTest #test19GameIsOverWhen3TokensAreInLine stamp: 'MG 10/31/2020 18:52:46'!
PASSED!

!testRun: #TerniLapilliTest #test20CantPlayTokenWhenGameIsOver stamp: 'MG 10/31/2020 18:52:47'!
PASSED!

!testRun: #TerniLapilliTest #test21CantMoveTokenWhenGameIsOver stamp: 'MG 10/31/2020 18:52:47'!
PASSED!
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 10/31/2020 18:53:07' prior: 50882576!
isStarPoint: aPoint 
	
	^(aPoint x + aPoint y) even.! !
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/31/2020 18:53:30' prior: 50881976!
OTokenAt: aPoint 
	
	^playerO hasTokenAt: aPoint.! !
!TerniLapilli methodsFor: 'game state' stamp: 'MG 10/31/2020 18:53:33' prior: 50881963!
XTokenAt: aPoint 
	
	^playerX hasTokenAt: aPoint.! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 18:54:07' prior: 50879482!
test05PlayerXCantPlayOnPlayerOTurn
	| game |
	
	game := TerniLapilli new.
	game putXAt: 2@3.
	self should: [game putXAt: 3@3] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: 1 equals: game playedTokens.
			self assert: true equals: game isPlayingO.	 
		]
		
	
! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 18:54:12' prior: 50885887!
test05PlayerXCantPlayOnPlayerOTurn
	| game |
	
	game := TerniLapilli new.
	game putXAt: 2@3.
	self should: [game putXAt: 3@3] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: 1 equals: game playedTokens.
			self assert: true equals: game isPlayingO.	
		]
		
	
! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 18:55:39' prior: 50879494!
test04PlayerOCantPlayOnPlayerXTurn
	| game |
	
	game := TerniLapilli new.
	self should: [game putOAt: 3@3] 
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: 0 equals: game playedTokens.
			self assert: true equals: game isPlayingX.	
			self assert: TerniLapilli equals: anError.
		].
		
! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 18:57:05' prior: 50885911!
test04PlayerOCantPlayOnPlayerXTurn
	| game |
	
	game := TerniLapilli new.
	self should: [game putOAt: 3@3] 
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: 0 equals: game playedTokens.
			self assert: true equals: game isPlayingX.	
			self assert: (TerniLapilli invalidTurnPlayMessage: #asd ) equals: anError.
		].
		
! !

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 18:57:58'!
FAILURE!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 18:57:58'!
FAILURE!

Player new.!

Player new.!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 18:59:14' prior: 50879266!
invalidTurnPlayMessage: invalidTurnPlayer 
	^'Player ', invalidTurnPlayer asString , ' can not play on this turn'.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 18:59:45' prior: 50885946!
invalidTurnPlayMessage: invalidTurnPlayer 
	^'You can not play on this turn'.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 19:00:31'!
invalidTurnPlayMessage 
	^'You can not play on this turn'.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 19:00:31' prior: 50885924!
test04PlayerOCantPlayOnPlayerXTurn
	| game |
	
	game := TerniLapilli new.
	self should: [game putOAt: 3@3] 
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: 0 equals: game playedTokens.
			self assert: true equals: game isPlayingX.	
			self assert: (TerniLapilli invalidTurnPlayMessage) equals: anError.
		].
		
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 19:00:31' prior: 50881515!
verifyPlayerTurn: aPlayer 
	
	(self isPlaying: aPlayer) ifFalse: [^self signalErrorWith: (self class invalidTurnPlayMessage)].
	
	! !

!methodRemoval: TerniLapilli class #invalidTurnPlayMessage: stamp: 'MG 10/31/2020 19:00:31'!
invalidTurnPlayMessage: invalidTurnPlayer 
	^'You can not play on this turn'.!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 19:00:50'!
FAILURE!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 19:00:50'!
FAILURE!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 19:01:00'!
FAILURE!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 19:01:00'!
FAILURE!

self message!
!TerniLapilli methodsFor: 'gameplay verifies -- private' stamp: 'MG 10/31/2020 19:02:45' prior: 50885979!
verifyPlayerTurn: aPlayer 
	
	(self isPlaying: aPlayer) ifFalse: [^self signal: (self class invalidTurnPlayMessage)].
	
	! !

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 19:02:48'!
FAILURE!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 19:02:48'!
FAILURE!
!TerniLapilli methodsFor: 'gameplay verifies -- private' stamp: 'MG 10/31/2020 19:04:47' prior: 50886006!
verifyPlayerTurn: aPlayer 
	
	(self isPlaying: aPlayer) ifFalse: [^self error: (self class invalidTurnPlayMessage)].
	
	! !

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 19:04:50'!
FAILURE!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 19:04:50'!
FAILURE!

self message!

self messageText !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 19:05:45' prior: 50885965!
test04PlayerOCantPlayOnPlayerXTurn
	| game |
	
	game := TerniLapilli new.
	self should: [game putOAt: 3@3] 
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: 0 equals: game playedTokens.
			self assert: true equals: game isPlayingX.	
			self assert: (TerniLapilli invalidTurnPlayMessage) equals: anError messageText .
		].
		
! !

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 19:05:51'!
PASSED!
!TerniLapilli methodsFor: 'gameplay verifies -- private' stamp: 'MG 10/31/2020 19:06:07' prior: 50884420!
verifyMoveToNeighborFrom: srcPoint to: dstPoint

"Se podria para mas claridad modificar la guarda del if implementando en la clase Point
el mensaje isNeighbor:aPoint "
	(srcPoint eightNeighbors includes: dstPoint) ifFalse: [^self error: (self class cantMoveToNonNeighborPositionMessage)]! !
!TerniLapilli methodsFor: 'gameplay verifies -- private' stamp: 'MG 10/31/2020 19:06:15' prior: 50881714!
verifyPositionInBoard: aPoint
	
	(self isWithinBoardLimits: aPoint) ifFalse:[^self error: (self class tokenOutOfBoardMessage: aPoint)].
	
	! !
!TerniLapilli methodsFor: 'gameplay verifies -- private' stamp: 'MG 10/31/2020 19:06:18' prior: 50881425!
verifyPositionIsNotOccupied: aPoint
	
	(self hasTokenAt: aPoint) ifTrue: [^self error: (self class cantStackTokensMessage: aPoint)].

	
	! !
!TerniLapilli methodsFor: 'gameplay verifies -- private' stamp: 'MG 10/31/2020 19:06:22' prior: 50882909!
verifyPositionIsOccupied: aPoint 

	(self hasTokenAt: aPoint) ifFalse: [^self error: (self class cantStackTokensMessage: aPoint)].

	! !
!TerniLapilli methodsFor: 'gameplay verifies -- private' stamp: 'MG 10/31/2020 19:06:27' prior: 50882452!
verifyValidDiagonalMoveFrom: srcPoint to: dstPoint
	((self isStarPoint: srcPoint) or: [self isStarPoint: dstPoint]) ifFalse:[self error: (self class cantMoveDiagonallyFrom: srcPoint )].
	! !
!TerniLapilliGameOverState methodsFor: 'gameplay' stamp: 'MG 10/31/2020 19:06:56' prior: 50885367 overrides: 50885315!
tryPut: aPlayer tokenAt: aPoint

	^self error: (self class gameIsAlreadyOverMessage )! !
!TerniLapilliGameOverState methodsFor: 'gameplay' stamp: 'MG 10/31/2020 19:07:01' prior: 50885418 overrides: 50885425!
tryMove: aPlayer tokenFrom: srcPoint to: dstPoint

	^self error: (self class gameIsAlreadyOverMessage )! !
!TerniLapilliMoveState methodsFor: 'gameplay' stamp: 'MG 10/31/2020 19:07:10' prior: 50885360 overrides: 50885315!
tryPut: aPlayer tokenAt: aPoint

	^self error: (self class cantPlayMoreTokensMessage)! !
!TerniLapilliPutState methodsFor: 'gameplay' stamp: 'MG 10/31/2020 19:07:18' prior: 50885445 overrides: 50885425!
tryMove: aPlayer tokenFrom: srcPoint to: dstPoint

	^self error: (self class cantMoveTokenYetMessage)! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 19:07:33' prior: 50885899!
test05PlayerXCantPlayOnPlayerOTurn
	| game |
	
	game := TerniLapilli new.
	game putXAt: 2@3.
	self should: [game putXAt: 3@3] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: 1 equals: game playedTokens.
			self assert: true equals: game isPlayingO.	
			self assert: (TerniLapilli invalidTurnPlayMessage) equals: anError messageText .
		]
		
	
! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 19:07:51' prior: 50880887!
test06PlayersCantPutMoreThanThreeTokensEach
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.

	self should: [game putXAt:3@3]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: 6 equals: game playedTokens.
			self assert: (TerniLapilli gameIsAlreadyOverMessage ) equals: anError messageText .
		]! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 19:08:39' prior: 50880251!
test09PlayersCantStackTokens
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	
	self should: [game putOAt: 1@1] 
	raise: Error  
	withExceptionDo: [:anError | 
		self assert: 1 equals: game playedTokens.
		self assert: true equals: (game XTokenAt: 1@1).
		self assert: (TerniLapilli cantStackTokensMessage: 1@1) equals: anError messageText .
	]! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 19:11:46' prior: 50880671!
test10TokenCantBePutOutsideBoard
	| game |
	
	game := TerniLapilli new.

	
	self should: [	game putXAt: 4@-1.] 
	raise: Error  
	withExceptionDo: [:anError | 
		self assert: 0 equals: game playedTokens.
		self assert: (TerniLapilli tokenOutOfBoardMessage: 4@-1) equals: anError messageText .
	]! !

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 19:11:50'!
PASSED!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 19:11:53'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 19:11:53'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 19:11:53'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 19:11:53'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 19:11:53'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 19:11:53'!
FAILURE!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 19:11:53'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 19:11:53'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 19:11:53'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 19:11:53'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 19:11:53'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 19:11:53'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 19:11:53'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 19:11:53'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 19:11:53'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 19:11:53'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 10/31/2020 19:11:53'!
PASSED!

!testRun: #TerniLapilliTest #test18CantMoveToNonNeighborPoint stamp: 'MG 10/31/2020 19:11:53'!
PASSED!

!testRun: #TerniLapilliTest #test19GameIsOverWhen3TokensAreInLine stamp: 'MG 10/31/2020 19:11:53'!
PASSED!

!testRun: #TerniLapilliTest #test20CantPlayTokenWhenGameIsOver stamp: 'MG 10/31/2020 19:11:53'!
PASSED!

!testRun: #TerniLapilliTest #test21CantMoveTokenWhenGameIsOver stamp: 'MG 10/31/2020 19:11:53'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 19:11:53'!
FAILURE!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 19:12:08'!
FAILURE!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 19:12:08'!
FAILURE!

self messageText !
!TerniLapilliMoveState methodsFor: 'gameplay' stamp: 'MG 10/31/2020 19:28:40' prior: 50886114 overrides: 50885315!
tryPut: aPlayer tokenAt: aPoint

	^self error: (game class cantPlayMoreTokensMessage)! !
!TerniLapilliGameOverState methodsFor: 'gameplay' stamp: 'MG 10/31/2020 19:29:18' prior: 50886107 overrides: 50885425!
tryMove: aPlayer tokenFrom: srcPoint to: dstPoint

	^self error: (game class gameIsAlreadyOverMessage )! !
!TerniLapilliGameOverState methodsFor: 'gameplay' stamp: 'MG 10/31/2020 19:29:21' prior: 50886100 overrides: 50885315!
tryPut: aPlayer tokenAt: aPoint

	^self error: (game class gameIsAlreadyOverMessage )! !
!TerniLapilliPutState methodsFor: 'gameplay' stamp: 'MG 10/31/2020 19:29:28' prior: 50885343 overrides: 50885315!
tryPut: aPlayer tokenAt: aPoint
	
	game put: aPlayer tokenAt: aPoint.! !
!TerniLapilliPutState methodsFor: 'gameplay' stamp: 'MG 10/31/2020 19:29:32' prior: 50886121 overrides: 50885425!
tryMove: aPlayer tokenFrom: srcPoint to: dstPoint

	^self error: (game class cantMoveTokenYetMessage)! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 19:29:36'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 19:29:36'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 19:29:36'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 19:29:36'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 19:29:36'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 19:29:36'!
FAILURE!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 19:29:36'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 19:29:36'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 19:29:36'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 19:29:36'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 19:29:36'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 19:29:36'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 19:29:36'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 19:29:36'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 19:29:36'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 19:29:36'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 10/31/2020 19:29:36'!
PASSED!

!testRun: #TerniLapilliTest #test18CantMoveToNonNeighborPoint stamp: 'MG 10/31/2020 19:29:36'!
PASSED!

!testRun: #TerniLapilliTest #test19GameIsOverWhen3TokensAreInLine stamp: 'MG 10/31/2020 19:29:36'!
PASSED!

!testRun: #TerniLapilliTest #test20CantPlayTokenWhenGameIsOver stamp: 'MG 10/31/2020 19:29:36'!
PASSED!

!testRun: #TerniLapilliTest #test21CantMoveTokenWhenGameIsOver stamp: 'MG 10/31/2020 19:29:36'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 19:29:36'!
FAILURE!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 19:29:45'!
PASSED!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 19:31:01'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 19:31:01'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 19:31:01'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 19:31:01'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 19:31:01'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 19:31:01'!
FAILURE!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 19:31:01'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 19:31:01'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 19:31:01'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 19:31:01'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 19:31:02'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 19:31:02'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 19:31:02'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 19:31:02'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 19:31:02'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 19:31:02'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 10/31/2020 19:31:02'!
PASSED!

!testRun: #TerniLapilliTest #test18CantMoveToNonNeighborPoint stamp: 'MG 10/31/2020 19:31:02'!
PASSED!

!testRun: #TerniLapilliTest #test19GameIsOverWhen3TokensAreInLine stamp: 'MG 10/31/2020 19:31:02'!
PASSED!

!testRun: #TerniLapilliTest #test20CantPlayTokenWhenGameIsOver stamp: 'MG 10/31/2020 19:31:02'!
PASSED!

!testRun: #TerniLapilliTest #test21CantMoveTokenWhenGameIsOver stamp: 'MG 10/31/2020 19:31:02'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 19:31:02'!
FAILURE!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 19:31:05'!
FAILURE!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 19:31:05'!
FAILURE!
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 19:32:03' prior: 50886142!
test06PlayersCantPutMoreThanThreeTokensEach
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.

	self should: [game putXAt:3@3]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: 6 equals: game playedTokens.
			self assert: (TerniLapilli cantPlayMoreTokensMessage ) equals: anError messageText .
		]	! !

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 19:32:04'!
PASSED!
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 19:32:47' prior: 50882287!
test12TokenFromNonStarPointCantBeMovedDiagonally
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	self should: [game moveXFrom: 3@2 to: 2@3]
		raise: Error
		withExceptionDo: [:anError |
			self assert: (game XTokenAt: 3@2).
			self assert: (TerniLapilli cantMoveDiagonallyFrom: 3@2) equals: anError messageText .
		]! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 19:33:40' prior: 50882699!
test13TokenCantBeMovedOutOfBoard
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	self should: [game moveXFrom: 3@2 to: 4@2]
		raise: Error
		withExceptionDo: [:anError |
			self assert: (game XTokenAt: 3@2).
			self assert: (TerniLapilli tokenOutOfBoardMessage: 4@2) equals: anError messageText .
		]! !

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 19:33:42'!
PASSED!
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 19:34:09' prior: 50882774!
test14CantMoveInexistentToken
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	self should: [game moveXFrom: 3@3 to: 2@3]
		raise: Error
		withExceptionDo: [:anError |	
			self deny: (game XTokenAt: 3@3).
			self deny: (game XTokenAt: 2@3).
			self assert: (TerniLapilli tokenOutOfBoardMessage: 4@-1) equals: anError messageText .
		]! !

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 19:34:10'!
FAILURE!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 19:34:10'!
FAILURE!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 19:34:28'!
FAILURE!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 19:34:28'!
FAILURE!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 19:35:18'!
FAILURE!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 19:35:27'!
FAILURE!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 19:35:27'!
FAILURE!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 19:35:39'!
FAILURE!
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 19:36:58' prior: 50886519!
test14CantMoveInexistentToken
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	self should: [game moveXFrom: 3@3 to: 2@3]
		raise: Error
		withExceptionDo: [:anError |	
			self deny: (game XTokenAt: 3@3).
			self deny: (game XTokenAt: 2@3).
			self assert: (TerniLapilli tokenOutOfBoardMessage: 4@-1) equals: anError messageText .
		]! !

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 19:36:58'!
FAILURE!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 19:36:58'!
FAILURE!
!TerniLapilli methodsFor: 'gameplay verifies -- private' stamp: 'MG 10/31/2020 19:39:57' prior: 50886082!
verifyPositionIsOccupied: aPoint 

	(self hasTokenAt: aPoint) ifFalse: [^self error: (self class needTokenToMoveFrom: aPoint)].

	! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'MG 10/31/2020 19:40:31'!
needTokenToMoveFrom: aPoint
	^'Point ', aPoint asString , ' does not contain a token'.! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 19:41:11' prior: 50886562!
test14CantMoveInexistentToken
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	self should: [game moveXFrom: 3@3 to: 2@3]
		raise: Error
		withExceptionDo: [:anError |	
			self deny: (game XTokenAt: 3@3).
			self deny: (game XTokenAt: 2@3).
			self assert: (TerniLapilli needTokenToMoveFrom: 3@3) equals: anError messageText .
		]! !

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 19:41:13'!
PASSED!
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 19:41:58' prior: 50883188!
test15CantMoveAndStackTokens
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	self should: [game moveXFrom: 1@1 to: 1@2]
		raise: Error
		withExceptionDo: [:anError |	
			self assert: (game XTokenAt: 1@1).
			self assert: (TerniLapilli cantStackTokensMessage: 1@2) equals: anError messageText .
		]! !

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 19:42:00'!
PASSED!
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 19:42:25' prior: 50883398!
test16PlayerCantMoveOnOtherPlayersTurn
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	game moveXFrom: 3@2 to: 3@3.
	
	self should: [game moveXFrom: 3@3 to: 2@3]
		raise: Error
		withExceptionDo: [:anError |	
			self assert: (game XTokenAt: 3@3).
			self deny: (game XTokenAt: 2@3).
			self assert: (TerniLapilli invalidTurnPlayMessage ) equals: anError messageText .
		]! !

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 19:42:27'!
FAILURE!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 19:42:27'!
FAILURE!
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 19:44:06' prior: 50886638!
test16PlayerCantMoveOnOtherPlayersTurn
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	game moveXFrom: 3@2 to: 3@1.
	
	self should: [game moveXFrom: 3@3 to: 2@3]
		raise: Error
		withExceptionDo: [:anError |	
			self assert: (game XTokenAt: 3@3).
			self deny: (game XTokenAt: 2@3).
			self assert: (TerniLapilli invalidTurnPlayMessage ) equals: anError messageText .
		]! !

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 19:44:07'!
FAILURE!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 19:44:07'!
FAILURE!
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 19:44:25' prior: 50886663!
test16PlayerCantMoveOnOtherPlayersTurn
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	game moveXFrom: 3@2 to: 3@1.
	
	self should: [game moveXFrom: 3@1 to: 3@2]
		raise: Error
		withExceptionDo: [:anError |	
			self assert: (game XTokenAt: 3@3).
			self deny: (game XTokenAt: 2@3).
			self assert: (TerniLapilli invalidTurnPlayMessage ) equals: anError messageText .
		]! !

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 19:44:26'!
FAILURE!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 19:44:26'!
FAILURE!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 19:44:36'!
FAILURE!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 19:44:36'!
FAILURE!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 19:44:56'!
FAILURE!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 19:44:56'!
FAILURE!
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 19:46:20' prior: 50886688!
test16PlayerCantMoveOnOtherPlayersTurn
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	game moveXFrom: 3@2 to: 3@1.
	
	self should: [game moveXFrom: 3@1 to: 3@2]
		raise: Error
		withExceptionDo: [:anError |	
			self assert: (game XTokenAt: 3@1).
			self deny: (game XTokenAt: 2@3).
			self assert: (TerniLapilli invalidTurnPlayMessage ) equals: anError messageText .
		]! !

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 19:46:21'!
PASSED!
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 19:46:46' prior: 50883956!
test17PlayerCantMoveOnPutPhase
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.

	self should: [game moveOFrom: 1@2 to: 1@3]
		raise: Error
		withExceptionDo: [:anError |	
			self assert: (game OTokenAt: 1@2).
			self assert: (TerniLapilli cantMoveTokenYetMessage ) equals: anError messageText .
		]! !

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 10/31/2020 19:46:47'!
PASSED!
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 19:46:59' prior: 50884056!
test18CantMoveToNonNeighborPoint
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.
	
	self should: [game moveXFrom: 1@1 to: 3@3]
		raise: Error
		withExceptionDo: [:anError |	
			self assert: (game XTokenAt: 1@1).
			self deny: (game XTokenAt: 3@3).
			self assert: (TerniLapilli cantMoveToNonNeighborPositionMessage ) equals: anError messageText .
		]! !

!testRun: #TerniLapilliTest #test18CantMoveToNonNeighborPoint stamp: 'MG 10/31/2020 19:47:01'!
PASSED!
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 19:47:15' prior: 50885005!
test20CantPlayTokenWhenGameIsOver
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@3.

	self should: [game putOAt: 1@3]
			raise: Error
			withExceptionDo: [:anError |	
				self assert: (game isOver).
				self assert: (TerniLapilli gameIsAlreadyOverMessage ) equals: anError messageText .
			]	


		! !

!testRun: #TerniLapilliTest #test20CantPlayTokenWhenGameIsOver stamp: 'MG 10/31/2020 19:47:18'!
PASSED!
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 19:47:22' prior: 50885029!
test21CantMoveTokenWhenGameIsOver
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.

	game moveXFrom: 3@2 to: 3@3. 
	self should: [game moveOFrom: 1@3 to: 2@3]
			raise: Error
			withExceptionDo: [:anError |	
				self assert: (game isOver).
				self assert: (TerniLapilli gameIsAlreadyOverMessage ) equals: anError messageText .
			]	


		! !

!testRun: #TerniLapilliTest #test21CantMoveTokenWhenGameIsOver stamp: 'MG 10/31/2020 19:47:23'!
PASSED!
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 19:48:51'!
fillBoard: aTerniLapilliNewGame
	
	aTerniLapilliNewGame putXAt: 1@1.
	aTerniLapilliNewGame putOAt: 2@1.
	aTerniLapilliNewGame putXAt: 2@2.
	aTerniLapilliNewGame putOAt: 1@2.
	aTerniLapilliNewGame putXAt: 3@2.
	aTerniLapilliNewGame putOAt: 1@3.
	
	! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 19:49:18' prior: 50882275!
test11TokenFromAnyPointCanBeMovedNonDiagonally
	| game |
	
	game := TerniLapilli new.
	self fillBoard: game.
	
	game moveXFrom: 3@2 to: 3@3.
	self assert: (game XTokenAt: 3@3).! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 19:49:35' prior: 50886483!
test12TokenFromNonStarPointCantBeMovedDiagonally
	| game |
	
	game := TerniLapilli new.
	self fillBoard: game.
	
	self should: [game moveXFrom: 3@2 to: 2@3]
		raise: Error
		withExceptionDo: [:anError |
			self assert: (game XTokenAt: 3@2).
			self assert: (TerniLapilli cantMoveDiagonallyFrom: 3@2) equals: anError messageText .
		]! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 19:49:38' prior: 50886500!
test13TokenCantBeMovedOutOfBoard
	| game |
	
	game := TerniLapilli new.
	self fillBoard: game.
	
	self should: [game moveXFrom: 3@2 to: 4@2]
		raise: Error
		withExceptionDo: [:anError |
			self assert: (game XTokenAt: 3@2).
			self assert: (TerniLapilli tokenOutOfBoardMessage: 4@2) equals: anError messageText .
		]! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 19:49:43' prior: 50886599!
test14CantMoveInexistentToken
	| game |
	
	game := TerniLapilli new.
	self fillBoard: game.
	
	self should: [game moveXFrom: 3@3 to: 2@3]
		raise: Error
		withExceptionDo: [:anError |	
			self deny: (game XTokenAt: 3@3).
			self deny: (game XTokenAt: 2@3).
			self assert: (TerniLapilli needTokenToMoveFrom: 3@3) equals: anError messageText .
		]! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 19:49:46' prior: 50886619!
test15CantMoveAndStackTokens
	| game |
	
	game := TerniLapilli new.
	self fillBoard: game.
	
	self should: [game moveXFrom: 1@1 to: 1@2]
		raise: Error
		withExceptionDo: [:anError |	
			self assert: (game XTokenAt: 1@1).
			self assert: (TerniLapilli cantStackTokensMessage: 1@2) equals: anError messageText .
		]! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 19:49:51' prior: 50886727!
test16PlayerCantMoveOnOtherPlayersTurn
	| game |
	
	game := TerniLapilli new.
	self fillBoard: game.
	
	game moveXFrom: 3@2 to: 3@1.
	
	self should: [game moveXFrom: 3@1 to: 3@2]
		raise: Error
		withExceptionDo: [:anError |	
			self assert: (game XTokenAt: 3@1).
			self deny: (game XTokenAt: 2@3).
			self assert: (TerniLapilli invalidTurnPlayMessage ) equals: anError messageText .
		]! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 19:50:23' prior: 50886767!
test18CantMoveToNonNeighborPoint
	| game |
	
	game := TerniLapilli new.
	self fillBoard: game.
	
	self should: [game moveXFrom: 1@1 to: 3@3]
		raise: Error
		withExceptionDo: [:anError |	
			self assert: (game XTokenAt: 1@1).
			self deny: (game XTokenAt: 3@3).
			self assert: (TerniLapilli cantMoveToNonNeighborPositionMessage ) equals: anError messageText .
		]! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 10/31/2020 19:50:40' prior: 50886806!
test21CantMoveTokenWhenGameIsOver
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.
	game putXAt: 2@2.
	game putOAt: 1@2.
	game putXAt: 3@2.
	game putOAt: 1@3.

	game moveXFrom: 3@2 to: 3@3. 
	self should: [game moveOFrom: 1@3 to: 2@3]
			raise: Error
			withExceptionDo: [:anError |	
				self assert: (game isOver).
				self assert: (TerniLapilli gameIsAlreadyOverMessage ) equals: anError messageText .
			]	


		! !

!testRun: #TerniLapilliTest #test21CantMoveTokenWhenGameIsOver stamp: 'MG 10/31/2020 19:50:46'!
PASSED!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 10/31/2020 19:50:48'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 10/31/2020 19:50:48'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 10/31/2020 19:50:48'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 10/31/2020 19:50:48'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 10/31/2020 19:50:48'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 10/31/2020 19:50:49'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 19:50:49'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 10/31/2020 19:50:49'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 10/31/2020 19:50:49'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 10/31/2020 19:50:49'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 10/31/2020 19:50:49'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 10/31/2020 19:50:49'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 10/31/2020 19:50:49'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 10/31/2020 19:50:49'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 10/31/2020 19:50:49'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 10/31/2020 19:50:49'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 10/31/2020 19:50:49'!
PASSED!

!testRun: #TerniLapilliTest #test18CantMoveToNonNeighborPoint stamp: 'MG 10/31/2020 19:50:49'!
PASSED!

!testRun: #TerniLapilliTest #test19GameIsOverWhen3TokensAreInLine stamp: 'MG 10/31/2020 19:50:49'!
PASSED!

!testRun: #TerniLapilliTest #test20CantPlayTokenWhenGameIsOver stamp: 'MG 10/31/2020 19:50:49'!
PASSED!

!testRun: #TerniLapilliTest #test21CantMoveTokenWhenGameIsOver stamp: 'MG 10/31/2020 19:50:49'!
PASSED!

----SNAPSHOT----(31 October 2020 20:02:15) CuisUniversity-4365.image priorSource: 17713885!

----QUIT----(31 October 2020 20:06:28) CuisUniversity-4365.image priorSource: 17771820!

----STARTUP---- (1 November 2020 19:46:25) as C:\Users\Mati\Desktop\facu\IS1\windows64\CuisUniversity-4365.image!

!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'MG 11/1/2020 19:49:19'!
movingInexistentTokenMessage: aPoint
	^'Point ', aPoint asString , ' does not contain a token'.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'MG 11/1/2020 19:49:19' prior: 50886586!
verifyPositionIsOccupied: aPoint 

	(self hasTokenAt: aPoint) ifFalse: [^self error: (self class movingInexistentTokenMessage: aPoint)].

	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 11/1/2020 19:49:19' prior: 50886873!
test14CantMoveInexistentToken
	| game |
	
	game := TerniLapilli new.
	self fillBoard: game.
	
	self should: [game moveXFrom: 3@3 to: 2@3]
		raise: Error
		withExceptionDo: [:anError |	
			self deny: (game XTokenAt: 3@3).
			self deny: (game XTokenAt: 2@3).
			self assert: (TerniLapilli movingInexistentTokenMessage: 3@3) equals: anError messageText .
		]! !

!methodRemoval: TerniLapilli class #needTokenToMoveFrom: stamp: 'MG 11/1/2020 19:49:19'!
needTokenToMoveFrom: aPoint
	^'Point ', aPoint asString , ' does not contain a token'.!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'MG 11/1/2020 19:50:16' prior: 50887030!
movingInexistentTokenMessage: aPoint
	^'There is no token to move at ', aPoint asString.! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 11/1/2020 19:51:44' prior: 50879118!
test02AfterPlayerXTurnPlayerOShouldPlay
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@3.
	
	self deny: game isOver.
	self assert: true equals: game isPlayingO.
	self assert: false equals: game isPlayingX.
	self assert: 1 equals: game playedTokens.			! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 11/1/2020 19:52:02' prior: 50887071!
test02AfterPlayerXTurnPlayerOShouldPlay
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@3.
	
	self deny: game isOver.
	self assert: game isPlayingO.
	self deny: game isPlayingX.
	self assert: 1 equals: game playedTokens.			! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 11/1/2020 19:52:19' prior: 50879106!
test03AfterPlayerOTurnPlayerXShouldMove
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@3.
	game putOAt: 2@3.
	
	self assert: game isPlayingX.
	self deny: game isPlayingO.
	self assert: 2 equals: game playedTokens.
	! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 11/1/2020 19:52:20'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 11/1/2020 19:52:20'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 11/1/2020 19:52:20'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 11/1/2020 19:52:20'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 11/1/2020 19:52:20'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 11/1/2020 19:52:20'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 11/1/2020 19:52:20'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 11/1/2020 19:52:20'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 11/1/2020 19:52:20'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 11/1/2020 19:52:20'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 11/1/2020 19:52:20'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 11/1/2020 19:52:20'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 11/1/2020 19:52:20'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 11/1/2020 19:52:20'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 11/1/2020 19:52:20'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 11/1/2020 19:52:21'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 11/1/2020 19:52:21'!
PASSED!

!testRun: #TerniLapilliTest #test18CantMoveToNonNeighborPoint stamp: 'MG 11/1/2020 19:52:21'!
PASSED!

!testRun: #TerniLapilliTest #test19GameIsOverWhen3TokensAreInLine stamp: 'MG 11/1/2020 19:52:21'!
PASSED!

!testRun: #TerniLapilliTest #test20CantPlayTokenWhenGameIsOver stamp: 'MG 11/1/2020 19:52:21'!
PASSED!

!testRun: #TerniLapilliTest #test21CantMoveTokenWhenGameIsOver stamp: 'MG 11/1/2020 19:52:21'!
PASSED!
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 11/1/2020 19:52:27' prior: 50886035!
test04PlayerOCantPlayOnPlayerXTurn
	| game |
	
	game := TerniLapilli new.
	self should: [game putOAt: 3@3] 
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: 0 equals: game playedTokens.
			self assert: game isPlayingX.	
			self assert: (TerniLapilli invalidTurnPlayMessage) equals: anError messageText .
		].
		
! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 11/1/2020 19:52:35' prior: 50886127!
test05PlayerXCantPlayOnPlayerOTurn
	| game |
	
	game := TerniLapilli new.
	game putXAt: 2@3.
	self should: [game putXAt: 3@3] 
		raise: Error
		withExceptionDo: [ :anError |
			self assert: 1 equals: game playedTokens.
			self assert: game isPlayingO.	
			self assert: (TerniLapilli invalidTurnPlayMessage) equals: anError messageText .
		]
		
	
! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 11/1/2020 19:52:48' prior: 50879941!
test07PlayerXTokenIsPlacedCorrectly
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	
	self assert: (game XTokenAt: 1@1).
	self deny: (game OTokenAt: 1@1).! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 11/1/2020 19:52:52'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 11/1/2020 19:52:52'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 11/1/2020 19:52:52'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 11/1/2020 19:52:52'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 11/1/2020 19:52:52'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 11/1/2020 19:52:52'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 11/1/2020 19:52:52'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 11/1/2020 19:52:52'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 11/1/2020 19:52:52'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 11/1/2020 19:52:52'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 11/1/2020 19:52:52'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 11/1/2020 19:52:52'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 11/1/2020 19:52:52'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 11/1/2020 19:52:52'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 11/1/2020 19:52:52'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 11/1/2020 19:52:52'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 11/1/2020 19:52:52'!
PASSED!

!testRun: #TerniLapilliTest #test18CantMoveToNonNeighborPoint stamp: 'MG 11/1/2020 19:52:52'!
PASSED!

!testRun: #TerniLapilliTest #test19GameIsOverWhen3TokensAreInLine stamp: 'MG 11/1/2020 19:52:52'!
PASSED!

!testRun: #TerniLapilliTest #test20CantPlayTokenWhenGameIsOver stamp: 'MG 11/1/2020 19:52:52'!
PASSED!

!testRun: #TerniLapilliTest #test21CantMoveTokenWhenGameIsOver stamp: 'MG 11/1/2020 19:52:52'!
PASSED!
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 11/1/2020 19:53:11' prior: 50879960!
test08PlayerOTokenIsPlacedCorrectly
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	game putOAt: 2@1.	
	
	self assert: (game XTokenAt: 1@1).
	self assert: (game OTokenAt: 2@1).
	self deny: (game XTokenAt: 2@1).! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 11/1/2020 19:53:20' prior: 50886158!
test09PlayersCantStackTokens
	| game |
	
	game := TerniLapilli new.
	game putXAt: 1@1.
	
	self should: [game putOAt: 1@1] 
	raise: Error  
	withExceptionDo: [:anError | 
		self assert: 1 equals: game playedTokens.
		self assert: (game XTokenAt: 1@1).
		self assert: (TerniLapilli cantStackTokensMessage: 1@1) equals: anError messageText .
	]! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 11/1/2020 19:55:49' prior: 50886463!
test06PlayersCantPutMoreThanThreeTokensEach
	| game |
	
	game := TerniLapilli new.
	self fillBoard: game.

	self should: [game putXAt:3@3]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: 6 equals: game playedTokens.
			self assert: (TerniLapilli cantPlayMoreTokensMessage ) equals: anError messageText .
		]	! !

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 11/1/2020 19:55:56'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 11/1/2020 19:55:56'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 11/1/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 11/1/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 11/1/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 11/1/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 11/1/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 11/1/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 11/1/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 11/1/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 11/1/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 11/1/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 11/1/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 11/1/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 11/1/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 11/1/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 11/1/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test18CantMoveToNonNeighborPoint stamp: 'MG 11/1/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test19GameIsOverWhen3TokensAreInLine stamp: 'MG 11/1/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test20CantPlayTokenWhenGameIsOver stamp: 'MG 11/1/2020 19:55:57'!
PASSED!

!testRun: #TerniLapilliTest #test21CantMoveTokenWhenGameIsOver stamp: 'MG 11/1/2020 19:55:57'!
PASSED!
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 11/1/2020 19:58:47' prior: 50886930!
test21CantMoveTokenWhenGameIsOver
	| game |
	
	game := TerniLapilli new.
	self fillBoard: game.

	game moveXFrom: 3@2 to: 3@3. 
	self should: [game moveOFrom: 1@3 to: 2@3]
			raise: Error
			withExceptionDo: [:anError |	
				self assert: (game isOver).
				self assert: (TerniLapilli gameIsAlreadyOverMessage ) equals: anError messageText .
			]	


		! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 11/1/2020 20:00:35'!
almostFilledBoardGameEnded: aNewTerniLapilliGame
	aNewTerniLapilliGame putXAt: 1@1.
	aNewTerniLapilliGame putOAt: 2@1.
	aNewTerniLapilliGame putXAt: 2@2.
	aNewTerniLapilliGame putOAt: 1@2.
	aNewTerniLapilliGame putXAt: 3@3.



		! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 11/1/2020 20:00:58' prior: 50884801!
test19GameIsOverWhen3TokensAreInLine
	| game |
	
	game := TerniLapilli new.
	self almostFilledBoardGameEnded: game.

	self assert: (game isOver).


		! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 11/1/2020 20:01:05' prior: 50886788!
test20CantPlayTokenWhenGameIsOver
	| game |
	
	game := TerniLapilli new.
	self almostFilledBoardGameEnded: game..

	self should: [game putOAt: 1@3]
			raise: Error
			withExceptionDo: [:anError |	
				self assert: (game isOver).
				self assert: (TerniLapilli gameIsAlreadyOverMessage ) equals: anError messageText .
			]	


		! !
!TerniLapilliTest methodsFor: 'test' stamp: 'MG 11/1/2020 20:01:09' prior: 50887416!
test20CantPlayTokenWhenGameIsOver
	| game |
	
	game := TerniLapilli new.
	self almostFilledBoardGameEnded: game.

	self should: [game putOAt: 1@3]
			raise: Error
			withExceptionDo: [:anError |	
				self assert: (game isOver).
				self assert: (TerniLapilli gameIsAlreadyOverMessage ) equals: anError messageText .
			]	


		! !
!TerniLapilliTest methodsFor: 'test -- private' stamp: 'MG 11/1/2020 20:02:12'!
fillWithThreeInLineXTokens: aNewTerniLapilliGame
	aNewTerniLapilliGame putXAt: 1@1.
	aNewTerniLapilliGame putOAt: 2@1.
	aNewTerniLapilliGame putXAt: 2@2.
	aNewTerniLapilliGame putOAt: 1@2.
	aNewTerniLapilliGame putXAt: 3@3.



		! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 11/1/2020 20:02:12' prior: 50887429!
test20CantPlayTokenWhenGameIsOver
	| game |
	
	game := TerniLapilli new.
	self fillWithThreeInLineXTokens: game.

	self should: [game putOAt: 1@3]
			raise: Error
			withExceptionDo: [:anError |	
				self assert: (game isOver).
				self assert: (TerniLapilli gameIsAlreadyOverMessage ) equals: anError messageText .
			]	


		! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'MG 11/1/2020 20:02:12' prior: 50887408!
test19GameIsOverWhen3TokensAreInLine
	| game |
	
	game := TerniLapilli new.
	self fillWithThreeInLineXTokens: game.

	self assert: (game isOver).


		! !

!methodRemoval: TerniLapilliTest #almostFilledBoardGameEnded: stamp: 'MG 11/1/2020 20:02:12'!
almostFilledBoardGameEnded: aNewTerniLapilliGame
	aNewTerniLapilliGame putXAt: 1@1.
	aNewTerniLapilliGame putOAt: 2@1.
	aNewTerniLapilliGame putXAt: 2@2.
	aNewTerniLapilliGame putOAt: 1@2.
	aNewTerniLapilliGame putXAt: 3@3.



		!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 11/1/2020 20:02:21'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 11/1/2020 20:02:21'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 11/1/2020 20:02:21'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 11/1/2020 20:02:21'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 11/1/2020 20:02:22'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 11/1/2020 20:02:22'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 11/1/2020 20:02:22'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 11/1/2020 20:02:22'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 11/1/2020 20:02:22'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 11/1/2020 20:02:22'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 11/1/2020 20:02:22'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 11/1/2020 20:02:22'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 11/1/2020 20:02:22'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 11/1/2020 20:02:22'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 11/1/2020 20:02:22'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 11/1/2020 20:02:22'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 11/1/2020 20:02:22'!
PASSED!

!testRun: #TerniLapilliTest #test18CantMoveToNonNeighborPoint stamp: 'MG 11/1/2020 20:02:22'!
PASSED!

!testRun: #TerniLapilliTest #test19GameIsOverWhen3TokensAreInLine stamp: 'MG 11/1/2020 20:02:22'!
PASSED!

!testRun: #TerniLapilliTest #test20CantPlayTokenWhenGameIsOver stamp: 'MG 11/1/2020 20:02:22'!
PASSED!

!testRun: #TerniLapilliTest #test21CantMoveTokenWhenGameIsOver stamp: 'MG 11/1/2020 20:02:22'!
PASSED!
!TerniLapilli methodsFor: 'initialization' stamp: 'MG 11/1/2020 20:04:28' prior: 50885683 overrides: 16896425!
initialize 
	
	playerX := Player new.
	playerO := Player new.
	"el siguiente colaborador podria haberse abstraido en otro objeto
	nuevo pero no lo vimos necesario.
	Para que se inicialice con un estado valido pusimos que el ultimo jugador
	fuera el O aunque el juego recien comenzara"
	lastPlayer := playerO.
	gameState := TerniLapilliState gameStateFor: self.! !
!TerniLapilli methodsFor: 'game state -- private' stamp: 'MG 11/1/2020 20:05:09' prior: 50883479!
isPlaying: aPlayer
	
	^ lastPlayer ~= aPlayer.
	
! !

Object subclass: #TerniLapilliTurnState
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliTurnState category: #'Terni Lapilli' stamp: 'MG 11/1/2020 20:06:46'!
Object subclass: #TerniLapilliTurnState
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilliTurnState methodsFor: 'nil' stamp: 'MG 11/1/2020 20:08:16'!
isPlaying: aPlayer

	self subclassResponsibility.! !
!TerniLapilliTurnState methodsFor: 'as yet unclassified' stamp: 'MG 11/1/2020 20:08:57'!
changeTurn
	
	self subclassResponsibility.! !

TerniLapilliTurnState subclass: #TerniLapilliPlayerXTurn
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

TerniLapilliTurnState subclass: #TerniLapilliPlayerXTurn
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

TerniLapilliTurnState subclass: #TerniLapilliPlayerXTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliPlayerXTurn category: #'Terni Lapilli' stamp: 'MG 11/1/2020 20:09:50'!
TerniLapilliTurnState subclass: #TerniLapilliPlayerXTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRenamed: #TerniLapilliTurnState as: #TerniLapilliTurn stamp: 'MG 11/1/2020 20:09:58'!
Smalltalk renameClassNamed: #TerniLapilliTurnState as: #TerniLapilliTurn!

TerniLapilliTurn subclass: #TerniLapilliPlayerOTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliPlayerOTurn category: #'Terni Lapilli' stamp: 'MG 11/1/2020 20:10:03'!
TerniLapilliTurn subclass: #TerniLapilliPlayerOTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Object subclass: #TerniLapilliTurn
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliTurn category: #'Terni Lapilli' stamp: 'MG 11/1/2020 20:10:13'!
Object subclass: #TerniLapilliTurn
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilliPlayerOTurn methodsFor: 'nil' stamp: 'MG 11/1/2020 20:10:58' overrides: 50887587!
isPlaying: aPlayer
	
	^aPlayer! !
!TerniLapilliPlayerOTurn methodsFor: 'as yet unclassified' stamp: 'MG 11/1/2020 20:11:55' prior: 50887650 overrides: 50887587!
isPlaying: aPlayer
	
	^aPlayer! !
!TerniLapilliPlayerOTurn methodsFor: 'as yet unclassified' stamp: 'MG 11/1/2020 20:12:24' prior: 50887656 overrides: 50887587!
isPlaying: aPlayer
	
	^aPlayer! !

!methodRemoval: TerniLapilliPlayerOTurn #isPlaying: stamp: 'MG 11/1/2020 20:12:31'!
isPlaying: aPlayer
	
	^aPlayer!

!classRemoval: #TerniLapilliPlayerXTurn stamp: 'MG 11/1/2020 20:14:00'!
TerniLapilliTurn subclass: #TerniLapilliPlayerXTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilliPlayerOTurn stamp: 'MG 11/1/2020 20:14:00'!
TerniLapilliTurn subclass: #TerniLapilliPlayerOTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilliTurn stamp: 'MG 11/1/2020 20:14:01'!
Object subclass: #TerniLapilliTurn
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 11/1/2020 20:14:04'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 11/1/2020 20:14:04'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 11/1/2020 20:14:04'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 11/1/2020 20:14:05'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 11/1/2020 20:14:05'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 11/1/2020 20:14:05'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 11/1/2020 20:14:05'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 11/1/2020 20:14:05'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 11/1/2020 20:14:05'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 11/1/2020 20:14:05'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 11/1/2020 20:14:05'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 11/1/2020 20:14:05'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 11/1/2020 20:14:05'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 11/1/2020 20:14:05'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 11/1/2020 20:14:05'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 11/1/2020 20:14:05'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 11/1/2020 20:14:05'!
PASSED!

!testRun: #TerniLapilliTest #test18CantMoveToNonNeighborPoint stamp: 'MG 11/1/2020 20:14:05'!
PASSED!

!testRun: #TerniLapilliTest #test19GameIsOverWhen3TokensAreInLine stamp: 'MG 11/1/2020 20:14:05'!
PASSED!

!testRun: #TerniLapilliTest #test20CantPlayTokenWhenGameIsOver stamp: 'MG 11/1/2020 20:14:05'!
PASSED!

!testRun: #TerniLapilliTest #test21CantMoveTokenWhenGameIsOver stamp: 'MG 11/1/2020 20:14:05'!
PASSED!

----SNAPSHOT----(1 November 2020 20:14:10) CuisUniversity-4365.image priorSource: 17771913!

Object subclass: #TerniLapilliTurn
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliTurn category: #'Terni Lapilli' stamp: 'MG 11/1/2020 20:15:46'!
Object subclass: #TerniLapilliTurn
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Object subclass: #TerniLapilliPlayerTurn
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliPlayerTurn category: #'Terni Lapilli' stamp: 'MG 11/1/2020 20:16:07'!
Object subclass: #TerniLapilliPlayerTurn
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilliTurn stamp: 'MG 11/1/2020 20:16:10'!
Object subclass: #TerniLapilliTurn
	instanceVariableNames: 'game'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Object subclass: #TerniLapilliPlayerTurn
	instanceVariableNames: 'player'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliPlayerTurn category: #'Terni Lapilli' stamp: 'MG 11/1/2020 20:16:16'!
Object subclass: #TerniLapilliPlayerTurn
	instanceVariableNames: 'player'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilliPlayerTurn methodsFor: 'nil' stamp: 'MG 11/1/2020 20:16:42'!
isPlaying: aPlayer

	^aPlayer = player.! !
!TerniLapilliPlayerTurn methodsFor: 'game state' stamp: 'MG 11/1/2020 20:17:39'!
changeTurn
	
	! !
!TerniLapilliPlayerTurn methodsFor: 'game state' stamp: 'MG 11/1/2020 20:18:08'!
changeTurn: aTerniLapilliGame
	
	self subclassResponsibility.
	
	! !

!methodRemoval: TerniLapilliPlayerTurn #changeTurn stamp: 'MG 11/1/2020 20:18:11'!
changeTurn
	
	!

TerniLapilliPlayerTurn subclass: #TerniLapilliPlayerXTurn
	instanceVariableNames: 'player'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

TerniLapilliPlayerTurn subclass: #TerniLapilliPlayerXTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliPlayerXTurn category: #'Terni Lapilli' stamp: 'MG 11/1/2020 20:18:29'!
TerniLapilliPlayerTurn subclass: #TerniLapilliPlayerXTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

TerniLapilliPlayerTurn subclass: #TerniLapilliPlayerOTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliPlayerOTurn category: #'Terni Lapilli' stamp: 'MG 11/1/2020 20:18:36'!
TerniLapilliPlayerTurn subclass: #TerniLapilliPlayerOTurn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilliPlayerOTurn methodsFor: 'nil' stamp: 'MG 11/1/2020 20:18:50' overrides: 50887814!
changeTurn: aTerniLapilliGame

	! !
!TerniLapilliPlayerOTurn methodsFor: 'as yet unclassified' stamp: 'MG 11/1/2020 20:20:26' prior: 50887854 overrides: 50887814!
changeTurn: aTerniLapilliGame

	^aTerniLapilliGame changeTurnToPlayerX.! !
!TerniLapilliPlayerOTurn methodsFor: 'as yet unclassified' stamp: 'MG 11/1/2020 20:20:34' prior: 50887860 overrides: 50887814!
changeTurn: aTerniLapilliGame

	aTerniLapilliGame changeTurnToPlayerX.! !
!TerniLapilliPlayerXTurn methodsFor: 'no messages' stamp: 'MG 11/1/2020 20:20:41' overrides: 50887814!
changeTurn: aTerniLapilliGame

	aTerniLapilliGame changeTurnToPlayerO.! !
!TerniLapilli methodsFor: 'initialization' stamp: 'MG 11/1/2020 20:21:29' prior: 50887555 overrides: 16896425!
initialize 
	
	playerX := Player new.
	playerO := Player new.
	"el siguiente colaborador podria haberse abstraido en otro objeto
	nuevo pero no lo vimos necesario.
	Para que se inicialice con un estado valido pusimos que el ultimo jugador
	fuera el O aunque el juego recien comenzara"
	lastPlayer := playerO.
	
	gameState := TerniLapilliState gameStateFor: self.! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'playerX playerO lastPlayer playerTurn gameState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: #'Terni Lapilli' stamp: 'MG 11/1/2020 20:21:43'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'playerX playerO lastPlayer playerTurn gameState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'initialization' stamp: 'MG 11/1/2020 20:21:55' prior: 50887879 overrides: 16896425!
initialize 
	
	playerX := Player new.
	playerO := Player new.
	"el siguiente colaborador podria haberse abstraido en otro objeto
	nuevo pero no lo vimos necesario.
	Para que se inicialice con un estado valido pusimos que el ultimo jugador
	fuera el O aunque el juego recien comenzara"
	lastPlayer := playerO.
	playerTurn := ''.
	gameState := TerniLapilliState gameStateFor: self.! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'playerX playerO lastPlayer currentTurn gameState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: #'Terni Lapilli' stamp: 'MG 11/1/2020 20:22:01'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'playerX playerO lastPlayer currentTurn gameState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'initialization' stamp: 'MG 11/1/2020 20:22:48' prior: 50887908 overrides: 16896425!
initialize 
	
	playerX := Player new.
	playerO := Player new.
	currentTurn := TerniLapilliPlayerXTurn new.
	gameState := TerniLapilliState gameStateFor: self.! !
!TerniLapilli methodsFor: 'initialization' stamp: 'MG 11/1/2020 20:22:54' prior: 50887938 overrides: 16896425!
initialize 
	
	playerX := Player new.
	playerO := Player new.
	currentTurn := TerniLapilliPlayerXTurn newWith: playerX.
	gameState := TerniLapilliState gameStateFor: self.! !
!TerniLapilliPlayerTurn class methodsFor: 'no messages' stamp: 'MG 11/1/2020 20:23:37'!
newWith: aPlayer
	
	^self new initializeWith: aPlayer.! !
!TerniLapilliPlayerTurn methodsFor: 'game state' stamp: 'MG 11/1/2020 20:24:03'!
initializeWith: aPlayer
	
	player := aPlayer.! !
!TerniLapilli methodsFor: 'game state -- private' stamp: 'MG 11/1/2020 20:24:49' prior: 50887570!
isPlaying: aPlayer
	
	^''.
! !
!TerniLapilli methodsFor: 'game state -- private' stamp: 'MG 11/1/2020 20:25:06' prior: 50887966!
isPlaying: aPlayer
	
	^currentTurn isPlaying: aPlayer.
! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 11/1/2020 20:25:42' prior: 50885775!
updateGameStateAfterPlayFrom: aPlayer
	
	gameState := TerniLapilliState gameStateFor: self.
	! !
!TerniLapilli methodsFor: 'gameplay -- private' stamp: 'MG 11/1/2020 20:26:02' prior: 50887976!
updateGameStateAfterPlayFrom: aPlayer
	
	currentTurn := ''.
	gameState := TerniLapilliState gameStateFor: self.
	! !
!TerniLapilli methodsFor: 'game state -- private' stamp: 'MG 11/1/2020 20:26:53' prior: 50887983!
updateGameStateAfterPlayFrom: aPlayer
	
	currentTurn := currentTurn changeTurn: aPlayer.
	gameState := TerniLapilliState gameStateFor: self.
	! !
!TerniLapilli methodsFor: 'game state -- private' stamp: 'MG 11/1/2020 20:26:59' prior: 50887990!
updateGameStateAfterPlayFrom: aPlayer
	
	currentTurn := currentTurn changeTurn: self.
	gameState := TerniLapilliState gameStateFor: self.
	! !
!TerniLapilli methodsFor: 'game state -- private' stamp: 'MG 11/1/2020 20:27:14' prior: 50887998!
updateGameStateAfterPlayFrom: aPlayer
	
	currentTurn changeTurn: self.
	gameState := TerniLapilliState gameStateFor: self.
	! !
!TerniLapilli methodsFor: 'game state -- private' stamp: 'MG 11/1/2020 20:27:21'!
changeTurnToPlayerX! !
!TerniLapilli methodsFor: 'game state -- private' stamp: 'MG 11/1/2020 20:27:38' prior: 50888013!
changeTurnToPlayerX

	! !
!TerniLapilli methodsFor: 'game state -- private' stamp: 'MG 11/1/2020 20:27:53' prior: 50888017!
changeTurnToPlayerX

	currentTurn := TerniLapilliPlayerXTurn newWith: playerO.! !
!TerniLapilli methodsFor: 'game state -- private' stamp: 'MG 11/1/2020 20:28:06' prior: 50888021!
changeTurnToPlayerX

	currentTurn := TerniLapilliPlayerXTurn newWith: playerX.! !
!TerniLapilli methodsFor: 'game state -- private' stamp: 'MG 11/1/2020 20:28:14'!
changeTurnToPlayerO

	currentTurn := TerniLapilliPlayerOTurn newWith: playerO.! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'playerX playerO currentTurn gameState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: #'Terni Lapilli' stamp: 'MG 11/1/2020 20:28:32'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'playerX playerO currentTurn gameState'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!testRun: #TerniLapilliTest #test01OnGameStartPlayerXBegins stamp: 'MG 11/1/2020 20:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test02AfterPlayerXTurnPlayerOShouldPlay stamp: 'MG 11/1/2020 20:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test03AfterPlayerOTurnPlayerXShouldMove stamp: 'MG 11/1/2020 20:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test04PlayerOCantPlayOnPlayerXTurn stamp: 'MG 11/1/2020 20:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test05PlayerXCantPlayOnPlayerOTurn stamp: 'MG 11/1/2020 20:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test06PlayersCantPutMoreThanThreeTokensEach stamp: 'MG 11/1/2020 20:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test07PlayerXTokenIsPlacedCorrectly stamp: 'MG 11/1/2020 20:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test08PlayerOTokenIsPlacedCorrectly stamp: 'MG 11/1/2020 20:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test09PlayersCantStackTokens stamp: 'MG 11/1/2020 20:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test10TokenCantBePutOutsideBoard stamp: 'MG 11/1/2020 20:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test11TokenFromAnyPointCanBeMovedNonDiagonally stamp: 'MG 11/1/2020 20:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test12TokenFromNonStarPointCantBeMovedDiagonally stamp: 'MG 11/1/2020 20:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test13TokenCantBeMovedOutOfBoard stamp: 'MG 11/1/2020 20:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveInexistentToken stamp: 'MG 11/1/2020 20:28:36'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveAndStackTokens stamp: 'MG 11/1/2020 20:28:37'!
PASSED!

!testRun: #TerniLapilliTest #test16PlayerCantMoveOnOtherPlayersTurn stamp: 'MG 11/1/2020 20:28:37'!
PASSED!

!testRun: #TerniLapilliTest #test17PlayerCantMoveOnPutPhase stamp: 'MG 11/1/2020 20:28:37'!
PASSED!

!testRun: #TerniLapilliTest #test18CantMoveToNonNeighborPoint stamp: 'MG 11/1/2020 20:28:37'!
PASSED!

!testRun: #TerniLapilliTest #test19GameIsOverWhen3TokensAreInLine stamp: 'MG 11/1/2020 20:28:37'!
PASSED!

!testRun: #TerniLapilliTest #test20CantPlayTokenWhenGameIsOver stamp: 'MG 11/1/2020 20:28:37'!
PASSED!

!testRun: #TerniLapilliTest #test21CantMoveTokenWhenGameIsOver stamp: 'MG 11/1/2020 20:28:37'!
PASSED!
!TerniLapilli methodsFor: 'gameplay verifies -- private' stamp: 'MG 11/1/2020 20:29:53' prior: 50886020!
verifyPlayerTurn: aPlayer 
	
	(self isPlaying: aPlayer) ifFalse: [^self error: (self class invalidTurnPlayMessage)].
	
	! !

----QUIT----(1 November 2020 20:30:54) CuisUniversity-4365.image priorSource: 17795481!